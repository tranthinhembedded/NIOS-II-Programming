
bai3.elf:     file format elf32-littlenios2
bai3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000055cc memsz 0x000055cc flags r-x
    LOAD off    0x000065ec vaddr 0x000155ec paddr 0x00017034 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008a7c vaddr 0x00018a7c paddr 0x00018a7c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053e8  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  0001559c  0001559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  000155ec  00017034  000065ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00018a7c  00018a7c  00008a7c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008060  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d51  00000000  00000000  00008958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000195b3  00000000  00000000  000096a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f02  00000000  00000000  00022c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c7f1  00000000  00000000  00027b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001010  00000000  00000000  00034350  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015ec  00000000  00000000  00035360  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e08  00000000  00000000  0003694c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003a754  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003a778  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ce59  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003ce5c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ce69  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003ce6a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003ce75  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003ce80  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0003ce8b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0003ce93  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000760c6  00000000  00000000  0003ceb7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
0001559c l    d  .rodata	00000000 .rodata
000155ec l    d  .rwdata	00000000 .rwdata
00018a7c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000155ec l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011b5c l     F .text	00000058 std
00011c68 l     F .text	00000008 __fp_lock
00011c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00012c30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012c90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012d90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012eb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012f90 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000130ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013318 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017024 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000135b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015f9c l     O .rwdata	00001060 jtag_uart_0
000136a4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000138e4 l     F .text	00000228 altera_avalon_jtag_uart_irq
00013b0c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014188 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000144ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000148d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014a0c l     F .text	000000dc alt_file_locked
00014c70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00015384 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00015538 l     F .text	00000040 alt_sim_halt
000129d4 g     F .text	00000070 _isatty_r
0001314c g     F .text	0000006c alt_main
00010224 g     F .text	000000a0 _puts_r
00018acc g     O .bss	00000100 alt_irq
00012a44 g     F .text	00000078 _lseek_r
00017034 g       *ABS*	00000000 __flash_rwdata_start
00018d5c g       *ABS*	00000000 __alt_heap_start
00012610 g     F .text	00000068 __sseek
00011bc4 g     F .text	000000a4 __sinit
00011cc4 g     F .text	00000068 __sfmoreglue
000131d8 g     F .text	00000020 __malloc_unlock
000110ac g     F .text	000000e0 memmove
00011cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012960 g     F .text	00000074 _fstat_r
00018a88 g     O .bss	00000004 errno
00018a90 g     O .bss	00000004 alt_argv
0001effc g       *ABS*	00000000 _gp
00015e1c g     O .rwdata	00000180 alt_fd_list
00014e94 g     F .text	00000094 alt_find_dev
0001100c g     F .text	000000a0 memcpy
00011ca8 g     F .text	0000000c _cleanup_r
00014994 g     F .text	00000078 alt_io_redirect
0001559c g       *ABS*	00000000 __DTOR_END__
000102c4 g     F .text	00000014 puts
00013d24 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00012df0 g     F .text	000000c0 isatty
00015100 g     F .text	00000090 alt_icache_flush
00018a7c g     O .bss	00000004 __malloc_top_pad
0001034c g     F .text	0000049c __sfvwrite_r
00011780 g     F .text	00000070 _sbrk_r
00012abc g     F .text	00000078 _read_r
0001701c g     O .rwdata	00000004 alt_max_fd
0001283c g     F .text	00000110 _fclose_r
00011b28 g     F .text	00000034 fflush
00018a80 g     O .bss	00000004 __malloc_max_sbrked_mem
00012ffc g     F .text	000000f0 lseek
00017000 g     O .rwdata	00000004 _global_impure_ptr
0001118c g     F .text	000005f4 _realloc_r
00018d5c g       *ABS*	00000000 __bss_end
000147d8 g     F .text	000000f8 alt_iic_isr_register
00014d68 g     F .text	0000010c alt_tick
00011c90 g     F .text	00000018 __fp_lock_all
00014790 g     F .text	00000048 alt_ic_irq_enabled
00014cd0 g     F .text	00000098 alt_alarm_stop
00018a98 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00015df4 g     O .rwdata	00000028 alt_dev_null
000143dc g     F .text	0000001c alt_dcache_flush_all
00017034 g       *ABS*	00000000 __ram_rwdata_end
00017014 g     O .rwdata	00000008 alt_dev_list
00013494 g     F .text	00000120 write
000155ec g       *ABS*	00000000 __ram_rodata_end
00012cbc g     F .text	000000d4 fstat
00018d5c g       *ABS*	00000000 end
00013824 g     F .text	000000c0 altera_avalon_jtag_uart_init
00015598 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
000141f8 g     F .text	00000090 alt_avalon_timer_sc_init
00013f48 g     F .text	00000240 altera_avalon_jtag_uart_write
00011bb4 g     F .text	00000004 __sfp_lock_acquire
00010f28 g     F .text	000000e4 memchr
00011f48 g     F .text	00000314 _free_r
00015388 g     F .text	000001b0 __call_exitprocs
00017008 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00018a9c g     O .bss	00000004 _alt_tick_rate
00018aa0 g     O .bss	00000004 _alt_nticks
000131f8 g     F .text	00000120 read
00013648 g     F .text	0000005c alt_sys_init
00015250 g     F .text	00000134 __register_exitproc
00013bbc g     F .text	00000074 altera_avalon_jtag_uart_close
000155ec g       *ABS*	00000000 __ram_rwdata_start
0001559c g       *ABS*	00000000 __ram_rodata_start
00018aa4 g     O .bss	00000028 __malloc_current_mallinfo
000136dc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00015048 g     F .text	000000b8 alt_get_fd
000127cc g     F .text	00000070 _close_r
000151dc g     F .text	00000074 memcmp
0001378c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00018d5c g       *ABS*	00000000 __alt_stack_base
000137d4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000117f0 g     F .text	0000013c __swsetup_r
00011d2c g     F .text	000000f0 __sfp
000159ec g     O .rwdata	00000408 __malloc_av_
00011bc0 g     F .text	00000004 __sinit_lock_release
000126f4 g     F .text	00000060 __sread
00014f28 g     F .text	00000120 alt_find_file
000143f8 g     F .text	000000b4 alt_dev_llist_insert
000131b8 g     F .text	00000020 __malloc_lock
000133d8 g     F .text	000000bc sbrk
0001192c g     F .text	000001fc _fflush_r
00018a7c g       *ABS*	00000000 __bss_start
00012570 g     F .text	00000098 memset
000101f0 g     F .text	00000034 main
00018a94 g     O .bss	00000004 alt_envp
00018a84 g     O .bss	00000004 __malloc_max_total_mem
00013734 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012608 g     F .text	00000008 __sclose
00019c40 g       *ABS*	00000000 __alt_heap_limit
0001294c g     F .text	00000014 fclose
00018bcc g     O .bss	00000190 _atexit0
000107e8 g     F .text	00000740 _malloc_r
00017020 g     O .rwdata	00000004 alt_errno
00012324 g     F .text	000000b8 _fwalk
00011e1c g     F .text	0000012c _malloc_trim_r
0001559c g       *ABS*	00000000 __CTOR_END__
0001559c g       *ABS*	00000000 __flash_rodata_start
0001559c g       *ABS*	00000000 __DTOR_LIST__
00013614 g     F .text	00000034 alt_irq_init
00013378 g     F .text	00000060 alt_release_fd
00015190 g     F .text	00000014 atexit
00012754 g     F .text	00000078 _write_r
00016ffc g     O .rwdata	00000004 _impure_ptr
00018a8c g     O .bss	00000004 alt_argc
00014570 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00011c78 g     F .text	00000018 __fp_unlock_all
0001700c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014604 g     F .text	00000050 alt_ic_isr_register
00017034 g       *ABS*	00000000 _edata
00018d5c g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00013c30 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000146f0 g     F .text	000000a0 alt_ic_irq_disable
00012678 g     F .text	0000007c __swrite
00017004 g     O .rwdata	00000004 __malloc_trim_threshold
00014e74 g     F .text	00000020 altera_nios2_qsys_irq_init
000151a4 g     F .text	00000038 exit
0001225c g     F .text	000000c8 _fwalk_reent
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011bb8 g     F .text	00000004 __sfp_lock_release
00015578 g     F .text	00000020 _exit
00014288 g     F .text	00000154 alt_alarm_start
000123dc g     F .text	00000194 __smakebuf_r
000102d8 g     F .text	00000074 strlen
00014ae8 g     F .text	00000188 open
000145d4 g     F .text	00000030 alt_icache_flush_all
00017028 g     O .rwdata	00000004 alt_priority_mask
00014654 g     F .text	0000009c alt_ic_irq_enable
0001702c g     O .rwdata	00000008 alt_alarm_list
0001450c g     F .text	00000064 _do_ctors
00012b34 g     F .text	000000fc close
00012f10 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00011bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000b4 	movhi	r3,2
   10134:	18e2b304 	addi	r3,r3,-30004
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000b4 	movhi	r3,2
   1014c:	18e2b304 	addi	r3,r3,-30004
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dee71014 	ori	sp,sp,40000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6bbff14 	ori	gp,gp,61436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101c8:	10a29f14 	ori	r2,r2,35452

    movhi r3, %hi(__bss_end)
   101cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d0:	18e35714 	ori	r3,r3,36188

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	0012f100 	call	12f10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	001314c0 	call	1314c <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <main>:
 */

#include <stdio.h>

int main()
{
   101f0:	defffe04 	addi	sp,sp,-8
   101f4:	dfc00115 	stw	ra,4(sp)
   101f8:	df000015 	stw	fp,0(sp)
   101fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   10200:	01000074 	movhi	r4,1
   10204:	21156704 	addi	r4,r4,21916
   10208:	00102c40 	call	102c4 <puts>

  return 0;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

00010224 <_puts_r>:
   10224:	defff604 	addi	sp,sp,-40
   10228:	dc400715 	stw	r17,28(sp)
   1022c:	2023883a 	mov	r17,r4
   10230:	2809883a 	mov	r4,r5
   10234:	dfc00915 	stw	ra,36(sp)
   10238:	dcc00815 	stw	r19,32(sp)
   1023c:	2827883a 	mov	r19,r5
   10240:	00102d80 	call	102d8 <strlen>
   10244:	89400217 	ldw	r5,8(r17)
   10248:	00c00074 	movhi	r3,1
   1024c:	18d56c04 	addi	r3,r3,21936
   10250:	01c00044 	movi	r7,1
   10254:	12000044 	addi	r8,r2,1
   10258:	d8c00515 	stw	r3,20(sp)
   1025c:	d9c00615 	stw	r7,24(sp)
   10260:	d8c00304 	addi	r3,sp,12
   10264:	01c00084 	movi	r7,2
   10268:	8809883a 	mov	r4,r17
   1026c:	d80d883a 	mov	r6,sp
   10270:	d8c00015 	stw	r3,0(sp)
   10274:	dcc00315 	stw	r19,12(sp)
   10278:	da000215 	stw	r8,8(sp)
   1027c:	d9c00115 	stw	r7,4(sp)
   10280:	d8800415 	stw	r2,16(sp)
   10284:	001034c0 	call	1034c <__sfvwrite_r>
   10288:	00ffffc4 	movi	r3,-1
   1028c:	10000626 	beq	r2,zero,102a8 <_puts_r+0x84>
   10290:	1805883a 	mov	r2,r3
   10294:	dfc00917 	ldw	ra,36(sp)
   10298:	dcc00817 	ldw	r19,32(sp)
   1029c:	dc400717 	ldw	r17,28(sp)
   102a0:	dec00a04 	addi	sp,sp,40
   102a4:	f800283a 	ret
   102a8:	00c00284 	movi	r3,10
   102ac:	1805883a 	mov	r2,r3
   102b0:	dfc00917 	ldw	ra,36(sp)
   102b4:	dcc00817 	ldw	r19,32(sp)
   102b8:	dc400717 	ldw	r17,28(sp)
   102bc:	dec00a04 	addi	sp,sp,40
   102c0:	f800283a 	ret

000102c4 <puts>:
   102c4:	00800074 	movhi	r2,1
   102c8:	109bff04 	addi	r2,r2,28668
   102cc:	200b883a 	mov	r5,r4
   102d0:	11000017 	ldw	r4,0(r2)
   102d4:	00102241 	jmpi	10224 <_puts_r>

000102d8 <strlen>:
   102d8:	208000cc 	andi	r2,r4,3
   102dc:	2011883a 	mov	r8,r4
   102e0:	1000161e 	bne	r2,zero,1033c <strlen+0x64>
   102e4:	20c00017 	ldw	r3,0(r4)
   102e8:	017fbff4 	movhi	r5,65279
   102ec:	297fbfc4 	addi	r5,r5,-257
   102f0:	01e02074 	movhi	r7,32897
   102f4:	39e02004 	addi	r7,r7,-32640
   102f8:	1945883a 	add	r2,r3,r5
   102fc:	11c4703a 	and	r2,r2,r7
   10300:	00c6303a 	nor	r3,zero,r3
   10304:	1886703a 	and	r3,r3,r2
   10308:	18000c1e 	bne	r3,zero,1033c <strlen+0x64>
   1030c:	280d883a 	mov	r6,r5
   10310:	380b883a 	mov	r5,r7
   10314:	21000104 	addi	r4,r4,4
   10318:	20800017 	ldw	r2,0(r4)
   1031c:	1187883a 	add	r3,r2,r6
   10320:	1946703a 	and	r3,r3,r5
   10324:	0084303a 	nor	r2,zero,r2
   10328:	10c4703a 	and	r2,r2,r3
   1032c:	103ff926 	beq	r2,zero,10314 <strlen+0x3c>
   10330:	20800007 	ldb	r2,0(r4)
   10334:	10000326 	beq	r2,zero,10344 <strlen+0x6c>
   10338:	21000044 	addi	r4,r4,1
   1033c:	20800007 	ldb	r2,0(r4)
   10340:	103ffd1e 	bne	r2,zero,10338 <strlen+0x60>
   10344:	2205c83a 	sub	r2,r4,r8
   10348:	f800283a 	ret

0001034c <__sfvwrite_r>:
   1034c:	30800217 	ldw	r2,8(r6)
   10350:	defff504 	addi	sp,sp,-44
   10354:	df000915 	stw	fp,36(sp)
   10358:	dd800715 	stw	r22,28(sp)
   1035c:	dc800315 	stw	r18,12(sp)
   10360:	dfc00a15 	stw	ra,40(sp)
   10364:	ddc00815 	stw	r23,32(sp)
   10368:	dd400615 	stw	r21,24(sp)
   1036c:	dd000515 	stw	r20,20(sp)
   10370:	dcc00415 	stw	r19,16(sp)
   10374:	dc400215 	stw	r17,8(sp)
   10378:	dc000115 	stw	r16,4(sp)
   1037c:	302d883a 	mov	r22,r6
   10380:	2039883a 	mov	fp,r4
   10384:	2825883a 	mov	r18,r5
   10388:	10001c26 	beq	r2,zero,103fc <__sfvwrite_r+0xb0>
   1038c:	29c0030b 	ldhu	r7,12(r5)
   10390:	3880020c 	andi	r2,r7,8
   10394:	10002726 	beq	r2,zero,10434 <__sfvwrite_r+0xe8>
   10398:	28800417 	ldw	r2,16(r5)
   1039c:	10002526 	beq	r2,zero,10434 <__sfvwrite_r+0xe8>
   103a0:	3880008c 	andi	r2,r7,2
   103a4:	b5400017 	ldw	r21,0(r22)
   103a8:	10002826 	beq	r2,zero,1044c <__sfvwrite_r+0x100>
   103ac:	0021883a 	mov	r16,zero
   103b0:	0023883a 	mov	r17,zero
   103b4:	880d883a 	mov	r6,r17
   103b8:	e009883a 	mov	r4,fp
   103bc:	00810004 	movi	r2,1024
   103c0:	80006e26 	beq	r16,zero,1057c <__sfvwrite_r+0x230>
   103c4:	800f883a 	mov	r7,r16
   103c8:	91400717 	ldw	r5,28(r18)
   103cc:	1400012e 	bgeu	r2,r16,103d4 <__sfvwrite_r+0x88>
   103d0:	100f883a 	mov	r7,r2
   103d4:	90c00917 	ldw	r3,36(r18)
   103d8:	183ee83a 	callr	r3
   103dc:	1007883a 	mov	r3,r2
   103e0:	80a1c83a 	sub	r16,r16,r2
   103e4:	88a3883a 	add	r17,r17,r2
   103e8:	00806d0e 	bge	zero,r2,105a0 <__sfvwrite_r+0x254>
   103ec:	b0800217 	ldw	r2,8(r22)
   103f0:	10c5c83a 	sub	r2,r2,r3
   103f4:	b0800215 	stw	r2,8(r22)
   103f8:	103fee1e 	bne	r2,zero,103b4 <__sfvwrite_r+0x68>
   103fc:	0009883a 	mov	r4,zero
   10400:	2005883a 	mov	r2,r4
   10404:	dfc00a17 	ldw	ra,40(sp)
   10408:	df000917 	ldw	fp,36(sp)
   1040c:	ddc00817 	ldw	r23,32(sp)
   10410:	dd800717 	ldw	r22,28(sp)
   10414:	dd400617 	ldw	r21,24(sp)
   10418:	dd000517 	ldw	r20,20(sp)
   1041c:	dcc00417 	ldw	r19,16(sp)
   10420:	dc800317 	ldw	r18,12(sp)
   10424:	dc400217 	ldw	r17,8(sp)
   10428:	dc000117 	ldw	r16,4(sp)
   1042c:	dec00b04 	addi	sp,sp,44
   10430:	f800283a 	ret
   10434:	00117f00 	call	117f0 <__swsetup_r>
   10438:	1000e41e 	bne	r2,zero,107cc <__sfvwrite_r+0x480>
   1043c:	91c0030b 	ldhu	r7,12(r18)
   10440:	b5400017 	ldw	r21,0(r22)
   10444:	3880008c 	andi	r2,r7,2
   10448:	103fd81e 	bne	r2,zero,103ac <__sfvwrite_r+0x60>
   1044c:	3880004c 	andi	r2,r7,1
   10450:	1005003a 	cmpeq	r2,r2,zero
   10454:	10005726 	beq	r2,zero,105b4 <__sfvwrite_r+0x268>
   10458:	0029883a 	mov	r20,zero
   1045c:	002f883a 	mov	r23,zero
   10460:	a0004226 	beq	r20,zero,1056c <__sfvwrite_r+0x220>
   10464:	3880800c 	andi	r2,r7,512
   10468:	94000217 	ldw	r16,8(r18)
   1046c:	10008b26 	beq	r2,zero,1069c <__sfvwrite_r+0x350>
   10470:	800d883a 	mov	r6,r16
   10474:	a400a536 	bltu	r20,r16,1070c <__sfvwrite_r+0x3c0>
   10478:	3881200c 	andi	r2,r7,1152
   1047c:	10002726 	beq	r2,zero,1051c <__sfvwrite_r+0x1d0>
   10480:	90800517 	ldw	r2,20(r18)
   10484:	92000417 	ldw	r8,16(r18)
   10488:	91400017 	ldw	r5,0(r18)
   1048c:	1087883a 	add	r3,r2,r2
   10490:	1887883a 	add	r3,r3,r2
   10494:	1808d7fa 	srli	r4,r3,31
   10498:	2a21c83a 	sub	r16,r5,r8
   1049c:	80800044 	addi	r2,r16,1
   104a0:	20c9883a 	add	r4,r4,r3
   104a4:	2027d07a 	srai	r19,r4,1
   104a8:	a085883a 	add	r2,r20,r2
   104ac:	980d883a 	mov	r6,r19
   104b0:	9880022e 	bgeu	r19,r2,104bc <__sfvwrite_r+0x170>
   104b4:	1027883a 	mov	r19,r2
   104b8:	100d883a 	mov	r6,r2
   104bc:	3881000c 	andi	r2,r7,1024
   104c0:	1000b826 	beq	r2,zero,107a4 <__sfvwrite_r+0x458>
   104c4:	300b883a 	mov	r5,r6
   104c8:	e009883a 	mov	r4,fp
   104cc:	00107e80 	call	107e8 <_malloc_r>
   104d0:	10003126 	beq	r2,zero,10598 <__sfvwrite_r+0x24c>
   104d4:	91400417 	ldw	r5,16(r18)
   104d8:	1009883a 	mov	r4,r2
   104dc:	800d883a 	mov	r6,r16
   104e0:	1023883a 	mov	r17,r2
   104e4:	001100c0 	call	1100c <memcpy>
   104e8:	90c0030b 	ldhu	r3,12(r18)
   104ec:	00beffc4 	movi	r2,-1025
   104f0:	1886703a 	and	r3,r3,r2
   104f4:	18c02014 	ori	r3,r3,128
   104f8:	90c0030d 	sth	r3,12(r18)
   104fc:	9c07c83a 	sub	r3,r19,r16
   10500:	8c05883a 	add	r2,r17,r16
   10504:	a00d883a 	mov	r6,r20
   10508:	a021883a 	mov	r16,r20
   1050c:	90800015 	stw	r2,0(r18)
   10510:	90c00215 	stw	r3,8(r18)
   10514:	94400415 	stw	r17,16(r18)
   10518:	94c00515 	stw	r19,20(r18)
   1051c:	91000017 	ldw	r4,0(r18)
   10520:	b80b883a 	mov	r5,r23
   10524:	a023883a 	mov	r17,r20
   10528:	00110ac0 	call	110ac <memmove>
   1052c:	90c00217 	ldw	r3,8(r18)
   10530:	90800017 	ldw	r2,0(r18)
   10534:	a027883a 	mov	r19,r20
   10538:	1c07c83a 	sub	r3,r3,r16
   1053c:	1405883a 	add	r2,r2,r16
   10540:	90c00215 	stw	r3,8(r18)
   10544:	a021883a 	mov	r16,r20
   10548:	90800015 	stw	r2,0(r18)
   1054c:	b0800217 	ldw	r2,8(r22)
   10550:	1405c83a 	sub	r2,r2,r16
   10554:	b0800215 	stw	r2,8(r22)
   10558:	103fa826 	beq	r2,zero,103fc <__sfvwrite_r+0xb0>
   1055c:	a469c83a 	sub	r20,r20,r17
   10560:	91c0030b 	ldhu	r7,12(r18)
   10564:	bcef883a 	add	r23,r23,r19
   10568:	a03fbe1e 	bne	r20,zero,10464 <__sfvwrite_r+0x118>
   1056c:	adc00017 	ldw	r23,0(r21)
   10570:	ad000117 	ldw	r20,4(r21)
   10574:	ad400204 	addi	r21,r21,8
   10578:	003fb906 	br	10460 <__sfvwrite_r+0x114>
   1057c:	ac400017 	ldw	r17,0(r21)
   10580:	ac000117 	ldw	r16,4(r21)
   10584:	ad400204 	addi	r21,r21,8
   10588:	003f8a06 	br	103b4 <__sfvwrite_r+0x68>
   1058c:	91400417 	ldw	r5,16(r18)
   10590:	e009883a 	mov	r4,fp
   10594:	0011f480 	call	11f48 <_free_r>
   10598:	00800304 	movi	r2,12
   1059c:	e0800015 	stw	r2,0(fp)
   105a0:	9080030b 	ldhu	r2,12(r18)
   105a4:	013fffc4 	movi	r4,-1
   105a8:	10801014 	ori	r2,r2,64
   105ac:	9080030d 	sth	r2,12(r18)
   105b0:	003f9306 	br	10400 <__sfvwrite_r+0xb4>
   105b4:	0027883a 	mov	r19,zero
   105b8:	002f883a 	mov	r23,zero
   105bc:	d8000015 	stw	zero,0(sp)
   105c0:	0029883a 	mov	r20,zero
   105c4:	98001e26 	beq	r19,zero,10640 <__sfvwrite_r+0x2f4>
   105c8:	d8c00017 	ldw	r3,0(sp)
   105cc:	1804c03a 	cmpne	r2,r3,zero
   105d0:	10005e26 	beq	r2,zero,1074c <__sfvwrite_r+0x400>
   105d4:	9821883a 	mov	r16,r19
   105d8:	a4c0012e 	bgeu	r20,r19,105e0 <__sfvwrite_r+0x294>
   105dc:	a021883a 	mov	r16,r20
   105e0:	91000017 	ldw	r4,0(r18)
   105e4:	90800417 	ldw	r2,16(r18)
   105e8:	91800217 	ldw	r6,8(r18)
   105ec:	91c00517 	ldw	r7,20(r18)
   105f0:	1100022e 	bgeu	r2,r4,105fc <__sfvwrite_r+0x2b0>
   105f4:	31e3883a 	add	r17,r6,r7
   105f8:	8c001616 	blt	r17,r16,10654 <__sfvwrite_r+0x308>
   105fc:	81c03816 	blt	r16,r7,106e0 <__sfvwrite_r+0x394>
   10600:	90c00917 	ldw	r3,36(r18)
   10604:	91400717 	ldw	r5,28(r18)
   10608:	e009883a 	mov	r4,fp
   1060c:	b80d883a 	mov	r6,r23
   10610:	183ee83a 	callr	r3
   10614:	1023883a 	mov	r17,r2
   10618:	00bfe10e 	bge	zero,r2,105a0 <__sfvwrite_r+0x254>
   1061c:	a469c83a 	sub	r20,r20,r17
   10620:	a0001826 	beq	r20,zero,10684 <__sfvwrite_r+0x338>
   10624:	b0800217 	ldw	r2,8(r22)
   10628:	1445c83a 	sub	r2,r2,r17
   1062c:	b0800215 	stw	r2,8(r22)
   10630:	103f7226 	beq	r2,zero,103fc <__sfvwrite_r+0xb0>
   10634:	9c67c83a 	sub	r19,r19,r17
   10638:	bc6f883a 	add	r23,r23,r17
   1063c:	983fe21e 	bne	r19,zero,105c8 <__sfvwrite_r+0x27c>
   10640:	adc00017 	ldw	r23,0(r21)
   10644:	acc00117 	ldw	r19,4(r21)
   10648:	ad400204 	addi	r21,r21,8
   1064c:	d8000015 	stw	zero,0(sp)
   10650:	003fdc06 	br	105c4 <__sfvwrite_r+0x278>
   10654:	b80b883a 	mov	r5,r23
   10658:	880d883a 	mov	r6,r17
   1065c:	00110ac0 	call	110ac <memmove>
   10660:	90c00017 	ldw	r3,0(r18)
   10664:	e009883a 	mov	r4,fp
   10668:	900b883a 	mov	r5,r18
   1066c:	1c47883a 	add	r3,r3,r17
   10670:	90c00015 	stw	r3,0(r18)
   10674:	001192c0 	call	1192c <_fflush_r>
   10678:	103fc91e 	bne	r2,zero,105a0 <__sfvwrite_r+0x254>
   1067c:	a469c83a 	sub	r20,r20,r17
   10680:	a03fe81e 	bne	r20,zero,10624 <__sfvwrite_r+0x2d8>
   10684:	e009883a 	mov	r4,fp
   10688:	900b883a 	mov	r5,r18
   1068c:	001192c0 	call	1192c <_fflush_r>
   10690:	103fc31e 	bne	r2,zero,105a0 <__sfvwrite_r+0x254>
   10694:	d8000015 	stw	zero,0(sp)
   10698:	003fe206 	br	10624 <__sfvwrite_r+0x2d8>
   1069c:	91000017 	ldw	r4,0(r18)
   106a0:	90800417 	ldw	r2,16(r18)
   106a4:	1100022e 	bgeu	r2,r4,106b0 <__sfvwrite_r+0x364>
   106a8:	8023883a 	mov	r17,r16
   106ac:	85003136 	bltu	r16,r20,10774 <__sfvwrite_r+0x428>
   106b0:	91c00517 	ldw	r7,20(r18)
   106b4:	a1c01836 	bltu	r20,r7,10718 <__sfvwrite_r+0x3cc>
   106b8:	90c00917 	ldw	r3,36(r18)
   106bc:	91400717 	ldw	r5,28(r18)
   106c0:	e009883a 	mov	r4,fp
   106c4:	b80d883a 	mov	r6,r23
   106c8:	183ee83a 	callr	r3
   106cc:	1021883a 	mov	r16,r2
   106d0:	00bfb30e 	bge	zero,r2,105a0 <__sfvwrite_r+0x254>
   106d4:	1023883a 	mov	r17,r2
   106d8:	1027883a 	mov	r19,r2
   106dc:	003f9b06 	br	1054c <__sfvwrite_r+0x200>
   106e0:	b80b883a 	mov	r5,r23
   106e4:	800d883a 	mov	r6,r16
   106e8:	00110ac0 	call	110ac <memmove>
   106ec:	90c00217 	ldw	r3,8(r18)
   106f0:	90800017 	ldw	r2,0(r18)
   106f4:	8023883a 	mov	r17,r16
   106f8:	1c07c83a 	sub	r3,r3,r16
   106fc:	1405883a 	add	r2,r2,r16
   10700:	90c00215 	stw	r3,8(r18)
   10704:	90800015 	stw	r2,0(r18)
   10708:	003fc406 	br	1061c <__sfvwrite_r+0x2d0>
   1070c:	a00d883a 	mov	r6,r20
   10710:	a021883a 	mov	r16,r20
   10714:	003f8106 	br	1051c <__sfvwrite_r+0x1d0>
   10718:	b80b883a 	mov	r5,r23
   1071c:	a00d883a 	mov	r6,r20
   10720:	00110ac0 	call	110ac <memmove>
   10724:	90c00217 	ldw	r3,8(r18)
   10728:	90800017 	ldw	r2,0(r18)
   1072c:	a021883a 	mov	r16,r20
   10730:	1d07c83a 	sub	r3,r3,r20
   10734:	1505883a 	add	r2,r2,r20
   10738:	a023883a 	mov	r17,r20
   1073c:	a027883a 	mov	r19,r20
   10740:	90c00215 	stw	r3,8(r18)
   10744:	90800015 	stw	r2,0(r18)
   10748:	003f8006 	br	1054c <__sfvwrite_r+0x200>
   1074c:	b809883a 	mov	r4,r23
   10750:	01400284 	movi	r5,10
   10754:	980d883a 	mov	r6,r19
   10758:	0010f280 	call	10f28 <memchr>
   1075c:	10001726 	beq	r2,zero,107bc <__sfvwrite_r+0x470>
   10760:	15c5c83a 	sub	r2,r2,r23
   10764:	15000044 	addi	r20,r2,1
   10768:	00800044 	movi	r2,1
   1076c:	d8800015 	stw	r2,0(sp)
   10770:	003f9806 	br	105d4 <__sfvwrite_r+0x288>
   10774:	b80b883a 	mov	r5,r23
   10778:	800d883a 	mov	r6,r16
   1077c:	00110ac0 	call	110ac <memmove>
   10780:	90c00017 	ldw	r3,0(r18)
   10784:	e009883a 	mov	r4,fp
   10788:	900b883a 	mov	r5,r18
   1078c:	1c07883a 	add	r3,r3,r16
   10790:	90c00015 	stw	r3,0(r18)
   10794:	8027883a 	mov	r19,r16
   10798:	001192c0 	call	1192c <_fflush_r>
   1079c:	103f6b26 	beq	r2,zero,1054c <__sfvwrite_r+0x200>
   107a0:	003f7f06 	br	105a0 <__sfvwrite_r+0x254>
   107a4:	400b883a 	mov	r5,r8
   107a8:	e009883a 	mov	r4,fp
   107ac:	001118c0 	call	1118c <_realloc_r>
   107b0:	103f7626 	beq	r2,zero,1058c <__sfvwrite_r+0x240>
   107b4:	1023883a 	mov	r17,r2
   107b8:	003f5006 	br	104fc <__sfvwrite_r+0x1b0>
   107bc:	00c00044 	movi	r3,1
   107c0:	9d000044 	addi	r20,r19,1
   107c4:	d8c00015 	stw	r3,0(sp)
   107c8:	003f8206 	br	105d4 <__sfvwrite_r+0x288>
   107cc:	9080030b 	ldhu	r2,12(r18)
   107d0:	00c00244 	movi	r3,9
   107d4:	013fffc4 	movi	r4,-1
   107d8:	10801014 	ori	r2,r2,64
   107dc:	9080030d 	sth	r2,12(r18)
   107e0:	e0c00015 	stw	r3,0(fp)
   107e4:	003f0606 	br	10400 <__sfvwrite_r+0xb4>

000107e8 <_malloc_r>:
   107e8:	defff604 	addi	sp,sp,-40
   107ec:	28c002c4 	addi	r3,r5,11
   107f0:	00800584 	movi	r2,22
   107f4:	dc800215 	stw	r18,8(sp)
   107f8:	dfc00915 	stw	ra,36(sp)
   107fc:	df000815 	stw	fp,32(sp)
   10800:	ddc00715 	stw	r23,28(sp)
   10804:	dd800615 	stw	r22,24(sp)
   10808:	dd400515 	stw	r21,20(sp)
   1080c:	dd000415 	stw	r20,16(sp)
   10810:	dcc00315 	stw	r19,12(sp)
   10814:	dc400115 	stw	r17,4(sp)
   10818:	dc000015 	stw	r16,0(sp)
   1081c:	2025883a 	mov	r18,r4
   10820:	10c01236 	bltu	r2,r3,1086c <_malloc_r+0x84>
   10824:	04400404 	movi	r17,16
   10828:	8940142e 	bgeu	r17,r5,1087c <_malloc_r+0x94>
   1082c:	00800304 	movi	r2,12
   10830:	0007883a 	mov	r3,zero
   10834:	90800015 	stw	r2,0(r18)
   10838:	1805883a 	mov	r2,r3
   1083c:	dfc00917 	ldw	ra,36(sp)
   10840:	df000817 	ldw	fp,32(sp)
   10844:	ddc00717 	ldw	r23,28(sp)
   10848:	dd800617 	ldw	r22,24(sp)
   1084c:	dd400517 	ldw	r21,20(sp)
   10850:	dd000417 	ldw	r20,16(sp)
   10854:	dcc00317 	ldw	r19,12(sp)
   10858:	dc800217 	ldw	r18,8(sp)
   1085c:	dc400117 	ldw	r17,4(sp)
   10860:	dc000017 	ldw	r16,0(sp)
   10864:	dec00a04 	addi	sp,sp,40
   10868:	f800283a 	ret
   1086c:	00bffe04 	movi	r2,-8
   10870:	18a2703a 	and	r17,r3,r2
   10874:	883fed16 	blt	r17,zero,1082c <_malloc_r+0x44>
   10878:	897fec36 	bltu	r17,r5,1082c <_malloc_r+0x44>
   1087c:	9009883a 	mov	r4,r18
   10880:	00131b80 	call	131b8 <__malloc_lock>
   10884:	00807dc4 	movi	r2,503
   10888:	14402b2e 	bgeu	r2,r17,10938 <_malloc_r+0x150>
   1088c:	8806d27a 	srli	r3,r17,9
   10890:	18003f1e 	bne	r3,zero,10990 <_malloc_r+0x1a8>
   10894:	880cd0fa 	srli	r6,r17,3
   10898:	300490fa 	slli	r2,r6,3
   1089c:	02c00074 	movhi	r11,1
   108a0:	5ad67b04 	addi	r11,r11,23020
   108a4:	12cb883a 	add	r5,r2,r11
   108a8:	2c000317 	ldw	r16,12(r5)
   108ac:	580f883a 	mov	r7,r11
   108b0:	2c00041e 	bne	r5,r16,108c4 <_malloc_r+0xdc>
   108b4:	00000a06 	br	108e0 <_malloc_r+0xf8>
   108b8:	1800860e 	bge	r3,zero,10ad4 <_malloc_r+0x2ec>
   108bc:	84000317 	ldw	r16,12(r16)
   108c0:	2c000726 	beq	r5,r16,108e0 <_malloc_r+0xf8>
   108c4:	80800117 	ldw	r2,4(r16)
   108c8:	00ffff04 	movi	r3,-4
   108cc:	10c8703a 	and	r4,r2,r3
   108d0:	2447c83a 	sub	r3,r4,r17
   108d4:	008003c4 	movi	r2,15
   108d8:	10fff70e 	bge	r2,r3,108b8 <_malloc_r+0xd0>
   108dc:	31bfffc4 	addi	r6,r6,-1
   108e0:	32400044 	addi	r9,r6,1
   108e4:	02800074 	movhi	r10,1
   108e8:	52967d04 	addi	r10,r10,23028
   108ec:	54000217 	ldw	r16,8(r10)
   108f0:	8280a026 	beq	r16,r10,10b74 <_malloc_r+0x38c>
   108f4:	80800117 	ldw	r2,4(r16)
   108f8:	00ffff04 	movi	r3,-4
   108fc:	10ca703a 	and	r5,r2,r3
   10900:	2c4dc83a 	sub	r6,r5,r17
   10904:	008003c4 	movi	r2,15
   10908:	11808316 	blt	r2,r6,10b18 <_malloc_r+0x330>
   1090c:	52800315 	stw	r10,12(r10)
   10910:	52800215 	stw	r10,8(r10)
   10914:	30002916 	blt	r6,zero,109bc <_malloc_r+0x1d4>
   10918:	8147883a 	add	r3,r16,r5
   1091c:	18800117 	ldw	r2,4(r3)
   10920:	9009883a 	mov	r4,r18
   10924:	10800054 	ori	r2,r2,1
   10928:	18800115 	stw	r2,4(r3)
   1092c:	00131d80 	call	131d8 <__malloc_unlock>
   10930:	80c00204 	addi	r3,r16,8
   10934:	003fc006 	br	10838 <_malloc_r+0x50>
   10938:	02c00074 	movhi	r11,1
   1093c:	5ad67b04 	addi	r11,r11,23020
   10940:	8ac5883a 	add	r2,r17,r11
   10944:	14000317 	ldw	r16,12(r2)
   10948:	580f883a 	mov	r7,r11
   1094c:	8806d0fa 	srli	r3,r17,3
   10950:	14006c26 	beq	r2,r16,10b04 <_malloc_r+0x31c>
   10954:	80c00117 	ldw	r3,4(r16)
   10958:	00bfff04 	movi	r2,-4
   1095c:	81800317 	ldw	r6,12(r16)
   10960:	1886703a 	and	r3,r3,r2
   10964:	80c7883a 	add	r3,r16,r3
   10968:	18800117 	ldw	r2,4(r3)
   1096c:	81400217 	ldw	r5,8(r16)
   10970:	9009883a 	mov	r4,r18
   10974:	10800054 	ori	r2,r2,1
   10978:	18800115 	stw	r2,4(r3)
   1097c:	31400215 	stw	r5,8(r6)
   10980:	29800315 	stw	r6,12(r5)
   10984:	00131d80 	call	131d8 <__malloc_unlock>
   10988:	80c00204 	addi	r3,r16,8
   1098c:	003faa06 	br	10838 <_malloc_r+0x50>
   10990:	00800104 	movi	r2,4
   10994:	10c0052e 	bgeu	r2,r3,109ac <_malloc_r+0x1c4>
   10998:	00800504 	movi	r2,20
   1099c:	10c07836 	bltu	r2,r3,10b80 <_malloc_r+0x398>
   109a0:	198016c4 	addi	r6,r3,91
   109a4:	300490fa 	slli	r2,r6,3
   109a8:	003fbc06 	br	1089c <_malloc_r+0xb4>
   109ac:	8804d1ba 	srli	r2,r17,6
   109b0:	11800e04 	addi	r6,r2,56
   109b4:	300490fa 	slli	r2,r6,3
   109b8:	003fb806 	br	1089c <_malloc_r+0xb4>
   109bc:	00807fc4 	movi	r2,511
   109c0:	1140bb36 	bltu	r2,r5,10cb0 <_malloc_r+0x4c8>
   109c4:	2806d0fa 	srli	r3,r5,3
   109c8:	573ffe04 	addi	fp,r10,-8
   109cc:	00800044 	movi	r2,1
   109d0:	180890fa 	slli	r4,r3,3
   109d4:	1807d0ba 	srai	r3,r3,2
   109d8:	e1c00117 	ldw	r7,4(fp)
   109dc:	5909883a 	add	r4,r11,r4
   109e0:	21400217 	ldw	r5,8(r4)
   109e4:	10c4983a 	sll	r2,r2,r3
   109e8:	81000315 	stw	r4,12(r16)
   109ec:	81400215 	stw	r5,8(r16)
   109f0:	388eb03a 	or	r7,r7,r2
   109f4:	2c000315 	stw	r16,12(r5)
   109f8:	24000215 	stw	r16,8(r4)
   109fc:	e1c00115 	stw	r7,4(fp)
   10a00:	4807883a 	mov	r3,r9
   10a04:	4800cd16 	blt	r9,zero,10d3c <_malloc_r+0x554>
   10a08:	1807d0ba 	srai	r3,r3,2
   10a0c:	00800044 	movi	r2,1
   10a10:	10c8983a 	sll	r4,r2,r3
   10a14:	39004436 	bltu	r7,r4,10b28 <_malloc_r+0x340>
   10a18:	21c4703a 	and	r2,r4,r7
   10a1c:	10000a1e 	bne	r2,zero,10a48 <_malloc_r+0x260>
   10a20:	2109883a 	add	r4,r4,r4
   10a24:	00bfff04 	movi	r2,-4
   10a28:	4884703a 	and	r2,r9,r2
   10a2c:	3906703a 	and	r3,r7,r4
   10a30:	12400104 	addi	r9,r2,4
   10a34:	1800041e 	bne	r3,zero,10a48 <_malloc_r+0x260>
   10a38:	2109883a 	add	r4,r4,r4
   10a3c:	3904703a 	and	r2,r7,r4
   10a40:	4a400104 	addi	r9,r9,4
   10a44:	103ffc26 	beq	r2,zero,10a38 <_malloc_r+0x250>
   10a48:	480490fa 	slli	r2,r9,3
   10a4c:	4819883a 	mov	r12,r9
   10a50:	023fff04 	movi	r8,-4
   10a54:	589b883a 	add	r13,r11,r2
   10a58:	6807883a 	mov	r3,r13
   10a5c:	014003c4 	movi	r5,15
   10a60:	1c000317 	ldw	r16,12(r3)
   10a64:	1c00041e 	bne	r3,r16,10a78 <_malloc_r+0x290>
   10a68:	0000a706 	br	10d08 <_malloc_r+0x520>
   10a6c:	3000ab0e 	bge	r6,zero,10d1c <_malloc_r+0x534>
   10a70:	84000317 	ldw	r16,12(r16)
   10a74:	1c00a426 	beq	r3,r16,10d08 <_malloc_r+0x520>
   10a78:	80800117 	ldw	r2,4(r16)
   10a7c:	1204703a 	and	r2,r2,r8
   10a80:	144dc83a 	sub	r6,r2,r17
   10a84:	29bff90e 	bge	r5,r6,10a6c <_malloc_r+0x284>
   10a88:	81000317 	ldw	r4,12(r16)
   10a8c:	80c00217 	ldw	r3,8(r16)
   10a90:	89400054 	ori	r5,r17,1
   10a94:	8445883a 	add	r2,r16,r17
   10a98:	20c00215 	stw	r3,8(r4)
   10a9c:	19000315 	stw	r4,12(r3)
   10aa0:	81400115 	stw	r5,4(r16)
   10aa4:	1187883a 	add	r3,r2,r6
   10aa8:	31000054 	ori	r4,r6,1
   10aac:	50800315 	stw	r2,12(r10)
   10ab0:	50800215 	stw	r2,8(r10)
   10ab4:	19800015 	stw	r6,0(r3)
   10ab8:	11000115 	stw	r4,4(r2)
   10abc:	12800215 	stw	r10,8(r2)
   10ac0:	12800315 	stw	r10,12(r2)
   10ac4:	9009883a 	mov	r4,r18
   10ac8:	00131d80 	call	131d8 <__malloc_unlock>
   10acc:	80c00204 	addi	r3,r16,8
   10ad0:	003f5906 	br	10838 <_malloc_r+0x50>
   10ad4:	8109883a 	add	r4,r16,r4
   10ad8:	20800117 	ldw	r2,4(r4)
   10adc:	80c00217 	ldw	r3,8(r16)
   10ae0:	81400317 	ldw	r5,12(r16)
   10ae4:	10800054 	ori	r2,r2,1
   10ae8:	20800115 	stw	r2,4(r4)
   10aec:	28c00215 	stw	r3,8(r5)
   10af0:	19400315 	stw	r5,12(r3)
   10af4:	9009883a 	mov	r4,r18
   10af8:	00131d80 	call	131d8 <__malloc_unlock>
   10afc:	80c00204 	addi	r3,r16,8
   10b00:	003f4d06 	br	10838 <_malloc_r+0x50>
   10b04:	80800204 	addi	r2,r16,8
   10b08:	14000317 	ldw	r16,12(r2)
   10b0c:	143f911e 	bne	r2,r16,10954 <_malloc_r+0x16c>
   10b10:	1a400084 	addi	r9,r3,2
   10b14:	003f7306 	br	108e4 <_malloc_r+0xfc>
   10b18:	88c00054 	ori	r3,r17,1
   10b1c:	8445883a 	add	r2,r16,r17
   10b20:	80c00115 	stw	r3,4(r16)
   10b24:	003fdf06 	br	10aa4 <_malloc_r+0x2bc>
   10b28:	e4000217 	ldw	r16,8(fp)
   10b2c:	00bfff04 	movi	r2,-4
   10b30:	80c00117 	ldw	r3,4(r16)
   10b34:	802d883a 	mov	r22,r16
   10b38:	18aa703a 	and	r21,r3,r2
   10b3c:	ac401636 	bltu	r21,r17,10b98 <_malloc_r+0x3b0>
   10b40:	ac49c83a 	sub	r4,r21,r17
   10b44:	008003c4 	movi	r2,15
   10b48:	1100130e 	bge	r2,r4,10b98 <_malloc_r+0x3b0>
   10b4c:	88800054 	ori	r2,r17,1
   10b50:	8447883a 	add	r3,r16,r17
   10b54:	80800115 	stw	r2,4(r16)
   10b58:	20800054 	ori	r2,r4,1
   10b5c:	18800115 	stw	r2,4(r3)
   10b60:	e0c00215 	stw	r3,8(fp)
   10b64:	9009883a 	mov	r4,r18
   10b68:	00131d80 	call	131d8 <__malloc_unlock>
   10b6c:	80c00204 	addi	r3,r16,8
   10b70:	003f3106 	br	10838 <_malloc_r+0x50>
   10b74:	39c00117 	ldw	r7,4(r7)
   10b78:	573ffe04 	addi	fp,r10,-8
   10b7c:	003fa006 	br	10a00 <_malloc_r+0x218>
   10b80:	00801504 	movi	r2,84
   10b84:	10c06736 	bltu	r2,r3,10d24 <_malloc_r+0x53c>
   10b88:	8804d33a 	srli	r2,r17,12
   10b8c:	11801b84 	addi	r6,r2,110
   10b90:	300490fa 	slli	r2,r6,3
   10b94:	003f4106 	br	1089c <_malloc_r+0xb4>
   10b98:	d0a6a017 	ldw	r2,-25984(gp)
   10b9c:	d0e00317 	ldw	r3,-32756(gp)
   10ba0:	053fffc4 	movi	r20,-1
   10ba4:	10800404 	addi	r2,r2,16
   10ba8:	88a7883a 	add	r19,r17,r2
   10bac:	1d000326 	beq	r3,r20,10bbc <_malloc_r+0x3d4>
   10bb0:	98c3ffc4 	addi	r3,r19,4095
   10bb4:	00bc0004 	movi	r2,-4096
   10bb8:	18a6703a 	and	r19,r3,r2
   10bbc:	9009883a 	mov	r4,r18
   10bc0:	980b883a 	mov	r5,r19
   10bc4:	00117800 	call	11780 <_sbrk_r>
   10bc8:	1009883a 	mov	r4,r2
   10bcc:	15000426 	beq	r2,r20,10be0 <_malloc_r+0x3f8>
   10bd0:	854b883a 	add	r5,r16,r21
   10bd4:	1029883a 	mov	r20,r2
   10bd8:	11405a2e 	bgeu	r2,r5,10d44 <_malloc_r+0x55c>
   10bdc:	87000c26 	beq	r16,fp,10c10 <_malloc_r+0x428>
   10be0:	e4000217 	ldw	r16,8(fp)
   10be4:	80c00117 	ldw	r3,4(r16)
   10be8:	00bfff04 	movi	r2,-4
   10bec:	1884703a 	and	r2,r3,r2
   10bf0:	14400336 	bltu	r2,r17,10c00 <_malloc_r+0x418>
   10bf4:	1449c83a 	sub	r4,r2,r17
   10bf8:	008003c4 	movi	r2,15
   10bfc:	113fd316 	blt	r2,r4,10b4c <_malloc_r+0x364>
   10c00:	9009883a 	mov	r4,r18
   10c04:	00131d80 	call	131d8 <__malloc_unlock>
   10c08:	0007883a 	mov	r3,zero
   10c0c:	003f0a06 	br	10838 <_malloc_r+0x50>
   10c10:	05c000b4 	movhi	r23,2
   10c14:	bde2a904 	addi	r23,r23,-30044
   10c18:	b8800017 	ldw	r2,0(r23)
   10c1c:	988d883a 	add	r6,r19,r2
   10c20:	b9800015 	stw	r6,0(r23)
   10c24:	d0e00317 	ldw	r3,-32756(gp)
   10c28:	00bfffc4 	movi	r2,-1
   10c2c:	18808e26 	beq	r3,r2,10e68 <_malloc_r+0x680>
   10c30:	2145c83a 	sub	r2,r4,r5
   10c34:	3085883a 	add	r2,r6,r2
   10c38:	b8800015 	stw	r2,0(r23)
   10c3c:	20c001cc 	andi	r3,r4,7
   10c40:	18005f1e 	bne	r3,zero,10dc0 <_malloc_r+0x5d8>
   10c44:	000b883a 	mov	r5,zero
   10c48:	a4c5883a 	add	r2,r20,r19
   10c4c:	1083ffcc 	andi	r2,r2,4095
   10c50:	00c40004 	movi	r3,4096
   10c54:	1887c83a 	sub	r3,r3,r2
   10c58:	28e7883a 	add	r19,r5,r3
   10c5c:	9009883a 	mov	r4,r18
   10c60:	980b883a 	mov	r5,r19
   10c64:	00117800 	call	11780 <_sbrk_r>
   10c68:	1007883a 	mov	r3,r2
   10c6c:	00bfffc4 	movi	r2,-1
   10c70:	18807a26 	beq	r3,r2,10e5c <_malloc_r+0x674>
   10c74:	1d05c83a 	sub	r2,r3,r20
   10c78:	9885883a 	add	r2,r19,r2
   10c7c:	10c00054 	ori	r3,r2,1
   10c80:	b8800017 	ldw	r2,0(r23)
   10c84:	a021883a 	mov	r16,r20
   10c88:	a0c00115 	stw	r3,4(r20)
   10c8c:	9885883a 	add	r2,r19,r2
   10c90:	b8800015 	stw	r2,0(r23)
   10c94:	e5000215 	stw	r20,8(fp)
   10c98:	b7003626 	beq	r22,fp,10d74 <_malloc_r+0x58c>
   10c9c:	018003c4 	movi	r6,15
   10ca0:	35404b36 	bltu	r6,r21,10dd0 <_malloc_r+0x5e8>
   10ca4:	00800044 	movi	r2,1
   10ca8:	a0800115 	stw	r2,4(r20)
   10cac:	003fcd06 	br	10be4 <_malloc_r+0x3fc>
   10cb0:	2808d27a 	srli	r4,r5,9
   10cb4:	2000371e 	bne	r4,zero,10d94 <_malloc_r+0x5ac>
   10cb8:	2808d0fa 	srli	r4,r5,3
   10cbc:	200690fa 	slli	r3,r4,3
   10cc0:	1ad1883a 	add	r8,r3,r11
   10cc4:	41800217 	ldw	r6,8(r8)
   10cc8:	41805b26 	beq	r8,r6,10e38 <_malloc_r+0x650>
   10ccc:	30800117 	ldw	r2,4(r6)
   10cd0:	00ffff04 	movi	r3,-4
   10cd4:	10c4703a 	and	r2,r2,r3
   10cd8:	2880022e 	bgeu	r5,r2,10ce4 <_malloc_r+0x4fc>
   10cdc:	31800217 	ldw	r6,8(r6)
   10ce0:	41bffa1e 	bne	r8,r6,10ccc <_malloc_r+0x4e4>
   10ce4:	32000317 	ldw	r8,12(r6)
   10ce8:	39c00117 	ldw	r7,4(r7)
   10cec:	82000315 	stw	r8,12(r16)
   10cf0:	81800215 	stw	r6,8(r16)
   10cf4:	07000074 	movhi	fp,1
   10cf8:	e7167b04 	addi	fp,fp,23020
   10cfc:	34000315 	stw	r16,12(r6)
   10d00:	44000215 	stw	r16,8(r8)
   10d04:	003f3e06 	br	10a00 <_malloc_r+0x218>
   10d08:	63000044 	addi	r12,r12,1
   10d0c:	608000cc 	andi	r2,r12,3
   10d10:	10005d26 	beq	r2,zero,10e88 <_malloc_r+0x6a0>
   10d14:	18c00204 	addi	r3,r3,8
   10d18:	003f5106 	br	10a60 <_malloc_r+0x278>
   10d1c:	8089883a 	add	r4,r16,r2
   10d20:	003f6d06 	br	10ad8 <_malloc_r+0x2f0>
   10d24:	00805504 	movi	r2,340
   10d28:	10c02036 	bltu	r2,r3,10dac <_malloc_r+0x5c4>
   10d2c:	8804d3fa 	srli	r2,r17,15
   10d30:	11801dc4 	addi	r6,r2,119
   10d34:	300490fa 	slli	r2,r6,3
   10d38:	003ed806 	br	1089c <_malloc_r+0xb4>
   10d3c:	48c000c4 	addi	r3,r9,3
   10d40:	003f3106 	br	10a08 <_malloc_r+0x220>
   10d44:	05c000b4 	movhi	r23,2
   10d48:	bde2a904 	addi	r23,r23,-30044
   10d4c:	b8800017 	ldw	r2,0(r23)
   10d50:	988d883a 	add	r6,r19,r2
   10d54:	b9800015 	stw	r6,0(r23)
   10d58:	293fb21e 	bne	r5,r4,10c24 <_malloc_r+0x43c>
   10d5c:	2083ffcc 	andi	r2,r4,4095
   10d60:	103fb01e 	bne	r2,zero,10c24 <_malloc_r+0x43c>
   10d64:	e4000217 	ldw	r16,8(fp)
   10d68:	9d45883a 	add	r2,r19,r21
   10d6c:	10800054 	ori	r2,r2,1
   10d70:	80800115 	stw	r2,4(r16)
   10d74:	b8c00017 	ldw	r3,0(r23)
   10d78:	d0a6a117 	ldw	r2,-25980(gp)
   10d7c:	10c0012e 	bgeu	r2,r3,10d84 <_malloc_r+0x59c>
   10d80:	d0e6a115 	stw	r3,-25980(gp)
   10d84:	d0a6a217 	ldw	r2,-25976(gp)
   10d88:	10ff962e 	bgeu	r2,r3,10be4 <_malloc_r+0x3fc>
   10d8c:	d0e6a215 	stw	r3,-25976(gp)
   10d90:	003f9406 	br	10be4 <_malloc_r+0x3fc>
   10d94:	00800104 	movi	r2,4
   10d98:	11001e36 	bltu	r2,r4,10e14 <_malloc_r+0x62c>
   10d9c:	2804d1ba 	srli	r2,r5,6
   10da0:	11000e04 	addi	r4,r2,56
   10da4:	200690fa 	slli	r3,r4,3
   10da8:	003fc506 	br	10cc0 <_malloc_r+0x4d8>
   10dac:	00815504 	movi	r2,1364
   10db0:	10c01d2e 	bgeu	r2,r3,10e28 <_malloc_r+0x640>
   10db4:	01801f84 	movi	r6,126
   10db8:	0080fc04 	movi	r2,1008
   10dbc:	003eb706 	br	1089c <_malloc_r+0xb4>
   10dc0:	00800204 	movi	r2,8
   10dc4:	10cbc83a 	sub	r5,r2,r3
   10dc8:	2169883a 	add	r20,r4,r5
   10dcc:	003f9e06 	br	10c48 <_malloc_r+0x460>
   10dd0:	00bffe04 	movi	r2,-8
   10dd4:	a93ffd04 	addi	r4,r21,-12
   10dd8:	2088703a 	and	r4,r4,r2
   10ddc:	b10b883a 	add	r5,r22,r4
   10de0:	00c00144 	movi	r3,5
   10de4:	28c00215 	stw	r3,8(r5)
   10de8:	28c00115 	stw	r3,4(r5)
   10dec:	b0800117 	ldw	r2,4(r22)
   10df0:	1080004c 	andi	r2,r2,1
   10df4:	2084b03a 	or	r2,r4,r2
   10df8:	b0800115 	stw	r2,4(r22)
   10dfc:	313fdd2e 	bgeu	r6,r4,10d74 <_malloc_r+0x58c>
   10e00:	b1400204 	addi	r5,r22,8
   10e04:	9009883a 	mov	r4,r18
   10e08:	0011f480 	call	11f48 <_free_r>
   10e0c:	e4000217 	ldw	r16,8(fp)
   10e10:	003fd806 	br	10d74 <_malloc_r+0x58c>
   10e14:	00800504 	movi	r2,20
   10e18:	11001536 	bltu	r2,r4,10e70 <_malloc_r+0x688>
   10e1c:	210016c4 	addi	r4,r4,91
   10e20:	200690fa 	slli	r3,r4,3
   10e24:	003fa606 	br	10cc0 <_malloc_r+0x4d8>
   10e28:	8804d4ba 	srli	r2,r17,18
   10e2c:	11801f04 	addi	r6,r2,124
   10e30:	300490fa 	slli	r2,r6,3
   10e34:	003e9906 	br	1089c <_malloc_r+0xb4>
   10e38:	2009d0ba 	srai	r4,r4,2
   10e3c:	01400074 	movhi	r5,1
   10e40:	29567b04 	addi	r5,r5,23020
   10e44:	00c00044 	movi	r3,1
   10e48:	28800117 	ldw	r2,4(r5)
   10e4c:	1906983a 	sll	r3,r3,r4
   10e50:	10c4b03a 	or	r2,r2,r3
   10e54:	28800115 	stw	r2,4(r5)
   10e58:	003fa306 	br	10ce8 <_malloc_r+0x500>
   10e5c:	0027883a 	mov	r19,zero
   10e60:	00c00044 	movi	r3,1
   10e64:	003f8606 	br	10c80 <_malloc_r+0x498>
   10e68:	d1200315 	stw	r4,-32756(gp)
   10e6c:	003f7306 	br	10c3c <_malloc_r+0x454>
   10e70:	00801504 	movi	r2,84
   10e74:	11001936 	bltu	r2,r4,10edc <_malloc_r+0x6f4>
   10e78:	2804d33a 	srli	r2,r5,12
   10e7c:	11001b84 	addi	r4,r2,110
   10e80:	200690fa 	slli	r3,r4,3
   10e84:	003f8e06 	br	10cc0 <_malloc_r+0x4d8>
   10e88:	480b883a 	mov	r5,r9
   10e8c:	6807883a 	mov	r3,r13
   10e90:	288000cc 	andi	r2,r5,3
   10e94:	18fffe04 	addi	r3,r3,-8
   10e98:	297fffc4 	addi	r5,r5,-1
   10e9c:	10001526 	beq	r2,zero,10ef4 <_malloc_r+0x70c>
   10ea0:	18800217 	ldw	r2,8(r3)
   10ea4:	10fffa26 	beq	r2,r3,10e90 <_malloc_r+0x6a8>
   10ea8:	2109883a 	add	r4,r4,r4
   10eac:	393f1e36 	bltu	r7,r4,10b28 <_malloc_r+0x340>
   10eb0:	203f1d26 	beq	r4,zero,10b28 <_malloc_r+0x340>
   10eb4:	21c4703a 	and	r2,r4,r7
   10eb8:	10000226 	beq	r2,zero,10ec4 <_malloc_r+0x6dc>
   10ebc:	6013883a 	mov	r9,r12
   10ec0:	003ee106 	br	10a48 <_malloc_r+0x260>
   10ec4:	2109883a 	add	r4,r4,r4
   10ec8:	3904703a 	and	r2,r7,r4
   10ecc:	63000104 	addi	r12,r12,4
   10ed0:	103ffc26 	beq	r2,zero,10ec4 <_malloc_r+0x6dc>
   10ed4:	6013883a 	mov	r9,r12
   10ed8:	003edb06 	br	10a48 <_malloc_r+0x260>
   10edc:	00805504 	movi	r2,340
   10ee0:	11000836 	bltu	r2,r4,10f04 <_malloc_r+0x71c>
   10ee4:	2804d3fa 	srli	r2,r5,15
   10ee8:	11001dc4 	addi	r4,r2,119
   10eec:	200690fa 	slli	r3,r4,3
   10ef0:	003f7306 	br	10cc0 <_malloc_r+0x4d8>
   10ef4:	0104303a 	nor	r2,zero,r4
   10ef8:	388e703a 	and	r7,r7,r2
   10efc:	e1c00115 	stw	r7,4(fp)
   10f00:	003fe906 	br	10ea8 <_malloc_r+0x6c0>
   10f04:	00815504 	movi	r2,1364
   10f08:	1100032e 	bgeu	r2,r4,10f18 <_malloc_r+0x730>
   10f0c:	01001f84 	movi	r4,126
   10f10:	00c0fc04 	movi	r3,1008
   10f14:	003f6a06 	br	10cc0 <_malloc_r+0x4d8>
   10f18:	2804d4ba 	srli	r2,r5,18
   10f1c:	11001f04 	addi	r4,r2,124
   10f20:	200690fa 	slli	r3,r4,3
   10f24:	003f6606 	br	10cc0 <_malloc_r+0x4d8>

00010f28 <memchr>:
   10f28:	008000c4 	movi	r2,3
   10f2c:	29403fcc 	andi	r5,r5,255
   10f30:	2007883a 	mov	r3,r4
   10f34:	1180022e 	bgeu	r2,r6,10f40 <memchr+0x18>
   10f38:	2084703a 	and	r2,r4,r2
   10f3c:	10000b26 	beq	r2,zero,10f6c <memchr+0x44>
   10f40:	313fffc4 	addi	r4,r6,-1
   10f44:	3000051e 	bne	r6,zero,10f5c <memchr+0x34>
   10f48:	00002c06 	br	10ffc <memchr+0xd4>
   10f4c:	213fffc4 	addi	r4,r4,-1
   10f50:	00bfffc4 	movi	r2,-1
   10f54:	18c00044 	addi	r3,r3,1
   10f58:	20802826 	beq	r4,r2,10ffc <memchr+0xd4>
   10f5c:	18800003 	ldbu	r2,0(r3)
   10f60:	28bffa1e 	bne	r5,r2,10f4c <memchr+0x24>
   10f64:	1805883a 	mov	r2,r3
   10f68:	f800283a 	ret
   10f6c:	0011883a 	mov	r8,zero
   10f70:	0007883a 	mov	r3,zero
   10f74:	01c00104 	movi	r7,4
   10f78:	4004923a 	slli	r2,r8,8
   10f7c:	18c00044 	addi	r3,r3,1
   10f80:	1151883a 	add	r8,r2,r5
   10f84:	19fffc1e 	bne	r3,r7,10f78 <memchr+0x50>
   10f88:	02bfbff4 	movhi	r10,65279
   10f8c:	52bfbfc4 	addi	r10,r10,-257
   10f90:	02602074 	movhi	r9,32897
   10f94:	4a602004 	addi	r9,r9,-32640
   10f98:	02c000c4 	movi	r11,3
   10f9c:	20800017 	ldw	r2,0(r4)
   10fa0:	31bfff04 	addi	r6,r6,-4
   10fa4:	200f883a 	mov	r7,r4
   10fa8:	1204f03a 	xor	r2,r2,r8
   10fac:	1287883a 	add	r3,r2,r10
   10fb0:	1a46703a 	and	r3,r3,r9
   10fb4:	0084303a 	nor	r2,zero,r2
   10fb8:	10c4703a 	and	r2,r2,r3
   10fbc:	10000b26 	beq	r2,zero,10fec <memchr+0xc4>
   10fc0:	20800003 	ldbu	r2,0(r4)
   10fc4:	28800f26 	beq	r5,r2,11004 <memchr+0xdc>
   10fc8:	20800043 	ldbu	r2,1(r4)
   10fcc:	21c00044 	addi	r7,r4,1
   10fd0:	28800c26 	beq	r5,r2,11004 <memchr+0xdc>
   10fd4:	20800083 	ldbu	r2,2(r4)
   10fd8:	21c00084 	addi	r7,r4,2
   10fdc:	28800926 	beq	r5,r2,11004 <memchr+0xdc>
   10fe0:	208000c3 	ldbu	r2,3(r4)
   10fe4:	21c000c4 	addi	r7,r4,3
   10fe8:	28800626 	beq	r5,r2,11004 <memchr+0xdc>
   10fec:	21000104 	addi	r4,r4,4
   10ff0:	59bfea36 	bltu	r11,r6,10f9c <memchr+0x74>
   10ff4:	2007883a 	mov	r3,r4
   10ff8:	003fd106 	br	10f40 <memchr+0x18>
   10ffc:	0005883a 	mov	r2,zero
   11000:	f800283a 	ret
   11004:	3805883a 	mov	r2,r7
   11008:	f800283a 	ret

0001100c <memcpy>:
   1100c:	01c003c4 	movi	r7,15
   11010:	2007883a 	mov	r3,r4
   11014:	3980032e 	bgeu	r7,r6,11024 <memcpy+0x18>
   11018:	2904b03a 	or	r2,r5,r4
   1101c:	108000cc 	andi	r2,r2,3
   11020:	10000926 	beq	r2,zero,11048 <memcpy+0x3c>
   11024:	30000626 	beq	r6,zero,11040 <memcpy+0x34>
   11028:	30cd883a 	add	r6,r6,r3
   1102c:	28800003 	ldbu	r2,0(r5)
   11030:	29400044 	addi	r5,r5,1
   11034:	18800005 	stb	r2,0(r3)
   11038:	18c00044 	addi	r3,r3,1
   1103c:	30fffb1e 	bne	r6,r3,1102c <memcpy+0x20>
   11040:	2005883a 	mov	r2,r4
   11044:	f800283a 	ret
   11048:	3811883a 	mov	r8,r7
   1104c:	200f883a 	mov	r7,r4
   11050:	28c00017 	ldw	r3,0(r5)
   11054:	31bffc04 	addi	r6,r6,-16
   11058:	38c00015 	stw	r3,0(r7)
   1105c:	28800117 	ldw	r2,4(r5)
   11060:	38800115 	stw	r2,4(r7)
   11064:	28c00217 	ldw	r3,8(r5)
   11068:	38c00215 	stw	r3,8(r7)
   1106c:	28800317 	ldw	r2,12(r5)
   11070:	29400404 	addi	r5,r5,16
   11074:	38800315 	stw	r2,12(r7)
   11078:	39c00404 	addi	r7,r7,16
   1107c:	41bff436 	bltu	r8,r6,11050 <memcpy+0x44>
   11080:	008000c4 	movi	r2,3
   11084:	1180072e 	bgeu	r2,r6,110a4 <memcpy+0x98>
   11088:	1007883a 	mov	r3,r2
   1108c:	28800017 	ldw	r2,0(r5)
   11090:	31bfff04 	addi	r6,r6,-4
   11094:	29400104 	addi	r5,r5,4
   11098:	38800015 	stw	r2,0(r7)
   1109c:	39c00104 	addi	r7,r7,4
   110a0:	19bffa36 	bltu	r3,r6,1108c <memcpy+0x80>
   110a4:	3807883a 	mov	r3,r7
   110a8:	003fde06 	br	11024 <memcpy+0x18>

000110ac <memmove>:
   110ac:	2807883a 	mov	r3,r5
   110b0:	2011883a 	mov	r8,r4
   110b4:	29000c2e 	bgeu	r5,r4,110e8 <memmove+0x3c>
   110b8:	298f883a 	add	r7,r5,r6
   110bc:	21c00a2e 	bgeu	r4,r7,110e8 <memmove+0x3c>
   110c0:	30000726 	beq	r6,zero,110e0 <memmove+0x34>
   110c4:	2187883a 	add	r3,r4,r6
   110c8:	198dc83a 	sub	r6,r3,r6
   110cc:	39ffffc4 	addi	r7,r7,-1
   110d0:	38800003 	ldbu	r2,0(r7)
   110d4:	18ffffc4 	addi	r3,r3,-1
   110d8:	18800005 	stb	r2,0(r3)
   110dc:	19bffb1e 	bne	r3,r6,110cc <memmove+0x20>
   110e0:	2005883a 	mov	r2,r4
   110e4:	f800283a 	ret
   110e8:	01c003c4 	movi	r7,15
   110ec:	39800a36 	bltu	r7,r6,11118 <memmove+0x6c>
   110f0:	303ffb26 	beq	r6,zero,110e0 <memmove+0x34>
   110f4:	400f883a 	mov	r7,r8
   110f8:	320d883a 	add	r6,r6,r8
   110fc:	28800003 	ldbu	r2,0(r5)
   11100:	29400044 	addi	r5,r5,1
   11104:	38800005 	stb	r2,0(r7)
   11108:	39c00044 	addi	r7,r7,1
   1110c:	39bffb1e 	bne	r7,r6,110fc <memmove+0x50>
   11110:	2005883a 	mov	r2,r4
   11114:	f800283a 	ret
   11118:	1904b03a 	or	r2,r3,r4
   1111c:	108000cc 	andi	r2,r2,3
   11120:	103ff31e 	bne	r2,zero,110f0 <memmove+0x44>
   11124:	3811883a 	mov	r8,r7
   11128:	180b883a 	mov	r5,r3
   1112c:	200f883a 	mov	r7,r4
   11130:	28c00017 	ldw	r3,0(r5)
   11134:	31bffc04 	addi	r6,r6,-16
   11138:	38c00015 	stw	r3,0(r7)
   1113c:	28800117 	ldw	r2,4(r5)
   11140:	38800115 	stw	r2,4(r7)
   11144:	28c00217 	ldw	r3,8(r5)
   11148:	38c00215 	stw	r3,8(r7)
   1114c:	28800317 	ldw	r2,12(r5)
   11150:	29400404 	addi	r5,r5,16
   11154:	38800315 	stw	r2,12(r7)
   11158:	39c00404 	addi	r7,r7,16
   1115c:	41bff436 	bltu	r8,r6,11130 <memmove+0x84>
   11160:	008000c4 	movi	r2,3
   11164:	1180072e 	bgeu	r2,r6,11184 <memmove+0xd8>
   11168:	1007883a 	mov	r3,r2
   1116c:	28800017 	ldw	r2,0(r5)
   11170:	31bfff04 	addi	r6,r6,-4
   11174:	29400104 	addi	r5,r5,4
   11178:	38800015 	stw	r2,0(r7)
   1117c:	39c00104 	addi	r7,r7,4
   11180:	19bffa36 	bltu	r3,r6,1116c <memmove+0xc0>
   11184:	3811883a 	mov	r8,r7
   11188:	003fd906 	br	110f0 <memmove+0x44>

0001118c <_realloc_r>:
   1118c:	defff404 	addi	sp,sp,-48
   11190:	dd800815 	stw	r22,32(sp)
   11194:	dc800415 	stw	r18,16(sp)
   11198:	dc400315 	stw	r17,12(sp)
   1119c:	dfc00b15 	stw	ra,44(sp)
   111a0:	df000a15 	stw	fp,40(sp)
   111a4:	ddc00915 	stw	r23,36(sp)
   111a8:	dd400715 	stw	r21,28(sp)
   111ac:	dd000615 	stw	r20,24(sp)
   111b0:	dcc00515 	stw	r19,20(sp)
   111b4:	dc000215 	stw	r16,8(sp)
   111b8:	2825883a 	mov	r18,r5
   111bc:	3023883a 	mov	r17,r6
   111c0:	202d883a 	mov	r22,r4
   111c4:	2800c926 	beq	r5,zero,114ec <_realloc_r+0x360>
   111c8:	00131b80 	call	131b8 <__malloc_lock>
   111cc:	943ffe04 	addi	r16,r18,-8
   111d0:	88c002c4 	addi	r3,r17,11
   111d4:	00800584 	movi	r2,22
   111d8:	82000117 	ldw	r8,4(r16)
   111dc:	10c01b2e 	bgeu	r2,r3,1124c <_realloc_r+0xc0>
   111e0:	00bffe04 	movi	r2,-8
   111e4:	188e703a 	and	r7,r3,r2
   111e8:	3839883a 	mov	fp,r7
   111ec:	38001a16 	blt	r7,zero,11258 <_realloc_r+0xcc>
   111f0:	e4401936 	bltu	fp,r17,11258 <_realloc_r+0xcc>
   111f4:	013fff04 	movi	r4,-4
   111f8:	4126703a 	and	r19,r8,r4
   111fc:	99c02616 	blt	r19,r7,11298 <_realloc_r+0x10c>
   11200:	802b883a 	mov	r21,r16
   11204:	9829883a 	mov	r20,r19
   11208:	84000204 	addi	r16,r16,8
   1120c:	a80f883a 	mov	r7,r21
   11210:	a70dc83a 	sub	r6,r20,fp
   11214:	008003c4 	movi	r2,15
   11218:	1180c136 	bltu	r2,r6,11520 <_realloc_r+0x394>
   1121c:	38800117 	ldw	r2,4(r7)
   11220:	a549883a 	add	r4,r20,r21
   11224:	1080004c 	andi	r2,r2,1
   11228:	a084b03a 	or	r2,r20,r2
   1122c:	38800115 	stw	r2,4(r7)
   11230:	20c00117 	ldw	r3,4(r4)
   11234:	18c00054 	ori	r3,r3,1
   11238:	20c00115 	stw	r3,4(r4)
   1123c:	b009883a 	mov	r4,r22
   11240:	00131d80 	call	131d8 <__malloc_unlock>
   11244:	8023883a 	mov	r17,r16
   11248:	00000606 	br	11264 <_realloc_r+0xd8>
   1124c:	01c00404 	movi	r7,16
   11250:	3839883a 	mov	fp,r7
   11254:	e47fe72e 	bgeu	fp,r17,111f4 <_realloc_r+0x68>
   11258:	00800304 	movi	r2,12
   1125c:	0023883a 	mov	r17,zero
   11260:	b0800015 	stw	r2,0(r22)
   11264:	8805883a 	mov	r2,r17
   11268:	dfc00b17 	ldw	ra,44(sp)
   1126c:	df000a17 	ldw	fp,40(sp)
   11270:	ddc00917 	ldw	r23,36(sp)
   11274:	dd800817 	ldw	r22,32(sp)
   11278:	dd400717 	ldw	r21,28(sp)
   1127c:	dd000617 	ldw	r20,24(sp)
   11280:	dcc00517 	ldw	r19,20(sp)
   11284:	dc800417 	ldw	r18,16(sp)
   11288:	dc400317 	ldw	r17,12(sp)
   1128c:	dc000217 	ldw	r16,8(sp)
   11290:	dec00c04 	addi	sp,sp,48
   11294:	f800283a 	ret
   11298:	00800074 	movhi	r2,1
   1129c:	10967b04 	addi	r2,r2,23020
   112a0:	12400217 	ldw	r9,8(r2)
   112a4:	84cd883a 	add	r6,r16,r19
   112a8:	802b883a 	mov	r21,r16
   112ac:	3240b926 	beq	r6,r9,11594 <_realloc_r+0x408>
   112b0:	31400117 	ldw	r5,4(r6)
   112b4:	00bfff84 	movi	r2,-2
   112b8:	2884703a 	and	r2,r5,r2
   112bc:	1185883a 	add	r2,r2,r6
   112c0:	10c00117 	ldw	r3,4(r2)
   112c4:	18c0004c 	andi	r3,r3,1
   112c8:	1807003a 	cmpeq	r3,r3,zero
   112cc:	1800a326 	beq	r3,zero,1155c <_realloc_r+0x3d0>
   112d0:	2908703a 	and	r4,r5,r4
   112d4:	9929883a 	add	r20,r19,r4
   112d8:	a1c0a30e 	bge	r20,r7,11568 <_realloc_r+0x3dc>
   112dc:	4080004c 	andi	r2,r8,1
   112e0:	1000551e 	bne	r2,zero,11438 <_realloc_r+0x2ac>
   112e4:	80800017 	ldw	r2,0(r16)
   112e8:	80afc83a 	sub	r23,r16,r2
   112ec:	b8c00117 	ldw	r3,4(r23)
   112f0:	00bfff04 	movi	r2,-4
   112f4:	1884703a 	and	r2,r3,r2
   112f8:	30002e26 	beq	r6,zero,113b4 <_realloc_r+0x228>
   112fc:	3240b926 	beq	r6,r9,115e4 <_realloc_r+0x458>
   11300:	98a9883a 	add	r20,r19,r2
   11304:	2509883a 	add	r4,r4,r20
   11308:	d9000015 	stw	r4,0(sp)
   1130c:	21c02a16 	blt	r4,r7,113b8 <_realloc_r+0x22c>
   11310:	30800317 	ldw	r2,12(r6)
   11314:	30c00217 	ldw	r3,8(r6)
   11318:	01400904 	movi	r5,36
   1131c:	99bfff04 	addi	r6,r19,-4
   11320:	18800315 	stw	r2,12(r3)
   11324:	10c00215 	stw	r3,8(r2)
   11328:	b9000317 	ldw	r4,12(r23)
   1132c:	b8800217 	ldw	r2,8(r23)
   11330:	b82b883a 	mov	r21,r23
   11334:	bc000204 	addi	r16,r23,8
   11338:	20800215 	stw	r2,8(r4)
   1133c:	11000315 	stw	r4,12(r2)
   11340:	2980e436 	bltu	r5,r6,116d4 <_realloc_r+0x548>
   11344:	008004c4 	movi	r2,19
   11348:	9009883a 	mov	r4,r18
   1134c:	8011883a 	mov	r8,r16
   11350:	11800f2e 	bgeu	r2,r6,11390 <_realloc_r+0x204>
   11354:	90800017 	ldw	r2,0(r18)
   11358:	ba000404 	addi	r8,r23,16
   1135c:	91000204 	addi	r4,r18,8
   11360:	b8800215 	stw	r2,8(r23)
   11364:	90c00117 	ldw	r3,4(r18)
   11368:	008006c4 	movi	r2,27
   1136c:	b8c00315 	stw	r3,12(r23)
   11370:	1180072e 	bgeu	r2,r6,11390 <_realloc_r+0x204>
   11374:	90c00217 	ldw	r3,8(r18)
   11378:	ba000604 	addi	r8,r23,24
   1137c:	91000404 	addi	r4,r18,16
   11380:	b8c00415 	stw	r3,16(r23)
   11384:	90800317 	ldw	r2,12(r18)
   11388:	b8800515 	stw	r2,20(r23)
   1138c:	3140e726 	beq	r6,r5,1172c <_realloc_r+0x5a0>
   11390:	20800017 	ldw	r2,0(r4)
   11394:	dd000017 	ldw	r20,0(sp)
   11398:	b80f883a 	mov	r7,r23
   1139c:	40800015 	stw	r2,0(r8)
   113a0:	20c00117 	ldw	r3,4(r4)
   113a4:	40c00115 	stw	r3,4(r8)
   113a8:	20800217 	ldw	r2,8(r4)
   113ac:	40800215 	stw	r2,8(r8)
   113b0:	003f9706 	br	11210 <_realloc_r+0x84>
   113b4:	98a9883a 	add	r20,r19,r2
   113b8:	a1c01f16 	blt	r20,r7,11438 <_realloc_r+0x2ac>
   113bc:	b8c00317 	ldw	r3,12(r23)
   113c0:	b8800217 	ldw	r2,8(r23)
   113c4:	99bfff04 	addi	r6,r19,-4
   113c8:	01400904 	movi	r5,36
   113cc:	b82b883a 	mov	r21,r23
   113d0:	18800215 	stw	r2,8(r3)
   113d4:	10c00315 	stw	r3,12(r2)
   113d8:	bc000204 	addi	r16,r23,8
   113dc:	2980c336 	bltu	r5,r6,116ec <_realloc_r+0x560>
   113e0:	008004c4 	movi	r2,19
   113e4:	9009883a 	mov	r4,r18
   113e8:	8011883a 	mov	r8,r16
   113ec:	11800f2e 	bgeu	r2,r6,1142c <_realloc_r+0x2a0>
   113f0:	90800017 	ldw	r2,0(r18)
   113f4:	ba000404 	addi	r8,r23,16
   113f8:	91000204 	addi	r4,r18,8
   113fc:	b8800215 	stw	r2,8(r23)
   11400:	90c00117 	ldw	r3,4(r18)
   11404:	008006c4 	movi	r2,27
   11408:	b8c00315 	stw	r3,12(r23)
   1140c:	1180072e 	bgeu	r2,r6,1142c <_realloc_r+0x2a0>
   11410:	90c00217 	ldw	r3,8(r18)
   11414:	ba000604 	addi	r8,r23,24
   11418:	91000404 	addi	r4,r18,16
   1141c:	b8c00415 	stw	r3,16(r23)
   11420:	90800317 	ldw	r2,12(r18)
   11424:	b8800515 	stw	r2,20(r23)
   11428:	3140c726 	beq	r6,r5,11748 <_realloc_r+0x5bc>
   1142c:	20800017 	ldw	r2,0(r4)
   11430:	b80f883a 	mov	r7,r23
   11434:	003fd906 	br	1139c <_realloc_r+0x210>
   11438:	880b883a 	mov	r5,r17
   1143c:	b009883a 	mov	r4,r22
   11440:	00107e80 	call	107e8 <_malloc_r>
   11444:	1023883a 	mov	r17,r2
   11448:	10002526 	beq	r2,zero,114e0 <_realloc_r+0x354>
   1144c:	80800117 	ldw	r2,4(r16)
   11450:	00ffff84 	movi	r3,-2
   11454:	893ffe04 	addi	r4,r17,-8
   11458:	10c4703a 	and	r2,r2,r3
   1145c:	8085883a 	add	r2,r16,r2
   11460:	20809526 	beq	r4,r2,116b8 <_realloc_r+0x52c>
   11464:	99bfff04 	addi	r6,r19,-4
   11468:	01c00904 	movi	r7,36
   1146c:	39804536 	bltu	r7,r6,11584 <_realloc_r+0x3f8>
   11470:	008004c4 	movi	r2,19
   11474:	9009883a 	mov	r4,r18
   11478:	880b883a 	mov	r5,r17
   1147c:	11800f2e 	bgeu	r2,r6,114bc <_realloc_r+0x330>
   11480:	90800017 	ldw	r2,0(r18)
   11484:	89400204 	addi	r5,r17,8
   11488:	91000204 	addi	r4,r18,8
   1148c:	88800015 	stw	r2,0(r17)
   11490:	90c00117 	ldw	r3,4(r18)
   11494:	008006c4 	movi	r2,27
   11498:	88c00115 	stw	r3,4(r17)
   1149c:	1180072e 	bgeu	r2,r6,114bc <_realloc_r+0x330>
   114a0:	90c00217 	ldw	r3,8(r18)
   114a4:	89400404 	addi	r5,r17,16
   114a8:	91000404 	addi	r4,r18,16
   114ac:	88c00215 	stw	r3,8(r17)
   114b0:	90800317 	ldw	r2,12(r18)
   114b4:	88800315 	stw	r2,12(r17)
   114b8:	31c09126 	beq	r6,r7,11700 <_realloc_r+0x574>
   114bc:	20800017 	ldw	r2,0(r4)
   114c0:	28800015 	stw	r2,0(r5)
   114c4:	20c00117 	ldw	r3,4(r4)
   114c8:	28c00115 	stw	r3,4(r5)
   114cc:	20800217 	ldw	r2,8(r4)
   114d0:	28800215 	stw	r2,8(r5)
   114d4:	900b883a 	mov	r5,r18
   114d8:	b009883a 	mov	r4,r22
   114dc:	0011f480 	call	11f48 <_free_r>
   114e0:	b009883a 	mov	r4,r22
   114e4:	00131d80 	call	131d8 <__malloc_unlock>
   114e8:	003f5e06 	br	11264 <_realloc_r+0xd8>
   114ec:	300b883a 	mov	r5,r6
   114f0:	dfc00b17 	ldw	ra,44(sp)
   114f4:	df000a17 	ldw	fp,40(sp)
   114f8:	ddc00917 	ldw	r23,36(sp)
   114fc:	dd800817 	ldw	r22,32(sp)
   11500:	dd400717 	ldw	r21,28(sp)
   11504:	dd000617 	ldw	r20,24(sp)
   11508:	dcc00517 	ldw	r19,20(sp)
   1150c:	dc800417 	ldw	r18,16(sp)
   11510:	dc400317 	ldw	r17,12(sp)
   11514:	dc000217 	ldw	r16,8(sp)
   11518:	dec00c04 	addi	sp,sp,48
   1151c:	00107e81 	jmpi	107e8 <_malloc_r>
   11520:	38800117 	ldw	r2,4(r7)
   11524:	e54b883a 	add	r5,fp,r21
   11528:	31000054 	ori	r4,r6,1
   1152c:	1080004c 	andi	r2,r2,1
   11530:	1704b03a 	or	r2,r2,fp
   11534:	38800115 	stw	r2,4(r7)
   11538:	29000115 	stw	r4,4(r5)
   1153c:	2987883a 	add	r3,r5,r6
   11540:	18800117 	ldw	r2,4(r3)
   11544:	29400204 	addi	r5,r5,8
   11548:	b009883a 	mov	r4,r22
   1154c:	10800054 	ori	r2,r2,1
   11550:	18800115 	stw	r2,4(r3)
   11554:	0011f480 	call	11f48 <_free_r>
   11558:	003f3806 	br	1123c <_realloc_r+0xb0>
   1155c:	000d883a 	mov	r6,zero
   11560:	0009883a 	mov	r4,zero
   11564:	003f5d06 	br	112dc <_realloc_r+0x150>
   11568:	30c00217 	ldw	r3,8(r6)
   1156c:	30800317 	ldw	r2,12(r6)
   11570:	800f883a 	mov	r7,r16
   11574:	84000204 	addi	r16,r16,8
   11578:	10c00215 	stw	r3,8(r2)
   1157c:	18800315 	stw	r2,12(r3)
   11580:	003f2306 	br	11210 <_realloc_r+0x84>
   11584:	8809883a 	mov	r4,r17
   11588:	900b883a 	mov	r5,r18
   1158c:	00110ac0 	call	110ac <memmove>
   11590:	003fd006 	br	114d4 <_realloc_r+0x348>
   11594:	30800117 	ldw	r2,4(r6)
   11598:	e0c00404 	addi	r3,fp,16
   1159c:	1108703a 	and	r4,r2,r4
   115a0:	9905883a 	add	r2,r19,r4
   115a4:	10ff4d16 	blt	r2,r3,112dc <_realloc_r+0x150>
   115a8:	1705c83a 	sub	r2,r2,fp
   115ac:	870b883a 	add	r5,r16,fp
   115b0:	10800054 	ori	r2,r2,1
   115b4:	28800115 	stw	r2,4(r5)
   115b8:	80c00117 	ldw	r3,4(r16)
   115bc:	00800074 	movhi	r2,1
   115c0:	10967b04 	addi	r2,r2,23020
   115c4:	b009883a 	mov	r4,r22
   115c8:	18c0004c 	andi	r3,r3,1
   115cc:	e0c6b03a 	or	r3,fp,r3
   115d0:	11400215 	stw	r5,8(r2)
   115d4:	80c00115 	stw	r3,4(r16)
   115d8:	00131d80 	call	131d8 <__malloc_unlock>
   115dc:	84400204 	addi	r17,r16,8
   115e0:	003f2006 	br	11264 <_realloc_r+0xd8>
   115e4:	98a9883a 	add	r20,r19,r2
   115e8:	2509883a 	add	r4,r4,r20
   115ec:	e0800404 	addi	r2,fp,16
   115f0:	d9000115 	stw	r4,4(sp)
   115f4:	20bf7016 	blt	r4,r2,113b8 <_realloc_r+0x22c>
   115f8:	b8c00317 	ldw	r3,12(r23)
   115fc:	b8800217 	ldw	r2,8(r23)
   11600:	99bfff04 	addi	r6,r19,-4
   11604:	01400904 	movi	r5,36
   11608:	18800215 	stw	r2,8(r3)
   1160c:	10c00315 	stw	r3,12(r2)
   11610:	bc400204 	addi	r17,r23,8
   11614:	29804136 	bltu	r5,r6,1171c <_realloc_r+0x590>
   11618:	008004c4 	movi	r2,19
   1161c:	9009883a 	mov	r4,r18
   11620:	880f883a 	mov	r7,r17
   11624:	11800f2e 	bgeu	r2,r6,11664 <_realloc_r+0x4d8>
   11628:	90800017 	ldw	r2,0(r18)
   1162c:	b9c00404 	addi	r7,r23,16
   11630:	91000204 	addi	r4,r18,8
   11634:	b8800215 	stw	r2,8(r23)
   11638:	90c00117 	ldw	r3,4(r18)
   1163c:	008006c4 	movi	r2,27
   11640:	b8c00315 	stw	r3,12(r23)
   11644:	1180072e 	bgeu	r2,r6,11664 <_realloc_r+0x4d8>
   11648:	90c00217 	ldw	r3,8(r18)
   1164c:	b9c00604 	addi	r7,r23,24
   11650:	91000404 	addi	r4,r18,16
   11654:	b8c00415 	stw	r3,16(r23)
   11658:	90800317 	ldw	r2,12(r18)
   1165c:	b8800515 	stw	r2,20(r23)
   11660:	31404026 	beq	r6,r5,11764 <_realloc_r+0x5d8>
   11664:	20800017 	ldw	r2,0(r4)
   11668:	38800015 	stw	r2,0(r7)
   1166c:	20c00117 	ldw	r3,4(r4)
   11670:	38c00115 	stw	r3,4(r7)
   11674:	20800217 	ldw	r2,8(r4)
   11678:	38800215 	stw	r2,8(r7)
   1167c:	d8c00117 	ldw	r3,4(sp)
   11680:	bf0b883a 	add	r5,r23,fp
   11684:	b009883a 	mov	r4,r22
   11688:	1f05c83a 	sub	r2,r3,fp
   1168c:	10800054 	ori	r2,r2,1
   11690:	28800115 	stw	r2,4(r5)
   11694:	b8c00117 	ldw	r3,4(r23)
   11698:	00800074 	movhi	r2,1
   1169c:	10967b04 	addi	r2,r2,23020
   116a0:	11400215 	stw	r5,8(r2)
   116a4:	18c0004c 	andi	r3,r3,1
   116a8:	e0c6b03a 	or	r3,fp,r3
   116ac:	b8c00115 	stw	r3,4(r23)
   116b0:	00131d80 	call	131d8 <__malloc_unlock>
   116b4:	003eeb06 	br	11264 <_realloc_r+0xd8>
   116b8:	20800117 	ldw	r2,4(r4)
   116bc:	00ffff04 	movi	r3,-4
   116c0:	800f883a 	mov	r7,r16
   116c4:	10c4703a 	and	r2,r2,r3
   116c8:	98a9883a 	add	r20,r19,r2
   116cc:	84000204 	addi	r16,r16,8
   116d0:	003ecf06 	br	11210 <_realloc_r+0x84>
   116d4:	900b883a 	mov	r5,r18
   116d8:	8009883a 	mov	r4,r16
   116dc:	00110ac0 	call	110ac <memmove>
   116e0:	dd000017 	ldw	r20,0(sp)
   116e4:	b80f883a 	mov	r7,r23
   116e8:	003ec906 	br	11210 <_realloc_r+0x84>
   116ec:	900b883a 	mov	r5,r18
   116f0:	8009883a 	mov	r4,r16
   116f4:	00110ac0 	call	110ac <memmove>
   116f8:	b80f883a 	mov	r7,r23
   116fc:	003ec406 	br	11210 <_realloc_r+0x84>
   11700:	90c00417 	ldw	r3,16(r18)
   11704:	89400604 	addi	r5,r17,24
   11708:	91000604 	addi	r4,r18,24
   1170c:	88c00415 	stw	r3,16(r17)
   11710:	90800517 	ldw	r2,20(r18)
   11714:	88800515 	stw	r2,20(r17)
   11718:	003f6806 	br	114bc <_realloc_r+0x330>
   1171c:	900b883a 	mov	r5,r18
   11720:	8809883a 	mov	r4,r17
   11724:	00110ac0 	call	110ac <memmove>
   11728:	003fd406 	br	1167c <_realloc_r+0x4f0>
   1172c:	90c00417 	ldw	r3,16(r18)
   11730:	91000604 	addi	r4,r18,24
   11734:	ba000804 	addi	r8,r23,32
   11738:	b8c00615 	stw	r3,24(r23)
   1173c:	90800517 	ldw	r2,20(r18)
   11740:	b8800715 	stw	r2,28(r23)
   11744:	003f1206 	br	11390 <_realloc_r+0x204>
   11748:	90c00417 	ldw	r3,16(r18)
   1174c:	91000604 	addi	r4,r18,24
   11750:	ba000804 	addi	r8,r23,32
   11754:	b8c00615 	stw	r3,24(r23)
   11758:	90800517 	ldw	r2,20(r18)
   1175c:	b8800715 	stw	r2,28(r23)
   11760:	003f3206 	br	1142c <_realloc_r+0x2a0>
   11764:	90c00417 	ldw	r3,16(r18)
   11768:	91000604 	addi	r4,r18,24
   1176c:	b9c00804 	addi	r7,r23,32
   11770:	b8c00615 	stw	r3,24(r23)
   11774:	90800517 	ldw	r2,20(r18)
   11778:	b8800715 	stw	r2,28(r23)
   1177c:	003fb906 	br	11664 <_realloc_r+0x4d8>

00011780 <_sbrk_r>:
   11780:	defffd04 	addi	sp,sp,-12
   11784:	dc000015 	stw	r16,0(sp)
   11788:	040000b4 	movhi	r16,2
   1178c:	8422a204 	addi	r16,r16,-30072
   11790:	dc400115 	stw	r17,4(sp)
   11794:	80000015 	stw	zero,0(r16)
   11798:	2023883a 	mov	r17,r4
   1179c:	2809883a 	mov	r4,r5
   117a0:	dfc00215 	stw	ra,8(sp)
   117a4:	00133d80 	call	133d8 <sbrk>
   117a8:	1007883a 	mov	r3,r2
   117ac:	00bfffc4 	movi	r2,-1
   117b0:	18800626 	beq	r3,r2,117cc <_sbrk_r+0x4c>
   117b4:	1805883a 	mov	r2,r3
   117b8:	dfc00217 	ldw	ra,8(sp)
   117bc:	dc400117 	ldw	r17,4(sp)
   117c0:	dc000017 	ldw	r16,0(sp)
   117c4:	dec00304 	addi	sp,sp,12
   117c8:	f800283a 	ret
   117cc:	80800017 	ldw	r2,0(r16)
   117d0:	103ff826 	beq	r2,zero,117b4 <_sbrk_r+0x34>
   117d4:	88800015 	stw	r2,0(r17)
   117d8:	1805883a 	mov	r2,r3
   117dc:	dfc00217 	ldw	ra,8(sp)
   117e0:	dc400117 	ldw	r17,4(sp)
   117e4:	dc000017 	ldw	r16,0(sp)
   117e8:	dec00304 	addi	sp,sp,12
   117ec:	f800283a 	ret

000117f0 <__swsetup_r>:
   117f0:	00800074 	movhi	r2,1
   117f4:	109bff04 	addi	r2,r2,28668
   117f8:	10c00017 	ldw	r3,0(r2)
   117fc:	defffd04 	addi	sp,sp,-12
   11800:	dc400115 	stw	r17,4(sp)
   11804:	dc000015 	stw	r16,0(sp)
   11808:	dfc00215 	stw	ra,8(sp)
   1180c:	2023883a 	mov	r17,r4
   11810:	2821883a 	mov	r16,r5
   11814:	18000226 	beq	r3,zero,11820 <__swsetup_r+0x30>
   11818:	18800e17 	ldw	r2,56(r3)
   1181c:	10001f26 	beq	r2,zero,1189c <__swsetup_r+0xac>
   11820:	8100030b 	ldhu	r4,12(r16)
   11824:	2080020c 	andi	r2,r4,8
   11828:	10002826 	beq	r2,zero,118cc <__swsetup_r+0xdc>
   1182c:	81400417 	ldw	r5,16(r16)
   11830:	28001d26 	beq	r5,zero,118a8 <__swsetup_r+0xb8>
   11834:	2080004c 	andi	r2,r4,1
   11838:	1005003a 	cmpeq	r2,r2,zero
   1183c:	10000b26 	beq	r2,zero,1186c <__swsetup_r+0x7c>
   11840:	2080008c 	andi	r2,r4,2
   11844:	10001226 	beq	r2,zero,11890 <__swsetup_r+0xa0>
   11848:	0005883a 	mov	r2,zero
   1184c:	80800215 	stw	r2,8(r16)
   11850:	28000b26 	beq	r5,zero,11880 <__swsetup_r+0x90>
   11854:	0005883a 	mov	r2,zero
   11858:	dfc00217 	ldw	ra,8(sp)
   1185c:	dc400117 	ldw	r17,4(sp)
   11860:	dc000017 	ldw	r16,0(sp)
   11864:	dec00304 	addi	sp,sp,12
   11868:	f800283a 	ret
   1186c:	80800517 	ldw	r2,20(r16)
   11870:	80000215 	stw	zero,8(r16)
   11874:	0085c83a 	sub	r2,zero,r2
   11878:	80800615 	stw	r2,24(r16)
   1187c:	283ff51e 	bne	r5,zero,11854 <__swsetup_r+0x64>
   11880:	2080200c 	andi	r2,r4,128
   11884:	103ff326 	beq	r2,zero,11854 <__swsetup_r+0x64>
   11888:	00bfffc4 	movi	r2,-1
   1188c:	003ff206 	br	11858 <__swsetup_r+0x68>
   11890:	80800517 	ldw	r2,20(r16)
   11894:	80800215 	stw	r2,8(r16)
   11898:	003fed06 	br	11850 <__swsetup_r+0x60>
   1189c:	1809883a 	mov	r4,r3
   118a0:	0011bc40 	call	11bc4 <__sinit>
   118a4:	003fde06 	br	11820 <__swsetup_r+0x30>
   118a8:	20c0a00c 	andi	r3,r4,640
   118ac:	00808004 	movi	r2,512
   118b0:	18bfe026 	beq	r3,r2,11834 <__swsetup_r+0x44>
   118b4:	8809883a 	mov	r4,r17
   118b8:	800b883a 	mov	r5,r16
   118bc:	00123dc0 	call	123dc <__smakebuf_r>
   118c0:	8100030b 	ldhu	r4,12(r16)
   118c4:	81400417 	ldw	r5,16(r16)
   118c8:	003fda06 	br	11834 <__swsetup_r+0x44>
   118cc:	2080040c 	andi	r2,r4,16
   118d0:	103fed26 	beq	r2,zero,11888 <__swsetup_r+0x98>
   118d4:	2080010c 	andi	r2,r4,4
   118d8:	10001226 	beq	r2,zero,11924 <__swsetup_r+0x134>
   118dc:	81400c17 	ldw	r5,48(r16)
   118e0:	28000526 	beq	r5,zero,118f8 <__swsetup_r+0x108>
   118e4:	80801004 	addi	r2,r16,64
   118e8:	28800226 	beq	r5,r2,118f4 <__swsetup_r+0x104>
   118ec:	8809883a 	mov	r4,r17
   118f0:	0011f480 	call	11f48 <_free_r>
   118f4:	80000c15 	stw	zero,48(r16)
   118f8:	8080030b 	ldhu	r2,12(r16)
   118fc:	81400417 	ldw	r5,16(r16)
   11900:	80000115 	stw	zero,4(r16)
   11904:	10bff6cc 	andi	r2,r2,65499
   11908:	8080030d 	sth	r2,12(r16)
   1190c:	81400015 	stw	r5,0(r16)
   11910:	8080030b 	ldhu	r2,12(r16)
   11914:	10800214 	ori	r2,r2,8
   11918:	113fffcc 	andi	r4,r2,65535
   1191c:	8080030d 	sth	r2,12(r16)
   11920:	003fc306 	br	11830 <__swsetup_r+0x40>
   11924:	81400417 	ldw	r5,16(r16)
   11928:	003ff906 	br	11910 <__swsetup_r+0x120>

0001192c <_fflush_r>:
   1192c:	defffb04 	addi	sp,sp,-20
   11930:	dcc00315 	stw	r19,12(sp)
   11934:	dc800215 	stw	r18,8(sp)
   11938:	dfc00415 	stw	ra,16(sp)
   1193c:	dc400115 	stw	r17,4(sp)
   11940:	dc000015 	stw	r16,0(sp)
   11944:	2027883a 	mov	r19,r4
   11948:	2825883a 	mov	r18,r5
   1194c:	20000226 	beq	r4,zero,11958 <_fflush_r+0x2c>
   11950:	20800e17 	ldw	r2,56(r4)
   11954:	10005626 	beq	r2,zero,11ab0 <_fflush_r+0x184>
   11958:	9100030b 	ldhu	r4,12(r18)
   1195c:	20ffffcc 	andi	r3,r4,65535
   11960:	18e0001c 	xori	r3,r3,32768
   11964:	18e00004 	addi	r3,r3,-32768
   11968:	1880020c 	andi	r2,r3,8
   1196c:	1000261e 	bne	r2,zero,11a08 <_fflush_r+0xdc>
   11970:	90c00117 	ldw	r3,4(r18)
   11974:	20820014 	ori	r2,r4,2048
   11978:	9080030d 	sth	r2,12(r18)
   1197c:	1009883a 	mov	r4,r2
   11980:	00c0400e 	bge	zero,r3,11a84 <_fflush_r+0x158>
   11984:	92000a17 	ldw	r8,40(r18)
   11988:	40004026 	beq	r8,zero,11a8c <_fflush_r+0x160>
   1198c:	2084000c 	andi	r2,r4,4096
   11990:	10005326 	beq	r2,zero,11ae0 <_fflush_r+0x1b4>
   11994:	94001417 	ldw	r16,80(r18)
   11998:	9080030b 	ldhu	r2,12(r18)
   1199c:	1080010c 	andi	r2,r2,4
   119a0:	1000481e 	bne	r2,zero,11ac4 <_fflush_r+0x198>
   119a4:	91400717 	ldw	r5,28(r18)
   119a8:	9809883a 	mov	r4,r19
   119ac:	800d883a 	mov	r6,r16
   119b0:	000f883a 	mov	r7,zero
   119b4:	403ee83a 	callr	r8
   119b8:	8080261e 	bne	r16,r2,11a54 <_fflush_r+0x128>
   119bc:	9080030b 	ldhu	r2,12(r18)
   119c0:	91000417 	ldw	r4,16(r18)
   119c4:	90000115 	stw	zero,4(r18)
   119c8:	10bdffcc 	andi	r2,r2,63487
   119cc:	10ffffcc 	andi	r3,r2,65535
   119d0:	18c4000c 	andi	r3,r3,4096
   119d4:	9080030d 	sth	r2,12(r18)
   119d8:	91000015 	stw	r4,0(r18)
   119dc:	18002b26 	beq	r3,zero,11a8c <_fflush_r+0x160>
   119e0:	0007883a 	mov	r3,zero
   119e4:	1805883a 	mov	r2,r3
   119e8:	94001415 	stw	r16,80(r18)
   119ec:	dfc00417 	ldw	ra,16(sp)
   119f0:	dcc00317 	ldw	r19,12(sp)
   119f4:	dc800217 	ldw	r18,8(sp)
   119f8:	dc400117 	ldw	r17,4(sp)
   119fc:	dc000017 	ldw	r16,0(sp)
   11a00:	dec00504 	addi	sp,sp,20
   11a04:	f800283a 	ret
   11a08:	94400417 	ldw	r17,16(r18)
   11a0c:	88001f26 	beq	r17,zero,11a8c <_fflush_r+0x160>
   11a10:	90800017 	ldw	r2,0(r18)
   11a14:	18c000cc 	andi	r3,r3,3
   11a18:	94400015 	stw	r17,0(r18)
   11a1c:	1461c83a 	sub	r16,r2,r17
   11a20:	18002526 	beq	r3,zero,11ab8 <_fflush_r+0x18c>
   11a24:	0005883a 	mov	r2,zero
   11a28:	90800215 	stw	r2,8(r18)
   11a2c:	0400170e 	bge	zero,r16,11a8c <_fflush_r+0x160>
   11a30:	90c00917 	ldw	r3,36(r18)
   11a34:	91400717 	ldw	r5,28(r18)
   11a38:	880d883a 	mov	r6,r17
   11a3c:	800f883a 	mov	r7,r16
   11a40:	9809883a 	mov	r4,r19
   11a44:	183ee83a 	callr	r3
   11a48:	88a3883a 	add	r17,r17,r2
   11a4c:	80a1c83a 	sub	r16,r16,r2
   11a50:	00bff616 	blt	zero,r2,11a2c <_fflush_r+0x100>
   11a54:	9080030b 	ldhu	r2,12(r18)
   11a58:	00ffffc4 	movi	r3,-1
   11a5c:	10801014 	ori	r2,r2,64
   11a60:	9080030d 	sth	r2,12(r18)
   11a64:	1805883a 	mov	r2,r3
   11a68:	dfc00417 	ldw	ra,16(sp)
   11a6c:	dcc00317 	ldw	r19,12(sp)
   11a70:	dc800217 	ldw	r18,8(sp)
   11a74:	dc400117 	ldw	r17,4(sp)
   11a78:	dc000017 	ldw	r16,0(sp)
   11a7c:	dec00504 	addi	sp,sp,20
   11a80:	f800283a 	ret
   11a84:	90800f17 	ldw	r2,60(r18)
   11a88:	00bfbe16 	blt	zero,r2,11984 <_fflush_r+0x58>
   11a8c:	0007883a 	mov	r3,zero
   11a90:	1805883a 	mov	r2,r3
   11a94:	dfc00417 	ldw	ra,16(sp)
   11a98:	dcc00317 	ldw	r19,12(sp)
   11a9c:	dc800217 	ldw	r18,8(sp)
   11aa0:	dc400117 	ldw	r17,4(sp)
   11aa4:	dc000017 	ldw	r16,0(sp)
   11aa8:	dec00504 	addi	sp,sp,20
   11aac:	f800283a 	ret
   11ab0:	0011bc40 	call	11bc4 <__sinit>
   11ab4:	003fa806 	br	11958 <_fflush_r+0x2c>
   11ab8:	90800517 	ldw	r2,20(r18)
   11abc:	90800215 	stw	r2,8(r18)
   11ac0:	003fda06 	br	11a2c <_fflush_r+0x100>
   11ac4:	90800117 	ldw	r2,4(r18)
   11ac8:	90c00c17 	ldw	r3,48(r18)
   11acc:	80a1c83a 	sub	r16,r16,r2
   11ad0:	183fb426 	beq	r3,zero,119a4 <_fflush_r+0x78>
   11ad4:	90800f17 	ldw	r2,60(r18)
   11ad8:	80a1c83a 	sub	r16,r16,r2
   11adc:	003fb106 	br	119a4 <_fflush_r+0x78>
   11ae0:	91400717 	ldw	r5,28(r18)
   11ae4:	9809883a 	mov	r4,r19
   11ae8:	000d883a 	mov	r6,zero
   11aec:	01c00044 	movi	r7,1
   11af0:	403ee83a 	callr	r8
   11af4:	1021883a 	mov	r16,r2
   11af8:	00bfffc4 	movi	r2,-1
   11afc:	80800226 	beq	r16,r2,11b08 <_fflush_r+0x1dc>
   11b00:	92000a17 	ldw	r8,40(r18)
   11b04:	003fa406 	br	11998 <_fflush_r+0x6c>
   11b08:	98c00017 	ldw	r3,0(r19)
   11b0c:	00800744 	movi	r2,29
   11b10:	18bfde26 	beq	r3,r2,11a8c <_fflush_r+0x160>
   11b14:	9080030b 	ldhu	r2,12(r18)
   11b18:	8007883a 	mov	r3,r16
   11b1c:	10801014 	ori	r2,r2,64
   11b20:	9080030d 	sth	r2,12(r18)
   11b24:	003fcf06 	br	11a64 <_fflush_r+0x138>

00011b28 <fflush>:
   11b28:	01400074 	movhi	r5,1
   11b2c:	29464b04 	addi	r5,r5,6444
   11b30:	2007883a 	mov	r3,r4
   11b34:	20000526 	beq	r4,zero,11b4c <fflush+0x24>
   11b38:	00800074 	movhi	r2,1
   11b3c:	109bff04 	addi	r2,r2,28668
   11b40:	11000017 	ldw	r4,0(r2)
   11b44:	180b883a 	mov	r5,r3
   11b48:	001192c1 	jmpi	1192c <_fflush_r>
   11b4c:	00800074 	movhi	r2,1
   11b50:	109c0004 	addi	r2,r2,28672
   11b54:	11000017 	ldw	r4,0(r2)
   11b58:	001225c1 	jmpi	1225c <_fwalk_reent>

00011b5c <std>:
   11b5c:	00800074 	movhi	r2,1
   11b60:	10898204 	addi	r2,r2,9736
   11b64:	20800b15 	stw	r2,44(r4)
   11b68:	00800074 	movhi	r2,1
   11b6c:	1089bd04 	addi	r2,r2,9972
   11b70:	20800815 	stw	r2,32(r4)
   11b74:	00c00074 	movhi	r3,1
   11b78:	18c99e04 	addi	r3,r3,9848
   11b7c:	00800074 	movhi	r2,1
   11b80:	10898404 	addi	r2,r2,9744
   11b84:	2140030d 	sth	r5,12(r4)
   11b88:	2180038d 	sth	r6,14(r4)
   11b8c:	20c00915 	stw	r3,36(r4)
   11b90:	20800a15 	stw	r2,40(r4)
   11b94:	20000015 	stw	zero,0(r4)
   11b98:	20000115 	stw	zero,4(r4)
   11b9c:	20000215 	stw	zero,8(r4)
   11ba0:	20000415 	stw	zero,16(r4)
   11ba4:	20000515 	stw	zero,20(r4)
   11ba8:	20000615 	stw	zero,24(r4)
   11bac:	21000715 	stw	r4,28(r4)
   11bb0:	f800283a 	ret

00011bb4 <__sfp_lock_acquire>:
   11bb4:	f800283a 	ret

00011bb8 <__sfp_lock_release>:
   11bb8:	f800283a 	ret

00011bbc <__sinit_lock_acquire>:
   11bbc:	f800283a 	ret

00011bc0 <__sinit_lock_release>:
   11bc0:	f800283a 	ret

00011bc4 <__sinit>:
   11bc4:	20800e17 	ldw	r2,56(r4)
   11bc8:	defffd04 	addi	sp,sp,-12
   11bcc:	dc400115 	stw	r17,4(sp)
   11bd0:	dc000015 	stw	r16,0(sp)
   11bd4:	dfc00215 	stw	ra,8(sp)
   11bd8:	04400044 	movi	r17,1
   11bdc:	01400104 	movi	r5,4
   11be0:	000d883a 	mov	r6,zero
   11be4:	2021883a 	mov	r16,r4
   11be8:	2200bb04 	addi	r8,r4,748
   11bec:	200f883a 	mov	r7,r4
   11bf0:	10000526 	beq	r2,zero,11c08 <__sinit+0x44>
   11bf4:	dfc00217 	ldw	ra,8(sp)
   11bf8:	dc400117 	ldw	r17,4(sp)
   11bfc:	dc000017 	ldw	r16,0(sp)
   11c00:	dec00304 	addi	sp,sp,12
   11c04:	f800283a 	ret
   11c08:	21000117 	ldw	r4,4(r4)
   11c0c:	00800074 	movhi	r2,1
   11c10:	10872a04 	addi	r2,r2,7336
   11c14:	00c000c4 	movi	r3,3
   11c18:	80800f15 	stw	r2,60(r16)
   11c1c:	80c0b915 	stw	r3,740(r16)
   11c20:	8200ba15 	stw	r8,744(r16)
   11c24:	84400e15 	stw	r17,56(r16)
   11c28:	8000b815 	stw	zero,736(r16)
   11c2c:	0011b5c0 	call	11b5c <std>
   11c30:	81000217 	ldw	r4,8(r16)
   11c34:	880d883a 	mov	r6,r17
   11c38:	800f883a 	mov	r7,r16
   11c3c:	01400284 	movi	r5,10
   11c40:	0011b5c0 	call	11b5c <std>
   11c44:	81000317 	ldw	r4,12(r16)
   11c48:	800f883a 	mov	r7,r16
   11c4c:	01400484 	movi	r5,18
   11c50:	01800084 	movi	r6,2
   11c54:	dfc00217 	ldw	ra,8(sp)
   11c58:	dc400117 	ldw	r17,4(sp)
   11c5c:	dc000017 	ldw	r16,0(sp)
   11c60:	dec00304 	addi	sp,sp,12
   11c64:	0011b5c1 	jmpi	11b5c <std>

00011c68 <__fp_lock>:
   11c68:	0005883a 	mov	r2,zero
   11c6c:	f800283a 	ret

00011c70 <__fp_unlock>:
   11c70:	0005883a 	mov	r2,zero
   11c74:	f800283a 	ret

00011c78 <__fp_unlock_all>:
   11c78:	00800074 	movhi	r2,1
   11c7c:	109bff04 	addi	r2,r2,28668
   11c80:	11000017 	ldw	r4,0(r2)
   11c84:	01400074 	movhi	r5,1
   11c88:	29471c04 	addi	r5,r5,7280
   11c8c:	00123241 	jmpi	12324 <_fwalk>

00011c90 <__fp_lock_all>:
   11c90:	00800074 	movhi	r2,1
   11c94:	109bff04 	addi	r2,r2,28668
   11c98:	11000017 	ldw	r4,0(r2)
   11c9c:	01400074 	movhi	r5,1
   11ca0:	29471a04 	addi	r5,r5,7272
   11ca4:	00123241 	jmpi	12324 <_fwalk>

00011ca8 <_cleanup_r>:
   11ca8:	01400074 	movhi	r5,1
   11cac:	294a5304 	addi	r5,r5,10572
   11cb0:	00123241 	jmpi	12324 <_fwalk>

00011cb4 <_cleanup>:
   11cb4:	00800074 	movhi	r2,1
   11cb8:	109c0004 	addi	r2,r2,28672
   11cbc:	11000017 	ldw	r4,0(r2)
   11cc0:	0011ca81 	jmpi	11ca8 <_cleanup_r>

00011cc4 <__sfmoreglue>:
   11cc4:	defffc04 	addi	sp,sp,-16
   11cc8:	dc400115 	stw	r17,4(sp)
   11ccc:	2c401724 	muli	r17,r5,92
   11cd0:	dc800215 	stw	r18,8(sp)
   11cd4:	2825883a 	mov	r18,r5
   11cd8:	89400304 	addi	r5,r17,12
   11cdc:	dc000015 	stw	r16,0(sp)
   11ce0:	dfc00315 	stw	ra,12(sp)
   11ce4:	00107e80 	call	107e8 <_malloc_r>
   11ce8:	0021883a 	mov	r16,zero
   11cec:	880d883a 	mov	r6,r17
   11cf0:	000b883a 	mov	r5,zero
   11cf4:	10000626 	beq	r2,zero,11d10 <__sfmoreglue+0x4c>
   11cf8:	11000304 	addi	r4,r2,12
   11cfc:	14800115 	stw	r18,4(r2)
   11d00:	10000015 	stw	zero,0(r2)
   11d04:	11000215 	stw	r4,8(r2)
   11d08:	1021883a 	mov	r16,r2
   11d0c:	00125700 	call	12570 <memset>
   11d10:	8005883a 	mov	r2,r16
   11d14:	dfc00317 	ldw	ra,12(sp)
   11d18:	dc800217 	ldw	r18,8(sp)
   11d1c:	dc400117 	ldw	r17,4(sp)
   11d20:	dc000017 	ldw	r16,0(sp)
   11d24:	dec00404 	addi	sp,sp,16
   11d28:	f800283a 	ret

00011d2c <__sfp>:
   11d2c:	defffd04 	addi	sp,sp,-12
   11d30:	00800074 	movhi	r2,1
   11d34:	109c0004 	addi	r2,r2,28672
   11d38:	dc000015 	stw	r16,0(sp)
   11d3c:	14000017 	ldw	r16,0(r2)
   11d40:	dc400115 	stw	r17,4(sp)
   11d44:	dfc00215 	stw	ra,8(sp)
   11d48:	80800e17 	ldw	r2,56(r16)
   11d4c:	2023883a 	mov	r17,r4
   11d50:	10002626 	beq	r2,zero,11dec <__sfp+0xc0>
   11d54:	8400b804 	addi	r16,r16,736
   11d58:	80800117 	ldw	r2,4(r16)
   11d5c:	81000217 	ldw	r4,8(r16)
   11d60:	10ffffc4 	addi	r3,r2,-1
   11d64:	18000916 	blt	r3,zero,11d8c <__sfp+0x60>
   11d68:	2080030f 	ldh	r2,12(r4)
   11d6c:	10000b26 	beq	r2,zero,11d9c <__sfp+0x70>
   11d70:	017fffc4 	movi	r5,-1
   11d74:	00000206 	br	11d80 <__sfp+0x54>
   11d78:	2080030f 	ldh	r2,12(r4)
   11d7c:	10000726 	beq	r2,zero,11d9c <__sfp+0x70>
   11d80:	18ffffc4 	addi	r3,r3,-1
   11d84:	21001704 	addi	r4,r4,92
   11d88:	197ffb1e 	bne	r3,r5,11d78 <__sfp+0x4c>
   11d8c:	80800017 	ldw	r2,0(r16)
   11d90:	10001926 	beq	r2,zero,11df8 <__sfp+0xcc>
   11d94:	1021883a 	mov	r16,r2
   11d98:	003fef06 	br	11d58 <__sfp+0x2c>
   11d9c:	00bfffc4 	movi	r2,-1
   11da0:	00c00044 	movi	r3,1
   11da4:	2080038d 	sth	r2,14(r4)
   11da8:	20c0030d 	sth	r3,12(r4)
   11dac:	20000015 	stw	zero,0(r4)
   11db0:	20000215 	stw	zero,8(r4)
   11db4:	20000115 	stw	zero,4(r4)
   11db8:	20000415 	stw	zero,16(r4)
   11dbc:	20000515 	stw	zero,20(r4)
   11dc0:	20000615 	stw	zero,24(r4)
   11dc4:	20000c15 	stw	zero,48(r4)
   11dc8:	20000d15 	stw	zero,52(r4)
   11dcc:	20001115 	stw	zero,68(r4)
   11dd0:	20001215 	stw	zero,72(r4)
   11dd4:	2005883a 	mov	r2,r4
   11dd8:	dfc00217 	ldw	ra,8(sp)
   11ddc:	dc400117 	ldw	r17,4(sp)
   11de0:	dc000017 	ldw	r16,0(sp)
   11de4:	dec00304 	addi	sp,sp,12
   11de8:	f800283a 	ret
   11dec:	8009883a 	mov	r4,r16
   11df0:	0011bc40 	call	11bc4 <__sinit>
   11df4:	003fd706 	br	11d54 <__sfp+0x28>
   11df8:	8809883a 	mov	r4,r17
   11dfc:	01400104 	movi	r5,4
   11e00:	0011cc40 	call	11cc4 <__sfmoreglue>
   11e04:	80800015 	stw	r2,0(r16)
   11e08:	103fe21e 	bne	r2,zero,11d94 <__sfp+0x68>
   11e0c:	00800304 	movi	r2,12
   11e10:	0009883a 	mov	r4,zero
   11e14:	88800015 	stw	r2,0(r17)
   11e18:	003fee06 	br	11dd4 <__sfp+0xa8>

00011e1c <_malloc_trim_r>:
   11e1c:	defffb04 	addi	sp,sp,-20
   11e20:	dcc00315 	stw	r19,12(sp)
   11e24:	04c00074 	movhi	r19,1
   11e28:	9cd67b04 	addi	r19,r19,23020
   11e2c:	dc800215 	stw	r18,8(sp)
   11e30:	dc400115 	stw	r17,4(sp)
   11e34:	dc000015 	stw	r16,0(sp)
   11e38:	2823883a 	mov	r17,r5
   11e3c:	2025883a 	mov	r18,r4
   11e40:	dfc00415 	stw	ra,16(sp)
   11e44:	00131b80 	call	131b8 <__malloc_lock>
   11e48:	98800217 	ldw	r2,8(r19)
   11e4c:	9009883a 	mov	r4,r18
   11e50:	000b883a 	mov	r5,zero
   11e54:	10c00117 	ldw	r3,4(r2)
   11e58:	00bfff04 	movi	r2,-4
   11e5c:	18a0703a 	and	r16,r3,r2
   11e60:	8463c83a 	sub	r17,r16,r17
   11e64:	8c43fbc4 	addi	r17,r17,4079
   11e68:	8822d33a 	srli	r17,r17,12
   11e6c:	0083ffc4 	movi	r2,4095
   11e70:	8c7fffc4 	addi	r17,r17,-1
   11e74:	8822933a 	slli	r17,r17,12
   11e78:	1440060e 	bge	r2,r17,11e94 <_malloc_trim_r+0x78>
   11e7c:	00117800 	call	11780 <_sbrk_r>
   11e80:	98c00217 	ldw	r3,8(r19)
   11e84:	9009883a 	mov	r4,r18
   11e88:	044bc83a 	sub	r5,zero,r17
   11e8c:	80c7883a 	add	r3,r16,r3
   11e90:	10c00926 	beq	r2,r3,11eb8 <_malloc_trim_r+0x9c>
   11e94:	00131d80 	call	131d8 <__malloc_unlock>
   11e98:	0005883a 	mov	r2,zero
   11e9c:	dfc00417 	ldw	ra,16(sp)
   11ea0:	dcc00317 	ldw	r19,12(sp)
   11ea4:	dc800217 	ldw	r18,8(sp)
   11ea8:	dc400117 	ldw	r17,4(sp)
   11eac:	dc000017 	ldw	r16,0(sp)
   11eb0:	dec00504 	addi	sp,sp,20
   11eb4:	f800283a 	ret
   11eb8:	9009883a 	mov	r4,r18
   11ebc:	00117800 	call	11780 <_sbrk_r>
   11ec0:	844dc83a 	sub	r6,r16,r17
   11ec4:	00ffffc4 	movi	r3,-1
   11ec8:	9009883a 	mov	r4,r18
   11ecc:	000b883a 	mov	r5,zero
   11ed0:	01c000b4 	movhi	r7,2
   11ed4:	39e2a904 	addi	r7,r7,-30044
   11ed8:	31800054 	ori	r6,r6,1
   11edc:	10c00926 	beq	r2,r3,11f04 <_malloc_trim_r+0xe8>
   11ee0:	38800017 	ldw	r2,0(r7)
   11ee4:	98c00217 	ldw	r3,8(r19)
   11ee8:	9009883a 	mov	r4,r18
   11eec:	1445c83a 	sub	r2,r2,r17
   11ef0:	38800015 	stw	r2,0(r7)
   11ef4:	19800115 	stw	r6,4(r3)
   11ef8:	00131d80 	call	131d8 <__malloc_unlock>
   11efc:	00800044 	movi	r2,1
   11f00:	003fe606 	br	11e9c <_malloc_trim_r+0x80>
   11f04:	00117800 	call	11780 <_sbrk_r>
   11f08:	99800217 	ldw	r6,8(r19)
   11f0c:	100f883a 	mov	r7,r2
   11f10:	9009883a 	mov	r4,r18
   11f14:	1187c83a 	sub	r3,r2,r6
   11f18:	008003c4 	movi	r2,15
   11f1c:	19400054 	ori	r5,r3,1
   11f20:	10ffdc0e 	bge	r2,r3,11e94 <_malloc_trim_r+0x78>
   11f24:	00800074 	movhi	r2,1
   11f28:	109c0204 	addi	r2,r2,28680
   11f2c:	10c00017 	ldw	r3,0(r2)
   11f30:	008000b4 	movhi	r2,2
   11f34:	10a2a904 	addi	r2,r2,-30044
   11f38:	31400115 	stw	r5,4(r6)
   11f3c:	38c7c83a 	sub	r3,r7,r3
   11f40:	10c00015 	stw	r3,0(r2)
   11f44:	003fd306 	br	11e94 <_malloc_trim_r+0x78>

00011f48 <_free_r>:
   11f48:	defffd04 	addi	sp,sp,-12
   11f4c:	dc400115 	stw	r17,4(sp)
   11f50:	dc000015 	stw	r16,0(sp)
   11f54:	dfc00215 	stw	ra,8(sp)
   11f58:	2821883a 	mov	r16,r5
   11f5c:	2023883a 	mov	r17,r4
   11f60:	28005a26 	beq	r5,zero,120cc <_free_r+0x184>
   11f64:	00131b80 	call	131b8 <__malloc_lock>
   11f68:	823ffe04 	addi	r8,r16,-8
   11f6c:	41400117 	ldw	r5,4(r8)
   11f70:	00bfff84 	movi	r2,-2
   11f74:	02800074 	movhi	r10,1
   11f78:	52967b04 	addi	r10,r10,23020
   11f7c:	288e703a 	and	r7,r5,r2
   11f80:	41cd883a 	add	r6,r8,r7
   11f84:	30c00117 	ldw	r3,4(r6)
   11f88:	51000217 	ldw	r4,8(r10)
   11f8c:	00bfff04 	movi	r2,-4
   11f90:	1892703a 	and	r9,r3,r2
   11f94:	5017883a 	mov	r11,r10
   11f98:	31006726 	beq	r6,r4,12138 <_free_r+0x1f0>
   11f9c:	2880004c 	andi	r2,r5,1
   11fa0:	1005003a 	cmpeq	r2,r2,zero
   11fa4:	32400115 	stw	r9,4(r6)
   11fa8:	10001a1e 	bne	r2,zero,12014 <_free_r+0xcc>
   11fac:	000b883a 	mov	r5,zero
   11fb0:	3247883a 	add	r3,r6,r9
   11fb4:	18800117 	ldw	r2,4(r3)
   11fb8:	1080004c 	andi	r2,r2,1
   11fbc:	1000231e 	bne	r2,zero,1204c <_free_r+0x104>
   11fc0:	280ac03a 	cmpne	r5,r5,zero
   11fc4:	3a4f883a 	add	r7,r7,r9
   11fc8:	2800451e 	bne	r5,zero,120e0 <_free_r+0x198>
   11fcc:	31000217 	ldw	r4,8(r6)
   11fd0:	00800074 	movhi	r2,1
   11fd4:	10967d04 	addi	r2,r2,23028
   11fd8:	20807b26 	beq	r4,r2,121c8 <_free_r+0x280>
   11fdc:	30800317 	ldw	r2,12(r6)
   11fe0:	3a07883a 	add	r3,r7,r8
   11fe4:	19c00015 	stw	r7,0(r3)
   11fe8:	11000215 	stw	r4,8(r2)
   11fec:	20800315 	stw	r2,12(r4)
   11ff0:	38800054 	ori	r2,r7,1
   11ff4:	40800115 	stw	r2,4(r8)
   11ff8:	28001a26 	beq	r5,zero,12064 <_free_r+0x11c>
   11ffc:	8809883a 	mov	r4,r17
   12000:	dfc00217 	ldw	ra,8(sp)
   12004:	dc400117 	ldw	r17,4(sp)
   12008:	dc000017 	ldw	r16,0(sp)
   1200c:	dec00304 	addi	sp,sp,12
   12010:	00131d81 	jmpi	131d8 <__malloc_unlock>
   12014:	80bffe17 	ldw	r2,-8(r16)
   12018:	50c00204 	addi	r3,r10,8
   1201c:	4091c83a 	sub	r8,r8,r2
   12020:	41000217 	ldw	r4,8(r8)
   12024:	388f883a 	add	r7,r7,r2
   12028:	20c06126 	beq	r4,r3,121b0 <_free_r+0x268>
   1202c:	40800317 	ldw	r2,12(r8)
   12030:	3247883a 	add	r3,r6,r9
   12034:	000b883a 	mov	r5,zero
   12038:	11000215 	stw	r4,8(r2)
   1203c:	20800315 	stw	r2,12(r4)
   12040:	18800117 	ldw	r2,4(r3)
   12044:	1080004c 	andi	r2,r2,1
   12048:	103fdd26 	beq	r2,zero,11fc0 <_free_r+0x78>
   1204c:	38800054 	ori	r2,r7,1
   12050:	3a07883a 	add	r3,r7,r8
   12054:	280ac03a 	cmpne	r5,r5,zero
   12058:	40800115 	stw	r2,4(r8)
   1205c:	19c00015 	stw	r7,0(r3)
   12060:	283fe61e 	bne	r5,zero,11ffc <_free_r+0xb4>
   12064:	00807fc4 	movi	r2,511
   12068:	11c01f2e 	bgeu	r2,r7,120e8 <_free_r+0x1a0>
   1206c:	3806d27a 	srli	r3,r7,9
   12070:	1800481e 	bne	r3,zero,12194 <_free_r+0x24c>
   12074:	3804d0fa 	srli	r2,r7,3
   12078:	100690fa 	slli	r3,r2,3
   1207c:	1acd883a 	add	r6,r3,r11
   12080:	31400217 	ldw	r5,8(r6)
   12084:	31405926 	beq	r6,r5,121ec <_free_r+0x2a4>
   12088:	28800117 	ldw	r2,4(r5)
   1208c:	00ffff04 	movi	r3,-4
   12090:	10c4703a 	and	r2,r2,r3
   12094:	3880022e 	bgeu	r7,r2,120a0 <_free_r+0x158>
   12098:	29400217 	ldw	r5,8(r5)
   1209c:	317ffa1e 	bne	r6,r5,12088 <_free_r+0x140>
   120a0:	29800317 	ldw	r6,12(r5)
   120a4:	41800315 	stw	r6,12(r8)
   120a8:	41400215 	stw	r5,8(r8)
   120ac:	8809883a 	mov	r4,r17
   120b0:	2a000315 	stw	r8,12(r5)
   120b4:	32000215 	stw	r8,8(r6)
   120b8:	dfc00217 	ldw	ra,8(sp)
   120bc:	dc400117 	ldw	r17,4(sp)
   120c0:	dc000017 	ldw	r16,0(sp)
   120c4:	dec00304 	addi	sp,sp,12
   120c8:	00131d81 	jmpi	131d8 <__malloc_unlock>
   120cc:	dfc00217 	ldw	ra,8(sp)
   120d0:	dc400117 	ldw	r17,4(sp)
   120d4:	dc000017 	ldw	r16,0(sp)
   120d8:	dec00304 	addi	sp,sp,12
   120dc:	f800283a 	ret
   120e0:	31000217 	ldw	r4,8(r6)
   120e4:	003fbd06 	br	11fdc <_free_r+0x94>
   120e8:	3806d0fa 	srli	r3,r7,3
   120ec:	00800044 	movi	r2,1
   120f0:	51400117 	ldw	r5,4(r10)
   120f4:	180890fa 	slli	r4,r3,3
   120f8:	1807d0ba 	srai	r3,r3,2
   120fc:	22c9883a 	add	r4,r4,r11
   12100:	21800217 	ldw	r6,8(r4)
   12104:	10c4983a 	sll	r2,r2,r3
   12108:	41000315 	stw	r4,12(r8)
   1210c:	41800215 	stw	r6,8(r8)
   12110:	288ab03a 	or	r5,r5,r2
   12114:	22000215 	stw	r8,8(r4)
   12118:	8809883a 	mov	r4,r17
   1211c:	51400115 	stw	r5,4(r10)
   12120:	32000315 	stw	r8,12(r6)
   12124:	dfc00217 	ldw	ra,8(sp)
   12128:	dc400117 	ldw	r17,4(sp)
   1212c:	dc000017 	ldw	r16,0(sp)
   12130:	dec00304 	addi	sp,sp,12
   12134:	00131d81 	jmpi	131d8 <__malloc_unlock>
   12138:	2880004c 	andi	r2,r5,1
   1213c:	3a4d883a 	add	r6,r7,r9
   12140:	1000071e 	bne	r2,zero,12160 <_free_r+0x218>
   12144:	80bffe17 	ldw	r2,-8(r16)
   12148:	4091c83a 	sub	r8,r8,r2
   1214c:	41000317 	ldw	r4,12(r8)
   12150:	40c00217 	ldw	r3,8(r8)
   12154:	308d883a 	add	r6,r6,r2
   12158:	20c00215 	stw	r3,8(r4)
   1215c:	19000315 	stw	r4,12(r3)
   12160:	00800074 	movhi	r2,1
   12164:	109c0104 	addi	r2,r2,28676
   12168:	11000017 	ldw	r4,0(r2)
   1216c:	30c00054 	ori	r3,r6,1
   12170:	52000215 	stw	r8,8(r10)
   12174:	40c00115 	stw	r3,4(r8)
   12178:	313fa036 	bltu	r6,r4,11ffc <_free_r+0xb4>
   1217c:	008000b4 	movhi	r2,2
   12180:	10a29f04 	addi	r2,r2,-30084
   12184:	11400017 	ldw	r5,0(r2)
   12188:	8809883a 	mov	r4,r17
   1218c:	0011e1c0 	call	11e1c <_malloc_trim_r>
   12190:	003f9a06 	br	11ffc <_free_r+0xb4>
   12194:	00800104 	movi	r2,4
   12198:	10c0072e 	bgeu	r2,r3,121b8 <_free_r+0x270>
   1219c:	00800504 	movi	r2,20
   121a0:	10c01936 	bltu	r2,r3,12208 <_free_r+0x2c0>
   121a4:	188016c4 	addi	r2,r3,91
   121a8:	100690fa 	slli	r3,r2,3
   121ac:	003fb306 	br	1207c <_free_r+0x134>
   121b0:	01400044 	movi	r5,1
   121b4:	003f7e06 	br	11fb0 <_free_r+0x68>
   121b8:	3804d1ba 	srli	r2,r7,6
   121bc:	10800e04 	addi	r2,r2,56
   121c0:	100690fa 	slli	r3,r2,3
   121c4:	003fad06 	br	1207c <_free_r+0x134>
   121c8:	22000315 	stw	r8,12(r4)
   121cc:	22000215 	stw	r8,8(r4)
   121d0:	3a05883a 	add	r2,r7,r8
   121d4:	38c00054 	ori	r3,r7,1
   121d8:	11c00015 	stw	r7,0(r2)
   121dc:	41000215 	stw	r4,8(r8)
   121e0:	40c00115 	stw	r3,4(r8)
   121e4:	41000315 	stw	r4,12(r8)
   121e8:	003f8406 	br	11ffc <_free_r+0xb4>
   121ec:	1005d0ba 	srai	r2,r2,2
   121f0:	00c00044 	movi	r3,1
   121f4:	51000117 	ldw	r4,4(r10)
   121f8:	1886983a 	sll	r3,r3,r2
   121fc:	20c8b03a 	or	r4,r4,r3
   12200:	51000115 	stw	r4,4(r10)
   12204:	003fa706 	br	120a4 <_free_r+0x15c>
   12208:	00801504 	movi	r2,84
   1220c:	10c00436 	bltu	r2,r3,12220 <_free_r+0x2d8>
   12210:	3804d33a 	srli	r2,r7,12
   12214:	10801b84 	addi	r2,r2,110
   12218:	100690fa 	slli	r3,r2,3
   1221c:	003f9706 	br	1207c <_free_r+0x134>
   12220:	00805504 	movi	r2,340
   12224:	10c00436 	bltu	r2,r3,12238 <_free_r+0x2f0>
   12228:	3804d3fa 	srli	r2,r7,15
   1222c:	10801dc4 	addi	r2,r2,119
   12230:	100690fa 	slli	r3,r2,3
   12234:	003f9106 	br	1207c <_free_r+0x134>
   12238:	00815504 	movi	r2,1364
   1223c:	10c0032e 	bgeu	r2,r3,1224c <_free_r+0x304>
   12240:	00801f84 	movi	r2,126
   12244:	00c0fc04 	movi	r3,1008
   12248:	003f8c06 	br	1207c <_free_r+0x134>
   1224c:	3804d4ba 	srli	r2,r7,18
   12250:	10801f04 	addi	r2,r2,124
   12254:	100690fa 	slli	r3,r2,3
   12258:	003f8806 	br	1207c <_free_r+0x134>

0001225c <_fwalk_reent>:
   1225c:	defff704 	addi	sp,sp,-36
   12260:	dcc00315 	stw	r19,12(sp)
   12264:	24c0b804 	addi	r19,r4,736
   12268:	dd800615 	stw	r22,24(sp)
   1226c:	dd400515 	stw	r21,20(sp)
   12270:	dfc00815 	stw	ra,32(sp)
   12274:	ddc00715 	stw	r23,28(sp)
   12278:	dd000415 	stw	r20,16(sp)
   1227c:	dc800215 	stw	r18,8(sp)
   12280:	dc400115 	stw	r17,4(sp)
   12284:	dc000015 	stw	r16,0(sp)
   12288:	202b883a 	mov	r21,r4
   1228c:	282d883a 	mov	r22,r5
   12290:	0011bb40 	call	11bb4 <__sfp_lock_acquire>
   12294:	98002126 	beq	r19,zero,1231c <_fwalk_reent+0xc0>
   12298:	002f883a 	mov	r23,zero
   1229c:	9c800117 	ldw	r18,4(r19)
   122a0:	9c000217 	ldw	r16,8(r19)
   122a4:	90bfffc4 	addi	r2,r18,-1
   122a8:	10000d16 	blt	r2,zero,122e0 <_fwalk_reent+0x84>
   122ac:	0023883a 	mov	r17,zero
   122b0:	053fffc4 	movi	r20,-1
   122b4:	8080030f 	ldh	r2,12(r16)
   122b8:	8c400044 	addi	r17,r17,1
   122bc:	10000626 	beq	r2,zero,122d8 <_fwalk_reent+0x7c>
   122c0:	8080038f 	ldh	r2,14(r16)
   122c4:	800b883a 	mov	r5,r16
   122c8:	a809883a 	mov	r4,r21
   122cc:	15000226 	beq	r2,r20,122d8 <_fwalk_reent+0x7c>
   122d0:	b03ee83a 	callr	r22
   122d4:	b8aeb03a 	or	r23,r23,r2
   122d8:	84001704 	addi	r16,r16,92
   122dc:	947ff51e 	bne	r18,r17,122b4 <_fwalk_reent+0x58>
   122e0:	9cc00017 	ldw	r19,0(r19)
   122e4:	983fed1e 	bne	r19,zero,1229c <_fwalk_reent+0x40>
   122e8:	0011bb80 	call	11bb8 <__sfp_lock_release>
   122ec:	b805883a 	mov	r2,r23
   122f0:	dfc00817 	ldw	ra,32(sp)
   122f4:	ddc00717 	ldw	r23,28(sp)
   122f8:	dd800617 	ldw	r22,24(sp)
   122fc:	dd400517 	ldw	r21,20(sp)
   12300:	dd000417 	ldw	r20,16(sp)
   12304:	dcc00317 	ldw	r19,12(sp)
   12308:	dc800217 	ldw	r18,8(sp)
   1230c:	dc400117 	ldw	r17,4(sp)
   12310:	dc000017 	ldw	r16,0(sp)
   12314:	dec00904 	addi	sp,sp,36
   12318:	f800283a 	ret
   1231c:	002f883a 	mov	r23,zero
   12320:	003ff106 	br	122e8 <_fwalk_reent+0x8c>

00012324 <_fwalk>:
   12324:	defff804 	addi	sp,sp,-32
   12328:	dcc00315 	stw	r19,12(sp)
   1232c:	24c0b804 	addi	r19,r4,736
   12330:	dd400515 	stw	r21,20(sp)
   12334:	dfc00715 	stw	ra,28(sp)
   12338:	dd800615 	stw	r22,24(sp)
   1233c:	dd000415 	stw	r20,16(sp)
   12340:	dc800215 	stw	r18,8(sp)
   12344:	dc400115 	stw	r17,4(sp)
   12348:	dc000015 	stw	r16,0(sp)
   1234c:	282b883a 	mov	r21,r5
   12350:	0011bb40 	call	11bb4 <__sfp_lock_acquire>
   12354:	98001f26 	beq	r19,zero,123d4 <_fwalk+0xb0>
   12358:	002d883a 	mov	r22,zero
   1235c:	9c800117 	ldw	r18,4(r19)
   12360:	9c000217 	ldw	r16,8(r19)
   12364:	90bfffc4 	addi	r2,r18,-1
   12368:	10000c16 	blt	r2,zero,1239c <_fwalk+0x78>
   1236c:	0023883a 	mov	r17,zero
   12370:	053fffc4 	movi	r20,-1
   12374:	8080030f 	ldh	r2,12(r16)
   12378:	8c400044 	addi	r17,r17,1
   1237c:	10000526 	beq	r2,zero,12394 <_fwalk+0x70>
   12380:	8080038f 	ldh	r2,14(r16)
   12384:	8009883a 	mov	r4,r16
   12388:	15000226 	beq	r2,r20,12394 <_fwalk+0x70>
   1238c:	a83ee83a 	callr	r21
   12390:	b0acb03a 	or	r22,r22,r2
   12394:	84001704 	addi	r16,r16,92
   12398:	947ff61e 	bne	r18,r17,12374 <_fwalk+0x50>
   1239c:	9cc00017 	ldw	r19,0(r19)
   123a0:	983fee1e 	bne	r19,zero,1235c <_fwalk+0x38>
   123a4:	0011bb80 	call	11bb8 <__sfp_lock_release>
   123a8:	b005883a 	mov	r2,r22
   123ac:	dfc00717 	ldw	ra,28(sp)
   123b0:	dd800617 	ldw	r22,24(sp)
   123b4:	dd400517 	ldw	r21,20(sp)
   123b8:	dd000417 	ldw	r20,16(sp)
   123bc:	dcc00317 	ldw	r19,12(sp)
   123c0:	dc800217 	ldw	r18,8(sp)
   123c4:	dc400117 	ldw	r17,4(sp)
   123c8:	dc000017 	ldw	r16,0(sp)
   123cc:	dec00804 	addi	sp,sp,32
   123d0:	f800283a 	ret
   123d4:	002d883a 	mov	r22,zero
   123d8:	003ff206 	br	123a4 <_fwalk+0x80>

000123dc <__smakebuf_r>:
   123dc:	2880030b 	ldhu	r2,12(r5)
   123e0:	deffed04 	addi	sp,sp,-76
   123e4:	dc401015 	stw	r17,64(sp)
   123e8:	1080008c 	andi	r2,r2,2
   123ec:	dc000f15 	stw	r16,60(sp)
   123f0:	dfc01215 	stw	ra,72(sp)
   123f4:	dc801115 	stw	r18,68(sp)
   123f8:	2821883a 	mov	r16,r5
   123fc:	2023883a 	mov	r17,r4
   12400:	10000b26 	beq	r2,zero,12430 <__smakebuf_r+0x54>
   12404:	28c010c4 	addi	r3,r5,67
   12408:	00800044 	movi	r2,1
   1240c:	28800515 	stw	r2,20(r5)
   12410:	28c00415 	stw	r3,16(r5)
   12414:	28c00015 	stw	r3,0(r5)
   12418:	dfc01217 	ldw	ra,72(sp)
   1241c:	dc801117 	ldw	r18,68(sp)
   12420:	dc401017 	ldw	r17,64(sp)
   12424:	dc000f17 	ldw	r16,60(sp)
   12428:	dec01304 	addi	sp,sp,76
   1242c:	f800283a 	ret
   12430:	2940038f 	ldh	r5,14(r5)
   12434:	28002116 	blt	r5,zero,124bc <__smakebuf_r+0xe0>
   12438:	d80d883a 	mov	r6,sp
   1243c:	00129600 	call	12960 <_fstat_r>
   12440:	10001e16 	blt	r2,zero,124bc <__smakebuf_r+0xe0>
   12444:	d8800117 	ldw	r2,4(sp)
   12448:	00e00014 	movui	r3,32768
   1244c:	113c000c 	andi	r4,r2,61440
   12450:	20c03126 	beq	r4,r3,12518 <__smakebuf_r+0x13c>
   12454:	8080030b 	ldhu	r2,12(r16)
   12458:	00c80004 	movi	r3,8192
   1245c:	10820014 	ori	r2,r2,2048
   12460:	8080030d 	sth	r2,12(r16)
   12464:	20c01e26 	beq	r4,r3,124e0 <__smakebuf_r+0x104>
   12468:	04810004 	movi	r18,1024
   1246c:	8809883a 	mov	r4,r17
   12470:	900b883a 	mov	r5,r18
   12474:	00107e80 	call	107e8 <_malloc_r>
   12478:	1009883a 	mov	r4,r2
   1247c:	10003126 	beq	r2,zero,12544 <__smakebuf_r+0x168>
   12480:	80c0030b 	ldhu	r3,12(r16)
   12484:	00800074 	movhi	r2,1
   12488:	10872a04 	addi	r2,r2,7336
   1248c:	88800f15 	stw	r2,60(r17)
   12490:	18c02014 	ori	r3,r3,128
   12494:	84800515 	stw	r18,20(r16)
   12498:	80c0030d 	sth	r3,12(r16)
   1249c:	81000415 	stw	r4,16(r16)
   124a0:	81000015 	stw	r4,0(r16)
   124a4:	dfc01217 	ldw	ra,72(sp)
   124a8:	dc801117 	ldw	r18,68(sp)
   124ac:	dc401017 	ldw	r17,64(sp)
   124b0:	dc000f17 	ldw	r16,60(sp)
   124b4:	dec01304 	addi	sp,sp,76
   124b8:	f800283a 	ret
   124bc:	80c0030b 	ldhu	r3,12(r16)
   124c0:	1880200c 	andi	r2,r3,128
   124c4:	10000426 	beq	r2,zero,124d8 <__smakebuf_r+0xfc>
   124c8:	04801004 	movi	r18,64
   124cc:	18820014 	ori	r2,r3,2048
   124d0:	8080030d 	sth	r2,12(r16)
   124d4:	003fe506 	br	1246c <__smakebuf_r+0x90>
   124d8:	04810004 	movi	r18,1024
   124dc:	003ffb06 	br	124cc <__smakebuf_r+0xf0>
   124e0:	8140038f 	ldh	r5,14(r16)
   124e4:	8809883a 	mov	r4,r17
   124e8:	00129d40 	call	129d4 <_isatty_r>
   124ec:	103fde26 	beq	r2,zero,12468 <__smakebuf_r+0x8c>
   124f0:	8080030b 	ldhu	r2,12(r16)
   124f4:	80c010c4 	addi	r3,r16,67
   124f8:	04810004 	movi	r18,1024
   124fc:	10800054 	ori	r2,r2,1
   12500:	8080030d 	sth	r2,12(r16)
   12504:	00800044 	movi	r2,1
   12508:	80c00415 	stw	r3,16(r16)
   1250c:	80800515 	stw	r2,20(r16)
   12510:	80c00015 	stw	r3,0(r16)
   12514:	003fd506 	br	1246c <__smakebuf_r+0x90>
   12518:	80c00a17 	ldw	r3,40(r16)
   1251c:	00800074 	movhi	r2,1
   12520:	10898404 	addi	r2,r2,9744
   12524:	18bfcb1e 	bne	r3,r2,12454 <__smakebuf_r+0x78>
   12528:	8080030b 	ldhu	r2,12(r16)
   1252c:	00c10004 	movi	r3,1024
   12530:	1825883a 	mov	r18,r3
   12534:	10c4b03a 	or	r2,r2,r3
   12538:	8080030d 	sth	r2,12(r16)
   1253c:	80c01315 	stw	r3,76(r16)
   12540:	003fca06 	br	1246c <__smakebuf_r+0x90>
   12544:	8100030b 	ldhu	r4,12(r16)
   12548:	2080800c 	andi	r2,r4,512
   1254c:	103fb21e 	bne	r2,zero,12418 <__smakebuf_r+0x3c>
   12550:	80c010c4 	addi	r3,r16,67
   12554:	21000094 	ori	r4,r4,2
   12558:	00800044 	movi	r2,1
   1255c:	80800515 	stw	r2,20(r16)
   12560:	8100030d 	sth	r4,12(r16)
   12564:	80c00415 	stw	r3,16(r16)
   12568:	80c00015 	stw	r3,0(r16)
   1256c:	003faa06 	br	12418 <__smakebuf_r+0x3c>

00012570 <memset>:
   12570:	008000c4 	movi	r2,3
   12574:	29403fcc 	andi	r5,r5,255
   12578:	2007883a 	mov	r3,r4
   1257c:	1180022e 	bgeu	r2,r6,12588 <memset+0x18>
   12580:	2084703a 	and	r2,r4,r2
   12584:	10000826 	beq	r2,zero,125a8 <memset+0x38>
   12588:	30000526 	beq	r6,zero,125a0 <memset+0x30>
   1258c:	2805883a 	mov	r2,r5
   12590:	30cd883a 	add	r6,r6,r3
   12594:	18800005 	stb	r2,0(r3)
   12598:	18c00044 	addi	r3,r3,1
   1259c:	19bffd1e 	bne	r3,r6,12594 <memset+0x24>
   125a0:	2005883a 	mov	r2,r4
   125a4:	f800283a 	ret
   125a8:	2804923a 	slli	r2,r5,8
   125ac:	020003c4 	movi	r8,15
   125b0:	200f883a 	mov	r7,r4
   125b4:	2884b03a 	or	r2,r5,r2
   125b8:	1006943a 	slli	r3,r2,16
   125bc:	10c6b03a 	or	r3,r2,r3
   125c0:	41800a2e 	bgeu	r8,r6,125ec <memset+0x7c>
   125c4:	4005883a 	mov	r2,r8
   125c8:	31bffc04 	addi	r6,r6,-16
   125cc:	38c00015 	stw	r3,0(r7)
   125d0:	38c00115 	stw	r3,4(r7)
   125d4:	38c00215 	stw	r3,8(r7)
   125d8:	38c00315 	stw	r3,12(r7)
   125dc:	39c00404 	addi	r7,r7,16
   125e0:	11bff936 	bltu	r2,r6,125c8 <memset+0x58>
   125e4:	008000c4 	movi	r2,3
   125e8:	1180052e 	bgeu	r2,r6,12600 <memset+0x90>
   125ec:	31bfff04 	addi	r6,r6,-4
   125f0:	008000c4 	movi	r2,3
   125f4:	38c00015 	stw	r3,0(r7)
   125f8:	39c00104 	addi	r7,r7,4
   125fc:	11bffb36 	bltu	r2,r6,125ec <memset+0x7c>
   12600:	3807883a 	mov	r3,r7
   12604:	003fe006 	br	12588 <memset+0x18>

00012608 <__sclose>:
   12608:	2940038f 	ldh	r5,14(r5)
   1260c:	00127cc1 	jmpi	127cc <_close_r>

00012610 <__sseek>:
   12610:	defffe04 	addi	sp,sp,-8
   12614:	dc000015 	stw	r16,0(sp)
   12618:	2821883a 	mov	r16,r5
   1261c:	2940038f 	ldh	r5,14(r5)
   12620:	dfc00115 	stw	ra,4(sp)
   12624:	0012a440 	call	12a44 <_lseek_r>
   12628:	1007883a 	mov	r3,r2
   1262c:	00bfffc4 	movi	r2,-1
   12630:	18800926 	beq	r3,r2,12658 <__sseek+0x48>
   12634:	8080030b 	ldhu	r2,12(r16)
   12638:	80c01415 	stw	r3,80(r16)
   1263c:	10840014 	ori	r2,r2,4096
   12640:	8080030d 	sth	r2,12(r16)
   12644:	1805883a 	mov	r2,r3
   12648:	dfc00117 	ldw	ra,4(sp)
   1264c:	dc000017 	ldw	r16,0(sp)
   12650:	dec00204 	addi	sp,sp,8
   12654:	f800283a 	ret
   12658:	8080030b 	ldhu	r2,12(r16)
   1265c:	10bbffcc 	andi	r2,r2,61439
   12660:	8080030d 	sth	r2,12(r16)
   12664:	1805883a 	mov	r2,r3
   12668:	dfc00117 	ldw	ra,4(sp)
   1266c:	dc000017 	ldw	r16,0(sp)
   12670:	dec00204 	addi	sp,sp,8
   12674:	f800283a 	ret

00012678 <__swrite>:
   12678:	2880030b 	ldhu	r2,12(r5)
   1267c:	defffb04 	addi	sp,sp,-20
   12680:	dcc00315 	stw	r19,12(sp)
   12684:	1080400c 	andi	r2,r2,256
   12688:	dc800215 	stw	r18,8(sp)
   1268c:	dc400115 	stw	r17,4(sp)
   12690:	dc000015 	stw	r16,0(sp)
   12694:	3027883a 	mov	r19,r6
   12698:	3825883a 	mov	r18,r7
   1269c:	dfc00415 	stw	ra,16(sp)
   126a0:	2821883a 	mov	r16,r5
   126a4:	000d883a 	mov	r6,zero
   126a8:	01c00084 	movi	r7,2
   126ac:	2023883a 	mov	r17,r4
   126b0:	10000226 	beq	r2,zero,126bc <__swrite+0x44>
   126b4:	2940038f 	ldh	r5,14(r5)
   126b8:	0012a440 	call	12a44 <_lseek_r>
   126bc:	8080030b 	ldhu	r2,12(r16)
   126c0:	8140038f 	ldh	r5,14(r16)
   126c4:	8809883a 	mov	r4,r17
   126c8:	10bbffcc 	andi	r2,r2,61439
   126cc:	980d883a 	mov	r6,r19
   126d0:	900f883a 	mov	r7,r18
   126d4:	8080030d 	sth	r2,12(r16)
   126d8:	dfc00417 	ldw	ra,16(sp)
   126dc:	dcc00317 	ldw	r19,12(sp)
   126e0:	dc800217 	ldw	r18,8(sp)
   126e4:	dc400117 	ldw	r17,4(sp)
   126e8:	dc000017 	ldw	r16,0(sp)
   126ec:	dec00504 	addi	sp,sp,20
   126f0:	00127541 	jmpi	12754 <_write_r>

000126f4 <__sread>:
   126f4:	defffe04 	addi	sp,sp,-8
   126f8:	dc000015 	stw	r16,0(sp)
   126fc:	2821883a 	mov	r16,r5
   12700:	2940038f 	ldh	r5,14(r5)
   12704:	dfc00115 	stw	ra,4(sp)
   12708:	0012abc0 	call	12abc <_read_r>
   1270c:	1007883a 	mov	r3,r2
   12710:	10000816 	blt	r2,zero,12734 <__sread+0x40>
   12714:	80801417 	ldw	r2,80(r16)
   12718:	10c5883a 	add	r2,r2,r3
   1271c:	80801415 	stw	r2,80(r16)
   12720:	1805883a 	mov	r2,r3
   12724:	dfc00117 	ldw	ra,4(sp)
   12728:	dc000017 	ldw	r16,0(sp)
   1272c:	dec00204 	addi	sp,sp,8
   12730:	f800283a 	ret
   12734:	8080030b 	ldhu	r2,12(r16)
   12738:	10bbffcc 	andi	r2,r2,61439
   1273c:	8080030d 	sth	r2,12(r16)
   12740:	1805883a 	mov	r2,r3
   12744:	dfc00117 	ldw	ra,4(sp)
   12748:	dc000017 	ldw	r16,0(sp)
   1274c:	dec00204 	addi	sp,sp,8
   12750:	f800283a 	ret

00012754 <_write_r>:
   12754:	defffd04 	addi	sp,sp,-12
   12758:	dc000015 	stw	r16,0(sp)
   1275c:	040000b4 	movhi	r16,2
   12760:	8422a204 	addi	r16,r16,-30072
   12764:	dc400115 	stw	r17,4(sp)
   12768:	80000015 	stw	zero,0(r16)
   1276c:	2023883a 	mov	r17,r4
   12770:	2809883a 	mov	r4,r5
   12774:	300b883a 	mov	r5,r6
   12778:	380d883a 	mov	r6,r7
   1277c:	dfc00215 	stw	ra,8(sp)
   12780:	00134940 	call	13494 <write>
   12784:	1007883a 	mov	r3,r2
   12788:	00bfffc4 	movi	r2,-1
   1278c:	18800626 	beq	r3,r2,127a8 <_write_r+0x54>
   12790:	1805883a 	mov	r2,r3
   12794:	dfc00217 	ldw	ra,8(sp)
   12798:	dc400117 	ldw	r17,4(sp)
   1279c:	dc000017 	ldw	r16,0(sp)
   127a0:	dec00304 	addi	sp,sp,12
   127a4:	f800283a 	ret
   127a8:	80800017 	ldw	r2,0(r16)
   127ac:	103ff826 	beq	r2,zero,12790 <_write_r+0x3c>
   127b0:	88800015 	stw	r2,0(r17)
   127b4:	1805883a 	mov	r2,r3
   127b8:	dfc00217 	ldw	ra,8(sp)
   127bc:	dc400117 	ldw	r17,4(sp)
   127c0:	dc000017 	ldw	r16,0(sp)
   127c4:	dec00304 	addi	sp,sp,12
   127c8:	f800283a 	ret

000127cc <_close_r>:
   127cc:	defffd04 	addi	sp,sp,-12
   127d0:	dc000015 	stw	r16,0(sp)
   127d4:	040000b4 	movhi	r16,2
   127d8:	8422a204 	addi	r16,r16,-30072
   127dc:	dc400115 	stw	r17,4(sp)
   127e0:	80000015 	stw	zero,0(r16)
   127e4:	2023883a 	mov	r17,r4
   127e8:	2809883a 	mov	r4,r5
   127ec:	dfc00215 	stw	ra,8(sp)
   127f0:	0012b340 	call	12b34 <close>
   127f4:	1007883a 	mov	r3,r2
   127f8:	00bfffc4 	movi	r2,-1
   127fc:	18800626 	beq	r3,r2,12818 <_close_r+0x4c>
   12800:	1805883a 	mov	r2,r3
   12804:	dfc00217 	ldw	ra,8(sp)
   12808:	dc400117 	ldw	r17,4(sp)
   1280c:	dc000017 	ldw	r16,0(sp)
   12810:	dec00304 	addi	sp,sp,12
   12814:	f800283a 	ret
   12818:	80800017 	ldw	r2,0(r16)
   1281c:	103ff826 	beq	r2,zero,12800 <_close_r+0x34>
   12820:	88800015 	stw	r2,0(r17)
   12824:	1805883a 	mov	r2,r3
   12828:	dfc00217 	ldw	ra,8(sp)
   1282c:	dc400117 	ldw	r17,4(sp)
   12830:	dc000017 	ldw	r16,0(sp)
   12834:	dec00304 	addi	sp,sp,12
   12838:	f800283a 	ret

0001283c <_fclose_r>:
   1283c:	defffc04 	addi	sp,sp,-16
   12840:	dc400115 	stw	r17,4(sp)
   12844:	dc000015 	stw	r16,0(sp)
   12848:	dfc00315 	stw	ra,12(sp)
   1284c:	dc800215 	stw	r18,8(sp)
   12850:	2821883a 	mov	r16,r5
   12854:	2023883a 	mov	r17,r4
   12858:	28002926 	beq	r5,zero,12900 <_fclose_r+0xc4>
   1285c:	0011bb40 	call	11bb4 <__sfp_lock_acquire>
   12860:	88000226 	beq	r17,zero,1286c <_fclose_r+0x30>
   12864:	88800e17 	ldw	r2,56(r17)
   12868:	10002d26 	beq	r2,zero,12920 <_fclose_r+0xe4>
   1286c:	8080030f 	ldh	r2,12(r16)
   12870:	10002226 	beq	r2,zero,128fc <_fclose_r+0xc0>
   12874:	8809883a 	mov	r4,r17
   12878:	800b883a 	mov	r5,r16
   1287c:	001192c0 	call	1192c <_fflush_r>
   12880:	1025883a 	mov	r18,r2
   12884:	80800b17 	ldw	r2,44(r16)
   12888:	10000426 	beq	r2,zero,1289c <_fclose_r+0x60>
   1288c:	81400717 	ldw	r5,28(r16)
   12890:	8809883a 	mov	r4,r17
   12894:	103ee83a 	callr	r2
   12898:	10002a16 	blt	r2,zero,12944 <_fclose_r+0x108>
   1289c:	8080030b 	ldhu	r2,12(r16)
   128a0:	1080200c 	andi	r2,r2,128
   128a4:	1000231e 	bne	r2,zero,12934 <_fclose_r+0xf8>
   128a8:	81400c17 	ldw	r5,48(r16)
   128ac:	28000526 	beq	r5,zero,128c4 <_fclose_r+0x88>
   128b0:	80801004 	addi	r2,r16,64
   128b4:	28800226 	beq	r5,r2,128c0 <_fclose_r+0x84>
   128b8:	8809883a 	mov	r4,r17
   128bc:	0011f480 	call	11f48 <_free_r>
   128c0:	80000c15 	stw	zero,48(r16)
   128c4:	81401117 	ldw	r5,68(r16)
   128c8:	28000326 	beq	r5,zero,128d8 <_fclose_r+0x9c>
   128cc:	8809883a 	mov	r4,r17
   128d0:	0011f480 	call	11f48 <_free_r>
   128d4:	80001115 	stw	zero,68(r16)
   128d8:	8000030d 	sth	zero,12(r16)
   128dc:	0011bb80 	call	11bb8 <__sfp_lock_release>
   128e0:	9005883a 	mov	r2,r18
   128e4:	dfc00317 	ldw	ra,12(sp)
   128e8:	dc800217 	ldw	r18,8(sp)
   128ec:	dc400117 	ldw	r17,4(sp)
   128f0:	dc000017 	ldw	r16,0(sp)
   128f4:	dec00404 	addi	sp,sp,16
   128f8:	f800283a 	ret
   128fc:	0011bb80 	call	11bb8 <__sfp_lock_release>
   12900:	0025883a 	mov	r18,zero
   12904:	9005883a 	mov	r2,r18
   12908:	dfc00317 	ldw	ra,12(sp)
   1290c:	dc800217 	ldw	r18,8(sp)
   12910:	dc400117 	ldw	r17,4(sp)
   12914:	dc000017 	ldw	r16,0(sp)
   12918:	dec00404 	addi	sp,sp,16
   1291c:	f800283a 	ret
   12920:	8809883a 	mov	r4,r17
   12924:	0011bc40 	call	11bc4 <__sinit>
   12928:	8080030f 	ldh	r2,12(r16)
   1292c:	103fd11e 	bne	r2,zero,12874 <_fclose_r+0x38>
   12930:	003ff206 	br	128fc <_fclose_r+0xc0>
   12934:	81400417 	ldw	r5,16(r16)
   12938:	8809883a 	mov	r4,r17
   1293c:	0011f480 	call	11f48 <_free_r>
   12940:	003fd906 	br	128a8 <_fclose_r+0x6c>
   12944:	04bfffc4 	movi	r18,-1
   12948:	003fd406 	br	1289c <_fclose_r+0x60>

0001294c <fclose>:
   1294c:	00800074 	movhi	r2,1
   12950:	109bff04 	addi	r2,r2,28668
   12954:	200b883a 	mov	r5,r4
   12958:	11000017 	ldw	r4,0(r2)
   1295c:	001283c1 	jmpi	1283c <_fclose_r>

00012960 <_fstat_r>:
   12960:	defffd04 	addi	sp,sp,-12
   12964:	dc000015 	stw	r16,0(sp)
   12968:	040000b4 	movhi	r16,2
   1296c:	8422a204 	addi	r16,r16,-30072
   12970:	dc400115 	stw	r17,4(sp)
   12974:	80000015 	stw	zero,0(r16)
   12978:	2023883a 	mov	r17,r4
   1297c:	2809883a 	mov	r4,r5
   12980:	300b883a 	mov	r5,r6
   12984:	dfc00215 	stw	ra,8(sp)
   12988:	0012cbc0 	call	12cbc <fstat>
   1298c:	1007883a 	mov	r3,r2
   12990:	00bfffc4 	movi	r2,-1
   12994:	18800626 	beq	r3,r2,129b0 <_fstat_r+0x50>
   12998:	1805883a 	mov	r2,r3
   1299c:	dfc00217 	ldw	ra,8(sp)
   129a0:	dc400117 	ldw	r17,4(sp)
   129a4:	dc000017 	ldw	r16,0(sp)
   129a8:	dec00304 	addi	sp,sp,12
   129ac:	f800283a 	ret
   129b0:	80800017 	ldw	r2,0(r16)
   129b4:	103ff826 	beq	r2,zero,12998 <_fstat_r+0x38>
   129b8:	88800015 	stw	r2,0(r17)
   129bc:	1805883a 	mov	r2,r3
   129c0:	dfc00217 	ldw	ra,8(sp)
   129c4:	dc400117 	ldw	r17,4(sp)
   129c8:	dc000017 	ldw	r16,0(sp)
   129cc:	dec00304 	addi	sp,sp,12
   129d0:	f800283a 	ret

000129d4 <_isatty_r>:
   129d4:	defffd04 	addi	sp,sp,-12
   129d8:	dc000015 	stw	r16,0(sp)
   129dc:	040000b4 	movhi	r16,2
   129e0:	8422a204 	addi	r16,r16,-30072
   129e4:	dc400115 	stw	r17,4(sp)
   129e8:	80000015 	stw	zero,0(r16)
   129ec:	2023883a 	mov	r17,r4
   129f0:	2809883a 	mov	r4,r5
   129f4:	dfc00215 	stw	ra,8(sp)
   129f8:	0012df00 	call	12df0 <isatty>
   129fc:	1007883a 	mov	r3,r2
   12a00:	00bfffc4 	movi	r2,-1
   12a04:	18800626 	beq	r3,r2,12a20 <_isatty_r+0x4c>
   12a08:	1805883a 	mov	r2,r3
   12a0c:	dfc00217 	ldw	ra,8(sp)
   12a10:	dc400117 	ldw	r17,4(sp)
   12a14:	dc000017 	ldw	r16,0(sp)
   12a18:	dec00304 	addi	sp,sp,12
   12a1c:	f800283a 	ret
   12a20:	80800017 	ldw	r2,0(r16)
   12a24:	103ff826 	beq	r2,zero,12a08 <_isatty_r+0x34>
   12a28:	88800015 	stw	r2,0(r17)
   12a2c:	1805883a 	mov	r2,r3
   12a30:	dfc00217 	ldw	ra,8(sp)
   12a34:	dc400117 	ldw	r17,4(sp)
   12a38:	dc000017 	ldw	r16,0(sp)
   12a3c:	dec00304 	addi	sp,sp,12
   12a40:	f800283a 	ret

00012a44 <_lseek_r>:
   12a44:	defffd04 	addi	sp,sp,-12
   12a48:	dc000015 	stw	r16,0(sp)
   12a4c:	040000b4 	movhi	r16,2
   12a50:	8422a204 	addi	r16,r16,-30072
   12a54:	dc400115 	stw	r17,4(sp)
   12a58:	80000015 	stw	zero,0(r16)
   12a5c:	2023883a 	mov	r17,r4
   12a60:	2809883a 	mov	r4,r5
   12a64:	300b883a 	mov	r5,r6
   12a68:	380d883a 	mov	r6,r7
   12a6c:	dfc00215 	stw	ra,8(sp)
   12a70:	0012ffc0 	call	12ffc <lseek>
   12a74:	1007883a 	mov	r3,r2
   12a78:	00bfffc4 	movi	r2,-1
   12a7c:	18800626 	beq	r3,r2,12a98 <_lseek_r+0x54>
   12a80:	1805883a 	mov	r2,r3
   12a84:	dfc00217 	ldw	ra,8(sp)
   12a88:	dc400117 	ldw	r17,4(sp)
   12a8c:	dc000017 	ldw	r16,0(sp)
   12a90:	dec00304 	addi	sp,sp,12
   12a94:	f800283a 	ret
   12a98:	80800017 	ldw	r2,0(r16)
   12a9c:	103ff826 	beq	r2,zero,12a80 <_lseek_r+0x3c>
   12aa0:	88800015 	stw	r2,0(r17)
   12aa4:	1805883a 	mov	r2,r3
   12aa8:	dfc00217 	ldw	ra,8(sp)
   12aac:	dc400117 	ldw	r17,4(sp)
   12ab0:	dc000017 	ldw	r16,0(sp)
   12ab4:	dec00304 	addi	sp,sp,12
   12ab8:	f800283a 	ret

00012abc <_read_r>:
   12abc:	defffd04 	addi	sp,sp,-12
   12ac0:	dc000015 	stw	r16,0(sp)
   12ac4:	040000b4 	movhi	r16,2
   12ac8:	8422a204 	addi	r16,r16,-30072
   12acc:	dc400115 	stw	r17,4(sp)
   12ad0:	80000015 	stw	zero,0(r16)
   12ad4:	2023883a 	mov	r17,r4
   12ad8:	2809883a 	mov	r4,r5
   12adc:	300b883a 	mov	r5,r6
   12ae0:	380d883a 	mov	r6,r7
   12ae4:	dfc00215 	stw	ra,8(sp)
   12ae8:	00131f80 	call	131f8 <read>
   12aec:	1007883a 	mov	r3,r2
   12af0:	00bfffc4 	movi	r2,-1
   12af4:	18800626 	beq	r3,r2,12b10 <_read_r+0x54>
   12af8:	1805883a 	mov	r2,r3
   12afc:	dfc00217 	ldw	ra,8(sp)
   12b00:	dc400117 	ldw	r17,4(sp)
   12b04:	dc000017 	ldw	r16,0(sp)
   12b08:	dec00304 	addi	sp,sp,12
   12b0c:	f800283a 	ret
   12b10:	80800017 	ldw	r2,0(r16)
   12b14:	103ff826 	beq	r2,zero,12af8 <_read_r+0x3c>
   12b18:	88800015 	stw	r2,0(r17)
   12b1c:	1805883a 	mov	r2,r3
   12b20:	dfc00217 	ldw	ra,8(sp)
   12b24:	dc400117 	ldw	r17,4(sp)
   12b28:	dc000017 	ldw	r16,0(sp)
   12b2c:	dec00304 	addi	sp,sp,12
   12b30:	f800283a 	ret

00012b34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12b34:	defff804 	addi	sp,sp,-32
   12b38:	dfc00715 	stw	ra,28(sp)
   12b3c:	df000615 	stw	fp,24(sp)
   12b40:	df000604 	addi	fp,sp,24
   12b44:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12b48:	e0bffc17 	ldw	r2,-16(fp)
   12b4c:	1004803a 	cmplt	r2,r2,zero
   12b50:	1000081e 	bne	r2,zero,12b74 <close+0x40>
   12b54:	e0bffc17 	ldw	r2,-16(fp)
   12b58:	10800324 	muli	r2,r2,12
   12b5c:	1007883a 	mov	r3,r2
   12b60:	00800074 	movhi	r2,1
   12b64:	10978704 	addi	r2,r2,24092
   12b68:	1887883a 	add	r3,r3,r2
   12b6c:	e0ffff15 	stw	r3,-4(fp)
   12b70:	00000106 	br	12b78 <close+0x44>
   12b74:	e03fff15 	stw	zero,-4(fp)
   12b78:	e0bfff17 	ldw	r2,-4(fp)
   12b7c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   12b80:	e0bffb17 	ldw	r2,-20(fp)
   12b84:	1005003a 	cmpeq	r2,r2,zero
   12b88:	10001d1e 	bne	r2,zero,12c00 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12b8c:	e0bffb17 	ldw	r2,-20(fp)
   12b90:	10800017 	ldw	r2,0(r2)
   12b94:	10800417 	ldw	r2,16(r2)
   12b98:	1005003a 	cmpeq	r2,r2,zero
   12b9c:	1000071e 	bne	r2,zero,12bbc <close+0x88>
   12ba0:	e0bffb17 	ldw	r2,-20(fp)
   12ba4:	10800017 	ldw	r2,0(r2)
   12ba8:	10800417 	ldw	r2,16(r2)
   12bac:	e13ffb17 	ldw	r4,-20(fp)
   12bb0:	103ee83a 	callr	r2
   12bb4:	e0bffe15 	stw	r2,-8(fp)
   12bb8:	00000106 	br	12bc0 <close+0x8c>
   12bbc:	e03ffe15 	stw	zero,-8(fp)
   12bc0:	e0bffe17 	ldw	r2,-8(fp)
   12bc4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12bc8:	e13ffc17 	ldw	r4,-16(fp)
   12bcc:	00133780 	call	13378 <alt_release_fd>
    if (rval < 0)
   12bd0:	e0bffa17 	ldw	r2,-24(fp)
   12bd4:	1004403a 	cmpge	r2,r2,zero
   12bd8:	1000071e 	bne	r2,zero,12bf8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   12bdc:	0012c300 	call	12c30 <alt_get_errno>
   12be0:	e0fffa17 	ldw	r3,-24(fp)
   12be4:	00c7c83a 	sub	r3,zero,r3
   12be8:	10c00015 	stw	r3,0(r2)
      return -1;
   12bec:	00bfffc4 	movi	r2,-1
   12bf0:	e0bffd15 	stw	r2,-12(fp)
   12bf4:	00000806 	br	12c18 <close+0xe4>
    }
    return 0;
   12bf8:	e03ffd15 	stw	zero,-12(fp)
   12bfc:	00000606 	br	12c18 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12c00:	0012c300 	call	12c30 <alt_get_errno>
   12c04:	1007883a 	mov	r3,r2
   12c08:	00801444 	movi	r2,81
   12c0c:	18800015 	stw	r2,0(r3)
    return -1;
   12c10:	00bfffc4 	movi	r2,-1
   12c14:	e0bffd15 	stw	r2,-12(fp)
   12c18:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   12c1c:	e037883a 	mov	sp,fp
   12c20:	dfc00117 	ldw	ra,4(sp)
   12c24:	df000017 	ldw	fp,0(sp)
   12c28:	dec00204 	addi	sp,sp,8
   12c2c:	f800283a 	ret

00012c30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c30:	defffd04 	addi	sp,sp,-12
   12c34:	dfc00215 	stw	ra,8(sp)
   12c38:	df000115 	stw	fp,4(sp)
   12c3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12c40:	00800074 	movhi	r2,1
   12c44:	109c0804 	addi	r2,r2,28704
   12c48:	10800017 	ldw	r2,0(r2)
   12c4c:	1005003a 	cmpeq	r2,r2,zero
   12c50:	1000061e 	bne	r2,zero,12c6c <alt_get_errno+0x3c>
   12c54:	00800074 	movhi	r2,1
   12c58:	109c0804 	addi	r2,r2,28704
   12c5c:	10800017 	ldw	r2,0(r2)
   12c60:	103ee83a 	callr	r2
   12c64:	e0bfff15 	stw	r2,-4(fp)
   12c68:	00000306 	br	12c78 <alt_get_errno+0x48>
   12c6c:	008000b4 	movhi	r2,2
   12c70:	10a2a204 	addi	r2,r2,-30072
   12c74:	e0bfff15 	stw	r2,-4(fp)
   12c78:	e0bfff17 	ldw	r2,-4(fp)
}
   12c7c:	e037883a 	mov	sp,fp
   12c80:	dfc00117 	ldw	ra,4(sp)
   12c84:	df000017 	ldw	fp,0(sp)
   12c88:	dec00204 	addi	sp,sp,8
   12c8c:	f800283a 	ret

00012c90 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12c90:	defffc04 	addi	sp,sp,-16
   12c94:	df000315 	stw	fp,12(sp)
   12c98:	df000304 	addi	fp,sp,12
   12c9c:	e13ffd15 	stw	r4,-12(fp)
   12ca0:	e17ffe15 	stw	r5,-8(fp)
   12ca4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12ca8:	e0bfff17 	ldw	r2,-4(fp)
}
   12cac:	e037883a 	mov	sp,fp
   12cb0:	df000017 	ldw	fp,0(sp)
   12cb4:	dec00104 	addi	sp,sp,4
   12cb8:	f800283a 	ret

00012cbc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12cbc:	defff904 	addi	sp,sp,-28
   12cc0:	dfc00615 	stw	ra,24(sp)
   12cc4:	df000515 	stw	fp,20(sp)
   12cc8:	df000504 	addi	fp,sp,20
   12ccc:	e13ffc15 	stw	r4,-16(fp)
   12cd0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12cd4:	e0bffc17 	ldw	r2,-16(fp)
   12cd8:	1004803a 	cmplt	r2,r2,zero
   12cdc:	1000081e 	bne	r2,zero,12d00 <fstat+0x44>
   12ce0:	e0bffc17 	ldw	r2,-16(fp)
   12ce4:	10800324 	muli	r2,r2,12
   12ce8:	1007883a 	mov	r3,r2
   12cec:	00800074 	movhi	r2,1
   12cf0:	10978704 	addi	r2,r2,24092
   12cf4:	1887883a 	add	r3,r3,r2
   12cf8:	e0ffff15 	stw	r3,-4(fp)
   12cfc:	00000106 	br	12d04 <fstat+0x48>
   12d00:	e03fff15 	stw	zero,-4(fp)
   12d04:	e0bfff17 	ldw	r2,-4(fp)
   12d08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12d0c:	e0bffb17 	ldw	r2,-20(fp)
   12d10:	1005003a 	cmpeq	r2,r2,zero
   12d14:	1000121e 	bne	r2,zero,12d60 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12d18:	e0bffb17 	ldw	r2,-20(fp)
   12d1c:	10800017 	ldw	r2,0(r2)
   12d20:	10800817 	ldw	r2,32(r2)
   12d24:	1005003a 	cmpeq	r2,r2,zero
   12d28:	1000081e 	bne	r2,zero,12d4c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   12d2c:	e0bffb17 	ldw	r2,-20(fp)
   12d30:	10800017 	ldw	r2,0(r2)
   12d34:	10800817 	ldw	r2,32(r2)
   12d38:	e13ffb17 	ldw	r4,-20(fp)
   12d3c:	e17ffd17 	ldw	r5,-12(fp)
   12d40:	103ee83a 	callr	r2
   12d44:	e0bffe15 	stw	r2,-8(fp)
   12d48:	00000b06 	br	12d78 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12d4c:	e0fffd17 	ldw	r3,-12(fp)
   12d50:	00880004 	movi	r2,8192
   12d54:	18800115 	stw	r2,4(r3)
      return 0;
   12d58:	e03ffe15 	stw	zero,-8(fp)
   12d5c:	00000606 	br	12d78 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12d60:	0012d900 	call	12d90 <alt_get_errno>
   12d64:	1007883a 	mov	r3,r2
   12d68:	00801444 	movi	r2,81
   12d6c:	18800015 	stw	r2,0(r3)
    return -1;
   12d70:	00bfffc4 	movi	r2,-1
   12d74:	e0bffe15 	stw	r2,-8(fp)
   12d78:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   12d7c:	e037883a 	mov	sp,fp
   12d80:	dfc00117 	ldw	ra,4(sp)
   12d84:	df000017 	ldw	fp,0(sp)
   12d88:	dec00204 	addi	sp,sp,8
   12d8c:	f800283a 	ret

00012d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d90:	defffd04 	addi	sp,sp,-12
   12d94:	dfc00215 	stw	ra,8(sp)
   12d98:	df000115 	stw	fp,4(sp)
   12d9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12da0:	00800074 	movhi	r2,1
   12da4:	109c0804 	addi	r2,r2,28704
   12da8:	10800017 	ldw	r2,0(r2)
   12dac:	1005003a 	cmpeq	r2,r2,zero
   12db0:	1000061e 	bne	r2,zero,12dcc <alt_get_errno+0x3c>
   12db4:	00800074 	movhi	r2,1
   12db8:	109c0804 	addi	r2,r2,28704
   12dbc:	10800017 	ldw	r2,0(r2)
   12dc0:	103ee83a 	callr	r2
   12dc4:	e0bfff15 	stw	r2,-4(fp)
   12dc8:	00000306 	br	12dd8 <alt_get_errno+0x48>
   12dcc:	008000b4 	movhi	r2,2
   12dd0:	10a2a204 	addi	r2,r2,-30072
   12dd4:	e0bfff15 	stw	r2,-4(fp)
   12dd8:	e0bfff17 	ldw	r2,-4(fp)
}
   12ddc:	e037883a 	mov	sp,fp
   12de0:	dfc00117 	ldw	ra,4(sp)
   12de4:	df000017 	ldw	fp,0(sp)
   12de8:	dec00204 	addi	sp,sp,8
   12dec:	f800283a 	ret

00012df0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12df0:	deffeb04 	addi	sp,sp,-84
   12df4:	dfc01415 	stw	ra,80(sp)
   12df8:	df001315 	stw	fp,76(sp)
   12dfc:	df001304 	addi	fp,sp,76
   12e00:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12e04:	e0bffd17 	ldw	r2,-12(fp)
   12e08:	1004803a 	cmplt	r2,r2,zero
   12e0c:	1000081e 	bne	r2,zero,12e30 <isatty+0x40>
   12e10:	e0bffd17 	ldw	r2,-12(fp)
   12e14:	10800324 	muli	r2,r2,12
   12e18:	1007883a 	mov	r3,r2
   12e1c:	00800074 	movhi	r2,1
   12e20:	10978704 	addi	r2,r2,24092
   12e24:	1887883a 	add	r3,r3,r2
   12e28:	e0ffff15 	stw	r3,-4(fp)
   12e2c:	00000106 	br	12e34 <isatty+0x44>
   12e30:	e03fff15 	stw	zero,-4(fp)
   12e34:	e0bfff17 	ldw	r2,-4(fp)
   12e38:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   12e3c:	e0bfed17 	ldw	r2,-76(fp)
   12e40:	1005003a 	cmpeq	r2,r2,zero
   12e44:	10000f1e 	bne	r2,zero,12e84 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12e48:	e0bfed17 	ldw	r2,-76(fp)
   12e4c:	10800017 	ldw	r2,0(r2)
   12e50:	10800817 	ldw	r2,32(r2)
   12e54:	1004c03a 	cmpne	r2,r2,zero
   12e58:	1000031e 	bne	r2,zero,12e68 <isatty+0x78>
    {
      return 1;
   12e5c:	00800044 	movi	r2,1
   12e60:	e0bffe15 	stw	r2,-8(fp)
   12e64:	00000c06 	br	12e98 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12e68:	e17fee04 	addi	r5,fp,-72
   12e6c:	e13ffd17 	ldw	r4,-12(fp)
   12e70:	0012cbc0 	call	12cbc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12e74:	e0bfef17 	ldw	r2,-68(fp)
   12e78:	10880020 	cmpeqi	r2,r2,8192
   12e7c:	e0bffe15 	stw	r2,-8(fp)
   12e80:	00000506 	br	12e98 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12e84:	0012eb00 	call	12eb0 <alt_get_errno>
   12e88:	1007883a 	mov	r3,r2
   12e8c:	00801444 	movi	r2,81
   12e90:	18800015 	stw	r2,0(r3)
    return 0;
   12e94:	e03ffe15 	stw	zero,-8(fp)
   12e98:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   12e9c:	e037883a 	mov	sp,fp
   12ea0:	dfc00117 	ldw	ra,4(sp)
   12ea4:	df000017 	ldw	fp,0(sp)
   12ea8:	dec00204 	addi	sp,sp,8
   12eac:	f800283a 	ret

00012eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12eb0:	defffd04 	addi	sp,sp,-12
   12eb4:	dfc00215 	stw	ra,8(sp)
   12eb8:	df000115 	stw	fp,4(sp)
   12ebc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12ec0:	00800074 	movhi	r2,1
   12ec4:	109c0804 	addi	r2,r2,28704
   12ec8:	10800017 	ldw	r2,0(r2)
   12ecc:	1005003a 	cmpeq	r2,r2,zero
   12ed0:	1000061e 	bne	r2,zero,12eec <alt_get_errno+0x3c>
   12ed4:	00800074 	movhi	r2,1
   12ed8:	109c0804 	addi	r2,r2,28704
   12edc:	10800017 	ldw	r2,0(r2)
   12ee0:	103ee83a 	callr	r2
   12ee4:	e0bfff15 	stw	r2,-4(fp)
   12ee8:	00000306 	br	12ef8 <alt_get_errno+0x48>
   12eec:	008000b4 	movhi	r2,2
   12ef0:	10a2a204 	addi	r2,r2,-30072
   12ef4:	e0bfff15 	stw	r2,-4(fp)
   12ef8:	e0bfff17 	ldw	r2,-4(fp)
}
   12efc:	e037883a 	mov	sp,fp
   12f00:	dfc00117 	ldw	ra,4(sp)
   12f04:	df000017 	ldw	fp,0(sp)
   12f08:	dec00204 	addi	sp,sp,8
   12f0c:	f800283a 	ret

00012f10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12f10:	defffe04 	addi	sp,sp,-8
   12f14:	dfc00115 	stw	ra,4(sp)
   12f18:	df000015 	stw	fp,0(sp)
   12f1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12f20:	01000074 	movhi	r4,1
   12f24:	211c0d04 	addi	r4,r4,28724
   12f28:	01400074 	movhi	r5,1
   12f2c:	29557b04 	addi	r5,r5,21996
   12f30:	01800074 	movhi	r6,1
   12f34:	319c0d04 	addi	r6,r6,28724
   12f38:	0012f900 	call	12f90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12f3c:	01000074 	movhi	r4,1
   12f40:	21000804 	addi	r4,r4,32
   12f44:	01400074 	movhi	r5,1
   12f48:	29400804 	addi	r5,r5,32
   12f4c:	01800074 	movhi	r6,1
   12f50:	31806d04 	addi	r6,r6,436
   12f54:	0012f900 	call	12f90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12f58:	01000074 	movhi	r4,1
   12f5c:	21156704 	addi	r4,r4,21916
   12f60:	01400074 	movhi	r5,1
   12f64:	29556704 	addi	r5,r5,21916
   12f68:	01800074 	movhi	r6,1
   12f6c:	31957b04 	addi	r6,r6,21996
   12f70:	0012f900 	call	12f90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12f74:	00143dc0 	call	143dc <alt_dcache_flush_all>
  alt_icache_flush_all();
   12f78:	00145d40 	call	145d4 <alt_icache_flush_all>
}
   12f7c:	e037883a 	mov	sp,fp
   12f80:	dfc00117 	ldw	ra,4(sp)
   12f84:	df000017 	ldw	fp,0(sp)
   12f88:	dec00204 	addi	sp,sp,8
   12f8c:	f800283a 	ret

00012f90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12f90:	defffc04 	addi	sp,sp,-16
   12f94:	df000315 	stw	fp,12(sp)
   12f98:	df000304 	addi	fp,sp,12
   12f9c:	e13ffd15 	stw	r4,-12(fp)
   12fa0:	e17ffe15 	stw	r5,-8(fp)
   12fa4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12fa8:	e0fffe17 	ldw	r3,-8(fp)
   12fac:	e0bffd17 	ldw	r2,-12(fp)
   12fb0:	18800e26 	beq	r3,r2,12fec <alt_load_section+0x5c>
  {
    while( to != end )
   12fb4:	00000a06 	br	12fe0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   12fb8:	e0bffd17 	ldw	r2,-12(fp)
   12fbc:	10c00017 	ldw	r3,0(r2)
   12fc0:	e0bffe17 	ldw	r2,-8(fp)
   12fc4:	10c00015 	stw	r3,0(r2)
   12fc8:	e0bffe17 	ldw	r2,-8(fp)
   12fcc:	10800104 	addi	r2,r2,4
   12fd0:	e0bffe15 	stw	r2,-8(fp)
   12fd4:	e0bffd17 	ldw	r2,-12(fp)
   12fd8:	10800104 	addi	r2,r2,4
   12fdc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12fe0:	e0fffe17 	ldw	r3,-8(fp)
   12fe4:	e0bfff17 	ldw	r2,-4(fp)
   12fe8:	18bff31e 	bne	r3,r2,12fb8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   12fec:	e037883a 	mov	sp,fp
   12ff0:	df000017 	ldw	fp,0(sp)
   12ff4:	dec00104 	addi	sp,sp,4
   12ff8:	f800283a 	ret

00012ffc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12ffc:	defff804 	addi	sp,sp,-32
   13000:	dfc00715 	stw	ra,28(sp)
   13004:	df000615 	stw	fp,24(sp)
   13008:	df000604 	addi	fp,sp,24
   1300c:	e13ffc15 	stw	r4,-16(fp)
   13010:	e17ffd15 	stw	r5,-12(fp)
   13014:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13018:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1301c:	e0bffc17 	ldw	r2,-16(fp)
   13020:	1004803a 	cmplt	r2,r2,zero
   13024:	1000081e 	bne	r2,zero,13048 <lseek+0x4c>
   13028:	e0bffc17 	ldw	r2,-16(fp)
   1302c:	10800324 	muli	r2,r2,12
   13030:	1007883a 	mov	r3,r2
   13034:	00800074 	movhi	r2,1
   13038:	10978704 	addi	r2,r2,24092
   1303c:	1887883a 	add	r3,r3,r2
   13040:	e0ffff15 	stw	r3,-4(fp)
   13044:	00000106 	br	1304c <lseek+0x50>
   13048:	e03fff15 	stw	zero,-4(fp)
   1304c:	e0bfff17 	ldw	r2,-4(fp)
   13050:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   13054:	e0bffb17 	ldw	r2,-20(fp)
   13058:	1005003a 	cmpeq	r2,r2,zero
   1305c:	1000111e 	bne	r2,zero,130a4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13060:	e0bffb17 	ldw	r2,-20(fp)
   13064:	10800017 	ldw	r2,0(r2)
   13068:	10800717 	ldw	r2,28(r2)
   1306c:	1005003a 	cmpeq	r2,r2,zero
   13070:	1000091e 	bne	r2,zero,13098 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13074:	e0bffb17 	ldw	r2,-20(fp)
   13078:	10800017 	ldw	r2,0(r2)
   1307c:	10800717 	ldw	r2,28(r2)
   13080:	e13ffb17 	ldw	r4,-20(fp)
   13084:	e17ffd17 	ldw	r5,-12(fp)
   13088:	e1bffe17 	ldw	r6,-8(fp)
   1308c:	103ee83a 	callr	r2
   13090:	e0bffa15 	stw	r2,-24(fp)
   13094:	00000506 	br	130ac <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13098:	00bfde84 	movi	r2,-134
   1309c:	e0bffa15 	stw	r2,-24(fp)
   130a0:	00000206 	br	130ac <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   130a4:	00bfebc4 	movi	r2,-81
   130a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   130ac:	e0bffa17 	ldw	r2,-24(fp)
   130b0:	1004403a 	cmpge	r2,r2,zero
   130b4:	1000071e 	bne	r2,zero,130d4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   130b8:	00130ec0 	call	130ec <alt_get_errno>
   130bc:	1007883a 	mov	r3,r2
   130c0:	e0bffa17 	ldw	r2,-24(fp)
   130c4:	0085c83a 	sub	r2,zero,r2
   130c8:	18800015 	stw	r2,0(r3)
    rc = -1;
   130cc:	00bfffc4 	movi	r2,-1
   130d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   130d4:	e0bffa17 	ldw	r2,-24(fp)
}
   130d8:	e037883a 	mov	sp,fp
   130dc:	dfc00117 	ldw	ra,4(sp)
   130e0:	df000017 	ldw	fp,0(sp)
   130e4:	dec00204 	addi	sp,sp,8
   130e8:	f800283a 	ret

000130ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130ec:	defffd04 	addi	sp,sp,-12
   130f0:	dfc00215 	stw	ra,8(sp)
   130f4:	df000115 	stw	fp,4(sp)
   130f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   130fc:	00800074 	movhi	r2,1
   13100:	109c0804 	addi	r2,r2,28704
   13104:	10800017 	ldw	r2,0(r2)
   13108:	1005003a 	cmpeq	r2,r2,zero
   1310c:	1000061e 	bne	r2,zero,13128 <alt_get_errno+0x3c>
   13110:	00800074 	movhi	r2,1
   13114:	109c0804 	addi	r2,r2,28704
   13118:	10800017 	ldw	r2,0(r2)
   1311c:	103ee83a 	callr	r2
   13120:	e0bfff15 	stw	r2,-4(fp)
   13124:	00000306 	br	13134 <alt_get_errno+0x48>
   13128:	008000b4 	movhi	r2,2
   1312c:	10a2a204 	addi	r2,r2,-30072
   13130:	e0bfff15 	stw	r2,-4(fp)
   13134:	e0bfff17 	ldw	r2,-4(fp)
}
   13138:	e037883a 	mov	sp,fp
   1313c:	dfc00117 	ldw	ra,4(sp)
   13140:	df000017 	ldw	fp,0(sp)
   13144:	dec00204 	addi	sp,sp,8
   13148:	f800283a 	ret

0001314c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1314c:	defffd04 	addi	sp,sp,-12
   13150:	dfc00215 	stw	ra,8(sp)
   13154:	df000115 	stw	fp,4(sp)
   13158:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1315c:	0009883a 	mov	r4,zero
   13160:	00136140 	call	13614 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13164:	00136480 	call	13648 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13168:	01000074 	movhi	r4,1
   1316c:	21157104 	addi	r4,r4,21956
   13170:	01400074 	movhi	r5,1
   13174:	29557104 	addi	r5,r5,21956
   13178:	01800074 	movhi	r6,1
   1317c:	31957104 	addi	r6,r6,21956
   13180:	00149940 	call	14994 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13184:	001450c0 	call	1450c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13188:	01000074 	movhi	r4,1
   1318c:	21115c04 	addi	r4,r4,17776
   13190:	00151900 	call	15190 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13194:	d126a417 	ldw	r4,-25968(gp)
   13198:	d166a517 	ldw	r5,-25964(gp)
   1319c:	d1a6a617 	ldw	r6,-25960(gp)
   131a0:	00101f00 	call	101f0 <main>
   131a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   131a8:	01000044 	movi	r4,1
   131ac:	0012b340 	call	12b34 <close>
  exit (result);
   131b0:	e13fff17 	ldw	r4,-4(fp)
   131b4:	00151a40 	call	151a4 <exit>

000131b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   131b8:	defffe04 	addi	sp,sp,-8
   131bc:	df000115 	stw	fp,4(sp)
   131c0:	df000104 	addi	fp,sp,4
   131c4:	e13fff15 	stw	r4,-4(fp)
}
   131c8:	e037883a 	mov	sp,fp
   131cc:	df000017 	ldw	fp,0(sp)
   131d0:	dec00104 	addi	sp,sp,4
   131d4:	f800283a 	ret

000131d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   131d8:	defffe04 	addi	sp,sp,-8
   131dc:	df000115 	stw	fp,4(sp)
   131e0:	df000104 	addi	fp,sp,4
   131e4:	e13fff15 	stw	r4,-4(fp)
}
   131e8:	e037883a 	mov	sp,fp
   131ec:	df000017 	ldw	fp,0(sp)
   131f0:	dec00104 	addi	sp,sp,4
   131f4:	f800283a 	ret

000131f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   131f8:	defff704 	addi	sp,sp,-36
   131fc:	dfc00815 	stw	ra,32(sp)
   13200:	df000715 	stw	fp,28(sp)
   13204:	df000704 	addi	fp,sp,28
   13208:	e13ffb15 	stw	r4,-20(fp)
   1320c:	e17ffc15 	stw	r5,-16(fp)
   13210:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13214:	e0bffb17 	ldw	r2,-20(fp)
   13218:	1004803a 	cmplt	r2,r2,zero
   1321c:	1000081e 	bne	r2,zero,13240 <read+0x48>
   13220:	e0bffb17 	ldw	r2,-20(fp)
   13224:	10800324 	muli	r2,r2,12
   13228:	1007883a 	mov	r3,r2
   1322c:	00800074 	movhi	r2,1
   13230:	10978704 	addi	r2,r2,24092
   13234:	1887883a 	add	r3,r3,r2
   13238:	e0ffff15 	stw	r3,-4(fp)
   1323c:	00000106 	br	13244 <read+0x4c>
   13240:	e03fff15 	stw	zero,-4(fp)
   13244:	e0bfff17 	ldw	r2,-4(fp)
   13248:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1324c:	e0bffa17 	ldw	r2,-24(fp)
   13250:	1005003a 	cmpeq	r2,r2,zero
   13254:	1000241e 	bne	r2,zero,132e8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13258:	e0bffa17 	ldw	r2,-24(fp)
   1325c:	10800217 	ldw	r2,8(r2)
   13260:	108000cc 	andi	r2,r2,3
   13264:	10800060 	cmpeqi	r2,r2,1
   13268:	10001a1e 	bne	r2,zero,132d4 <read+0xdc>
   1326c:	e0bffa17 	ldw	r2,-24(fp)
   13270:	10800017 	ldw	r2,0(r2)
   13274:	10800517 	ldw	r2,20(r2)
   13278:	1005003a 	cmpeq	r2,r2,zero
   1327c:	1000151e 	bne	r2,zero,132d4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13280:	e0bffa17 	ldw	r2,-24(fp)
   13284:	10800017 	ldw	r2,0(r2)
   13288:	10800517 	ldw	r2,20(r2)
   1328c:	e17ffc17 	ldw	r5,-16(fp)
   13290:	e1bffd17 	ldw	r6,-12(fp)
   13294:	e13ffa17 	ldw	r4,-24(fp)
   13298:	103ee83a 	callr	r2
   1329c:	e0bff915 	stw	r2,-28(fp)
   132a0:	e0bff917 	ldw	r2,-28(fp)
   132a4:	1004403a 	cmpge	r2,r2,zero
   132a8:	1000071e 	bne	r2,zero,132c8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   132ac:	00133180 	call	13318 <alt_get_errno>
   132b0:	e0fff917 	ldw	r3,-28(fp)
   132b4:	00c7c83a 	sub	r3,zero,r3
   132b8:	10c00015 	stw	r3,0(r2)
          return -1;
   132bc:	00bfffc4 	movi	r2,-1
   132c0:	e0bffe15 	stw	r2,-8(fp)
   132c4:	00000e06 	br	13300 <read+0x108>
        }
        return rval;
   132c8:	e0bff917 	ldw	r2,-28(fp)
   132cc:	e0bffe15 	stw	r2,-8(fp)
   132d0:	00000b06 	br	13300 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   132d4:	00133180 	call	13318 <alt_get_errno>
   132d8:	1007883a 	mov	r3,r2
   132dc:	00800344 	movi	r2,13
   132e0:	18800015 	stw	r2,0(r3)
   132e4:	00000406 	br	132f8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   132e8:	00133180 	call	13318 <alt_get_errno>
   132ec:	1007883a 	mov	r3,r2
   132f0:	00801444 	movi	r2,81
   132f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   132f8:	00bfffc4 	movi	r2,-1
   132fc:	e0bffe15 	stw	r2,-8(fp)
   13300:	e0bffe17 	ldw	r2,-8(fp)
}
   13304:	e037883a 	mov	sp,fp
   13308:	dfc00117 	ldw	ra,4(sp)
   1330c:	df000017 	ldw	fp,0(sp)
   13310:	dec00204 	addi	sp,sp,8
   13314:	f800283a 	ret

00013318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13318:	defffd04 	addi	sp,sp,-12
   1331c:	dfc00215 	stw	ra,8(sp)
   13320:	df000115 	stw	fp,4(sp)
   13324:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13328:	00800074 	movhi	r2,1
   1332c:	109c0804 	addi	r2,r2,28704
   13330:	10800017 	ldw	r2,0(r2)
   13334:	1005003a 	cmpeq	r2,r2,zero
   13338:	1000061e 	bne	r2,zero,13354 <alt_get_errno+0x3c>
   1333c:	00800074 	movhi	r2,1
   13340:	109c0804 	addi	r2,r2,28704
   13344:	10800017 	ldw	r2,0(r2)
   13348:	103ee83a 	callr	r2
   1334c:	e0bfff15 	stw	r2,-4(fp)
   13350:	00000306 	br	13360 <alt_get_errno+0x48>
   13354:	008000b4 	movhi	r2,2
   13358:	10a2a204 	addi	r2,r2,-30072
   1335c:	e0bfff15 	stw	r2,-4(fp)
   13360:	e0bfff17 	ldw	r2,-4(fp)
}
   13364:	e037883a 	mov	sp,fp
   13368:	dfc00117 	ldw	ra,4(sp)
   1336c:	df000017 	ldw	fp,0(sp)
   13370:	dec00204 	addi	sp,sp,8
   13374:	f800283a 	ret

00013378 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13378:	defffe04 	addi	sp,sp,-8
   1337c:	df000115 	stw	fp,4(sp)
   13380:	df000104 	addi	fp,sp,4
   13384:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13388:	e0bfff17 	ldw	r2,-4(fp)
   1338c:	108000d0 	cmplti	r2,r2,3
   13390:	10000d1e 	bne	r2,zero,133c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13394:	e0bfff17 	ldw	r2,-4(fp)
   13398:	00c00074 	movhi	r3,1
   1339c:	18d78704 	addi	r3,r3,24092
   133a0:	10800324 	muli	r2,r2,12
   133a4:	10c5883a 	add	r2,r2,r3
   133a8:	10800204 	addi	r2,r2,8
   133ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   133b0:	e0bfff17 	ldw	r2,-4(fp)
   133b4:	00c00074 	movhi	r3,1
   133b8:	18d78704 	addi	r3,r3,24092
   133bc:	10800324 	muli	r2,r2,12
   133c0:	10c5883a 	add	r2,r2,r3
   133c4:	10000015 	stw	zero,0(r2)
  }
}
   133c8:	e037883a 	mov	sp,fp
   133cc:	df000017 	ldw	fp,0(sp)
   133d0:	dec00104 	addi	sp,sp,4
   133d4:	f800283a 	ret

000133d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   133d8:	defff804 	addi	sp,sp,-32
   133dc:	df000715 	stw	fp,28(sp)
   133e0:	df000704 	addi	fp,sp,28
   133e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133e8:	0005303a 	rdctl	r2,status
   133ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133f0:	e0fffb17 	ldw	r3,-20(fp)
   133f4:	00bfff84 	movi	r2,-2
   133f8:	1884703a 	and	r2,r3,r2
   133fc:	1001703a 	wrctl	status,r2
  
  return context;
   13400:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13404:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13408:	d0a00a17 	ldw	r2,-32728(gp)
   1340c:	10c000c4 	addi	r3,r2,3
   13410:	00bfff04 	movi	r2,-4
   13414:	1884703a 	and	r2,r3,r2
   13418:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1341c:	d0e00a17 	ldw	r3,-32728(gp)
   13420:	e0bffe17 	ldw	r2,-8(fp)
   13424:	1887883a 	add	r3,r3,r2
   13428:	008000b4 	movhi	r2,2
   1342c:	10a71004 	addi	r2,r2,-25536
   13430:	10c0072e 	bgeu	r2,r3,13450 <sbrk+0x78>
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1343c:	e0bffa17 	ldw	r2,-24(fp)
   13440:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13444:	00bfffc4 	movi	r2,-1
   13448:	e0bfff15 	stw	r2,-4(fp)
   1344c:	00000c06 	br	13480 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13450:	d0a00a17 	ldw	r2,-32728(gp)
   13454:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   13458:	d0e00a17 	ldw	r3,-32728(gp)
   1345c:	e0bffe17 	ldw	r2,-8(fp)
   13460:	1885883a 	add	r2,r3,r2
   13464:	d0a00a15 	stw	r2,-32728(gp)
   13468:	e0bffd17 	ldw	r2,-12(fp)
   1346c:	e0bff915 	stw	r2,-28(fp)
   13470:	e0bff917 	ldw	r2,-28(fp)
   13474:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13478:	e0bffc17 	ldw	r2,-16(fp)
   1347c:	e0bfff15 	stw	r2,-4(fp)
   13480:	e0bfff17 	ldw	r2,-4(fp)
} 
   13484:	e037883a 	mov	sp,fp
   13488:	df000017 	ldw	fp,0(sp)
   1348c:	dec00104 	addi	sp,sp,4
   13490:	f800283a 	ret

00013494 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13494:	defff704 	addi	sp,sp,-36
   13498:	dfc00815 	stw	ra,32(sp)
   1349c:	df000715 	stw	fp,28(sp)
   134a0:	df000704 	addi	fp,sp,28
   134a4:	e13ffb15 	stw	r4,-20(fp)
   134a8:	e17ffc15 	stw	r5,-16(fp)
   134ac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   134b0:	e0bffb17 	ldw	r2,-20(fp)
   134b4:	1004803a 	cmplt	r2,r2,zero
   134b8:	1000081e 	bne	r2,zero,134dc <write+0x48>
   134bc:	e0bffb17 	ldw	r2,-20(fp)
   134c0:	10800324 	muli	r2,r2,12
   134c4:	1007883a 	mov	r3,r2
   134c8:	00800074 	movhi	r2,1
   134cc:	10978704 	addi	r2,r2,24092
   134d0:	1887883a 	add	r3,r3,r2
   134d4:	e0ffff15 	stw	r3,-4(fp)
   134d8:	00000106 	br	134e0 <write+0x4c>
   134dc:	e03fff15 	stw	zero,-4(fp)
   134e0:	e0bfff17 	ldw	r2,-4(fp)
   134e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   134e8:	e0bffa17 	ldw	r2,-24(fp)
   134ec:	1005003a 	cmpeq	r2,r2,zero
   134f0:	1000241e 	bne	r2,zero,13584 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   134f4:	e0bffa17 	ldw	r2,-24(fp)
   134f8:	10800217 	ldw	r2,8(r2)
   134fc:	108000cc 	andi	r2,r2,3
   13500:	1005003a 	cmpeq	r2,r2,zero
   13504:	10001a1e 	bne	r2,zero,13570 <write+0xdc>
   13508:	e0bffa17 	ldw	r2,-24(fp)
   1350c:	10800017 	ldw	r2,0(r2)
   13510:	10800617 	ldw	r2,24(r2)
   13514:	1005003a 	cmpeq	r2,r2,zero
   13518:	1000151e 	bne	r2,zero,13570 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1351c:	e0bffa17 	ldw	r2,-24(fp)
   13520:	10800017 	ldw	r2,0(r2)
   13524:	10800617 	ldw	r2,24(r2)
   13528:	e17ffc17 	ldw	r5,-16(fp)
   1352c:	e1bffd17 	ldw	r6,-12(fp)
   13530:	e13ffa17 	ldw	r4,-24(fp)
   13534:	103ee83a 	callr	r2
   13538:	e0bff915 	stw	r2,-28(fp)
   1353c:	e0bff917 	ldw	r2,-28(fp)
   13540:	1004403a 	cmpge	r2,r2,zero
   13544:	1000071e 	bne	r2,zero,13564 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   13548:	00135b40 	call	135b4 <alt_get_errno>
   1354c:	e0fff917 	ldw	r3,-28(fp)
   13550:	00c7c83a 	sub	r3,zero,r3
   13554:	10c00015 	stw	r3,0(r2)
        return -1;
   13558:	00bfffc4 	movi	r2,-1
   1355c:	e0bffe15 	stw	r2,-8(fp)
   13560:	00000e06 	br	1359c <write+0x108>
      }
      return rval;
   13564:	e0bff917 	ldw	r2,-28(fp)
   13568:	e0bffe15 	stw	r2,-8(fp)
   1356c:	00000b06 	br	1359c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13570:	00135b40 	call	135b4 <alt_get_errno>
   13574:	1007883a 	mov	r3,r2
   13578:	00800344 	movi	r2,13
   1357c:	18800015 	stw	r2,0(r3)
   13580:	00000406 	br	13594 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13584:	00135b40 	call	135b4 <alt_get_errno>
   13588:	1007883a 	mov	r3,r2
   1358c:	00801444 	movi	r2,81
   13590:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13594:	00bfffc4 	movi	r2,-1
   13598:	e0bffe15 	stw	r2,-8(fp)
   1359c:	e0bffe17 	ldw	r2,-8(fp)
}
   135a0:	e037883a 	mov	sp,fp
   135a4:	dfc00117 	ldw	ra,4(sp)
   135a8:	df000017 	ldw	fp,0(sp)
   135ac:	dec00204 	addi	sp,sp,8
   135b0:	f800283a 	ret

000135b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135b4:	defffd04 	addi	sp,sp,-12
   135b8:	dfc00215 	stw	ra,8(sp)
   135bc:	df000115 	stw	fp,4(sp)
   135c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   135c4:	00800074 	movhi	r2,1
   135c8:	109c0804 	addi	r2,r2,28704
   135cc:	10800017 	ldw	r2,0(r2)
   135d0:	1005003a 	cmpeq	r2,r2,zero
   135d4:	1000061e 	bne	r2,zero,135f0 <alt_get_errno+0x3c>
   135d8:	00800074 	movhi	r2,1
   135dc:	109c0804 	addi	r2,r2,28704
   135e0:	10800017 	ldw	r2,0(r2)
   135e4:	103ee83a 	callr	r2
   135e8:	e0bfff15 	stw	r2,-4(fp)
   135ec:	00000306 	br	135fc <alt_get_errno+0x48>
   135f0:	008000b4 	movhi	r2,2
   135f4:	10a2a204 	addi	r2,r2,-30072
   135f8:	e0bfff15 	stw	r2,-4(fp)
   135fc:	e0bfff17 	ldw	r2,-4(fp)
}
   13600:	e037883a 	mov	sp,fp
   13604:	dfc00117 	ldw	ra,4(sp)
   13608:	df000017 	ldw	fp,0(sp)
   1360c:	dec00204 	addi	sp,sp,8
   13610:	f800283a 	ret

00013614 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13614:	defffd04 	addi	sp,sp,-12
   13618:	dfc00215 	stw	ra,8(sp)
   1361c:	df000115 	stw	fp,4(sp)
   13620:	df000104 	addi	fp,sp,4
   13624:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   13628:	0014e740 	call	14e74 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1362c:	00800044 	movi	r2,1
   13630:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13634:	e037883a 	mov	sp,fp
   13638:	dfc00117 	ldw	ra,4(sp)
   1363c:	df000017 	ldw	fp,0(sp)
   13640:	dec00204 	addi	sp,sp,8
   13644:	f800283a 	ret

00013648 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13648:	defffe04 	addi	sp,sp,-8
   1364c:	dfc00115 	stw	ra,4(sp)
   13650:	df000015 	stw	fp,0(sp)
   13654:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   13658:	010000b4 	movhi	r4,2
   1365c:	21040804 	addi	r4,r4,4128
   13660:	000b883a 	mov	r5,zero
   13664:	000d883a 	mov	r6,zero
   13668:	01c0fa04 	movi	r7,1000
   1366c:	00141f80 	call	141f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13670:	01000074 	movhi	r4,1
   13674:	2117f104 	addi	r4,r4,24516
   13678:	000b883a 	mov	r5,zero
   1367c:	01800044 	movi	r6,1
   13680:	00138240 	call	13824 <altera_avalon_jtag_uart_init>
   13684:	01000074 	movhi	r4,1
   13688:	2117e704 	addi	r4,r4,24476
   1368c:	00136a40 	call	136a4 <alt_dev_reg>
}
   13690:	e037883a 	mov	sp,fp
   13694:	dfc00117 	ldw	ra,4(sp)
   13698:	df000017 	ldw	fp,0(sp)
   1369c:	dec00204 	addi	sp,sp,8
   136a0:	f800283a 	ret

000136a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   136a4:	defffd04 	addi	sp,sp,-12
   136a8:	dfc00215 	stw	ra,8(sp)
   136ac:	df000115 	stw	fp,4(sp)
   136b0:	df000104 	addi	fp,sp,4
   136b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   136b8:	e13fff17 	ldw	r4,-4(fp)
   136bc:	01400074 	movhi	r5,1
   136c0:	295c0504 	addi	r5,r5,28692
   136c4:	00143f80 	call	143f8 <alt_dev_llist_insert>
}
   136c8:	e037883a 	mov	sp,fp
   136cc:	dfc00117 	ldw	ra,4(sp)
   136d0:	df000017 	ldw	fp,0(sp)
   136d4:	dec00204 	addi	sp,sp,8
   136d8:	f800283a 	ret

000136dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   136dc:	defffa04 	addi	sp,sp,-24
   136e0:	dfc00515 	stw	ra,20(sp)
   136e4:	df000415 	stw	fp,16(sp)
   136e8:	df000404 	addi	fp,sp,16
   136ec:	e13ffd15 	stw	r4,-12(fp)
   136f0:	e17ffe15 	stw	r5,-8(fp)
   136f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   136f8:	e0bffd17 	ldw	r2,-12(fp)
   136fc:	10800017 	ldw	r2,0(r2)
   13700:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13704:	e0bffc17 	ldw	r2,-16(fp)
   13708:	11000a04 	addi	r4,r2,40
   1370c:	e0bffd17 	ldw	r2,-12(fp)
   13710:	11c00217 	ldw	r7,8(r2)
   13714:	e17ffe17 	ldw	r5,-8(fp)
   13718:	e1bfff17 	ldw	r6,-4(fp)
   1371c:	0013d240 	call	13d24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13720:	e037883a 	mov	sp,fp
   13724:	dfc00117 	ldw	ra,4(sp)
   13728:	df000017 	ldw	fp,0(sp)
   1372c:	dec00204 	addi	sp,sp,8
   13730:	f800283a 	ret

00013734 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13734:	defffa04 	addi	sp,sp,-24
   13738:	dfc00515 	stw	ra,20(sp)
   1373c:	df000415 	stw	fp,16(sp)
   13740:	df000404 	addi	fp,sp,16
   13744:	e13ffd15 	stw	r4,-12(fp)
   13748:	e17ffe15 	stw	r5,-8(fp)
   1374c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13750:	e0bffd17 	ldw	r2,-12(fp)
   13754:	10800017 	ldw	r2,0(r2)
   13758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1375c:	e0bffc17 	ldw	r2,-16(fp)
   13760:	11000a04 	addi	r4,r2,40
   13764:	e0bffd17 	ldw	r2,-12(fp)
   13768:	11c00217 	ldw	r7,8(r2)
   1376c:	e17ffe17 	ldw	r5,-8(fp)
   13770:	e1bfff17 	ldw	r6,-4(fp)
   13774:	0013f480 	call	13f48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13778:	e037883a 	mov	sp,fp
   1377c:	dfc00117 	ldw	ra,4(sp)
   13780:	df000017 	ldw	fp,0(sp)
   13784:	dec00204 	addi	sp,sp,8
   13788:	f800283a 	ret

0001378c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1378c:	defffc04 	addi	sp,sp,-16
   13790:	dfc00315 	stw	ra,12(sp)
   13794:	df000215 	stw	fp,8(sp)
   13798:	df000204 	addi	fp,sp,8
   1379c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   137a0:	e0bfff17 	ldw	r2,-4(fp)
   137a4:	10800017 	ldw	r2,0(r2)
   137a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   137ac:	e0bffe17 	ldw	r2,-8(fp)
   137b0:	11000a04 	addi	r4,r2,40
   137b4:	e0bfff17 	ldw	r2,-4(fp)
   137b8:	11400217 	ldw	r5,8(r2)
   137bc:	0013bbc0 	call	13bbc <altera_avalon_jtag_uart_close>
}
   137c0:	e037883a 	mov	sp,fp
   137c4:	dfc00117 	ldw	ra,4(sp)
   137c8:	df000017 	ldw	fp,0(sp)
   137cc:	dec00204 	addi	sp,sp,8
   137d0:	f800283a 	ret

000137d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   137d4:	defffa04 	addi	sp,sp,-24
   137d8:	dfc00515 	stw	ra,20(sp)
   137dc:	df000415 	stw	fp,16(sp)
   137e0:	df000404 	addi	fp,sp,16
   137e4:	e13ffd15 	stw	r4,-12(fp)
   137e8:	e17ffe15 	stw	r5,-8(fp)
   137ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   137f0:	e0bffd17 	ldw	r2,-12(fp)
   137f4:	10800017 	ldw	r2,0(r2)
   137f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   137fc:	e0bffc17 	ldw	r2,-16(fp)
   13800:	11000a04 	addi	r4,r2,40
   13804:	e17ffe17 	ldw	r5,-8(fp)
   13808:	e1bfff17 	ldw	r6,-4(fp)
   1380c:	0013c300 	call	13c30 <altera_avalon_jtag_uart_ioctl>
}
   13810:	e037883a 	mov	sp,fp
   13814:	dfc00117 	ldw	ra,4(sp)
   13818:	df000017 	ldw	fp,0(sp)
   1381c:	dec00204 	addi	sp,sp,8
   13820:	f800283a 	ret

00013824 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13824:	defffa04 	addi	sp,sp,-24
   13828:	dfc00515 	stw	ra,20(sp)
   1382c:	df000415 	stw	fp,16(sp)
   13830:	df000404 	addi	fp,sp,16
   13834:	e13ffd15 	stw	r4,-12(fp)
   13838:	e17ffe15 	stw	r5,-8(fp)
   1383c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13840:	e0fffd17 	ldw	r3,-12(fp)
   13844:	00800044 	movi	r2,1
   13848:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1384c:	e0bffd17 	ldw	r2,-12(fp)
   13850:	10800017 	ldw	r2,0(r2)
   13854:	11000104 	addi	r4,r2,4
   13858:	e0bffd17 	ldw	r2,-12(fp)
   1385c:	10800817 	ldw	r2,32(r2)
   13860:	1007883a 	mov	r3,r2
   13864:	2005883a 	mov	r2,r4
   13868:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1386c:	e13ffe17 	ldw	r4,-8(fp)
   13870:	e17fff17 	ldw	r5,-4(fp)
   13874:	d8000015 	stw	zero,0(sp)
   13878:	01800074 	movhi	r6,1
   1387c:	318e3904 	addi	r6,r6,14564
   13880:	e1fffd17 	ldw	r7,-12(fp)
   13884:	00146040 	call	14604 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13888:	e0bffd17 	ldw	r2,-12(fp)
   1388c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13890:	e0bffd17 	ldw	r2,-12(fp)
   13894:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13898:	008000b4 	movhi	r2,2
   1389c:	10a2a704 	addi	r2,r2,-30052
   138a0:	10800017 	ldw	r2,0(r2)
   138a4:	100b883a 	mov	r5,r2
   138a8:	01800074 	movhi	r6,1
   138ac:	318ec304 	addi	r6,r6,15116
   138b0:	e1fffd17 	ldw	r7,-12(fp)
   138b4:	00142880 	call	14288 <alt_alarm_start>
   138b8:	1004403a 	cmpge	r2,r2,zero
   138bc:	1000041e 	bne	r2,zero,138d0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   138c0:	e0fffd17 	ldw	r3,-12(fp)
   138c4:	00a00034 	movhi	r2,32768
   138c8:	10bfffc4 	addi	r2,r2,-1
   138cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   138d0:	e037883a 	mov	sp,fp
   138d4:	dfc00117 	ldw	ra,4(sp)
   138d8:	df000017 	ldw	fp,0(sp)
   138dc:	dec00204 	addi	sp,sp,8
   138e0:	f800283a 	ret

000138e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   138e4:	defff804 	addi	sp,sp,-32
   138e8:	df000715 	stw	fp,28(sp)
   138ec:	df000704 	addi	fp,sp,28
   138f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   138f4:	e0bfff17 	ldw	r2,-4(fp)
   138f8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   138fc:	e0bffe17 	ldw	r2,-8(fp)
   13900:	10800017 	ldw	r2,0(r2)
   13904:	e0bffd15 	stw	r2,-12(fp)
   13908:	00000006 	br	1390c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1390c:	e0bffd17 	ldw	r2,-12(fp)
   13910:	10800104 	addi	r2,r2,4
   13914:	10800037 	ldwio	r2,0(r2)
   13918:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1391c:	e0bffc17 	ldw	r2,-16(fp)
   13920:	1080c00c 	andi	r2,r2,768
   13924:	1005003a 	cmpeq	r2,r2,zero
   13928:	1000741e 	bne	r2,zero,13afc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1392c:	e0bffc17 	ldw	r2,-16(fp)
   13930:	1080400c 	andi	r2,r2,256
   13934:	1005003a 	cmpeq	r2,r2,zero
   13938:	1000351e 	bne	r2,zero,13a10 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1393c:	00800074 	movhi	r2,1
   13940:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13944:	e0bffe17 	ldw	r2,-8(fp)
   13948:	10800a17 	ldw	r2,40(r2)
   1394c:	10800044 	addi	r2,r2,1
   13950:	1081ffcc 	andi	r2,r2,2047
   13954:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   13958:	e0bffe17 	ldw	r2,-8(fp)
   1395c:	10c00b17 	ldw	r3,44(r2)
   13960:	e0bffa17 	ldw	r2,-24(fp)
   13964:	18801626 	beq	r3,r2,139c0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13968:	e0bffd17 	ldw	r2,-12(fp)
   1396c:	10800037 	ldwio	r2,0(r2)
   13970:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13974:	e0bffb17 	ldw	r2,-20(fp)
   13978:	10a0000c 	andi	r2,r2,32768
   1397c:	1005003a 	cmpeq	r2,r2,zero
   13980:	10000f1e 	bne	r2,zero,139c0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13984:	e0bffe17 	ldw	r2,-8(fp)
   13988:	10c00a17 	ldw	r3,40(r2)
   1398c:	e0bffb17 	ldw	r2,-20(fp)
   13990:	1009883a 	mov	r4,r2
   13994:	e0bffe17 	ldw	r2,-8(fp)
   13998:	1885883a 	add	r2,r3,r2
   1399c:	10800e04 	addi	r2,r2,56
   139a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   139a4:	e0bffe17 	ldw	r2,-8(fp)
   139a8:	10800a17 	ldw	r2,40(r2)
   139ac:	10800044 	addi	r2,r2,1
   139b0:	10c1ffcc 	andi	r3,r2,2047
   139b4:	e0bffe17 	ldw	r2,-8(fp)
   139b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   139bc:	003fe106 	br	13944 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   139c0:	e0bffb17 	ldw	r2,-20(fp)
   139c4:	10bfffec 	andhi	r2,r2,65535
   139c8:	1005003a 	cmpeq	r2,r2,zero
   139cc:	1000101e 	bne	r2,zero,13a10 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   139d0:	e0bffe17 	ldw	r2,-8(fp)
   139d4:	10c00817 	ldw	r3,32(r2)
   139d8:	00bfff84 	movi	r2,-2
   139dc:	1886703a 	and	r3,r3,r2
   139e0:	e0bffe17 	ldw	r2,-8(fp)
   139e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   139e8:	e0bffd17 	ldw	r2,-12(fp)
   139ec:	11000104 	addi	r4,r2,4
   139f0:	e0bffe17 	ldw	r2,-8(fp)
   139f4:	10800817 	ldw	r2,32(r2)
   139f8:	1007883a 	mov	r3,r2
   139fc:	2005883a 	mov	r2,r4
   13a00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13a04:	e0bffd17 	ldw	r2,-12(fp)
   13a08:	10800104 	addi	r2,r2,4
   13a0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13a10:	e0bffc17 	ldw	r2,-16(fp)
   13a14:	1080800c 	andi	r2,r2,512
   13a18:	1005003a 	cmpeq	r2,r2,zero
   13a1c:	103fbb1e 	bne	r2,zero,1390c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13a20:	e0bffc17 	ldw	r2,-16(fp)
   13a24:	10bfffec 	andhi	r2,r2,65535
   13a28:	1004d43a 	srli	r2,r2,16
   13a2c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13a30:	00001506 	br	13a88 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13a34:	e13ffd17 	ldw	r4,-12(fp)
   13a38:	e0bffe17 	ldw	r2,-8(fp)
   13a3c:	10c00d17 	ldw	r3,52(r2)
   13a40:	e0bffe17 	ldw	r2,-8(fp)
   13a44:	1885883a 	add	r2,r3,r2
   13a48:	10820e04 	addi	r2,r2,2104
   13a4c:	10800003 	ldbu	r2,0(r2)
   13a50:	10c03fcc 	andi	r3,r2,255
   13a54:	18c0201c 	xori	r3,r3,128
   13a58:	18ffe004 	addi	r3,r3,-128
   13a5c:	2005883a 	mov	r2,r4
   13a60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13a64:	e0bffe17 	ldw	r2,-8(fp)
   13a68:	10800d17 	ldw	r2,52(r2)
   13a6c:	10800044 	addi	r2,r2,1
   13a70:	10c1ffcc 	andi	r3,r2,2047
   13a74:	e0bffe17 	ldw	r2,-8(fp)
   13a78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13a7c:	e0bff917 	ldw	r2,-28(fp)
   13a80:	10bfffc4 	addi	r2,r2,-1
   13a84:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13a88:	e0bff917 	ldw	r2,-28(fp)
   13a8c:	1005003a 	cmpeq	r2,r2,zero
   13a90:	1000051e 	bne	r2,zero,13aa8 <altera_avalon_jtag_uart_irq+0x1c4>
   13a94:	e0bffe17 	ldw	r2,-8(fp)
   13a98:	10c00d17 	ldw	r3,52(r2)
   13a9c:	e0bffe17 	ldw	r2,-8(fp)
   13aa0:	10800c17 	ldw	r2,48(r2)
   13aa4:	18bfe31e 	bne	r3,r2,13a34 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13aa8:	e0bff917 	ldw	r2,-28(fp)
   13aac:	1005003a 	cmpeq	r2,r2,zero
   13ab0:	103f961e 	bne	r2,zero,1390c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13ab4:	e0bffe17 	ldw	r2,-8(fp)
   13ab8:	10c00817 	ldw	r3,32(r2)
   13abc:	00bfff44 	movi	r2,-3
   13ac0:	1886703a 	and	r3,r3,r2
   13ac4:	e0bffe17 	ldw	r2,-8(fp)
   13ac8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13acc:	e0bffe17 	ldw	r2,-8(fp)
   13ad0:	10800017 	ldw	r2,0(r2)
   13ad4:	11000104 	addi	r4,r2,4
   13ad8:	e0bffe17 	ldw	r2,-8(fp)
   13adc:	10800817 	ldw	r2,32(r2)
   13ae0:	1007883a 	mov	r3,r2
   13ae4:	2005883a 	mov	r2,r4
   13ae8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13aec:	e0bffd17 	ldw	r2,-12(fp)
   13af0:	10800104 	addi	r2,r2,4
   13af4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13af8:	003f8406 	br	1390c <altera_avalon_jtag_uart_irq+0x28>
}
   13afc:	e037883a 	mov	sp,fp
   13b00:	df000017 	ldw	fp,0(sp)
   13b04:	dec00104 	addi	sp,sp,4
   13b08:	f800283a 	ret

00013b0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13b0c:	defffc04 	addi	sp,sp,-16
   13b10:	df000315 	stw	fp,12(sp)
   13b14:	df000304 	addi	fp,sp,12
   13b18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13b1c:	e0bfff17 	ldw	r2,-4(fp)
   13b20:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13b24:	e0bffe17 	ldw	r2,-8(fp)
   13b28:	10800017 	ldw	r2,0(r2)
   13b2c:	10800104 	addi	r2,r2,4
   13b30:	10800037 	ldwio	r2,0(r2)
   13b34:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13b38:	e0bffd17 	ldw	r2,-12(fp)
   13b3c:	1081000c 	andi	r2,r2,1024
   13b40:	1005003a 	cmpeq	r2,r2,zero
   13b44:	10000c1e 	bne	r2,zero,13b78 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13b48:	e0bffe17 	ldw	r2,-8(fp)
   13b4c:	10800017 	ldw	r2,0(r2)
   13b50:	11000104 	addi	r4,r2,4
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10800817 	ldw	r2,32(r2)
   13b5c:	10810014 	ori	r2,r2,1024
   13b60:	1007883a 	mov	r3,r2
   13b64:	2005883a 	mov	r2,r4
   13b68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   13b6c:	e0bffe17 	ldw	r2,-8(fp)
   13b70:	10000915 	stw	zero,36(r2)
   13b74:	00000a06 	br	13ba0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13b78:	e0bffe17 	ldw	r2,-8(fp)
   13b7c:	10c00917 	ldw	r3,36(r2)
   13b80:	00a00034 	movhi	r2,32768
   13b84:	10bfff04 	addi	r2,r2,-4
   13b88:	10c00536 	bltu	r2,r3,13ba0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   13b8c:	e0bffe17 	ldw	r2,-8(fp)
   13b90:	10800917 	ldw	r2,36(r2)
   13b94:	10c00044 	addi	r3,r2,1
   13b98:	e0bffe17 	ldw	r2,-8(fp)
   13b9c:	10c00915 	stw	r3,36(r2)
   13ba0:	008000b4 	movhi	r2,2
   13ba4:	10a2a704 	addi	r2,r2,-30052
   13ba8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13bac:	e037883a 	mov	sp,fp
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00104 	addi	sp,sp,4
   13bb8:	f800283a 	ret

00013bbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13bbc:	defffc04 	addi	sp,sp,-16
   13bc0:	df000315 	stw	fp,12(sp)
   13bc4:	df000304 	addi	fp,sp,12
   13bc8:	e13ffd15 	stw	r4,-12(fp)
   13bcc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13bd0:	00000706 	br	13bf0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   13bd4:	e0bffe17 	ldw	r2,-8(fp)
   13bd8:	1090000c 	andi	r2,r2,16384
   13bdc:	1005003a 	cmpeq	r2,r2,zero
   13be0:	1000031e 	bne	r2,zero,13bf0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   13be4:	00bffd44 	movi	r2,-11
   13be8:	e0bfff15 	stw	r2,-4(fp)
   13bec:	00000b06 	br	13c1c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13bf0:	e0bffd17 	ldw	r2,-12(fp)
   13bf4:	10c00d17 	ldw	r3,52(r2)
   13bf8:	e0bffd17 	ldw	r2,-12(fp)
   13bfc:	10800c17 	ldw	r2,48(r2)
   13c00:	18800526 	beq	r3,r2,13c18 <altera_avalon_jtag_uart_close+0x5c>
   13c04:	e0bffd17 	ldw	r2,-12(fp)
   13c08:	10c00917 	ldw	r3,36(r2)
   13c0c:	e0bffd17 	ldw	r2,-12(fp)
   13c10:	10800117 	ldw	r2,4(r2)
   13c14:	18bfef36 	bltu	r3,r2,13bd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13c18:	e03fff15 	stw	zero,-4(fp)
   13c1c:	e0bfff17 	ldw	r2,-4(fp)
}
   13c20:	e037883a 	mov	sp,fp
   13c24:	df000017 	ldw	fp,0(sp)
   13c28:	dec00104 	addi	sp,sp,4
   13c2c:	f800283a 	ret

00013c30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13c30:	defff804 	addi	sp,sp,-32
   13c34:	df000715 	stw	fp,28(sp)
   13c38:	df000704 	addi	fp,sp,28
   13c3c:	e13ffb15 	stw	r4,-20(fp)
   13c40:	e17ffc15 	stw	r5,-16(fp)
   13c44:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   13c48:	00bff9c4 	movi	r2,-25
   13c4c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   13c50:	e0bffc17 	ldw	r2,-16(fp)
   13c54:	e0bfff15 	stw	r2,-4(fp)
   13c58:	e0ffff17 	ldw	r3,-4(fp)
   13c5c:	189a8060 	cmpeqi	r2,r3,27137
   13c60:	1000041e 	bne	r2,zero,13c74 <altera_avalon_jtag_uart_ioctl+0x44>
   13c64:	e0ffff17 	ldw	r3,-4(fp)
   13c68:	189a80a0 	cmpeqi	r2,r3,27138
   13c6c:	10001b1e 	bne	r2,zero,13cdc <altera_avalon_jtag_uart_ioctl+0xac>
   13c70:	00002706 	br	13d10 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13c74:	e0bffb17 	ldw	r2,-20(fp)
   13c78:	10c00117 	ldw	r3,4(r2)
   13c7c:	00a00034 	movhi	r2,32768
   13c80:	10bfffc4 	addi	r2,r2,-1
   13c84:	18802226 	beq	r3,r2,13d10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   13c88:	e0bffd17 	ldw	r2,-12(fp)
   13c8c:	10800017 	ldw	r2,0(r2)
   13c90:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13c94:	e0bff917 	ldw	r2,-28(fp)
   13c98:	10800090 	cmplti	r2,r2,2
   13c9c:	1000071e 	bne	r2,zero,13cbc <altera_avalon_jtag_uart_ioctl+0x8c>
   13ca0:	e0fff917 	ldw	r3,-28(fp)
   13ca4:	00a00034 	movhi	r2,32768
   13ca8:	10bfffc4 	addi	r2,r2,-1
   13cac:	18800326 	beq	r3,r2,13cbc <altera_avalon_jtag_uart_ioctl+0x8c>
   13cb0:	e0bff917 	ldw	r2,-28(fp)
   13cb4:	e0bffe15 	stw	r2,-8(fp)
   13cb8:	00000306 	br	13cc8 <altera_avalon_jtag_uart_ioctl+0x98>
   13cbc:	00e00034 	movhi	r3,32768
   13cc0:	18ffff84 	addi	r3,r3,-2
   13cc4:	e0fffe15 	stw	r3,-8(fp)
   13cc8:	e0bffb17 	ldw	r2,-20(fp)
   13ccc:	e0fffe17 	ldw	r3,-8(fp)
   13cd0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   13cd4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   13cd8:	00000d06 	br	13d10 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13cdc:	e0bffb17 	ldw	r2,-20(fp)
   13ce0:	10c00117 	ldw	r3,4(r2)
   13ce4:	00a00034 	movhi	r2,32768
   13ce8:	10bfffc4 	addi	r2,r2,-1
   13cec:	18800826 	beq	r3,r2,13d10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13cf0:	e13ffd17 	ldw	r4,-12(fp)
   13cf4:	e0bffb17 	ldw	r2,-20(fp)
   13cf8:	10c00917 	ldw	r3,36(r2)
   13cfc:	e0bffb17 	ldw	r2,-20(fp)
   13d00:	10800117 	ldw	r2,4(r2)
   13d04:	1885803a 	cmpltu	r2,r3,r2
   13d08:	20800015 	stw	r2,0(r4)
      rc = 0;
   13d0c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   13d10:	e0bffa17 	ldw	r2,-24(fp)
}
   13d14:	e037883a 	mov	sp,fp
   13d18:	df000017 	ldw	fp,0(sp)
   13d1c:	dec00104 	addi	sp,sp,4
   13d20:	f800283a 	ret

00013d24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13d24:	defff204 	addi	sp,sp,-56
   13d28:	dfc00d15 	stw	ra,52(sp)
   13d2c:	df000c15 	stw	fp,48(sp)
   13d30:	df000c04 	addi	fp,sp,48
   13d34:	e13ffb15 	stw	r4,-20(fp)
   13d38:	e17ffc15 	stw	r5,-16(fp)
   13d3c:	e1bffd15 	stw	r6,-12(fp)
   13d40:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   13d44:	e0bffc17 	ldw	r2,-16(fp)
   13d48:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13d4c:	00004806 	br	13e70 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13d50:	e0bffb17 	ldw	r2,-20(fp)
   13d54:	10800a17 	ldw	r2,40(r2)
   13d58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13d5c:	e0bffb17 	ldw	r2,-20(fp)
   13d60:	10800b17 	ldw	r2,44(r2)
   13d64:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   13d68:	e0fff717 	ldw	r3,-36(fp)
   13d6c:	e0bff617 	ldw	r2,-40(fp)
   13d70:	18800536 	bltu	r3,r2,13d88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13d74:	e0bff717 	ldw	r2,-36(fp)
   13d78:	e0fff617 	ldw	r3,-40(fp)
   13d7c:	10c5c83a 	sub	r2,r2,r3
   13d80:	e0bff815 	stw	r2,-32(fp)
   13d84:	00000406 	br	13d98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13d88:	00820004 	movi	r2,2048
   13d8c:	e0fff617 	ldw	r3,-40(fp)
   13d90:	10c5c83a 	sub	r2,r2,r3
   13d94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   13d98:	e0bff817 	ldw	r2,-32(fp)
   13d9c:	1005003a 	cmpeq	r2,r2,zero
   13da0:	10001f1e 	bne	r2,zero,13e20 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   13da4:	e0fffd17 	ldw	r3,-12(fp)
   13da8:	e0bff817 	ldw	r2,-32(fp)
   13dac:	1880022e 	bgeu	r3,r2,13db8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   13db0:	e0bffd17 	ldw	r2,-12(fp)
   13db4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13db8:	e0bffb17 	ldw	r2,-20(fp)
   13dbc:	10c00e04 	addi	r3,r2,56
   13dc0:	e0bff617 	ldw	r2,-40(fp)
   13dc4:	1887883a 	add	r3,r3,r2
   13dc8:	e0bffa17 	ldw	r2,-24(fp)
   13dcc:	1009883a 	mov	r4,r2
   13dd0:	180b883a 	mov	r5,r3
   13dd4:	e1bff817 	ldw	r6,-32(fp)
   13dd8:	001100c0 	call	1100c <memcpy>
      ptr   += n;
   13ddc:	e0fff817 	ldw	r3,-32(fp)
   13de0:	e0bffa17 	ldw	r2,-24(fp)
   13de4:	10c5883a 	add	r2,r2,r3
   13de8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   13dec:	e0fffd17 	ldw	r3,-12(fp)
   13df0:	e0bff817 	ldw	r2,-32(fp)
   13df4:	1885c83a 	sub	r2,r3,r2
   13df8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13dfc:	e0fff617 	ldw	r3,-40(fp)
   13e00:	e0bff817 	ldw	r2,-32(fp)
   13e04:	1885883a 	add	r2,r3,r2
   13e08:	10c1ffcc 	andi	r3,r2,2047
   13e0c:	e0bffb17 	ldw	r2,-20(fp)
   13e10:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13e14:	e0bffd17 	ldw	r2,-12(fp)
   13e18:	10800048 	cmpgei	r2,r2,1
   13e1c:	103fcc1e 	bne	r2,zero,13d50 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   13e20:	e0fffa17 	ldw	r3,-24(fp)
   13e24:	e0bffc17 	ldw	r2,-16(fp)
   13e28:	1880141e 	bne	r3,r2,13e7c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13e2c:	e0bffe17 	ldw	r2,-8(fp)
   13e30:	1090000c 	andi	r2,r2,16384
   13e34:	1004c03a 	cmpne	r2,r2,zero
   13e38:	1000101e 	bne	r2,zero,13e7c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13e3c:	e0bffb17 	ldw	r2,-20(fp)
   13e40:	10c00a17 	ldw	r3,40(r2)
   13e44:	e0bff717 	ldw	r2,-36(fp)
   13e48:	1880051e 	bne	r3,r2,13e60 <altera_avalon_jtag_uart_read+0x13c>
   13e4c:	e0bffb17 	ldw	r2,-20(fp)
   13e50:	10c00917 	ldw	r3,36(r2)
   13e54:	e0bffb17 	ldw	r2,-20(fp)
   13e58:	10800117 	ldw	r2,4(r2)
   13e5c:	18bff736 	bltu	r3,r2,13e3c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13e60:	e0bffb17 	ldw	r2,-20(fp)
   13e64:	10c00a17 	ldw	r3,40(r2)
   13e68:	e0bff717 	ldw	r2,-36(fp)
   13e6c:	18800326 	beq	r3,r2,13e7c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13e70:	e0bffd17 	ldw	r2,-12(fp)
   13e74:	10800048 	cmpgei	r2,r2,1
   13e78:	103fb51e 	bne	r2,zero,13d50 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13e7c:	e0fffa17 	ldw	r3,-24(fp)
   13e80:	e0bffc17 	ldw	r2,-16(fp)
   13e84:	18801926 	beq	r3,r2,13eec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e88:	0005303a 	rdctl	r2,status
   13e8c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e90:	e0fff517 	ldw	r3,-44(fp)
   13e94:	00bfff84 	movi	r2,-2
   13e98:	1884703a 	and	r2,r3,r2
   13e9c:	1001703a 	wrctl	status,r2
  
  return context;
   13ea0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13ea4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13ea8:	e0bffb17 	ldw	r2,-20(fp)
   13eac:	10800817 	ldw	r2,32(r2)
   13eb0:	10c00054 	ori	r3,r2,1
   13eb4:	e0bffb17 	ldw	r2,-20(fp)
   13eb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13ebc:	e0bffb17 	ldw	r2,-20(fp)
   13ec0:	10800017 	ldw	r2,0(r2)
   13ec4:	11000104 	addi	r4,r2,4
   13ec8:	e0bffb17 	ldw	r2,-20(fp)
   13ecc:	10800817 	ldw	r2,32(r2)
   13ed0:	1007883a 	mov	r3,r2
   13ed4:	2005883a 	mov	r2,r4
   13ed8:	10c00035 	stwio	r3,0(r2)
   13edc:	e0bff917 	ldw	r2,-28(fp)
   13ee0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ee4:	e0bff417 	ldw	r2,-48(fp)
   13ee8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13eec:	e0fffa17 	ldw	r3,-24(fp)
   13ef0:	e0bffc17 	ldw	r2,-16(fp)
   13ef4:	18800526 	beq	r3,r2,13f0c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   13ef8:	e0fffa17 	ldw	r3,-24(fp)
   13efc:	e0bffc17 	ldw	r2,-16(fp)
   13f00:	1887c83a 	sub	r3,r3,r2
   13f04:	e0ffff15 	stw	r3,-4(fp)
   13f08:	00000906 	br	13f30 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   13f0c:	e0bffe17 	ldw	r2,-8(fp)
   13f10:	1090000c 	andi	r2,r2,16384
   13f14:	1005003a 	cmpeq	r2,r2,zero
   13f18:	1000031e 	bne	r2,zero,13f28 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13f1c:	00bffd44 	movi	r2,-11
   13f20:	e0bfff15 	stw	r2,-4(fp)
   13f24:	00000206 	br	13f30 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   13f28:	00bffec4 	movi	r2,-5
   13f2c:	e0bfff15 	stw	r2,-4(fp)
   13f30:	e0bfff17 	ldw	r2,-4(fp)
}
   13f34:	e037883a 	mov	sp,fp
   13f38:	dfc00117 	ldw	ra,4(sp)
   13f3c:	df000017 	ldw	fp,0(sp)
   13f40:	dec00204 	addi	sp,sp,8
   13f44:	f800283a 	ret

00013f48 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13f48:	defff204 	addi	sp,sp,-56
   13f4c:	dfc00d15 	stw	ra,52(sp)
   13f50:	df000c15 	stw	fp,48(sp)
   13f54:	df000c04 	addi	fp,sp,48
   13f58:	e13ffb15 	stw	r4,-20(fp)
   13f5c:	e17ffc15 	stw	r5,-16(fp)
   13f60:	e1bffd15 	stw	r6,-12(fp)
   13f64:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   13f68:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13f6c:	e0bffc17 	ldw	r2,-16(fp)
   13f70:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13f74:	00003a06 	br	14060 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   13f78:	e0bffb17 	ldw	r2,-20(fp)
   13f7c:	10800c17 	ldw	r2,48(r2)
   13f80:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   13f84:	e0bffb17 	ldw	r2,-20(fp)
   13f88:	10800d17 	ldw	r2,52(r2)
   13f8c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   13f90:	e0fffa17 	ldw	r3,-24(fp)
   13f94:	e0bff917 	ldw	r2,-28(fp)
   13f98:	1880062e 	bgeu	r3,r2,13fb4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   13f9c:	e0fff917 	ldw	r3,-28(fp)
   13fa0:	e0bffa17 	ldw	r2,-24(fp)
   13fa4:	1885c83a 	sub	r2,r3,r2
   13fa8:	10bfffc4 	addi	r2,r2,-1
   13fac:	e0bff815 	stw	r2,-32(fp)
   13fb0:	00000c06 	br	13fe4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   13fb4:	e0bff917 	ldw	r2,-28(fp)
   13fb8:	1005003a 	cmpeq	r2,r2,zero
   13fbc:	1000051e 	bne	r2,zero,13fd4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   13fc0:	00820004 	movi	r2,2048
   13fc4:	e0fffa17 	ldw	r3,-24(fp)
   13fc8:	10c5c83a 	sub	r2,r2,r3
   13fcc:	e0bff815 	stw	r2,-32(fp)
   13fd0:	00000406 	br	13fe4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   13fd4:	0081ffc4 	movi	r2,2047
   13fd8:	e0fffa17 	ldw	r3,-24(fp)
   13fdc:	10c5c83a 	sub	r2,r2,r3
   13fe0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   13fe4:	e0bff817 	ldw	r2,-32(fp)
   13fe8:	1005003a 	cmpeq	r2,r2,zero
   13fec:	10001f1e 	bne	r2,zero,1406c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   13ff0:	e0fffd17 	ldw	r3,-12(fp)
   13ff4:	e0bff817 	ldw	r2,-32(fp)
   13ff8:	1880022e 	bgeu	r3,r2,14004 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   13ffc:	e0bffd17 	ldw	r2,-12(fp)
   14000:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14004:	e0bffb17 	ldw	r2,-20(fp)
   14008:	10c20e04 	addi	r3,r2,2104
   1400c:	e0bffa17 	ldw	r2,-24(fp)
   14010:	1885883a 	add	r2,r3,r2
   14014:	e0fffc17 	ldw	r3,-16(fp)
   14018:	1009883a 	mov	r4,r2
   1401c:	180b883a 	mov	r5,r3
   14020:	e1bff817 	ldw	r6,-32(fp)
   14024:	001100c0 	call	1100c <memcpy>
      ptr   += n;
   14028:	e0fff817 	ldw	r3,-32(fp)
   1402c:	e0bffc17 	ldw	r2,-16(fp)
   14030:	10c5883a 	add	r2,r2,r3
   14034:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   14038:	e0fffd17 	ldw	r3,-12(fp)
   1403c:	e0bff817 	ldw	r2,-32(fp)
   14040:	1885c83a 	sub	r2,r3,r2
   14044:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14048:	e0fffa17 	ldw	r3,-24(fp)
   1404c:	e0bff817 	ldw	r2,-32(fp)
   14050:	1885883a 	add	r2,r3,r2
   14054:	10c1ffcc 	andi	r3,r2,2047
   14058:	e0bffb17 	ldw	r2,-20(fp)
   1405c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14060:	e0bffd17 	ldw	r2,-12(fp)
   14064:	10800048 	cmpgei	r2,r2,1
   14068:	103fc31e 	bne	r2,zero,13f78 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1406c:	0005303a 	rdctl	r2,status
   14070:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14074:	e0fff517 	ldw	r3,-44(fp)
   14078:	00bfff84 	movi	r2,-2
   1407c:	1884703a 	and	r2,r3,r2
   14080:	1001703a 	wrctl	status,r2
  
  return context;
   14084:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14088:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1408c:	e0bffb17 	ldw	r2,-20(fp)
   14090:	10800817 	ldw	r2,32(r2)
   14094:	10c00094 	ori	r3,r2,2
   14098:	e0bffb17 	ldw	r2,-20(fp)
   1409c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   140a0:	e0bffb17 	ldw	r2,-20(fp)
   140a4:	10800017 	ldw	r2,0(r2)
   140a8:	11000104 	addi	r4,r2,4
   140ac:	e0bffb17 	ldw	r2,-20(fp)
   140b0:	10800817 	ldw	r2,32(r2)
   140b4:	1007883a 	mov	r3,r2
   140b8:	2005883a 	mov	r2,r4
   140bc:	10c00035 	stwio	r3,0(r2)
   140c0:	e0bff717 	ldw	r2,-36(fp)
   140c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140c8:	e0bff417 	ldw	r2,-48(fp)
   140cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   140d0:	e0bffd17 	ldw	r2,-12(fp)
   140d4:	10800050 	cmplti	r2,r2,1
   140d8:	1000111e 	bne	r2,zero,14120 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   140dc:	e0bffe17 	ldw	r2,-8(fp)
   140e0:	1090000c 	andi	r2,r2,16384
   140e4:	1004c03a 	cmpne	r2,r2,zero
   140e8:	1000101e 	bne	r2,zero,1412c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   140ec:	e0bffb17 	ldw	r2,-20(fp)
   140f0:	10c00d17 	ldw	r3,52(r2)
   140f4:	e0bff917 	ldw	r2,-28(fp)
   140f8:	1880051e 	bne	r3,r2,14110 <altera_avalon_jtag_uart_write+0x1c8>
   140fc:	e0bffb17 	ldw	r2,-20(fp)
   14100:	10c00917 	ldw	r3,36(r2)
   14104:	e0bffb17 	ldw	r2,-20(fp)
   14108:	10800117 	ldw	r2,4(r2)
   1410c:	18bff736 	bltu	r3,r2,140ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14110:	e0bffb17 	ldw	r2,-20(fp)
   14114:	10c00d17 	ldw	r3,52(r2)
   14118:	e0bff917 	ldw	r2,-28(fp)
   1411c:	18800326 	beq	r3,r2,1412c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   14120:	e0bffd17 	ldw	r2,-12(fp)
   14124:	10800048 	cmpgei	r2,r2,1
   14128:	103fcd1e 	bne	r2,zero,14060 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1412c:	e0fffc17 	ldw	r3,-16(fp)
   14130:	e0bff617 	ldw	r2,-40(fp)
   14134:	18800526 	beq	r3,r2,1414c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   14138:	e0fffc17 	ldw	r3,-16(fp)
   1413c:	e0bff617 	ldw	r2,-40(fp)
   14140:	1887c83a 	sub	r3,r3,r2
   14144:	e0ffff15 	stw	r3,-4(fp)
   14148:	00000906 	br	14170 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1414c:	e0bffe17 	ldw	r2,-8(fp)
   14150:	1090000c 	andi	r2,r2,16384
   14154:	1005003a 	cmpeq	r2,r2,zero
   14158:	1000031e 	bne	r2,zero,14168 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1415c:	00bffd44 	movi	r2,-11
   14160:	e0bfff15 	stw	r2,-4(fp)
   14164:	00000206 	br	14170 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14168:	00bffec4 	movi	r2,-5
   1416c:	e0bfff15 	stw	r2,-4(fp)
   14170:	e0bfff17 	ldw	r2,-4(fp)
}
   14174:	e037883a 	mov	sp,fp
   14178:	dfc00117 	ldw	ra,4(sp)
   1417c:	df000017 	ldw	fp,0(sp)
   14180:	dec00204 	addi	sp,sp,8
   14184:	f800283a 	ret

00014188 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14188:	defffa04 	addi	sp,sp,-24
   1418c:	dfc00515 	stw	ra,20(sp)
   14190:	df000415 	stw	fp,16(sp)
   14194:	df000404 	addi	fp,sp,16
   14198:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1419c:	e0bfff17 	ldw	r2,-4(fp)
   141a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   141a4:	e0bfff17 	ldw	r2,-4(fp)
   141a8:	10800104 	addi	r2,r2,4
   141ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141b0:	0005303a 	rdctl	r2,status
   141b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141b8:	e0fffd17 	ldw	r3,-12(fp)
   141bc:	00bfff84 	movi	r2,-2
   141c0:	1884703a 	and	r2,r3,r2
   141c4:	1001703a 	wrctl	status,r2
  
  return context;
   141c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   141cc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   141d0:	0014d680 	call	14d68 <alt_tick>
   141d4:	e0bffe17 	ldw	r2,-8(fp)
   141d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141dc:	e0bffc17 	ldw	r2,-16(fp)
   141e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   141e4:	e037883a 	mov	sp,fp
   141e8:	dfc00117 	ldw	ra,4(sp)
   141ec:	df000017 	ldw	fp,0(sp)
   141f0:	dec00204 	addi	sp,sp,8
   141f4:	f800283a 	ret

000141f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   141f8:	defff804 	addi	sp,sp,-32
   141fc:	dfc00715 	stw	ra,28(sp)
   14200:	df000615 	stw	fp,24(sp)
   14204:	df000604 	addi	fp,sp,24
   14208:	e13ffc15 	stw	r4,-16(fp)
   1420c:	e17ffd15 	stw	r5,-12(fp)
   14210:	e1bffe15 	stw	r6,-8(fp)
   14214:	e1ffff15 	stw	r7,-4(fp)
   14218:	e0bfff17 	ldw	r2,-4(fp)
   1421c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14220:	008000b4 	movhi	r2,2
   14224:	10a2a704 	addi	r2,r2,-30052
   14228:	10800017 	ldw	r2,0(r2)
   1422c:	1004c03a 	cmpne	r2,r2,zero
   14230:	1000041e 	bne	r2,zero,14244 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   14234:	00c000b4 	movhi	r3,2
   14238:	18e2a704 	addi	r3,r3,-30052
   1423c:	e0bffb17 	ldw	r2,-20(fp)
   14240:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14244:	e0bffc17 	ldw	r2,-16(fp)
   14248:	10800104 	addi	r2,r2,4
   1424c:	1007883a 	mov	r3,r2
   14250:	008001c4 	movi	r2,7
   14254:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14258:	d8000015 	stw	zero,0(sp)
   1425c:	e13ffd17 	ldw	r4,-12(fp)
   14260:	e17ffe17 	ldw	r5,-8(fp)
   14264:	01800074 	movhi	r6,1
   14268:	31906204 	addi	r6,r6,16776
   1426c:	e1fffc17 	ldw	r7,-16(fp)
   14270:	00146040 	call	14604 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14274:	e037883a 	mov	sp,fp
   14278:	dfc00117 	ldw	ra,4(sp)
   1427c:	df000017 	ldw	fp,0(sp)
   14280:	dec00204 	addi	sp,sp,8
   14284:	f800283a 	ret

00014288 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14288:	defff404 	addi	sp,sp,-48
   1428c:	df000b15 	stw	fp,44(sp)
   14290:	df000b04 	addi	fp,sp,44
   14294:	e13ffb15 	stw	r4,-20(fp)
   14298:	e17ffc15 	stw	r5,-16(fp)
   1429c:	e1bffd15 	stw	r6,-12(fp)
   142a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   142a4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   142a8:	008000b4 	movhi	r2,2
   142ac:	10a2a704 	addi	r2,r2,-30052
   142b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   142b4:	1005003a 	cmpeq	r2,r2,zero
   142b8:	1000411e 	bne	r2,zero,143c0 <alt_alarm_start+0x138>
  {
    if (alarm)
   142bc:	e0bffb17 	ldw	r2,-20(fp)
   142c0:	1005003a 	cmpeq	r2,r2,zero
   142c4:	10003b1e 	bne	r2,zero,143b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   142c8:	e0fffb17 	ldw	r3,-20(fp)
   142cc:	e0bffd17 	ldw	r2,-12(fp)
   142d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   142d4:	e0fffb17 	ldw	r3,-20(fp)
   142d8:	e0bffe17 	ldw	r2,-8(fp)
   142dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142e0:	0005303a 	rdctl	r2,status
   142e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142e8:	e0fff817 	ldw	r3,-32(fp)
   142ec:	00bfff84 	movi	r2,-2
   142f0:	1884703a 	and	r2,r3,r2
   142f4:	1001703a 	wrctl	status,r2
  
  return context;
   142f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   142fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14300:	008000b4 	movhi	r2,2
   14304:	10a2a804 	addi	r2,r2,-30048
   14308:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1430c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14310:	e0fffc17 	ldw	r3,-16(fp)
   14314:	e0bff917 	ldw	r2,-28(fp)
   14318:	1885883a 	add	r2,r3,r2
   1431c:	10c00044 	addi	r3,r2,1
   14320:	e0bffb17 	ldw	r2,-20(fp)
   14324:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14328:	e0bffb17 	ldw	r2,-20(fp)
   1432c:	10c00217 	ldw	r3,8(r2)
   14330:	e0bff917 	ldw	r2,-28(fp)
   14334:	1880042e 	bgeu	r3,r2,14348 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   14338:	e0fffb17 	ldw	r3,-20(fp)
   1433c:	00800044 	movi	r2,1
   14340:	18800405 	stb	r2,16(r3)
   14344:	00000206 	br	14350 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   14348:	e0bffb17 	ldw	r2,-20(fp)
   1434c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14350:	e0fffb17 	ldw	r3,-20(fp)
   14354:	00800074 	movhi	r2,1
   14358:	109c0b04 	addi	r2,r2,28716
   1435c:	e0bff615 	stw	r2,-40(fp)
   14360:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14364:	e0fff717 	ldw	r3,-36(fp)
   14368:	e0bff617 	ldw	r2,-40(fp)
   1436c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14370:	e0bff617 	ldw	r2,-40(fp)
   14374:	10c00017 	ldw	r3,0(r2)
   14378:	e0bff717 	ldw	r2,-36(fp)
   1437c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14380:	e0bff617 	ldw	r2,-40(fp)
   14384:	10c00017 	ldw	r3,0(r2)
   14388:	e0bff717 	ldw	r2,-36(fp)
   1438c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   14390:	e0fff617 	ldw	r3,-40(fp)
   14394:	e0bff717 	ldw	r2,-36(fp)
   14398:	18800015 	stw	r2,0(r3)
   1439c:	e0bffa17 	ldw	r2,-24(fp)
   143a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143a4:	e0bff517 	ldw	r2,-44(fp)
   143a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   143ac:	e03fff15 	stw	zero,-4(fp)
   143b0:	00000506 	br	143c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   143b4:	00bffa84 	movi	r2,-22
   143b8:	e0bfff15 	stw	r2,-4(fp)
   143bc:	00000206 	br	143c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   143c0:	00bfde84 	movi	r2,-134
   143c4:	e0bfff15 	stw	r2,-4(fp)
   143c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   143cc:	e037883a 	mov	sp,fp
   143d0:	df000017 	ldw	fp,0(sp)
   143d4:	dec00104 	addi	sp,sp,4
   143d8:	f800283a 	ret

000143dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   143dc:	deffff04 	addi	sp,sp,-4
   143e0:	df000015 	stw	fp,0(sp)
   143e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   143e8:	e037883a 	mov	sp,fp
   143ec:	df000017 	ldw	fp,0(sp)
   143f0:	dec00104 	addi	sp,sp,4
   143f4:	f800283a 	ret

000143f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   143f8:	defff904 	addi	sp,sp,-28
   143fc:	dfc00615 	stw	ra,24(sp)
   14400:	df000515 	stw	fp,20(sp)
   14404:	df000504 	addi	fp,sp,20
   14408:	e13ffd15 	stw	r4,-12(fp)
   1440c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14410:	e0bffd17 	ldw	r2,-12(fp)
   14414:	1005003a 	cmpeq	r2,r2,zero
   14418:	1000041e 	bne	r2,zero,1442c <alt_dev_llist_insert+0x34>
   1441c:	e0bffd17 	ldw	r2,-12(fp)
   14420:	10800217 	ldw	r2,8(r2)
   14424:	1004c03a 	cmpne	r2,r2,zero
   14428:	1000071e 	bne	r2,zero,14448 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1442c:	00144ac0 	call	144ac <alt_get_errno>
   14430:	1007883a 	mov	r3,r2
   14434:	00800584 	movi	r2,22
   14438:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1443c:	00bffa84 	movi	r2,-22
   14440:	e0bfff15 	stw	r2,-4(fp)
   14444:	00001306 	br	14494 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14448:	e0fffd17 	ldw	r3,-12(fp)
   1444c:	e0bffe17 	ldw	r2,-8(fp)
   14450:	e0bffb15 	stw	r2,-20(fp)
   14454:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14458:	e0fffc17 	ldw	r3,-16(fp)
   1445c:	e0bffb17 	ldw	r2,-20(fp)
   14460:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14464:	e0bffb17 	ldw	r2,-20(fp)
   14468:	10c00017 	ldw	r3,0(r2)
   1446c:	e0bffc17 	ldw	r2,-16(fp)
   14470:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14474:	e0bffb17 	ldw	r2,-20(fp)
   14478:	10c00017 	ldw	r3,0(r2)
   1447c:	e0bffc17 	ldw	r2,-16(fp)
   14480:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   14484:	e0fffb17 	ldw	r3,-20(fp)
   14488:	e0bffc17 	ldw	r2,-16(fp)
   1448c:	18800015 	stw	r2,0(r3)

  return 0;  
   14490:	e03fff15 	stw	zero,-4(fp)
   14494:	e0bfff17 	ldw	r2,-4(fp)
}
   14498:	e037883a 	mov	sp,fp
   1449c:	dfc00117 	ldw	ra,4(sp)
   144a0:	df000017 	ldw	fp,0(sp)
   144a4:	dec00204 	addi	sp,sp,8
   144a8:	f800283a 	ret

000144ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144ac:	defffd04 	addi	sp,sp,-12
   144b0:	dfc00215 	stw	ra,8(sp)
   144b4:	df000115 	stw	fp,4(sp)
   144b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   144bc:	00800074 	movhi	r2,1
   144c0:	109c0804 	addi	r2,r2,28704
   144c4:	10800017 	ldw	r2,0(r2)
   144c8:	1005003a 	cmpeq	r2,r2,zero
   144cc:	1000061e 	bne	r2,zero,144e8 <alt_get_errno+0x3c>
   144d0:	00800074 	movhi	r2,1
   144d4:	109c0804 	addi	r2,r2,28704
   144d8:	10800017 	ldw	r2,0(r2)
   144dc:	103ee83a 	callr	r2
   144e0:	e0bfff15 	stw	r2,-4(fp)
   144e4:	00000306 	br	144f4 <alt_get_errno+0x48>
   144e8:	008000b4 	movhi	r2,2
   144ec:	10a2a204 	addi	r2,r2,-30072
   144f0:	e0bfff15 	stw	r2,-4(fp)
   144f4:	e0bfff17 	ldw	r2,-4(fp)
}
   144f8:	e037883a 	mov	sp,fp
   144fc:	dfc00117 	ldw	ra,4(sp)
   14500:	df000017 	ldw	fp,0(sp)
   14504:	dec00204 	addi	sp,sp,8
   14508:	f800283a 	ret

0001450c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1450c:	defffd04 	addi	sp,sp,-12
   14510:	dfc00215 	stw	ra,8(sp)
   14514:	df000115 	stw	fp,4(sp)
   14518:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1451c:	00bfff04 	movi	r2,-4
   14520:	00c00074 	movhi	r3,1
   14524:	18d56704 	addi	r3,r3,21916
   14528:	1885883a 	add	r2,r3,r2
   1452c:	e0bfff15 	stw	r2,-4(fp)
   14530:	00000606 	br	1454c <_do_ctors+0x40>
        (*ctor) (); 
   14534:	e0bfff17 	ldw	r2,-4(fp)
   14538:	10800017 	ldw	r2,0(r2)
   1453c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14540:	e0bfff17 	ldw	r2,-4(fp)
   14544:	10bfff04 	addi	r2,r2,-4
   14548:	e0bfff15 	stw	r2,-4(fp)
   1454c:	e0ffff17 	ldw	r3,-4(fp)
   14550:	00800074 	movhi	r2,1
   14554:	10956604 	addi	r2,r2,21912
   14558:	18bff62e 	bgeu	r3,r2,14534 <_do_ctors+0x28>
        (*ctor) (); 
}
   1455c:	e037883a 	mov	sp,fp
   14560:	dfc00117 	ldw	ra,4(sp)
   14564:	df000017 	ldw	fp,0(sp)
   14568:	dec00204 	addi	sp,sp,8
   1456c:	f800283a 	ret

00014570 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14570:	defffd04 	addi	sp,sp,-12
   14574:	dfc00215 	stw	ra,8(sp)
   14578:	df000115 	stw	fp,4(sp)
   1457c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14580:	00bfff04 	movi	r2,-4
   14584:	00c00074 	movhi	r3,1
   14588:	18d56704 	addi	r3,r3,21916
   1458c:	1885883a 	add	r2,r3,r2
   14590:	e0bfff15 	stw	r2,-4(fp)
   14594:	00000606 	br	145b0 <_do_dtors+0x40>
        (*dtor) (); 
   14598:	e0bfff17 	ldw	r2,-4(fp)
   1459c:	10800017 	ldw	r2,0(r2)
   145a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   145a4:	e0bfff17 	ldw	r2,-4(fp)
   145a8:	10bfff04 	addi	r2,r2,-4
   145ac:	e0bfff15 	stw	r2,-4(fp)
   145b0:	e0ffff17 	ldw	r3,-4(fp)
   145b4:	00800074 	movhi	r2,1
   145b8:	10956704 	addi	r2,r2,21916
   145bc:	18bff62e 	bgeu	r3,r2,14598 <_do_dtors+0x28>
        (*dtor) (); 
}
   145c0:	e037883a 	mov	sp,fp
   145c4:	dfc00117 	ldw	ra,4(sp)
   145c8:	df000017 	ldw	fp,0(sp)
   145cc:	dec00204 	addi	sp,sp,8
   145d0:	f800283a 	ret

000145d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   145d4:	defffe04 	addi	sp,sp,-8
   145d8:	dfc00115 	stw	ra,4(sp)
   145dc:	df000015 	stw	fp,0(sp)
   145e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   145e4:	0009883a 	mov	r4,zero
   145e8:	01440004 	movi	r5,4096
   145ec:	00151000 	call	15100 <alt_icache_flush>
#endif
}
   145f0:	e037883a 	mov	sp,fp
   145f4:	dfc00117 	ldw	ra,4(sp)
   145f8:	df000017 	ldw	fp,0(sp)
   145fc:	dec00204 	addi	sp,sp,8
   14600:	f800283a 	ret

00014604 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14604:	defff904 	addi	sp,sp,-28
   14608:	dfc00615 	stw	ra,24(sp)
   1460c:	df000515 	stw	fp,20(sp)
   14610:	df000504 	addi	fp,sp,20
   14614:	e13ffc15 	stw	r4,-16(fp)
   14618:	e17ffd15 	stw	r5,-12(fp)
   1461c:	e1bffe15 	stw	r6,-8(fp)
   14620:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14624:	e0800217 	ldw	r2,8(fp)
   14628:	d8800015 	stw	r2,0(sp)
   1462c:	e13ffc17 	ldw	r4,-16(fp)
   14630:	e17ffd17 	ldw	r5,-12(fp)
   14634:	e1bffe17 	ldw	r6,-8(fp)
   14638:	e1ffff17 	ldw	r7,-4(fp)
   1463c:	00147d80 	call	147d8 <alt_iic_isr_register>
}  
   14640:	e037883a 	mov	sp,fp
   14644:	dfc00117 	ldw	ra,4(sp)
   14648:	df000017 	ldw	fp,0(sp)
   1464c:	dec00204 	addi	sp,sp,8
   14650:	f800283a 	ret

00014654 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14654:	defff904 	addi	sp,sp,-28
   14658:	df000615 	stw	fp,24(sp)
   1465c:	df000604 	addi	fp,sp,24
   14660:	e13ffe15 	stw	r4,-8(fp)
   14664:	e17fff15 	stw	r5,-4(fp)
   14668:	e0bfff17 	ldw	r2,-4(fp)
   1466c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14670:	0005303a 	rdctl	r2,status
   14674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14678:	e0fffb17 	ldw	r3,-20(fp)
   1467c:	00bfff84 	movi	r2,-2
   14680:	1884703a 	and	r2,r3,r2
   14684:	1001703a 	wrctl	status,r2
  
  return context;
   14688:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1468c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   14690:	e0fffc17 	ldw	r3,-16(fp)
   14694:	00800044 	movi	r2,1
   14698:	10c4983a 	sll	r2,r2,r3
   1469c:	1007883a 	mov	r3,r2
   146a0:	008000b4 	movhi	r2,2
   146a4:	10a2a604 	addi	r2,r2,-30056
   146a8:	10800017 	ldw	r2,0(r2)
   146ac:	1886b03a 	or	r3,r3,r2
   146b0:	008000b4 	movhi	r2,2
   146b4:	10a2a604 	addi	r2,r2,-30056
   146b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   146bc:	008000b4 	movhi	r2,2
   146c0:	10a2a604 	addi	r2,r2,-30056
   146c4:	10800017 	ldw	r2,0(r2)
   146c8:	100170fa 	wrctl	ienable,r2
   146cc:	e0bffd17 	ldw	r2,-12(fp)
   146d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146d4:	e0bffa17 	ldw	r2,-24(fp)
   146d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   146dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   146e0:	e037883a 	mov	sp,fp
   146e4:	df000017 	ldw	fp,0(sp)
   146e8:	dec00104 	addi	sp,sp,4
   146ec:	f800283a 	ret

000146f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   146f0:	defff904 	addi	sp,sp,-28
   146f4:	df000615 	stw	fp,24(sp)
   146f8:	df000604 	addi	fp,sp,24
   146fc:	e13ffe15 	stw	r4,-8(fp)
   14700:	e17fff15 	stw	r5,-4(fp)
   14704:	e0bfff17 	ldw	r2,-4(fp)
   14708:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1470c:	0005303a 	rdctl	r2,status
   14710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14714:	e0fffb17 	ldw	r3,-20(fp)
   14718:	00bfff84 	movi	r2,-2
   1471c:	1884703a 	and	r2,r3,r2
   14720:	1001703a 	wrctl	status,r2
  
  return context;
   14724:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14728:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1472c:	e0fffc17 	ldw	r3,-16(fp)
   14730:	00800044 	movi	r2,1
   14734:	10c4983a 	sll	r2,r2,r3
   14738:	0084303a 	nor	r2,zero,r2
   1473c:	1007883a 	mov	r3,r2
   14740:	008000b4 	movhi	r2,2
   14744:	10a2a604 	addi	r2,r2,-30056
   14748:	10800017 	ldw	r2,0(r2)
   1474c:	1886703a 	and	r3,r3,r2
   14750:	008000b4 	movhi	r2,2
   14754:	10a2a604 	addi	r2,r2,-30056
   14758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1475c:	008000b4 	movhi	r2,2
   14760:	10a2a604 	addi	r2,r2,-30056
   14764:	10800017 	ldw	r2,0(r2)
   14768:	100170fa 	wrctl	ienable,r2
   1476c:	e0bffd17 	ldw	r2,-12(fp)
   14770:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14774:	e0bffa17 	ldw	r2,-24(fp)
   14778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1477c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14780:	e037883a 	mov	sp,fp
   14784:	df000017 	ldw	fp,0(sp)
   14788:	dec00104 	addi	sp,sp,4
   1478c:	f800283a 	ret

00014790 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14790:	defffc04 	addi	sp,sp,-16
   14794:	df000315 	stw	fp,12(sp)
   14798:	df000304 	addi	fp,sp,12
   1479c:	e13ffe15 	stw	r4,-8(fp)
   147a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   147a4:	000530fa 	rdctl	r2,ienable
   147a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   147ac:	e0ffff17 	ldw	r3,-4(fp)
   147b0:	00800044 	movi	r2,1
   147b4:	10c4983a 	sll	r2,r2,r3
   147b8:	1007883a 	mov	r3,r2
   147bc:	e0bffd17 	ldw	r2,-12(fp)
   147c0:	1884703a 	and	r2,r3,r2
   147c4:	1004c03a 	cmpne	r2,r2,zero
}
   147c8:	e037883a 	mov	sp,fp
   147cc:	df000017 	ldw	fp,0(sp)
   147d0:	dec00104 	addi	sp,sp,4
   147d4:	f800283a 	ret

000147d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   147d8:	defff404 	addi	sp,sp,-48
   147dc:	dfc00b15 	stw	ra,44(sp)
   147e0:	df000a15 	stw	fp,40(sp)
   147e4:	df000a04 	addi	fp,sp,40
   147e8:	e13ffb15 	stw	r4,-20(fp)
   147ec:	e17ffc15 	stw	r5,-16(fp)
   147f0:	e1bffd15 	stw	r6,-12(fp)
   147f4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   147f8:	00bffa84 	movi	r2,-22
   147fc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14800:	e0bffc17 	ldw	r2,-16(fp)
   14804:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14808:	e0bff917 	ldw	r2,-28(fp)
   1480c:	10800808 	cmpgei	r2,r2,32
   14810:	1000291e 	bne	r2,zero,148b8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14814:	0005303a 	rdctl	r2,status
   14818:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1481c:	e0fff717 	ldw	r3,-36(fp)
   14820:	00bfff84 	movi	r2,-2
   14824:	1884703a 	and	r2,r3,r2
   14828:	1001703a 	wrctl	status,r2
  
  return context;
   1482c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14830:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   14834:	e0bff917 	ldw	r2,-28(fp)
   14838:	00c000b4 	movhi	r3,2
   1483c:	18e2b304 	addi	r3,r3,-30004
   14840:	100490fa 	slli	r2,r2,3
   14844:	10c7883a 	add	r3,r2,r3
   14848:	e0bffd17 	ldw	r2,-12(fp)
   1484c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   14850:	e0bff917 	ldw	r2,-28(fp)
   14854:	00c000b4 	movhi	r3,2
   14858:	18e2b304 	addi	r3,r3,-30004
   1485c:	100490fa 	slli	r2,r2,3
   14860:	10c5883a 	add	r2,r2,r3
   14864:	10c00104 	addi	r3,r2,4
   14868:	e0bffe17 	ldw	r2,-8(fp)
   1486c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14870:	e0bffd17 	ldw	r2,-12(fp)
   14874:	1005003a 	cmpeq	r2,r2,zero
   14878:	1000051e 	bne	r2,zero,14890 <alt_iic_isr_register+0xb8>
   1487c:	e17ff917 	ldw	r5,-28(fp)
   14880:	e13ffb17 	ldw	r4,-20(fp)
   14884:	00146540 	call	14654 <alt_ic_irq_enable>
   14888:	e0bfff15 	stw	r2,-4(fp)
   1488c:	00000406 	br	148a0 <alt_iic_isr_register+0xc8>
   14890:	e17ff917 	ldw	r5,-28(fp)
   14894:	e13ffb17 	ldw	r4,-20(fp)
   14898:	00146f00 	call	146f0 <alt_ic_irq_disable>
   1489c:	e0bfff15 	stw	r2,-4(fp)
   148a0:	e0bfff17 	ldw	r2,-4(fp)
   148a4:	e0bffa15 	stw	r2,-24(fp)
   148a8:	e0bff817 	ldw	r2,-32(fp)
   148ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148b0:	e0bff617 	ldw	r2,-40(fp)
   148b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   148b8:	e0bffa17 	ldw	r2,-24(fp)
}
   148bc:	e037883a 	mov	sp,fp
   148c0:	dfc00117 	ldw	ra,4(sp)
   148c4:	df000017 	ldw	fp,0(sp)
   148c8:	dec00204 	addi	sp,sp,8
   148cc:	f800283a 	ret

000148d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   148d0:	defff904 	addi	sp,sp,-28
   148d4:	dfc00615 	stw	ra,24(sp)
   148d8:	df000515 	stw	fp,20(sp)
   148dc:	df000504 	addi	fp,sp,20
   148e0:	e13ffc15 	stw	r4,-16(fp)
   148e4:	e17ffd15 	stw	r5,-12(fp)
   148e8:	e1bffe15 	stw	r6,-8(fp)
   148ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   148f0:	e13ffd17 	ldw	r4,-12(fp)
   148f4:	e17ffe17 	ldw	r5,-8(fp)
   148f8:	e1bfff17 	ldw	r6,-4(fp)
   148fc:	0014ae80 	call	14ae8 <open>
   14900:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14904:	e0bffb17 	ldw	r2,-20(fp)
   14908:	1004803a 	cmplt	r2,r2,zero
   1490c:	10001c1e 	bne	r2,zero,14980 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   14910:	e0bffb17 	ldw	r2,-20(fp)
   14914:	00c00074 	movhi	r3,1
   14918:	18d78704 	addi	r3,r3,24092
   1491c:	10800324 	muli	r2,r2,12
   14920:	10c5883a 	add	r2,r2,r3
   14924:	10c00017 	ldw	r3,0(r2)
   14928:	e0bffc17 	ldw	r2,-16(fp)
   1492c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14930:	e0bffb17 	ldw	r2,-20(fp)
   14934:	00c00074 	movhi	r3,1
   14938:	18d78704 	addi	r3,r3,24092
   1493c:	10800324 	muli	r2,r2,12
   14940:	10c5883a 	add	r2,r2,r3
   14944:	10800104 	addi	r2,r2,4
   14948:	10c00017 	ldw	r3,0(r2)
   1494c:	e0bffc17 	ldw	r2,-16(fp)
   14950:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14954:	e0bffb17 	ldw	r2,-20(fp)
   14958:	00c00074 	movhi	r3,1
   1495c:	18d78704 	addi	r3,r3,24092
   14960:	10800324 	muli	r2,r2,12
   14964:	10c5883a 	add	r2,r2,r3
   14968:	10800204 	addi	r2,r2,8
   1496c:	10c00017 	ldw	r3,0(r2)
   14970:	e0bffc17 	ldw	r2,-16(fp)
   14974:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14978:	e13ffb17 	ldw	r4,-20(fp)
   1497c:	00133780 	call	13378 <alt_release_fd>
  }
} 
   14980:	e037883a 	mov	sp,fp
   14984:	dfc00117 	ldw	ra,4(sp)
   14988:	df000017 	ldw	fp,0(sp)
   1498c:	dec00204 	addi	sp,sp,8
   14990:	f800283a 	ret

00014994 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14994:	defffb04 	addi	sp,sp,-20
   14998:	dfc00415 	stw	ra,16(sp)
   1499c:	df000315 	stw	fp,12(sp)
   149a0:	df000304 	addi	fp,sp,12
   149a4:	e13ffd15 	stw	r4,-12(fp)
   149a8:	e17ffe15 	stw	r5,-8(fp)
   149ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   149b0:	01000074 	movhi	r4,1
   149b4:	21178a04 	addi	r4,r4,24104
   149b8:	e17ffd17 	ldw	r5,-12(fp)
   149bc:	01800044 	movi	r6,1
   149c0:	01c07fc4 	movi	r7,511
   149c4:	00148d00 	call	148d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   149c8:	01000074 	movhi	r4,1
   149cc:	21178704 	addi	r4,r4,24092
   149d0:	e17ffe17 	ldw	r5,-8(fp)
   149d4:	000d883a 	mov	r6,zero
   149d8:	01c07fc4 	movi	r7,511
   149dc:	00148d00 	call	148d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   149e0:	01000074 	movhi	r4,1
   149e4:	21178d04 	addi	r4,r4,24116
   149e8:	e17fff17 	ldw	r5,-4(fp)
   149ec:	01800044 	movi	r6,1
   149f0:	01c07fc4 	movi	r7,511
   149f4:	00148d00 	call	148d0 <alt_open_fd>
}  
   149f8:	e037883a 	mov	sp,fp
   149fc:	dfc00117 	ldw	ra,4(sp)
   14a00:	df000017 	ldw	fp,0(sp)
   14a04:	dec00204 	addi	sp,sp,8
   14a08:	f800283a 	ret

00014a0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14a0c:	defffc04 	addi	sp,sp,-16
   14a10:	df000315 	stw	fp,12(sp)
   14a14:	df000304 	addi	fp,sp,12
   14a18:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14a1c:	e0bffe17 	ldw	r2,-8(fp)
   14a20:	10800217 	ldw	r2,8(r2)
   14a24:	10d00034 	orhi	r3,r2,16384
   14a28:	e0bffe17 	ldw	r2,-8(fp)
   14a2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14a30:	e03ffd15 	stw	zero,-12(fp)
   14a34:	00002006 	br	14ab8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14a38:	e0bffd17 	ldw	r2,-12(fp)
   14a3c:	00c00074 	movhi	r3,1
   14a40:	18d78704 	addi	r3,r3,24092
   14a44:	10800324 	muli	r2,r2,12
   14a48:	10c5883a 	add	r2,r2,r3
   14a4c:	10c00017 	ldw	r3,0(r2)
   14a50:	e0bffe17 	ldw	r2,-8(fp)
   14a54:	10800017 	ldw	r2,0(r2)
   14a58:	1880141e 	bne	r3,r2,14aac <alt_file_locked+0xa0>
   14a5c:	e0bffd17 	ldw	r2,-12(fp)
   14a60:	00c00074 	movhi	r3,1
   14a64:	18d78704 	addi	r3,r3,24092
   14a68:	10800324 	muli	r2,r2,12
   14a6c:	10c5883a 	add	r2,r2,r3
   14a70:	10800204 	addi	r2,r2,8
   14a74:	10800017 	ldw	r2,0(r2)
   14a78:	1004403a 	cmpge	r2,r2,zero
   14a7c:	10000b1e 	bne	r2,zero,14aac <alt_file_locked+0xa0>
   14a80:	e0bffd17 	ldw	r2,-12(fp)
   14a84:	10800324 	muli	r2,r2,12
   14a88:	1007883a 	mov	r3,r2
   14a8c:	00800074 	movhi	r2,1
   14a90:	10978704 	addi	r2,r2,24092
   14a94:	1887883a 	add	r3,r3,r2
   14a98:	e0bffe17 	ldw	r2,-8(fp)
   14a9c:	18800326 	beq	r3,r2,14aac <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14aa0:	00bffcc4 	movi	r2,-13
   14aa4:	e0bfff15 	stw	r2,-4(fp)
   14aa8:	00000a06 	br	14ad4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14aac:	e0bffd17 	ldw	r2,-12(fp)
   14ab0:	10800044 	addi	r2,r2,1
   14ab4:	e0bffd15 	stw	r2,-12(fp)
   14ab8:	00800074 	movhi	r2,1
   14abc:	109c0704 	addi	r2,r2,28700
   14ac0:	10800017 	ldw	r2,0(r2)
   14ac4:	1007883a 	mov	r3,r2
   14ac8:	e0bffd17 	ldw	r2,-12(fp)
   14acc:	18bfda2e 	bgeu	r3,r2,14a38 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14ad0:	e03fff15 	stw	zero,-4(fp)
   14ad4:	e0bfff17 	ldw	r2,-4(fp)
}
   14ad8:	e037883a 	mov	sp,fp
   14adc:	df000017 	ldw	fp,0(sp)
   14ae0:	dec00104 	addi	sp,sp,4
   14ae4:	f800283a 	ret

00014ae8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14ae8:	defff404 	addi	sp,sp,-48
   14aec:	dfc00b15 	stw	ra,44(sp)
   14af0:	df000a15 	stw	fp,40(sp)
   14af4:	df000a04 	addi	fp,sp,40
   14af8:	e13ffb15 	stw	r4,-20(fp)
   14afc:	e17ffc15 	stw	r5,-16(fp)
   14b00:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14b04:	00bfffc4 	movi	r2,-1
   14b08:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   14b0c:	00bffb44 	movi	r2,-19
   14b10:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   14b14:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14b18:	e13ffb17 	ldw	r4,-20(fp)
   14b1c:	01400074 	movhi	r5,1
   14b20:	295c0504 	addi	r5,r5,28692
   14b24:	0014e940 	call	14e94 <alt_find_dev>
   14b28:	e0bffa15 	stw	r2,-24(fp)
   14b2c:	e0bffa17 	ldw	r2,-24(fp)
   14b30:	1004c03a 	cmpne	r2,r2,zero
   14b34:	1000051e 	bne	r2,zero,14b4c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14b38:	e13ffb17 	ldw	r4,-20(fp)
   14b3c:	0014f280 	call	14f28 <alt_find_file>
   14b40:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   14b44:	00800044 	movi	r2,1
   14b48:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14b4c:	e0bffa17 	ldw	r2,-24(fp)
   14b50:	1005003a 	cmpeq	r2,r2,zero
   14b54:	1000301e 	bne	r2,zero,14c18 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14b58:	e13ffa17 	ldw	r4,-24(fp)
   14b5c:	00150480 	call	15048 <alt_get_fd>
   14b60:	e0bff815 	stw	r2,-32(fp)
   14b64:	e0bff817 	ldw	r2,-32(fp)
   14b68:	1004403a 	cmpge	r2,r2,zero
   14b6c:	1000031e 	bne	r2,zero,14b7c <open+0x94>
    {
      status = index;
   14b70:	e0bff817 	ldw	r2,-32(fp)
   14b74:	e0bff715 	stw	r2,-36(fp)
   14b78:	00002906 	br	14c20 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   14b7c:	e0bff817 	ldw	r2,-32(fp)
   14b80:	10800324 	muli	r2,r2,12
   14b84:	1007883a 	mov	r3,r2
   14b88:	00800074 	movhi	r2,1
   14b8c:	10978704 	addi	r2,r2,24092
   14b90:	1885883a 	add	r2,r3,r2
   14b94:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14b98:	e0fffc17 	ldw	r3,-16(fp)
   14b9c:	00900034 	movhi	r2,16384
   14ba0:	10bfffc4 	addi	r2,r2,-1
   14ba4:	1886703a 	and	r3,r3,r2
   14ba8:	e0bff917 	ldw	r2,-28(fp)
   14bac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14bb0:	e0bff617 	ldw	r2,-40(fp)
   14bb4:	1004c03a 	cmpne	r2,r2,zero
   14bb8:	1000061e 	bne	r2,zero,14bd4 <open+0xec>
   14bbc:	e13ff917 	ldw	r4,-28(fp)
   14bc0:	0014a0c0 	call	14a0c <alt_file_locked>
   14bc4:	e0bff715 	stw	r2,-36(fp)
   14bc8:	e0bff717 	ldw	r2,-36(fp)
   14bcc:	1004803a 	cmplt	r2,r2,zero
   14bd0:	1000131e 	bne	r2,zero,14c20 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14bd4:	e0bffa17 	ldw	r2,-24(fp)
   14bd8:	10800317 	ldw	r2,12(r2)
   14bdc:	1005003a 	cmpeq	r2,r2,zero
   14be0:	1000091e 	bne	r2,zero,14c08 <open+0x120>
   14be4:	e0bffa17 	ldw	r2,-24(fp)
   14be8:	10800317 	ldw	r2,12(r2)
   14bec:	e13ff917 	ldw	r4,-28(fp)
   14bf0:	e17ffb17 	ldw	r5,-20(fp)
   14bf4:	e1bffc17 	ldw	r6,-16(fp)
   14bf8:	e1fffd17 	ldw	r7,-12(fp)
   14bfc:	103ee83a 	callr	r2
   14c00:	e0bfff15 	stw	r2,-4(fp)
   14c04:	00000106 	br	14c0c <open+0x124>
   14c08:	e03fff15 	stw	zero,-4(fp)
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	e0bff715 	stw	r2,-36(fp)
   14c14:	00000206 	br	14c20 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14c18:	00bffb44 	movi	r2,-19
   14c1c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14c20:	e0bff717 	ldw	r2,-36(fp)
   14c24:	1004403a 	cmpge	r2,r2,zero
   14c28:	1000091e 	bne	r2,zero,14c50 <open+0x168>
  {
    alt_release_fd (index);  
   14c2c:	e13ff817 	ldw	r4,-32(fp)
   14c30:	00133780 	call	13378 <alt_release_fd>
    ALT_ERRNO = -status;
   14c34:	0014c700 	call	14c70 <alt_get_errno>
   14c38:	e0fff717 	ldw	r3,-36(fp)
   14c3c:	00c7c83a 	sub	r3,zero,r3
   14c40:	10c00015 	stw	r3,0(r2)
    return -1;
   14c44:	00bfffc4 	movi	r2,-1
   14c48:	e0bffe15 	stw	r2,-8(fp)
   14c4c:	00000206 	br	14c58 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   14c50:	e0bff817 	ldw	r2,-32(fp)
   14c54:	e0bffe15 	stw	r2,-8(fp)
   14c58:	e0bffe17 	ldw	r2,-8(fp)
}
   14c5c:	e037883a 	mov	sp,fp
   14c60:	dfc00117 	ldw	ra,4(sp)
   14c64:	df000017 	ldw	fp,0(sp)
   14c68:	dec00204 	addi	sp,sp,8
   14c6c:	f800283a 	ret

00014c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14c70:	defffd04 	addi	sp,sp,-12
   14c74:	dfc00215 	stw	ra,8(sp)
   14c78:	df000115 	stw	fp,4(sp)
   14c7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14c80:	00800074 	movhi	r2,1
   14c84:	109c0804 	addi	r2,r2,28704
   14c88:	10800017 	ldw	r2,0(r2)
   14c8c:	1005003a 	cmpeq	r2,r2,zero
   14c90:	1000061e 	bne	r2,zero,14cac <alt_get_errno+0x3c>
   14c94:	00800074 	movhi	r2,1
   14c98:	109c0804 	addi	r2,r2,28704
   14c9c:	10800017 	ldw	r2,0(r2)
   14ca0:	103ee83a 	callr	r2
   14ca4:	e0bfff15 	stw	r2,-4(fp)
   14ca8:	00000306 	br	14cb8 <alt_get_errno+0x48>
   14cac:	008000b4 	movhi	r2,2
   14cb0:	10a2a204 	addi	r2,r2,-30072
   14cb4:	e0bfff15 	stw	r2,-4(fp)
   14cb8:	e0bfff17 	ldw	r2,-4(fp)
}
   14cbc:	e037883a 	mov	sp,fp
   14cc0:	dfc00117 	ldw	ra,4(sp)
   14cc4:	df000017 	ldw	fp,0(sp)
   14cc8:	dec00204 	addi	sp,sp,8
   14ccc:	f800283a 	ret

00014cd0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14cd0:	defffa04 	addi	sp,sp,-24
   14cd4:	df000515 	stw	fp,20(sp)
   14cd8:	df000504 	addi	fp,sp,20
   14cdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ce0:	0005303a 	rdctl	r2,status
   14ce4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ce8:	e0fffd17 	ldw	r3,-12(fp)
   14cec:	00bfff84 	movi	r2,-2
   14cf0:	1884703a 	and	r2,r3,r2
   14cf4:	1001703a 	wrctl	status,r2
  
  return context;
   14cf8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14cfc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   14d00:	e0bfff17 	ldw	r2,-4(fp)
   14d04:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14d08:	e0bffc17 	ldw	r2,-16(fp)
   14d0c:	10c00017 	ldw	r3,0(r2)
   14d10:	e0bffc17 	ldw	r2,-16(fp)
   14d14:	10800117 	ldw	r2,4(r2)
   14d18:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   14d1c:	e0bffc17 	ldw	r2,-16(fp)
   14d20:	10c00117 	ldw	r3,4(r2)
   14d24:	e0bffc17 	ldw	r2,-16(fp)
   14d28:	10800017 	ldw	r2,0(r2)
   14d2c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14d30:	e0fffc17 	ldw	r3,-16(fp)
   14d34:	e0bffc17 	ldw	r2,-16(fp)
   14d38:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   14d3c:	e0fffc17 	ldw	r3,-16(fp)
   14d40:	e0bffc17 	ldw	r2,-16(fp)
   14d44:	18800015 	stw	r2,0(r3)
   14d48:	e0bffe17 	ldw	r2,-8(fp)
   14d4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d50:	e0bffb17 	ldw	r2,-20(fp)
   14d54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14d58:	e037883a 	mov	sp,fp
   14d5c:	df000017 	ldw	fp,0(sp)
   14d60:	dec00104 	addi	sp,sp,4
   14d64:	f800283a 	ret

00014d68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14d68:	defffb04 	addi	sp,sp,-20
   14d6c:	dfc00415 	stw	ra,16(sp)
   14d70:	df000315 	stw	fp,12(sp)
   14d74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14d78:	d0a00c17 	ldw	r2,-32720(gp)
   14d7c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14d80:	d0a6a917 	ldw	r2,-25948(gp)
   14d84:	10800044 	addi	r2,r2,1
   14d88:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14d8c:	00003106 	br	14e54 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   14d90:	e0bffe17 	ldw	r2,-8(fp)
   14d94:	10800017 	ldw	r2,0(r2)
   14d98:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14d9c:	e0bffe17 	ldw	r2,-8(fp)
   14da0:	10800403 	ldbu	r2,16(r2)
   14da4:	10803fcc 	andi	r2,r2,255
   14da8:	1005003a 	cmpeq	r2,r2,zero
   14dac:	1000051e 	bne	r2,zero,14dc4 <alt_tick+0x5c>
   14db0:	d0a6a917 	ldw	r2,-25948(gp)
   14db4:	1004c03a 	cmpne	r2,r2,zero
   14db8:	1000021e 	bne	r2,zero,14dc4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   14dbc:	e0bffe17 	ldw	r2,-8(fp)
   14dc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14dc4:	e0bffe17 	ldw	r2,-8(fp)
   14dc8:	10c00217 	ldw	r3,8(r2)
   14dcc:	d0a6a917 	ldw	r2,-25948(gp)
   14dd0:	10c01e36 	bltu	r2,r3,14e4c <alt_tick+0xe4>
   14dd4:	e0bffe17 	ldw	r2,-8(fp)
   14dd8:	10800403 	ldbu	r2,16(r2)
   14ddc:	10803fcc 	andi	r2,r2,255
   14de0:	1004c03a 	cmpne	r2,r2,zero
   14de4:	1000191e 	bne	r2,zero,14e4c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   14de8:	e0bffe17 	ldw	r2,-8(fp)
   14dec:	10c00317 	ldw	r3,12(r2)
   14df0:	e0bffe17 	ldw	r2,-8(fp)
   14df4:	11000517 	ldw	r4,20(r2)
   14df8:	183ee83a 	callr	r3
   14dfc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14e00:	e0bffd17 	ldw	r2,-12(fp)
   14e04:	1004c03a 	cmpne	r2,r2,zero
   14e08:	1000031e 	bne	r2,zero,14e18 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   14e0c:	e13ffe17 	ldw	r4,-8(fp)
   14e10:	0014cd00 	call	14cd0 <alt_alarm_stop>
   14e14:	00000d06 	br	14e4c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   14e18:	e0bffe17 	ldw	r2,-8(fp)
   14e1c:	10c00217 	ldw	r3,8(r2)
   14e20:	e0bffd17 	ldw	r2,-12(fp)
   14e24:	1887883a 	add	r3,r3,r2
   14e28:	e0bffe17 	ldw	r2,-8(fp)
   14e2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14e30:	e0bffe17 	ldw	r2,-8(fp)
   14e34:	10c00217 	ldw	r3,8(r2)
   14e38:	d0a6a917 	ldw	r2,-25948(gp)
   14e3c:	1880032e 	bgeu	r3,r2,14e4c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   14e40:	e0fffe17 	ldw	r3,-8(fp)
   14e44:	00800044 	movi	r2,1
   14e48:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   14e4c:	e0bfff17 	ldw	r2,-4(fp)
   14e50:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14e54:	d0e00c04 	addi	r3,gp,-32720
   14e58:	e0bffe17 	ldw	r2,-8(fp)
   14e5c:	10ffcc1e 	bne	r2,r3,14d90 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   14e60:	e037883a 	mov	sp,fp
   14e64:	dfc00117 	ldw	ra,4(sp)
   14e68:	df000017 	ldw	fp,0(sp)
   14e6c:	dec00204 	addi	sp,sp,8
   14e70:	f800283a 	ret

00014e74 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   14e74:	deffff04 	addi	sp,sp,-4
   14e78:	df000015 	stw	fp,0(sp)
   14e7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14e80:	000170fa 	wrctl	ienable,zero
}
   14e84:	e037883a 	mov	sp,fp
   14e88:	df000017 	ldw	fp,0(sp)
   14e8c:	dec00104 	addi	sp,sp,4
   14e90:	f800283a 	ret

00014e94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14e94:	defff904 	addi	sp,sp,-28
   14e98:	dfc00615 	stw	ra,24(sp)
   14e9c:	df000515 	stw	fp,20(sp)
   14ea0:	df000504 	addi	fp,sp,20
   14ea4:	e13ffd15 	stw	r4,-12(fp)
   14ea8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14eac:	e0bffe17 	ldw	r2,-8(fp)
   14eb0:	10800017 	ldw	r2,0(r2)
   14eb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14eb8:	e13ffd17 	ldw	r4,-12(fp)
   14ebc:	00102d80 	call	102d8 <strlen>
   14ec0:	10800044 	addi	r2,r2,1
   14ec4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14ec8:	00000d06 	br	14f00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14ecc:	e0bffc17 	ldw	r2,-16(fp)
   14ed0:	11000217 	ldw	r4,8(r2)
   14ed4:	e1bffb17 	ldw	r6,-20(fp)
   14ed8:	e17ffd17 	ldw	r5,-12(fp)
   14edc:	00151dc0 	call	151dc <memcmp>
   14ee0:	1004c03a 	cmpne	r2,r2,zero
   14ee4:	1000031e 	bne	r2,zero,14ef4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14ee8:	e0bffc17 	ldw	r2,-16(fp)
   14eec:	e0bfff15 	stw	r2,-4(fp)
   14ef0:	00000706 	br	14f10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14ef4:	e0bffc17 	ldw	r2,-16(fp)
   14ef8:	10800017 	ldw	r2,0(r2)
   14efc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14f00:	e0fffe17 	ldw	r3,-8(fp)
   14f04:	e0bffc17 	ldw	r2,-16(fp)
   14f08:	10fff01e 	bne	r2,r3,14ecc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14f0c:	e03fff15 	stw	zero,-4(fp)
   14f10:	e0bfff17 	ldw	r2,-4(fp)
}
   14f14:	e037883a 	mov	sp,fp
   14f18:	dfc00117 	ldw	ra,4(sp)
   14f1c:	df000017 	ldw	fp,0(sp)
   14f20:	dec00204 	addi	sp,sp,8
   14f24:	f800283a 	ret

00014f28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14f28:	defffa04 	addi	sp,sp,-24
   14f2c:	dfc00515 	stw	ra,20(sp)
   14f30:	df000415 	stw	fp,16(sp)
   14f34:	df000404 	addi	fp,sp,16
   14f38:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14f3c:	00800074 	movhi	r2,1
   14f40:	109c0304 	addi	r2,r2,28684
   14f44:	10800017 	ldw	r2,0(r2)
   14f48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14f4c:	00003306 	br	1501c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   14f50:	e0bffd17 	ldw	r2,-12(fp)
   14f54:	11000217 	ldw	r4,8(r2)
   14f58:	00102d80 	call	102d8 <strlen>
   14f5c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   14f60:	e0bffd17 	ldw	r2,-12(fp)
   14f64:	10c00217 	ldw	r3,8(r2)
   14f68:	e0bffc17 	ldw	r2,-16(fp)
   14f6c:	1885883a 	add	r2,r3,r2
   14f70:	10bfffc4 	addi	r2,r2,-1
   14f74:	10800003 	ldbu	r2,0(r2)
   14f78:	10803fcc 	andi	r2,r2,255
   14f7c:	1080201c 	xori	r2,r2,128
   14f80:	10bfe004 	addi	r2,r2,-128
   14f84:	10800bd8 	cmpnei	r2,r2,47
   14f88:	1000031e 	bne	r2,zero,14f98 <alt_find_file+0x70>
    {
      len -= 1;
   14f8c:	e0bffc17 	ldw	r2,-16(fp)
   14f90:	10bfffc4 	addi	r2,r2,-1
   14f94:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14f98:	e0bffc17 	ldw	r2,-16(fp)
   14f9c:	1007883a 	mov	r3,r2
   14fa0:	e0bffe17 	ldw	r2,-8(fp)
   14fa4:	1885883a 	add	r2,r3,r2
   14fa8:	10800003 	ldbu	r2,0(r2)
   14fac:	10803fcc 	andi	r2,r2,255
   14fb0:	1080201c 	xori	r2,r2,128
   14fb4:	10bfe004 	addi	r2,r2,-128
   14fb8:	10800be0 	cmpeqi	r2,r2,47
   14fbc:	10000a1e 	bne	r2,zero,14fe8 <alt_find_file+0xc0>
   14fc0:	e0bffc17 	ldw	r2,-16(fp)
   14fc4:	1007883a 	mov	r3,r2
   14fc8:	e0bffe17 	ldw	r2,-8(fp)
   14fcc:	1885883a 	add	r2,r3,r2
   14fd0:	10800003 	ldbu	r2,0(r2)
   14fd4:	10803fcc 	andi	r2,r2,255
   14fd8:	1080201c 	xori	r2,r2,128
   14fdc:	10bfe004 	addi	r2,r2,-128
   14fe0:	1004c03a 	cmpne	r2,r2,zero
   14fe4:	10000a1e 	bne	r2,zero,15010 <alt_find_file+0xe8>
   14fe8:	e0bffd17 	ldw	r2,-12(fp)
   14fec:	11000217 	ldw	r4,8(r2)
   14ff0:	e1bffc17 	ldw	r6,-16(fp)
   14ff4:	e17ffe17 	ldw	r5,-8(fp)
   14ff8:	00151dc0 	call	151dc <memcmp>
   14ffc:	1004c03a 	cmpne	r2,r2,zero
   15000:	1000031e 	bne	r2,zero,15010 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15004:	e0bffd17 	ldw	r2,-12(fp)
   15008:	e0bfff15 	stw	r2,-4(fp)
   1500c:	00000806 	br	15030 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   15010:	e0bffd17 	ldw	r2,-12(fp)
   15014:	10800017 	ldw	r2,0(r2)
   15018:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1501c:	00c00074 	movhi	r3,1
   15020:	18dc0304 	addi	r3,r3,28684
   15024:	e0bffd17 	ldw	r2,-12(fp)
   15028:	10ffc91e 	bne	r2,r3,14f50 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1502c:	e03fff15 	stw	zero,-4(fp)
   15030:	e0bfff17 	ldw	r2,-4(fp)
}
   15034:	e037883a 	mov	sp,fp
   15038:	dfc00117 	ldw	ra,4(sp)
   1503c:	df000017 	ldw	fp,0(sp)
   15040:	dec00204 	addi	sp,sp,8
   15044:	f800283a 	ret

00015048 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15048:	defffc04 	addi	sp,sp,-16
   1504c:	df000315 	stw	fp,12(sp)
   15050:	df000304 	addi	fp,sp,12
   15054:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15058:	00bffa04 	movi	r2,-24
   1505c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15060:	e03ffe15 	stw	zero,-8(fp)
   15064:	00001e06 	br	150e0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   15068:	e0bffe17 	ldw	r2,-8(fp)
   1506c:	00c00074 	movhi	r3,1
   15070:	18d78704 	addi	r3,r3,24092
   15074:	10800324 	muli	r2,r2,12
   15078:	10c5883a 	add	r2,r2,r3
   1507c:	10800017 	ldw	r2,0(r2)
   15080:	1004c03a 	cmpne	r2,r2,zero
   15084:	1000131e 	bne	r2,zero,150d4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   15088:	e0bffe17 	ldw	r2,-8(fp)
   1508c:	00c00074 	movhi	r3,1
   15090:	18d78704 	addi	r3,r3,24092
   15094:	10800324 	muli	r2,r2,12
   15098:	10c7883a 	add	r3,r2,r3
   1509c:	e0bfff17 	ldw	r2,-4(fp)
   150a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   150a4:	00800074 	movhi	r2,1
   150a8:	109c0704 	addi	r2,r2,28700
   150ac:	10c00017 	ldw	r3,0(r2)
   150b0:	e0bffe17 	ldw	r2,-8(fp)
   150b4:	1880040e 	bge	r3,r2,150c8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   150b8:	00c00074 	movhi	r3,1
   150bc:	18dc0704 	addi	r3,r3,28700
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   150c8:	e0bffe17 	ldw	r2,-8(fp)
   150cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   150d0:	00000606 	br	150ec <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   150d4:	e0bffe17 	ldw	r2,-8(fp)
   150d8:	10800044 	addi	r2,r2,1
   150dc:	e0bffe15 	stw	r2,-8(fp)
   150e0:	e0bffe17 	ldw	r2,-8(fp)
   150e4:	10800810 	cmplti	r2,r2,32
   150e8:	103fdf1e 	bne	r2,zero,15068 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   150ec:	e0bffd17 	ldw	r2,-12(fp)
}
   150f0:	e037883a 	mov	sp,fp
   150f4:	df000017 	ldw	fp,0(sp)
   150f8:	dec00104 	addi	sp,sp,4
   150fc:	f800283a 	ret

00015100 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15100:	defffb04 	addi	sp,sp,-20
   15104:	df000415 	stw	fp,16(sp)
   15108:	df000404 	addi	fp,sp,16
   1510c:	e13ffe15 	stw	r4,-8(fp)
   15110:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   15114:	e0bfff17 	ldw	r2,-4(fp)
   15118:	10840070 	cmpltui	r2,r2,4097
   1511c:	1000021e 	bne	r2,zero,15128 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15120:	00840004 	movi	r2,4096
   15124:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15128:	e0fffe17 	ldw	r3,-8(fp)
   1512c:	e0bfff17 	ldw	r2,-4(fp)
   15130:	1885883a 	add	r2,r3,r2
   15134:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15138:	e0bffe17 	ldw	r2,-8(fp)
   1513c:	e0bffd15 	stw	r2,-12(fp)
   15140:	00000506 	br	15158 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   15144:	e0bffd17 	ldw	r2,-12(fp)
   15148:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1514c:	e0bffd17 	ldw	r2,-12(fp)
   15150:	10800804 	addi	r2,r2,32
   15154:	e0bffd15 	stw	r2,-12(fp)
   15158:	e0fffd17 	ldw	r3,-12(fp)
   1515c:	e0bffc17 	ldw	r2,-16(fp)
   15160:	18bff836 	bltu	r3,r2,15144 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   15164:	e0bffe17 	ldw	r2,-8(fp)
   15168:	108007cc 	andi	r2,r2,31
   1516c:	1005003a 	cmpeq	r2,r2,zero
   15170:	1000021e 	bne	r2,zero,1517c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1517c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   15180:	e037883a 	mov	sp,fp
   15184:	df000017 	ldw	fp,0(sp)
   15188:	dec00104 	addi	sp,sp,4
   1518c:	f800283a 	ret

00015190 <atexit>:
   15190:	200b883a 	mov	r5,r4
   15194:	000d883a 	mov	r6,zero
   15198:	0009883a 	mov	r4,zero
   1519c:	000f883a 	mov	r7,zero
   151a0:	00152501 	jmpi	15250 <__register_exitproc>

000151a4 <exit>:
   151a4:	defffe04 	addi	sp,sp,-8
   151a8:	000b883a 	mov	r5,zero
   151ac:	dc000015 	stw	r16,0(sp)
   151b0:	dfc00115 	stw	ra,4(sp)
   151b4:	2021883a 	mov	r16,r4
   151b8:	00153880 	call	15388 <__call_exitprocs>
   151bc:	00800074 	movhi	r2,1
   151c0:	109c0004 	addi	r2,r2,28672
   151c4:	11000017 	ldw	r4,0(r2)
   151c8:	20800f17 	ldw	r2,60(r4)
   151cc:	10000126 	beq	r2,zero,151d4 <exit+0x30>
   151d0:	103ee83a 	callr	r2
   151d4:	8009883a 	mov	r4,r16
   151d8:	00155780 	call	15578 <_exit>

000151dc <memcmp>:
   151dc:	00c000c4 	movi	r3,3
   151e0:	1980032e 	bgeu	r3,r6,151f0 <memcmp+0x14>
   151e4:	2144b03a 	or	r2,r4,r5
   151e8:	10c4703a 	and	r2,r2,r3
   151ec:	10000f26 	beq	r2,zero,1522c <memcmp+0x50>
   151f0:	31ffffc4 	addi	r7,r6,-1
   151f4:	3000061e 	bne	r6,zero,15210 <memcmp+0x34>
   151f8:	00000a06 	br	15224 <memcmp+0x48>
   151fc:	39ffffc4 	addi	r7,r7,-1
   15200:	00bfffc4 	movi	r2,-1
   15204:	21000044 	addi	r4,r4,1
   15208:	29400044 	addi	r5,r5,1
   1520c:	38800526 	beq	r7,r2,15224 <memcmp+0x48>
   15210:	20c00003 	ldbu	r3,0(r4)
   15214:	28800003 	ldbu	r2,0(r5)
   15218:	18bff826 	beq	r3,r2,151fc <memcmp+0x20>
   1521c:	1885c83a 	sub	r2,r3,r2
   15220:	f800283a 	ret
   15224:	0005883a 	mov	r2,zero
   15228:	f800283a 	ret
   1522c:	180f883a 	mov	r7,r3
   15230:	20c00017 	ldw	r3,0(r4)
   15234:	28800017 	ldw	r2,0(r5)
   15238:	18bfed1e 	bne	r3,r2,151f0 <memcmp+0x14>
   1523c:	31bfff04 	addi	r6,r6,-4
   15240:	21000104 	addi	r4,r4,4
   15244:	29400104 	addi	r5,r5,4
   15248:	39bff936 	bltu	r7,r6,15230 <memcmp+0x54>
   1524c:	003fe806 	br	151f0 <memcmp+0x14>

00015250 <__register_exitproc>:
   15250:	defffa04 	addi	sp,sp,-24
   15254:	00800074 	movhi	r2,1
   15258:	109c0004 	addi	r2,r2,28672
   1525c:	dc000015 	stw	r16,0(sp)
   15260:	14000017 	ldw	r16,0(r2)
   15264:	dd000415 	stw	r20,16(sp)
   15268:	2829883a 	mov	r20,r5
   1526c:	81405217 	ldw	r5,328(r16)
   15270:	dcc00315 	stw	r19,12(sp)
   15274:	dc800215 	stw	r18,8(sp)
   15278:	dc400115 	stw	r17,4(sp)
   1527c:	dfc00515 	stw	ra,20(sp)
   15280:	2023883a 	mov	r17,r4
   15284:	3027883a 	mov	r19,r6
   15288:	3825883a 	mov	r18,r7
   1528c:	28002526 	beq	r5,zero,15324 <__register_exitproc+0xd4>
   15290:	29000117 	ldw	r4,4(r5)
   15294:	008007c4 	movi	r2,31
   15298:	11002716 	blt	r2,r4,15338 <__register_exitproc+0xe8>
   1529c:	8800101e 	bne	r17,zero,152e0 <__register_exitproc+0x90>
   152a0:	2105883a 	add	r2,r4,r4
   152a4:	1085883a 	add	r2,r2,r2
   152a8:	20c00044 	addi	r3,r4,1
   152ac:	1145883a 	add	r2,r2,r5
   152b0:	0009883a 	mov	r4,zero
   152b4:	15000215 	stw	r20,8(r2)
   152b8:	28c00115 	stw	r3,4(r5)
   152bc:	2005883a 	mov	r2,r4
   152c0:	dfc00517 	ldw	ra,20(sp)
   152c4:	dd000417 	ldw	r20,16(sp)
   152c8:	dcc00317 	ldw	r19,12(sp)
   152cc:	dc800217 	ldw	r18,8(sp)
   152d0:	dc400117 	ldw	r17,4(sp)
   152d4:	dc000017 	ldw	r16,0(sp)
   152d8:	dec00604 	addi	sp,sp,24
   152dc:	f800283a 	ret
   152e0:	29802204 	addi	r6,r5,136
   152e4:	00800044 	movi	r2,1
   152e8:	110e983a 	sll	r7,r2,r4
   152ec:	30c04017 	ldw	r3,256(r6)
   152f0:	2105883a 	add	r2,r4,r4
   152f4:	1085883a 	add	r2,r2,r2
   152f8:	1185883a 	add	r2,r2,r6
   152fc:	19c6b03a 	or	r3,r3,r7
   15300:	14802015 	stw	r18,128(r2)
   15304:	14c00015 	stw	r19,0(r2)
   15308:	00800084 	movi	r2,2
   1530c:	30c04015 	stw	r3,256(r6)
   15310:	88bfe31e 	bne	r17,r2,152a0 <__register_exitproc+0x50>
   15314:	30804117 	ldw	r2,260(r6)
   15318:	11c4b03a 	or	r2,r2,r7
   1531c:	30804115 	stw	r2,260(r6)
   15320:	003fdf06 	br	152a0 <__register_exitproc+0x50>
   15324:	008000b4 	movhi	r2,2
   15328:	10a2f304 	addi	r2,r2,-29748
   1532c:	100b883a 	mov	r5,r2
   15330:	80805215 	stw	r2,328(r16)
   15334:	003fd606 	br	15290 <__register_exitproc+0x40>
   15338:	00800034 	movhi	r2,0
   1533c:	10800004 	addi	r2,r2,0
   15340:	1000021e 	bne	r2,zero,1534c <__register_exitproc+0xfc>
   15344:	013fffc4 	movi	r4,-1
   15348:	003fdc06 	br	152bc <__register_exitproc+0x6c>
   1534c:	01006404 	movi	r4,400
   15350:	103ee83a 	callr	r2
   15354:	1007883a 	mov	r3,r2
   15358:	103ffa26 	beq	r2,zero,15344 <__register_exitproc+0xf4>
   1535c:	80805217 	ldw	r2,328(r16)
   15360:	180b883a 	mov	r5,r3
   15364:	18000115 	stw	zero,4(r3)
   15368:	18800015 	stw	r2,0(r3)
   1536c:	80c05215 	stw	r3,328(r16)
   15370:	18006215 	stw	zero,392(r3)
   15374:	18006315 	stw	zero,396(r3)
   15378:	0009883a 	mov	r4,zero
   1537c:	883fc826 	beq	r17,zero,152a0 <__register_exitproc+0x50>
   15380:	003fd706 	br	152e0 <__register_exitproc+0x90>

00015384 <register_fini>:
   15384:	f800283a 	ret

00015388 <__call_exitprocs>:
   15388:	00800074 	movhi	r2,1
   1538c:	109c0004 	addi	r2,r2,28672
   15390:	10800017 	ldw	r2,0(r2)
   15394:	defff304 	addi	sp,sp,-52
   15398:	df000b15 	stw	fp,44(sp)
   1539c:	d8800115 	stw	r2,4(sp)
   153a0:	00800034 	movhi	r2,0
   153a4:	10800004 	addi	r2,r2,0
   153a8:	1005003a 	cmpeq	r2,r2,zero
   153ac:	d8800215 	stw	r2,8(sp)
   153b0:	d8800117 	ldw	r2,4(sp)
   153b4:	dd400815 	stw	r21,32(sp)
   153b8:	dd000715 	stw	r20,28(sp)
   153bc:	10805204 	addi	r2,r2,328
   153c0:	dfc00c15 	stw	ra,48(sp)
   153c4:	ddc00a15 	stw	r23,40(sp)
   153c8:	dd800915 	stw	r22,36(sp)
   153cc:	dcc00615 	stw	r19,24(sp)
   153d0:	dc800515 	stw	r18,20(sp)
   153d4:	dc400415 	stw	r17,16(sp)
   153d8:	dc000315 	stw	r16,12(sp)
   153dc:	282b883a 	mov	r21,r5
   153e0:	2039883a 	mov	fp,r4
   153e4:	d8800015 	stw	r2,0(sp)
   153e8:	2829003a 	cmpeq	r20,r5,zero
   153ec:	d8800117 	ldw	r2,4(sp)
   153f0:	14405217 	ldw	r17,328(r2)
   153f4:	88001026 	beq	r17,zero,15438 <__call_exitprocs+0xb0>
   153f8:	ddc00017 	ldw	r23,0(sp)
   153fc:	88800117 	ldw	r2,4(r17)
   15400:	8c802204 	addi	r18,r17,136
   15404:	143fffc4 	addi	r16,r2,-1
   15408:	80000916 	blt	r16,zero,15430 <__call_exitprocs+0xa8>
   1540c:	05bfffc4 	movi	r22,-1
   15410:	a000151e 	bne	r20,zero,15468 <__call_exitprocs+0xe0>
   15414:	8409883a 	add	r4,r16,r16
   15418:	2105883a 	add	r2,r4,r4
   1541c:	1485883a 	add	r2,r2,r18
   15420:	10c02017 	ldw	r3,128(r2)
   15424:	a8c01126 	beq	r21,r3,1546c <__call_exitprocs+0xe4>
   15428:	843fffc4 	addi	r16,r16,-1
   1542c:	85bff81e 	bne	r16,r22,15410 <__call_exitprocs+0x88>
   15430:	d8800217 	ldw	r2,8(sp)
   15434:	10003126 	beq	r2,zero,154fc <__call_exitprocs+0x174>
   15438:	dfc00c17 	ldw	ra,48(sp)
   1543c:	df000b17 	ldw	fp,44(sp)
   15440:	ddc00a17 	ldw	r23,40(sp)
   15444:	dd800917 	ldw	r22,36(sp)
   15448:	dd400817 	ldw	r21,32(sp)
   1544c:	dd000717 	ldw	r20,28(sp)
   15450:	dcc00617 	ldw	r19,24(sp)
   15454:	dc800517 	ldw	r18,20(sp)
   15458:	dc400417 	ldw	r17,16(sp)
   1545c:	dc000317 	ldw	r16,12(sp)
   15460:	dec00d04 	addi	sp,sp,52
   15464:	f800283a 	ret
   15468:	8409883a 	add	r4,r16,r16
   1546c:	88c00117 	ldw	r3,4(r17)
   15470:	2105883a 	add	r2,r4,r4
   15474:	1445883a 	add	r2,r2,r17
   15478:	18ffffc4 	addi	r3,r3,-1
   1547c:	11800217 	ldw	r6,8(r2)
   15480:	1c001526 	beq	r3,r16,154d8 <__call_exitprocs+0x150>
   15484:	10000215 	stw	zero,8(r2)
   15488:	303fe726 	beq	r6,zero,15428 <__call_exitprocs+0xa0>
   1548c:	00c00044 	movi	r3,1
   15490:	1c06983a 	sll	r3,r3,r16
   15494:	90804017 	ldw	r2,256(r18)
   15498:	8cc00117 	ldw	r19,4(r17)
   1549c:	1884703a 	and	r2,r3,r2
   154a0:	10001426 	beq	r2,zero,154f4 <__call_exitprocs+0x16c>
   154a4:	90804117 	ldw	r2,260(r18)
   154a8:	1884703a 	and	r2,r3,r2
   154ac:	10000c1e 	bne	r2,zero,154e0 <__call_exitprocs+0x158>
   154b0:	2105883a 	add	r2,r4,r4
   154b4:	1485883a 	add	r2,r2,r18
   154b8:	11400017 	ldw	r5,0(r2)
   154bc:	e009883a 	mov	r4,fp
   154c0:	303ee83a 	callr	r6
   154c4:	88800117 	ldw	r2,4(r17)
   154c8:	98bfc81e 	bne	r19,r2,153ec <__call_exitprocs+0x64>
   154cc:	b8800017 	ldw	r2,0(r23)
   154d0:	147fd526 	beq	r2,r17,15428 <__call_exitprocs+0xa0>
   154d4:	003fc506 	br	153ec <__call_exitprocs+0x64>
   154d8:	8c000115 	stw	r16,4(r17)
   154dc:	003fea06 	br	15488 <__call_exitprocs+0x100>
   154e0:	2105883a 	add	r2,r4,r4
   154e4:	1485883a 	add	r2,r2,r18
   154e8:	11000017 	ldw	r4,0(r2)
   154ec:	303ee83a 	callr	r6
   154f0:	003ff406 	br	154c4 <__call_exitprocs+0x13c>
   154f4:	303ee83a 	callr	r6
   154f8:	003ff206 	br	154c4 <__call_exitprocs+0x13c>
   154fc:	88800117 	ldw	r2,4(r17)
   15500:	1000081e 	bne	r2,zero,15524 <__call_exitprocs+0x19c>
   15504:	89000017 	ldw	r4,0(r17)
   15508:	20000726 	beq	r4,zero,15528 <__call_exitprocs+0x1a0>
   1550c:	b9000015 	stw	r4,0(r23)
   15510:	8809883a 	mov	r4,r17
   15514:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   15518:	bc400017 	ldw	r17,0(r23)
   1551c:	883fb71e 	bne	r17,zero,153fc <__call_exitprocs+0x74>
   15520:	003fc506 	br	15438 <__call_exitprocs+0xb0>
   15524:	89000017 	ldw	r4,0(r17)
   15528:	882f883a 	mov	r23,r17
   1552c:	2023883a 	mov	r17,r4
   15530:	883fb21e 	bne	r17,zero,153fc <__call_exitprocs+0x74>
   15534:	003fc006 	br	15438 <__call_exitprocs+0xb0>

00015538 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   15538:	defffd04 	addi	sp,sp,-12
   1553c:	df000215 	stw	fp,8(sp)
   15540:	df000204 	addi	fp,sp,8
   15544:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   15548:	e0bfff17 	ldw	r2,-4(fp)
   1554c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15550:	e0bffe17 	ldw	r2,-8(fp)
   15554:	1005003a 	cmpeq	r2,r2,zero
   15558:	1000021e 	bne	r2,zero,15564 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1555c:	002af070 	cmpltui	zero,zero,43969
   15560:	00000106 	br	15568 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   15564:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   15568:	e037883a 	mov	sp,fp
   1556c:	df000017 	ldw	fp,0(sp)
   15570:	dec00104 	addi	sp,sp,4
   15574:	f800283a 	ret

00015578 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15578:	defffd04 	addi	sp,sp,-12
   1557c:	dfc00215 	stw	ra,8(sp)
   15580:	df000115 	stw	fp,4(sp)
   15584:	df000104 	addi	fp,sp,4
   15588:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1558c:	e13fff17 	ldw	r4,-4(fp)
   15590:	00155380 	call	15538 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15594:	003fff06 	br	15594 <_exit+0x1c>
   15598:	00015384 	movi	zero,1358
