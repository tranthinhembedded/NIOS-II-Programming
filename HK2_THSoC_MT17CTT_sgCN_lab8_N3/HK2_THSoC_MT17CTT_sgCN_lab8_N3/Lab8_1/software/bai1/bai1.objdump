
bai1.elf:     file format elf32-littlenios2
bai1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000061c4 memsz 0x000061c4 flags r-x
    LOAD off    0x000071e4 vaddr 0x000861e4 paddr 0x00087cfc align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00009814 vaddr 0x00089814 paddr 0x00089814 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005fc4  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  0008617c  0008617c  0000717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  000861e4  00087cfc  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00089814  00089814  00009814  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008cfc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a50  00000000  00000000  00008d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00019cb0  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000064e8  00000000  00000000  00023420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000076c0  00000000  00000000  00029908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001258  00000000  00000000  00030fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002445  00000000  00000000  00032220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005c94  00000000  00000000  00034665  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0003a2fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  0003a340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003ce51  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0003ce54  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003ce60  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003ce61  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0003ce62  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0003ce6d  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0003ce78  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  0003ce83  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000016  00000000  00000000  0003ce87  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002e5e1  00000000  00000000  0003ce9d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
0008617c l    d  .rodata	00000000 .rodata
000861e4 l    d  .rwdata	00000000 .rwdata
00089814 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bai1_bsp//obj/HAL/src/crt0.o
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000802e0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000861f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081f4c l     F .text	00000008 __fp_lock
00081f54 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00082f54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00083070 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008309c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008319c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00083290 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008337c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0008359c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087cec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00083840 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00083980 l     F .text	00000038 alt_dev_reg
00086ba0 l     O .rwdata	00001060 jtag_uart_0
00087c00 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083c74 l     F .text	00000204 altera_avalon_jtag_uart_irq
00083e78 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0008466c l     F .text	00000098 altera_avalon_uart_irq
00084704 l     F .text	000000d8 altera_avalon_uart_rxirq
000847dc l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0008496c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00084bc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00085068 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000854f4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008564c l     F .text	00000050 alt_get_errno
0008569c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00082df0 g     F .text	00000064 _isatty_r
000834a0 g     F .text	00000078 alt_main
00080410 g     F .text	00000084 _puts_r
00089864 g     O .bss	00000100 alt_irq
00082e54 g     F .text	0000006c _lseek_r
00087cfc g       *ABS*	00000000 __flash_rwdata_start
00089af4 g       *ABS*	00000000 __alt_heap_start
00082b04 g     F .text	0000005c __sseek
00081ff0 g     F .text	0000010c __sinit
00081f68 g     F .text	00000078 __sfmoreglue
00083538 g     F .text	00000020 __malloc_unlock
000813d4 g     F .text	0000018c memmove
00081fe0 g     F .text	00000010 _cleanup
00083558 g     F .text	00000044 alt_putstr
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082d88 g     F .text	00000068 _fstat_r
00089820 g     O .bss	00000004 errno
00089828 g     O .bss	00000004 alt_argv
0008fcc4 g       *ABS*	00000000 _gp
00083810 g     F .text	00000030 usleep
00086a20 g     O .rwdata	00000180 alt_fd_list
00085aa0 g     F .text	00000090 alt_find_dev
00081294 g     F .text	00000140 memcpy
00081f5c g     F .text	0000000c _cleanup_r
000855d4 g     F .text	00000078 alt_io_redirect
0008617c g       *ABS*	00000000 __DTOR_END__
00080494 g     F .text	00000014 puts
00084078 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080400 g     F .text	00000008 __udivsi3
000831ec g     F .text	000000a4 isatty
0008981c g     O .bss	00000004 __malloc_top_pad
00080534 g     F .text	000004e4 __sfvwrite_r
00081b5c g     F .text	00000064 _sbrk_r
00082ec0 g     F .text	0000006c _read_r
00087ce4 g     O .rwdata	00000004 alt_max_fd
00082c38 g     F .text	0000013c _fclose_r
00081f1c g     F .text	00000030 fflush
00089818 g     O .bss	00000004 __malloc_max_sbrked_mem
000833cc g     F .text	000000d4 lseek
00087cc4 g     O .rwdata	00000004 _global_impure_ptr
00081560 g     F .text	000005fc _realloc_r
00089af4 g       *ABS*	00000000 __bss_end
00085404 g     F .text	000000f0 alt_iic_isr_register
0008597c g     F .text	00000104 alt_tick
000845c4 g     F .text	000000a8 altera_avalon_uart_init
00082208 g     F .text	00000018 __fp_lock_all
000853b8 g     F .text	0000004c alt_ic_irq_enabled
000858e4 g     F .text	00000098 alt_alarm_stop
00089830 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
000869f8 g     O .rwdata	00000028 alt_dev_null
000861e4 g     O .rwdata	0000000a number
0008504c g     F .text	0000001c alt_dcache_flush_all
00087cfc g       *ABS*	00000000 __ram_rwdata_end
00087cdc g     O .rwdata	00000008 alt_dev_list
00083890 g     F .text	000000f0 write
000861e4 g       *ABS*	00000000 __ram_rodata_end
000830ec g     F .text	000000b0 fstat
00080408 g     F .text	00000008 __umodsi3
00089af4 g       *ABS*	00000000 end
00084c10 g     F .text	000001a8 altera_avalon_uart_write
00083bb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008617c g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
00084514 g     F .text	00000060 altera_avalon_uart_write_fd
00084574 g     F .text	00000050 altera_avalon_uart_close_fd
00084290 g     F .text	00000224 altera_avalon_jtag_uart_write
000821f8 g     F .text	00000004 __sfp_lock_acquire
0008119c g     F .text	000000f8 memchr
00082374 g     F .text	000002d0 _free_r
00085fa0 g     F .text	000001a0 __call_exitprocs
00087ccc g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000003c _start
00089834 g     O .bss	00000004 _alt_tick_rate
00089838 g     O .bss	00000004 _alt_nticks
000835ec g     F .text	000000f4 read
000839ec g     F .text	00000064 alt_sys_init
00085e70 g     F .text	00000130 __register_exitproc
00083f1c g     F .text	00000068 altera_avalon_jtag_uart_close
00082f2c g     F .text	00000028 __mulsi3
000861e4 g       *ABS*	00000000 __ram_rwdata_start
0008617c g       *ABS*	00000000 __ram_rodata_start
0008983c g     O .bss	00000028 __malloc_current_mallinfo
00083a50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00085c44 g     F .text	000000d4 alt_get_fd
00084ef8 g     F .text	00000154 alt_busy_sleep
00082bd4 g     F .text	00000064 _close_r
00085df4 g     F .text	0000007c memcmp
00083b10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00089af4 g       *ABS*	00000000 __alt_stack_base
00083b60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00081bc0 g     F .text	00000174 __swsetup_r
000820fc g     F .text	000000fc __sfp
000865f0 g     O .rwdata	00000408 __malloc_av_
00082204 g     F .text	00000004 __sinit_lock_release
00082a28 g     F .text	00000054 __sread
00085b30 g     F .text	00000114 alt_find_file
000850b8 g     F .text	000000a0 alt_dev_llist_insert
00083518 g     F .text	00000020 __malloc_lock
00083760 g     F .text	000000b0 sbrk
00081d34 g     F .text	000001e8 _fflush_r
00089814 g       *ABS*	00000000 __bss_start
0008294c g     F .text	000000dc memset
000801f4 g     F .text	000000ec main
0008982c g     O .bss	00000004 alt_envp
00089814 g     O .bss	00000004 __malloc_max_total_mem
00083ab0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00082b60 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
00082d74 g     F .text	00000014 fclose
00089964 g     O .bss	00000190 _atexit0
00080a18 g     F .text	00000784 _malloc_r
00087ce8 g     O .rwdata	00000004 alt_errno
00082644 g     F .text	000000a8 _fwalk
00080354 g     F .text	00000050 __divsi3
00082238 g     F .text	0000013c _malloc_trim_r
0008617c g       *ABS*	00000000 __CTOR_END__
0008617c g       *ABS*	00000000 __flash_rodata_start
0008617c g       *ABS*	00000000 __DTOR_LIST__
000839b8 g     F .text	00000034 alt_irq_init
000836e0 g     F .text	00000080 alt_release_fd
00085d18 g     F .text	00000014 atexit
00082b68 g     F .text	0000006c _write_r
00087cc8 g     O .rwdata	00000004 _impure_ptr
00089824 g     O .bss	00000004 alt_argc
000851b4 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00082220 g     F .text	00000018 __fp_unlock_all
00087cd4 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008522c g     F .text	00000050 alt_ic_isr_register
00087cfc g       *ABS*	00000000 _edata
000844b4 g     F .text	00000060 altera_avalon_uart_read_fd
00089af4 g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
00083f84 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00085d64 g     F .text	00000074 _fputs_r
00085318 g     F .text	000000a0 alt_ic_irq_disable
00082a7c g     F .text	00000088 __swrite
00087cd0 g     O .rwdata	00000004 __malloc_trim_threshold
00085a80 g     F .text	00000020 altera_nios2_qsys_irq_init
00085d2c g     F .text	00000038 exit
000826ec g     F .text	000000b8 _fwalk_reent
000803a4 g     F .text	0000005c __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000821fc g     F .text	00000004 __sfp_lock_release
00084918 g     F .text	00000054 altera_avalon_uart_close
00086140 g     F .text	0000003c _exit
00084db8 g     F .text	00000140 alt_alarm_start
000827a4 g     F .text	000001a8 __smakebuf_r
000804a8 g     F .text	0000008c strlen
0008578c g     F .text	00000158 open
00085210 g     F .text	0000001c alt_icache_flush_all
00085dd8 g     F .text	0000001c fputs
00087cf0 g     O .rwdata	00000004 alt_priority_mask
0008527c g     F .text	0000009c alt_ic_irq_enable
000849bc g     F .text	00000204 altera_avalon_uart_read
00087cf4 g     O .rwdata	00000008 alt_alarm_list
00085158 g     F .text	0000005c _do_ctors
00082fa4 g     F .text	000000cc close
000832fc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00082200 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406e14 	ori	at,at,440
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00274 	movhi	r3,9
   80130:	18e61904 	addi	r3,r3,-26524
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000274 	movhi	r4,9
   80148:	21261904 	addi	r4,r4,-26524
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   801c0:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c4:	d6bf3114 	ori	gp,gp,64708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801cc:	10a60514 	ori	r2,r2,38932

    movhi r3, %hi(__bss_end)
   801d0:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d4:	18e6bd14 	ori	r3,r3,39668

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	00832fc0 	call	832fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	00834a00 	call	834a0 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <main>:
#include "altera_avalon_uart_regs.h"

char number[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

int main()
{
   801f4:	defffd04 	addi	sp,sp,-12
   801f8:	dfc00215 	stw	ra,8(sp)
   801fc:	df000115 	stw	fp,4(sp)
   80200:	df000104 	addi	fp,sp,4
    int i = 0;
   80204:	e03fff15 	stw	zero,-4(fp)

    // Print initial messages
    alt_putstr("Hello from Nios II!\n");
   80208:	01000234 	movhi	r4,8
   8020c:	21185f04 	addi	r4,r4,24956
   80210:	00835580 	call	83558 <alt_putstr>
    printf("Start\n");
   80214:	01000234 	movhi	r4,8
   80218:	21186504 	addi	r4,r4,24980
   8021c:	00804940 	call	80494 <puts>

    while(1)
    {
        for (i = 0; i < 100; i++)
   80220:	e03fff15 	stw	zero,-4(fp)
   80224:	00002a06 	br	802d0 <main+0xdc>
        {
            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, number[i / 10]);
   80228:	e0bfff17 	ldw	r2,-4(fp)
   8022c:	1009883a 	mov	r4,r2
   80230:	01400284 	movi	r5,10
   80234:	00803540 	call	80354 <__divsi3>
   80238:	00c00234 	movhi	r3,8
   8023c:	18d87904 	addi	r3,r3,25060
   80240:	1885883a 	add	r2,r3,r2
   80244:	10800003 	ldbu	r2,0(r2)
   80248:	10c03fcc 	andi	r3,r2,255
   8024c:	18c0201c 	xori	r3,r3,128
   80250:	18ffe004 	addi	r3,r3,-128
   80254:	00800434 	movhi	r2,16
   80258:	10840904 	addi	r2,r2,4132
   8025c:	10c00035 	stwio	r3,0(r2)
            usleep(1000);  // Wait to send data
   80260:	0100fa04 	movi	r4,1000
   80264:	00838100 	call	83810 <usleep>

            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, number[i % 10]);
   80268:	e0bfff17 	ldw	r2,-4(fp)
   8026c:	1009883a 	mov	r4,r2
   80270:	01400284 	movi	r5,10
   80274:	00803a40 	call	803a4 <__modsi3>
   80278:	00c00234 	movhi	r3,8
   8027c:	18d87904 	addi	r3,r3,25060
   80280:	1885883a 	add	r2,r3,r2
   80284:	10800003 	ldbu	r2,0(r2)
   80288:	10c03fcc 	andi	r3,r2,255
   8028c:	18c0201c 	xori	r3,r3,128
   80290:	18ffe004 	addi	r3,r3,-128
   80294:	00800434 	movhi	r2,16
   80298:	10840904 	addi	r2,r2,4132
   8029c:	10c00035 	stwio	r3,0(r2)
            usleep(1000);  // Wait to send data
   802a0:	0100fa04 	movi	r4,1000
   802a4:	00838100 	call	83810 <usleep>

            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, '\n');
   802a8:	00c00284 	movi	r3,10
   802ac:	00800434 	movhi	r2,16
   802b0:	10840904 	addi	r2,r2,4132
   802b4:	10c00035 	stwio	r3,0(r2)
            usleep(1000000);  // Longer delay after sending newline
   802b8:	010003f4 	movhi	r4,15
   802bc:	21109004 	addi	r4,r4,16960
   802c0:	00838100 	call	83810 <usleep>
    alt_putstr("Hello from Nios II!\n");
    printf("Start\n");

    while(1)
    {
        for (i = 0; i < 100; i++)
   802c4:	e0bfff17 	ldw	r2,-4(fp)
   802c8:	10800044 	addi	r2,r2,1
   802cc:	e0bfff15 	stw	r2,-4(fp)
   802d0:	e0bfff17 	ldw	r2,-4(fp)
   802d4:	10801910 	cmplti	r2,r2,100
   802d8:	103fd31e 	bne	r2,zero,80228 <main+0x34>
            usleep(1000);  // Wait to send data

            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, '\n');
            usleep(1000000);  // Longer delay after sending newline
        }
    }
   802dc:	003fd006 	br	80220 <main+0x2c>

000802e0 <udivmodsi4>:
   802e0:	2005883a 	mov	r2,r4
   802e4:	2900182e 	bgeu	r5,r4,80348 <udivmodsi4+0x68>
   802e8:	28001716 	blt	r5,zero,80348 <udivmodsi4+0x68>
   802ec:	01000804 	movi	r4,32
   802f0:	00c00044 	movi	r3,1
   802f4:	00000206 	br	80300 <udivmodsi4+0x20>
   802f8:	20001126 	beq	r4,zero,80340 <udivmodsi4+0x60>
   802fc:	28000516 	blt	r5,zero,80314 <udivmodsi4+0x34>
   80300:	294b883a 	add	r5,r5,r5
   80304:	213fffc4 	addi	r4,r4,-1
   80308:	18c7883a 	add	r3,r3,r3
   8030c:	28bffa36 	bltu	r5,r2,802f8 <udivmodsi4+0x18>
   80310:	18000b26 	beq	r3,zero,80340 <udivmodsi4+0x60>
   80314:	0009883a 	mov	r4,zero
   80318:	11400236 	bltu	r2,r5,80324 <udivmodsi4+0x44>
   8031c:	1145c83a 	sub	r2,r2,r5
   80320:	20c8b03a 	or	r4,r4,r3
   80324:	1806d07a 	srli	r3,r3,1
   80328:	280ad07a 	srli	r5,r5,1
   8032c:	183ffa1e 	bne	r3,zero,80318 <udivmodsi4+0x38>
   80330:	3000021e 	bne	r6,zero,8033c <udivmodsi4+0x5c>
   80334:	2005883a 	mov	r2,r4
   80338:	f800283a 	ret
   8033c:	f800283a 	ret
   80340:	0009883a 	mov	r4,zero
   80344:	003ffa06 	br	80330 <udivmodsi4+0x50>
   80348:	00c00044 	movi	r3,1
   8034c:	0009883a 	mov	r4,zero
   80350:	003ff106 	br	80318 <udivmodsi4+0x38>

00080354 <__divsi3>:
   80354:	defffe04 	addi	sp,sp,-8
   80358:	dfc00115 	stw	ra,4(sp)
   8035c:	dc000015 	stw	r16,0(sp)
   80360:	20000a16 	blt	r4,zero,8038c <__divsi3+0x38>
   80364:	0021883a 	mov	r16,zero
   80368:	28000b16 	blt	r5,zero,80398 <__divsi3+0x44>
   8036c:	000d883a 	mov	r6,zero
   80370:	00802e00 	call	802e0 <udivmodsi4>
   80374:	80000126 	beq	r16,zero,8037c <__divsi3+0x28>
   80378:	0085c83a 	sub	r2,zero,r2
   8037c:	dfc00117 	ldw	ra,4(sp)
   80380:	dc000017 	ldw	r16,0(sp)
   80384:	dec00204 	addi	sp,sp,8
   80388:	f800283a 	ret
   8038c:	0109c83a 	sub	r4,zero,r4
   80390:	04000044 	movi	r16,1
   80394:	283ff50e 	bge	r5,zero,8036c <__divsi3+0x18>
   80398:	014bc83a 	sub	r5,zero,r5
   8039c:	8400005c 	xori	r16,r16,1
   803a0:	003ff206 	br	8036c <__divsi3+0x18>

000803a4 <__modsi3>:
   803a4:	deffff04 	addi	sp,sp,-4
   803a8:	dfc00015 	stw	ra,0(sp)
   803ac:	20000516 	blt	r4,zero,803c4 <__modsi3+0x20>
   803b0:	28000c16 	blt	r5,zero,803e4 <__modsi3+0x40>
   803b4:	01800044 	movi	r6,1
   803b8:	dfc00017 	ldw	ra,0(sp)
   803bc:	dec00104 	addi	sp,sp,4
   803c0:	00802e01 	jmpi	802e0 <udivmodsi4>
   803c4:	0109c83a 	sub	r4,zero,r4
   803c8:	28000b16 	blt	r5,zero,803f8 <__modsi3+0x54>
   803cc:	01800044 	movi	r6,1
   803d0:	00802e00 	call	802e0 <udivmodsi4>
   803d4:	0085c83a 	sub	r2,zero,r2
   803d8:	dfc00017 	ldw	ra,0(sp)
   803dc:	dec00104 	addi	sp,sp,4
   803e0:	f800283a 	ret
   803e4:	014bc83a 	sub	r5,zero,r5
   803e8:	01800044 	movi	r6,1
   803ec:	dfc00017 	ldw	ra,0(sp)
   803f0:	dec00104 	addi	sp,sp,4
   803f4:	00802e01 	jmpi	802e0 <udivmodsi4>
   803f8:	014bc83a 	sub	r5,zero,r5
   803fc:	003ff306 	br	803cc <__modsi3+0x28>

00080400 <__udivsi3>:
   80400:	000d883a 	mov	r6,zero
   80404:	00802e01 	jmpi	802e0 <udivmodsi4>

00080408 <__umodsi3>:
   80408:	01800044 	movi	r6,1
   8040c:	00802e01 	jmpi	802e0 <udivmodsi4>

00080410 <_puts_r>:
   80410:	defff604 	addi	sp,sp,-40
   80414:	dc400815 	stw	r17,32(sp)
   80418:	2023883a 	mov	r17,r4
   8041c:	2809883a 	mov	r4,r5
   80420:	dc000715 	stw	r16,28(sp)
   80424:	dfc00915 	stw	ra,36(sp)
   80428:	2821883a 	mov	r16,r5
   8042c:	00804a80 	call	804a8 <strlen>
   80430:	10c00044 	addi	r3,r2,1
   80434:	d8800115 	stw	r2,4(sp)
   80438:	89400217 	ldw	r5,8(r17)
   8043c:	00800234 	movhi	r2,8
   80440:	10986704 	addi	r2,r2,24988
   80444:	d8800215 	stw	r2,8(sp)
   80448:	00800044 	movi	r2,1
   8044c:	d8800315 	stw	r2,12(sp)
   80450:	8809883a 	mov	r4,r17
   80454:	00800084 	movi	r2,2
   80458:	d9800404 	addi	r6,sp,16
   8045c:	dc000015 	stw	r16,0(sp)
   80460:	d8c00615 	stw	r3,24(sp)
   80464:	dec00415 	stw	sp,16(sp)
   80468:	d8800515 	stw	r2,20(sp)
   8046c:	00805340 	call	80534 <__sfvwrite_r>
   80470:	1000061e 	bne	r2,zero,8048c <_puts_r+0x7c>
   80474:	00800284 	movi	r2,10
   80478:	dfc00917 	ldw	ra,36(sp)
   8047c:	dc400817 	ldw	r17,32(sp)
   80480:	dc000717 	ldw	r16,28(sp)
   80484:	dec00a04 	addi	sp,sp,40
   80488:	f800283a 	ret
   8048c:	00bfffc4 	movi	r2,-1
   80490:	003ff906 	br	80478 <_puts_r+0x68>

00080494 <puts>:
   80494:	00800234 	movhi	r2,8
   80498:	109f3204 	addi	r2,r2,31944
   8049c:	200b883a 	mov	r5,r4
   804a0:	11000017 	ldw	r4,0(r2)
   804a4:	00804101 	jmpi	80410 <_puts_r>

000804a8 <strlen>:
   804a8:	208000cc 	andi	r2,r4,3
   804ac:	10001f1e 	bne	r2,zero,8052c <strlen+0x84>
   804b0:	20800017 	ldw	r2,0(r4)
   804b4:	01ffbff4 	movhi	r7,65279
   804b8:	39ffbfc4 	addi	r7,r7,-257
   804bc:	01a02074 	movhi	r6,32897
   804c0:	31a02004 	addi	r6,r6,-32640
   804c4:	11c7883a 	add	r3,r2,r7
   804c8:	0084303a 	nor	r2,zero,r2
   804cc:	1886703a 	and	r3,r3,r2
   804d0:	1986703a 	and	r3,r3,r6
   804d4:	2005883a 	mov	r2,r4
   804d8:	1800101e 	bne	r3,zero,8051c <strlen+0x74>
   804dc:	10800104 	addi	r2,r2,4
   804e0:	10c00017 	ldw	r3,0(r2)
   804e4:	19cb883a 	add	r5,r3,r7
   804e8:	00c6303a 	nor	r3,zero,r3
   804ec:	28c6703a 	and	r3,r5,r3
   804f0:	1986703a 	and	r3,r3,r6
   804f4:	1800091e 	bne	r3,zero,8051c <strlen+0x74>
   804f8:	10800104 	addi	r2,r2,4
   804fc:	10c00017 	ldw	r3,0(r2)
   80500:	19cb883a 	add	r5,r3,r7
   80504:	00c6303a 	nor	r3,zero,r3
   80508:	28c6703a 	and	r3,r5,r3
   8050c:	1986703a 	and	r3,r3,r6
   80510:	183ff226 	beq	r3,zero,804dc <strlen+0x34>
   80514:	00000106 	br	8051c <strlen+0x74>
   80518:	10800044 	addi	r2,r2,1
   8051c:	10c00007 	ldb	r3,0(r2)
   80520:	183ffd1e 	bne	r3,zero,80518 <strlen+0x70>
   80524:	1105c83a 	sub	r2,r2,r4
   80528:	f800283a 	ret
   8052c:	2005883a 	mov	r2,r4
   80530:	003ffa06 	br	8051c <strlen+0x74>

00080534 <__sfvwrite_r>:
   80534:	30800217 	ldw	r2,8(r6)
   80538:	defff504 	addi	sp,sp,-44
   8053c:	dd400615 	stw	r21,24(sp)
   80540:	dd000515 	stw	r20,20(sp)
   80544:	dc000115 	stw	r16,4(sp)
   80548:	dfc00a15 	stw	ra,40(sp)
   8054c:	df000915 	stw	fp,36(sp)
   80550:	ddc00815 	stw	r23,32(sp)
   80554:	dd800715 	stw	r22,28(sp)
   80558:	dcc00415 	stw	r19,16(sp)
   8055c:	dc800315 	stw	r18,12(sp)
   80560:	dc400215 	stw	r17,8(sp)
   80564:	3029883a 	mov	r20,r6
   80568:	202b883a 	mov	r21,r4
   8056c:	2821883a 	mov	r16,r5
   80570:	10002126 	beq	r2,zero,805f8 <__sfvwrite_r+0xc4>
   80574:	2880030b 	ldhu	r2,12(r5)
   80578:	10c0020c 	andi	r3,r2,8
   8057c:	18ffffcc 	andi	r3,r3,65535
   80580:	18e0001c 	xori	r3,r3,32768
   80584:	18e00004 	addi	r3,r3,-32768
   80588:	18002826 	beq	r3,zero,8062c <__sfvwrite_r+0xf8>
   8058c:	28c00417 	ldw	r3,16(r5)
   80590:	18002626 	beq	r3,zero,8062c <__sfvwrite_r+0xf8>
   80594:	10c0008c 	andi	r3,r2,2
   80598:	18ffffcc 	andi	r3,r3,65535
   8059c:	18e0001c 	xori	r3,r3,32768
   805a0:	18e00004 	addi	r3,r3,-32768
   805a4:	a4400017 	ldw	r17,0(r20)
   805a8:	18002b26 	beq	r3,zero,80658 <__sfvwrite_r+0x124>
   805ac:	0027883a 	mov	r19,zero
   805b0:	0025883a 	mov	r18,zero
   805b4:	05810004 	movi	r22,1024
   805b8:	980d883a 	mov	r6,r19
   805bc:	a809883a 	mov	r4,r21
   805c0:	90004f26 	beq	r18,zero,80700 <__sfvwrite_r+0x1cc>
   805c4:	900f883a 	mov	r7,r18
   805c8:	81400717 	ldw	r5,28(r16)
   805cc:	b480012e 	bgeu	r22,r18,805d4 <__sfvwrite_r+0xa0>
   805d0:	01c10004 	movi	r7,1024
   805d4:	80800917 	ldw	r2,36(r16)
   805d8:	103ee83a 	callr	r2
   805dc:	0080540e 	bge	zero,r2,80730 <__sfvwrite_r+0x1fc>
   805e0:	a0c00217 	ldw	r3,8(r20)
   805e4:	98a7883a 	add	r19,r19,r2
   805e8:	90a5c83a 	sub	r18,r18,r2
   805ec:	1885c83a 	sub	r2,r3,r2
   805f0:	a0800215 	stw	r2,8(r20)
   805f4:	103ff01e 	bne	r2,zero,805b8 <__sfvwrite_r+0x84>
   805f8:	0005883a 	mov	r2,zero
   805fc:	dfc00a17 	ldw	ra,40(sp)
   80600:	df000917 	ldw	fp,36(sp)
   80604:	ddc00817 	ldw	r23,32(sp)
   80608:	dd800717 	ldw	r22,28(sp)
   8060c:	dd400617 	ldw	r21,24(sp)
   80610:	dd000517 	ldw	r20,20(sp)
   80614:	dcc00417 	ldw	r19,16(sp)
   80618:	dc800317 	ldw	r18,12(sp)
   8061c:	dc400217 	ldw	r17,8(sp)
   80620:	dc000117 	ldw	r16,4(sp)
   80624:	dec00b04 	addi	sp,sp,44
   80628:	f800283a 	ret
   8062c:	a809883a 	mov	r4,r21
   80630:	800b883a 	mov	r5,r16
   80634:	0081bc00 	call	81bc0 <__swsetup_r>
   80638:	1000f01e 	bne	r2,zero,809fc <__sfvwrite_r+0x4c8>
   8063c:	8080030b 	ldhu	r2,12(r16)
   80640:	a4400017 	ldw	r17,0(r20)
   80644:	10c0008c 	andi	r3,r2,2
   80648:	18ffffcc 	andi	r3,r3,65535
   8064c:	18e0001c 	xori	r3,r3,32768
   80650:	18e00004 	addi	r3,r3,-32768
   80654:	183fd51e 	bne	r3,zero,805ac <__sfvwrite_r+0x78>
   80658:	10c0004c 	andi	r3,r2,1
   8065c:	002d883a 	mov	r22,zero
   80660:	1800381e 	bne	r3,zero,80744 <__sfvwrite_r+0x210>
   80664:	0025883a 	mov	r18,zero
   80668:	90002126 	beq	r18,zero,806f0 <__sfvwrite_r+0x1bc>
   8066c:	10c0800c 	andi	r3,r2,512
   80670:	18ffffcc 	andi	r3,r3,65535
   80674:	18e0001c 	xori	r3,r3,32768
   80678:	18e00004 	addi	r3,r3,-32768
   8067c:	84c00217 	ldw	r19,8(r16)
   80680:	18006b26 	beq	r3,zero,80830 <__sfvwrite_r+0x2fc>
   80684:	980f883a 	mov	r7,r19
   80688:	94c08636 	bltu	r18,r19,808a4 <__sfvwrite_r+0x370>
   8068c:	10c1200c 	andi	r3,r2,1152
   80690:	18009f1e 	bne	r3,zero,80910 <__sfvwrite_r+0x3dc>
   80694:	81000017 	ldw	r4,0(r16)
   80698:	982f883a 	mov	r23,r19
   8069c:	9039883a 	mov	fp,r18
   806a0:	9027883a 	mov	r19,r18
   806a4:	380d883a 	mov	r6,r7
   806a8:	b00b883a 	mov	r5,r22
   806ac:	d9c00015 	stw	r7,0(sp)
   806b0:	00813d40 	call	813d4 <memmove>
   806b4:	d9c00017 	ldw	r7,0(sp)
   806b8:	81000217 	ldw	r4,8(r16)
   806bc:	80800017 	ldw	r2,0(r16)
   806c0:	25efc83a 	sub	r23,r4,r23
   806c4:	11cf883a 	add	r7,r2,r7
   806c8:	85c00215 	stw	r23,8(r16)
   806cc:	81c00015 	stw	r7,0(r16)
   806d0:	a0800217 	ldw	r2,8(r20)
   806d4:	b72d883a 	add	r22,r22,fp
   806d8:	9725c83a 	sub	r18,r18,fp
   806dc:	14e7c83a 	sub	r19,r2,r19
   806e0:	a4c00215 	stw	r19,8(r20)
   806e4:	983fc426 	beq	r19,zero,805f8 <__sfvwrite_r+0xc4>
   806e8:	8080030b 	ldhu	r2,12(r16)
   806ec:	903fdf1e 	bne	r18,zero,8066c <__sfvwrite_r+0x138>
   806f0:	8d800017 	ldw	r22,0(r17)
   806f4:	8c800117 	ldw	r18,4(r17)
   806f8:	8c400204 	addi	r17,r17,8
   806fc:	003fda06 	br	80668 <__sfvwrite_r+0x134>
   80700:	8cc00017 	ldw	r19,0(r17)
   80704:	8c800117 	ldw	r18,4(r17)
   80708:	8c400204 	addi	r17,r17,8
   8070c:	003faa06 	br	805b8 <__sfvwrite_r+0x84>
   80710:	00815600 	call	81560 <_realloc_r>
   80714:	102f883a 	mov	r23,r2
   80718:	10009f1e 	bne	r2,zero,80998 <__sfvwrite_r+0x464>
   8071c:	81400417 	ldw	r5,16(r16)
   80720:	a809883a 	mov	r4,r21
   80724:	00823740 	call	82374 <_free_r>
   80728:	00800304 	movi	r2,12
   8072c:	a8800015 	stw	r2,0(r21)
   80730:	80c0030b 	ldhu	r3,12(r16)
   80734:	00bfffc4 	movi	r2,-1
   80738:	18c01014 	ori	r3,r3,64
   8073c:	80c0030d 	sth	r3,12(r16)
   80740:	003fae06 	br	805fc <__sfvwrite_r+0xc8>
   80744:	0007883a 	mov	r3,zero
   80748:	0039883a 	mov	fp,zero
   8074c:	0025883a 	mov	r18,zero
   80750:	90001e26 	beq	r18,zero,807cc <__sfvwrite_r+0x298>
   80754:	18006526 	beq	r3,zero,808ec <__sfvwrite_r+0x3b8>
   80758:	b02f883a 	mov	r23,r22
   8075c:	9580012e 	bgeu	r18,r22,80764 <__sfvwrite_r+0x230>
   80760:	902f883a 	mov	r23,r18
   80764:	81000017 	ldw	r4,0(r16)
   80768:	80800417 	ldw	r2,16(r16)
   8076c:	84c00217 	ldw	r19,8(r16)
   80770:	81c00517 	ldw	r7,20(r16)
   80774:	1100022e 	bgeu	r2,r4,80780 <__sfvwrite_r+0x24c>
   80778:	99e7883a 	add	r19,r19,r7
   8077c:	9dc01816 	blt	r19,r23,807e0 <__sfvwrite_r+0x2ac>
   80780:	b9c03b16 	blt	r23,r7,80870 <__sfvwrite_r+0x33c>
   80784:	80800917 	ldw	r2,36(r16)
   80788:	81400717 	ldw	r5,28(r16)
   8078c:	a809883a 	mov	r4,r21
   80790:	d8c00015 	stw	r3,0(sp)
   80794:	e00d883a 	mov	r6,fp
   80798:	103ee83a 	callr	r2
   8079c:	1027883a 	mov	r19,r2
   807a0:	d8c00017 	ldw	r3,0(sp)
   807a4:	00bfe20e 	bge	zero,r2,80730 <__sfvwrite_r+0x1fc>
   807a8:	b4edc83a 	sub	r22,r22,r19
   807ac:	b0001a26 	beq	r22,zero,80818 <__sfvwrite_r+0x2e4>
   807b0:	a0800217 	ldw	r2,8(r20)
   807b4:	e4f9883a 	add	fp,fp,r19
   807b8:	94e5c83a 	sub	r18,r18,r19
   807bc:	14e7c83a 	sub	r19,r2,r19
   807c0:	a4c00215 	stw	r19,8(r20)
   807c4:	983f8c26 	beq	r19,zero,805f8 <__sfvwrite_r+0xc4>
   807c8:	903fe21e 	bne	r18,zero,80754 <__sfvwrite_r+0x220>
   807cc:	8f000017 	ldw	fp,0(r17)
   807d0:	8c800117 	ldw	r18,4(r17)
   807d4:	0007883a 	mov	r3,zero
   807d8:	8c400204 	addi	r17,r17,8
   807dc:	003fdc06 	br	80750 <__sfvwrite_r+0x21c>
   807e0:	e00b883a 	mov	r5,fp
   807e4:	980d883a 	mov	r6,r19
   807e8:	d8c00015 	stw	r3,0(sp)
   807ec:	00813d40 	call	813d4 <memmove>
   807f0:	80800017 	ldw	r2,0(r16)
   807f4:	a809883a 	mov	r4,r21
   807f8:	800b883a 	mov	r5,r16
   807fc:	14c5883a 	add	r2,r2,r19
   80800:	80800015 	stw	r2,0(r16)
   80804:	0081d340 	call	81d34 <_fflush_r>
   80808:	d8c00017 	ldw	r3,0(sp)
   8080c:	103fc81e 	bne	r2,zero,80730 <__sfvwrite_r+0x1fc>
   80810:	b4edc83a 	sub	r22,r22,r19
   80814:	b03fe61e 	bne	r22,zero,807b0 <__sfvwrite_r+0x27c>
   80818:	a809883a 	mov	r4,r21
   8081c:	800b883a 	mov	r5,r16
   80820:	0081d340 	call	81d34 <_fflush_r>
   80824:	103fc21e 	bne	r2,zero,80730 <__sfvwrite_r+0x1fc>
   80828:	0007883a 	mov	r3,zero
   8082c:	003fe006 	br	807b0 <__sfvwrite_r+0x27c>
   80830:	81000017 	ldw	r4,0(r16)
   80834:	80800417 	ldw	r2,16(r16)
   80838:	1100022e 	bgeu	r2,r4,80844 <__sfvwrite_r+0x310>
   8083c:	9839883a 	mov	fp,r19
   80840:	9c806036 	bltu	r19,r18,809c4 <__sfvwrite_r+0x490>
   80844:	81c00517 	ldw	r7,20(r16)
   80848:	91c01c36 	bltu	r18,r7,808bc <__sfvwrite_r+0x388>
   8084c:	80800917 	ldw	r2,36(r16)
   80850:	81400717 	ldw	r5,28(r16)
   80854:	a809883a 	mov	r4,r21
   80858:	b00d883a 	mov	r6,r22
   8085c:	103ee83a 	callr	r2
   80860:	1027883a 	mov	r19,r2
   80864:	00bfb20e 	bge	zero,r2,80730 <__sfvwrite_r+0x1fc>
   80868:	1039883a 	mov	fp,r2
   8086c:	003f9806 	br	806d0 <__sfvwrite_r+0x19c>
   80870:	b80d883a 	mov	r6,r23
   80874:	e00b883a 	mov	r5,fp
   80878:	d8c00015 	stw	r3,0(sp)
   8087c:	00813d40 	call	813d4 <memmove>
   80880:	80800217 	ldw	r2,8(r16)
   80884:	81000017 	ldw	r4,0(r16)
   80888:	b827883a 	mov	r19,r23
   8088c:	15c5c83a 	sub	r2,r2,r23
   80890:	25ef883a 	add	r23,r4,r23
   80894:	80800215 	stw	r2,8(r16)
   80898:	85c00015 	stw	r23,0(r16)
   8089c:	d8c00017 	ldw	r3,0(sp)
   808a0:	003fc106 	br	807a8 <__sfvwrite_r+0x274>
   808a4:	81000017 	ldw	r4,0(r16)
   808a8:	902f883a 	mov	r23,r18
   808ac:	9039883a 	mov	fp,r18
   808b0:	9027883a 	mov	r19,r18
   808b4:	900f883a 	mov	r7,r18
   808b8:	003f7a06 	br	806a4 <__sfvwrite_r+0x170>
   808bc:	b00b883a 	mov	r5,r22
   808c0:	900d883a 	mov	r6,r18
   808c4:	00813d40 	call	813d4 <memmove>
   808c8:	80c00217 	ldw	r3,8(r16)
   808cc:	80800017 	ldw	r2,0(r16)
   808d0:	9027883a 	mov	r19,r18
   808d4:	1c87c83a 	sub	r3,r3,r18
   808d8:	1485883a 	add	r2,r2,r18
   808dc:	80c00215 	stw	r3,8(r16)
   808e0:	80800015 	stw	r2,0(r16)
   808e4:	9039883a 	mov	fp,r18
   808e8:	003f7906 	br	806d0 <__sfvwrite_r+0x19c>
   808ec:	e009883a 	mov	r4,fp
   808f0:	01400284 	movi	r5,10
   808f4:	900d883a 	mov	r6,r18
   808f8:	008119c0 	call	8119c <memchr>
   808fc:	10003c26 	beq	r2,zero,809f0 <__sfvwrite_r+0x4bc>
   80900:	15800044 	addi	r22,r2,1
   80904:	b72dc83a 	sub	r22,r22,fp
   80908:	00c00044 	movi	r3,1
   8090c:	003f9206 	br	80758 <__sfvwrite_r+0x224>
   80910:	81000517 	ldw	r4,20(r16)
   80914:	81400417 	ldw	r5,16(r16)
   80918:	80c00017 	ldw	r3,0(r16)
   8091c:	210d883a 	add	r6,r4,r4
   80920:	3109883a 	add	r4,r6,r4
   80924:	2026d7fa 	srli	r19,r4,31
   80928:	1979c83a 	sub	fp,r3,r5
   8092c:	e1800044 	addi	r6,fp,1
   80930:	9909883a 	add	r4,r19,r4
   80934:	2027d07a 	srai	r19,r4,1
   80938:	3489883a 	add	r4,r6,r18
   8093c:	980d883a 	mov	r6,r19
   80940:	9900022e 	bgeu	r19,r4,8094c <__sfvwrite_r+0x418>
   80944:	2027883a 	mov	r19,r4
   80948:	200d883a 	mov	r6,r4
   8094c:	1081000c 	andi	r2,r2,1024
   80950:	10bfffcc 	andi	r2,r2,65535
   80954:	10a0001c 	xori	r2,r2,32768
   80958:	10a00004 	addi	r2,r2,-32768
   8095c:	a809883a 	mov	r4,r21
   80960:	103f6b26 	beq	r2,zero,80710 <__sfvwrite_r+0x1dc>
   80964:	300b883a 	mov	r5,r6
   80968:	0080a180 	call	80a18 <_malloc_r>
   8096c:	102f883a 	mov	r23,r2
   80970:	103f6d26 	beq	r2,zero,80728 <__sfvwrite_r+0x1f4>
   80974:	81400417 	ldw	r5,16(r16)
   80978:	1009883a 	mov	r4,r2
   8097c:	e00d883a 	mov	r6,fp
   80980:	00812940 	call	81294 <memcpy>
   80984:	8080030b 	ldhu	r2,12(r16)
   80988:	00fedfc4 	movi	r3,-1153
   8098c:	10c4703a 	and	r2,r2,r3
   80990:	10802014 	ori	r2,r2,128
   80994:	8080030d 	sth	r2,12(r16)
   80998:	bf09883a 	add	r4,r23,fp
   8099c:	9f07c83a 	sub	r3,r19,fp
   809a0:	85c00415 	stw	r23,16(r16)
   809a4:	84c00515 	stw	r19,20(r16)
   809a8:	81000015 	stw	r4,0(r16)
   809ac:	902f883a 	mov	r23,r18
   809b0:	80c00215 	stw	r3,8(r16)
   809b4:	9039883a 	mov	fp,r18
   809b8:	9027883a 	mov	r19,r18
   809bc:	900f883a 	mov	r7,r18
   809c0:	003f3806 	br	806a4 <__sfvwrite_r+0x170>
   809c4:	b00b883a 	mov	r5,r22
   809c8:	980d883a 	mov	r6,r19
   809cc:	00813d40 	call	813d4 <memmove>
   809d0:	80800017 	ldw	r2,0(r16)
   809d4:	a809883a 	mov	r4,r21
   809d8:	800b883a 	mov	r5,r16
   809dc:	14c5883a 	add	r2,r2,r19
   809e0:	80800015 	stw	r2,0(r16)
   809e4:	0081d340 	call	81d34 <_fflush_r>
   809e8:	103f3926 	beq	r2,zero,806d0 <__sfvwrite_r+0x19c>
   809ec:	003f5006 	br	80730 <__sfvwrite_r+0x1fc>
   809f0:	95800044 	addi	r22,r18,1
   809f4:	00c00044 	movi	r3,1
   809f8:	003f5706 	br	80758 <__sfvwrite_r+0x224>
   809fc:	80c0030b 	ldhu	r3,12(r16)
   80a00:	00bfffc4 	movi	r2,-1
   80a04:	18c01014 	ori	r3,r3,64
   80a08:	80c0030d 	sth	r3,12(r16)
   80a0c:	00c00244 	movi	r3,9
   80a10:	a8c00015 	stw	r3,0(r21)
   80a14:	003ef906 	br	805fc <__sfvwrite_r+0xc8>

00080a18 <_malloc_r>:
   80a18:	defff604 	addi	sp,sp,-40
   80a1c:	dc800215 	stw	r18,8(sp)
   80a20:	dfc00915 	stw	ra,36(sp)
   80a24:	df000815 	stw	fp,32(sp)
   80a28:	ddc00715 	stw	r23,28(sp)
   80a2c:	dd800615 	stw	r22,24(sp)
   80a30:	dd400515 	stw	r21,20(sp)
   80a34:	dd000415 	stw	r20,16(sp)
   80a38:	dcc00315 	stw	r19,12(sp)
   80a3c:	dc400115 	stw	r17,4(sp)
   80a40:	dc000015 	stw	r16,0(sp)
   80a44:	288002c4 	addi	r2,r5,11
   80a48:	00c00584 	movi	r3,22
   80a4c:	2025883a 	mov	r18,r4
   80a50:	18802b2e 	bgeu	r3,r2,80b00 <_malloc_r+0xe8>
   80a54:	047ffe04 	movi	r17,-8
   80a58:	1462703a 	and	r17,r2,r17
   80a5c:	88002a16 	blt	r17,zero,80b08 <_malloc_r+0xf0>
   80a60:	89402936 	bltu	r17,r5,80b08 <_malloc_r+0xf0>
   80a64:	9009883a 	mov	r4,r18
   80a68:	00835180 	call	83518 <__malloc_lock>
   80a6c:	00807dc4 	movi	r2,503
   80a70:	14402936 	bltu	r2,r17,80b18 <_malloc_r+0x100>
   80a74:	8808d0fa 	srli	r4,r17,3
   80a78:	04c00234 	movhi	r19,8
   80a7c:	9cd97c04 	addi	r19,r19,26096
   80a80:	2105883a 	add	r2,r4,r4
   80a84:	1085883a 	add	r2,r2,r2
   80a88:	1085883a 	add	r2,r2,r2
   80a8c:	9885883a 	add	r2,r19,r2
   80a90:	14000317 	ldw	r16,12(r2)
   80a94:	80815526 	beq	r16,r2,80fec <_malloc_r+0x5d4>
   80a98:	81000117 	ldw	r4,4(r16)
   80a9c:	00bfff04 	movi	r2,-4
   80aa0:	80c00317 	ldw	r3,12(r16)
   80aa4:	2084703a 	and	r2,r4,r2
   80aa8:	8085883a 	add	r2,r16,r2
   80aac:	11800117 	ldw	r6,4(r2)
   80ab0:	81400217 	ldw	r5,8(r16)
   80ab4:	9009883a 	mov	r4,r18
   80ab8:	31800054 	ori	r6,r6,1
   80abc:	11800115 	stw	r6,4(r2)
   80ac0:	28c00315 	stw	r3,12(r5)
   80ac4:	19400215 	stw	r5,8(r3)
   80ac8:	00835380 	call	83538 <__malloc_unlock>
   80acc:	80800204 	addi	r2,r16,8
   80ad0:	dfc00917 	ldw	ra,36(sp)
   80ad4:	df000817 	ldw	fp,32(sp)
   80ad8:	ddc00717 	ldw	r23,28(sp)
   80adc:	dd800617 	ldw	r22,24(sp)
   80ae0:	dd400517 	ldw	r21,20(sp)
   80ae4:	dd000417 	ldw	r20,16(sp)
   80ae8:	dcc00317 	ldw	r19,12(sp)
   80aec:	dc800217 	ldw	r18,8(sp)
   80af0:	dc400117 	ldw	r17,4(sp)
   80af4:	dc000017 	ldw	r16,0(sp)
   80af8:	dec00a04 	addi	sp,sp,40
   80afc:	f800283a 	ret
   80b00:	04400404 	movi	r17,16
   80b04:	897fd72e 	bgeu	r17,r5,80a64 <_malloc_r+0x4c>
   80b08:	00800304 	movi	r2,12
   80b0c:	90800015 	stw	r2,0(r18)
   80b10:	0005883a 	mov	r2,zero
   80b14:	003fee06 	br	80ad0 <_malloc_r+0xb8>
   80b18:	8808d27a 	srli	r4,r17,9
   80b1c:	20007126 	beq	r4,zero,80ce4 <_malloc_r+0x2cc>
   80b20:	00800104 	movi	r2,4
   80b24:	1100eb36 	bltu	r2,r4,80ed4 <_malloc_r+0x4bc>
   80b28:	8808d1ba 	srli	r4,r17,6
   80b2c:	21000e04 	addi	r4,r4,56
   80b30:	210b883a 	add	r5,r4,r4
   80b34:	294b883a 	add	r5,r5,r5
   80b38:	294b883a 	add	r5,r5,r5
   80b3c:	04c00234 	movhi	r19,8
   80b40:	9cd97c04 	addi	r19,r19,26096
   80b44:	994b883a 	add	r5,r19,r5
   80b48:	2c000317 	ldw	r16,12(r5)
   80b4c:	2c000e26 	beq	r5,r16,80b88 <_malloc_r+0x170>
   80b50:	80c00117 	ldw	r3,4(r16)
   80b54:	01ffff04 	movi	r7,-4
   80b58:	018003c4 	movi	r6,15
   80b5c:	19c6703a 	and	r3,r3,r7
   80b60:	1c45c83a 	sub	r2,r3,r17
   80b64:	30800716 	blt	r6,r2,80b84 <_malloc_r+0x16c>
   80b68:	1000610e 	bge	r2,zero,80cf0 <_malloc_r+0x2d8>
   80b6c:	84000317 	ldw	r16,12(r16)
   80b70:	2c000526 	beq	r5,r16,80b88 <_malloc_r+0x170>
   80b74:	80c00117 	ldw	r3,4(r16)
   80b78:	19c6703a 	and	r3,r3,r7
   80b7c:	1c45c83a 	sub	r2,r3,r17
   80b80:	30bff90e 	bge	r6,r2,80b68 <_malloc_r+0x150>
   80b84:	213fffc4 	addi	r4,r4,-1
   80b88:	21000044 	addi	r4,r4,1
   80b8c:	9c000417 	ldw	r16,16(r19)
   80b90:	00c00234 	movhi	r3,8
   80b94:	18d97c04 	addi	r3,r3,26096
   80b98:	1a400204 	addi	r9,r3,8
   80b9c:	8240ff26 	beq	r16,r9,80f9c <_malloc_r+0x584>
   80ba0:	81400117 	ldw	r5,4(r16)
   80ba4:	00bfff04 	movi	r2,-4
   80ba8:	018003c4 	movi	r6,15
   80bac:	2884703a 	and	r2,r5,r2
   80bb0:	144bc83a 	sub	r5,r2,r17
   80bb4:	3140ea16 	blt	r6,r5,80f60 <_malloc_r+0x548>
   80bb8:	1a400515 	stw	r9,20(r3)
   80bbc:	1a400415 	stw	r9,16(r3)
   80bc0:	2800570e 	bge	r5,zero,80d20 <_malloc_r+0x308>
   80bc4:	01407fc4 	movi	r5,511
   80bc8:	2880ca36 	bltu	r5,r2,80ef4 <_malloc_r+0x4dc>
   80bcc:	1004d0fa 	srli	r2,r2,3
   80bd0:	02000044 	movi	r8,1
   80bd4:	19c00117 	ldw	r7,4(r3)
   80bd8:	108b883a 	add	r5,r2,r2
   80bdc:	294b883a 	add	r5,r5,r5
   80be0:	1005d0ba 	srai	r2,r2,2
   80be4:	294b883a 	add	r5,r5,r5
   80be8:	28cb883a 	add	r5,r5,r3
   80bec:	29800217 	ldw	r6,8(r5)
   80bf0:	4084983a 	sll	r2,r8,r2
   80bf4:	81400315 	stw	r5,12(r16)
   80bf8:	81800215 	stw	r6,8(r16)
   80bfc:	11c4b03a 	or	r2,r2,r7
   80c00:	18800115 	stw	r2,4(r3)
   80c04:	2c000215 	stw	r16,8(r5)
   80c08:	34000315 	stw	r16,12(r6)
   80c0c:	200bd0ba 	srai	r5,r4,2
   80c10:	00c00044 	movi	r3,1
   80c14:	194a983a 	sll	r5,r3,r5
   80c18:	11404936 	bltu	r2,r5,80d40 <_malloc_r+0x328>
   80c1c:	1146703a 	and	r3,r2,r5
   80c20:	18000a1e 	bne	r3,zero,80c4c <_malloc_r+0x234>
   80c24:	00ffff04 	movi	r3,-4
   80c28:	294b883a 	add	r5,r5,r5
   80c2c:	20c8703a 	and	r4,r4,r3
   80c30:	1146703a 	and	r3,r2,r5
   80c34:	21000104 	addi	r4,r4,4
   80c38:	1800041e 	bne	r3,zero,80c4c <_malloc_r+0x234>
   80c3c:	294b883a 	add	r5,r5,r5
   80c40:	1146703a 	and	r3,r2,r5
   80c44:	21000104 	addi	r4,r4,4
   80c48:	183ffc26 	beq	r3,zero,80c3c <_malloc_r+0x224>
   80c4c:	023fff04 	movi	r8,-4
   80c50:	01c003c4 	movi	r7,15
   80c54:	2105883a 	add	r2,r4,r4
   80c58:	1085883a 	add	r2,r2,r2
   80c5c:	1085883a 	add	r2,r2,r2
   80c60:	9899883a 	add	r12,r19,r2
   80c64:	62800304 	addi	r10,r12,12
   80c68:	2017883a 	mov	r11,r4
   80c6c:	54000017 	ldw	r16,0(r10)
   80c70:	51bffd04 	addi	r6,r10,-12
   80c74:	8180041e 	bne	r16,r6,80c88 <_malloc_r+0x270>
   80c78:	0000ca06 	br	80fa4 <_malloc_r+0x58c>
   80c7c:	10001c0e 	bge	r2,zero,80cf0 <_malloc_r+0x2d8>
   80c80:	84000317 	ldw	r16,12(r16)
   80c84:	8180c726 	beq	r16,r6,80fa4 <_malloc_r+0x58c>
   80c88:	80c00117 	ldw	r3,4(r16)
   80c8c:	1a06703a 	and	r3,r3,r8
   80c90:	1c45c83a 	sub	r2,r3,r17
   80c94:	38bff90e 	bge	r7,r2,80c7c <_malloc_r+0x264>
   80c98:	81000317 	ldw	r4,12(r16)
   80c9c:	81400217 	ldw	r5,8(r16)
   80ca0:	8447883a 	add	r3,r16,r17
   80ca4:	8c400054 	ori	r17,r17,1
   80ca8:	29000315 	stw	r4,12(r5)
   80cac:	21400215 	stw	r5,8(r4)
   80cb0:	84400115 	stw	r17,4(r16)
   80cb4:	1889883a 	add	r4,r3,r2
   80cb8:	11400054 	ori	r5,r2,1
   80cbc:	98c00515 	stw	r3,20(r19)
   80cc0:	98c00415 	stw	r3,16(r19)
   80cc4:	20800015 	stw	r2,0(r4)
   80cc8:	1a400315 	stw	r9,12(r3)
   80ccc:	1a400215 	stw	r9,8(r3)
   80cd0:	19400115 	stw	r5,4(r3)
   80cd4:	9009883a 	mov	r4,r18
   80cd8:	00835380 	call	83538 <__malloc_unlock>
   80cdc:	80800204 	addi	r2,r16,8
   80ce0:	003f7b06 	br	80ad0 <_malloc_r+0xb8>
   80ce4:	8808d0fa 	srli	r4,r17,3
   80ce8:	210b883a 	add	r5,r4,r4
   80cec:	003f9106 	br	80b34 <_malloc_r+0x11c>
   80cf0:	80c7883a 	add	r3,r16,r3
   80cf4:	19400117 	ldw	r5,4(r3)
   80cf8:	80800317 	ldw	r2,12(r16)
   80cfc:	81000217 	ldw	r4,8(r16)
   80d00:	29400054 	ori	r5,r5,1
   80d04:	19400115 	stw	r5,4(r3)
   80d08:	20800315 	stw	r2,12(r4)
   80d0c:	11000215 	stw	r4,8(r2)
   80d10:	9009883a 	mov	r4,r18
   80d14:	00835380 	call	83538 <__malloc_unlock>
   80d18:	80800204 	addi	r2,r16,8
   80d1c:	003f6c06 	br	80ad0 <_malloc_r+0xb8>
   80d20:	8085883a 	add	r2,r16,r2
   80d24:	10c00117 	ldw	r3,4(r2)
   80d28:	9009883a 	mov	r4,r18
   80d2c:	18c00054 	ori	r3,r3,1
   80d30:	10c00115 	stw	r3,4(r2)
   80d34:	00835380 	call	83538 <__malloc_unlock>
   80d38:	80800204 	addi	r2,r16,8
   80d3c:	003f6406 	br	80ad0 <_malloc_r+0xb8>
   80d40:	9c000217 	ldw	r16,8(r19)
   80d44:	00bfff04 	movi	r2,-4
   80d48:	85400117 	ldw	r21,4(r16)
   80d4c:	a8aa703a 	and	r21,r21,r2
   80d50:	ac400336 	bltu	r21,r17,80d60 <_malloc_r+0x348>
   80d54:	ac45c83a 	sub	r2,r21,r17
   80d58:	00c003c4 	movi	r3,15
   80d5c:	18805316 	blt	r3,r2,80eac <_malloc_r+0x494>
   80d60:	d5e6d617 	ldw	r23,-25768(gp)
   80d64:	d0e00217 	ldw	r3,-32760(gp)
   80d68:	00bfffc4 	movi	r2,-1
   80d6c:	8579883a 	add	fp,r16,r21
   80d70:	8def883a 	add	r23,r17,r23
   80d74:	1880d226 	beq	r3,r2,810c0 <_malloc_r+0x6a8>
   80d78:	bdc403c4 	addi	r23,r23,4111
   80d7c:	00bc0004 	movi	r2,-4096
   80d80:	b8ae703a 	and	r23,r23,r2
   80d84:	9009883a 	mov	r4,r18
   80d88:	b80b883a 	mov	r5,r23
   80d8c:	0081b5c0 	call	81b5c <_sbrk_r>
   80d90:	1029883a 	mov	r20,r2
   80d94:	00bfffc4 	movi	r2,-1
   80d98:	a080d126 	beq	r20,r2,810e0 <_malloc_r+0x6c8>
   80d9c:	a7009f36 	bltu	r20,fp,8101c <_malloc_r+0x604>
   80da0:	05800274 	movhi	r22,9
   80da4:	b5a60f04 	addi	r22,r22,-26564
   80da8:	b0800017 	ldw	r2,0(r22)
   80dac:	b885883a 	add	r2,r23,r2
   80db0:	b0800015 	stw	r2,0(r22)
   80db4:	e500cf26 	beq	fp,r20,810f4 <_malloc_r+0x6dc>
   80db8:	d1200217 	ldw	r4,-32760(gp)
   80dbc:	00ffffc4 	movi	r3,-1
   80dc0:	20c0e026 	beq	r4,r3,81144 <_malloc_r+0x72c>
   80dc4:	a739c83a 	sub	fp,r20,fp
   80dc8:	1705883a 	add	r2,r2,fp
   80dcc:	b0800015 	stw	r2,0(r22)
   80dd0:	a08001cc 	andi	r2,r20,7
   80dd4:	1000a526 	beq	r2,zero,8106c <_malloc_r+0x654>
   80dd8:	a0a9c83a 	sub	r20,r20,r2
   80ddc:	00c40204 	movi	r3,4104
   80de0:	a5000204 	addi	r20,r20,8
   80de4:	1885c83a 	sub	r2,r3,r2
   80de8:	a5c7883a 	add	r3,r20,r23
   80dec:	18c3ffcc 	andi	r3,r3,4095
   80df0:	10efc83a 	sub	r23,r2,r3
   80df4:	9009883a 	mov	r4,r18
   80df8:	b80b883a 	mov	r5,r23
   80dfc:	0081b5c0 	call	81b5c <_sbrk_r>
   80e00:	00ffffc4 	movi	r3,-1
   80e04:	10c0cc26 	beq	r2,r3,81138 <_malloc_r+0x720>
   80e08:	1505c83a 	sub	r2,r2,r20
   80e0c:	b887883a 	add	r3,r23,r2
   80e10:	18c00054 	ori	r3,r3,1
   80e14:	b0800017 	ldw	r2,0(r22)
   80e18:	9d000215 	stw	r20,8(r19)
   80e1c:	a0c00115 	stw	r3,4(r20)
   80e20:	b885883a 	add	r2,r23,r2
   80e24:	b0800015 	stw	r2,0(r22)
   80e28:	84c00e26 	beq	r16,r19,80e64 <_malloc_r+0x44c>
   80e2c:	00c003c4 	movi	r3,15
   80e30:	1d40902e 	bgeu	r3,r21,81074 <_malloc_r+0x65c>
   80e34:	ad7ffd04 	addi	r21,r21,-12
   80e38:	013ffe04 	movi	r4,-8
   80e3c:	a908703a 	and	r4,r21,r4
   80e40:	810b883a 	add	r5,r16,r4
   80e44:	01800144 	movi	r6,5
   80e48:	29800115 	stw	r6,4(r5)
   80e4c:	29800215 	stw	r6,8(r5)
   80e50:	81400117 	ldw	r5,4(r16)
   80e54:	2940004c 	andi	r5,r5,1
   80e58:	214ab03a 	or	r5,r4,r5
   80e5c:	81400115 	stw	r5,4(r16)
   80e60:	1900ae36 	bltu	r3,r4,8111c <_malloc_r+0x704>
   80e64:	d0e6d517 	ldw	r3,-25772(gp)
   80e68:	1880012e 	bgeu	r3,r2,80e70 <_malloc_r+0x458>
   80e6c:	d0a6d515 	stw	r2,-25772(gp)
   80e70:	d0e6d417 	ldw	r3,-25776(gp)
   80e74:	9c000217 	ldw	r16,8(r19)
   80e78:	1880012e 	bgeu	r3,r2,80e80 <_malloc_r+0x468>
   80e7c:	d0a6d415 	stw	r2,-25776(gp)
   80e80:	80c00117 	ldw	r3,4(r16)
   80e84:	00bfff04 	movi	r2,-4
   80e88:	1886703a 	and	r3,r3,r2
   80e8c:	1c45c83a 	sub	r2,r3,r17
   80e90:	1c400236 	bltu	r3,r17,80e9c <_malloc_r+0x484>
   80e94:	00c003c4 	movi	r3,15
   80e98:	18800416 	blt	r3,r2,80eac <_malloc_r+0x494>
   80e9c:	9009883a 	mov	r4,r18
   80ea0:	00835380 	call	83538 <__malloc_unlock>
   80ea4:	0005883a 	mov	r2,zero
   80ea8:	003f0906 	br	80ad0 <_malloc_r+0xb8>
   80eac:	88c00054 	ori	r3,r17,1
   80eb0:	10800054 	ori	r2,r2,1
   80eb4:	80c00115 	stw	r3,4(r16)
   80eb8:	8463883a 	add	r17,r16,r17
   80ebc:	88800115 	stw	r2,4(r17)
   80ec0:	9009883a 	mov	r4,r18
   80ec4:	9c400215 	stw	r17,8(r19)
   80ec8:	00835380 	call	83538 <__malloc_unlock>
   80ecc:	80800204 	addi	r2,r16,8
   80ed0:	003eff06 	br	80ad0 <_malloc_r+0xb8>
   80ed4:	00800504 	movi	r2,20
   80ed8:	1100492e 	bgeu	r2,r4,81000 <_malloc_r+0x5e8>
   80edc:	00801504 	movi	r2,84
   80ee0:	11005c36 	bltu	r2,r4,81054 <_malloc_r+0x63c>
   80ee4:	8808d33a 	srli	r4,r17,12
   80ee8:	21001b84 	addi	r4,r4,110
   80eec:	210b883a 	add	r5,r4,r4
   80ef0:	003f1006 	br	80b34 <_malloc_r+0x11c>
   80ef4:	1006d27a 	srli	r3,r2,9
   80ef8:	01400104 	movi	r5,4
   80efc:	28c0432e 	bgeu	r5,r3,8100c <_malloc_r+0x5f4>
   80f00:	01400504 	movi	r5,20
   80f04:	28c07036 	bltu	r5,r3,810c8 <_malloc_r+0x6b0>
   80f08:	194016c4 	addi	r5,r3,91
   80f0c:	294d883a 	add	r6,r5,r5
   80f10:	318d883a 	add	r6,r6,r6
   80f14:	318d883a 	add	r6,r6,r6
   80f18:	998d883a 	add	r6,r19,r6
   80f1c:	30c00217 	ldw	r3,8(r6)
   80f20:	01c00234 	movhi	r7,8
   80f24:	39d97c04 	addi	r7,r7,26096
   80f28:	19805726 	beq	r3,r6,81088 <_malloc_r+0x670>
   80f2c:	01ffff04 	movi	r7,-4
   80f30:	19400117 	ldw	r5,4(r3)
   80f34:	29ca703a 	and	r5,r5,r7
   80f38:	1140022e 	bgeu	r2,r5,80f44 <_malloc_r+0x52c>
   80f3c:	18c00217 	ldw	r3,8(r3)
   80f40:	30fffb1e 	bne	r6,r3,80f30 <_malloc_r+0x518>
   80f44:	19400317 	ldw	r5,12(r3)
   80f48:	98800117 	ldw	r2,4(r19)
   80f4c:	81400315 	stw	r5,12(r16)
   80f50:	80c00215 	stw	r3,8(r16)
   80f54:	2c000215 	stw	r16,8(r5)
   80f58:	1c000315 	stw	r16,12(r3)
   80f5c:	003f2b06 	br	80c0c <_malloc_r+0x1f4>
   80f60:	8445883a 	add	r2,r16,r17
   80f64:	8c400054 	ori	r17,r17,1
   80f68:	18800515 	stw	r2,20(r3)
   80f6c:	18800415 	stw	r2,16(r3)
   80f70:	29000054 	ori	r4,r5,1
   80f74:	1147883a 	add	r3,r2,r5
   80f78:	84400115 	stw	r17,4(r16)
   80f7c:	11000115 	stw	r4,4(r2)
   80f80:	12400315 	stw	r9,12(r2)
   80f84:	12400215 	stw	r9,8(r2)
   80f88:	19400015 	stw	r5,0(r3)
   80f8c:	9009883a 	mov	r4,r18
   80f90:	00835380 	call	83538 <__malloc_unlock>
   80f94:	80800204 	addi	r2,r16,8
   80f98:	003ecd06 	br	80ad0 <_malloc_r+0xb8>
   80f9c:	18800117 	ldw	r2,4(r3)
   80fa0:	003f1a06 	br	80c0c <_malloc_r+0x1f4>
   80fa4:	5ac00044 	addi	r11,r11,1
   80fa8:	588000cc 	andi	r2,r11,3
   80fac:	52800204 	addi	r10,r10,8
   80fb0:	103f2e1e 	bne	r2,zero,80c6c <_malloc_r+0x254>
   80fb4:	20c000cc 	andi	r3,r4,3
   80fb8:	60bffe04 	addi	r2,r12,-8
   80fbc:	18006f26 	beq	r3,zero,8117c <_malloc_r+0x764>
   80fc0:	63000017 	ldw	r12,0(r12)
   80fc4:	213fffc4 	addi	r4,r4,-1
   80fc8:	60bffa26 	beq	r12,r2,80fb4 <_malloc_r+0x59c>
   80fcc:	98800117 	ldw	r2,4(r19)
   80fd0:	294b883a 	add	r5,r5,r5
   80fd4:	117f5a36 	bltu	r2,r5,80d40 <_malloc_r+0x328>
   80fd8:	283f5926 	beq	r5,zero,80d40 <_malloc_r+0x328>
   80fdc:	1146703a 	and	r3,r2,r5
   80fe0:	18001626 	beq	r3,zero,8103c <_malloc_r+0x624>
   80fe4:	5809883a 	mov	r4,r11
   80fe8:	003f1a06 	br	80c54 <_malloc_r+0x23c>
   80fec:	80800204 	addi	r2,r16,8
   80ff0:	84000517 	ldw	r16,20(r16)
   80ff4:	143ea81e 	bne	r2,r16,80a98 <_malloc_r+0x80>
   80ff8:	21000084 	addi	r4,r4,2
   80ffc:	003ee306 	br	80b8c <_malloc_r+0x174>
   81000:	210016c4 	addi	r4,r4,91
   81004:	210b883a 	add	r5,r4,r4
   81008:	003eca06 	br	80b34 <_malloc_r+0x11c>
   8100c:	100ad1ba 	srli	r5,r2,6
   81010:	29400e04 	addi	r5,r5,56
   81014:	294d883a 	add	r6,r5,r5
   81018:	003fbd06 	br	80f10 <_malloc_r+0x4f8>
   8101c:	84ff6026 	beq	r16,r19,80da0 <_malloc_r+0x388>
   81020:	00800234 	movhi	r2,8
   81024:	10997c04 	addi	r2,r2,26096
   81028:	14000217 	ldw	r16,8(r2)
   8102c:	00bfff04 	movi	r2,-4
   81030:	80c00117 	ldw	r3,4(r16)
   81034:	1886703a 	and	r3,r3,r2
   81038:	003f9406 	br	80e8c <_malloc_r+0x474>
   8103c:	294b883a 	add	r5,r5,r5
   81040:	1146703a 	and	r3,r2,r5
   81044:	5ac00104 	addi	r11,r11,4
   81048:	183ffc26 	beq	r3,zero,8103c <_malloc_r+0x624>
   8104c:	5809883a 	mov	r4,r11
   81050:	003f0006 	br	80c54 <_malloc_r+0x23c>
   81054:	00805504 	movi	r2,340
   81058:	11001336 	bltu	r2,r4,810a8 <_malloc_r+0x690>
   8105c:	8808d3fa 	srli	r4,r17,15
   81060:	21001dc4 	addi	r4,r4,119
   81064:	210b883a 	add	r5,r4,r4
   81068:	003eb206 	br	80b34 <_malloc_r+0x11c>
   8106c:	00840004 	movi	r2,4096
   81070:	003f5d06 	br	80de8 <_malloc_r+0x3d0>
   81074:	00800044 	movi	r2,1
   81078:	a0800115 	stw	r2,4(r20)
   8107c:	a021883a 	mov	r16,r20
   81080:	0007883a 	mov	r3,zero
   81084:	003f8106 	br	80e8c <_malloc_r+0x474>
   81088:	280bd0ba 	srai	r5,r5,2
   8108c:	01800044 	movi	r6,1
   81090:	38800117 	ldw	r2,4(r7)
   81094:	314c983a 	sll	r6,r6,r5
   81098:	180b883a 	mov	r5,r3
   8109c:	3084b03a 	or	r2,r6,r2
   810a0:	38800115 	stw	r2,4(r7)
   810a4:	003fa906 	br	80f4c <_malloc_r+0x534>
   810a8:	00815504 	movi	r2,1364
   810ac:	11001836 	bltu	r2,r4,81110 <_malloc_r+0x6f8>
   810b0:	8808d4ba 	srli	r4,r17,18
   810b4:	21001f04 	addi	r4,r4,124
   810b8:	210b883a 	add	r5,r4,r4
   810bc:	003e9d06 	br	80b34 <_malloc_r+0x11c>
   810c0:	bdc00404 	addi	r23,r23,16
   810c4:	003f2f06 	br	80d84 <_malloc_r+0x36c>
   810c8:	01401504 	movi	r5,84
   810cc:	28c01f36 	bltu	r5,r3,8114c <_malloc_r+0x734>
   810d0:	100ad33a 	srli	r5,r2,12
   810d4:	29401b84 	addi	r5,r5,110
   810d8:	294d883a 	add	r6,r5,r5
   810dc:	003f8c06 	br	80f10 <_malloc_r+0x4f8>
   810e0:	9c000217 	ldw	r16,8(r19)
   810e4:	00bfff04 	movi	r2,-4
   810e8:	80c00117 	ldw	r3,4(r16)
   810ec:	1886703a 	and	r3,r3,r2
   810f0:	003f6606 	br	80e8c <_malloc_r+0x474>
   810f4:	e0c3ffcc 	andi	r3,fp,4095
   810f8:	183f2f1e 	bne	r3,zero,80db8 <_malloc_r+0x3a0>
   810fc:	98c00217 	ldw	r3,8(r19)
   81100:	bd49883a 	add	r4,r23,r21
   81104:	21000054 	ori	r4,r4,1
   81108:	19000115 	stw	r4,4(r3)
   8110c:	003f5506 	br	80e64 <_malloc_r+0x44c>
   81110:	01403f04 	movi	r5,252
   81114:	01001f84 	movi	r4,126
   81118:	003e8606 	br	80b34 <_malloc_r+0x11c>
   8111c:	9009883a 	mov	r4,r18
   81120:	81400204 	addi	r5,r16,8
   81124:	00823740 	call	82374 <_free_r>
   81128:	00800274 	movhi	r2,9
   8112c:	10a60f04 	addi	r2,r2,-26564
   81130:	10800017 	ldw	r2,0(r2)
   81134:	003f4b06 	br	80e64 <_malloc_r+0x44c>
   81138:	00c00044 	movi	r3,1
   8113c:	002f883a 	mov	r23,zero
   81140:	003f3406 	br	80e14 <_malloc_r+0x3fc>
   81144:	d5200215 	stw	r20,-32760(gp)
   81148:	003f2106 	br	80dd0 <_malloc_r+0x3b8>
   8114c:	01405504 	movi	r5,340
   81150:	28c00436 	bltu	r5,r3,81164 <_malloc_r+0x74c>
   81154:	100ad3fa 	srli	r5,r2,15
   81158:	29401dc4 	addi	r5,r5,119
   8115c:	294d883a 	add	r6,r5,r5
   81160:	003f6b06 	br	80f10 <_malloc_r+0x4f8>
   81164:	01415504 	movi	r5,1364
   81168:	28c00936 	bltu	r5,r3,81190 <_malloc_r+0x778>
   8116c:	100ad4ba 	srli	r5,r2,18
   81170:	29401f04 	addi	r5,r5,124
   81174:	294d883a 	add	r6,r5,r5
   81178:	003f6506 	br	80f10 <_malloc_r+0x4f8>
   8117c:	98800117 	ldw	r2,4(r19)
   81180:	0146303a 	nor	r3,zero,r5
   81184:	1884703a 	and	r2,r3,r2
   81188:	98800115 	stw	r2,4(r19)
   8118c:	003f9006 	br	80fd0 <_malloc_r+0x5b8>
   81190:	01803f04 	movi	r6,252
   81194:	01401f84 	movi	r5,126
   81198:	003f5d06 	br	80f10 <_malloc_r+0x4f8>

0008119c <memchr>:
   8119c:	008000c4 	movi	r2,3
   811a0:	29403fcc 	andi	r5,r5,255
   811a4:	1180282e 	bgeu	r2,r6,81248 <memchr+0xac>
   811a8:	2086703a 	and	r3,r4,r2
   811ac:	1800351e 	bne	r3,zero,81284 <memchr+0xe8>
   811b0:	2816923a 	slli	r11,r5,8
   811b4:	2093883a 	add	r9,r4,r2
   811b8:	22000084 	addi	r8,r4,2
   811bc:	5957883a 	add	r11,r11,r5
   811c0:	5816923a 	slli	r11,r11,8
   811c4:	20c00044 	addi	r3,r4,1
   811c8:	037fbff4 	movhi	r13,65279
   811cc:	6b7fbfc4 	addi	r13,r13,-257
   811d0:	5957883a 	add	r11,r11,r5
   811d4:	5816923a 	slli	r11,r11,8
   811d8:	03202074 	movhi	r12,32897
   811dc:	63202004 	addi	r12,r12,-32640
   811e0:	101d883a 	mov	r14,r2
   811e4:	5957883a 	add	r11,r11,r5
   811e8:	21c00017 	ldw	r7,0(r4)
   811ec:	31bfff04 	addi	r6,r6,-4
   811f0:	1805883a 	mov	r2,r3
   811f4:	3acef03a 	xor	r7,r7,r11
   811f8:	3b55883a 	add	r10,r7,r13
   811fc:	01ce303a 	nor	r7,zero,r7
   81200:	51ce703a 	and	r7,r10,r7
   81204:	3b0e703a 	and	r7,r7,r12
   81208:	38000a26 	beq	r7,zero,81234 <memchr+0x98>
   8120c:	21c00003 	ldbu	r7,0(r4)
   81210:	39401e26 	beq	r7,r5,8128c <memchr+0xf0>
   81214:	19c00003 	ldbu	r7,0(r3)
   81218:	39401926 	beq	r7,r5,81280 <memchr+0xe4>
   8121c:	41c00003 	ldbu	r7,0(r8)
   81220:	4005883a 	mov	r2,r8
   81224:	39401626 	beq	r7,r5,81280 <memchr+0xe4>
   81228:	49c00003 	ldbu	r7,0(r9)
   8122c:	4805883a 	mov	r2,r9
   81230:	39401326 	beq	r7,r5,81280 <memchr+0xe4>
   81234:	21000104 	addi	r4,r4,4
   81238:	4a400104 	addi	r9,r9,4
   8123c:	42000104 	addi	r8,r8,4
   81240:	18c00104 	addi	r3,r3,4
   81244:	71bfe836 	bltu	r14,r6,811e8 <memchr+0x4c>
   81248:	2005883a 	mov	r2,r4
   8124c:	30000a26 	beq	r6,zero,81278 <memchr+0xdc>
   81250:	10c00003 	ldbu	r3,0(r2)
   81254:	19400a26 	beq	r3,r5,81280 <memchr+0xe4>
   81258:	10c00044 	addi	r3,r2,1
   8125c:	118d883a 	add	r6,r2,r6
   81260:	00000306 	br	81270 <memchr+0xd4>
   81264:	11000003 	ldbu	r4,0(r2)
   81268:	18c00044 	addi	r3,r3,1
   8126c:	21400426 	beq	r4,r5,81280 <memchr+0xe4>
   81270:	1805883a 	mov	r2,r3
   81274:	19bffb1e 	bne	r3,r6,81264 <memchr+0xc8>
   81278:	0005883a 	mov	r2,zero
   8127c:	f800283a 	ret
   81280:	f800283a 	ret
   81284:	2005883a 	mov	r2,r4
   81288:	003ff106 	br	81250 <memchr+0xb4>
   8128c:	2005883a 	mov	r2,r4
   81290:	f800283a 	ret

00081294 <memcpy>:
   81294:	defffb04 	addi	sp,sp,-20
   81298:	dc000015 	stw	r16,0(sp)
   8129c:	dfc00415 	stw	ra,16(sp)
   812a0:	dcc00315 	stw	r19,12(sp)
   812a4:	dc800215 	stw	r18,8(sp)
   812a8:	dc400115 	stw	r17,4(sp)
   812ac:	00c003c4 	movi	r3,15
   812b0:	2021883a 	mov	r16,r4
   812b4:	3005883a 	mov	r2,r6
   812b8:	1980032e 	bgeu	r3,r6,812c8 <memcpy+0x34>
   812bc:	2906b03a 	or	r3,r5,r4
   812c0:	18c000cc 	andi	r3,r3,3
   812c4:	18001026 	beq	r3,zero,81308 <memcpy+0x74>
   812c8:	8007883a 	mov	r3,r16
   812cc:	288f883a 	add	r7,r5,r2
   812d0:	10000526 	beq	r2,zero,812e8 <memcpy+0x54>
   812d4:	29800003 	ldbu	r6,0(r5)
   812d8:	18c00044 	addi	r3,r3,1
   812dc:	29400044 	addi	r5,r5,1
   812e0:	19bfffc5 	stb	r6,-1(r3)
   812e4:	29fffb1e 	bne	r5,r7,812d4 <memcpy+0x40>
   812e8:	8005883a 	mov	r2,r16
   812ec:	dfc00417 	ldw	ra,16(sp)
   812f0:	dcc00317 	ldw	r19,12(sp)
   812f4:	dc800217 	ldw	r18,8(sp)
   812f8:	dc400117 	ldw	r17,4(sp)
   812fc:	dc000017 	ldw	r16,0(sp)
   81300:	dec00504 	addi	sp,sp,20
   81304:	f800283a 	ret
   81308:	32bffc04 	addi	r10,r6,-16
   8130c:	5014d13a 	srli	r10,r10,4
   81310:	20800404 	addi	r2,r4,16
   81314:	2007883a 	mov	r3,r4
   81318:	5008913a 	slli	r4,r10,4
   8131c:	280f883a 	mov	r7,r5
   81320:	1105883a 	add	r2,r2,r4
   81324:	3a000017 	ldw	r8,0(r7)
   81328:	18c00404 	addi	r3,r3,16
   8132c:	39c00404 	addi	r7,r7,16
   81330:	1a3ffc15 	stw	r8,-16(r3)
   81334:	3a3ffd17 	ldw	r8,-12(r7)
   81338:	1a3ffd15 	stw	r8,-12(r3)
   8133c:	3a3ffe17 	ldw	r8,-8(r7)
   81340:	1a3ffe15 	stw	r8,-8(r3)
   81344:	3a3fff17 	ldw	r8,-4(r7)
   81348:	1a3fff15 	stw	r8,-4(r3)
   8134c:	18bff51e 	bne	r3,r2,81324 <memcpy+0x90>
   81350:	52800044 	addi	r10,r10,1
   81354:	5014913a 	slli	r10,r10,4
   81358:	308003cc 	andi	r2,r6,15
   8135c:	010000c4 	movi	r4,3
   81360:	8287883a 	add	r3,r16,r10
   81364:	2a95883a 	add	r10,r5,r10
   81368:	2080182e 	bgeu	r4,r2,813cc <memcpy+0x138>
   8136c:	147fff04 	addi	r17,r2,-4
   81370:	8808d0ba 	srli	r4,r17,2
   81374:	1a400104 	addi	r9,r3,4
   81378:	180d883a 	mov	r6,r3
   8137c:	2105883a 	add	r2,r4,r4
   81380:	1085883a 	add	r2,r2,r2
   81384:	4893883a 	add	r9,r9,r2
   81388:	500f883a 	mov	r7,r10
   8138c:	3a000017 	ldw	r8,0(r7)
   81390:	31800104 	addi	r6,r6,4
   81394:	39c00104 	addi	r7,r7,4
   81398:	323fff15 	stw	r8,-4(r6)
   8139c:	327ffb1e 	bne	r6,r9,8138c <memcpy+0xf8>
   813a0:	20800044 	addi	r2,r4,1
   813a4:	1085883a 	add	r2,r2,r2
   813a8:	1085883a 	add	r2,r2,r2
   813ac:	017fff04 	movi	r5,-4
   813b0:	18a5883a 	add	r18,r3,r2
   813b4:	50a7883a 	add	r19,r10,r2
   813b8:	0082f2c0 	call	82f2c <__mulsi3>
   813bc:	1445883a 	add	r2,r2,r17
   813c0:	980b883a 	mov	r5,r19
   813c4:	9007883a 	mov	r3,r18
   813c8:	003fc006 	br	812cc <memcpy+0x38>
   813cc:	500b883a 	mov	r5,r10
   813d0:	003fbe06 	br	812cc <memcpy+0x38>

000813d4 <memmove>:
   813d4:	defffb04 	addi	sp,sp,-20
   813d8:	dc000015 	stw	r16,0(sp)
   813dc:	dfc00415 	stw	ra,16(sp)
   813e0:	dcc00315 	stw	r19,12(sp)
   813e4:	dc800215 	stw	r18,8(sp)
   813e8:	dc400115 	stw	r17,4(sp)
   813ec:	2021883a 	mov	r16,r4
   813f0:	300f883a 	mov	r7,r6
   813f4:	2900122e 	bgeu	r5,r4,81440 <memmove+0x6c>
   813f8:	2987883a 	add	r3,r5,r6
   813fc:	20c0102e 	bgeu	r4,r3,81440 <memmove+0x6c>
   81400:	218b883a 	add	r5,r4,r6
   81404:	1989c83a 	sub	r4,r3,r6
   81408:	30000526 	beq	r6,zero,81420 <memmove+0x4c>
   8140c:	18ffffc4 	addi	r3,r3,-1
   81410:	18800003 	ldbu	r2,0(r3)
   81414:	297fffc4 	addi	r5,r5,-1
   81418:	28800005 	stb	r2,0(r5)
   8141c:	193ffb1e 	bne	r3,r4,8140c <memmove+0x38>
   81420:	8005883a 	mov	r2,r16
   81424:	dfc00417 	ldw	ra,16(sp)
   81428:	dcc00317 	ldw	r19,12(sp)
   8142c:	dc800217 	ldw	r18,8(sp)
   81430:	dc400117 	ldw	r17,4(sp)
   81434:	dc000017 	ldw	r16,0(sp)
   81438:	dec00504 	addi	sp,sp,20
   8143c:	f800283a 	ret
   81440:	008003c4 	movi	r2,15
   81444:	1180422e 	bgeu	r2,r6,81550 <memmove+0x17c>
   81448:	2c04b03a 	or	r2,r5,r16
   8144c:	108000cc 	andi	r2,r2,3
   81450:	10003f1e 	bne	r2,zero,81550 <memmove+0x17c>
   81454:	32bffc04 	addi	r10,r6,-16
   81458:	5014d13a 	srli	r10,r10,4
   8145c:	81000404 	addi	r4,r16,16
   81460:	8007883a 	mov	r3,r16
   81464:	5004913a 	slli	r2,r10,4
   81468:	280f883a 	mov	r7,r5
   8146c:	2089883a 	add	r4,r4,r2
   81470:	38800017 	ldw	r2,0(r7)
   81474:	18c00404 	addi	r3,r3,16
   81478:	39c00404 	addi	r7,r7,16
   8147c:	18bffc15 	stw	r2,-16(r3)
   81480:	38bffd17 	ldw	r2,-12(r7)
   81484:	18bffd15 	stw	r2,-12(r3)
   81488:	38bffe17 	ldw	r2,-8(r7)
   8148c:	18bffe15 	stw	r2,-8(r3)
   81490:	38bfff17 	ldw	r2,-4(r7)
   81494:	18bfff15 	stw	r2,-4(r3)
   81498:	193ff51e 	bne	r3,r4,81470 <memmove+0x9c>
   8149c:	52800044 	addi	r10,r10,1
   814a0:	5014913a 	slli	r10,r10,4
   814a4:	31c003cc 	andi	r7,r6,15
   814a8:	008000c4 	movi	r2,3
   814ac:	8287883a 	add	r3,r16,r10
   814b0:	2a95883a 	add	r10,r5,r10
   814b4:	11c0282e 	bgeu	r2,r7,81558 <memmove+0x184>
   814b8:	3c7fff04 	addi	r17,r7,-4
   814bc:	8808d0ba 	srli	r4,r17,2
   814c0:	1a400104 	addi	r9,r3,4
   814c4:	180d883a 	mov	r6,r3
   814c8:	2105883a 	add	r2,r4,r4
   814cc:	1085883a 	add	r2,r2,r2
   814d0:	4893883a 	add	r9,r9,r2
   814d4:	5005883a 	mov	r2,r10
   814d8:	12000017 	ldw	r8,0(r2)
   814dc:	31800104 	addi	r6,r6,4
   814e0:	10800104 	addi	r2,r2,4
   814e4:	323fff15 	stw	r8,-4(r6)
   814e8:	327ffb1e 	bne	r6,r9,814d8 <memmove+0x104>
   814ec:	20800044 	addi	r2,r4,1
   814f0:	1085883a 	add	r2,r2,r2
   814f4:	1085883a 	add	r2,r2,r2
   814f8:	017fff04 	movi	r5,-4
   814fc:	18a5883a 	add	r18,r3,r2
   81500:	50a7883a 	add	r19,r10,r2
   81504:	0082f2c0 	call	82f2c <__mulsi3>
   81508:	144f883a 	add	r7,r2,r17
   8150c:	980b883a 	mov	r5,r19
   81510:	9007883a 	mov	r3,r18
   81514:	383fc226 	beq	r7,zero,81420 <memmove+0x4c>
   81518:	19cf883a 	add	r7,r3,r7
   8151c:	29800003 	ldbu	r6,0(r5)
   81520:	18c00044 	addi	r3,r3,1
   81524:	29400044 	addi	r5,r5,1
   81528:	19bfffc5 	stb	r6,-1(r3)
   8152c:	19fffb1e 	bne	r3,r7,8151c <memmove+0x148>
   81530:	8005883a 	mov	r2,r16
   81534:	dfc00417 	ldw	ra,16(sp)
   81538:	dcc00317 	ldw	r19,12(sp)
   8153c:	dc800217 	ldw	r18,8(sp)
   81540:	dc400117 	ldw	r17,4(sp)
   81544:	dc000017 	ldw	r16,0(sp)
   81548:	dec00504 	addi	sp,sp,20
   8154c:	f800283a 	ret
   81550:	8007883a 	mov	r3,r16
   81554:	003fef06 	br	81514 <memmove+0x140>
   81558:	500b883a 	mov	r5,r10
   8155c:	003fed06 	br	81514 <memmove+0x140>

00081560 <_realloc_r>:
   81560:	defff504 	addi	sp,sp,-44
   81564:	dd400615 	stw	r21,24(sp)
   81568:	dc800315 	stw	r18,12(sp)
   8156c:	dc000115 	stw	r16,4(sp)
   81570:	dfc00a15 	stw	ra,40(sp)
   81574:	df000915 	stw	fp,36(sp)
   81578:	ddc00815 	stw	r23,32(sp)
   8157c:	dd800715 	stw	r22,28(sp)
   81580:	dd000515 	stw	r20,20(sp)
   81584:	dcc00415 	stw	r19,16(sp)
   81588:	dc400215 	stw	r17,8(sp)
   8158c:	2821883a 	mov	r16,r5
   81590:	202b883a 	mov	r21,r4
   81594:	3025883a 	mov	r18,r6
   81598:	28009626 	beq	r5,zero,817f4 <_realloc_r+0x294>
   8159c:	00835180 	call	83518 <__malloc_lock>
   815a0:	80bfff17 	ldw	r2,-4(r16)
   815a4:	04ffff04 	movi	r19,-4
   815a8:	90c002c4 	addi	r3,r18,11
   815ac:	01000584 	movi	r4,22
   815b0:	85bffe04 	addi	r22,r16,-8
   815b4:	14e6703a 	and	r19,r2,r19
   815b8:	20c0372e 	bgeu	r4,r3,81698 <_realloc_r+0x138>
   815bc:	047ffe04 	movi	r17,-8
   815c0:	1c62703a 	and	r17,r3,r17
   815c4:	8807883a 	mov	r3,r17
   815c8:	88005a16 	blt	r17,zero,81734 <_realloc_r+0x1d4>
   815cc:	8c805936 	bltu	r17,r18,81734 <_realloc_r+0x1d4>
   815d0:	98c0340e 	bge	r19,r3,816a4 <_realloc_r+0x144>
   815d4:	07000234 	movhi	fp,8
   815d8:	e7197c04 	addi	fp,fp,26096
   815dc:	e1400217 	ldw	r5,8(fp)
   815e0:	b4c9883a 	add	r4,r22,r19
   815e4:	29009026 	beq	r5,r4,81828 <_realloc_r+0x2c8>
   815e8:	21800117 	ldw	r6,4(r4)
   815ec:	01ffff84 	movi	r7,-2
   815f0:	31ce703a 	and	r7,r6,r7
   815f4:	21cf883a 	add	r7,r4,r7
   815f8:	39c00117 	ldw	r7,4(r7)
   815fc:	39c0004c 	andi	r7,r7,1
   81600:	38004326 	beq	r7,zero,81710 <_realloc_r+0x1b0>
   81604:	000d883a 	mov	r6,zero
   81608:	0009883a 	mov	r4,zero
   8160c:	1080004c 	andi	r2,r2,1
   81610:	10005a1e 	bne	r2,zero,8177c <_realloc_r+0x21c>
   81614:	85fffe17 	ldw	r23,-8(r16)
   81618:	00bfff04 	movi	r2,-4
   8161c:	b5efc83a 	sub	r23,r22,r23
   81620:	b9c00117 	ldw	r7,4(r23)
   81624:	388e703a 	and	r7,r7,r2
   81628:	3ccf883a 	add	r7,r7,r19
   8162c:	20005226 	beq	r4,zero,81778 <_realloc_r+0x218>
   81630:	31e9883a 	add	r20,r6,r7
   81634:	2140c726 	beq	r4,r5,81954 <_realloc_r+0x3f4>
   81638:	a0c04f16 	blt	r20,r3,81778 <_realloc_r+0x218>
   8163c:	20800317 	ldw	r2,12(r4)
   81640:	20c00217 	ldw	r3,8(r4)
   81644:	99bfff04 	addi	r6,r19,-4
   81648:	01000904 	movi	r4,36
   8164c:	18800315 	stw	r2,12(r3)
   81650:	10c00215 	stw	r3,8(r2)
   81654:	b8c00217 	ldw	r3,8(r23)
   81658:	b8800317 	ldw	r2,12(r23)
   8165c:	bc800204 	addi	r18,r23,8
   81660:	18800315 	stw	r2,12(r3)
   81664:	10c00215 	stw	r3,8(r2)
   81668:	2180ed36 	bltu	r4,r6,81a20 <_realloc_r+0x4c0>
   8166c:	008004c4 	movi	r2,19
   81670:	11809b2e 	bgeu	r2,r6,818e0 <_realloc_r+0x380>
   81674:	80800017 	ldw	r2,0(r16)
   81678:	b8800215 	stw	r2,8(r23)
   8167c:	80800117 	ldw	r2,4(r16)
   81680:	b8800315 	stw	r2,12(r23)
   81684:	008006c4 	movi	r2,27
   81688:	1180f936 	bltu	r2,r6,81a70 <_realloc_r+0x510>
   8168c:	b8800404 	addi	r2,r23,16
   81690:	80c00204 	addi	r3,r16,8
   81694:	00009406 	br	818e8 <_realloc_r+0x388>
   81698:	00c00404 	movi	r3,16
   8169c:	1823883a 	mov	r17,r3
   816a0:	003fca06 	br	815cc <_realloc_r+0x6c>
   816a4:	9829883a 	mov	r20,r19
   816a8:	a447c83a 	sub	r3,r20,r17
   816ac:	010003c4 	movi	r4,15
   816b0:	1080004c 	andi	r2,r2,1
   816b4:	20c02336 	bltu	r4,r3,81744 <_realloc_r+0x1e4>
   816b8:	1504b03a 	or	r2,r2,r20
   816bc:	b0800115 	stw	r2,4(r22)
   816c0:	b52d883a 	add	r22,r22,r20
   816c4:	b0800117 	ldw	r2,4(r22)
   816c8:	10800054 	ori	r2,r2,1
   816cc:	b0800115 	stw	r2,4(r22)
   816d0:	a809883a 	mov	r4,r21
   816d4:	00835380 	call	83538 <__malloc_unlock>
   816d8:	8025883a 	mov	r18,r16
   816dc:	9005883a 	mov	r2,r18
   816e0:	dfc00a17 	ldw	ra,40(sp)
   816e4:	df000917 	ldw	fp,36(sp)
   816e8:	ddc00817 	ldw	r23,32(sp)
   816ec:	dd800717 	ldw	r22,28(sp)
   816f0:	dd400617 	ldw	r21,24(sp)
   816f4:	dd000517 	ldw	r20,20(sp)
   816f8:	dcc00417 	ldw	r19,16(sp)
   816fc:	dc800317 	ldw	r18,12(sp)
   81700:	dc400217 	ldw	r17,8(sp)
   81704:	dc000117 	ldw	r16,4(sp)
   81708:	dec00b04 	addi	sp,sp,44
   8170c:	f800283a 	ret
   81710:	01ffff04 	movi	r7,-4
   81714:	31cc703a 	and	r6,r6,r7
   81718:	34e9883a 	add	r20,r6,r19
   8171c:	a0ffbb16 	blt	r20,r3,8160c <_realloc_r+0xac>
   81720:	20c00317 	ldw	r3,12(r4)
   81724:	21000217 	ldw	r4,8(r4)
   81728:	20c00315 	stw	r3,12(r4)
   8172c:	19000215 	stw	r4,8(r3)
   81730:	003fdd06 	br	816a8 <_realloc_r+0x148>
   81734:	00800304 	movi	r2,12
   81738:	a8800015 	stw	r2,0(r21)
   8173c:	0025883a 	mov	r18,zero
   81740:	003fe606 	br	816dc <_realloc_r+0x17c>
   81744:	1444b03a 	or	r2,r2,r17
   81748:	b0800115 	stw	r2,4(r22)
   8174c:	b44b883a 	add	r5,r22,r17
   81750:	18800054 	ori	r2,r3,1
   81754:	28800115 	stw	r2,4(r5)
   81758:	28c7883a 	add	r3,r5,r3
   8175c:	18800117 	ldw	r2,4(r3)
   81760:	a809883a 	mov	r4,r21
   81764:	29400204 	addi	r5,r5,8
   81768:	10800054 	ori	r2,r2,1
   8176c:	18800115 	stw	r2,4(r3)
   81770:	00823740 	call	82374 <_free_r>
   81774:	003fd606 	br	816d0 <_realloc_r+0x170>
   81778:	38c0330e 	bge	r7,r3,81848 <_realloc_r+0x2e8>
   8177c:	900b883a 	mov	r5,r18
   81780:	a809883a 	mov	r4,r21
   81784:	0080a180 	call	80a18 <_malloc_r>
   81788:	1025883a 	mov	r18,r2
   8178c:	10001626 	beq	r2,zero,817e8 <_realloc_r+0x288>
   81790:	80bfff17 	ldw	r2,-4(r16)
   81794:	00ffff84 	movi	r3,-2
   81798:	913ffe04 	addi	r4,r18,-8
   8179c:	10c6703a 	and	r3,r2,r3
   817a0:	b0c7883a 	add	r3,r22,r3
   817a4:	20c09926 	beq	r4,r3,81a0c <_realloc_r+0x4ac>
   817a8:	99bfff04 	addi	r6,r19,-4
   817ac:	00800904 	movi	r2,36
   817b0:	11806436 	bltu	r2,r6,81944 <_realloc_r+0x3e4>
   817b4:	00c004c4 	movi	r3,19
   817b8:	19804036 	bltu	r3,r6,818bc <_realloc_r+0x35c>
   817bc:	9005883a 	mov	r2,r18
   817c0:	8007883a 	mov	r3,r16
   817c4:	19000017 	ldw	r4,0(r3)
   817c8:	11000015 	stw	r4,0(r2)
   817cc:	19000117 	ldw	r4,4(r3)
   817d0:	11000115 	stw	r4,4(r2)
   817d4:	18c00217 	ldw	r3,8(r3)
   817d8:	10c00215 	stw	r3,8(r2)
   817dc:	a809883a 	mov	r4,r21
   817e0:	800b883a 	mov	r5,r16
   817e4:	00823740 	call	82374 <_free_r>
   817e8:	a809883a 	mov	r4,r21
   817ec:	00835380 	call	83538 <__malloc_unlock>
   817f0:	003fba06 	br	816dc <_realloc_r+0x17c>
   817f4:	300b883a 	mov	r5,r6
   817f8:	dfc00a17 	ldw	ra,40(sp)
   817fc:	df000917 	ldw	fp,36(sp)
   81800:	ddc00817 	ldw	r23,32(sp)
   81804:	dd800717 	ldw	r22,28(sp)
   81808:	dd400617 	ldw	r21,24(sp)
   8180c:	dd000517 	ldw	r20,20(sp)
   81810:	dcc00417 	ldw	r19,16(sp)
   81814:	dc800317 	ldw	r18,12(sp)
   81818:	dc400217 	ldw	r17,8(sp)
   8181c:	dc000117 	ldw	r16,4(sp)
   81820:	dec00b04 	addi	sp,sp,44
   81824:	0080a181 	jmpi	80a18 <_malloc_r>
   81828:	29800117 	ldw	r6,4(r5)
   8182c:	013fff04 	movi	r4,-4
   81830:	89c00404 	addi	r7,r17,16
   81834:	310c703a 	and	r6,r6,r4
   81838:	34c9883a 	add	r4,r6,r19
   8183c:	21c0340e 	bge	r4,r7,81910 <_realloc_r+0x3b0>
   81840:	2809883a 	mov	r4,r5
   81844:	003f7106 	br	8160c <_realloc_r+0xac>
   81848:	b8800317 	ldw	r2,12(r23)
   8184c:	b8c00217 	ldw	r3,8(r23)
   81850:	99bfff04 	addi	r6,r19,-4
   81854:	01000904 	movi	r4,36
   81858:	18800315 	stw	r2,12(r3)
   8185c:	10c00215 	stw	r3,8(r2)
   81860:	bc800204 	addi	r18,r23,8
   81864:	21807836 	bltu	r4,r6,81a48 <_realloc_r+0x4e8>
   81868:	008004c4 	movi	r2,19
   8186c:	1180732e 	bgeu	r2,r6,81a3c <_realloc_r+0x4dc>
   81870:	80800017 	ldw	r2,0(r16)
   81874:	b8800215 	stw	r2,8(r23)
   81878:	80800117 	ldw	r2,4(r16)
   8187c:	b8800315 	stw	r2,12(r23)
   81880:	008006c4 	movi	r2,27
   81884:	11808936 	bltu	r2,r6,81aac <_realloc_r+0x54c>
   81888:	b8800404 	addi	r2,r23,16
   8188c:	80c00204 	addi	r3,r16,8
   81890:	19000017 	ldw	r4,0(r3)
   81894:	9021883a 	mov	r16,r18
   81898:	3829883a 	mov	r20,r7
   8189c:	11000015 	stw	r4,0(r2)
   818a0:	19000117 	ldw	r4,4(r3)
   818a4:	b82d883a 	mov	r22,r23
   818a8:	11000115 	stw	r4,4(r2)
   818ac:	18c00217 	ldw	r3,8(r3)
   818b0:	10c00215 	stw	r3,8(r2)
   818b4:	b8800117 	ldw	r2,4(r23)
   818b8:	003f7b06 	br	816a8 <_realloc_r+0x148>
   818bc:	80c00017 	ldw	r3,0(r16)
   818c0:	90c00015 	stw	r3,0(r18)
   818c4:	80c00117 	ldw	r3,4(r16)
   818c8:	90c00115 	stw	r3,4(r18)
   818cc:	00c006c4 	movi	r3,27
   818d0:	19804636 	bltu	r3,r6,819ec <_realloc_r+0x48c>
   818d4:	90800204 	addi	r2,r18,8
   818d8:	80c00204 	addi	r3,r16,8
   818dc:	003fb906 	br	817c4 <_realloc_r+0x264>
   818e0:	9005883a 	mov	r2,r18
   818e4:	8007883a 	mov	r3,r16
   818e8:	19000017 	ldw	r4,0(r3)
   818ec:	9021883a 	mov	r16,r18
   818f0:	b82d883a 	mov	r22,r23
   818f4:	11000015 	stw	r4,0(r2)
   818f8:	19000117 	ldw	r4,4(r3)
   818fc:	11000115 	stw	r4,4(r2)
   81900:	18c00217 	ldw	r3,8(r3)
   81904:	10c00215 	stw	r3,8(r2)
   81908:	b8800117 	ldw	r2,4(r23)
   8190c:	003f6606 	br	816a8 <_realloc_r+0x148>
   81910:	2445c83a 	sub	r2,r4,r17
   81914:	b46d883a 	add	r22,r22,r17
   81918:	10800054 	ori	r2,r2,1
   8191c:	b0800115 	stw	r2,4(r22)
   81920:	80bfff17 	ldw	r2,-4(r16)
   81924:	a809883a 	mov	r4,r21
   81928:	e5800215 	stw	r22,8(fp)
   8192c:	1080004c 	andi	r2,r2,1
   81930:	88a2b03a 	or	r17,r17,r2
   81934:	847fff15 	stw	r17,-4(r16)
   81938:	00835380 	call	83538 <__malloc_unlock>
   8193c:	8025883a 	mov	r18,r16
   81940:	003f6606 	br	816dc <_realloc_r+0x17c>
   81944:	9009883a 	mov	r4,r18
   81948:	800b883a 	mov	r5,r16
   8194c:	00813d40 	call	813d4 <memmove>
   81950:	003fa206 	br	817dc <_realloc_r+0x27c>
   81954:	88800404 	addi	r2,r17,16
   81958:	a0bf8716 	blt	r20,r2,81778 <_realloc_r+0x218>
   8195c:	b8800317 	ldw	r2,12(r23)
   81960:	b8c00217 	ldw	r3,8(r23)
   81964:	99bfff04 	addi	r6,r19,-4
   81968:	01000904 	movi	r4,36
   8196c:	18800315 	stw	r2,12(r3)
   81970:	10c00215 	stw	r3,8(r2)
   81974:	bc800204 	addi	r18,r23,8
   81978:	21806536 	bltu	r4,r6,81b10 <_realloc_r+0x5b0>
   8197c:	008004c4 	movi	r2,19
   81980:	1180592e 	bgeu	r2,r6,81ae8 <_realloc_r+0x588>
   81984:	80800017 	ldw	r2,0(r16)
   81988:	b8800215 	stw	r2,8(r23)
   8198c:	80800117 	ldw	r2,4(r16)
   81990:	b8800315 	stw	r2,12(r23)
   81994:	008006c4 	movi	r2,27
   81998:	11806136 	bltu	r2,r6,81b20 <_realloc_r+0x5c0>
   8199c:	b8800404 	addi	r2,r23,16
   819a0:	80c00204 	addi	r3,r16,8
   819a4:	19000017 	ldw	r4,0(r3)
   819a8:	11000015 	stw	r4,0(r2)
   819ac:	19000117 	ldw	r4,4(r3)
   819b0:	11000115 	stw	r4,4(r2)
   819b4:	18c00217 	ldw	r3,8(r3)
   819b8:	10c00215 	stw	r3,8(r2)
   819bc:	a447c83a 	sub	r3,r20,r17
   819c0:	bc45883a 	add	r2,r23,r17
   819c4:	18c00054 	ori	r3,r3,1
   819c8:	10c00115 	stw	r3,4(r2)
   819cc:	b8c00117 	ldw	r3,4(r23)
   819d0:	e0800215 	stw	r2,8(fp)
   819d4:	a809883a 	mov	r4,r21
   819d8:	1880004c 	andi	r2,r3,1
   819dc:	88a2b03a 	or	r17,r17,r2
   819e0:	bc400115 	stw	r17,4(r23)
   819e4:	00835380 	call	83538 <__malloc_unlock>
   819e8:	003f3c06 	br	816dc <_realloc_r+0x17c>
   819ec:	80c00217 	ldw	r3,8(r16)
   819f0:	90c00215 	stw	r3,8(r18)
   819f4:	80c00317 	ldw	r3,12(r16)
   819f8:	90c00315 	stw	r3,12(r18)
   819fc:	30802426 	beq	r6,r2,81a90 <_realloc_r+0x530>
   81a00:	90800404 	addi	r2,r18,16
   81a04:	80c00404 	addi	r3,r16,16
   81a08:	003f6e06 	br	817c4 <_realloc_r+0x264>
   81a0c:	953fff17 	ldw	r20,-4(r18)
   81a10:	00ffff04 	movi	r3,-4
   81a14:	a0e8703a 	and	r20,r20,r3
   81a18:	a4e9883a 	add	r20,r20,r19
   81a1c:	003f2206 	br	816a8 <_realloc_r+0x148>
   81a20:	800b883a 	mov	r5,r16
   81a24:	9009883a 	mov	r4,r18
   81a28:	00813d40 	call	813d4 <memmove>
   81a2c:	9021883a 	mov	r16,r18
   81a30:	b8800117 	ldw	r2,4(r23)
   81a34:	b82d883a 	mov	r22,r23
   81a38:	003f1b06 	br	816a8 <_realloc_r+0x148>
   81a3c:	9005883a 	mov	r2,r18
   81a40:	8007883a 	mov	r3,r16
   81a44:	003f9206 	br	81890 <_realloc_r+0x330>
   81a48:	800b883a 	mov	r5,r16
   81a4c:	9009883a 	mov	r4,r18
   81a50:	d9c00015 	stw	r7,0(sp)
   81a54:	00813d40 	call	813d4 <memmove>
   81a58:	d9c00017 	ldw	r7,0(sp)
   81a5c:	9021883a 	mov	r16,r18
   81a60:	b8800117 	ldw	r2,4(r23)
   81a64:	3829883a 	mov	r20,r7
   81a68:	b82d883a 	mov	r22,r23
   81a6c:	003f0e06 	br	816a8 <_realloc_r+0x148>
   81a70:	80800217 	ldw	r2,8(r16)
   81a74:	b8800415 	stw	r2,16(r23)
   81a78:	80800317 	ldw	r2,12(r16)
   81a7c:	b8800515 	stw	r2,20(r23)
   81a80:	31001226 	beq	r6,r4,81acc <_realloc_r+0x56c>
   81a84:	b8800604 	addi	r2,r23,24
   81a88:	80c00404 	addi	r3,r16,16
   81a8c:	003f9606 	br	818e8 <_realloc_r+0x388>
   81a90:	81000417 	ldw	r4,16(r16)
   81a94:	90800604 	addi	r2,r18,24
   81a98:	80c00604 	addi	r3,r16,24
   81a9c:	91000415 	stw	r4,16(r18)
   81aa0:	81000517 	ldw	r4,20(r16)
   81aa4:	91000515 	stw	r4,20(r18)
   81aa8:	003f4606 	br	817c4 <_realloc_r+0x264>
   81aac:	80800217 	ldw	r2,8(r16)
   81ab0:	b8800415 	stw	r2,16(r23)
   81ab4:	80800317 	ldw	r2,12(r16)
   81ab8:	b8800515 	stw	r2,20(r23)
   81abc:	31000d26 	beq	r6,r4,81af4 <_realloc_r+0x594>
   81ac0:	b8800604 	addi	r2,r23,24
   81ac4:	80c00404 	addi	r3,r16,16
   81ac8:	003f7106 	br	81890 <_realloc_r+0x330>
   81acc:	81000417 	ldw	r4,16(r16)
   81ad0:	b8800804 	addi	r2,r23,32
   81ad4:	80c00604 	addi	r3,r16,24
   81ad8:	b9000615 	stw	r4,24(r23)
   81adc:	81000517 	ldw	r4,20(r16)
   81ae0:	b9000715 	stw	r4,28(r23)
   81ae4:	003f8006 	br	818e8 <_realloc_r+0x388>
   81ae8:	9005883a 	mov	r2,r18
   81aec:	8007883a 	mov	r3,r16
   81af0:	003fac06 	br	819a4 <_realloc_r+0x444>
   81af4:	81000417 	ldw	r4,16(r16)
   81af8:	b8800804 	addi	r2,r23,32
   81afc:	80c00604 	addi	r3,r16,24
   81b00:	b9000615 	stw	r4,24(r23)
   81b04:	81000517 	ldw	r4,20(r16)
   81b08:	b9000715 	stw	r4,28(r23)
   81b0c:	003f6006 	br	81890 <_realloc_r+0x330>
   81b10:	9009883a 	mov	r4,r18
   81b14:	800b883a 	mov	r5,r16
   81b18:	00813d40 	call	813d4 <memmove>
   81b1c:	003fa706 	br	819bc <_realloc_r+0x45c>
   81b20:	80800217 	ldw	r2,8(r16)
   81b24:	b8800415 	stw	r2,16(r23)
   81b28:	80800317 	ldw	r2,12(r16)
   81b2c:	b8800515 	stw	r2,20(r23)
   81b30:	31000326 	beq	r6,r4,81b40 <_realloc_r+0x5e0>
   81b34:	b8800604 	addi	r2,r23,24
   81b38:	80c00404 	addi	r3,r16,16
   81b3c:	003f9906 	br	819a4 <_realloc_r+0x444>
   81b40:	81000417 	ldw	r4,16(r16)
   81b44:	b8800804 	addi	r2,r23,32
   81b48:	80c00604 	addi	r3,r16,24
   81b4c:	b9000615 	stw	r4,24(r23)
   81b50:	81000517 	ldw	r4,20(r16)
   81b54:	b9000715 	stw	r4,28(r23)
   81b58:	003f9206 	br	819a4 <_realloc_r+0x444>

00081b5c <_sbrk_r>:
   81b5c:	defffd04 	addi	sp,sp,-12
   81b60:	dc400115 	stw	r17,4(sp)
   81b64:	dc000015 	stw	r16,0(sp)
   81b68:	2023883a 	mov	r17,r4
   81b6c:	04000274 	movhi	r16,9
   81b70:	84260804 	addi	r16,r16,-26592
   81b74:	2809883a 	mov	r4,r5
   81b78:	dfc00215 	stw	ra,8(sp)
   81b7c:	80000015 	stw	zero,0(r16)
   81b80:	00837600 	call	83760 <sbrk>
   81b84:	00ffffc4 	movi	r3,-1
   81b88:	10c00526 	beq	r2,r3,81ba0 <_sbrk_r+0x44>
   81b8c:	dfc00217 	ldw	ra,8(sp)
   81b90:	dc400117 	ldw	r17,4(sp)
   81b94:	dc000017 	ldw	r16,0(sp)
   81b98:	dec00304 	addi	sp,sp,12
   81b9c:	f800283a 	ret
   81ba0:	80c00017 	ldw	r3,0(r16)
   81ba4:	183ff926 	beq	r3,zero,81b8c <_sbrk_r+0x30>
   81ba8:	88c00015 	stw	r3,0(r17)
   81bac:	dfc00217 	ldw	ra,8(sp)
   81bb0:	dc400117 	ldw	r17,4(sp)
   81bb4:	dc000017 	ldw	r16,0(sp)
   81bb8:	dec00304 	addi	sp,sp,12
   81bbc:	f800283a 	ret

00081bc0 <__swsetup_r>:
   81bc0:	00800234 	movhi	r2,8
   81bc4:	109f3204 	addi	r2,r2,31944
   81bc8:	10800017 	ldw	r2,0(r2)
   81bcc:	defffd04 	addi	sp,sp,-12
   81bd0:	dc400115 	stw	r17,4(sp)
   81bd4:	dc000015 	stw	r16,0(sp)
   81bd8:	dfc00215 	stw	ra,8(sp)
   81bdc:	2023883a 	mov	r17,r4
   81be0:	2821883a 	mov	r16,r5
   81be4:	10000226 	beq	r2,zero,81bf0 <__swsetup_r+0x30>
   81be8:	10c00e17 	ldw	r3,56(r2)
   81bec:	18003d26 	beq	r3,zero,81ce4 <__swsetup_r+0x124>
   81bf0:	8080030b 	ldhu	r2,12(r16)
   81bf4:	10c0020c 	andi	r3,r2,8
   81bf8:	18ffffcc 	andi	r3,r3,65535
   81bfc:	18e0001c 	xori	r3,r3,32768
   81c00:	18e00004 	addi	r3,r3,-32768
   81c04:	18001226 	beq	r3,zero,81c50 <__swsetup_r+0x90>
   81c08:	80c00417 	ldw	r3,16(r16)
   81c0c:	18001f26 	beq	r3,zero,81c8c <__swsetup_r+0xcc>
   81c10:	1100004c 	andi	r4,r2,1
   81c14:	2000261e 	bne	r4,zero,81cb0 <__swsetup_r+0xf0>
   81c18:	1080008c 	andi	r2,r2,2
   81c1c:	10bfffcc 	andi	r2,r2,65535
   81c20:	10a0001c 	xori	r2,r2,32768
   81c24:	10a00004 	addi	r2,r2,-32768
   81c28:	1000311e 	bne	r2,zero,81cf0 <__swsetup_r+0x130>
   81c2c:	80800517 	ldw	r2,20(r16)
   81c30:	80800215 	stw	r2,8(r16)
   81c34:	18002326 	beq	r3,zero,81cc4 <__swsetup_r+0x104>
   81c38:	0005883a 	mov	r2,zero
   81c3c:	dfc00217 	ldw	ra,8(sp)
   81c40:	dc400117 	ldw	r17,4(sp)
   81c44:	dc000017 	ldw	r16,0(sp)
   81c48:	dec00304 	addi	sp,sp,12
   81c4c:	f800283a 	ret
   81c50:	10c0040c 	andi	r3,r2,16
   81c54:	18ffffcc 	andi	r3,r3,65535
   81c58:	18e0001c 	xori	r3,r3,32768
   81c5c:	18e00004 	addi	r3,r3,-32768
   81c60:	18001e26 	beq	r3,zero,81cdc <__swsetup_r+0x11c>
   81c64:	10c0010c 	andi	r3,r2,4
   81c68:	18ffffcc 	andi	r3,r3,65535
   81c6c:	18e0001c 	xori	r3,r3,32768
   81c70:	18e00004 	addi	r3,r3,-32768
   81c74:	1800211e 	bne	r3,zero,81cfc <__swsetup_r+0x13c>
   81c78:	80c00417 	ldw	r3,16(r16)
   81c7c:	11400214 	ori	r5,r2,8
   81c80:	8140030d 	sth	r5,12(r16)
   81c84:	2805883a 	mov	r2,r5
   81c88:	183fe11e 	bne	r3,zero,81c10 <__swsetup_r+0x50>
   81c8c:	1140a00c 	andi	r5,r2,640
   81c90:	01008004 	movi	r4,512
   81c94:	293fde26 	beq	r5,r4,81c10 <__swsetup_r+0x50>
   81c98:	8809883a 	mov	r4,r17
   81c9c:	800b883a 	mov	r5,r16
   81ca0:	00827a40 	call	827a4 <__smakebuf_r>
   81ca4:	8080030b 	ldhu	r2,12(r16)
   81ca8:	80c00417 	ldw	r3,16(r16)
   81cac:	003fd806 	br	81c10 <__swsetup_r+0x50>
   81cb0:	80800517 	ldw	r2,20(r16)
   81cb4:	80000215 	stw	zero,8(r16)
   81cb8:	0085c83a 	sub	r2,zero,r2
   81cbc:	80800615 	stw	r2,24(r16)
   81cc0:	183fdd1e 	bne	r3,zero,81c38 <__swsetup_r+0x78>
   81cc4:	8080030b 	ldhu	r2,12(r16)
   81cc8:	1080200c 	andi	r2,r2,128
   81ccc:	10bfffcc 	andi	r2,r2,65535
   81cd0:	10a0001c 	xori	r2,r2,32768
   81cd4:	10a00004 	addi	r2,r2,-32768
   81cd8:	103fd826 	beq	r2,zero,81c3c <__swsetup_r+0x7c>
   81cdc:	00bfffc4 	movi	r2,-1
   81ce0:	003fd606 	br	81c3c <__swsetup_r+0x7c>
   81ce4:	1009883a 	mov	r4,r2
   81ce8:	0081ff00 	call	81ff0 <__sinit>
   81cec:	003fc006 	br	81bf0 <__swsetup_r+0x30>
   81cf0:	0005883a 	mov	r2,zero
   81cf4:	80800215 	stw	r2,8(r16)
   81cf8:	003fce06 	br	81c34 <__swsetup_r+0x74>
   81cfc:	81400c17 	ldw	r5,48(r16)
   81d00:	28000626 	beq	r5,zero,81d1c <__swsetup_r+0x15c>
   81d04:	80c01004 	addi	r3,r16,64
   81d08:	28c00326 	beq	r5,r3,81d18 <__swsetup_r+0x158>
   81d0c:	8809883a 	mov	r4,r17
   81d10:	00823740 	call	82374 <_free_r>
   81d14:	8080030b 	ldhu	r2,12(r16)
   81d18:	80000c15 	stw	zero,48(r16)
   81d1c:	80c00417 	ldw	r3,16(r16)
   81d20:	013ff6c4 	movi	r4,-37
   81d24:	2084703a 	and	r2,r4,r2
   81d28:	80000115 	stw	zero,4(r16)
   81d2c:	80c00015 	stw	r3,0(r16)
   81d30:	003fd206 	br	81c7c <__swsetup_r+0xbc>

00081d34 <_fflush_r>:
   81d34:	defffb04 	addi	sp,sp,-20
   81d38:	dcc00315 	stw	r19,12(sp)
   81d3c:	dc400115 	stw	r17,4(sp)
   81d40:	dfc00415 	stw	ra,16(sp)
   81d44:	dc800215 	stw	r18,8(sp)
   81d48:	dc000015 	stw	r16,0(sp)
   81d4c:	2027883a 	mov	r19,r4
   81d50:	2823883a 	mov	r17,r5
   81d54:	20000226 	beq	r4,zero,81d60 <_fflush_r+0x2c>
   81d58:	20800e17 	ldw	r2,56(r4)
   81d5c:	10005726 	beq	r2,zero,81ebc <_fflush_r+0x188>
   81d60:	8880030b 	ldhu	r2,12(r17)
   81d64:	10c0020c 	andi	r3,r2,8
   81d68:	18ffffcc 	andi	r3,r3,65535
   81d6c:	18e0001c 	xori	r3,r3,32768
   81d70:	18e00004 	addi	r3,r3,-32768
   81d74:	1800311e 	bne	r3,zero,81e3c <_fflush_r+0x108>
   81d78:	89000117 	ldw	r4,4(r17)
   81d7c:	10c20014 	ori	r3,r2,2048
   81d80:	88c0030d 	sth	r3,12(r17)
   81d84:	180b883a 	mov	r5,r3
   81d88:	0100520e 	bge	zero,r4,81ed4 <_fflush_r+0x1a0>
   81d8c:	88c00a17 	ldw	r3,40(r17)
   81d90:	18002226 	beq	r3,zero,81e1c <_fflush_r+0xe8>
   81d94:	1084000c 	andi	r2,r2,4096
   81d98:	10bfffcc 	andi	r2,r2,65535
   81d9c:	10a0001c 	xori	r2,r2,32768
   81da0:	10a00004 	addi	r2,r2,-32768
   81da4:	10004e26 	beq	r2,zero,81ee0 <_fflush_r+0x1ac>
   81da8:	8c001417 	ldw	r16,80(r17)
   81dac:	2940010c 	andi	r5,r5,4
   81db0:	297fffcc 	andi	r5,r5,65535
   81db4:	2960001c 	xori	r5,r5,32768
   81db8:	29600004 	addi	r5,r5,-32768
   81dbc:	28000626 	beq	r5,zero,81dd8 <_fflush_r+0xa4>
   81dc0:	89000117 	ldw	r4,4(r17)
   81dc4:	88800c17 	ldw	r2,48(r17)
   81dc8:	8121c83a 	sub	r16,r16,r4
   81dcc:	10000226 	beq	r2,zero,81dd8 <_fflush_r+0xa4>
   81dd0:	88800f17 	ldw	r2,60(r17)
   81dd4:	80a1c83a 	sub	r16,r16,r2
   81dd8:	89400717 	ldw	r5,28(r17)
   81ddc:	9809883a 	mov	r4,r19
   81de0:	800d883a 	mov	r6,r16
   81de4:	000f883a 	mov	r7,zero
   81de8:	183ee83a 	callr	r3
   81dec:	8080281e 	bne	r16,r2,81e90 <_fflush_r+0x15c>
   81df0:	8880030b 	ldhu	r2,12(r17)
   81df4:	88c00417 	ldw	r3,16(r17)
   81df8:	88000115 	stw	zero,4(r17)
   81dfc:	113dffcc 	andi	r4,r2,63487
   81e00:	1084000c 	andi	r2,r2,4096
   81e04:	10bfffcc 	andi	r2,r2,65535
   81e08:	10a0001c 	xori	r2,r2,32768
   81e0c:	8900030d 	sth	r4,12(r17)
   81e10:	88c00015 	stw	r3,0(r17)
   81e14:	10a00004 	addi	r2,r2,-32768
   81e18:	10002c1e 	bne	r2,zero,81ecc <_fflush_r+0x198>
   81e1c:	0005883a 	mov	r2,zero
   81e20:	dfc00417 	ldw	ra,16(sp)
   81e24:	dcc00317 	ldw	r19,12(sp)
   81e28:	dc800217 	ldw	r18,8(sp)
   81e2c:	dc400117 	ldw	r17,4(sp)
   81e30:	dc000017 	ldw	r16,0(sp)
   81e34:	dec00504 	addi	sp,sp,20
   81e38:	f800283a 	ret
   81e3c:	8c800417 	ldw	r18,16(r17)
   81e40:	903ff626 	beq	r18,zero,81e1c <_fflush_r+0xe8>
   81e44:	8c000017 	ldw	r16,0(r17)
   81e48:	108000cc 	andi	r2,r2,3
   81e4c:	8c800015 	stw	r18,0(r17)
   81e50:	84a1c83a 	sub	r16,r16,r18
   81e54:	10001b1e 	bne	r2,zero,81ec4 <_fflush_r+0x190>
   81e58:	88800517 	ldw	r2,20(r17)
   81e5c:	88800215 	stw	r2,8(r17)
   81e60:	04000316 	blt	zero,r16,81e70 <_fflush_r+0x13c>
   81e64:	003fed06 	br	81e1c <_fflush_r+0xe8>
   81e68:	90a5883a 	add	r18,r18,r2
   81e6c:	043feb0e 	bge	zero,r16,81e1c <_fflush_r+0xe8>
   81e70:	88800917 	ldw	r2,36(r17)
   81e74:	89400717 	ldw	r5,28(r17)
   81e78:	800f883a 	mov	r7,r16
   81e7c:	900d883a 	mov	r6,r18
   81e80:	9809883a 	mov	r4,r19
   81e84:	103ee83a 	callr	r2
   81e88:	80a1c83a 	sub	r16,r16,r2
   81e8c:	00bff616 	blt	zero,r2,81e68 <_fflush_r+0x134>
   81e90:	88c0030b 	ldhu	r3,12(r17)
   81e94:	00bfffc4 	movi	r2,-1
   81e98:	18c01014 	ori	r3,r3,64
   81e9c:	88c0030d 	sth	r3,12(r17)
   81ea0:	dfc00417 	ldw	ra,16(sp)
   81ea4:	dcc00317 	ldw	r19,12(sp)
   81ea8:	dc800217 	ldw	r18,8(sp)
   81eac:	dc400117 	ldw	r17,4(sp)
   81eb0:	dc000017 	ldw	r16,0(sp)
   81eb4:	dec00504 	addi	sp,sp,20
   81eb8:	f800283a 	ret
   81ebc:	0081ff00 	call	81ff0 <__sinit>
   81ec0:	003fa706 	br	81d60 <_fflush_r+0x2c>
   81ec4:	0005883a 	mov	r2,zero
   81ec8:	003fe406 	br	81e5c <_fflush_r+0x128>
   81ecc:	8c001415 	stw	r16,80(r17)
   81ed0:	003fd206 	br	81e1c <_fflush_r+0xe8>
   81ed4:	88c00f17 	ldw	r3,60(r17)
   81ed8:	00ffac16 	blt	zero,r3,81d8c <_fflush_r+0x58>
   81edc:	003fcf06 	br	81e1c <_fflush_r+0xe8>
   81ee0:	89400717 	ldw	r5,28(r17)
   81ee4:	9809883a 	mov	r4,r19
   81ee8:	000d883a 	mov	r6,zero
   81eec:	01c00044 	movi	r7,1
   81ef0:	183ee83a 	callr	r3
   81ef4:	1021883a 	mov	r16,r2
   81ef8:	00bfffc4 	movi	r2,-1
   81efc:	80800326 	beq	r16,r2,81f0c <_fflush_r+0x1d8>
   81f00:	8940030b 	ldhu	r5,12(r17)
   81f04:	88c00a17 	ldw	r3,40(r17)
   81f08:	003fa806 	br	81dac <_fflush_r+0x78>
   81f0c:	98c00017 	ldw	r3,0(r19)
   81f10:	00800744 	movi	r2,29
   81f14:	18bfde1e 	bne	r3,r2,81e90 <_fflush_r+0x15c>
   81f18:	003fc006 	br	81e1c <_fflush_r+0xe8>

00081f1c <fflush>:
   81f1c:	200b883a 	mov	r5,r4
   81f20:	20000426 	beq	r4,zero,81f34 <fflush+0x18>
   81f24:	00800234 	movhi	r2,8
   81f28:	109f3204 	addi	r2,r2,31944
   81f2c:	11000017 	ldw	r4,0(r2)
   81f30:	0081d341 	jmpi	81d34 <_fflush_r>
   81f34:	00800234 	movhi	r2,8
   81f38:	109f3104 	addi	r2,r2,31940
   81f3c:	11000017 	ldw	r4,0(r2)
   81f40:	01400234 	movhi	r5,8
   81f44:	29474d04 	addi	r5,r5,7476
   81f48:	00826ec1 	jmpi	826ec <_fwalk_reent>

00081f4c <__fp_lock>:
   81f4c:	0005883a 	mov	r2,zero
   81f50:	f800283a 	ret

00081f54 <__fp_unlock>:
   81f54:	0005883a 	mov	r2,zero
   81f58:	f800283a 	ret

00081f5c <_cleanup_r>:
   81f5c:	01400234 	movhi	r5,8
   81f60:	294b5d04 	addi	r5,r5,11636
   81f64:	00826441 	jmpi	82644 <_fwalk>

00081f68 <__sfmoreglue>:
   81f68:	defffc04 	addi	sp,sp,-16
   81f6c:	dc800215 	stw	r18,8(sp)
   81f70:	2825883a 	mov	r18,r5
   81f74:	dc000015 	stw	r16,0(sp)
   81f78:	01401704 	movi	r5,92
   81f7c:	2021883a 	mov	r16,r4
   81f80:	9009883a 	mov	r4,r18
   81f84:	dfc00315 	stw	ra,12(sp)
   81f88:	dc400115 	stw	r17,4(sp)
   81f8c:	0082f2c0 	call	82f2c <__mulsi3>
   81f90:	8009883a 	mov	r4,r16
   81f94:	11400304 	addi	r5,r2,12
   81f98:	1023883a 	mov	r17,r2
   81f9c:	0080a180 	call	80a18 <_malloc_r>
   81fa0:	1021883a 	mov	r16,r2
   81fa4:	10000726 	beq	r2,zero,81fc4 <__sfmoreglue+0x5c>
   81fa8:	11000304 	addi	r4,r2,12
   81fac:	10000015 	stw	zero,0(r2)
   81fb0:	14800115 	stw	r18,4(r2)
   81fb4:	11000215 	stw	r4,8(r2)
   81fb8:	000b883a 	mov	r5,zero
   81fbc:	880d883a 	mov	r6,r17
   81fc0:	008294c0 	call	8294c <memset>
   81fc4:	8005883a 	mov	r2,r16
   81fc8:	dfc00317 	ldw	ra,12(sp)
   81fcc:	dc800217 	ldw	r18,8(sp)
   81fd0:	dc400117 	ldw	r17,4(sp)
   81fd4:	dc000017 	ldw	r16,0(sp)
   81fd8:	dec00404 	addi	sp,sp,16
   81fdc:	f800283a 	ret

00081fe0 <_cleanup>:
   81fe0:	00800234 	movhi	r2,8
   81fe4:	109f3104 	addi	r2,r2,31940
   81fe8:	11000017 	ldw	r4,0(r2)
   81fec:	0081f5c1 	jmpi	81f5c <_cleanup_r>

00081ff0 <__sinit>:
   81ff0:	20800e17 	ldw	r2,56(r4)
   81ff4:	1000401e 	bne	r2,zero,820f8 <__sinit+0x108>
   81ff8:	21400117 	ldw	r5,4(r4)
   81ffc:	01800234 	movhi	r6,8
   82000:	3187d704 	addi	r6,r6,8028
   82004:	20c00217 	ldw	r3,8(r4)
   82008:	21800f15 	stw	r6,60(r4)
   8200c:	2080bb04 	addi	r2,r4,748
   82010:	02400044 	movi	r9,1
   82014:	018000c4 	movi	r6,3
   82018:	2180b915 	stw	r6,740(r4)
   8201c:	2080ba15 	stw	r2,744(r4)
   82020:	22400e15 	stw	r9,56(r4)
   82024:	20800317 	ldw	r2,12(r4)
   82028:	2000b815 	stw	zero,736(r4)
   8202c:	02000234 	movhi	r8,8
   82030:	420a8a04 	addi	r8,r8,10792
   82034:	01c00234 	movhi	r7,8
   82038:	39ca9f04 	addi	r7,r7,10876
   8203c:	01800234 	movhi	r6,8
   82040:	318ac104 	addi	r6,r6,11012
   82044:	01000234 	movhi	r4,8
   82048:	210ad804 	addi	r4,r4,11104
   8204c:	02800104 	movi	r10,4
   82050:	28000015 	stw	zero,0(r5)
   82054:	28000115 	stw	zero,4(r5)
   82058:	28000215 	stw	zero,8(r5)
   8205c:	2a80030d 	sth	r10,12(r5)
   82060:	2800038d 	sth	zero,14(r5)
   82064:	28000415 	stw	zero,16(r5)
   82068:	28000515 	stw	zero,20(r5)
   8206c:	28000615 	stw	zero,24(r5)
   82070:	29400715 	stw	r5,28(r5)
   82074:	2a000815 	stw	r8,32(r5)
   82078:	29c00915 	stw	r7,36(r5)
   8207c:	29800a15 	stw	r6,40(r5)
   82080:	29000b15 	stw	r4,44(r5)
   82084:	01400284 	movi	r5,10
   82088:	18000015 	stw	zero,0(r3)
   8208c:	18000115 	stw	zero,4(r3)
   82090:	18000215 	stw	zero,8(r3)
   82094:	1940030d 	sth	r5,12(r3)
   82098:	1a40038d 	sth	r9,14(r3)
   8209c:	18000415 	stw	zero,16(r3)
   820a0:	18000515 	stw	zero,20(r3)
   820a4:	18000615 	stw	zero,24(r3)
   820a8:	18c00715 	stw	r3,28(r3)
   820ac:	1a000815 	stw	r8,32(r3)
   820b0:	19c00915 	stw	r7,36(r3)
   820b4:	19800a15 	stw	r6,40(r3)
   820b8:	19000b15 	stw	r4,44(r3)
   820bc:	00c00484 	movi	r3,18
   820c0:	10c0030d 	sth	r3,12(r2)
   820c4:	00c00084 	movi	r3,2
   820c8:	10000015 	stw	zero,0(r2)
   820cc:	10000115 	stw	zero,4(r2)
   820d0:	10000215 	stw	zero,8(r2)
   820d4:	10c0038d 	sth	r3,14(r2)
   820d8:	10000415 	stw	zero,16(r2)
   820dc:	10000515 	stw	zero,20(r2)
   820e0:	10000615 	stw	zero,24(r2)
   820e4:	10800715 	stw	r2,28(r2)
   820e8:	12000815 	stw	r8,32(r2)
   820ec:	11c00915 	stw	r7,36(r2)
   820f0:	11800a15 	stw	r6,40(r2)
   820f4:	11000b15 	stw	r4,44(r2)
   820f8:	f800283a 	ret

000820fc <__sfp>:
   820fc:	defffc04 	addi	sp,sp,-16
   82100:	00800234 	movhi	r2,8
   82104:	109f3104 	addi	r2,r2,31940
   82108:	dc400115 	stw	r17,4(sp)
   8210c:	14400017 	ldw	r17,0(r2)
   82110:	dc800215 	stw	r18,8(sp)
   82114:	dfc00315 	stw	ra,12(sp)
   82118:	88800e17 	ldw	r2,56(r17)
   8211c:	dc000015 	stw	r16,0(sp)
   82120:	2025883a 	mov	r18,r4
   82124:	10002826 	beq	r2,zero,821c8 <__sfp+0xcc>
   82128:	8c40b804 	addi	r17,r17,736
   8212c:	043fffc4 	movi	r16,-1
   82130:	89400117 	ldw	r5,4(r17)
   82134:	88800217 	ldw	r2,8(r17)
   82138:	297fffc4 	addi	r5,r5,-1
   8213c:	28000a16 	blt	r5,zero,82168 <__sfp+0x6c>
   82140:	10c0030f 	ldh	r3,12(r2)
   82144:	18000c26 	beq	r3,zero,82178 <__sfp+0x7c>
   82148:	10c01a04 	addi	r3,r2,104
   8214c:	00000206 	br	82158 <__sfp+0x5c>
   82150:	19bfe90f 	ldh	r6,-92(r3)
   82154:	30000826 	beq	r6,zero,82178 <__sfp+0x7c>
   82158:	297fffc4 	addi	r5,r5,-1
   8215c:	18bffd04 	addi	r2,r3,-12
   82160:	18c01704 	addi	r3,r3,92
   82164:	2c3ffa1e 	bne	r5,r16,82150 <__sfp+0x54>
   82168:	88800017 	ldw	r2,0(r17)
   8216c:	10001926 	beq	r2,zero,821d4 <__sfp+0xd8>
   82170:	1023883a 	mov	r17,r2
   82174:	003fee06 	br	82130 <__sfp+0x34>
   82178:	00ffffc4 	movi	r3,-1
   8217c:	10c0038d 	sth	r3,14(r2)
   82180:	00c00044 	movi	r3,1
   82184:	10c0030d 	sth	r3,12(r2)
   82188:	10000015 	stw	zero,0(r2)
   8218c:	10000215 	stw	zero,8(r2)
   82190:	10000115 	stw	zero,4(r2)
   82194:	10000415 	stw	zero,16(r2)
   82198:	10000515 	stw	zero,20(r2)
   8219c:	10000615 	stw	zero,24(r2)
   821a0:	10000c15 	stw	zero,48(r2)
   821a4:	10000d15 	stw	zero,52(r2)
   821a8:	10001115 	stw	zero,68(r2)
   821ac:	10001215 	stw	zero,72(r2)
   821b0:	dfc00317 	ldw	ra,12(sp)
   821b4:	dc800217 	ldw	r18,8(sp)
   821b8:	dc400117 	ldw	r17,4(sp)
   821bc:	dc000017 	ldw	r16,0(sp)
   821c0:	dec00404 	addi	sp,sp,16
   821c4:	f800283a 	ret
   821c8:	8809883a 	mov	r4,r17
   821cc:	0081ff00 	call	81ff0 <__sinit>
   821d0:	003fd506 	br	82128 <__sfp+0x2c>
   821d4:	9009883a 	mov	r4,r18
   821d8:	01400104 	movi	r5,4
   821dc:	0081f680 	call	81f68 <__sfmoreglue>
   821e0:	88800015 	stw	r2,0(r17)
   821e4:	103fe21e 	bne	r2,zero,82170 <__sfp+0x74>
   821e8:	00800304 	movi	r2,12
   821ec:	90800015 	stw	r2,0(r18)
   821f0:	0005883a 	mov	r2,zero
   821f4:	003fee06 	br	821b0 <__sfp+0xb4>

000821f8 <__sfp_lock_acquire>:
   821f8:	f800283a 	ret

000821fc <__sfp_lock_release>:
   821fc:	f800283a 	ret

00082200 <__sinit_lock_acquire>:
   82200:	f800283a 	ret

00082204 <__sinit_lock_release>:
   82204:	f800283a 	ret

00082208 <__fp_lock_all>:
   82208:	00800234 	movhi	r2,8
   8220c:	109f3204 	addi	r2,r2,31944
   82210:	11000017 	ldw	r4,0(r2)
   82214:	01400234 	movhi	r5,8
   82218:	2947d304 	addi	r5,r5,8012
   8221c:	00826441 	jmpi	82644 <_fwalk>

00082220 <__fp_unlock_all>:
   82220:	00800234 	movhi	r2,8
   82224:	109f3204 	addi	r2,r2,31944
   82228:	11000017 	ldw	r4,0(r2)
   8222c:	01400234 	movhi	r5,8
   82230:	2947d504 	addi	r5,r5,8020
   82234:	00826441 	jmpi	82644 <_fwalk>

00082238 <_malloc_trim_r>:
   82238:	defffb04 	addi	sp,sp,-20
   8223c:	dcc00315 	stw	r19,12(sp)
   82240:	dc800215 	stw	r18,8(sp)
   82244:	dc400115 	stw	r17,4(sp)
   82248:	dc000015 	stw	r16,0(sp)
   8224c:	2827883a 	mov	r19,r5
   82250:	dfc00415 	stw	ra,16(sp)
   82254:	04400234 	movhi	r17,8
   82258:	8c597c04 	addi	r17,r17,26096
   8225c:	2021883a 	mov	r16,r4
   82260:	00835180 	call	83518 <__malloc_lock>
   82264:	88800217 	ldw	r2,8(r17)
   82268:	14800117 	ldw	r18,4(r2)
   8226c:	00bfff04 	movi	r2,-4
   82270:	90a4703a 	and	r18,r18,r2
   82274:	9083fbc4 	addi	r2,r18,4079
   82278:	14e7c83a 	sub	r19,r2,r19
   8227c:	9826d33a 	srli	r19,r19,12
   82280:	0083ffc4 	movi	r2,4095
   82284:	9cffffc4 	addi	r19,r19,-1
   82288:	9826933a 	slli	r19,r19,12
   8228c:	14c0060e 	bge	r2,r19,822a8 <_malloc_trim_r+0x70>
   82290:	8009883a 	mov	r4,r16
   82294:	000b883a 	mov	r5,zero
   82298:	0081b5c0 	call	81b5c <_sbrk_r>
   8229c:	88c00217 	ldw	r3,8(r17)
   822a0:	1c87883a 	add	r3,r3,r18
   822a4:	10c00a26 	beq	r2,r3,822d0 <_malloc_trim_r+0x98>
   822a8:	8009883a 	mov	r4,r16
   822ac:	00835380 	call	83538 <__malloc_unlock>
   822b0:	0005883a 	mov	r2,zero
   822b4:	dfc00417 	ldw	ra,16(sp)
   822b8:	dcc00317 	ldw	r19,12(sp)
   822bc:	dc800217 	ldw	r18,8(sp)
   822c0:	dc400117 	ldw	r17,4(sp)
   822c4:	dc000017 	ldw	r16,0(sp)
   822c8:	dec00504 	addi	sp,sp,20
   822cc:	f800283a 	ret
   822d0:	8009883a 	mov	r4,r16
   822d4:	04cbc83a 	sub	r5,zero,r19
   822d8:	0081b5c0 	call	81b5c <_sbrk_r>
   822dc:	00ffffc4 	movi	r3,-1
   822e0:	10c01326 	beq	r2,r3,82330 <_malloc_trim_r+0xf8>
   822e4:	00800274 	movhi	r2,9
   822e8:	10a60f04 	addi	r2,r2,-26564
   822ec:	11000017 	ldw	r4,0(r2)
   822f0:	88c00217 	ldw	r3,8(r17)
   822f4:	94e5c83a 	sub	r18,r18,r19
   822f8:	94800054 	ori	r18,r18,1
   822fc:	24e7c83a 	sub	r19,r4,r19
   82300:	1c800115 	stw	r18,4(r3)
   82304:	8009883a 	mov	r4,r16
   82308:	14c00015 	stw	r19,0(r2)
   8230c:	00835380 	call	83538 <__malloc_unlock>
   82310:	00800044 	movi	r2,1
   82314:	dfc00417 	ldw	ra,16(sp)
   82318:	dcc00317 	ldw	r19,12(sp)
   8231c:	dc800217 	ldw	r18,8(sp)
   82320:	dc400117 	ldw	r17,4(sp)
   82324:	dc000017 	ldw	r16,0(sp)
   82328:	dec00504 	addi	sp,sp,20
   8232c:	f800283a 	ret
   82330:	8009883a 	mov	r4,r16
   82334:	000b883a 	mov	r5,zero
   82338:	0081b5c0 	call	81b5c <_sbrk_r>
   8233c:	88c00217 	ldw	r3,8(r17)
   82340:	014003c4 	movi	r5,15
   82344:	10c9c83a 	sub	r4,r2,r3
   82348:	293fd70e 	bge	r5,r4,822a8 <_malloc_trim_r+0x70>
   8234c:	01400234 	movhi	r5,8
   82350:	295f3304 	addi	r5,r5,31948
   82354:	29400017 	ldw	r5,0(r5)
   82358:	21000054 	ori	r4,r4,1
   8235c:	19000115 	stw	r4,4(r3)
   82360:	1145c83a 	sub	r2,r2,r5
   82364:	01400274 	movhi	r5,9
   82368:	29660f04 	addi	r5,r5,-26564
   8236c:	28800015 	stw	r2,0(r5)
   82370:	003fcd06 	br	822a8 <_malloc_trim_r+0x70>

00082374 <_free_r>:
   82374:	defffd04 	addi	sp,sp,-12
   82378:	dc400115 	stw	r17,4(sp)
   8237c:	dc000015 	stw	r16,0(sp)
   82380:	dfc00215 	stw	ra,8(sp)
   82384:	2821883a 	mov	r16,r5
   82388:	2023883a 	mov	r17,r4
   8238c:	28004b26 	beq	r5,zero,824bc <_free_r+0x148>
   82390:	00835180 	call	83518 <__malloc_lock>
   82394:	823fff17 	ldw	r8,-4(r16)
   82398:	00bfff84 	movi	r2,-2
   8239c:	81bffe04 	addi	r6,r16,-8
   823a0:	4084703a 	and	r2,r8,r2
   823a4:	3087883a 	add	r3,r6,r2
   823a8:	01400234 	movhi	r5,8
   823ac:	29597c04 	addi	r5,r5,26096
   823b0:	1a400117 	ldw	r9,4(r3)
   823b4:	29000217 	ldw	r4,8(r5)
   823b8:	01ffff04 	movi	r7,-4
   823bc:	49ce703a 	and	r7,r9,r7
   823c0:	20c06526 	beq	r4,r3,82558 <_free_r+0x1e4>
   823c4:	19c00115 	stw	r7,4(r3)
   823c8:	4200004c 	andi	r8,r8,1
   823cc:	40003026 	beq	r8,zero,82490 <_free_r+0x11c>
   823d0:	0009883a 	mov	r4,zero
   823d4:	19d1883a 	add	r8,r3,r7
   823d8:	42000117 	ldw	r8,4(r8)
   823dc:	4200004c 	andi	r8,r8,1
   823e0:	4000061e 	bne	r8,zero,823fc <_free_r+0x88>
   823e4:	11c5883a 	add	r2,r2,r7
   823e8:	19c00217 	ldw	r7,8(r3)
   823ec:	20004e26 	beq	r4,zero,82528 <_free_r+0x1b4>
   823f0:	18c00317 	ldw	r3,12(r3)
   823f4:	38c00315 	stw	r3,12(r7)
   823f8:	19c00215 	stw	r7,8(r3)
   823fc:	11c00054 	ori	r7,r2,1
   82400:	3087883a 	add	r3,r6,r2
   82404:	31c00115 	stw	r7,4(r6)
   82408:	18800015 	stw	r2,0(r3)
   8240c:	20001a1e 	bne	r4,zero,82478 <_free_r+0x104>
   82410:	00c07fc4 	movi	r3,511
   82414:	18802e2e 	bgeu	r3,r2,824d0 <_free_r+0x15c>
   82418:	1006d27a 	srli	r3,r2,9
   8241c:	01000104 	movi	r4,4
   82420:	20c06636 	bltu	r4,r3,825bc <_free_r+0x248>
   82424:	1008d1ba 	srli	r4,r2,6
   82428:	21000e04 	addi	r4,r4,56
   8242c:	210f883a 	add	r7,r4,r4
   82430:	39cf883a 	add	r7,r7,r7
   82434:	39cf883a 	add	r7,r7,r7
   82438:	29cf883a 	add	r7,r5,r7
   8243c:	38c00217 	ldw	r3,8(r7)
   82440:	01400234 	movhi	r5,8
   82444:	29597c04 	addi	r5,r5,26096
   82448:	19c06126 	beq	r3,r7,825d0 <_free_r+0x25c>
   8244c:	013fff04 	movi	r4,-4
   82450:	19400117 	ldw	r5,4(r3)
   82454:	290a703a 	and	r5,r5,r4
   82458:	1140022e 	bgeu	r2,r5,82464 <_free_r+0xf0>
   8245c:	18c00217 	ldw	r3,8(r3)
   82460:	38fffb1e 	bne	r7,r3,82450 <_free_r+0xdc>
   82464:	18800317 	ldw	r2,12(r3)
   82468:	30800315 	stw	r2,12(r6)
   8246c:	30c00215 	stw	r3,8(r6)
   82470:	11800215 	stw	r6,8(r2)
   82474:	19800315 	stw	r6,12(r3)
   82478:	8809883a 	mov	r4,r17
   8247c:	dfc00217 	ldw	ra,8(sp)
   82480:	dc400117 	ldw	r17,4(sp)
   82484:	dc000017 	ldw	r16,0(sp)
   82488:	dec00304 	addi	sp,sp,12
   8248c:	00835381 	jmpi	83538 <__malloc_unlock>
   82490:	813ffe17 	ldw	r4,-8(r16)
   82494:	2a400204 	addi	r9,r5,8
   82498:	310dc83a 	sub	r6,r6,r4
   8249c:	32000217 	ldw	r8,8(r6)
   824a0:	1105883a 	add	r2,r2,r4
   824a4:	42404326 	beq	r8,r9,825b4 <_free_r+0x240>
   824a8:	32400317 	ldw	r9,12(r6)
   824ac:	0009883a 	mov	r4,zero
   824b0:	42400315 	stw	r9,12(r8)
   824b4:	4a000215 	stw	r8,8(r9)
   824b8:	003fc606 	br	823d4 <_free_r+0x60>
   824bc:	dfc00217 	ldw	ra,8(sp)
   824c0:	dc400117 	ldw	r17,4(sp)
   824c4:	dc000017 	ldw	r16,0(sp)
   824c8:	dec00304 	addi	sp,sp,12
   824cc:	f800283a 	ret
   824d0:	1004d0fa 	srli	r2,r2,3
   824d4:	02000044 	movi	r8,1
   824d8:	29c00117 	ldw	r7,4(r5)
   824dc:	1087883a 	add	r3,r2,r2
   824e0:	18c7883a 	add	r3,r3,r3
   824e4:	1005d0ba 	srai	r2,r2,2
   824e8:	18c7883a 	add	r3,r3,r3
   824ec:	28c7883a 	add	r3,r5,r3
   824f0:	19000217 	ldw	r4,8(r3)
   824f4:	4084983a 	sll	r2,r8,r2
   824f8:	30c00315 	stw	r3,12(r6)
   824fc:	31000215 	stw	r4,8(r6)
   82500:	11c4b03a 	or	r2,r2,r7
   82504:	21800315 	stw	r6,12(r4)
   82508:	8809883a 	mov	r4,r17
   8250c:	28800115 	stw	r2,4(r5)
   82510:	19800215 	stw	r6,8(r3)
   82514:	dfc00217 	ldw	ra,8(sp)
   82518:	dc400117 	ldw	r17,4(sp)
   8251c:	dc000017 	ldw	r16,0(sp)
   82520:	dec00304 	addi	sp,sp,12
   82524:	00835381 	jmpi	83538 <__malloc_unlock>
   82528:	02000234 	movhi	r8,8
   8252c:	42197e04 	addi	r8,r8,26104
   82530:	3a3faf1e 	bne	r7,r8,823f0 <_free_r+0x7c>
   82534:	29800515 	stw	r6,20(r5)
   82538:	29800415 	stw	r6,16(r5)
   8253c:	11000054 	ori	r4,r2,1
   82540:	3087883a 	add	r3,r6,r2
   82544:	31c00315 	stw	r7,12(r6)
   82548:	31c00215 	stw	r7,8(r6)
   8254c:	31000115 	stw	r4,4(r6)
   82550:	18800015 	stw	r2,0(r3)
   82554:	003fc806 	br	82478 <_free_r+0x104>
   82558:	4200004c 	andi	r8,r8,1
   8255c:	3885883a 	add	r2,r7,r2
   82560:	4000071e 	bne	r8,zero,82580 <_free_r+0x20c>
   82564:	81fffe17 	ldw	r7,-8(r16)
   82568:	31cdc83a 	sub	r6,r6,r7
   8256c:	30c00317 	ldw	r3,12(r6)
   82570:	31000217 	ldw	r4,8(r6)
   82574:	11c5883a 	add	r2,r2,r7
   82578:	20c00315 	stw	r3,12(r4)
   8257c:	19000215 	stw	r4,8(r3)
   82580:	00c00234 	movhi	r3,8
   82584:	18df3404 	addi	r3,r3,31952
   82588:	18c00017 	ldw	r3,0(r3)
   8258c:	11000054 	ori	r4,r2,1
   82590:	31000115 	stw	r4,4(r6)
   82594:	29800215 	stw	r6,8(r5)
   82598:	10ffb736 	bltu	r2,r3,82478 <_free_r+0x104>
   8259c:	00800274 	movhi	r2,9
   825a0:	10a60704 	addi	r2,r2,-26596
   825a4:	11400017 	ldw	r5,0(r2)
   825a8:	8809883a 	mov	r4,r17
   825ac:	00822380 	call	82238 <_malloc_trim_r>
   825b0:	003fb106 	br	82478 <_free_r+0x104>
   825b4:	01000044 	movi	r4,1
   825b8:	003f8606 	br	823d4 <_free_r+0x60>
   825bc:	01000504 	movi	r4,20
   825c0:	20c00b36 	bltu	r4,r3,825f0 <_free_r+0x27c>
   825c4:	190016c4 	addi	r4,r3,91
   825c8:	210f883a 	add	r7,r4,r4
   825cc:	003f9806 	br	82430 <_free_r+0xbc>
   825d0:	2009d0ba 	srai	r4,r4,2
   825d4:	00800044 	movi	r2,1
   825d8:	29c00117 	ldw	r7,4(r5)
   825dc:	1108983a 	sll	r4,r2,r4
   825e0:	1805883a 	mov	r2,r3
   825e4:	21c8b03a 	or	r4,r4,r7
   825e8:	29000115 	stw	r4,4(r5)
   825ec:	003f9e06 	br	82468 <_free_r+0xf4>
   825f0:	01001504 	movi	r4,84
   825f4:	20c00436 	bltu	r4,r3,82608 <_free_r+0x294>
   825f8:	1008d33a 	srli	r4,r2,12
   825fc:	21001b84 	addi	r4,r4,110
   82600:	210f883a 	add	r7,r4,r4
   82604:	003f8a06 	br	82430 <_free_r+0xbc>
   82608:	01005504 	movi	r4,340
   8260c:	20c00436 	bltu	r4,r3,82620 <_free_r+0x2ac>
   82610:	1008d3fa 	srli	r4,r2,15
   82614:	21001dc4 	addi	r4,r4,119
   82618:	210f883a 	add	r7,r4,r4
   8261c:	003f8406 	br	82430 <_free_r+0xbc>
   82620:	01015504 	movi	r4,1364
   82624:	20c00436 	bltu	r4,r3,82638 <_free_r+0x2c4>
   82628:	1008d4ba 	srli	r4,r2,18
   8262c:	21001f04 	addi	r4,r4,124
   82630:	210f883a 	add	r7,r4,r4
   82634:	003f7e06 	br	82430 <_free_r+0xbc>
   82638:	01c03f04 	movi	r7,252
   8263c:	01001f84 	movi	r4,126
   82640:	003f7b06 	br	82430 <_free_r+0xbc>

00082644 <_fwalk>:
   82644:	defff904 	addi	sp,sp,-28
   82648:	dcc00315 	stw	r19,12(sp)
   8264c:	24c0b804 	addi	r19,r4,736
   82650:	dd400515 	stw	r21,20(sp)
   82654:	dd000415 	stw	r20,16(sp)
   82658:	dfc00615 	stw	ra,24(sp)
   8265c:	dc800215 	stw	r18,8(sp)
   82660:	dc400115 	stw	r17,4(sp)
   82664:	dc000015 	stw	r16,0(sp)
   82668:	282b883a 	mov	r21,r5
   8266c:	0029883a 	mov	r20,zero
   82670:	00821f80 	call	821f8 <__sfp_lock_acquire>
   82674:	98001226 	beq	r19,zero,826c0 <_fwalk+0x7c>
   82678:	04bfffc4 	movi	r18,-1
   8267c:	9c400117 	ldw	r17,4(r19)
   82680:	9c000217 	ldw	r16,8(r19)
   82684:	8c7fffc4 	addi	r17,r17,-1
   82688:	88000b16 	blt	r17,zero,826b8 <_fwalk+0x74>
   8268c:	84000304 	addi	r16,r16,12
   82690:	80c0000f 	ldh	r3,0(r16)
   82694:	8c7fffc4 	addi	r17,r17,-1
   82698:	813ffd04 	addi	r4,r16,-12
   8269c:	18000426 	beq	r3,zero,826b0 <_fwalk+0x6c>
   826a0:	80c0008f 	ldh	r3,2(r16)
   826a4:	1c800226 	beq	r3,r18,826b0 <_fwalk+0x6c>
   826a8:	a83ee83a 	callr	r21
   826ac:	a0a8b03a 	or	r20,r20,r2
   826b0:	84001704 	addi	r16,r16,92
   826b4:	8cbff61e 	bne	r17,r18,82690 <_fwalk+0x4c>
   826b8:	9cc00017 	ldw	r19,0(r19)
   826bc:	983fef1e 	bne	r19,zero,8267c <_fwalk+0x38>
   826c0:	00821fc0 	call	821fc <__sfp_lock_release>
   826c4:	a005883a 	mov	r2,r20
   826c8:	dfc00617 	ldw	ra,24(sp)
   826cc:	dd400517 	ldw	r21,20(sp)
   826d0:	dd000417 	ldw	r20,16(sp)
   826d4:	dcc00317 	ldw	r19,12(sp)
   826d8:	dc800217 	ldw	r18,8(sp)
   826dc:	dc400117 	ldw	r17,4(sp)
   826e0:	dc000017 	ldw	r16,0(sp)
   826e4:	dec00704 	addi	sp,sp,28
   826e8:	f800283a 	ret

000826ec <_fwalk_reent>:
   826ec:	defff804 	addi	sp,sp,-32
   826f0:	dcc00315 	stw	r19,12(sp)
   826f4:	24c0b804 	addi	r19,r4,736
   826f8:	dd800615 	stw	r22,24(sp)
   826fc:	dd400515 	stw	r21,20(sp)
   82700:	dd000415 	stw	r20,16(sp)
   82704:	dfc00715 	stw	ra,28(sp)
   82708:	dc800215 	stw	r18,8(sp)
   8270c:	dc400115 	stw	r17,4(sp)
   82710:	dc000015 	stw	r16,0(sp)
   82714:	2029883a 	mov	r20,r4
   82718:	282b883a 	mov	r21,r5
   8271c:	002d883a 	mov	r22,zero
   82720:	00821f80 	call	821f8 <__sfp_lock_acquire>
   82724:	98001326 	beq	r19,zero,82774 <_fwalk_reent+0x88>
   82728:	04bfffc4 	movi	r18,-1
   8272c:	9c400117 	ldw	r17,4(r19)
   82730:	9c000217 	ldw	r16,8(r19)
   82734:	8c7fffc4 	addi	r17,r17,-1
   82738:	88000c16 	blt	r17,zero,8276c <_fwalk_reent+0x80>
   8273c:	84000304 	addi	r16,r16,12
   82740:	80c0000f 	ldh	r3,0(r16)
   82744:	8c7fffc4 	addi	r17,r17,-1
   82748:	817ffd04 	addi	r5,r16,-12
   8274c:	18000526 	beq	r3,zero,82764 <_fwalk_reent+0x78>
   82750:	80c0008f 	ldh	r3,2(r16)
   82754:	a009883a 	mov	r4,r20
   82758:	1c800226 	beq	r3,r18,82764 <_fwalk_reent+0x78>
   8275c:	a83ee83a 	callr	r21
   82760:	b0acb03a 	or	r22,r22,r2
   82764:	84001704 	addi	r16,r16,92
   82768:	8cbff51e 	bne	r17,r18,82740 <_fwalk_reent+0x54>
   8276c:	9cc00017 	ldw	r19,0(r19)
   82770:	983fee1e 	bne	r19,zero,8272c <_fwalk_reent+0x40>
   82774:	00821fc0 	call	821fc <__sfp_lock_release>
   82778:	b005883a 	mov	r2,r22
   8277c:	dfc00717 	ldw	ra,28(sp)
   82780:	dd800617 	ldw	r22,24(sp)
   82784:	dd400517 	ldw	r21,20(sp)
   82788:	dd000417 	ldw	r20,16(sp)
   8278c:	dcc00317 	ldw	r19,12(sp)
   82790:	dc800217 	ldw	r18,8(sp)
   82794:	dc400117 	ldw	r17,4(sp)
   82798:	dc000017 	ldw	r16,0(sp)
   8279c:	dec00804 	addi	sp,sp,32
   827a0:	f800283a 	ret

000827a4 <__smakebuf_r>:
   827a4:	2880030b 	ldhu	r2,12(r5)
   827a8:	deffed04 	addi	sp,sp,-76
   827ac:	dc401015 	stw	r17,64(sp)
   827b0:	10c0008c 	andi	r3,r2,2
   827b4:	18ffffcc 	andi	r3,r3,65535
   827b8:	18e0001c 	xori	r3,r3,32768
   827bc:	dc000f15 	stw	r16,60(sp)
   827c0:	dfc01215 	stw	ra,72(sp)
   827c4:	dc801115 	stw	r18,68(sp)
   827c8:	18e00004 	addi	r3,r3,-32768
   827cc:	2821883a 	mov	r16,r5
   827d0:	2023883a 	mov	r17,r4
   827d4:	1800381e 	bne	r3,zero,828b8 <__smakebuf_r+0x114>
   827d8:	2940038f 	ldh	r5,14(r5)
   827dc:	28002d16 	blt	r5,zero,82894 <__smakebuf_r+0xf0>
   827e0:	d80d883a 	mov	r6,sp
   827e4:	0082d880 	call	82d88 <_fstat_r>
   827e8:	10002916 	blt	r2,zero,82890 <__smakebuf_r+0xec>
   827ec:	d8800117 	ldw	r2,4(sp)
   827f0:	00e00014 	movui	r3,32768
   827f4:	10bc000c 	andi	r2,r2,61440
   827f8:	10c03c26 	beq	r2,r3,828ec <__smakebuf_r+0x148>
   827fc:	80c0030b 	ldhu	r3,12(r16)
   82800:	18c20014 	ori	r3,r3,2048
   82804:	80c0030d 	sth	r3,12(r16)
   82808:	00c80004 	movi	r3,8192
   8280c:	10c00c1e 	bne	r2,r3,82840 <__smakebuf_r+0x9c>
   82810:	8140038f 	ldh	r5,14(r16)
   82814:	8809883a 	mov	r4,r17
   82818:	0082df00 	call	82df0 <_isatty_r>
   8281c:	10000826 	beq	r2,zero,82840 <__smakebuf_r+0x9c>
   82820:	80c0030b 	ldhu	r3,12(r16)
   82824:	808010c4 	addi	r2,r16,67
   82828:	80800015 	stw	r2,0(r16)
   8282c:	18c00054 	ori	r3,r3,1
   82830:	80800415 	stw	r2,16(r16)
   82834:	00800044 	movi	r2,1
   82838:	80c0030d 	sth	r3,12(r16)
   8283c:	80800515 	stw	r2,20(r16)
   82840:	04810004 	movi	r18,1024
   82844:	8809883a 	mov	r4,r17
   82848:	900b883a 	mov	r5,r18
   8284c:	0080a180 	call	80a18 <_malloc_r>
   82850:	10003026 	beq	r2,zero,82914 <__smakebuf_r+0x170>
   82854:	80c0030b 	ldhu	r3,12(r16)
   82858:	01000234 	movhi	r4,8
   8285c:	2107d704 	addi	r4,r4,8028
   82860:	89000f15 	stw	r4,60(r17)
   82864:	18c02014 	ori	r3,r3,128
   82868:	80c0030d 	sth	r3,12(r16)
   8286c:	80800015 	stw	r2,0(r16)
   82870:	80800415 	stw	r2,16(r16)
   82874:	84800515 	stw	r18,20(r16)
   82878:	dfc01217 	ldw	ra,72(sp)
   8287c:	dc801117 	ldw	r18,68(sp)
   82880:	dc401017 	ldw	r17,64(sp)
   82884:	dc000f17 	ldw	r16,60(sp)
   82888:	dec01304 	addi	sp,sp,76
   8288c:	f800283a 	ret
   82890:	8080030b 	ldhu	r2,12(r16)
   82894:	10c0200c 	andi	r3,r2,128
   82898:	18ffffcc 	andi	r3,r3,65535
   8289c:	18e0001c 	xori	r3,r3,32768
   828a0:	18e00004 	addi	r3,r3,-32768
   828a4:	18000f1e 	bne	r3,zero,828e4 <__smakebuf_r+0x140>
   828a8:	04810004 	movi	r18,1024
   828ac:	10820014 	ori	r2,r2,2048
   828b0:	8080030d 	sth	r2,12(r16)
   828b4:	003fe306 	br	82844 <__smakebuf_r+0xa0>
   828b8:	288010c4 	addi	r2,r5,67
   828bc:	28800015 	stw	r2,0(r5)
   828c0:	28800415 	stw	r2,16(r5)
   828c4:	00800044 	movi	r2,1
   828c8:	28800515 	stw	r2,20(r5)
   828cc:	dfc01217 	ldw	ra,72(sp)
   828d0:	dc801117 	ldw	r18,68(sp)
   828d4:	dc401017 	ldw	r17,64(sp)
   828d8:	dc000f17 	ldw	r16,60(sp)
   828dc:	dec01304 	addi	sp,sp,76
   828e0:	f800283a 	ret
   828e4:	04801004 	movi	r18,64
   828e8:	003ff006 	br	828ac <__smakebuf_r+0x108>
   828ec:	81000a17 	ldw	r4,40(r16)
   828f0:	00c00234 	movhi	r3,8
   828f4:	18cac104 	addi	r3,r3,11012
   828f8:	20ffc01e 	bne	r4,r3,827fc <__smakebuf_r+0x58>
   828fc:	8080030b 	ldhu	r2,12(r16)
   82900:	00c10004 	movi	r3,1024
   82904:	80c01315 	stw	r3,76(r16)
   82908:	10c4b03a 	or	r2,r2,r3
   8290c:	8080030d 	sth	r2,12(r16)
   82910:	003fcb06 	br	82840 <__smakebuf_r+0x9c>
   82914:	8080030b 	ldhu	r2,12(r16)
   82918:	10c0800c 	andi	r3,r2,512
   8291c:	18ffffcc 	andi	r3,r3,65535
   82920:	18e0001c 	xori	r3,r3,32768
   82924:	18e00004 	addi	r3,r3,-32768
   82928:	183fd31e 	bne	r3,zero,82878 <__smakebuf_r+0xd4>
   8292c:	10800094 	ori	r2,r2,2
   82930:	80c010c4 	addi	r3,r16,67
   82934:	8080030d 	sth	r2,12(r16)
   82938:	00800044 	movi	r2,1
   8293c:	80c00015 	stw	r3,0(r16)
   82940:	80c00415 	stw	r3,16(r16)
   82944:	80800515 	stw	r2,20(r16)
   82948:	003fcb06 	br	82878 <__smakebuf_r+0xd4>

0008294c <memset>:
   8294c:	00c000c4 	movi	r3,3
   82950:	2005883a 	mov	r2,r4
   82954:	29403fcc 	andi	r5,r5,255
   82958:	19802d2e 	bgeu	r3,r6,82a10 <memset+0xc4>
   8295c:	20c6703a 	and	r3,r4,r3
   82960:	18002e1e 	bne	r3,zero,82a1c <memset+0xd0>
   82964:	2806923a 	slli	r3,r5,8
   82968:	010003c4 	movi	r4,15
   8296c:	3011883a 	mov	r8,r6
   82970:	1946b03a 	or	r3,r3,r5
   82974:	180e943a 	slli	r7,r3,16
   82978:	38ceb03a 	or	r7,r7,r3
   8297c:	1007883a 	mov	r3,r2
   82980:	21800f2e 	bgeu	r4,r6,829c0 <memset+0x74>
   82984:	19c00015 	stw	r7,0(r3)
   82988:	19c00115 	stw	r7,4(r3)
   8298c:	19c00215 	stw	r7,8(r3)
   82990:	19c00315 	stw	r7,12(r3)
   82994:	423ffc04 	addi	r8,r8,-16
   82998:	18c00404 	addi	r3,r3,16
   8299c:	223ff936 	bltu	r4,r8,82984 <memset+0x38>
   829a0:	30fffc04 	addi	r3,r6,-16
   829a4:	1806d13a 	srli	r3,r3,4
   829a8:	318003cc 	andi	r6,r6,15
   829ac:	010000c4 	movi	r4,3
   829b0:	18c00044 	addi	r3,r3,1
   829b4:	1806913a 	slli	r3,r3,4
   829b8:	10c7883a 	add	r3,r2,r3
   829bc:	21800e2e 	bgeu	r4,r6,829f8 <memset+0xac>
   829c0:	1813883a 	mov	r9,r3
   829c4:	3011883a 	mov	r8,r6
   829c8:	010000c4 	movi	r4,3
   829cc:	49c00015 	stw	r7,0(r9)
   829d0:	423fff04 	addi	r8,r8,-4
   829d4:	4a400104 	addi	r9,r9,4
   829d8:	223ffc36 	bltu	r4,r8,829cc <memset+0x80>
   829dc:	313fff04 	addi	r4,r6,-4
   829e0:	2008d0ba 	srli	r4,r4,2
   829e4:	318000cc 	andi	r6,r6,3
   829e8:	21000044 	addi	r4,r4,1
   829ec:	2109883a 	add	r4,r4,r4
   829f0:	2109883a 	add	r4,r4,r4
   829f4:	1907883a 	add	r3,r3,r4
   829f8:	30000a26 	beq	r6,zero,82a24 <memset+0xd8>
   829fc:	198d883a 	add	r6,r3,r6
   82a00:	19400005 	stb	r5,0(r3)
   82a04:	18c00044 	addi	r3,r3,1
   82a08:	19bffd1e 	bne	r3,r6,82a00 <memset+0xb4>
   82a0c:	f800283a 	ret
   82a10:	2007883a 	mov	r3,r4
   82a14:	303ff91e 	bne	r6,zero,829fc <memset+0xb0>
   82a18:	00000206 	br	82a24 <memset+0xd8>
   82a1c:	2007883a 	mov	r3,r4
   82a20:	003ff606 	br	829fc <memset+0xb0>
   82a24:	f800283a 	ret

00082a28 <__sread>:
   82a28:	defffe04 	addi	sp,sp,-8
   82a2c:	dc000015 	stw	r16,0(sp)
   82a30:	2821883a 	mov	r16,r5
   82a34:	2940038f 	ldh	r5,14(r5)
   82a38:	dfc00115 	stw	ra,4(sp)
   82a3c:	0082ec00 	call	82ec0 <_read_r>
   82a40:	10000716 	blt	r2,zero,82a60 <__sread+0x38>
   82a44:	80c01417 	ldw	r3,80(r16)
   82a48:	1887883a 	add	r3,r3,r2
   82a4c:	80c01415 	stw	r3,80(r16)
   82a50:	dfc00117 	ldw	ra,4(sp)
   82a54:	dc000017 	ldw	r16,0(sp)
   82a58:	dec00204 	addi	sp,sp,8
   82a5c:	f800283a 	ret
   82a60:	80c0030b 	ldhu	r3,12(r16)
   82a64:	18fbffcc 	andi	r3,r3,61439
   82a68:	80c0030d 	sth	r3,12(r16)
   82a6c:	dfc00117 	ldw	ra,4(sp)
   82a70:	dc000017 	ldw	r16,0(sp)
   82a74:	dec00204 	addi	sp,sp,8
   82a78:	f800283a 	ret

00082a7c <__swrite>:
   82a7c:	2880030b 	ldhu	r2,12(r5)
   82a80:	defffb04 	addi	sp,sp,-20
   82a84:	dcc00315 	stw	r19,12(sp)
   82a88:	10c0400c 	andi	r3,r2,256
   82a8c:	18ffffcc 	andi	r3,r3,65535
   82a90:	18e0001c 	xori	r3,r3,32768
   82a94:	dc800215 	stw	r18,8(sp)
   82a98:	dc400115 	stw	r17,4(sp)
   82a9c:	dc000015 	stw	r16,0(sp)
   82aa0:	dfc00415 	stw	ra,16(sp)
   82aa4:	18e00004 	addi	r3,r3,-32768
   82aa8:	2821883a 	mov	r16,r5
   82aac:	2027883a 	mov	r19,r4
   82ab0:	3025883a 	mov	r18,r6
   82ab4:	3823883a 	mov	r17,r7
   82ab8:	18000526 	beq	r3,zero,82ad0 <__swrite+0x54>
   82abc:	2940038f 	ldh	r5,14(r5)
   82ac0:	000d883a 	mov	r6,zero
   82ac4:	01c00084 	movi	r7,2
   82ac8:	0082e540 	call	82e54 <_lseek_r>
   82acc:	8080030b 	ldhu	r2,12(r16)
   82ad0:	8140038f 	ldh	r5,14(r16)
   82ad4:	10bbffcc 	andi	r2,r2,61439
   82ad8:	9809883a 	mov	r4,r19
   82adc:	900d883a 	mov	r6,r18
   82ae0:	880f883a 	mov	r7,r17
   82ae4:	8080030d 	sth	r2,12(r16)
   82ae8:	dfc00417 	ldw	ra,16(sp)
   82aec:	dcc00317 	ldw	r19,12(sp)
   82af0:	dc800217 	ldw	r18,8(sp)
   82af4:	dc400117 	ldw	r17,4(sp)
   82af8:	dc000017 	ldw	r16,0(sp)
   82afc:	dec00504 	addi	sp,sp,20
   82b00:	0082b681 	jmpi	82b68 <_write_r>

00082b04 <__sseek>:
   82b04:	defffe04 	addi	sp,sp,-8
   82b08:	dc000015 	stw	r16,0(sp)
   82b0c:	2821883a 	mov	r16,r5
   82b10:	2940038f 	ldh	r5,14(r5)
   82b14:	dfc00115 	stw	ra,4(sp)
   82b18:	0082e540 	call	82e54 <_lseek_r>
   82b1c:	00ffffc4 	movi	r3,-1
   82b20:	10c00826 	beq	r2,r3,82b44 <__sseek+0x40>
   82b24:	80c0030b 	ldhu	r3,12(r16)
   82b28:	80801415 	stw	r2,80(r16)
   82b2c:	18c40014 	ori	r3,r3,4096
   82b30:	80c0030d 	sth	r3,12(r16)
   82b34:	dfc00117 	ldw	ra,4(sp)
   82b38:	dc000017 	ldw	r16,0(sp)
   82b3c:	dec00204 	addi	sp,sp,8
   82b40:	f800283a 	ret
   82b44:	80c0030b 	ldhu	r3,12(r16)
   82b48:	18fbffcc 	andi	r3,r3,61439
   82b4c:	80c0030d 	sth	r3,12(r16)
   82b50:	dfc00117 	ldw	ra,4(sp)
   82b54:	dc000017 	ldw	r16,0(sp)
   82b58:	dec00204 	addi	sp,sp,8
   82b5c:	f800283a 	ret

00082b60 <__sclose>:
   82b60:	2940038f 	ldh	r5,14(r5)
   82b64:	0082bd41 	jmpi	82bd4 <_close_r>

00082b68 <_write_r>:
   82b68:	defffd04 	addi	sp,sp,-12
   82b6c:	dc400115 	stw	r17,4(sp)
   82b70:	dc000015 	stw	r16,0(sp)
   82b74:	2023883a 	mov	r17,r4
   82b78:	04000274 	movhi	r16,9
   82b7c:	84260804 	addi	r16,r16,-26592
   82b80:	2809883a 	mov	r4,r5
   82b84:	300b883a 	mov	r5,r6
   82b88:	380d883a 	mov	r6,r7
   82b8c:	dfc00215 	stw	ra,8(sp)
   82b90:	80000015 	stw	zero,0(r16)
   82b94:	00838900 	call	83890 <write>
   82b98:	00ffffc4 	movi	r3,-1
   82b9c:	10c00526 	beq	r2,r3,82bb4 <_write_r+0x4c>
   82ba0:	dfc00217 	ldw	ra,8(sp)
   82ba4:	dc400117 	ldw	r17,4(sp)
   82ba8:	dc000017 	ldw	r16,0(sp)
   82bac:	dec00304 	addi	sp,sp,12
   82bb0:	f800283a 	ret
   82bb4:	80c00017 	ldw	r3,0(r16)
   82bb8:	183ff926 	beq	r3,zero,82ba0 <_write_r+0x38>
   82bbc:	88c00015 	stw	r3,0(r17)
   82bc0:	dfc00217 	ldw	ra,8(sp)
   82bc4:	dc400117 	ldw	r17,4(sp)
   82bc8:	dc000017 	ldw	r16,0(sp)
   82bcc:	dec00304 	addi	sp,sp,12
   82bd0:	f800283a 	ret

00082bd4 <_close_r>:
   82bd4:	defffd04 	addi	sp,sp,-12
   82bd8:	dc400115 	stw	r17,4(sp)
   82bdc:	dc000015 	stw	r16,0(sp)
   82be0:	2023883a 	mov	r17,r4
   82be4:	04000274 	movhi	r16,9
   82be8:	84260804 	addi	r16,r16,-26592
   82bec:	2809883a 	mov	r4,r5
   82bf0:	dfc00215 	stw	ra,8(sp)
   82bf4:	80000015 	stw	zero,0(r16)
   82bf8:	0082fa40 	call	82fa4 <close>
   82bfc:	00ffffc4 	movi	r3,-1
   82c00:	10c00526 	beq	r2,r3,82c18 <_close_r+0x44>
   82c04:	dfc00217 	ldw	ra,8(sp)
   82c08:	dc400117 	ldw	r17,4(sp)
   82c0c:	dc000017 	ldw	r16,0(sp)
   82c10:	dec00304 	addi	sp,sp,12
   82c14:	f800283a 	ret
   82c18:	80c00017 	ldw	r3,0(r16)
   82c1c:	183ff926 	beq	r3,zero,82c04 <_close_r+0x30>
   82c20:	88c00015 	stw	r3,0(r17)
   82c24:	dfc00217 	ldw	ra,8(sp)
   82c28:	dc400117 	ldw	r17,4(sp)
   82c2c:	dc000017 	ldw	r16,0(sp)
   82c30:	dec00304 	addi	sp,sp,12
   82c34:	f800283a 	ret

00082c38 <_fclose_r>:
   82c38:	defffc04 	addi	sp,sp,-16
   82c3c:	dc400115 	stw	r17,4(sp)
   82c40:	dc000015 	stw	r16,0(sp)
   82c44:	dfc00315 	stw	ra,12(sp)
   82c48:	dc800215 	stw	r18,8(sp)
   82c4c:	2821883a 	mov	r16,r5
   82c50:	2023883a 	mov	r17,r4
   82c54:	28003426 	beq	r5,zero,82d28 <_fclose_r+0xf0>
   82c58:	00821f80 	call	821f8 <__sfp_lock_acquire>
   82c5c:	88000226 	beq	r17,zero,82c68 <_fclose_r+0x30>
   82c60:	88800e17 	ldw	r2,56(r17)
   82c64:	10003826 	beq	r2,zero,82d48 <_fclose_r+0x110>
   82c68:	8080030f 	ldh	r2,12(r16)
   82c6c:	10002526 	beq	r2,zero,82d04 <_fclose_r+0xcc>
   82c70:	8809883a 	mov	r4,r17
   82c74:	800b883a 	mov	r5,r16
   82c78:	0081d340 	call	81d34 <_fflush_r>
   82c7c:	1025883a 	mov	r18,r2
   82c80:	80800b17 	ldw	r2,44(r16)
   82c84:	10000426 	beq	r2,zero,82c98 <_fclose_r+0x60>
   82c88:	81400717 	ldw	r5,28(r16)
   82c8c:	8809883a 	mov	r4,r17
   82c90:	103ee83a 	callr	r2
   82c94:	10003516 	blt	r2,zero,82d6c <_fclose_r+0x134>
   82c98:	8080030b 	ldhu	r2,12(r16)
   82c9c:	1080200c 	andi	r2,r2,128
   82ca0:	10bfffcc 	andi	r2,r2,65535
   82ca4:	10a0001c 	xori	r2,r2,32768
   82ca8:	10a00004 	addi	r2,r2,-32768
   82cac:	10002b1e 	bne	r2,zero,82d5c <_fclose_r+0x124>
   82cb0:	81400c17 	ldw	r5,48(r16)
   82cb4:	28000526 	beq	r5,zero,82ccc <_fclose_r+0x94>
   82cb8:	80801004 	addi	r2,r16,64
   82cbc:	28800226 	beq	r5,r2,82cc8 <_fclose_r+0x90>
   82cc0:	8809883a 	mov	r4,r17
   82cc4:	00823740 	call	82374 <_free_r>
   82cc8:	80000c15 	stw	zero,48(r16)
   82ccc:	81401117 	ldw	r5,68(r16)
   82cd0:	28000326 	beq	r5,zero,82ce0 <_fclose_r+0xa8>
   82cd4:	8809883a 	mov	r4,r17
   82cd8:	00823740 	call	82374 <_free_r>
   82cdc:	80001115 	stw	zero,68(r16)
   82ce0:	8000030d 	sth	zero,12(r16)
   82ce4:	00821fc0 	call	821fc <__sfp_lock_release>
   82ce8:	9005883a 	mov	r2,r18
   82cec:	dfc00317 	ldw	ra,12(sp)
   82cf0:	dc800217 	ldw	r18,8(sp)
   82cf4:	dc400117 	ldw	r17,4(sp)
   82cf8:	dc000017 	ldw	r16,0(sp)
   82cfc:	dec00404 	addi	sp,sp,16
   82d00:	f800283a 	ret
   82d04:	00821fc0 	call	821fc <__sfp_lock_release>
   82d08:	0025883a 	mov	r18,zero
   82d0c:	9005883a 	mov	r2,r18
   82d10:	dfc00317 	ldw	ra,12(sp)
   82d14:	dc800217 	ldw	r18,8(sp)
   82d18:	dc400117 	ldw	r17,4(sp)
   82d1c:	dc000017 	ldw	r16,0(sp)
   82d20:	dec00404 	addi	sp,sp,16
   82d24:	f800283a 	ret
   82d28:	0025883a 	mov	r18,zero
   82d2c:	9005883a 	mov	r2,r18
   82d30:	dfc00317 	ldw	ra,12(sp)
   82d34:	dc800217 	ldw	r18,8(sp)
   82d38:	dc400117 	ldw	r17,4(sp)
   82d3c:	dc000017 	ldw	r16,0(sp)
   82d40:	dec00404 	addi	sp,sp,16
   82d44:	f800283a 	ret
   82d48:	8809883a 	mov	r4,r17
   82d4c:	0081ff00 	call	81ff0 <__sinit>
   82d50:	8080030f 	ldh	r2,12(r16)
   82d54:	103fc61e 	bne	r2,zero,82c70 <_fclose_r+0x38>
   82d58:	003fea06 	br	82d04 <_fclose_r+0xcc>
   82d5c:	81400417 	ldw	r5,16(r16)
   82d60:	8809883a 	mov	r4,r17
   82d64:	00823740 	call	82374 <_free_r>
   82d68:	003fd106 	br	82cb0 <_fclose_r+0x78>
   82d6c:	04bfffc4 	movi	r18,-1
   82d70:	003fc906 	br	82c98 <_fclose_r+0x60>

00082d74 <fclose>:
   82d74:	00800234 	movhi	r2,8
   82d78:	109f3204 	addi	r2,r2,31944
   82d7c:	200b883a 	mov	r5,r4
   82d80:	11000017 	ldw	r4,0(r2)
   82d84:	0082c381 	jmpi	82c38 <_fclose_r>

00082d88 <_fstat_r>:
   82d88:	defffd04 	addi	sp,sp,-12
   82d8c:	dc400115 	stw	r17,4(sp)
   82d90:	dc000015 	stw	r16,0(sp)
   82d94:	2023883a 	mov	r17,r4
   82d98:	04000274 	movhi	r16,9
   82d9c:	84260804 	addi	r16,r16,-26592
   82da0:	2809883a 	mov	r4,r5
   82da4:	300b883a 	mov	r5,r6
   82da8:	dfc00215 	stw	ra,8(sp)
   82dac:	80000015 	stw	zero,0(r16)
   82db0:	00830ec0 	call	830ec <fstat>
   82db4:	00ffffc4 	movi	r3,-1
   82db8:	10c00526 	beq	r2,r3,82dd0 <_fstat_r+0x48>
   82dbc:	dfc00217 	ldw	ra,8(sp)
   82dc0:	dc400117 	ldw	r17,4(sp)
   82dc4:	dc000017 	ldw	r16,0(sp)
   82dc8:	dec00304 	addi	sp,sp,12
   82dcc:	f800283a 	ret
   82dd0:	80c00017 	ldw	r3,0(r16)
   82dd4:	183ff926 	beq	r3,zero,82dbc <_fstat_r+0x34>
   82dd8:	88c00015 	stw	r3,0(r17)
   82ddc:	dfc00217 	ldw	ra,8(sp)
   82de0:	dc400117 	ldw	r17,4(sp)
   82de4:	dc000017 	ldw	r16,0(sp)
   82de8:	dec00304 	addi	sp,sp,12
   82dec:	f800283a 	ret

00082df0 <_isatty_r>:
   82df0:	defffd04 	addi	sp,sp,-12
   82df4:	dc400115 	stw	r17,4(sp)
   82df8:	dc000015 	stw	r16,0(sp)
   82dfc:	2023883a 	mov	r17,r4
   82e00:	04000274 	movhi	r16,9
   82e04:	84260804 	addi	r16,r16,-26592
   82e08:	2809883a 	mov	r4,r5
   82e0c:	dfc00215 	stw	ra,8(sp)
   82e10:	80000015 	stw	zero,0(r16)
   82e14:	00831ec0 	call	831ec <isatty>
   82e18:	00ffffc4 	movi	r3,-1
   82e1c:	10c00526 	beq	r2,r3,82e34 <_isatty_r+0x44>
   82e20:	dfc00217 	ldw	ra,8(sp)
   82e24:	dc400117 	ldw	r17,4(sp)
   82e28:	dc000017 	ldw	r16,0(sp)
   82e2c:	dec00304 	addi	sp,sp,12
   82e30:	f800283a 	ret
   82e34:	80c00017 	ldw	r3,0(r16)
   82e38:	183ff926 	beq	r3,zero,82e20 <_isatty_r+0x30>
   82e3c:	88c00015 	stw	r3,0(r17)
   82e40:	dfc00217 	ldw	ra,8(sp)
   82e44:	dc400117 	ldw	r17,4(sp)
   82e48:	dc000017 	ldw	r16,0(sp)
   82e4c:	dec00304 	addi	sp,sp,12
   82e50:	f800283a 	ret

00082e54 <_lseek_r>:
   82e54:	defffd04 	addi	sp,sp,-12
   82e58:	dc400115 	stw	r17,4(sp)
   82e5c:	dc000015 	stw	r16,0(sp)
   82e60:	2023883a 	mov	r17,r4
   82e64:	04000274 	movhi	r16,9
   82e68:	84260804 	addi	r16,r16,-26592
   82e6c:	2809883a 	mov	r4,r5
   82e70:	300b883a 	mov	r5,r6
   82e74:	380d883a 	mov	r6,r7
   82e78:	dfc00215 	stw	ra,8(sp)
   82e7c:	80000015 	stw	zero,0(r16)
   82e80:	00833cc0 	call	833cc <lseek>
   82e84:	00ffffc4 	movi	r3,-1
   82e88:	10c00526 	beq	r2,r3,82ea0 <_lseek_r+0x4c>
   82e8c:	dfc00217 	ldw	ra,8(sp)
   82e90:	dc400117 	ldw	r17,4(sp)
   82e94:	dc000017 	ldw	r16,0(sp)
   82e98:	dec00304 	addi	sp,sp,12
   82e9c:	f800283a 	ret
   82ea0:	80c00017 	ldw	r3,0(r16)
   82ea4:	183ff926 	beq	r3,zero,82e8c <_lseek_r+0x38>
   82ea8:	88c00015 	stw	r3,0(r17)
   82eac:	dfc00217 	ldw	ra,8(sp)
   82eb0:	dc400117 	ldw	r17,4(sp)
   82eb4:	dc000017 	ldw	r16,0(sp)
   82eb8:	dec00304 	addi	sp,sp,12
   82ebc:	f800283a 	ret

00082ec0 <_read_r>:
   82ec0:	defffd04 	addi	sp,sp,-12
   82ec4:	dc400115 	stw	r17,4(sp)
   82ec8:	dc000015 	stw	r16,0(sp)
   82ecc:	2023883a 	mov	r17,r4
   82ed0:	04000274 	movhi	r16,9
   82ed4:	84260804 	addi	r16,r16,-26592
   82ed8:	2809883a 	mov	r4,r5
   82edc:	300b883a 	mov	r5,r6
   82ee0:	380d883a 	mov	r6,r7
   82ee4:	dfc00215 	stw	ra,8(sp)
   82ee8:	80000015 	stw	zero,0(r16)
   82eec:	00835ec0 	call	835ec <read>
   82ef0:	00ffffc4 	movi	r3,-1
   82ef4:	10c00526 	beq	r2,r3,82f0c <_read_r+0x4c>
   82ef8:	dfc00217 	ldw	ra,8(sp)
   82efc:	dc400117 	ldw	r17,4(sp)
   82f00:	dc000017 	ldw	r16,0(sp)
   82f04:	dec00304 	addi	sp,sp,12
   82f08:	f800283a 	ret
   82f0c:	80c00017 	ldw	r3,0(r16)
   82f10:	183ff926 	beq	r3,zero,82ef8 <_read_r+0x38>
   82f14:	88c00015 	stw	r3,0(r17)
   82f18:	dfc00217 	ldw	ra,8(sp)
   82f1c:	dc400117 	ldw	r17,4(sp)
   82f20:	dc000017 	ldw	r16,0(sp)
   82f24:	dec00304 	addi	sp,sp,12
   82f28:	f800283a 	ret

00082f2c <__mulsi3>:
   82f2c:	0005883a 	mov	r2,zero
   82f30:	20000726 	beq	r4,zero,82f50 <__mulsi3+0x24>
   82f34:	20c0004c 	andi	r3,r4,1
   82f38:	2008d07a 	srli	r4,r4,1
   82f3c:	18000126 	beq	r3,zero,82f44 <__mulsi3+0x18>
   82f40:	1145883a 	add	r2,r2,r5
   82f44:	294b883a 	add	r5,r5,r5
   82f48:	203ffa1e 	bne	r4,zero,82f34 <__mulsi3+0x8>
   82f4c:	f800283a 	ret
   82f50:	f800283a 	ret

00082f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82f54:	defffe04 	addi	sp,sp,-8
   82f58:	dfc00115 	stw	ra,4(sp)
   82f5c:	df000015 	stw	fp,0(sp)
   82f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82f64:	00800234 	movhi	r2,8
   82f68:	109f3a04 	addi	r2,r2,31976
   82f6c:	10800017 	ldw	r2,0(r2)
   82f70:	10000526 	beq	r2,zero,82f88 <alt_get_errno+0x34>
   82f74:	00800234 	movhi	r2,8
   82f78:	109f3a04 	addi	r2,r2,31976
   82f7c:	10800017 	ldw	r2,0(r2)
   82f80:	103ee83a 	callr	r2
   82f84:	00000206 	br	82f90 <alt_get_errno+0x3c>
   82f88:	00800274 	movhi	r2,9
   82f8c:	10a60804 	addi	r2,r2,-26592
}
   82f90:	e037883a 	mov	sp,fp
   82f94:	dfc00117 	ldw	ra,4(sp)
   82f98:	df000017 	ldw	fp,0(sp)
   82f9c:	dec00204 	addi	sp,sp,8
   82fa0:	f800283a 	ret

00082fa4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82fa4:	defffb04 	addi	sp,sp,-20
   82fa8:	dfc00415 	stw	ra,16(sp)
   82fac:	df000315 	stw	fp,12(sp)
   82fb0:	df000304 	addi	fp,sp,12
   82fb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82fb8:	e0bfff17 	ldw	r2,-4(fp)
   82fbc:	10000716 	blt	r2,zero,82fdc <close+0x38>
   82fc0:	e13fff17 	ldw	r4,-4(fp)
   82fc4:	01400304 	movi	r5,12
   82fc8:	0082f2c0 	call	82f2c <__mulsi3>
   82fcc:	00c00234 	movhi	r3,8
   82fd0:	18da8804 	addi	r3,r3,27168
   82fd4:	10c5883a 	add	r2,r2,r3
   82fd8:	00000106 	br	82fe0 <close+0x3c>
   82fdc:	0005883a 	mov	r2,zero
   82fe0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   82fe4:	e0bffd17 	ldw	r2,-12(fp)
   82fe8:	10001826 	beq	r2,zero,8304c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82fec:	e0bffd17 	ldw	r2,-12(fp)
   82ff0:	10800017 	ldw	r2,0(r2)
   82ff4:	10800417 	ldw	r2,16(r2)
   82ff8:	10000626 	beq	r2,zero,83014 <close+0x70>
   82ffc:	e0bffd17 	ldw	r2,-12(fp)
   83000:	10800017 	ldw	r2,0(r2)
   83004:	10800417 	ldw	r2,16(r2)
   83008:	e13ffd17 	ldw	r4,-12(fp)
   8300c:	103ee83a 	callr	r2
   83010:	00000106 	br	83018 <close+0x74>
   83014:	0005883a 	mov	r2,zero
   83018:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8301c:	e13fff17 	ldw	r4,-4(fp)
   83020:	00836e00 	call	836e0 <alt_release_fd>
    if (rval < 0)
   83024:	e0bffe17 	ldw	r2,-8(fp)
   83028:	1000060e 	bge	r2,zero,83044 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8302c:	0082f540 	call	82f54 <alt_get_errno>
   83030:	e0fffe17 	ldw	r3,-8(fp)
   83034:	00c7c83a 	sub	r3,zero,r3
   83038:	10c00015 	stw	r3,0(r2)
      return -1;
   8303c:	00bfffc4 	movi	r2,-1
   83040:	00000606 	br	8305c <close+0xb8>
    }
    return 0;
   83044:	0005883a 	mov	r2,zero
   83048:	00000406 	br	8305c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8304c:	0082f540 	call	82f54 <alt_get_errno>
   83050:	00c01444 	movi	r3,81
   83054:	10c00015 	stw	r3,0(r2)
    return -1;
   83058:	00bfffc4 	movi	r2,-1
  }
}
   8305c:	e037883a 	mov	sp,fp
   83060:	dfc00117 	ldw	ra,4(sp)
   83064:	df000017 	ldw	fp,0(sp)
   83068:	dec00204 	addi	sp,sp,8
   8306c:	f800283a 	ret

00083070 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   83070:	defffc04 	addi	sp,sp,-16
   83074:	df000315 	stw	fp,12(sp)
   83078:	df000304 	addi	fp,sp,12
   8307c:	e13ffd15 	stw	r4,-12(fp)
   83080:	e17ffe15 	stw	r5,-8(fp)
   83084:	e1bfff15 	stw	r6,-4(fp)
  return len;
   83088:	e0bfff17 	ldw	r2,-4(fp)
}
   8308c:	e037883a 	mov	sp,fp
   83090:	df000017 	ldw	fp,0(sp)
   83094:	dec00104 	addi	sp,sp,4
   83098:	f800283a 	ret

0008309c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8309c:	defffe04 	addi	sp,sp,-8
   830a0:	dfc00115 	stw	ra,4(sp)
   830a4:	df000015 	stw	fp,0(sp)
   830a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   830ac:	00800234 	movhi	r2,8
   830b0:	109f3a04 	addi	r2,r2,31976
   830b4:	10800017 	ldw	r2,0(r2)
   830b8:	10000526 	beq	r2,zero,830d0 <alt_get_errno+0x34>
   830bc:	00800234 	movhi	r2,8
   830c0:	109f3a04 	addi	r2,r2,31976
   830c4:	10800017 	ldw	r2,0(r2)
   830c8:	103ee83a 	callr	r2
   830cc:	00000206 	br	830d8 <alt_get_errno+0x3c>
   830d0:	00800274 	movhi	r2,9
   830d4:	10a60804 	addi	r2,r2,-26592
}
   830d8:	e037883a 	mov	sp,fp
   830dc:	dfc00117 	ldw	ra,4(sp)
   830e0:	df000017 	ldw	fp,0(sp)
   830e4:	dec00204 	addi	sp,sp,8
   830e8:	f800283a 	ret

000830ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   830ec:	defffb04 	addi	sp,sp,-20
   830f0:	dfc00415 	stw	ra,16(sp)
   830f4:	df000315 	stw	fp,12(sp)
   830f8:	df000304 	addi	fp,sp,12
   830fc:	e13ffe15 	stw	r4,-8(fp)
   83100:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83104:	e0bffe17 	ldw	r2,-8(fp)
   83108:	10000716 	blt	r2,zero,83128 <fstat+0x3c>
   8310c:	e13ffe17 	ldw	r4,-8(fp)
   83110:	01400304 	movi	r5,12
   83114:	0082f2c0 	call	82f2c <__mulsi3>
   83118:	00c00234 	movhi	r3,8
   8311c:	18da8804 	addi	r3,r3,27168
   83120:	10c5883a 	add	r2,r2,r3
   83124:	00000106 	br	8312c <fstat+0x40>
   83128:	0005883a 	mov	r2,zero
   8312c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   83130:	e0bffd17 	ldw	r2,-12(fp)
   83134:	10001026 	beq	r2,zero,83178 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   83138:	e0bffd17 	ldw	r2,-12(fp)
   8313c:	10800017 	ldw	r2,0(r2)
   83140:	10800817 	ldw	r2,32(r2)
   83144:	10000726 	beq	r2,zero,83164 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   83148:	e0bffd17 	ldw	r2,-12(fp)
   8314c:	10800017 	ldw	r2,0(r2)
   83150:	10800817 	ldw	r2,32(r2)
   83154:	e13ffd17 	ldw	r4,-12(fp)
   83158:	e17fff17 	ldw	r5,-4(fp)
   8315c:	103ee83a 	callr	r2
   83160:	00000906 	br	83188 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   83164:	e0bfff17 	ldw	r2,-4(fp)
   83168:	00c80004 	movi	r3,8192
   8316c:	10c00115 	stw	r3,4(r2)
      return 0;
   83170:	0005883a 	mov	r2,zero
   83174:	00000406 	br	83188 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83178:	008309c0 	call	8309c <alt_get_errno>
   8317c:	00c01444 	movi	r3,81
   83180:	10c00015 	stw	r3,0(r2)
    return -1;
   83184:	00bfffc4 	movi	r2,-1
  }
}
   83188:	e037883a 	mov	sp,fp
   8318c:	dfc00117 	ldw	ra,4(sp)
   83190:	df000017 	ldw	fp,0(sp)
   83194:	dec00204 	addi	sp,sp,8
   83198:	f800283a 	ret

0008319c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8319c:	defffe04 	addi	sp,sp,-8
   831a0:	dfc00115 	stw	ra,4(sp)
   831a4:	df000015 	stw	fp,0(sp)
   831a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   831ac:	00800234 	movhi	r2,8
   831b0:	109f3a04 	addi	r2,r2,31976
   831b4:	10800017 	ldw	r2,0(r2)
   831b8:	10000526 	beq	r2,zero,831d0 <alt_get_errno+0x34>
   831bc:	00800234 	movhi	r2,8
   831c0:	109f3a04 	addi	r2,r2,31976
   831c4:	10800017 	ldw	r2,0(r2)
   831c8:	103ee83a 	callr	r2
   831cc:	00000206 	br	831d8 <alt_get_errno+0x3c>
   831d0:	00800274 	movhi	r2,9
   831d4:	10a60804 	addi	r2,r2,-26592
}
   831d8:	e037883a 	mov	sp,fp
   831dc:	dfc00117 	ldw	ra,4(sp)
   831e0:	df000017 	ldw	fp,0(sp)
   831e4:	dec00204 	addi	sp,sp,8
   831e8:	f800283a 	ret

000831ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   831ec:	deffed04 	addi	sp,sp,-76
   831f0:	dfc01215 	stw	ra,72(sp)
   831f4:	df001115 	stw	fp,68(sp)
   831f8:	df001104 	addi	fp,sp,68
   831fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83200:	e0bfff17 	ldw	r2,-4(fp)
   83204:	10000716 	blt	r2,zero,83224 <isatty+0x38>
   83208:	e13fff17 	ldw	r4,-4(fp)
   8320c:	01400304 	movi	r5,12
   83210:	0082f2c0 	call	82f2c <__mulsi3>
   83214:	00c00234 	movhi	r3,8
   83218:	18da8804 	addi	r3,r3,27168
   8321c:	10c5883a 	add	r2,r2,r3
   83220:	00000106 	br	83228 <isatty+0x3c>
   83224:	0005883a 	mov	r2,zero
   83228:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8322c:	e0bfef17 	ldw	r2,-68(fp)
   83230:	10000e26 	beq	r2,zero,8326c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83234:	e0bfef17 	ldw	r2,-68(fp)
   83238:	10800017 	ldw	r2,0(r2)
   8323c:	10800817 	ldw	r2,32(r2)
   83240:	1000021e 	bne	r2,zero,8324c <isatty+0x60>
    {
      return 1;
   83244:	00800044 	movi	r2,1
   83248:	00000c06 	br	8327c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8324c:	e0bff004 	addi	r2,fp,-64
   83250:	e13fff17 	ldw	r4,-4(fp)
   83254:	100b883a 	mov	r5,r2
   83258:	00830ec0 	call	830ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8325c:	e0bff117 	ldw	r2,-60(fp)
   83260:	10880020 	cmpeqi	r2,r2,8192
   83264:	10803fcc 	andi	r2,r2,255
   83268:	00000406 	br	8327c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8326c:	008319c0 	call	8319c <alt_get_errno>
   83270:	00c01444 	movi	r3,81
   83274:	10c00015 	stw	r3,0(r2)
    return 0;
   83278:	0005883a 	mov	r2,zero
  }
}
   8327c:	e037883a 	mov	sp,fp
   83280:	dfc00117 	ldw	ra,4(sp)
   83284:	df000017 	ldw	fp,0(sp)
   83288:	dec00204 	addi	sp,sp,8
   8328c:	f800283a 	ret

00083290 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   83290:	defffc04 	addi	sp,sp,-16
   83294:	df000315 	stw	fp,12(sp)
   83298:	df000304 	addi	fp,sp,12
   8329c:	e13ffd15 	stw	r4,-12(fp)
   832a0:	e17ffe15 	stw	r5,-8(fp)
   832a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   832a8:	e0fffe17 	ldw	r3,-8(fp)
   832ac:	e0bffd17 	ldw	r2,-12(fp)
   832b0:	18800e26 	beq	r3,r2,832ec <alt_load_section+0x5c>
  {
    while( to != end )
   832b4:	00000a06 	br	832e0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   832b8:	e0bffd17 	ldw	r2,-12(fp)
   832bc:	10c00017 	ldw	r3,0(r2)
   832c0:	e0bffe17 	ldw	r2,-8(fp)
   832c4:	10c00015 	stw	r3,0(r2)
   832c8:	e0bffe17 	ldw	r2,-8(fp)
   832cc:	10800104 	addi	r2,r2,4
   832d0:	e0bffe15 	stw	r2,-8(fp)
   832d4:	e0bffd17 	ldw	r2,-12(fp)
   832d8:	10800104 	addi	r2,r2,4
   832dc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   832e0:	e0fffe17 	ldw	r3,-8(fp)
   832e4:	e0bfff17 	ldw	r2,-4(fp)
   832e8:	18bff31e 	bne	r3,r2,832b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   832ec:	e037883a 	mov	sp,fp
   832f0:	df000017 	ldw	fp,0(sp)
   832f4:	dec00104 	addi	sp,sp,4
   832f8:	f800283a 	ret

000832fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   832fc:	defffe04 	addi	sp,sp,-8
   83300:	dfc00115 	stw	ra,4(sp)
   83304:	df000015 	stw	fp,0(sp)
   83308:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8330c:	01000234 	movhi	r4,8
   83310:	211f3f04 	addi	r4,r4,31996
   83314:	01400234 	movhi	r5,8
   83318:	29587904 	addi	r5,r5,25060
   8331c:	01800234 	movhi	r6,8
   83320:	319f3f04 	addi	r6,r6,31996
   83324:	00832900 	call	83290 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83328:	01000234 	movhi	r4,8
   8332c:	21000804 	addi	r4,r4,32
   83330:	01400234 	movhi	r5,8
   83334:	29400804 	addi	r5,r5,32
   83338:	01800234 	movhi	r6,8
   8333c:	31806e04 	addi	r6,r6,440
   83340:	00832900 	call	83290 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83344:	01000234 	movhi	r4,8
   83348:	21185f04 	addi	r4,r4,24956
   8334c:	01400234 	movhi	r5,8
   83350:	29585f04 	addi	r5,r5,24956
   83354:	01800234 	movhi	r6,8
   83358:	31987904 	addi	r6,r6,25060
   8335c:	00832900 	call	83290 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   83360:	008504c0 	call	8504c <alt_dcache_flush_all>
  alt_icache_flush_all();
   83364:	00852100 	call	85210 <alt_icache_flush_all>
}
   83368:	e037883a 	mov	sp,fp
   8336c:	dfc00117 	ldw	ra,4(sp)
   83370:	df000017 	ldw	fp,0(sp)
   83374:	dec00204 	addi	sp,sp,8
   83378:	f800283a 	ret

0008337c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8337c:	defffe04 	addi	sp,sp,-8
   83380:	dfc00115 	stw	ra,4(sp)
   83384:	df000015 	stw	fp,0(sp)
   83388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8338c:	00800234 	movhi	r2,8
   83390:	109f3a04 	addi	r2,r2,31976
   83394:	10800017 	ldw	r2,0(r2)
   83398:	10000526 	beq	r2,zero,833b0 <alt_get_errno+0x34>
   8339c:	00800234 	movhi	r2,8
   833a0:	109f3a04 	addi	r2,r2,31976
   833a4:	10800017 	ldw	r2,0(r2)
   833a8:	103ee83a 	callr	r2
   833ac:	00000206 	br	833b8 <alt_get_errno+0x3c>
   833b0:	00800274 	movhi	r2,9
   833b4:	10a60804 	addi	r2,r2,-26592
}
   833b8:	e037883a 	mov	sp,fp
   833bc:	dfc00117 	ldw	ra,4(sp)
   833c0:	df000017 	ldw	fp,0(sp)
   833c4:	dec00204 	addi	sp,sp,8
   833c8:	f800283a 	ret

000833cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   833cc:	defff904 	addi	sp,sp,-28
   833d0:	dfc00615 	stw	ra,24(sp)
   833d4:	df000515 	stw	fp,20(sp)
   833d8:	df000504 	addi	fp,sp,20
   833dc:	e13ffd15 	stw	r4,-12(fp)
   833e0:	e17ffe15 	stw	r5,-8(fp)
   833e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   833e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   833ec:	e0bffd17 	ldw	r2,-12(fp)
   833f0:	10000716 	blt	r2,zero,83410 <lseek+0x44>
   833f4:	e13ffd17 	ldw	r4,-12(fp)
   833f8:	01400304 	movi	r5,12
   833fc:	0082f2c0 	call	82f2c <__mulsi3>
   83400:	00c00234 	movhi	r3,8
   83404:	18da8804 	addi	r3,r3,27168
   83408:	10c5883a 	add	r2,r2,r3
   8340c:	00000106 	br	83414 <lseek+0x48>
   83410:	0005883a 	mov	r2,zero
   83414:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   83418:	e0bffc17 	ldw	r2,-16(fp)
   8341c:	10001026 	beq	r2,zero,83460 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   83420:	e0bffc17 	ldw	r2,-16(fp)
   83424:	10800017 	ldw	r2,0(r2)
   83428:	10800717 	ldw	r2,28(r2)
   8342c:	10000926 	beq	r2,zero,83454 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   83430:	e0bffc17 	ldw	r2,-16(fp)
   83434:	10800017 	ldw	r2,0(r2)
   83438:	10800717 	ldw	r2,28(r2)
   8343c:	e13ffc17 	ldw	r4,-16(fp)
   83440:	e17ffe17 	ldw	r5,-8(fp)
   83444:	e1bfff17 	ldw	r6,-4(fp)
   83448:	103ee83a 	callr	r2
   8344c:	e0bffb15 	stw	r2,-20(fp)
   83450:	00000506 	br	83468 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   83454:	00bfde84 	movi	r2,-134
   83458:	e0bffb15 	stw	r2,-20(fp)
   8345c:	00000206 	br	83468 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   83460:	00bfebc4 	movi	r2,-81
   83464:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   83468:	e0bffb17 	ldw	r2,-20(fp)
   8346c:	1000060e 	bge	r2,zero,83488 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   83470:	008337c0 	call	8337c <alt_get_errno>
   83474:	e0fffb17 	ldw	r3,-20(fp)
   83478:	00c7c83a 	sub	r3,zero,r3
   8347c:	10c00015 	stw	r3,0(r2)
    rc = -1;
   83480:	00bfffc4 	movi	r2,-1
   83484:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   83488:	e0bffb17 	ldw	r2,-20(fp)
}
   8348c:	e037883a 	mov	sp,fp
   83490:	dfc00117 	ldw	ra,4(sp)
   83494:	df000017 	ldw	fp,0(sp)
   83498:	dec00204 	addi	sp,sp,8
   8349c:	f800283a 	ret

000834a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   834a0:	defffd04 	addi	sp,sp,-12
   834a4:	dfc00215 	stw	ra,8(sp)
   834a8:	df000115 	stw	fp,4(sp)
   834ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   834b0:	0009883a 	mov	r4,zero
   834b4:	00839b80 	call	839b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   834b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   834bc:	00839ec0 	call	839ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   834c0:	01000234 	movhi	r4,8
   834c4:	21186c04 	addi	r4,r4,25008
   834c8:	01400234 	movhi	r5,8
   834cc:	29586c04 	addi	r5,r5,25008
   834d0:	01800234 	movhi	r6,8
   834d4:	31986c04 	addi	r6,r6,25008
   834d8:	00855d40 	call	855d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   834dc:	00851580 	call	85158 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   834e0:	01000234 	movhi	r4,8
   834e4:	21146d04 	addi	r4,r4,20916
   834e8:	0085d180 	call	85d18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   834ec:	d126d817 	ldw	r4,-25760(gp)
   834f0:	d0e6d917 	ldw	r3,-25756(gp)
   834f4:	d0a6da17 	ldw	r2,-25752(gp)
   834f8:	180b883a 	mov	r5,r3
   834fc:	100d883a 	mov	r6,r2
   83500:	00801f40 	call	801f4 <main>
   83504:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83508:	01000044 	movi	r4,1
   8350c:	0082fa40 	call	82fa4 <close>
  exit (result);
   83510:	e13fff17 	ldw	r4,-4(fp)
   83514:	0085d2c0 	call	85d2c <exit>

00083518 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83518:	defffe04 	addi	sp,sp,-8
   8351c:	df000115 	stw	fp,4(sp)
   83520:	df000104 	addi	fp,sp,4
   83524:	e13fff15 	stw	r4,-4(fp)
}
   83528:	e037883a 	mov	sp,fp
   8352c:	df000017 	ldw	fp,0(sp)
   83530:	dec00104 	addi	sp,sp,4
   83534:	f800283a 	ret

00083538 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   83538:	defffe04 	addi	sp,sp,-8
   8353c:	df000115 	stw	fp,4(sp)
   83540:	df000104 	addi	fp,sp,4
   83544:	e13fff15 	stw	r4,-4(fp)
}
   83548:	e037883a 	mov	sp,fp
   8354c:	df000017 	ldw	fp,0(sp)
   83550:	dec00104 	addi	sp,sp,4
   83554:	f800283a 	ret

00083558 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   83558:	defffd04 	addi	sp,sp,-12
   8355c:	dfc00215 	stw	ra,8(sp)
   83560:	df000115 	stw	fp,4(sp)
   83564:	df000104 	addi	fp,sp,4
   83568:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   8356c:	00800234 	movhi	r2,8
   83570:	109f3204 	addi	r2,r2,31944
   83574:	10800017 	ldw	r2,0(r2)
   83578:	10800217 	ldw	r2,8(r2)
   8357c:	e13fff17 	ldw	r4,-4(fp)
   83580:	100b883a 	mov	r5,r2
   83584:	0085dd80 	call	85dd8 <fputs>
#endif
}
   83588:	e037883a 	mov	sp,fp
   8358c:	dfc00117 	ldw	ra,4(sp)
   83590:	df000017 	ldw	fp,0(sp)
   83594:	dec00204 	addi	sp,sp,8
   83598:	f800283a 	ret

0008359c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8359c:	defffe04 	addi	sp,sp,-8
   835a0:	dfc00115 	stw	ra,4(sp)
   835a4:	df000015 	stw	fp,0(sp)
   835a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   835ac:	00800234 	movhi	r2,8
   835b0:	109f3a04 	addi	r2,r2,31976
   835b4:	10800017 	ldw	r2,0(r2)
   835b8:	10000526 	beq	r2,zero,835d0 <alt_get_errno+0x34>
   835bc:	00800234 	movhi	r2,8
   835c0:	109f3a04 	addi	r2,r2,31976
   835c4:	10800017 	ldw	r2,0(r2)
   835c8:	103ee83a 	callr	r2
   835cc:	00000206 	br	835d8 <alt_get_errno+0x3c>
   835d0:	00800274 	movhi	r2,9
   835d4:	10a60804 	addi	r2,r2,-26592
}
   835d8:	e037883a 	mov	sp,fp
   835dc:	dfc00117 	ldw	ra,4(sp)
   835e0:	df000017 	ldw	fp,0(sp)
   835e4:	dec00204 	addi	sp,sp,8
   835e8:	f800283a 	ret

000835ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   835ec:	defff904 	addi	sp,sp,-28
   835f0:	dfc00615 	stw	ra,24(sp)
   835f4:	df000515 	stw	fp,20(sp)
   835f8:	df000504 	addi	fp,sp,20
   835fc:	e13ffd15 	stw	r4,-12(fp)
   83600:	e17ffe15 	stw	r5,-8(fp)
   83604:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83608:	e0bffd17 	ldw	r2,-12(fp)
   8360c:	10000716 	blt	r2,zero,8362c <read+0x40>
   83610:	e13ffd17 	ldw	r4,-12(fp)
   83614:	01400304 	movi	r5,12
   83618:	0082f2c0 	call	82f2c <__mulsi3>
   8361c:	00c00234 	movhi	r3,8
   83620:	18da8804 	addi	r3,r3,27168
   83624:	10c5883a 	add	r2,r2,r3
   83628:	00000106 	br	83630 <read+0x44>
   8362c:	0005883a 	mov	r2,zero
   83630:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   83634:	e0bffb17 	ldw	r2,-20(fp)
   83638:	10002026 	beq	r2,zero,836bc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8363c:	e0bffb17 	ldw	r2,-20(fp)
   83640:	10800217 	ldw	r2,8(r2)
   83644:	108000cc 	andi	r2,r2,3
   83648:	10800060 	cmpeqi	r2,r2,1
   8364c:	1000171e 	bne	r2,zero,836ac <read+0xc0>
        (fd->dev->read))
   83650:	e0bffb17 	ldw	r2,-20(fp)
   83654:	10800017 	ldw	r2,0(r2)
   83658:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8365c:	10001326 	beq	r2,zero,836ac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   83660:	e0bffb17 	ldw	r2,-20(fp)
   83664:	10800017 	ldw	r2,0(r2)
   83668:	10c00517 	ldw	r3,20(r2)
   8366c:	e0bfff17 	ldw	r2,-4(fp)
   83670:	e13ffb17 	ldw	r4,-20(fp)
   83674:	e17ffe17 	ldw	r5,-8(fp)
   83678:	100d883a 	mov	r6,r2
   8367c:	183ee83a 	callr	r3
   83680:	e0bffc15 	stw	r2,-16(fp)
   83684:	e0bffc17 	ldw	r2,-16(fp)
   83688:	1000060e 	bge	r2,zero,836a4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8368c:	008359c0 	call	8359c <alt_get_errno>
   83690:	e0fffc17 	ldw	r3,-16(fp)
   83694:	00c7c83a 	sub	r3,zero,r3
   83698:	10c00015 	stw	r3,0(r2)
          return -1;
   8369c:	00bfffc4 	movi	r2,-1
   836a0:	00000a06 	br	836cc <read+0xe0>
        }
        return rval;
   836a4:	e0bffc17 	ldw	r2,-16(fp)
   836a8:	00000806 	br	836cc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   836ac:	008359c0 	call	8359c <alt_get_errno>
   836b0:	00c00344 	movi	r3,13
   836b4:	10c00015 	stw	r3,0(r2)
   836b8:	00000306 	br	836c8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   836bc:	008359c0 	call	8359c <alt_get_errno>
   836c0:	00c01444 	movi	r3,81
   836c4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   836c8:	00bfffc4 	movi	r2,-1
}
   836cc:	e037883a 	mov	sp,fp
   836d0:	dfc00117 	ldw	ra,4(sp)
   836d4:	df000017 	ldw	fp,0(sp)
   836d8:	dec00204 	addi	sp,sp,8
   836dc:	f800283a 	ret

000836e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   836e0:	defffc04 	addi	sp,sp,-16
   836e4:	dfc00315 	stw	ra,12(sp)
   836e8:	df000215 	stw	fp,8(sp)
   836ec:	dc000115 	stw	r16,4(sp)
   836f0:	df000104 	addi	fp,sp,4
   836f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   836f8:	e0bfff17 	ldw	r2,-4(fp)
   836fc:	108000d0 	cmplti	r2,r2,3
   83700:	1000111e 	bne	r2,zero,83748 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   83704:	04000234 	movhi	r16,8
   83708:	841a8804 	addi	r16,r16,27168
   8370c:	e0bfff17 	ldw	r2,-4(fp)
   83710:	1009883a 	mov	r4,r2
   83714:	01400304 	movi	r5,12
   83718:	0082f2c0 	call	82f2c <__mulsi3>
   8371c:	8085883a 	add	r2,r16,r2
   83720:	10800204 	addi	r2,r2,8
   83724:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   83728:	04000234 	movhi	r16,8
   8372c:	841a8804 	addi	r16,r16,27168
   83730:	e0bfff17 	ldw	r2,-4(fp)
   83734:	1009883a 	mov	r4,r2
   83738:	01400304 	movi	r5,12
   8373c:	0082f2c0 	call	82f2c <__mulsi3>
   83740:	8085883a 	add	r2,r16,r2
   83744:	10000015 	stw	zero,0(r2)
  }
}
   83748:	e037883a 	mov	sp,fp
   8374c:	dfc00217 	ldw	ra,8(sp)
   83750:	df000117 	ldw	fp,4(sp)
   83754:	dc000017 	ldw	r16,0(sp)
   83758:	dec00304 	addi	sp,sp,12
   8375c:	f800283a 	ret

00083760 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83760:	defff904 	addi	sp,sp,-28
   83764:	df000615 	stw	fp,24(sp)
   83768:	df000604 	addi	fp,sp,24
   8376c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83770:	0005303a 	rdctl	r2,status
   83774:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83778:	e0fffc17 	ldw	r3,-16(fp)
   8377c:	00bfff84 	movi	r2,-2
   83780:	1884703a 	and	r2,r3,r2
   83784:	1001703a 	wrctl	status,r2
  
  return context;
   83788:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8378c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   83790:	d0a00a17 	ldw	r2,-32728(gp)
   83794:	10c000c4 	addi	r3,r2,3
   83798:	00bfff04 	movi	r2,-4
   8379c:	1884703a 	and	r2,r3,r2
   837a0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   837a4:	d0e00a17 	ldw	r3,-32728(gp)
   837a8:	e0bfff17 	ldw	r2,-4(fp)
   837ac:	1885883a 	add	r2,r3,r2
   837b0:	00c003b4 	movhi	r3,14
   837b4:	18c6a004 	addi	r3,r3,6784
   837b8:	1880062e 	bgeu	r3,r2,837d4 <sbrk+0x74>
   837bc:	e0bffa17 	ldw	r2,-24(fp)
   837c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   837c4:	e0bffd17 	ldw	r2,-12(fp)
   837c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   837cc:	00bfffc4 	movi	r2,-1
   837d0:	00000b06 	br	83800 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   837d4:	d0a00a17 	ldw	r2,-32728(gp)
   837d8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   837dc:	d0e00a17 	ldw	r3,-32728(gp)
   837e0:	e0bfff17 	ldw	r2,-4(fp)
   837e4:	1885883a 	add	r2,r3,r2
   837e8:	d0a00a15 	stw	r2,-32728(gp)
   837ec:	e0bffa17 	ldw	r2,-24(fp)
   837f0:	e0bffe15 	stw	r2,-8(fp)
   837f4:	e0bffe17 	ldw	r2,-8(fp)
   837f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   837fc:	e0bffb17 	ldw	r2,-20(fp)
} 
   83800:	e037883a 	mov	sp,fp
   83804:	df000017 	ldw	fp,0(sp)
   83808:	dec00104 	addi	sp,sp,4
   8380c:	f800283a 	ret

00083810 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   83810:	defffd04 	addi	sp,sp,-12
   83814:	dfc00215 	stw	ra,8(sp)
   83818:	df000115 	stw	fp,4(sp)
   8381c:	df000104 	addi	fp,sp,4
   83820:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   83824:	e13fff17 	ldw	r4,-4(fp)
   83828:	0084ef80 	call	84ef8 <alt_busy_sleep>
}
   8382c:	e037883a 	mov	sp,fp
   83830:	dfc00117 	ldw	ra,4(sp)
   83834:	df000017 	ldw	fp,0(sp)
   83838:	dec00204 	addi	sp,sp,8
   8383c:	f800283a 	ret

00083840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83840:	defffe04 	addi	sp,sp,-8
   83844:	dfc00115 	stw	ra,4(sp)
   83848:	df000015 	stw	fp,0(sp)
   8384c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83850:	00800234 	movhi	r2,8
   83854:	109f3a04 	addi	r2,r2,31976
   83858:	10800017 	ldw	r2,0(r2)
   8385c:	10000526 	beq	r2,zero,83874 <alt_get_errno+0x34>
   83860:	00800234 	movhi	r2,8
   83864:	109f3a04 	addi	r2,r2,31976
   83868:	10800017 	ldw	r2,0(r2)
   8386c:	103ee83a 	callr	r2
   83870:	00000206 	br	8387c <alt_get_errno+0x3c>
   83874:	00800274 	movhi	r2,9
   83878:	10a60804 	addi	r2,r2,-26592
}
   8387c:	e037883a 	mov	sp,fp
   83880:	dfc00117 	ldw	ra,4(sp)
   83884:	df000017 	ldw	fp,0(sp)
   83888:	dec00204 	addi	sp,sp,8
   8388c:	f800283a 	ret

00083890 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   83890:	defff904 	addi	sp,sp,-28
   83894:	dfc00615 	stw	ra,24(sp)
   83898:	df000515 	stw	fp,20(sp)
   8389c:	df000504 	addi	fp,sp,20
   838a0:	e13ffd15 	stw	r4,-12(fp)
   838a4:	e17ffe15 	stw	r5,-8(fp)
   838a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   838ac:	e0bffd17 	ldw	r2,-12(fp)
   838b0:	10000716 	blt	r2,zero,838d0 <write+0x40>
   838b4:	e13ffd17 	ldw	r4,-12(fp)
   838b8:	01400304 	movi	r5,12
   838bc:	0082f2c0 	call	82f2c <__mulsi3>
   838c0:	00c00234 	movhi	r3,8
   838c4:	18da8804 	addi	r3,r3,27168
   838c8:	10c5883a 	add	r2,r2,r3
   838cc:	00000106 	br	838d4 <write+0x44>
   838d0:	0005883a 	mov	r2,zero
   838d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   838d8:	e0bffb17 	ldw	r2,-20(fp)
   838dc:	10001f26 	beq	r2,zero,8395c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   838e0:	e0bffb17 	ldw	r2,-20(fp)
   838e4:	10800217 	ldw	r2,8(r2)
   838e8:	108000cc 	andi	r2,r2,3
   838ec:	10001726 	beq	r2,zero,8394c <write+0xbc>
   838f0:	e0bffb17 	ldw	r2,-20(fp)
   838f4:	10800017 	ldw	r2,0(r2)
   838f8:	10800617 	ldw	r2,24(r2)
   838fc:	10001326 	beq	r2,zero,8394c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83900:	e0bffb17 	ldw	r2,-20(fp)
   83904:	10800017 	ldw	r2,0(r2)
   83908:	10c00617 	ldw	r3,24(r2)
   8390c:	e0bfff17 	ldw	r2,-4(fp)
   83910:	e13ffb17 	ldw	r4,-20(fp)
   83914:	e17ffe17 	ldw	r5,-8(fp)
   83918:	100d883a 	mov	r6,r2
   8391c:	183ee83a 	callr	r3
   83920:	e0bffc15 	stw	r2,-16(fp)
   83924:	e0bffc17 	ldw	r2,-16(fp)
   83928:	1000060e 	bge	r2,zero,83944 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8392c:	00838400 	call	83840 <alt_get_errno>
   83930:	e0fffc17 	ldw	r3,-16(fp)
   83934:	00c7c83a 	sub	r3,zero,r3
   83938:	10c00015 	stw	r3,0(r2)
        return -1;
   8393c:	00bfffc4 	movi	r2,-1
   83940:	00000a06 	br	8396c <write+0xdc>
      }
      return rval;
   83944:	e0bffc17 	ldw	r2,-16(fp)
   83948:	00000806 	br	8396c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8394c:	00838400 	call	83840 <alt_get_errno>
   83950:	00c00344 	movi	r3,13
   83954:	10c00015 	stw	r3,0(r2)
   83958:	00000306 	br	83968 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8395c:	00838400 	call	83840 <alt_get_errno>
   83960:	00c01444 	movi	r3,81
   83964:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   83968:	00bfffc4 	movi	r2,-1
}
   8396c:	e037883a 	mov	sp,fp
   83970:	dfc00117 	ldw	ra,4(sp)
   83974:	df000017 	ldw	fp,0(sp)
   83978:	dec00204 	addi	sp,sp,8
   8397c:	f800283a 	ret

00083980 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83980:	defffd04 	addi	sp,sp,-12
   83984:	dfc00215 	stw	ra,8(sp)
   83988:	df000115 	stw	fp,4(sp)
   8398c:	df000104 	addi	fp,sp,4
   83990:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83994:	e13fff17 	ldw	r4,-4(fp)
   83998:	01400234 	movhi	r5,8
   8399c:	295f3704 	addi	r5,r5,31964
   839a0:	00850b80 	call	850b8 <alt_dev_llist_insert>
}
   839a4:	e037883a 	mov	sp,fp
   839a8:	dfc00117 	ldw	ra,4(sp)
   839ac:	df000017 	ldw	fp,0(sp)
   839b0:	dec00204 	addi	sp,sp,8
   839b4:	f800283a 	ret

000839b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   839b8:	defffd04 	addi	sp,sp,-12
   839bc:	dfc00215 	stw	ra,8(sp)
   839c0:	df000115 	stw	fp,4(sp)
   839c4:	df000104 	addi	fp,sp,4
   839c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   839cc:	0085a800 	call	85a80 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   839d0:	00800044 	movi	r2,1
   839d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   839d8:	e037883a 	mov	sp,fp
   839dc:	dfc00117 	ldw	ra,4(sp)
   839e0:	df000017 	ldw	fp,0(sp)
   839e4:	dec00204 	addi	sp,sp,8
   839e8:	f800283a 	ret

000839ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   839ec:	defffe04 	addi	sp,sp,-8
   839f0:	dfc00115 	stw	ra,4(sp)
   839f4:	df000015 	stw	fp,0(sp)
   839f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   839fc:	01000234 	movhi	r4,8
   83a00:	211af204 	addi	r4,r4,27592
   83a04:	000b883a 	mov	r5,zero
   83a08:	000d883a 	mov	r6,zero
   83a0c:	0083bb40 	call	83bb4 <altera_avalon_jtag_uart_init>
   83a10:	01000234 	movhi	r4,8
   83a14:	211ae804 	addi	r4,r4,27552
   83a18:	00839800 	call	83980 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   83a1c:	01000234 	movhi	r4,8
   83a20:	211f0a04 	addi	r4,r4,31784
   83a24:	000b883a 	mov	r5,zero
   83a28:	01800044 	movi	r6,1
   83a2c:	00845c40 	call	845c4 <altera_avalon_uart_init>
   83a30:	01000234 	movhi	r4,8
   83a34:	211f0004 	addi	r4,r4,31744
   83a38:	00839800 	call	83980 <alt_dev_reg>
}
   83a3c:	e037883a 	mov	sp,fp
   83a40:	dfc00117 	ldw	ra,4(sp)
   83a44:	df000017 	ldw	fp,0(sp)
   83a48:	dec00204 	addi	sp,sp,8
   83a4c:	f800283a 	ret

00083a50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83a50:	defffa04 	addi	sp,sp,-24
   83a54:	dfc00515 	stw	ra,20(sp)
   83a58:	df000415 	stw	fp,16(sp)
   83a5c:	df000404 	addi	fp,sp,16
   83a60:	e13ffd15 	stw	r4,-12(fp)
   83a64:	e17ffe15 	stw	r5,-8(fp)
   83a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83a6c:	e0bffd17 	ldw	r2,-12(fp)
   83a70:	10800017 	ldw	r2,0(r2)
   83a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83a78:	e0bffc17 	ldw	r2,-16(fp)
   83a7c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   83a80:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83a84:	10800217 	ldw	r2,8(r2)
   83a88:	1809883a 	mov	r4,r3
   83a8c:	e17ffe17 	ldw	r5,-8(fp)
   83a90:	e1bfff17 	ldw	r6,-4(fp)
   83a94:	100f883a 	mov	r7,r2
   83a98:	00840780 	call	84078 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83a9c:	e037883a 	mov	sp,fp
   83aa0:	dfc00117 	ldw	ra,4(sp)
   83aa4:	df000017 	ldw	fp,0(sp)
   83aa8:	dec00204 	addi	sp,sp,8
   83aac:	f800283a 	ret

00083ab0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83ab0:	defffa04 	addi	sp,sp,-24
   83ab4:	dfc00515 	stw	ra,20(sp)
   83ab8:	df000415 	stw	fp,16(sp)
   83abc:	df000404 	addi	fp,sp,16
   83ac0:	e13ffd15 	stw	r4,-12(fp)
   83ac4:	e17ffe15 	stw	r5,-8(fp)
   83ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83acc:	e0bffd17 	ldw	r2,-12(fp)
   83ad0:	10800017 	ldw	r2,0(r2)
   83ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83ad8:	e0bffc17 	ldw	r2,-16(fp)
   83adc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   83ae0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83ae4:	10800217 	ldw	r2,8(r2)
   83ae8:	1809883a 	mov	r4,r3
   83aec:	e17ffe17 	ldw	r5,-8(fp)
   83af0:	e1bfff17 	ldw	r6,-4(fp)
   83af4:	100f883a 	mov	r7,r2
   83af8:	00842900 	call	84290 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83afc:	e037883a 	mov	sp,fp
   83b00:	dfc00117 	ldw	ra,4(sp)
   83b04:	df000017 	ldw	fp,0(sp)
   83b08:	dec00204 	addi	sp,sp,8
   83b0c:	f800283a 	ret

00083b10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83b10:	defffc04 	addi	sp,sp,-16
   83b14:	dfc00315 	stw	ra,12(sp)
   83b18:	df000215 	stw	fp,8(sp)
   83b1c:	df000204 	addi	fp,sp,8
   83b20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83b24:	e0bfff17 	ldw	r2,-4(fp)
   83b28:	10800017 	ldw	r2,0(r2)
   83b2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83b30:	e0bffe17 	ldw	r2,-8(fp)
   83b34:	10c00a04 	addi	r3,r2,40
   83b38:	e0bfff17 	ldw	r2,-4(fp)
   83b3c:	10800217 	ldw	r2,8(r2)
   83b40:	1809883a 	mov	r4,r3
   83b44:	100b883a 	mov	r5,r2
   83b48:	0083f1c0 	call	83f1c <altera_avalon_jtag_uart_close>
}
   83b4c:	e037883a 	mov	sp,fp
   83b50:	dfc00117 	ldw	ra,4(sp)
   83b54:	df000017 	ldw	fp,0(sp)
   83b58:	dec00204 	addi	sp,sp,8
   83b5c:	f800283a 	ret

00083b60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83b60:	defffa04 	addi	sp,sp,-24
   83b64:	dfc00515 	stw	ra,20(sp)
   83b68:	df000415 	stw	fp,16(sp)
   83b6c:	df000404 	addi	fp,sp,16
   83b70:	e13ffd15 	stw	r4,-12(fp)
   83b74:	e17ffe15 	stw	r5,-8(fp)
   83b78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83b7c:	e0bffd17 	ldw	r2,-12(fp)
   83b80:	10800017 	ldw	r2,0(r2)
   83b84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83b88:	e0bffc17 	ldw	r2,-16(fp)
   83b8c:	10800a04 	addi	r2,r2,40
   83b90:	1009883a 	mov	r4,r2
   83b94:	e17ffe17 	ldw	r5,-8(fp)
   83b98:	e1bfff17 	ldw	r6,-4(fp)
   83b9c:	0083f840 	call	83f84 <altera_avalon_jtag_uart_ioctl>
}
   83ba0:	e037883a 	mov	sp,fp
   83ba4:	dfc00117 	ldw	ra,4(sp)
   83ba8:	df000017 	ldw	fp,0(sp)
   83bac:	dec00204 	addi	sp,sp,8
   83bb0:	f800283a 	ret

00083bb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83bb4:	defffa04 	addi	sp,sp,-24
   83bb8:	dfc00515 	stw	ra,20(sp)
   83bbc:	df000415 	stw	fp,16(sp)
   83bc0:	df000404 	addi	fp,sp,16
   83bc4:	e13ffd15 	stw	r4,-12(fp)
   83bc8:	e17ffe15 	stw	r5,-8(fp)
   83bcc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83bd0:	e0bffd17 	ldw	r2,-12(fp)
   83bd4:	00c00044 	movi	r3,1
   83bd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83bdc:	e0bffd17 	ldw	r2,-12(fp)
   83be0:	10800017 	ldw	r2,0(r2)
   83be4:	10800104 	addi	r2,r2,4
   83be8:	e0fffd17 	ldw	r3,-12(fp)
   83bec:	18c00817 	ldw	r3,32(r3)
   83bf0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83bf4:	e0fffe17 	ldw	r3,-8(fp)
   83bf8:	e0bfff17 	ldw	r2,-4(fp)
   83bfc:	d8000015 	stw	zero,0(sp)
   83c00:	1809883a 	mov	r4,r3
   83c04:	100b883a 	mov	r5,r2
   83c08:	01800234 	movhi	r6,8
   83c0c:	318f1d04 	addi	r6,r6,15476
   83c10:	e1fffd17 	ldw	r7,-12(fp)
   83c14:	008522c0 	call	8522c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83c18:	e0bffd17 	ldw	r2,-12(fp)
   83c1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83c20:	e0bffd17 	ldw	r2,-12(fp)
   83c24:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83c28:	00800274 	movhi	r2,9
   83c2c:	10a60d04 	addi	r2,r2,-26572
   83c30:	10800017 	ldw	r2,0(r2)
   83c34:	1809883a 	mov	r4,r3
   83c38:	100b883a 	mov	r5,r2
   83c3c:	01800234 	movhi	r6,8
   83c40:	318f9e04 	addi	r6,r6,15992
   83c44:	e1fffd17 	ldw	r7,-12(fp)
   83c48:	0084db80 	call	84db8 <alt_alarm_start>
   83c4c:	1000040e 	bge	r2,zero,83c60 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83c50:	e0bffd17 	ldw	r2,-12(fp)
   83c54:	00e00034 	movhi	r3,32768
   83c58:	18ffffc4 	addi	r3,r3,-1
   83c5c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83c60:	e037883a 	mov	sp,fp
   83c64:	dfc00117 	ldw	ra,4(sp)
   83c68:	df000017 	ldw	fp,0(sp)
   83c6c:	dec00204 	addi	sp,sp,8
   83c70:	f800283a 	ret

00083c74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83c74:	defff804 	addi	sp,sp,-32
   83c78:	df000715 	stw	fp,28(sp)
   83c7c:	df000704 	addi	fp,sp,28
   83c80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83c84:	e0bfff17 	ldw	r2,-4(fp)
   83c88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   83c8c:	e0bffb17 	ldw	r2,-20(fp)
   83c90:	10800017 	ldw	r2,0(r2)
   83c94:	e0bffc15 	stw	r2,-16(fp)
   83c98:	00000106 	br	83ca0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   83c9c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83ca0:	e0bffc17 	ldw	r2,-16(fp)
   83ca4:	10800104 	addi	r2,r2,4
   83ca8:	10800037 	ldwio	r2,0(r2)
   83cac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83cb0:	e0bffd17 	ldw	r2,-12(fp)
   83cb4:	1080c00c 	andi	r2,r2,768
   83cb8:	10006a26 	beq	r2,zero,83e64 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83cbc:	e0bffd17 	ldw	r2,-12(fp)
   83cc0:	1080400c 	andi	r2,r2,256
   83cc4:	10003326 	beq	r2,zero,83d94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83cc8:	00800074 	movhi	r2,1
   83ccc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83cd0:	e0bffb17 	ldw	r2,-20(fp)
   83cd4:	10800a17 	ldw	r2,40(r2)
   83cd8:	10800044 	addi	r2,r2,1
   83cdc:	1081ffcc 	andi	r2,r2,2047
   83ce0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   83ce4:	e0bffb17 	ldw	r2,-20(fp)
   83ce8:	10c00b17 	ldw	r3,44(r2)
   83cec:	e0bffe17 	ldw	r2,-8(fp)
   83cf0:	18801426 	beq	r3,r2,83d44 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83cf4:	e0bffc17 	ldw	r2,-16(fp)
   83cf8:	10800037 	ldwio	r2,0(r2)
   83cfc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83d00:	e0bff917 	ldw	r2,-28(fp)
   83d04:	10a0000c 	andi	r2,r2,32768
   83d08:	10001026 	beq	r2,zero,83d4c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83d0c:	e0bffb17 	ldw	r2,-20(fp)
   83d10:	10800a17 	ldw	r2,40(r2)
   83d14:	e0fff917 	ldw	r3,-28(fp)
   83d18:	e13ffb17 	ldw	r4,-20(fp)
   83d1c:	2085883a 	add	r2,r4,r2
   83d20:	10800e04 	addi	r2,r2,56
   83d24:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83d28:	e0bffb17 	ldw	r2,-20(fp)
   83d2c:	10800a17 	ldw	r2,40(r2)
   83d30:	10800044 	addi	r2,r2,1
   83d34:	10c1ffcc 	andi	r3,r2,2047
   83d38:	e0bffb17 	ldw	r2,-20(fp)
   83d3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83d40:	003fe306 	br	83cd0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   83d44:	0001883a 	nop
   83d48:	00000106 	br	83d50 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   83d4c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83d50:	e0bff917 	ldw	r2,-28(fp)
   83d54:	10bfffec 	andhi	r2,r2,65535
   83d58:	10000e26 	beq	r2,zero,83d94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83d5c:	e0bffb17 	ldw	r2,-20(fp)
   83d60:	10c00817 	ldw	r3,32(r2)
   83d64:	00bfff84 	movi	r2,-2
   83d68:	1886703a 	and	r3,r3,r2
   83d6c:	e0bffb17 	ldw	r2,-20(fp)
   83d70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83d74:	e0bffc17 	ldw	r2,-16(fp)
   83d78:	10800104 	addi	r2,r2,4
   83d7c:	e0fffb17 	ldw	r3,-20(fp)
   83d80:	18c00817 	ldw	r3,32(r3)
   83d84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83d88:	e0bffc17 	ldw	r2,-16(fp)
   83d8c:	10800104 	addi	r2,r2,4
   83d90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83d94:	e0bffd17 	ldw	r2,-12(fp)
   83d98:	1080800c 	andi	r2,r2,512
   83d9c:	103fbf26 	beq	r2,zero,83c9c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83da0:	e0bffd17 	ldw	r2,-12(fp)
   83da4:	1004d43a 	srli	r2,r2,16
   83da8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83dac:	00001406 	br	83e00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83db0:	e0bffc17 	ldw	r2,-16(fp)
   83db4:	e0fffb17 	ldw	r3,-20(fp)
   83db8:	18c00d17 	ldw	r3,52(r3)
   83dbc:	e13ffb17 	ldw	r4,-20(fp)
   83dc0:	20c7883a 	add	r3,r4,r3
   83dc4:	18c20e04 	addi	r3,r3,2104
   83dc8:	18c00003 	ldbu	r3,0(r3)
   83dcc:	18c03fcc 	andi	r3,r3,255
   83dd0:	18c0201c 	xori	r3,r3,128
   83dd4:	18ffe004 	addi	r3,r3,-128
   83dd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83ddc:	e0bffb17 	ldw	r2,-20(fp)
   83de0:	10800d17 	ldw	r2,52(r2)
   83de4:	10800044 	addi	r2,r2,1
   83de8:	10c1ffcc 	andi	r3,r2,2047
   83dec:	e0bffb17 	ldw	r2,-20(fp)
   83df0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83df4:	e0bffa17 	ldw	r2,-24(fp)
   83df8:	10bfffc4 	addi	r2,r2,-1
   83dfc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   83e00:	e0bffa17 	ldw	r2,-24(fp)
   83e04:	10000526 	beq	r2,zero,83e1c <altera_avalon_jtag_uart_irq+0x1a8>
   83e08:	e0bffb17 	ldw	r2,-20(fp)
   83e0c:	10c00d17 	ldw	r3,52(r2)
   83e10:	e0bffb17 	ldw	r2,-20(fp)
   83e14:	10800c17 	ldw	r2,48(r2)
   83e18:	18bfe51e 	bne	r3,r2,83db0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   83e1c:	e0bffa17 	ldw	r2,-24(fp)
   83e20:	103f9e26 	beq	r2,zero,83c9c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83e24:	e0bffb17 	ldw	r2,-20(fp)
   83e28:	10c00817 	ldw	r3,32(r2)
   83e2c:	00bfff44 	movi	r2,-3
   83e30:	1886703a 	and	r3,r3,r2
   83e34:	e0bffb17 	ldw	r2,-20(fp)
   83e38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83e3c:	e0bffb17 	ldw	r2,-20(fp)
   83e40:	10800017 	ldw	r2,0(r2)
   83e44:	10800104 	addi	r2,r2,4
   83e48:	e0fffb17 	ldw	r3,-20(fp)
   83e4c:	18c00817 	ldw	r3,32(r3)
   83e50:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83e54:	e0bffc17 	ldw	r2,-16(fp)
   83e58:	10800104 	addi	r2,r2,4
   83e5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83e60:	003f8e06 	br	83c9c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   83e64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   83e68:	e037883a 	mov	sp,fp
   83e6c:	df000017 	ldw	fp,0(sp)
   83e70:	dec00104 	addi	sp,sp,4
   83e74:	f800283a 	ret

00083e78 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83e78:	defffc04 	addi	sp,sp,-16
   83e7c:	df000315 	stw	fp,12(sp)
   83e80:	df000304 	addi	fp,sp,12
   83e84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83e88:	e0bfff17 	ldw	r2,-4(fp)
   83e8c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83e90:	e0bffd17 	ldw	r2,-12(fp)
   83e94:	10800017 	ldw	r2,0(r2)
   83e98:	10800104 	addi	r2,r2,4
   83e9c:	10800037 	ldwio	r2,0(r2)
   83ea0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83ea4:	e0bffe17 	ldw	r2,-8(fp)
   83ea8:	1081000c 	andi	r2,r2,1024
   83eac:	10000a26 	beq	r2,zero,83ed8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83eb0:	e0bffd17 	ldw	r2,-12(fp)
   83eb4:	10800017 	ldw	r2,0(r2)
   83eb8:	10800104 	addi	r2,r2,4
   83ebc:	e0fffd17 	ldw	r3,-12(fp)
   83ec0:	18c00817 	ldw	r3,32(r3)
   83ec4:	18c10014 	ori	r3,r3,1024
   83ec8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   83ecc:	e0bffd17 	ldw	r2,-12(fp)
   83ed0:	10000915 	stw	zero,36(r2)
   83ed4:	00000a06 	br	83f00 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83ed8:	e0bffd17 	ldw	r2,-12(fp)
   83edc:	10800917 	ldw	r2,36(r2)
   83ee0:	00e00034 	movhi	r3,32768
   83ee4:	18ffff04 	addi	r3,r3,-4
   83ee8:	18800536 	bltu	r3,r2,83f00 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   83eec:	e0bffd17 	ldw	r2,-12(fp)
   83ef0:	10800917 	ldw	r2,36(r2)
   83ef4:	10c00044 	addi	r3,r2,1
   83ef8:	e0bffd17 	ldw	r2,-12(fp)
   83efc:	10c00915 	stw	r3,36(r2)
   83f00:	00800274 	movhi	r2,9
   83f04:	10a60d04 	addi	r2,r2,-26572
   83f08:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   83f0c:	e037883a 	mov	sp,fp
   83f10:	df000017 	ldw	fp,0(sp)
   83f14:	dec00104 	addi	sp,sp,4
   83f18:	f800283a 	ret

00083f1c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   83f1c:	defffd04 	addi	sp,sp,-12
   83f20:	df000215 	stw	fp,8(sp)
   83f24:	df000204 	addi	fp,sp,8
   83f28:	e13ffe15 	stw	r4,-8(fp)
   83f2c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83f30:	00000506 	br	83f48 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   83f34:	e0bfff17 	ldw	r2,-4(fp)
   83f38:	1090000c 	andi	r2,r2,16384
   83f3c:	10000226 	beq	r2,zero,83f48 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   83f40:	00bffd44 	movi	r2,-11
   83f44:	00000b06 	br	83f74 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83f48:	e0bffe17 	ldw	r2,-8(fp)
   83f4c:	10c00d17 	ldw	r3,52(r2)
   83f50:	e0bffe17 	ldw	r2,-8(fp)
   83f54:	10800c17 	ldw	r2,48(r2)
   83f58:	18800526 	beq	r3,r2,83f70 <altera_avalon_jtag_uart_close+0x54>
   83f5c:	e0bffe17 	ldw	r2,-8(fp)
   83f60:	10c00917 	ldw	r3,36(r2)
   83f64:	e0bffe17 	ldw	r2,-8(fp)
   83f68:	10800117 	ldw	r2,4(r2)
   83f6c:	18bff136 	bltu	r3,r2,83f34 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   83f70:	0005883a 	mov	r2,zero
}
   83f74:	e037883a 	mov	sp,fp
   83f78:	df000017 	ldw	fp,0(sp)
   83f7c:	dec00104 	addi	sp,sp,4
   83f80:	f800283a 	ret

00083f84 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   83f84:	defffa04 	addi	sp,sp,-24
   83f88:	df000515 	stw	fp,20(sp)
   83f8c:	df000504 	addi	fp,sp,20
   83f90:	e13ffd15 	stw	r4,-12(fp)
   83f94:	e17ffe15 	stw	r5,-8(fp)
   83f98:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   83f9c:	00bff9c4 	movi	r2,-25
   83fa0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   83fa4:	e0bffe17 	ldw	r2,-8(fp)
   83fa8:	10da8060 	cmpeqi	r3,r2,27137
   83fac:	1800031e 	bne	r3,zero,83fbc <altera_avalon_jtag_uart_ioctl+0x38>
   83fb0:	109a80a0 	cmpeqi	r2,r2,27138
   83fb4:	1000181e 	bne	r2,zero,84018 <altera_avalon_jtag_uart_ioctl+0x94>
   83fb8:	00002606 	br	84054 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   83fbc:	e0bffd17 	ldw	r2,-12(fp)
   83fc0:	10c00117 	ldw	r3,4(r2)
   83fc4:	00a00034 	movhi	r2,32768
   83fc8:	10bfffc4 	addi	r2,r2,-1
   83fcc:	18802226 	beq	r3,r2,84058 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   83fd0:	e0bfff17 	ldw	r2,-4(fp)
   83fd4:	10800017 	ldw	r2,0(r2)
   83fd8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   83fdc:	e0bffc17 	ldw	r2,-16(fp)
   83fe0:	10800090 	cmplti	r2,r2,2
   83fe4:	1000061e 	bne	r2,zero,84000 <altera_avalon_jtag_uart_ioctl+0x7c>
   83fe8:	e0fffc17 	ldw	r3,-16(fp)
   83fec:	00a00034 	movhi	r2,32768
   83ff0:	10bfffc4 	addi	r2,r2,-1
   83ff4:	18800226 	beq	r3,r2,84000 <altera_avalon_jtag_uart_ioctl+0x7c>
   83ff8:	e0bffc17 	ldw	r2,-16(fp)
   83ffc:	00000206 	br	84008 <altera_avalon_jtag_uart_ioctl+0x84>
   84000:	00a00034 	movhi	r2,32768
   84004:	10bfff84 	addi	r2,r2,-2
   84008:	e0fffd17 	ldw	r3,-12(fp)
   8400c:	18800115 	stw	r2,4(r3)
      rc = 0;
   84010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   84014:	00001006 	br	84058 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84018:	e0bffd17 	ldw	r2,-12(fp)
   8401c:	10c00117 	ldw	r3,4(r2)
   84020:	00a00034 	movhi	r2,32768
   84024:	10bfffc4 	addi	r2,r2,-1
   84028:	18800d26 	beq	r3,r2,84060 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8402c:	e0bffd17 	ldw	r2,-12(fp)
   84030:	10c00917 	ldw	r3,36(r2)
   84034:	e0bffd17 	ldw	r2,-12(fp)
   84038:	10800117 	ldw	r2,4(r2)
   8403c:	1885803a 	cmpltu	r2,r3,r2
   84040:	10c03fcc 	andi	r3,r2,255
   84044:	e0bfff17 	ldw	r2,-4(fp)
   84048:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8404c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   84050:	00000306 	br	84060 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   84054:	00000306 	br	84064 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   84058:	0001883a 	nop
   8405c:	00000106 	br	84064 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   84060:	0001883a 	nop

  default:
    break;
  }

  return rc;
   84064:	e0bffb17 	ldw	r2,-20(fp)
}
   84068:	e037883a 	mov	sp,fp
   8406c:	df000017 	ldw	fp,0(sp)
   84070:	dec00104 	addi	sp,sp,4
   84074:	f800283a 	ret

00084078 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   84078:	defff304 	addi	sp,sp,-52
   8407c:	dfc00c15 	stw	ra,48(sp)
   84080:	df000b15 	stw	fp,44(sp)
   84084:	df000b04 	addi	fp,sp,44
   84088:	e13ffc15 	stw	r4,-16(fp)
   8408c:	e17ffd15 	stw	r5,-12(fp)
   84090:	e1bffe15 	stw	r6,-8(fp)
   84094:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   84098:	e0bffd17 	ldw	r2,-12(fp)
   8409c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   840a0:	00004706 	br	841c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   840a4:	e0bffc17 	ldw	r2,-16(fp)
   840a8:	10800a17 	ldw	r2,40(r2)
   840ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   840b0:	e0bffc17 	ldw	r2,-16(fp)
   840b4:	10800b17 	ldw	r2,44(r2)
   840b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   840bc:	e0fff717 	ldw	r3,-36(fp)
   840c0:	e0bff817 	ldw	r2,-32(fp)
   840c4:	18800536 	bltu	r3,r2,840dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   840c8:	e0fff717 	ldw	r3,-36(fp)
   840cc:	e0bff817 	ldw	r2,-32(fp)
   840d0:	1885c83a 	sub	r2,r3,r2
   840d4:	e0bff615 	stw	r2,-40(fp)
   840d8:	00000406 	br	840ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   840dc:	00c20004 	movi	r3,2048
   840e0:	e0bff817 	ldw	r2,-32(fp)
   840e4:	1885c83a 	sub	r2,r3,r2
   840e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   840ec:	e0bff617 	ldw	r2,-40(fp)
   840f0:	10001e26 	beq	r2,zero,8416c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   840f4:	e0fffe17 	ldw	r3,-8(fp)
   840f8:	e0bff617 	ldw	r2,-40(fp)
   840fc:	1880022e 	bgeu	r3,r2,84108 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   84100:	e0bffe17 	ldw	r2,-8(fp)
   84104:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   84108:	e0bff817 	ldw	r2,-32(fp)
   8410c:	10800e04 	addi	r2,r2,56
   84110:	e0fffc17 	ldw	r3,-16(fp)
   84114:	1885883a 	add	r2,r3,r2
   84118:	e13ff517 	ldw	r4,-44(fp)
   8411c:	100b883a 	mov	r5,r2
   84120:	e1bff617 	ldw	r6,-40(fp)
   84124:	00812940 	call	81294 <memcpy>
      ptr   += n;
   84128:	e0fff517 	ldw	r3,-44(fp)
   8412c:	e0bff617 	ldw	r2,-40(fp)
   84130:	1885883a 	add	r2,r3,r2
   84134:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   84138:	e0fffe17 	ldw	r3,-8(fp)
   8413c:	e0bff617 	ldw	r2,-40(fp)
   84140:	1885c83a 	sub	r2,r3,r2
   84144:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84148:	e0fff817 	ldw	r3,-32(fp)
   8414c:	e0bff617 	ldw	r2,-40(fp)
   84150:	1885883a 	add	r2,r3,r2
   84154:	10c1ffcc 	andi	r3,r2,2047
   84158:	e0bffc17 	ldw	r2,-16(fp)
   8415c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   84160:	e0bffe17 	ldw	r2,-8(fp)
   84164:	00bfcf16 	blt	zero,r2,840a4 <altera_avalon_jtag_uart_read+0x2c>
   84168:	00000106 	br	84170 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8416c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   84170:	e0fff517 	ldw	r3,-44(fp)
   84174:	e0bffd17 	ldw	r2,-12(fp)
   84178:	1880141e 	bne	r3,r2,841cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8417c:	e0bfff17 	ldw	r2,-4(fp)
   84180:	1090000c 	andi	r2,r2,16384
   84184:	1000131e 	bne	r2,zero,841d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   84188:	0001883a 	nop
   8418c:	e0bffc17 	ldw	r2,-16(fp)
   84190:	10c00a17 	ldw	r3,40(r2)
   84194:	e0bff717 	ldw	r2,-36(fp)
   84198:	1880051e 	bne	r3,r2,841b0 <altera_avalon_jtag_uart_read+0x138>
   8419c:	e0bffc17 	ldw	r2,-16(fp)
   841a0:	10c00917 	ldw	r3,36(r2)
   841a4:	e0bffc17 	ldw	r2,-16(fp)
   841a8:	10800117 	ldw	r2,4(r2)
   841ac:	18bff736 	bltu	r3,r2,8418c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   841b0:	e0bffc17 	ldw	r2,-16(fp)
   841b4:	10c00a17 	ldw	r3,40(r2)
   841b8:	e0bff717 	ldw	r2,-36(fp)
   841bc:	18800726 	beq	r3,r2,841dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   841c0:	e0bffe17 	ldw	r2,-8(fp)
   841c4:	00bfb716 	blt	zero,r2,840a4 <altera_avalon_jtag_uart_read+0x2c>
   841c8:	00000506 	br	841e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   841cc:	0001883a 	nop
   841d0:	00000306 	br	841e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   841d4:	0001883a 	nop
   841d8:	00000106 	br	841e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   841dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   841e0:	e0fff517 	ldw	r3,-44(fp)
   841e4:	e0bffd17 	ldw	r2,-12(fp)
   841e8:	18801726 	beq	r3,r2,84248 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   841ec:	0005303a 	rdctl	r2,status
   841f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   841f4:	e0fffa17 	ldw	r3,-24(fp)
   841f8:	00bfff84 	movi	r2,-2
   841fc:	1884703a 	and	r2,r3,r2
   84200:	1001703a 	wrctl	status,r2
  
  return context;
   84204:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   84208:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8420c:	e0bffc17 	ldw	r2,-16(fp)
   84210:	10800817 	ldw	r2,32(r2)
   84214:	10c00054 	ori	r3,r2,1
   84218:	e0bffc17 	ldw	r2,-16(fp)
   8421c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84220:	e0bffc17 	ldw	r2,-16(fp)
   84224:	10800017 	ldw	r2,0(r2)
   84228:	10800104 	addi	r2,r2,4
   8422c:	e0fffc17 	ldw	r3,-16(fp)
   84230:	18c00817 	ldw	r3,32(r3)
   84234:	10c00035 	stwio	r3,0(r2)
   84238:	e0bff917 	ldw	r2,-28(fp)
   8423c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84240:	e0bffb17 	ldw	r2,-20(fp)
   84244:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   84248:	e0fff517 	ldw	r3,-44(fp)
   8424c:	e0bffd17 	ldw	r2,-12(fp)
   84250:	18800426 	beq	r3,r2,84264 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   84254:	e0fff517 	ldw	r3,-44(fp)
   84258:	e0bffd17 	ldw	r2,-12(fp)
   8425c:	1885c83a 	sub	r2,r3,r2
   84260:	00000606 	br	8427c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   84264:	e0bfff17 	ldw	r2,-4(fp)
   84268:	1090000c 	andi	r2,r2,16384
   8426c:	10000226 	beq	r2,zero,84278 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   84270:	00bffd44 	movi	r2,-11
   84274:	00000106 	br	8427c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   84278:	00bffec4 	movi	r2,-5
}
   8427c:	e037883a 	mov	sp,fp
   84280:	dfc00117 	ldw	ra,4(sp)
   84284:	df000017 	ldw	fp,0(sp)
   84288:	dec00204 	addi	sp,sp,8
   8428c:	f800283a 	ret

00084290 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   84290:	defff304 	addi	sp,sp,-52
   84294:	dfc00c15 	stw	ra,48(sp)
   84298:	df000b15 	stw	fp,44(sp)
   8429c:	df000b04 	addi	fp,sp,44
   842a0:	e13ffc15 	stw	r4,-16(fp)
   842a4:	e17ffd15 	stw	r5,-12(fp)
   842a8:	e1bffe15 	stw	r6,-8(fp)
   842ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   842b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   842b4:	e0bffd17 	ldw	r2,-12(fp)
   842b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   842bc:	00003706 	br	8439c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   842c0:	e0bffc17 	ldw	r2,-16(fp)
   842c4:	10800c17 	ldw	r2,48(r2)
   842c8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   842cc:	e0bffc17 	ldw	r2,-16(fp)
   842d0:	10800d17 	ldw	r2,52(r2)
   842d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   842d8:	e0fff817 	ldw	r3,-32(fp)
   842dc:	e0bff517 	ldw	r2,-44(fp)
   842e0:	1880062e 	bgeu	r3,r2,842fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   842e4:	e0fff517 	ldw	r3,-44(fp)
   842e8:	e0bff817 	ldw	r2,-32(fp)
   842ec:	1885c83a 	sub	r2,r3,r2
   842f0:	10bfffc4 	addi	r2,r2,-1
   842f4:	e0bff615 	stw	r2,-40(fp)
   842f8:	00000b06 	br	84328 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   842fc:	e0bff517 	ldw	r2,-44(fp)
   84300:	10000526 	beq	r2,zero,84318 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   84304:	00c20004 	movi	r3,2048
   84308:	e0bff817 	ldw	r2,-32(fp)
   8430c:	1885c83a 	sub	r2,r3,r2
   84310:	e0bff615 	stw	r2,-40(fp)
   84314:	00000406 	br	84328 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84318:	00c1ffc4 	movi	r3,2047
   8431c:	e0bff817 	ldw	r2,-32(fp)
   84320:	1885c83a 	sub	r2,r3,r2
   84324:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84328:	e0bff617 	ldw	r2,-40(fp)
   8432c:	10001e26 	beq	r2,zero,843a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   84330:	e0fffe17 	ldw	r3,-8(fp)
   84334:	e0bff617 	ldw	r2,-40(fp)
   84338:	1880022e 	bgeu	r3,r2,84344 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8433c:	e0bffe17 	ldw	r2,-8(fp)
   84340:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   84344:	e0bff817 	ldw	r2,-32(fp)
   84348:	10820e04 	addi	r2,r2,2104
   8434c:	e0fffc17 	ldw	r3,-16(fp)
   84350:	1885883a 	add	r2,r3,r2
   84354:	1009883a 	mov	r4,r2
   84358:	e17ffd17 	ldw	r5,-12(fp)
   8435c:	e1bff617 	ldw	r6,-40(fp)
   84360:	00812940 	call	81294 <memcpy>
      ptr   += n;
   84364:	e0fffd17 	ldw	r3,-12(fp)
   84368:	e0bff617 	ldw	r2,-40(fp)
   8436c:	1885883a 	add	r2,r3,r2
   84370:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   84374:	e0fffe17 	ldw	r3,-8(fp)
   84378:	e0bff617 	ldw	r2,-40(fp)
   8437c:	1885c83a 	sub	r2,r3,r2
   84380:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84384:	e0fff817 	ldw	r3,-32(fp)
   84388:	e0bff617 	ldw	r2,-40(fp)
   8438c:	1885883a 	add	r2,r3,r2
   84390:	10c1ffcc 	andi	r3,r2,2047
   84394:	e0bffc17 	ldw	r2,-16(fp)
   84398:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8439c:	e0bffe17 	ldw	r2,-8(fp)
   843a0:	00bfc716 	blt	zero,r2,842c0 <altera_avalon_jtag_uart_write+0x30>
   843a4:	00000106 	br	843ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   843a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   843ac:	0005303a 	rdctl	r2,status
   843b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   843b4:	e0fffa17 	ldw	r3,-24(fp)
   843b8:	00bfff84 	movi	r2,-2
   843bc:	1884703a 	and	r2,r3,r2
   843c0:	1001703a 	wrctl	status,r2
  
  return context;
   843c4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   843c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   843cc:	e0bffc17 	ldw	r2,-16(fp)
   843d0:	10800817 	ldw	r2,32(r2)
   843d4:	10c00094 	ori	r3,r2,2
   843d8:	e0bffc17 	ldw	r2,-16(fp)
   843dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   843e0:	e0bffc17 	ldw	r2,-16(fp)
   843e4:	10800017 	ldw	r2,0(r2)
   843e8:	10800104 	addi	r2,r2,4
   843ec:	e0fffc17 	ldw	r3,-16(fp)
   843f0:	18c00817 	ldw	r3,32(r3)
   843f4:	10c00035 	stwio	r3,0(r2)
   843f8:	e0bff917 	ldw	r2,-28(fp)
   843fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84400:	e0bffb17 	ldw	r2,-20(fp)
   84404:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   84408:	e0bffe17 	ldw	r2,-8(fp)
   8440c:	0080110e 	bge	zero,r2,84454 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   84410:	e0bfff17 	ldw	r2,-4(fp)
   84414:	1090000c 	andi	r2,r2,16384
   84418:	1000111e 	bne	r2,zero,84460 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8441c:	0001883a 	nop
   84420:	e0bffc17 	ldw	r2,-16(fp)
   84424:	10c00d17 	ldw	r3,52(r2)
   84428:	e0bff517 	ldw	r2,-44(fp)
   8442c:	1880051e 	bne	r3,r2,84444 <altera_avalon_jtag_uart_write+0x1b4>
   84430:	e0bffc17 	ldw	r2,-16(fp)
   84434:	10c00917 	ldw	r3,36(r2)
   84438:	e0bffc17 	ldw	r2,-16(fp)
   8443c:	10800117 	ldw	r2,4(r2)
   84440:	18bff736 	bltu	r3,r2,84420 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   84444:	e0bffc17 	ldw	r2,-16(fp)
   84448:	10c00d17 	ldw	r3,52(r2)
   8444c:	e0bff517 	ldw	r2,-44(fp)
   84450:	18800526 	beq	r3,r2,84468 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   84454:	e0bffe17 	ldw	r2,-8(fp)
   84458:	00bfd016 	blt	zero,r2,8439c <altera_avalon_jtag_uart_write+0x10c>
   8445c:	00000306 	br	8446c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   84460:	0001883a 	nop
   84464:	00000106 	br	8446c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   84468:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8446c:	e0fffd17 	ldw	r3,-12(fp)
   84470:	e0bff717 	ldw	r2,-36(fp)
   84474:	18800426 	beq	r3,r2,84488 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   84478:	e0fffd17 	ldw	r3,-12(fp)
   8447c:	e0bff717 	ldw	r2,-36(fp)
   84480:	1885c83a 	sub	r2,r3,r2
   84484:	00000606 	br	844a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   84488:	e0bfff17 	ldw	r2,-4(fp)
   8448c:	1090000c 	andi	r2,r2,16384
   84490:	10000226 	beq	r2,zero,8449c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   84494:	00bffd44 	movi	r2,-11
   84498:	00000106 	br	844a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8449c:	00bffec4 	movi	r2,-5
}
   844a0:	e037883a 	mov	sp,fp
   844a4:	dfc00117 	ldw	ra,4(sp)
   844a8:	df000017 	ldw	fp,0(sp)
   844ac:	dec00204 	addi	sp,sp,8
   844b0:	f800283a 	ret

000844b4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   844b4:	defffa04 	addi	sp,sp,-24
   844b8:	dfc00515 	stw	ra,20(sp)
   844bc:	df000415 	stw	fp,16(sp)
   844c0:	df000404 	addi	fp,sp,16
   844c4:	e13ffd15 	stw	r4,-12(fp)
   844c8:	e17ffe15 	stw	r5,-8(fp)
   844cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   844d0:	e0bffd17 	ldw	r2,-12(fp)
   844d4:	10800017 	ldw	r2,0(r2)
   844d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   844dc:	e0bffc17 	ldw	r2,-16(fp)
   844e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   844e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   844e8:	10800217 	ldw	r2,8(r2)
   844ec:	1809883a 	mov	r4,r3
   844f0:	e17ffe17 	ldw	r5,-8(fp)
   844f4:	e1bfff17 	ldw	r6,-4(fp)
   844f8:	100f883a 	mov	r7,r2
   844fc:	00849bc0 	call	849bc <altera_avalon_uart_read>
      fd->fd_flags);
}
   84500:	e037883a 	mov	sp,fp
   84504:	dfc00117 	ldw	ra,4(sp)
   84508:	df000017 	ldw	fp,0(sp)
   8450c:	dec00204 	addi	sp,sp,8
   84510:	f800283a 	ret

00084514 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   84514:	defffa04 	addi	sp,sp,-24
   84518:	dfc00515 	stw	ra,20(sp)
   8451c:	df000415 	stw	fp,16(sp)
   84520:	df000404 	addi	fp,sp,16
   84524:	e13ffd15 	stw	r4,-12(fp)
   84528:	e17ffe15 	stw	r5,-8(fp)
   8452c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   84530:	e0bffd17 	ldw	r2,-12(fp)
   84534:	10800017 	ldw	r2,0(r2)
   84538:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8453c:	e0bffc17 	ldw	r2,-16(fp)
   84540:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   84544:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   84548:	10800217 	ldw	r2,8(r2)
   8454c:	1809883a 	mov	r4,r3
   84550:	e17ffe17 	ldw	r5,-8(fp)
   84554:	e1bfff17 	ldw	r6,-4(fp)
   84558:	100f883a 	mov	r7,r2
   8455c:	0084c100 	call	84c10 <altera_avalon_uart_write>
      fd->fd_flags);
}
   84560:	e037883a 	mov	sp,fp
   84564:	dfc00117 	ldw	ra,4(sp)
   84568:	df000017 	ldw	fp,0(sp)
   8456c:	dec00204 	addi	sp,sp,8
   84570:	f800283a 	ret

00084574 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   84574:	defffc04 	addi	sp,sp,-16
   84578:	dfc00315 	stw	ra,12(sp)
   8457c:	df000215 	stw	fp,8(sp)
   84580:	df000204 	addi	fp,sp,8
   84584:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   84588:	e0bfff17 	ldw	r2,-4(fp)
   8458c:	10800017 	ldw	r2,0(r2)
   84590:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   84594:	e0bffe17 	ldw	r2,-8(fp)
   84598:	10c00a04 	addi	r3,r2,40
   8459c:	e0bfff17 	ldw	r2,-4(fp)
   845a0:	10800217 	ldw	r2,8(r2)
   845a4:	1809883a 	mov	r4,r3
   845a8:	100b883a 	mov	r5,r2
   845ac:	00849180 	call	84918 <altera_avalon_uart_close>
}
   845b0:	e037883a 	mov	sp,fp
   845b4:	dfc00117 	ldw	ra,4(sp)
   845b8:	df000017 	ldw	fp,0(sp)
   845bc:	dec00204 	addi	sp,sp,8
   845c0:	f800283a 	ret

000845c4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   845c4:	defff804 	addi	sp,sp,-32
   845c8:	dfc00715 	stw	ra,28(sp)
   845cc:	df000615 	stw	fp,24(sp)
   845d0:	df000604 	addi	fp,sp,24
   845d4:	e13ffd15 	stw	r4,-12(fp)
   845d8:	e17ffe15 	stw	r5,-8(fp)
   845dc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   845e0:	e0bffd17 	ldw	r2,-12(fp)
   845e4:	10800017 	ldw	r2,0(r2)
   845e8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   845ec:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   845f0:	1000041e 	bne	r2,zero,84604 <altera_avalon_uart_init+0x40>
   845f4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   845f8:	1000021e 	bne	r2,zero,84604 <altera_avalon_uart_init+0x40>
   845fc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   84600:	10000226 	beq	r2,zero,8460c <altera_avalon_uart_init+0x48>
   84604:	00800044 	movi	r2,1
   84608:	00000106 	br	84610 <altera_avalon_uart_init+0x4c>
   8460c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   84610:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   84614:	e0bffc17 	ldw	r2,-16(fp)
   84618:	10000f1e 	bne	r2,zero,84658 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   8461c:	e0bffd17 	ldw	r2,-12(fp)
   84620:	00c32004 	movi	r3,3200
   84624:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   84628:	e0bffb17 	ldw	r2,-20(fp)
   8462c:	10800304 	addi	r2,r2,12
   84630:	e0fffd17 	ldw	r3,-12(fp)
   84634:	18c00117 	ldw	r3,4(r3)
   84638:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   8463c:	d8000015 	stw	zero,0(sp)
   84640:	e13ffe17 	ldw	r4,-8(fp)
   84644:	e17fff17 	ldw	r5,-4(fp)
   84648:	01800234 	movhi	r6,8
   8464c:	31919b04 	addi	r6,r6,18028
   84650:	e1fffd17 	ldw	r7,-12(fp)
   84654:	008522c0 	call	8522c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   84658:	e037883a 	mov	sp,fp
   8465c:	dfc00117 	ldw	ra,4(sp)
   84660:	df000017 	ldw	fp,0(sp)
   84664:	dec00204 	addi	sp,sp,8
   84668:	f800283a 	ret

0008466c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   8466c:	defffa04 	addi	sp,sp,-24
   84670:	dfc00515 	stw	ra,20(sp)
   84674:	df000415 	stw	fp,16(sp)
   84678:	df000404 	addi	fp,sp,16
   8467c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   84680:	e0bfff17 	ldw	r2,-4(fp)
   84684:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   84688:	e0bffc17 	ldw	r2,-16(fp)
   8468c:	10800017 	ldw	r2,0(r2)
   84690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   84694:	e0bffd17 	ldw	r2,-12(fp)
   84698:	10800204 	addi	r2,r2,8
   8469c:	10800037 	ldwio	r2,0(r2)
   846a0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   846a4:	e0bffd17 	ldw	r2,-12(fp)
   846a8:	10800204 	addi	r2,r2,8
   846ac:	0007883a 	mov	r3,zero
   846b0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   846b4:	e0bffd17 	ldw	r2,-12(fp)
   846b8:	10800204 	addi	r2,r2,8
   846bc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   846c0:	e0bffe17 	ldw	r2,-8(fp)
   846c4:	1080200c 	andi	r2,r2,128
   846c8:	10000326 	beq	r2,zero,846d8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   846cc:	e13ffc17 	ldw	r4,-16(fp)
   846d0:	e17ffe17 	ldw	r5,-8(fp)
   846d4:	00847040 	call	84704 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   846d8:	e0bffe17 	ldw	r2,-8(fp)
   846dc:	1081100c 	andi	r2,r2,1088
   846e0:	10000326 	beq	r2,zero,846f0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   846e4:	e13ffc17 	ldw	r4,-16(fp)
   846e8:	e17ffe17 	ldw	r5,-8(fp)
   846ec:	00847dc0 	call	847dc <altera_avalon_uart_txirq>
  }
  

}
   846f0:	e037883a 	mov	sp,fp
   846f4:	dfc00117 	ldw	ra,4(sp)
   846f8:	df000017 	ldw	fp,0(sp)
   846fc:	dec00204 	addi	sp,sp,8
   84700:	f800283a 	ret

00084704 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   84704:	defffc04 	addi	sp,sp,-16
   84708:	df000315 	stw	fp,12(sp)
   8470c:	df000304 	addi	fp,sp,12
   84710:	e13ffe15 	stw	r4,-8(fp)
   84714:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   84718:	e0bfff17 	ldw	r2,-4(fp)
   8471c:	108000cc 	andi	r2,r2,3
   84720:	1000291e 	bne	r2,zero,847c8 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   84724:	e0bffe17 	ldw	r2,-8(fp)
   84728:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8472c:	e0bffe17 	ldw	r2,-8(fp)
   84730:	10800317 	ldw	r2,12(r2)
   84734:	10800044 	addi	r2,r2,1
   84738:	10800fcc 	andi	r2,r2,63
   8473c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   84740:	e0bffe17 	ldw	r2,-8(fp)
   84744:	10800317 	ldw	r2,12(r2)
   84748:	e0fffe17 	ldw	r3,-8(fp)
   8474c:	18c00017 	ldw	r3,0(r3)
   84750:	18c00037 	ldwio	r3,0(r3)
   84754:	e13ffe17 	ldw	r4,-8(fp)
   84758:	2085883a 	add	r2,r4,r2
   8475c:	10800704 	addi	r2,r2,28
   84760:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   84764:	e0bffe17 	ldw	r2,-8(fp)
   84768:	e0fffd17 	ldw	r3,-12(fp)
   8476c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   84770:	e0bffe17 	ldw	r2,-8(fp)
   84774:	10800317 	ldw	r2,12(r2)
   84778:	10800044 	addi	r2,r2,1
   8477c:	10800fcc 	andi	r2,r2,63
   84780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   84784:	e0bffe17 	ldw	r2,-8(fp)
   84788:	10c00217 	ldw	r3,8(r2)
   8478c:	e0bffd17 	ldw	r2,-12(fp)
   84790:	18800e1e 	bne	r3,r2,847cc <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   84794:	e0bffe17 	ldw	r2,-8(fp)
   84798:	10c00117 	ldw	r3,4(r2)
   8479c:	00bfdfc4 	movi	r2,-129
   847a0:	1886703a 	and	r3,r3,r2
   847a4:	e0bffe17 	ldw	r2,-8(fp)
   847a8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   847ac:	e0bffe17 	ldw	r2,-8(fp)
   847b0:	10800017 	ldw	r2,0(r2)
   847b4:	10800304 	addi	r2,r2,12
   847b8:	e0fffe17 	ldw	r3,-8(fp)
   847bc:	18c00117 	ldw	r3,4(r3)
   847c0:	10c00035 	stwio	r3,0(r2)
   847c4:	00000106 	br	847cc <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   847c8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   847cc:	e037883a 	mov	sp,fp
   847d0:	df000017 	ldw	fp,0(sp)
   847d4:	dec00104 	addi	sp,sp,4
   847d8:	f800283a 	ret

000847dc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   847dc:	defffd04 	addi	sp,sp,-12
   847e0:	df000215 	stw	fp,8(sp)
   847e4:	df000204 	addi	fp,sp,8
   847e8:	e13ffe15 	stw	r4,-8(fp)
   847ec:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   847f0:	e0bffe17 	ldw	r2,-8(fp)
   847f4:	10c00417 	ldw	r3,16(r2)
   847f8:	e0bffe17 	ldw	r2,-8(fp)
   847fc:	10800517 	ldw	r2,20(r2)
   84800:	18803026 	beq	r3,r2,848c4 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   84804:	e0bffe17 	ldw	r2,-8(fp)
   84808:	10800617 	ldw	r2,24(r2)
   8480c:	1080008c 	andi	r2,r2,2
   84810:	10000326 	beq	r2,zero,84820 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   84814:	e0bfff17 	ldw	r2,-4(fp)
   84818:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8481c:	10001b26 	beq	r2,zero,8488c <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   84820:	e0bffe17 	ldw	r2,-8(fp)
   84824:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   84828:	e0bffe17 	ldw	r2,-8(fp)
   8482c:	10800017 	ldw	r2,0(r2)
   84830:	10800104 	addi	r2,r2,4
   84834:	e0fffe17 	ldw	r3,-8(fp)
   84838:	18c00417 	ldw	r3,16(r3)
   8483c:	e13ffe17 	ldw	r4,-8(fp)
   84840:	20c7883a 	add	r3,r4,r3
   84844:	18c01704 	addi	r3,r3,92
   84848:	18c00003 	ldbu	r3,0(r3)
   8484c:	18c03fcc 	andi	r3,r3,255
   84850:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   84854:	e0bffe17 	ldw	r2,-8(fp)
   84858:	10800417 	ldw	r2,16(r2)
   8485c:	10800044 	addi	r2,r2,1
   84860:	e0fffe17 	ldw	r3,-8(fp)
   84864:	18800415 	stw	r2,16(r3)
   84868:	10c00fcc 	andi	r3,r2,63
   8486c:	e0bffe17 	ldw	r2,-8(fp)
   84870:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   84874:	e0bffe17 	ldw	r2,-8(fp)
   84878:	10800117 	ldw	r2,4(r2)
   8487c:	10c01014 	ori	r3,r2,64
   84880:	e0bffe17 	ldw	r2,-8(fp)
   84884:	10c00115 	stw	r3,4(r2)
   84888:	00000e06 	br	848c4 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   8488c:	e0bffe17 	ldw	r2,-8(fp)
   84890:	10800017 	ldw	r2,0(r2)
   84894:	10800204 	addi	r2,r2,8
   84898:	10800037 	ldwio	r2,0(r2)
   8489c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   848a0:	e0bfff17 	ldw	r2,-4(fp)
   848a4:	1082000c 	andi	r2,r2,2048
   848a8:	1000061e 	bne	r2,zero,848c4 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   848ac:	e0bffe17 	ldw	r2,-8(fp)
   848b0:	10c00117 	ldw	r3,4(r2)
   848b4:	00bfefc4 	movi	r2,-65
   848b8:	1886703a 	and	r3,r3,r2
   848bc:	e0bffe17 	ldw	r2,-8(fp)
   848c0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   848c4:	e0bffe17 	ldw	r2,-8(fp)
   848c8:	10c00417 	ldw	r3,16(r2)
   848cc:	e0bffe17 	ldw	r2,-8(fp)
   848d0:	10800517 	ldw	r2,20(r2)
   848d4:	1880061e 	bne	r3,r2,848f0 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   848d8:	e0bffe17 	ldw	r2,-8(fp)
   848dc:	10c00117 	ldw	r3,4(r2)
   848e0:	00beefc4 	movi	r2,-1089
   848e4:	1886703a 	and	r3,r3,r2
   848e8:	e0bffe17 	ldw	r2,-8(fp)
   848ec:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   848f0:	e0bffe17 	ldw	r2,-8(fp)
   848f4:	10800017 	ldw	r2,0(r2)
   848f8:	10800304 	addi	r2,r2,12
   848fc:	e0fffe17 	ldw	r3,-8(fp)
   84900:	18c00117 	ldw	r3,4(r3)
   84904:	10c00035 	stwio	r3,0(r2)
}
   84908:	e037883a 	mov	sp,fp
   8490c:	df000017 	ldw	fp,0(sp)
   84910:	dec00104 	addi	sp,sp,4
   84914:	f800283a 	ret

00084918 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   84918:	defffd04 	addi	sp,sp,-12
   8491c:	df000215 	stw	fp,8(sp)
   84920:	df000204 	addi	fp,sp,8
   84924:	e13ffe15 	stw	r4,-8(fp)
   84928:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8492c:	00000506 	br	84944 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   84930:	e0bfff17 	ldw	r2,-4(fp)
   84934:	1090000c 	andi	r2,r2,16384
   84938:	10000226 	beq	r2,zero,84944 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8493c:	00bffd44 	movi	r2,-11
   84940:	00000606 	br	8495c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   84944:	e0bffe17 	ldw	r2,-8(fp)
   84948:	10c00417 	ldw	r3,16(r2)
   8494c:	e0bffe17 	ldw	r2,-8(fp)
   84950:	10800517 	ldw	r2,20(r2)
   84954:	18bff61e 	bne	r3,r2,84930 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   84958:	0005883a 	mov	r2,zero
}
   8495c:	e037883a 	mov	sp,fp
   84960:	df000017 	ldw	fp,0(sp)
   84964:	dec00104 	addi	sp,sp,4
   84968:	f800283a 	ret

0008496c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8496c:	defffe04 	addi	sp,sp,-8
   84970:	dfc00115 	stw	ra,4(sp)
   84974:	df000015 	stw	fp,0(sp)
   84978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8497c:	00800234 	movhi	r2,8
   84980:	109f3a04 	addi	r2,r2,31976
   84984:	10800017 	ldw	r2,0(r2)
   84988:	10000526 	beq	r2,zero,849a0 <alt_get_errno+0x34>
   8498c:	00800234 	movhi	r2,8
   84990:	109f3a04 	addi	r2,r2,31976
   84994:	10800017 	ldw	r2,0(r2)
   84998:	103ee83a 	callr	r2
   8499c:	00000206 	br	849a8 <alt_get_errno+0x3c>
   849a0:	00800274 	movhi	r2,9
   849a4:	10a60804 	addi	r2,r2,-26592
}
   849a8:	e037883a 	mov	sp,fp
   849ac:	dfc00117 	ldw	ra,4(sp)
   849b0:	df000017 	ldw	fp,0(sp)
   849b4:	dec00204 	addi	sp,sp,8
   849b8:	f800283a 	ret

000849bc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   849bc:	defff104 	addi	sp,sp,-60
   849c0:	dfc00e15 	stw	ra,56(sp)
   849c4:	df000d15 	stw	fp,52(sp)
   849c8:	df000d04 	addi	fp,sp,52
   849cc:	e13ffc15 	stw	r4,-16(fp)
   849d0:	e17ffd15 	stw	r5,-12(fp)
   849d4:	e1bffe15 	stw	r6,-8(fp)
   849d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   849dc:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
   849e0:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   849e4:	e0bfff17 	ldw	r2,-4(fp)
   849e8:	1090000c 	andi	r2,r2,16384
   849ec:	1005003a 	cmpeq	r2,r2,zero
   849f0:	10803fcc 	andi	r2,r2,255
   849f4:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   849f8:	e0bffc17 	ldw	r2,-16(fp)
   849fc:	10800217 	ldw	r2,8(r2)
   84a00:	10800044 	addi	r2,r2,1
   84a04:	10800fcc 	andi	r2,r2,63
   84a08:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   84a0c:	00001906 	br	84a74 <altera_avalon_uart_read+0xb8>
    {
      count++;
   84a10:	e0bff417 	ldw	r2,-48(fp)
   84a14:	10800044 	addi	r2,r2,1
   84a18:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   84a1c:	e0bffc17 	ldw	r2,-16(fp)
   84a20:	10800217 	ldw	r2,8(r2)
   84a24:	e0fffc17 	ldw	r3,-16(fp)
   84a28:	1885883a 	add	r2,r3,r2
   84a2c:	10800704 	addi	r2,r2,28
   84a30:	10800003 	ldbu	r2,0(r2)
   84a34:	1007883a 	mov	r3,r2
   84a38:	e0bffd17 	ldw	r2,-12(fp)
   84a3c:	10c00005 	stb	r3,0(r2)
   84a40:	e0bffd17 	ldw	r2,-12(fp)
   84a44:	10800044 	addi	r2,r2,1
   84a48:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   84a4c:	e0bffc17 	ldw	r2,-16(fp)
   84a50:	10800217 	ldw	r2,8(r2)
   84a54:	10c00044 	addi	r3,r2,1
   84a58:	e0bffc17 	ldw	r2,-16(fp)
   84a5c:	10c00215 	stw	r3,8(r2)
   84a60:	e0bffc17 	ldw	r2,-16(fp)
   84a64:	10800217 	ldw	r2,8(r2)
   84a68:	10c00fcc 	andi	r3,r2,63
   84a6c:	e0bffc17 	ldw	r2,-16(fp)
   84a70:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   84a74:	e0fff417 	ldw	r3,-48(fp)
   84a78:	e0bffe17 	ldw	r2,-8(fp)
   84a7c:	1880050e 	bge	r3,r2,84a94 <altera_avalon_uart_read+0xd8>
   84a80:	e0bffc17 	ldw	r2,-16(fp)
   84a84:	10c00217 	ldw	r3,8(r2)
   84a88:	e0bffc17 	ldw	r2,-16(fp)
   84a8c:	10800317 	ldw	r2,12(r2)
   84a90:	18bfdf1e 	bne	r3,r2,84a10 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   84a94:	e0bff417 	ldw	r2,-48(fp)
   84a98:	1000241e 	bne	r2,zero,84b2c <altera_avalon_uart_read+0x170>
   84a9c:	e0bffc17 	ldw	r2,-16(fp)
   84aa0:	10c00217 	ldw	r3,8(r2)
   84aa4:	e0bffc17 	ldw	r2,-16(fp)
   84aa8:	10800317 	ldw	r2,12(r2)
   84aac:	18801f1e 	bne	r3,r2,84b2c <altera_avalon_uart_read+0x170>
    {
      if (!block)
   84ab0:	e0bff517 	ldw	r2,-44(fp)
   84ab4:	1000061e 	bne	r2,zero,84ad0 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   84ab8:	008496c0 	call	8496c <alt_get_errno>
   84abc:	00c002c4 	movi	r3,11
   84ac0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   84ac4:	00800044 	movi	r2,1
   84ac8:	e0bff305 	stb	r2,-52(fp)
        break;
   84acc:	00001b06 	br	84b3c <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84ad0:	0005303a 	rdctl	r2,status
   84ad4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84ad8:	e0fff817 	ldw	r3,-32(fp)
   84adc:	00bfff84 	movi	r2,-2
   84ae0:	1884703a 	and	r2,r3,r2
   84ae4:	1001703a 	wrctl	status,r2
  
  return context;
   84ae8:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   84aec:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   84af0:	e0bffc17 	ldw	r2,-16(fp)
   84af4:	10800117 	ldw	r2,4(r2)
   84af8:	10c02014 	ori	r3,r2,128
   84afc:	e0bffc17 	ldw	r2,-16(fp)
   84b00:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   84b04:	e0bffc17 	ldw	r2,-16(fp)
   84b08:	10800017 	ldw	r2,0(r2)
   84b0c:	10800304 	addi	r2,r2,12
   84b10:	e0fffc17 	ldw	r3,-16(fp)
   84b14:	18c00117 	ldw	r3,4(r3)
   84b18:	10c00035 	stwio	r3,0(r2)
   84b1c:	e0bff717 	ldw	r2,-36(fp)
   84b20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b24:	e0bff917 	ldw	r2,-28(fp)
   84b28:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   84b2c:	e0bff417 	ldw	r2,-48(fp)
   84b30:	1000021e 	bne	r2,zero,84b3c <altera_avalon_uart_read+0x180>
   84b34:	e0bffe17 	ldw	r2,-8(fp)
   84b38:	103fce1e 	bne	r2,zero,84a74 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84b3c:	0005303a 	rdctl	r2,status
   84b40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84b44:	e0fffa17 	ldw	r3,-24(fp)
   84b48:	00bfff84 	movi	r2,-2
   84b4c:	1884703a 	and	r2,r3,r2
   84b50:	1001703a 	wrctl	status,r2
  
  return context;
   84b54:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   84b58:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   84b5c:	e0bffc17 	ldw	r2,-16(fp)
   84b60:	10800117 	ldw	r2,4(r2)
   84b64:	10c02014 	ori	r3,r2,128
   84b68:	e0bffc17 	ldw	r2,-16(fp)
   84b6c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   84b70:	e0bffc17 	ldw	r2,-16(fp)
   84b74:	10800017 	ldw	r2,0(r2)
   84b78:	10800304 	addi	r2,r2,12
   84b7c:	e0fffc17 	ldw	r3,-16(fp)
   84b80:	18c00117 	ldw	r3,4(r3)
   84b84:	10c00035 	stwio	r3,0(r2)
   84b88:	e0bff717 	ldw	r2,-36(fp)
   84b8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b90:	e0bffb17 	ldw	r2,-20(fp)
   84b94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   84b98:	e0bff303 	ldbu	r2,-52(fp)
   84b9c:	10000226 	beq	r2,zero,84ba8 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
   84ba0:	00bffd44 	movi	r2,-11
   84ba4:	00000106 	br	84bac <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
   84ba8:	e0bff417 	ldw	r2,-48(fp)
  }
}
   84bac:	e037883a 	mov	sp,fp
   84bb0:	dfc00117 	ldw	ra,4(sp)
   84bb4:	df000017 	ldw	fp,0(sp)
   84bb8:	dec00204 	addi	sp,sp,8
   84bbc:	f800283a 	ret

00084bc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84bc0:	defffe04 	addi	sp,sp,-8
   84bc4:	dfc00115 	stw	ra,4(sp)
   84bc8:	df000015 	stw	fp,0(sp)
   84bcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84bd0:	00800234 	movhi	r2,8
   84bd4:	109f3a04 	addi	r2,r2,31976
   84bd8:	10800017 	ldw	r2,0(r2)
   84bdc:	10000526 	beq	r2,zero,84bf4 <alt_get_errno+0x34>
   84be0:	00800234 	movhi	r2,8
   84be4:	109f3a04 	addi	r2,r2,31976
   84be8:	10800017 	ldw	r2,0(r2)
   84bec:	103ee83a 	callr	r2
   84bf0:	00000206 	br	84bfc <alt_get_errno+0x3c>
   84bf4:	00800274 	movhi	r2,9
   84bf8:	10a60804 	addi	r2,r2,-26592
}
   84bfc:	e037883a 	mov	sp,fp
   84c00:	dfc00117 	ldw	ra,4(sp)
   84c04:	df000017 	ldw	fp,0(sp)
   84c08:	dec00204 	addi	sp,sp,8
   84c0c:	f800283a 	ret

00084c10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   84c10:	defff204 	addi	sp,sp,-56
   84c14:	dfc00d15 	stw	ra,52(sp)
   84c18:	df000c15 	stw	fp,48(sp)
   84c1c:	df000c04 	addi	fp,sp,48
   84c20:	e13ffc15 	stw	r4,-16(fp)
   84c24:	e17ffd15 	stw	r5,-12(fp)
   84c28:	e1bffe15 	stw	r6,-8(fp)
   84c2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   84c30:	e0bffe17 	ldw	r2,-8(fp)
   84c34:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   84c38:	e0bfff17 	ldw	r2,-4(fp)
   84c3c:	1090000c 	andi	r2,r2,16384
   84c40:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   84c44:	00003b06 	br	84d34 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   84c48:	e0bffc17 	ldw	r2,-16(fp)
   84c4c:	10800517 	ldw	r2,20(r2)
   84c50:	10800044 	addi	r2,r2,1
   84c54:	10800fcc 	andi	r2,r2,63
   84c58:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   84c5c:	e0bffc17 	ldw	r2,-16(fp)
   84c60:	10c00417 	ldw	r3,16(r2)
   84c64:	e0bff617 	ldw	r2,-40(fp)
   84c68:	1880211e 	bne	r3,r2,84cf0 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
   84c6c:	e0bff517 	ldw	r2,-44(fp)
   84c70:	10000426 	beq	r2,zero,84c84 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   84c74:	0084bc00 	call	84bc0 <alt_get_errno>
   84c78:	00c002c4 	movi	r3,11
   84c7c:	10c00015 	stw	r3,0(r2)
        break;
   84c80:	00002e06 	br	84d3c <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84c84:	0005303a 	rdctl	r2,status
   84c88:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c8c:	e0fff817 	ldw	r3,-32(fp)
   84c90:	00bfff84 	movi	r2,-2
   84c94:	1884703a 	and	r2,r3,r2
   84c98:	1001703a 	wrctl	status,r2
  
  return context;
   84c9c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   84ca0:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   84ca4:	e0bffc17 	ldw	r2,-16(fp)
   84ca8:	10800117 	ldw	r2,4(r2)
   84cac:	10c11014 	ori	r3,r2,1088
   84cb0:	e0bffc17 	ldw	r2,-16(fp)
   84cb4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   84cb8:	e0bffc17 	ldw	r2,-16(fp)
   84cbc:	10800017 	ldw	r2,0(r2)
   84cc0:	10800304 	addi	r2,r2,12
   84cc4:	e0fffc17 	ldw	r3,-16(fp)
   84cc8:	18c00117 	ldw	r3,4(r3)
   84ccc:	10c00035 	stwio	r3,0(r2)
   84cd0:	e0bff717 	ldw	r2,-36(fp)
   84cd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84cd8:	e0bff917 	ldw	r2,-28(fp)
   84cdc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   84ce0:	e0bffc17 	ldw	r2,-16(fp)
   84ce4:	10c00417 	ldw	r3,16(r2)
   84ce8:	e0bff617 	ldw	r2,-40(fp)
   84cec:	18bffc26 	beq	r3,r2,84ce0 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
   84cf0:	e0bff417 	ldw	r2,-48(fp)
   84cf4:	10bfffc4 	addi	r2,r2,-1
   84cf8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   84cfc:	e0bffc17 	ldw	r2,-16(fp)
   84d00:	10800517 	ldw	r2,20(r2)
   84d04:	e0fffd17 	ldw	r3,-12(fp)
   84d08:	18c00003 	ldbu	r3,0(r3)
   84d0c:	e13ffc17 	ldw	r4,-16(fp)
   84d10:	2085883a 	add	r2,r4,r2
   84d14:	10801704 	addi	r2,r2,92
   84d18:	10c00005 	stb	r3,0(r2)
   84d1c:	e0bffd17 	ldw	r2,-12(fp)
   84d20:	10800044 	addi	r2,r2,1
   84d24:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   84d28:	e0bffc17 	ldw	r2,-16(fp)
   84d2c:	e0fff617 	ldw	r3,-40(fp)
   84d30:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   84d34:	e0bff417 	ldw	r2,-48(fp)
   84d38:	103fc31e 	bne	r2,zero,84c48 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84d3c:	0005303a 	rdctl	r2,status
   84d40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84d44:	e0fffa17 	ldw	r3,-24(fp)
   84d48:	00bfff84 	movi	r2,-2
   84d4c:	1884703a 	and	r2,r3,r2
   84d50:	1001703a 	wrctl	status,r2
  
  return context;
   84d54:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   84d58:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   84d5c:	e0bffc17 	ldw	r2,-16(fp)
   84d60:	10800117 	ldw	r2,4(r2)
   84d64:	10c11014 	ori	r3,r2,1088
   84d68:	e0bffc17 	ldw	r2,-16(fp)
   84d6c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   84d70:	e0bffc17 	ldw	r2,-16(fp)
   84d74:	10800017 	ldw	r2,0(r2)
   84d78:	10800304 	addi	r2,r2,12
   84d7c:	e0fffc17 	ldw	r3,-16(fp)
   84d80:	18c00117 	ldw	r3,4(r3)
   84d84:	10c00035 	stwio	r3,0(r2)
   84d88:	e0bff717 	ldw	r2,-36(fp)
   84d8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84d90:	e0bffb17 	ldw	r2,-20(fp)
   84d94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   84d98:	e0fffe17 	ldw	r3,-8(fp)
   84d9c:	e0bff417 	ldw	r2,-48(fp)
   84da0:	1885c83a 	sub	r2,r3,r2
}
   84da4:	e037883a 	mov	sp,fp
   84da8:	dfc00117 	ldw	ra,4(sp)
   84dac:	df000017 	ldw	fp,0(sp)
   84db0:	dec00204 	addi	sp,sp,8
   84db4:	f800283a 	ret

00084db8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   84db8:	defff504 	addi	sp,sp,-44
   84dbc:	df000a15 	stw	fp,40(sp)
   84dc0:	df000a04 	addi	fp,sp,40
   84dc4:	e13ffc15 	stw	r4,-16(fp)
   84dc8:	e17ffd15 	stw	r5,-12(fp)
   84dcc:	e1bffe15 	stw	r6,-8(fp)
   84dd0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   84dd4:	e03ff615 	stw	zero,-40(fp)
   84dd8:	00800274 	movhi	r2,9
   84ddc:	10a60d04 	addi	r2,r2,-26572
   84de0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   84de4:	10003f26 	beq	r2,zero,84ee4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   84de8:	e0bffc17 	ldw	r2,-16(fp)
   84dec:	10003b26 	beq	r2,zero,84edc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   84df0:	e0bffc17 	ldw	r2,-16(fp)
   84df4:	e0fffe17 	ldw	r3,-8(fp)
   84df8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   84dfc:	e0bffc17 	ldw	r2,-16(fp)
   84e00:	e0ffff17 	ldw	r3,-4(fp)
   84e04:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84e08:	0005303a 	rdctl	r2,status
   84e0c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84e10:	e0fff817 	ldw	r3,-32(fp)
   84e14:	00bfff84 	movi	r2,-2
   84e18:	1884703a 	and	r2,r3,r2
   84e1c:	1001703a 	wrctl	status,r2
  
  return context;
   84e20:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   84e24:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84e28:	00800274 	movhi	r2,9
   84e2c:	10a60e04 	addi	r2,r2,-26568
   84e30:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   84e34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84e38:	e0fffd17 	ldw	r3,-12(fp)
   84e3c:	e0bff617 	ldw	r2,-40(fp)
   84e40:	1885883a 	add	r2,r3,r2
   84e44:	10c00044 	addi	r3,r2,1
   84e48:	e0bffc17 	ldw	r2,-16(fp)
   84e4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   84e50:	e0bffc17 	ldw	r2,-16(fp)
   84e54:	10c00217 	ldw	r3,8(r2)
   84e58:	e0bff617 	ldw	r2,-40(fp)
   84e5c:	1880042e 	bgeu	r3,r2,84e70 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   84e60:	e0bffc17 	ldw	r2,-16(fp)
   84e64:	00c00044 	movi	r3,1
   84e68:	10c00405 	stb	r3,16(r2)
   84e6c:	00000206 	br	84e78 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   84e70:	e0bffc17 	ldw	r2,-16(fp)
   84e74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   84e78:	e0bffc17 	ldw	r2,-16(fp)
   84e7c:	00c00234 	movhi	r3,8
   84e80:	18df3d04 	addi	r3,r3,31988
   84e84:	e0fff915 	stw	r3,-28(fp)
   84e88:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84e8c:	e0bffa17 	ldw	r2,-24(fp)
   84e90:	e0fff917 	ldw	r3,-28(fp)
   84e94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84e98:	e0bff917 	ldw	r2,-28(fp)
   84e9c:	10c00017 	ldw	r3,0(r2)
   84ea0:	e0bffa17 	ldw	r2,-24(fp)
   84ea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84ea8:	e0bff917 	ldw	r2,-28(fp)
   84eac:	10800017 	ldw	r2,0(r2)
   84eb0:	e0fffa17 	ldw	r3,-24(fp)
   84eb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84eb8:	e0bff917 	ldw	r2,-28(fp)
   84ebc:	e0fffa17 	ldw	r3,-24(fp)
   84ec0:	10c00015 	stw	r3,0(r2)
   84ec4:	e0bff717 	ldw	r2,-36(fp)
   84ec8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84ecc:	e0bffb17 	ldw	r2,-20(fp)
   84ed0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   84ed4:	0005883a 	mov	r2,zero
   84ed8:	00000306 	br	84ee8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   84edc:	00bffa84 	movi	r2,-22
   84ee0:	00000106 	br	84ee8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   84ee4:	00bfde84 	movi	r2,-134
  }
}
   84ee8:	e037883a 	mov	sp,fp
   84eec:	df000017 	ldw	fp,0(sp)
   84ef0:	dec00104 	addi	sp,sp,4
   84ef4:	f800283a 	ret

00084ef8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   84ef8:	defffa04 	addi	sp,sp,-24
   84efc:	dfc00515 	stw	ra,20(sp)
   84f00:	df000415 	stw	fp,16(sp)
   84f04:	df000404 	addi	fp,sp,16
   84f08:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   84f0c:	00800244 	movi	r2,9
   84f10:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   84f14:	e13ffd17 	ldw	r4,-12(fp)
   84f18:	014003f4 	movhi	r5,15
   84f1c:	29509004 	addi	r5,r5,16960
   84f20:	0082f2c0 	call	82f2c <__mulsi3>
   84f24:	0100bef4 	movhi	r4,763
   84f28:	213c2004 	addi	r4,r4,-3968
   84f2c:	100b883a 	mov	r5,r2
   84f30:	00804000 	call	80400 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   84f34:	01200034 	movhi	r4,32768
   84f38:	213fffc4 	addi	r4,r4,-1
   84f3c:	100b883a 	mov	r5,r2
   84f40:	00804000 	call	80400 <__udivsi3>
   84f44:	e13fff17 	ldw	r4,-4(fp)
   84f48:	100b883a 	mov	r5,r2
   84f4c:	00804000 	call	80400 <__udivsi3>
   84f50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   84f54:	e0bffe17 	ldw	r2,-8(fp)
   84f58:	10002926 	beq	r2,zero,85000 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   84f5c:	e03ffc15 	stw	zero,-16(fp)
   84f60:	00001606 	br	84fbc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   84f64:	00a00034 	movhi	r2,32768
   84f68:	10bfffc4 	addi	r2,r2,-1
   84f6c:	10bfffc4 	addi	r2,r2,-1
   84f70:	103ffe1e 	bne	r2,zero,84f6c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   84f74:	e13ffd17 	ldw	r4,-12(fp)
   84f78:	014003f4 	movhi	r5,15
   84f7c:	29509004 	addi	r5,r5,16960
   84f80:	0082f2c0 	call	82f2c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   84f84:	0100bef4 	movhi	r4,763
   84f88:	213c2004 	addi	r4,r4,-3968
   84f8c:	100b883a 	mov	r5,r2
   84f90:	00804000 	call	80400 <__udivsi3>
   84f94:	01200034 	movhi	r4,32768
   84f98:	213fffc4 	addi	r4,r4,-1
   84f9c:	100b883a 	mov	r5,r2
   84fa0:	00804000 	call	80400 <__udivsi3>
   84fa4:	e0ffff17 	ldw	r3,-4(fp)
   84fa8:	1885c83a 	sub	r2,r3,r2
   84fac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   84fb0:	e0bffc17 	ldw	r2,-16(fp)
   84fb4:	10800044 	addi	r2,r2,1
   84fb8:	e0bffc15 	stw	r2,-16(fp)
   84fbc:	e0fffc17 	ldw	r3,-16(fp)
   84fc0:	e0bffe17 	ldw	r2,-8(fp)
   84fc4:	18bfe716 	blt	r3,r2,84f64 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   84fc8:	e13ffd17 	ldw	r4,-12(fp)
   84fcc:	014003f4 	movhi	r5,15
   84fd0:	29509004 	addi	r5,r5,16960
   84fd4:	0082f2c0 	call	82f2c <__mulsi3>
   84fd8:	0100bef4 	movhi	r4,763
   84fdc:	213c2004 	addi	r4,r4,-3968
   84fe0:	100b883a 	mov	r5,r2
   84fe4:	00804000 	call	80400 <__udivsi3>
   84fe8:	1009883a 	mov	r4,r2
   84fec:	e17fff17 	ldw	r5,-4(fp)
   84ff0:	0082f2c0 	call	82f2c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   84ff4:	10bfffc4 	addi	r2,r2,-1
   84ff8:	103ffe1e 	bne	r2,zero,84ff4 <alt_busy_sleep+0xfc>
   84ffc:	00000d06 	br	85034 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   85000:	e13ffd17 	ldw	r4,-12(fp)
   85004:	014003f4 	movhi	r5,15
   85008:	29509004 	addi	r5,r5,16960
   8500c:	0082f2c0 	call	82f2c <__mulsi3>
   85010:	0100bef4 	movhi	r4,763
   85014:	213c2004 	addi	r4,r4,-3968
   85018:	100b883a 	mov	r5,r2
   8501c:	00804000 	call	80400 <__udivsi3>
   85020:	1009883a 	mov	r4,r2
   85024:	e17fff17 	ldw	r5,-4(fp)
   85028:	0082f2c0 	call	82f2c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8502c:	10bfffc4 	addi	r2,r2,-1
   85030:	00bffe16 	blt	zero,r2,8502c <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   85034:	0005883a 	mov	r2,zero
}
   85038:	e037883a 	mov	sp,fp
   8503c:	dfc00117 	ldw	ra,4(sp)
   85040:	df000017 	ldw	fp,0(sp)
   85044:	dec00204 	addi	sp,sp,8
   85048:	f800283a 	ret

0008504c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8504c:	deffff04 	addi	sp,sp,-4
   85050:	df000015 	stw	fp,0(sp)
   85054:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   85058:	e037883a 	mov	sp,fp
   8505c:	df000017 	ldw	fp,0(sp)
   85060:	dec00104 	addi	sp,sp,4
   85064:	f800283a 	ret

00085068 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85068:	defffe04 	addi	sp,sp,-8
   8506c:	dfc00115 	stw	ra,4(sp)
   85070:	df000015 	stw	fp,0(sp)
   85074:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85078:	00800234 	movhi	r2,8
   8507c:	109f3a04 	addi	r2,r2,31976
   85080:	10800017 	ldw	r2,0(r2)
   85084:	10000526 	beq	r2,zero,8509c <alt_get_errno+0x34>
   85088:	00800234 	movhi	r2,8
   8508c:	109f3a04 	addi	r2,r2,31976
   85090:	10800017 	ldw	r2,0(r2)
   85094:	103ee83a 	callr	r2
   85098:	00000206 	br	850a4 <alt_get_errno+0x3c>
   8509c:	00800274 	movhi	r2,9
   850a0:	10a60804 	addi	r2,r2,-26592
}
   850a4:	e037883a 	mov	sp,fp
   850a8:	dfc00117 	ldw	ra,4(sp)
   850ac:	df000017 	ldw	fp,0(sp)
   850b0:	dec00204 	addi	sp,sp,8
   850b4:	f800283a 	ret

000850b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   850b8:	defffa04 	addi	sp,sp,-24
   850bc:	dfc00515 	stw	ra,20(sp)
   850c0:	df000415 	stw	fp,16(sp)
   850c4:	df000404 	addi	fp,sp,16
   850c8:	e13ffe15 	stw	r4,-8(fp)
   850cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   850d0:	e0bffe17 	ldw	r2,-8(fp)
   850d4:	10000326 	beq	r2,zero,850e4 <alt_dev_llist_insert+0x2c>
   850d8:	e0bffe17 	ldw	r2,-8(fp)
   850dc:	10800217 	ldw	r2,8(r2)
   850e0:	1000051e 	bne	r2,zero,850f8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   850e4:	00850680 	call	85068 <alt_get_errno>
   850e8:	00c00584 	movi	r3,22
   850ec:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   850f0:	00bffa84 	movi	r2,-22
   850f4:	00001306 	br	85144 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   850f8:	e0bffe17 	ldw	r2,-8(fp)
   850fc:	e0ffff17 	ldw	r3,-4(fp)
   85100:	e0fffc15 	stw	r3,-16(fp)
   85104:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   85108:	e0bffd17 	ldw	r2,-12(fp)
   8510c:	e0fffc17 	ldw	r3,-16(fp)
   85110:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   85114:	e0bffc17 	ldw	r2,-16(fp)
   85118:	10c00017 	ldw	r3,0(r2)
   8511c:	e0bffd17 	ldw	r2,-12(fp)
   85120:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   85124:	e0bffc17 	ldw	r2,-16(fp)
   85128:	10800017 	ldw	r2,0(r2)
   8512c:	e0fffd17 	ldw	r3,-12(fp)
   85130:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   85134:	e0bffc17 	ldw	r2,-16(fp)
   85138:	e0fffd17 	ldw	r3,-12(fp)
   8513c:	10c00015 	stw	r3,0(r2)

  return 0;  
   85140:	0005883a 	mov	r2,zero
}
   85144:	e037883a 	mov	sp,fp
   85148:	dfc00117 	ldw	ra,4(sp)
   8514c:	df000017 	ldw	fp,0(sp)
   85150:	dec00204 	addi	sp,sp,8
   85154:	f800283a 	ret

00085158 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   85158:	defffd04 	addi	sp,sp,-12
   8515c:	dfc00215 	stw	ra,8(sp)
   85160:	df000115 	stw	fp,4(sp)
   85164:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   85168:	00800234 	movhi	r2,8
   8516c:	10985e04 	addi	r2,r2,24952
   85170:	e0bfff15 	stw	r2,-4(fp)
   85174:	00000606 	br	85190 <_do_ctors+0x38>
        (*ctor) (); 
   85178:	e0bfff17 	ldw	r2,-4(fp)
   8517c:	10800017 	ldw	r2,0(r2)
   85180:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   85184:	e0bfff17 	ldw	r2,-4(fp)
   85188:	10bfff04 	addi	r2,r2,-4
   8518c:	e0bfff15 	stw	r2,-4(fp)
   85190:	e0ffff17 	ldw	r3,-4(fp)
   85194:	00800234 	movhi	r2,8
   85198:	10985f04 	addi	r2,r2,24956
   8519c:	18bff62e 	bgeu	r3,r2,85178 <_do_ctors+0x20>
        (*ctor) (); 
}
   851a0:	e037883a 	mov	sp,fp
   851a4:	dfc00117 	ldw	ra,4(sp)
   851a8:	df000017 	ldw	fp,0(sp)
   851ac:	dec00204 	addi	sp,sp,8
   851b0:	f800283a 	ret

000851b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   851b4:	defffd04 	addi	sp,sp,-12
   851b8:	dfc00215 	stw	ra,8(sp)
   851bc:	df000115 	stw	fp,4(sp)
   851c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   851c4:	00800234 	movhi	r2,8
   851c8:	10985e04 	addi	r2,r2,24952
   851cc:	e0bfff15 	stw	r2,-4(fp)
   851d0:	00000606 	br	851ec <_do_dtors+0x38>
        (*dtor) (); 
   851d4:	e0bfff17 	ldw	r2,-4(fp)
   851d8:	10800017 	ldw	r2,0(r2)
   851dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   851e0:	e0bfff17 	ldw	r2,-4(fp)
   851e4:	10bfff04 	addi	r2,r2,-4
   851e8:	e0bfff15 	stw	r2,-4(fp)
   851ec:	e0ffff17 	ldw	r3,-4(fp)
   851f0:	00800234 	movhi	r2,8
   851f4:	10985f04 	addi	r2,r2,24956
   851f8:	18bff62e 	bgeu	r3,r2,851d4 <_do_dtors+0x20>
        (*dtor) (); 
}
   851fc:	e037883a 	mov	sp,fp
   85200:	dfc00117 	ldw	ra,4(sp)
   85204:	df000017 	ldw	fp,0(sp)
   85208:	dec00204 	addi	sp,sp,8
   8520c:	f800283a 	ret

00085210 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   85210:	deffff04 	addi	sp,sp,-4
   85214:	df000015 	stw	fp,0(sp)
   85218:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8521c:	e037883a 	mov	sp,fp
   85220:	df000017 	ldw	fp,0(sp)
   85224:	dec00104 	addi	sp,sp,4
   85228:	f800283a 	ret

0008522c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8522c:	defff904 	addi	sp,sp,-28
   85230:	dfc00615 	stw	ra,24(sp)
   85234:	df000515 	stw	fp,20(sp)
   85238:	df000504 	addi	fp,sp,20
   8523c:	e13ffc15 	stw	r4,-16(fp)
   85240:	e17ffd15 	stw	r5,-12(fp)
   85244:	e1bffe15 	stw	r6,-8(fp)
   85248:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8524c:	e0800217 	ldw	r2,8(fp)
   85250:	d8800015 	stw	r2,0(sp)
   85254:	e13ffc17 	ldw	r4,-16(fp)
   85258:	e17ffd17 	ldw	r5,-12(fp)
   8525c:	e1bffe17 	ldw	r6,-8(fp)
   85260:	e1ffff17 	ldw	r7,-4(fp)
   85264:	00854040 	call	85404 <alt_iic_isr_register>
}  
   85268:	e037883a 	mov	sp,fp
   8526c:	dfc00117 	ldw	ra,4(sp)
   85270:	df000017 	ldw	fp,0(sp)
   85274:	dec00204 	addi	sp,sp,8
   85278:	f800283a 	ret

0008527c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8527c:	defff904 	addi	sp,sp,-28
   85280:	df000615 	stw	fp,24(sp)
   85284:	df000604 	addi	fp,sp,24
   85288:	e13ffe15 	stw	r4,-8(fp)
   8528c:	e17fff15 	stw	r5,-4(fp)
   85290:	e0bfff17 	ldw	r2,-4(fp)
   85294:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85298:	0005303a 	rdctl	r2,status
   8529c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   852a0:	e0fffb17 	ldw	r3,-20(fp)
   852a4:	00bfff84 	movi	r2,-2
   852a8:	1884703a 	and	r2,r3,r2
   852ac:	1001703a 	wrctl	status,r2
  
  return context;
   852b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   852b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   852b8:	e0bffa17 	ldw	r2,-24(fp)
   852bc:	00c00044 	movi	r3,1
   852c0:	1884983a 	sll	r2,r3,r2
   852c4:	1007883a 	mov	r3,r2
   852c8:	00800274 	movhi	r2,9
   852cc:	10a60c04 	addi	r2,r2,-26576
   852d0:	10800017 	ldw	r2,0(r2)
   852d4:	1886b03a 	or	r3,r3,r2
   852d8:	00800274 	movhi	r2,9
   852dc:	10a60c04 	addi	r2,r2,-26576
   852e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   852e4:	00800274 	movhi	r2,9
   852e8:	10a60c04 	addi	r2,r2,-26576
   852ec:	10800017 	ldw	r2,0(r2)
   852f0:	100170fa 	wrctl	ienable,r2
   852f4:	e0bffc17 	ldw	r2,-16(fp)
   852f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   852fc:	e0bffd17 	ldw	r2,-12(fp)
   85300:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   85304:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   85308:	e037883a 	mov	sp,fp
   8530c:	df000017 	ldw	fp,0(sp)
   85310:	dec00104 	addi	sp,sp,4
   85314:	f800283a 	ret

00085318 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   85318:	defff904 	addi	sp,sp,-28
   8531c:	df000615 	stw	fp,24(sp)
   85320:	df000604 	addi	fp,sp,24
   85324:	e13ffe15 	stw	r4,-8(fp)
   85328:	e17fff15 	stw	r5,-4(fp)
   8532c:	e0bfff17 	ldw	r2,-4(fp)
   85330:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85334:	0005303a 	rdctl	r2,status
   85338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8533c:	e0fffb17 	ldw	r3,-20(fp)
   85340:	00bfff84 	movi	r2,-2
   85344:	1884703a 	and	r2,r3,r2
   85348:	1001703a 	wrctl	status,r2
  
  return context;
   8534c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   85350:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   85354:	e0bffa17 	ldw	r2,-24(fp)
   85358:	00c00044 	movi	r3,1
   8535c:	1884983a 	sll	r2,r3,r2
   85360:	0084303a 	nor	r2,zero,r2
   85364:	1007883a 	mov	r3,r2
   85368:	00800274 	movhi	r2,9
   8536c:	10a60c04 	addi	r2,r2,-26576
   85370:	10800017 	ldw	r2,0(r2)
   85374:	1886703a 	and	r3,r3,r2
   85378:	00800274 	movhi	r2,9
   8537c:	10a60c04 	addi	r2,r2,-26576
   85380:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   85384:	00800274 	movhi	r2,9
   85388:	10a60c04 	addi	r2,r2,-26576
   8538c:	10800017 	ldw	r2,0(r2)
   85390:	100170fa 	wrctl	ienable,r2
   85394:	e0bffc17 	ldw	r2,-16(fp)
   85398:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8539c:	e0bffd17 	ldw	r2,-12(fp)
   853a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   853a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   853a8:	e037883a 	mov	sp,fp
   853ac:	df000017 	ldw	fp,0(sp)
   853b0:	dec00104 	addi	sp,sp,4
   853b4:	f800283a 	ret

000853b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   853b8:	defffc04 	addi	sp,sp,-16
   853bc:	df000315 	stw	fp,12(sp)
   853c0:	df000304 	addi	fp,sp,12
   853c4:	e13ffe15 	stw	r4,-8(fp)
   853c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   853cc:	000530fa 	rdctl	r2,ienable
   853d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   853d4:	e0bfff17 	ldw	r2,-4(fp)
   853d8:	00c00044 	movi	r3,1
   853dc:	1884983a 	sll	r2,r3,r2
   853e0:	1007883a 	mov	r3,r2
   853e4:	e0bffd17 	ldw	r2,-12(fp)
   853e8:	1884703a 	and	r2,r3,r2
   853ec:	1004c03a 	cmpne	r2,r2,zero
   853f0:	10803fcc 	andi	r2,r2,255
}
   853f4:	e037883a 	mov	sp,fp
   853f8:	df000017 	ldw	fp,0(sp)
   853fc:	dec00104 	addi	sp,sp,4
   85400:	f800283a 	ret

00085404 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   85404:	defff504 	addi	sp,sp,-44
   85408:	dfc00a15 	stw	ra,40(sp)
   8540c:	df000915 	stw	fp,36(sp)
   85410:	df000904 	addi	fp,sp,36
   85414:	e13ffc15 	stw	r4,-16(fp)
   85418:	e17ffd15 	stw	r5,-12(fp)
   8541c:	e1bffe15 	stw	r6,-8(fp)
   85420:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   85424:	00bffa84 	movi	r2,-22
   85428:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8542c:	e0bffd17 	ldw	r2,-12(fp)
   85430:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   85434:	e0bff817 	ldw	r2,-32(fp)
   85438:	10800808 	cmpgei	r2,r2,32
   8543c:	1000271e 	bne	r2,zero,854dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85440:	0005303a 	rdctl	r2,status
   85444:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85448:	e0fffa17 	ldw	r3,-24(fp)
   8544c:	00bfff84 	movi	r2,-2
   85450:	1884703a 	and	r2,r3,r2
   85454:	1001703a 	wrctl	status,r2
  
  return context;
   85458:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8545c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   85460:	00c00274 	movhi	r3,9
   85464:	18e61904 	addi	r3,r3,-26524
   85468:	e0bff817 	ldw	r2,-32(fp)
   8546c:	100490fa 	slli	r2,r2,3
   85470:	1885883a 	add	r2,r3,r2
   85474:	e0fffe17 	ldw	r3,-8(fp)
   85478:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8547c:	00c00274 	movhi	r3,9
   85480:	18e61904 	addi	r3,r3,-26524
   85484:	e0bff817 	ldw	r2,-32(fp)
   85488:	100490fa 	slli	r2,r2,3
   8548c:	1885883a 	add	r2,r3,r2
   85490:	10800104 	addi	r2,r2,4
   85494:	e0ffff17 	ldw	r3,-4(fp)
   85498:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8549c:	e0bffe17 	ldw	r2,-8(fp)
   854a0:	10000526 	beq	r2,zero,854b8 <alt_iic_isr_register+0xb4>
   854a4:	e0bff817 	ldw	r2,-32(fp)
   854a8:	e13ffc17 	ldw	r4,-16(fp)
   854ac:	100b883a 	mov	r5,r2
   854b0:	008527c0 	call	8527c <alt_ic_irq_enable>
   854b4:	00000406 	br	854c8 <alt_iic_isr_register+0xc4>
   854b8:	e0bff817 	ldw	r2,-32(fp)
   854bc:	e13ffc17 	ldw	r4,-16(fp)
   854c0:	100b883a 	mov	r5,r2
   854c4:	00853180 	call	85318 <alt_ic_irq_disable>
   854c8:	e0bff715 	stw	r2,-36(fp)
   854cc:	e0bff917 	ldw	r2,-28(fp)
   854d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   854d4:	e0bffb17 	ldw	r2,-20(fp)
   854d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   854dc:	e0bff717 	ldw	r2,-36(fp)
}
   854e0:	e037883a 	mov	sp,fp
   854e4:	dfc00117 	ldw	ra,4(sp)
   854e8:	df000017 	ldw	fp,0(sp)
   854ec:	dec00204 	addi	sp,sp,8
   854f0:	f800283a 	ret

000854f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   854f4:	defff804 	addi	sp,sp,-32
   854f8:	dfc00715 	stw	ra,28(sp)
   854fc:	df000615 	stw	fp,24(sp)
   85500:	dc000515 	stw	r16,20(sp)
   85504:	df000504 	addi	fp,sp,20
   85508:	e13ffc15 	stw	r4,-16(fp)
   8550c:	e17ffd15 	stw	r5,-12(fp)
   85510:	e1bffe15 	stw	r6,-8(fp)
   85514:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   85518:	e13ffd17 	ldw	r4,-12(fp)
   8551c:	e17ffe17 	ldw	r5,-8(fp)
   85520:	e1bfff17 	ldw	r6,-4(fp)
   85524:	008578c0 	call	8578c <open>
   85528:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8552c:	e0bffb17 	ldw	r2,-20(fp)
   85530:	10002216 	blt	r2,zero,855bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   85534:	04000234 	movhi	r16,8
   85538:	841a8804 	addi	r16,r16,27168
   8553c:	e0bffb17 	ldw	r2,-20(fp)
   85540:	1009883a 	mov	r4,r2
   85544:	01400304 	movi	r5,12
   85548:	0082f2c0 	call	82f2c <__mulsi3>
   8554c:	8085883a 	add	r2,r16,r2
   85550:	10c00017 	ldw	r3,0(r2)
   85554:	e0bffc17 	ldw	r2,-16(fp)
   85558:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8555c:	04000234 	movhi	r16,8
   85560:	841a8804 	addi	r16,r16,27168
   85564:	e0bffb17 	ldw	r2,-20(fp)
   85568:	1009883a 	mov	r4,r2
   8556c:	01400304 	movi	r5,12
   85570:	0082f2c0 	call	82f2c <__mulsi3>
   85574:	8085883a 	add	r2,r16,r2
   85578:	10800104 	addi	r2,r2,4
   8557c:	10c00017 	ldw	r3,0(r2)
   85580:	e0bffc17 	ldw	r2,-16(fp)
   85584:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   85588:	04000234 	movhi	r16,8
   8558c:	841a8804 	addi	r16,r16,27168
   85590:	e0bffb17 	ldw	r2,-20(fp)
   85594:	1009883a 	mov	r4,r2
   85598:	01400304 	movi	r5,12
   8559c:	0082f2c0 	call	82f2c <__mulsi3>
   855a0:	8085883a 	add	r2,r16,r2
   855a4:	10800204 	addi	r2,r2,8
   855a8:	10c00017 	ldw	r3,0(r2)
   855ac:	e0bffc17 	ldw	r2,-16(fp)
   855b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   855b4:	e13ffb17 	ldw	r4,-20(fp)
   855b8:	00836e00 	call	836e0 <alt_release_fd>
  }
} 
   855bc:	e037883a 	mov	sp,fp
   855c0:	dfc00217 	ldw	ra,8(sp)
   855c4:	df000117 	ldw	fp,4(sp)
   855c8:	dc000017 	ldw	r16,0(sp)
   855cc:	dec00304 	addi	sp,sp,12
   855d0:	f800283a 	ret

000855d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   855d4:	defffb04 	addi	sp,sp,-20
   855d8:	dfc00415 	stw	ra,16(sp)
   855dc:	df000315 	stw	fp,12(sp)
   855e0:	df000304 	addi	fp,sp,12
   855e4:	e13ffd15 	stw	r4,-12(fp)
   855e8:	e17ffe15 	stw	r5,-8(fp)
   855ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   855f0:	01000234 	movhi	r4,8
   855f4:	211a8b04 	addi	r4,r4,27180
   855f8:	e17ffd17 	ldw	r5,-12(fp)
   855fc:	01800044 	movi	r6,1
   85600:	01c07fc4 	movi	r7,511
   85604:	00854f40 	call	854f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   85608:	01000234 	movhi	r4,8
   8560c:	211a8804 	addi	r4,r4,27168
   85610:	e17ffe17 	ldw	r5,-8(fp)
   85614:	000d883a 	mov	r6,zero
   85618:	01c07fc4 	movi	r7,511
   8561c:	00854f40 	call	854f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   85620:	01000234 	movhi	r4,8
   85624:	211a8e04 	addi	r4,r4,27192
   85628:	e17fff17 	ldw	r5,-4(fp)
   8562c:	01800044 	movi	r6,1
   85630:	01c07fc4 	movi	r7,511
   85634:	00854f40 	call	854f4 <alt_open_fd>
}  
   85638:	e037883a 	mov	sp,fp
   8563c:	dfc00117 	ldw	ra,4(sp)
   85640:	df000017 	ldw	fp,0(sp)
   85644:	dec00204 	addi	sp,sp,8
   85648:	f800283a 	ret

0008564c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8564c:	defffe04 	addi	sp,sp,-8
   85650:	dfc00115 	stw	ra,4(sp)
   85654:	df000015 	stw	fp,0(sp)
   85658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8565c:	00800234 	movhi	r2,8
   85660:	109f3a04 	addi	r2,r2,31976
   85664:	10800017 	ldw	r2,0(r2)
   85668:	10000526 	beq	r2,zero,85680 <alt_get_errno+0x34>
   8566c:	00800234 	movhi	r2,8
   85670:	109f3a04 	addi	r2,r2,31976
   85674:	10800017 	ldw	r2,0(r2)
   85678:	103ee83a 	callr	r2
   8567c:	00000206 	br	85688 <alt_get_errno+0x3c>
   85680:	00800274 	movhi	r2,9
   85684:	10a60804 	addi	r2,r2,-26592
}
   85688:	e037883a 	mov	sp,fp
   8568c:	dfc00117 	ldw	ra,4(sp)
   85690:	df000017 	ldw	fp,0(sp)
   85694:	dec00204 	addi	sp,sp,8
   85698:	f800283a 	ret

0008569c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8569c:	defffb04 	addi	sp,sp,-20
   856a0:	dfc00415 	stw	ra,16(sp)
   856a4:	df000315 	stw	fp,12(sp)
   856a8:	dc000215 	stw	r16,8(sp)
   856ac:	df000204 	addi	fp,sp,8
   856b0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   856b4:	e0bfff17 	ldw	r2,-4(fp)
   856b8:	10800217 	ldw	r2,8(r2)
   856bc:	10d00034 	orhi	r3,r2,16384
   856c0:	e0bfff17 	ldw	r2,-4(fp)
   856c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   856c8:	e03ffe15 	stw	zero,-8(fp)
   856cc:	00002206 	br	85758 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   856d0:	04000234 	movhi	r16,8
   856d4:	841a8804 	addi	r16,r16,27168
   856d8:	e0bffe17 	ldw	r2,-8(fp)
   856dc:	1009883a 	mov	r4,r2
   856e0:	01400304 	movi	r5,12
   856e4:	0082f2c0 	call	82f2c <__mulsi3>
   856e8:	8085883a 	add	r2,r16,r2
   856ec:	10c00017 	ldw	r3,0(r2)
   856f0:	e0bfff17 	ldw	r2,-4(fp)
   856f4:	10800017 	ldw	r2,0(r2)
   856f8:	1880141e 	bne	r3,r2,8574c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   856fc:	04000234 	movhi	r16,8
   85700:	841a8804 	addi	r16,r16,27168
   85704:	e0bffe17 	ldw	r2,-8(fp)
   85708:	1009883a 	mov	r4,r2
   8570c:	01400304 	movi	r5,12
   85710:	0082f2c0 	call	82f2c <__mulsi3>
   85714:	8085883a 	add	r2,r16,r2
   85718:	10800204 	addi	r2,r2,8
   8571c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   85720:	10000a0e 	bge	r2,zero,8574c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   85724:	e13ffe17 	ldw	r4,-8(fp)
   85728:	01400304 	movi	r5,12
   8572c:	0082f2c0 	call	82f2c <__mulsi3>
   85730:	00c00234 	movhi	r3,8
   85734:	18da8804 	addi	r3,r3,27168
   85738:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8573c:	e0bfff17 	ldw	r2,-4(fp)
   85740:	18800226 	beq	r3,r2,8574c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   85744:	00bffcc4 	movi	r2,-13
   85748:	00000a06 	br	85774 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8574c:	e0bffe17 	ldw	r2,-8(fp)
   85750:	10800044 	addi	r2,r2,1
   85754:	e0bffe15 	stw	r2,-8(fp)
   85758:	00800234 	movhi	r2,8
   8575c:	109f3904 	addi	r2,r2,31972
   85760:	10800017 	ldw	r2,0(r2)
   85764:	1007883a 	mov	r3,r2
   85768:	e0bffe17 	ldw	r2,-8(fp)
   8576c:	18bfd82e 	bgeu	r3,r2,856d0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   85770:	0005883a 	mov	r2,zero
}
   85774:	e037883a 	mov	sp,fp
   85778:	dfc00217 	ldw	ra,8(sp)
   8577c:	df000117 	ldw	fp,4(sp)
   85780:	dc000017 	ldw	r16,0(sp)
   85784:	dec00304 	addi	sp,sp,12
   85788:	f800283a 	ret

0008578c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8578c:	defff604 	addi	sp,sp,-40
   85790:	dfc00915 	stw	ra,36(sp)
   85794:	df000815 	stw	fp,32(sp)
   85798:	df000804 	addi	fp,sp,32
   8579c:	e13ffd15 	stw	r4,-12(fp)
   857a0:	e17ffe15 	stw	r5,-8(fp)
   857a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   857a8:	00bfffc4 	movi	r2,-1
   857ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   857b0:	00bffb44 	movi	r2,-19
   857b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   857b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   857bc:	e13ffd17 	ldw	r4,-12(fp)
   857c0:	01400234 	movhi	r5,8
   857c4:	295f3704 	addi	r5,r5,31964
   857c8:	0085aa00 	call	85aa0 <alt_find_dev>
   857cc:	e0bff815 	stw	r2,-32(fp)
   857d0:	e0bff817 	ldw	r2,-32(fp)
   857d4:	1000051e 	bne	r2,zero,857ec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   857d8:	e13ffd17 	ldw	r4,-12(fp)
   857dc:	0085b300 	call	85b30 <alt_find_file>
   857e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   857e4:	00800044 	movi	r2,1
   857e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   857ec:	e0bff817 	ldw	r2,-32(fp)
   857f0:	10002a26 	beq	r2,zero,8589c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   857f4:	e13ff817 	ldw	r4,-32(fp)
   857f8:	0085c440 	call	85c44 <alt_get_fd>
   857fc:	e0bff915 	stw	r2,-28(fp)
   85800:	e0bff917 	ldw	r2,-28(fp)
   85804:	1000030e 	bge	r2,zero,85814 <open+0x88>
    {
      status = index;
   85808:	e0bff917 	ldw	r2,-28(fp)
   8580c:	e0bffa15 	stw	r2,-24(fp)
   85810:	00002406 	br	858a4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   85814:	e13ff917 	ldw	r4,-28(fp)
   85818:	01400304 	movi	r5,12
   8581c:	0082f2c0 	call	82f2c <__mulsi3>
   85820:	00c00234 	movhi	r3,8
   85824:	18da8804 	addi	r3,r3,27168
   85828:	10c5883a 	add	r2,r2,r3
   8582c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   85830:	e0fffe17 	ldw	r3,-8(fp)
   85834:	00900034 	movhi	r2,16384
   85838:	10bfffc4 	addi	r2,r2,-1
   8583c:	1886703a 	and	r3,r3,r2
   85840:	e0bffc17 	ldw	r2,-16(fp)
   85844:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   85848:	e0bffb17 	ldw	r2,-20(fp)
   8584c:	1000051e 	bne	r2,zero,85864 <open+0xd8>
   85850:	e13ffc17 	ldw	r4,-16(fp)
   85854:	008569c0 	call	8569c <alt_file_locked>
   85858:	e0bffa15 	stw	r2,-24(fp)
   8585c:	e0bffa17 	ldw	r2,-24(fp)
   85860:	10001016 	blt	r2,zero,858a4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   85864:	e0bff817 	ldw	r2,-32(fp)
   85868:	10800317 	ldw	r2,12(r2)
   8586c:	10000826 	beq	r2,zero,85890 <open+0x104>
   85870:	e0bff817 	ldw	r2,-32(fp)
   85874:	10800317 	ldw	r2,12(r2)
   85878:	e13ffc17 	ldw	r4,-16(fp)
   8587c:	e17ffd17 	ldw	r5,-12(fp)
   85880:	e1bffe17 	ldw	r6,-8(fp)
   85884:	e1ffff17 	ldw	r7,-4(fp)
   85888:	103ee83a 	callr	r2
   8588c:	00000106 	br	85894 <open+0x108>
   85890:	0005883a 	mov	r2,zero
   85894:	e0bffa15 	stw	r2,-24(fp)
   85898:	00000206 	br	858a4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8589c:	00bffb44 	movi	r2,-19
   858a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   858a4:	e0bffa17 	ldw	r2,-24(fp)
   858a8:	1000080e 	bge	r2,zero,858cc <open+0x140>
  {
    alt_release_fd (index);  
   858ac:	e13ff917 	ldw	r4,-28(fp)
   858b0:	00836e00 	call	836e0 <alt_release_fd>
    ALT_ERRNO = -status;
   858b4:	008564c0 	call	8564c <alt_get_errno>
   858b8:	e0fffa17 	ldw	r3,-24(fp)
   858bc:	00c7c83a 	sub	r3,zero,r3
   858c0:	10c00015 	stw	r3,0(r2)
    return -1;
   858c4:	00bfffc4 	movi	r2,-1
   858c8:	00000106 	br	858d0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   858cc:	e0bff917 	ldw	r2,-28(fp)
}
   858d0:	e037883a 	mov	sp,fp
   858d4:	dfc00117 	ldw	ra,4(sp)
   858d8:	df000017 	ldw	fp,0(sp)
   858dc:	dec00204 	addi	sp,sp,8
   858e0:	f800283a 	ret

000858e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   858e4:	defffa04 	addi	sp,sp,-24
   858e8:	df000515 	stw	fp,20(sp)
   858ec:	df000504 	addi	fp,sp,20
   858f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   858f4:	0005303a 	rdctl	r2,status
   858f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   858fc:	e0fffc17 	ldw	r3,-16(fp)
   85900:	00bfff84 	movi	r2,-2
   85904:	1884703a 	and	r2,r3,r2
   85908:	1001703a 	wrctl	status,r2
  
  return context;
   8590c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   85910:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   85914:	e0bfff17 	ldw	r2,-4(fp)
   85918:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8591c:	e0bffd17 	ldw	r2,-12(fp)
   85920:	10800017 	ldw	r2,0(r2)
   85924:	e0fffd17 	ldw	r3,-12(fp)
   85928:	18c00117 	ldw	r3,4(r3)
   8592c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   85930:	e0bffd17 	ldw	r2,-12(fp)
   85934:	10800117 	ldw	r2,4(r2)
   85938:	e0fffd17 	ldw	r3,-12(fp)
   8593c:	18c00017 	ldw	r3,0(r3)
   85940:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   85944:	e0bffd17 	ldw	r2,-12(fp)
   85948:	e0fffd17 	ldw	r3,-12(fp)
   8594c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   85950:	e0bffd17 	ldw	r2,-12(fp)
   85954:	e0fffd17 	ldw	r3,-12(fp)
   85958:	10c00015 	stw	r3,0(r2)
   8595c:	e0bffb17 	ldw	r2,-20(fp)
   85960:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85964:	e0bffe17 	ldw	r2,-8(fp)
   85968:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8596c:	e037883a 	mov	sp,fp
   85970:	df000017 	ldw	fp,0(sp)
   85974:	dec00104 	addi	sp,sp,4
   85978:	f800283a 	ret

0008597c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8597c:	defffb04 	addi	sp,sp,-20
   85980:	dfc00415 	stw	ra,16(sp)
   85984:	df000315 	stw	fp,12(sp)
   85988:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8598c:	d0a00c17 	ldw	r2,-32720(gp)
   85990:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   85994:	d0a6dd17 	ldw	r2,-25740(gp)
   85998:	10800044 	addi	r2,r2,1
   8599c:	d0a6dd15 	stw	r2,-25740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   859a0:	00002e06 	br	85a5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   859a4:	e0bffd17 	ldw	r2,-12(fp)
   859a8:	10800017 	ldw	r2,0(r2)
   859ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   859b0:	e0bffd17 	ldw	r2,-12(fp)
   859b4:	10800403 	ldbu	r2,16(r2)
   859b8:	10803fcc 	andi	r2,r2,255
   859bc:	10000426 	beq	r2,zero,859d0 <alt_tick+0x54>
   859c0:	d0a6dd17 	ldw	r2,-25740(gp)
   859c4:	1000021e 	bne	r2,zero,859d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   859c8:	e0bffd17 	ldw	r2,-12(fp)
   859cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   859d0:	e0bffd17 	ldw	r2,-12(fp)
   859d4:	10800217 	ldw	r2,8(r2)
   859d8:	d0e6dd17 	ldw	r3,-25740(gp)
   859dc:	18801d36 	bltu	r3,r2,85a54 <alt_tick+0xd8>
   859e0:	e0bffd17 	ldw	r2,-12(fp)
   859e4:	10800403 	ldbu	r2,16(r2)
   859e8:	10803fcc 	andi	r2,r2,255
   859ec:	1000191e 	bne	r2,zero,85a54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   859f0:	e0bffd17 	ldw	r2,-12(fp)
   859f4:	10c00317 	ldw	r3,12(r2)
   859f8:	e0bffd17 	ldw	r2,-12(fp)
   859fc:	10800517 	ldw	r2,20(r2)
   85a00:	1009883a 	mov	r4,r2
   85a04:	183ee83a 	callr	r3
   85a08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   85a0c:	e0bfff17 	ldw	r2,-4(fp)
   85a10:	1000031e 	bne	r2,zero,85a20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   85a14:	e13ffd17 	ldw	r4,-12(fp)
   85a18:	00858e40 	call	858e4 <alt_alarm_stop>
   85a1c:	00000d06 	br	85a54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   85a20:	e0bffd17 	ldw	r2,-12(fp)
   85a24:	10c00217 	ldw	r3,8(r2)
   85a28:	e0bfff17 	ldw	r2,-4(fp)
   85a2c:	1887883a 	add	r3,r3,r2
   85a30:	e0bffd17 	ldw	r2,-12(fp)
   85a34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   85a38:	e0bffd17 	ldw	r2,-12(fp)
   85a3c:	10c00217 	ldw	r3,8(r2)
   85a40:	d0a6dd17 	ldw	r2,-25740(gp)
   85a44:	1880032e 	bgeu	r3,r2,85a54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   85a48:	e0bffd17 	ldw	r2,-12(fp)
   85a4c:	00c00044 	movi	r3,1
   85a50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   85a54:	e0bffe17 	ldw	r2,-8(fp)
   85a58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85a5c:	e0fffd17 	ldw	r3,-12(fp)
   85a60:	d0a00c04 	addi	r2,gp,-32720
   85a64:	18bfcf1e 	bne	r3,r2,859a4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   85a68:	0001883a 	nop
}
   85a6c:	e037883a 	mov	sp,fp
   85a70:	dfc00117 	ldw	ra,4(sp)
   85a74:	df000017 	ldw	fp,0(sp)
   85a78:	dec00204 	addi	sp,sp,8
   85a7c:	f800283a 	ret

00085a80 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   85a80:	deffff04 	addi	sp,sp,-4
   85a84:	df000015 	stw	fp,0(sp)
   85a88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   85a8c:	000170fa 	wrctl	ienable,zero
}
   85a90:	e037883a 	mov	sp,fp
   85a94:	df000017 	ldw	fp,0(sp)
   85a98:	dec00104 	addi	sp,sp,4
   85a9c:	f800283a 	ret

00085aa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   85aa0:	defffa04 	addi	sp,sp,-24
   85aa4:	dfc00515 	stw	ra,20(sp)
   85aa8:	df000415 	stw	fp,16(sp)
   85aac:	df000404 	addi	fp,sp,16
   85ab0:	e13ffe15 	stw	r4,-8(fp)
   85ab4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   85ab8:	e0bfff17 	ldw	r2,-4(fp)
   85abc:	10800017 	ldw	r2,0(r2)
   85ac0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   85ac4:	e13ffe17 	ldw	r4,-8(fp)
   85ac8:	00804a80 	call	804a8 <strlen>
   85acc:	10800044 	addi	r2,r2,1
   85ad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   85ad4:	00000d06 	br	85b0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   85ad8:	e0bffc17 	ldw	r2,-16(fp)
   85adc:	10c00217 	ldw	r3,8(r2)
   85ae0:	e0bffd17 	ldw	r2,-12(fp)
   85ae4:	1809883a 	mov	r4,r3
   85ae8:	e17ffe17 	ldw	r5,-8(fp)
   85aec:	100d883a 	mov	r6,r2
   85af0:	0085df40 	call	85df4 <memcmp>
   85af4:	1000021e 	bne	r2,zero,85b00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   85af8:	e0bffc17 	ldw	r2,-16(fp)
   85afc:	00000706 	br	85b1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   85b00:	e0bffc17 	ldw	r2,-16(fp)
   85b04:	10800017 	ldw	r2,0(r2)
   85b08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   85b0c:	e0fffc17 	ldw	r3,-16(fp)
   85b10:	e0bfff17 	ldw	r2,-4(fp)
   85b14:	18bff01e 	bne	r3,r2,85ad8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   85b18:	0005883a 	mov	r2,zero
}
   85b1c:	e037883a 	mov	sp,fp
   85b20:	dfc00117 	ldw	ra,4(sp)
   85b24:	df000017 	ldw	fp,0(sp)
   85b28:	dec00204 	addi	sp,sp,8
   85b2c:	f800283a 	ret

00085b30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   85b30:	defffb04 	addi	sp,sp,-20
   85b34:	dfc00415 	stw	ra,16(sp)
   85b38:	df000315 	stw	fp,12(sp)
   85b3c:	df000304 	addi	fp,sp,12
   85b40:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   85b44:	00800234 	movhi	r2,8
   85b48:	109f3504 	addi	r2,r2,31956
   85b4c:	10800017 	ldw	r2,0(r2)
   85b50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85b54:	00003106 	br	85c1c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   85b58:	e0bffd17 	ldw	r2,-12(fp)
   85b5c:	10800217 	ldw	r2,8(r2)
   85b60:	1009883a 	mov	r4,r2
   85b64:	00804a80 	call	804a8 <strlen>
   85b68:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   85b6c:	e0bffd17 	ldw	r2,-12(fp)
   85b70:	10c00217 	ldw	r3,8(r2)
   85b74:	e0bffe17 	ldw	r2,-8(fp)
   85b78:	10bfffc4 	addi	r2,r2,-1
   85b7c:	1885883a 	add	r2,r3,r2
   85b80:	10800003 	ldbu	r2,0(r2)
   85b84:	10803fcc 	andi	r2,r2,255
   85b88:	1080201c 	xori	r2,r2,128
   85b8c:	10bfe004 	addi	r2,r2,-128
   85b90:	10800bd8 	cmpnei	r2,r2,47
   85b94:	1000031e 	bne	r2,zero,85ba4 <alt_find_file+0x74>
    {
      len -= 1;
   85b98:	e0bffe17 	ldw	r2,-8(fp)
   85b9c:	10bfffc4 	addi	r2,r2,-1
   85ba0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85ba4:	e0bffe17 	ldw	r2,-8(fp)
   85ba8:	e0ffff17 	ldw	r3,-4(fp)
   85bac:	1885883a 	add	r2,r3,r2
   85bb0:	10800003 	ldbu	r2,0(r2)
   85bb4:	10803fcc 	andi	r2,r2,255
   85bb8:	1080201c 	xori	r2,r2,128
   85bbc:	10bfe004 	addi	r2,r2,-128
   85bc0:	10800be0 	cmpeqi	r2,r2,47
   85bc4:	1000081e 	bne	r2,zero,85be8 <alt_find_file+0xb8>
   85bc8:	e0bffe17 	ldw	r2,-8(fp)
   85bcc:	e0ffff17 	ldw	r3,-4(fp)
   85bd0:	1885883a 	add	r2,r3,r2
   85bd4:	10800003 	ldbu	r2,0(r2)
   85bd8:	10803fcc 	andi	r2,r2,255
   85bdc:	1080201c 	xori	r2,r2,128
   85be0:	10bfe004 	addi	r2,r2,-128
   85be4:	10000a1e 	bne	r2,zero,85c10 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   85be8:	e0bffd17 	ldw	r2,-12(fp)
   85bec:	10c00217 	ldw	r3,8(r2)
   85bf0:	e0bffe17 	ldw	r2,-8(fp)
   85bf4:	1809883a 	mov	r4,r3
   85bf8:	e17fff17 	ldw	r5,-4(fp)
   85bfc:	100d883a 	mov	r6,r2
   85c00:	0085df40 	call	85df4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85c04:	1000021e 	bne	r2,zero,85c10 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   85c08:	e0bffd17 	ldw	r2,-12(fp)
   85c0c:	00000806 	br	85c30 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   85c10:	e0bffd17 	ldw	r2,-12(fp)
   85c14:	10800017 	ldw	r2,0(r2)
   85c18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   85c1c:	e0fffd17 	ldw	r3,-12(fp)
   85c20:	00800234 	movhi	r2,8
   85c24:	109f3504 	addi	r2,r2,31956
   85c28:	18bfcb1e 	bne	r3,r2,85b58 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   85c2c:	0005883a 	mov	r2,zero
}
   85c30:	e037883a 	mov	sp,fp
   85c34:	dfc00117 	ldw	ra,4(sp)
   85c38:	df000017 	ldw	fp,0(sp)
   85c3c:	dec00204 	addi	sp,sp,8
   85c40:	f800283a 	ret

00085c44 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   85c44:	defffa04 	addi	sp,sp,-24
   85c48:	dfc00515 	stw	ra,20(sp)
   85c4c:	df000415 	stw	fp,16(sp)
   85c50:	dc000315 	stw	r16,12(sp)
   85c54:	df000304 	addi	fp,sp,12
   85c58:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   85c5c:	00bffa04 	movi	r2,-24
   85c60:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85c64:	e03ffd15 	stw	zero,-12(fp)
   85c68:	00002106 	br	85cf0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   85c6c:	04000234 	movhi	r16,8
   85c70:	841a8804 	addi	r16,r16,27168
   85c74:	e0bffd17 	ldw	r2,-12(fp)
   85c78:	1009883a 	mov	r4,r2
   85c7c:	01400304 	movi	r5,12
   85c80:	0082f2c0 	call	82f2c <__mulsi3>
   85c84:	8085883a 	add	r2,r16,r2
   85c88:	10800017 	ldw	r2,0(r2)
   85c8c:	1000151e 	bne	r2,zero,85ce4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   85c90:	04000234 	movhi	r16,8
   85c94:	841a8804 	addi	r16,r16,27168
   85c98:	e0bffd17 	ldw	r2,-12(fp)
   85c9c:	1009883a 	mov	r4,r2
   85ca0:	01400304 	movi	r5,12
   85ca4:	0082f2c0 	call	82f2c <__mulsi3>
   85ca8:	8085883a 	add	r2,r16,r2
   85cac:	e0ffff17 	ldw	r3,-4(fp)
   85cb0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   85cb4:	00800234 	movhi	r2,8
   85cb8:	109f3904 	addi	r2,r2,31972
   85cbc:	10c00017 	ldw	r3,0(r2)
   85cc0:	e0bffd17 	ldw	r2,-12(fp)
   85cc4:	1880040e 	bge	r3,r2,85cd8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   85cc8:	00800234 	movhi	r2,8
   85ccc:	109f3904 	addi	r2,r2,31972
   85cd0:	e0fffd17 	ldw	r3,-12(fp)
   85cd4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   85cd8:	e0bffd17 	ldw	r2,-12(fp)
   85cdc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   85ce0:	00000606 	br	85cfc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85ce4:	e0bffd17 	ldw	r2,-12(fp)
   85ce8:	10800044 	addi	r2,r2,1
   85cec:	e0bffd15 	stw	r2,-12(fp)
   85cf0:	e0bffd17 	ldw	r2,-12(fp)
   85cf4:	10800810 	cmplti	r2,r2,32
   85cf8:	103fdc1e 	bne	r2,zero,85c6c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   85cfc:	e0bffe17 	ldw	r2,-8(fp)
}
   85d00:	e037883a 	mov	sp,fp
   85d04:	dfc00217 	ldw	ra,8(sp)
   85d08:	df000117 	ldw	fp,4(sp)
   85d0c:	dc000017 	ldw	r16,0(sp)
   85d10:	dec00304 	addi	sp,sp,12
   85d14:	f800283a 	ret

00085d18 <atexit>:
   85d18:	200b883a 	mov	r5,r4
   85d1c:	000d883a 	mov	r6,zero
   85d20:	0009883a 	mov	r4,zero
   85d24:	000f883a 	mov	r7,zero
   85d28:	0085e701 	jmpi	85e70 <__register_exitproc>

00085d2c <exit>:
   85d2c:	defffe04 	addi	sp,sp,-8
   85d30:	000b883a 	mov	r5,zero
   85d34:	dc000015 	stw	r16,0(sp)
   85d38:	dfc00115 	stw	ra,4(sp)
   85d3c:	2021883a 	mov	r16,r4
   85d40:	0085fa00 	call	85fa0 <__call_exitprocs>
   85d44:	00800234 	movhi	r2,8
   85d48:	109f3104 	addi	r2,r2,31940
   85d4c:	11000017 	ldw	r4,0(r2)
   85d50:	20800f17 	ldw	r2,60(r4)
   85d54:	10000126 	beq	r2,zero,85d5c <exit+0x30>
   85d58:	103ee83a 	callr	r2
   85d5c:	8009883a 	mov	r4,r16
   85d60:	00861400 	call	86140 <_exit>

00085d64 <_fputs_r>:
   85d64:	defff804 	addi	sp,sp,-32
   85d68:	dc000515 	stw	r16,20(sp)
   85d6c:	2021883a 	mov	r16,r4
   85d70:	2809883a 	mov	r4,r5
   85d74:	dc400615 	stw	r17,24(sp)
   85d78:	dfc00715 	stw	ra,28(sp)
   85d7c:	3023883a 	mov	r17,r6
   85d80:	d9400315 	stw	r5,12(sp)
   85d84:	00804a80 	call	804a8 <strlen>
   85d88:	d8800215 	stw	r2,8(sp)
   85d8c:	d8800415 	stw	r2,16(sp)
   85d90:	d8800304 	addi	r2,sp,12
   85d94:	d8800015 	stw	r2,0(sp)
   85d98:	00800044 	movi	r2,1
   85d9c:	d8800115 	stw	r2,4(sp)
   85da0:	80000426 	beq	r16,zero,85db4 <_fputs_r+0x50>
   85da4:	80800e17 	ldw	r2,56(r16)
   85da8:	1000021e 	bne	r2,zero,85db4 <_fputs_r+0x50>
   85dac:	8009883a 	mov	r4,r16
   85db0:	0081ff00 	call	81ff0 <__sinit>
   85db4:	8009883a 	mov	r4,r16
   85db8:	880b883a 	mov	r5,r17
   85dbc:	d80d883a 	mov	r6,sp
   85dc0:	00805340 	call	80534 <__sfvwrite_r>
   85dc4:	dfc00717 	ldw	ra,28(sp)
   85dc8:	dc400617 	ldw	r17,24(sp)
   85dcc:	dc000517 	ldw	r16,20(sp)
   85dd0:	dec00804 	addi	sp,sp,32
   85dd4:	f800283a 	ret

00085dd8 <fputs>:
   85dd8:	00c00234 	movhi	r3,8
   85ddc:	18df3204 	addi	r3,r3,31944
   85de0:	2005883a 	mov	r2,r4
   85de4:	19000017 	ldw	r4,0(r3)
   85de8:	280d883a 	mov	r6,r5
   85dec:	100b883a 	mov	r5,r2
   85df0:	0085d641 	jmpi	85d64 <_fputs_r>

00085df4 <memcmp>:
   85df4:	01c000c4 	movi	r7,3
   85df8:	3980192e 	bgeu	r7,r6,85e60 <memcmp+0x6c>
   85dfc:	2904b03a 	or	r2,r5,r4
   85e00:	11c4703a 	and	r2,r2,r7
   85e04:	10000f26 	beq	r2,zero,85e44 <memcmp+0x50>
   85e08:	20c00003 	ldbu	r3,0(r4)
   85e0c:	28800003 	ldbu	r2,0(r5)
   85e10:	1880151e 	bne	r3,r2,85e68 <memcmp+0x74>
   85e14:	31bfff84 	addi	r6,r6,-2
   85e18:	01ffffc4 	movi	r7,-1
   85e1c:	00000406 	br	85e30 <memcmp+0x3c>
   85e20:	20c00003 	ldbu	r3,0(r4)
   85e24:	28800003 	ldbu	r2,0(r5)
   85e28:	31bfffc4 	addi	r6,r6,-1
   85e2c:	18800e1e 	bne	r3,r2,85e68 <memcmp+0x74>
   85e30:	21000044 	addi	r4,r4,1
   85e34:	29400044 	addi	r5,r5,1
   85e38:	31fff91e 	bne	r6,r7,85e20 <memcmp+0x2c>
   85e3c:	0005883a 	mov	r2,zero
   85e40:	f800283a 	ret
   85e44:	20c00017 	ldw	r3,0(r4)
   85e48:	28800017 	ldw	r2,0(r5)
   85e4c:	1880041e 	bne	r3,r2,85e60 <memcmp+0x6c>
   85e50:	31bfff04 	addi	r6,r6,-4
   85e54:	21000104 	addi	r4,r4,4
   85e58:	29400104 	addi	r5,r5,4
   85e5c:	39bff936 	bltu	r7,r6,85e44 <memcmp+0x50>
   85e60:	303fe91e 	bne	r6,zero,85e08 <memcmp+0x14>
   85e64:	003ff506 	br	85e3c <memcmp+0x48>
   85e68:	1885c83a 	sub	r2,r3,r2
   85e6c:	f800283a 	ret

00085e70 <__register_exitproc>:
   85e70:	defffa04 	addi	sp,sp,-24
   85e74:	00800234 	movhi	r2,8
   85e78:	109f3104 	addi	r2,r2,31940
   85e7c:	dc000315 	stw	r16,12(sp)
   85e80:	14000017 	ldw	r16,0(r2)
   85e84:	dc400415 	stw	r17,16(sp)
   85e88:	dfc00515 	stw	ra,20(sp)
   85e8c:	80805217 	ldw	r2,328(r16)
   85e90:	2023883a 	mov	r17,r4
   85e94:	10003e26 	beq	r2,zero,85f90 <__register_exitproc+0x120>
   85e98:	10c00117 	ldw	r3,4(r2)
   85e9c:	020007c4 	movi	r8,31
   85ea0:	40c0180e 	bge	r8,r3,85f04 <__register_exitproc+0x94>
   85ea4:	00800034 	movhi	r2,0
   85ea8:	10800004 	addi	r2,r2,0
   85eac:	1000061e 	bne	r2,zero,85ec8 <__register_exitproc+0x58>
   85eb0:	00bfffc4 	movi	r2,-1
   85eb4:	dfc00517 	ldw	ra,20(sp)
   85eb8:	dc400417 	ldw	r17,16(sp)
   85ebc:	dc000317 	ldw	r16,12(sp)
   85ec0:	dec00604 	addi	sp,sp,24
   85ec4:	f800283a 	ret
   85ec8:	01006404 	movi	r4,400
   85ecc:	d9400015 	stw	r5,0(sp)
   85ed0:	d9800115 	stw	r6,4(sp)
   85ed4:	d9c00215 	stw	r7,8(sp)
   85ed8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   85edc:	d9400017 	ldw	r5,0(sp)
   85ee0:	d9800117 	ldw	r6,4(sp)
   85ee4:	d9c00217 	ldw	r7,8(sp)
   85ee8:	103ff126 	beq	r2,zero,85eb0 <__register_exitproc+0x40>
   85eec:	80c05217 	ldw	r3,328(r16)
   85ef0:	10000115 	stw	zero,4(r2)
   85ef4:	10c00015 	stw	r3,0(r2)
   85ef8:	80805215 	stw	r2,328(r16)
   85efc:	10006215 	stw	zero,392(r2)
   85f00:	10006315 	stw	zero,396(r2)
   85f04:	10c00117 	ldw	r3,4(r2)
   85f08:	88000d1e 	bne	r17,zero,85f40 <__register_exitproc+0xd0>
   85f0c:	19000084 	addi	r4,r3,2
   85f10:	2109883a 	add	r4,r4,r4
   85f14:	18c00044 	addi	r3,r3,1
   85f18:	2109883a 	add	r4,r4,r4
   85f1c:	1109883a 	add	r4,r2,r4
   85f20:	10c00115 	stw	r3,4(r2)
   85f24:	0005883a 	mov	r2,zero
   85f28:	21400015 	stw	r5,0(r4)
   85f2c:	dfc00517 	ldw	ra,20(sp)
   85f30:	dc400417 	ldw	r17,16(sp)
   85f34:	dc000317 	ldw	r16,12(sp)
   85f38:	dec00604 	addi	sp,sp,24
   85f3c:	f800283a 	ret
   85f40:	02400044 	movi	r9,1
   85f44:	12806217 	ldw	r10,392(r2)
   85f48:	48d2983a 	sll	r9,r9,r3
   85f4c:	19000804 	addi	r4,r3,32
   85f50:	18d1883a 	add	r8,r3,r3
   85f54:	2109883a 	add	r4,r4,r4
   85f58:	4211883a 	add	r8,r8,r8
   85f5c:	2109883a 	add	r4,r4,r4
   85f60:	1109883a 	add	r4,r2,r4
   85f64:	1211883a 	add	r8,r2,r8
   85f68:	5254b03a 	or	r10,r10,r9
   85f6c:	21c02215 	stw	r7,136(r4)
   85f70:	41802215 	stw	r6,136(r8)
   85f74:	12806215 	stw	r10,392(r2)
   85f78:	01000084 	movi	r4,2
   85f7c:	893fe31e 	bne	r17,r4,85f0c <__register_exitproc+0x9c>
   85f80:	11006317 	ldw	r4,396(r2)
   85f84:	2252b03a 	or	r9,r4,r9
   85f88:	12406315 	stw	r9,396(r2)
   85f8c:	003fdf06 	br	85f0c <__register_exitproc+0x9c>
   85f90:	00800274 	movhi	r2,9
   85f94:	10a65904 	addi	r2,r2,-26268
   85f98:	80805215 	stw	r2,328(r16)
   85f9c:	003fbe06 	br	85e98 <__register_exitproc+0x28>

00085fa0 <__call_exitprocs>:
   85fa0:	00800234 	movhi	r2,8
   85fa4:	109f3104 	addi	r2,r2,31940
   85fa8:	10800017 	ldw	r2,0(r2)
   85fac:	defff304 	addi	sp,sp,-52
   85fb0:	df000b15 	stw	fp,44(sp)
   85fb4:	d8800015 	stw	r2,0(sp)
   85fb8:	10805204 	addi	r2,r2,328
   85fbc:	dd400815 	stw	r21,32(sp)
   85fc0:	dfc00c15 	stw	ra,48(sp)
   85fc4:	ddc00a15 	stw	r23,40(sp)
   85fc8:	dd800915 	stw	r22,36(sp)
   85fcc:	dd000715 	stw	r20,28(sp)
   85fd0:	dcc00615 	stw	r19,24(sp)
   85fd4:	dc800515 	stw	r18,20(sp)
   85fd8:	dc400415 	stw	r17,16(sp)
   85fdc:	dc000315 	stw	r16,12(sp)
   85fe0:	d9000115 	stw	r4,4(sp)
   85fe4:	2839883a 	mov	fp,r5
   85fe8:	d8800215 	stw	r2,8(sp)
   85fec:	057fffc4 	movi	r21,-1
   85ff0:	d8800017 	ldw	r2,0(sp)
   85ff4:	ddc00217 	ldw	r23,8(sp)
   85ff8:	14805217 	ldw	r18,328(r2)
   85ffc:	90001726 	beq	r18,zero,8605c <__call_exitprocs+0xbc>
   86000:	94400117 	ldw	r17,4(r18)
   86004:	8c3fffc4 	addi	r16,r17,-1
   86008:	80001116 	blt	r16,zero,86050 <__call_exitprocs+0xb0>
   8600c:	8c400044 	addi	r17,r17,1
   86010:	8427883a 	add	r19,r16,r16
   86014:	8c63883a 	add	r17,r17,r17
   86018:	95802204 	addi	r22,r18,136
   8601c:	9ce7883a 	add	r19,r19,r19
   86020:	8c63883a 	add	r17,r17,r17
   86024:	b4e7883a 	add	r19,r22,r19
   86028:	9463883a 	add	r17,r18,r17
   8602c:	e0001726 	beq	fp,zero,8608c <__call_exitprocs+0xec>
   86030:	8c87c83a 	sub	r3,r17,r18
   86034:	b0c7883a 	add	r3,r22,r3
   86038:	18c01e17 	ldw	r3,120(r3)
   8603c:	1f001326 	beq	r3,fp,8608c <__call_exitprocs+0xec>
   86040:	843fffc4 	addi	r16,r16,-1
   86044:	9cffff04 	addi	r19,r19,-4
   86048:	8c7fff04 	addi	r17,r17,-4
   8604c:	857ff71e 	bne	r16,r21,8602c <__call_exitprocs+0x8c>
   86050:	00800034 	movhi	r2,0
   86054:	10800004 	addi	r2,r2,0
   86058:	10002a1e 	bne	r2,zero,86104 <__call_exitprocs+0x164>
   8605c:	dfc00c17 	ldw	ra,48(sp)
   86060:	df000b17 	ldw	fp,44(sp)
   86064:	ddc00a17 	ldw	r23,40(sp)
   86068:	dd800917 	ldw	r22,36(sp)
   8606c:	dd400817 	ldw	r21,32(sp)
   86070:	dd000717 	ldw	r20,28(sp)
   86074:	dcc00617 	ldw	r19,24(sp)
   86078:	dc800517 	ldw	r18,20(sp)
   8607c:	dc400417 	ldw	r17,16(sp)
   86080:	dc000317 	ldw	r16,12(sp)
   86084:	dec00d04 	addi	sp,sp,52
   86088:	f800283a 	ret
   8608c:	91000117 	ldw	r4,4(r18)
   86090:	88c00017 	ldw	r3,0(r17)
   86094:	213fffc4 	addi	r4,r4,-1
   86098:	24001526 	beq	r4,r16,860f0 <__call_exitprocs+0x150>
   8609c:	88000015 	stw	zero,0(r17)
   860a0:	183fe726 	beq	r3,zero,86040 <__call_exitprocs+0xa0>
   860a4:	00800044 	movi	r2,1
   860a8:	1408983a 	sll	r4,r2,r16
   860ac:	91406217 	ldw	r5,392(r18)
   860b0:	95000117 	ldw	r20,4(r18)
   860b4:	214a703a 	and	r5,r4,r5
   860b8:	28000b26 	beq	r5,zero,860e8 <__call_exitprocs+0x148>
   860bc:	91406317 	ldw	r5,396(r18)
   860c0:	2148703a 	and	r4,r4,r5
   860c4:	20000c1e 	bne	r4,zero,860f8 <__call_exitprocs+0x158>
   860c8:	99400017 	ldw	r5,0(r19)
   860cc:	d9000117 	ldw	r4,4(sp)
   860d0:	183ee83a 	callr	r3
   860d4:	90c00117 	ldw	r3,4(r18)
   860d8:	1d3fc51e 	bne	r3,r20,85ff0 <__call_exitprocs+0x50>
   860dc:	b8c00017 	ldw	r3,0(r23)
   860e0:	1cbfd726 	beq	r3,r18,86040 <__call_exitprocs+0xa0>
   860e4:	003fc206 	br	85ff0 <__call_exitprocs+0x50>
   860e8:	183ee83a 	callr	r3
   860ec:	003ff906 	br	860d4 <__call_exitprocs+0x134>
   860f0:	94000115 	stw	r16,4(r18)
   860f4:	003fea06 	br	860a0 <__call_exitprocs+0x100>
   860f8:	99000017 	ldw	r4,0(r19)
   860fc:	183ee83a 	callr	r3
   86100:	003ff406 	br	860d4 <__call_exitprocs+0x134>
   86104:	90c00117 	ldw	r3,4(r18)
   86108:	1800071e 	bne	r3,zero,86128 <__call_exitprocs+0x188>
   8610c:	90c00017 	ldw	r3,0(r18)
   86110:	18000926 	beq	r3,zero,86138 <__call_exitprocs+0x198>
   86114:	9009883a 	mov	r4,r18
   86118:	b8c00015 	stw	r3,0(r23)
   8611c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   86120:	bc800017 	ldw	r18,0(r23)
   86124:	003fb506 	br	85ffc <__call_exitprocs+0x5c>
   86128:	90c00017 	ldw	r3,0(r18)
   8612c:	902f883a 	mov	r23,r18
   86130:	1825883a 	mov	r18,r3
   86134:	003fb106 	br	85ffc <__call_exitprocs+0x5c>
   86138:	0007883a 	mov	r3,zero
   8613c:	003ffb06 	br	8612c <__call_exitprocs+0x18c>

00086140 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   86140:	defffc04 	addi	sp,sp,-16
   86144:	df000315 	stw	fp,12(sp)
   86148:	df000304 	addi	fp,sp,12
   8614c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   86150:	0001883a 	nop
   86154:	e0bfff17 	ldw	r2,-4(fp)
   86158:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   8615c:	e0bffd17 	ldw	r2,-12(fp)
   86160:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   86164:	e0bffe17 	ldw	r2,-8(fp)
   86168:	10000226 	beq	r2,zero,86174 <_exit+0x34>
    ALT_SIM_FAIL();
   8616c:	002af070 	cmpltui	zero,zero,43969
   86170:	00000106 	br	86178 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   86174:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   86178:	003fff06 	br	86178 <_exit+0x38>
