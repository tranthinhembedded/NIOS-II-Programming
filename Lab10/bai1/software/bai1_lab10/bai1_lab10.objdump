
bai1_lab10.elf:     file format elf32-littlenios2
bai1_lab10.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010140

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001708 memsz 0x00001708 flags r-x
    LOAD off    0x00002728 vaddr 0x00011728 paddr 0x0001192c align 2**12
         filesz 0x00000204 memsz 0x00000204 flags rw-
    LOAD off    0x00002b30 vaddr 0x00011b30 paddr 0x00011b30 align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000015d0  00010140  00010140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00011710  00011710  00002710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000204  00011728  0001192c  00002728  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000114  00011b30  00011b30  00002b30  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003b8  00000000  00000000  00002958  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000650  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000053ff  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bf3  00000000  00000000  0000875f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004c4f  00000000  00000000  0000a352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005a0  00000000  00000000  0000efa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001354  00000000  00000000  0000f544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001854  00000000  00000000  00010898  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000120ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000218  00000000  00000000  00012110  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000139d8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000139db  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000139e7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000139e8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000139e9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000139f4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000139ff  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00013a0a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  00013a12  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003a714  00000000  00000000  00013a37  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010140 l    d  .text	00000000 .text
00011710 l    d  .rodata	00000000 .rodata
00011728 l    d  .rwdata	00000000 .rwdata
00011b30 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000102d4 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011748 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010afc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00010d50 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011828 l     O .rwdata	0000001c dma_0_tx
00011844 l     O .rwdata	0000001c dma_0_rx
00011860 l     O .rwdata	000000a4 dma_0_priv
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
00011038 l     F .text	0000004c alt_avalon_dma_launch_rxonly
00011084 l     F .text	0000004c alt_avalon_dma_launch_txonly
000113c4 l     F .text	000000fc alt_avalon_dma_irq
000111ec l     F .text	000001c8 alt_avalon_dma_ioctl
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00010ddc g     F .text	0000002c alt_main
00011b44 g     O .bss	00000100 alt_irq
0001192c g       *ABS*	00000000 __flash_rwdata_start
0001023c g     F .text	00000054 printf
00011150 g     F .text	0000009c alt_avalon_dma_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011b30 g     O .bss	00000004 errno
00011b3c g     O .bss	00000004 alt_argv
00019904 g       *ABS*	00000000 _gp
00011904 g     O .rwdata	00000004 pdatad
000115c0 g     F .text	00000058 alt_dma_txchan_open
00011618 g     F .text	00000070 alt_find_dev
00010290 g     F .text	00000044 _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010c38 g     F .text	00000008 __udivsi3
0001169c g     F .text	00000038 alt_icache_flush
000110d0 g     F .text	00000080 alt_avalon_dma_launch_bidir
00011568 g     F .text	00000058 alt_dma_rxchan_open
0001190c g     O .rwdata	00000004 _global_impure_ptr
00011c44 g       *ABS*	00000000 __bss_end
00010ce4 g     F .text	0000006c alt_iic_isr_register
00010c48 g     F .text	00000018 alt_ic_irq_enabled
000101ec g     F .text	00000050 DMA_ISR_handler
00011b34 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	00000054 alt_irq_handler
000114f4 g     F .text	00000004 alt_dcache_flush_all
0001192c g       *ABS*	00000000 __ram_rwdata_end
00010f78 g     F .text	00000024 alt_avalon_dma_space
00010e08 g     F .text	00000078 write
00011728 g       *ABS*	00000000 __ram_rodata_end
00011914 g     O .rwdata	00000004 jtag_uart_0
00010c40 g     F .text	00000008 __umodsi3
00011c44 g       *ABS*	00000000 end
00019c40 g       *ABS*	00000000 __alt_stack_pointer
000114c0 g     F .text	00000034 altera_avalon_jtag_uart_write
00010354 g     F .text	00000630 ___vfprintf_internal_r
00010f9c g     F .text	0000009c alt_avalon_dma_send
00011920 g     O .rwdata	00000008 alt_dma_txchan_list
00010140 g     F .text	0000003c _start
00010e80 g     F .text	0000003c alt_sys_init
00011728 g       *ABS*	00000000 __ram_rwdata_start
00011710 g       *ABS*	00000000 __ram_rodata_start
00021080 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
000116d4 g     F .text	0000003c memcmp
00011c44 g       *ABS*	00000000 __alt_stack_base
000114f8 g     F .text	00000070 alt_dev_llist_insert
000109a8 g     F .text	000000bc __sfvwrite_small_dev
00011b30 g       *ABS*	00000000 __bss_start
000101c0 g     F .text	0000002c main
000113b4 g     F .text	00000008 alt_avalon_dma_rx_ioctl
00011b40 g     O .bss	00000004 alt_envp
00011928 g     O .rwdata	00000004 alt_errno
00010b78 g     F .text	00000060 __divsi3
00011710 g       *ABS*	00000000 __flash_rodata_start
00010ebc g     F .text	00000020 alt_irq_init
0001017c g     F .text	00000044 DMA_init
00010a84 g     F .text	00000078 _write_r
00011908 g     O .rwdata	00000004 _impure_ptr
00011b38 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00011728 g     O .rwdata	00000020 pdata8
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010ce0 g     F .text	00000004 alt_ic_isr_register
0001192c g       *ABS*	00000000 _edata
00011c44 g       *ABS*	00000000 _end
00010140 g       *ABS*	00000000 __ram_exceptions_end
00010ca0 g     F .text	00000040 alt_ic_irq_disable
00011694 g     F .text	00000008 altera_nios2_qsys_irq_init
0001001c g       .entry	00000000 exit
00010bd8 g     F .text	00000060 __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001001c g       .entry	00000000 _exit
00010a64 g     F .text	00000020 strlen
00011688 g     F .text	0000000c alt_icache_flush_all
00011910 g     O .rwdata	00000004 alt_priority_mask
00010c60 g     F .text	00000040 alt_ic_irq_enable
00010984 g     F .text	00000024 __vfprintf_internal
00010edc g     F .text	0000009c alt_avalon_dma_prepare
00011918 g     O .rwdata	00000008 alt_dma_rxchan_list
00010d70 g     F .text	0000006c alt_load
000113bc g     F .text	00000008 alt_avalon_dma_tx_ioctl



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08405014 	ori	at,at,320
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	deffff04 	addi	sp,sp,-4
   100f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100f4:	0009313a 	rdctl	r4,ipending
   100f8:	00c00044 	movi	r3,1
   100fc:	01400074 	movhi	r5,1
   10100:	2946d104 	addi	r5,r5,6980
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1010c:	10000726 	beq	r2,zero,1012c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10110:	29000117 	ldw	r4,4(r5)
   10114:	28800017 	ldw	r2,0(r5)
   10118:	103ee83a 	callr	r2
   1011c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   10120:	10000426 	beq	r2,zero,10134 <alt_irq_handler+0x48>
   10124:	1009883a 	mov	r4,r2
   10128:	003ff306 	br	100f8 <alt_irq_handler+0xc>
   1012c:	29400204 	addi	r5,r5,8
   10130:	003ff406 	br	10104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10134:	dfc00017 	ldw	ra,0(sp)
   10138:	dec00104 	addi	sp,sp,4
   1013c:	f800283a 	ret

Disassembly of section .text:

00010140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10140:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10144:	dee71014 	ori	sp,sp,40000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10148:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1014c:	d6a64114 	ori	gp,gp,39172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10150:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10154:	1086cc14 	ori	r2,r2,6960

    movhi r3, %hi(__bss_end)
   10158:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1015c:	18c71114 	ori	r3,r3,7236

    beq r2, r3, 1f
   10160:	10c00326 	beq	r2,r3,10170 <_start+0x30>

0:
    stw zero, (r2)
   10164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1016c:	10fffd36 	bltu	r2,r3,10164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10170:	0010d700 	call	10d70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10174:	0010ddc0 	call	10ddc <alt_main>

00010178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10178:	003fff06 	br	10178 <alt_after_alt_main>

0001017c <DMA_init>:

/// Initialize function of DMA
void DMA_init(void)
{
    /// De-init DMA
    IOWR_ALTERA_AVALON_DMA_CONTROL(DMA_0_BASE, 0);
   1017c:	010000b4 	movhi	r4,2
   10180:	21044e04 	addi	r4,r4,4408
   10184:	20000035 	stwio	zero,0(r4)

    /// Source address is pdatad
    IOWR_ALTERA_AVALON_DMA_RADDRESS(DMA_0_BASE, (int)pdata8);
   10188:	00c00074 	movhi	r3,1
   1018c:	18c5ca04 	addi	r3,r3,5928
   10190:	008000b4 	movhi	r2,2
   10194:	10844904 	addi	r2,r2,4388
   10198:	10c00035 	stwio	r3,0(r2)

    /// Destination address is pdatad
    IOWR_ALTERA_AVALON_DMA_WADDRESS(DMA_0_BASE, (int)pdatad);
   1019c:	d0e00017 	ldw	r3,-32768(gp)
   101a0:	10800104 	addi	r2,r2,4
   101a4:	10c00035 	stwio	r3,0(r2)

    /// Length is 32 bytes
    IOWR_ALTERA_AVALON_DMA_LENGTH(DMA_0_BASE, 32);
   101a8:	00c00804 	movi	r3,32
   101ac:	10800104 	addi	r2,r2,4
   101b0:	10c00035 	stwio	r3,0(r2)

    /// Configure and Start DMA
    IOWR_ALTERA_AVALON_DMA_CONTROL(DMA_0_BASE,
   101b4:	00802644 	movi	r2,153
   101b8:	20800035 	stwio	r2,0(r4)
        ALTERA_AVALON_DMA_CONTROL_BYTE_MSK | /// Byte transfer
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK | /// End transaction when length reach zero
        ALTERA_AVALON_DMA_CONTROL_I_EN_MSK | /// Interrupt enable
        ALTERA_AVALON_DMA_CONTROL_GO_MSK); /// Start DMA
}
   101bc:	f800283a 	ret

000101c0 <main>:

int main(void)
{
   101c0:	defffe04 	addi	sp,sp,-8
   101c4:	dfc00115 	stw	ra,4(sp)
    /// Configure the DMA
    DMA_init();
   101c8:	001017c0 	call	1017c <DMA_init>

    /// Register DMA's interrupt handler
    alt_ic_isr_register(0, DMA_0_IRQ, DMA_ISR_handler, (void*)0, (void*)0);
   101cc:	0009883a 	mov	r4,zero
   101d0:	01400044 	movi	r5,1
   101d4:	01800074 	movhi	r6,1
   101d8:	31807b04 	addi	r6,r6,492
   101dc:	000f883a 	mov	r7,zero
   101e0:	d8000015 	stw	zero,0(sp)
   101e4:	0010ce00 	call	10ce0 <alt_ic_isr_register>
   101e8:	003fff06 	br	101e8 <main+0x28>

000101ec <DMA_ISR_handler>:
/// pdatad points to onchip_memory2_1
char* pdatad = (char*) (ONCHIP_MEMORY2_1_BASE);

/// Interrupt handler of DMA
void DMA_ISR_handler(void* context)
{
   101ec:	defffe04 	addi	sp,sp,-8
   101f0:	dc000015 	stw	r16,0(sp)
   101f4:	dfc00115 	stw	ra,4(sp)
   101f8:	0021883a 	mov	r16,zero
    int i;

    /// Read and print data in onchip_memory2_1
    for(i=0; i<32; i++)
    {
        printf("byte %d\n", pdatad[i]);
   101fc:	d0a00017 	ldw	r2,-32768(gp)
   10200:	01000074 	movhi	r4,1
   10204:	2105c404 	addi	r4,r4,5904
   10208:	1405883a 	add	r2,r2,r16
   1020c:	11400007 	ldb	r5,0(r2)
void DMA_ISR_handler(void* context)
{
    int i;

    /// Read and print data in onchip_memory2_1
    for(i=0; i<32; i++)
   10210:	84000044 	addi	r16,r16,1
    {
        printf("byte %d\n", pdatad[i]);
   10214:	001023c0 	call	1023c <printf>
void DMA_ISR_handler(void* context)
{
    int i;

    /// Read and print data in onchip_memory2_1
    for(i=0; i<32; i++)
   10218:	00800804 	movi	r2,32
   1021c:	80bff71e 	bne	r16,r2,101fc <DMA_ISR_handler+0x10>
    {
        printf("byte %d\n", pdatad[i]);
    }

    /// Clear DMA interrupt bit
    IOWR_ALTERA_AVALON_DMA_STATUS(DMA_0_BASE, 0);
   10220:	008000b4 	movhi	r2,2
   10224:	10844804 	addi	r2,r2,4384
   10228:	10000035 	stwio	zero,0(r2)
}
   1022c:	dfc00117 	ldw	ra,4(sp)
   10230:	dc000017 	ldw	r16,0(sp)
   10234:	dec00204 	addi	sp,sp,8
   10238:	f800283a 	ret

0001023c <printf>:
   1023c:	defffb04 	addi	sp,sp,-20
   10240:	dfc00115 	stw	ra,4(sp)
   10244:	d9400215 	stw	r5,8(sp)
   10248:	d9800315 	stw	r6,12(sp)
   1024c:	d9c00415 	stw	r7,16(sp)
   10250:	00800074 	movhi	r2,1
   10254:	10864204 	addi	r2,r2,6408
   10258:	11400017 	ldw	r5,0(r2)
   1025c:	d8800204 	addi	r2,sp,8
   10260:	d8800015 	stw	r2,0(sp)
   10264:	29c00217 	ldw	r7,8(r5)
   10268:	100d883a 	mov	r6,r2
   1026c:	00800074 	movhi	r2,1
   10270:	10826a04 	addi	r2,r2,2472
   10274:	200b883a 	mov	r5,r4
   10278:	38800115 	stw	r2,4(r7)
   1027c:	3809883a 	mov	r4,r7
   10280:	00109840 	call	10984 <__vfprintf_internal>
   10284:	dfc00117 	ldw	ra,4(sp)
   10288:	dec00504 	addi	sp,sp,20
   1028c:	f800283a 	ret

00010290 <_printf_r>:
   10290:	defffc04 	addi	sp,sp,-16
   10294:	dfc00115 	stw	ra,4(sp)
   10298:	d9800215 	stw	r6,8(sp)
   1029c:	d9c00315 	stw	r7,12(sp)
   102a0:	22000217 	ldw	r8,8(r4)
   102a4:	d8800204 	addi	r2,sp,8
   102a8:	d8800015 	stw	r2,0(sp)
   102ac:	100f883a 	mov	r7,r2
   102b0:	00800074 	movhi	r2,1
   102b4:	10826a04 	addi	r2,r2,2472
   102b8:	280d883a 	mov	r6,r5
   102bc:	40800115 	stw	r2,4(r8)
   102c0:	400b883a 	mov	r5,r8
   102c4:	00103540 	call	10354 <___vfprintf_internal_r>
   102c8:	dfc00117 	ldw	ra,4(sp)
   102cc:	dec00404 	addi	sp,sp,16
   102d0:	f800283a 	ret

000102d4 <print_repeat>:
   102d4:	defffb04 	addi	sp,sp,-20
   102d8:	dc800315 	stw	r18,12(sp)
   102dc:	dc400215 	stw	r17,8(sp)
   102e0:	dc000115 	stw	r16,4(sp)
   102e4:	dfc00415 	stw	ra,16(sp)
   102e8:	2025883a 	mov	r18,r4
   102ec:	2823883a 	mov	r17,r5
   102f0:	3821883a 	mov	r16,r7
   102f4:	d9800005 	stb	r6,0(sp)
   102f8:	9009883a 	mov	r4,r18
   102fc:	880b883a 	mov	r5,r17
   10300:	d80d883a 	mov	r6,sp
   10304:	01c00044 	movi	r7,1
   10308:	04000b0e 	bge	zero,r16,10338 <print_repeat+0x64>
   1030c:	88c00117 	ldw	r3,4(r17)
   10310:	843fffc4 	addi	r16,r16,-1
   10314:	183ee83a 	callr	r3
   10318:	103ff726 	beq	r2,zero,102f8 <print_repeat+0x24>
   1031c:	00bfffc4 	movi	r2,-1
   10320:	dfc00417 	ldw	ra,16(sp)
   10324:	dc800317 	ldw	r18,12(sp)
   10328:	dc400217 	ldw	r17,8(sp)
   1032c:	dc000117 	ldw	r16,4(sp)
   10330:	dec00504 	addi	sp,sp,20
   10334:	f800283a 	ret
   10338:	0005883a 	mov	r2,zero
   1033c:	dfc00417 	ldw	ra,16(sp)
   10340:	dc800317 	ldw	r18,12(sp)
   10344:	dc400217 	ldw	r17,8(sp)
   10348:	dc000117 	ldw	r16,4(sp)
   1034c:	dec00504 	addi	sp,sp,20
   10350:	f800283a 	ret

00010354 <___vfprintf_internal_r>:
   10354:	deffe404 	addi	sp,sp,-112
   10358:	ddc01915 	stw	r23,100(sp)
   1035c:	dd801815 	stw	r22,96(sp)
   10360:	dcc01515 	stw	r19,84(sp)
   10364:	dc401315 	stw	r17,76(sp)
   10368:	dc001215 	stw	r16,72(sp)
   1036c:	dfc01b15 	stw	ra,108(sp)
   10370:	df001a15 	stw	fp,104(sp)
   10374:	dd401715 	stw	r21,92(sp)
   10378:	dd001615 	stw	r20,88(sp)
   1037c:	dc801415 	stw	r18,80(sp)
   10380:	d9001015 	stw	r4,64(sp)
   10384:	2827883a 	mov	r19,r5
   10388:	d9c01115 	stw	r7,68(sp)
   1038c:	3023883a 	mov	r17,r6
   10390:	0021883a 	mov	r16,zero
   10394:	d8000f15 	stw	zero,60(sp)
   10398:	d8000e15 	stw	zero,56(sp)
   1039c:	002f883a 	mov	r23,zero
   103a0:	d8000915 	stw	zero,36(sp)
   103a4:	d8000d15 	stw	zero,52(sp)
   103a8:	d8000c15 	stw	zero,48(sp)
   103ac:	d8000b15 	stw	zero,44(sp)
   103b0:	002d883a 	mov	r22,zero
   103b4:	89400003 	ldbu	r5,0(r17)
   103b8:	01c00044 	movi	r7,1
   103bc:	8c400044 	addi	r17,r17,1
   103c0:	29003fcc 	andi	r4,r5,255
   103c4:	2100201c 	xori	r4,r4,128
   103c8:	213fe004 	addi	r4,r4,-128
   103cc:	20001526 	beq	r4,zero,10424 <___vfprintf_internal_r+0xd0>
   103d0:	81c03326 	beq	r16,r7,104a0 <___vfprintf_internal_r+0x14c>
   103d4:	3c002016 	blt	r7,r16,10458 <___vfprintf_internal_r+0x104>
   103d8:	803ff61e 	bne	r16,zero,103b4 <___vfprintf_internal_r+0x60>
   103dc:	00800944 	movi	r2,37
   103e0:	2081311e 	bne	r4,r2,108a8 <___vfprintf_internal_r+0x554>
   103e4:	05ffffc4 	movi	r23,-1
   103e8:	00800284 	movi	r2,10
   103ec:	d9c00c15 	stw	r7,48(sp)
   103f0:	d8000f15 	stw	zero,60(sp)
   103f4:	d8000e15 	stw	zero,56(sp)
   103f8:	ddc00915 	stw	r23,36(sp)
   103fc:	d8800d15 	stw	r2,52(sp)
   10400:	d8000b15 	stw	zero,44(sp)
   10404:	89400003 	ldbu	r5,0(r17)
   10408:	3821883a 	mov	r16,r7
   1040c:	8c400044 	addi	r17,r17,1
   10410:	29003fcc 	andi	r4,r5,255
   10414:	2100201c 	xori	r4,r4,128
   10418:	213fe004 	addi	r4,r4,-128
   1041c:	01c00044 	movi	r7,1
   10420:	203feb1e 	bne	r4,zero,103d0 <___vfprintf_internal_r+0x7c>
   10424:	b005883a 	mov	r2,r22
   10428:	dfc01b17 	ldw	ra,108(sp)
   1042c:	df001a17 	ldw	fp,104(sp)
   10430:	ddc01917 	ldw	r23,100(sp)
   10434:	dd801817 	ldw	r22,96(sp)
   10438:	dd401717 	ldw	r21,92(sp)
   1043c:	dd001617 	ldw	r20,88(sp)
   10440:	dcc01517 	ldw	r19,84(sp)
   10444:	dc801417 	ldw	r18,80(sp)
   10448:	dc401317 	ldw	r17,76(sp)
   1044c:	dc001217 	ldw	r16,72(sp)
   10450:	dec01c04 	addi	sp,sp,112
   10454:	f800283a 	ret
   10458:	00800084 	movi	r2,2
   1045c:	80801526 	beq	r16,r2,104b4 <___vfprintf_internal_r+0x160>
   10460:	008000c4 	movi	r2,3
   10464:	80bfd31e 	bne	r16,r2,103b4 <___vfprintf_internal_r+0x60>
   10468:	29bff404 	addi	r6,r5,-48
   1046c:	30c03fcc 	andi	r3,r6,255
   10470:	00800244 	movi	r2,9
   10474:	10c01c36 	bltu	r2,r3,104e8 <___vfprintf_internal_r+0x194>
   10478:	d8c00917 	ldw	r3,36(sp)
   1047c:	18010816 	blt	r3,zero,108a0 <___vfprintf_internal_r+0x54c>
   10480:	d9000917 	ldw	r4,36(sp)
   10484:	20c002a4 	muli	r3,r4,10
   10488:	30803fcc 	andi	r2,r6,255
   1048c:	1080201c 	xori	r2,r2,128
   10490:	10bfe004 	addi	r2,r2,-128
   10494:	1887883a 	add	r3,r3,r2
   10498:	d8c00915 	stw	r3,36(sp)
   1049c:	003fc506 	br	103b4 <___vfprintf_internal_r+0x60>
   104a0:	00800c04 	movi	r2,48
   104a4:	20809526 	beq	r4,r2,106fc <___vfprintf_internal_r+0x3a8>
   104a8:	00800944 	movi	r2,37
   104ac:	20810e26 	beq	r4,r2,108e8 <___vfprintf_internal_r+0x594>
   104b0:	04000084 	movi	r16,2
   104b4:	29bff404 	addi	r6,r5,-48
   104b8:	30c03fcc 	andi	r3,r6,255
   104bc:	00800244 	movi	r2,9
   104c0:	10c00736 	bltu	r2,r3,104e0 <___vfprintf_internal_r+0x18c>
   104c4:	b8009816 	blt	r23,zero,10728 <___vfprintf_internal_r+0x3d4>
   104c8:	b9c002a4 	muli	r7,r23,10
   104cc:	30803fcc 	andi	r2,r6,255
   104d0:	1080201c 	xori	r2,r2,128
   104d4:	10bfe004 	addi	r2,r2,-128
   104d8:	38af883a 	add	r23,r7,r2
   104dc:	003fb506 	br	103b4 <___vfprintf_internal_r+0x60>
   104e0:	00800b84 	movi	r2,46
   104e4:	20808a26 	beq	r4,r2,10710 <___vfprintf_internal_r+0x3bc>
   104e8:	00801b04 	movi	r2,108
   104ec:	20808a26 	beq	r4,r2,10718 <___vfprintf_internal_r+0x3c4>
   104f0:	d8c00917 	ldw	r3,36(sp)
   104f4:	18008e16 	blt	r3,zero,10730 <___vfprintf_internal_r+0x3dc>
   104f8:	d8000f15 	stw	zero,60(sp)
   104fc:	28bfea04 	addi	r2,r5,-88
   10500:	10803fcc 	andi	r2,r2,255
   10504:	00c00804 	movi	r3,32
   10508:	18802836 	bltu	r3,r2,105ac <___vfprintf_internal_r+0x258>
   1050c:	1085883a 	add	r2,r2,r2
   10510:	1085883a 	add	r2,r2,r2
   10514:	00c00074 	movhi	r3,1
   10518:	18c14a04 	addi	r3,r3,1320
   1051c:	10c5883a 	add	r2,r2,r3
   10520:	11000017 	ldw	r4,0(r2)
   10524:	2000683a 	jmp	r4
   10528:	000107a4 	muli	zero,zero,1054
   1052c:	000105ac 	andhi	zero,zero,1046
   10530:	000105ac 	andhi	zero,zero,1046
   10534:	000105ac 	andhi	zero,zero,1046
   10538:	000105ac 	andhi	zero,zero,1046
   1053c:	000105ac 	andhi	zero,zero,1046
   10540:	000105ac 	andhi	zero,zero,1046
   10544:	000105ac 	andhi	zero,zero,1046
   10548:	000105ac 	andhi	zero,zero,1046
   1054c:	000105ac 	andhi	zero,zero,1046
   10550:	000105ac 	andhi	zero,zero,1046
   10554:	000107bc 	xorhi	zero,zero,1054
   10558:	000105c0 	call	105c <__alt_mem_onchip_memory2_0-0xefa4>
   1055c:	000105ac 	andhi	zero,zero,1046
   10560:	000105ac 	andhi	zero,zero,1046
   10564:	000105ac 	andhi	zero,zero,1046
   10568:	000105ac 	andhi	zero,zero,1046
   1056c:	000105c0 	call	105c <__alt_mem_onchip_memory2_0-0xefa4>
   10570:	000105ac 	andhi	zero,zero,1046
   10574:	000105ac 	andhi	zero,zero,1046
   10578:	000105ac 	andhi	zero,zero,1046
   1057c:	000105ac 	andhi	zero,zero,1046
   10580:	000105ac 	andhi	zero,zero,1046
   10584:	00010824 	muli	zero,zero,1056
   10588:	000105ac 	andhi	zero,zero,1046
   1058c:	000105ac 	andhi	zero,zero,1046
   10590:	000105ac 	andhi	zero,zero,1046
   10594:	00010834 	movhi	zero,1056
   10598:	000105ac 	andhi	zero,zero,1046
   1059c:	000105bc 	xorhi	zero,zero,1046
   105a0:	000105ac 	andhi	zero,zero,1046
   105a4:	000105ac 	andhi	zero,zero,1046
   105a8:	000105b4 	movhi	zero,1046
   105ac:	0021883a 	mov	r16,zero
   105b0:	003f8006 	br	103b4 <___vfprintf_internal_r+0x60>
   105b4:	00800404 	movi	r2,16
   105b8:	d8800d15 	stw	r2,52(sp)
   105bc:	d8000c15 	stw	zero,48(sp)
   105c0:	d8800c17 	ldw	r2,48(sp)
   105c4:	10006c1e 	bne	r2,zero,10778 <___vfprintf_internal_r+0x424>
   105c8:	d9001117 	ldw	r4,68(sp)
   105cc:	21c00104 	addi	r7,r4,4
   105d0:	24000017 	ldw	r16,0(r4)
   105d4:	d9c01115 	stw	r7,68(sp)
   105d8:	d8000a15 	stw	zero,40(sp)
   105dc:	80006d26 	beq	r16,zero,10794 <___vfprintf_internal_r+0x440>
   105e0:	d8c00b17 	ldw	r3,44(sp)
   105e4:	dc800044 	addi	r18,sp,1
   105e8:	9039883a 	mov	fp,r18
   105ec:	05400244 	movi	r21,9
   105f0:	1829003a 	cmpeq	r20,r3,zero
   105f4:	00000506 	br	1060c <___vfprintf_internal_r+0x2b8>
   105f8:	21000c04 	addi	r4,r4,48
   105fc:	91000005 	stb	r4,0(r18)
   10600:	94800044 	addi	r18,r18,1
   10604:	18000e26 	beq	r3,zero,10640 <___vfprintf_internal_r+0x2ec>
   10608:	1821883a 	mov	r16,r3
   1060c:	d9400d17 	ldw	r5,52(sp)
   10610:	8009883a 	mov	r4,r16
   10614:	0010c380 	call	10c38 <__udivsi3>
   10618:	d9000d17 	ldw	r4,52(sp)
   1061c:	1007883a 	mov	r3,r2
   10620:	2085383a 	mul	r2,r4,r2
   10624:	8089c83a 	sub	r4,r16,r2
   10628:	a93ff30e 	bge	r21,r4,105f8 <___vfprintf_internal_r+0x2a4>
   1062c:	a000361e 	bne	r20,zero,10708 <___vfprintf_internal_r+0x3b4>
   10630:	21000dc4 	addi	r4,r4,55
   10634:	91000005 	stb	r4,0(r18)
   10638:	94800044 	addi	r18,r18,1
   1063c:	183ff21e 	bne	r3,zero,10608 <___vfprintf_internal_r+0x2b4>
   10640:	9729c83a 	sub	r20,r18,fp
   10644:	d8800917 	ldw	r2,36(sp)
   10648:	150bc83a 	sub	r5,r2,r20
   1064c:	0140100e 	bge	zero,r5,10690 <___vfprintf_internal_r+0x33c>
   10650:	e0800804 	addi	r2,fp,32
   10654:	90800e2e 	bgeu	r18,r2,10690 <___vfprintf_internal_r+0x33c>
   10658:	00800c04 	movi	r2,48
   1065c:	28ffffc4 	addi	r3,r5,-1
   10660:	90800005 	stb	r2,0(r18)
   10664:	91000044 	addi	r4,r18,1
   10668:	00c0070e 	bge	zero,r3,10688 <___vfprintf_internal_r+0x334>
   1066c:	e0800804 	addi	r2,fp,32
   10670:	2080052e 	bgeu	r4,r2,10688 <___vfprintf_internal_r+0x334>
   10674:	00800c04 	movi	r2,48
   10678:	20800005 	stb	r2,0(r4)
   1067c:	21000044 	addi	r4,r4,1
   10680:	9145883a 	add	r2,r18,r5
   10684:	20bff91e 	bne	r4,r2,1066c <___vfprintf_internal_r+0x318>
   10688:	2729c83a 	sub	r20,r4,fp
   1068c:	2025883a 	mov	r18,r4
   10690:	d8c00a17 	ldw	r3,40(sp)
   10694:	d9000f17 	ldw	r4,60(sp)
   10698:	1d05883a 	add	r2,r3,r20
   1069c:	b8a1c83a 	sub	r16,r23,r2
   106a0:	20002626 	beq	r4,zero,1073c <___vfprintf_internal_r+0x3e8>
   106a4:	1805003a 	cmpeq	r2,r3,zero
   106a8:	1000a226 	beq	r2,zero,10934 <___vfprintf_internal_r+0x5e0>
   106ac:	04009916 	blt	zero,r16,10914 <___vfprintf_internal_r+0x5c0>
   106b0:	b005883a 	mov	r2,r22
   106b4:	0500890e 	bge	zero,r20,108dc <___vfprintf_internal_r+0x588>
   106b8:	102d883a 	mov	r22,r2
   106bc:	1521883a 	add	r16,r2,r20
   106c0:	00000206 	br	106cc <___vfprintf_internal_r+0x378>
   106c4:	b5800044 	addi	r22,r22,1
   106c8:	85bfb826 	beq	r16,r22,105ac <___vfprintf_internal_r+0x258>
   106cc:	94bfffc4 	addi	r18,r18,-1
   106d0:	90800003 	ldbu	r2,0(r18)
   106d4:	98c00117 	ldw	r3,4(r19)
   106d8:	d9001017 	ldw	r4,64(sp)
   106dc:	d8800005 	stb	r2,0(sp)
   106e0:	980b883a 	mov	r5,r19
   106e4:	d80d883a 	mov	r6,sp
   106e8:	01c00044 	movi	r7,1
   106ec:	183ee83a 	callr	r3
   106f0:	103ff426 	beq	r2,zero,106c4 <___vfprintf_internal_r+0x370>
   106f4:	05bfffc4 	movi	r22,-1
   106f8:	003f4a06 	br	10424 <___vfprintf_internal_r+0xd0>
   106fc:	04000084 	movi	r16,2
   10700:	d9c00f15 	stw	r7,60(sp)
   10704:	003f2b06 	br	103b4 <___vfprintf_internal_r+0x60>
   10708:	210015c4 	addi	r4,r4,87
   1070c:	003fbb06 	br	105fc <___vfprintf_internal_r+0x2a8>
   10710:	040000c4 	movi	r16,3
   10714:	003f2706 	br	103b4 <___vfprintf_internal_r+0x60>
   10718:	00800044 	movi	r2,1
   1071c:	040000c4 	movi	r16,3
   10720:	d8800e15 	stw	r2,56(sp)
   10724:	003f2306 	br	103b4 <___vfprintf_internal_r+0x60>
   10728:	000f883a 	mov	r7,zero
   1072c:	003f6706 	br	104cc <___vfprintf_internal_r+0x178>
   10730:	01000044 	movi	r4,1
   10734:	d9000915 	stw	r4,36(sp)
   10738:	003f7006 	br	104fc <___vfprintf_internal_r+0x1a8>
   1073c:	04008916 	blt	zero,r16,10964 <___vfprintf_internal_r+0x610>
   10740:	d8c00a17 	ldw	r3,40(sp)
   10744:	1805003a 	cmpeq	r2,r3,zero
   10748:	103fd91e 	bne	r2,zero,106b0 <___vfprintf_internal_r+0x35c>
   1074c:	98c00117 	ldw	r3,4(r19)
   10750:	d9001017 	ldw	r4,64(sp)
   10754:	00800b44 	movi	r2,45
   10758:	d8800005 	stb	r2,0(sp)
   1075c:	980b883a 	mov	r5,r19
   10760:	d80d883a 	mov	r6,sp
   10764:	01c00044 	movi	r7,1
   10768:	183ee83a 	callr	r3
   1076c:	103fe11e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   10770:	b0800044 	addi	r2,r22,1
   10774:	003fcf06 	br	106b4 <___vfprintf_internal_r+0x360>
   10778:	d8c01117 	ldw	r3,68(sp)
   1077c:	1c000017 	ldw	r16,0(r3)
   10780:	18c00104 	addi	r3,r3,4
   10784:	d8c01115 	stw	r3,68(sp)
   10788:	80005016 	blt	r16,zero,108cc <___vfprintf_internal_r+0x578>
   1078c:	d8000a15 	stw	zero,40(sp)
   10790:	803f931e 	bne	r16,zero,105e0 <___vfprintf_internal_r+0x28c>
   10794:	dc800044 	addi	r18,sp,1
   10798:	9039883a 	mov	fp,r18
   1079c:	0029883a 	mov	r20,zero
   107a0:	003fa806 	br	10644 <___vfprintf_internal_r+0x2f0>
   107a4:	00800404 	movi	r2,16
   107a8:	00c00044 	movi	r3,1
   107ac:	d8800d15 	stw	r2,52(sp)
   107b0:	d8000c15 	stw	zero,48(sp)
   107b4:	d8c00b15 	stw	r3,44(sp)
   107b8:	003f8106 	br	105c0 <___vfprintf_internal_r+0x26c>
   107bc:	04000044 	movi	r16,1
   107c0:	85c0080e 	bge	r16,r23,107e4 <___vfprintf_internal_r+0x490>
   107c4:	d9001017 	ldw	r4,64(sp)
   107c8:	980b883a 	mov	r5,r19
   107cc:	01800804 	movi	r6,32
   107d0:	b9ffffc4 	addi	r7,r23,-1
   107d4:	00102d40 	call	102d4 <print_repeat>
   107d8:	103fc61e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   107dc:	bd85883a 	add	r2,r23,r22
   107e0:	15bfffc4 	addi	r22,r2,-1
   107e4:	d8c01117 	ldw	r3,68(sp)
   107e8:	d9001017 	ldw	r4,64(sp)
   107ec:	800f883a 	mov	r7,r16
   107f0:	18800017 	ldw	r2,0(r3)
   107f4:	98c00117 	ldw	r3,4(r19)
   107f8:	980b883a 	mov	r5,r19
   107fc:	d8800005 	stb	r2,0(sp)
   10800:	d80d883a 	mov	r6,sp
   10804:	183ee83a 	callr	r3
   10808:	103fba1e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   1080c:	d9001117 	ldw	r4,68(sp)
   10810:	b5800044 	addi	r22,r22,1
   10814:	0021883a 	mov	r16,zero
   10818:	21000104 	addi	r4,r4,4
   1081c:	d9001115 	stw	r4,68(sp)
   10820:	003ee406 	br	103b4 <___vfprintf_internal_r+0x60>
   10824:	01000204 	movi	r4,8
   10828:	d9000d15 	stw	r4,52(sp)
   1082c:	d8000c15 	stw	zero,48(sp)
   10830:	003f6306 	br	105c0 <___vfprintf_internal_r+0x26c>
   10834:	d8801117 	ldw	r2,68(sp)
   10838:	15000017 	ldw	r20,0(r2)
   1083c:	a009883a 	mov	r4,r20
   10840:	0010a640 	call	10a64 <strlen>
   10844:	b8a1c83a 	sub	r16,r23,r2
   10848:	1025883a 	mov	r18,r2
   1084c:	0400070e 	bge	zero,r16,1086c <___vfprintf_internal_r+0x518>
   10850:	d9001017 	ldw	r4,64(sp)
   10854:	980b883a 	mov	r5,r19
   10858:	01800804 	movi	r6,32
   1085c:	800f883a 	mov	r7,r16
   10860:	00102d40 	call	102d4 <print_repeat>
   10864:	103fa31e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   10868:	b42d883a 	add	r22,r22,r16
   1086c:	98c00117 	ldw	r3,4(r19)
   10870:	d9001017 	ldw	r4,64(sp)
   10874:	a00d883a 	mov	r6,r20
   10878:	980b883a 	mov	r5,r19
   1087c:	900f883a 	mov	r7,r18
   10880:	183ee83a 	callr	r3
   10884:	103f9b1e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   10888:	d8c01117 	ldw	r3,68(sp)
   1088c:	b4ad883a 	add	r22,r22,r18
   10890:	0021883a 	mov	r16,zero
   10894:	18c00104 	addi	r3,r3,4
   10898:	d8c01115 	stw	r3,68(sp)
   1089c:	003ec506 	br	103b4 <___vfprintf_internal_r+0x60>
   108a0:	0007883a 	mov	r3,zero
   108a4:	003ef806 	br	10488 <___vfprintf_internal_r+0x134>
   108a8:	98c00117 	ldw	r3,4(r19)
   108ac:	d9001017 	ldw	r4,64(sp)
   108b0:	d9400005 	stb	r5,0(sp)
   108b4:	d80d883a 	mov	r6,sp
   108b8:	980b883a 	mov	r5,r19
   108bc:	183ee83a 	callr	r3
   108c0:	103f8c1e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   108c4:	b5800044 	addi	r22,r22,1
   108c8:	003eba06 	br	103b4 <___vfprintf_internal_r+0x60>
   108cc:	00800044 	movi	r2,1
   108d0:	0421c83a 	sub	r16,zero,r16
   108d4:	d8800a15 	stw	r2,40(sp)
   108d8:	003f4006 	br	105dc <___vfprintf_internal_r+0x288>
   108dc:	102d883a 	mov	r22,r2
   108e0:	0021883a 	mov	r16,zero
   108e4:	003eb306 	br	103b4 <___vfprintf_internal_r+0x60>
   108e8:	98c00117 	ldw	r3,4(r19)
   108ec:	d9000005 	stb	r4,0(sp)
   108f0:	d9001017 	ldw	r4,64(sp)
   108f4:	980b883a 	mov	r5,r19
   108f8:	d80d883a 	mov	r6,sp
   108fc:	800f883a 	mov	r7,r16
   10900:	183ee83a 	callr	r3
   10904:	103f7b1e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   10908:	b42d883a 	add	r22,r22,r16
   1090c:	0021883a 	mov	r16,zero
   10910:	003ea806 	br	103b4 <___vfprintf_internal_r+0x60>
   10914:	d9001017 	ldw	r4,64(sp)
   10918:	980b883a 	mov	r5,r19
   1091c:	01800c04 	movi	r6,48
   10920:	800f883a 	mov	r7,r16
   10924:	00102d40 	call	102d4 <print_repeat>
   10928:	103f721e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   1092c:	b405883a 	add	r2,r22,r16
   10930:	003f6006 	br	106b4 <___vfprintf_internal_r+0x360>
   10934:	98c00117 	ldw	r3,4(r19)
   10938:	d9001017 	ldw	r4,64(sp)
   1093c:	00800b44 	movi	r2,45
   10940:	d8800005 	stb	r2,0(sp)
   10944:	980b883a 	mov	r5,r19
   10948:	d80d883a 	mov	r6,sp
   1094c:	01c00044 	movi	r7,1
   10950:	183ee83a 	callr	r3
   10954:	103f671e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   10958:	b5800044 	addi	r22,r22,1
   1095c:	043f540e 	bge	zero,r16,106b0 <___vfprintf_internal_r+0x35c>
   10960:	003fec06 	br	10914 <___vfprintf_internal_r+0x5c0>
   10964:	d9001017 	ldw	r4,64(sp)
   10968:	980b883a 	mov	r5,r19
   1096c:	01800804 	movi	r6,32
   10970:	800f883a 	mov	r7,r16
   10974:	00102d40 	call	102d4 <print_repeat>
   10978:	103f5e1e 	bne	r2,zero,106f4 <___vfprintf_internal_r+0x3a0>
   1097c:	b42d883a 	add	r22,r22,r16
   10980:	003f6f06 	br	10740 <___vfprintf_internal_r+0x3ec>

00010984 <__vfprintf_internal>:
   10984:	00800074 	movhi	r2,1
   10988:	10864204 	addi	r2,r2,6408
   1098c:	2013883a 	mov	r9,r4
   10990:	11000017 	ldw	r4,0(r2)
   10994:	2805883a 	mov	r2,r5
   10998:	300f883a 	mov	r7,r6
   1099c:	480b883a 	mov	r5,r9
   109a0:	100d883a 	mov	r6,r2
   109a4:	00103541 	jmpi	10354 <___vfprintf_internal_r>

000109a8 <__sfvwrite_small_dev>:
   109a8:	2880000b 	ldhu	r2,0(r5)
   109ac:	defffa04 	addi	sp,sp,-24
   109b0:	dcc00315 	stw	r19,12(sp)
   109b4:	1080020c 	andi	r2,r2,8
   109b8:	dc800215 	stw	r18,8(sp)
   109bc:	dc400115 	stw	r17,4(sp)
   109c0:	dfc00515 	stw	ra,20(sp)
   109c4:	dd000415 	stw	r20,16(sp)
   109c8:	dc000015 	stw	r16,0(sp)
   109cc:	2825883a 	mov	r18,r5
   109d0:	2027883a 	mov	r19,r4
   109d4:	3023883a 	mov	r17,r6
   109d8:	10002026 	beq	r2,zero,10a5c <__sfvwrite_small_dev+0xb4>
   109dc:	2940008f 	ldh	r5,2(r5)
   109e0:	28000f16 	blt	r5,zero,10a20 <__sfvwrite_small_dev+0x78>
   109e4:	01c01b0e 	bge	zero,r7,10a54 <__sfvwrite_small_dev+0xac>
   109e8:	3821883a 	mov	r16,r7
   109ec:	05010004 	movi	r20,1024
   109f0:	00000206 	br	109fc <__sfvwrite_small_dev+0x54>
   109f4:	0400170e 	bge	zero,r16,10a54 <__sfvwrite_small_dev+0xac>
   109f8:	9140008f 	ldh	r5,2(r18)
   109fc:	880d883a 	mov	r6,r17
   10a00:	9809883a 	mov	r4,r19
   10a04:	800f883a 	mov	r7,r16
   10a08:	a400010e 	bge	r20,r16,10a10 <__sfvwrite_small_dev+0x68>
   10a0c:	01c10004 	movi	r7,1024
   10a10:	0010a840 	call	10a84 <_write_r>
   10a14:	88a3883a 	add	r17,r17,r2
   10a18:	80a1c83a 	sub	r16,r16,r2
   10a1c:	00bff516 	blt	zero,r2,109f4 <__sfvwrite_small_dev+0x4c>
   10a20:	9080000b 	ldhu	r2,0(r18)
   10a24:	00ffffc4 	movi	r3,-1
   10a28:	10801014 	ori	r2,r2,64
   10a2c:	9080000d 	sth	r2,0(r18)
   10a30:	1805883a 	mov	r2,r3
   10a34:	dfc00517 	ldw	ra,20(sp)
   10a38:	dd000417 	ldw	r20,16(sp)
   10a3c:	dcc00317 	ldw	r19,12(sp)
   10a40:	dc800217 	ldw	r18,8(sp)
   10a44:	dc400117 	ldw	r17,4(sp)
   10a48:	dc000017 	ldw	r16,0(sp)
   10a4c:	dec00604 	addi	sp,sp,24
   10a50:	f800283a 	ret
   10a54:	0007883a 	mov	r3,zero
   10a58:	003ff506 	br	10a30 <__sfvwrite_small_dev+0x88>
   10a5c:	00ffffc4 	movi	r3,-1
   10a60:	003ff306 	br	10a30 <__sfvwrite_small_dev+0x88>

00010a64 <strlen>:
   10a64:	20800007 	ldb	r2,0(r4)
   10a68:	10000526 	beq	r2,zero,10a80 <strlen+0x1c>
   10a6c:	2007883a 	mov	r3,r4
   10a70:	18c00044 	addi	r3,r3,1
   10a74:	18800007 	ldb	r2,0(r3)
   10a78:	103ffd1e 	bne	r2,zero,10a70 <strlen+0xc>
   10a7c:	1905c83a 	sub	r2,r3,r4
   10a80:	f800283a 	ret

00010a84 <_write_r>:
   10a84:	defffd04 	addi	sp,sp,-12
   10a88:	dc000015 	stw	r16,0(sp)
   10a8c:	04000074 	movhi	r16,1
   10a90:	8406cc04 	addi	r16,r16,6960
   10a94:	dc400115 	stw	r17,4(sp)
   10a98:	80000015 	stw	zero,0(r16)
   10a9c:	2023883a 	mov	r17,r4
   10aa0:	2809883a 	mov	r4,r5
   10aa4:	300b883a 	mov	r5,r6
   10aa8:	380d883a 	mov	r6,r7
   10aac:	dfc00215 	stw	ra,8(sp)
   10ab0:	0010e080 	call	10e08 <write>
   10ab4:	1007883a 	mov	r3,r2
   10ab8:	00bfffc4 	movi	r2,-1
   10abc:	18800626 	beq	r3,r2,10ad8 <_write_r+0x54>
   10ac0:	1805883a 	mov	r2,r3
   10ac4:	dfc00217 	ldw	ra,8(sp)
   10ac8:	dc400117 	ldw	r17,4(sp)
   10acc:	dc000017 	ldw	r16,0(sp)
   10ad0:	dec00304 	addi	sp,sp,12
   10ad4:	f800283a 	ret
   10ad8:	80800017 	ldw	r2,0(r16)
   10adc:	103ff826 	beq	r2,zero,10ac0 <_write_r+0x3c>
   10ae0:	88800015 	stw	r2,0(r17)
   10ae4:	1805883a 	mov	r2,r3
   10ae8:	dfc00217 	ldw	ra,8(sp)
   10aec:	dc400117 	ldw	r17,4(sp)
   10af0:	dc000017 	ldw	r16,0(sp)
   10af4:	dec00304 	addi	sp,sp,12
   10af8:	f800283a 	ret

00010afc <udivmodsi4>:
   10afc:	29001b2e 	bgeu	r5,r4,10b6c <udivmodsi4+0x70>
   10b00:	28001a16 	blt	r5,zero,10b6c <udivmodsi4+0x70>
   10b04:	00800044 	movi	r2,1
   10b08:	0007883a 	mov	r3,zero
   10b0c:	01c007c4 	movi	r7,31
   10b10:	00000306 	br	10b20 <udivmodsi4+0x24>
   10b14:	19c01326 	beq	r3,r7,10b64 <udivmodsi4+0x68>
   10b18:	18c00044 	addi	r3,r3,1
   10b1c:	28000416 	blt	r5,zero,10b30 <udivmodsi4+0x34>
   10b20:	294b883a 	add	r5,r5,r5
   10b24:	1085883a 	add	r2,r2,r2
   10b28:	293ffa36 	bltu	r5,r4,10b14 <udivmodsi4+0x18>
   10b2c:	10000d26 	beq	r2,zero,10b64 <udivmodsi4+0x68>
   10b30:	0007883a 	mov	r3,zero
   10b34:	21400236 	bltu	r4,r5,10b40 <udivmodsi4+0x44>
   10b38:	2149c83a 	sub	r4,r4,r5
   10b3c:	1886b03a 	or	r3,r3,r2
   10b40:	1004d07a 	srli	r2,r2,1
   10b44:	280ad07a 	srli	r5,r5,1
   10b48:	103ffa1e 	bne	r2,zero,10b34 <udivmodsi4+0x38>
   10b4c:	30000226 	beq	r6,zero,10b58 <udivmodsi4+0x5c>
   10b50:	2005883a 	mov	r2,r4
   10b54:	f800283a 	ret
   10b58:	1809883a 	mov	r4,r3
   10b5c:	2005883a 	mov	r2,r4
   10b60:	f800283a 	ret
   10b64:	0007883a 	mov	r3,zero
   10b68:	003ff806 	br	10b4c <udivmodsi4+0x50>
   10b6c:	00800044 	movi	r2,1
   10b70:	0007883a 	mov	r3,zero
   10b74:	003fef06 	br	10b34 <udivmodsi4+0x38>

00010b78 <__divsi3>:
   10b78:	defffe04 	addi	sp,sp,-8
   10b7c:	dc000015 	stw	r16,0(sp)
   10b80:	dfc00115 	stw	ra,4(sp)
   10b84:	0021883a 	mov	r16,zero
   10b88:	20000c16 	blt	r4,zero,10bbc <__divsi3+0x44>
   10b8c:	000d883a 	mov	r6,zero
   10b90:	28000e16 	blt	r5,zero,10bcc <__divsi3+0x54>
   10b94:	0010afc0 	call	10afc <udivmodsi4>
   10b98:	1007883a 	mov	r3,r2
   10b9c:	8005003a 	cmpeq	r2,r16,zero
   10ba0:	1000011e 	bne	r2,zero,10ba8 <__divsi3+0x30>
   10ba4:	00c7c83a 	sub	r3,zero,r3
   10ba8:	1805883a 	mov	r2,r3
   10bac:	dfc00117 	ldw	ra,4(sp)
   10bb0:	dc000017 	ldw	r16,0(sp)
   10bb4:	dec00204 	addi	sp,sp,8
   10bb8:	f800283a 	ret
   10bbc:	0109c83a 	sub	r4,zero,r4
   10bc0:	04000044 	movi	r16,1
   10bc4:	000d883a 	mov	r6,zero
   10bc8:	283ff20e 	bge	r5,zero,10b94 <__divsi3+0x1c>
   10bcc:	014bc83a 	sub	r5,zero,r5
   10bd0:	8021003a 	cmpeq	r16,r16,zero
   10bd4:	003fef06 	br	10b94 <__divsi3+0x1c>

00010bd8 <__modsi3>:
   10bd8:	deffff04 	addi	sp,sp,-4
   10bdc:	dfc00015 	stw	ra,0(sp)
   10be0:	01800044 	movi	r6,1
   10be4:	2807883a 	mov	r3,r5
   10be8:	20000416 	blt	r4,zero,10bfc <__modsi3+0x24>
   10bec:	28000c16 	blt	r5,zero,10c20 <__modsi3+0x48>
   10bf0:	dfc00017 	ldw	ra,0(sp)
   10bf4:	dec00104 	addi	sp,sp,4
   10bf8:	0010afc1 	jmpi	10afc <udivmodsi4>
   10bfc:	0109c83a 	sub	r4,zero,r4
   10c00:	28000b16 	blt	r5,zero,10c30 <__modsi3+0x58>
   10c04:	180b883a 	mov	r5,r3
   10c08:	01800044 	movi	r6,1
   10c0c:	0010afc0 	call	10afc <udivmodsi4>
   10c10:	0085c83a 	sub	r2,zero,r2
   10c14:	dfc00017 	ldw	ra,0(sp)
   10c18:	dec00104 	addi	sp,sp,4
   10c1c:	f800283a 	ret
   10c20:	014bc83a 	sub	r5,zero,r5
   10c24:	dfc00017 	ldw	ra,0(sp)
   10c28:	dec00104 	addi	sp,sp,4
   10c2c:	0010afc1 	jmpi	10afc <udivmodsi4>
   10c30:	0147c83a 	sub	r3,zero,r5
   10c34:	003ff306 	br	10c04 <__modsi3+0x2c>

00010c38 <__udivsi3>:
   10c38:	000d883a 	mov	r6,zero
   10c3c:	0010afc1 	jmpi	10afc <udivmodsi4>

00010c40 <__umodsi3>:
   10c40:	01800044 	movi	r6,1
   10c44:	0010afc1 	jmpi	10afc <udivmodsi4>

00010c48 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10c48:	000530fa 	rdctl	r2,ienable
   10c4c:	00c00044 	movi	r3,1
   10c50:	1946983a 	sll	r3,r3,r5
   10c54:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   10c58:	1004c03a 	cmpne	r2,r2,zero
   10c5c:	f800283a 	ret

00010c60 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c60:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c64:	00bfff84 	movi	r2,-2
   10c68:	3084703a 	and	r2,r6,r2
   10c6c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10c70:	01000074 	movhi	r4,1
   10c74:	2106cd04 	addi	r4,r4,6964
   10c78:	00c00044 	movi	r3,1
   10c7c:	20800017 	ldw	r2,0(r4)
   10c80:	1946983a 	sll	r3,r3,r5
   10c84:	10c4b03a 	or	r2,r2,r3
   10c88:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c8c:	20800017 	ldw	r2,0(r4)
   10c90:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c94:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10c98:	0005883a 	mov	r2,zero
   10c9c:	f800283a 	ret

00010ca0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ca0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ca4:	00bfff84 	movi	r2,-2
   10ca8:	3084703a 	and	r2,r6,r2
   10cac:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10cb0:	01000074 	movhi	r4,1
   10cb4:	2106cd04 	addi	r4,r4,6964
   10cb8:	00ffff84 	movi	r3,-2
   10cbc:	20800017 	ldw	r2,0(r4)
   10cc0:	1946183a 	rol	r3,r3,r5
   10cc4:	10c4703a 	and	r2,r2,r3
   10cc8:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ccc:	20800017 	ldw	r2,0(r4)
   10cd0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cd4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10cd8:	0005883a 	mov	r2,zero
   10cdc:	f800283a 	ret

00010ce0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10ce0:	0010ce41 	jmpi	10ce4 <alt_iic_isr_register>

00010ce4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ce4:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10ce8:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10cec:	dfc00115 	stw	ra,4(sp)
   10cf0:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10cf4:	00fffa84 	movi	r3,-22
   10cf8:	11401016 	blt	r2,r5,10d3c <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cfc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d00:	00bfff84 	movi	r2,-2
   10d04:	8084703a 	and	r2,r16,r2
   10d08:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10d0c:	280490fa 	slli	r2,r5,3
   10d10:	00c00074 	movhi	r3,1
   10d14:	18c6d104 	addi	r3,r3,6980
   10d18:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
   10d1c:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10d20:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10d24:	30000226 	beq	r6,zero,10d30 <alt_iic_isr_register+0x4c>
   10d28:	0010c600 	call	10c60 <alt_ic_irq_enable>
   10d2c:	00000106 	br	10d34 <alt_iic_isr_register+0x50>
   10d30:	0010ca00 	call	10ca0 <alt_ic_irq_disable>
   10d34:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d38:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   10d3c:	1805883a 	mov	r2,r3
   10d40:	dfc00117 	ldw	ra,4(sp)
   10d44:	dc000017 	ldw	r16,0(sp)
   10d48:	dec00204 	addi	sp,sp,8
   10d4c:	f800283a 	ret

00010d50 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10d50:	2900051e 	bne	r5,r4,10d68 <alt_load_section+0x18>
   10d54:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   10d58:	20800017 	ldw	r2,0(r4)
   10d5c:	21000104 	addi	r4,r4,4
   10d60:	28800015 	stw	r2,0(r5)
   10d64:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10d68:	29bffb1e 	bne	r5,r6,10d58 <alt_load_section+0x8>
   10d6c:	f800283a 	ret

00010d70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d70:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10d74:	01000074 	movhi	r4,1
   10d78:	21064b04 	addi	r4,r4,6444
   10d7c:	01400074 	movhi	r5,1
   10d80:	2945ca04 	addi	r5,r5,5928
   10d84:	01800074 	movhi	r6,1
   10d88:	31864b04 	addi	r6,r6,6444
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d8c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10d90:	0010d500 	call	10d50 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10d94:	01000074 	movhi	r4,1
   10d98:	21000804 	addi	r4,r4,32
   10d9c:	01400074 	movhi	r5,1
   10da0:	29400804 	addi	r5,r5,32
   10da4:	01800074 	movhi	r6,1
   10da8:	31805004 	addi	r6,r6,320
   10dac:	0010d500 	call	10d50 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10db0:	01000074 	movhi	r4,1
   10db4:	2105c404 	addi	r4,r4,5904
   10db8:	01400074 	movhi	r5,1
   10dbc:	2945c404 	addi	r5,r5,5904
   10dc0:	01800074 	movhi	r6,1
   10dc4:	3185ca04 	addi	r6,r6,5928
   10dc8:	0010d500 	call	10d50 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10dcc:	00114f40 	call	114f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10dd0:	dfc00017 	ldw	ra,0(sp)
   10dd4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10dd8:	00116881 	jmpi	11688 <alt_icache_flush_all>

00010ddc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10ddc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10de0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10de4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10de8:	0010ebc0 	call	10ebc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10dec:	0010e800 	call	10e80 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10df0:	d1208d17 	ldw	r4,-32204(gp)
   10df4:	d1608e17 	ldw	r5,-32200(gp)
   10df8:	d1a08f17 	ldw	r6,-32196(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10dfc:	dfc00017 	ldw	ra,0(sp)
   10e00:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10e04:	00101c01 	jmpi	101c0 <main>

00010e08 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10e08:	deffff04 	addi	sp,sp,-4
   10e0c:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10e10:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10e14:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   10e18:	000f883a 	mov	r7,zero
   10e1c:	01000074 	movhi	r4,1
   10e20:	21064504 	addi	r4,r4,6420
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10e24:	18800526 	beq	r3,r2,10e3c <write+0x34>
   10e28:	00800084 	movi	r2,2
   10e2c:	1880061e 	bne	r3,r2,10e48 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10e30:	01000074 	movhi	r4,1
   10e34:	21064504 	addi	r4,r4,6420
   10e38:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
   10e3c:	dfc00017 	ldw	ra,0(sp)
   10e40:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10e44:	00114c01 	jmpi	114c0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10e48:	00800074 	movhi	r2,1
   10e4c:	10864a04 	addi	r2,r2,6440
   10e50:	10800017 	ldw	r2,0(r2)
   10e54:	00c00074 	movhi	r3,1
   10e58:	18c6cc04 	addi	r3,r3,6960
   10e5c:	10000226 	beq	r2,zero,10e68 <write+0x60>
   10e60:	103ee83a 	callr	r2
   10e64:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10e68:	00801444 	movi	r2,81
   10e6c:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
   10e70:	00bfffc4 	movi	r2,-1
   10e74:	dfc00017 	ldw	ra,0(sp)
   10e78:	dec00104 	addi	sp,sp,4
   10e7c:	f800283a 	ret

00010e80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10e80:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
   10e84:	00800044 	movi	r2,1
   10e88:	01000074 	movhi	r4,1
   10e8c:	21060a04 	addi	r4,r4,6184
   10e90:	01400074 	movhi	r5,1
   10e94:	29461104 	addi	r5,r5,6212
   10e98:	018000b4 	movhi	r6,2
   10e9c:	31844804 	addi	r6,r6,4384
   10ea0:	000f883a 	mov	r7,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ea4:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
   10ea8:	d8800015 	stw	r2,0(sp)
   10eac:	00111500 	call	11150 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
   10eb0:	dfc00117 	ldw	ra,4(sp)
   10eb4:	dec00204 	addi	sp,sp,8
   10eb8:	f800283a 	ret

00010ebc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ebc:	deffff04 	addi	sp,sp,-4
   10ec0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10ec4:	00116940 	call	11694 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10ec8:	00800044 	movi	r2,1
   10ecc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10ed0:	dfc00017 	ldw	ra,0(sp)
   10ed4:	dec00104 	addi	sp,sp,4
   10ed8:	f800283a 	ret

00010edc <alt_avalon_dma_prepare>:
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
   10edc:	22400617 	ldw	r9,24(r4)
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
   10ee0:	deffff04 	addi	sp,sp,-4
   10ee4:	dfc00015 	stw	ra,0(sp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   10ee8:	48800517 	ldw	r2,20(r9)
   10eec:	108003cc 	andi	r2,r2,15

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   10ef0:	3086703a 	and	r3,r6,r2
   10ef4:	2884703a 	and	r2,r5,r2
   10ef8:	10001a1e 	bne	r2,zero,10f64 <alt_avalon_dma_prepare+0x88>
   10efc:	1800191e 	bne	r3,zero,10f64 <alt_avalon_dma_prepare+0x88>
   10f00:	48800617 	ldw	r2,24(r9)
   10f04:	11801736 	bltu	r2,r6,10f64 <alt_avalon_dma_prepare+0x88>
  {
    return -EINVAL;
  }

  start = priv->rx_start;
  end   = priv->rx_end;
   10f08:	48800417 	ldw	r2,16(r9)
     (len > priv->max_length))
  {
    return -EINVAL;
  }

  start = priv->rx_start;
   10f0c:	49000317 	ldw	r4,12(r9)
  end   = priv->rx_end;
  slot  = &priv->rx_buf[end];

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;

  if (next == start)
   10f10:	02fff904 	movi	r11,-28
    return -EINVAL;
  }

  start = priv->rx_start;
  end   = priv->rx_end;
  slot  = &priv->rx_buf[end];
   10f14:	1006913a 	slli	r3,r2,4

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   10f18:	10800044 	addi	r2,r2,1
   10f1c:	128000cc 	andi	r10,r2,3
    return -EINVAL;
  }

  start = priv->rx_start;
  end   = priv->rx_end;
  slot  = &priv->rx_buf[end];
   10f20:	18c01904 	addi	r3,r3,100
   10f24:	48d1883a 	add	r8,r9,r3

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;

  if (next == start)
   10f28:	51000f26 	beq	r10,r4,10f68 <alt_avalon_dma_prepare+0x8c>
  }

  slot->data   = data;
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
   10f2c:	d8800117 	ldw	r2,4(sp)

  priv->rx_end = next;

  if (!priv->active)
   10f30:	48c00817 	ldw	r3,32(r9)
  {
    return -ENOSPC;
  }

  slot->data   = data;
  slot->len    = len;
   10f34:	41800115 	stw	r6,4(r8)

  priv->rx_end = next;

  if (!priv->active)
  {
    priv->launch (priv);
   10f38:	4809883a 	mov	r4,r9
  slot->done   = done;
  slot->handle = handle;

  priv->rx_end = next;

  if (!priv->active)
   10f3c:	0017883a 	mov	r11,zero
  }

  slot->data   = data;
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
   10f40:	40800315 	stw	r2,12(r8)
  if (next == start)
  {
    return -ENOSPC;
  }

  slot->data   = data;
   10f44:	41400015 	stw	r5,0(r8)
  slot->len    = len;
  slot->done   = done;
   10f48:	41c00215 	stw	r7,8(r8)
  slot->handle = handle;

  priv->rx_end = next;
   10f4c:	4a800415 	stw	r10,16(r9)

  if (!priv->active)
   10f50:	1800051e 	bne	r3,zero,10f68 <alt_avalon_dma_prepare+0x8c>
  {
    priv->launch (priv);
   10f54:	48800717 	ldw	r2,28(r9)
   10f58:	103ee83a 	callr	r2
   10f5c:	0017883a 	mov	r11,zero
   10f60:	00000106 	br	10f68 <alt_avalon_dma_prepare+0x8c>
   10f64:	02fffa84 	movi	r11,-22
  }

  return 0;
}
   10f68:	5805883a 	mov	r2,r11
   10f6c:	dfc00017 	ldw	ra,0(sp)
   10f70:	dec00104 	addi	sp,sp,4
   10f74:	f800283a 	ret

00010f78 <alt_avalon_dma_space>:
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   10f78:	20800617 	ldw	r2,24(r4)

  start = priv->tx_start;
  end   = priv->tx_end;
   10f7c:	10c00217 	ldw	r3,8(r2)
  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;

  start = priv->tx_start;
   10f80:	10800117 	ldw	r2,4(r2)
   10f84:	10c9c83a 	sub	r4,r2,r3
  end   = priv->tx_end;

  return (start > end) ? start - end - 1 :
   10f88:	217fffc4 	addi	r5,r4,-1
   10f8c:	18800136 	bltu	r3,r2,10f94 <alt_avalon_dma_space+0x1c>
   10f90:	214000c4 	addi	r5,r4,3
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
   10f94:	2805883a 	mov	r2,r5
   10f98:	f800283a 	ret

00010f9c <alt_avalon_dma_send>:
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   10f9c:	22400617 	ldw	r9,24(r4)
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
   10fa0:	deffff04 	addi	sp,sp,-4
   10fa4:	dfc00015 	stw	ra,0(sp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   10fa8:	48800517 	ldw	r2,20(r9)
   10fac:	108003cc 	andi	r2,r2,15

  if ((((alt_u32) from) & align_mask) ||
   10fb0:	3086703a 	and	r3,r6,r2
   10fb4:	2884703a 	and	r2,r5,r2
   10fb8:	10001a1e 	bne	r2,zero,11024 <alt_avalon_dma_send+0x88>
   10fbc:	1800191e 	bne	r3,zero,11024 <alt_avalon_dma_send+0x88>
   10fc0:	48800617 	ldw	r2,24(r9)
   10fc4:	11801736 	bltu	r2,r6,11024 <alt_avalon_dma_send+0x88>
  {
    return -EINVAL;
  }

  start = priv->tx_start;
  end   = priv->tx_end;
   10fc8:	48800217 	ldw	r2,8(r9)
        (len > priv->max_length))
  {
    return -EINVAL;
  }

  start = priv->tx_start;
   10fcc:	49000117 	ldw	r4,4(r9)
  end   = priv->tx_end;
  slot  = &priv->tx_buf[end];
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;

  if (next == start)
   10fd0:	02fff904 	movi	r11,-28
    return -EINVAL;
  }

  start = priv->tx_start;
  end   = priv->tx_end;
  slot  = &priv->tx_buf[end];
   10fd4:	1006913a 	slli	r3,r2,4
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   10fd8:	10800044 	addi	r2,r2,1
   10fdc:	128000cc 	andi	r10,r2,3
    return -EINVAL;
  }

  start = priv->tx_start;
  end   = priv->tx_end;
  slot  = &priv->tx_buf[end];
   10fe0:	18c00904 	addi	r3,r3,36
   10fe4:	48d1883a 	add	r8,r9,r3
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;

  if (next == start)
   10fe8:	51000f26 	beq	r10,r4,11028 <alt_avalon_dma_send+0x8c>
  /* Fill in the descriptor */

  slot->from   = from;
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
   10fec:	d8800117 	ldw	r2,4(sp)

  priv->tx_end = next;

  if (!priv->active)
   10ff0:	48c00817 	ldw	r3,32(r9)
  }

  /* Fill in the descriptor */

  slot->from   = from;
  slot->len    = len;
   10ff4:	41800115 	stw	r6,4(r8)

  priv->tx_end = next;

  if (!priv->active)
  {
    priv->launch (priv);
   10ff8:	4809883a 	mov	r4,r9
  slot->done   = done;
  slot->handle = handle;

  priv->tx_end = next;

  if (!priv->active)
   10ffc:	0017883a 	mov	r11,zero
  /* Fill in the descriptor */

  slot->from   = from;
  slot->len    = len;
  slot->done   = done;
  slot->handle = handle;
   11000:	40800315 	stw	r2,12(r8)
    return -ENOSPC;
  }

  /* Fill in the descriptor */

  slot->from   = from;
   11004:	41400015 	stw	r5,0(r8)
  slot->len    = len;
  slot->done   = done;
   11008:	41c00215 	stw	r7,8(r8)
  slot->handle = handle;

  priv->tx_end = next;
   1100c:	4a800215 	stw	r10,8(r9)

  if (!priv->active)
   11010:	1800051e 	bne	r3,zero,11028 <alt_avalon_dma_send+0x8c>
  {
    priv->launch (priv);
   11014:	48800717 	ldw	r2,28(r9)
   11018:	103ee83a 	callr	r2
   1101c:	0017883a 	mov	r11,zero
   11020:	00000106 	br	11028 <alt_avalon_dma_send+0x8c>
   11024:	02fffa84 	movi	r11,-22
  }

  return 0;
}
   11028:	5805883a 	mov	r2,r11
   1102c:	dfc00017 	ldw	ra,0(sp)
   11030:	dec00104 	addi	sp,sp,4
   11034:	f800283a 	ret

00011038 <alt_avalon_dma_launch_rxonly>:

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
   11038:	20c00317 	ldw	r3,12(r4)
   1103c:	20800417 	ldw	r2,16(r4)
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
   11040:	200b883a 	mov	r5,r4
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
   11044:	18800d26 	beq	r3,r2,1107c <alt_avalon_dma_launch_rxonly+0x44>
  {
    priv->active = 1;
    rx_slot      = &priv->rx_buf[priv->rx_start];
   11048:	20800317 	ldw	r2,12(r4)
{
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  {
    priv->active = 1;
   1104c:	00c00044 	movi	r3,1
   11050:	28c00815 	stw	r3,32(r5)
    rx_slot      = &priv->rx_buf[priv->rx_start];
   11054:	1004913a 	slli	r2,r2,4

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   11058:	21000017 	ldw	r4,0(r4)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  {
    priv->active = 1;
    rx_slot      = &priv->rx_buf[priv->rx_start];
   1105c:	10801904 	addi	r2,r2,100
   11060:	2885883a 	add	r2,r5,r2

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   11064:	10c00017 	ldw	r3,0(r2)
   11068:	20c00235 	stwio	r3,8(r4)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
   1106c:	28c00017 	ldw	r3,0(r5)
   11070:	10800117 	ldw	r2,4(r2)
   11074:	18800335 	stwio	r2,12(r3)
   11078:	f800283a 	ret
  }
  else
  {
    priv->active = 0;
   1107c:	20000815 	stw	zero,32(r4)
   11080:	f800283a 	ret

00011084 <alt_avalon_dma_launch_txonly>:

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
   11084:	20c00117 	ldw	r3,4(r4)
   11088:	20800217 	ldw	r2,8(r4)
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
   1108c:	200b883a 	mov	r5,r4
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
   11090:	18800d26 	beq	r3,r2,110c8 <alt_avalon_dma_launch_txonly+0x44>
  {
    priv->active = 1;
    tx_slot      = &priv->tx_buf[priv->tx_start];
   11094:	20800117 	ldw	r2,4(r4)
{
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  {
    priv->active = 1;
   11098:	00c00044 	movi	r3,1
   1109c:	28c00815 	stw	r3,32(r5)
    tx_slot      = &priv->tx_buf[priv->tx_start];
   110a0:	1004913a 	slli	r2,r2,4

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   110a4:	21000017 	ldw	r4,0(r4)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  {
    priv->active = 1;
    tx_slot      = &priv->tx_buf[priv->tx_start];
   110a8:	10800904 	addi	r2,r2,36
   110ac:	2885883a 	add	r2,r5,r2

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   110b0:	10c00017 	ldw	r3,0(r2)
   110b4:	20c00135 	stwio	r3,4(r4)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
   110b8:	28c00017 	ldw	r3,0(r5)
   110bc:	10800117 	ldw	r2,4(r2)
   110c0:	18800335 	stwio	r2,12(r3)
   110c4:	f800283a 	ret
  }
  else
  {
    priv->active = 0;
   110c8:	20000815 	stw	zero,32(r4)
   110cc:	f800283a 	ret

000110d0 <alt_avalon_dma_launch_bidir>:
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   110d0:	20c00117 	ldw	r3,4(r4)
   110d4:	20800217 	ldw	r2,8(r4)
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
   110d8:	200d883a 	mov	r6,r4
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   110dc:	18801a26 	beq	r3,r2,11148 <alt_avalon_dma_launch_bidir+0x78>
   110e0:	20c00317 	ldw	r3,12(r4)
   110e4:	20800417 	ldw	r2,16(r4)
   110e8:	18801726 	beq	r3,r2,11148 <alt_avalon_dma_launch_bidir+0x78>
  {
    priv->active = 1;

    tx_slot = &priv->tx_buf[priv->tx_start];
   110ec:	21000117 	ldw	r4,4(r4)
    rx_slot = &priv->rx_buf[priv->rx_start];
   110f0:	30c00317 	ldw	r3,12(r6)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  {
    priv->active = 1;
   110f4:	00800044 	movi	r2,1

    tx_slot = &priv->tx_buf[priv->tx_start];
   110f8:	2008913a 	slli	r4,r4,4
    rx_slot = &priv->rx_buf[priv->rx_start];
   110fc:	1806913a 	slli	r3,r3,4
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  {
    priv->active = 1;
   11100:	30800815 	stw	r2,32(r6)

    tx_slot = &priv->tx_buf[priv->tx_start];
   11104:	21000904 	addi	r4,r4,36
   11108:	3109883a 	add	r4,r6,r4
    rx_slot = &priv->rx_buf[priv->rx_start];

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   1110c:	31400017 	ldw	r5,0(r6)
   11110:	20800017 	ldw	r2,0(r4)
  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  {
    priv->active = 1;

    tx_slot = &priv->tx_buf[priv->tx_start];
    rx_slot = &priv->rx_buf[priv->rx_start];
   11114:	18c01904 	addi	r3,r3,100
   11118:	30c7883a 	add	r3,r6,r3

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   1111c:	28800135 	stwio	r2,4(r5)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   11120:	31400017 	ldw	r5,0(r6)
   11124:	18800017 	ldw	r2,0(r3)
   11128:	28800235 	stwio	r2,8(r5)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
   1112c:	19c00117 	ldw	r7,4(r3)
   11130:	20800117 	ldw	r2,4(r4)
   11134:	30c00017 	ldw	r3,0(r6)
   11138:	3880012e 	bgeu	r7,r2,11140 <alt_avalon_dma_launch_bidir+0x70>
   1113c:	3805883a 	mov	r2,r7
   11140:	18800335 	stwio	r2,12(r3)
   11144:	f800283a 	ret
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
   11148:	30000815 	stw	zero,32(r6)
   1114c:	f800283a 	ret

00011150 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
   11150:	defffc04 	addi	sp,sp,-16
   11154:	da000417 	ldw	r8,16(sp)
   11158:	dc400215 	stw	r17,8(sp)
   1115c:	dc000115 	stw	r16,4(sp)
   11160:	2823883a 	mov	r17,r5
   11164:	2021883a 	mov	r16,r4
   11168:	3807883a 	mov	r3,r7

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   1116c:	00840004 	movi	r2,4096
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
   11170:	dfc00315 	stw	ra,12(sp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   11174:	30800635 	stwio	r2,24(r6)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   11178:	30800635 	stwio	r2,24(r6)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
   1117c:	00803f04 	movi	r2,252
   11180:	30800635 	stwio	r2,24(r6)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
   11184:	30000035 	stwio	zero,0(r6)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
   11188:	21c00617 	ldw	r7,24(r4)
   1118c:	400b883a 	mov	r5,r8
   11190:	1809883a 	mov	r4,r3
   11194:	01800074 	movhi	r6,1
   11198:	3184f104 	addi	r6,r6,5060
   1119c:	d8000015 	stw	zero,0(sp)
   111a0:	0010ce00 	call	10ce0 <alt_ic_isr_register>

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
   111a4:	8009883a 	mov	r4,r16
   111a8:	01400074 	movhi	r5,1
   111ac:	29464804 	addi	r5,r5,6432
   111b0:	10000916 	blt	r2,zero,111d8 <alt_avalon_dma_init+0x88>
   111b4:	00114f80 	call	114f8 <alt_dev_llist_insert>

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
   111b8:	8809883a 	mov	r4,r17
   111bc:	01400074 	movhi	r5,1
   111c0:	29464604 	addi	r5,r5,6424
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
    alt_dma_rxchan_reg (&rx->dev);
  }
}
   111c4:	dfc00317 	ldw	ra,12(sp)
   111c8:	dc400217 	ldw	r17,8(sp)
   111cc:	dc000117 	ldw	r16,4(sp)
   111d0:	dec00404 	addi	sp,sp,16
   111d4:	00114f81 	jmpi	114f8 <alt_dev_llist_insert>
   111d8:	dfc00317 	ldw	ra,12(sp)
   111dc:	dc400217 	ldw	r17,8(sp)
   111e0:	dc000117 	ldw	r16,4(sp)
   111e4:	dec00404 	addi	sp,sp,16
   111e8:	f800283a 	ret

000111ec <alt_avalon_dma_ioctl>:
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   111ec:	20c00117 	ldw	r3,4(r4)
   111f0:	20800217 	ldw	r2,8(r4)
   111f4:	1880621e 	bne	r3,r2,11380 <alt_avalon_dma_ioctl+0x194>
   111f8:	20c00317 	ldw	r3,12(r4)
   111fc:	20800417 	ldw	r2,16(r4)
   11200:	18805f1e 	bne	r3,r2,11380 <alt_avalon_dma_ioctl+0x194>
   11204:	20800017 	ldw	r2,0(r4)
   11208:	10800337 	ldwio	r2,12(r2)
   1120c:	10005c1e 	bne	r2,zero,11380 <alt_avalon_dma_ioctl+0x194>
    return -EIO;
  }

  /* Now process the ioctl. */

  switch (req)
   11210:	297fffc4 	addi	r5,r5,-1
   11214:	00800204 	movi	r2,8
   11218:	11401136 	bltu	r2,r5,11260 <alt_avalon_dma_ioctl+0x74>
   1121c:	2945883a 	add	r2,r5,r5
   11220:	00c00074 	movhi	r3,1
   11224:	18c48f04 	addi	r3,r3,4668
   11228:	1085883a 	add	r2,r2,r2
   1122c:	10c5883a 	add	r2,r2,r3
   11230:	10800017 	ldw	r2,0(r2)
   11234:	20c00517 	ldw	r3,20(r4)
   11238:	1000683a 	jmp	r2
   1123c:	00011268 	cmpgeui	zero,zero,1097
   11240:	00011290 	cmplti	zero,zero,1098
   11244:	00011298 	cmpnei	zero,zero,1098
   11248:	000112c0 	call	112c <__alt_mem_onchip_memory2_0-0xeed4>
   1124c:	000112dc 	xori	zero,zero,1099
   11250:	000112e8 	cmpgeui	zero,zero,1099
   11254:	000112f8 	rdprs	zero,zero,1099
   11258:	00011308 	cmpgei	zero,zero,1100
   1125c:	00011318 	cmpnei	zero,zero,1100
   11260:	00bff9c4 	movi	r2,-25
   11264:	f800283a 	ret
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
   11268:	1880100c 	andi	r2,r3,64
   1126c:	1000441e 	bne	r2,zero,11380 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
   11270:	20800017 	ldw	r2,0(r4)
   11274:	11800135 	stwio	r6,4(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
   11278:	20800517 	ldw	r2,20(r4)
      priv->launch = alt_avalon_dma_launch_rxonly;
   1127c:	00c00074 	movhi	r3,1
   11280:	18c40e04 	addi	r3,r3,4152
   11284:	20c00715 	stw	r3,28(r4)
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
   11288:	10800814 	ori	r2,r2,32
   1128c:	00002506 	br	11324 <alt_avalon_dma_ioctl+0x138>
    {
      status = -EIO;
    }
    break;
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
   11290:	00bff7c4 	movi	r2,-33
   11294:	00000b06 	br	112c4 <alt_avalon_dma_ioctl+0xd8>
    priv->launch = alt_avalon_dma_launch_bidir;
    break;
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
   11298:	1880080c 	andi	r2,r3,32
   1129c:	1000381e 	bne	r2,zero,11380 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
   112a0:	20800017 	ldw	r2,0(r4)
   112a4:	11800235 	stwio	r6,8(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
   112a8:	20800517 	ldw	r2,20(r4)
      priv->launch = alt_avalon_dma_launch_txonly;
   112ac:	00c00074 	movhi	r3,1
   112b0:	18c42104 	addi	r3,r3,4228
   112b4:	20c00715 	stw	r3,28(r4)
    break;
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
   112b8:	10801014 	ori	r2,r2,64
   112bc:	00001906 	br	11324 <alt_avalon_dma_ioctl+0x138>
    {
      status = -EIO;
    }
    break;
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
   112c0:	00bfefc4 	movi	r2,-65
   112c4:	1884703a 	and	r2,r3,r2
   112c8:	20800515 	stw	r2,20(r4)
    priv->launch = alt_avalon_dma_launch_bidir;
   112cc:	00800074 	movhi	r2,1
   112d0:	10843404 	addi	r2,r2,4304
   112d4:	20800715 	stw	r2,28(r4)
   112d8:	00002b06 	br	11388 <alt_avalon_dma_ioctl+0x19c>
    break;
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   112dc:	00bffc04 	movi	r2,-16
   112e0:	1884703a 	and	r2,r3,r2
   112e4:	00000f06 	br	11324 <alt_avalon_dma_ioctl+0x138>
      ALT_AVALON_DMA_MODE_8;
    break;
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   112e8:	00bffc04 	movi	r2,-16
   112ec:	1884703a 	and	r2,r3,r2
   112f0:	10800054 	ori	r2,r2,1
   112f4:	00000b06 	br	11324 <alt_avalon_dma_ioctl+0x138>
      ALT_AVALON_DMA_MODE_16;
    break;
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   112f8:	00bffc04 	movi	r2,-16
   112fc:	1884703a 	and	r2,r3,r2
   11300:	108000d4 	ori	r2,r2,3
   11304:	00000706 	br	11324 <alt_avalon_dma_ioctl+0x138>
      ALT_AVALON_DMA_MODE_32;
    break;
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   11308:	00bffc04 	movi	r2,-16
   1130c:	1884703a 	and	r2,r3,r2
   11310:	108001d4 	ori	r2,r2,7
   11314:	00000306 	br	11324 <alt_avalon_dma_ioctl+0x138>
      ALT_AVALON_DMA_MODE_64;
    break;
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   11318:	00bffc04 	movi	r2,-16
   1131c:	1884703a 	and	r2,r3,r2
   11320:	108003d4 	ori	r2,r2,15
   11324:	20800515 	stw	r2,20(r4)
   11328:	00001706 	br	11388 <alt_avalon_dma_ioctl+0x19c>
      ALT_AVALON_DMA_MODE_128;
    break;
   1132c:	100b883a 	mov	r5,r2
   11330:	00000506 	br	11348 <alt_avalon_dma_ioctl+0x15c>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
       break;
   11334:	01400084 	movi	r5,2
   11338:	00000306 	br	11348 <alt_avalon_dma_ioctl+0x15c>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
       break;
   1133c:	01400104 	movi	r5,4
   11340:	00000106 	br	11348 <alt_avalon_dma_ioctl+0x15c>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
       break;
   11344:	01410004 	movi	r5,1024
       break;
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
   11348:	3080080c 	andi	r2,r6,32
   1134c:	10000326 	beq	r2,zero,1135c <alt_avalon_dma_ioctl+0x170>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   11350:	20c00017 	ldw	r3,0(r4)
   11354:	28807e14 	ori	r2,r5,504
   11358:	00000606 	br	11374 <alt_avalon_dma_ioctl+0x188>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
   1135c:	3080100c 	andi	r2,r6,64
   11360:	20c00017 	ldw	r3,0(r4)
   11364:	10000226 	beq	r2,zero,11370 <alt_avalon_dma_ioctl+0x184>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   11368:	2880be14 	ori	r2,r5,760
   1136c:	00000106 	br	11374 <alt_avalon_dma_ioctl+0x188>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   11370:	28803e14 	ori	r2,r5,248
   11374:	18800635 	stwio	r2,24(r3)
   11378:	0005883a 	mov	r2,zero
   1137c:	f800283a 	ret
   11380:	00bffec4 	movi	r2,-5
   11384:	f800283a 	ret
    status = -ENOTTY;
  }

  if (!status)
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
   11388:	21800517 	ldw	r6,20(r4)
   1138c:	00800044 	movi	r2,1
   11390:	30c003cc 	andi	r3,r6,15
   11394:	18bfe726 	beq	r3,r2,11334 <alt_avalon_dma_ioctl+0x148>
   11398:	18bfe436 	bltu	r3,r2,1132c <alt_avalon_dma_ioctl+0x140>
   1139c:	008000c4 	movi	r2,3
   113a0:	18bfe626 	beq	r3,r2,1133c <alt_avalon_dma_ioctl+0x150>
   113a4:	008001c4 	movi	r2,7
   113a8:	18bfe626 	beq	r3,r2,11344 <alt_avalon_dma_ioctl+0x158>
   113ac:	01420004 	movi	r5,2048
   113b0:	003fe506 	br	11348 <alt_avalon_dma_ioctl+0x15c>

000113b4 <alt_avalon_dma_rx_ioctl>:

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
   113b4:	21000617 	ldw	r4,24(r4)
   113b8:	00111ec1 	jmpi	111ec <alt_avalon_dma_ioctl>

000113bc <alt_avalon_dma_tx_ioctl>:

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
   113bc:	21000617 	ldw	r4,24(r4)
   113c0:	00111ec1 	jmpi	111ec <alt_avalon_dma_ioctl>

000113c4 <alt_avalon_dma_irq>:
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
   113c4:	20c00517 	ldw	r3,20(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   113c8:	defffa04 	addi	sp,sp,-24
   113cc:	dc000015 	stw	r16,0(sp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
   113d0:	1880080c 	andi	r2,r3,32
  tx_slot = &priv->tx_buf[tx_start];
  rx_slot = &priv->rx_buf[rx_start];

  /* Increment the descriptors */

  if (!stream_tx)
   113d4:	1020c03a 	cmpne	r16,r2,zero
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   113d8:	dd000415 	stw	r20,16(sp)
   113dc:	dcc00315 	stw	r19,12(sp)
   113e0:	dc800215 	stw	r18,8(sp)
   113e4:	dc400115 	stw	r17,4(sp)
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;

  tx_start = priv->tx_start;
   113e8:	24800117 	ldw	r18,4(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   113ec:	dfc00515 	stw	ra,20(sp)
   113f0:	2023883a 	mov	r17,r4

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;

  tx_start = priv->tx_start;
  rx_start = priv->rx_start;
   113f4:	25000317 	ldw	r20,12(r4)
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
   113f8:	1cc0100c 	andi	r19,r3,64
  tx_slot = &priv->tx_buf[tx_start];
  rx_slot = &priv->rx_buf[rx_start];

  /* Increment the descriptors */

  if (!stream_tx)
   113fc:	8000031e 	bne	r16,zero,1140c <alt_avalon_dma_irq+0x48>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   11400:	90800044 	addi	r2,r18,1
   11404:	108000cc 	andi	r2,r2,3
   11408:	20800115 	stw	r2,4(r4)
  }
  if (!stream_rx)
   1140c:	9800031e 	bne	r19,zero,1141c <alt_avalon_dma_irq+0x58>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   11410:	a0800044 	addi	r2,r20,1
   11414:	108000cc 	andi	r2,r2,3
   11418:	88800315 	stw	r2,12(r17)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
   1141c:	88800017 	ldw	r2,0(r17)
   11420:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
   11424:	88800017 	ldw	r2,0(r17)
   11428:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
   1142c:	88800717 	ldw	r2,28(r17)
   11430:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
   11434:	80000c1e 	bne	r16,zero,11468 <alt_avalon_dma_irq+0xa4>
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;

  tx_start = priv->tx_start;
  rx_start = priv->rx_start;

  tx_slot = &priv->tx_buf[tx_start];
   11438:	9004913a 	slli	r2,r18,4
   1143c:	10800904 	addi	r2,r2,36
   11440:	8887883a 	add	r3,r17,r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
   11444:	19400217 	ldw	r5,8(r3)
   11448:	28000726 	beq	r5,zero,11468 <alt_avalon_dma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1144c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11450:	00bfff84 	movi	r2,-2
   11454:	8084703a 	and	r2,r16,r2
   11458:	1001703a 	wrctl	status,r2
  {
    cpu_sr = alt_irq_disable_all();
    tx_slot->done (tx_slot->handle);
   1145c:	19000317 	ldw	r4,12(r3)
   11460:	283ee83a 	callr	r5
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11464:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
   11468:	98000d1e 	bne	r19,zero,114a0 <alt_avalon_dma_irq+0xdc>

  tx_start = priv->tx_start;
  rx_start = priv->rx_start;

  tx_slot = &priv->tx_buf[tx_start];
  rx_slot = &priv->rx_buf[rx_start];
   1146c:	a004913a 	slli	r2,r20,4
   11470:	10801904 	addi	r2,r2,100
   11474:	8889883a 	add	r4,r17,r2
    cpu_sr = alt_irq_disable_all();
    tx_slot->done (tx_slot->handle);
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
   11478:	20c00217 	ldw	r3,8(r4)
   1147c:	18000826 	beq	r3,zero,114a0 <alt_avalon_dma_irq+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11480:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11484:	00bfff84 	movi	r2,-2
   11488:	8084703a 	and	r2,r16,r2
   1148c:	1001703a 	wrctl	status,r2
  {
    cpu_sr = alt_irq_disable_all();
    rx_slot->done (rx_slot->handle, rx_slot->data);
   11490:	21400017 	ldw	r5,0(r4)
   11494:	21000317 	ldw	r4,12(r4)
   11498:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1149c:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
   114a0:	dfc00517 	ldw	ra,20(sp)
   114a4:	dd000417 	ldw	r20,16(sp)
   114a8:	dcc00317 	ldw	r19,12(sp)
   114ac:	dc800217 	ldw	r18,8(sp)
   114b0:	dc400117 	ldw	r17,4(sp)
   114b4:	dc000017 	ldw	r16,0(sp)
   114b8:	dec00604 	addi	sp,sp,24
   114bc:	f800283a 	ret

000114c0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   114c0:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
   114c4:	298f883a 	add	r7,r5,r6
   114c8:	20c00104 	addi	r3,r4,4
   114cc:	00000606 	br	114e8 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   114d0:	18800037 	ldwio	r2,0(r3)
   114d4:	10bfffec 	andhi	r2,r2,65535
   114d8:	10000326 	beq	r2,zero,114e8 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   114dc:	28800007 	ldb	r2,0(r5)
   114e0:	29400044 	addi	r5,r5,1
   114e4:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   114e8:	29fff936 	bltu	r5,r7,114d0 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   114ec:	3005883a 	mov	r2,r6
   114f0:	f800283a 	ret

000114f4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   114f4:	f800283a 	ret

000114f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   114f8:	deffff04 	addi	sp,sp,-4
   114fc:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11500:	20000326 	beq	r4,zero,11510 <alt_dev_llist_insert+0x18>
   11504:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
   11508:	000d883a 	mov	r6,zero
   1150c:	10000c1e 	bne	r2,zero,11540 <alt_dev_llist_insert+0x48>
   11510:	00800074 	movhi	r2,1
   11514:	10864a04 	addi	r2,r2,6440
   11518:	10800017 	ldw	r2,0(r2)
   1151c:	00c00074 	movhi	r3,1
   11520:	18c6cc04 	addi	r3,r3,6960
   11524:	10000226 	beq	r2,zero,11530 <alt_dev_llist_insert+0x38>
   11528:	103ee83a 	callr	r2
   1152c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   11530:	00800584 	movi	r2,22
   11534:	01bffa84 	movi	r6,-22
   11538:	18800015 	stw	r2,0(r3)
   1153c:	00000606 	br	11558 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11540:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11544:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11548:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   1154c:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
   11550:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   11554:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11558:	3005883a 	mov	r2,r6
   1155c:	dfc00017 	ldw	ra,0(sp)
   11560:	dec00104 	addi	sp,sp,4
   11564:	f800283a 	ret

00011568 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
   11568:	defffe04 	addi	sp,sp,-8
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
   1156c:	d1600504 	addi	r5,gp,-32748
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
   11570:	dc000015 	stw	r16,0(sp)
   11574:	dfc00115 	stw	ra,4(sp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
   11578:	00116180 	call	11618 <alt_find_dev>
   1157c:	1021883a 	mov	r16,r2

  if (!dev)
   11580:	10000a1e 	bne	r2,zero,115ac <alt_dma_rxchan_open+0x44>
   11584:	00800074 	movhi	r2,1
   11588:	10864a04 	addi	r2,r2,6440
   1158c:	10800017 	ldw	r2,0(r2)
   11590:	00c00074 	movhi	r3,1
   11594:	18c6cc04 	addi	r3,r3,6960
   11598:	10000226 	beq	r2,zero,115a4 <alt_dma_rxchan_open+0x3c>
   1159c:	103ee83a 	callr	r2
   115a0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = ENODEV;
   115a4:	008004c4 	movi	r2,19
   115a8:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
   115ac:	8005883a 	mov	r2,r16
   115b0:	dfc00117 	ldw	ra,4(sp)
   115b4:	dc000017 	ldw	r16,0(sp)
   115b8:	dec00204 	addi	sp,sp,8
   115bc:	f800283a 	ret

000115c0 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
   115c0:	defffe04 	addi	sp,sp,-8
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
   115c4:	d1600704 	addi	r5,gp,-32740
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
   115c8:	dc000015 	stw	r16,0(sp)
   115cc:	dfc00115 	stw	ra,4(sp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
   115d0:	00116180 	call	11618 <alt_find_dev>
   115d4:	1021883a 	mov	r16,r2

  if (!dev)
   115d8:	10000a1e 	bne	r2,zero,11604 <alt_dma_txchan_open+0x44>
   115dc:	00800074 	movhi	r2,1
   115e0:	10864a04 	addi	r2,r2,6440
   115e4:	10800017 	ldw	r2,0(r2)
   115e8:	00c00074 	movhi	r3,1
   115ec:	18c6cc04 	addi	r3,r3,6960
   115f0:	10000226 	beq	r2,zero,115fc <alt_dma_txchan_open+0x3c>
   115f4:	103ee83a 	callr	r2
   115f8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = ENODEV;
   115fc:	008004c4 	movi	r2,19
   11600:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
   11604:	8005883a 	mov	r2,r16
   11608:	dfc00117 	ldw	ra,4(sp)
   1160c:	dc000017 	ldw	r16,0(sp)
   11610:	dec00204 	addi	sp,sp,8
   11614:	f800283a 	ret

00011618 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11618:	defffb04 	addi	sp,sp,-20
   1161c:	dcc00315 	stw	r19,12(sp)
   11620:	dc800215 	stw	r18,8(sp)
   11624:	dc400115 	stw	r17,4(sp)
   11628:	dc000015 	stw	r16,0(sp)
   1162c:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   11630:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11634:	2823883a 	mov	r17,r5
   11638:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   1163c:	0010a640 	call	10a64 <strlen>
   11640:	14800044 	addi	r18,r2,1
   11644:	00000406 	br	11658 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11648:	81000217 	ldw	r4,8(r16)
   1164c:	00116d40 	call	116d4 <memcmp>
   11650:	10000526 	beq	r2,zero,11668 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11654:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11658:	980b883a 	mov	r5,r19
   1165c:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11660:	847ff91e 	bne	r16,r17,11648 <alt_find_dev+0x30>
   11664:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
   11668:	8005883a 	mov	r2,r16
   1166c:	dfc00417 	ldw	ra,16(sp)
   11670:	dcc00317 	ldw	r19,12(sp)
   11674:	dc800217 	ldw	r18,8(sp)
   11678:	dc400117 	ldw	r17,4(sp)
   1167c:	dc000017 	ldw	r16,0(sp)
   11680:	dec00504 	addi	sp,sp,20
   11684:	f800283a 	ret

00011688 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11688:	0009883a 	mov	r4,zero
   1168c:	01440004 	movi	r5,4096
   11690:	001169c1 	jmpi	1169c <alt_icache_flush>

00011694 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11694:	000170fa 	wrctl	ienable,zero
}
   11698:	f800283a 	ret

0001169c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   1169c:	00840004 	movi	r2,4096
   116a0:	2007883a 	mov	r3,r4
   116a4:	1140012e 	bgeu	r2,r5,116ac <alt_icache_flush+0x10>
   116a8:	100b883a 	mov	r5,r2
   116ac:	194b883a 	add	r5,r3,r5
   116b0:	00000206 	br	116bc <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   116b4:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   116b8:	18c00804 	addi	r3,r3,32
   116bc:	197ffd36 	bltu	r3,r5,116b4 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   116c0:	208007cc 	andi	r2,r4,31
   116c4:	10000126 	beq	r2,zero,116cc <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   116c8:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   116cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   116d0:	f800283a 	ret

000116d4 <memcmp>:
   116d4:	31ffffc4 	addi	r7,r6,-1
   116d8:	3000061e 	bne	r6,zero,116f4 <memcmp+0x20>
   116dc:	00000a06 	br	11708 <memcmp+0x34>
   116e0:	39ffffc4 	addi	r7,r7,-1
   116e4:	00bfffc4 	movi	r2,-1
   116e8:	21000044 	addi	r4,r4,1
   116ec:	29400044 	addi	r5,r5,1
   116f0:	38800526 	beq	r7,r2,11708 <memcmp+0x34>
   116f4:	20c00003 	ldbu	r3,0(r4)
   116f8:	28800003 	ldbu	r2,0(r5)
   116fc:	18bff826 	beq	r3,r2,116e0 <memcmp+0xc>
   11700:	1885c83a 	sub	r2,r3,r2
   11704:	f800283a 	ret
   11708:	0005883a 	mov	r2,zero
   1170c:	f800283a 	ret
