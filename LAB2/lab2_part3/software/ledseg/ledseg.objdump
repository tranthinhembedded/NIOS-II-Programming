
ledseg.elf:     file format elf32-littlenios2
ledseg.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00002514 memsz 0x00002514 flags r-x
    LOAD off    0x00003534 vaddr 0x00082534 paddr 0x00083b78 align 2**12
         filesz 0x00001644 memsz 0x00001644 flags rw-
    LOAD off    0x000051bc vaddr 0x000851bc paddr 0x000851bc align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002348  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  000824fc  000824fc  000034fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001644  00082534  00083b78  00003534  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  000851bc  000851bc  000051bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000538  00000000  00000000  00004ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007cb  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009a51  00000000  00000000  000058a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002453  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005f76  00000000  00000000  00011747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000868  00000000  00000000  000176c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b9b  00000000  00000000  00017f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dbf  00000000  00000000  00018ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00019884  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00019898  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001b2e9  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001b2ec  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001b2f8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001b2f9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001b2fa  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001b305  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001b310  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0001b31b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  0001b321  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00032244  00000000  00000000  0001b33a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
000824fc l    d  .rodata	00000000 .rodata
00082534 l    d  .rwdata	00000000 .rwdata
000851bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000802bc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00082544 l     O .rwdata	00001060 jtag_uart_0
0008040c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008064c l     F .text	00000228 altera_avalon_jtag_uart_irq
00080874 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00081144 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000811c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000812a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000816b0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00081800 l     F .text	000000f8 alt_file_locked
00081a84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0008374c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000822ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00082498 l     F .text	00000040 alt_sim_halt
00080328 g     F .text	0000006c alt_main
000851d8 g     O .bss	00000100 alt_irq
00083b78 g       *ABS*	00000000 __flash_rwdata_start
00082534 g     O .rwdata	00000010 segment_table
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000851d4 g     O .bss	00000004 errno
000851c0 g     O .bss	00000004 alt_argv
0008bb4c g       *ABS*	00000000 _gp
000835cc g     O .rwdata	00000180 alt_fd_list
00081d20 g     F .text	00000094 alt_find_dev
00082064 g     F .text	000000a0 memcpy
00081788 g     F .text	00000078 alt_io_redirect
000824fc g       *ABS*	00000000 __DTOR_END__
00080a8c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00083b5c g     O .rwdata	00000004 alt_max_fd
00083b74 g     O .rwdata	00000004 _global_impure_ptr
00085468 g       *ABS*	00000000 __bss_end
000815b8 g     F .text	000000f8 alt_iic_isr_register
00081bf4 g     F .text	0000010c alt_tick
00081570 g     F .text	00000048 alt_ic_irq_enabled
00081b5c g     F .text	00000098 alt_alarm_stop
000851c8 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
000835a4 g     O .rwdata	00000028 alt_dev_null
000811a4 g     F .text	0000001c alt_dcache_flush_all
00083b78 g       *ABS*	00000000 __ram_rwdata_end
00083b54 g     O .rwdata	00000008 alt_dev_list
00082534 g       *ABS*	00000000 __ram_rodata_end
00085468 g       *ABS*	00000000 end
0008058c g     F .text	000000c0 altera_avalon_jtag_uart_init
000824f8 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
00080cb0 g     F .text	00000240 altera_avalon_jtag_uart_write
000822b0 g     F .text	000001b0 __call_exitprocs
000801b4 g     F .text	0000003c _start
000851cc g     O .bss	00000004 _alt_tick_rate
000851d0 g     O .bss	00000004 _alt_nticks
000803c8 g     F .text	00000044 alt_sys_init
00082178 g     F .text	00000134 __register_exitproc
00080924 g     F .text	00000074 altera_avalon_jtag_uart_close
00082460 g     F .text	00000038 __mulsi3
00082534 g       *ABS*	00000000 __ram_rwdata_start
000824fc g       *ABS*	00000000 __ram_rodata_start
00080444 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00081ed4 g     F .text	000000d0 alt_get_fd
00081ff0 g     F .text	00000074 memcmp
000804f4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00085468 g       *ABS*	00000000 __alt_stack_base
0008053c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00081db4 g     F .text	00000120 alt_find_file
000811ec g     F .text	000000b4 alt_dev_llist_insert
000851bc g       *ABS*	00000000 __bss_start
000801f0 g     F .text	0000004c main
000851c4 g     O .bss	00000004 alt_envp
0008049c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000852d8 g     O .bss	00000190 _atexit0
00083b60 g     O .rwdata	00000004 alt_errno
000824fc g       *ABS*	00000000 __CTOR_END__
000824fc g       *ABS*	00000000 __flash_rodata_start
000824fc g       *ABS*	00000000 __DTOR_LIST__
00080394 g     F .text	00000034 alt_irq_init
00081ae4 g     F .text	00000078 alt_release_fd
00081fa4 g     F .text	00000014 atexit
00083b70 g     O .rwdata	00000004 _impure_ptr
000851bc g     O .bss	00000004 alt_argc
00081364 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00083b4c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000813e4 g     F .text	00000050 alt_ic_isr_register
00083b78 g       *ABS*	00000000 _edata
00085468 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00080998 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000814d0 g     F .text	000000a0 alt_ic_irq_disable
00081d00 g     F .text	00000020 altera_nios2_qsys_irq_init
00081fb8 g     F .text	00000038 exit
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000824d8 g     F .text	00000020 _exit
00080ef0 g     F .text	00000154 alt_alarm_start
00082104 g     F .text	00000074 strlen
000818f8 g     F .text	0000018c open
000813c8 g     F .text	0000001c alt_icache_flush_all
00083b64 g     O .rwdata	00000004 alt_priority_mask
00081434 g     F .text	0000009c alt_ic_irq_enable
00083b68 g     O .rwdata	00000008 alt_alarm_list
00081300 g     F .text	00000064 _do_ctors
00081044 g     F .text	00000100 close
0008023c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00234 	movhi	r3,8
   80134:	18d47604 	addi	r3,r3,20952
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00234 	movhi	r3,8
   8014c:	18d47604 	addi	r3,r3,20952
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec6a014 	ori	sp,sp,6784

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6aed314 	ori	gp,gp,47948
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	10946f14 	ori	r2,r2,20924

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18d51a14 	ori	r3,r3,21608

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008023c0 	call	8023c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	00803280 	call	80328 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <main>:
    0xA1, // D
    0x86, // E
    0x8E  // F
};

int main() {
   801f0:	defffe04 	addi	sp,sp,-8
   801f4:	df000115 	stw	fp,4(sp)
   801f8:	df000104 	addi	fp,sp,4
    uint8_t sw_value;
    uint8_t hex_value;

    while (1) {

        sw_value = IORD(SWITCH_BASE,0) & 0x0F;
   801fc:	00800434 	movhi	r2,16
   80200:	10840c04 	addi	r2,r2,4144
   80204:	10800037 	ldwio	r2,0(r2)
   80208:	108003cc 	andi	r2,r2,15
   8020c:	e0bfff45 	stb	r2,-3(fp)

        hex_value = segment_table[sw_value];
   80210:	e0ffff43 	ldbu	r3,-3(fp)
   80214:	00800234 	movhi	r2,8
   80218:	10894d04 	addi	r2,r2,9524
   8021c:	10c5883a 	add	r2,r2,r3
   80220:	10800003 	ldbu	r2,0(r2)
   80224:	e0bfff05 	stb	r2,-4(fp)

        IOWR(LED_BASE,0, hex_value);
   80228:	e0ffff03 	ldbu	r3,-4(fp)
   8022c:	00800434 	movhi	r2,16
   80230:	10840804 	addi	r2,r2,4128
   80234:	10c00035 	stwio	r3,0(r2)
    }
   80238:	003ff006 	br	801fc <main+0xc>

0008023c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8023c:	defffe04 	addi	sp,sp,-8
   80240:	dfc00115 	stw	ra,4(sp)
   80244:	df000015 	stw	fp,0(sp)
   80248:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8024c:	01000234 	movhi	r4,8
   80250:	210ede04 	addi	r4,r4,15224
   80254:	01400234 	movhi	r5,8
   80258:	29494d04 	addi	r5,r5,9524
   8025c:	01800234 	movhi	r6,8
   80260:	318ede04 	addi	r6,r6,15224
   80264:	00802bc0 	call	802bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80268:	01000234 	movhi	r4,8
   8026c:	21000804 	addi	r4,r4,32
   80270:	01400234 	movhi	r5,8
   80274:	29400804 	addi	r5,r5,32
   80278:	01800234 	movhi	r6,8
   8027c:	31806d04 	addi	r6,r6,436
   80280:	00802bc0 	call	802bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80284:	01000234 	movhi	r4,8
   80288:	21093f04 	addi	r4,r4,9468
   8028c:	01400234 	movhi	r5,8
   80290:	29493f04 	addi	r5,r5,9468
   80294:	01800234 	movhi	r6,8
   80298:	31894d04 	addi	r6,r6,9524
   8029c:	00802bc0 	call	802bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   802a0:	00811a40 	call	811a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   802a4:	00813c80 	call	813c8 <alt_icache_flush_all>
}
   802a8:	e037883a 	mov	sp,fp
   802ac:	dfc00117 	ldw	ra,4(sp)
   802b0:	df000017 	ldw	fp,0(sp)
   802b4:	dec00204 	addi	sp,sp,8
   802b8:	f800283a 	ret

000802bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   802bc:	defffc04 	addi	sp,sp,-16
   802c0:	df000315 	stw	fp,12(sp)
   802c4:	df000304 	addi	fp,sp,12
   802c8:	e13ffd15 	stw	r4,-12(fp)
   802cc:	e17ffe15 	stw	r5,-8(fp)
   802d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   802d4:	e0fffe17 	ldw	r3,-8(fp)
   802d8:	e0bffd17 	ldw	r2,-12(fp)
   802dc:	18800e26 	beq	r3,r2,80318 <alt_load_section+0x5c>
  {
    while( to != end )
   802e0:	00000a06 	br	8030c <alt_load_section+0x50>
    {
      *to++ = *from++;
   802e4:	e0bffd17 	ldw	r2,-12(fp)
   802e8:	10c00017 	ldw	r3,0(r2)
   802ec:	e0bffe17 	ldw	r2,-8(fp)
   802f0:	10c00015 	stw	r3,0(r2)
   802f4:	e0bffe17 	ldw	r2,-8(fp)
   802f8:	10800104 	addi	r2,r2,4
   802fc:	e0bffe15 	stw	r2,-8(fp)
   80300:	e0bffd17 	ldw	r2,-12(fp)
   80304:	10800104 	addi	r2,r2,4
   80308:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8030c:	e0fffe17 	ldw	r3,-8(fp)
   80310:	e0bfff17 	ldw	r2,-4(fp)
   80314:	18bff31e 	bne	r3,r2,802e4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   80318:	e037883a 	mov	sp,fp
   8031c:	df000017 	ldw	fp,0(sp)
   80320:	dec00104 	addi	sp,sp,4
   80324:	f800283a 	ret

00080328 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80328:	defffd04 	addi	sp,sp,-12
   8032c:	dfc00215 	stw	ra,8(sp)
   80330:	df000115 	stw	fp,4(sp)
   80334:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80338:	0009883a 	mov	r4,zero
   8033c:	00803940 	call	80394 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80340:	00803c80 	call	803c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80344:	01000234 	movhi	r4,8
   80348:	21093f04 	addi	r4,r4,9468
   8034c:	01400234 	movhi	r5,8
   80350:	29493f04 	addi	r5,r5,9468
   80354:	01800234 	movhi	r6,8
   80358:	31893f04 	addi	r6,r6,9468
   8035c:	00817880 	call	81788 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80360:	00813000 	call	81300 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   80364:	01000234 	movhi	r4,8
   80368:	2104d904 	addi	r4,r4,4964
   8036c:	0081fa40 	call	81fa4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80370:	d1259c17 	ldw	r4,-27024(gp)
   80374:	d1659d17 	ldw	r5,-27020(gp)
   80378:	d1a59e17 	ldw	r6,-27016(gp)
   8037c:	00801f00 	call	801f0 <main>
   80380:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80384:	01000044 	movi	r4,1
   80388:	00810440 	call	81044 <close>
  exit (result);
   8038c:	e13fff17 	ldw	r4,-4(fp)
   80390:	0081fb80 	call	81fb8 <exit>

00080394 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80394:	defffd04 	addi	sp,sp,-12
   80398:	dfc00215 	stw	ra,8(sp)
   8039c:	df000115 	stw	fp,4(sp)
   803a0:	df000104 	addi	fp,sp,4
   803a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   803a8:	0081d000 	call	81d00 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   803ac:	00800044 	movi	r2,1
   803b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   803b4:	e037883a 	mov	sp,fp
   803b8:	dfc00117 	ldw	ra,4(sp)
   803bc:	df000017 	ldw	fp,0(sp)
   803c0:	dec00204 	addi	sp,sp,8
   803c4:	f800283a 	ret

000803c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   803c8:	defffe04 	addi	sp,sp,-8
   803cc:	dfc00115 	stw	ra,4(sp)
   803d0:	df000015 	stw	fp,0(sp)
   803d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   803d8:	01000234 	movhi	r4,8
   803dc:	21095b04 	addi	r4,r4,9580
   803e0:	000b883a 	mov	r5,zero
   803e4:	000d883a 	mov	r6,zero
   803e8:	008058c0 	call	8058c <altera_avalon_jtag_uart_init>
   803ec:	01000234 	movhi	r4,8
   803f0:	21095104 	addi	r4,r4,9540
   803f4:	008040c0 	call	8040c <alt_dev_reg>
}
   803f8:	e037883a 	mov	sp,fp
   803fc:	dfc00117 	ldw	ra,4(sp)
   80400:	df000017 	ldw	fp,0(sp)
   80404:	dec00204 	addi	sp,sp,8
   80408:	f800283a 	ret

0008040c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8040c:	defffd04 	addi	sp,sp,-12
   80410:	dfc00215 	stw	ra,8(sp)
   80414:	df000115 	stw	fp,4(sp)
   80418:	df000104 	addi	fp,sp,4
   8041c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80420:	e13fff17 	ldw	r4,-4(fp)
   80424:	01400234 	movhi	r5,8
   80428:	294ed504 	addi	r5,r5,15188
   8042c:	00811ec0 	call	811ec <alt_dev_llist_insert>
}
   80430:	e037883a 	mov	sp,fp
   80434:	dfc00117 	ldw	ra,4(sp)
   80438:	df000017 	ldw	fp,0(sp)
   8043c:	dec00204 	addi	sp,sp,8
   80440:	f800283a 	ret

00080444 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80444:	defffa04 	addi	sp,sp,-24
   80448:	dfc00515 	stw	ra,20(sp)
   8044c:	df000415 	stw	fp,16(sp)
   80450:	df000404 	addi	fp,sp,16
   80454:	e13ffd15 	stw	r4,-12(fp)
   80458:	e17ffe15 	stw	r5,-8(fp)
   8045c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80460:	e0bffd17 	ldw	r2,-12(fp)
   80464:	10800017 	ldw	r2,0(r2)
   80468:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8046c:	e0bffc17 	ldw	r2,-16(fp)
   80470:	11000a04 	addi	r4,r2,40
   80474:	e0bffd17 	ldw	r2,-12(fp)
   80478:	11c00217 	ldw	r7,8(r2)
   8047c:	e17ffe17 	ldw	r5,-8(fp)
   80480:	e1bfff17 	ldw	r6,-4(fp)
   80484:	0080a8c0 	call	80a8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80488:	e037883a 	mov	sp,fp
   8048c:	dfc00117 	ldw	ra,4(sp)
   80490:	df000017 	ldw	fp,0(sp)
   80494:	dec00204 	addi	sp,sp,8
   80498:	f800283a 	ret

0008049c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8049c:	defffa04 	addi	sp,sp,-24
   804a0:	dfc00515 	stw	ra,20(sp)
   804a4:	df000415 	stw	fp,16(sp)
   804a8:	df000404 	addi	fp,sp,16
   804ac:	e13ffd15 	stw	r4,-12(fp)
   804b0:	e17ffe15 	stw	r5,-8(fp)
   804b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   804b8:	e0bffd17 	ldw	r2,-12(fp)
   804bc:	10800017 	ldw	r2,0(r2)
   804c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   804c4:	e0bffc17 	ldw	r2,-16(fp)
   804c8:	11000a04 	addi	r4,r2,40
   804cc:	e0bffd17 	ldw	r2,-12(fp)
   804d0:	11c00217 	ldw	r7,8(r2)
   804d4:	e17ffe17 	ldw	r5,-8(fp)
   804d8:	e1bfff17 	ldw	r6,-4(fp)
   804dc:	0080cb00 	call	80cb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   804e0:	e037883a 	mov	sp,fp
   804e4:	dfc00117 	ldw	ra,4(sp)
   804e8:	df000017 	ldw	fp,0(sp)
   804ec:	dec00204 	addi	sp,sp,8
   804f0:	f800283a 	ret

000804f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   804f4:	defffc04 	addi	sp,sp,-16
   804f8:	dfc00315 	stw	ra,12(sp)
   804fc:	df000215 	stw	fp,8(sp)
   80500:	df000204 	addi	fp,sp,8
   80504:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80508:	e0bfff17 	ldw	r2,-4(fp)
   8050c:	10800017 	ldw	r2,0(r2)
   80510:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80514:	e0bffe17 	ldw	r2,-8(fp)
   80518:	11000a04 	addi	r4,r2,40
   8051c:	e0bfff17 	ldw	r2,-4(fp)
   80520:	11400217 	ldw	r5,8(r2)
   80524:	00809240 	call	80924 <altera_avalon_jtag_uart_close>
}
   80528:	e037883a 	mov	sp,fp
   8052c:	dfc00117 	ldw	ra,4(sp)
   80530:	df000017 	ldw	fp,0(sp)
   80534:	dec00204 	addi	sp,sp,8
   80538:	f800283a 	ret

0008053c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8053c:	defffa04 	addi	sp,sp,-24
   80540:	dfc00515 	stw	ra,20(sp)
   80544:	df000415 	stw	fp,16(sp)
   80548:	df000404 	addi	fp,sp,16
   8054c:	e13ffd15 	stw	r4,-12(fp)
   80550:	e17ffe15 	stw	r5,-8(fp)
   80554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   80558:	e0bffd17 	ldw	r2,-12(fp)
   8055c:	10800017 	ldw	r2,0(r2)
   80560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80564:	e0bffc17 	ldw	r2,-16(fp)
   80568:	11000a04 	addi	r4,r2,40
   8056c:	e17ffe17 	ldw	r5,-8(fp)
   80570:	e1bfff17 	ldw	r6,-4(fp)
   80574:	00809980 	call	80998 <altera_avalon_jtag_uart_ioctl>
}
   80578:	e037883a 	mov	sp,fp
   8057c:	dfc00117 	ldw	ra,4(sp)
   80580:	df000017 	ldw	fp,0(sp)
   80584:	dec00204 	addi	sp,sp,8
   80588:	f800283a 	ret

0008058c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8058c:	defffa04 	addi	sp,sp,-24
   80590:	dfc00515 	stw	ra,20(sp)
   80594:	df000415 	stw	fp,16(sp)
   80598:	df000404 	addi	fp,sp,16
   8059c:	e13ffd15 	stw	r4,-12(fp)
   805a0:	e17ffe15 	stw	r5,-8(fp)
   805a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   805a8:	e0fffd17 	ldw	r3,-12(fp)
   805ac:	00800044 	movi	r2,1
   805b0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   805b4:	e0bffd17 	ldw	r2,-12(fp)
   805b8:	10800017 	ldw	r2,0(r2)
   805bc:	11000104 	addi	r4,r2,4
   805c0:	e0bffd17 	ldw	r2,-12(fp)
   805c4:	10800817 	ldw	r2,32(r2)
   805c8:	1007883a 	mov	r3,r2
   805cc:	2005883a 	mov	r2,r4
   805d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   805d4:	e13ffe17 	ldw	r4,-8(fp)
   805d8:	e17fff17 	ldw	r5,-4(fp)
   805dc:	d8000015 	stw	zero,0(sp)
   805e0:	01800234 	movhi	r6,8
   805e4:	31819304 	addi	r6,r6,1612
   805e8:	e1fffd17 	ldw	r7,-12(fp)
   805ec:	00813e40 	call	813e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   805f0:	e0bffd17 	ldw	r2,-12(fp)
   805f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   805f8:	e0bffd17 	ldw	r2,-12(fp)
   805fc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   80600:	00800234 	movhi	r2,8
   80604:	10947304 	addi	r2,r2,20940
   80608:	10800017 	ldw	r2,0(r2)
   8060c:	100b883a 	mov	r5,r2
   80610:	01800234 	movhi	r6,8
   80614:	31821d04 	addi	r6,r6,2164
   80618:	e1fffd17 	ldw	r7,-12(fp)
   8061c:	0080ef00 	call	80ef0 <alt_alarm_start>
   80620:	1004403a 	cmpge	r2,r2,zero
   80624:	1000041e 	bne	r2,zero,80638 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80628:	e0fffd17 	ldw	r3,-12(fp)
   8062c:	00a00034 	movhi	r2,32768
   80630:	10bfffc4 	addi	r2,r2,-1
   80634:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80638:	e037883a 	mov	sp,fp
   8063c:	dfc00117 	ldw	ra,4(sp)
   80640:	df000017 	ldw	fp,0(sp)
   80644:	dec00204 	addi	sp,sp,8
   80648:	f800283a 	ret

0008064c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8064c:	defff804 	addi	sp,sp,-32
   80650:	df000715 	stw	fp,28(sp)
   80654:	df000704 	addi	fp,sp,28
   80658:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8065c:	e0bfff17 	ldw	r2,-4(fp)
   80660:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   80664:	e0bffe17 	ldw	r2,-8(fp)
   80668:	10800017 	ldw	r2,0(r2)
   8066c:	e0bffd15 	stw	r2,-12(fp)
   80670:	00000006 	br	80674 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80674:	e0bffd17 	ldw	r2,-12(fp)
   80678:	10800104 	addi	r2,r2,4
   8067c:	10800037 	ldwio	r2,0(r2)
   80680:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80684:	e0bffc17 	ldw	r2,-16(fp)
   80688:	1080c00c 	andi	r2,r2,768
   8068c:	1005003a 	cmpeq	r2,r2,zero
   80690:	1000741e 	bne	r2,zero,80864 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80694:	e0bffc17 	ldw	r2,-16(fp)
   80698:	1080400c 	andi	r2,r2,256
   8069c:	1005003a 	cmpeq	r2,r2,zero
   806a0:	1000351e 	bne	r2,zero,80778 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   806a4:	00800074 	movhi	r2,1
   806a8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   806ac:	e0bffe17 	ldw	r2,-8(fp)
   806b0:	10800a17 	ldw	r2,40(r2)
   806b4:	10800044 	addi	r2,r2,1
   806b8:	1081ffcc 	andi	r2,r2,2047
   806bc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   806c0:	e0bffe17 	ldw	r2,-8(fp)
   806c4:	10c00b17 	ldw	r3,44(r2)
   806c8:	e0bffa17 	ldw	r2,-24(fp)
   806cc:	18801626 	beq	r3,r2,80728 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   806d0:	e0bffd17 	ldw	r2,-12(fp)
   806d4:	10800037 	ldwio	r2,0(r2)
   806d8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   806dc:	e0bffb17 	ldw	r2,-20(fp)
   806e0:	10a0000c 	andi	r2,r2,32768
   806e4:	1005003a 	cmpeq	r2,r2,zero
   806e8:	10000f1e 	bne	r2,zero,80728 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   806ec:	e0bffe17 	ldw	r2,-8(fp)
   806f0:	10c00a17 	ldw	r3,40(r2)
   806f4:	e0bffb17 	ldw	r2,-20(fp)
   806f8:	1009883a 	mov	r4,r2
   806fc:	e0bffe17 	ldw	r2,-8(fp)
   80700:	1885883a 	add	r2,r3,r2
   80704:	10800e04 	addi	r2,r2,56
   80708:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8070c:	e0bffe17 	ldw	r2,-8(fp)
   80710:	10800a17 	ldw	r2,40(r2)
   80714:	10800044 	addi	r2,r2,1
   80718:	10c1ffcc 	andi	r3,r2,2047
   8071c:	e0bffe17 	ldw	r2,-8(fp)
   80720:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   80724:	003fe106 	br	806ac <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80728:	e0bffb17 	ldw	r2,-20(fp)
   8072c:	10bfffec 	andhi	r2,r2,65535
   80730:	1005003a 	cmpeq	r2,r2,zero
   80734:	1000101e 	bne	r2,zero,80778 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80738:	e0bffe17 	ldw	r2,-8(fp)
   8073c:	10c00817 	ldw	r3,32(r2)
   80740:	00bfff84 	movi	r2,-2
   80744:	1886703a 	and	r3,r3,r2
   80748:	e0bffe17 	ldw	r2,-8(fp)
   8074c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80750:	e0bffd17 	ldw	r2,-12(fp)
   80754:	11000104 	addi	r4,r2,4
   80758:	e0bffe17 	ldw	r2,-8(fp)
   8075c:	10800817 	ldw	r2,32(r2)
   80760:	1007883a 	mov	r3,r2
   80764:	2005883a 	mov	r2,r4
   80768:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8076c:	e0bffd17 	ldw	r2,-12(fp)
   80770:	10800104 	addi	r2,r2,4
   80774:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80778:	e0bffc17 	ldw	r2,-16(fp)
   8077c:	1080800c 	andi	r2,r2,512
   80780:	1005003a 	cmpeq	r2,r2,zero
   80784:	103fbb1e 	bne	r2,zero,80674 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80788:	e0bffc17 	ldw	r2,-16(fp)
   8078c:	10bfffec 	andhi	r2,r2,65535
   80790:	1004d43a 	srli	r2,r2,16
   80794:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   80798:	00001506 	br	807f0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8079c:	e13ffd17 	ldw	r4,-12(fp)
   807a0:	e0bffe17 	ldw	r2,-8(fp)
   807a4:	10c00d17 	ldw	r3,52(r2)
   807a8:	e0bffe17 	ldw	r2,-8(fp)
   807ac:	1885883a 	add	r2,r3,r2
   807b0:	10820e04 	addi	r2,r2,2104
   807b4:	10800003 	ldbu	r2,0(r2)
   807b8:	10c03fcc 	andi	r3,r2,255
   807bc:	18c0201c 	xori	r3,r3,128
   807c0:	18ffe004 	addi	r3,r3,-128
   807c4:	2005883a 	mov	r2,r4
   807c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   807cc:	e0bffe17 	ldw	r2,-8(fp)
   807d0:	10800d17 	ldw	r2,52(r2)
   807d4:	10800044 	addi	r2,r2,1
   807d8:	10c1ffcc 	andi	r3,r2,2047
   807dc:	e0bffe17 	ldw	r2,-8(fp)
   807e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   807e4:	e0bff917 	ldw	r2,-28(fp)
   807e8:	10bfffc4 	addi	r2,r2,-1
   807ec:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   807f0:	e0bff917 	ldw	r2,-28(fp)
   807f4:	1005003a 	cmpeq	r2,r2,zero
   807f8:	1000051e 	bne	r2,zero,80810 <altera_avalon_jtag_uart_irq+0x1c4>
   807fc:	e0bffe17 	ldw	r2,-8(fp)
   80800:	10c00d17 	ldw	r3,52(r2)
   80804:	e0bffe17 	ldw	r2,-8(fp)
   80808:	10800c17 	ldw	r2,48(r2)
   8080c:	18bfe31e 	bne	r3,r2,8079c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   80810:	e0bff917 	ldw	r2,-28(fp)
   80814:	1005003a 	cmpeq	r2,r2,zero
   80818:	103f961e 	bne	r2,zero,80674 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8081c:	e0bffe17 	ldw	r2,-8(fp)
   80820:	10c00817 	ldw	r3,32(r2)
   80824:	00bfff44 	movi	r2,-3
   80828:	1886703a 	and	r3,r3,r2
   8082c:	e0bffe17 	ldw	r2,-8(fp)
   80830:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80834:	e0bffe17 	ldw	r2,-8(fp)
   80838:	10800017 	ldw	r2,0(r2)
   8083c:	11000104 	addi	r4,r2,4
   80840:	e0bffe17 	ldw	r2,-8(fp)
   80844:	10800817 	ldw	r2,32(r2)
   80848:	1007883a 	mov	r3,r2
   8084c:	2005883a 	mov	r2,r4
   80850:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80854:	e0bffd17 	ldw	r2,-12(fp)
   80858:	10800104 	addi	r2,r2,4
   8085c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   80860:	003f8406 	br	80674 <altera_avalon_jtag_uart_irq+0x28>
}
   80864:	e037883a 	mov	sp,fp
   80868:	df000017 	ldw	fp,0(sp)
   8086c:	dec00104 	addi	sp,sp,4
   80870:	f800283a 	ret

00080874 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   80874:	defffc04 	addi	sp,sp,-16
   80878:	df000315 	stw	fp,12(sp)
   8087c:	df000304 	addi	fp,sp,12
   80880:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   80884:	e0bfff17 	ldw	r2,-4(fp)
   80888:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8088c:	e0bffe17 	ldw	r2,-8(fp)
   80890:	10800017 	ldw	r2,0(r2)
   80894:	10800104 	addi	r2,r2,4
   80898:	10800037 	ldwio	r2,0(r2)
   8089c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   808a0:	e0bffd17 	ldw	r2,-12(fp)
   808a4:	1081000c 	andi	r2,r2,1024
   808a8:	1005003a 	cmpeq	r2,r2,zero
   808ac:	10000c1e 	bne	r2,zero,808e0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   808b0:	e0bffe17 	ldw	r2,-8(fp)
   808b4:	10800017 	ldw	r2,0(r2)
   808b8:	11000104 	addi	r4,r2,4
   808bc:	e0bffe17 	ldw	r2,-8(fp)
   808c0:	10800817 	ldw	r2,32(r2)
   808c4:	10810014 	ori	r2,r2,1024
   808c8:	1007883a 	mov	r3,r2
   808cc:	2005883a 	mov	r2,r4
   808d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   808d4:	e0bffe17 	ldw	r2,-8(fp)
   808d8:	10000915 	stw	zero,36(r2)
   808dc:	00000a06 	br	80908 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   808e0:	e0bffe17 	ldw	r2,-8(fp)
   808e4:	10c00917 	ldw	r3,36(r2)
   808e8:	00a00034 	movhi	r2,32768
   808ec:	10bfff04 	addi	r2,r2,-4
   808f0:	10c00536 	bltu	r2,r3,80908 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   808f4:	e0bffe17 	ldw	r2,-8(fp)
   808f8:	10800917 	ldw	r2,36(r2)
   808fc:	10c00044 	addi	r3,r2,1
   80900:	e0bffe17 	ldw	r2,-8(fp)
   80904:	10c00915 	stw	r3,36(r2)
   80908:	00800234 	movhi	r2,8
   8090c:	10947304 	addi	r2,r2,20940
   80910:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80914:	e037883a 	mov	sp,fp
   80918:	df000017 	ldw	fp,0(sp)
   8091c:	dec00104 	addi	sp,sp,4
   80920:	f800283a 	ret

00080924 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   80924:	defffc04 	addi	sp,sp,-16
   80928:	df000315 	stw	fp,12(sp)
   8092c:	df000304 	addi	fp,sp,12
   80930:	e13ffd15 	stw	r4,-12(fp)
   80934:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80938:	00000706 	br	80958 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8093c:	e0bffe17 	ldw	r2,-8(fp)
   80940:	1090000c 	andi	r2,r2,16384
   80944:	1005003a 	cmpeq	r2,r2,zero
   80948:	1000031e 	bne	r2,zero,80958 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8094c:	00bffd44 	movi	r2,-11
   80950:	e0bfff15 	stw	r2,-4(fp)
   80954:	00000b06 	br	80984 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80958:	e0bffd17 	ldw	r2,-12(fp)
   8095c:	10c00d17 	ldw	r3,52(r2)
   80960:	e0bffd17 	ldw	r2,-12(fp)
   80964:	10800c17 	ldw	r2,48(r2)
   80968:	18800526 	beq	r3,r2,80980 <altera_avalon_jtag_uart_close+0x5c>
   8096c:	e0bffd17 	ldw	r2,-12(fp)
   80970:	10c00917 	ldw	r3,36(r2)
   80974:	e0bffd17 	ldw	r2,-12(fp)
   80978:	10800117 	ldw	r2,4(r2)
   8097c:	18bfef36 	bltu	r3,r2,8093c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   80980:	e03fff15 	stw	zero,-4(fp)
   80984:	e0bfff17 	ldw	r2,-4(fp)
}
   80988:	e037883a 	mov	sp,fp
   8098c:	df000017 	ldw	fp,0(sp)
   80990:	dec00104 	addi	sp,sp,4
   80994:	f800283a 	ret

00080998 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   80998:	defff804 	addi	sp,sp,-32
   8099c:	df000715 	stw	fp,28(sp)
   809a0:	df000704 	addi	fp,sp,28
   809a4:	e13ffb15 	stw	r4,-20(fp)
   809a8:	e17ffc15 	stw	r5,-16(fp)
   809ac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   809b0:	00bff9c4 	movi	r2,-25
   809b4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   809b8:	e0bffc17 	ldw	r2,-16(fp)
   809bc:	e0bfff15 	stw	r2,-4(fp)
   809c0:	e0ffff17 	ldw	r3,-4(fp)
   809c4:	189a8060 	cmpeqi	r2,r3,27137
   809c8:	1000041e 	bne	r2,zero,809dc <altera_avalon_jtag_uart_ioctl+0x44>
   809cc:	e0ffff17 	ldw	r3,-4(fp)
   809d0:	189a80a0 	cmpeqi	r2,r3,27138
   809d4:	10001b1e 	bne	r2,zero,80a44 <altera_avalon_jtag_uart_ioctl+0xac>
   809d8:	00002706 	br	80a78 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   809dc:	e0bffb17 	ldw	r2,-20(fp)
   809e0:	10c00117 	ldw	r3,4(r2)
   809e4:	00a00034 	movhi	r2,32768
   809e8:	10bfffc4 	addi	r2,r2,-1
   809ec:	18802226 	beq	r3,r2,80a78 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   809f0:	e0bffd17 	ldw	r2,-12(fp)
   809f4:	10800017 	ldw	r2,0(r2)
   809f8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   809fc:	e0bff917 	ldw	r2,-28(fp)
   80a00:	10800090 	cmplti	r2,r2,2
   80a04:	1000071e 	bne	r2,zero,80a24 <altera_avalon_jtag_uart_ioctl+0x8c>
   80a08:	e0fff917 	ldw	r3,-28(fp)
   80a0c:	00a00034 	movhi	r2,32768
   80a10:	10bfffc4 	addi	r2,r2,-1
   80a14:	18800326 	beq	r3,r2,80a24 <altera_avalon_jtag_uart_ioctl+0x8c>
   80a18:	e0bff917 	ldw	r2,-28(fp)
   80a1c:	e0bffe15 	stw	r2,-8(fp)
   80a20:	00000306 	br	80a30 <altera_avalon_jtag_uart_ioctl+0x98>
   80a24:	00e00034 	movhi	r3,32768
   80a28:	18ffff84 	addi	r3,r3,-2
   80a2c:	e0fffe15 	stw	r3,-8(fp)
   80a30:	e0bffb17 	ldw	r2,-20(fp)
   80a34:	e0fffe17 	ldw	r3,-8(fp)
   80a38:	10c00115 	stw	r3,4(r2)
      rc = 0;
   80a3c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   80a40:	00000d06 	br	80a78 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80a44:	e0bffb17 	ldw	r2,-20(fp)
   80a48:	10c00117 	ldw	r3,4(r2)
   80a4c:	00a00034 	movhi	r2,32768
   80a50:	10bfffc4 	addi	r2,r2,-1
   80a54:	18800826 	beq	r3,r2,80a78 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80a58:	e13ffd17 	ldw	r4,-12(fp)
   80a5c:	e0bffb17 	ldw	r2,-20(fp)
   80a60:	10c00917 	ldw	r3,36(r2)
   80a64:	e0bffb17 	ldw	r2,-20(fp)
   80a68:	10800117 	ldw	r2,4(r2)
   80a6c:	1885803a 	cmpltu	r2,r3,r2
   80a70:	20800015 	stw	r2,0(r4)
      rc = 0;
   80a74:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   80a78:	e0bffa17 	ldw	r2,-24(fp)
}
   80a7c:	e037883a 	mov	sp,fp
   80a80:	df000017 	ldw	fp,0(sp)
   80a84:	dec00104 	addi	sp,sp,4
   80a88:	f800283a 	ret

00080a8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80a8c:	defff204 	addi	sp,sp,-56
   80a90:	dfc00d15 	stw	ra,52(sp)
   80a94:	df000c15 	stw	fp,48(sp)
   80a98:	df000c04 	addi	fp,sp,48
   80a9c:	e13ffb15 	stw	r4,-20(fp)
   80aa0:	e17ffc15 	stw	r5,-16(fp)
   80aa4:	e1bffd15 	stw	r6,-12(fp)
   80aa8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   80aac:	e0bffc17 	ldw	r2,-16(fp)
   80ab0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80ab4:	00004806 	br	80bd8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   80ab8:	e0bffb17 	ldw	r2,-20(fp)
   80abc:	10800a17 	ldw	r2,40(r2)
   80ac0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   80ac4:	e0bffb17 	ldw	r2,-20(fp)
   80ac8:	10800b17 	ldw	r2,44(r2)
   80acc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   80ad0:	e0fff717 	ldw	r3,-36(fp)
   80ad4:	e0bff617 	ldw	r2,-40(fp)
   80ad8:	18800536 	bltu	r3,r2,80af0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   80adc:	e0bff717 	ldw	r2,-36(fp)
   80ae0:	e0fff617 	ldw	r3,-40(fp)
   80ae4:	10c5c83a 	sub	r2,r2,r3
   80ae8:	e0bff815 	stw	r2,-32(fp)
   80aec:	00000406 	br	80b00 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80af0:	00820004 	movi	r2,2048
   80af4:	e0fff617 	ldw	r3,-40(fp)
   80af8:	10c5c83a 	sub	r2,r2,r3
   80afc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   80b00:	e0bff817 	ldw	r2,-32(fp)
   80b04:	1005003a 	cmpeq	r2,r2,zero
   80b08:	10001f1e 	bne	r2,zero,80b88 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   80b0c:	e0fffd17 	ldw	r3,-12(fp)
   80b10:	e0bff817 	ldw	r2,-32(fp)
   80b14:	1880022e 	bgeu	r3,r2,80b20 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   80b18:	e0bffd17 	ldw	r2,-12(fp)
   80b1c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   80b20:	e0bffb17 	ldw	r2,-20(fp)
   80b24:	10c00e04 	addi	r3,r2,56
   80b28:	e0bff617 	ldw	r2,-40(fp)
   80b2c:	1887883a 	add	r3,r3,r2
   80b30:	e0bffa17 	ldw	r2,-24(fp)
   80b34:	1009883a 	mov	r4,r2
   80b38:	180b883a 	mov	r5,r3
   80b3c:	e1bff817 	ldw	r6,-32(fp)
   80b40:	00820640 	call	82064 <memcpy>
      ptr   += n;
   80b44:	e0fff817 	ldw	r3,-32(fp)
   80b48:	e0bffa17 	ldw	r2,-24(fp)
   80b4c:	10c5883a 	add	r2,r2,r3
   80b50:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   80b54:	e0fffd17 	ldw	r3,-12(fp)
   80b58:	e0bff817 	ldw	r2,-32(fp)
   80b5c:	1885c83a 	sub	r2,r3,r2
   80b60:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b64:	e0fff617 	ldw	r3,-40(fp)
   80b68:	e0bff817 	ldw	r2,-32(fp)
   80b6c:	1885883a 	add	r2,r3,r2
   80b70:	10c1ffcc 	andi	r3,r2,2047
   80b74:	e0bffb17 	ldw	r2,-20(fp)
   80b78:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   80b7c:	e0bffd17 	ldw	r2,-12(fp)
   80b80:	10800048 	cmpgei	r2,r2,1
   80b84:	103fcc1e 	bne	r2,zero,80ab8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   80b88:	e0fffa17 	ldw	r3,-24(fp)
   80b8c:	e0bffc17 	ldw	r2,-16(fp)
   80b90:	1880141e 	bne	r3,r2,80be4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80b94:	e0bffe17 	ldw	r2,-8(fp)
   80b98:	1090000c 	andi	r2,r2,16384
   80b9c:	1004c03a 	cmpne	r2,r2,zero
   80ba0:	1000101e 	bne	r2,zero,80be4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   80ba4:	e0bffb17 	ldw	r2,-20(fp)
   80ba8:	10c00a17 	ldw	r3,40(r2)
   80bac:	e0bff717 	ldw	r2,-36(fp)
   80bb0:	1880051e 	bne	r3,r2,80bc8 <altera_avalon_jtag_uart_read+0x13c>
   80bb4:	e0bffb17 	ldw	r2,-20(fp)
   80bb8:	10c00917 	ldw	r3,36(r2)
   80bbc:	e0bffb17 	ldw	r2,-20(fp)
   80bc0:	10800117 	ldw	r2,4(r2)
   80bc4:	18bff736 	bltu	r3,r2,80ba4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   80bc8:	e0bffb17 	ldw	r2,-20(fp)
   80bcc:	10c00a17 	ldw	r3,40(r2)
   80bd0:	e0bff717 	ldw	r2,-36(fp)
   80bd4:	18800326 	beq	r3,r2,80be4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80bd8:	e0bffd17 	ldw	r2,-12(fp)
   80bdc:	10800048 	cmpgei	r2,r2,1
   80be0:	103fb51e 	bne	r2,zero,80ab8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   80be4:	e0fffa17 	ldw	r3,-24(fp)
   80be8:	e0bffc17 	ldw	r2,-16(fp)
   80bec:	18801926 	beq	r3,r2,80c54 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80bf0:	0005303a 	rdctl	r2,status
   80bf4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80bf8:	e0fff517 	ldw	r3,-44(fp)
   80bfc:	00bfff84 	movi	r2,-2
   80c00:	1884703a 	and	r2,r3,r2
   80c04:	1001703a 	wrctl	status,r2
  
  return context;
   80c08:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   80c0c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80c10:	e0bffb17 	ldw	r2,-20(fp)
   80c14:	10800817 	ldw	r2,32(r2)
   80c18:	10c00054 	ori	r3,r2,1
   80c1c:	e0bffb17 	ldw	r2,-20(fp)
   80c20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80c24:	e0bffb17 	ldw	r2,-20(fp)
   80c28:	10800017 	ldw	r2,0(r2)
   80c2c:	11000104 	addi	r4,r2,4
   80c30:	e0bffb17 	ldw	r2,-20(fp)
   80c34:	10800817 	ldw	r2,32(r2)
   80c38:	1007883a 	mov	r3,r2
   80c3c:	2005883a 	mov	r2,r4
   80c40:	10c00035 	stwio	r3,0(r2)
   80c44:	e0bff917 	ldw	r2,-28(fp)
   80c48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80c4c:	e0bff417 	ldw	r2,-48(fp)
   80c50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   80c54:	e0fffa17 	ldw	r3,-24(fp)
   80c58:	e0bffc17 	ldw	r2,-16(fp)
   80c5c:	18800526 	beq	r3,r2,80c74 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   80c60:	e0fffa17 	ldw	r3,-24(fp)
   80c64:	e0bffc17 	ldw	r2,-16(fp)
   80c68:	1887c83a 	sub	r3,r3,r2
   80c6c:	e0ffff15 	stw	r3,-4(fp)
   80c70:	00000906 	br	80c98 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   80c74:	e0bffe17 	ldw	r2,-8(fp)
   80c78:	1090000c 	andi	r2,r2,16384
   80c7c:	1005003a 	cmpeq	r2,r2,zero
   80c80:	1000031e 	bne	r2,zero,80c90 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   80c84:	00bffd44 	movi	r2,-11
   80c88:	e0bfff15 	stw	r2,-4(fp)
   80c8c:	00000206 	br	80c98 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   80c90:	00bffec4 	movi	r2,-5
   80c94:	e0bfff15 	stw	r2,-4(fp)
   80c98:	e0bfff17 	ldw	r2,-4(fp)
}
   80c9c:	e037883a 	mov	sp,fp
   80ca0:	dfc00117 	ldw	ra,4(sp)
   80ca4:	df000017 	ldw	fp,0(sp)
   80ca8:	dec00204 	addi	sp,sp,8
   80cac:	f800283a 	ret

00080cb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80cb0:	defff204 	addi	sp,sp,-56
   80cb4:	dfc00d15 	stw	ra,52(sp)
   80cb8:	df000c15 	stw	fp,48(sp)
   80cbc:	df000c04 	addi	fp,sp,48
   80cc0:	e13ffb15 	stw	r4,-20(fp)
   80cc4:	e17ffc15 	stw	r5,-16(fp)
   80cc8:	e1bffd15 	stw	r6,-12(fp)
   80ccc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   80cd0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   80cd4:	e0bffc17 	ldw	r2,-16(fp)
   80cd8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80cdc:	00003a06 	br	80dc8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   80ce0:	e0bffb17 	ldw	r2,-20(fp)
   80ce4:	10800c17 	ldw	r2,48(r2)
   80ce8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   80cec:	e0bffb17 	ldw	r2,-20(fp)
   80cf0:	10800d17 	ldw	r2,52(r2)
   80cf4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   80cf8:	e0fffa17 	ldw	r3,-24(fp)
   80cfc:	e0bff917 	ldw	r2,-28(fp)
   80d00:	1880062e 	bgeu	r3,r2,80d1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   80d04:	e0fff917 	ldw	r3,-28(fp)
   80d08:	e0bffa17 	ldw	r2,-24(fp)
   80d0c:	1885c83a 	sub	r2,r3,r2
   80d10:	10bfffc4 	addi	r2,r2,-1
   80d14:	e0bff815 	stw	r2,-32(fp)
   80d18:	00000c06 	br	80d4c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   80d1c:	e0bff917 	ldw	r2,-28(fp)
   80d20:	1005003a 	cmpeq	r2,r2,zero
   80d24:	1000051e 	bne	r2,zero,80d3c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   80d28:	00820004 	movi	r2,2048
   80d2c:	e0fffa17 	ldw	r3,-24(fp)
   80d30:	10c5c83a 	sub	r2,r2,r3
   80d34:	e0bff815 	stw	r2,-32(fp)
   80d38:	00000406 	br	80d4c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   80d3c:	0081ffc4 	movi	r2,2047
   80d40:	e0fffa17 	ldw	r3,-24(fp)
   80d44:	10c5c83a 	sub	r2,r2,r3
   80d48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   80d4c:	e0bff817 	ldw	r2,-32(fp)
   80d50:	1005003a 	cmpeq	r2,r2,zero
   80d54:	10001f1e 	bne	r2,zero,80dd4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   80d58:	e0fffd17 	ldw	r3,-12(fp)
   80d5c:	e0bff817 	ldw	r2,-32(fp)
   80d60:	1880022e 	bgeu	r3,r2,80d6c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   80d64:	e0bffd17 	ldw	r2,-12(fp)
   80d68:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   80d6c:	e0bffb17 	ldw	r2,-20(fp)
   80d70:	10c20e04 	addi	r3,r2,2104
   80d74:	e0bffa17 	ldw	r2,-24(fp)
   80d78:	1885883a 	add	r2,r3,r2
   80d7c:	e0fffc17 	ldw	r3,-16(fp)
   80d80:	1009883a 	mov	r4,r2
   80d84:	180b883a 	mov	r5,r3
   80d88:	e1bff817 	ldw	r6,-32(fp)
   80d8c:	00820640 	call	82064 <memcpy>
      ptr   += n;
   80d90:	e0fff817 	ldw	r3,-32(fp)
   80d94:	e0bffc17 	ldw	r2,-16(fp)
   80d98:	10c5883a 	add	r2,r2,r3
   80d9c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   80da0:	e0fffd17 	ldw	r3,-12(fp)
   80da4:	e0bff817 	ldw	r2,-32(fp)
   80da8:	1885c83a 	sub	r2,r3,r2
   80dac:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80db0:	e0fffa17 	ldw	r3,-24(fp)
   80db4:	e0bff817 	ldw	r2,-32(fp)
   80db8:	1885883a 	add	r2,r3,r2
   80dbc:	10c1ffcc 	andi	r3,r2,2047
   80dc0:	e0bffb17 	ldw	r2,-20(fp)
   80dc4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80dc8:	e0bffd17 	ldw	r2,-12(fp)
   80dcc:	10800048 	cmpgei	r2,r2,1
   80dd0:	103fc31e 	bne	r2,zero,80ce0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80dd4:	0005303a 	rdctl	r2,status
   80dd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80ddc:	e0fff517 	ldw	r3,-44(fp)
   80de0:	00bfff84 	movi	r2,-2
   80de4:	1884703a 	and	r2,r3,r2
   80de8:	1001703a 	wrctl	status,r2
  
  return context;
   80dec:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   80df0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80df4:	e0bffb17 	ldw	r2,-20(fp)
   80df8:	10800817 	ldw	r2,32(r2)
   80dfc:	10c00094 	ori	r3,r2,2
   80e00:	e0bffb17 	ldw	r2,-20(fp)
   80e04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80e08:	e0bffb17 	ldw	r2,-20(fp)
   80e0c:	10800017 	ldw	r2,0(r2)
   80e10:	11000104 	addi	r4,r2,4
   80e14:	e0bffb17 	ldw	r2,-20(fp)
   80e18:	10800817 	ldw	r2,32(r2)
   80e1c:	1007883a 	mov	r3,r2
   80e20:	2005883a 	mov	r2,r4
   80e24:	10c00035 	stwio	r3,0(r2)
   80e28:	e0bff717 	ldw	r2,-36(fp)
   80e2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80e30:	e0bff417 	ldw	r2,-48(fp)
   80e34:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   80e38:	e0bffd17 	ldw	r2,-12(fp)
   80e3c:	10800050 	cmplti	r2,r2,1
   80e40:	1000111e 	bne	r2,zero,80e88 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   80e44:	e0bffe17 	ldw	r2,-8(fp)
   80e48:	1090000c 	andi	r2,r2,16384
   80e4c:	1004c03a 	cmpne	r2,r2,zero
   80e50:	1000101e 	bne	r2,zero,80e94 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   80e54:	e0bffb17 	ldw	r2,-20(fp)
   80e58:	10c00d17 	ldw	r3,52(r2)
   80e5c:	e0bff917 	ldw	r2,-28(fp)
   80e60:	1880051e 	bne	r3,r2,80e78 <altera_avalon_jtag_uart_write+0x1c8>
   80e64:	e0bffb17 	ldw	r2,-20(fp)
   80e68:	10c00917 	ldw	r3,36(r2)
   80e6c:	e0bffb17 	ldw	r2,-20(fp)
   80e70:	10800117 	ldw	r2,4(r2)
   80e74:	18bff736 	bltu	r3,r2,80e54 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   80e78:	e0bffb17 	ldw	r2,-20(fp)
   80e7c:	10c00d17 	ldw	r3,52(r2)
   80e80:	e0bff917 	ldw	r2,-28(fp)
   80e84:	18800326 	beq	r3,r2,80e94 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   80e88:	e0bffd17 	ldw	r2,-12(fp)
   80e8c:	10800048 	cmpgei	r2,r2,1
   80e90:	103fcd1e 	bne	r2,zero,80dc8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80e94:	e0fffc17 	ldw	r3,-16(fp)
   80e98:	e0bff617 	ldw	r2,-40(fp)
   80e9c:	18800526 	beq	r3,r2,80eb4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   80ea0:	e0fffc17 	ldw	r3,-16(fp)
   80ea4:	e0bff617 	ldw	r2,-40(fp)
   80ea8:	1887c83a 	sub	r3,r3,r2
   80eac:	e0ffff15 	stw	r3,-4(fp)
   80eb0:	00000906 	br	80ed8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   80eb4:	e0bffe17 	ldw	r2,-8(fp)
   80eb8:	1090000c 	andi	r2,r2,16384
   80ebc:	1005003a 	cmpeq	r2,r2,zero
   80ec0:	1000031e 	bne	r2,zero,80ed0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   80ec4:	00bffd44 	movi	r2,-11
   80ec8:	e0bfff15 	stw	r2,-4(fp)
   80ecc:	00000206 	br	80ed8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   80ed0:	00bffec4 	movi	r2,-5
   80ed4:	e0bfff15 	stw	r2,-4(fp)
   80ed8:	e0bfff17 	ldw	r2,-4(fp)
}
   80edc:	e037883a 	mov	sp,fp
   80ee0:	dfc00117 	ldw	ra,4(sp)
   80ee4:	df000017 	ldw	fp,0(sp)
   80ee8:	dec00204 	addi	sp,sp,8
   80eec:	f800283a 	ret

00080ef0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   80ef0:	defff404 	addi	sp,sp,-48
   80ef4:	df000b15 	stw	fp,44(sp)
   80ef8:	df000b04 	addi	fp,sp,44
   80efc:	e13ffb15 	stw	r4,-20(fp)
   80f00:	e17ffc15 	stw	r5,-16(fp)
   80f04:	e1bffd15 	stw	r6,-12(fp)
   80f08:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   80f0c:	e03ff915 	stw	zero,-28(fp)
   80f10:	00800234 	movhi	r2,8
   80f14:	10947304 	addi	r2,r2,20940
   80f18:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   80f1c:	1005003a 	cmpeq	r2,r2,zero
   80f20:	1000411e 	bne	r2,zero,81028 <alt_alarm_start+0x138>
  {
    if (alarm)
   80f24:	e0bffb17 	ldw	r2,-20(fp)
   80f28:	1005003a 	cmpeq	r2,r2,zero
   80f2c:	10003b1e 	bne	r2,zero,8101c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   80f30:	e0fffb17 	ldw	r3,-20(fp)
   80f34:	e0bffd17 	ldw	r2,-12(fp)
   80f38:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   80f3c:	e0fffb17 	ldw	r3,-20(fp)
   80f40:	e0bffe17 	ldw	r2,-8(fp)
   80f44:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f48:	0005303a 	rdctl	r2,status
   80f4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f50:	e0fff817 	ldw	r3,-32(fp)
   80f54:	00bfff84 	movi	r2,-2
   80f58:	1884703a 	and	r2,r3,r2
   80f5c:	1001703a 	wrctl	status,r2
  
  return context;
   80f60:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   80f64:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   80f68:	00800234 	movhi	r2,8
   80f6c:	10947404 	addi	r2,r2,20944
   80f70:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   80f74:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   80f78:	e0fffc17 	ldw	r3,-16(fp)
   80f7c:	e0bff917 	ldw	r2,-28(fp)
   80f80:	1885883a 	add	r2,r3,r2
   80f84:	10c00044 	addi	r3,r2,1
   80f88:	e0bffb17 	ldw	r2,-20(fp)
   80f8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   80f90:	e0bffb17 	ldw	r2,-20(fp)
   80f94:	10c00217 	ldw	r3,8(r2)
   80f98:	e0bff917 	ldw	r2,-28(fp)
   80f9c:	1880042e 	bgeu	r3,r2,80fb0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   80fa0:	e0fffb17 	ldw	r3,-20(fp)
   80fa4:	00800044 	movi	r2,1
   80fa8:	18800405 	stb	r2,16(r3)
   80fac:	00000206 	br	80fb8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   80fb0:	e0bffb17 	ldw	r2,-20(fp)
   80fb4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   80fb8:	e0fffb17 	ldw	r3,-20(fp)
   80fbc:	00800234 	movhi	r2,8
   80fc0:	108eda04 	addi	r2,r2,15208
   80fc4:	e0bff615 	stw	r2,-40(fp)
   80fc8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   80fcc:	e0fff717 	ldw	r3,-36(fp)
   80fd0:	e0bff617 	ldw	r2,-40(fp)
   80fd4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   80fd8:	e0bff617 	ldw	r2,-40(fp)
   80fdc:	10c00017 	ldw	r3,0(r2)
   80fe0:	e0bff717 	ldw	r2,-36(fp)
   80fe4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   80fe8:	e0bff617 	ldw	r2,-40(fp)
   80fec:	10c00017 	ldw	r3,0(r2)
   80ff0:	e0bff717 	ldw	r2,-36(fp)
   80ff4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   80ff8:	e0fff617 	ldw	r3,-40(fp)
   80ffc:	e0bff717 	ldw	r2,-36(fp)
   81000:	18800015 	stw	r2,0(r3)
   81004:	e0bffa17 	ldw	r2,-24(fp)
   81008:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8100c:	e0bff517 	ldw	r2,-44(fp)
   81010:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   81014:	e03fff15 	stw	zero,-4(fp)
   81018:	00000506 	br	81030 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8101c:	00bffa84 	movi	r2,-22
   81020:	e0bfff15 	stw	r2,-4(fp)
   81024:	00000206 	br	81030 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   81028:	00bfde84 	movi	r2,-134
   8102c:	e0bfff15 	stw	r2,-4(fp)
   81030:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   81034:	e037883a 	mov	sp,fp
   81038:	df000017 	ldw	fp,0(sp)
   8103c:	dec00104 	addi	sp,sp,4
   81040:	f800283a 	ret

00081044 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81044:	defff804 	addi	sp,sp,-32
   81048:	dfc00715 	stw	ra,28(sp)
   8104c:	df000615 	stw	fp,24(sp)
   81050:	df000604 	addi	fp,sp,24
   81054:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81058:	e0bffc17 	ldw	r2,-16(fp)
   8105c:	1004803a 	cmplt	r2,r2,zero
   81060:	1000091e 	bne	r2,zero,81088 <close+0x44>
   81064:	e13ffc17 	ldw	r4,-16(fp)
   81068:	01400304 	movi	r5,12
   8106c:	00824600 	call	82460 <__mulsi3>
   81070:	1007883a 	mov	r3,r2
   81074:	00800234 	movhi	r2,8
   81078:	108d7304 	addi	r2,r2,13772
   8107c:	1887883a 	add	r3,r3,r2
   81080:	e0ffff15 	stw	r3,-4(fp)
   81084:	00000106 	br	8108c <close+0x48>
   81088:	e03fff15 	stw	zero,-4(fp)
   8108c:	e0bfff17 	ldw	r2,-4(fp)
   81090:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   81094:	e0bffb17 	ldw	r2,-20(fp)
   81098:	1005003a 	cmpeq	r2,r2,zero
   8109c:	10001d1e 	bne	r2,zero,81114 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   810a0:	e0bffb17 	ldw	r2,-20(fp)
   810a4:	10800017 	ldw	r2,0(r2)
   810a8:	10800417 	ldw	r2,16(r2)
   810ac:	1005003a 	cmpeq	r2,r2,zero
   810b0:	1000071e 	bne	r2,zero,810d0 <close+0x8c>
   810b4:	e0bffb17 	ldw	r2,-20(fp)
   810b8:	10800017 	ldw	r2,0(r2)
   810bc:	10800417 	ldw	r2,16(r2)
   810c0:	e13ffb17 	ldw	r4,-20(fp)
   810c4:	103ee83a 	callr	r2
   810c8:	e0bffe15 	stw	r2,-8(fp)
   810cc:	00000106 	br	810d4 <close+0x90>
   810d0:	e03ffe15 	stw	zero,-8(fp)
   810d4:	e0bffe17 	ldw	r2,-8(fp)
   810d8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   810dc:	e13ffc17 	ldw	r4,-16(fp)
   810e0:	0081ae40 	call	81ae4 <alt_release_fd>
    if (rval < 0)
   810e4:	e0bffa17 	ldw	r2,-24(fp)
   810e8:	1004403a 	cmpge	r2,r2,zero
   810ec:	1000071e 	bne	r2,zero,8110c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   810f0:	00811440 	call	81144 <alt_get_errno>
   810f4:	e0fffa17 	ldw	r3,-24(fp)
   810f8:	00c7c83a 	sub	r3,zero,r3
   810fc:	10c00015 	stw	r3,0(r2)
      return -1;
   81100:	00bfffc4 	movi	r2,-1
   81104:	e0bffd15 	stw	r2,-12(fp)
   81108:	00000806 	br	8112c <close+0xe8>
    }
    return 0;
   8110c:	e03ffd15 	stw	zero,-12(fp)
   81110:	00000606 	br	8112c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81114:	00811440 	call	81144 <alt_get_errno>
   81118:	1007883a 	mov	r3,r2
   8111c:	00801444 	movi	r2,81
   81120:	18800015 	stw	r2,0(r3)
    return -1;
   81124:	00bfffc4 	movi	r2,-1
   81128:	e0bffd15 	stw	r2,-12(fp)
   8112c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   81130:	e037883a 	mov	sp,fp
   81134:	dfc00117 	ldw	ra,4(sp)
   81138:	df000017 	ldw	fp,0(sp)
   8113c:	dec00204 	addi	sp,sp,8
   81140:	f800283a 	ret

00081144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81144:	defffd04 	addi	sp,sp,-12
   81148:	dfc00215 	stw	ra,8(sp)
   8114c:	df000115 	stw	fp,4(sp)
   81150:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   81154:	00800234 	movhi	r2,8
   81158:	108ed804 	addi	r2,r2,15200
   8115c:	10800017 	ldw	r2,0(r2)
   81160:	1005003a 	cmpeq	r2,r2,zero
   81164:	1000061e 	bne	r2,zero,81180 <alt_get_errno+0x3c>
   81168:	00800234 	movhi	r2,8
   8116c:	108ed804 	addi	r2,r2,15200
   81170:	10800017 	ldw	r2,0(r2)
   81174:	103ee83a 	callr	r2
   81178:	e0bfff15 	stw	r2,-4(fp)
   8117c:	00000306 	br	8118c <alt_get_errno+0x48>
   81180:	00800234 	movhi	r2,8
   81184:	10947504 	addi	r2,r2,20948
   81188:	e0bfff15 	stw	r2,-4(fp)
   8118c:	e0bfff17 	ldw	r2,-4(fp)
}
   81190:	e037883a 	mov	sp,fp
   81194:	dfc00117 	ldw	ra,4(sp)
   81198:	df000017 	ldw	fp,0(sp)
   8119c:	dec00204 	addi	sp,sp,8
   811a0:	f800283a 	ret

000811a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   811a4:	deffff04 	addi	sp,sp,-4
   811a8:	df000015 	stw	fp,0(sp)
   811ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   811b0:	e037883a 	mov	sp,fp
   811b4:	df000017 	ldw	fp,0(sp)
   811b8:	dec00104 	addi	sp,sp,4
   811bc:	f800283a 	ret

000811c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   811c0:	defffc04 	addi	sp,sp,-16
   811c4:	df000315 	stw	fp,12(sp)
   811c8:	df000304 	addi	fp,sp,12
   811cc:	e13ffd15 	stw	r4,-12(fp)
   811d0:	e17ffe15 	stw	r5,-8(fp)
   811d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   811d8:	e0bfff17 	ldw	r2,-4(fp)
}
   811dc:	e037883a 	mov	sp,fp
   811e0:	df000017 	ldw	fp,0(sp)
   811e4:	dec00104 	addi	sp,sp,4
   811e8:	f800283a 	ret

000811ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   811ec:	defff904 	addi	sp,sp,-28
   811f0:	dfc00615 	stw	ra,24(sp)
   811f4:	df000515 	stw	fp,20(sp)
   811f8:	df000504 	addi	fp,sp,20
   811fc:	e13ffd15 	stw	r4,-12(fp)
   81200:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81204:	e0bffd17 	ldw	r2,-12(fp)
   81208:	1005003a 	cmpeq	r2,r2,zero
   8120c:	1000041e 	bne	r2,zero,81220 <alt_dev_llist_insert+0x34>
   81210:	e0bffd17 	ldw	r2,-12(fp)
   81214:	10800217 	ldw	r2,8(r2)
   81218:	1004c03a 	cmpne	r2,r2,zero
   8121c:	1000071e 	bne	r2,zero,8123c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   81220:	00812a00 	call	812a0 <alt_get_errno>
   81224:	1007883a 	mov	r3,r2
   81228:	00800584 	movi	r2,22
   8122c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   81230:	00bffa84 	movi	r2,-22
   81234:	e0bfff15 	stw	r2,-4(fp)
   81238:	00001306 	br	81288 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8123c:	e0fffd17 	ldw	r3,-12(fp)
   81240:	e0bffe17 	ldw	r2,-8(fp)
   81244:	e0bffb15 	stw	r2,-20(fp)
   81248:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8124c:	e0fffc17 	ldw	r3,-16(fp)
   81250:	e0bffb17 	ldw	r2,-20(fp)
   81254:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   81258:	e0bffb17 	ldw	r2,-20(fp)
   8125c:	10c00017 	ldw	r3,0(r2)
   81260:	e0bffc17 	ldw	r2,-16(fp)
   81264:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81268:	e0bffb17 	ldw	r2,-20(fp)
   8126c:	10c00017 	ldw	r3,0(r2)
   81270:	e0bffc17 	ldw	r2,-16(fp)
   81274:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   81278:	e0fffb17 	ldw	r3,-20(fp)
   8127c:	e0bffc17 	ldw	r2,-16(fp)
   81280:	18800015 	stw	r2,0(r3)

  return 0;  
   81284:	e03fff15 	stw	zero,-4(fp)
   81288:	e0bfff17 	ldw	r2,-4(fp)
}
   8128c:	e037883a 	mov	sp,fp
   81290:	dfc00117 	ldw	ra,4(sp)
   81294:	df000017 	ldw	fp,0(sp)
   81298:	dec00204 	addi	sp,sp,8
   8129c:	f800283a 	ret

000812a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   812a0:	defffd04 	addi	sp,sp,-12
   812a4:	dfc00215 	stw	ra,8(sp)
   812a8:	df000115 	stw	fp,4(sp)
   812ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   812b0:	00800234 	movhi	r2,8
   812b4:	108ed804 	addi	r2,r2,15200
   812b8:	10800017 	ldw	r2,0(r2)
   812bc:	1005003a 	cmpeq	r2,r2,zero
   812c0:	1000061e 	bne	r2,zero,812dc <alt_get_errno+0x3c>
   812c4:	00800234 	movhi	r2,8
   812c8:	108ed804 	addi	r2,r2,15200
   812cc:	10800017 	ldw	r2,0(r2)
   812d0:	103ee83a 	callr	r2
   812d4:	e0bfff15 	stw	r2,-4(fp)
   812d8:	00000306 	br	812e8 <alt_get_errno+0x48>
   812dc:	00800234 	movhi	r2,8
   812e0:	10947504 	addi	r2,r2,20948
   812e4:	e0bfff15 	stw	r2,-4(fp)
   812e8:	e0bfff17 	ldw	r2,-4(fp)
}
   812ec:	e037883a 	mov	sp,fp
   812f0:	dfc00117 	ldw	ra,4(sp)
   812f4:	df000017 	ldw	fp,0(sp)
   812f8:	dec00204 	addi	sp,sp,8
   812fc:	f800283a 	ret

00081300 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   81300:	defffd04 	addi	sp,sp,-12
   81304:	dfc00215 	stw	ra,8(sp)
   81308:	df000115 	stw	fp,4(sp)
   8130c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81310:	00bfff04 	movi	r2,-4
   81314:	00c00234 	movhi	r3,8
   81318:	18c93f04 	addi	r3,r3,9468
   8131c:	1885883a 	add	r2,r3,r2
   81320:	e0bfff15 	stw	r2,-4(fp)
   81324:	00000606 	br	81340 <_do_ctors+0x40>
        (*ctor) (); 
   81328:	e0bfff17 	ldw	r2,-4(fp)
   8132c:	10800017 	ldw	r2,0(r2)
   81330:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81334:	e0bfff17 	ldw	r2,-4(fp)
   81338:	10bfff04 	addi	r2,r2,-4
   8133c:	e0bfff15 	stw	r2,-4(fp)
   81340:	e0ffff17 	ldw	r3,-4(fp)
   81344:	00800234 	movhi	r2,8
   81348:	10893e04 	addi	r2,r2,9464
   8134c:	18bff62e 	bgeu	r3,r2,81328 <_do_ctors+0x28>
        (*ctor) (); 
}
   81350:	e037883a 	mov	sp,fp
   81354:	dfc00117 	ldw	ra,4(sp)
   81358:	df000017 	ldw	fp,0(sp)
   8135c:	dec00204 	addi	sp,sp,8
   81360:	f800283a 	ret

00081364 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   81364:	defffd04 	addi	sp,sp,-12
   81368:	dfc00215 	stw	ra,8(sp)
   8136c:	df000115 	stw	fp,4(sp)
   81370:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81374:	00bfff04 	movi	r2,-4
   81378:	00c00234 	movhi	r3,8
   8137c:	18c93f04 	addi	r3,r3,9468
   81380:	1885883a 	add	r2,r3,r2
   81384:	e0bfff15 	stw	r2,-4(fp)
   81388:	00000606 	br	813a4 <_do_dtors+0x40>
        (*dtor) (); 
   8138c:	e0bfff17 	ldw	r2,-4(fp)
   81390:	10800017 	ldw	r2,0(r2)
   81394:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81398:	e0bfff17 	ldw	r2,-4(fp)
   8139c:	10bfff04 	addi	r2,r2,-4
   813a0:	e0bfff15 	stw	r2,-4(fp)
   813a4:	e0ffff17 	ldw	r3,-4(fp)
   813a8:	00800234 	movhi	r2,8
   813ac:	10893f04 	addi	r2,r2,9468
   813b0:	18bff62e 	bgeu	r3,r2,8138c <_do_dtors+0x28>
        (*dtor) (); 
}
   813b4:	e037883a 	mov	sp,fp
   813b8:	dfc00117 	ldw	ra,4(sp)
   813bc:	df000017 	ldw	fp,0(sp)
   813c0:	dec00204 	addi	sp,sp,8
   813c4:	f800283a 	ret

000813c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   813c8:	deffff04 	addi	sp,sp,-4
   813cc:	df000015 	stw	fp,0(sp)
   813d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   813d4:	e037883a 	mov	sp,fp
   813d8:	df000017 	ldw	fp,0(sp)
   813dc:	dec00104 	addi	sp,sp,4
   813e0:	f800283a 	ret

000813e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   813e4:	defff904 	addi	sp,sp,-28
   813e8:	dfc00615 	stw	ra,24(sp)
   813ec:	df000515 	stw	fp,20(sp)
   813f0:	df000504 	addi	fp,sp,20
   813f4:	e13ffc15 	stw	r4,-16(fp)
   813f8:	e17ffd15 	stw	r5,-12(fp)
   813fc:	e1bffe15 	stw	r6,-8(fp)
   81400:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81404:	e0800217 	ldw	r2,8(fp)
   81408:	d8800015 	stw	r2,0(sp)
   8140c:	e13ffc17 	ldw	r4,-16(fp)
   81410:	e17ffd17 	ldw	r5,-12(fp)
   81414:	e1bffe17 	ldw	r6,-8(fp)
   81418:	e1ffff17 	ldw	r7,-4(fp)
   8141c:	00815b80 	call	815b8 <alt_iic_isr_register>
}  
   81420:	e037883a 	mov	sp,fp
   81424:	dfc00117 	ldw	ra,4(sp)
   81428:	df000017 	ldw	fp,0(sp)
   8142c:	dec00204 	addi	sp,sp,8
   81430:	f800283a 	ret

00081434 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   81434:	defff904 	addi	sp,sp,-28
   81438:	df000615 	stw	fp,24(sp)
   8143c:	df000604 	addi	fp,sp,24
   81440:	e13ffe15 	stw	r4,-8(fp)
   81444:	e17fff15 	stw	r5,-4(fp)
   81448:	e0bfff17 	ldw	r2,-4(fp)
   8144c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81450:	0005303a 	rdctl	r2,status
   81454:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81458:	e0fffb17 	ldw	r3,-20(fp)
   8145c:	00bfff84 	movi	r2,-2
   81460:	1884703a 	and	r2,r3,r2
   81464:	1001703a 	wrctl	status,r2
  
  return context;
   81468:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8146c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   81470:	e0fffc17 	ldw	r3,-16(fp)
   81474:	00800044 	movi	r2,1
   81478:	10c4983a 	sll	r2,r2,r3
   8147c:	1007883a 	mov	r3,r2
   81480:	00800234 	movhi	r2,8
   81484:	10947204 	addi	r2,r2,20936
   81488:	10800017 	ldw	r2,0(r2)
   8148c:	1886b03a 	or	r3,r3,r2
   81490:	00800234 	movhi	r2,8
   81494:	10947204 	addi	r2,r2,20936
   81498:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8149c:	00800234 	movhi	r2,8
   814a0:	10947204 	addi	r2,r2,20936
   814a4:	10800017 	ldw	r2,0(r2)
   814a8:	100170fa 	wrctl	ienable,r2
   814ac:	e0bffd17 	ldw	r2,-12(fp)
   814b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   814b4:	e0bffa17 	ldw	r2,-24(fp)
   814b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   814bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   814c0:	e037883a 	mov	sp,fp
   814c4:	df000017 	ldw	fp,0(sp)
   814c8:	dec00104 	addi	sp,sp,4
   814cc:	f800283a 	ret

000814d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   814d0:	defff904 	addi	sp,sp,-28
   814d4:	df000615 	stw	fp,24(sp)
   814d8:	df000604 	addi	fp,sp,24
   814dc:	e13ffe15 	stw	r4,-8(fp)
   814e0:	e17fff15 	stw	r5,-4(fp)
   814e4:	e0bfff17 	ldw	r2,-4(fp)
   814e8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   814ec:	0005303a 	rdctl	r2,status
   814f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   814f4:	e0fffb17 	ldw	r3,-20(fp)
   814f8:	00bfff84 	movi	r2,-2
   814fc:	1884703a 	and	r2,r3,r2
   81500:	1001703a 	wrctl	status,r2
  
  return context;
   81504:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   81508:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8150c:	e0fffc17 	ldw	r3,-16(fp)
   81510:	00800044 	movi	r2,1
   81514:	10c4983a 	sll	r2,r2,r3
   81518:	0084303a 	nor	r2,zero,r2
   8151c:	1007883a 	mov	r3,r2
   81520:	00800234 	movhi	r2,8
   81524:	10947204 	addi	r2,r2,20936
   81528:	10800017 	ldw	r2,0(r2)
   8152c:	1886703a 	and	r3,r3,r2
   81530:	00800234 	movhi	r2,8
   81534:	10947204 	addi	r2,r2,20936
   81538:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8153c:	00800234 	movhi	r2,8
   81540:	10947204 	addi	r2,r2,20936
   81544:	10800017 	ldw	r2,0(r2)
   81548:	100170fa 	wrctl	ienable,r2
   8154c:	e0bffd17 	ldw	r2,-12(fp)
   81550:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81554:	e0bffa17 	ldw	r2,-24(fp)
   81558:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8155c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   81560:	e037883a 	mov	sp,fp
   81564:	df000017 	ldw	fp,0(sp)
   81568:	dec00104 	addi	sp,sp,4
   8156c:	f800283a 	ret

00081570 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   81570:	defffc04 	addi	sp,sp,-16
   81574:	df000315 	stw	fp,12(sp)
   81578:	df000304 	addi	fp,sp,12
   8157c:	e13ffe15 	stw	r4,-8(fp)
   81580:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   81584:	000530fa 	rdctl	r2,ienable
   81588:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8158c:	e0ffff17 	ldw	r3,-4(fp)
   81590:	00800044 	movi	r2,1
   81594:	10c4983a 	sll	r2,r2,r3
   81598:	1007883a 	mov	r3,r2
   8159c:	e0bffd17 	ldw	r2,-12(fp)
   815a0:	1884703a 	and	r2,r3,r2
   815a4:	1004c03a 	cmpne	r2,r2,zero
}
   815a8:	e037883a 	mov	sp,fp
   815ac:	df000017 	ldw	fp,0(sp)
   815b0:	dec00104 	addi	sp,sp,4
   815b4:	f800283a 	ret

000815b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   815b8:	defff404 	addi	sp,sp,-48
   815bc:	dfc00b15 	stw	ra,44(sp)
   815c0:	df000a15 	stw	fp,40(sp)
   815c4:	df000a04 	addi	fp,sp,40
   815c8:	e13ffb15 	stw	r4,-20(fp)
   815cc:	e17ffc15 	stw	r5,-16(fp)
   815d0:	e1bffd15 	stw	r6,-12(fp)
   815d4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   815d8:	00bffa84 	movi	r2,-22
   815dc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   815e0:	e0bffc17 	ldw	r2,-16(fp)
   815e4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   815e8:	e0bff917 	ldw	r2,-28(fp)
   815ec:	10800808 	cmpgei	r2,r2,32
   815f0:	1000291e 	bne	r2,zero,81698 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   815f4:	0005303a 	rdctl	r2,status
   815f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   815fc:	e0fff717 	ldw	r3,-36(fp)
   81600:	00bfff84 	movi	r2,-2
   81604:	1884703a 	and	r2,r3,r2
   81608:	1001703a 	wrctl	status,r2
  
  return context;
   8160c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   81610:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   81614:	e0bff917 	ldw	r2,-28(fp)
   81618:	00c00234 	movhi	r3,8
   8161c:	18d47604 	addi	r3,r3,20952
   81620:	100490fa 	slli	r2,r2,3
   81624:	10c7883a 	add	r3,r2,r3
   81628:	e0bffd17 	ldw	r2,-12(fp)
   8162c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   81630:	e0bff917 	ldw	r2,-28(fp)
   81634:	00c00234 	movhi	r3,8
   81638:	18d47604 	addi	r3,r3,20952
   8163c:	100490fa 	slli	r2,r2,3
   81640:	10c5883a 	add	r2,r2,r3
   81644:	10c00104 	addi	r3,r2,4
   81648:	e0bffe17 	ldw	r2,-8(fp)
   8164c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   81650:	e0bffd17 	ldw	r2,-12(fp)
   81654:	1005003a 	cmpeq	r2,r2,zero
   81658:	1000051e 	bne	r2,zero,81670 <alt_iic_isr_register+0xb8>
   8165c:	e17ff917 	ldw	r5,-28(fp)
   81660:	e13ffb17 	ldw	r4,-20(fp)
   81664:	00814340 	call	81434 <alt_ic_irq_enable>
   81668:	e0bfff15 	stw	r2,-4(fp)
   8166c:	00000406 	br	81680 <alt_iic_isr_register+0xc8>
   81670:	e17ff917 	ldw	r5,-28(fp)
   81674:	e13ffb17 	ldw	r4,-20(fp)
   81678:	00814d00 	call	814d0 <alt_ic_irq_disable>
   8167c:	e0bfff15 	stw	r2,-4(fp)
   81680:	e0bfff17 	ldw	r2,-4(fp)
   81684:	e0bffa15 	stw	r2,-24(fp)
   81688:	e0bff817 	ldw	r2,-32(fp)
   8168c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81690:	e0bff617 	ldw	r2,-40(fp)
   81694:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   81698:	e0bffa17 	ldw	r2,-24(fp)
}
   8169c:	e037883a 	mov	sp,fp
   816a0:	dfc00117 	ldw	ra,4(sp)
   816a4:	df000017 	ldw	fp,0(sp)
   816a8:	dec00204 	addi	sp,sp,8
   816ac:	f800283a 	ret

000816b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   816b0:	defff804 	addi	sp,sp,-32
   816b4:	dfc00715 	stw	ra,28(sp)
   816b8:	df000615 	stw	fp,24(sp)
   816bc:	dc000515 	stw	r16,20(sp)
   816c0:	df000504 	addi	fp,sp,20
   816c4:	e13ffc15 	stw	r4,-16(fp)
   816c8:	e17ffd15 	stw	r5,-12(fp)
   816cc:	e1bffe15 	stw	r6,-8(fp)
   816d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   816d4:	e13ffd17 	ldw	r4,-12(fp)
   816d8:	e17ffe17 	ldw	r5,-8(fp)
   816dc:	e1bfff17 	ldw	r6,-4(fp)
   816e0:	00818f80 	call	818f8 <open>
   816e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   816e8:	e0bffb17 	ldw	r2,-20(fp)
   816ec:	1004803a 	cmplt	r2,r2,zero
   816f0:	10001f1e 	bne	r2,zero,81770 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   816f4:	e13ffb17 	ldw	r4,-20(fp)
   816f8:	04000234 	movhi	r16,8
   816fc:	840d7304 	addi	r16,r16,13772
   81700:	01400304 	movi	r5,12
   81704:	00824600 	call	82460 <__mulsi3>
   81708:	1405883a 	add	r2,r2,r16
   8170c:	10c00017 	ldw	r3,0(r2)
   81710:	e0bffc17 	ldw	r2,-16(fp)
   81714:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   81718:	e13ffb17 	ldw	r4,-20(fp)
   8171c:	04000234 	movhi	r16,8
   81720:	840d7304 	addi	r16,r16,13772
   81724:	01400304 	movi	r5,12
   81728:	00824600 	call	82460 <__mulsi3>
   8172c:	1405883a 	add	r2,r2,r16
   81730:	10800104 	addi	r2,r2,4
   81734:	10c00017 	ldw	r3,0(r2)
   81738:	e0bffc17 	ldw	r2,-16(fp)
   8173c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   81740:	e13ffb17 	ldw	r4,-20(fp)
   81744:	04000234 	movhi	r16,8
   81748:	840d7304 	addi	r16,r16,13772
   8174c:	01400304 	movi	r5,12
   81750:	00824600 	call	82460 <__mulsi3>
   81754:	1405883a 	add	r2,r2,r16
   81758:	10800204 	addi	r2,r2,8
   8175c:	10c00017 	ldw	r3,0(r2)
   81760:	e0bffc17 	ldw	r2,-16(fp)
   81764:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   81768:	e13ffb17 	ldw	r4,-20(fp)
   8176c:	0081ae40 	call	81ae4 <alt_release_fd>
  }
} 
   81770:	e037883a 	mov	sp,fp
   81774:	dfc00217 	ldw	ra,8(sp)
   81778:	df000117 	ldw	fp,4(sp)
   8177c:	dc000017 	ldw	r16,0(sp)
   81780:	dec00304 	addi	sp,sp,12
   81784:	f800283a 	ret

00081788 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   81788:	defffb04 	addi	sp,sp,-20
   8178c:	dfc00415 	stw	ra,16(sp)
   81790:	df000315 	stw	fp,12(sp)
   81794:	df000304 	addi	fp,sp,12
   81798:	e13ffd15 	stw	r4,-12(fp)
   8179c:	e17ffe15 	stw	r5,-8(fp)
   817a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   817a4:	01000234 	movhi	r4,8
   817a8:	210d7604 	addi	r4,r4,13784
   817ac:	e17ffd17 	ldw	r5,-12(fp)
   817b0:	01800044 	movi	r6,1
   817b4:	01c07fc4 	movi	r7,511
   817b8:	00816b00 	call	816b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   817bc:	01000234 	movhi	r4,8
   817c0:	210d7304 	addi	r4,r4,13772
   817c4:	e17ffe17 	ldw	r5,-8(fp)
   817c8:	000d883a 	mov	r6,zero
   817cc:	01c07fc4 	movi	r7,511
   817d0:	00816b00 	call	816b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   817d4:	01000234 	movhi	r4,8
   817d8:	210d7904 	addi	r4,r4,13796
   817dc:	e17fff17 	ldw	r5,-4(fp)
   817e0:	01800044 	movi	r6,1
   817e4:	01c07fc4 	movi	r7,511
   817e8:	00816b00 	call	816b0 <alt_open_fd>
}  
   817ec:	e037883a 	mov	sp,fp
   817f0:	dfc00117 	ldw	ra,4(sp)
   817f4:	df000017 	ldw	fp,0(sp)
   817f8:	dec00204 	addi	sp,sp,8
   817fc:	f800283a 	ret

00081800 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   81800:	defffa04 	addi	sp,sp,-24
   81804:	dfc00515 	stw	ra,20(sp)
   81808:	df000415 	stw	fp,16(sp)
   8180c:	dc000315 	stw	r16,12(sp)
   81810:	df000304 	addi	fp,sp,12
   81814:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81818:	e0bffe17 	ldw	r2,-8(fp)
   8181c:	10800217 	ldw	r2,8(r2)
   81820:	10d00034 	orhi	r3,r2,16384
   81824:	e0bffe17 	ldw	r2,-8(fp)
   81828:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8182c:	e03ffd15 	stw	zero,-12(fp)
   81830:	00002306 	br	818c0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81834:	e13ffd17 	ldw	r4,-12(fp)
   81838:	04000234 	movhi	r16,8
   8183c:	840d7304 	addi	r16,r16,13772
   81840:	01400304 	movi	r5,12
   81844:	00824600 	call	82460 <__mulsi3>
   81848:	1405883a 	add	r2,r2,r16
   8184c:	10c00017 	ldw	r3,0(r2)
   81850:	e0bffe17 	ldw	r2,-8(fp)
   81854:	10800017 	ldw	r2,0(r2)
   81858:	1880161e 	bne	r3,r2,818b4 <alt_file_locked+0xb4>
   8185c:	e13ffd17 	ldw	r4,-12(fp)
   81860:	04000234 	movhi	r16,8
   81864:	840d7304 	addi	r16,r16,13772
   81868:	01400304 	movi	r5,12
   8186c:	00824600 	call	82460 <__mulsi3>
   81870:	1405883a 	add	r2,r2,r16
   81874:	10800204 	addi	r2,r2,8
   81878:	10800017 	ldw	r2,0(r2)
   8187c:	1004403a 	cmpge	r2,r2,zero
   81880:	10000c1e 	bne	r2,zero,818b4 <alt_file_locked+0xb4>
   81884:	e13ffd17 	ldw	r4,-12(fp)
   81888:	01400304 	movi	r5,12
   8188c:	00824600 	call	82460 <__mulsi3>
   81890:	1007883a 	mov	r3,r2
   81894:	00800234 	movhi	r2,8
   81898:	108d7304 	addi	r2,r2,13772
   8189c:	1887883a 	add	r3,r3,r2
   818a0:	e0bffe17 	ldw	r2,-8(fp)
   818a4:	18800326 	beq	r3,r2,818b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   818a8:	00bffcc4 	movi	r2,-13
   818ac:	e0bfff15 	stw	r2,-4(fp)
   818b0:	00000a06 	br	818dc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   818b4:	e0bffd17 	ldw	r2,-12(fp)
   818b8:	10800044 	addi	r2,r2,1
   818bc:	e0bffd15 	stw	r2,-12(fp)
   818c0:	00800234 	movhi	r2,8
   818c4:	108ed704 	addi	r2,r2,15196
   818c8:	10800017 	ldw	r2,0(r2)
   818cc:	1007883a 	mov	r3,r2
   818d0:	e0bffd17 	ldw	r2,-12(fp)
   818d4:	18bfd72e 	bgeu	r3,r2,81834 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   818d8:	e03fff15 	stw	zero,-4(fp)
   818dc:	e0bfff17 	ldw	r2,-4(fp)
}
   818e0:	e037883a 	mov	sp,fp
   818e4:	dfc00217 	ldw	ra,8(sp)
   818e8:	df000117 	ldw	fp,4(sp)
   818ec:	dc000017 	ldw	r16,0(sp)
   818f0:	dec00304 	addi	sp,sp,12
   818f4:	f800283a 	ret

000818f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   818f8:	defff404 	addi	sp,sp,-48
   818fc:	dfc00b15 	stw	ra,44(sp)
   81900:	df000a15 	stw	fp,40(sp)
   81904:	df000a04 	addi	fp,sp,40
   81908:	e13ffb15 	stw	r4,-20(fp)
   8190c:	e17ffc15 	stw	r5,-16(fp)
   81910:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   81914:	00bfffc4 	movi	r2,-1
   81918:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8191c:	00bffb44 	movi	r2,-19
   81920:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   81924:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   81928:	e13ffb17 	ldw	r4,-20(fp)
   8192c:	01400234 	movhi	r5,8
   81930:	294ed504 	addi	r5,r5,15188
   81934:	0081d200 	call	81d20 <alt_find_dev>
   81938:	e0bffa15 	stw	r2,-24(fp)
   8193c:	e0bffa17 	ldw	r2,-24(fp)
   81940:	1004c03a 	cmpne	r2,r2,zero
   81944:	1000051e 	bne	r2,zero,8195c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   81948:	e13ffb17 	ldw	r4,-20(fp)
   8194c:	0081db40 	call	81db4 <alt_find_file>
   81950:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   81954:	00800044 	movi	r2,1
   81958:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8195c:	e0bffa17 	ldw	r2,-24(fp)
   81960:	1005003a 	cmpeq	r2,r2,zero
   81964:	1000311e 	bne	r2,zero,81a2c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   81968:	e13ffa17 	ldw	r4,-24(fp)
   8196c:	0081ed40 	call	81ed4 <alt_get_fd>
   81970:	e0bff815 	stw	r2,-32(fp)
   81974:	e0bff817 	ldw	r2,-32(fp)
   81978:	1004403a 	cmpge	r2,r2,zero
   8197c:	1000031e 	bne	r2,zero,8198c <open+0x94>
    {
      status = index;
   81980:	e0bff817 	ldw	r2,-32(fp)
   81984:	e0bff715 	stw	r2,-36(fp)
   81988:	00002a06 	br	81a34 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8198c:	e13ff817 	ldw	r4,-32(fp)
   81990:	01400304 	movi	r5,12
   81994:	00824600 	call	82460 <__mulsi3>
   81998:	1007883a 	mov	r3,r2
   8199c:	00800234 	movhi	r2,8
   819a0:	108d7304 	addi	r2,r2,13772
   819a4:	1885883a 	add	r2,r3,r2
   819a8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   819ac:	e0fffc17 	ldw	r3,-16(fp)
   819b0:	00900034 	movhi	r2,16384
   819b4:	10bfffc4 	addi	r2,r2,-1
   819b8:	1886703a 	and	r3,r3,r2
   819bc:	e0bff917 	ldw	r2,-28(fp)
   819c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   819c4:	e0bff617 	ldw	r2,-40(fp)
   819c8:	1004c03a 	cmpne	r2,r2,zero
   819cc:	1000061e 	bne	r2,zero,819e8 <open+0xf0>
   819d0:	e13ff917 	ldw	r4,-28(fp)
   819d4:	00818000 	call	81800 <alt_file_locked>
   819d8:	e0bff715 	stw	r2,-36(fp)
   819dc:	e0bff717 	ldw	r2,-36(fp)
   819e0:	1004803a 	cmplt	r2,r2,zero
   819e4:	1000131e 	bne	r2,zero,81a34 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   819e8:	e0bffa17 	ldw	r2,-24(fp)
   819ec:	10800317 	ldw	r2,12(r2)
   819f0:	1005003a 	cmpeq	r2,r2,zero
   819f4:	1000091e 	bne	r2,zero,81a1c <open+0x124>
   819f8:	e0bffa17 	ldw	r2,-24(fp)
   819fc:	10800317 	ldw	r2,12(r2)
   81a00:	e13ff917 	ldw	r4,-28(fp)
   81a04:	e17ffb17 	ldw	r5,-20(fp)
   81a08:	e1bffc17 	ldw	r6,-16(fp)
   81a0c:	e1fffd17 	ldw	r7,-12(fp)
   81a10:	103ee83a 	callr	r2
   81a14:	e0bfff15 	stw	r2,-4(fp)
   81a18:	00000106 	br	81a20 <open+0x128>
   81a1c:	e03fff15 	stw	zero,-4(fp)
   81a20:	e0bfff17 	ldw	r2,-4(fp)
   81a24:	e0bff715 	stw	r2,-36(fp)
   81a28:	00000206 	br	81a34 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   81a2c:	00bffb44 	movi	r2,-19
   81a30:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   81a34:	e0bff717 	ldw	r2,-36(fp)
   81a38:	1004403a 	cmpge	r2,r2,zero
   81a3c:	1000091e 	bne	r2,zero,81a64 <open+0x16c>
  {
    alt_release_fd (index);  
   81a40:	e13ff817 	ldw	r4,-32(fp)
   81a44:	0081ae40 	call	81ae4 <alt_release_fd>
    ALT_ERRNO = -status;
   81a48:	0081a840 	call	81a84 <alt_get_errno>
   81a4c:	e0fff717 	ldw	r3,-36(fp)
   81a50:	00c7c83a 	sub	r3,zero,r3
   81a54:	10c00015 	stw	r3,0(r2)
    return -1;
   81a58:	00bfffc4 	movi	r2,-1
   81a5c:	e0bffe15 	stw	r2,-8(fp)
   81a60:	00000206 	br	81a6c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   81a64:	e0bff817 	ldw	r2,-32(fp)
   81a68:	e0bffe15 	stw	r2,-8(fp)
   81a6c:	e0bffe17 	ldw	r2,-8(fp)
}
   81a70:	e037883a 	mov	sp,fp
   81a74:	dfc00117 	ldw	ra,4(sp)
   81a78:	df000017 	ldw	fp,0(sp)
   81a7c:	dec00204 	addi	sp,sp,8
   81a80:	f800283a 	ret

00081a84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81a84:	defffd04 	addi	sp,sp,-12
   81a88:	dfc00215 	stw	ra,8(sp)
   81a8c:	df000115 	stw	fp,4(sp)
   81a90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   81a94:	00800234 	movhi	r2,8
   81a98:	108ed804 	addi	r2,r2,15200
   81a9c:	10800017 	ldw	r2,0(r2)
   81aa0:	1005003a 	cmpeq	r2,r2,zero
   81aa4:	1000061e 	bne	r2,zero,81ac0 <alt_get_errno+0x3c>
   81aa8:	00800234 	movhi	r2,8
   81aac:	108ed804 	addi	r2,r2,15200
   81ab0:	10800017 	ldw	r2,0(r2)
   81ab4:	103ee83a 	callr	r2
   81ab8:	e0bfff15 	stw	r2,-4(fp)
   81abc:	00000306 	br	81acc <alt_get_errno+0x48>
   81ac0:	00800234 	movhi	r2,8
   81ac4:	10947504 	addi	r2,r2,20948
   81ac8:	e0bfff15 	stw	r2,-4(fp)
   81acc:	e0bfff17 	ldw	r2,-4(fp)
}
   81ad0:	e037883a 	mov	sp,fp
   81ad4:	dfc00117 	ldw	ra,4(sp)
   81ad8:	df000017 	ldw	fp,0(sp)
   81adc:	dec00204 	addi	sp,sp,8
   81ae0:	f800283a 	ret

00081ae4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   81ae4:	defffc04 	addi	sp,sp,-16
   81ae8:	dfc00315 	stw	ra,12(sp)
   81aec:	df000215 	stw	fp,8(sp)
   81af0:	dc000115 	stw	r16,4(sp)
   81af4:	df000104 	addi	fp,sp,4
   81af8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   81afc:	e0bfff17 	ldw	r2,-4(fp)
   81b00:	108000d0 	cmplti	r2,r2,3
   81b04:	10000f1e 	bne	r2,zero,81b44 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   81b08:	e13fff17 	ldw	r4,-4(fp)
   81b0c:	04000234 	movhi	r16,8
   81b10:	840d7304 	addi	r16,r16,13772
   81b14:	01400304 	movi	r5,12
   81b18:	00824600 	call	82460 <__mulsi3>
   81b1c:	1405883a 	add	r2,r2,r16
   81b20:	10800204 	addi	r2,r2,8
   81b24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   81b28:	e13fff17 	ldw	r4,-4(fp)
   81b2c:	04000234 	movhi	r16,8
   81b30:	840d7304 	addi	r16,r16,13772
   81b34:	01400304 	movi	r5,12
   81b38:	00824600 	call	82460 <__mulsi3>
   81b3c:	1405883a 	add	r2,r2,r16
   81b40:	10000015 	stw	zero,0(r2)
  }
}
   81b44:	e037883a 	mov	sp,fp
   81b48:	dfc00217 	ldw	ra,8(sp)
   81b4c:	df000117 	ldw	fp,4(sp)
   81b50:	dc000017 	ldw	r16,0(sp)
   81b54:	dec00304 	addi	sp,sp,12
   81b58:	f800283a 	ret

00081b5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   81b5c:	defffa04 	addi	sp,sp,-24
   81b60:	df000515 	stw	fp,20(sp)
   81b64:	df000504 	addi	fp,sp,20
   81b68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81b6c:	0005303a 	rdctl	r2,status
   81b70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81b74:	e0fffd17 	ldw	r3,-12(fp)
   81b78:	00bfff84 	movi	r2,-2
   81b7c:	1884703a 	and	r2,r3,r2
   81b80:	1001703a 	wrctl	status,r2
  
  return context;
   81b84:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   81b88:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   81b8c:	e0bfff17 	ldw	r2,-4(fp)
   81b90:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   81b94:	e0bffc17 	ldw	r2,-16(fp)
   81b98:	10c00017 	ldw	r3,0(r2)
   81b9c:	e0bffc17 	ldw	r2,-16(fp)
   81ba0:	10800117 	ldw	r2,4(r2)
   81ba4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   81ba8:	e0bffc17 	ldw	r2,-16(fp)
   81bac:	10c00117 	ldw	r3,4(r2)
   81bb0:	e0bffc17 	ldw	r2,-16(fp)
   81bb4:	10800017 	ldw	r2,0(r2)
   81bb8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   81bbc:	e0fffc17 	ldw	r3,-16(fp)
   81bc0:	e0bffc17 	ldw	r2,-16(fp)
   81bc4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   81bc8:	e0fffc17 	ldw	r3,-16(fp)
   81bcc:	e0bffc17 	ldw	r2,-16(fp)
   81bd0:	18800015 	stw	r2,0(r3)
   81bd4:	e0bffe17 	ldw	r2,-8(fp)
   81bd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81bdc:	e0bffb17 	ldw	r2,-20(fp)
   81be0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   81be4:	e037883a 	mov	sp,fp
   81be8:	df000017 	ldw	fp,0(sp)
   81bec:	dec00104 	addi	sp,sp,4
   81bf0:	f800283a 	ret

00081bf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   81bf4:	defffb04 	addi	sp,sp,-20
   81bf8:	dfc00415 	stw	ra,16(sp)
   81bfc:	df000315 	stw	fp,12(sp)
   81c00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   81c04:	d0a00717 	ldw	r2,-32740(gp)
   81c08:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   81c0c:	d0a5a117 	ldw	r2,-27004(gp)
   81c10:	10800044 	addi	r2,r2,1
   81c14:	d0a5a115 	stw	r2,-27004(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81c18:	00003106 	br	81ce0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   81c1c:	e0bffe17 	ldw	r2,-8(fp)
   81c20:	10800017 	ldw	r2,0(r2)
   81c24:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   81c28:	e0bffe17 	ldw	r2,-8(fp)
   81c2c:	10800403 	ldbu	r2,16(r2)
   81c30:	10803fcc 	andi	r2,r2,255
   81c34:	1005003a 	cmpeq	r2,r2,zero
   81c38:	1000051e 	bne	r2,zero,81c50 <alt_tick+0x5c>
   81c3c:	d0a5a117 	ldw	r2,-27004(gp)
   81c40:	1004c03a 	cmpne	r2,r2,zero
   81c44:	1000021e 	bne	r2,zero,81c50 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   81c48:	e0bffe17 	ldw	r2,-8(fp)
   81c4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   81c50:	e0bffe17 	ldw	r2,-8(fp)
   81c54:	10c00217 	ldw	r3,8(r2)
   81c58:	d0a5a117 	ldw	r2,-27004(gp)
   81c5c:	10c01e36 	bltu	r2,r3,81cd8 <alt_tick+0xe4>
   81c60:	e0bffe17 	ldw	r2,-8(fp)
   81c64:	10800403 	ldbu	r2,16(r2)
   81c68:	10803fcc 	andi	r2,r2,255
   81c6c:	1004c03a 	cmpne	r2,r2,zero
   81c70:	1000191e 	bne	r2,zero,81cd8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   81c74:	e0bffe17 	ldw	r2,-8(fp)
   81c78:	10c00317 	ldw	r3,12(r2)
   81c7c:	e0bffe17 	ldw	r2,-8(fp)
   81c80:	11000517 	ldw	r4,20(r2)
   81c84:	183ee83a 	callr	r3
   81c88:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   81c8c:	e0bffd17 	ldw	r2,-12(fp)
   81c90:	1004c03a 	cmpne	r2,r2,zero
   81c94:	1000031e 	bne	r2,zero,81ca4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   81c98:	e13ffe17 	ldw	r4,-8(fp)
   81c9c:	0081b5c0 	call	81b5c <alt_alarm_stop>
   81ca0:	00000d06 	br	81cd8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   81ca4:	e0bffe17 	ldw	r2,-8(fp)
   81ca8:	10c00217 	ldw	r3,8(r2)
   81cac:	e0bffd17 	ldw	r2,-12(fp)
   81cb0:	1887883a 	add	r3,r3,r2
   81cb4:	e0bffe17 	ldw	r2,-8(fp)
   81cb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   81cbc:	e0bffe17 	ldw	r2,-8(fp)
   81cc0:	10c00217 	ldw	r3,8(r2)
   81cc4:	d0a5a117 	ldw	r2,-27004(gp)
   81cc8:	1880032e 	bgeu	r3,r2,81cd8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   81ccc:	e0fffe17 	ldw	r3,-8(fp)
   81cd0:	00800044 	movi	r2,1
   81cd4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   81cd8:	e0bfff17 	ldw	r2,-4(fp)
   81cdc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81ce0:	d0e00704 	addi	r3,gp,-32740
   81ce4:	e0bffe17 	ldw	r2,-8(fp)
   81ce8:	10ffcc1e 	bne	r2,r3,81c1c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   81cec:	e037883a 	mov	sp,fp
   81cf0:	dfc00117 	ldw	ra,4(sp)
   81cf4:	df000017 	ldw	fp,0(sp)
   81cf8:	dec00204 	addi	sp,sp,8
   81cfc:	f800283a 	ret

00081d00 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   81d00:	deffff04 	addi	sp,sp,-4
   81d04:	df000015 	stw	fp,0(sp)
   81d08:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   81d0c:	000170fa 	wrctl	ienable,zero
}
   81d10:	e037883a 	mov	sp,fp
   81d14:	df000017 	ldw	fp,0(sp)
   81d18:	dec00104 	addi	sp,sp,4
   81d1c:	f800283a 	ret

00081d20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   81d20:	defff904 	addi	sp,sp,-28
   81d24:	dfc00615 	stw	ra,24(sp)
   81d28:	df000515 	stw	fp,20(sp)
   81d2c:	df000504 	addi	fp,sp,20
   81d30:	e13ffd15 	stw	r4,-12(fp)
   81d34:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   81d38:	e0bffe17 	ldw	r2,-8(fp)
   81d3c:	10800017 	ldw	r2,0(r2)
   81d40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   81d44:	e13ffd17 	ldw	r4,-12(fp)
   81d48:	00821040 	call	82104 <strlen>
   81d4c:	10800044 	addi	r2,r2,1
   81d50:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81d54:	00000d06 	br	81d8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81d58:	e0bffc17 	ldw	r2,-16(fp)
   81d5c:	11000217 	ldw	r4,8(r2)
   81d60:	e1bffb17 	ldw	r6,-20(fp)
   81d64:	e17ffd17 	ldw	r5,-12(fp)
   81d68:	0081ff00 	call	81ff0 <memcmp>
   81d6c:	1004c03a 	cmpne	r2,r2,zero
   81d70:	1000031e 	bne	r2,zero,81d80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   81d74:	e0bffc17 	ldw	r2,-16(fp)
   81d78:	e0bfff15 	stw	r2,-4(fp)
   81d7c:	00000706 	br	81d9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   81d80:	e0bffc17 	ldw	r2,-16(fp)
   81d84:	10800017 	ldw	r2,0(r2)
   81d88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81d8c:	e0fffe17 	ldw	r3,-8(fp)
   81d90:	e0bffc17 	ldw	r2,-16(fp)
   81d94:	10fff01e 	bne	r2,r3,81d58 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   81d98:	e03fff15 	stw	zero,-4(fp)
   81d9c:	e0bfff17 	ldw	r2,-4(fp)
}
   81da0:	e037883a 	mov	sp,fp
   81da4:	dfc00117 	ldw	ra,4(sp)
   81da8:	df000017 	ldw	fp,0(sp)
   81dac:	dec00204 	addi	sp,sp,8
   81db0:	f800283a 	ret

00081db4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   81db4:	defffa04 	addi	sp,sp,-24
   81db8:	dfc00515 	stw	ra,20(sp)
   81dbc:	df000415 	stw	fp,16(sp)
   81dc0:	df000404 	addi	fp,sp,16
   81dc4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81dc8:	00800234 	movhi	r2,8
   81dcc:	108ed304 	addi	r2,r2,15180
   81dd0:	10800017 	ldw	r2,0(r2)
   81dd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81dd8:	00003306 	br	81ea8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   81ddc:	e0bffd17 	ldw	r2,-12(fp)
   81de0:	11000217 	ldw	r4,8(r2)
   81de4:	00821040 	call	82104 <strlen>
   81de8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   81dec:	e0bffd17 	ldw	r2,-12(fp)
   81df0:	10c00217 	ldw	r3,8(r2)
   81df4:	e0bffc17 	ldw	r2,-16(fp)
   81df8:	1885883a 	add	r2,r3,r2
   81dfc:	10bfffc4 	addi	r2,r2,-1
   81e00:	10800003 	ldbu	r2,0(r2)
   81e04:	10803fcc 	andi	r2,r2,255
   81e08:	1080201c 	xori	r2,r2,128
   81e0c:	10bfe004 	addi	r2,r2,-128
   81e10:	10800bd8 	cmpnei	r2,r2,47
   81e14:	1000031e 	bne	r2,zero,81e24 <alt_find_file+0x70>
    {
      len -= 1;
   81e18:	e0bffc17 	ldw	r2,-16(fp)
   81e1c:	10bfffc4 	addi	r2,r2,-1
   81e20:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81e24:	e0bffc17 	ldw	r2,-16(fp)
   81e28:	1007883a 	mov	r3,r2
   81e2c:	e0bffe17 	ldw	r2,-8(fp)
   81e30:	1885883a 	add	r2,r3,r2
   81e34:	10800003 	ldbu	r2,0(r2)
   81e38:	10803fcc 	andi	r2,r2,255
   81e3c:	1080201c 	xori	r2,r2,128
   81e40:	10bfe004 	addi	r2,r2,-128
   81e44:	10800be0 	cmpeqi	r2,r2,47
   81e48:	10000a1e 	bne	r2,zero,81e74 <alt_find_file+0xc0>
   81e4c:	e0bffc17 	ldw	r2,-16(fp)
   81e50:	1007883a 	mov	r3,r2
   81e54:	e0bffe17 	ldw	r2,-8(fp)
   81e58:	1885883a 	add	r2,r3,r2
   81e5c:	10800003 	ldbu	r2,0(r2)
   81e60:	10803fcc 	andi	r2,r2,255
   81e64:	1080201c 	xori	r2,r2,128
   81e68:	10bfe004 	addi	r2,r2,-128
   81e6c:	1004c03a 	cmpne	r2,r2,zero
   81e70:	10000a1e 	bne	r2,zero,81e9c <alt_find_file+0xe8>
   81e74:	e0bffd17 	ldw	r2,-12(fp)
   81e78:	11000217 	ldw	r4,8(r2)
   81e7c:	e1bffc17 	ldw	r6,-16(fp)
   81e80:	e17ffe17 	ldw	r5,-8(fp)
   81e84:	0081ff00 	call	81ff0 <memcmp>
   81e88:	1004c03a 	cmpne	r2,r2,zero
   81e8c:	1000031e 	bne	r2,zero,81e9c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   81e90:	e0bffd17 	ldw	r2,-12(fp)
   81e94:	e0bfff15 	stw	r2,-4(fp)
   81e98:	00000806 	br	81ebc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   81e9c:	e0bffd17 	ldw	r2,-12(fp)
   81ea0:	10800017 	ldw	r2,0(r2)
   81ea4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81ea8:	00c00234 	movhi	r3,8
   81eac:	18ced304 	addi	r3,r3,15180
   81eb0:	e0bffd17 	ldw	r2,-12(fp)
   81eb4:	10ffc91e 	bne	r2,r3,81ddc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   81eb8:	e03fff15 	stw	zero,-4(fp)
   81ebc:	e0bfff17 	ldw	r2,-4(fp)
}
   81ec0:	e037883a 	mov	sp,fp
   81ec4:	dfc00117 	ldw	ra,4(sp)
   81ec8:	df000017 	ldw	fp,0(sp)
   81ecc:	dec00204 	addi	sp,sp,8
   81ed0:	f800283a 	ret

00081ed4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81ed4:	defffa04 	addi	sp,sp,-24
   81ed8:	dfc00515 	stw	ra,20(sp)
   81edc:	df000415 	stw	fp,16(sp)
   81ee0:	dc000315 	stw	r16,12(sp)
   81ee4:	df000304 	addi	fp,sp,12
   81ee8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   81eec:	00bffa04 	movi	r2,-24
   81ef0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81ef4:	e03ffe15 	stw	zero,-8(fp)
   81ef8:	00002006 	br	81f7c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   81efc:	e13ffe17 	ldw	r4,-8(fp)
   81f00:	04000234 	movhi	r16,8
   81f04:	840d7304 	addi	r16,r16,13772
   81f08:	01400304 	movi	r5,12
   81f0c:	00824600 	call	82460 <__mulsi3>
   81f10:	1405883a 	add	r2,r2,r16
   81f14:	10800017 	ldw	r2,0(r2)
   81f18:	1004c03a 	cmpne	r2,r2,zero
   81f1c:	1000141e 	bne	r2,zero,81f70 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   81f20:	e13ffe17 	ldw	r4,-8(fp)
   81f24:	04000234 	movhi	r16,8
   81f28:	840d7304 	addi	r16,r16,13772
   81f2c:	01400304 	movi	r5,12
   81f30:	00824600 	call	82460 <__mulsi3>
   81f34:	1407883a 	add	r3,r2,r16
   81f38:	e0bfff17 	ldw	r2,-4(fp)
   81f3c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   81f40:	00800234 	movhi	r2,8
   81f44:	108ed704 	addi	r2,r2,15196
   81f48:	10c00017 	ldw	r3,0(r2)
   81f4c:	e0bffe17 	ldw	r2,-8(fp)
   81f50:	1880040e 	bge	r3,r2,81f64 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   81f54:	00c00234 	movhi	r3,8
   81f58:	18ced704 	addi	r3,r3,15196
   81f5c:	e0bffe17 	ldw	r2,-8(fp)
   81f60:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   81f64:	e0bffe17 	ldw	r2,-8(fp)
   81f68:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   81f6c:	00000606 	br	81f88 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81f70:	e0bffe17 	ldw	r2,-8(fp)
   81f74:	10800044 	addi	r2,r2,1
   81f78:	e0bffe15 	stw	r2,-8(fp)
   81f7c:	e0bffe17 	ldw	r2,-8(fp)
   81f80:	10800810 	cmplti	r2,r2,32
   81f84:	103fdd1e 	bne	r2,zero,81efc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   81f88:	e0bffd17 	ldw	r2,-12(fp)
}
   81f8c:	e037883a 	mov	sp,fp
   81f90:	dfc00217 	ldw	ra,8(sp)
   81f94:	df000117 	ldw	fp,4(sp)
   81f98:	dc000017 	ldw	r16,0(sp)
   81f9c:	dec00304 	addi	sp,sp,12
   81fa0:	f800283a 	ret

00081fa4 <atexit>:
   81fa4:	200b883a 	mov	r5,r4
   81fa8:	000d883a 	mov	r6,zero
   81fac:	0009883a 	mov	r4,zero
   81fb0:	000f883a 	mov	r7,zero
   81fb4:	00821781 	jmpi	82178 <__register_exitproc>

00081fb8 <exit>:
   81fb8:	defffe04 	addi	sp,sp,-8
   81fbc:	000b883a 	mov	r5,zero
   81fc0:	dc000015 	stw	r16,0(sp)
   81fc4:	dfc00115 	stw	ra,4(sp)
   81fc8:	2021883a 	mov	r16,r4
   81fcc:	00822b00 	call	822b0 <__call_exitprocs>
   81fd0:	00800234 	movhi	r2,8
   81fd4:	108edd04 	addi	r2,r2,15220
   81fd8:	11000017 	ldw	r4,0(r2)
   81fdc:	20800f17 	ldw	r2,60(r4)
   81fe0:	10000126 	beq	r2,zero,81fe8 <exit+0x30>
   81fe4:	103ee83a 	callr	r2
   81fe8:	8009883a 	mov	r4,r16
   81fec:	00824d80 	call	824d8 <_exit>

00081ff0 <memcmp>:
   81ff0:	00c000c4 	movi	r3,3
   81ff4:	1980032e 	bgeu	r3,r6,82004 <memcmp+0x14>
   81ff8:	2144b03a 	or	r2,r4,r5
   81ffc:	10c4703a 	and	r2,r2,r3
   82000:	10000f26 	beq	r2,zero,82040 <memcmp+0x50>
   82004:	31ffffc4 	addi	r7,r6,-1
   82008:	3000061e 	bne	r6,zero,82024 <memcmp+0x34>
   8200c:	00000a06 	br	82038 <memcmp+0x48>
   82010:	39ffffc4 	addi	r7,r7,-1
   82014:	00bfffc4 	movi	r2,-1
   82018:	21000044 	addi	r4,r4,1
   8201c:	29400044 	addi	r5,r5,1
   82020:	38800526 	beq	r7,r2,82038 <memcmp+0x48>
   82024:	20c00003 	ldbu	r3,0(r4)
   82028:	28800003 	ldbu	r2,0(r5)
   8202c:	18bff826 	beq	r3,r2,82010 <memcmp+0x20>
   82030:	1885c83a 	sub	r2,r3,r2
   82034:	f800283a 	ret
   82038:	0005883a 	mov	r2,zero
   8203c:	f800283a 	ret
   82040:	180f883a 	mov	r7,r3
   82044:	20c00017 	ldw	r3,0(r4)
   82048:	28800017 	ldw	r2,0(r5)
   8204c:	18bfed1e 	bne	r3,r2,82004 <memcmp+0x14>
   82050:	31bfff04 	addi	r6,r6,-4
   82054:	21000104 	addi	r4,r4,4
   82058:	29400104 	addi	r5,r5,4
   8205c:	39bff936 	bltu	r7,r6,82044 <memcmp+0x54>
   82060:	003fe806 	br	82004 <memcmp+0x14>

00082064 <memcpy>:
   82064:	01c003c4 	movi	r7,15
   82068:	2007883a 	mov	r3,r4
   8206c:	3980032e 	bgeu	r7,r6,8207c <memcpy+0x18>
   82070:	2904b03a 	or	r2,r5,r4
   82074:	108000cc 	andi	r2,r2,3
   82078:	10000926 	beq	r2,zero,820a0 <memcpy+0x3c>
   8207c:	30000626 	beq	r6,zero,82098 <memcpy+0x34>
   82080:	30cd883a 	add	r6,r6,r3
   82084:	28800003 	ldbu	r2,0(r5)
   82088:	29400044 	addi	r5,r5,1
   8208c:	18800005 	stb	r2,0(r3)
   82090:	18c00044 	addi	r3,r3,1
   82094:	30fffb1e 	bne	r6,r3,82084 <memcpy+0x20>
   82098:	2005883a 	mov	r2,r4
   8209c:	f800283a 	ret
   820a0:	3811883a 	mov	r8,r7
   820a4:	200f883a 	mov	r7,r4
   820a8:	28c00017 	ldw	r3,0(r5)
   820ac:	31bffc04 	addi	r6,r6,-16
   820b0:	38c00015 	stw	r3,0(r7)
   820b4:	28800117 	ldw	r2,4(r5)
   820b8:	38800115 	stw	r2,4(r7)
   820bc:	28c00217 	ldw	r3,8(r5)
   820c0:	38c00215 	stw	r3,8(r7)
   820c4:	28800317 	ldw	r2,12(r5)
   820c8:	29400404 	addi	r5,r5,16
   820cc:	38800315 	stw	r2,12(r7)
   820d0:	39c00404 	addi	r7,r7,16
   820d4:	41bff436 	bltu	r8,r6,820a8 <memcpy+0x44>
   820d8:	008000c4 	movi	r2,3
   820dc:	1180072e 	bgeu	r2,r6,820fc <memcpy+0x98>
   820e0:	1007883a 	mov	r3,r2
   820e4:	28800017 	ldw	r2,0(r5)
   820e8:	31bfff04 	addi	r6,r6,-4
   820ec:	29400104 	addi	r5,r5,4
   820f0:	38800015 	stw	r2,0(r7)
   820f4:	39c00104 	addi	r7,r7,4
   820f8:	19bffa36 	bltu	r3,r6,820e4 <memcpy+0x80>
   820fc:	3807883a 	mov	r3,r7
   82100:	003fde06 	br	8207c <memcpy+0x18>

00082104 <strlen>:
   82104:	208000cc 	andi	r2,r4,3
   82108:	2011883a 	mov	r8,r4
   8210c:	1000161e 	bne	r2,zero,82168 <strlen+0x64>
   82110:	20c00017 	ldw	r3,0(r4)
   82114:	017fbff4 	movhi	r5,65279
   82118:	297fbfc4 	addi	r5,r5,-257
   8211c:	01e02074 	movhi	r7,32897
   82120:	39e02004 	addi	r7,r7,-32640
   82124:	1945883a 	add	r2,r3,r5
   82128:	11c4703a 	and	r2,r2,r7
   8212c:	00c6303a 	nor	r3,zero,r3
   82130:	1886703a 	and	r3,r3,r2
   82134:	18000c1e 	bne	r3,zero,82168 <strlen+0x64>
   82138:	280d883a 	mov	r6,r5
   8213c:	380b883a 	mov	r5,r7
   82140:	21000104 	addi	r4,r4,4
   82144:	20800017 	ldw	r2,0(r4)
   82148:	1187883a 	add	r3,r2,r6
   8214c:	1946703a 	and	r3,r3,r5
   82150:	0084303a 	nor	r2,zero,r2
   82154:	10c4703a 	and	r2,r2,r3
   82158:	103ff926 	beq	r2,zero,82140 <strlen+0x3c>
   8215c:	20800007 	ldb	r2,0(r4)
   82160:	10000326 	beq	r2,zero,82170 <strlen+0x6c>
   82164:	21000044 	addi	r4,r4,1
   82168:	20800007 	ldb	r2,0(r4)
   8216c:	103ffd1e 	bne	r2,zero,82164 <strlen+0x60>
   82170:	2205c83a 	sub	r2,r4,r8
   82174:	f800283a 	ret

00082178 <__register_exitproc>:
   82178:	defffa04 	addi	sp,sp,-24
   8217c:	00800234 	movhi	r2,8
   82180:	108edd04 	addi	r2,r2,15220
   82184:	dc000015 	stw	r16,0(sp)
   82188:	14000017 	ldw	r16,0(r2)
   8218c:	dd000415 	stw	r20,16(sp)
   82190:	2829883a 	mov	r20,r5
   82194:	81405217 	ldw	r5,328(r16)
   82198:	dcc00315 	stw	r19,12(sp)
   8219c:	dc800215 	stw	r18,8(sp)
   821a0:	dc400115 	stw	r17,4(sp)
   821a4:	dfc00515 	stw	ra,20(sp)
   821a8:	2023883a 	mov	r17,r4
   821ac:	3027883a 	mov	r19,r6
   821b0:	3825883a 	mov	r18,r7
   821b4:	28002526 	beq	r5,zero,8224c <__register_exitproc+0xd4>
   821b8:	29000117 	ldw	r4,4(r5)
   821bc:	008007c4 	movi	r2,31
   821c0:	11002716 	blt	r2,r4,82260 <__register_exitproc+0xe8>
   821c4:	8800101e 	bne	r17,zero,82208 <__register_exitproc+0x90>
   821c8:	2105883a 	add	r2,r4,r4
   821cc:	1085883a 	add	r2,r2,r2
   821d0:	20c00044 	addi	r3,r4,1
   821d4:	1145883a 	add	r2,r2,r5
   821d8:	0009883a 	mov	r4,zero
   821dc:	15000215 	stw	r20,8(r2)
   821e0:	28c00115 	stw	r3,4(r5)
   821e4:	2005883a 	mov	r2,r4
   821e8:	dfc00517 	ldw	ra,20(sp)
   821ec:	dd000417 	ldw	r20,16(sp)
   821f0:	dcc00317 	ldw	r19,12(sp)
   821f4:	dc800217 	ldw	r18,8(sp)
   821f8:	dc400117 	ldw	r17,4(sp)
   821fc:	dc000017 	ldw	r16,0(sp)
   82200:	dec00604 	addi	sp,sp,24
   82204:	f800283a 	ret
   82208:	29802204 	addi	r6,r5,136
   8220c:	00800044 	movi	r2,1
   82210:	110e983a 	sll	r7,r2,r4
   82214:	30c04017 	ldw	r3,256(r6)
   82218:	2105883a 	add	r2,r4,r4
   8221c:	1085883a 	add	r2,r2,r2
   82220:	1185883a 	add	r2,r2,r6
   82224:	19c6b03a 	or	r3,r3,r7
   82228:	14802015 	stw	r18,128(r2)
   8222c:	14c00015 	stw	r19,0(r2)
   82230:	00800084 	movi	r2,2
   82234:	30c04015 	stw	r3,256(r6)
   82238:	88bfe31e 	bne	r17,r2,821c8 <__register_exitproc+0x50>
   8223c:	30804117 	ldw	r2,260(r6)
   82240:	11c4b03a 	or	r2,r2,r7
   82244:	30804115 	stw	r2,260(r6)
   82248:	003fdf06 	br	821c8 <__register_exitproc+0x50>
   8224c:	00800234 	movhi	r2,8
   82250:	1094b604 	addi	r2,r2,21208
   82254:	100b883a 	mov	r5,r2
   82258:	80805215 	stw	r2,328(r16)
   8225c:	003fd606 	br	821b8 <__register_exitproc+0x40>
   82260:	00800034 	movhi	r2,0
   82264:	10800004 	addi	r2,r2,0
   82268:	1000021e 	bne	r2,zero,82274 <__register_exitproc+0xfc>
   8226c:	013fffc4 	movi	r4,-1
   82270:	003fdc06 	br	821e4 <__register_exitproc+0x6c>
   82274:	01006404 	movi	r4,400
   82278:	103ee83a 	callr	r2
   8227c:	1007883a 	mov	r3,r2
   82280:	103ffa26 	beq	r2,zero,8226c <__register_exitproc+0xf4>
   82284:	80805217 	ldw	r2,328(r16)
   82288:	180b883a 	mov	r5,r3
   8228c:	18000115 	stw	zero,4(r3)
   82290:	18800015 	stw	r2,0(r3)
   82294:	80c05215 	stw	r3,328(r16)
   82298:	18006215 	stw	zero,392(r3)
   8229c:	18006315 	stw	zero,396(r3)
   822a0:	0009883a 	mov	r4,zero
   822a4:	883fc826 	beq	r17,zero,821c8 <__register_exitproc+0x50>
   822a8:	003fd706 	br	82208 <__register_exitproc+0x90>

000822ac <register_fini>:
   822ac:	f800283a 	ret

000822b0 <__call_exitprocs>:
   822b0:	00800234 	movhi	r2,8
   822b4:	108edd04 	addi	r2,r2,15220
   822b8:	10800017 	ldw	r2,0(r2)
   822bc:	defff304 	addi	sp,sp,-52
   822c0:	df000b15 	stw	fp,44(sp)
   822c4:	d8800115 	stw	r2,4(sp)
   822c8:	00800034 	movhi	r2,0
   822cc:	10800004 	addi	r2,r2,0
   822d0:	1005003a 	cmpeq	r2,r2,zero
   822d4:	d8800215 	stw	r2,8(sp)
   822d8:	d8800117 	ldw	r2,4(sp)
   822dc:	dd400815 	stw	r21,32(sp)
   822e0:	dd000715 	stw	r20,28(sp)
   822e4:	10805204 	addi	r2,r2,328
   822e8:	dfc00c15 	stw	ra,48(sp)
   822ec:	ddc00a15 	stw	r23,40(sp)
   822f0:	dd800915 	stw	r22,36(sp)
   822f4:	dcc00615 	stw	r19,24(sp)
   822f8:	dc800515 	stw	r18,20(sp)
   822fc:	dc400415 	stw	r17,16(sp)
   82300:	dc000315 	stw	r16,12(sp)
   82304:	282b883a 	mov	r21,r5
   82308:	2039883a 	mov	fp,r4
   8230c:	d8800015 	stw	r2,0(sp)
   82310:	2829003a 	cmpeq	r20,r5,zero
   82314:	d8800117 	ldw	r2,4(sp)
   82318:	14405217 	ldw	r17,328(r2)
   8231c:	88001026 	beq	r17,zero,82360 <__call_exitprocs+0xb0>
   82320:	ddc00017 	ldw	r23,0(sp)
   82324:	88800117 	ldw	r2,4(r17)
   82328:	8c802204 	addi	r18,r17,136
   8232c:	143fffc4 	addi	r16,r2,-1
   82330:	80000916 	blt	r16,zero,82358 <__call_exitprocs+0xa8>
   82334:	05bfffc4 	movi	r22,-1
   82338:	a000151e 	bne	r20,zero,82390 <__call_exitprocs+0xe0>
   8233c:	8409883a 	add	r4,r16,r16
   82340:	2105883a 	add	r2,r4,r4
   82344:	1485883a 	add	r2,r2,r18
   82348:	10c02017 	ldw	r3,128(r2)
   8234c:	a8c01126 	beq	r21,r3,82394 <__call_exitprocs+0xe4>
   82350:	843fffc4 	addi	r16,r16,-1
   82354:	85bff81e 	bne	r16,r22,82338 <__call_exitprocs+0x88>
   82358:	d8800217 	ldw	r2,8(sp)
   8235c:	10003126 	beq	r2,zero,82424 <__call_exitprocs+0x174>
   82360:	dfc00c17 	ldw	ra,48(sp)
   82364:	df000b17 	ldw	fp,44(sp)
   82368:	ddc00a17 	ldw	r23,40(sp)
   8236c:	dd800917 	ldw	r22,36(sp)
   82370:	dd400817 	ldw	r21,32(sp)
   82374:	dd000717 	ldw	r20,28(sp)
   82378:	dcc00617 	ldw	r19,24(sp)
   8237c:	dc800517 	ldw	r18,20(sp)
   82380:	dc400417 	ldw	r17,16(sp)
   82384:	dc000317 	ldw	r16,12(sp)
   82388:	dec00d04 	addi	sp,sp,52
   8238c:	f800283a 	ret
   82390:	8409883a 	add	r4,r16,r16
   82394:	88c00117 	ldw	r3,4(r17)
   82398:	2105883a 	add	r2,r4,r4
   8239c:	1445883a 	add	r2,r2,r17
   823a0:	18ffffc4 	addi	r3,r3,-1
   823a4:	11800217 	ldw	r6,8(r2)
   823a8:	1c001526 	beq	r3,r16,82400 <__call_exitprocs+0x150>
   823ac:	10000215 	stw	zero,8(r2)
   823b0:	303fe726 	beq	r6,zero,82350 <__call_exitprocs+0xa0>
   823b4:	00c00044 	movi	r3,1
   823b8:	1c06983a 	sll	r3,r3,r16
   823bc:	90804017 	ldw	r2,256(r18)
   823c0:	8cc00117 	ldw	r19,4(r17)
   823c4:	1884703a 	and	r2,r3,r2
   823c8:	10001426 	beq	r2,zero,8241c <__call_exitprocs+0x16c>
   823cc:	90804117 	ldw	r2,260(r18)
   823d0:	1884703a 	and	r2,r3,r2
   823d4:	10000c1e 	bne	r2,zero,82408 <__call_exitprocs+0x158>
   823d8:	2105883a 	add	r2,r4,r4
   823dc:	1485883a 	add	r2,r2,r18
   823e0:	11400017 	ldw	r5,0(r2)
   823e4:	e009883a 	mov	r4,fp
   823e8:	303ee83a 	callr	r6
   823ec:	88800117 	ldw	r2,4(r17)
   823f0:	98bfc81e 	bne	r19,r2,82314 <__call_exitprocs+0x64>
   823f4:	b8800017 	ldw	r2,0(r23)
   823f8:	147fd526 	beq	r2,r17,82350 <__call_exitprocs+0xa0>
   823fc:	003fc506 	br	82314 <__call_exitprocs+0x64>
   82400:	8c000115 	stw	r16,4(r17)
   82404:	003fea06 	br	823b0 <__call_exitprocs+0x100>
   82408:	2105883a 	add	r2,r4,r4
   8240c:	1485883a 	add	r2,r2,r18
   82410:	11000017 	ldw	r4,0(r2)
   82414:	303ee83a 	callr	r6
   82418:	003ff406 	br	823ec <__call_exitprocs+0x13c>
   8241c:	303ee83a 	callr	r6
   82420:	003ff206 	br	823ec <__call_exitprocs+0x13c>
   82424:	88800117 	ldw	r2,4(r17)
   82428:	1000081e 	bne	r2,zero,8244c <__call_exitprocs+0x19c>
   8242c:	89000017 	ldw	r4,0(r17)
   82430:	20000726 	beq	r4,zero,82450 <__call_exitprocs+0x1a0>
   82434:	b9000015 	stw	r4,0(r23)
   82438:	8809883a 	mov	r4,r17
   8243c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   82440:	bc400017 	ldw	r17,0(r23)
   82444:	883fb71e 	bne	r17,zero,82324 <__call_exitprocs+0x74>
   82448:	003fc506 	br	82360 <__call_exitprocs+0xb0>
   8244c:	89000017 	ldw	r4,0(r17)
   82450:	882f883a 	mov	r23,r17
   82454:	2023883a 	mov	r17,r4
   82458:	883fb21e 	bne	r17,zero,82324 <__call_exitprocs+0x74>
   8245c:	003fc006 	br	82360 <__call_exitprocs+0xb0>

00082460 <__mulsi3>:
   82460:	20000a26 	beq	r4,zero,8248c <__mulsi3+0x2c>
   82464:	0007883a 	mov	r3,zero
   82468:	2080004c 	andi	r2,r4,1
   8246c:	1005003a 	cmpeq	r2,r2,zero
   82470:	2008d07a 	srli	r4,r4,1
   82474:	1000011e 	bne	r2,zero,8247c <__mulsi3+0x1c>
   82478:	1947883a 	add	r3,r3,r5
   8247c:	294b883a 	add	r5,r5,r5
   82480:	203ff91e 	bne	r4,zero,82468 <__mulsi3+0x8>
   82484:	1805883a 	mov	r2,r3
   82488:	f800283a 	ret
   8248c:	0007883a 	mov	r3,zero
   82490:	1805883a 	mov	r2,r3
   82494:	f800283a 	ret

00082498 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   82498:	defffd04 	addi	sp,sp,-12
   8249c:	df000215 	stw	fp,8(sp)
   824a0:	df000204 	addi	fp,sp,8
   824a4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   824a8:	e0bfff17 	ldw	r2,-4(fp)
   824ac:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   824b0:	e0bffe17 	ldw	r2,-8(fp)
   824b4:	1005003a 	cmpeq	r2,r2,zero
   824b8:	1000021e 	bne	r2,zero,824c4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   824bc:	002af070 	cmpltui	zero,zero,43969
   824c0:	00000106 	br	824c8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   824c4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   824c8:	e037883a 	mov	sp,fp
   824cc:	df000017 	ldw	fp,0(sp)
   824d0:	dec00104 	addi	sp,sp,4
   824d4:	f800283a 	ret

000824d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   824d8:	defffd04 	addi	sp,sp,-12
   824dc:	dfc00215 	stw	ra,8(sp)
   824e0:	df000115 	stw	fp,4(sp)
   824e4:	df000104 	addi	fp,sp,4
   824e8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   824ec:	e13fff17 	ldw	r4,-4(fp)
   824f0:	00824980 	call	82498 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   824f4:	003fff06 	br	824f4 <_exit+0x1c>
   824f8:	000822ac 	andhi	zero,zero,8330
