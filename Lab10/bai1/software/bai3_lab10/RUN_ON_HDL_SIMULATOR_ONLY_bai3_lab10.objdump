
RUN_ON_HDL_SIMULATOR_ONLY_bai3_lab10.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_bai3_lab10.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00003330 memsz 0x00003330 flags r-x
    LOAD off    0x00004350 vaddr 0x00013350 paddr 0x00013738 align 2**12
         filesz 0x000003e8 memsz 0x000003e8 flags rw-
    LOAD off    0x00004b20 vaddr 0x00013b20 paddr 0x00013b20 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003150  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00013304  00013304  00004304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003e8  00013350  00013738  00004350  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a0  00013b20  00013b20  00004b20  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00004760  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000008ea  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b06d  00000000  00000000  00005602  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000284e  00000000  00000000  0001066f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007040  00000000  00000000  00012ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000aec  00000000  00000000  00019f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d74  00000000  00000000  0001a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019ca  00000000  00000000  0001b760  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  0001d130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001efc2  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001efc5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001efd1  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001efd2  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001efd3  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001efde  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001efe9  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  0001eff4  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000025  00000000  00000000  0001effc  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003a714  00000000  00000000  0001f021  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00013304 l    d  .rodata	00000000 .rodata
00013350 l    d  .rwdata	00000000 .rwdata
00013b20 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010388 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00013370 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010bb0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00011048 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00011240 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013450 l     O .rwdata	000000a4 dma_0_priv
000134f4 l     O .rwdata	0000001c dma_0_tx
00013510 l     O .rwdata	0000001c dma_0_rx
0001352c l     O .rwdata	0000002c jtag_uart_0
0001132c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
00011484 l     F .text	000000a8 alt_avalon_dma_launch_txonly
0001152c l     F .text	000000a8 alt_avalon_dma_launch_rxonly
000115d4 l     F .text	000003a4 alt_avalon_dma_ioctl
00011d28 l     F .text	000001c8 alt_avalon_dma_irq
00011fa0 l     F .text	00000038 alt_dma_txchan_reg
00011fd8 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00012364 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000123e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000124c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
00012578 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
00012630 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001281c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00012958 l     F .text	000000dc alt_file_locked
00012bbc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000130e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000132a0 l     F .text	00000040 alt_sim_halt
000110b4 g     F .text	0000006c alt_main
00013b34 g     O .bss	00000100 alt_irq
00013738 g       *ABS*	00000000 __flash_rwdata_start
000102f0 g     F .text	00000054 printf
00011ef0 g     F .text	000000b0 alt_avalon_dma_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013b20 g     O .bss	00000004 errno
00013b2c g     O .bss	00000004 alt_argv
0001b700 g       *ABS*	00000000 _gp
00013700 g     O .rwdata	00000004 pdatad
000125d8 g     F .text	00000058 alt_dma_txchan_open
00013580 g     O .rwdata	00000180 alt_fd_list
00012758 g     F .text	00000094 alt_find_dev
000128e0 g     F .text	00000078 alt_io_redirect
00013304 g       *ABS*	00000000 __DTOR_END__
000120c0 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010344 g     F .text	00000044 _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010cec g     F .text	00000008 __udivsi3
00012e74 g     F .text	00000090 alt_icache_flush
00013720 g     O .rwdata	00000004 alt_max_fd
00011364 g     F .text	00000120 alt_avalon_dma_launch_bidir
00012520 g     F .text	00000058 alt_dma_rxchan_open
00013708 g     O .rwdata	00000004 _global_impure_ptr
00013cc0 g       *ABS*	00000000 __bss_end
00010ed0 g     F .text	000000f8 alt_iic_isr_register
00010e88 g     F .text	00000048 alt_ic_irq_enabled
000101d0 g     F .text	0000007c DMA_ISR_handler
00013b24 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00013558 g     O .rwdata	00000028 alt_dev_null
000123c4 g     F .text	0000001c alt_dcache_flush_all
00013738 g       *ABS*	00000000 __ram_rwdata_end
00013718 g     O .rwdata	00000008 alt_dev_list
00011b54 g     F .text	00000080 alt_avalon_dma_space
00011120 g     F .text	00000120 write
00013350 g       *ABS*	00000000 __ram_rodata_end
00010cf4 g     F .text	00000008 __umodsi3
00013cc0 g       *ABS*	00000000 end
00013300 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
000121c4 g     F .text	000000a4 altera_avalon_jtag_uart_write
00010408 g     F .text	00000630 ___vfprintf_internal_r
00011bd4 g     F .text	00000154 alt_avalon_dma_send
000130e4 g     F .text	000001bc __call_exitprocs
0001372c g     O .rwdata	00000008 alt_dma_txchan_list
000101b4 g     F .text	0000001c _start
000112d4 g     F .text	00000058 alt_sys_init
00012f74 g     F .text	0000016c __register_exitproc
00013350 g       *ABS*	00000000 __ram_rwdata_start
00013304 g       *ABS*	00000000 __ram_rodata_start
00021080 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00012010 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00012dbc g     F .text	000000b8 alt_get_fd
00012f38 g     F .text	0000003c memcmp
00013cc0 g       *ABS*	00000000 __alt_stack_base
00012c9c g     F .text	00000120 alt_find_file
0001240c g     F .text	000000b4 alt_dev_llist_insert
00010a5c g     F .text	000000bc __sfvwrite_small_dev
00013b20 g       *ABS*	00000000 __bss_start
000102bc g     F .text	00000034 main
000119bc g     F .text	00000044 alt_avalon_dma_rx_ioctl
00013b30 g     O .bss	00000004 alt_envp
00012068 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00013c34 g     O .bss	0000008c _atexit0
00013734 g     O .rwdata	00000004 alt_errno
00010c2c g     F .text	00000060 __divsi3
00013304 g       *ABS*	00000000 __CTOR_END__
00013304 g       *ABS*	00000000 __flash_rodata_start
00013304 g       *ABS*	00000000 __DTOR_LIST__
000112a0 g     F .text	00000034 alt_irq_init
00012c1c g     F .text	00000060 alt_release_fd
0001024c g     F .text	00000070 DMA_init
00012f04 g     F .text	00000014 atexit
00010b38 g     F .text	00000078 _write_r
00013704 g     O .rwdata	00000004 _impure_ptr
00013b28 g     O .bss	00000004 alt_argc
000126f4 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00013350 g     O .rwdata	00000020 pdata8
00013710 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010cfc g     F .text	00000050 alt_ic_isr_register
00013738 g       *ABS*	00000000 _edata
00013cc0 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00010de8 g     F .text	000000a0 alt_ic_irq_disable
00012c7c g     F .text	00000020 altera_nios2_qsys_irq_init
00012f18 g     F .text	00000020 exit
00010c8c g     F .text	00000060 __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000132e0 g     F .text	00000020 _exit
00010b18 g     F .text	00000020 strlen
00012a34 g     F .text	00000188 open
000127ec g     F .text	00000030 alt_icache_flush_all
0001370c g     O .rwdata	00000004 alt_priority_mask
00010d4c g     F .text	0000009c alt_ic_irq_enable
00010a38 g     F .text	00000024 __vfprintf_internal
00011a00 g     F .text	00000154 alt_avalon_dma_prepare
00013724 g     O .rwdata	00000008 alt_dma_rxchan_list
00012690 g     F .text	00000064 _do_ctors
00012268 g     F .text	000000fc close
00010fc8 g     F .text	00000080 alt_load
00011978 g     F .text	00000044 alt_avalon_dma_tx_ioctl
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406d14 	ori	at,at,436
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c00074 	movhi	r3,1
   10134:	18cecd04 	addi	r3,r3,15156
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00074 	movhi	r3,1
   1014c:	18cecd04 	addi	r3,r3,15156
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dee71014 	ori	sp,sp,40000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6adc014 	ori	gp,gp,46848
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101c4:	0010fc80 	call	10fc8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101c8:	00110b40 	call	110b4 <alt_main>

000101cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101cc:	003fff06 	br	101cc <alt_after_alt_main>

000101d0 <DMA_ISR_handler>:
/// pdatad points to onchip_memory2_1
char* pdatad = (char*) (ONCHIP_MEMORY2_1_BASE);

/// Interrupt handler of DMA
void DMA_ISR_handler(void* context)
{
   101d0:	defffc04 	addi	sp,sp,-16
   101d4:	dfc00315 	stw	ra,12(sp)
   101d8:	df000215 	stw	fp,8(sp)
   101dc:	df000204 	addi	fp,sp,8
   101e0:	e13fff15 	stw	r4,-4(fp)
    int i;

    /// Read and print data in onchip_memory2_1
    for(i=0; i<32; i++)
   101e4:	e03ffe15 	stw	zero,-8(fp)
   101e8:	00000d06 	br	10220 <DMA_ISR_handler+0x50>
    {
        printf("byte %d\n", pdatad[i]);
   101ec:	d0e00017 	ldw	r3,-32768(gp)
   101f0:	e0bffe17 	ldw	r2,-8(fp)
   101f4:	1885883a 	add	r2,r3,r2
   101f8:	10800003 	ldbu	r2,0(r2)
   101fc:	11403fcc 	andi	r5,r2,255
   10200:	2940201c 	xori	r5,r5,128
   10204:	297fe004 	addi	r5,r5,-128
   10208:	01000074 	movhi	r4,1
   1020c:	210cc104 	addi	r4,r4,13060
   10210:	00102f00 	call	102f0 <printf>
void DMA_ISR_handler(void* context)
{
    int i;

    /// Read and print data in onchip_memory2_1
    for(i=0; i<32; i++)
   10214:	e0bffe17 	ldw	r2,-8(fp)
   10218:	10800044 	addi	r2,r2,1
   1021c:	e0bffe15 	stw	r2,-8(fp)
   10220:	e0bffe17 	ldw	r2,-8(fp)
   10224:	10800810 	cmplti	r2,r2,32
   10228:	103ff01e 	bne	r2,zero,101ec <DMA_ISR_handler+0x1c>
    {
        printf("byte %d\n", pdatad[i]);
    }

    /// Clear DMA interrupt bit
    IOWR_ALTERA_AVALON_DMA_STATUS(DMA_0_BASE, 0);
   1022c:	008000b4 	movhi	r2,2
   10230:	10844804 	addi	r2,r2,4384
   10234:	10000035 	stwio	zero,0(r2)
}
   10238:	e037883a 	mov	sp,fp
   1023c:	dfc00117 	ldw	ra,4(sp)
   10240:	df000017 	ldw	fp,0(sp)
   10244:	dec00204 	addi	sp,sp,8
   10248:	f800283a 	ret

0001024c <DMA_init>:

/// Initialize function of DMA
void DMA_init(void)
{
   1024c:	deffff04 	addi	sp,sp,-4
   10250:	df000015 	stw	fp,0(sp)
   10254:	d839883a 	mov	fp,sp
    /// De-init DMA
    IOWR_ALTERA_AVALON_DMA_CONTROL(DMA_0_BASE, 0);
   10258:	008000b4 	movhi	r2,2
   1025c:	10844e04 	addi	r2,r2,4408
   10260:	10000035 	stwio	zero,0(r2)

    /// Source address is pdatad
    IOWR_ALTERA_AVALON_DMA_RADDRESS(DMA_0_BASE, (int)pdata8);
   10264:	00c00074 	movhi	r3,1
   10268:	18ccd404 	addi	r3,r3,13136
   1026c:	008000b4 	movhi	r2,2
   10270:	10844904 	addi	r2,r2,4388
   10274:	10c00035 	stwio	r3,0(r2)

    /// Destination address is pdatad
    IOWR_ALTERA_AVALON_DMA_WADDRESS(DMA_0_BASE, (int)pdatad);
   10278:	d0a00017 	ldw	r2,-32768(gp)
   1027c:	1007883a 	mov	r3,r2
   10280:	008000b4 	movhi	r2,2
   10284:	10844a04 	addi	r2,r2,4392
   10288:	10c00035 	stwio	r3,0(r2)

    /// Length is 32 bytes
    IOWR_ALTERA_AVALON_DMA_LENGTH(DMA_0_BASE, 32);
   1028c:	00c000b4 	movhi	r3,2
   10290:	18c44b04 	addi	r3,r3,4396
   10294:	00800804 	movi	r2,32
   10298:	18800035 	stwio	r2,0(r3)

    /// Configure and Start DMA
    IOWR_ALTERA_AVALON_DMA_CONTROL(DMA_0_BASE,
   1029c:	00c000b4 	movhi	r3,2
   102a0:	18c44e04 	addi	r3,r3,4408
   102a4:	00802704 	movi	r2,156
   102a8:	18800035 	stwio	r2,0(r3)
        ALTERA_AVALON_DMA_CONTROL_WORD_MSK | /// Word transfer
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK | /// End transaction when length reach zero
        ALTERA_AVALON_DMA_CONTROL_I_EN_MSK | /// Interrupt enable
        ALTERA_AVALON_DMA_CONTROL_GO_MSK); /// Start DMA
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	df000017 	ldw	fp,0(sp)
   102b4:	dec00104 	addi	sp,sp,4
   102b8:	f800283a 	ret

000102bc <main>:

int main(void)
{
   102bc:	defffd04 	addi	sp,sp,-12
   102c0:	dfc00215 	stw	ra,8(sp)
   102c4:	df000115 	stw	fp,4(sp)
   102c8:	df000104 	addi	fp,sp,4
    /// Configure the DMA
    DMA_init();
   102cc:	001024c0 	call	1024c <DMA_init>

    /// Register DMA's interrupt handler
    alt_ic_isr_register(0, DMA_0_IRQ, DMA_ISR_handler, (void*)0, (void*)0);
   102d0:	d8000015 	stw	zero,0(sp)
   102d4:	0009883a 	mov	r4,zero
   102d8:	01400044 	movi	r5,1
   102dc:	01800074 	movhi	r6,1
   102e0:	31807404 	addi	r6,r6,464
   102e4:	000f883a 	mov	r7,zero
   102e8:	0010cfc0 	call	10cfc <alt_ic_isr_register>

    while(1);
   102ec:	003fff06 	br	102ec <main+0x30>

000102f0 <printf>:
   102f0:	defffb04 	addi	sp,sp,-20
   102f4:	dfc00115 	stw	ra,4(sp)
   102f8:	d9400215 	stw	r5,8(sp)
   102fc:	d9800315 	stw	r6,12(sp)
   10300:	d9c00415 	stw	r7,16(sp)
   10304:	00800074 	movhi	r2,1
   10308:	108dc104 	addi	r2,r2,14084
   1030c:	11400017 	ldw	r5,0(r2)
   10310:	d8800204 	addi	r2,sp,8
   10314:	d8800015 	stw	r2,0(sp)
   10318:	29c00217 	ldw	r7,8(r5)
   1031c:	100d883a 	mov	r6,r2
   10320:	00800074 	movhi	r2,1
   10324:	10829704 	addi	r2,r2,2652
   10328:	200b883a 	mov	r5,r4
   1032c:	38800115 	stw	r2,4(r7)
   10330:	3809883a 	mov	r4,r7
   10334:	0010a380 	call	10a38 <__vfprintf_internal>
   10338:	dfc00117 	ldw	ra,4(sp)
   1033c:	dec00504 	addi	sp,sp,20
   10340:	f800283a 	ret

00010344 <_printf_r>:
   10344:	defffc04 	addi	sp,sp,-16
   10348:	dfc00115 	stw	ra,4(sp)
   1034c:	d9800215 	stw	r6,8(sp)
   10350:	d9c00315 	stw	r7,12(sp)
   10354:	22000217 	ldw	r8,8(r4)
   10358:	d8800204 	addi	r2,sp,8
   1035c:	d8800015 	stw	r2,0(sp)
   10360:	100f883a 	mov	r7,r2
   10364:	00800074 	movhi	r2,1
   10368:	10829704 	addi	r2,r2,2652
   1036c:	280d883a 	mov	r6,r5
   10370:	40800115 	stw	r2,4(r8)
   10374:	400b883a 	mov	r5,r8
   10378:	00104080 	call	10408 <___vfprintf_internal_r>
   1037c:	dfc00117 	ldw	ra,4(sp)
   10380:	dec00404 	addi	sp,sp,16
   10384:	f800283a 	ret

00010388 <print_repeat>:
   10388:	defffb04 	addi	sp,sp,-20
   1038c:	dc800315 	stw	r18,12(sp)
   10390:	dc400215 	stw	r17,8(sp)
   10394:	dc000115 	stw	r16,4(sp)
   10398:	dfc00415 	stw	ra,16(sp)
   1039c:	2025883a 	mov	r18,r4
   103a0:	2823883a 	mov	r17,r5
   103a4:	3821883a 	mov	r16,r7
   103a8:	d9800005 	stb	r6,0(sp)
   103ac:	9009883a 	mov	r4,r18
   103b0:	880b883a 	mov	r5,r17
   103b4:	d80d883a 	mov	r6,sp
   103b8:	01c00044 	movi	r7,1
   103bc:	04000b0e 	bge	zero,r16,103ec <print_repeat+0x64>
   103c0:	88c00117 	ldw	r3,4(r17)
   103c4:	843fffc4 	addi	r16,r16,-1
   103c8:	183ee83a 	callr	r3
   103cc:	103ff726 	beq	r2,zero,103ac <print_repeat+0x24>
   103d0:	00bfffc4 	movi	r2,-1
   103d4:	dfc00417 	ldw	ra,16(sp)
   103d8:	dc800317 	ldw	r18,12(sp)
   103dc:	dc400217 	ldw	r17,8(sp)
   103e0:	dc000117 	ldw	r16,4(sp)
   103e4:	dec00504 	addi	sp,sp,20
   103e8:	f800283a 	ret
   103ec:	0005883a 	mov	r2,zero
   103f0:	dfc00417 	ldw	ra,16(sp)
   103f4:	dc800317 	ldw	r18,12(sp)
   103f8:	dc400217 	ldw	r17,8(sp)
   103fc:	dc000117 	ldw	r16,4(sp)
   10400:	dec00504 	addi	sp,sp,20
   10404:	f800283a 	ret

00010408 <___vfprintf_internal_r>:
   10408:	deffe404 	addi	sp,sp,-112
   1040c:	ddc01915 	stw	r23,100(sp)
   10410:	dd801815 	stw	r22,96(sp)
   10414:	dcc01515 	stw	r19,84(sp)
   10418:	dc401315 	stw	r17,76(sp)
   1041c:	dc001215 	stw	r16,72(sp)
   10420:	dfc01b15 	stw	ra,108(sp)
   10424:	df001a15 	stw	fp,104(sp)
   10428:	dd401715 	stw	r21,92(sp)
   1042c:	dd001615 	stw	r20,88(sp)
   10430:	dc801415 	stw	r18,80(sp)
   10434:	d9001015 	stw	r4,64(sp)
   10438:	2827883a 	mov	r19,r5
   1043c:	d9c01115 	stw	r7,68(sp)
   10440:	3023883a 	mov	r17,r6
   10444:	0021883a 	mov	r16,zero
   10448:	d8000f15 	stw	zero,60(sp)
   1044c:	d8000e15 	stw	zero,56(sp)
   10450:	002f883a 	mov	r23,zero
   10454:	d8000915 	stw	zero,36(sp)
   10458:	d8000d15 	stw	zero,52(sp)
   1045c:	d8000c15 	stw	zero,48(sp)
   10460:	d8000b15 	stw	zero,44(sp)
   10464:	002d883a 	mov	r22,zero
   10468:	89400003 	ldbu	r5,0(r17)
   1046c:	01c00044 	movi	r7,1
   10470:	8c400044 	addi	r17,r17,1
   10474:	29003fcc 	andi	r4,r5,255
   10478:	2100201c 	xori	r4,r4,128
   1047c:	213fe004 	addi	r4,r4,-128
   10480:	20001526 	beq	r4,zero,104d8 <___vfprintf_internal_r+0xd0>
   10484:	81c03326 	beq	r16,r7,10554 <___vfprintf_internal_r+0x14c>
   10488:	3c002016 	blt	r7,r16,1050c <___vfprintf_internal_r+0x104>
   1048c:	803ff61e 	bne	r16,zero,10468 <___vfprintf_internal_r+0x60>
   10490:	00800944 	movi	r2,37
   10494:	2081311e 	bne	r4,r2,1095c <___vfprintf_internal_r+0x554>
   10498:	05ffffc4 	movi	r23,-1
   1049c:	00800284 	movi	r2,10
   104a0:	d9c00c15 	stw	r7,48(sp)
   104a4:	d8000f15 	stw	zero,60(sp)
   104a8:	d8000e15 	stw	zero,56(sp)
   104ac:	ddc00915 	stw	r23,36(sp)
   104b0:	d8800d15 	stw	r2,52(sp)
   104b4:	d8000b15 	stw	zero,44(sp)
   104b8:	89400003 	ldbu	r5,0(r17)
   104bc:	3821883a 	mov	r16,r7
   104c0:	8c400044 	addi	r17,r17,1
   104c4:	29003fcc 	andi	r4,r5,255
   104c8:	2100201c 	xori	r4,r4,128
   104cc:	213fe004 	addi	r4,r4,-128
   104d0:	01c00044 	movi	r7,1
   104d4:	203feb1e 	bne	r4,zero,10484 <___vfprintf_internal_r+0x7c>
   104d8:	b005883a 	mov	r2,r22
   104dc:	dfc01b17 	ldw	ra,108(sp)
   104e0:	df001a17 	ldw	fp,104(sp)
   104e4:	ddc01917 	ldw	r23,100(sp)
   104e8:	dd801817 	ldw	r22,96(sp)
   104ec:	dd401717 	ldw	r21,92(sp)
   104f0:	dd001617 	ldw	r20,88(sp)
   104f4:	dcc01517 	ldw	r19,84(sp)
   104f8:	dc801417 	ldw	r18,80(sp)
   104fc:	dc401317 	ldw	r17,76(sp)
   10500:	dc001217 	ldw	r16,72(sp)
   10504:	dec01c04 	addi	sp,sp,112
   10508:	f800283a 	ret
   1050c:	00800084 	movi	r2,2
   10510:	80801526 	beq	r16,r2,10568 <___vfprintf_internal_r+0x160>
   10514:	008000c4 	movi	r2,3
   10518:	80bfd31e 	bne	r16,r2,10468 <___vfprintf_internal_r+0x60>
   1051c:	29bff404 	addi	r6,r5,-48
   10520:	30c03fcc 	andi	r3,r6,255
   10524:	00800244 	movi	r2,9
   10528:	10c01c36 	bltu	r2,r3,1059c <___vfprintf_internal_r+0x194>
   1052c:	d8c00917 	ldw	r3,36(sp)
   10530:	18010816 	blt	r3,zero,10954 <___vfprintf_internal_r+0x54c>
   10534:	d9000917 	ldw	r4,36(sp)
   10538:	20c002a4 	muli	r3,r4,10
   1053c:	30803fcc 	andi	r2,r6,255
   10540:	1080201c 	xori	r2,r2,128
   10544:	10bfe004 	addi	r2,r2,-128
   10548:	1887883a 	add	r3,r3,r2
   1054c:	d8c00915 	stw	r3,36(sp)
   10550:	003fc506 	br	10468 <___vfprintf_internal_r+0x60>
   10554:	00800c04 	movi	r2,48
   10558:	20809526 	beq	r4,r2,107b0 <___vfprintf_internal_r+0x3a8>
   1055c:	00800944 	movi	r2,37
   10560:	20810e26 	beq	r4,r2,1099c <___vfprintf_internal_r+0x594>
   10564:	04000084 	movi	r16,2
   10568:	29bff404 	addi	r6,r5,-48
   1056c:	30c03fcc 	andi	r3,r6,255
   10570:	00800244 	movi	r2,9
   10574:	10c00736 	bltu	r2,r3,10594 <___vfprintf_internal_r+0x18c>
   10578:	b8009816 	blt	r23,zero,107dc <___vfprintf_internal_r+0x3d4>
   1057c:	b9c002a4 	muli	r7,r23,10
   10580:	30803fcc 	andi	r2,r6,255
   10584:	1080201c 	xori	r2,r2,128
   10588:	10bfe004 	addi	r2,r2,-128
   1058c:	38af883a 	add	r23,r7,r2
   10590:	003fb506 	br	10468 <___vfprintf_internal_r+0x60>
   10594:	00800b84 	movi	r2,46
   10598:	20808a26 	beq	r4,r2,107c4 <___vfprintf_internal_r+0x3bc>
   1059c:	00801b04 	movi	r2,108
   105a0:	20808a26 	beq	r4,r2,107cc <___vfprintf_internal_r+0x3c4>
   105a4:	d8c00917 	ldw	r3,36(sp)
   105a8:	18008e16 	blt	r3,zero,107e4 <___vfprintf_internal_r+0x3dc>
   105ac:	d8000f15 	stw	zero,60(sp)
   105b0:	28bfea04 	addi	r2,r5,-88
   105b4:	10803fcc 	andi	r2,r2,255
   105b8:	00c00804 	movi	r3,32
   105bc:	18802836 	bltu	r3,r2,10660 <___vfprintf_internal_r+0x258>
   105c0:	1085883a 	add	r2,r2,r2
   105c4:	1085883a 	add	r2,r2,r2
   105c8:	00c00074 	movhi	r3,1
   105cc:	18c17704 	addi	r3,r3,1500
   105d0:	10c5883a 	add	r2,r2,r3
   105d4:	11000017 	ldw	r4,0(r2)
   105d8:	2000683a 	jmp	r4
   105dc:	00010858 	cmpnei	zero,zero,1057
   105e0:	00010660 	cmpeqi	zero,zero,1049
   105e4:	00010660 	cmpeqi	zero,zero,1049
   105e8:	00010660 	cmpeqi	zero,zero,1049
   105ec:	00010660 	cmpeqi	zero,zero,1049
   105f0:	00010660 	cmpeqi	zero,zero,1049
   105f4:	00010660 	cmpeqi	zero,zero,1049
   105f8:	00010660 	cmpeqi	zero,zero,1049
   105fc:	00010660 	cmpeqi	zero,zero,1049
   10600:	00010660 	cmpeqi	zero,zero,1049
   10604:	00010660 	cmpeqi	zero,zero,1049
   10608:	00010870 	cmpltui	zero,zero,1057
   1060c:	00010674 	movhi	zero,1049
   10610:	00010660 	cmpeqi	zero,zero,1049
   10614:	00010660 	cmpeqi	zero,zero,1049
   10618:	00010660 	cmpeqi	zero,zero,1049
   1061c:	00010660 	cmpeqi	zero,zero,1049
   10620:	00010674 	movhi	zero,1049
   10624:	00010660 	cmpeqi	zero,zero,1049
   10628:	00010660 	cmpeqi	zero,zero,1049
   1062c:	00010660 	cmpeqi	zero,zero,1049
   10630:	00010660 	cmpeqi	zero,zero,1049
   10634:	00010660 	cmpeqi	zero,zero,1049
   10638:	000108d8 	cmpnei	zero,zero,1059
   1063c:	00010660 	cmpeqi	zero,zero,1049
   10640:	00010660 	cmpeqi	zero,zero,1049
   10644:	00010660 	cmpeqi	zero,zero,1049
   10648:	000108e8 	cmpgeui	zero,zero,1059
   1064c:	00010660 	cmpeqi	zero,zero,1049
   10650:	00010670 	cmpltui	zero,zero,1049
   10654:	00010660 	cmpeqi	zero,zero,1049
   10658:	00010660 	cmpeqi	zero,zero,1049
   1065c:	00010668 	cmpgeui	zero,zero,1049
   10660:	0021883a 	mov	r16,zero
   10664:	003f8006 	br	10468 <___vfprintf_internal_r+0x60>
   10668:	00800404 	movi	r2,16
   1066c:	d8800d15 	stw	r2,52(sp)
   10670:	d8000c15 	stw	zero,48(sp)
   10674:	d8800c17 	ldw	r2,48(sp)
   10678:	10006c1e 	bne	r2,zero,1082c <___vfprintf_internal_r+0x424>
   1067c:	d9001117 	ldw	r4,68(sp)
   10680:	21c00104 	addi	r7,r4,4
   10684:	24000017 	ldw	r16,0(r4)
   10688:	d9c01115 	stw	r7,68(sp)
   1068c:	d8000a15 	stw	zero,40(sp)
   10690:	80006d26 	beq	r16,zero,10848 <___vfprintf_internal_r+0x440>
   10694:	d8c00b17 	ldw	r3,44(sp)
   10698:	dc800044 	addi	r18,sp,1
   1069c:	9039883a 	mov	fp,r18
   106a0:	05400244 	movi	r21,9
   106a4:	1829003a 	cmpeq	r20,r3,zero
   106a8:	00000506 	br	106c0 <___vfprintf_internal_r+0x2b8>
   106ac:	21000c04 	addi	r4,r4,48
   106b0:	91000005 	stb	r4,0(r18)
   106b4:	94800044 	addi	r18,r18,1
   106b8:	18000e26 	beq	r3,zero,106f4 <___vfprintf_internal_r+0x2ec>
   106bc:	1821883a 	mov	r16,r3
   106c0:	d9400d17 	ldw	r5,52(sp)
   106c4:	8009883a 	mov	r4,r16
   106c8:	0010cec0 	call	10cec <__udivsi3>
   106cc:	d9000d17 	ldw	r4,52(sp)
   106d0:	1007883a 	mov	r3,r2
   106d4:	2085383a 	mul	r2,r4,r2
   106d8:	8089c83a 	sub	r4,r16,r2
   106dc:	a93ff30e 	bge	r21,r4,106ac <___vfprintf_internal_r+0x2a4>
   106e0:	a000361e 	bne	r20,zero,107bc <___vfprintf_internal_r+0x3b4>
   106e4:	21000dc4 	addi	r4,r4,55
   106e8:	91000005 	stb	r4,0(r18)
   106ec:	94800044 	addi	r18,r18,1
   106f0:	183ff21e 	bne	r3,zero,106bc <___vfprintf_internal_r+0x2b4>
   106f4:	9729c83a 	sub	r20,r18,fp
   106f8:	d8800917 	ldw	r2,36(sp)
   106fc:	150bc83a 	sub	r5,r2,r20
   10700:	0140100e 	bge	zero,r5,10744 <___vfprintf_internal_r+0x33c>
   10704:	e0800804 	addi	r2,fp,32
   10708:	90800e2e 	bgeu	r18,r2,10744 <___vfprintf_internal_r+0x33c>
   1070c:	00800c04 	movi	r2,48
   10710:	28ffffc4 	addi	r3,r5,-1
   10714:	90800005 	stb	r2,0(r18)
   10718:	91000044 	addi	r4,r18,1
   1071c:	00c0070e 	bge	zero,r3,1073c <___vfprintf_internal_r+0x334>
   10720:	e0800804 	addi	r2,fp,32
   10724:	2080052e 	bgeu	r4,r2,1073c <___vfprintf_internal_r+0x334>
   10728:	00800c04 	movi	r2,48
   1072c:	20800005 	stb	r2,0(r4)
   10730:	21000044 	addi	r4,r4,1
   10734:	9145883a 	add	r2,r18,r5
   10738:	20bff91e 	bne	r4,r2,10720 <___vfprintf_internal_r+0x318>
   1073c:	2729c83a 	sub	r20,r4,fp
   10740:	2025883a 	mov	r18,r4
   10744:	d8c00a17 	ldw	r3,40(sp)
   10748:	d9000f17 	ldw	r4,60(sp)
   1074c:	1d05883a 	add	r2,r3,r20
   10750:	b8a1c83a 	sub	r16,r23,r2
   10754:	20002626 	beq	r4,zero,107f0 <___vfprintf_internal_r+0x3e8>
   10758:	1805003a 	cmpeq	r2,r3,zero
   1075c:	1000a226 	beq	r2,zero,109e8 <___vfprintf_internal_r+0x5e0>
   10760:	04009916 	blt	zero,r16,109c8 <___vfprintf_internal_r+0x5c0>
   10764:	b005883a 	mov	r2,r22
   10768:	0500890e 	bge	zero,r20,10990 <___vfprintf_internal_r+0x588>
   1076c:	102d883a 	mov	r22,r2
   10770:	1521883a 	add	r16,r2,r20
   10774:	00000206 	br	10780 <___vfprintf_internal_r+0x378>
   10778:	b5800044 	addi	r22,r22,1
   1077c:	85bfb826 	beq	r16,r22,10660 <___vfprintf_internal_r+0x258>
   10780:	94bfffc4 	addi	r18,r18,-1
   10784:	90800003 	ldbu	r2,0(r18)
   10788:	98c00117 	ldw	r3,4(r19)
   1078c:	d9001017 	ldw	r4,64(sp)
   10790:	d8800005 	stb	r2,0(sp)
   10794:	980b883a 	mov	r5,r19
   10798:	d80d883a 	mov	r6,sp
   1079c:	01c00044 	movi	r7,1
   107a0:	183ee83a 	callr	r3
   107a4:	103ff426 	beq	r2,zero,10778 <___vfprintf_internal_r+0x370>
   107a8:	05bfffc4 	movi	r22,-1
   107ac:	003f4a06 	br	104d8 <___vfprintf_internal_r+0xd0>
   107b0:	04000084 	movi	r16,2
   107b4:	d9c00f15 	stw	r7,60(sp)
   107b8:	003f2b06 	br	10468 <___vfprintf_internal_r+0x60>
   107bc:	210015c4 	addi	r4,r4,87
   107c0:	003fbb06 	br	106b0 <___vfprintf_internal_r+0x2a8>
   107c4:	040000c4 	movi	r16,3
   107c8:	003f2706 	br	10468 <___vfprintf_internal_r+0x60>
   107cc:	00800044 	movi	r2,1
   107d0:	040000c4 	movi	r16,3
   107d4:	d8800e15 	stw	r2,56(sp)
   107d8:	003f2306 	br	10468 <___vfprintf_internal_r+0x60>
   107dc:	000f883a 	mov	r7,zero
   107e0:	003f6706 	br	10580 <___vfprintf_internal_r+0x178>
   107e4:	01000044 	movi	r4,1
   107e8:	d9000915 	stw	r4,36(sp)
   107ec:	003f7006 	br	105b0 <___vfprintf_internal_r+0x1a8>
   107f0:	04008916 	blt	zero,r16,10a18 <___vfprintf_internal_r+0x610>
   107f4:	d8c00a17 	ldw	r3,40(sp)
   107f8:	1805003a 	cmpeq	r2,r3,zero
   107fc:	103fd91e 	bne	r2,zero,10764 <___vfprintf_internal_r+0x35c>
   10800:	98c00117 	ldw	r3,4(r19)
   10804:	d9001017 	ldw	r4,64(sp)
   10808:	00800b44 	movi	r2,45
   1080c:	d8800005 	stb	r2,0(sp)
   10810:	980b883a 	mov	r5,r19
   10814:	d80d883a 	mov	r6,sp
   10818:	01c00044 	movi	r7,1
   1081c:	183ee83a 	callr	r3
   10820:	103fe11e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   10824:	b0800044 	addi	r2,r22,1
   10828:	003fcf06 	br	10768 <___vfprintf_internal_r+0x360>
   1082c:	d8c01117 	ldw	r3,68(sp)
   10830:	1c000017 	ldw	r16,0(r3)
   10834:	18c00104 	addi	r3,r3,4
   10838:	d8c01115 	stw	r3,68(sp)
   1083c:	80005016 	blt	r16,zero,10980 <___vfprintf_internal_r+0x578>
   10840:	d8000a15 	stw	zero,40(sp)
   10844:	803f931e 	bne	r16,zero,10694 <___vfprintf_internal_r+0x28c>
   10848:	dc800044 	addi	r18,sp,1
   1084c:	9039883a 	mov	fp,r18
   10850:	0029883a 	mov	r20,zero
   10854:	003fa806 	br	106f8 <___vfprintf_internal_r+0x2f0>
   10858:	00800404 	movi	r2,16
   1085c:	00c00044 	movi	r3,1
   10860:	d8800d15 	stw	r2,52(sp)
   10864:	d8000c15 	stw	zero,48(sp)
   10868:	d8c00b15 	stw	r3,44(sp)
   1086c:	003f8106 	br	10674 <___vfprintf_internal_r+0x26c>
   10870:	04000044 	movi	r16,1
   10874:	85c0080e 	bge	r16,r23,10898 <___vfprintf_internal_r+0x490>
   10878:	d9001017 	ldw	r4,64(sp)
   1087c:	980b883a 	mov	r5,r19
   10880:	01800804 	movi	r6,32
   10884:	b9ffffc4 	addi	r7,r23,-1
   10888:	00103880 	call	10388 <print_repeat>
   1088c:	103fc61e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   10890:	bd85883a 	add	r2,r23,r22
   10894:	15bfffc4 	addi	r22,r2,-1
   10898:	d8c01117 	ldw	r3,68(sp)
   1089c:	d9001017 	ldw	r4,64(sp)
   108a0:	800f883a 	mov	r7,r16
   108a4:	18800017 	ldw	r2,0(r3)
   108a8:	98c00117 	ldw	r3,4(r19)
   108ac:	980b883a 	mov	r5,r19
   108b0:	d8800005 	stb	r2,0(sp)
   108b4:	d80d883a 	mov	r6,sp
   108b8:	183ee83a 	callr	r3
   108bc:	103fba1e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   108c0:	d9001117 	ldw	r4,68(sp)
   108c4:	b5800044 	addi	r22,r22,1
   108c8:	0021883a 	mov	r16,zero
   108cc:	21000104 	addi	r4,r4,4
   108d0:	d9001115 	stw	r4,68(sp)
   108d4:	003ee406 	br	10468 <___vfprintf_internal_r+0x60>
   108d8:	01000204 	movi	r4,8
   108dc:	d9000d15 	stw	r4,52(sp)
   108e0:	d8000c15 	stw	zero,48(sp)
   108e4:	003f6306 	br	10674 <___vfprintf_internal_r+0x26c>
   108e8:	d8801117 	ldw	r2,68(sp)
   108ec:	15000017 	ldw	r20,0(r2)
   108f0:	a009883a 	mov	r4,r20
   108f4:	0010b180 	call	10b18 <strlen>
   108f8:	b8a1c83a 	sub	r16,r23,r2
   108fc:	1025883a 	mov	r18,r2
   10900:	0400070e 	bge	zero,r16,10920 <___vfprintf_internal_r+0x518>
   10904:	d9001017 	ldw	r4,64(sp)
   10908:	980b883a 	mov	r5,r19
   1090c:	01800804 	movi	r6,32
   10910:	800f883a 	mov	r7,r16
   10914:	00103880 	call	10388 <print_repeat>
   10918:	103fa31e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   1091c:	b42d883a 	add	r22,r22,r16
   10920:	98c00117 	ldw	r3,4(r19)
   10924:	d9001017 	ldw	r4,64(sp)
   10928:	a00d883a 	mov	r6,r20
   1092c:	980b883a 	mov	r5,r19
   10930:	900f883a 	mov	r7,r18
   10934:	183ee83a 	callr	r3
   10938:	103f9b1e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   1093c:	d8c01117 	ldw	r3,68(sp)
   10940:	b4ad883a 	add	r22,r22,r18
   10944:	0021883a 	mov	r16,zero
   10948:	18c00104 	addi	r3,r3,4
   1094c:	d8c01115 	stw	r3,68(sp)
   10950:	003ec506 	br	10468 <___vfprintf_internal_r+0x60>
   10954:	0007883a 	mov	r3,zero
   10958:	003ef806 	br	1053c <___vfprintf_internal_r+0x134>
   1095c:	98c00117 	ldw	r3,4(r19)
   10960:	d9001017 	ldw	r4,64(sp)
   10964:	d9400005 	stb	r5,0(sp)
   10968:	d80d883a 	mov	r6,sp
   1096c:	980b883a 	mov	r5,r19
   10970:	183ee83a 	callr	r3
   10974:	103f8c1e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   10978:	b5800044 	addi	r22,r22,1
   1097c:	003eba06 	br	10468 <___vfprintf_internal_r+0x60>
   10980:	00800044 	movi	r2,1
   10984:	0421c83a 	sub	r16,zero,r16
   10988:	d8800a15 	stw	r2,40(sp)
   1098c:	003f4006 	br	10690 <___vfprintf_internal_r+0x288>
   10990:	102d883a 	mov	r22,r2
   10994:	0021883a 	mov	r16,zero
   10998:	003eb306 	br	10468 <___vfprintf_internal_r+0x60>
   1099c:	98c00117 	ldw	r3,4(r19)
   109a0:	d9000005 	stb	r4,0(sp)
   109a4:	d9001017 	ldw	r4,64(sp)
   109a8:	980b883a 	mov	r5,r19
   109ac:	d80d883a 	mov	r6,sp
   109b0:	800f883a 	mov	r7,r16
   109b4:	183ee83a 	callr	r3
   109b8:	103f7b1e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   109bc:	b42d883a 	add	r22,r22,r16
   109c0:	0021883a 	mov	r16,zero
   109c4:	003ea806 	br	10468 <___vfprintf_internal_r+0x60>
   109c8:	d9001017 	ldw	r4,64(sp)
   109cc:	980b883a 	mov	r5,r19
   109d0:	01800c04 	movi	r6,48
   109d4:	800f883a 	mov	r7,r16
   109d8:	00103880 	call	10388 <print_repeat>
   109dc:	103f721e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   109e0:	b405883a 	add	r2,r22,r16
   109e4:	003f6006 	br	10768 <___vfprintf_internal_r+0x360>
   109e8:	98c00117 	ldw	r3,4(r19)
   109ec:	d9001017 	ldw	r4,64(sp)
   109f0:	00800b44 	movi	r2,45
   109f4:	d8800005 	stb	r2,0(sp)
   109f8:	980b883a 	mov	r5,r19
   109fc:	d80d883a 	mov	r6,sp
   10a00:	01c00044 	movi	r7,1
   10a04:	183ee83a 	callr	r3
   10a08:	103f671e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   10a0c:	b5800044 	addi	r22,r22,1
   10a10:	043f540e 	bge	zero,r16,10764 <___vfprintf_internal_r+0x35c>
   10a14:	003fec06 	br	109c8 <___vfprintf_internal_r+0x5c0>
   10a18:	d9001017 	ldw	r4,64(sp)
   10a1c:	980b883a 	mov	r5,r19
   10a20:	01800804 	movi	r6,32
   10a24:	800f883a 	mov	r7,r16
   10a28:	00103880 	call	10388 <print_repeat>
   10a2c:	103f5e1e 	bne	r2,zero,107a8 <___vfprintf_internal_r+0x3a0>
   10a30:	b42d883a 	add	r22,r22,r16
   10a34:	003f6f06 	br	107f4 <___vfprintf_internal_r+0x3ec>

00010a38 <__vfprintf_internal>:
   10a38:	00800074 	movhi	r2,1
   10a3c:	108dc104 	addi	r2,r2,14084
   10a40:	2013883a 	mov	r9,r4
   10a44:	11000017 	ldw	r4,0(r2)
   10a48:	2805883a 	mov	r2,r5
   10a4c:	300f883a 	mov	r7,r6
   10a50:	480b883a 	mov	r5,r9
   10a54:	100d883a 	mov	r6,r2
   10a58:	00104081 	jmpi	10408 <___vfprintf_internal_r>

00010a5c <__sfvwrite_small_dev>:
   10a5c:	2880000b 	ldhu	r2,0(r5)
   10a60:	defffa04 	addi	sp,sp,-24
   10a64:	dcc00315 	stw	r19,12(sp)
   10a68:	1080020c 	andi	r2,r2,8
   10a6c:	dc800215 	stw	r18,8(sp)
   10a70:	dc400115 	stw	r17,4(sp)
   10a74:	dfc00515 	stw	ra,20(sp)
   10a78:	dd000415 	stw	r20,16(sp)
   10a7c:	dc000015 	stw	r16,0(sp)
   10a80:	2825883a 	mov	r18,r5
   10a84:	2027883a 	mov	r19,r4
   10a88:	3023883a 	mov	r17,r6
   10a8c:	10002026 	beq	r2,zero,10b10 <__sfvwrite_small_dev+0xb4>
   10a90:	2940008f 	ldh	r5,2(r5)
   10a94:	28000f16 	blt	r5,zero,10ad4 <__sfvwrite_small_dev+0x78>
   10a98:	01c01b0e 	bge	zero,r7,10b08 <__sfvwrite_small_dev+0xac>
   10a9c:	3821883a 	mov	r16,r7
   10aa0:	05010004 	movi	r20,1024
   10aa4:	00000206 	br	10ab0 <__sfvwrite_small_dev+0x54>
   10aa8:	0400170e 	bge	zero,r16,10b08 <__sfvwrite_small_dev+0xac>
   10aac:	9140008f 	ldh	r5,2(r18)
   10ab0:	880d883a 	mov	r6,r17
   10ab4:	9809883a 	mov	r4,r19
   10ab8:	800f883a 	mov	r7,r16
   10abc:	a400010e 	bge	r20,r16,10ac4 <__sfvwrite_small_dev+0x68>
   10ac0:	01c10004 	movi	r7,1024
   10ac4:	0010b380 	call	10b38 <_write_r>
   10ac8:	88a3883a 	add	r17,r17,r2
   10acc:	80a1c83a 	sub	r16,r16,r2
   10ad0:	00bff516 	blt	zero,r2,10aa8 <__sfvwrite_small_dev+0x4c>
   10ad4:	9080000b 	ldhu	r2,0(r18)
   10ad8:	00ffffc4 	movi	r3,-1
   10adc:	10801014 	ori	r2,r2,64
   10ae0:	9080000d 	sth	r2,0(r18)
   10ae4:	1805883a 	mov	r2,r3
   10ae8:	dfc00517 	ldw	ra,20(sp)
   10aec:	dd000417 	ldw	r20,16(sp)
   10af0:	dcc00317 	ldw	r19,12(sp)
   10af4:	dc800217 	ldw	r18,8(sp)
   10af8:	dc400117 	ldw	r17,4(sp)
   10afc:	dc000017 	ldw	r16,0(sp)
   10b00:	dec00604 	addi	sp,sp,24
   10b04:	f800283a 	ret
   10b08:	0007883a 	mov	r3,zero
   10b0c:	003ff506 	br	10ae4 <__sfvwrite_small_dev+0x88>
   10b10:	00ffffc4 	movi	r3,-1
   10b14:	003ff306 	br	10ae4 <__sfvwrite_small_dev+0x88>

00010b18 <strlen>:
   10b18:	20800007 	ldb	r2,0(r4)
   10b1c:	10000526 	beq	r2,zero,10b34 <strlen+0x1c>
   10b20:	2007883a 	mov	r3,r4
   10b24:	18c00044 	addi	r3,r3,1
   10b28:	18800007 	ldb	r2,0(r3)
   10b2c:	103ffd1e 	bne	r2,zero,10b24 <strlen+0xc>
   10b30:	1905c83a 	sub	r2,r3,r4
   10b34:	f800283a 	ret

00010b38 <_write_r>:
   10b38:	defffd04 	addi	sp,sp,-12
   10b3c:	dc000015 	stw	r16,0(sp)
   10b40:	04000074 	movhi	r16,1
   10b44:	840ec804 	addi	r16,r16,15136
   10b48:	dc400115 	stw	r17,4(sp)
   10b4c:	80000015 	stw	zero,0(r16)
   10b50:	2023883a 	mov	r17,r4
   10b54:	2809883a 	mov	r4,r5
   10b58:	300b883a 	mov	r5,r6
   10b5c:	380d883a 	mov	r6,r7
   10b60:	dfc00215 	stw	ra,8(sp)
   10b64:	00111200 	call	11120 <write>
   10b68:	1007883a 	mov	r3,r2
   10b6c:	00bfffc4 	movi	r2,-1
   10b70:	18800626 	beq	r3,r2,10b8c <_write_r+0x54>
   10b74:	1805883a 	mov	r2,r3
   10b78:	dfc00217 	ldw	ra,8(sp)
   10b7c:	dc400117 	ldw	r17,4(sp)
   10b80:	dc000017 	ldw	r16,0(sp)
   10b84:	dec00304 	addi	sp,sp,12
   10b88:	f800283a 	ret
   10b8c:	80800017 	ldw	r2,0(r16)
   10b90:	103ff826 	beq	r2,zero,10b74 <_write_r+0x3c>
   10b94:	88800015 	stw	r2,0(r17)
   10b98:	1805883a 	mov	r2,r3
   10b9c:	dfc00217 	ldw	ra,8(sp)
   10ba0:	dc400117 	ldw	r17,4(sp)
   10ba4:	dc000017 	ldw	r16,0(sp)
   10ba8:	dec00304 	addi	sp,sp,12
   10bac:	f800283a 	ret

00010bb0 <udivmodsi4>:
   10bb0:	29001b2e 	bgeu	r5,r4,10c20 <udivmodsi4+0x70>
   10bb4:	28001a16 	blt	r5,zero,10c20 <udivmodsi4+0x70>
   10bb8:	00800044 	movi	r2,1
   10bbc:	0007883a 	mov	r3,zero
   10bc0:	01c007c4 	movi	r7,31
   10bc4:	00000306 	br	10bd4 <udivmodsi4+0x24>
   10bc8:	19c01326 	beq	r3,r7,10c18 <udivmodsi4+0x68>
   10bcc:	18c00044 	addi	r3,r3,1
   10bd0:	28000416 	blt	r5,zero,10be4 <udivmodsi4+0x34>
   10bd4:	294b883a 	add	r5,r5,r5
   10bd8:	1085883a 	add	r2,r2,r2
   10bdc:	293ffa36 	bltu	r5,r4,10bc8 <udivmodsi4+0x18>
   10be0:	10000d26 	beq	r2,zero,10c18 <udivmodsi4+0x68>
   10be4:	0007883a 	mov	r3,zero
   10be8:	21400236 	bltu	r4,r5,10bf4 <udivmodsi4+0x44>
   10bec:	2149c83a 	sub	r4,r4,r5
   10bf0:	1886b03a 	or	r3,r3,r2
   10bf4:	1004d07a 	srli	r2,r2,1
   10bf8:	280ad07a 	srli	r5,r5,1
   10bfc:	103ffa1e 	bne	r2,zero,10be8 <udivmodsi4+0x38>
   10c00:	30000226 	beq	r6,zero,10c0c <udivmodsi4+0x5c>
   10c04:	2005883a 	mov	r2,r4
   10c08:	f800283a 	ret
   10c0c:	1809883a 	mov	r4,r3
   10c10:	2005883a 	mov	r2,r4
   10c14:	f800283a 	ret
   10c18:	0007883a 	mov	r3,zero
   10c1c:	003ff806 	br	10c00 <udivmodsi4+0x50>
   10c20:	00800044 	movi	r2,1
   10c24:	0007883a 	mov	r3,zero
   10c28:	003fef06 	br	10be8 <udivmodsi4+0x38>

00010c2c <__divsi3>:
   10c2c:	defffe04 	addi	sp,sp,-8
   10c30:	dc000015 	stw	r16,0(sp)
   10c34:	dfc00115 	stw	ra,4(sp)
   10c38:	0021883a 	mov	r16,zero
   10c3c:	20000c16 	blt	r4,zero,10c70 <__divsi3+0x44>
   10c40:	000d883a 	mov	r6,zero
   10c44:	28000e16 	blt	r5,zero,10c80 <__divsi3+0x54>
   10c48:	0010bb00 	call	10bb0 <udivmodsi4>
   10c4c:	1007883a 	mov	r3,r2
   10c50:	8005003a 	cmpeq	r2,r16,zero
   10c54:	1000011e 	bne	r2,zero,10c5c <__divsi3+0x30>
   10c58:	00c7c83a 	sub	r3,zero,r3
   10c5c:	1805883a 	mov	r2,r3
   10c60:	dfc00117 	ldw	ra,4(sp)
   10c64:	dc000017 	ldw	r16,0(sp)
   10c68:	dec00204 	addi	sp,sp,8
   10c6c:	f800283a 	ret
   10c70:	0109c83a 	sub	r4,zero,r4
   10c74:	04000044 	movi	r16,1
   10c78:	000d883a 	mov	r6,zero
   10c7c:	283ff20e 	bge	r5,zero,10c48 <__divsi3+0x1c>
   10c80:	014bc83a 	sub	r5,zero,r5
   10c84:	8021003a 	cmpeq	r16,r16,zero
   10c88:	003fef06 	br	10c48 <__divsi3+0x1c>

00010c8c <__modsi3>:
   10c8c:	deffff04 	addi	sp,sp,-4
   10c90:	dfc00015 	stw	ra,0(sp)
   10c94:	01800044 	movi	r6,1
   10c98:	2807883a 	mov	r3,r5
   10c9c:	20000416 	blt	r4,zero,10cb0 <__modsi3+0x24>
   10ca0:	28000c16 	blt	r5,zero,10cd4 <__modsi3+0x48>
   10ca4:	dfc00017 	ldw	ra,0(sp)
   10ca8:	dec00104 	addi	sp,sp,4
   10cac:	0010bb01 	jmpi	10bb0 <udivmodsi4>
   10cb0:	0109c83a 	sub	r4,zero,r4
   10cb4:	28000b16 	blt	r5,zero,10ce4 <__modsi3+0x58>
   10cb8:	180b883a 	mov	r5,r3
   10cbc:	01800044 	movi	r6,1
   10cc0:	0010bb00 	call	10bb0 <udivmodsi4>
   10cc4:	0085c83a 	sub	r2,zero,r2
   10cc8:	dfc00017 	ldw	ra,0(sp)
   10ccc:	dec00104 	addi	sp,sp,4
   10cd0:	f800283a 	ret
   10cd4:	014bc83a 	sub	r5,zero,r5
   10cd8:	dfc00017 	ldw	ra,0(sp)
   10cdc:	dec00104 	addi	sp,sp,4
   10ce0:	0010bb01 	jmpi	10bb0 <udivmodsi4>
   10ce4:	0147c83a 	sub	r3,zero,r5
   10ce8:	003ff306 	br	10cb8 <__modsi3+0x2c>

00010cec <__udivsi3>:
   10cec:	000d883a 	mov	r6,zero
   10cf0:	0010bb01 	jmpi	10bb0 <udivmodsi4>

00010cf4 <__umodsi3>:
   10cf4:	01800044 	movi	r6,1
   10cf8:	0010bb01 	jmpi	10bb0 <udivmodsi4>

00010cfc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10cfc:	defff904 	addi	sp,sp,-28
   10d00:	dfc00615 	stw	ra,24(sp)
   10d04:	df000515 	stw	fp,20(sp)
   10d08:	df000504 	addi	fp,sp,20
   10d0c:	e13ffc15 	stw	r4,-16(fp)
   10d10:	e17ffd15 	stw	r5,-12(fp)
   10d14:	e1bffe15 	stw	r6,-8(fp)
   10d18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10d1c:	e0800217 	ldw	r2,8(fp)
   10d20:	d8800015 	stw	r2,0(sp)
   10d24:	e13ffc17 	ldw	r4,-16(fp)
   10d28:	e17ffd17 	ldw	r5,-12(fp)
   10d2c:	e1bffe17 	ldw	r6,-8(fp)
   10d30:	e1ffff17 	ldw	r7,-4(fp)
   10d34:	0010ed00 	call	10ed0 <alt_iic_isr_register>
}  
   10d38:	e037883a 	mov	sp,fp
   10d3c:	dfc00117 	ldw	ra,4(sp)
   10d40:	df000017 	ldw	fp,0(sp)
   10d44:	dec00204 	addi	sp,sp,8
   10d48:	f800283a 	ret

00010d4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10d4c:	defff904 	addi	sp,sp,-28
   10d50:	df000615 	stw	fp,24(sp)
   10d54:	df000604 	addi	fp,sp,24
   10d58:	e13ffe15 	stw	r4,-8(fp)
   10d5c:	e17fff15 	stw	r5,-4(fp)
   10d60:	e0bfff17 	ldw	r2,-4(fp)
   10d64:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d68:	0005303a 	rdctl	r2,status
   10d6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d70:	e0fffb17 	ldw	r3,-20(fp)
   10d74:	00bfff84 	movi	r2,-2
   10d78:	1884703a 	and	r2,r3,r2
   10d7c:	1001703a 	wrctl	status,r2
  
  return context;
   10d80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10d84:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   10d88:	e0fffc17 	ldw	r3,-16(fp)
   10d8c:	00800044 	movi	r2,1
   10d90:	10c4983a 	sll	r2,r2,r3
   10d94:	1007883a 	mov	r3,r2
   10d98:	00800074 	movhi	r2,1
   10d9c:	108ec904 	addi	r2,r2,15140
   10da0:	10800017 	ldw	r2,0(r2)
   10da4:	1886b03a 	or	r3,r3,r2
   10da8:	00800074 	movhi	r2,1
   10dac:	108ec904 	addi	r2,r2,15140
   10db0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10db4:	00800074 	movhi	r2,1
   10db8:	108ec904 	addi	r2,r2,15140
   10dbc:	10800017 	ldw	r2,0(r2)
   10dc0:	100170fa 	wrctl	ienable,r2
   10dc4:	e0bffd17 	ldw	r2,-12(fp)
   10dc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dcc:	e0bffa17 	ldw	r2,-24(fp)
   10dd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10dd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   10dd8:	e037883a 	mov	sp,fp
   10ddc:	df000017 	ldw	fp,0(sp)
   10de0:	dec00104 	addi	sp,sp,4
   10de4:	f800283a 	ret

00010de8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10de8:	defff904 	addi	sp,sp,-28
   10dec:	df000615 	stw	fp,24(sp)
   10df0:	df000604 	addi	fp,sp,24
   10df4:	e13ffe15 	stw	r4,-8(fp)
   10df8:	e17fff15 	stw	r5,-4(fp)
   10dfc:	e0bfff17 	ldw	r2,-4(fp)
   10e00:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e04:	0005303a 	rdctl	r2,status
   10e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e0c:	e0fffb17 	ldw	r3,-20(fp)
   10e10:	00bfff84 	movi	r2,-2
   10e14:	1884703a 	and	r2,r3,r2
   10e18:	1001703a 	wrctl	status,r2
  
  return context;
   10e1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10e20:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   10e24:	e0fffc17 	ldw	r3,-16(fp)
   10e28:	00800044 	movi	r2,1
   10e2c:	10c4983a 	sll	r2,r2,r3
   10e30:	0084303a 	nor	r2,zero,r2
   10e34:	1007883a 	mov	r3,r2
   10e38:	00800074 	movhi	r2,1
   10e3c:	108ec904 	addi	r2,r2,15140
   10e40:	10800017 	ldw	r2,0(r2)
   10e44:	1886703a 	and	r3,r3,r2
   10e48:	00800074 	movhi	r2,1
   10e4c:	108ec904 	addi	r2,r2,15140
   10e50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e54:	00800074 	movhi	r2,1
   10e58:	108ec904 	addi	r2,r2,15140
   10e5c:	10800017 	ldw	r2,0(r2)
   10e60:	100170fa 	wrctl	ienable,r2
   10e64:	e0bffd17 	ldw	r2,-12(fp)
   10e68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e6c:	e0bffa17 	ldw	r2,-24(fp)
   10e70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   10e78:	e037883a 	mov	sp,fp
   10e7c:	df000017 	ldw	fp,0(sp)
   10e80:	dec00104 	addi	sp,sp,4
   10e84:	f800283a 	ret

00010e88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10e88:	defffc04 	addi	sp,sp,-16
   10e8c:	df000315 	stw	fp,12(sp)
   10e90:	df000304 	addi	fp,sp,12
   10e94:	e13ffe15 	stw	r4,-8(fp)
   10e98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10e9c:	000530fa 	rdctl	r2,ienable
   10ea0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10ea4:	e0ffff17 	ldw	r3,-4(fp)
   10ea8:	00800044 	movi	r2,1
   10eac:	10c4983a 	sll	r2,r2,r3
   10eb0:	1007883a 	mov	r3,r2
   10eb4:	e0bffd17 	ldw	r2,-12(fp)
   10eb8:	1884703a 	and	r2,r3,r2
   10ebc:	1004c03a 	cmpne	r2,r2,zero
}
   10ec0:	e037883a 	mov	sp,fp
   10ec4:	df000017 	ldw	fp,0(sp)
   10ec8:	dec00104 	addi	sp,sp,4
   10ecc:	f800283a 	ret

00010ed0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ed0:	defff404 	addi	sp,sp,-48
   10ed4:	dfc00b15 	stw	ra,44(sp)
   10ed8:	df000a15 	stw	fp,40(sp)
   10edc:	df000a04 	addi	fp,sp,40
   10ee0:	e13ffb15 	stw	r4,-20(fp)
   10ee4:	e17ffc15 	stw	r5,-16(fp)
   10ee8:	e1bffd15 	stw	r6,-12(fp)
   10eec:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   10ef0:	00bffa84 	movi	r2,-22
   10ef4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10ef8:	e0bffc17 	ldw	r2,-16(fp)
   10efc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10f00:	e0bff917 	ldw	r2,-28(fp)
   10f04:	10800808 	cmpgei	r2,r2,32
   10f08:	1000291e 	bne	r2,zero,10fb0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f0c:	0005303a 	rdctl	r2,status
   10f10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f14:	e0fff717 	ldw	r3,-36(fp)
   10f18:	00bfff84 	movi	r2,-2
   10f1c:	1884703a 	and	r2,r3,r2
   10f20:	1001703a 	wrctl	status,r2
  
  return context;
   10f24:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10f28:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   10f2c:	e0bff917 	ldw	r2,-28(fp)
   10f30:	00c00074 	movhi	r3,1
   10f34:	18cecd04 	addi	r3,r3,15156
   10f38:	100490fa 	slli	r2,r2,3
   10f3c:	10c7883a 	add	r3,r2,r3
   10f40:	e0bffd17 	ldw	r2,-12(fp)
   10f44:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   10f48:	e0bff917 	ldw	r2,-28(fp)
   10f4c:	00c00074 	movhi	r3,1
   10f50:	18cecd04 	addi	r3,r3,15156
   10f54:	100490fa 	slli	r2,r2,3
   10f58:	10c5883a 	add	r2,r2,r3
   10f5c:	10c00104 	addi	r3,r2,4
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10f68:	e0bffd17 	ldw	r2,-12(fp)
   10f6c:	1005003a 	cmpeq	r2,r2,zero
   10f70:	1000051e 	bne	r2,zero,10f88 <alt_iic_isr_register+0xb8>
   10f74:	e17ff917 	ldw	r5,-28(fp)
   10f78:	e13ffb17 	ldw	r4,-20(fp)
   10f7c:	0010d4c0 	call	10d4c <alt_ic_irq_enable>
   10f80:	e0bfff15 	stw	r2,-4(fp)
   10f84:	00000406 	br	10f98 <alt_iic_isr_register+0xc8>
   10f88:	e17ff917 	ldw	r5,-28(fp)
   10f8c:	e13ffb17 	ldw	r4,-20(fp)
   10f90:	0010de80 	call	10de8 <alt_ic_irq_disable>
   10f94:	e0bfff15 	stw	r2,-4(fp)
   10f98:	e0bfff17 	ldw	r2,-4(fp)
   10f9c:	e0bffa15 	stw	r2,-24(fp)
   10fa0:	e0bff817 	ldw	r2,-32(fp)
   10fa4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fa8:	e0bff617 	ldw	r2,-40(fp)
   10fac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10fb0:	e0bffa17 	ldw	r2,-24(fp)
}
   10fb4:	e037883a 	mov	sp,fp
   10fb8:	dfc00117 	ldw	ra,4(sp)
   10fbc:	df000017 	ldw	fp,0(sp)
   10fc0:	dec00204 	addi	sp,sp,8
   10fc4:	f800283a 	ret

00010fc8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10fc8:	defffe04 	addi	sp,sp,-8
   10fcc:	dfc00115 	stw	ra,4(sp)
   10fd0:	df000015 	stw	fp,0(sp)
   10fd4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10fd8:	01000074 	movhi	r4,1
   10fdc:	210dce04 	addi	r4,r4,14136
   10fe0:	01400074 	movhi	r5,1
   10fe4:	294cd404 	addi	r5,r5,13136
   10fe8:	01800074 	movhi	r6,1
   10fec:	318dce04 	addi	r6,r6,14136
   10ff0:	00110480 	call	11048 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10ff4:	01000074 	movhi	r4,1
   10ff8:	21000804 	addi	r4,r4,32
   10ffc:	01400074 	movhi	r5,1
   11000:	29400804 	addi	r5,r5,32
   11004:	01800074 	movhi	r6,1
   11008:	31806d04 	addi	r6,r6,436
   1100c:	00110480 	call	11048 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11010:	01000074 	movhi	r4,1
   11014:	210cc104 	addi	r4,r4,13060
   11018:	01400074 	movhi	r5,1
   1101c:	294cc104 	addi	r5,r5,13060
   11020:	01800074 	movhi	r6,1
   11024:	318cd404 	addi	r6,r6,13136
   11028:	00110480 	call	11048 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1102c:	00123c40 	call	123c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   11030:	00127ec0 	call	127ec <alt_icache_flush_all>
}
   11034:	e037883a 	mov	sp,fp
   11038:	dfc00117 	ldw	ra,4(sp)
   1103c:	df000017 	ldw	fp,0(sp)
   11040:	dec00204 	addi	sp,sp,8
   11044:	f800283a 	ret

00011048 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11048:	defffc04 	addi	sp,sp,-16
   1104c:	df000315 	stw	fp,12(sp)
   11050:	df000304 	addi	fp,sp,12
   11054:	e13ffd15 	stw	r4,-12(fp)
   11058:	e17ffe15 	stw	r5,-8(fp)
   1105c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11060:	e0fffe17 	ldw	r3,-8(fp)
   11064:	e0bffd17 	ldw	r2,-12(fp)
   11068:	18800e26 	beq	r3,r2,110a4 <alt_load_section+0x5c>
  {
    while( to != end )
   1106c:	00000a06 	br	11098 <alt_load_section+0x50>
    {
      *to++ = *from++;
   11070:	e0bffd17 	ldw	r2,-12(fp)
   11074:	10c00017 	ldw	r3,0(r2)
   11078:	e0bffe17 	ldw	r2,-8(fp)
   1107c:	10c00015 	stw	r3,0(r2)
   11080:	e0bffe17 	ldw	r2,-8(fp)
   11084:	10800104 	addi	r2,r2,4
   11088:	e0bffe15 	stw	r2,-8(fp)
   1108c:	e0bffd17 	ldw	r2,-12(fp)
   11090:	10800104 	addi	r2,r2,4
   11094:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11098:	e0fffe17 	ldw	r3,-8(fp)
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	18bff31e 	bne	r3,r2,11070 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   110a4:	e037883a 	mov	sp,fp
   110a8:	df000017 	ldw	fp,0(sp)
   110ac:	dec00104 	addi	sp,sp,4
   110b0:	f800283a 	ret

000110b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   110b4:	defffd04 	addi	sp,sp,-12
   110b8:	dfc00215 	stw	ra,8(sp)
   110bc:	df000115 	stw	fp,4(sp)
   110c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   110c4:	0009883a 	mov	r4,zero
   110c8:	00112a00 	call	112a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   110cc:	00112d40 	call	112d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   110d0:	01000074 	movhi	r4,1
   110d4:	210cc404 	addi	r4,r4,13072
   110d8:	01400074 	movhi	r5,1
   110dc:	294cc404 	addi	r5,r5,13072
   110e0:	01800074 	movhi	r6,1
   110e4:	318cc404 	addi	r6,r6,13072
   110e8:	00128e00 	call	128e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   110ec:	00126900 	call	12690 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   110f0:	01000074 	movhi	r4,1
   110f4:	2109bd04 	addi	r4,r4,9972
   110f8:	0012f040 	call	12f04 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   110fc:	d1210a17 	ldw	r4,-31704(gp)
   11100:	d1610b17 	ldw	r5,-31700(gp)
   11104:	d1a10c17 	ldw	r6,-31696(gp)
   11108:	00102bc0 	call	102bc <main>
   1110c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   11110:	01000044 	movi	r4,1
   11114:	00122680 	call	12268 <close>
  exit (result);
   11118:	e13fff17 	ldw	r4,-4(fp)
   1111c:	0012f180 	call	12f18 <exit>

00011120 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11120:	defff704 	addi	sp,sp,-36
   11124:	dfc00815 	stw	ra,32(sp)
   11128:	df000715 	stw	fp,28(sp)
   1112c:	df000704 	addi	fp,sp,28
   11130:	e13ffb15 	stw	r4,-20(fp)
   11134:	e17ffc15 	stw	r5,-16(fp)
   11138:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1113c:	e0bffb17 	ldw	r2,-20(fp)
   11140:	1004803a 	cmplt	r2,r2,zero
   11144:	1000081e 	bne	r2,zero,11168 <write+0x48>
   11148:	e0bffb17 	ldw	r2,-20(fp)
   1114c:	10800324 	muli	r2,r2,12
   11150:	1007883a 	mov	r3,r2
   11154:	00800074 	movhi	r2,1
   11158:	108d6004 	addi	r2,r2,13696
   1115c:	1887883a 	add	r3,r3,r2
   11160:	e0ffff15 	stw	r3,-4(fp)
   11164:	00000106 	br	1116c <write+0x4c>
   11168:	e03fff15 	stw	zero,-4(fp)
   1116c:	e0bfff17 	ldw	r2,-4(fp)
   11170:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   11174:	e0bffa17 	ldw	r2,-24(fp)
   11178:	1005003a 	cmpeq	r2,r2,zero
   1117c:	1000241e 	bne	r2,zero,11210 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11180:	e0bffa17 	ldw	r2,-24(fp)
   11184:	10800217 	ldw	r2,8(r2)
   11188:	108000cc 	andi	r2,r2,3
   1118c:	1005003a 	cmpeq	r2,r2,zero
   11190:	10001a1e 	bne	r2,zero,111fc <write+0xdc>
   11194:	e0bffa17 	ldw	r2,-24(fp)
   11198:	10800017 	ldw	r2,0(r2)
   1119c:	10800617 	ldw	r2,24(r2)
   111a0:	1005003a 	cmpeq	r2,r2,zero
   111a4:	1000151e 	bne	r2,zero,111fc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   111a8:	e0bffa17 	ldw	r2,-24(fp)
   111ac:	10800017 	ldw	r2,0(r2)
   111b0:	10800617 	ldw	r2,24(r2)
   111b4:	e17ffc17 	ldw	r5,-16(fp)
   111b8:	e1bffd17 	ldw	r6,-12(fp)
   111bc:	e13ffa17 	ldw	r4,-24(fp)
   111c0:	103ee83a 	callr	r2
   111c4:	e0bff915 	stw	r2,-28(fp)
   111c8:	e0bff917 	ldw	r2,-28(fp)
   111cc:	1004403a 	cmpge	r2,r2,zero
   111d0:	1000071e 	bne	r2,zero,111f0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   111d4:	00112400 	call	11240 <alt_get_errno>
   111d8:	e0fff917 	ldw	r3,-28(fp)
   111dc:	00c7c83a 	sub	r3,zero,r3
   111e0:	10c00015 	stw	r3,0(r2)
        return -1;
   111e4:	00bfffc4 	movi	r2,-1
   111e8:	e0bffe15 	stw	r2,-8(fp)
   111ec:	00000e06 	br	11228 <write+0x108>
      }
      return rval;
   111f0:	e0bff917 	ldw	r2,-28(fp)
   111f4:	e0bffe15 	stw	r2,-8(fp)
   111f8:	00000b06 	br	11228 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   111fc:	00112400 	call	11240 <alt_get_errno>
   11200:	1007883a 	mov	r3,r2
   11204:	00800344 	movi	r2,13
   11208:	18800015 	stw	r2,0(r3)
   1120c:	00000406 	br	11220 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11210:	00112400 	call	11240 <alt_get_errno>
   11214:	1007883a 	mov	r3,r2
   11218:	00801444 	movi	r2,81
   1121c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11220:	00bfffc4 	movi	r2,-1
   11224:	e0bffe15 	stw	r2,-8(fp)
   11228:	e0bffe17 	ldw	r2,-8(fp)
}
   1122c:	e037883a 	mov	sp,fp
   11230:	dfc00117 	ldw	ra,4(sp)
   11234:	df000017 	ldw	fp,0(sp)
   11238:	dec00204 	addi	sp,sp,8
   1123c:	f800283a 	ret

00011240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11240:	defffd04 	addi	sp,sp,-12
   11244:	dfc00215 	stw	ra,8(sp)
   11248:	df000115 	stw	fp,4(sp)
   1124c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11250:	00800074 	movhi	r2,1
   11254:	108dcd04 	addi	r2,r2,14132
   11258:	10800017 	ldw	r2,0(r2)
   1125c:	1005003a 	cmpeq	r2,r2,zero
   11260:	1000061e 	bne	r2,zero,1127c <alt_get_errno+0x3c>
   11264:	00800074 	movhi	r2,1
   11268:	108dcd04 	addi	r2,r2,14132
   1126c:	10800017 	ldw	r2,0(r2)
   11270:	103ee83a 	callr	r2
   11274:	e0bfff15 	stw	r2,-4(fp)
   11278:	00000306 	br	11288 <alt_get_errno+0x48>
   1127c:	00800074 	movhi	r2,1
   11280:	108ec804 	addi	r2,r2,15136
   11284:	e0bfff15 	stw	r2,-4(fp)
   11288:	e0bfff17 	ldw	r2,-4(fp)
}
   1128c:	e037883a 	mov	sp,fp
   11290:	dfc00117 	ldw	ra,4(sp)
   11294:	df000017 	ldw	fp,0(sp)
   11298:	dec00204 	addi	sp,sp,8
   1129c:	f800283a 	ret

000112a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   112a0:	defffd04 	addi	sp,sp,-12
   112a4:	dfc00215 	stw	ra,8(sp)
   112a8:	df000115 	stw	fp,4(sp)
   112ac:	df000104 	addi	fp,sp,4
   112b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   112b4:	0012c7c0 	call	12c7c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   112b8:	00800044 	movi	r2,1
   112bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   112c0:	e037883a 	mov	sp,fp
   112c4:	dfc00117 	ldw	ra,4(sp)
   112c8:	df000017 	ldw	fp,0(sp)
   112cc:	dec00204 	addi	sp,sp,8
   112d0:	f800283a 	ret

000112d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   112d4:	defffd04 	addi	sp,sp,-12
   112d8:	dfc00215 	stw	ra,8(sp)
   112dc:	df000115 	stw	fp,4(sp)
   112e0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_DMA_INIT ( DMA_0, dma_0);
   112e4:	00800044 	movi	r2,1
   112e8:	d8800015 	stw	r2,0(sp)
   112ec:	01000074 	movhi	r4,1
   112f0:	210d3d04 	addi	r4,r4,13556
   112f4:	01400074 	movhi	r5,1
   112f8:	294d4404 	addi	r5,r5,13584
   112fc:	018000b4 	movhi	r6,2
   11300:	31844804 	addi	r6,r6,4384
   11304:	000f883a 	mov	r7,zero
   11308:	0011ef00 	call	11ef0 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1130c:	01000074 	movhi	r4,1
   11310:	210d4b04 	addi	r4,r4,13612
   11314:	001132c0 	call	1132c <alt_dev_reg>
}
   11318:	e037883a 	mov	sp,fp
   1131c:	dfc00117 	ldw	ra,4(sp)
   11320:	df000017 	ldw	fp,0(sp)
   11324:	dec00204 	addi	sp,sp,8
   11328:	f800283a 	ret

0001132c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1132c:	defffd04 	addi	sp,sp,-12
   11330:	dfc00215 	stw	ra,8(sp)
   11334:	df000115 	stw	fp,4(sp)
   11338:	df000104 	addi	fp,sp,4
   1133c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11340:	e13fff17 	ldw	r4,-4(fp)
   11344:	01400074 	movhi	r5,1
   11348:	294dc604 	addi	r5,r5,14104
   1134c:	001240c0 	call	1240c <alt_dev_llist_insert>
}
   11350:	e037883a 	mov	sp,fp
   11354:	dfc00117 	ldw	ra,4(sp)
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00204 	addi	sp,sp,8
   11360:	f800283a 	ret

00011364 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
   11364:	defff904 	addi	sp,sp,-28
   11368:	df000615 	stw	fp,24(sp)
   1136c:	df000604 	addi	fp,sp,24
   11370:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   11374:	e0bffc17 	ldw	r2,-16(fp)
   11378:	10c00117 	ldw	r3,4(r2)
   1137c:	e0bffc17 	ldw	r2,-16(fp)
   11380:	10800217 	ldw	r2,8(r2)
   11384:	18803926 	beq	r3,r2,1146c <alt_avalon_dma_launch_bidir+0x108>
   11388:	e0bffc17 	ldw	r2,-16(fp)
   1138c:	10c00317 	ldw	r3,12(r2)
   11390:	e0bffc17 	ldw	r2,-16(fp)
   11394:	10800417 	ldw	r2,16(r2)
   11398:	18803426 	beq	r3,r2,1146c <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
   1139c:	e0fffc17 	ldw	r3,-16(fp)
   113a0:	00800044 	movi	r2,1
   113a4:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
   113a8:	e0bffc17 	ldw	r2,-16(fp)
   113ac:	10c00904 	addi	r3,r2,36
   113b0:	e0bffc17 	ldw	r2,-16(fp)
   113b4:	10800117 	ldw	r2,4(r2)
   113b8:	1004913a 	slli	r2,r2,4
   113bc:	1885883a 	add	r2,r3,r2
   113c0:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
   113c4:	e0bffc17 	ldw	r2,-16(fp)
   113c8:	10c01904 	addi	r3,r2,100
   113cc:	e0bffc17 	ldw	r2,-16(fp)
   113d0:	10800317 	ldw	r2,12(r2)
   113d4:	1004913a 	slli	r2,r2,4
   113d8:	1885883a 	add	r2,r3,r2
   113dc:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   113e0:	e0bffc17 	ldw	r2,-16(fp)
   113e4:	10800017 	ldw	r2,0(r2)
   113e8:	11000104 	addi	r4,r2,4
   113ec:	e0bffb17 	ldw	r2,-20(fp)
   113f0:	10800017 	ldw	r2,0(r2)
   113f4:	1007883a 	mov	r3,r2
   113f8:	2005883a 	mov	r2,r4
   113fc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   11400:	e0bffc17 	ldw	r2,-16(fp)
   11404:	10800017 	ldw	r2,0(r2)
   11408:	11000204 	addi	r4,r2,8
   1140c:	e0bffa17 	ldw	r2,-24(fp)
   11410:	10800017 	ldw	r2,0(r2)
   11414:	1007883a 	mov	r3,r2
   11418:	2005883a 	mov	r2,r4
   1141c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
   11420:	e0bffc17 	ldw	r2,-16(fp)
   11424:	10800017 	ldw	r2,0(r2)
   11428:	10800304 	addi	r2,r2,12
   1142c:	e0bfff15 	stw	r2,-4(fp)
   11430:	e0bffb17 	ldw	r2,-20(fp)
   11434:	10c00117 	ldw	r3,4(r2)
   11438:	e0bffa17 	ldw	r2,-24(fp)
   1143c:	10800117 	ldw	r2,4(r2)
   11440:	e0bffe15 	stw	r2,-8(fp)
   11444:	e0fffd15 	stw	r3,-12(fp)
   11448:	e0bffe17 	ldw	r2,-8(fp)
   1144c:	e0fffd17 	ldw	r3,-12(fp)
   11450:	10c0022e 	bgeu	r2,r3,1145c <alt_avalon_dma_launch_bidir+0xf8>
   11454:	e0bffe17 	ldw	r2,-8(fp)
   11458:	e0bffd15 	stw	r2,-12(fp)
   1145c:	e0fffd17 	ldw	r3,-12(fp)
   11460:	e0bfff17 	ldw	r2,-4(fp)
   11464:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
   11468:	00000206 	br	11474 <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
   1146c:	e0bffc17 	ldw	r2,-16(fp)
   11470:	10000815 	stw	zero,32(r2)
  }
}
   11474:	e037883a 	mov	sp,fp
   11478:	df000017 	ldw	fp,0(sp)
   1147c:	dec00104 	addi	sp,sp,4
   11480:	f800283a 	ret

00011484 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
   11484:	defffd04 	addi	sp,sp,-12
   11488:	df000215 	stw	fp,8(sp)
   1148c:	df000204 	addi	fp,sp,8
   11490:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
   11494:	e0bfff17 	ldw	r2,-4(fp)
   11498:	10c00117 	ldw	r3,4(r2)
   1149c:	e0bfff17 	ldw	r2,-4(fp)
   114a0:	10800217 	ldw	r2,8(r2)
   114a4:	18801b26 	beq	r3,r2,11514 <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
   114a8:	e0ffff17 	ldw	r3,-4(fp)
   114ac:	00800044 	movi	r2,1
   114b0:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
   114b4:	e0bfff17 	ldw	r2,-4(fp)
   114b8:	10c00904 	addi	r3,r2,36
   114bc:	e0bfff17 	ldw	r2,-4(fp)
   114c0:	10800117 	ldw	r2,4(r2)
   114c4:	1004913a 	slli	r2,r2,4
   114c8:	1885883a 	add	r2,r3,r2
   114cc:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
   114d0:	e0bfff17 	ldw	r2,-4(fp)
   114d4:	10800017 	ldw	r2,0(r2)
   114d8:	11000104 	addi	r4,r2,4
   114dc:	e0bffe17 	ldw	r2,-8(fp)
   114e0:	10800017 	ldw	r2,0(r2)
   114e4:	1007883a 	mov	r3,r2
   114e8:	2005883a 	mov	r2,r4
   114ec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
   114f0:	e0bfff17 	ldw	r2,-4(fp)
   114f4:	10800017 	ldw	r2,0(r2)
   114f8:	11000304 	addi	r4,r2,12
   114fc:	e0bffe17 	ldw	r2,-8(fp)
   11500:	10800117 	ldw	r2,4(r2)
   11504:	1007883a 	mov	r3,r2
   11508:	2005883a 	mov	r2,r4
   1150c:	10c00035 	stwio	r3,0(r2)
   11510:	00000206 	br	1151c <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
   11514:	e0bfff17 	ldw	r2,-4(fp)
   11518:	10000815 	stw	zero,32(r2)
  }
}
   1151c:	e037883a 	mov	sp,fp
   11520:	df000017 	ldw	fp,0(sp)
   11524:	dec00104 	addi	sp,sp,4
   11528:	f800283a 	ret

0001152c <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
   1152c:	defffd04 	addi	sp,sp,-12
   11530:	df000215 	stw	fp,8(sp)
   11534:	df000204 	addi	fp,sp,8
   11538:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
   1153c:	e0bfff17 	ldw	r2,-4(fp)
   11540:	10c00317 	ldw	r3,12(r2)
   11544:	e0bfff17 	ldw	r2,-4(fp)
   11548:	10800417 	ldw	r2,16(r2)
   1154c:	18801b26 	beq	r3,r2,115bc <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
   11550:	e0ffff17 	ldw	r3,-4(fp)
   11554:	00800044 	movi	r2,1
   11558:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
   1155c:	e0bfff17 	ldw	r2,-4(fp)
   11560:	10c01904 	addi	r3,r2,100
   11564:	e0bfff17 	ldw	r2,-4(fp)
   11568:	10800317 	ldw	r2,12(r2)
   1156c:	1004913a 	slli	r2,r2,4
   11570:	1885883a 	add	r2,r3,r2
   11574:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
   11578:	e0bfff17 	ldw	r2,-4(fp)
   1157c:	10800017 	ldw	r2,0(r2)
   11580:	11000204 	addi	r4,r2,8
   11584:	e0bffe17 	ldw	r2,-8(fp)
   11588:	10800017 	ldw	r2,0(r2)
   1158c:	1007883a 	mov	r3,r2
   11590:	2005883a 	mov	r2,r4
   11594:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
   11598:	e0bfff17 	ldw	r2,-4(fp)
   1159c:	10800017 	ldw	r2,0(r2)
   115a0:	11000304 	addi	r4,r2,12
   115a4:	e0bffe17 	ldw	r2,-8(fp)
   115a8:	10800117 	ldw	r2,4(r2)
   115ac:	1007883a 	mov	r3,r2
   115b0:	2005883a 	mov	r2,r4
   115b4:	10c00035 	stwio	r3,0(r2)
   115b8:	00000206 	br	115c4 <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
   115bc:	e0bfff17 	ldw	r2,-4(fp)
   115c0:	10000815 	stw	zero,32(r2)
  }
}
   115c4:	e037883a 	mov	sp,fp
   115c8:	df000017 	ldw	fp,0(sp)
   115cc:	dec00104 	addi	sp,sp,4
   115d0:	f800283a 	ret

000115d4 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
   115d4:	defff804 	addi	sp,sp,-32
   115d8:	df000715 	stw	fp,28(sp)
   115dc:	df000704 	addi	fp,sp,28
   115e0:	e13ffb15 	stw	r4,-20(fp)
   115e4:	e17ffc15 	stw	r5,-16(fp)
   115e8:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
   115ec:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
   115f0:	e0bffb17 	ldw	r2,-20(fp)
   115f4:	10c00117 	ldw	r3,4(r2)
   115f8:	e0bffb17 	ldw	r2,-20(fp)
   115fc:	10800217 	ldw	r2,8(r2)
   11600:	18800b1e 	bne	r3,r2,11630 <alt_avalon_dma_ioctl+0x5c>
   11604:	e0bffb17 	ldw	r2,-20(fp)
   11608:	10c00317 	ldw	r3,12(r2)
   1160c:	e0bffb17 	ldw	r2,-20(fp)
   11610:	10800417 	ldw	r2,16(r2)
   11614:	1880061e 	bne	r3,r2,11630 <alt_avalon_dma_ioctl+0x5c>
   11618:	e0bffb17 	ldw	r2,-20(fp)
   1161c:	10800017 	ldw	r2,0(r2)
   11620:	10800304 	addi	r2,r2,12
   11624:	10800037 	ldwio	r2,0(r2)
   11628:	1005003a 	cmpeq	r2,r2,zero
   1162c:	1000031e 	bne	r2,zero,1163c <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
   11630:	00bffec4 	movi	r2,-5
   11634:	e0bfff15 	stw	r2,-4(fp)
   11638:	0000ca06 	br	11964 <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
   1163c:	e0bffc17 	ldw	r2,-16(fp)
   11640:	108002a8 	cmpgeui	r2,r2,10
   11644:	10007d1e 	bne	r2,zero,1183c <alt_avalon_dma_ioctl+0x268>
   11648:	e0bffc17 	ldw	r2,-16(fp)
   1164c:	1085883a 	add	r2,r2,r2
   11650:	1087883a 	add	r3,r2,r2
   11654:	00800074 	movhi	r2,1
   11658:	10859a04 	addi	r2,r2,5736
   1165c:	1885883a 	add	r2,r3,r2
   11660:	10800017 	ldw	r2,0(r2)
   11664:	1000683a 	jmp	r2
   11668:	0001183c 	xorhi	zero,zero,1120
   1166c:	00011690 	cmplti	zero,zero,1114
   11670:	000116ec 	andhi	zero,zero,1115
   11674:	00011718 	cmpnei	zero,zero,1116
   11678:	00011774 	movhi	zero,1117
   1167c:	000117a0 	cmpeqi	zero,zero,1118
   11680:	000117bc 	xorhi	zero,zero,1118
   11684:	000117dc 	xori	zero,zero,1119
   11688:	000117fc 	xorhi	zero,zero,1119
   1168c:	0001181c 	xori	zero,zero,1120
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
   11690:	e0bffb17 	ldw	r2,-20(fp)
   11694:	10800517 	ldw	r2,20(r2)
   11698:	1080100c 	andi	r2,r2,64
   1169c:	1004c03a 	cmpne	r2,r2,zero
   116a0:	10000f1e 	bne	r2,zero,116e0 <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
   116a4:	e0bffb17 	ldw	r2,-20(fp)
   116a8:	10800017 	ldw	r2,0(r2)
   116ac:	10800104 	addi	r2,r2,4
   116b0:	e0fffd17 	ldw	r3,-12(fp)
   116b4:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
   116b8:	e0bffb17 	ldw	r2,-20(fp)
   116bc:	10800517 	ldw	r2,20(r2)
   116c0:	10c00814 	ori	r3,r2,32
   116c4:	e0bffb17 	ldw	r2,-20(fp)
   116c8:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
   116cc:	e0fffb17 	ldw	r3,-20(fp)
   116d0:	00800074 	movhi	r2,1
   116d4:	10854b04 	addi	r2,r2,5420
   116d8:	18800715 	stw	r2,28(r3)
   116dc:	00005906 	br	11844 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
   116e0:	00bffec4 	movi	r2,-5
   116e4:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   116e8:	00005606 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
   116ec:	e0bffb17 	ldw	r2,-20(fp)
   116f0:	10c00517 	ldw	r3,20(r2)
   116f4:	00bff7c4 	movi	r2,-33
   116f8:	1886703a 	and	r3,r3,r2
   116fc:	e0bffb17 	ldw	r2,-20(fp)
   11700:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   11704:	e0fffb17 	ldw	r3,-20(fp)
   11708:	00800074 	movhi	r2,1
   1170c:	1084d904 	addi	r2,r2,4964
   11710:	18800715 	stw	r2,28(r3)
    break;
   11714:	00004b06 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
   11718:	e0bffb17 	ldw	r2,-20(fp)
   1171c:	10800517 	ldw	r2,20(r2)
   11720:	1080080c 	andi	r2,r2,32
   11724:	1004c03a 	cmpne	r2,r2,zero
   11728:	10000f1e 	bne	r2,zero,11768 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
   1172c:	e0bffb17 	ldw	r2,-20(fp)
   11730:	10800017 	ldw	r2,0(r2)
   11734:	10800204 	addi	r2,r2,8
   11738:	e0fffd17 	ldw	r3,-12(fp)
   1173c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
   11740:	e0bffb17 	ldw	r2,-20(fp)
   11744:	10800517 	ldw	r2,20(r2)
   11748:	10c01014 	ori	r3,r2,64
   1174c:	e0bffb17 	ldw	r2,-20(fp)
   11750:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
   11754:	e0fffb17 	ldw	r3,-20(fp)
   11758:	00800074 	movhi	r2,1
   1175c:	10852104 	addi	r2,r2,5252
   11760:	18800715 	stw	r2,28(r3)
   11764:	00003706 	br	11844 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
   11768:	00bffec4 	movi	r2,-5
   1176c:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
   11770:	00003406 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
   11774:	e0bffb17 	ldw	r2,-20(fp)
   11778:	10c00517 	ldw	r3,20(r2)
   1177c:	00bfefc4 	movi	r2,-65
   11780:	1886703a 	and	r3,r3,r2
   11784:	e0bffb17 	ldw	r2,-20(fp)
   11788:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
   1178c:	e0fffb17 	ldw	r3,-20(fp)
   11790:	00800074 	movhi	r2,1
   11794:	1084d904 	addi	r2,r2,4964
   11798:	18800715 	stw	r2,28(r3)
    break;
   1179c:	00002906 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   117a0:	e0bffb17 	ldw	r2,-20(fp)
   117a4:	10c00517 	ldw	r3,20(r2)
   117a8:	00bffc04 	movi	r2,-16
   117ac:	1886703a 	and	r3,r3,r2
   117b0:	e0bffb17 	ldw	r2,-20(fp)
   117b4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
   117b8:	00002206 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   117bc:	e0bffb17 	ldw	r2,-20(fp)
   117c0:	10c00517 	ldw	r3,20(r2)
   117c4:	00bffc04 	movi	r2,-16
   117c8:	1884703a 	and	r2,r3,r2
   117cc:	10c00054 	ori	r3,r2,1
   117d0:	e0bffb17 	ldw	r2,-20(fp)
   117d4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
   117d8:	00001a06 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   117dc:	e0bffb17 	ldw	r2,-20(fp)
   117e0:	10c00517 	ldw	r3,20(r2)
   117e4:	00bffc04 	movi	r2,-16
   117e8:	1884703a 	and	r2,r3,r2
   117ec:	10c000d4 	ori	r3,r2,3
   117f0:	e0bffb17 	ldw	r2,-20(fp)
   117f4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
   117f8:	00001206 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   117fc:	e0bffb17 	ldw	r2,-20(fp)
   11800:	10c00517 	ldw	r3,20(r2)
   11804:	00bffc04 	movi	r2,-16
   11808:	1884703a 	and	r2,r3,r2
   1180c:	10c001d4 	ori	r3,r2,7
   11810:	e0bffb17 	ldw	r2,-20(fp)
   11814:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
   11818:	00000a06 	br	11844 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
   1181c:	e0bffb17 	ldw	r2,-20(fp)
   11820:	10c00517 	ldw	r3,20(r2)
   11824:	00bffc04 	movi	r2,-16
   11828:	1884703a 	and	r2,r3,r2
   1182c:	10c003d4 	ori	r3,r2,15
   11830:	e0bffb17 	ldw	r2,-20(fp)
   11834:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
   11838:	00000206 	br	11844 <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
   1183c:	00bff9c4 	movi	r2,-25
   11840:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
   11844:	e0bffa17 	ldw	r2,-24(fp)
   11848:	1004c03a 	cmpne	r2,r2,zero
   1184c:	1000431e 	bne	r2,zero,1195c <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
   11850:	e0bffb17 	ldw	r2,-20(fp)
   11854:	10800517 	ldw	r2,20(r2)
   11858:	108003cc 	andi	r2,r2,15
   1185c:	e0bffe15 	stw	r2,-8(fp)
   11860:	e0fffe17 	ldw	r3,-8(fp)
   11864:	18800060 	cmpeqi	r2,r3,1
   11868:	10000d1e 	bne	r2,zero,118a0 <alt_avalon_dma_ioctl+0x2cc>
   1186c:	e0fffe17 	ldw	r3,-8(fp)
   11870:	18800070 	cmpltui	r2,r3,1
   11874:	1000071e 	bne	r2,zero,11894 <alt_avalon_dma_ioctl+0x2c0>
   11878:	e0fffe17 	ldw	r3,-8(fp)
   1187c:	188000e0 	cmpeqi	r2,r3,3
   11880:	10000a1e 	bne	r2,zero,118ac <alt_avalon_dma_ioctl+0x2d8>
   11884:	e0fffe17 	ldw	r3,-8(fp)
   11888:	188001e0 	cmpeqi	r2,r3,7
   1188c:	10000a1e 	bne	r2,zero,118b8 <alt_avalon_dma_ioctl+0x2e4>
   11890:	00000c06 	br	118c4 <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
   11894:	00800044 	movi	r2,1
   11898:	e0bff915 	stw	r2,-28(fp)
       break;
   1189c:	00000b06 	br	118cc <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
   118a0:	00800084 	movi	r2,2
   118a4:	e0bff915 	stw	r2,-28(fp)
       break;
   118a8:	00000806 	br	118cc <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
   118ac:	00800104 	movi	r2,4
   118b0:	e0bff915 	stw	r2,-28(fp)
       break;
   118b4:	00000506 	br	118cc <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
   118b8:	00810004 	movi	r2,1024
   118bc:	e0bff915 	stw	r2,-28(fp)
       break;
   118c0:	00000206 	br	118cc <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
   118c4:	00820004 	movi	r2,2048
   118c8:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
   118cc:	e0bffb17 	ldw	r2,-20(fp)
   118d0:	10800517 	ldw	r2,20(r2)
   118d4:	1080080c 	andi	r2,r2,32
   118d8:	1005003a 	cmpeq	r2,r2,zero
   118dc:	1000091e 	bne	r2,zero,11904 <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   118e0:	e0bffb17 	ldw	r2,-20(fp)
   118e4:	10800017 	ldw	r2,0(r2)
   118e8:	11000604 	addi	r4,r2,24
   118ec:	e0bff917 	ldw	r2,-28(fp)
   118f0:	10807e14 	ori	r2,r2,504
   118f4:	1007883a 	mov	r3,r2
   118f8:	2005883a 	mov	r2,r4
   118fc:	10c00035 	stwio	r3,0(r2)
   11900:	00001606 	br	1195c <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
   11904:	e0bffb17 	ldw	r2,-20(fp)
   11908:	10800517 	ldw	r2,20(r2)
   1190c:	1080100c 	andi	r2,r2,64
   11910:	1005003a 	cmpeq	r2,r2,zero
   11914:	1000091e 	bne	r2,zero,1193c <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   11918:	e0bffb17 	ldw	r2,-20(fp)
   1191c:	10800017 	ldw	r2,0(r2)
   11920:	11000604 	addi	r4,r2,24
   11924:	e0bff917 	ldw	r2,-28(fp)
   11928:	1080be14 	ori	r2,r2,760
   1192c:	1007883a 	mov	r3,r2
   11930:	2005883a 	mov	r2,r4
   11934:	10c00035 	stwio	r3,0(r2)
   11938:	00000806 	br	1195c <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
   1193c:	e0bffb17 	ldw	r2,-20(fp)
   11940:	10800017 	ldw	r2,0(r2)
   11944:	11000604 	addi	r4,r2,24
   11948:	e0bff917 	ldw	r2,-28(fp)
   1194c:	10803e14 	ori	r2,r2,248
   11950:	1007883a 	mov	r3,r2
   11954:	2005883a 	mov	r2,r4
   11958:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
   1195c:	e0bffa17 	ldw	r2,-24(fp)
   11960:	e0bfff15 	stw	r2,-4(fp)
   11964:	e0bfff17 	ldw	r2,-4(fp)
}
   11968:	e037883a 	mov	sp,fp
   1196c:	df000017 	ldw	fp,0(sp)
   11970:	dec00104 	addi	sp,sp,4
   11974:	f800283a 	ret

00011978 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
   11978:	defffb04 	addi	sp,sp,-20
   1197c:	dfc00415 	stw	ra,16(sp)
   11980:	df000315 	stw	fp,12(sp)
   11984:	df000304 	addi	fp,sp,12
   11988:	e13ffd15 	stw	r4,-12(fp)
   1198c:	e17ffe15 	stw	r5,-8(fp)
   11990:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
   11994:	e0bffd17 	ldw	r2,-12(fp)
   11998:	11000617 	ldw	r4,24(r2)
   1199c:	e17ffe17 	ldw	r5,-8(fp)
   119a0:	e1bfff17 	ldw	r6,-4(fp)
   119a4:	00115d40 	call	115d4 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   119a8:	e037883a 	mov	sp,fp
   119ac:	dfc00117 	ldw	ra,4(sp)
   119b0:	df000017 	ldw	fp,0(sp)
   119b4:	dec00204 	addi	sp,sp,8
   119b8:	f800283a 	ret

000119bc <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
   119bc:	defffb04 	addi	sp,sp,-20
   119c0:	dfc00415 	stw	ra,16(sp)
   119c4:	df000315 	stw	fp,12(sp)
   119c8:	df000304 	addi	fp,sp,12
   119cc:	e13ffd15 	stw	r4,-12(fp)
   119d0:	e17ffe15 	stw	r5,-8(fp)
   119d4:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
   119d8:	e0bffd17 	ldw	r2,-12(fp)
   119dc:	11000617 	ldw	r4,24(r2)
   119e0:	e17ffe17 	ldw	r5,-8(fp)
   119e4:	e1bfff17 	ldw	r6,-4(fp)
   119e8:	00115d40 	call	115d4 <alt_avalon_dma_ioctl>
             req,
             arg);
}
   119ec:	e037883a 	mov	sp,fp
   119f0:	dfc00117 	ldw	ra,4(sp)
   119f4:	df000017 	ldw	fp,0(sp)
   119f8:	dec00204 	addi	sp,sp,8
   119fc:	f800283a 	ret

00011a00 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
   11a00:	defff304 	addi	sp,sp,-52
   11a04:	dfc00c15 	stw	ra,48(sp)
   11a08:	df000b15 	stw	fp,44(sp)
   11a0c:	df000b04 	addi	fp,sp,44
   11a10:	e13ffb15 	stw	r4,-20(fp)
   11a14:	e17ffc15 	stw	r5,-16(fp)
   11a18:	e1bffd15 	stw	r6,-12(fp)
   11a1c:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
   11a20:	e0bffb17 	ldw	r2,-20(fp)
   11a24:	10800617 	ldw	r2,24(r2)
   11a28:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   11a2c:	e0bff517 	ldw	r2,-44(fp)
   11a30:	10800517 	ldw	r2,20(r2)
   11a34:	108003cc 	andi	r2,r2,15
   11a38:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
   11a3c:	e0bffc17 	ldw	r2,-16(fp)
   11a40:	1007883a 	mov	r3,r2
   11a44:	e0bff617 	ldw	r2,-40(fp)
   11a48:	1884703a 	and	r2,r3,r2
   11a4c:	1004c03a 	cmpne	r2,r2,zero
   11a50:	1000091e 	bne	r2,zero,11a78 <alt_avalon_dma_prepare+0x78>
   11a54:	e0fffd17 	ldw	r3,-12(fp)
   11a58:	e0bff617 	ldw	r2,-40(fp)
   11a5c:	1884703a 	and	r2,r3,r2
   11a60:	1004c03a 	cmpne	r2,r2,zero
   11a64:	1000041e 	bne	r2,zero,11a78 <alt_avalon_dma_prepare+0x78>
   11a68:	e0bff517 	ldw	r2,-44(fp)
   11a6c:	10c00617 	ldw	r3,24(r2)
   11a70:	e0bffd17 	ldw	r2,-12(fp)
   11a74:	1880032e 	bgeu	r3,r2,11a84 <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
   11a78:	00bffa84 	movi	r2,-22
   11a7c:	e0bfff15 	stw	r2,-4(fp)
   11a80:	00002e06 	br	11b3c <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
   11a84:	e0bff517 	ldw	r2,-44(fp)
   11a88:	10800317 	ldw	r2,12(r2)
   11a8c:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
   11a90:	e0bff517 	ldw	r2,-44(fp)
   11a94:	10800417 	ldw	r2,16(r2)
   11a98:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
   11a9c:	e0bff517 	ldw	r2,-44(fp)
   11aa0:	10c01904 	addi	r3,r2,100
   11aa4:	e0bff817 	ldw	r2,-32(fp)
   11aa8:	1004913a 	slli	r2,r2,4
   11aac:	1885883a 	add	r2,r3,r2
   11ab0:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   11ab4:	e0bff817 	ldw	r2,-32(fp)
   11ab8:	10800044 	addi	r2,r2,1
   11abc:	108000cc 	andi	r2,r2,3
   11ac0:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
   11ac4:	e0fff717 	ldw	r3,-36(fp)
   11ac8:	e0bff917 	ldw	r2,-28(fp)
   11acc:	1880031e 	bne	r3,r2,11adc <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
   11ad0:	00bff904 	movi	r2,-28
   11ad4:	e0bfff15 	stw	r2,-4(fp)
   11ad8:	00001806 	br	11b3c <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
   11adc:	e0fffa17 	ldw	r3,-24(fp)
   11ae0:	e0bffc17 	ldw	r2,-16(fp)
   11ae4:	18800015 	stw	r2,0(r3)
  slot->len    = len;
   11ae8:	e0fffa17 	ldw	r3,-24(fp)
   11aec:	e0bffd17 	ldw	r2,-12(fp)
   11af0:	18800115 	stw	r2,4(r3)
  slot->done   = done;
   11af4:	e0fffa17 	ldw	r3,-24(fp)
   11af8:	e0bffe17 	ldw	r2,-8(fp)
   11afc:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
   11b00:	e0fffa17 	ldw	r3,-24(fp)
   11b04:	e0800217 	ldw	r2,8(fp)
   11b08:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
   11b0c:	e0fff517 	ldw	r3,-44(fp)
   11b10:	e0bff717 	ldw	r2,-36(fp)
   11b14:	18800415 	stw	r2,16(r3)

  if (!priv->active)
   11b18:	e0bff517 	ldw	r2,-44(fp)
   11b1c:	10800817 	ldw	r2,32(r2)
   11b20:	1004c03a 	cmpne	r2,r2,zero
   11b24:	1000041e 	bne	r2,zero,11b38 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
   11b28:	e0bff517 	ldw	r2,-44(fp)
   11b2c:	10800717 	ldw	r2,28(r2)
   11b30:	e13ff517 	ldw	r4,-44(fp)
   11b34:	103ee83a 	callr	r2
  }

  return 0;
   11b38:	e03fff15 	stw	zero,-4(fp)
   11b3c:	e0bfff17 	ldw	r2,-4(fp)
}
   11b40:	e037883a 	mov	sp,fp
   11b44:	dfc00117 	ldw	ra,4(sp)
   11b48:	df000017 	ldw	fp,0(sp)
   11b4c:	dec00204 	addi	sp,sp,8
   11b50:	f800283a 	ret

00011b54 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
   11b54:	defffa04 	addi	sp,sp,-24
   11b58:	df000515 	stw	fp,20(sp)
   11b5c:	df000504 	addi	fp,sp,20
   11b60:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   11b64:	e0bffe17 	ldw	r2,-8(fp)
   11b68:	10800617 	ldw	r2,24(r2)
   11b6c:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
   11b70:	e0bffd17 	ldw	r2,-12(fp)
   11b74:	10800117 	ldw	r2,4(r2)
   11b78:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
   11b7c:	e0bffd17 	ldw	r2,-12(fp)
   11b80:	10800217 	ldw	r2,8(r2)
   11b84:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
   11b88:	e0fffc17 	ldw	r3,-16(fp)
   11b8c:	e0bffb17 	ldw	r2,-20(fp)
   11b90:	10c0062e 	bgeu	r2,r3,11bac <alt_avalon_dma_space+0x58>
   11b94:	e0fffc17 	ldw	r3,-16(fp)
   11b98:	e0bffb17 	ldw	r2,-20(fp)
   11b9c:	1885c83a 	sub	r2,r3,r2
   11ba0:	10bfffc4 	addi	r2,r2,-1
   11ba4:	e0bfff15 	stw	r2,-4(fp)
   11ba8:	00000506 	br	11bc0 <alt_avalon_dma_space+0x6c>
   11bac:	e0fffc17 	ldw	r3,-16(fp)
   11bb0:	e0bffb17 	ldw	r2,-20(fp)
   11bb4:	1885c83a 	sub	r2,r3,r2
   11bb8:	108000c4 	addi	r2,r2,3
   11bbc:	e0bfff15 	stw	r2,-4(fp)
   11bc0:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
   11bc4:	e037883a 	mov	sp,fp
   11bc8:	df000017 	ldw	fp,0(sp)
   11bcc:	dec00104 	addi	sp,sp,4
   11bd0:	f800283a 	ret

00011bd4 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
   11bd4:	defff304 	addi	sp,sp,-52
   11bd8:	dfc00c15 	stw	ra,48(sp)
   11bdc:	df000b15 	stw	fp,44(sp)
   11be0:	df000b04 	addi	fp,sp,44
   11be4:	e13ffb15 	stw	r4,-20(fp)
   11be8:	e17ffc15 	stw	r5,-16(fp)
   11bec:	e1bffd15 	stw	r6,-12(fp)
   11bf0:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
   11bf4:	e0bffb17 	ldw	r2,-20(fp)
   11bf8:	10800617 	ldw	r2,24(r2)
   11bfc:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
   11c00:	e0bff517 	ldw	r2,-44(fp)
   11c04:	10800517 	ldw	r2,20(r2)
   11c08:	108003cc 	andi	r2,r2,15
   11c0c:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
   11c10:	e0bffc17 	ldw	r2,-16(fp)
   11c14:	1007883a 	mov	r3,r2
   11c18:	e0bff717 	ldw	r2,-36(fp)
   11c1c:	1884703a 	and	r2,r3,r2
   11c20:	1004c03a 	cmpne	r2,r2,zero
   11c24:	1000091e 	bne	r2,zero,11c4c <alt_avalon_dma_send+0x78>
   11c28:	e0fffd17 	ldw	r3,-12(fp)
   11c2c:	e0bff717 	ldw	r2,-36(fp)
   11c30:	1884703a 	and	r2,r3,r2
   11c34:	1004c03a 	cmpne	r2,r2,zero
   11c38:	1000041e 	bne	r2,zero,11c4c <alt_avalon_dma_send+0x78>
   11c3c:	e0bff517 	ldw	r2,-44(fp)
   11c40:	10c00617 	ldw	r3,24(r2)
   11c44:	e0bffd17 	ldw	r2,-12(fp)
   11c48:	1880032e 	bgeu	r3,r2,11c58 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
   11c4c:	00bffa84 	movi	r2,-22
   11c50:	e0bfff15 	stw	r2,-4(fp)
   11c54:	00002e06 	br	11d10 <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
   11c58:	e0bff517 	ldw	r2,-44(fp)
   11c5c:	10800117 	ldw	r2,4(r2)
   11c60:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
   11c64:	e0bff517 	ldw	r2,-44(fp)
   11c68:	10800217 	ldw	r2,8(r2)
   11c6c:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
   11c70:	e0bff517 	ldw	r2,-44(fp)
   11c74:	10c00904 	addi	r3,r2,36
   11c78:	e0bff817 	ldw	r2,-32(fp)
   11c7c:	1004913a 	slli	r2,r2,4
   11c80:	1885883a 	add	r2,r3,r2
   11c84:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   11c88:	e0bff817 	ldw	r2,-32(fp)
   11c8c:	10800044 	addi	r2,r2,1
   11c90:	108000cc 	andi	r2,r2,3
   11c94:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
   11c98:	e0fff617 	ldw	r3,-40(fp)
   11c9c:	e0bff917 	ldw	r2,-28(fp)
   11ca0:	1880031e 	bne	r3,r2,11cb0 <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
   11ca4:	00bff904 	movi	r2,-28
   11ca8:	e0bfff15 	stw	r2,-4(fp)
   11cac:	00001806 	br	11d10 <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
   11cb0:	e0fffa17 	ldw	r3,-24(fp)
   11cb4:	e0bffc17 	ldw	r2,-16(fp)
   11cb8:	18800015 	stw	r2,0(r3)
  slot->len    = len;
   11cbc:	e0fffa17 	ldw	r3,-24(fp)
   11cc0:	e0bffd17 	ldw	r2,-12(fp)
   11cc4:	18800115 	stw	r2,4(r3)
  slot->done   = done;
   11cc8:	e0fffa17 	ldw	r3,-24(fp)
   11ccc:	e0bffe17 	ldw	r2,-8(fp)
   11cd0:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
   11cd4:	e0fffa17 	ldw	r3,-24(fp)
   11cd8:	e0800217 	ldw	r2,8(fp)
   11cdc:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
   11ce0:	e0fff517 	ldw	r3,-44(fp)
   11ce4:	e0bff617 	ldw	r2,-40(fp)
   11ce8:	18800215 	stw	r2,8(r3)

  if (!priv->active)
   11cec:	e0bff517 	ldw	r2,-44(fp)
   11cf0:	10800817 	ldw	r2,32(r2)
   11cf4:	1004c03a 	cmpne	r2,r2,zero
   11cf8:	1000041e 	bne	r2,zero,11d0c <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
   11cfc:	e0bff517 	ldw	r2,-44(fp)
   11d00:	10800717 	ldw	r2,28(r2)
   11d04:	e13ff517 	ldw	r4,-44(fp)
   11d08:	103ee83a 	callr	r2
  }

  return 0;
   11d0c:	e03fff15 	stw	zero,-4(fp)
   11d10:	e0bfff17 	ldw	r2,-4(fp)
}
   11d14:	e037883a 	mov	sp,fp
   11d18:	dfc00117 	ldw	ra,4(sp)
   11d1c:	df000017 	ldw	fp,0(sp)
   11d20:	dec00204 	addi	sp,sp,8
   11d24:	f800283a 	ret

00011d28 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
   11d28:	defff104 	addi	sp,sp,-60
   11d2c:	dfc00e15 	stw	ra,56(sp)
   11d30:	df000d15 	stw	fp,52(sp)
   11d34:	df000d04 	addi	fp,sp,52
   11d38:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
   11d3c:	e0bfff17 	ldw	r2,-4(fp)
   11d40:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
   11d44:	e0bffe17 	ldw	r2,-8(fp)
   11d48:	10800517 	ldw	r2,20(r2)
   11d4c:	1080080c 	andi	r2,r2,32
   11d50:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
   11d54:	e0bffe17 	ldw	r2,-8(fp)
   11d58:	10800517 	ldw	r2,20(r2)
   11d5c:	1080100c 	andi	r2,r2,64
   11d60:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
   11d64:	e0bffe17 	ldw	r2,-8(fp)
   11d68:	10800117 	ldw	r2,4(r2)
   11d6c:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
   11d70:	e0bffe17 	ldw	r2,-8(fp)
   11d74:	10800317 	ldw	r2,12(r2)
   11d78:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
   11d7c:	e0bffe17 	ldw	r2,-8(fp)
   11d80:	10c00904 	addi	r3,r2,36
   11d84:	e0bffb17 	ldw	r2,-20(fp)
   11d88:	1004913a 	slli	r2,r2,4
   11d8c:	1885883a 	add	r2,r3,r2
   11d90:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
   11d94:	e0bffe17 	ldw	r2,-8(fp)
   11d98:	10c01904 	addi	r3,r2,100
   11d9c:	e0bffa17 	ldw	r2,-24(fp)
   11da0:	1004913a 	slli	r2,r2,4
   11da4:	1885883a 	add	r2,r3,r2
   11da8:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
   11dac:	e0bff917 	ldw	r2,-28(fp)
   11db0:	1004c03a 	cmpne	r2,r2,zero
   11db4:	1000051e 	bne	r2,zero,11dcc <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   11db8:	e0bffb17 	ldw	r2,-20(fp)
   11dbc:	10800044 	addi	r2,r2,1
   11dc0:	10c000cc 	andi	r3,r2,3
   11dc4:	e0bffe17 	ldw	r2,-8(fp)
   11dc8:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
   11dcc:	e0bff817 	ldw	r2,-32(fp)
   11dd0:	1004c03a 	cmpne	r2,r2,zero
   11dd4:	1000051e 	bne	r2,zero,11dec <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
   11dd8:	e0bffa17 	ldw	r2,-24(fp)
   11ddc:	10800044 	addi	r2,r2,1
   11de0:	10c000cc 	andi	r3,r2,3
   11de4:	e0bffe17 	ldw	r2,-8(fp)
   11de8:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
   11dec:	e0bffe17 	ldw	r2,-8(fp)
   11df0:	10800017 	ldw	r2,0(r2)
   11df4:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
   11df8:	e0bffe17 	ldw	r2,-8(fp)
   11dfc:	10800017 	ldw	r2,0(r2)
   11e00:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
   11e04:	e0bffe17 	ldw	r2,-8(fp)
   11e08:	10800717 	ldw	r2,28(r2)
   11e0c:	e13ffe17 	ldw	r4,-8(fp)
   11e10:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
   11e14:	e0bff917 	ldw	r2,-28(fp)
   11e18:	1004c03a 	cmpne	r2,r2,zero
   11e1c:	1000151e 	bne	r2,zero,11e74 <alt_avalon_dma_irq+0x14c>
   11e20:	e0bffd17 	ldw	r2,-12(fp)
   11e24:	10800217 	ldw	r2,8(r2)
   11e28:	1005003a 	cmpeq	r2,r2,zero
   11e2c:	1000111e 	bne	r2,zero,11e74 <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e30:	0005303a 	rdctl	r2,status
   11e34:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e38:	e0fff617 	ldw	r3,-40(fp)
   11e3c:	00bfff84 	movi	r2,-2
   11e40:	1884703a 	and	r2,r3,r2
   11e44:	1001703a 	wrctl	status,r2
  
  return context;
   11e48:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
   11e4c:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
   11e50:	e0bffd17 	ldw	r2,-12(fp)
   11e54:	10c00217 	ldw	r3,8(r2)
   11e58:	e0bffd17 	ldw	r2,-12(fp)
   11e5c:	11000317 	ldw	r4,12(r2)
   11e60:	183ee83a 	callr	r3
   11e64:	e0bff717 	ldw	r2,-36(fp)
   11e68:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e6c:	e0bff517 	ldw	r2,-44(fp)
   11e70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
   11e74:	e0bff817 	ldw	r2,-32(fp)
   11e78:	1004c03a 	cmpne	r2,r2,zero
   11e7c:	1000171e 	bne	r2,zero,11edc <alt_avalon_dma_irq+0x1b4>
   11e80:	e0bffc17 	ldw	r2,-16(fp)
   11e84:	10800217 	ldw	r2,8(r2)
   11e88:	1005003a 	cmpeq	r2,r2,zero
   11e8c:	1000131e 	bne	r2,zero,11edc <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e90:	0005303a 	rdctl	r2,status
   11e94:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e98:	e0fff417 	ldw	r3,-48(fp)
   11e9c:	00bfff84 	movi	r2,-2
   11ea0:	1884703a 	and	r2,r3,r2
   11ea4:	1001703a 	wrctl	status,r2
  
  return context;
   11ea8:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
   11eac:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
   11eb0:	e0bffc17 	ldw	r2,-16(fp)
   11eb4:	10c00217 	ldw	r3,8(r2)
   11eb8:	e0bffc17 	ldw	r2,-16(fp)
   11ebc:	11000317 	ldw	r4,12(r2)
   11ec0:	e0bffc17 	ldw	r2,-16(fp)
   11ec4:	11400017 	ldw	r5,0(r2)
   11ec8:	183ee83a 	callr	r3
   11ecc:	e0bff717 	ldw	r2,-36(fp)
   11ed0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ed4:	e0bff317 	ldw	r2,-52(fp)
   11ed8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   11edc:	e037883a 	mov	sp,fp
   11ee0:	dfc00117 	ldw	ra,4(sp)
   11ee4:	df000017 	ldw	fp,0(sp)
   11ee8:	dec00204 	addi	sp,sp,8
   11eec:	f800283a 	ret

00011ef0 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
   11ef0:	defff904 	addi	sp,sp,-28
   11ef4:	dfc00615 	stw	ra,24(sp)
   11ef8:	df000515 	stw	fp,20(sp)
   11efc:	df000504 	addi	fp,sp,20
   11f00:	e13ffc15 	stw	r4,-16(fp)
   11f04:	e17ffd15 	stw	r5,-12(fp)
   11f08:	e1bffe15 	stw	r6,-8(fp)
   11f0c:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   11f10:	e0bffe17 	ldw	r2,-8(fp)
   11f14:	10800604 	addi	r2,r2,24
   11f18:	1007883a 	mov	r3,r2
   11f1c:	00840004 	movi	r2,4096
   11f20:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
   11f24:	e0bffe17 	ldw	r2,-8(fp)
   11f28:	10800604 	addi	r2,r2,24
   11f2c:	1007883a 	mov	r3,r2
   11f30:	00840004 	movi	r2,4096
   11f34:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
   11f38:	e0bffe17 	ldw	r2,-8(fp)
   11f3c:	10800604 	addi	r2,r2,24
   11f40:	1007883a 	mov	r3,r2
   11f44:	00803f04 	movi	r2,252
   11f48:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
   11f4c:	e0bffe17 	ldw	r2,-8(fp)
   11f50:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
   11f54:	e0bffc17 	ldw	r2,-16(fp)
   11f58:	11c00617 	ldw	r7,24(r2)
   11f5c:	d8000015 	stw	zero,0(sp)
   11f60:	e13fff17 	ldw	r4,-4(fp)
   11f64:	e1400217 	ldw	r5,8(fp)
   11f68:	01800074 	movhi	r6,1
   11f6c:	31874a04 	addi	r6,r6,7464
   11f70:	0010cfc0 	call	10cfc <alt_ic_isr_register>
   11f74:	1004803a 	cmplt	r2,r2,zero
   11f78:	1000041e 	bne	r2,zero,11f8c <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
   11f7c:	e13ffc17 	ldw	r4,-16(fp)
   11f80:	0011fa00 	call	11fa0 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
   11f84:	e13ffd17 	ldw	r4,-12(fp)
   11f88:	0011fd80 	call	11fd8 <alt_dma_rxchan_reg>
  }
}
   11f8c:	e037883a 	mov	sp,fp
   11f90:	dfc00117 	ldw	ra,4(sp)
   11f94:	df000017 	ldw	fp,0(sp)
   11f98:	dec00204 	addi	sp,sp,8
   11f9c:	f800283a 	ret

00011fa0 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
   11fa0:	defffd04 	addi	sp,sp,-12
   11fa4:	dfc00215 	stw	ra,8(sp)
   11fa8:	df000115 	stw	fp,4(sp)
   11fac:	df000104 	addi	fp,sp,4
   11fb0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
   11fb4:	e13fff17 	ldw	r4,-4(fp)
   11fb8:	01400074 	movhi	r5,1
   11fbc:	294dcb04 	addi	r5,r5,14124
   11fc0:	001240c0 	call	1240c <alt_dev_llist_insert>
}
   11fc4:	e037883a 	mov	sp,fp
   11fc8:	dfc00117 	ldw	ra,4(sp)
   11fcc:	df000017 	ldw	fp,0(sp)
   11fd0:	dec00204 	addi	sp,sp,8
   11fd4:	f800283a 	ret

00011fd8 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
   11fd8:	defffd04 	addi	sp,sp,-12
   11fdc:	dfc00215 	stw	ra,8(sp)
   11fe0:	df000115 	stw	fp,4(sp)
   11fe4:	df000104 	addi	fp,sp,4
   11fe8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
   11fec:	e13fff17 	ldw	r4,-4(fp)
   11ff0:	01400074 	movhi	r5,1
   11ff4:	294dc904 	addi	r5,r5,14116
   11ff8:	001240c0 	call	1240c <alt_dev_llist_insert>
}
   11ffc:	e037883a 	mov	sp,fp
   12000:	dfc00117 	ldw	ra,4(sp)
   12004:	df000017 	ldw	fp,0(sp)
   12008:	dec00204 	addi	sp,sp,8
   1200c:	f800283a 	ret

00012010 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12010:	defffa04 	addi	sp,sp,-24
   12014:	dfc00515 	stw	ra,20(sp)
   12018:	df000415 	stw	fp,16(sp)
   1201c:	df000404 	addi	fp,sp,16
   12020:	e13ffd15 	stw	r4,-12(fp)
   12024:	e17ffe15 	stw	r5,-8(fp)
   12028:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1202c:	e0bffd17 	ldw	r2,-12(fp)
   12030:	10800017 	ldw	r2,0(r2)
   12034:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12038:	e0bffc17 	ldw	r2,-16(fp)
   1203c:	11000a04 	addi	r4,r2,40
   12040:	e0bffd17 	ldw	r2,-12(fp)
   12044:	11c00217 	ldw	r7,8(r2)
   12048:	e17ffe17 	ldw	r5,-8(fp)
   1204c:	e1bfff17 	ldw	r6,-4(fp)
   12050:	00120c00 	call	120c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12054:	e037883a 	mov	sp,fp
   12058:	dfc00117 	ldw	ra,4(sp)
   1205c:	df000017 	ldw	fp,0(sp)
   12060:	dec00204 	addi	sp,sp,8
   12064:	f800283a 	ret

00012068 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12068:	defffa04 	addi	sp,sp,-24
   1206c:	dfc00515 	stw	ra,20(sp)
   12070:	df000415 	stw	fp,16(sp)
   12074:	df000404 	addi	fp,sp,16
   12078:	e13ffd15 	stw	r4,-12(fp)
   1207c:	e17ffe15 	stw	r5,-8(fp)
   12080:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12084:	e0bffd17 	ldw	r2,-12(fp)
   12088:	10800017 	ldw	r2,0(r2)
   1208c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12090:	e0bffc17 	ldw	r2,-16(fp)
   12094:	11000a04 	addi	r4,r2,40
   12098:	e0bffd17 	ldw	r2,-12(fp)
   1209c:	11c00217 	ldw	r7,8(r2)
   120a0:	e17ffe17 	ldw	r5,-8(fp)
   120a4:	e1bfff17 	ldw	r6,-4(fp)
   120a8:	00121c40 	call	121c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   120ac:	e037883a 	mov	sp,fp
   120b0:	dfc00117 	ldw	ra,4(sp)
   120b4:	df000017 	ldw	fp,0(sp)
   120b8:	dec00204 	addi	sp,sp,8
   120bc:	f800283a 	ret

000120c0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   120c0:	defff604 	addi	sp,sp,-40
   120c4:	df000915 	stw	fp,36(sp)
   120c8:	df000904 	addi	fp,sp,36
   120cc:	e13ffb15 	stw	r4,-20(fp)
   120d0:	e17ffc15 	stw	r5,-16(fp)
   120d4:	e1bffd15 	stw	r6,-12(fp)
   120d8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   120dc:	e0bffb17 	ldw	r2,-20(fp)
   120e0:	10800017 	ldw	r2,0(r2)
   120e4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   120e8:	e0bffc17 	ldw	r2,-16(fp)
   120ec:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   120f0:	e0bffd17 	ldw	r2,-12(fp)
   120f4:	1007883a 	mov	r3,r2
   120f8:	e0bffc17 	ldw	r2,-16(fp)
   120fc:	10c5883a 	add	r2,r2,r3
   12100:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   12104:	00001606 	br	12160 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12108:	e0bffa17 	ldw	r2,-24(fp)
   1210c:	10800037 	ldwio	r2,0(r2)
   12110:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   12114:	e0bff717 	ldw	r2,-36(fp)
   12118:	10a0000c 	andi	r2,r2,32768
   1211c:	1005003a 	cmpeq	r2,r2,zero
   12120:	1000081e 	bne	r2,zero,12144 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12124:	e0bff717 	ldw	r2,-36(fp)
   12128:	1007883a 	mov	r3,r2
   1212c:	e0bff917 	ldw	r2,-28(fp)
   12130:	10c00005 	stb	r3,0(r2)
   12134:	e0bff917 	ldw	r2,-28(fp)
   12138:	10800044 	addi	r2,r2,1
   1213c:	e0bff915 	stw	r2,-28(fp)
   12140:	00000706 	br	12160 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   12144:	e0fff917 	ldw	r3,-28(fp)
   12148:	e0bffc17 	ldw	r2,-16(fp)
   1214c:	1880071e 	bne	r3,r2,1216c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   12150:	e0bffe17 	ldw	r2,-8(fp)
   12154:	1090000c 	andi	r2,r2,16384
   12158:	1004c03a 	cmpne	r2,r2,zero
   1215c:	1000031e 	bne	r2,zero,1216c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12160:	e0fff917 	ldw	r3,-28(fp)
   12164:	e0bff817 	ldw	r2,-32(fp)
   12168:	18bfe736 	bltu	r3,r2,12108 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   1216c:	e0fff917 	ldw	r3,-28(fp)
   12170:	e0bffc17 	ldw	r2,-16(fp)
   12174:	18800526 	beq	r3,r2,1218c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   12178:	e0fff917 	ldw	r3,-28(fp)
   1217c:	e0bffc17 	ldw	r2,-16(fp)
   12180:	1887c83a 	sub	r3,r3,r2
   12184:	e0ffff15 	stw	r3,-4(fp)
   12188:	00000906 	br	121b0 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   1218c:	e0bffe17 	ldw	r2,-8(fp)
   12190:	1090000c 	andi	r2,r2,16384
   12194:	1005003a 	cmpeq	r2,r2,zero
   12198:	1000031e 	bne	r2,zero,121a8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   1219c:	00bffd44 	movi	r2,-11
   121a0:	e0bfff15 	stw	r2,-4(fp)
   121a4:	00000206 	br	121b0 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   121a8:	00bffec4 	movi	r2,-5
   121ac:	e0bfff15 	stw	r2,-4(fp)
   121b0:	e0bfff17 	ldw	r2,-4(fp)
}
   121b4:	e037883a 	mov	sp,fp
   121b8:	df000017 	ldw	fp,0(sp)
   121bc:	dec00104 	addi	sp,sp,4
   121c0:	f800283a 	ret

000121c4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   121c4:	defff904 	addi	sp,sp,-28
   121c8:	df000615 	stw	fp,24(sp)
   121cc:	df000604 	addi	fp,sp,24
   121d0:	e13ffc15 	stw	r4,-16(fp)
   121d4:	e17ffd15 	stw	r5,-12(fp)
   121d8:	e1bffe15 	stw	r6,-8(fp)
   121dc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   121e0:	e0bffc17 	ldw	r2,-16(fp)
   121e4:	10800017 	ldw	r2,0(r2)
   121e8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   121ec:	e0bffe17 	ldw	r2,-8(fp)
   121f0:	1007883a 	mov	r3,r2
   121f4:	e0bffd17 	ldw	r2,-12(fp)
   121f8:	10c5883a 	add	r2,r2,r3
   121fc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   12200:	00001106 	br	12248 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12204:	e0bffb17 	ldw	r2,-20(fp)
   12208:	10800104 	addi	r2,r2,4
   1220c:	10800037 	ldwio	r2,0(r2)
   12210:	10bfffec 	andhi	r2,r2,65535
   12214:	1005003a 	cmpeq	r2,r2,zero
   12218:	10000b1e 	bne	r2,zero,12248 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1221c:	e13ffb17 	ldw	r4,-20(fp)
   12220:	e0bffd17 	ldw	r2,-12(fp)
   12224:	10800003 	ldbu	r2,0(r2)
   12228:	10c03fcc 	andi	r3,r2,255
   1222c:	18c0201c 	xori	r3,r3,128
   12230:	18ffe004 	addi	r3,r3,-128
   12234:	e0bffd17 	ldw	r2,-12(fp)
   12238:	10800044 	addi	r2,r2,1
   1223c:	e0bffd15 	stw	r2,-12(fp)
   12240:	2005883a 	mov	r2,r4
   12244:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   12248:	e0fffd17 	ldw	r3,-12(fp)
   1224c:	e0bffa17 	ldw	r2,-24(fp)
   12250:	18bfec36 	bltu	r3,r2,12204 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   12254:	e0bffe17 	ldw	r2,-8(fp)
}
   12258:	e037883a 	mov	sp,fp
   1225c:	df000017 	ldw	fp,0(sp)
   12260:	dec00104 	addi	sp,sp,4
   12264:	f800283a 	ret

00012268 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12268:	defff804 	addi	sp,sp,-32
   1226c:	dfc00715 	stw	ra,28(sp)
   12270:	df000615 	stw	fp,24(sp)
   12274:	df000604 	addi	fp,sp,24
   12278:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1227c:	e0bffc17 	ldw	r2,-16(fp)
   12280:	1004803a 	cmplt	r2,r2,zero
   12284:	1000081e 	bne	r2,zero,122a8 <close+0x40>
   12288:	e0bffc17 	ldw	r2,-16(fp)
   1228c:	10800324 	muli	r2,r2,12
   12290:	1007883a 	mov	r3,r2
   12294:	00800074 	movhi	r2,1
   12298:	108d6004 	addi	r2,r2,13696
   1229c:	1887883a 	add	r3,r3,r2
   122a0:	e0ffff15 	stw	r3,-4(fp)
   122a4:	00000106 	br	122ac <close+0x44>
   122a8:	e03fff15 	stw	zero,-4(fp)
   122ac:	e0bfff17 	ldw	r2,-4(fp)
   122b0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   122b4:	e0bffb17 	ldw	r2,-20(fp)
   122b8:	1005003a 	cmpeq	r2,r2,zero
   122bc:	10001d1e 	bne	r2,zero,12334 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   122c0:	e0bffb17 	ldw	r2,-20(fp)
   122c4:	10800017 	ldw	r2,0(r2)
   122c8:	10800417 	ldw	r2,16(r2)
   122cc:	1005003a 	cmpeq	r2,r2,zero
   122d0:	1000071e 	bne	r2,zero,122f0 <close+0x88>
   122d4:	e0bffb17 	ldw	r2,-20(fp)
   122d8:	10800017 	ldw	r2,0(r2)
   122dc:	10800417 	ldw	r2,16(r2)
   122e0:	e13ffb17 	ldw	r4,-20(fp)
   122e4:	103ee83a 	callr	r2
   122e8:	e0bffe15 	stw	r2,-8(fp)
   122ec:	00000106 	br	122f4 <close+0x8c>
   122f0:	e03ffe15 	stw	zero,-8(fp)
   122f4:	e0bffe17 	ldw	r2,-8(fp)
   122f8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   122fc:	e13ffc17 	ldw	r4,-16(fp)
   12300:	0012c1c0 	call	12c1c <alt_release_fd>
    if (rval < 0)
   12304:	e0bffa17 	ldw	r2,-24(fp)
   12308:	1004403a 	cmpge	r2,r2,zero
   1230c:	1000071e 	bne	r2,zero,1232c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   12310:	00123640 	call	12364 <alt_get_errno>
   12314:	e0fffa17 	ldw	r3,-24(fp)
   12318:	00c7c83a 	sub	r3,zero,r3
   1231c:	10c00015 	stw	r3,0(r2)
      return -1;
   12320:	00bfffc4 	movi	r2,-1
   12324:	e0bffd15 	stw	r2,-12(fp)
   12328:	00000806 	br	1234c <close+0xe4>
    }
    return 0;
   1232c:	e03ffd15 	stw	zero,-12(fp)
   12330:	00000606 	br	1234c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12334:	00123640 	call	12364 <alt_get_errno>
   12338:	1007883a 	mov	r3,r2
   1233c:	00801444 	movi	r2,81
   12340:	18800015 	stw	r2,0(r3)
    return -1;
   12344:	00bfffc4 	movi	r2,-1
   12348:	e0bffd15 	stw	r2,-12(fp)
   1234c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   12350:	e037883a 	mov	sp,fp
   12354:	dfc00117 	ldw	ra,4(sp)
   12358:	df000017 	ldw	fp,0(sp)
   1235c:	dec00204 	addi	sp,sp,8
   12360:	f800283a 	ret

00012364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12364:	defffd04 	addi	sp,sp,-12
   12368:	dfc00215 	stw	ra,8(sp)
   1236c:	df000115 	stw	fp,4(sp)
   12370:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12374:	00800074 	movhi	r2,1
   12378:	108dcd04 	addi	r2,r2,14132
   1237c:	10800017 	ldw	r2,0(r2)
   12380:	1005003a 	cmpeq	r2,r2,zero
   12384:	1000061e 	bne	r2,zero,123a0 <alt_get_errno+0x3c>
   12388:	00800074 	movhi	r2,1
   1238c:	108dcd04 	addi	r2,r2,14132
   12390:	10800017 	ldw	r2,0(r2)
   12394:	103ee83a 	callr	r2
   12398:	e0bfff15 	stw	r2,-4(fp)
   1239c:	00000306 	br	123ac <alt_get_errno+0x48>
   123a0:	00800074 	movhi	r2,1
   123a4:	108ec804 	addi	r2,r2,15136
   123a8:	e0bfff15 	stw	r2,-4(fp)
   123ac:	e0bfff17 	ldw	r2,-4(fp)
}
   123b0:	e037883a 	mov	sp,fp
   123b4:	dfc00117 	ldw	ra,4(sp)
   123b8:	df000017 	ldw	fp,0(sp)
   123bc:	dec00204 	addi	sp,sp,8
   123c0:	f800283a 	ret

000123c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   123c4:	deffff04 	addi	sp,sp,-4
   123c8:	df000015 	stw	fp,0(sp)
   123cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   123d0:	e037883a 	mov	sp,fp
   123d4:	df000017 	ldw	fp,0(sp)
   123d8:	dec00104 	addi	sp,sp,4
   123dc:	f800283a 	ret

000123e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   123e0:	defffc04 	addi	sp,sp,-16
   123e4:	df000315 	stw	fp,12(sp)
   123e8:	df000304 	addi	fp,sp,12
   123ec:	e13ffd15 	stw	r4,-12(fp)
   123f0:	e17ffe15 	stw	r5,-8(fp)
   123f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   123f8:	e0bfff17 	ldw	r2,-4(fp)
}
   123fc:	e037883a 	mov	sp,fp
   12400:	df000017 	ldw	fp,0(sp)
   12404:	dec00104 	addi	sp,sp,4
   12408:	f800283a 	ret

0001240c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1240c:	defff904 	addi	sp,sp,-28
   12410:	dfc00615 	stw	ra,24(sp)
   12414:	df000515 	stw	fp,20(sp)
   12418:	df000504 	addi	fp,sp,20
   1241c:	e13ffd15 	stw	r4,-12(fp)
   12420:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12424:	e0bffd17 	ldw	r2,-12(fp)
   12428:	1005003a 	cmpeq	r2,r2,zero
   1242c:	1000041e 	bne	r2,zero,12440 <alt_dev_llist_insert+0x34>
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	10800217 	ldw	r2,8(r2)
   12438:	1004c03a 	cmpne	r2,r2,zero
   1243c:	1000071e 	bne	r2,zero,1245c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   12440:	00124c00 	call	124c0 <alt_get_errno>
   12444:	1007883a 	mov	r3,r2
   12448:	00800584 	movi	r2,22
   1244c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12450:	00bffa84 	movi	r2,-22
   12454:	e0bfff15 	stw	r2,-4(fp)
   12458:	00001306 	br	124a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1245c:	e0fffd17 	ldw	r3,-12(fp)
   12460:	e0bffe17 	ldw	r2,-8(fp)
   12464:	e0bffb15 	stw	r2,-20(fp)
   12468:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1246c:	e0fffc17 	ldw	r3,-16(fp)
   12470:	e0bffb17 	ldw	r2,-20(fp)
   12474:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   12478:	e0bffb17 	ldw	r2,-20(fp)
   1247c:	10c00017 	ldw	r3,0(r2)
   12480:	e0bffc17 	ldw	r2,-16(fp)
   12484:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12488:	e0bffb17 	ldw	r2,-20(fp)
   1248c:	10c00017 	ldw	r3,0(r2)
   12490:	e0bffc17 	ldw	r2,-16(fp)
   12494:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   12498:	e0fffb17 	ldw	r3,-20(fp)
   1249c:	e0bffc17 	ldw	r2,-16(fp)
   124a0:	18800015 	stw	r2,0(r3)

  return 0;  
   124a4:	e03fff15 	stw	zero,-4(fp)
   124a8:	e0bfff17 	ldw	r2,-4(fp)
}
   124ac:	e037883a 	mov	sp,fp
   124b0:	dfc00117 	ldw	ra,4(sp)
   124b4:	df000017 	ldw	fp,0(sp)
   124b8:	dec00204 	addi	sp,sp,8
   124bc:	f800283a 	ret

000124c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   124c0:	defffd04 	addi	sp,sp,-12
   124c4:	dfc00215 	stw	ra,8(sp)
   124c8:	df000115 	stw	fp,4(sp)
   124cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   124d0:	00800074 	movhi	r2,1
   124d4:	108dcd04 	addi	r2,r2,14132
   124d8:	10800017 	ldw	r2,0(r2)
   124dc:	1005003a 	cmpeq	r2,r2,zero
   124e0:	1000061e 	bne	r2,zero,124fc <alt_get_errno+0x3c>
   124e4:	00800074 	movhi	r2,1
   124e8:	108dcd04 	addi	r2,r2,14132
   124ec:	10800017 	ldw	r2,0(r2)
   124f0:	103ee83a 	callr	r2
   124f4:	e0bfff15 	stw	r2,-4(fp)
   124f8:	00000306 	br	12508 <alt_get_errno+0x48>
   124fc:	00800074 	movhi	r2,1
   12500:	108ec804 	addi	r2,r2,15136
   12504:	e0bfff15 	stw	r2,-4(fp)
   12508:	e0bfff17 	ldw	r2,-4(fp)
}
   1250c:	e037883a 	mov	sp,fp
   12510:	dfc00117 	ldw	ra,4(sp)
   12514:	df000017 	ldw	fp,0(sp)
   12518:	dec00204 	addi	sp,sp,8
   1251c:	f800283a 	ret

00012520 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
   12520:	defffc04 	addi	sp,sp,-16
   12524:	dfc00315 	stw	ra,12(sp)
   12528:	df000215 	stw	fp,8(sp)
   1252c:	df000204 	addi	fp,sp,8
   12530:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
   12534:	e13fff17 	ldw	r4,-4(fp)
   12538:	d1600904 	addi	r5,gp,-32732
   1253c:	00127580 	call	12758 <alt_find_dev>
   12540:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   12544:	e0bffe17 	ldw	r2,-8(fp)
   12548:	1004c03a 	cmpne	r2,r2,zero
   1254c:	1000041e 	bne	r2,zero,12560 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
   12550:	00125780 	call	12578 <alt_get_errno>
   12554:	1007883a 	mov	r3,r2
   12558:	008004c4 	movi	r2,19
   1255c:	18800015 	stw	r2,0(r3)
  }

  return dev;
   12560:	e0bffe17 	ldw	r2,-8(fp)
}
   12564:	e037883a 	mov	sp,fp
   12568:	dfc00117 	ldw	ra,4(sp)
   1256c:	df000017 	ldw	fp,0(sp)
   12570:	dec00204 	addi	sp,sp,8
   12574:	f800283a 	ret

00012578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12578:	defffd04 	addi	sp,sp,-12
   1257c:	dfc00215 	stw	ra,8(sp)
   12580:	df000115 	stw	fp,4(sp)
   12584:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12588:	00800074 	movhi	r2,1
   1258c:	108dcd04 	addi	r2,r2,14132
   12590:	10800017 	ldw	r2,0(r2)
   12594:	1005003a 	cmpeq	r2,r2,zero
   12598:	1000061e 	bne	r2,zero,125b4 <alt_get_errno+0x3c>
   1259c:	00800074 	movhi	r2,1
   125a0:	108dcd04 	addi	r2,r2,14132
   125a4:	10800017 	ldw	r2,0(r2)
   125a8:	103ee83a 	callr	r2
   125ac:	e0bfff15 	stw	r2,-4(fp)
   125b0:	00000306 	br	125c0 <alt_get_errno+0x48>
   125b4:	00800074 	movhi	r2,1
   125b8:	108ec804 	addi	r2,r2,15136
   125bc:	e0bfff15 	stw	r2,-4(fp)
   125c0:	e0bfff17 	ldw	r2,-4(fp)
}
   125c4:	e037883a 	mov	sp,fp
   125c8:	dfc00117 	ldw	ra,4(sp)
   125cc:	df000017 	ldw	fp,0(sp)
   125d0:	dec00204 	addi	sp,sp,8
   125d4:	f800283a 	ret

000125d8 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
   125d8:	defffc04 	addi	sp,sp,-16
   125dc:	dfc00315 	stw	ra,12(sp)
   125e0:	df000215 	stw	fp,8(sp)
   125e4:	df000204 	addi	fp,sp,8
   125e8:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
   125ec:	e13fff17 	ldw	r4,-4(fp)
   125f0:	d1600b04 	addi	r5,gp,-32724
   125f4:	00127580 	call	12758 <alt_find_dev>
   125f8:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
   125fc:	e0bffe17 	ldw	r2,-8(fp)
   12600:	1004c03a 	cmpne	r2,r2,zero
   12604:	1000041e 	bne	r2,zero,12618 <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
   12608:	00126300 	call	12630 <alt_get_errno>
   1260c:	1007883a 	mov	r3,r2
   12610:	008004c4 	movi	r2,19
   12614:	18800015 	stw	r2,0(r3)
  }

  return dev;
   12618:	e0bffe17 	ldw	r2,-8(fp)
}
   1261c:	e037883a 	mov	sp,fp
   12620:	dfc00117 	ldw	ra,4(sp)
   12624:	df000017 	ldw	fp,0(sp)
   12628:	dec00204 	addi	sp,sp,8
   1262c:	f800283a 	ret

00012630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12630:	defffd04 	addi	sp,sp,-12
   12634:	dfc00215 	stw	ra,8(sp)
   12638:	df000115 	stw	fp,4(sp)
   1263c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12640:	00800074 	movhi	r2,1
   12644:	108dcd04 	addi	r2,r2,14132
   12648:	10800017 	ldw	r2,0(r2)
   1264c:	1005003a 	cmpeq	r2,r2,zero
   12650:	1000061e 	bne	r2,zero,1266c <alt_get_errno+0x3c>
   12654:	00800074 	movhi	r2,1
   12658:	108dcd04 	addi	r2,r2,14132
   1265c:	10800017 	ldw	r2,0(r2)
   12660:	103ee83a 	callr	r2
   12664:	e0bfff15 	stw	r2,-4(fp)
   12668:	00000306 	br	12678 <alt_get_errno+0x48>
   1266c:	00800074 	movhi	r2,1
   12670:	108ec804 	addi	r2,r2,15136
   12674:	e0bfff15 	stw	r2,-4(fp)
   12678:	e0bfff17 	ldw	r2,-4(fp)
}
   1267c:	e037883a 	mov	sp,fp
   12680:	dfc00117 	ldw	ra,4(sp)
   12684:	df000017 	ldw	fp,0(sp)
   12688:	dec00204 	addi	sp,sp,8
   1268c:	f800283a 	ret

00012690 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12690:	defffd04 	addi	sp,sp,-12
   12694:	dfc00215 	stw	ra,8(sp)
   12698:	df000115 	stw	fp,4(sp)
   1269c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   126a0:	00bfff04 	movi	r2,-4
   126a4:	00c00074 	movhi	r3,1
   126a8:	18ccc104 	addi	r3,r3,13060
   126ac:	1885883a 	add	r2,r3,r2
   126b0:	e0bfff15 	stw	r2,-4(fp)
   126b4:	00000606 	br	126d0 <_do_ctors+0x40>
        (*ctor) (); 
   126b8:	e0bfff17 	ldw	r2,-4(fp)
   126bc:	10800017 	ldw	r2,0(r2)
   126c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   126c4:	e0bfff17 	ldw	r2,-4(fp)
   126c8:	10bfff04 	addi	r2,r2,-4
   126cc:	e0bfff15 	stw	r2,-4(fp)
   126d0:	e0ffff17 	ldw	r3,-4(fp)
   126d4:	00800074 	movhi	r2,1
   126d8:	108cc004 	addi	r2,r2,13056
   126dc:	18bff62e 	bgeu	r3,r2,126b8 <_do_ctors+0x28>
        (*ctor) (); 
}
   126e0:	e037883a 	mov	sp,fp
   126e4:	dfc00117 	ldw	ra,4(sp)
   126e8:	df000017 	ldw	fp,0(sp)
   126ec:	dec00204 	addi	sp,sp,8
   126f0:	f800283a 	ret

000126f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   126f4:	defffd04 	addi	sp,sp,-12
   126f8:	dfc00215 	stw	ra,8(sp)
   126fc:	df000115 	stw	fp,4(sp)
   12700:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12704:	00bfff04 	movi	r2,-4
   12708:	00c00074 	movhi	r3,1
   1270c:	18ccc104 	addi	r3,r3,13060
   12710:	1885883a 	add	r2,r3,r2
   12714:	e0bfff15 	stw	r2,-4(fp)
   12718:	00000606 	br	12734 <_do_dtors+0x40>
        (*dtor) (); 
   1271c:	e0bfff17 	ldw	r2,-4(fp)
   12720:	10800017 	ldw	r2,0(r2)
   12724:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12728:	e0bfff17 	ldw	r2,-4(fp)
   1272c:	10bfff04 	addi	r2,r2,-4
   12730:	e0bfff15 	stw	r2,-4(fp)
   12734:	e0ffff17 	ldw	r3,-4(fp)
   12738:	00800074 	movhi	r2,1
   1273c:	108cc104 	addi	r2,r2,13060
   12740:	18bff62e 	bgeu	r3,r2,1271c <_do_dtors+0x28>
        (*dtor) (); 
}
   12744:	e037883a 	mov	sp,fp
   12748:	dfc00117 	ldw	ra,4(sp)
   1274c:	df000017 	ldw	fp,0(sp)
   12750:	dec00204 	addi	sp,sp,8
   12754:	f800283a 	ret

00012758 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12758:	defff904 	addi	sp,sp,-28
   1275c:	dfc00615 	stw	ra,24(sp)
   12760:	df000515 	stw	fp,20(sp)
   12764:	df000504 	addi	fp,sp,20
   12768:	e13ffd15 	stw	r4,-12(fp)
   1276c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	10800017 	ldw	r2,0(r2)
   12778:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1277c:	e13ffd17 	ldw	r4,-12(fp)
   12780:	0010b180 	call	10b18 <strlen>
   12784:	10800044 	addi	r2,r2,1
   12788:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1278c:	00000d06 	br	127c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12790:	e0bffc17 	ldw	r2,-16(fp)
   12794:	11000217 	ldw	r4,8(r2)
   12798:	e1bffb17 	ldw	r6,-20(fp)
   1279c:	e17ffd17 	ldw	r5,-12(fp)
   127a0:	0012f380 	call	12f38 <memcmp>
   127a4:	1004c03a 	cmpne	r2,r2,zero
   127a8:	1000031e 	bne	r2,zero,127b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   127ac:	e0bffc17 	ldw	r2,-16(fp)
   127b0:	e0bfff15 	stw	r2,-4(fp)
   127b4:	00000706 	br	127d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   127b8:	e0bffc17 	ldw	r2,-16(fp)
   127bc:	10800017 	ldw	r2,0(r2)
   127c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   127c4:	e0fffe17 	ldw	r3,-8(fp)
   127c8:	e0bffc17 	ldw	r2,-16(fp)
   127cc:	10fff01e 	bne	r2,r3,12790 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   127d0:	e03fff15 	stw	zero,-4(fp)
   127d4:	e0bfff17 	ldw	r2,-4(fp)
}
   127d8:	e037883a 	mov	sp,fp
   127dc:	dfc00117 	ldw	ra,4(sp)
   127e0:	df000017 	ldw	fp,0(sp)
   127e4:	dec00204 	addi	sp,sp,8
   127e8:	f800283a 	ret

000127ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   127ec:	defffe04 	addi	sp,sp,-8
   127f0:	dfc00115 	stw	ra,4(sp)
   127f4:	df000015 	stw	fp,0(sp)
   127f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   127fc:	0009883a 	mov	r4,zero
   12800:	01440004 	movi	r5,4096
   12804:	0012e740 	call	12e74 <alt_icache_flush>
#endif
}
   12808:	e037883a 	mov	sp,fp
   1280c:	dfc00117 	ldw	ra,4(sp)
   12810:	df000017 	ldw	fp,0(sp)
   12814:	dec00204 	addi	sp,sp,8
   12818:	f800283a 	ret

0001281c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1281c:	defff904 	addi	sp,sp,-28
   12820:	dfc00615 	stw	ra,24(sp)
   12824:	df000515 	stw	fp,20(sp)
   12828:	df000504 	addi	fp,sp,20
   1282c:	e13ffc15 	stw	r4,-16(fp)
   12830:	e17ffd15 	stw	r5,-12(fp)
   12834:	e1bffe15 	stw	r6,-8(fp)
   12838:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1283c:	e13ffd17 	ldw	r4,-12(fp)
   12840:	e17ffe17 	ldw	r5,-8(fp)
   12844:	e1bfff17 	ldw	r6,-4(fp)
   12848:	0012a340 	call	12a34 <open>
   1284c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   12850:	e0bffb17 	ldw	r2,-20(fp)
   12854:	1004803a 	cmplt	r2,r2,zero
   12858:	10001c1e 	bne	r2,zero,128cc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1285c:	e0bffb17 	ldw	r2,-20(fp)
   12860:	00c00074 	movhi	r3,1
   12864:	18cd6004 	addi	r3,r3,13696
   12868:	10800324 	muli	r2,r2,12
   1286c:	10c5883a 	add	r2,r2,r3
   12870:	10c00017 	ldw	r3,0(r2)
   12874:	e0bffc17 	ldw	r2,-16(fp)
   12878:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1287c:	e0bffb17 	ldw	r2,-20(fp)
   12880:	00c00074 	movhi	r3,1
   12884:	18cd6004 	addi	r3,r3,13696
   12888:	10800324 	muli	r2,r2,12
   1288c:	10c5883a 	add	r2,r2,r3
   12890:	10800104 	addi	r2,r2,4
   12894:	10c00017 	ldw	r3,0(r2)
   12898:	e0bffc17 	ldw	r2,-16(fp)
   1289c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   128a0:	e0bffb17 	ldw	r2,-20(fp)
   128a4:	00c00074 	movhi	r3,1
   128a8:	18cd6004 	addi	r3,r3,13696
   128ac:	10800324 	muli	r2,r2,12
   128b0:	10c5883a 	add	r2,r2,r3
   128b4:	10800204 	addi	r2,r2,8
   128b8:	10c00017 	ldw	r3,0(r2)
   128bc:	e0bffc17 	ldw	r2,-16(fp)
   128c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   128c4:	e13ffb17 	ldw	r4,-20(fp)
   128c8:	0012c1c0 	call	12c1c <alt_release_fd>
  }
} 
   128cc:	e037883a 	mov	sp,fp
   128d0:	dfc00117 	ldw	ra,4(sp)
   128d4:	df000017 	ldw	fp,0(sp)
   128d8:	dec00204 	addi	sp,sp,8
   128dc:	f800283a 	ret

000128e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   128e0:	defffb04 	addi	sp,sp,-20
   128e4:	dfc00415 	stw	ra,16(sp)
   128e8:	df000315 	stw	fp,12(sp)
   128ec:	df000304 	addi	fp,sp,12
   128f0:	e13ffd15 	stw	r4,-12(fp)
   128f4:	e17ffe15 	stw	r5,-8(fp)
   128f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   128fc:	01000074 	movhi	r4,1
   12900:	210d6304 	addi	r4,r4,13708
   12904:	e17ffd17 	ldw	r5,-12(fp)
   12908:	01800044 	movi	r6,1
   1290c:	01c07fc4 	movi	r7,511
   12910:	001281c0 	call	1281c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12914:	01000074 	movhi	r4,1
   12918:	210d6004 	addi	r4,r4,13696
   1291c:	e17ffe17 	ldw	r5,-8(fp)
   12920:	000d883a 	mov	r6,zero
   12924:	01c07fc4 	movi	r7,511
   12928:	001281c0 	call	1281c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1292c:	01000074 	movhi	r4,1
   12930:	210d6604 	addi	r4,r4,13720
   12934:	e17fff17 	ldw	r5,-4(fp)
   12938:	01800044 	movi	r6,1
   1293c:	01c07fc4 	movi	r7,511
   12940:	001281c0 	call	1281c <alt_open_fd>
}  
   12944:	e037883a 	mov	sp,fp
   12948:	dfc00117 	ldw	ra,4(sp)
   1294c:	df000017 	ldw	fp,0(sp)
   12950:	dec00204 	addi	sp,sp,8
   12954:	f800283a 	ret

00012958 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12958:	defffc04 	addi	sp,sp,-16
   1295c:	df000315 	stw	fp,12(sp)
   12960:	df000304 	addi	fp,sp,12
   12964:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12968:	e0bffe17 	ldw	r2,-8(fp)
   1296c:	10800217 	ldw	r2,8(r2)
   12970:	10d00034 	orhi	r3,r2,16384
   12974:	e0bffe17 	ldw	r2,-8(fp)
   12978:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1297c:	e03ffd15 	stw	zero,-12(fp)
   12980:	00002006 	br	12a04 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12984:	e0bffd17 	ldw	r2,-12(fp)
   12988:	00c00074 	movhi	r3,1
   1298c:	18cd6004 	addi	r3,r3,13696
   12990:	10800324 	muli	r2,r2,12
   12994:	10c5883a 	add	r2,r2,r3
   12998:	10c00017 	ldw	r3,0(r2)
   1299c:	e0bffe17 	ldw	r2,-8(fp)
   129a0:	10800017 	ldw	r2,0(r2)
   129a4:	1880141e 	bne	r3,r2,129f8 <alt_file_locked+0xa0>
   129a8:	e0bffd17 	ldw	r2,-12(fp)
   129ac:	00c00074 	movhi	r3,1
   129b0:	18cd6004 	addi	r3,r3,13696
   129b4:	10800324 	muli	r2,r2,12
   129b8:	10c5883a 	add	r2,r2,r3
   129bc:	10800204 	addi	r2,r2,8
   129c0:	10800017 	ldw	r2,0(r2)
   129c4:	1004403a 	cmpge	r2,r2,zero
   129c8:	10000b1e 	bne	r2,zero,129f8 <alt_file_locked+0xa0>
   129cc:	e0bffd17 	ldw	r2,-12(fp)
   129d0:	10800324 	muli	r2,r2,12
   129d4:	1007883a 	mov	r3,r2
   129d8:	00800074 	movhi	r2,1
   129dc:	108d6004 	addi	r2,r2,13696
   129e0:	1887883a 	add	r3,r3,r2
   129e4:	e0bffe17 	ldw	r2,-8(fp)
   129e8:	18800326 	beq	r3,r2,129f8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   129ec:	00bffcc4 	movi	r2,-13
   129f0:	e0bfff15 	stw	r2,-4(fp)
   129f4:	00000a06 	br	12a20 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   129f8:	e0bffd17 	ldw	r2,-12(fp)
   129fc:	10800044 	addi	r2,r2,1
   12a00:	e0bffd15 	stw	r2,-12(fp)
   12a04:	00800074 	movhi	r2,1
   12a08:	108dc804 	addi	r2,r2,14112
   12a0c:	10800017 	ldw	r2,0(r2)
   12a10:	1007883a 	mov	r3,r2
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	18bfda2e 	bgeu	r3,r2,12984 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12a1c:	e03fff15 	stw	zero,-4(fp)
   12a20:	e0bfff17 	ldw	r2,-4(fp)
}
   12a24:	e037883a 	mov	sp,fp
   12a28:	df000017 	ldw	fp,0(sp)
   12a2c:	dec00104 	addi	sp,sp,4
   12a30:	f800283a 	ret

00012a34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12a34:	defff404 	addi	sp,sp,-48
   12a38:	dfc00b15 	stw	ra,44(sp)
   12a3c:	df000a15 	stw	fp,40(sp)
   12a40:	df000a04 	addi	fp,sp,40
   12a44:	e13ffb15 	stw	r4,-20(fp)
   12a48:	e17ffc15 	stw	r5,-16(fp)
   12a4c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12a50:	00bfffc4 	movi	r2,-1
   12a54:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   12a58:	00bffb44 	movi	r2,-19
   12a5c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   12a60:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12a64:	e13ffb17 	ldw	r4,-20(fp)
   12a68:	01400074 	movhi	r5,1
   12a6c:	294dc604 	addi	r5,r5,14104
   12a70:	00127580 	call	12758 <alt_find_dev>
   12a74:	e0bffa15 	stw	r2,-24(fp)
   12a78:	e0bffa17 	ldw	r2,-24(fp)
   12a7c:	1004c03a 	cmpne	r2,r2,zero
   12a80:	1000051e 	bne	r2,zero,12a98 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12a84:	e13ffb17 	ldw	r4,-20(fp)
   12a88:	0012c9c0 	call	12c9c <alt_find_file>
   12a8c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   12a90:	00800044 	movi	r2,1
   12a94:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12a98:	e0bffa17 	ldw	r2,-24(fp)
   12a9c:	1005003a 	cmpeq	r2,r2,zero
   12aa0:	1000301e 	bne	r2,zero,12b64 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12aa4:	e13ffa17 	ldw	r4,-24(fp)
   12aa8:	0012dbc0 	call	12dbc <alt_get_fd>
   12aac:	e0bff815 	stw	r2,-32(fp)
   12ab0:	e0bff817 	ldw	r2,-32(fp)
   12ab4:	1004403a 	cmpge	r2,r2,zero
   12ab8:	1000031e 	bne	r2,zero,12ac8 <open+0x94>
    {
      status = index;
   12abc:	e0bff817 	ldw	r2,-32(fp)
   12ac0:	e0bff715 	stw	r2,-36(fp)
   12ac4:	00002906 	br	12b6c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   12ac8:	e0bff817 	ldw	r2,-32(fp)
   12acc:	10800324 	muli	r2,r2,12
   12ad0:	1007883a 	mov	r3,r2
   12ad4:	00800074 	movhi	r2,1
   12ad8:	108d6004 	addi	r2,r2,13696
   12adc:	1885883a 	add	r2,r3,r2
   12ae0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12ae4:	e0fffc17 	ldw	r3,-16(fp)
   12ae8:	00900034 	movhi	r2,16384
   12aec:	10bfffc4 	addi	r2,r2,-1
   12af0:	1886703a 	and	r3,r3,r2
   12af4:	e0bff917 	ldw	r2,-28(fp)
   12af8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12afc:	e0bff617 	ldw	r2,-40(fp)
   12b00:	1004c03a 	cmpne	r2,r2,zero
   12b04:	1000061e 	bne	r2,zero,12b20 <open+0xec>
   12b08:	e13ff917 	ldw	r4,-28(fp)
   12b0c:	00129580 	call	12958 <alt_file_locked>
   12b10:	e0bff715 	stw	r2,-36(fp)
   12b14:	e0bff717 	ldw	r2,-36(fp)
   12b18:	1004803a 	cmplt	r2,r2,zero
   12b1c:	1000131e 	bne	r2,zero,12b6c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12b20:	e0bffa17 	ldw	r2,-24(fp)
   12b24:	10800317 	ldw	r2,12(r2)
   12b28:	1005003a 	cmpeq	r2,r2,zero
   12b2c:	1000091e 	bne	r2,zero,12b54 <open+0x120>
   12b30:	e0bffa17 	ldw	r2,-24(fp)
   12b34:	10800317 	ldw	r2,12(r2)
   12b38:	e13ff917 	ldw	r4,-28(fp)
   12b3c:	e17ffb17 	ldw	r5,-20(fp)
   12b40:	e1bffc17 	ldw	r6,-16(fp)
   12b44:	e1fffd17 	ldw	r7,-12(fp)
   12b48:	103ee83a 	callr	r2
   12b4c:	e0bfff15 	stw	r2,-4(fp)
   12b50:	00000106 	br	12b58 <open+0x124>
   12b54:	e03fff15 	stw	zero,-4(fp)
   12b58:	e0bfff17 	ldw	r2,-4(fp)
   12b5c:	e0bff715 	stw	r2,-36(fp)
   12b60:	00000206 	br	12b6c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12b64:	00bffb44 	movi	r2,-19
   12b68:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12b6c:	e0bff717 	ldw	r2,-36(fp)
   12b70:	1004403a 	cmpge	r2,r2,zero
   12b74:	1000091e 	bne	r2,zero,12b9c <open+0x168>
  {
    alt_release_fd (index);  
   12b78:	e13ff817 	ldw	r4,-32(fp)
   12b7c:	0012c1c0 	call	12c1c <alt_release_fd>
    ALT_ERRNO = -status;
   12b80:	0012bbc0 	call	12bbc <alt_get_errno>
   12b84:	e0fff717 	ldw	r3,-36(fp)
   12b88:	00c7c83a 	sub	r3,zero,r3
   12b8c:	10c00015 	stw	r3,0(r2)
    return -1;
   12b90:	00bfffc4 	movi	r2,-1
   12b94:	e0bffe15 	stw	r2,-8(fp)
   12b98:	00000206 	br	12ba4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   12b9c:	e0bff817 	ldw	r2,-32(fp)
   12ba0:	e0bffe15 	stw	r2,-8(fp)
   12ba4:	e0bffe17 	ldw	r2,-8(fp)
}
   12ba8:	e037883a 	mov	sp,fp
   12bac:	dfc00117 	ldw	ra,4(sp)
   12bb0:	df000017 	ldw	fp,0(sp)
   12bb4:	dec00204 	addi	sp,sp,8
   12bb8:	f800283a 	ret

00012bbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12bbc:	defffd04 	addi	sp,sp,-12
   12bc0:	dfc00215 	stw	ra,8(sp)
   12bc4:	df000115 	stw	fp,4(sp)
   12bc8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12bcc:	00800074 	movhi	r2,1
   12bd0:	108dcd04 	addi	r2,r2,14132
   12bd4:	10800017 	ldw	r2,0(r2)
   12bd8:	1005003a 	cmpeq	r2,r2,zero
   12bdc:	1000061e 	bne	r2,zero,12bf8 <alt_get_errno+0x3c>
   12be0:	00800074 	movhi	r2,1
   12be4:	108dcd04 	addi	r2,r2,14132
   12be8:	10800017 	ldw	r2,0(r2)
   12bec:	103ee83a 	callr	r2
   12bf0:	e0bfff15 	stw	r2,-4(fp)
   12bf4:	00000306 	br	12c04 <alt_get_errno+0x48>
   12bf8:	00800074 	movhi	r2,1
   12bfc:	108ec804 	addi	r2,r2,15136
   12c00:	e0bfff15 	stw	r2,-4(fp)
   12c04:	e0bfff17 	ldw	r2,-4(fp)
}
   12c08:	e037883a 	mov	sp,fp
   12c0c:	dfc00117 	ldw	ra,4(sp)
   12c10:	df000017 	ldw	fp,0(sp)
   12c14:	dec00204 	addi	sp,sp,8
   12c18:	f800283a 	ret

00012c1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12c1c:	defffe04 	addi	sp,sp,-8
   12c20:	df000115 	stw	fp,4(sp)
   12c24:	df000104 	addi	fp,sp,4
   12c28:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12c2c:	e0bfff17 	ldw	r2,-4(fp)
   12c30:	108000d0 	cmplti	r2,r2,3
   12c34:	10000d1e 	bne	r2,zero,12c6c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12c38:	e0bfff17 	ldw	r2,-4(fp)
   12c3c:	00c00074 	movhi	r3,1
   12c40:	18cd6004 	addi	r3,r3,13696
   12c44:	10800324 	muli	r2,r2,12
   12c48:	10c5883a 	add	r2,r2,r3
   12c4c:	10800204 	addi	r2,r2,8
   12c50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12c54:	e0bfff17 	ldw	r2,-4(fp)
   12c58:	00c00074 	movhi	r3,1
   12c5c:	18cd6004 	addi	r3,r3,13696
   12c60:	10800324 	muli	r2,r2,12
   12c64:	10c5883a 	add	r2,r2,r3
   12c68:	10000015 	stw	zero,0(r2)
  }
}
   12c6c:	e037883a 	mov	sp,fp
   12c70:	df000017 	ldw	fp,0(sp)
   12c74:	dec00104 	addi	sp,sp,4
   12c78:	f800283a 	ret

00012c7c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   12c7c:	deffff04 	addi	sp,sp,-4
   12c80:	df000015 	stw	fp,0(sp)
   12c84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12c88:	000170fa 	wrctl	ienable,zero
}
   12c8c:	e037883a 	mov	sp,fp
   12c90:	df000017 	ldw	fp,0(sp)
   12c94:	dec00104 	addi	sp,sp,4
   12c98:	f800283a 	ret

00012c9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12c9c:	defffa04 	addi	sp,sp,-24
   12ca0:	dfc00515 	stw	ra,20(sp)
   12ca4:	df000415 	stw	fp,16(sp)
   12ca8:	df000404 	addi	fp,sp,16
   12cac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12cb0:	00800074 	movhi	r2,1
   12cb4:	108dc404 	addi	r2,r2,14096
   12cb8:	10800017 	ldw	r2,0(r2)
   12cbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12cc0:	00003306 	br	12d90 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   12cc4:	e0bffd17 	ldw	r2,-12(fp)
   12cc8:	11000217 	ldw	r4,8(r2)
   12ccc:	0010b180 	call	10b18 <strlen>
   12cd0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   12cd4:	e0bffd17 	ldw	r2,-12(fp)
   12cd8:	10c00217 	ldw	r3,8(r2)
   12cdc:	e0bffc17 	ldw	r2,-16(fp)
   12ce0:	1885883a 	add	r2,r3,r2
   12ce4:	10bfffc4 	addi	r2,r2,-1
   12ce8:	10800003 	ldbu	r2,0(r2)
   12cec:	10803fcc 	andi	r2,r2,255
   12cf0:	1080201c 	xori	r2,r2,128
   12cf4:	10bfe004 	addi	r2,r2,-128
   12cf8:	10800bd8 	cmpnei	r2,r2,47
   12cfc:	1000031e 	bne	r2,zero,12d0c <alt_find_file+0x70>
    {
      len -= 1;
   12d00:	e0bffc17 	ldw	r2,-16(fp)
   12d04:	10bfffc4 	addi	r2,r2,-1
   12d08:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12d0c:	e0bffc17 	ldw	r2,-16(fp)
   12d10:	1007883a 	mov	r3,r2
   12d14:	e0bffe17 	ldw	r2,-8(fp)
   12d18:	1885883a 	add	r2,r3,r2
   12d1c:	10800003 	ldbu	r2,0(r2)
   12d20:	10803fcc 	andi	r2,r2,255
   12d24:	1080201c 	xori	r2,r2,128
   12d28:	10bfe004 	addi	r2,r2,-128
   12d2c:	10800be0 	cmpeqi	r2,r2,47
   12d30:	10000a1e 	bne	r2,zero,12d5c <alt_find_file+0xc0>
   12d34:	e0bffc17 	ldw	r2,-16(fp)
   12d38:	1007883a 	mov	r3,r2
   12d3c:	e0bffe17 	ldw	r2,-8(fp)
   12d40:	1885883a 	add	r2,r3,r2
   12d44:	10800003 	ldbu	r2,0(r2)
   12d48:	10803fcc 	andi	r2,r2,255
   12d4c:	1080201c 	xori	r2,r2,128
   12d50:	10bfe004 	addi	r2,r2,-128
   12d54:	1004c03a 	cmpne	r2,r2,zero
   12d58:	10000a1e 	bne	r2,zero,12d84 <alt_find_file+0xe8>
   12d5c:	e0bffd17 	ldw	r2,-12(fp)
   12d60:	11000217 	ldw	r4,8(r2)
   12d64:	e1bffc17 	ldw	r6,-16(fp)
   12d68:	e17ffe17 	ldw	r5,-8(fp)
   12d6c:	0012f380 	call	12f38 <memcmp>
   12d70:	1004c03a 	cmpne	r2,r2,zero
   12d74:	1000031e 	bne	r2,zero,12d84 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12d78:	e0bffd17 	ldw	r2,-12(fp)
   12d7c:	e0bfff15 	stw	r2,-4(fp)
   12d80:	00000806 	br	12da4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   12d84:	e0bffd17 	ldw	r2,-12(fp)
   12d88:	10800017 	ldw	r2,0(r2)
   12d8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12d90:	00c00074 	movhi	r3,1
   12d94:	18cdc404 	addi	r3,r3,14096
   12d98:	e0bffd17 	ldw	r2,-12(fp)
   12d9c:	10ffc91e 	bne	r2,r3,12cc4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12da0:	e03fff15 	stw	zero,-4(fp)
   12da4:	e0bfff17 	ldw	r2,-4(fp)
}
   12da8:	e037883a 	mov	sp,fp
   12dac:	dfc00117 	ldw	ra,4(sp)
   12db0:	df000017 	ldw	fp,0(sp)
   12db4:	dec00204 	addi	sp,sp,8
   12db8:	f800283a 	ret

00012dbc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12dbc:	defffc04 	addi	sp,sp,-16
   12dc0:	df000315 	stw	fp,12(sp)
   12dc4:	df000304 	addi	fp,sp,12
   12dc8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12dcc:	00bffa04 	movi	r2,-24
   12dd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12dd4:	e03ffe15 	stw	zero,-8(fp)
   12dd8:	00001e06 	br	12e54 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   12ddc:	e0bffe17 	ldw	r2,-8(fp)
   12de0:	00c00074 	movhi	r3,1
   12de4:	18cd6004 	addi	r3,r3,13696
   12de8:	10800324 	muli	r2,r2,12
   12dec:	10c5883a 	add	r2,r2,r3
   12df0:	10800017 	ldw	r2,0(r2)
   12df4:	1004c03a 	cmpne	r2,r2,zero
   12df8:	1000131e 	bne	r2,zero,12e48 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   12dfc:	e0bffe17 	ldw	r2,-8(fp)
   12e00:	00c00074 	movhi	r3,1
   12e04:	18cd6004 	addi	r3,r3,13696
   12e08:	10800324 	muli	r2,r2,12
   12e0c:	10c7883a 	add	r3,r2,r3
   12e10:	e0bfff17 	ldw	r2,-4(fp)
   12e14:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   12e18:	00800074 	movhi	r2,1
   12e1c:	108dc804 	addi	r2,r2,14112
   12e20:	10c00017 	ldw	r3,0(r2)
   12e24:	e0bffe17 	ldw	r2,-8(fp)
   12e28:	1880040e 	bge	r3,r2,12e3c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   12e2c:	00c00074 	movhi	r3,1
   12e30:	18cdc804 	addi	r3,r3,14112
   12e34:	e0bffe17 	ldw	r2,-8(fp)
   12e38:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   12e3c:	e0bffe17 	ldw	r2,-8(fp)
   12e40:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12e44:	00000606 	br	12e60 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12e48:	e0bffe17 	ldw	r2,-8(fp)
   12e4c:	10800044 	addi	r2,r2,1
   12e50:	e0bffe15 	stw	r2,-8(fp)
   12e54:	e0bffe17 	ldw	r2,-8(fp)
   12e58:	10800810 	cmplti	r2,r2,32
   12e5c:	103fdf1e 	bne	r2,zero,12ddc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12e60:	e0bffd17 	ldw	r2,-12(fp)
}
   12e64:	e037883a 	mov	sp,fp
   12e68:	df000017 	ldw	fp,0(sp)
   12e6c:	dec00104 	addi	sp,sp,4
   12e70:	f800283a 	ret

00012e74 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12e74:	defffb04 	addi	sp,sp,-20
   12e78:	df000415 	stw	fp,16(sp)
   12e7c:	df000404 	addi	fp,sp,16
   12e80:	e13ffe15 	stw	r4,-8(fp)
   12e84:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12e88:	e0bfff17 	ldw	r2,-4(fp)
   12e8c:	10840070 	cmpltui	r2,r2,4097
   12e90:	1000021e 	bne	r2,zero,12e9c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12e94:	00840004 	movi	r2,4096
   12e98:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12e9c:	e0fffe17 	ldw	r3,-8(fp)
   12ea0:	e0bfff17 	ldw	r2,-4(fp)
   12ea4:	1885883a 	add	r2,r3,r2
   12ea8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12eac:	e0bffe17 	ldw	r2,-8(fp)
   12eb0:	e0bffd15 	stw	r2,-12(fp)
   12eb4:	00000506 	br	12ecc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12eb8:	e0bffd17 	ldw	r2,-12(fp)
   12ebc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12ec0:	e0bffd17 	ldw	r2,-12(fp)
   12ec4:	10800804 	addi	r2,r2,32
   12ec8:	e0bffd15 	stw	r2,-12(fp)
   12ecc:	e0fffd17 	ldw	r3,-12(fp)
   12ed0:	e0bffc17 	ldw	r2,-16(fp)
   12ed4:	18bff836 	bltu	r3,r2,12eb8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12ed8:	e0bffe17 	ldw	r2,-8(fp)
   12edc:	108007cc 	andi	r2,r2,31
   12ee0:	1005003a 	cmpeq	r2,r2,zero
   12ee4:	1000021e 	bne	r2,zero,12ef0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12ee8:	e0bffd17 	ldw	r2,-12(fp)
   12eec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12ef0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12ef4:	e037883a 	mov	sp,fp
   12ef8:	df000017 	ldw	fp,0(sp)
   12efc:	dec00104 	addi	sp,sp,4
   12f00:	f800283a 	ret

00012f04 <atexit>:
   12f04:	200b883a 	mov	r5,r4
   12f08:	000d883a 	mov	r6,zero
   12f0c:	0009883a 	mov	r4,zero
   12f10:	000f883a 	mov	r7,zero
   12f14:	0012f741 	jmpi	12f74 <__register_exitproc>

00012f18 <exit>:
   12f18:	defffe04 	addi	sp,sp,-8
   12f1c:	dc400015 	stw	r17,0(sp)
   12f20:	000b883a 	mov	r5,zero
   12f24:	2023883a 	mov	r17,r4
   12f28:	dfc00115 	stw	ra,4(sp)
   12f2c:	00130e40 	call	130e4 <__call_exitprocs>
   12f30:	8809883a 	mov	r4,r17
   12f34:	00132e00 	call	132e0 <_exit>

00012f38 <memcmp>:
   12f38:	31ffffc4 	addi	r7,r6,-1
   12f3c:	3000061e 	bne	r6,zero,12f58 <memcmp+0x20>
   12f40:	00000a06 	br	12f6c <memcmp+0x34>
   12f44:	39ffffc4 	addi	r7,r7,-1
   12f48:	00bfffc4 	movi	r2,-1
   12f4c:	21000044 	addi	r4,r4,1
   12f50:	29400044 	addi	r5,r5,1
   12f54:	38800526 	beq	r7,r2,12f6c <memcmp+0x34>
   12f58:	20c00003 	ldbu	r3,0(r4)
   12f5c:	28800003 	ldbu	r2,0(r5)
   12f60:	18bff826 	beq	r3,r2,12f44 <memcmp+0xc>
   12f64:	1885c83a 	sub	r2,r3,r2
   12f68:	f800283a 	ret
   12f6c:	0005883a 	mov	r2,zero
   12f70:	f800283a 	ret

00012f74 <__register_exitproc>:
   12f74:	defff904 	addi	sp,sp,-28
   12f78:	00800074 	movhi	r2,1
   12f7c:	108dc204 	addi	r2,r2,14088
   12f80:	dc400115 	stw	r17,4(sp)
   12f84:	14400017 	ldw	r17,0(r2)
   12f88:	dc000015 	stw	r16,0(sp)
   12f8c:	dd400515 	stw	r21,20(sp)
   12f90:	8c000c17 	ldw	r16,48(r17)
   12f94:	dd000415 	stw	r20,16(sp)
   12f98:	dcc00315 	stw	r19,12(sp)
   12f9c:	dc800215 	stw	r18,8(sp)
   12fa0:	dfc00615 	stw	ra,24(sp)
   12fa4:	2025883a 	mov	r18,r4
   12fa8:	282b883a 	mov	r21,r5
   12fac:	3029883a 	mov	r20,r6
   12fb0:	3827883a 	mov	r19,r7
   12fb4:	80002626 	beq	r16,zero,13050 <__register_exitproc+0xdc>
   12fb8:	81400117 	ldw	r5,4(r16)
   12fbc:	008007c4 	movi	r2,31
   12fc0:	11403716 	blt	r2,r5,130a0 <__register_exitproc+0x12c>
   12fc4:	90002026 	beq	r18,zero,13048 <__register_exitproc+0xd4>
   12fc8:	81802217 	ldw	r6,136(r16)
   12fcc:	30002926 	beq	r6,zero,13074 <__register_exitproc+0x100>
   12fd0:	81400117 	ldw	r5,4(r16)
   12fd4:	00c00044 	movi	r3,1
   12fd8:	31004017 	ldw	r4,256(r6)
   12fdc:	1946983a 	sll	r3,r3,r5
   12fe0:	2945883a 	add	r2,r5,r5
   12fe4:	1085883a 	add	r2,r2,r2
   12fe8:	1185883a 	add	r2,r2,r6
   12fec:	20c8b03a 	or	r4,r4,r3
   12ff0:	14c02015 	stw	r19,128(r2)
   12ff4:	15000015 	stw	r20,0(r2)
   12ff8:	00800084 	movi	r2,2
   12ffc:	31004015 	stw	r4,256(r6)
   13000:	90801826 	beq	r18,r2,13064 <__register_exitproc+0xf0>
   13004:	2945883a 	add	r2,r5,r5
   13008:	1085883a 	add	r2,r2,r2
   1300c:	1405883a 	add	r2,r2,r16
   13010:	28c00044 	addi	r3,r5,1
   13014:	0009883a 	mov	r4,zero
   13018:	15400215 	stw	r21,8(r2)
   1301c:	80c00115 	stw	r3,4(r16)
   13020:	2005883a 	mov	r2,r4
   13024:	dfc00617 	ldw	ra,24(sp)
   13028:	dd400517 	ldw	r21,20(sp)
   1302c:	dd000417 	ldw	r20,16(sp)
   13030:	dcc00317 	ldw	r19,12(sp)
   13034:	dc800217 	ldw	r18,8(sp)
   13038:	dc400117 	ldw	r17,4(sp)
   1303c:	dc000017 	ldw	r16,0(sp)
   13040:	dec00704 	addi	sp,sp,28
   13044:	f800283a 	ret
   13048:	81400117 	ldw	r5,4(r16)
   1304c:	003fed06 	br	13004 <__register_exitproc+0x90>
   13050:	00800074 	movhi	r2,1
   13054:	108f0d04 	addi	r2,r2,15412
   13058:	1021883a 	mov	r16,r2
   1305c:	88800c15 	stw	r2,48(r17)
   13060:	003fd506 	br	12fb8 <__register_exitproc+0x44>
   13064:	30804117 	ldw	r2,260(r6)
   13068:	10c4b03a 	or	r2,r2,r3
   1306c:	30804115 	stw	r2,260(r6)
   13070:	003fe406 	br	13004 <__register_exitproc+0x90>
   13074:	00800034 	movhi	r2,0
   13078:	10800004 	addi	r2,r2,0
   1307c:	10000b26 	beq	r2,zero,130ac <__register_exitproc+0x138>
   13080:	01004204 	movi	r4,264
   13084:	103ee83a 	callr	r2
   13088:	10000826 	beq	r2,zero,130ac <__register_exitproc+0x138>
   1308c:	100d883a 	mov	r6,r2
   13090:	10004015 	stw	zero,256(r2)
   13094:	10004115 	stw	zero,260(r2)
   13098:	80802215 	stw	r2,136(r16)
   1309c:	003fcc06 	br	12fd0 <__register_exitproc+0x5c>
   130a0:	00800034 	movhi	r2,0
   130a4:	10800004 	addi	r2,r2,0
   130a8:	1000021e 	bne	r2,zero,130b4 <__register_exitproc+0x140>
   130ac:	013fffc4 	movi	r4,-1
   130b0:	003fdb06 	br	13020 <__register_exitproc+0xac>
   130b4:	01002304 	movi	r4,140
   130b8:	103ee83a 	callr	r2
   130bc:	1007883a 	mov	r3,r2
   130c0:	103ffa26 	beq	r2,zero,130ac <__register_exitproc+0x138>
   130c4:	88800c17 	ldw	r2,48(r17)
   130c8:	1821883a 	mov	r16,r3
   130cc:	18000115 	stw	zero,4(r3)
   130d0:	18800015 	stw	r2,0(r3)
   130d4:	88c00c15 	stw	r3,48(r17)
   130d8:	903fdb26 	beq	r18,zero,13048 <__register_exitproc+0xd4>
   130dc:	003fba06 	br	12fc8 <__register_exitproc+0x54>

000130e0 <register_fini>:
   130e0:	f800283a 	ret

000130e4 <__call_exitprocs>:
   130e4:	defff304 	addi	sp,sp,-52
   130e8:	00800074 	movhi	r2,1
   130ec:	108dc204 	addi	r2,r2,14088
   130f0:	df000b15 	stw	fp,44(sp)
   130f4:	17000017 	ldw	fp,0(r2)
   130f8:	00800034 	movhi	r2,0
   130fc:	10800004 	addi	r2,r2,0
   13100:	1005003a 	cmpeq	r2,r2,zero
   13104:	d8800215 	stw	r2,8(sp)
   13108:	e0800c04 	addi	r2,fp,48
   1310c:	dd800915 	stw	r22,36(sp)
   13110:	dd400815 	stw	r21,32(sp)
   13114:	dfc00c15 	stw	ra,48(sp)
   13118:	ddc00a15 	stw	r23,40(sp)
   1311c:	dd000715 	stw	r20,28(sp)
   13120:	dcc00615 	stw	r19,24(sp)
   13124:	dc800515 	stw	r18,20(sp)
   13128:	dc400415 	stw	r17,16(sp)
   1312c:	dc000315 	stw	r16,12(sp)
   13130:	282d883a 	mov	r22,r5
   13134:	d9000115 	stw	r4,4(sp)
   13138:	d8800015 	stw	r2,0(sp)
   1313c:	282b003a 	cmpeq	r21,r5,zero
   13140:	e4400c17 	ldw	r17,48(fp)
   13144:	88001226 	beq	r17,zero,13190 <__call_exitprocs+0xac>
   13148:	ddc00017 	ldw	r23,0(sp)
   1314c:	88800117 	ldw	r2,4(r17)
   13150:	8c802217 	ldw	r18,136(r17)
   13154:	143fffc4 	addi	r16,r2,-1
   13158:	80000b16 	blt	r16,zero,13188 <__call_exitprocs+0xa4>
   1315c:	9027003a 	cmpeq	r19,r18,zero
   13160:	a800171e 	bne	r21,zero,131c0 <__call_exitprocs+0xdc>
   13164:	9800051e 	bne	r19,zero,1317c <__call_exitprocs+0x98>
   13168:	8409883a 	add	r4,r16,r16
   1316c:	2105883a 	add	r2,r4,r4
   13170:	1485883a 	add	r2,r2,r18
   13174:	10c02017 	ldw	r3,128(r2)
   13178:	b0c01226 	beq	r22,r3,131c4 <__call_exitprocs+0xe0>
   1317c:	843fffc4 	addi	r16,r16,-1
   13180:	00bfffc4 	movi	r2,-1
   13184:	80bff61e 	bne	r16,r2,13160 <__call_exitprocs+0x7c>
   13188:	d8800217 	ldw	r2,8(sp)
   1318c:	10003226 	beq	r2,zero,13258 <__call_exitprocs+0x174>
   13190:	dfc00c17 	ldw	ra,48(sp)
   13194:	df000b17 	ldw	fp,44(sp)
   13198:	ddc00a17 	ldw	r23,40(sp)
   1319c:	dd800917 	ldw	r22,36(sp)
   131a0:	dd400817 	ldw	r21,32(sp)
   131a4:	dd000717 	ldw	r20,28(sp)
   131a8:	dcc00617 	ldw	r19,24(sp)
   131ac:	dc800517 	ldw	r18,20(sp)
   131b0:	dc400417 	ldw	r17,16(sp)
   131b4:	dc000317 	ldw	r16,12(sp)
   131b8:	dec00d04 	addi	sp,sp,52
   131bc:	f800283a 	ret
   131c0:	8409883a 	add	r4,r16,r16
   131c4:	88c00117 	ldw	r3,4(r17)
   131c8:	2105883a 	add	r2,r4,r4
   131cc:	1445883a 	add	r2,r2,r17
   131d0:	18ffffc4 	addi	r3,r3,-1
   131d4:	11800217 	ldw	r6,8(r2)
   131d8:	1c001826 	beq	r3,r16,1323c <__call_exitprocs+0x158>
   131dc:	10000215 	stw	zero,8(r2)
   131e0:	303fe626 	beq	r6,zero,1317c <__call_exitprocs+0x98>
   131e4:	8d000117 	ldw	r20,4(r17)
   131e8:	9800121e 	bne	r19,zero,13234 <__call_exitprocs+0x150>
   131ec:	00c00044 	movi	r3,1
   131f0:	1c06983a 	sll	r3,r3,r16
   131f4:	90804017 	ldw	r2,256(r18)
   131f8:	1884703a 	and	r2,r3,r2
   131fc:	10000d26 	beq	r2,zero,13234 <__call_exitprocs+0x150>
   13200:	90804117 	ldw	r2,260(r18)
   13204:	1884703a 	and	r2,r3,r2
   13208:	10000e1e 	bne	r2,zero,13244 <__call_exitprocs+0x160>
   1320c:	2105883a 	add	r2,r4,r4
   13210:	1485883a 	add	r2,r2,r18
   13214:	11400017 	ldw	r5,0(r2)
   13218:	d9000117 	ldw	r4,4(sp)
   1321c:	303ee83a 	callr	r6
   13220:	88800117 	ldw	r2,4(r17)
   13224:	a0bfc61e 	bne	r20,r2,13140 <__call_exitprocs+0x5c>
   13228:	b8800017 	ldw	r2,0(r23)
   1322c:	147fd326 	beq	r2,r17,1317c <__call_exitprocs+0x98>
   13230:	003fc306 	br	13140 <__call_exitprocs+0x5c>
   13234:	303ee83a 	callr	r6
   13238:	003ff906 	br	13220 <__call_exitprocs+0x13c>
   1323c:	8c000115 	stw	r16,4(r17)
   13240:	003fe706 	br	131e0 <__call_exitprocs+0xfc>
   13244:	2105883a 	add	r2,r4,r4
   13248:	1485883a 	add	r2,r2,r18
   1324c:	11000017 	ldw	r4,0(r2)
   13250:	303ee83a 	callr	r6
   13254:	003ff206 	br	13220 <__call_exitprocs+0x13c>
   13258:	88800117 	ldw	r2,4(r17)
   1325c:	10000b1e 	bne	r2,zero,1328c <__call_exitprocs+0x1a8>
   13260:	89000017 	ldw	r4,0(r17)
   13264:	20000a26 	beq	r4,zero,13290 <__call_exitprocs+0x1ac>
   13268:	b9000015 	stw	r4,0(r23)
   1326c:	90000226 	beq	r18,zero,13278 <__call_exitprocs+0x194>
   13270:	9009883a 	mov	r4,r18
   13274:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   13278:	8809883a 	mov	r4,r17
   1327c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   13280:	bc400017 	ldw	r17,0(r23)
   13284:	883fb11e 	bne	r17,zero,1314c <__call_exitprocs+0x68>
   13288:	003fc106 	br	13190 <__call_exitprocs+0xac>
   1328c:	89000017 	ldw	r4,0(r17)
   13290:	882f883a 	mov	r23,r17
   13294:	2023883a 	mov	r17,r4
   13298:	883fac1e 	bne	r17,zero,1314c <__call_exitprocs+0x68>
   1329c:	003fbc06 	br	13190 <__call_exitprocs+0xac>

000132a0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   132a0:	defffd04 	addi	sp,sp,-12
   132a4:	df000215 	stw	fp,8(sp)
   132a8:	df000204 	addi	fp,sp,8
   132ac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   132b8:	e0bffe17 	ldw	r2,-8(fp)
   132bc:	1005003a 	cmpeq	r2,r2,zero
   132c0:	1000021e 	bne	r2,zero,132cc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   132c4:	002af070 	cmpltui	zero,zero,43969
   132c8:	00000106 	br	132d0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   132cc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   132d0:	e037883a 	mov	sp,fp
   132d4:	df000017 	ldw	fp,0(sp)
   132d8:	dec00104 	addi	sp,sp,4
   132dc:	f800283a 	ret

000132e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   132e0:	defffd04 	addi	sp,sp,-12
   132e4:	dfc00215 	stw	ra,8(sp)
   132e8:	df000115 	stw	fp,4(sp)
   132ec:	df000104 	addi	fp,sp,4
   132f0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   132f4:	e13fff17 	ldw	r4,-4(fp)
   132f8:	00132a00 	call	132a0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   132fc:	003fff06 	br	132fc <_exit+0x1c>
   13300:	000130e0 	cmpeqi	zero,zero,1219
