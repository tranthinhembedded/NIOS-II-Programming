
part3_v2.elf:     file format elf32-littlenios2
part3_v2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080020

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000017c memsz 0x0000017c flags r-x
    LOAD off    0x0000119c vaddr 0x0008019c paddr 0x000801b0 align 2**12
         filesz 0x00000014 memsz 0x00000014 flags rw-
    LOAD off    0x000011c4 vaddr 0x000801c4 paddr 0x000801c4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000017c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rwdata       00000014  0008019c  000801b0  0000119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  3 .bss          0000000c  000801c4  000801c4  000011c4  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000011d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000015d  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006c1  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000037c  00000000  00000000  00001afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e4a  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000118  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c4  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000070  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00003220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  00003e7d  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00003e89  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00003e8a  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00003e8b  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00003e96  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00003ea1  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000009  00000000  00000000  00003eac  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000019  00000000  00000000  00003eb5  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00038b11  00000000  00000000  00003ece  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .text	00000000 .text
0008019c l    d  .rwdata	00000000 .rwdata
000801c4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00080058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000800b0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
0008013c g     F .text	0000002c alt_main
000801b0 g       *ABS*	00000000 __flash_rwdata_start
0008019c g     O .rwdata	00000010 segment_table
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000801c8 g     O .bss	00000004 alt_argv
000881ac g       *ABS*	00000000 _gp
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000801d0 g       *ABS*	00000000 __bss_end
0008018c g     F .text	00000004 alt_dcache_flush_all
000801b0 g       *ABS*	00000000 __ram_rwdata_end
0008019c g       *ABS*	00000000 __ram_rodata_end
000801ac g     O .rwdata	00000004 jtag_uart_0
000801d0 g       *ABS*	00000000 end
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
00080020 g     F .text	0000003c _start
00080168 g     F .text	00000004 alt_sys_init
0008019c g       *ABS*	00000000 __ram_rwdata_start
0008019c g       *ABS*	00000000 __ram_rodata_start
000801d0 g       *ABS*	00000000 __alt_stack_base
000801c4 g       *ABS*	00000000 __bss_start
0008005c g     F .text	00000054 main
000801cc g     O .bss	00000004 alt_envp
0008019c g       *ABS*	00000000 __flash_rodata_start
0008016c g     F .text	00000020 alt_irq_init
000801c4 g     O .bss	00000004 alt_argc
00080020 g       *ABS*	00000000 __ram_exceptions_start
000801b0 g       *ABS*	00000000 _edata
000801d0 g       *ABS*	00000000 _end
00080020 g       *ABS*	00000000 __ram_exceptions_end
00080194 g     F .text	00000008 altera_nios2_qsys_irq_init
0008000c g       .entry	00000000 exit
000e1a80 g       *ABS*	00000000 __alt_data_end
0008000c g       .entry	00000000 _exit
00080190 g     F .text	00000004 alt_icache_flush_all
000800d0 g     F .text	0000006c alt_load



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08400814 	ori	at,at,32
    jmp r1
   80008:	0800683a 	jmp	at

0008000c <_exit>:
	...

Disassembly of section .text:

00080020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80020:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80024:	dec6a014 	ori	sp,sp,6784

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   80028:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8002c:	d6a06b14 	ori	gp,gp,33196
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80030:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80034:	10807114 	ori	r2,r2,452

    movhi r3, %hi(__bss_end)
   80038:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8003c:	18c07414 	ori	r3,r3,464

    beq r2, r3, 1f
   80040:	10c00326 	beq	r2,r3,80050 <_start+0x30>

0:
    stw zero, (r2)
   80044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8004c:	10fffd36 	bltu	r2,r3,80044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80050:	00800d00 	call	800d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80054:	008013c0 	call	8013c <alt_main>

00080058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80058:	003fff06 	br	80058 <alt_after_alt_main>

0008005c <main>:
    0xA1, // D
    0x86, // E
    0x8E  // F
};

int main() {
   8005c:	02000434 	movhi	r8,16
   80060:	42040a04 	addi	r8,r8,4136
   80064:	01c00434 	movhi	r7,16
   80068:	39c40804 	addi	r7,r7,4128
   8006c:	01000234 	movhi	r4,8
   80070:	21006704 	addi	r4,r4,412
   80074:	01800434 	movhi	r6,16
   80078:	31840b04 	addi	r6,r6,4140
   8007c:	01400434 	movhi	r5,16
   80080:	29440904 	addi	r5,r5,4132
    uint8_t sw_value1;
    uint8_t hex_value1;

    while (1) {

        sw_value = IORD(SWITCH_BASE,0) & 0x0F;
   80084:	40c00037 	ldwio	r3,0(r8)
        sw_value1 = IORD(SWITCH_0_BASE,0) & 0x0F;
   80088:	38800037 	ldwio	r2,0(r7)

        hex_value = segment_table[sw_value];
        hex_value1 = segment_table[sw_value1];
   8008c:	108003cc 	andi	r2,r2,15

        IOWR(LED_BASE,0, hex_value);
   80090:	18c003cc 	andi	r3,r3,15

        sw_value = IORD(SWITCH_BASE,0) & 0x0F;
        sw_value1 = IORD(SWITCH_0_BASE,0) & 0x0F;

        hex_value = segment_table[sw_value];
        hex_value1 = segment_table[sw_value1];
   80094:	1105883a 	add	r2,r2,r4

        IOWR(LED_BASE,0, hex_value);
   80098:	1907883a 	add	r3,r3,r4

        sw_value = IORD(SWITCH_BASE,0) & 0x0F;
        sw_value1 = IORD(SWITCH_0_BASE,0) & 0x0F;

        hex_value = segment_table[sw_value];
        hex_value1 = segment_table[sw_value1];
   8009c:	10800003 	ldbu	r2,0(r2)

        IOWR(LED_BASE,0, hex_value);
   800a0:	18c00003 	ldbu	r3,0(r3)
   800a4:	30c00035 	stwio	r3,0(r6)
        IOWR(LED_0_BASE,0, hex_value1);
   800a8:	28800035 	stwio	r2,0(r5)
   800ac:	003ff506 	br	80084 <main+0x28>

000800b0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   800b0:	2900051e 	bne	r5,r4,800c8 <alt_load_section+0x18>
   800b4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   800b8:	20800017 	ldw	r2,0(r4)
   800bc:	21000104 	addi	r4,r4,4
   800c0:	28800015 	stw	r2,0(r5)
   800c4:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   800c8:	29bffb1e 	bne	r5,r6,800b8 <alt_load_section+0x8>
   800cc:	f800283a 	ret

000800d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   800d0:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   800d4:	01000234 	movhi	r4,8
   800d8:	21006c04 	addi	r4,r4,432
   800dc:	01400234 	movhi	r5,8
   800e0:	29406704 	addi	r5,r5,412
   800e4:	01800234 	movhi	r6,8
   800e8:	31806c04 	addi	r6,r6,432
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   800ec:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   800f0:	00800b00 	call	800b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   800f4:	01000234 	movhi	r4,8
   800f8:	21000804 	addi	r4,r4,32
   800fc:	01400234 	movhi	r5,8
   80100:	29400804 	addi	r5,r5,32
   80104:	01800234 	movhi	r6,8
   80108:	31800804 	addi	r6,r6,32
   8010c:	00800b00 	call	800b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80110:	01000234 	movhi	r4,8
   80114:	21006704 	addi	r4,r4,412
   80118:	01400234 	movhi	r5,8
   8011c:	29406704 	addi	r5,r5,412
   80120:	01800234 	movhi	r6,8
   80124:	31806704 	addi	r6,r6,412
   80128:	00800b00 	call	800b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8012c:	008018c0 	call	8018c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   80130:	dfc00017 	ldw	ra,0(sp)
   80134:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   80138:	00801901 	jmpi	80190 <alt_icache_flush_all>

0008013c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8013c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80140:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80144:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80148:	008016c0 	call	8016c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8014c:	00801680 	call	80168 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   80150:	d1200617 	ldw	r4,-32744(gp)
   80154:	d1600717 	ldw	r5,-32740(gp)
   80158:	d1a00817 	ldw	r6,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   8015c:	dfc00017 	ldw	ra,0(sp)
   80160:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   80164:	008005c1 	jmpi	8005c <main>

00080168 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
   80168:	f800283a 	ret

0008016c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8016c:	deffff04 	addi	sp,sp,-4
   80170:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   80174:	00801940 	call	80194 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80178:	00800044 	movi	r2,1
   8017c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80180:	dfc00017 	ldw	ra,0(sp)
   80184:	dec00104 	addi	sp,sp,4
   80188:	f800283a 	ret

0008018c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8018c:	f800283a 	ret

00080190 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   80190:	f800283a 	ret

00080194 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   80194:	000170fa 	wrctl	ienable,zero
}
   80198:	f800283a 	ret
