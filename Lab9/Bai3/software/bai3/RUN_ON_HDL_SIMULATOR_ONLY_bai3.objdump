
RUN_ON_HDL_SIMULATOR_ONLY_bai3.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_bai3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001ea8 memsz 0x00001ea8 flags r-x
    LOAD off    0x00002ec8 vaddr 0x00011ec8 paddr 0x000121a8 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003488 vaddr 0x00012488 paddr 0x00012488 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001cc8  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00011e7c  00011e7c  00002e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00011ec8  000121a8  00002ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  00012488  00012488  00003488  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  000031d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000767  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009041  00000000  00000000  00003e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022af  00000000  00000000  0000ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005ff8  00000000  00000000  0000f17f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000860  00000000  00000000  00015178  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000aa9  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e15  00000000  00000000  00016481  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  00017298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00018bf2  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00018bf5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00018c01  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00018c02  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00018c03  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00018c0e  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00018c19  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  00018c24  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000024  00000000  00000000  00018c2c  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000760c6  00000000  00000000  00018c50  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00011e7c l    d  .rodata	00000000 .rodata
00011ec8 l    d  .rwdata	00000000 .rwdata
00012488 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011ec8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0001047c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00010674 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011fa8 l     O .rwdata	0000002c jtag_uart_0
00010750 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000109e0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00010bdc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010c58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010d38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001115c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011298 l     F .text	000000dc alt_file_locked
000114fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011c58 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00011e18 l     F .text	00000040 alt_sim_halt
000104e8 g     F .text	0000006c alt_main
00010204 g     F .text	00000090 _puts_r
000124a4 g     O .bss	00000100 alt_irq
000121a8 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012488 g     O .bss	00000004 errno
00012490 g     O .bss	00000004 alt_argv
0001a17c g       *ABS*	00000000 _gp
00011ffc g     O .rwdata	00000180 alt_fd_list
00011780 g     F .text	00000094 alt_find_dev
00011220 g     F .text	00000078 alt_io_redirect
00011e7c g       *ABS*	00000000 __DTOR_END__
00010294 g     F .text	00000014 puts
00010838 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000119ec g     F .text	00000090 alt_icache_flush
00012194 g     O .rwdata	00000004 alt_max_fd
00012180 g     O .rwdata	00000004 _global_impure_ptr
00012630 g       *ABS*	00000000 __bss_end
00011064 g     F .text	000000f8 alt_iic_isr_register
00011654 g     F .text	0000010c alt_tick
0001101c g     F .text	00000048 alt_ic_irq_enabled
000115bc g     F .text	00000098 alt_alarm_stop
00012498 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00011fd4 g     O .rwdata	00000028 alt_dev_null
00010c3c g     F .text	0000001c alt_dcache_flush_all
000121a8 g       *ABS*	00000000 __ram_rwdata_end
0001218c g     O .rwdata	00000008 alt_dev_list
00010554 g     F .text	00000120 write
00011ec8 g       *ABS*	00000000 __ram_rodata_end
00012630 g       *ABS*	00000000 end
00011e78 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
00010a50 g     F .text	00000090 alt_avalon_timer_sc_init
0001093c g     F .text	000000a4 altera_avalon_jtag_uart_write
00011c5c g     F .text	000001bc __call_exitprocs
000101b4 g     F .text	0000001c _start
0001249c g     O .bss	00000004 _alt_tick_rate
000124a0 g     O .bss	00000004 _alt_nticks
00010708 g     F .text	00000048 alt_sys_init
00011aec g     F .text	0000016c __register_exitproc
00011ec8 g       *ABS*	00000000 __ram_rwdata_start
00011e7c g       *ABS*	00000000 __ram_rodata_start
00010788 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00011934 g     F .text	000000b8 alt_get_fd
00011ab0 g     F .text	0000003c memcmp
00012630 g       *ABS*	00000000 __alt_stack_base
00011814 g     F .text	00000120 alt_find_file
00010c84 g     F .text	000000b4 alt_dev_llist_insert
000102c8 g     F .text	000000bc __sfvwrite_small_dev
00012488 g       *ABS*	00000000 __bss_start
000101d0 g     F .text	00000034 main
00012494 g     O .bss	00000004 alt_envp
000107e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000125a4 g     O .bss	0000008c _atexit0
00012198 g     O .rwdata	00000004 alt_errno
00011e7c g       *ABS*	00000000 __CTOR_END__
00011e7c g       *ABS*	00000000 __flash_rodata_start
00011e7c g       *ABS*	00000000 __DTOR_LIST__
000106d4 g     F .text	00000034 alt_irq_init
0001155c g     F .text	00000060 alt_release_fd
00011a7c g     F .text	00000014 atexit
00010384 g     F .text	00000078 _write_r
0001217c g     O .rwdata	00000004 _impure_ptr
0001248c g     O .bss	00000004 alt_argc
00010dfc g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012184 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010e90 g     F .text	00000050 alt_ic_isr_register
000121a8 g       *ABS*	00000000 _edata
00012630 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00010f7c g     F .text	000000a0 alt_ic_irq_disable
00011760 g     F .text	00000020 altera_nios2_qsys_irq_init
00011a90 g     F .text	00000020 exit
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011e58 g     F .text	00000020 _exit
000102a8 g     F .text	00000020 strlen
00011374 g     F .text	00000188 open
00010e60 g     F .text	00000030 alt_icache_flush_all
0001219c g     O .rwdata	00000004 alt_priority_mask
00010ee0 g     F .text	0000009c alt_ic_irq_enable
000121a0 g     O .rwdata	00000008 alt_alarm_list
00010d98 g     F .text	00000064 _do_ctors
00010ae0 g     F .text	000000fc close
000103fc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406d14 	ori	at,at,436
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c00074 	movhi	r3,1
   10134:	18c92904 	addi	r3,r3,9380
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00074 	movhi	r3,1
   1014c:	18c92904 	addi	r3,r3,9380
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dee71014 	ori	sp,sp,40000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6a85f14 	ori	gp,gp,41340
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101c4:	00103fc0 	call	103fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101c8:	00104e80 	call	104e8 <alt_main>

000101cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101cc:	003fff06 	br	101cc <alt_after_alt_main>

000101d0 <main>:
 */

#include <stdio.h>

int main()
{
   101d0:	defffe04 	addi	sp,sp,-8
   101d4:	dfc00115 	stw	ra,4(sp)
   101d8:	df000015 	stw	fp,0(sp)
   101dc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   101e0:	01000074 	movhi	r4,1
   101e4:	21079f04 	addi	r4,r4,7804
   101e8:	00102940 	call	10294 <puts>

  return 0;
   101ec:	0005883a 	mov	r2,zero
}
   101f0:	e037883a 	mov	sp,fp
   101f4:	dfc00117 	ldw	ra,4(sp)
   101f8:	df000017 	ldw	fp,0(sp)
   101fc:	dec00204 	addi	sp,sp,8
   10200:	f800283a 	ret

00010204 <_puts_r>:
   10204:	defffd04 	addi	sp,sp,-12
   10208:	dc000015 	stw	r16,0(sp)
   1020c:	2021883a 	mov	r16,r4
   10210:	2809883a 	mov	r4,r5
   10214:	dfc00215 	stw	ra,8(sp)
   10218:	dc400115 	stw	r17,4(sp)
   1021c:	2823883a 	mov	r17,r5
   10220:	00102a80 	call	102a8 <strlen>
   10224:	80c00217 	ldw	r3,8(r16)
   10228:	02000074 	movhi	r8,1
   1022c:	4200b204 	addi	r8,r8,712
   10230:	880d883a 	mov	r6,r17
   10234:	100f883a 	mov	r7,r2
   10238:	8009883a 	mov	r4,r16
   1023c:	180b883a 	mov	r5,r3
   10240:	1a000115 	stw	r8,4(r3)
   10244:	403ee83a 	callr	r8
   10248:	047fffc4 	movi	r17,-1
   1024c:	8009883a 	mov	r4,r16
   10250:	01800074 	movhi	r6,1
   10254:	3187a404 	addi	r6,r6,7824
   10258:	01c00044 	movi	r7,1
   1025c:	1440071e 	bne	r2,r17,1027c <_puts_r+0x78>
   10260:	00ffffc4 	movi	r3,-1
   10264:	1805883a 	mov	r2,r3
   10268:	dfc00217 	ldw	ra,8(sp)
   1026c:	dc400117 	ldw	r17,4(sp)
   10270:	dc000017 	ldw	r16,0(sp)
   10274:	dec00304 	addi	sp,sp,12
   10278:	f800283a 	ret
   1027c:	81400217 	ldw	r5,8(r16)
   10280:	28c00117 	ldw	r3,4(r5)
   10284:	183ee83a 	callr	r3
   10288:	0007883a 	mov	r3,zero
   1028c:	147ff51e 	bne	r2,r17,10264 <_puts_r+0x60>
   10290:	003ff306 	br	10260 <_puts_r+0x5c>

00010294 <puts>:
   10294:	00800074 	movhi	r2,1
   10298:	10885f04 	addi	r2,r2,8572
   1029c:	200b883a 	mov	r5,r4
   102a0:	11000017 	ldw	r4,0(r2)
   102a4:	00102041 	jmpi	10204 <_puts_r>

000102a8 <strlen>:
   102a8:	20800007 	ldb	r2,0(r4)
   102ac:	10000526 	beq	r2,zero,102c4 <strlen+0x1c>
   102b0:	2007883a 	mov	r3,r4
   102b4:	18c00044 	addi	r3,r3,1
   102b8:	18800007 	ldb	r2,0(r3)
   102bc:	103ffd1e 	bne	r2,zero,102b4 <strlen+0xc>
   102c0:	1905c83a 	sub	r2,r3,r4
   102c4:	f800283a 	ret

000102c8 <__sfvwrite_small_dev>:
   102c8:	2880000b 	ldhu	r2,0(r5)
   102cc:	defffa04 	addi	sp,sp,-24
   102d0:	dcc00315 	stw	r19,12(sp)
   102d4:	1080020c 	andi	r2,r2,8
   102d8:	dc800215 	stw	r18,8(sp)
   102dc:	dc400115 	stw	r17,4(sp)
   102e0:	dfc00515 	stw	ra,20(sp)
   102e4:	dd000415 	stw	r20,16(sp)
   102e8:	dc000015 	stw	r16,0(sp)
   102ec:	2825883a 	mov	r18,r5
   102f0:	2027883a 	mov	r19,r4
   102f4:	3023883a 	mov	r17,r6
   102f8:	10002026 	beq	r2,zero,1037c <__sfvwrite_small_dev+0xb4>
   102fc:	2940008f 	ldh	r5,2(r5)
   10300:	28000f16 	blt	r5,zero,10340 <__sfvwrite_small_dev+0x78>
   10304:	01c01b0e 	bge	zero,r7,10374 <__sfvwrite_small_dev+0xac>
   10308:	3821883a 	mov	r16,r7
   1030c:	05010004 	movi	r20,1024
   10310:	00000206 	br	1031c <__sfvwrite_small_dev+0x54>
   10314:	0400170e 	bge	zero,r16,10374 <__sfvwrite_small_dev+0xac>
   10318:	9140008f 	ldh	r5,2(r18)
   1031c:	880d883a 	mov	r6,r17
   10320:	9809883a 	mov	r4,r19
   10324:	800f883a 	mov	r7,r16
   10328:	a400010e 	bge	r20,r16,10330 <__sfvwrite_small_dev+0x68>
   1032c:	01c10004 	movi	r7,1024
   10330:	00103840 	call	10384 <_write_r>
   10334:	88a3883a 	add	r17,r17,r2
   10338:	80a1c83a 	sub	r16,r16,r2
   1033c:	00bff516 	blt	zero,r2,10314 <__sfvwrite_small_dev+0x4c>
   10340:	9080000b 	ldhu	r2,0(r18)
   10344:	00ffffc4 	movi	r3,-1
   10348:	10801014 	ori	r2,r2,64
   1034c:	9080000d 	sth	r2,0(r18)
   10350:	1805883a 	mov	r2,r3
   10354:	dfc00517 	ldw	ra,20(sp)
   10358:	dd000417 	ldw	r20,16(sp)
   1035c:	dcc00317 	ldw	r19,12(sp)
   10360:	dc800217 	ldw	r18,8(sp)
   10364:	dc400117 	ldw	r17,4(sp)
   10368:	dc000017 	ldw	r16,0(sp)
   1036c:	dec00604 	addi	sp,sp,24
   10370:	f800283a 	ret
   10374:	0007883a 	mov	r3,zero
   10378:	003ff506 	br	10350 <__sfvwrite_small_dev+0x88>
   1037c:	00ffffc4 	movi	r3,-1
   10380:	003ff306 	br	10350 <__sfvwrite_small_dev+0x88>

00010384 <_write_r>:
   10384:	defffd04 	addi	sp,sp,-12
   10388:	dc000015 	stw	r16,0(sp)
   1038c:	04000074 	movhi	r16,1
   10390:	84092204 	addi	r16,r16,9352
   10394:	dc400115 	stw	r17,4(sp)
   10398:	80000015 	stw	zero,0(r16)
   1039c:	2023883a 	mov	r17,r4
   103a0:	2809883a 	mov	r4,r5
   103a4:	300b883a 	mov	r5,r6
   103a8:	380d883a 	mov	r6,r7
   103ac:	dfc00215 	stw	ra,8(sp)
   103b0:	00105540 	call	10554 <write>
   103b4:	1007883a 	mov	r3,r2
   103b8:	00bfffc4 	movi	r2,-1
   103bc:	18800626 	beq	r3,r2,103d8 <_write_r+0x54>
   103c0:	1805883a 	mov	r2,r3
   103c4:	dfc00217 	ldw	ra,8(sp)
   103c8:	dc400117 	ldw	r17,4(sp)
   103cc:	dc000017 	ldw	r16,0(sp)
   103d0:	dec00304 	addi	sp,sp,12
   103d4:	f800283a 	ret
   103d8:	80800017 	ldw	r2,0(r16)
   103dc:	103ff826 	beq	r2,zero,103c0 <_write_r+0x3c>
   103e0:	88800015 	stw	r2,0(r17)
   103e4:	1805883a 	mov	r2,r3
   103e8:	dfc00217 	ldw	ra,8(sp)
   103ec:	dc400117 	ldw	r17,4(sp)
   103f0:	dc000017 	ldw	r16,0(sp)
   103f4:	dec00304 	addi	sp,sp,12
   103f8:	f800283a 	ret

000103fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103fc:	defffe04 	addi	sp,sp,-8
   10400:	dfc00115 	stw	ra,4(sp)
   10404:	df000015 	stw	fp,0(sp)
   10408:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1040c:	01000074 	movhi	r4,1
   10410:	21086a04 	addi	r4,r4,8616
   10414:	01400074 	movhi	r5,1
   10418:	2947b204 	addi	r5,r5,7880
   1041c:	01800074 	movhi	r6,1
   10420:	31886a04 	addi	r6,r6,8616
   10424:	001047c0 	call	1047c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10428:	01000074 	movhi	r4,1
   1042c:	21000804 	addi	r4,r4,32
   10430:	01400074 	movhi	r5,1
   10434:	29400804 	addi	r5,r5,32
   10438:	01800074 	movhi	r6,1
   1043c:	31806d04 	addi	r6,r6,436
   10440:	001047c0 	call	1047c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10444:	01000074 	movhi	r4,1
   10448:	21079f04 	addi	r4,r4,7804
   1044c:	01400074 	movhi	r5,1
   10450:	29479f04 	addi	r5,r5,7804
   10454:	01800074 	movhi	r6,1
   10458:	3187b204 	addi	r6,r6,7880
   1045c:	001047c0 	call	1047c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10460:	0010c3c0 	call	10c3c <alt_dcache_flush_all>
  alt_icache_flush_all();
   10464:	0010e600 	call	10e60 <alt_icache_flush_all>
}
   10468:	e037883a 	mov	sp,fp
   1046c:	dfc00117 	ldw	ra,4(sp)
   10470:	df000017 	ldw	fp,0(sp)
   10474:	dec00204 	addi	sp,sp,8
   10478:	f800283a 	ret

0001047c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1047c:	defffc04 	addi	sp,sp,-16
   10480:	df000315 	stw	fp,12(sp)
   10484:	df000304 	addi	fp,sp,12
   10488:	e13ffd15 	stw	r4,-12(fp)
   1048c:	e17ffe15 	stw	r5,-8(fp)
   10490:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10494:	e0fffe17 	ldw	r3,-8(fp)
   10498:	e0bffd17 	ldw	r2,-12(fp)
   1049c:	18800e26 	beq	r3,r2,104d8 <alt_load_section+0x5c>
  {
    while( to != end )
   104a0:	00000a06 	br	104cc <alt_load_section+0x50>
    {
      *to++ = *from++;
   104a4:	e0bffd17 	ldw	r2,-12(fp)
   104a8:	10c00017 	ldw	r3,0(r2)
   104ac:	e0bffe17 	ldw	r2,-8(fp)
   104b0:	10c00015 	stw	r3,0(r2)
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	10800104 	addi	r2,r2,4
   104bc:	e0bffe15 	stw	r2,-8(fp)
   104c0:	e0bffd17 	ldw	r2,-12(fp)
   104c4:	10800104 	addi	r2,r2,4
   104c8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   104cc:	e0fffe17 	ldw	r3,-8(fp)
   104d0:	e0bfff17 	ldw	r2,-4(fp)
   104d4:	18bff31e 	bne	r3,r2,104a4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   104d8:	e037883a 	mov	sp,fp
   104dc:	df000017 	ldw	fp,0(sp)
   104e0:	dec00104 	addi	sp,sp,4
   104e4:	f800283a 	ret

000104e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104e8:	defffd04 	addi	sp,sp,-12
   104ec:	dfc00215 	stw	ra,8(sp)
   104f0:	df000115 	stw	fp,4(sp)
   104f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104f8:	0009883a 	mov	r4,zero
   104fc:	00106d40 	call	106d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10500:	00107080 	call	10708 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10504:	01000074 	movhi	r4,1
   10508:	2107a504 	addi	r4,r4,7828
   1050c:	01400074 	movhi	r5,1
   10510:	2947a504 	addi	r5,r5,7828
   10514:	01800074 	movhi	r6,1
   10518:	3187a504 	addi	r6,r6,7828
   1051c:	00112200 	call	11220 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10520:	0010d980 	call	10d98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10524:	01000074 	movhi	r4,1
   10528:	21037f04 	addi	r4,r4,3580
   1052c:	0011a7c0 	call	11a7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10530:	d120c417 	ldw	r4,-31984(gp)
   10534:	d160c517 	ldw	r5,-31980(gp)
   10538:	d1a0c617 	ldw	r6,-31976(gp)
   1053c:	00101d00 	call	101d0 <main>
   10540:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10544:	01000044 	movi	r4,1
   10548:	0010ae00 	call	10ae0 <close>
  exit (result);
   1054c:	e13fff17 	ldw	r4,-4(fp)
   10550:	0011a900 	call	11a90 <exit>

00010554 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10554:	defff704 	addi	sp,sp,-36
   10558:	dfc00815 	stw	ra,32(sp)
   1055c:	df000715 	stw	fp,28(sp)
   10560:	df000704 	addi	fp,sp,28
   10564:	e13ffb15 	stw	r4,-20(fp)
   10568:	e17ffc15 	stw	r5,-16(fp)
   1056c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10570:	e0bffb17 	ldw	r2,-20(fp)
   10574:	1004803a 	cmplt	r2,r2,zero
   10578:	1000081e 	bne	r2,zero,1059c <write+0x48>
   1057c:	e0bffb17 	ldw	r2,-20(fp)
   10580:	10800324 	muli	r2,r2,12
   10584:	1007883a 	mov	r3,r2
   10588:	00800074 	movhi	r2,1
   1058c:	1087ff04 	addi	r2,r2,8188
   10590:	1887883a 	add	r3,r3,r2
   10594:	e0ffff15 	stw	r3,-4(fp)
   10598:	00000106 	br	105a0 <write+0x4c>
   1059c:	e03fff15 	stw	zero,-4(fp)
   105a0:	e0bfff17 	ldw	r2,-4(fp)
   105a4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   105a8:	e0bffa17 	ldw	r2,-24(fp)
   105ac:	1005003a 	cmpeq	r2,r2,zero
   105b0:	1000241e 	bne	r2,zero,10644 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   105b4:	e0bffa17 	ldw	r2,-24(fp)
   105b8:	10800217 	ldw	r2,8(r2)
   105bc:	108000cc 	andi	r2,r2,3
   105c0:	1005003a 	cmpeq	r2,r2,zero
   105c4:	10001a1e 	bne	r2,zero,10630 <write+0xdc>
   105c8:	e0bffa17 	ldw	r2,-24(fp)
   105cc:	10800017 	ldw	r2,0(r2)
   105d0:	10800617 	ldw	r2,24(r2)
   105d4:	1005003a 	cmpeq	r2,r2,zero
   105d8:	1000151e 	bne	r2,zero,10630 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   105dc:	e0bffa17 	ldw	r2,-24(fp)
   105e0:	10800017 	ldw	r2,0(r2)
   105e4:	10800617 	ldw	r2,24(r2)
   105e8:	e17ffc17 	ldw	r5,-16(fp)
   105ec:	e1bffd17 	ldw	r6,-12(fp)
   105f0:	e13ffa17 	ldw	r4,-24(fp)
   105f4:	103ee83a 	callr	r2
   105f8:	e0bff915 	stw	r2,-28(fp)
   105fc:	e0bff917 	ldw	r2,-28(fp)
   10600:	1004403a 	cmpge	r2,r2,zero
   10604:	1000071e 	bne	r2,zero,10624 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   10608:	00106740 	call	10674 <alt_get_errno>
   1060c:	e0fff917 	ldw	r3,-28(fp)
   10610:	00c7c83a 	sub	r3,zero,r3
   10614:	10c00015 	stw	r3,0(r2)
        return -1;
   10618:	00bfffc4 	movi	r2,-1
   1061c:	e0bffe15 	stw	r2,-8(fp)
   10620:	00000e06 	br	1065c <write+0x108>
      }
      return rval;
   10624:	e0bff917 	ldw	r2,-28(fp)
   10628:	e0bffe15 	stw	r2,-8(fp)
   1062c:	00000b06 	br	1065c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10630:	00106740 	call	10674 <alt_get_errno>
   10634:	1007883a 	mov	r3,r2
   10638:	00800344 	movi	r2,13
   1063c:	18800015 	stw	r2,0(r3)
   10640:	00000406 	br	10654 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10644:	00106740 	call	10674 <alt_get_errno>
   10648:	1007883a 	mov	r3,r2
   1064c:	00801444 	movi	r2,81
   10650:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10654:	00bfffc4 	movi	r2,-1
   10658:	e0bffe15 	stw	r2,-8(fp)
   1065c:	e0bffe17 	ldw	r2,-8(fp)
}
   10660:	e037883a 	mov	sp,fp
   10664:	dfc00117 	ldw	ra,4(sp)
   10668:	df000017 	ldw	fp,0(sp)
   1066c:	dec00204 	addi	sp,sp,8
   10670:	f800283a 	ret

00010674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10674:	defffd04 	addi	sp,sp,-12
   10678:	dfc00215 	stw	ra,8(sp)
   1067c:	df000115 	stw	fp,4(sp)
   10680:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10684:	00800074 	movhi	r2,1
   10688:	10886604 	addi	r2,r2,8600
   1068c:	10800017 	ldw	r2,0(r2)
   10690:	1005003a 	cmpeq	r2,r2,zero
   10694:	1000061e 	bne	r2,zero,106b0 <alt_get_errno+0x3c>
   10698:	00800074 	movhi	r2,1
   1069c:	10886604 	addi	r2,r2,8600
   106a0:	10800017 	ldw	r2,0(r2)
   106a4:	103ee83a 	callr	r2
   106a8:	e0bfff15 	stw	r2,-4(fp)
   106ac:	00000306 	br	106bc <alt_get_errno+0x48>
   106b0:	00800074 	movhi	r2,1
   106b4:	10892204 	addi	r2,r2,9352
   106b8:	e0bfff15 	stw	r2,-4(fp)
   106bc:	e0bfff17 	ldw	r2,-4(fp)
}
   106c0:	e037883a 	mov	sp,fp
   106c4:	dfc00117 	ldw	ra,4(sp)
   106c8:	df000017 	ldw	fp,0(sp)
   106cc:	dec00204 	addi	sp,sp,8
   106d0:	f800283a 	ret

000106d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   106d4:	defffd04 	addi	sp,sp,-12
   106d8:	dfc00215 	stw	ra,8(sp)
   106dc:	df000115 	stw	fp,4(sp)
   106e0:	df000104 	addi	fp,sp,4
   106e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   106e8:	00117600 	call	11760 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   106ec:	00800044 	movi	r2,1
   106f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   106f4:	e037883a 	mov	sp,fp
   106f8:	dfc00117 	ldw	ra,4(sp)
   106fc:	df000017 	ldw	fp,0(sp)
   10700:	dec00204 	addi	sp,sp,8
   10704:	f800283a 	ret

00010708 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10708:	defffe04 	addi	sp,sp,-8
   1070c:	dfc00115 	stw	ra,4(sp)
   10710:	df000015 	stw	fp,0(sp)
   10714:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10718:	010000b4 	movhi	r4,2
   1071c:	21040804 	addi	r4,r4,4128
   10720:	000b883a 	mov	r5,zero
   10724:	000d883a 	mov	r6,zero
   10728:	01c0fa04 	movi	r7,1000
   1072c:	0010a500 	call	10a50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10730:	01000074 	movhi	r4,1
   10734:	2107ea04 	addi	r4,r4,8104
   10738:	00107500 	call	10750 <alt_dev_reg>
}
   1073c:	e037883a 	mov	sp,fp
   10740:	dfc00117 	ldw	ra,4(sp)
   10744:	df000017 	ldw	fp,0(sp)
   10748:	dec00204 	addi	sp,sp,8
   1074c:	f800283a 	ret

00010750 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10750:	defffd04 	addi	sp,sp,-12
   10754:	dfc00215 	stw	ra,8(sp)
   10758:	df000115 	stw	fp,4(sp)
   1075c:	df000104 	addi	fp,sp,4
   10760:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10764:	e13fff17 	ldw	r4,-4(fp)
   10768:	01400074 	movhi	r5,1
   1076c:	29486304 	addi	r5,r5,8588
   10770:	0010c840 	call	10c84 <alt_dev_llist_insert>
}
   10774:	e037883a 	mov	sp,fp
   10778:	dfc00117 	ldw	ra,4(sp)
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00204 	addi	sp,sp,8
   10784:	f800283a 	ret

00010788 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10788:	defffa04 	addi	sp,sp,-24
   1078c:	dfc00515 	stw	ra,20(sp)
   10790:	df000415 	stw	fp,16(sp)
   10794:	df000404 	addi	fp,sp,16
   10798:	e13ffd15 	stw	r4,-12(fp)
   1079c:	e17ffe15 	stw	r5,-8(fp)
   107a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   107a4:	e0bffd17 	ldw	r2,-12(fp)
   107a8:	10800017 	ldw	r2,0(r2)
   107ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   107b0:	e0bffc17 	ldw	r2,-16(fp)
   107b4:	11000a04 	addi	r4,r2,40
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	11c00217 	ldw	r7,8(r2)
   107c0:	e17ffe17 	ldw	r5,-8(fp)
   107c4:	e1bfff17 	ldw	r6,-4(fp)
   107c8:	00108380 	call	10838 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   107cc:	e037883a 	mov	sp,fp
   107d0:	dfc00117 	ldw	ra,4(sp)
   107d4:	df000017 	ldw	fp,0(sp)
   107d8:	dec00204 	addi	sp,sp,8
   107dc:	f800283a 	ret

000107e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   107e0:	defffa04 	addi	sp,sp,-24
   107e4:	dfc00515 	stw	ra,20(sp)
   107e8:	df000415 	stw	fp,16(sp)
   107ec:	df000404 	addi	fp,sp,16
   107f0:	e13ffd15 	stw	r4,-12(fp)
   107f4:	e17ffe15 	stw	r5,-8(fp)
   107f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10800017 	ldw	r2,0(r2)
   10804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10808:	e0bffc17 	ldw	r2,-16(fp)
   1080c:	11000a04 	addi	r4,r2,40
   10810:	e0bffd17 	ldw	r2,-12(fp)
   10814:	11c00217 	ldw	r7,8(r2)
   10818:	e17ffe17 	ldw	r5,-8(fp)
   1081c:	e1bfff17 	ldw	r6,-4(fp)
   10820:	001093c0 	call	1093c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10824:	e037883a 	mov	sp,fp
   10828:	dfc00117 	ldw	ra,4(sp)
   1082c:	df000017 	ldw	fp,0(sp)
   10830:	dec00204 	addi	sp,sp,8
   10834:	f800283a 	ret

00010838 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   10838:	defff604 	addi	sp,sp,-40
   1083c:	df000915 	stw	fp,36(sp)
   10840:	df000904 	addi	fp,sp,36
   10844:	e13ffb15 	stw	r4,-20(fp)
   10848:	e17ffc15 	stw	r5,-16(fp)
   1084c:	e1bffd15 	stw	r6,-12(fp)
   10850:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   10854:	e0bffb17 	ldw	r2,-20(fp)
   10858:	10800017 	ldw	r2,0(r2)
   1085c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   10868:	e0bffd17 	ldw	r2,-12(fp)
   1086c:	1007883a 	mov	r3,r2
   10870:	e0bffc17 	ldw	r2,-16(fp)
   10874:	10c5883a 	add	r2,r2,r3
   10878:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   1087c:	00001606 	br	108d8 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10880:	e0bffa17 	ldw	r2,-24(fp)
   10884:	10800037 	ldwio	r2,0(r2)
   10888:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   1088c:	e0bff717 	ldw	r2,-36(fp)
   10890:	10a0000c 	andi	r2,r2,32768
   10894:	1005003a 	cmpeq	r2,r2,zero
   10898:	1000081e 	bne	r2,zero,108bc <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1089c:	e0bff717 	ldw	r2,-36(fp)
   108a0:	1007883a 	mov	r3,r2
   108a4:	e0bff917 	ldw	r2,-28(fp)
   108a8:	10c00005 	stb	r3,0(r2)
   108ac:	e0bff917 	ldw	r2,-28(fp)
   108b0:	10800044 	addi	r2,r2,1
   108b4:	e0bff915 	stw	r2,-28(fp)
   108b8:	00000706 	br	108d8 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   108bc:	e0fff917 	ldw	r3,-28(fp)
   108c0:	e0bffc17 	ldw	r2,-16(fp)
   108c4:	1880071e 	bne	r3,r2,108e4 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   108c8:	e0bffe17 	ldw	r2,-8(fp)
   108cc:	1090000c 	andi	r2,r2,16384
   108d0:	1004c03a 	cmpne	r2,r2,zero
   108d4:	1000031e 	bne	r2,zero,108e4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   108d8:	e0fff917 	ldw	r3,-28(fp)
   108dc:	e0bff817 	ldw	r2,-32(fp)
   108e0:	18bfe736 	bltu	r3,r2,10880 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   108e4:	e0fff917 	ldw	r3,-28(fp)
   108e8:	e0bffc17 	ldw	r2,-16(fp)
   108ec:	18800526 	beq	r3,r2,10904 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   108f0:	e0fff917 	ldw	r3,-28(fp)
   108f4:	e0bffc17 	ldw	r2,-16(fp)
   108f8:	1887c83a 	sub	r3,r3,r2
   108fc:	e0ffff15 	stw	r3,-4(fp)
   10900:	00000906 	br	10928 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   10904:	e0bffe17 	ldw	r2,-8(fp)
   10908:	1090000c 	andi	r2,r2,16384
   1090c:	1005003a 	cmpeq	r2,r2,zero
   10910:	1000031e 	bne	r2,zero,10920 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   10914:	00bffd44 	movi	r2,-11
   10918:	e0bfff15 	stw	r2,-4(fp)
   1091c:	00000206 	br	10928 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   10920:	00bffec4 	movi	r2,-5
   10924:	e0bfff15 	stw	r2,-4(fp)
   10928:	e0bfff17 	ldw	r2,-4(fp)
}
   1092c:	e037883a 	mov	sp,fp
   10930:	df000017 	ldw	fp,0(sp)
   10934:	dec00104 	addi	sp,sp,4
   10938:	f800283a 	ret

0001093c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1093c:	defff904 	addi	sp,sp,-28
   10940:	df000615 	stw	fp,24(sp)
   10944:	df000604 	addi	fp,sp,24
   10948:	e13ffc15 	stw	r4,-16(fp)
   1094c:	e17ffd15 	stw	r5,-12(fp)
   10950:	e1bffe15 	stw	r6,-8(fp)
   10954:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10958:	e0bffc17 	ldw	r2,-16(fp)
   1095c:	10800017 	ldw	r2,0(r2)
   10960:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   10964:	e0bffe17 	ldw	r2,-8(fp)
   10968:	1007883a 	mov	r3,r2
   1096c:	e0bffd17 	ldw	r2,-12(fp)
   10970:	10c5883a 	add	r2,r2,r3
   10974:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   10978:	00001106 	br	109c0 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1097c:	e0bffb17 	ldw	r2,-20(fp)
   10980:	10800104 	addi	r2,r2,4
   10984:	10800037 	ldwio	r2,0(r2)
   10988:	10bfffec 	andhi	r2,r2,65535
   1098c:	1005003a 	cmpeq	r2,r2,zero
   10990:	10000b1e 	bne	r2,zero,109c0 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10994:	e13ffb17 	ldw	r4,-20(fp)
   10998:	e0bffd17 	ldw	r2,-12(fp)
   1099c:	10800003 	ldbu	r2,0(r2)
   109a0:	10c03fcc 	andi	r3,r2,255
   109a4:	18c0201c 	xori	r3,r3,128
   109a8:	18ffe004 	addi	r3,r3,-128
   109ac:	e0bffd17 	ldw	r2,-12(fp)
   109b0:	10800044 	addi	r2,r2,1
   109b4:	e0bffd15 	stw	r2,-12(fp)
   109b8:	2005883a 	mov	r2,r4
   109bc:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   109c0:	e0fffd17 	ldw	r3,-12(fp)
   109c4:	e0bffa17 	ldw	r2,-24(fp)
   109c8:	18bfec36 	bltu	r3,r2,1097c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   109cc:	e0bffe17 	ldw	r2,-8(fp)
}
   109d0:	e037883a 	mov	sp,fp
   109d4:	df000017 	ldw	fp,0(sp)
   109d8:	dec00104 	addi	sp,sp,4
   109dc:	f800283a 	ret

000109e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   109e0:	defffa04 	addi	sp,sp,-24
   109e4:	dfc00515 	stw	ra,20(sp)
   109e8:	df000415 	stw	fp,16(sp)
   109ec:	df000404 	addi	fp,sp,16
   109f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   109f4:	e0bfff17 	ldw	r2,-4(fp)
   109f8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   109fc:	e0bfff17 	ldw	r2,-4(fp)
   10a00:	10800104 	addi	r2,r2,4
   10a04:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a08:	0005303a 	rdctl	r2,status
   10a0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a10:	e0fffd17 	ldw	r3,-12(fp)
   10a14:	00bfff84 	movi	r2,-2
   10a18:	1884703a 	and	r2,r3,r2
   10a1c:	1001703a 	wrctl	status,r2
  
  return context;
   10a20:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10a24:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   10a28:	00116540 	call	11654 <alt_tick>
   10a2c:	e0bffe17 	ldw	r2,-8(fp)
   10a30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a34:	e0bffc17 	ldw	r2,-16(fp)
   10a38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10a3c:	e037883a 	mov	sp,fp
   10a40:	dfc00117 	ldw	ra,4(sp)
   10a44:	df000017 	ldw	fp,0(sp)
   10a48:	dec00204 	addi	sp,sp,8
   10a4c:	f800283a 	ret

00010a50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10a50:	defff804 	addi	sp,sp,-32
   10a54:	dfc00715 	stw	ra,28(sp)
   10a58:	df000615 	stw	fp,24(sp)
   10a5c:	df000604 	addi	fp,sp,24
   10a60:	e13ffc15 	stw	r4,-16(fp)
   10a64:	e17ffd15 	stw	r5,-12(fp)
   10a68:	e1bffe15 	stw	r6,-8(fp)
   10a6c:	e1ffff15 	stw	r7,-4(fp)
   10a70:	e0bfff17 	ldw	r2,-4(fp)
   10a74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10a78:	00800074 	movhi	r2,1
   10a7c:	10892704 	addi	r2,r2,9372
   10a80:	10800017 	ldw	r2,0(r2)
   10a84:	1004c03a 	cmpne	r2,r2,zero
   10a88:	1000041e 	bne	r2,zero,10a9c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   10a8c:	00c00074 	movhi	r3,1
   10a90:	18c92704 	addi	r3,r3,9372
   10a94:	e0bffb17 	ldw	r2,-20(fp)
   10a98:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10a9c:	e0bffc17 	ldw	r2,-16(fp)
   10aa0:	10800104 	addi	r2,r2,4
   10aa4:	1007883a 	mov	r3,r2
   10aa8:	008001c4 	movi	r2,7
   10aac:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10ab0:	d8000015 	stw	zero,0(sp)
   10ab4:	e13ffd17 	ldw	r4,-12(fp)
   10ab8:	e17ffe17 	ldw	r5,-8(fp)
   10abc:	01800074 	movhi	r6,1
   10ac0:	31827804 	addi	r6,r6,2528
   10ac4:	e1fffc17 	ldw	r7,-16(fp)
   10ac8:	0010e900 	call	10e90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10acc:	e037883a 	mov	sp,fp
   10ad0:	dfc00117 	ldw	ra,4(sp)
   10ad4:	df000017 	ldw	fp,0(sp)
   10ad8:	dec00204 	addi	sp,sp,8
   10adc:	f800283a 	ret

00010ae0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10ae0:	defff804 	addi	sp,sp,-32
   10ae4:	dfc00715 	stw	ra,28(sp)
   10ae8:	df000615 	stw	fp,24(sp)
   10aec:	df000604 	addi	fp,sp,24
   10af0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10af4:	e0bffc17 	ldw	r2,-16(fp)
   10af8:	1004803a 	cmplt	r2,r2,zero
   10afc:	1000081e 	bne	r2,zero,10b20 <close+0x40>
   10b00:	e0bffc17 	ldw	r2,-16(fp)
   10b04:	10800324 	muli	r2,r2,12
   10b08:	1007883a 	mov	r3,r2
   10b0c:	00800074 	movhi	r2,1
   10b10:	1087ff04 	addi	r2,r2,8188
   10b14:	1887883a 	add	r3,r3,r2
   10b18:	e0ffff15 	stw	r3,-4(fp)
   10b1c:	00000106 	br	10b24 <close+0x44>
   10b20:	e03fff15 	stw	zero,-4(fp)
   10b24:	e0bfff17 	ldw	r2,-4(fp)
   10b28:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   10b2c:	e0bffb17 	ldw	r2,-20(fp)
   10b30:	1005003a 	cmpeq	r2,r2,zero
   10b34:	10001d1e 	bne	r2,zero,10bac <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10b38:	e0bffb17 	ldw	r2,-20(fp)
   10b3c:	10800017 	ldw	r2,0(r2)
   10b40:	10800417 	ldw	r2,16(r2)
   10b44:	1005003a 	cmpeq	r2,r2,zero
   10b48:	1000071e 	bne	r2,zero,10b68 <close+0x88>
   10b4c:	e0bffb17 	ldw	r2,-20(fp)
   10b50:	10800017 	ldw	r2,0(r2)
   10b54:	10800417 	ldw	r2,16(r2)
   10b58:	e13ffb17 	ldw	r4,-20(fp)
   10b5c:	103ee83a 	callr	r2
   10b60:	e0bffe15 	stw	r2,-8(fp)
   10b64:	00000106 	br	10b6c <close+0x8c>
   10b68:	e03ffe15 	stw	zero,-8(fp)
   10b6c:	e0bffe17 	ldw	r2,-8(fp)
   10b70:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10b74:	e13ffc17 	ldw	r4,-16(fp)
   10b78:	001155c0 	call	1155c <alt_release_fd>
    if (rval < 0)
   10b7c:	e0bffa17 	ldw	r2,-24(fp)
   10b80:	1004403a 	cmpge	r2,r2,zero
   10b84:	1000071e 	bne	r2,zero,10ba4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   10b88:	0010bdc0 	call	10bdc <alt_get_errno>
   10b8c:	e0fffa17 	ldw	r3,-24(fp)
   10b90:	00c7c83a 	sub	r3,zero,r3
   10b94:	10c00015 	stw	r3,0(r2)
      return -1;
   10b98:	00bfffc4 	movi	r2,-1
   10b9c:	e0bffd15 	stw	r2,-12(fp)
   10ba0:	00000806 	br	10bc4 <close+0xe4>
    }
    return 0;
   10ba4:	e03ffd15 	stw	zero,-12(fp)
   10ba8:	00000606 	br	10bc4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10bac:	0010bdc0 	call	10bdc <alt_get_errno>
   10bb0:	1007883a 	mov	r3,r2
   10bb4:	00801444 	movi	r2,81
   10bb8:	18800015 	stw	r2,0(r3)
    return -1;
   10bbc:	00bfffc4 	movi	r2,-1
   10bc0:	e0bffd15 	stw	r2,-12(fp)
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   10bc8:	e037883a 	mov	sp,fp
   10bcc:	dfc00117 	ldw	ra,4(sp)
   10bd0:	df000017 	ldw	fp,0(sp)
   10bd4:	dec00204 	addi	sp,sp,8
   10bd8:	f800283a 	ret

00010bdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10bdc:	defffd04 	addi	sp,sp,-12
   10be0:	dfc00215 	stw	ra,8(sp)
   10be4:	df000115 	stw	fp,4(sp)
   10be8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10bec:	00800074 	movhi	r2,1
   10bf0:	10886604 	addi	r2,r2,8600
   10bf4:	10800017 	ldw	r2,0(r2)
   10bf8:	1005003a 	cmpeq	r2,r2,zero
   10bfc:	1000061e 	bne	r2,zero,10c18 <alt_get_errno+0x3c>
   10c00:	00800074 	movhi	r2,1
   10c04:	10886604 	addi	r2,r2,8600
   10c08:	10800017 	ldw	r2,0(r2)
   10c0c:	103ee83a 	callr	r2
   10c10:	e0bfff15 	stw	r2,-4(fp)
   10c14:	00000306 	br	10c24 <alt_get_errno+0x48>
   10c18:	00800074 	movhi	r2,1
   10c1c:	10892204 	addi	r2,r2,9352
   10c20:	e0bfff15 	stw	r2,-4(fp)
   10c24:	e0bfff17 	ldw	r2,-4(fp)
}
   10c28:	e037883a 	mov	sp,fp
   10c2c:	dfc00117 	ldw	ra,4(sp)
   10c30:	df000017 	ldw	fp,0(sp)
   10c34:	dec00204 	addi	sp,sp,8
   10c38:	f800283a 	ret

00010c3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10c3c:	deffff04 	addi	sp,sp,-4
   10c40:	df000015 	stw	fp,0(sp)
   10c44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10c48:	e037883a 	mov	sp,fp
   10c4c:	df000017 	ldw	fp,0(sp)
   10c50:	dec00104 	addi	sp,sp,4
   10c54:	f800283a 	ret

00010c58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10c58:	defffc04 	addi	sp,sp,-16
   10c5c:	df000315 	stw	fp,12(sp)
   10c60:	df000304 	addi	fp,sp,12
   10c64:	e13ffd15 	stw	r4,-12(fp)
   10c68:	e17ffe15 	stw	r5,-8(fp)
   10c6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10c70:	e0bfff17 	ldw	r2,-4(fp)
}
   10c74:	e037883a 	mov	sp,fp
   10c78:	df000017 	ldw	fp,0(sp)
   10c7c:	dec00104 	addi	sp,sp,4
   10c80:	f800283a 	ret

00010c84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10c84:	defff904 	addi	sp,sp,-28
   10c88:	dfc00615 	stw	ra,24(sp)
   10c8c:	df000515 	stw	fp,20(sp)
   10c90:	df000504 	addi	fp,sp,20
   10c94:	e13ffd15 	stw	r4,-12(fp)
   10c98:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10c9c:	e0bffd17 	ldw	r2,-12(fp)
   10ca0:	1005003a 	cmpeq	r2,r2,zero
   10ca4:	1000041e 	bne	r2,zero,10cb8 <alt_dev_llist_insert+0x34>
   10ca8:	e0bffd17 	ldw	r2,-12(fp)
   10cac:	10800217 	ldw	r2,8(r2)
   10cb0:	1004c03a 	cmpne	r2,r2,zero
   10cb4:	1000071e 	bne	r2,zero,10cd4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   10cb8:	0010d380 	call	10d38 <alt_get_errno>
   10cbc:	1007883a 	mov	r3,r2
   10cc0:	00800584 	movi	r2,22
   10cc4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10cc8:	00bffa84 	movi	r2,-22
   10ccc:	e0bfff15 	stw	r2,-4(fp)
   10cd0:	00001306 	br	10d20 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10cd4:	e0fffd17 	ldw	r3,-12(fp)
   10cd8:	e0bffe17 	ldw	r2,-8(fp)
   10cdc:	e0bffb15 	stw	r2,-20(fp)
   10ce0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10ce4:	e0fffc17 	ldw	r3,-16(fp)
   10ce8:	e0bffb17 	ldw	r2,-20(fp)
   10cec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10cf0:	e0bffb17 	ldw	r2,-20(fp)
   10cf4:	10c00017 	ldw	r3,0(r2)
   10cf8:	e0bffc17 	ldw	r2,-16(fp)
   10cfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10d00:	e0bffb17 	ldw	r2,-20(fp)
   10d04:	10c00017 	ldw	r3,0(r2)
   10d08:	e0bffc17 	ldw	r2,-16(fp)
   10d0c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10d10:	e0fffb17 	ldw	r3,-20(fp)
   10d14:	e0bffc17 	ldw	r2,-16(fp)
   10d18:	18800015 	stw	r2,0(r3)

  return 0;  
   10d1c:	e03fff15 	stw	zero,-4(fp)
   10d20:	e0bfff17 	ldw	r2,-4(fp)
}
   10d24:	e037883a 	mov	sp,fp
   10d28:	dfc00117 	ldw	ra,4(sp)
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00204 	addi	sp,sp,8
   10d34:	f800283a 	ret

00010d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d38:	defffd04 	addi	sp,sp,-12
   10d3c:	dfc00215 	stw	ra,8(sp)
   10d40:	df000115 	stw	fp,4(sp)
   10d44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10d48:	00800074 	movhi	r2,1
   10d4c:	10886604 	addi	r2,r2,8600
   10d50:	10800017 	ldw	r2,0(r2)
   10d54:	1005003a 	cmpeq	r2,r2,zero
   10d58:	1000061e 	bne	r2,zero,10d74 <alt_get_errno+0x3c>
   10d5c:	00800074 	movhi	r2,1
   10d60:	10886604 	addi	r2,r2,8600
   10d64:	10800017 	ldw	r2,0(r2)
   10d68:	103ee83a 	callr	r2
   10d6c:	e0bfff15 	stw	r2,-4(fp)
   10d70:	00000306 	br	10d80 <alt_get_errno+0x48>
   10d74:	00800074 	movhi	r2,1
   10d78:	10892204 	addi	r2,r2,9352
   10d7c:	e0bfff15 	stw	r2,-4(fp)
   10d80:	e0bfff17 	ldw	r2,-4(fp)
}
   10d84:	e037883a 	mov	sp,fp
   10d88:	dfc00117 	ldw	ra,4(sp)
   10d8c:	df000017 	ldw	fp,0(sp)
   10d90:	dec00204 	addi	sp,sp,8
   10d94:	f800283a 	ret

00010d98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10d98:	defffd04 	addi	sp,sp,-12
   10d9c:	dfc00215 	stw	ra,8(sp)
   10da0:	df000115 	stw	fp,4(sp)
   10da4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10da8:	00bfff04 	movi	r2,-4
   10dac:	00c00074 	movhi	r3,1
   10db0:	18c79f04 	addi	r3,r3,7804
   10db4:	1885883a 	add	r2,r3,r2
   10db8:	e0bfff15 	stw	r2,-4(fp)
   10dbc:	00000606 	br	10dd8 <_do_ctors+0x40>
        (*ctor) (); 
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	10800017 	ldw	r2,0(r2)
   10dc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10dcc:	e0bfff17 	ldw	r2,-4(fp)
   10dd0:	10bfff04 	addi	r2,r2,-4
   10dd4:	e0bfff15 	stw	r2,-4(fp)
   10dd8:	e0ffff17 	ldw	r3,-4(fp)
   10ddc:	00800074 	movhi	r2,1
   10de0:	10879e04 	addi	r2,r2,7800
   10de4:	18bff62e 	bgeu	r3,r2,10dc0 <_do_ctors+0x28>
        (*ctor) (); 
}
   10de8:	e037883a 	mov	sp,fp
   10dec:	dfc00117 	ldw	ra,4(sp)
   10df0:	df000017 	ldw	fp,0(sp)
   10df4:	dec00204 	addi	sp,sp,8
   10df8:	f800283a 	ret

00010dfc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10dfc:	defffd04 	addi	sp,sp,-12
   10e00:	dfc00215 	stw	ra,8(sp)
   10e04:	df000115 	stw	fp,4(sp)
   10e08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10e0c:	00bfff04 	movi	r2,-4
   10e10:	00c00074 	movhi	r3,1
   10e14:	18c79f04 	addi	r3,r3,7804
   10e18:	1885883a 	add	r2,r3,r2
   10e1c:	e0bfff15 	stw	r2,-4(fp)
   10e20:	00000606 	br	10e3c <_do_dtors+0x40>
        (*dtor) (); 
   10e24:	e0bfff17 	ldw	r2,-4(fp)
   10e28:	10800017 	ldw	r2,0(r2)
   10e2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10e30:	e0bfff17 	ldw	r2,-4(fp)
   10e34:	10bfff04 	addi	r2,r2,-4
   10e38:	e0bfff15 	stw	r2,-4(fp)
   10e3c:	e0ffff17 	ldw	r3,-4(fp)
   10e40:	00800074 	movhi	r2,1
   10e44:	10879f04 	addi	r2,r2,7804
   10e48:	18bff62e 	bgeu	r3,r2,10e24 <_do_dtors+0x28>
        (*dtor) (); 
}
   10e4c:	e037883a 	mov	sp,fp
   10e50:	dfc00117 	ldw	ra,4(sp)
   10e54:	df000017 	ldw	fp,0(sp)
   10e58:	dec00204 	addi	sp,sp,8
   10e5c:	f800283a 	ret

00010e60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10e60:	defffe04 	addi	sp,sp,-8
   10e64:	dfc00115 	stw	ra,4(sp)
   10e68:	df000015 	stw	fp,0(sp)
   10e6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10e70:	0009883a 	mov	r4,zero
   10e74:	01440004 	movi	r5,4096
   10e78:	00119ec0 	call	119ec <alt_icache_flush>
#endif
}
   10e7c:	e037883a 	mov	sp,fp
   10e80:	dfc00117 	ldw	ra,4(sp)
   10e84:	df000017 	ldw	fp,0(sp)
   10e88:	dec00204 	addi	sp,sp,8
   10e8c:	f800283a 	ret

00010e90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10e90:	defff904 	addi	sp,sp,-28
   10e94:	dfc00615 	stw	ra,24(sp)
   10e98:	df000515 	stw	fp,20(sp)
   10e9c:	df000504 	addi	fp,sp,20
   10ea0:	e13ffc15 	stw	r4,-16(fp)
   10ea4:	e17ffd15 	stw	r5,-12(fp)
   10ea8:	e1bffe15 	stw	r6,-8(fp)
   10eac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10eb0:	e0800217 	ldw	r2,8(fp)
   10eb4:	d8800015 	stw	r2,0(sp)
   10eb8:	e13ffc17 	ldw	r4,-16(fp)
   10ebc:	e17ffd17 	ldw	r5,-12(fp)
   10ec0:	e1bffe17 	ldw	r6,-8(fp)
   10ec4:	e1ffff17 	ldw	r7,-4(fp)
   10ec8:	00110640 	call	11064 <alt_iic_isr_register>
}  
   10ecc:	e037883a 	mov	sp,fp
   10ed0:	dfc00117 	ldw	ra,4(sp)
   10ed4:	df000017 	ldw	fp,0(sp)
   10ed8:	dec00204 	addi	sp,sp,8
   10edc:	f800283a 	ret

00010ee0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10ee0:	defff904 	addi	sp,sp,-28
   10ee4:	df000615 	stw	fp,24(sp)
   10ee8:	df000604 	addi	fp,sp,24
   10eec:	e13ffe15 	stw	r4,-8(fp)
   10ef0:	e17fff15 	stw	r5,-4(fp)
   10ef4:	e0bfff17 	ldw	r2,-4(fp)
   10ef8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10efc:	0005303a 	rdctl	r2,status
   10f00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f04:	e0fffb17 	ldw	r3,-20(fp)
   10f08:	00bfff84 	movi	r2,-2
   10f0c:	1884703a 	and	r2,r3,r2
   10f10:	1001703a 	wrctl	status,r2
  
  return context;
   10f14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10f18:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   10f1c:	e0fffc17 	ldw	r3,-16(fp)
   10f20:	00800044 	movi	r2,1
   10f24:	10c4983a 	sll	r2,r2,r3
   10f28:	1007883a 	mov	r3,r2
   10f2c:	00800074 	movhi	r2,1
   10f30:	10892604 	addi	r2,r2,9368
   10f34:	10800017 	ldw	r2,0(r2)
   10f38:	1886b03a 	or	r3,r3,r2
   10f3c:	00800074 	movhi	r2,1
   10f40:	10892604 	addi	r2,r2,9368
   10f44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10f48:	00800074 	movhi	r2,1
   10f4c:	10892604 	addi	r2,r2,9368
   10f50:	10800017 	ldw	r2,0(r2)
   10f54:	100170fa 	wrctl	ienable,r2
   10f58:	e0bffd17 	ldw	r2,-12(fp)
   10f5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f60:	e0bffa17 	ldw	r2,-24(fp)
   10f64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10f68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   10f6c:	e037883a 	mov	sp,fp
   10f70:	df000017 	ldw	fp,0(sp)
   10f74:	dec00104 	addi	sp,sp,4
   10f78:	f800283a 	ret

00010f7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10f7c:	defff904 	addi	sp,sp,-28
   10f80:	df000615 	stw	fp,24(sp)
   10f84:	df000604 	addi	fp,sp,24
   10f88:	e13ffe15 	stw	r4,-8(fp)
   10f8c:	e17fff15 	stw	r5,-4(fp)
   10f90:	e0bfff17 	ldw	r2,-4(fp)
   10f94:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f98:	0005303a 	rdctl	r2,status
   10f9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fa0:	e0fffb17 	ldw	r3,-20(fp)
   10fa4:	00bfff84 	movi	r2,-2
   10fa8:	1884703a 	and	r2,r3,r2
   10fac:	1001703a 	wrctl	status,r2
  
  return context;
   10fb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10fb4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   10fb8:	e0fffc17 	ldw	r3,-16(fp)
   10fbc:	00800044 	movi	r2,1
   10fc0:	10c4983a 	sll	r2,r2,r3
   10fc4:	0084303a 	nor	r2,zero,r2
   10fc8:	1007883a 	mov	r3,r2
   10fcc:	00800074 	movhi	r2,1
   10fd0:	10892604 	addi	r2,r2,9368
   10fd4:	10800017 	ldw	r2,0(r2)
   10fd8:	1886703a 	and	r3,r3,r2
   10fdc:	00800074 	movhi	r2,1
   10fe0:	10892604 	addi	r2,r2,9368
   10fe4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10fe8:	00800074 	movhi	r2,1
   10fec:	10892604 	addi	r2,r2,9368
   10ff0:	10800017 	ldw	r2,0(r2)
   10ff4:	100170fa 	wrctl	ienable,r2
   10ff8:	e0bffd17 	ldw	r2,-12(fp)
   10ffc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11000:	e0bffa17 	ldw	r2,-24(fp)
   11004:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11008:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1100c:	e037883a 	mov	sp,fp
   11010:	df000017 	ldw	fp,0(sp)
   11014:	dec00104 	addi	sp,sp,4
   11018:	f800283a 	ret

0001101c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1101c:	defffc04 	addi	sp,sp,-16
   11020:	df000315 	stw	fp,12(sp)
   11024:	df000304 	addi	fp,sp,12
   11028:	e13ffe15 	stw	r4,-8(fp)
   1102c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11030:	000530fa 	rdctl	r2,ienable
   11034:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11038:	e0ffff17 	ldw	r3,-4(fp)
   1103c:	00800044 	movi	r2,1
   11040:	10c4983a 	sll	r2,r2,r3
   11044:	1007883a 	mov	r3,r2
   11048:	e0bffd17 	ldw	r2,-12(fp)
   1104c:	1884703a 	and	r2,r3,r2
   11050:	1004c03a 	cmpne	r2,r2,zero
}
   11054:	e037883a 	mov	sp,fp
   11058:	df000017 	ldw	fp,0(sp)
   1105c:	dec00104 	addi	sp,sp,4
   11060:	f800283a 	ret

00011064 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11064:	defff404 	addi	sp,sp,-48
   11068:	dfc00b15 	stw	ra,44(sp)
   1106c:	df000a15 	stw	fp,40(sp)
   11070:	df000a04 	addi	fp,sp,40
   11074:	e13ffb15 	stw	r4,-20(fp)
   11078:	e17ffc15 	stw	r5,-16(fp)
   1107c:	e1bffd15 	stw	r6,-12(fp)
   11080:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   11084:	00bffa84 	movi	r2,-22
   11088:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1108c:	e0bffc17 	ldw	r2,-16(fp)
   11090:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11094:	e0bff917 	ldw	r2,-28(fp)
   11098:	10800808 	cmpgei	r2,r2,32
   1109c:	1000291e 	bne	r2,zero,11144 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110a0:	0005303a 	rdctl	r2,status
   110a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   110a8:	e0fff717 	ldw	r3,-36(fp)
   110ac:	00bfff84 	movi	r2,-2
   110b0:	1884703a 	and	r2,r3,r2
   110b4:	1001703a 	wrctl	status,r2
  
  return context;
   110b8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   110bc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   110c0:	e0bff917 	ldw	r2,-28(fp)
   110c4:	00c00074 	movhi	r3,1
   110c8:	18c92904 	addi	r3,r3,9380
   110cc:	100490fa 	slli	r2,r2,3
   110d0:	10c7883a 	add	r3,r2,r3
   110d4:	e0bffd17 	ldw	r2,-12(fp)
   110d8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   110dc:	e0bff917 	ldw	r2,-28(fp)
   110e0:	00c00074 	movhi	r3,1
   110e4:	18c92904 	addi	r3,r3,9380
   110e8:	100490fa 	slli	r2,r2,3
   110ec:	10c5883a 	add	r2,r2,r3
   110f0:	10c00104 	addi	r3,r2,4
   110f4:	e0bffe17 	ldw	r2,-8(fp)
   110f8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   110fc:	e0bffd17 	ldw	r2,-12(fp)
   11100:	1005003a 	cmpeq	r2,r2,zero
   11104:	1000051e 	bne	r2,zero,1111c <alt_iic_isr_register+0xb8>
   11108:	e17ff917 	ldw	r5,-28(fp)
   1110c:	e13ffb17 	ldw	r4,-20(fp)
   11110:	0010ee00 	call	10ee0 <alt_ic_irq_enable>
   11114:	e0bfff15 	stw	r2,-4(fp)
   11118:	00000406 	br	1112c <alt_iic_isr_register+0xc8>
   1111c:	e17ff917 	ldw	r5,-28(fp)
   11120:	e13ffb17 	ldw	r4,-20(fp)
   11124:	0010f7c0 	call	10f7c <alt_ic_irq_disable>
   11128:	e0bfff15 	stw	r2,-4(fp)
   1112c:	e0bfff17 	ldw	r2,-4(fp)
   11130:	e0bffa15 	stw	r2,-24(fp)
   11134:	e0bff817 	ldw	r2,-32(fp)
   11138:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1113c:	e0bff617 	ldw	r2,-40(fp)
   11140:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11144:	e0bffa17 	ldw	r2,-24(fp)
}
   11148:	e037883a 	mov	sp,fp
   1114c:	dfc00117 	ldw	ra,4(sp)
   11150:	df000017 	ldw	fp,0(sp)
   11154:	dec00204 	addi	sp,sp,8
   11158:	f800283a 	ret

0001115c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1115c:	defff904 	addi	sp,sp,-28
   11160:	dfc00615 	stw	ra,24(sp)
   11164:	df000515 	stw	fp,20(sp)
   11168:	df000504 	addi	fp,sp,20
   1116c:	e13ffc15 	stw	r4,-16(fp)
   11170:	e17ffd15 	stw	r5,-12(fp)
   11174:	e1bffe15 	stw	r6,-8(fp)
   11178:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1117c:	e13ffd17 	ldw	r4,-12(fp)
   11180:	e17ffe17 	ldw	r5,-8(fp)
   11184:	e1bfff17 	ldw	r6,-4(fp)
   11188:	00113740 	call	11374 <open>
   1118c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11190:	e0bffb17 	ldw	r2,-20(fp)
   11194:	1004803a 	cmplt	r2,r2,zero
   11198:	10001c1e 	bne	r2,zero,1120c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1119c:	e0bffb17 	ldw	r2,-20(fp)
   111a0:	00c00074 	movhi	r3,1
   111a4:	18c7ff04 	addi	r3,r3,8188
   111a8:	10800324 	muli	r2,r2,12
   111ac:	10c5883a 	add	r2,r2,r3
   111b0:	10c00017 	ldw	r3,0(r2)
   111b4:	e0bffc17 	ldw	r2,-16(fp)
   111b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   111bc:	e0bffb17 	ldw	r2,-20(fp)
   111c0:	00c00074 	movhi	r3,1
   111c4:	18c7ff04 	addi	r3,r3,8188
   111c8:	10800324 	muli	r2,r2,12
   111cc:	10c5883a 	add	r2,r2,r3
   111d0:	10800104 	addi	r2,r2,4
   111d4:	10c00017 	ldw	r3,0(r2)
   111d8:	e0bffc17 	ldw	r2,-16(fp)
   111dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   111e0:	e0bffb17 	ldw	r2,-20(fp)
   111e4:	00c00074 	movhi	r3,1
   111e8:	18c7ff04 	addi	r3,r3,8188
   111ec:	10800324 	muli	r2,r2,12
   111f0:	10c5883a 	add	r2,r2,r3
   111f4:	10800204 	addi	r2,r2,8
   111f8:	10c00017 	ldw	r3,0(r2)
   111fc:	e0bffc17 	ldw	r2,-16(fp)
   11200:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11204:	e13ffb17 	ldw	r4,-20(fp)
   11208:	001155c0 	call	1155c <alt_release_fd>
  }
} 
   1120c:	e037883a 	mov	sp,fp
   11210:	dfc00117 	ldw	ra,4(sp)
   11214:	df000017 	ldw	fp,0(sp)
   11218:	dec00204 	addi	sp,sp,8
   1121c:	f800283a 	ret

00011220 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11220:	defffb04 	addi	sp,sp,-20
   11224:	dfc00415 	stw	ra,16(sp)
   11228:	df000315 	stw	fp,12(sp)
   1122c:	df000304 	addi	fp,sp,12
   11230:	e13ffd15 	stw	r4,-12(fp)
   11234:	e17ffe15 	stw	r5,-8(fp)
   11238:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1123c:	01000074 	movhi	r4,1
   11240:	21080204 	addi	r4,r4,8200
   11244:	e17ffd17 	ldw	r5,-12(fp)
   11248:	01800044 	movi	r6,1
   1124c:	01c07fc4 	movi	r7,511
   11250:	001115c0 	call	1115c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11254:	01000074 	movhi	r4,1
   11258:	2107ff04 	addi	r4,r4,8188
   1125c:	e17ffe17 	ldw	r5,-8(fp)
   11260:	000d883a 	mov	r6,zero
   11264:	01c07fc4 	movi	r7,511
   11268:	001115c0 	call	1115c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1126c:	01000074 	movhi	r4,1
   11270:	21080504 	addi	r4,r4,8212
   11274:	e17fff17 	ldw	r5,-4(fp)
   11278:	01800044 	movi	r6,1
   1127c:	01c07fc4 	movi	r7,511
   11280:	001115c0 	call	1115c <alt_open_fd>
}  
   11284:	e037883a 	mov	sp,fp
   11288:	dfc00117 	ldw	ra,4(sp)
   1128c:	df000017 	ldw	fp,0(sp)
   11290:	dec00204 	addi	sp,sp,8
   11294:	f800283a 	ret

00011298 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11298:	defffc04 	addi	sp,sp,-16
   1129c:	df000315 	stw	fp,12(sp)
   112a0:	df000304 	addi	fp,sp,12
   112a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   112a8:	e0bffe17 	ldw	r2,-8(fp)
   112ac:	10800217 	ldw	r2,8(r2)
   112b0:	10d00034 	orhi	r3,r2,16384
   112b4:	e0bffe17 	ldw	r2,-8(fp)
   112b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   112bc:	e03ffd15 	stw	zero,-12(fp)
   112c0:	00002006 	br	11344 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   112c4:	e0bffd17 	ldw	r2,-12(fp)
   112c8:	00c00074 	movhi	r3,1
   112cc:	18c7ff04 	addi	r3,r3,8188
   112d0:	10800324 	muli	r2,r2,12
   112d4:	10c5883a 	add	r2,r2,r3
   112d8:	10c00017 	ldw	r3,0(r2)
   112dc:	e0bffe17 	ldw	r2,-8(fp)
   112e0:	10800017 	ldw	r2,0(r2)
   112e4:	1880141e 	bne	r3,r2,11338 <alt_file_locked+0xa0>
   112e8:	e0bffd17 	ldw	r2,-12(fp)
   112ec:	00c00074 	movhi	r3,1
   112f0:	18c7ff04 	addi	r3,r3,8188
   112f4:	10800324 	muli	r2,r2,12
   112f8:	10c5883a 	add	r2,r2,r3
   112fc:	10800204 	addi	r2,r2,8
   11300:	10800017 	ldw	r2,0(r2)
   11304:	1004403a 	cmpge	r2,r2,zero
   11308:	10000b1e 	bne	r2,zero,11338 <alt_file_locked+0xa0>
   1130c:	e0bffd17 	ldw	r2,-12(fp)
   11310:	10800324 	muli	r2,r2,12
   11314:	1007883a 	mov	r3,r2
   11318:	00800074 	movhi	r2,1
   1131c:	1087ff04 	addi	r2,r2,8188
   11320:	1887883a 	add	r3,r3,r2
   11324:	e0bffe17 	ldw	r2,-8(fp)
   11328:	18800326 	beq	r3,r2,11338 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1132c:	00bffcc4 	movi	r2,-13
   11330:	e0bfff15 	stw	r2,-4(fp)
   11334:	00000a06 	br	11360 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11338:	e0bffd17 	ldw	r2,-12(fp)
   1133c:	10800044 	addi	r2,r2,1
   11340:	e0bffd15 	stw	r2,-12(fp)
   11344:	00800074 	movhi	r2,1
   11348:	10886504 	addi	r2,r2,8596
   1134c:	10800017 	ldw	r2,0(r2)
   11350:	1007883a 	mov	r3,r2
   11354:	e0bffd17 	ldw	r2,-12(fp)
   11358:	18bfda2e 	bgeu	r3,r2,112c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1135c:	e03fff15 	stw	zero,-4(fp)
   11360:	e0bfff17 	ldw	r2,-4(fp)
}
   11364:	e037883a 	mov	sp,fp
   11368:	df000017 	ldw	fp,0(sp)
   1136c:	dec00104 	addi	sp,sp,4
   11370:	f800283a 	ret

00011374 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11374:	defff404 	addi	sp,sp,-48
   11378:	dfc00b15 	stw	ra,44(sp)
   1137c:	df000a15 	stw	fp,40(sp)
   11380:	df000a04 	addi	fp,sp,40
   11384:	e13ffb15 	stw	r4,-20(fp)
   11388:	e17ffc15 	stw	r5,-16(fp)
   1138c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11390:	00bfffc4 	movi	r2,-1
   11394:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   11398:	00bffb44 	movi	r2,-19
   1139c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   113a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   113a4:	e13ffb17 	ldw	r4,-20(fp)
   113a8:	01400074 	movhi	r5,1
   113ac:	29486304 	addi	r5,r5,8588
   113b0:	00117800 	call	11780 <alt_find_dev>
   113b4:	e0bffa15 	stw	r2,-24(fp)
   113b8:	e0bffa17 	ldw	r2,-24(fp)
   113bc:	1004c03a 	cmpne	r2,r2,zero
   113c0:	1000051e 	bne	r2,zero,113d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   113c4:	e13ffb17 	ldw	r4,-20(fp)
   113c8:	00118140 	call	11814 <alt_find_file>
   113cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   113d0:	00800044 	movi	r2,1
   113d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   113d8:	e0bffa17 	ldw	r2,-24(fp)
   113dc:	1005003a 	cmpeq	r2,r2,zero
   113e0:	1000301e 	bne	r2,zero,114a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   113e4:	e13ffa17 	ldw	r4,-24(fp)
   113e8:	00119340 	call	11934 <alt_get_fd>
   113ec:	e0bff815 	stw	r2,-32(fp)
   113f0:	e0bff817 	ldw	r2,-32(fp)
   113f4:	1004403a 	cmpge	r2,r2,zero
   113f8:	1000031e 	bne	r2,zero,11408 <open+0x94>
    {
      status = index;
   113fc:	e0bff817 	ldw	r2,-32(fp)
   11400:	e0bff715 	stw	r2,-36(fp)
   11404:	00002906 	br	114ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   11408:	e0bff817 	ldw	r2,-32(fp)
   1140c:	10800324 	muli	r2,r2,12
   11410:	1007883a 	mov	r3,r2
   11414:	00800074 	movhi	r2,1
   11418:	1087ff04 	addi	r2,r2,8188
   1141c:	1885883a 	add	r2,r3,r2
   11420:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11424:	e0fffc17 	ldw	r3,-16(fp)
   11428:	00900034 	movhi	r2,16384
   1142c:	10bfffc4 	addi	r2,r2,-1
   11430:	1886703a 	and	r3,r3,r2
   11434:	e0bff917 	ldw	r2,-28(fp)
   11438:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1143c:	e0bff617 	ldw	r2,-40(fp)
   11440:	1004c03a 	cmpne	r2,r2,zero
   11444:	1000061e 	bne	r2,zero,11460 <open+0xec>
   11448:	e13ff917 	ldw	r4,-28(fp)
   1144c:	00112980 	call	11298 <alt_file_locked>
   11450:	e0bff715 	stw	r2,-36(fp)
   11454:	e0bff717 	ldw	r2,-36(fp)
   11458:	1004803a 	cmplt	r2,r2,zero
   1145c:	1000131e 	bne	r2,zero,114ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11460:	e0bffa17 	ldw	r2,-24(fp)
   11464:	10800317 	ldw	r2,12(r2)
   11468:	1005003a 	cmpeq	r2,r2,zero
   1146c:	1000091e 	bne	r2,zero,11494 <open+0x120>
   11470:	e0bffa17 	ldw	r2,-24(fp)
   11474:	10800317 	ldw	r2,12(r2)
   11478:	e13ff917 	ldw	r4,-28(fp)
   1147c:	e17ffb17 	ldw	r5,-20(fp)
   11480:	e1bffc17 	ldw	r6,-16(fp)
   11484:	e1fffd17 	ldw	r7,-12(fp)
   11488:	103ee83a 	callr	r2
   1148c:	e0bfff15 	stw	r2,-4(fp)
   11490:	00000106 	br	11498 <open+0x124>
   11494:	e03fff15 	stw	zero,-4(fp)
   11498:	e0bfff17 	ldw	r2,-4(fp)
   1149c:	e0bff715 	stw	r2,-36(fp)
   114a0:	00000206 	br	114ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   114a4:	00bffb44 	movi	r2,-19
   114a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   114ac:	e0bff717 	ldw	r2,-36(fp)
   114b0:	1004403a 	cmpge	r2,r2,zero
   114b4:	1000091e 	bne	r2,zero,114dc <open+0x168>
  {
    alt_release_fd (index);  
   114b8:	e13ff817 	ldw	r4,-32(fp)
   114bc:	001155c0 	call	1155c <alt_release_fd>
    ALT_ERRNO = -status;
   114c0:	00114fc0 	call	114fc <alt_get_errno>
   114c4:	e0fff717 	ldw	r3,-36(fp)
   114c8:	00c7c83a 	sub	r3,zero,r3
   114cc:	10c00015 	stw	r3,0(r2)
    return -1;
   114d0:	00bfffc4 	movi	r2,-1
   114d4:	e0bffe15 	stw	r2,-8(fp)
   114d8:	00000206 	br	114e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   114dc:	e0bff817 	ldw	r2,-32(fp)
   114e0:	e0bffe15 	stw	r2,-8(fp)
   114e4:	e0bffe17 	ldw	r2,-8(fp)
}
   114e8:	e037883a 	mov	sp,fp
   114ec:	dfc00117 	ldw	ra,4(sp)
   114f0:	df000017 	ldw	fp,0(sp)
   114f4:	dec00204 	addi	sp,sp,8
   114f8:	f800283a 	ret

000114fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   114fc:	defffd04 	addi	sp,sp,-12
   11500:	dfc00215 	stw	ra,8(sp)
   11504:	df000115 	stw	fp,4(sp)
   11508:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1150c:	00800074 	movhi	r2,1
   11510:	10886604 	addi	r2,r2,8600
   11514:	10800017 	ldw	r2,0(r2)
   11518:	1005003a 	cmpeq	r2,r2,zero
   1151c:	1000061e 	bne	r2,zero,11538 <alt_get_errno+0x3c>
   11520:	00800074 	movhi	r2,1
   11524:	10886604 	addi	r2,r2,8600
   11528:	10800017 	ldw	r2,0(r2)
   1152c:	103ee83a 	callr	r2
   11530:	e0bfff15 	stw	r2,-4(fp)
   11534:	00000306 	br	11544 <alt_get_errno+0x48>
   11538:	00800074 	movhi	r2,1
   1153c:	10892204 	addi	r2,r2,9352
   11540:	e0bfff15 	stw	r2,-4(fp)
   11544:	e0bfff17 	ldw	r2,-4(fp)
}
   11548:	e037883a 	mov	sp,fp
   1154c:	dfc00117 	ldw	ra,4(sp)
   11550:	df000017 	ldw	fp,0(sp)
   11554:	dec00204 	addi	sp,sp,8
   11558:	f800283a 	ret

0001155c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1155c:	defffe04 	addi	sp,sp,-8
   11560:	df000115 	stw	fp,4(sp)
   11564:	df000104 	addi	fp,sp,4
   11568:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1156c:	e0bfff17 	ldw	r2,-4(fp)
   11570:	108000d0 	cmplti	r2,r2,3
   11574:	10000d1e 	bne	r2,zero,115ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   11578:	e0bfff17 	ldw	r2,-4(fp)
   1157c:	00c00074 	movhi	r3,1
   11580:	18c7ff04 	addi	r3,r3,8188
   11584:	10800324 	muli	r2,r2,12
   11588:	10c5883a 	add	r2,r2,r3
   1158c:	10800204 	addi	r2,r2,8
   11590:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	00c00074 	movhi	r3,1
   1159c:	18c7ff04 	addi	r3,r3,8188
   115a0:	10800324 	muli	r2,r2,12
   115a4:	10c5883a 	add	r2,r2,r3
   115a8:	10000015 	stw	zero,0(r2)
  }
}
   115ac:	e037883a 	mov	sp,fp
   115b0:	df000017 	ldw	fp,0(sp)
   115b4:	dec00104 	addi	sp,sp,4
   115b8:	f800283a 	ret

000115bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   115bc:	defffa04 	addi	sp,sp,-24
   115c0:	df000515 	stw	fp,20(sp)
   115c4:	df000504 	addi	fp,sp,20
   115c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115cc:	0005303a 	rdctl	r2,status
   115d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115d4:	e0fffd17 	ldw	r3,-12(fp)
   115d8:	00bfff84 	movi	r2,-2
   115dc:	1884703a 	and	r2,r3,r2
   115e0:	1001703a 	wrctl	status,r2
  
  return context;
   115e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   115e8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   115ec:	e0bfff17 	ldw	r2,-4(fp)
   115f0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   115f4:	e0bffc17 	ldw	r2,-16(fp)
   115f8:	10c00017 	ldw	r3,0(r2)
   115fc:	e0bffc17 	ldw	r2,-16(fp)
   11600:	10800117 	ldw	r2,4(r2)
   11604:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   11608:	e0bffc17 	ldw	r2,-16(fp)
   1160c:	10c00117 	ldw	r3,4(r2)
   11610:	e0bffc17 	ldw	r2,-16(fp)
   11614:	10800017 	ldw	r2,0(r2)
   11618:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1161c:	e0fffc17 	ldw	r3,-16(fp)
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   11628:	e0fffc17 	ldw	r3,-16(fp)
   1162c:	e0bffc17 	ldw	r2,-16(fp)
   11630:	18800015 	stw	r2,0(r3)
   11634:	e0bffe17 	ldw	r2,-8(fp)
   11638:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1163c:	e0bffb17 	ldw	r2,-20(fp)
   11640:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11644:	e037883a 	mov	sp,fp
   11648:	df000017 	ldw	fp,0(sp)
   1164c:	dec00104 	addi	sp,sp,4
   11650:	f800283a 	ret

00011654 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11654:	defffb04 	addi	sp,sp,-20
   11658:	dfc00415 	stw	ra,16(sp)
   1165c:	df000315 	stw	fp,12(sp)
   11660:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11664:	d0a00917 	ldw	r2,-32732(gp)
   11668:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1166c:	d0a0c917 	ldw	r2,-31964(gp)
   11670:	10800044 	addi	r2,r2,1
   11674:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11678:	00003106 	br	11740 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1167c:	e0bffe17 	ldw	r2,-8(fp)
   11680:	10800017 	ldw	r2,0(r2)
   11684:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11688:	e0bffe17 	ldw	r2,-8(fp)
   1168c:	10800403 	ldbu	r2,16(r2)
   11690:	10803fcc 	andi	r2,r2,255
   11694:	1005003a 	cmpeq	r2,r2,zero
   11698:	1000051e 	bne	r2,zero,116b0 <alt_tick+0x5c>
   1169c:	d0a0c917 	ldw	r2,-31964(gp)
   116a0:	1004c03a 	cmpne	r2,r2,zero
   116a4:	1000021e 	bne	r2,zero,116b0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   116a8:	e0bffe17 	ldw	r2,-8(fp)
   116ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	10c00217 	ldw	r3,8(r2)
   116b8:	d0a0c917 	ldw	r2,-31964(gp)
   116bc:	10c01e36 	bltu	r2,r3,11738 <alt_tick+0xe4>
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	10800403 	ldbu	r2,16(r2)
   116c8:	10803fcc 	andi	r2,r2,255
   116cc:	1004c03a 	cmpne	r2,r2,zero
   116d0:	1000191e 	bne	r2,zero,11738 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   116d4:	e0bffe17 	ldw	r2,-8(fp)
   116d8:	10c00317 	ldw	r3,12(r2)
   116dc:	e0bffe17 	ldw	r2,-8(fp)
   116e0:	11000517 	ldw	r4,20(r2)
   116e4:	183ee83a 	callr	r3
   116e8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   116ec:	e0bffd17 	ldw	r2,-12(fp)
   116f0:	1004c03a 	cmpne	r2,r2,zero
   116f4:	1000031e 	bne	r2,zero,11704 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   116f8:	e13ffe17 	ldw	r4,-8(fp)
   116fc:	00115bc0 	call	115bc <alt_alarm_stop>
   11700:	00000d06 	br	11738 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   11704:	e0bffe17 	ldw	r2,-8(fp)
   11708:	10c00217 	ldw	r3,8(r2)
   1170c:	e0bffd17 	ldw	r2,-12(fp)
   11710:	1887883a 	add	r3,r3,r2
   11714:	e0bffe17 	ldw	r2,-8(fp)
   11718:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1171c:	e0bffe17 	ldw	r2,-8(fp)
   11720:	10c00217 	ldw	r3,8(r2)
   11724:	d0a0c917 	ldw	r2,-31964(gp)
   11728:	1880032e 	bgeu	r3,r2,11738 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1172c:	e0fffe17 	ldw	r3,-8(fp)
   11730:	00800044 	movi	r2,1
   11734:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   11738:	e0bfff17 	ldw	r2,-4(fp)
   1173c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11740:	d0e00904 	addi	r3,gp,-32732
   11744:	e0bffe17 	ldw	r2,-8(fp)
   11748:	10ffcc1e 	bne	r2,r3,1167c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1174c:	e037883a 	mov	sp,fp
   11750:	dfc00117 	ldw	ra,4(sp)
   11754:	df000017 	ldw	fp,0(sp)
   11758:	dec00204 	addi	sp,sp,8
   1175c:	f800283a 	ret

00011760 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11760:	deffff04 	addi	sp,sp,-4
   11764:	df000015 	stw	fp,0(sp)
   11768:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1176c:	000170fa 	wrctl	ienable,zero
}
   11770:	e037883a 	mov	sp,fp
   11774:	df000017 	ldw	fp,0(sp)
   11778:	dec00104 	addi	sp,sp,4
   1177c:	f800283a 	ret

00011780 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11780:	defff904 	addi	sp,sp,-28
   11784:	dfc00615 	stw	ra,24(sp)
   11788:	df000515 	stw	fp,20(sp)
   1178c:	df000504 	addi	fp,sp,20
   11790:	e13ffd15 	stw	r4,-12(fp)
   11794:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11798:	e0bffe17 	ldw	r2,-8(fp)
   1179c:	10800017 	ldw	r2,0(r2)
   117a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   117a4:	e13ffd17 	ldw	r4,-12(fp)
   117a8:	00102a80 	call	102a8 <strlen>
   117ac:	10800044 	addi	r2,r2,1
   117b0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117b4:	00000d06 	br	117ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   117b8:	e0bffc17 	ldw	r2,-16(fp)
   117bc:	11000217 	ldw	r4,8(r2)
   117c0:	e1bffb17 	ldw	r6,-20(fp)
   117c4:	e17ffd17 	ldw	r5,-12(fp)
   117c8:	0011ab00 	call	11ab0 <memcmp>
   117cc:	1004c03a 	cmpne	r2,r2,zero
   117d0:	1000031e 	bne	r2,zero,117e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   117d4:	e0bffc17 	ldw	r2,-16(fp)
   117d8:	e0bfff15 	stw	r2,-4(fp)
   117dc:	00000706 	br	117fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   117e0:	e0bffc17 	ldw	r2,-16(fp)
   117e4:	10800017 	ldw	r2,0(r2)
   117e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117ec:	e0fffe17 	ldw	r3,-8(fp)
   117f0:	e0bffc17 	ldw	r2,-16(fp)
   117f4:	10fff01e 	bne	r2,r3,117b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   117f8:	e03fff15 	stw	zero,-4(fp)
   117fc:	e0bfff17 	ldw	r2,-4(fp)
}
   11800:	e037883a 	mov	sp,fp
   11804:	dfc00117 	ldw	ra,4(sp)
   11808:	df000017 	ldw	fp,0(sp)
   1180c:	dec00204 	addi	sp,sp,8
   11810:	f800283a 	ret

00011814 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11814:	defffa04 	addi	sp,sp,-24
   11818:	dfc00515 	stw	ra,20(sp)
   1181c:	df000415 	stw	fp,16(sp)
   11820:	df000404 	addi	fp,sp,16
   11824:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11828:	00800074 	movhi	r2,1
   1182c:	10886104 	addi	r2,r2,8580
   11830:	10800017 	ldw	r2,0(r2)
   11834:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11838:	00003306 	br	11908 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1183c:	e0bffd17 	ldw	r2,-12(fp)
   11840:	11000217 	ldw	r4,8(r2)
   11844:	00102a80 	call	102a8 <strlen>
   11848:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1184c:	e0bffd17 	ldw	r2,-12(fp)
   11850:	10c00217 	ldw	r3,8(r2)
   11854:	e0bffc17 	ldw	r2,-16(fp)
   11858:	1885883a 	add	r2,r3,r2
   1185c:	10bfffc4 	addi	r2,r2,-1
   11860:	10800003 	ldbu	r2,0(r2)
   11864:	10803fcc 	andi	r2,r2,255
   11868:	1080201c 	xori	r2,r2,128
   1186c:	10bfe004 	addi	r2,r2,-128
   11870:	10800bd8 	cmpnei	r2,r2,47
   11874:	1000031e 	bne	r2,zero,11884 <alt_find_file+0x70>
    {
      len -= 1;
   11878:	e0bffc17 	ldw	r2,-16(fp)
   1187c:	10bfffc4 	addi	r2,r2,-1
   11880:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11884:	e0bffc17 	ldw	r2,-16(fp)
   11888:	1007883a 	mov	r3,r2
   1188c:	e0bffe17 	ldw	r2,-8(fp)
   11890:	1885883a 	add	r2,r3,r2
   11894:	10800003 	ldbu	r2,0(r2)
   11898:	10803fcc 	andi	r2,r2,255
   1189c:	1080201c 	xori	r2,r2,128
   118a0:	10bfe004 	addi	r2,r2,-128
   118a4:	10800be0 	cmpeqi	r2,r2,47
   118a8:	10000a1e 	bne	r2,zero,118d4 <alt_find_file+0xc0>
   118ac:	e0bffc17 	ldw	r2,-16(fp)
   118b0:	1007883a 	mov	r3,r2
   118b4:	e0bffe17 	ldw	r2,-8(fp)
   118b8:	1885883a 	add	r2,r3,r2
   118bc:	10800003 	ldbu	r2,0(r2)
   118c0:	10803fcc 	andi	r2,r2,255
   118c4:	1080201c 	xori	r2,r2,128
   118c8:	10bfe004 	addi	r2,r2,-128
   118cc:	1004c03a 	cmpne	r2,r2,zero
   118d0:	10000a1e 	bne	r2,zero,118fc <alt_find_file+0xe8>
   118d4:	e0bffd17 	ldw	r2,-12(fp)
   118d8:	11000217 	ldw	r4,8(r2)
   118dc:	e1bffc17 	ldw	r6,-16(fp)
   118e0:	e17ffe17 	ldw	r5,-8(fp)
   118e4:	0011ab00 	call	11ab0 <memcmp>
   118e8:	1004c03a 	cmpne	r2,r2,zero
   118ec:	1000031e 	bne	r2,zero,118fc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   118f0:	e0bffd17 	ldw	r2,-12(fp)
   118f4:	e0bfff15 	stw	r2,-4(fp)
   118f8:	00000806 	br	1191c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   118fc:	e0bffd17 	ldw	r2,-12(fp)
   11900:	10800017 	ldw	r2,0(r2)
   11904:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11908:	00c00074 	movhi	r3,1
   1190c:	18c86104 	addi	r3,r3,8580
   11910:	e0bffd17 	ldw	r2,-12(fp)
   11914:	10ffc91e 	bne	r2,r3,1183c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11918:	e03fff15 	stw	zero,-4(fp)
   1191c:	e0bfff17 	ldw	r2,-4(fp)
}
   11920:	e037883a 	mov	sp,fp
   11924:	dfc00117 	ldw	ra,4(sp)
   11928:	df000017 	ldw	fp,0(sp)
   1192c:	dec00204 	addi	sp,sp,8
   11930:	f800283a 	ret

00011934 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11934:	defffc04 	addi	sp,sp,-16
   11938:	df000315 	stw	fp,12(sp)
   1193c:	df000304 	addi	fp,sp,12
   11940:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11944:	00bffa04 	movi	r2,-24
   11948:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1194c:	e03ffe15 	stw	zero,-8(fp)
   11950:	00001e06 	br	119cc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   11954:	e0bffe17 	ldw	r2,-8(fp)
   11958:	00c00074 	movhi	r3,1
   1195c:	18c7ff04 	addi	r3,r3,8188
   11960:	10800324 	muli	r2,r2,12
   11964:	10c5883a 	add	r2,r2,r3
   11968:	10800017 	ldw	r2,0(r2)
   1196c:	1004c03a 	cmpne	r2,r2,zero
   11970:	1000131e 	bne	r2,zero,119c0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   11974:	e0bffe17 	ldw	r2,-8(fp)
   11978:	00c00074 	movhi	r3,1
   1197c:	18c7ff04 	addi	r3,r3,8188
   11980:	10800324 	muli	r2,r2,12
   11984:	10c7883a 	add	r3,r2,r3
   11988:	e0bfff17 	ldw	r2,-4(fp)
   1198c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   11990:	00800074 	movhi	r2,1
   11994:	10886504 	addi	r2,r2,8596
   11998:	10c00017 	ldw	r3,0(r2)
   1199c:	e0bffe17 	ldw	r2,-8(fp)
   119a0:	1880040e 	bge	r3,r2,119b4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   119a4:	00c00074 	movhi	r3,1
   119a8:	18c86504 	addi	r3,r3,8596
   119ac:	e0bffe17 	ldw	r2,-8(fp)
   119b0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   119b4:	e0bffe17 	ldw	r2,-8(fp)
   119b8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   119bc:	00000606 	br	119d8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   119c0:	e0bffe17 	ldw	r2,-8(fp)
   119c4:	10800044 	addi	r2,r2,1
   119c8:	e0bffe15 	stw	r2,-8(fp)
   119cc:	e0bffe17 	ldw	r2,-8(fp)
   119d0:	10800810 	cmplti	r2,r2,32
   119d4:	103fdf1e 	bne	r2,zero,11954 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   119d8:	e0bffd17 	ldw	r2,-12(fp)
}
   119dc:	e037883a 	mov	sp,fp
   119e0:	df000017 	ldw	fp,0(sp)
   119e4:	dec00104 	addi	sp,sp,4
   119e8:	f800283a 	ret

000119ec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   119ec:	defffb04 	addi	sp,sp,-20
   119f0:	df000415 	stw	fp,16(sp)
   119f4:	df000404 	addi	fp,sp,16
   119f8:	e13ffe15 	stw	r4,-8(fp)
   119fc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11a00:	e0bfff17 	ldw	r2,-4(fp)
   11a04:	10840070 	cmpltui	r2,r2,4097
   11a08:	1000021e 	bne	r2,zero,11a14 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11a0c:	00840004 	movi	r2,4096
   11a10:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11a14:	e0fffe17 	ldw	r3,-8(fp)
   11a18:	e0bfff17 	ldw	r2,-4(fp)
   11a1c:	1885883a 	add	r2,r3,r2
   11a20:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11a24:	e0bffe17 	ldw	r2,-8(fp)
   11a28:	e0bffd15 	stw	r2,-12(fp)
   11a2c:	00000506 	br	11a44 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11a30:	e0bffd17 	ldw	r2,-12(fp)
   11a34:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11a38:	e0bffd17 	ldw	r2,-12(fp)
   11a3c:	10800804 	addi	r2,r2,32
   11a40:	e0bffd15 	stw	r2,-12(fp)
   11a44:	e0fffd17 	ldw	r3,-12(fp)
   11a48:	e0bffc17 	ldw	r2,-16(fp)
   11a4c:	18bff836 	bltu	r3,r2,11a30 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11a50:	e0bffe17 	ldw	r2,-8(fp)
   11a54:	108007cc 	andi	r2,r2,31
   11a58:	1005003a 	cmpeq	r2,r2,zero
   11a5c:	1000021e 	bne	r2,zero,11a68 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11a60:	e0bffd17 	ldw	r2,-12(fp)
   11a64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11a68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11a6c:	e037883a 	mov	sp,fp
   11a70:	df000017 	ldw	fp,0(sp)
   11a74:	dec00104 	addi	sp,sp,4
   11a78:	f800283a 	ret

00011a7c <atexit>:
   11a7c:	200b883a 	mov	r5,r4
   11a80:	000d883a 	mov	r6,zero
   11a84:	0009883a 	mov	r4,zero
   11a88:	000f883a 	mov	r7,zero
   11a8c:	0011aec1 	jmpi	11aec <__register_exitproc>

00011a90 <exit>:
   11a90:	defffe04 	addi	sp,sp,-8
   11a94:	dc400015 	stw	r17,0(sp)
   11a98:	000b883a 	mov	r5,zero
   11a9c:	2023883a 	mov	r17,r4
   11aa0:	dfc00115 	stw	ra,4(sp)
   11aa4:	0011c5c0 	call	11c5c <__call_exitprocs>
   11aa8:	8809883a 	mov	r4,r17
   11aac:	0011e580 	call	11e58 <_exit>

00011ab0 <memcmp>:
   11ab0:	31ffffc4 	addi	r7,r6,-1
   11ab4:	3000061e 	bne	r6,zero,11ad0 <memcmp+0x20>
   11ab8:	00000a06 	br	11ae4 <memcmp+0x34>
   11abc:	39ffffc4 	addi	r7,r7,-1
   11ac0:	00bfffc4 	movi	r2,-1
   11ac4:	21000044 	addi	r4,r4,1
   11ac8:	29400044 	addi	r5,r5,1
   11acc:	38800526 	beq	r7,r2,11ae4 <memcmp+0x34>
   11ad0:	20c00003 	ldbu	r3,0(r4)
   11ad4:	28800003 	ldbu	r2,0(r5)
   11ad8:	18bff826 	beq	r3,r2,11abc <memcmp+0xc>
   11adc:	1885c83a 	sub	r2,r3,r2
   11ae0:	f800283a 	ret
   11ae4:	0005883a 	mov	r2,zero
   11ae8:	f800283a 	ret

00011aec <__register_exitproc>:
   11aec:	defff904 	addi	sp,sp,-28
   11af0:	00800074 	movhi	r2,1
   11af4:	10886004 	addi	r2,r2,8576
   11af8:	dc400115 	stw	r17,4(sp)
   11afc:	14400017 	ldw	r17,0(r2)
   11b00:	dc000015 	stw	r16,0(sp)
   11b04:	dd400515 	stw	r21,20(sp)
   11b08:	8c000c17 	ldw	r16,48(r17)
   11b0c:	dd000415 	stw	r20,16(sp)
   11b10:	dcc00315 	stw	r19,12(sp)
   11b14:	dc800215 	stw	r18,8(sp)
   11b18:	dfc00615 	stw	ra,24(sp)
   11b1c:	2025883a 	mov	r18,r4
   11b20:	282b883a 	mov	r21,r5
   11b24:	3029883a 	mov	r20,r6
   11b28:	3827883a 	mov	r19,r7
   11b2c:	80002626 	beq	r16,zero,11bc8 <__register_exitproc+0xdc>
   11b30:	81400117 	ldw	r5,4(r16)
   11b34:	008007c4 	movi	r2,31
   11b38:	11403716 	blt	r2,r5,11c18 <__register_exitproc+0x12c>
   11b3c:	90002026 	beq	r18,zero,11bc0 <__register_exitproc+0xd4>
   11b40:	81802217 	ldw	r6,136(r16)
   11b44:	30002926 	beq	r6,zero,11bec <__register_exitproc+0x100>
   11b48:	81400117 	ldw	r5,4(r16)
   11b4c:	00c00044 	movi	r3,1
   11b50:	31004017 	ldw	r4,256(r6)
   11b54:	1946983a 	sll	r3,r3,r5
   11b58:	2945883a 	add	r2,r5,r5
   11b5c:	1085883a 	add	r2,r2,r2
   11b60:	1185883a 	add	r2,r2,r6
   11b64:	20c8b03a 	or	r4,r4,r3
   11b68:	14c02015 	stw	r19,128(r2)
   11b6c:	15000015 	stw	r20,0(r2)
   11b70:	00800084 	movi	r2,2
   11b74:	31004015 	stw	r4,256(r6)
   11b78:	90801826 	beq	r18,r2,11bdc <__register_exitproc+0xf0>
   11b7c:	2945883a 	add	r2,r5,r5
   11b80:	1085883a 	add	r2,r2,r2
   11b84:	1405883a 	add	r2,r2,r16
   11b88:	28c00044 	addi	r3,r5,1
   11b8c:	0009883a 	mov	r4,zero
   11b90:	15400215 	stw	r21,8(r2)
   11b94:	80c00115 	stw	r3,4(r16)
   11b98:	2005883a 	mov	r2,r4
   11b9c:	dfc00617 	ldw	ra,24(sp)
   11ba0:	dd400517 	ldw	r21,20(sp)
   11ba4:	dd000417 	ldw	r20,16(sp)
   11ba8:	dcc00317 	ldw	r19,12(sp)
   11bac:	dc800217 	ldw	r18,8(sp)
   11bb0:	dc400117 	ldw	r17,4(sp)
   11bb4:	dc000017 	ldw	r16,0(sp)
   11bb8:	dec00704 	addi	sp,sp,28
   11bbc:	f800283a 	ret
   11bc0:	81400117 	ldw	r5,4(r16)
   11bc4:	003fed06 	br	11b7c <__register_exitproc+0x90>
   11bc8:	00800074 	movhi	r2,1
   11bcc:	10896904 	addi	r2,r2,9636
   11bd0:	1021883a 	mov	r16,r2
   11bd4:	88800c15 	stw	r2,48(r17)
   11bd8:	003fd506 	br	11b30 <__register_exitproc+0x44>
   11bdc:	30804117 	ldw	r2,260(r6)
   11be0:	10c4b03a 	or	r2,r2,r3
   11be4:	30804115 	stw	r2,260(r6)
   11be8:	003fe406 	br	11b7c <__register_exitproc+0x90>
   11bec:	00800034 	movhi	r2,0
   11bf0:	10800004 	addi	r2,r2,0
   11bf4:	10000b26 	beq	r2,zero,11c24 <__register_exitproc+0x138>
   11bf8:	01004204 	movi	r4,264
   11bfc:	103ee83a 	callr	r2
   11c00:	10000826 	beq	r2,zero,11c24 <__register_exitproc+0x138>
   11c04:	100d883a 	mov	r6,r2
   11c08:	10004015 	stw	zero,256(r2)
   11c0c:	10004115 	stw	zero,260(r2)
   11c10:	80802215 	stw	r2,136(r16)
   11c14:	003fcc06 	br	11b48 <__register_exitproc+0x5c>
   11c18:	00800034 	movhi	r2,0
   11c1c:	10800004 	addi	r2,r2,0
   11c20:	1000021e 	bne	r2,zero,11c2c <__register_exitproc+0x140>
   11c24:	013fffc4 	movi	r4,-1
   11c28:	003fdb06 	br	11b98 <__register_exitproc+0xac>
   11c2c:	01002304 	movi	r4,140
   11c30:	103ee83a 	callr	r2
   11c34:	1007883a 	mov	r3,r2
   11c38:	103ffa26 	beq	r2,zero,11c24 <__register_exitproc+0x138>
   11c3c:	88800c17 	ldw	r2,48(r17)
   11c40:	1821883a 	mov	r16,r3
   11c44:	18000115 	stw	zero,4(r3)
   11c48:	18800015 	stw	r2,0(r3)
   11c4c:	88c00c15 	stw	r3,48(r17)
   11c50:	903fdb26 	beq	r18,zero,11bc0 <__register_exitproc+0xd4>
   11c54:	003fba06 	br	11b40 <__register_exitproc+0x54>

00011c58 <register_fini>:
   11c58:	f800283a 	ret

00011c5c <__call_exitprocs>:
   11c5c:	defff304 	addi	sp,sp,-52
   11c60:	00800074 	movhi	r2,1
   11c64:	10886004 	addi	r2,r2,8576
   11c68:	df000b15 	stw	fp,44(sp)
   11c6c:	17000017 	ldw	fp,0(r2)
   11c70:	00800034 	movhi	r2,0
   11c74:	10800004 	addi	r2,r2,0
   11c78:	1005003a 	cmpeq	r2,r2,zero
   11c7c:	d8800215 	stw	r2,8(sp)
   11c80:	e0800c04 	addi	r2,fp,48
   11c84:	dd800915 	stw	r22,36(sp)
   11c88:	dd400815 	stw	r21,32(sp)
   11c8c:	dfc00c15 	stw	ra,48(sp)
   11c90:	ddc00a15 	stw	r23,40(sp)
   11c94:	dd000715 	stw	r20,28(sp)
   11c98:	dcc00615 	stw	r19,24(sp)
   11c9c:	dc800515 	stw	r18,20(sp)
   11ca0:	dc400415 	stw	r17,16(sp)
   11ca4:	dc000315 	stw	r16,12(sp)
   11ca8:	282d883a 	mov	r22,r5
   11cac:	d9000115 	stw	r4,4(sp)
   11cb0:	d8800015 	stw	r2,0(sp)
   11cb4:	282b003a 	cmpeq	r21,r5,zero
   11cb8:	e4400c17 	ldw	r17,48(fp)
   11cbc:	88001226 	beq	r17,zero,11d08 <__call_exitprocs+0xac>
   11cc0:	ddc00017 	ldw	r23,0(sp)
   11cc4:	88800117 	ldw	r2,4(r17)
   11cc8:	8c802217 	ldw	r18,136(r17)
   11ccc:	143fffc4 	addi	r16,r2,-1
   11cd0:	80000b16 	blt	r16,zero,11d00 <__call_exitprocs+0xa4>
   11cd4:	9027003a 	cmpeq	r19,r18,zero
   11cd8:	a800171e 	bne	r21,zero,11d38 <__call_exitprocs+0xdc>
   11cdc:	9800051e 	bne	r19,zero,11cf4 <__call_exitprocs+0x98>
   11ce0:	8409883a 	add	r4,r16,r16
   11ce4:	2105883a 	add	r2,r4,r4
   11ce8:	1485883a 	add	r2,r2,r18
   11cec:	10c02017 	ldw	r3,128(r2)
   11cf0:	b0c01226 	beq	r22,r3,11d3c <__call_exitprocs+0xe0>
   11cf4:	843fffc4 	addi	r16,r16,-1
   11cf8:	00bfffc4 	movi	r2,-1
   11cfc:	80bff61e 	bne	r16,r2,11cd8 <__call_exitprocs+0x7c>
   11d00:	d8800217 	ldw	r2,8(sp)
   11d04:	10003226 	beq	r2,zero,11dd0 <__call_exitprocs+0x174>
   11d08:	dfc00c17 	ldw	ra,48(sp)
   11d0c:	df000b17 	ldw	fp,44(sp)
   11d10:	ddc00a17 	ldw	r23,40(sp)
   11d14:	dd800917 	ldw	r22,36(sp)
   11d18:	dd400817 	ldw	r21,32(sp)
   11d1c:	dd000717 	ldw	r20,28(sp)
   11d20:	dcc00617 	ldw	r19,24(sp)
   11d24:	dc800517 	ldw	r18,20(sp)
   11d28:	dc400417 	ldw	r17,16(sp)
   11d2c:	dc000317 	ldw	r16,12(sp)
   11d30:	dec00d04 	addi	sp,sp,52
   11d34:	f800283a 	ret
   11d38:	8409883a 	add	r4,r16,r16
   11d3c:	88c00117 	ldw	r3,4(r17)
   11d40:	2105883a 	add	r2,r4,r4
   11d44:	1445883a 	add	r2,r2,r17
   11d48:	18ffffc4 	addi	r3,r3,-1
   11d4c:	11800217 	ldw	r6,8(r2)
   11d50:	1c001826 	beq	r3,r16,11db4 <__call_exitprocs+0x158>
   11d54:	10000215 	stw	zero,8(r2)
   11d58:	303fe626 	beq	r6,zero,11cf4 <__call_exitprocs+0x98>
   11d5c:	8d000117 	ldw	r20,4(r17)
   11d60:	9800121e 	bne	r19,zero,11dac <__call_exitprocs+0x150>
   11d64:	00c00044 	movi	r3,1
   11d68:	1c06983a 	sll	r3,r3,r16
   11d6c:	90804017 	ldw	r2,256(r18)
   11d70:	1884703a 	and	r2,r3,r2
   11d74:	10000d26 	beq	r2,zero,11dac <__call_exitprocs+0x150>
   11d78:	90804117 	ldw	r2,260(r18)
   11d7c:	1884703a 	and	r2,r3,r2
   11d80:	10000e1e 	bne	r2,zero,11dbc <__call_exitprocs+0x160>
   11d84:	2105883a 	add	r2,r4,r4
   11d88:	1485883a 	add	r2,r2,r18
   11d8c:	11400017 	ldw	r5,0(r2)
   11d90:	d9000117 	ldw	r4,4(sp)
   11d94:	303ee83a 	callr	r6
   11d98:	88800117 	ldw	r2,4(r17)
   11d9c:	a0bfc61e 	bne	r20,r2,11cb8 <__call_exitprocs+0x5c>
   11da0:	b8800017 	ldw	r2,0(r23)
   11da4:	147fd326 	beq	r2,r17,11cf4 <__call_exitprocs+0x98>
   11da8:	003fc306 	br	11cb8 <__call_exitprocs+0x5c>
   11dac:	303ee83a 	callr	r6
   11db0:	003ff906 	br	11d98 <__call_exitprocs+0x13c>
   11db4:	8c000115 	stw	r16,4(r17)
   11db8:	003fe706 	br	11d58 <__call_exitprocs+0xfc>
   11dbc:	2105883a 	add	r2,r4,r4
   11dc0:	1485883a 	add	r2,r2,r18
   11dc4:	11000017 	ldw	r4,0(r2)
   11dc8:	303ee83a 	callr	r6
   11dcc:	003ff206 	br	11d98 <__call_exitprocs+0x13c>
   11dd0:	88800117 	ldw	r2,4(r17)
   11dd4:	10000b1e 	bne	r2,zero,11e04 <__call_exitprocs+0x1a8>
   11dd8:	89000017 	ldw	r4,0(r17)
   11ddc:	20000a26 	beq	r4,zero,11e08 <__call_exitprocs+0x1ac>
   11de0:	b9000015 	stw	r4,0(r23)
   11de4:	90000226 	beq	r18,zero,11df0 <__call_exitprocs+0x194>
   11de8:	9009883a 	mov	r4,r18
   11dec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   11df0:	8809883a 	mov	r4,r17
   11df4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   11df8:	bc400017 	ldw	r17,0(r23)
   11dfc:	883fb11e 	bne	r17,zero,11cc4 <__call_exitprocs+0x68>
   11e00:	003fc106 	br	11d08 <__call_exitprocs+0xac>
   11e04:	89000017 	ldw	r4,0(r17)
   11e08:	882f883a 	mov	r23,r17
   11e0c:	2023883a 	mov	r17,r4
   11e10:	883fac1e 	bne	r17,zero,11cc4 <__call_exitprocs+0x68>
   11e14:	003fbc06 	br	11d08 <__call_exitprocs+0xac>

00011e18 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   11e18:	defffd04 	addi	sp,sp,-12
   11e1c:	df000215 	stw	fp,8(sp)
   11e20:	df000204 	addi	fp,sp,8
   11e24:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   11e28:	e0bfff17 	ldw	r2,-4(fp)
   11e2c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11e30:	e0bffe17 	ldw	r2,-8(fp)
   11e34:	1005003a 	cmpeq	r2,r2,zero
   11e38:	1000021e 	bne	r2,zero,11e44 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   11e3c:	002af070 	cmpltui	zero,zero,43969
   11e40:	00000106 	br	11e48 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   11e44:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   11e48:	e037883a 	mov	sp,fp
   11e4c:	df000017 	ldw	fp,0(sp)
   11e50:	dec00104 	addi	sp,sp,4
   11e54:	f800283a 	ret

00011e58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11e58:	defffd04 	addi	sp,sp,-12
   11e5c:	dfc00215 	stw	ra,8(sp)
   11e60:	df000115 	stw	fp,4(sp)
   11e64:	df000104 	addi	fp,sp,4
   11e68:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   11e6c:	e13fff17 	ldw	r4,-4(fp)
   11e70:	0011e180 	call	11e18 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11e74:	003fff06 	br	11e74 <_exit+0x1c>
   11e78:	00011c58 	cmpnei	zero,zero,1137
