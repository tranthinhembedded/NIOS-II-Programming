
LabX1.elf:     file format elf32-littlenios2
LabX1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000e4d0 memsz 0x0000e4d0 flags r-x
    LOAD off    0x0000f4f0 vaddr 0x0008e4f0 paddr 0x00090014 align 2**12
         filesz 0x00001b24 memsz 0x00001b24 flags rw-
    LOAD off    0x00011b38 vaddr 0x00091b38 paddr 0x00091b38 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dd08  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000634  0008debc  0008debc  0000eebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b24  0008e4f0  00090014  0000f4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  00091b38  00091b38  00011b38  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00011040  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001578  00000000  00000000  00011db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026202  00000000  00000000  00013330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000834e  00000000  00000000  00039532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015367  00000000  00000000  00041880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b24  00000000  00000000  00056be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002468  00000000  00000000  0005870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c422  00000000  00000000  0005ab74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00066f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00066fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ac34  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ac37  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ac43  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ac44  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ac45  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006ac50  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ac5b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0006ac66  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  0006ac6e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007c268  00000000  00000000  0006ac97  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008debc l    d  .rodata	00000000 .rodata
0008e4f0 l    d  .rwdata	00000000 .rwdata
00091b38 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00080cc8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
000811ac l     F .text	00000058 __sprint_r
0008df92 l     O .rodata	00000010 blanks.3452
0008df82 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0008e0a3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00083228 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084c50 l     F .text	00000058 std
00084d5c l     F .text	00000008 __fp_lock
00084d64 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008e4f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008ffe0 l     O .rwdata	00000004 charset
0008e248 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008e390 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00089184 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008aa68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008aac8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008abcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008acf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008add0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008af30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b1a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00090004 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008b488 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008eeac l     O .rwdata	00001060 jtag_uart_0
0008ff0c l     O .rwdata	000000c4 uart_0
0008b580 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008b7c0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008b9e8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0008c224 l     F .text	0000009c altera_avalon_uart_irq
0008c2c0 l     F .text	000000e0 altera_avalon_uart_rxirq
0008c3a0 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0008c78c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0008c9b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008cd94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008d1a4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008d2f4 l     F .text	000000f8 alt_file_locked
0008d578 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008dca4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008de58 l     F .text	00000040 alt_sim_halt
00086a40 g     F .text	00000094 _mprec_log10
00086b2c g     F .text	00000088 __any_on
00088358 g     F .text	00000070 _isatty_r
0008e368 g     O .rodata	00000028 __mprec_tinytens
0008af90 g     F .text	0000006c alt_main
00091b9c g     O .bss	00000100 alt_irq
000883c8 g     F .text	00000078 _lseek_r
00090014 g       *ABS*	00000000 __flash_rwdata_start
00089ca4 g     F .text	00000088 __eqdf2
0008026c g     F .text	00000080 lcd_data
00091e2c g       *ABS*	00000000 __alt_heap_start
00087d9c g     F .text	00000068 __sseek
00084cb8 g     F .text	000000a4 __sinit
000859c4 g     F .text	00000084 _setlocale_r
00084db8 g     F .text	0000009c __sfmoreglue
0008b01c g     F .text	00000020 __malloc_unlock
000864bc g     F .text	000000e0 memmove
00084da8 g     F .text	00000010 _cleanup
00086bb4 g     F .text	000000bc _Balloc
0008b03c g     F .text	00000040 alt_putstr
00089db4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000882e4 g     F .text	00000074 _fstat_r
00091b58 g     O .bss	00000004 errno
00091b60 g     O .bss	00000004 alt_argv
00097fd0 g       *ABS*	00000000 _gp
0008b334 g     F .text	00000030 usleep
0008ed2c g     O .rwdata	00000180 alt_fd_list
0008d79c g     F .text	00000094 alt_find_dev
0008641c g     F .text	000000a0 memcpy
00084d9c g     F .text	0000000c _cleanup_r
00089f4c g     F .text	000000f8 __floatsidf
0008d27c g     F .text	00000078 alt_io_redirect
00089ec4 g     F .text	00000088 __ltdf2
00091b3c g     O .bss	00000004 led_state
0008debc g       *ABS*	00000000 __DTOR_END__
00086990 g     F .text	000000b0 __ratio
0008bc00 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080e04 g     F .text	00000008 __udivsi3
0008ac2c g     F .text	000000c4 isatty
0008e278 g     O .rodata	000000c8 __mprec_tens
000859a0 g     F .text	00000008 __locale_charset
00091b4c g     O .bss	00000004 __malloc_top_pad
0008ffdc g     O .rwdata	00000004 __mb_cur_max
000859a8 g     F .text	0000000c _localeconv_r
00087318 g     F .text	0000003c __i2b
00085384 g     F .text	0000049c __sfvwrite_r
00087d24 g     F .text	00000070 _sbrk_r
00088440 g     F .text	00000078 _read_r
0008e8f0 g     O .rwdata	0000000c __lc_ctype
0008fffc g     O .rwdata	00000004 alt_max_fd
0008a768 g     F .text	00000138 __unpack_d
000881c0 g     F .text	00000110 _fclose_r
00084c1c g     F .text	00000034 fflush
00091b50 g     O .bss	00000004 __malloc_max_sbrked_mem
00089614 g     F .text	00000074 __adddf3
00086870 g     F .text	00000120 __b2d
00088b24 g     F .text	00000660 __umoddi3
0008ae3c g     F .text	000000f4 lseek
0008ffd8 g     O .rwdata	00000004 _global_impure_ptr
000876c0 g     F .text	000005f4 _realloc_r
00091e2c g       *ABS*	00000000 __bss_end
0008d0ac g     F .text	000000f8 alt_iic_isr_register
0008d670 g     F .text	0000010c alt_tick
000884b8 g     F .text	0000066c __udivdi3
0008e340 g     O .rodata	00000028 __mprec_bigtens
000875a0 g     F .text	00000120 __s2b
0008a11c g     F .text	00000194 __floatunsidf
00086790 g     F .text	00000060 __mcmp
0008c15c g     F .text	000000c8 altera_avalon_uart_init
0008ffd0 g     O .rwdata	00000004 __ctype_ptr
00084d84 g     F .text	00000018 __fp_lock_all
0008d064 g     F .text	00000048 alt_ic_irq_enabled
0008d5d8 g     F .text	00000098 alt_alarm_stop
00081188 g     F .text	00000024 strtol
00091b68 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008ed04 g     O .rwdata	00000028 alt_dev_null
0008ccc4 g     F .text	0000001c alt_dcache_flush_all
0008665c g     F .text	00000070 __hi0bits
0008a044 g     F .text	000000d8 __fixdfsi
00090014 g       *ABS*	00000000 __ram_rwdata_end
0008fff4 g     O .rwdata	00000008 alt_dev_list
0008b364 g     F .text	00000124 write
0008e4f0 g       *ABS*	00000000 __ram_rodata_end
0008aaf4 g     F .text	000000d8 fstat
00087480 g     F .text	00000120 __pow5mult
00091b40 g     O .bss	00000004 __nlocale_changed
00080e0c g     F .text	00000008 __umodsi3
00091e2c g       *ABS*	00000000 end
00080e4c g     F .text	0000000c _atoi_r
0008c7ec g     F .text	000001c8 altera_avalon_uart_write
0008b700 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008deb8 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008c0bc g     F .text	00000058 altera_avalon_uart_write_fd
0008a3d4 g     F .text	00000080 __clzsi2
0008c114 g     F .text	00000048 altera_avalon_uart_close_fd
0008be24 g     F .text	00000240 altera_avalon_jtag_uart_write
00084ca8 g     F .text	00000004 __sfp_lock_acquire
00086338 g     F .text	000000e4 memchr
00081204 g     F .text	00001ec4 ___vfprintf_internal_r
00080ed8 g     F .text	00000060 _sprintf_r
00085070 g     F .text	00000314 _free_r
000802ec g     F .text	00000088 lcd_string
0008dca8 g     F .text	000001b0 __call_exitprocs
00091b44 g     O .bss	00000004 __mlocale_changed
0008ffe8 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00091b6c g     O .bss	00000004 _alt_tick_rate
00086f78 g     F .text	0000014c __lshift
00091b70 g     O .bss	00000004 _alt_nticks
0008b07c g     F .text	00000124 read
0008b51c g     F .text	00000064 alt_sys_init
0008db70 g     F .text	00000134 __register_exitproc
000870c4 g     F .text	00000254 __multiply
0008ba98 g     F .text	00000074 altera_avalon_jtag_uart_close
00080e14 g     F .text	00000038 __mulsi3
0008e4f0 g       *ABS*	00000000 __ram_rwdata_start
0008debc g       *ABS*	00000000 __ram_rodata_start
00091b74 g     O .bss	00000028 __malloc_current_mallinfo
00086c70 g     F .text	0000017c __d2b
0008b5b8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008d950 g     F .text	000000d0 alt_get_fd
0008cb68 g     F .text	0000015c alt_busy_sleep
0008a8a0 g     F .text	000000c8 __fpcmp_parts_d
00088150 g     F .text	00000070 _close_r
0008dafc g     F .text	00000074 memcmp
0008b668 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00091e2c g       *ABS*	00000000 __alt_stack_base
0008b6b0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000830ec g     F .text	0000013c __swsetup_r
00089a4c g     F .text	00000258 __divdf3
00084e54 g     F .text	000000f0 __sfp
00086ad4 g     F .text	00000058 __copybits
0008e8fc g     O .rwdata	00000408 __malloc_av_
00084cb4 g     F .text	00000004 __sinit_lock_release
00089688 g     F .text	000003c4 __muldf3
00087e80 g     F .text	00000060 __sread
00091b38 g     O .bss	00000004 counter
0008d830 g     F .text	00000120 alt_find_file
0008cce0 g     F .text	000000b4 alt_dev_llist_insert
0008affc g     F .text	00000020 __malloc_lock
0008b278 g     F .text	000000bc sbrk
00084a20 g     F .text	000001fc _fflush_r
00088088 g     F .text	000000c8 _calloc_r
00091b38 g       *ABS*	00000000 __bss_start
0008659c g     F .text	00000098 memset
00080400 g     F .text	0000008c transmitString
00080374 g     F .text	0000008c lcd_init
000804f4 g     F .text	000007d4 main
00091b64 g     O .bss	00000004 alt_envp
00091b54 g     O .bss	00000004 __malloc_max_total_mem
0008b610 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00087d94 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
000882d0 g     F .text	00000014 fclose
00080f38 g     F .text	00000250 _strtol_r
00091c9c g     O .bss	00000190 _atexit0
0008346c g     F .text	000015b4 _dtoa_r
00085bf8 g     F .text	00000740 _malloc_r
00090000 g     O .rwdata	00000004 alt_errno
0008048c g     F .text	00000068 receiveChar
000858e8 g     F .text	000000b8 _fwalk
00080d44 g     F .text	00000060 __divsi3
0008e39c g     O .rodata	00000014 __thenan_df
00084f44 g     F .text	0000012c _malloc_trim_r
0008debc g       *ABS*	00000000 __CTOR_END__
00087ee0 g     F .text	000000bc strcmp
0008debc g       *ABS*	00000000 __flash_rodata_start
0008debc g       *ABS*	00000000 __DTOR_LIST__
00089d2c g     F .text	00000088 __nedf2
0008b4e8 g     F .text	00000034 alt_irq_init
0008b200 g     F .text	00000078 alt_release_fd
00080e64 g     F .text	00000074 sprintf
0008e3b0 g     O .rodata	00000100 __clz_tab
00091b48 g     O .bss	00000004 _PathLocale
0008da20 g     F .text	00000014 atexit
00088010 g     F .text	00000078 _write_r
00085a48 g     F .text	0000001c setlocale
0008ffd4 g     O .rwdata	00000004 _impure_ptr
00091b5c g     O .bss	00000004 alt_argc
0008ce58 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000867f0 g     F .text	00000080 __ulp
00087cb4 g     F .text	00000040 __isinfd
00084d6c g     F .text	00000018 __fp_unlock_all
0008ffec g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000859b4 g     F .text	00000010 localeconv
0008ced8 g     F .text	00000050 alt_ic_isr_register
00090014 g       *ABS*	00000000 _edata
0008c064 g     F .text	00000058 altera_avalon_uart_read_fd
00091e2c g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008bb0c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008da6c g     F .text	00000074 _fputs_r
0008cfc4 g     F .text	000000a0 alt_ic_irq_disable
00087e04 g     F .text	0000007c __swrite
0008ffe4 g     O .rwdata	00000004 __malloc_trim_threshold
0008d77c g     F .text	00000020 altera_nios2_qsys_irq_init
0008da34 g     F .text	00000038 exit
00085820 g     F .text	000000c8 _fwalk_reent
00086dec g     F .text	0000018c __mdiff
00080da4 g     F .text	00000060 __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084cac g     F .text	00000004 __sfp_lock_release
00080e58 g     F .text	0000000c atoi
0008dfa2 g     O .rodata	00000101 _ctype_
0008c4fc g     F .text	00000060 altera_avalon_uart_close
0008de98 g     F .text	00000020 _exit
00087cf4 g     F .text	00000030 __isnand
0008ca14 g     F .text	00000154 alt_alarm_start
0008a2b0 g     F .text	00000124 __muldi3
00085a64 g     F .text	00000194 __smakebuf_r
00087f9c g     F .text	00000074 strlen
0008d3ec g     F .text	0000018c open
00089e3c g     F .text	00000088 __gedf2
0008cebc g     F .text	0000001c alt_icache_flush_all
000801f0 g     F .text	0000007c lcd_command
0008dae0 g     F .text	0000001c fputs
00090008 g     O .rwdata	00000004 alt_priority_mask
0008cf28 g     F .text	0000009c alt_ic_irq_enable
000830c8 g     F .text	00000024 __vfprintf_internal
0008c55c g     F .text	00000230 altera_avalon_uart_read
00089594 g     F .text	00000080 __subdf3
000866cc g     F .text	000000c4 __lo0bits
0009000c g     O .rwdata	00000008 alt_alarm_list
0008cdf4 g     F .text	00000064 _do_ctors
0008a968 g     F .text	00000100 close
0008ad50 g     F .text	00000080 alt_load
0008a454 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084cb0 g     F .text	00000004 __sinit_lock_acquire
00087354 g     F .text	0000012c __multadd
00086634 g     F .text	00000028 _Bfree
0008debc g     O .rodata	00000010 hex_table



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c6e704 	addi	r3,r3,7068
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c6e704 	addi	r3,r3,7068
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec6a014 	ori	sp,sp,6784

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d69ff414 	ori	gp,gp,32720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	1086ce14 	ori	r2,r2,6968

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c78b14 	ori	r3,r3,7724

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008ad500 	call	8ad50 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008af900 	call	8af90 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <lcd_command>:

unsigned int counter = 0;
unsigned int led_state = 0;

// Ham gui lenh toi LCD
void lcd_command(char data) {
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	dfc00215 	stw	ra,8(sp)
   801f8:	df000115 	stw	fp,4(sp)
   801fc:	df000104 	addi	fp,sp,4
   80200:	e13fff05 	stb	r4,-4(fp)
    IOWR(LCD_RS_BASE, 0, 0x00);
   80204:	00800434 	movhi	r2,16
   80208:	10844804 	addi	r2,r2,4384
   8020c:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_RW_BASE, 0, 0x00);
   80210:	00800434 	movhi	r2,16
   80214:	10844c04 	addi	r2,r2,4400
   80218:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_DATA_BASE, 0, data);
   8021c:	e0ffff07 	ldb	r3,-4(fp)
   80220:	00800434 	movhi	r2,16
   80224:	10845004 	addi	r2,r2,4416
   80228:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_EN_BASE, 0, 0x01);
   8022c:	00c00434 	movhi	r3,16
   80230:	18c44404 	addi	r3,r3,4368
   80234:	00800044 	movi	r2,1
   80238:	18800035 	stwio	r2,0(r3)
    usleep(5);
   8023c:	01000144 	movi	r4,5
   80240:	008b3340 	call	8b334 <usleep>
    IOWR(LCD_EN_BASE, 0, 0x00);
   80244:	00800434 	movhi	r2,16
   80248:	10844404 	addi	r2,r2,4368
   8024c:	10000035 	stwio	zero,0(r2)
    usleep(5);
   80250:	01000144 	movi	r4,5
   80254:	008b3340 	call	8b334 <usleep>
}
   80258:	e037883a 	mov	sp,fp
   8025c:	dfc00117 	ldw	ra,4(sp)
   80260:	df000017 	ldw	fp,0(sp)
   80264:	dec00204 	addi	sp,sp,8
   80268:	f800283a 	ret

0008026c <lcd_data>:

// Ham gui du lieu toi LCD
void lcd_data(char data) {
   8026c:	defffd04 	addi	sp,sp,-12
   80270:	dfc00215 	stw	ra,8(sp)
   80274:	df000115 	stw	fp,4(sp)
   80278:	df000104 	addi	fp,sp,4
   8027c:	e13fff05 	stb	r4,-4(fp)
    IOWR(LCD_RS_BASE, 0, 0x01);
   80280:	00c00434 	movhi	r3,16
   80284:	18c44804 	addi	r3,r3,4384
   80288:	00800044 	movi	r2,1
   8028c:	18800035 	stwio	r2,0(r3)
    IOWR(LCD_RW_BASE, 0, 0x00);
   80290:	00800434 	movhi	r2,16
   80294:	10844c04 	addi	r2,r2,4400
   80298:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_DATA_BASE, 0, data);
   8029c:	e0ffff07 	ldb	r3,-4(fp)
   802a0:	00800434 	movhi	r2,16
   802a4:	10845004 	addi	r2,r2,4416
   802a8:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_EN_BASE, 0, 0x01);
   802ac:	00c00434 	movhi	r3,16
   802b0:	18c44404 	addi	r3,r3,4368
   802b4:	00800044 	movi	r2,1
   802b8:	18800035 	stwio	r2,0(r3)
    usleep(5);
   802bc:	01000144 	movi	r4,5
   802c0:	008b3340 	call	8b334 <usleep>
    IOWR(LCD_EN_BASE, 0, 0x00);
   802c4:	00800434 	movhi	r2,16
   802c8:	10844404 	addi	r2,r2,4368
   802cc:	10000035 	stwio	zero,0(r2)
    usleep(5);
   802d0:	01000144 	movi	r4,5
   802d4:	008b3340 	call	8b334 <usleep>
}
   802d8:	e037883a 	mov	sp,fp
   802dc:	dfc00117 	ldw	ra,4(sp)
   802e0:	df000017 	ldw	fp,0(sp)
   802e4:	dec00204 	addi	sp,sp,8
   802e8:	f800283a 	ret

000802ec <lcd_string>:

// Ham hien thi chuoi ky tu tren LCD
void lcd_string(char *str) {
   802ec:	defffc04 	addi	sp,sp,-16
   802f0:	dfc00315 	stw	ra,12(sp)
   802f4:	df000215 	stw	fp,8(sp)
   802f8:	df000204 	addi	fp,sp,8
   802fc:	e13fff15 	stw	r4,-4(fp)
    char i = 0;
   80300:	e03ffe05 	stb	zero,-8(fp)
    while (str[i] != 0) {
   80304:	00000c06 	br	80338 <lcd_string+0x4c>
        lcd_data(str[i]);
   80308:	e0bffe07 	ldb	r2,-8(fp)
   8030c:	1007883a 	mov	r3,r2
   80310:	e0bfff17 	ldw	r2,-4(fp)
   80314:	1885883a 	add	r2,r3,r2
   80318:	10800003 	ldbu	r2,0(r2)
   8031c:	11003fcc 	andi	r4,r2,255
   80320:	2100201c 	xori	r4,r4,128
   80324:	213fe004 	addi	r4,r4,-128
   80328:	008026c0 	call	8026c <lcd_data>
        i++;
   8032c:	e0bffe03 	ldbu	r2,-8(fp)
   80330:	10800044 	addi	r2,r2,1
   80334:	e0bffe05 	stb	r2,-8(fp)
}

// Ham hien thi chuoi ky tu tren LCD
void lcd_string(char *str) {
    char i = 0;
    while (str[i] != 0) {
   80338:	e0bffe07 	ldb	r2,-8(fp)
   8033c:	1007883a 	mov	r3,r2
   80340:	e0bfff17 	ldw	r2,-4(fp)
   80344:	1885883a 	add	r2,r3,r2
   80348:	10800003 	ldbu	r2,0(r2)
   8034c:	10803fcc 	andi	r2,r2,255
   80350:	1080201c 	xori	r2,r2,128
   80354:	10bfe004 	addi	r2,r2,-128
   80358:	1004c03a 	cmpne	r2,r2,zero
   8035c:	103fea1e 	bne	r2,zero,80308 <lcd_string+0x1c>
        lcd_data(str[i]);
        i++;
    }
}
   80360:	e037883a 	mov	sp,fp
   80364:	dfc00117 	ldw	ra,4(sp)
   80368:	df000017 	ldw	fp,0(sp)
   8036c:	dec00204 	addi	sp,sp,8
   80370:	f800283a 	ret

00080374 <lcd_init>:

// Ham khoi tao LCD
void lcd_init(void) {
   80374:	defffe04 	addi	sp,sp,-8
   80378:	dfc00115 	stw	ra,4(sp)
   8037c:	df000015 	stw	fp,0(sp)
   80380:	d839883a 	mov	fp,sp
    usleep(15000);          // Doi 15ms
   80384:	010ea604 	movi	r4,15000
   80388:	008b3340 	call	8b334 <usleep>
    lcd_command(0x38);      // Chon che do 8 bit, 2 dong
   8038c:	01000e04 	movi	r4,56
   80390:	00801f00 	call	801f0 <lcd_command>
    usleep(4100);           // Doi 4.1ms
   80394:	01040104 	movi	r4,4100
   80398:	008b3340 	call	8b334 <usleep>
    lcd_command(0x38);      // Lap lai lenh
   8039c:	01000e04 	movi	r4,56
   803a0:	00801f00 	call	801f0 <lcd_command>
    usleep(100);            // Doi 100us
   803a4:	01001904 	movi	r4,100
   803a8:	008b3340 	call	8b334 <usleep>
    lcd_command(0x38);      // Lap lai lenh
   803ac:	01000e04 	movi	r4,56
   803b0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);           // Doi 2ms
   803b4:	0101f404 	movi	r4,2000
   803b8:	008b3340 	call	8b334 <usleep>
    lcd_command(0x0C);      // Bat hien thi, tat con tro
   803bc:	01000304 	movi	r4,12
   803c0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);           // Doi 2ms
   803c4:	0101f404 	movi	r4,2000
   803c8:	008b3340 	call	8b334 <usleep>
    lcd_command(0x01);      // Xoa man hinh
   803cc:	01000044 	movi	r4,1
   803d0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);           // Doi 2ms
   803d4:	0101f404 	movi	r4,2000
   803d8:	008b3340 	call	8b334 <usleep>
    lcd_command(0x06);      // Dich con tro sang phai
   803dc:	01000184 	movi	r4,6
   803e0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);           // Doi 2ms
   803e4:	0101f404 	movi	r4,2000
   803e8:	008b3340 	call	8b334 <usleep>
}
   803ec:	e037883a 	mov	sp,fp
   803f0:	dfc00117 	ldw	ra,4(sp)
   803f4:	df000017 	ldw	fp,0(sp)
   803f8:	dec00204 	addi	sp,sp,8
   803fc:	f800283a 	ret

00080400 <transmitString>:

// Ham gui chuoi qua UART
void transmitString(char* mess) {
   80400:	defffd04 	addi	sp,sp,-12
   80404:	dfc00215 	stw	ra,8(sp)
   80408:	df000115 	stw	fp,4(sp)
   8040c:	df000104 	addi	fp,sp,4
   80410:	e13fff15 	stw	r4,-4(fp)
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
   80414:	00800204 	movi	r2,8
   80418:	10800037 	ldwio	r2,0(r2)
   8041c:	1080100c 	andi	r2,r2,64
   80420:	1005003a 	cmpeq	r2,r2,zero
   80424:	103ffb1e 	bne	r2,zero,80414 <transmitString+0x14>

    while (*mess) {
   80428:	00000c06 	br	8045c <transmitString+0x5c>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, *mess);
   8042c:	e0bfff17 	ldw	r2,-4(fp)
   80430:	10800003 	ldbu	r2,0(r2)
   80434:	10c03fcc 	andi	r3,r2,255
   80438:	18c0201c 	xori	r3,r3,128
   8043c:	18ffe004 	addi	r3,r3,-128
   80440:	00800104 	movi	r2,4
   80444:	10c00035 	stwio	r3,0(r2)
        mess++;
   80448:	e0bfff17 	ldw	r2,-4(fp)
   8044c:	10800044 	addi	r2,r2,1
   80450:	e0bfff15 	stw	r2,-4(fp)
        usleep(600);
   80454:	01009604 	movi	r4,600
   80458:	008b3340 	call	8b334 <usleep>

// Ham gui chuoi qua UART
void transmitString(char* mess) {
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));

    while (*mess) {
   8045c:	e0bfff17 	ldw	r2,-4(fp)
   80460:	10800003 	ldbu	r2,0(r2)
   80464:	10803fcc 	andi	r2,r2,255
   80468:	1080201c 	xori	r2,r2,128
   8046c:	10bfe004 	addi	r2,r2,-128
   80470:	1004c03a 	cmpne	r2,r2,zero
   80474:	103fed1e 	bne	r2,zero,8042c <transmitString+0x2c>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, *mess);
        mess++;
        usleep(600);
    }
}
   80478:	e037883a 	mov	sp,fp
   8047c:	dfc00117 	ldw	ra,4(sp)
   80480:	df000017 	ldw	fp,0(sp)
   80484:	dec00204 	addi	sp,sp,8
   80488:	f800283a 	ret

0008048c <receiveChar>:

// Ham nhan ky tu tu UART
char receiveChar() {
   8048c:	defffd04 	addi	sp,sp,-12
   80490:	df000215 	stw	fp,8(sp)
   80494:	df000204 	addi	fp,sp,8
    alt_u8 status;
    char buff;

    status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   80498:	00800204 	movi	r2,8
   8049c:	10800037 	ldwio	r2,0(r2)
   804a0:	e0bffe45 	stb	r2,-7(fp)

    if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
   804a4:	e0bffe43 	ldbu	r2,-7(fp)
   804a8:	10803fcc 	andi	r2,r2,255
   804ac:	1080201c 	xori	r2,r2,128
   804b0:	10bfe004 	addi	r2,r2,-128
   804b4:	1004403a 	cmpge	r2,r2,zero
   804b8:	1000081e 	bne	r2,zero,804dc <receiveChar+0x50>
        buff = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   804bc:	0005883a 	mov	r2,zero
   804c0:	10800037 	ldwio	r2,0(r2)
   804c4:	e0bffe05 	stb	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
   804c8:	00800204 	movi	r2,8
   804cc:	10000035 	stwio	zero,0(r2)
        return buff;
   804d0:	e0bffe07 	ldb	r2,-8(fp)
   804d4:	e0bfff15 	stw	r2,-4(fp)
   804d8:	00000106 	br	804e0 <receiveChar+0x54>
    }

    return '\0';
   804dc:	e03fff15 	stw	zero,-4(fp)
   804e0:	e0bfff17 	ldw	r2,-4(fp)
}
   804e4:	e037883a 	mov	sp,fp
   804e8:	df000017 	ldw	fp,0(sp)
   804ec:	dec00104 	addi	sp,sp,4
   804f0:	f800283a 	ret

000804f4 <main>:

int main() {
   804f4:	deffe604 	addi	sp,sp,-104
   804f8:	dfc01915 	stw	ra,100(sp)
   804fc:	df001815 	stw	fp,96(sp)
   80500:	df001804 	addi	fp,sp,96
    // Khoi tao bien thoi gian
    int hh = 23, mm = 59, ss = 30;          // Gio, phut, giay
   80504:	008005c4 	movi	r2,23
   80508:	e0bff415 	stw	r2,-48(fp)
   8050c:	00800ec4 	movi	r2,59
   80510:	e0bff315 	stw	r2,-52(fp)
   80514:	00800784 	movi	r2,30
   80518:	e0bff215 	stw	r2,-56(fp)
    int dd = 31, month = 12, year = 2025;   // Ngay, thang, nam
   8051c:	008007c4 	movi	r2,31
   80520:	e0bff115 	stw	r2,-60(fp)
   80524:	00800304 	movi	r2,12
   80528:	e0bff015 	stw	r2,-64(fp)
   8052c:	0081fa44 	movi	r2,2025
   80530:	e0bfef15 	stw	r2,-68(fp)
    char lcd_buffer[17];                    // Bo dem cho LCD (16 ky tu + null)
    char uart_buffer[9];                    // Bo dem cho UART (8 ky tu + null)
    int display_mode = 0;                   // Che do hien thi led: 0 = gio, 1 = ngay
   80534:	e03fee15 	stw	zero,-72(fp)
    int display_time = 0;                   // Dem thoi gian hien thi (giay)
   80538:	e03fed15 	stw	zero,-76(fp)
    int edit_mode = 0;                      // Che do chinh sua: 0 = binh thuong, 1 = ngay, 2 = gio
   8053c:	e03fec15 	stw	zero,-80(fp)
    char rx_buffer[10];                     // Bo dem nhan UART
    int rx_index = 0;                       // Chi so bo dem UART
   80540:	e03feb15 	stw	zero,-84(fp)
    int receiving = 0;                      // Trang thai nhan chuoi ($ bat dau)
   80544:	e03fea15 	stw	zero,-88(fp)

    // In thong bao khoi dong
    alt_putstr("Hello from Nios II!\n");
   80548:	01000274 	movhi	r4,9
   8054c:	2137b304 	addi	r4,r4,-8500
   80550:	008b03c0 	call	8b03c <alt_putstr>

    // Bat LCD
    IOWR(LCD_ON_BASE, 0, 0x01);
   80554:	00c00434 	movhi	r3,16
   80558:	18c44004 	addi	r3,r3,4352
   8055c:	00800044 	movi	r2,1
   80560:	18800035 	stwio	r2,0(r3)
    usleep(50000); // Doi 50ms
   80564:	0130d414 	movui	r4,50000
   80568:	008b3340 	call	8b334 <usleep>

    // Khoi tao LCD
    lcd_init();
   8056c:	00803740 	call	80374 <lcd_init>
   80570:	00000006 	br	80574 <main+0x80>

    while (1) {
        // Hien thi gio tren LCD (can giua)
        lcd_command(0x80); // Dat con tro dong 1
   80574:	013fe004 	movi	r4,-128
   80578:	00801f00 	call	801f0 <lcd_command>
        sprintf(lcd_buffer, "    %02d:%02d:%02d    ", hh, mm, ss); // 4 khoang trang truoc/sau
   8057c:	e13ff504 	addi	r4,fp,-44
   80580:	e0bff217 	ldw	r2,-56(fp)
   80584:	d8800015 	stw	r2,0(sp)
   80588:	01400274 	movhi	r5,9
   8058c:	2977b904 	addi	r5,r5,-8476
   80590:	e1bff417 	ldw	r6,-48(fp)
   80594:	e1fff317 	ldw	r7,-52(fp)
   80598:	0080e640 	call	80e64 <sprintf>
        lcd_string(lcd_buffer);
   8059c:	e13ff504 	addi	r4,fp,-44
   805a0:	00802ec0 	call	802ec <lcd_string>

        // Hien thi ngay thang nam tren LCD (can giua)
        lcd_command(0xC0); // Dat con tro dong 2
   805a4:	013ff004 	movi	r4,-64
   805a8:	00801f00 	call	801f0 <lcd_command>
        sprintf(lcd_buffer, "   %02d-%02d-%04d   ", dd, month, year); // 3 khoang trang truoc/sau
   805ac:	e13ff504 	addi	r4,fp,-44
   805b0:	e0bfef17 	ldw	r2,-68(fp)
   805b4:	d8800015 	stw	r2,0(sp)
   805b8:	01400274 	movhi	r5,9
   805bc:	2977bf04 	addi	r5,r5,-8452
   805c0:	e1bff117 	ldw	r6,-60(fp)
   805c4:	e1fff017 	ldw	r7,-64(fp)
   805c8:	0080e640 	call	80e64 <sprintf>
        lcd_string(lcd_buffer);
   805cc:	e13ff504 	addi	r4,fp,-44
   805d0:	00802ec0 	call	802ec <lcd_string>

        // Hien thi luan phien tren 8 led 7 doan
        if (display_mode == 0) {
   805d4:	e0bfee17 	ldw	r2,-72(fp)
   805d8:	1004c03a 	cmpne	r2,r2,zero
   805dc:	1000511e 	bne	r2,zero,80724 <main+0x230>
        	// Hien thi gio-phut-giay (HHMMSS__)
        	IOWR(LED8_BASE, 0, hex_table[hh / 10]);   // Gio - hang chuc
   805e0:	e13ff417 	ldw	r4,-48(fp)
   805e4:	01400284 	movi	r5,10
   805e8:	0080d440 	call	80d44 <__divsi3>
   805ec:	1007883a 	mov	r3,r2
   805f0:	00800274 	movhi	r2,9
   805f4:	10b7af04 	addi	r2,r2,-8516
   805f8:	10c5883a 	add	r2,r2,r3
   805fc:	10800003 	ldbu	r2,0(r2)
   80600:	10c03fcc 	andi	r3,r2,255
   80604:	00800434 	movhi	r2,16
   80608:	10842004 	addi	r2,r2,4224
   8060c:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED7_BASE, 0, hex_table[hh % 10]);   // Gio - hang don vi
   80610:	e13ff417 	ldw	r4,-48(fp)
   80614:	01400284 	movi	r5,10
   80618:	0080da40 	call	80da4 <__modsi3>
   8061c:	1007883a 	mov	r3,r2
   80620:	00800274 	movhi	r2,9
   80624:	10b7af04 	addi	r2,r2,-8516
   80628:	10c5883a 	add	r2,r2,r3
   8062c:	10800003 	ldbu	r2,0(r2)
   80630:	10c03fcc 	andi	r3,r2,255
   80634:	00800434 	movhi	r2,16
   80638:	10842404 	addi	r2,r2,4240
   8063c:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED6_BASE, 0, hex_table[mm / 10]);   // Phut - hang chuc
   80640:	e13ff317 	ldw	r4,-52(fp)
   80644:	01400284 	movi	r5,10
   80648:	0080d440 	call	80d44 <__divsi3>
   8064c:	1007883a 	mov	r3,r2
   80650:	00800274 	movhi	r2,9
   80654:	10b7af04 	addi	r2,r2,-8516
   80658:	10c5883a 	add	r2,r2,r3
   8065c:	10800003 	ldbu	r2,0(r2)
   80660:	10c03fcc 	andi	r3,r2,255
   80664:	00800434 	movhi	r2,16
   80668:	10842804 	addi	r2,r2,4256
   8066c:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED5_BASE, 0, hex_table[mm % 10]);   // Phut - hang don vi
   80670:	e13ff317 	ldw	r4,-52(fp)
   80674:	01400284 	movi	r5,10
   80678:	0080da40 	call	80da4 <__modsi3>
   8067c:	1007883a 	mov	r3,r2
   80680:	00800274 	movhi	r2,9
   80684:	10b7af04 	addi	r2,r2,-8516
   80688:	10c5883a 	add	r2,r2,r3
   8068c:	10800003 	ldbu	r2,0(r2)
   80690:	10c03fcc 	andi	r3,r2,255
   80694:	00800434 	movhi	r2,16
   80698:	10842c04 	addi	r2,r2,4272
   8069c:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED4_BASE, 0, hex_table[ss / 10]);   // Giay - hang chuc
   806a0:	e13ff217 	ldw	r4,-56(fp)
   806a4:	01400284 	movi	r5,10
   806a8:	0080d440 	call	80d44 <__divsi3>
   806ac:	1007883a 	mov	r3,r2
   806b0:	00800274 	movhi	r2,9
   806b4:	10b7af04 	addi	r2,r2,-8516
   806b8:	10c5883a 	add	r2,r2,r3
   806bc:	10800003 	ldbu	r2,0(r2)
   806c0:	10c03fcc 	andi	r3,r2,255
   806c4:	00800434 	movhi	r2,16
   806c8:	10843004 	addi	r2,r2,4288
   806cc:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED3_BASE, 0, hex_table[ss % 10]);   // Giay - hang don vi
   806d0:	e13ff217 	ldw	r4,-56(fp)
   806d4:	01400284 	movi	r5,10
   806d8:	0080da40 	call	80da4 <__modsi3>
   806dc:	1007883a 	mov	r3,r2
   806e0:	00800274 	movhi	r2,9
   806e4:	10b7af04 	addi	r2,r2,-8516
   806e8:	10c5883a 	add	r2,r2,r3
   806ec:	10800003 	ldbu	r2,0(r2)
   806f0:	10c03fcc 	andi	r3,r2,255
   806f4:	00800434 	movhi	r2,16
   806f8:	10843404 	addi	r2,r2,4304
   806fc:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED2_BASE, 0, 0xFF);                 // Tat led 6
   80700:	00c00434 	movhi	r3,16
   80704:	18c43804 	addi	r3,r3,4320
   80708:	00803fc4 	movi	r2,255
   8070c:	18800035 	stwio	r2,0(r3)
        	IOWR(LED1_BASE, 0, 0xFF);                 // Tat led 7
   80710:	00c00434 	movhi	r3,16
   80714:	18c43c04 	addi	r3,r3,4336
   80718:	00803fc4 	movi	r2,255
   8071c:	18800035 	stwio	r2,0(r3)
   80720:	00006606 	br	808bc <main+0x3c8>
        } else {
        	// Hien thi ngay-thang-nam (DDMMYYYY)
        	IOWR(LED8_BASE, 0, hex_table[dd / 10]);           // Ngay - hang chuc
   80724:	e13ff117 	ldw	r4,-60(fp)
   80728:	01400284 	movi	r5,10
   8072c:	0080d440 	call	80d44 <__divsi3>
   80730:	1007883a 	mov	r3,r2
   80734:	00800274 	movhi	r2,9
   80738:	10b7af04 	addi	r2,r2,-8516
   8073c:	10c5883a 	add	r2,r2,r3
   80740:	10800003 	ldbu	r2,0(r2)
   80744:	10c03fcc 	andi	r3,r2,255
   80748:	00800434 	movhi	r2,16
   8074c:	10842004 	addi	r2,r2,4224
   80750:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED7_BASE, 0, hex_table[dd % 10]);           // Ngay - hang don vi
   80754:	e13ff117 	ldw	r4,-60(fp)
   80758:	01400284 	movi	r5,10
   8075c:	0080da40 	call	80da4 <__modsi3>
   80760:	1007883a 	mov	r3,r2
   80764:	00800274 	movhi	r2,9
   80768:	10b7af04 	addi	r2,r2,-8516
   8076c:	10c5883a 	add	r2,r2,r3
   80770:	10800003 	ldbu	r2,0(r2)
   80774:	10c03fcc 	andi	r3,r2,255
   80778:	00800434 	movhi	r2,16
   8077c:	10842404 	addi	r2,r2,4240
   80780:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED6_BASE, 0, hex_table[month / 10]);        // Thang - hang chuc
   80784:	e13ff017 	ldw	r4,-64(fp)
   80788:	01400284 	movi	r5,10
   8078c:	0080d440 	call	80d44 <__divsi3>
   80790:	1007883a 	mov	r3,r2
   80794:	00800274 	movhi	r2,9
   80798:	10b7af04 	addi	r2,r2,-8516
   8079c:	10c5883a 	add	r2,r2,r3
   807a0:	10800003 	ldbu	r2,0(r2)
   807a4:	10c03fcc 	andi	r3,r2,255
   807a8:	00800434 	movhi	r2,16
   807ac:	10842804 	addi	r2,r2,4256
   807b0:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED5_BASE, 0, hex_table[month % 10]);        // Thang - hang don vi
   807b4:	e13ff017 	ldw	r4,-64(fp)
   807b8:	01400284 	movi	r5,10
   807bc:	0080da40 	call	80da4 <__modsi3>
   807c0:	1007883a 	mov	r3,r2
   807c4:	00800274 	movhi	r2,9
   807c8:	10b7af04 	addi	r2,r2,-8516
   807cc:	10c5883a 	add	r2,r2,r3
   807d0:	10800003 	ldbu	r2,0(r2)
   807d4:	10c03fcc 	andi	r3,r2,255
   807d8:	00800434 	movhi	r2,16
   807dc:	10842c04 	addi	r2,r2,4272
   807e0:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED4_BASE, 0, hex_table[year / 1000]);       // Nam - hang nghin
   807e4:	e13fef17 	ldw	r4,-68(fp)
   807e8:	0140fa04 	movi	r5,1000
   807ec:	0080d440 	call	80d44 <__divsi3>
   807f0:	1007883a 	mov	r3,r2
   807f4:	00800274 	movhi	r2,9
   807f8:	10b7af04 	addi	r2,r2,-8516
   807fc:	10c5883a 	add	r2,r2,r3
   80800:	10800003 	ldbu	r2,0(r2)
   80804:	10c03fcc 	andi	r3,r2,255
   80808:	00800434 	movhi	r2,16
   8080c:	10843004 	addi	r2,r2,4288
   80810:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED3_BASE, 0, hex_table[(year / 100) % 10]); // Nam - hang tram
   80814:	e13fef17 	ldw	r4,-68(fp)
   80818:	01401904 	movi	r5,100
   8081c:	0080d440 	call	80d44 <__divsi3>
   80820:	1009883a 	mov	r4,r2
   80824:	01400284 	movi	r5,10
   80828:	0080da40 	call	80da4 <__modsi3>
   8082c:	1007883a 	mov	r3,r2
   80830:	00800274 	movhi	r2,9
   80834:	10b7af04 	addi	r2,r2,-8516
   80838:	10c5883a 	add	r2,r2,r3
   8083c:	10800003 	ldbu	r2,0(r2)
   80840:	10c03fcc 	andi	r3,r2,255
   80844:	00800434 	movhi	r2,16
   80848:	10843404 	addi	r2,r2,4304
   8084c:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED2_BASE, 0, hex_table[(year / 10) % 10]);  // Nam - hang chuc
   80850:	e13fef17 	ldw	r4,-68(fp)
   80854:	01400284 	movi	r5,10
   80858:	0080d440 	call	80d44 <__divsi3>
   8085c:	1009883a 	mov	r4,r2
   80860:	01400284 	movi	r5,10
   80864:	0080da40 	call	80da4 <__modsi3>
   80868:	1007883a 	mov	r3,r2
   8086c:	00800274 	movhi	r2,9
   80870:	10b7af04 	addi	r2,r2,-8516
   80874:	10c5883a 	add	r2,r2,r3
   80878:	10800003 	ldbu	r2,0(r2)
   8087c:	10c03fcc 	andi	r3,r2,255
   80880:	00800434 	movhi	r2,16
   80884:	10843804 	addi	r2,r2,4320
   80888:	10c00035 	stwio	r3,0(r2)
        	IOWR(LED1_BASE, 0, hex_table[year % 10]);         // Nam - hang don vi         // Nam - hang don vi
   8088c:	e13fef17 	ldw	r4,-68(fp)
   80890:	01400284 	movi	r5,10
   80894:	0080da40 	call	80da4 <__modsi3>
   80898:	1007883a 	mov	r3,r2
   8089c:	00800274 	movhi	r2,9
   808a0:	10b7af04 	addi	r2,r2,-8516
   808a4:	10c5883a 	add	r2,r2,r3
   808a8:	10800003 	ldbu	r2,0(r2)
   808ac:	10c03fcc 	andi	r3,r2,255
   808b0:	00800434 	movhi	r2,16
   808b4:	10843c04 	addi	r2,r2,4336
   808b8:	10c00035 	stwio	r3,0(r2)
        }

        // Gui ngay thang nam qua UART (DDMMYYYY)
        sprintf(uart_buffer, "%02d%02d%04d", dd, month, year); // Tao chuoi 8 so
   808bc:	e13ff944 	addi	r4,fp,-27
   808c0:	e0bfef17 	ldw	r2,-68(fp)
   808c4:	d8800015 	stw	r2,0(sp)
   808c8:	01400274 	movhi	r5,9
   808cc:	2977c504 	addi	r5,r5,-8428
   808d0:	e1bff117 	ldw	r6,-60(fp)
   808d4:	e1fff017 	ldw	r7,-64(fp)
   808d8:	0080e640 	call	80e64 <sprintf>
        transmitString(uart_buffer); // Gui qua UART
   808dc:	e13ff944 	addi	r4,fp,-27
   808e0:	00804000 	call	80400 <transmitString>

        // Nhan ky tu tu UART
        char rxData = receiveChar();
   808e4:	008048c0 	call	8048c <receiveChar>
   808e8:	e0bfe905 	stb	r2,-92(fp)
        if (rxData != '\0') {
   808ec:	e0bfe907 	ldb	r2,-92(fp)
   808f0:	1005003a 	cmpeq	r2,r2,zero
   808f4:	10008c1e 	bne	r2,zero,80b28 <main+0x634>
            if (edit_mode == 0) {
   808f8:	e0bfec17 	ldw	r2,-80(fp)
   808fc:	1004c03a 	cmpne	r2,r2,zero
   80900:	10001c1e 	bne	r2,zero,80974 <main+0x480>
                // Che do binh thuong: Kiem tra lenh S hoac D
                if (rxData == 'S') {
   80904:	e0bfe907 	ldb	r2,-92(fp)
   80908:	108014d8 	cmpnei	r2,r2,83
   8090c:	10000b1e 	bne	r2,zero,8093c <main+0x448>
                    edit_mode = 1; // Chuyen sang chinh ngay
   80910:	00800044 	movi	r2,1
   80914:	e0bfec15 	stw	r2,-80(fp)
                    rx_index = 0;  // Reset bo dem
   80918:	e03feb15 	stw	zero,-84(fp)
                    receiving = 0; // Chua nhan $
   8091c:	e03fea15 	stw	zero,-88(fp)
                    memset(rx_buffer, 0, sizeof(rx_buffer)); // Xoa bo dem
   80920:	e0bffb84 	addi	r2,fp,-18
   80924:	1000000d 	sth	zero,0(r2)
   80928:	1000008d 	sth	zero,2(r2)
   8092c:	1000010d 	sth	zero,4(r2)
   80930:	1000018d 	sth	zero,6(r2)
   80934:	1000020d 	sth	zero,8(r2)
   80938:	00007b06 	br	80b28 <main+0x634>
                } else if (rxData == 'D') {
   8093c:	e0bfe907 	ldb	r2,-92(fp)
   80940:	10801118 	cmpnei	r2,r2,68
   80944:	1000781e 	bne	r2,zero,80b28 <main+0x634>
                    edit_mode = 2; // Chuyen sang chinh gio
   80948:	00800084 	movi	r2,2
   8094c:	e0bfec15 	stw	r2,-80(fp)
                    rx_index = 0;  // Reset bo dem
   80950:	e03feb15 	stw	zero,-84(fp)
                    receiving = 0; // Chua nhan $
   80954:	e03fea15 	stw	zero,-88(fp)
                    memset(rx_buffer, 0, sizeof(rx_buffer)); // Xoa bo dem
   80958:	e0bffb84 	addi	r2,fp,-18
   8095c:	1000000d 	sth	zero,0(r2)
   80960:	1000008d 	sth	zero,2(r2)
   80964:	1000010d 	sth	zero,4(r2)
   80968:	1000018d 	sth	zero,6(r2)
   8096c:	1000020d 	sth	zero,8(r2)
   80970:	00006d06 	br	80b28 <main+0x634>
                }
            } else {
                // Che do chinh sua: Xu ly chuoi $....%
                if (rxData == '$') {
   80974:	e0bfe907 	ldb	r2,-92(fp)
   80978:	10800918 	cmpnei	r2,r2,36
   8097c:	10000a1e 	bne	r2,zero,809a8 <main+0x4b4>
                    receiving = 1; // Bat dau nhan chuoi
   80980:	00800044 	movi	r2,1
   80984:	e0bfea15 	stw	r2,-88(fp)
                    rx_index = 0;  // Reset chi so
   80988:	e03feb15 	stw	zero,-84(fp)
                    memset(rx_buffer, 0, sizeof(rx_buffer)); // Xoa bo dem
   8098c:	e0bffb84 	addi	r2,fp,-18
   80990:	1000000d 	sth	zero,0(r2)
   80994:	1000008d 	sth	zero,2(r2)
   80998:	1000010d 	sth	zero,4(r2)
   8099c:	1000018d 	sth	zero,6(r2)
   809a0:	1000020d 	sth	zero,8(r2)
   809a4:	00006006 	br	80b28 <main+0x634>
                } else if (rxData == '%' && receiving) {
   809a8:	e0bfe907 	ldb	r2,-92(fp)
   809ac:	10800958 	cmpnei	r2,r2,37
   809b0:	10004f1e 	bne	r2,zero,80af0 <main+0x5fc>
   809b4:	e0bfea17 	ldw	r2,-88(fp)
   809b8:	1005003a 	cmpeq	r2,r2,zero
   809bc:	10004c1e 	bne	r2,zero,80af0 <main+0x5fc>
                    // Ket thuc chuoi, xu ly du lieu
                    if (edit_mode == 1 && rx_index == 8) {
   809c0:	e0bfec17 	ldw	r2,-80(fp)
   809c4:	10800058 	cmpnei	r2,r2,1
   809c8:	1000271e 	bne	r2,zero,80a68 <main+0x574>
   809cc:	e0bfeb17 	ldw	r2,-84(fp)
   809d0:	10800218 	cmpnei	r2,r2,8
   809d4:	1000241e 	bne	r2,zero,80a68 <main+0x574>
                        // Chinh ngay-thang-nam: DDMMYYYY
                        char temp[3] = {0};
   809d8:	e03ffe0d 	sth	zero,-8(fp)
   809dc:	e03ffe85 	stb	zero,-6(fp)
                        // Lay ngay
                        temp[0] = rx_buffer[0];
   809e0:	e0bffb83 	ldbu	r2,-18(fp)
   809e4:	e0bffe05 	stb	r2,-8(fp)
                        temp[1] = rx_buffer[1];
   809e8:	e0bffbc3 	ldbu	r2,-17(fp)
   809ec:	e0bffe45 	stb	r2,-7(fp)
                        dd = atoi(temp);
   809f0:	e13ffe04 	addi	r4,fp,-8
   809f4:	0080e580 	call	80e58 <atoi>
   809f8:	e0bff115 	stw	r2,-60(fp)
                        // Lay thang
                        temp[0] = rx_buffer[2];
   809fc:	e0bffc03 	ldbu	r2,-16(fp)
   80a00:	e0bffe05 	stb	r2,-8(fp)
                        temp[1] = rx_buffer[3];
   80a04:	e0bffc43 	ldbu	r2,-15(fp)
   80a08:	e0bffe45 	stb	r2,-7(fp)
                        month = atoi(temp);
   80a0c:	e13ffe04 	addi	r4,fp,-8
   80a10:	0080e580 	call	80e58 <atoi>
   80a14:	e0bff015 	stw	r2,-64(fp)
                        // Lay nam
                        temp[0] = rx_buffer[4];
   80a18:	e0bffc83 	ldbu	r2,-14(fp)
   80a1c:	e0bffe05 	stb	r2,-8(fp)
                        temp[1] = rx_buffer[5];
   80a20:	e0bffcc3 	ldbu	r2,-13(fp)
   80a24:	e0bffe45 	stb	r2,-7(fp)
                        temp[2] = rx_buffer[6];
   80a28:	e0bffd03 	ldbu	r2,-12(fp)
   80a2c:	e0bffe85 	stb	r2,-6(fp)
                        year = atoi(temp) * 10 + (rx_buffer[7] - '0');
   80a30:	e13ffe04 	addi	r4,fp,-8
   80a34:	0080e580 	call	80e58 <atoi>
   80a38:	1009883a 	mov	r4,r2
   80a3c:	01400284 	movi	r5,10
   80a40:	0080e140 	call	80e14 <__mulsi3>
   80a44:	1007883a 	mov	r3,r2
   80a48:	e0bffd43 	ldbu	r2,-11(fp)
   80a4c:	10803fcc 	andi	r2,r2,255
   80a50:	1080201c 	xori	r2,r2,128
   80a54:	10bfe004 	addi	r2,r2,-128
   80a58:	1885883a 	add	r2,r3,r2
   80a5c:	10bff404 	addi	r2,r2,-48
   80a60:	e0bfef15 	stw	r2,-68(fp)
                    receiving = 1; // Bat dau nhan chuoi
                    rx_index = 0;  // Reset chi so
                    memset(rx_buffer, 0, sizeof(rx_buffer)); // Xoa bo dem
                } else if (rxData == '%' && receiving) {
                    // Ket thuc chuoi, xu ly du lieu
                    if (edit_mode == 1 && rx_index == 8) {
   80a64:	00001e06 	br	80ae0 <main+0x5ec>
                        // Lay nam
                        temp[0] = rx_buffer[4];
                        temp[1] = rx_buffer[5];
                        temp[2] = rx_buffer[6];
                        year = atoi(temp) * 10 + (rx_buffer[7] - '0');
                    } else if (edit_mode == 2 && rx_index == 6) {
   80a68:	e0bfec17 	ldw	r2,-80(fp)
   80a6c:	10800098 	cmpnei	r2,r2,2
   80a70:	10001b1e 	bne	r2,zero,80ae0 <main+0x5ec>
   80a74:	e0bfeb17 	ldw	r2,-84(fp)
   80a78:	10800198 	cmpnei	r2,r2,6
   80a7c:	1000181e 	bne	r2,zero,80ae0 <main+0x5ec>
                        // Chinh gio-phut-giay: HHMMSS
                        char temp[3] = {0};
   80a80:	e03ffec5 	stb	zero,-5(fp)
   80a84:	e03fff05 	stb	zero,-4(fp)
   80a88:	e03fff45 	stb	zero,-3(fp)
                        // Lay gio
                        temp[0] = rx_buffer[0];
   80a8c:	e0bffb83 	ldbu	r2,-18(fp)
   80a90:	e0bffec5 	stb	r2,-5(fp)
                        temp[1] = rx_buffer[1];
   80a94:	e0bffbc3 	ldbu	r2,-17(fp)
   80a98:	e0bfff05 	stb	r2,-4(fp)
                        hh = atoi(temp);
   80a9c:	e13ffec4 	addi	r4,fp,-5
   80aa0:	0080e580 	call	80e58 <atoi>
   80aa4:	e0bff415 	stw	r2,-48(fp)
                        // Lay phut
                        temp[0] = rx_buffer[2];
   80aa8:	e0bffc03 	ldbu	r2,-16(fp)
   80aac:	e0bffec5 	stb	r2,-5(fp)
                        temp[1] = rx_buffer[3];
   80ab0:	e0bffc43 	ldbu	r2,-15(fp)
   80ab4:	e0bfff05 	stb	r2,-4(fp)
                        mm = atoi(temp);
   80ab8:	e13ffec4 	addi	r4,fp,-5
   80abc:	0080e580 	call	80e58 <atoi>
   80ac0:	e0bff315 	stw	r2,-52(fp)
                        // Lay giay
                        temp[0] = rx_buffer[4];
   80ac4:	e0bffc83 	ldbu	r2,-14(fp)
   80ac8:	e0bffec5 	stb	r2,-5(fp)
                        temp[1] = rx_buffer[5];
   80acc:	e0bffcc3 	ldbu	r2,-13(fp)
   80ad0:	e0bfff05 	stb	r2,-4(fp)
                        ss = atoi(temp);
   80ad4:	e13ffec4 	addi	r4,fp,-5
   80ad8:	0080e580 	call	80e58 <atoi>
   80adc:	e0bff215 	stw	r2,-56(fp)
                    }
                    edit_mode = 0; // Thoat che do chinh sua
   80ae0:	e03fec15 	stw	zero,-80(fp)
                    receiving = 0; // Reset trang thai
   80ae4:	e03fea15 	stw	zero,-88(fp)
                    rx_index = 0;  // Reset chi so
   80ae8:	e03feb15 	stw	zero,-84(fp)
                // Che do chinh sua: Xu ly chuoi $....%
                if (rxData == '$') {
                    receiving = 1; // Bat dau nhan chuoi
                    rx_index = 0;  // Reset chi so
                    memset(rx_buffer, 0, sizeof(rx_buffer)); // Xoa bo dem
                } else if (rxData == '%' && receiving) {
   80aec:	00000e06 	br	80b28 <main+0x634>
                        ss = atoi(temp);
                    }
                    edit_mode = 0; // Thoat che do chinh sua
                    receiving = 0; // Reset trang thai
                    rx_index = 0;  // Reset chi so
                } else if (receiving && rx_index < 10) {
   80af0:	e0bfea17 	ldw	r2,-88(fp)
   80af4:	1005003a 	cmpeq	r2,r2,zero
   80af8:	10000b1e 	bne	r2,zero,80b28 <main+0x634>
   80afc:	e0bfeb17 	ldw	r2,-84(fp)
   80b00:	10800288 	cmpgei	r2,r2,10
   80b04:	1000081e 	bne	r2,zero,80b28 <main+0x634>
                    // Luu ky tu vao bo dem
                    rx_buffer[rx_index++] = rxData;
   80b08:	e0ffeb17 	ldw	r3,-84(fp)
   80b0c:	e0bffb84 	addi	r2,fp,-18
   80b10:	10c7883a 	add	r3,r2,r3
   80b14:	e0bfe903 	ldbu	r2,-92(fp)
   80b18:	18800005 	stb	r2,0(r3)
   80b1c:	e0bfeb17 	ldw	r2,-84(fp)
   80b20:	10800044 	addi	r2,r2,1
   80b24:	e0bfeb15 	stw	r2,-84(fp)
                }
            }
        }

        // Cap nhat thoi gian va chuyen che do hien thi
        usleep(1000000); // Doi 1 giay
   80b28:	010003f4 	movhi	r4,15
   80b2c:	21109004 	addi	r4,r4,16960
   80b30:	008b3340 	call	8b334 <usleep>
        if (edit_mode == 0) {
   80b34:	e0bfec17 	ldw	r2,-80(fp)
   80b38:	1004c03a 	cmpne	r2,r2,zero
   80b3c:	1000031e 	bne	r2,zero,80b4c <main+0x658>
            ss++; // Tang giay (chi khi khong chinh sua)
   80b40:	e0bff217 	ldw	r2,-56(fp)
   80b44:	10800044 	addi	r2,r2,1
   80b48:	e0bff215 	stw	r2,-56(fp)
        }
        display_time++; // Tang bo dem thoi gian hien thi
   80b4c:	e0bfed17 	ldw	r2,-76(fp)
   80b50:	10800044 	addi	r2,r2,1
   80b54:	e0bfed15 	stw	r2,-76(fp)

        // Chuyen doi che do hien thi
        if (display_mode == 0 && display_time >= 10) {
   80b58:	e0bfee17 	ldw	r2,-72(fp)
   80b5c:	1004c03a 	cmpne	r2,r2,zero
   80b60:	1000071e 	bne	r2,zero,80b80 <main+0x68c>
   80b64:	e0bfed17 	ldw	r2,-76(fp)
   80b68:	10800290 	cmplti	r2,r2,10
   80b6c:	1000041e 	bne	r2,zero,80b80 <main+0x68c>
            display_mode = 1; // Chuyen sang ngay-thang-nam
   80b70:	00800044 	movi	r2,1
   80b74:	e0bfee15 	stw	r2,-72(fp)
            display_time = 0; // Reset bo dem
   80b78:	e03fed15 	stw	zero,-76(fp)
            ss++; // Tang giay (chi khi khong chinh sua)
        }
        display_time++; // Tang bo dem thoi gian hien thi

        // Chuyen doi che do hien thi
        if (display_mode == 0 && display_time >= 10) {
   80b7c:	00000806 	br	80ba0 <main+0x6ac>
            display_mode = 1; // Chuyen sang ngay-thang-nam
            display_time = 0; // Reset bo dem
        } else if (display_mode == 1 && display_time >= 2) {
   80b80:	e0bfee17 	ldw	r2,-72(fp)
   80b84:	10800058 	cmpnei	r2,r2,1
   80b88:	1000051e 	bne	r2,zero,80ba0 <main+0x6ac>
   80b8c:	e0bfed17 	ldw	r2,-76(fp)
   80b90:	10800090 	cmplti	r2,r2,2
   80b94:	1000021e 	bne	r2,zero,80ba0 <main+0x6ac>
            display_mode = 0; // Chuyen sang gio-phut-giay
   80b98:	e03fee15 	stw	zero,-72(fp)
            display_time = 0; // Reset bo dem
   80b9c:	e03fed15 	stw	zero,-76(fp)
        }

        // Cap nhat gio, phut, ngay
        if (edit_mode == 0) {
   80ba0:	e0bfec17 	ldw	r2,-80(fp)
   80ba4:	1004c03a 	cmpne	r2,r2,zero
   80ba8:	103e721e 	bne	r2,zero,80574 <main+0x80>
            if (ss >= 60) {
   80bac:	e0bff217 	ldw	r2,-56(fp)
   80bb0:	10800f10 	cmplti	r2,r2,60
   80bb4:	1000041e 	bne	r2,zero,80bc8 <main+0x6d4>
                ss = 0; // Reset giay
   80bb8:	e03ff215 	stw	zero,-56(fp)
                mm++;   // Tang phut
   80bbc:	e0bff317 	ldw	r2,-52(fp)
   80bc0:	10800044 	addi	r2,r2,1
   80bc4:	e0bff315 	stw	r2,-52(fp)
            }
            if (mm >= 60) {
   80bc8:	e0bff317 	ldw	r2,-52(fp)
   80bcc:	10800f10 	cmplti	r2,r2,60
   80bd0:	1000041e 	bne	r2,zero,80be4 <main+0x6f0>
                mm = 0; // Reset phut
   80bd4:	e03ff315 	stw	zero,-52(fp)
                hh++;   // Tang gio
   80bd8:	e0bff417 	ldw	r2,-48(fp)
   80bdc:	10800044 	addi	r2,r2,1
   80be0:	e0bff415 	stw	r2,-48(fp)
            }
            if (hh >= 24) {
   80be4:	e0bff417 	ldw	r2,-48(fp)
   80be8:	10800610 	cmplti	r2,r2,24
   80bec:	1000041e 	bne	r2,zero,80c00 <main+0x70c>
                hh = 0; // Reset gio
   80bf0:	e03ff415 	stw	zero,-48(fp)
                dd++;   // Tang ngay
   80bf4:	e0bff117 	ldw	r2,-60(fp)
   80bf8:	10800044 	addi	r2,r2,1
   80bfc:	e0bff115 	stw	r2,-60(fp)
            }

            // Cap nhat ngay, thang, nam
            if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
   80c00:	e0bff017 	ldw	r2,-64(fp)
   80c04:	10800120 	cmpeqi	r2,r2,4
   80c08:	1000091e 	bne	r2,zero,80c30 <main+0x73c>
   80c0c:	e0bff017 	ldw	r2,-64(fp)
   80c10:	108001a0 	cmpeqi	r2,r2,6
   80c14:	1000061e 	bne	r2,zero,80c30 <main+0x73c>
   80c18:	e0bff017 	ldw	r2,-64(fp)
   80c1c:	10800260 	cmpeqi	r2,r2,9
   80c20:	1000031e 	bne	r2,zero,80c30 <main+0x73c>
   80c24:	e0bff017 	ldw	r2,-64(fp)
   80c28:	108002d8 	cmpnei	r2,r2,11
   80c2c:	1000091e 	bne	r2,zero,80c54 <main+0x760>
   80c30:	e0bff117 	ldw	r2,-60(fp)
   80c34:	108007d0 	cmplti	r2,r2,31
   80c38:	1000061e 	bne	r2,zero,80c54 <main+0x760>
                dd = 1;    // Reset ngay
   80c3c:	00800044 	movi	r2,1
   80c40:	e0bff115 	stw	r2,-60(fp)
                month++;   // Tang thang
   80c44:	e0bff017 	ldw	r2,-64(fp)
   80c48:	10800044 	addi	r2,r2,1
   80c4c:	e0bff015 	stw	r2,-64(fp)
                hh = 0; // Reset gio
                dd++;   // Tang ngay
            }

            // Cap nhat ngay, thang, nam
            if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
   80c50:	00001406 	br	80ca4 <main+0x7b0>
                dd = 1;    // Reset ngay
                month++;   // Tang thang
            } else if (month == 2) {
   80c54:	e0bff017 	ldw	r2,-64(fp)
   80c58:	10800098 	cmpnei	r2,r2,2
   80c5c:	1000091e 	bne	r2,zero,80c84 <main+0x790>
                if (dd > 28) {
   80c60:	e0bff117 	ldw	r2,-60(fp)
   80c64:	10800750 	cmplti	r2,r2,29
   80c68:	10000e1e 	bne	r2,zero,80ca4 <main+0x7b0>
                    dd = 1;    // Reset ngay
   80c6c:	00800044 	movi	r2,1
   80c70:	e0bff115 	stw	r2,-60(fp)
                    month++;   // Tang thang
   80c74:	e0bff017 	ldw	r2,-64(fp)
   80c78:	10800044 	addi	r2,r2,1
   80c7c:	e0bff015 	stw	r2,-64(fp)
   80c80:	00000806 	br	80ca4 <main+0x7b0>
                }
            } else if (dd > 31) {
   80c84:	e0bff117 	ldw	r2,-60(fp)
   80c88:	10800810 	cmplti	r2,r2,32
   80c8c:	1000051e 	bne	r2,zero,80ca4 <main+0x7b0>
                dd = 1;    // Reset ngay
   80c90:	00800044 	movi	r2,1
   80c94:	e0bff115 	stw	r2,-60(fp)
                month++;   // Tang thang
   80c98:	e0bff017 	ldw	r2,-64(fp)
   80c9c:	10800044 	addi	r2,r2,1
   80ca0:	e0bff015 	stw	r2,-64(fp)
            }

            if (month > 12) {
   80ca4:	e0bff017 	ldw	r2,-64(fp)
   80ca8:	10800350 	cmplti	r2,r2,13
   80cac:	103e311e 	bne	r2,zero,80574 <main+0x80>
                month = 1; // Reset thang
   80cb0:	00800044 	movi	r2,1
   80cb4:	e0bff015 	stw	r2,-64(fp)
                year++;    // Tang nam
   80cb8:	e0bfef17 	ldw	r2,-68(fp)
   80cbc:	10800044 	addi	r2,r2,1
   80cc0:	e0bfef15 	stw	r2,-68(fp)
            }
        }
    }
   80cc4:	003e2b06 	br	80574 <main+0x80>

00080cc8 <udivmodsi4>:
   80cc8:	29001b2e 	bgeu	r5,r4,80d38 <udivmodsi4+0x70>
   80ccc:	28001a16 	blt	r5,zero,80d38 <udivmodsi4+0x70>
   80cd0:	00800044 	movi	r2,1
   80cd4:	0007883a 	mov	r3,zero
   80cd8:	01c007c4 	movi	r7,31
   80cdc:	00000306 	br	80cec <udivmodsi4+0x24>
   80ce0:	19c01326 	beq	r3,r7,80d30 <udivmodsi4+0x68>
   80ce4:	18c00044 	addi	r3,r3,1
   80ce8:	28000416 	blt	r5,zero,80cfc <udivmodsi4+0x34>
   80cec:	294b883a 	add	r5,r5,r5
   80cf0:	1085883a 	add	r2,r2,r2
   80cf4:	293ffa36 	bltu	r5,r4,80ce0 <udivmodsi4+0x18>
   80cf8:	10000d26 	beq	r2,zero,80d30 <udivmodsi4+0x68>
   80cfc:	0007883a 	mov	r3,zero
   80d00:	21400236 	bltu	r4,r5,80d0c <udivmodsi4+0x44>
   80d04:	2149c83a 	sub	r4,r4,r5
   80d08:	1886b03a 	or	r3,r3,r2
   80d0c:	1004d07a 	srli	r2,r2,1
   80d10:	280ad07a 	srli	r5,r5,1
   80d14:	103ffa1e 	bne	r2,zero,80d00 <udivmodsi4+0x38>
   80d18:	30000226 	beq	r6,zero,80d24 <udivmodsi4+0x5c>
   80d1c:	2005883a 	mov	r2,r4
   80d20:	f800283a 	ret
   80d24:	1809883a 	mov	r4,r3
   80d28:	2005883a 	mov	r2,r4
   80d2c:	f800283a 	ret
   80d30:	0007883a 	mov	r3,zero
   80d34:	003ff806 	br	80d18 <udivmodsi4+0x50>
   80d38:	00800044 	movi	r2,1
   80d3c:	0007883a 	mov	r3,zero
   80d40:	003fef06 	br	80d00 <udivmodsi4+0x38>

00080d44 <__divsi3>:
   80d44:	defffe04 	addi	sp,sp,-8
   80d48:	dc000015 	stw	r16,0(sp)
   80d4c:	dfc00115 	stw	ra,4(sp)
   80d50:	0021883a 	mov	r16,zero
   80d54:	20000c16 	blt	r4,zero,80d88 <__divsi3+0x44>
   80d58:	000d883a 	mov	r6,zero
   80d5c:	28000e16 	blt	r5,zero,80d98 <__divsi3+0x54>
   80d60:	0080cc80 	call	80cc8 <udivmodsi4>
   80d64:	1007883a 	mov	r3,r2
   80d68:	8005003a 	cmpeq	r2,r16,zero
   80d6c:	1000011e 	bne	r2,zero,80d74 <__divsi3+0x30>
   80d70:	00c7c83a 	sub	r3,zero,r3
   80d74:	1805883a 	mov	r2,r3
   80d78:	dfc00117 	ldw	ra,4(sp)
   80d7c:	dc000017 	ldw	r16,0(sp)
   80d80:	dec00204 	addi	sp,sp,8
   80d84:	f800283a 	ret
   80d88:	0109c83a 	sub	r4,zero,r4
   80d8c:	04000044 	movi	r16,1
   80d90:	000d883a 	mov	r6,zero
   80d94:	283ff20e 	bge	r5,zero,80d60 <__divsi3+0x1c>
   80d98:	014bc83a 	sub	r5,zero,r5
   80d9c:	8021003a 	cmpeq	r16,r16,zero
   80da0:	003fef06 	br	80d60 <__divsi3+0x1c>

00080da4 <__modsi3>:
   80da4:	deffff04 	addi	sp,sp,-4
   80da8:	dfc00015 	stw	ra,0(sp)
   80dac:	01800044 	movi	r6,1
   80db0:	2807883a 	mov	r3,r5
   80db4:	20000416 	blt	r4,zero,80dc8 <__modsi3+0x24>
   80db8:	28000c16 	blt	r5,zero,80dec <__modsi3+0x48>
   80dbc:	dfc00017 	ldw	ra,0(sp)
   80dc0:	dec00104 	addi	sp,sp,4
   80dc4:	0080cc81 	jmpi	80cc8 <udivmodsi4>
   80dc8:	0109c83a 	sub	r4,zero,r4
   80dcc:	28000b16 	blt	r5,zero,80dfc <__modsi3+0x58>
   80dd0:	180b883a 	mov	r5,r3
   80dd4:	01800044 	movi	r6,1
   80dd8:	0080cc80 	call	80cc8 <udivmodsi4>
   80ddc:	0085c83a 	sub	r2,zero,r2
   80de0:	dfc00017 	ldw	ra,0(sp)
   80de4:	dec00104 	addi	sp,sp,4
   80de8:	f800283a 	ret
   80dec:	014bc83a 	sub	r5,zero,r5
   80df0:	dfc00017 	ldw	ra,0(sp)
   80df4:	dec00104 	addi	sp,sp,4
   80df8:	0080cc81 	jmpi	80cc8 <udivmodsi4>
   80dfc:	0147c83a 	sub	r3,zero,r5
   80e00:	003ff306 	br	80dd0 <__modsi3+0x2c>

00080e04 <__udivsi3>:
   80e04:	000d883a 	mov	r6,zero
   80e08:	0080cc81 	jmpi	80cc8 <udivmodsi4>

00080e0c <__umodsi3>:
   80e0c:	01800044 	movi	r6,1
   80e10:	0080cc81 	jmpi	80cc8 <udivmodsi4>

00080e14 <__mulsi3>:
   80e14:	20000a26 	beq	r4,zero,80e40 <__mulsi3+0x2c>
   80e18:	0007883a 	mov	r3,zero
   80e1c:	2080004c 	andi	r2,r4,1
   80e20:	1005003a 	cmpeq	r2,r2,zero
   80e24:	2008d07a 	srli	r4,r4,1
   80e28:	1000011e 	bne	r2,zero,80e30 <__mulsi3+0x1c>
   80e2c:	1947883a 	add	r3,r3,r5
   80e30:	294b883a 	add	r5,r5,r5
   80e34:	203ff91e 	bne	r4,zero,80e1c <__mulsi3+0x8>
   80e38:	1805883a 	mov	r2,r3
   80e3c:	f800283a 	ret
   80e40:	0007883a 	mov	r3,zero
   80e44:	1805883a 	mov	r2,r3
   80e48:	f800283a 	ret

00080e4c <_atoi_r>:
   80e4c:	000d883a 	mov	r6,zero
   80e50:	01c00284 	movi	r7,10
   80e54:	0080f381 	jmpi	80f38 <_strtol_r>

00080e58 <atoi>:
   80e58:	000b883a 	mov	r5,zero
   80e5c:	01800284 	movi	r6,10
   80e60:	00811881 	jmpi	81188 <strtol>

00080e64 <sprintf>:
   80e64:	deffe504 	addi	sp,sp,-108
   80e68:	2013883a 	mov	r9,r4
   80e6c:	dfc01815 	stw	ra,96(sp)
   80e70:	d9801915 	stw	r6,100(sp)
   80e74:	d9c01a15 	stw	r7,104(sp)
   80e78:	d8801904 	addi	r2,sp,100
   80e7c:	d8800015 	stw	r2,0(sp)
   80e80:	00800274 	movhi	r2,9
   80e84:	10bff504 	addi	r2,r2,-44
   80e88:	11000017 	ldw	r4,0(r2)
   80e8c:	d9c00017 	ldw	r7,0(sp)
   80e90:	00808204 	movi	r2,520
   80e94:	00e00034 	movhi	r3,32768
   80e98:	18ffffc4 	addi	r3,r3,-1
   80e9c:	280d883a 	mov	r6,r5
   80ea0:	d880040d 	sth	r2,16(sp)
   80ea4:	d9400104 	addi	r5,sp,4
   80ea8:	00bfffc4 	movi	r2,-1
   80eac:	d8c00615 	stw	r3,24(sp)
   80eb0:	d8c00315 	stw	r3,12(sp)
   80eb4:	da400515 	stw	r9,20(sp)
   80eb8:	d880048d 	sth	r2,18(sp)
   80ebc:	da400115 	stw	r9,4(sp)
   80ec0:	00812040 	call	81204 <___vfprintf_internal_r>
   80ec4:	d8c00117 	ldw	r3,4(sp)
   80ec8:	18000005 	stb	zero,0(r3)
   80ecc:	dfc01817 	ldw	ra,96(sp)
   80ed0:	dec01b04 	addi	sp,sp,108
   80ed4:	f800283a 	ret

00080ed8 <_sprintf_r>:
   80ed8:	deffe604 	addi	sp,sp,-104
   80edc:	2813883a 	mov	r9,r5
   80ee0:	dfc01815 	stw	ra,96(sp)
   80ee4:	d9c01915 	stw	r7,100(sp)
   80ee8:	d8801904 	addi	r2,sp,100
   80eec:	d8800015 	stw	r2,0(sp)
   80ef0:	100f883a 	mov	r7,r2
   80ef4:	00808204 	movi	r2,520
   80ef8:	00e00034 	movhi	r3,32768
   80efc:	18ffffc4 	addi	r3,r3,-1
   80f00:	d880040d 	sth	r2,16(sp)
   80f04:	d9400104 	addi	r5,sp,4
   80f08:	00bfffc4 	movi	r2,-1
   80f0c:	d8c00615 	stw	r3,24(sp)
   80f10:	d8c00315 	stw	r3,12(sp)
   80f14:	da400515 	stw	r9,20(sp)
   80f18:	d880048d 	sth	r2,18(sp)
   80f1c:	da400115 	stw	r9,4(sp)
   80f20:	00812040 	call	81204 <___vfprintf_internal_r>
   80f24:	d8c00117 	ldw	r3,4(sp)
   80f28:	18000005 	stb	zero,0(r3)
   80f2c:	dfc01817 	ldw	ra,96(sp)
   80f30:	dec01a04 	addi	sp,sp,104
   80f34:	f800283a 	ret

00080f38 <_strtol_r>:
   80f38:	defff304 	addi	sp,sp,-52
   80f3c:	00800274 	movhi	r2,9
   80f40:	10bff404 	addi	r2,r2,-48
   80f44:	dd000715 	stw	r20,28(sp)
   80f48:	15000017 	ldw	r20,0(r2)
   80f4c:	ddc00a15 	stw	r23,40(sp)
   80f50:	dc800515 	stw	r18,20(sp)
   80f54:	dc400415 	stw	r17,16(sp)
   80f58:	dfc00c15 	stw	ra,48(sp)
   80f5c:	df000b15 	stw	fp,44(sp)
   80f60:	dd800915 	stw	r22,36(sp)
   80f64:	dd400815 	stw	r21,32(sp)
   80f68:	dcc00615 	stw	r19,24(sp)
   80f6c:	dc000315 	stw	r16,12(sp)
   80f70:	282f883a 	mov	r23,r5
   80f74:	d9000115 	stw	r4,4(sp)
   80f78:	d9800215 	stw	r6,8(sp)
   80f7c:	3825883a 	mov	r18,r7
   80f80:	2823883a 	mov	r17,r5
   80f84:	8c000007 	ldb	r16,0(r17)
   80f88:	8c400044 	addi	r17,r17,1
   80f8c:	a407883a 	add	r3,r20,r16
   80f90:	18800003 	ldbu	r2,0(r3)
   80f94:	1080020c 	andi	r2,r2,8
   80f98:	103ffa1e 	bne	r2,zero,80f84 <_strtol_r+0x4c>
   80f9c:	00800b44 	movi	r2,45
   80fa0:	80805c26 	beq	r16,r2,81114 <_strtol_r+0x1dc>
   80fa4:	00800ac4 	movi	r2,43
   80fa8:	80805726 	beq	r16,r2,81108 <_strtol_r+0x1d0>
   80fac:	d8000015 	stw	zero,0(sp)
   80fb0:	9007003a 	cmpeq	r3,r18,zero
   80fb4:	1800431e 	bne	r3,zero,810c4 <_strtol_r+0x18c>
   80fb8:	00800404 	movi	r2,16
   80fbc:	90804126 	beq	r18,r2,810c4 <_strtol_r+0x18c>
   80fc0:	902b883a 	mov	r21,r18
   80fc4:	d8c00017 	ldw	r3,0(sp)
   80fc8:	1838c03a 	cmpne	fp,r3,zero
   80fcc:	e0004a1e 	bne	fp,zero,810f8 <_strtol_r+0x1c0>
   80fd0:	04e00034 	movhi	r19,32768
   80fd4:	9cffffc4 	addi	r19,r19,-1
   80fd8:	9809883a 	mov	r4,r19
   80fdc:	a80b883a 	mov	r5,r21
   80fe0:	0080e0c0 	call	80e0c <__umodsi3>
   80fe4:	9809883a 	mov	r4,r19
   80fe8:	a80b883a 	mov	r5,r21
   80fec:	102d883a 	mov	r22,r2
   80ff0:	0080e040 	call	80e04 <__udivsi3>
   80ff4:	1027883a 	mov	r19,r2
   80ff8:	a405883a 	add	r2,r20,r16
   80ffc:	11400003 	ldbu	r5,0(r2)
   81000:	0009883a 	mov	r4,zero
   81004:	000d883a 	mov	r6,zero
   81008:	28c0010c 	andi	r3,r5,4
   8100c:	18000f26 	beq	r3,zero,8104c <_strtol_r+0x114>
   81010:	843ff404 	addi	r16,r16,-48
   81014:	8480150e 	bge	r16,r18,8106c <_strtol_r+0x134>
   81018:	30003216 	blt	r6,zero,810e4 <_strtol_r+0x1ac>
   8101c:	99003136 	bltu	r19,r4,810e4 <_strtol_r+0x1ac>
   81020:	24c02f26 	beq	r4,r19,810e0 <_strtol_r+0x1a8>
   81024:	a80b883a 	mov	r5,r21
   81028:	0080e140 	call	80e14 <__mulsi3>
   8102c:	1409883a 	add	r4,r2,r16
   81030:	01800044 	movi	r6,1
   81034:	8c000007 	ldb	r16,0(r17)
   81038:	8c400044 	addi	r17,r17,1
   8103c:	a405883a 	add	r2,r20,r16
   81040:	11400003 	ldbu	r5,0(r2)
   81044:	28c0010c 	andi	r3,r5,4
   81048:	183ff11e 	bne	r3,zero,81010 <_strtol_r+0xd8>
   8104c:	288000cc 	andi	r2,r5,3
   81050:	10000626 	beq	r2,zero,8106c <_strtol_r+0x134>
   81054:	2880004c 	andi	r2,r5,1
   81058:	1005003a 	cmpeq	r2,r2,zero
   8105c:	1000231e 	bne	r2,zero,810ec <_strtol_r+0x1b4>
   81060:	00800dc4 	movi	r2,55
   81064:	80a1c83a 	sub	r16,r16,r2
   81068:	84bfeb16 	blt	r16,r18,81018 <_strtol_r+0xe0>
   8106c:	30002e16 	blt	r6,zero,81128 <_strtol_r+0x1f0>
   81070:	e000231e 	bne	fp,zero,81100 <_strtol_r+0x1c8>
   81074:	2007883a 	mov	r3,r4
   81078:	d8800217 	ldw	r2,8(sp)
   8107c:	10000426 	beq	r2,zero,81090 <_strtol_r+0x158>
   81080:	30000126 	beq	r6,zero,81088 <_strtol_r+0x150>
   81084:	8dffffc4 	addi	r23,r17,-1
   81088:	d9000217 	ldw	r4,8(sp)
   8108c:	25c00015 	stw	r23,0(r4)
   81090:	1805883a 	mov	r2,r3
   81094:	dfc00c17 	ldw	ra,48(sp)
   81098:	df000b17 	ldw	fp,44(sp)
   8109c:	ddc00a17 	ldw	r23,40(sp)
   810a0:	dd800917 	ldw	r22,36(sp)
   810a4:	dd400817 	ldw	r21,32(sp)
   810a8:	dd000717 	ldw	r20,28(sp)
   810ac:	dcc00617 	ldw	r19,24(sp)
   810b0:	dc800517 	ldw	r18,20(sp)
   810b4:	dc400417 	ldw	r17,16(sp)
   810b8:	dc000317 	ldw	r16,12(sp)
   810bc:	dec00d04 	addi	sp,sp,52
   810c0:	f800283a 	ret
   810c4:	00800c04 	movi	r2,48
   810c8:	80801f26 	beq	r16,r2,81148 <_strtol_r+0x210>
   810cc:	183fbc26 	beq	r3,zero,80fc0 <_strtol_r+0x88>
   810d0:	00800c04 	movi	r2,48
   810d4:	80802926 	beq	r16,r2,8117c <_strtol_r+0x244>
   810d8:	04800284 	movi	r18,10
   810dc:	003fb806 	br	80fc0 <_strtol_r+0x88>
   810e0:	b43fd00e 	bge	r22,r16,81024 <_strtol_r+0xec>
   810e4:	01bfffc4 	movi	r6,-1
   810e8:	003fd206 	br	81034 <_strtol_r+0xfc>
   810ec:	008015c4 	movi	r2,87
   810f0:	80a1c83a 	sub	r16,r16,r2
   810f4:	003fdc06 	br	81068 <_strtol_r+0x130>
   810f8:	04e00034 	movhi	r19,32768
   810fc:	003fb606 	br	80fd8 <_strtol_r+0xa0>
   81100:	0107c83a 	sub	r3,zero,r4
   81104:	003fdc06 	br	81078 <_strtol_r+0x140>
   81108:	8c000007 	ldb	r16,0(r17)
   8110c:	8c400044 	addi	r17,r17,1
   81110:	003fa606 	br	80fac <_strtol_r+0x74>
   81114:	8c000007 	ldb	r16,0(r17)
   81118:	00800044 	movi	r2,1
   8111c:	8c400044 	addi	r17,r17,1
   81120:	d8800015 	stw	r2,0(sp)
   81124:	003fa206 	br	80fb0 <_strtol_r+0x78>
   81128:	d9000017 	ldw	r4,0(sp)
   8112c:	2005003a 	cmpeq	r2,r4,zero
   81130:	10000f1e 	bne	r2,zero,81170 <_strtol_r+0x238>
   81134:	00e00034 	movhi	r3,32768
   81138:	d9000117 	ldw	r4,4(sp)
   8113c:	00800884 	movi	r2,34
   81140:	20800015 	stw	r2,0(r4)
   81144:	003fcc06 	br	81078 <_strtol_r+0x140>
   81148:	89000007 	ldb	r4,0(r17)
   8114c:	00801e04 	movi	r2,120
   81150:	20800226 	beq	r4,r2,8115c <_strtol_r+0x224>
   81154:	00801604 	movi	r2,88
   81158:	20bfdc1e 	bne	r4,r2,810cc <_strtol_r+0x194>
   8115c:	8c000047 	ldb	r16,1(r17)
   81160:	04800404 	movi	r18,16
   81164:	8c400084 	addi	r17,r17,2
   81168:	902b883a 	mov	r21,r18
   8116c:	003f9506 	br	80fc4 <_strtol_r+0x8c>
   81170:	00e00034 	movhi	r3,32768
   81174:	18ffffc4 	addi	r3,r3,-1
   81178:	003fef06 	br	81138 <_strtol_r+0x200>
   8117c:	04800204 	movi	r18,8
   81180:	902b883a 	mov	r21,r18
   81184:	003f8f06 	br	80fc4 <_strtol_r+0x8c>

00081188 <strtol>:
   81188:	00800274 	movhi	r2,9
   8118c:	10bff504 	addi	r2,r2,-44
   81190:	2013883a 	mov	r9,r4
   81194:	11000017 	ldw	r4,0(r2)
   81198:	2805883a 	mov	r2,r5
   8119c:	300f883a 	mov	r7,r6
   811a0:	480b883a 	mov	r5,r9
   811a4:	100d883a 	mov	r6,r2
   811a8:	0080f381 	jmpi	80f38 <_strtol_r>

000811ac <__sprint_r>:
   811ac:	30800217 	ldw	r2,8(r6)
   811b0:	defffe04 	addi	sp,sp,-8
   811b4:	dc000015 	stw	r16,0(sp)
   811b8:	dfc00115 	stw	ra,4(sp)
   811bc:	3021883a 	mov	r16,r6
   811c0:	0007883a 	mov	r3,zero
   811c4:	1000061e 	bne	r2,zero,811e0 <__sprint_r+0x34>
   811c8:	1805883a 	mov	r2,r3
   811cc:	30000115 	stw	zero,4(r6)
   811d0:	dfc00117 	ldw	ra,4(sp)
   811d4:	dc000017 	ldw	r16,0(sp)
   811d8:	dec00204 	addi	sp,sp,8
   811dc:	f800283a 	ret
   811e0:	00853840 	call	85384 <__sfvwrite_r>
   811e4:	1007883a 	mov	r3,r2
   811e8:	1805883a 	mov	r2,r3
   811ec:	80000115 	stw	zero,4(r16)
   811f0:	80000215 	stw	zero,8(r16)
   811f4:	dfc00117 	ldw	ra,4(sp)
   811f8:	dc000017 	ldw	r16,0(sp)
   811fc:	dec00204 	addi	sp,sp,8
   81200:	f800283a 	ret

00081204 <___vfprintf_internal_r>:
   81204:	defea404 	addi	sp,sp,-1392
   81208:	dd815815 	stw	r22,1376(sp)
   8120c:	dc015215 	stw	r16,1352(sp)
   81210:	d9c15115 	stw	r7,1348(sp)
   81214:	dfc15b15 	stw	ra,1388(sp)
   81218:	df015a15 	stw	fp,1384(sp)
   8121c:	ddc15915 	stw	r23,1380(sp)
   81220:	dd415715 	stw	r21,1372(sp)
   81224:	dd015615 	stw	r20,1368(sp)
   81228:	dcc15515 	stw	r19,1364(sp)
   8122c:	dc815415 	stw	r18,1360(sp)
   81230:	dc415315 	stw	r17,1356(sp)
   81234:	282d883a 	mov	r22,r5
   81238:	3021883a 	mov	r16,r6
   8123c:	d9014f15 	stw	r4,1340(sp)
   81240:	00859a80 	call	859a8 <_localeconv_r>
   81244:	10800017 	ldw	r2,0(r2)
   81248:	d9c15117 	ldw	r7,1348(sp)
   8124c:	d8814915 	stw	r2,1316(sp)
   81250:	d8814f17 	ldw	r2,1340(sp)
   81254:	10000226 	beq	r2,zero,81260 <___vfprintf_internal_r+0x5c>
   81258:	10800e17 	ldw	r2,56(r2)
   8125c:	10020d26 	beq	r2,zero,81a94 <___vfprintf_internal_r+0x890>
   81260:	b080030b 	ldhu	r2,12(r22)
   81264:	1080020c 	andi	r2,r2,8
   81268:	10020e26 	beq	r2,zero,81aa4 <___vfprintf_internal_r+0x8a0>
   8126c:	b0800417 	ldw	r2,16(r22)
   81270:	10020c26 	beq	r2,zero,81aa4 <___vfprintf_internal_r+0x8a0>
   81274:	b200030b 	ldhu	r8,12(r22)
   81278:	00800284 	movi	r2,10
   8127c:	40c0068c 	andi	r3,r8,26
   81280:	18802f1e 	bne	r3,r2,81340 <___vfprintf_internal_r+0x13c>
   81284:	b080038f 	ldh	r2,14(r22)
   81288:	10002d16 	blt	r2,zero,81340 <___vfprintf_internal_r+0x13c>
   8128c:	b240038b 	ldhu	r9,14(r22)
   81290:	b2800717 	ldw	r10,28(r22)
   81294:	b2c00917 	ldw	r11,36(r22)
   81298:	d9014f17 	ldw	r4,1340(sp)
   8129c:	dc402904 	addi	r17,sp,164
   812a0:	d8804004 	addi	r2,sp,256
   812a4:	00c10004 	movi	r3,1024
   812a8:	423fff4c 	andi	r8,r8,65533
   812ac:	800d883a 	mov	r6,r16
   812b0:	880b883a 	mov	r5,r17
   812b4:	da002c0d 	sth	r8,176(sp)
   812b8:	da402c8d 	sth	r9,178(sp)
   812bc:	da803015 	stw	r10,192(sp)
   812c0:	dac03215 	stw	r11,200(sp)
   812c4:	d8802d15 	stw	r2,180(sp)
   812c8:	d8c02e15 	stw	r3,184(sp)
   812cc:	d8802915 	stw	r2,164(sp)
   812d0:	d8c02b15 	stw	r3,172(sp)
   812d4:	d8002f15 	stw	zero,188(sp)
   812d8:	00812040 	call	81204 <___vfprintf_internal_r>
   812dc:	d8814b15 	stw	r2,1324(sp)
   812e0:	10000416 	blt	r2,zero,812f4 <___vfprintf_internal_r+0xf0>
   812e4:	d9014f17 	ldw	r4,1340(sp)
   812e8:	880b883a 	mov	r5,r17
   812ec:	0084a200 	call	84a20 <_fflush_r>
   812f0:	1002321e 	bne	r2,zero,81bbc <___vfprintf_internal_r+0x9b8>
   812f4:	d8802c0b 	ldhu	r2,176(sp)
   812f8:	1080100c 	andi	r2,r2,64
   812fc:	10000326 	beq	r2,zero,8130c <___vfprintf_internal_r+0x108>
   81300:	b080030b 	ldhu	r2,12(r22)
   81304:	10801014 	ori	r2,r2,64
   81308:	b080030d 	sth	r2,12(r22)
   8130c:	d8814b17 	ldw	r2,1324(sp)
   81310:	dfc15b17 	ldw	ra,1388(sp)
   81314:	df015a17 	ldw	fp,1384(sp)
   81318:	ddc15917 	ldw	r23,1380(sp)
   8131c:	dd815817 	ldw	r22,1376(sp)
   81320:	dd415717 	ldw	r21,1372(sp)
   81324:	dd015617 	ldw	r20,1368(sp)
   81328:	dcc15517 	ldw	r19,1364(sp)
   8132c:	dc815417 	ldw	r18,1360(sp)
   81330:	dc415317 	ldw	r17,1356(sp)
   81334:	dc015217 	ldw	r16,1352(sp)
   81338:	dec15c04 	addi	sp,sp,1392
   8133c:	f800283a 	ret
   81340:	0005883a 	mov	r2,zero
   81344:	0007883a 	mov	r3,zero
   81348:	dd401904 	addi	r21,sp,100
   8134c:	d8814215 	stw	r2,1288(sp)
   81350:	802f883a 	mov	r23,r16
   81354:	d8c14315 	stw	r3,1292(sp)
   81358:	d8014b15 	stw	zero,1324(sp)
   8135c:	d8014815 	stw	zero,1312(sp)
   81360:	d8014415 	stw	zero,1296(sp)
   81364:	d8014715 	stw	zero,1308(sp)
   81368:	dd400c15 	stw	r21,48(sp)
   8136c:	d8000e15 	stw	zero,56(sp)
   81370:	d8000d15 	stw	zero,52(sp)
   81374:	b8800007 	ldb	r2,0(r23)
   81378:	10001926 	beq	r2,zero,813e0 <___vfprintf_internal_r+0x1dc>
   8137c:	00c00944 	movi	r3,37
   81380:	10c01726 	beq	r2,r3,813e0 <___vfprintf_internal_r+0x1dc>
   81384:	b821883a 	mov	r16,r23
   81388:	00000106 	br	81390 <___vfprintf_internal_r+0x18c>
   8138c:	10c00326 	beq	r2,r3,8139c <___vfprintf_internal_r+0x198>
   81390:	84000044 	addi	r16,r16,1
   81394:	80800007 	ldb	r2,0(r16)
   81398:	103ffc1e 	bne	r2,zero,8138c <___vfprintf_internal_r+0x188>
   8139c:	85e7c83a 	sub	r19,r16,r23
   813a0:	98000e26 	beq	r19,zero,813dc <___vfprintf_internal_r+0x1d8>
   813a4:	dc800e17 	ldw	r18,56(sp)
   813a8:	dc400d17 	ldw	r17,52(sp)
   813ac:	008001c4 	movi	r2,7
   813b0:	94e5883a 	add	r18,r18,r19
   813b4:	8c400044 	addi	r17,r17,1
   813b8:	adc00015 	stw	r23,0(r21)
   813bc:	dc800e15 	stw	r18,56(sp)
   813c0:	acc00115 	stw	r19,4(r21)
   813c4:	dc400d15 	stw	r17,52(sp)
   813c8:	14428b16 	blt	r2,r17,81df8 <___vfprintf_internal_r+0xbf4>
   813cc:	ad400204 	addi	r21,r21,8
   813d0:	d9014b17 	ldw	r4,1324(sp)
   813d4:	24c9883a 	add	r4,r4,r19
   813d8:	d9014b15 	stw	r4,1324(sp)
   813dc:	802f883a 	mov	r23,r16
   813e0:	b8800007 	ldb	r2,0(r23)
   813e4:	10013c26 	beq	r2,zero,818d8 <___vfprintf_internal_r+0x6d4>
   813e8:	bdc00044 	addi	r23,r23,1
   813ec:	d8000405 	stb	zero,16(sp)
   813f0:	b8c00007 	ldb	r3,0(r23)
   813f4:	04ffffc4 	movi	r19,-1
   813f8:	d8014c15 	stw	zero,1328(sp)
   813fc:	d8014a15 	stw	zero,1320(sp)
   81400:	d8c14d15 	stw	r3,1332(sp)
   81404:	bdc00044 	addi	r23,r23,1
   81408:	d9414d17 	ldw	r5,1332(sp)
   8140c:	00801604 	movi	r2,88
   81410:	28fff804 	addi	r3,r5,-32
   81414:	10c06036 	bltu	r2,r3,81598 <___vfprintf_internal_r+0x394>
   81418:	18c5883a 	add	r2,r3,r3
   8141c:	1085883a 	add	r2,r2,r2
   81420:	00c00234 	movhi	r3,8
   81424:	18c50d04 	addi	r3,r3,5172
   81428:	10c5883a 	add	r2,r2,r3
   8142c:	11000017 	ldw	r4,0(r2)
   81430:	2000683a 	jmp	r4
   81434:	000823a8 	cmpgeui	zero,zero,8334
   81438:	00081598 	cmpnei	zero,zero,8278
   8143c:	00081598 	cmpnei	zero,zero,8278
   81440:	00082394 	movui	zero,8334
   81444:	00081598 	cmpnei	zero,zero,8278
   81448:	00081598 	cmpnei	zero,zero,8278
   8144c:	00081598 	cmpnei	zero,zero,8278
   81450:	00081598 	cmpnei	zero,zero,8278
   81454:	00081598 	cmpnei	zero,zero,8278
   81458:	00081598 	cmpnei	zero,zero,8278
   8145c:	00082174 	movhi	zero,8325
   81460:	00082384 	movi	zero,8334
   81464:	00081598 	cmpnei	zero,zero,8278
   81468:	0008218c 	andi	zero,zero,8326
   8146c:	0008242c 	andhi	zero,zero,8336
   81470:	00081598 	cmpnei	zero,zero,8278
   81474:	00082418 	cmpnei	zero,zero,8336
   81478:	000823d4 	movui	zero,8335
   8147c:	000823d4 	movui	zero,8335
   81480:	000823d4 	movui	zero,8335
   81484:	000823d4 	movui	zero,8335
   81488:	000823d4 	movui	zero,8335
   8148c:	000823d4 	movui	zero,8335
   81490:	000823d4 	movui	zero,8335
   81494:	000823d4 	movui	zero,8335
   81498:	000823d4 	movui	zero,8335
   8149c:	00081598 	cmpnei	zero,zero,8278
   814a0:	00081598 	cmpnei	zero,zero,8278
   814a4:	00081598 	cmpnei	zero,zero,8278
   814a8:	00081598 	cmpnei	zero,zero,8278
   814ac:	00081598 	cmpnei	zero,zero,8278
   814b0:	00081598 	cmpnei	zero,zero,8278
   814b4:	00081598 	cmpnei	zero,zero,8278
   814b8:	00081598 	cmpnei	zero,zero,8278
   814bc:	00081598 	cmpnei	zero,zero,8278
   814c0:	00081598 	cmpnei	zero,zero,8278
   814c4:	00081bf0 	cmpltui	zero,zero,8303
   814c8:	0008225c 	xori	zero,zero,8329
   814cc:	00081598 	cmpnei	zero,zero,8278
   814d0:	0008225c 	xori	zero,zero,8329
   814d4:	00081598 	cmpnei	zero,zero,8278
   814d8:	00081598 	cmpnei	zero,zero,8278
   814dc:	00081598 	cmpnei	zero,zero,8278
   814e0:	00081598 	cmpnei	zero,zero,8278
   814e4:	000823c0 	call	823c <__alt_mem_onchip_memory2_0-0x77dc4>
   814e8:	00081598 	cmpnei	zero,zero,8278
   814ec:	00081598 	cmpnei	zero,zero,8278
   814f0:	00081ca4 	muli	zero,zero,8306
   814f4:	00081598 	cmpnei	zero,zero,8278
   814f8:	00081598 	cmpnei	zero,zero,8278
   814fc:	00081598 	cmpnei	zero,zero,8278
   81500:	00081598 	cmpnei	zero,zero,8278
   81504:	00081598 	cmpnei	zero,zero,8278
   81508:	00081cf0 	cmpltui	zero,zero,8307
   8150c:	00081598 	cmpnei	zero,zero,8278
   81510:	00081598 	cmpnei	zero,zero,8278
   81514:	00082310 	cmplti	zero,zero,8332
   81518:	00081598 	cmpnei	zero,zero,8278
   8151c:	00081598 	cmpnei	zero,zero,8278
   81520:	00081598 	cmpnei	zero,zero,8278
   81524:	00081598 	cmpnei	zero,zero,8278
   81528:	00081598 	cmpnei	zero,zero,8278
   8152c:	00081598 	cmpnei	zero,zero,8278
   81530:	00081598 	cmpnei	zero,zero,8278
   81534:	00081598 	cmpnei	zero,zero,8278
   81538:	00081598 	cmpnei	zero,zero,8278
   8153c:	00081598 	cmpnei	zero,zero,8278
   81540:	000822e4 	muli	zero,zero,8331
   81544:	00081bfc 	xorhi	zero,zero,8303
   81548:	0008225c 	xori	zero,zero,8329
   8154c:	0008225c 	xori	zero,zero,8329
   81550:	0008225c 	xori	zero,zero,8329
   81554:	00082248 	cmpgei	zero,zero,8329
   81558:	00081bfc 	xorhi	zero,zero,8303
   8155c:	00081598 	cmpnei	zero,zero,8278
   81560:	00081598 	cmpnei	zero,zero,8278
   81564:	000821d0 	cmplti	zero,zero,8327
   81568:	00081598 	cmpnei	zero,zero,8278
   8156c:	000821a0 	cmpeqi	zero,zero,8326
   81570:	00081cb0 	cmpltui	zero,zero,8306
   81574:	00082200 	call	8220 <__alt_mem_onchip_memory2_0-0x77de0>
   81578:	000821ec 	andhi	zero,zero,8327
   8157c:	00081598 	cmpnei	zero,zero,8278
   81580:	00082494 	movui	zero,8338
   81584:	00081598 	cmpnei	zero,zero,8278
   81588:	00081cfc 	xorhi	zero,zero,8307
   8158c:	00081598 	cmpnei	zero,zero,8278
   81590:	00081598 	cmpnei	zero,zero,8278
   81594:	00082374 	movhi	zero,8333
   81598:	d9014d17 	ldw	r4,1332(sp)
   8159c:	2000ce26 	beq	r4,zero,818d8 <___vfprintf_internal_r+0x6d4>
   815a0:	01400044 	movi	r5,1
   815a4:	d9800f04 	addi	r6,sp,60
   815a8:	d9c14015 	stw	r7,1280(sp)
   815ac:	d9414515 	stw	r5,1300(sp)
   815b0:	d9814115 	stw	r6,1284(sp)
   815b4:	280f883a 	mov	r7,r5
   815b8:	d9000f05 	stb	r4,60(sp)
   815bc:	d8000405 	stb	zero,16(sp)
   815c0:	d8014615 	stw	zero,1304(sp)
   815c4:	d8c14c17 	ldw	r3,1328(sp)
   815c8:	1880008c 	andi	r2,r3,2
   815cc:	1005003a 	cmpeq	r2,r2,zero
   815d0:	d8815015 	stw	r2,1344(sp)
   815d4:	1000031e 	bne	r2,zero,815e4 <___vfprintf_internal_r+0x3e0>
   815d8:	d9014517 	ldw	r4,1300(sp)
   815dc:	21000084 	addi	r4,r4,2
   815e0:	d9014515 	stw	r4,1300(sp)
   815e4:	d9414c17 	ldw	r5,1328(sp)
   815e8:	2940210c 	andi	r5,r5,132
   815ec:	d9414e15 	stw	r5,1336(sp)
   815f0:	28002d1e 	bne	r5,zero,816a8 <___vfprintf_internal_r+0x4a4>
   815f4:	d9814a17 	ldw	r6,1320(sp)
   815f8:	d8814517 	ldw	r2,1300(sp)
   815fc:	30a1c83a 	sub	r16,r6,r2
   81600:	0400290e 	bge	zero,r16,816a8 <___vfprintf_internal_r+0x4a4>
   81604:	00800404 	movi	r2,16
   81608:	14045e0e 	bge	r2,r16,82784 <___vfprintf_internal_r+0x1580>
   8160c:	dc800e17 	ldw	r18,56(sp)
   81610:	dc400d17 	ldw	r17,52(sp)
   81614:	1027883a 	mov	r19,r2
   81618:	07000274 	movhi	fp,9
   8161c:	e737e484 	addi	fp,fp,-8302
   81620:	050001c4 	movi	r20,7
   81624:	00000306 	br	81634 <___vfprintf_internal_r+0x430>
   81628:	843ffc04 	addi	r16,r16,-16
   8162c:	ad400204 	addi	r21,r21,8
   81630:	9c00130e 	bge	r19,r16,81680 <___vfprintf_internal_r+0x47c>
   81634:	94800404 	addi	r18,r18,16
   81638:	8c400044 	addi	r17,r17,1
   8163c:	af000015 	stw	fp,0(r21)
   81640:	acc00115 	stw	r19,4(r21)
   81644:	dc800e15 	stw	r18,56(sp)
   81648:	dc400d15 	stw	r17,52(sp)
   8164c:	a47ff60e 	bge	r20,r17,81628 <___vfprintf_internal_r+0x424>
   81650:	d9014f17 	ldw	r4,1340(sp)
   81654:	b00b883a 	mov	r5,r22
   81658:	d9800c04 	addi	r6,sp,48
   8165c:	d9c15115 	stw	r7,1348(sp)
   81660:	00811ac0 	call	811ac <__sprint_r>
   81664:	d9c15117 	ldw	r7,1348(sp)
   81668:	10009e1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   8166c:	843ffc04 	addi	r16,r16,-16
   81670:	dc800e17 	ldw	r18,56(sp)
   81674:	dc400d17 	ldw	r17,52(sp)
   81678:	dd401904 	addi	r21,sp,100
   8167c:	9c3fed16 	blt	r19,r16,81634 <___vfprintf_internal_r+0x430>
   81680:	9425883a 	add	r18,r18,r16
   81684:	8c400044 	addi	r17,r17,1
   81688:	008001c4 	movi	r2,7
   8168c:	af000015 	stw	fp,0(r21)
   81690:	ac000115 	stw	r16,4(r21)
   81694:	dc800e15 	stw	r18,56(sp)
   81698:	dc400d15 	stw	r17,52(sp)
   8169c:	1441f516 	blt	r2,r17,81e74 <___vfprintf_internal_r+0xc70>
   816a0:	ad400204 	addi	r21,r21,8
   816a4:	00000206 	br	816b0 <___vfprintf_internal_r+0x4ac>
   816a8:	dc800e17 	ldw	r18,56(sp)
   816ac:	dc400d17 	ldw	r17,52(sp)
   816b0:	d8800407 	ldb	r2,16(sp)
   816b4:	10000b26 	beq	r2,zero,816e4 <___vfprintf_internal_r+0x4e0>
   816b8:	00800044 	movi	r2,1
   816bc:	94800044 	addi	r18,r18,1
   816c0:	8c400044 	addi	r17,r17,1
   816c4:	a8800115 	stw	r2,4(r21)
   816c8:	d8c00404 	addi	r3,sp,16
   816cc:	008001c4 	movi	r2,7
   816d0:	a8c00015 	stw	r3,0(r21)
   816d4:	dc800e15 	stw	r18,56(sp)
   816d8:	dc400d15 	stw	r17,52(sp)
   816dc:	1441da16 	blt	r2,r17,81e48 <___vfprintf_internal_r+0xc44>
   816e0:	ad400204 	addi	r21,r21,8
   816e4:	d9015017 	ldw	r4,1344(sp)
   816e8:	20000b1e 	bne	r4,zero,81718 <___vfprintf_internal_r+0x514>
   816ec:	d8800444 	addi	r2,sp,17
   816f0:	94800084 	addi	r18,r18,2
   816f4:	8c400044 	addi	r17,r17,1
   816f8:	a8800015 	stw	r2,0(r21)
   816fc:	00c00084 	movi	r3,2
   81700:	008001c4 	movi	r2,7
   81704:	a8c00115 	stw	r3,4(r21)
   81708:	dc800e15 	stw	r18,56(sp)
   8170c:	dc400d15 	stw	r17,52(sp)
   81710:	1441c216 	blt	r2,r17,81e1c <___vfprintf_internal_r+0xc18>
   81714:	ad400204 	addi	r21,r21,8
   81718:	d9414e17 	ldw	r5,1336(sp)
   8171c:	00802004 	movi	r2,128
   81720:	2880b126 	beq	r5,r2,819e8 <___vfprintf_internal_r+0x7e4>
   81724:	d8c14617 	ldw	r3,1304(sp)
   81728:	19e1c83a 	sub	r16,r3,r7
   8172c:	0400260e 	bge	zero,r16,817c8 <___vfprintf_internal_r+0x5c4>
   81730:	00800404 	movi	r2,16
   81734:	1403cf0e 	bge	r2,r16,82674 <___vfprintf_internal_r+0x1470>
   81738:	1027883a 	mov	r19,r2
   8173c:	07000274 	movhi	fp,9
   81740:	e737e084 	addi	fp,fp,-8318
   81744:	050001c4 	movi	r20,7
   81748:	00000306 	br	81758 <___vfprintf_internal_r+0x554>
   8174c:	843ffc04 	addi	r16,r16,-16
   81750:	ad400204 	addi	r21,r21,8
   81754:	9c00130e 	bge	r19,r16,817a4 <___vfprintf_internal_r+0x5a0>
   81758:	94800404 	addi	r18,r18,16
   8175c:	8c400044 	addi	r17,r17,1
   81760:	af000015 	stw	fp,0(r21)
   81764:	acc00115 	stw	r19,4(r21)
   81768:	dc800e15 	stw	r18,56(sp)
   8176c:	dc400d15 	stw	r17,52(sp)
   81770:	a47ff60e 	bge	r20,r17,8174c <___vfprintf_internal_r+0x548>
   81774:	d9014f17 	ldw	r4,1340(sp)
   81778:	b00b883a 	mov	r5,r22
   8177c:	d9800c04 	addi	r6,sp,48
   81780:	d9c15115 	stw	r7,1348(sp)
   81784:	00811ac0 	call	811ac <__sprint_r>
   81788:	d9c15117 	ldw	r7,1348(sp)
   8178c:	1000551e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81790:	843ffc04 	addi	r16,r16,-16
   81794:	dc800e17 	ldw	r18,56(sp)
   81798:	dc400d17 	ldw	r17,52(sp)
   8179c:	dd401904 	addi	r21,sp,100
   817a0:	9c3fed16 	blt	r19,r16,81758 <___vfprintf_internal_r+0x554>
   817a4:	9425883a 	add	r18,r18,r16
   817a8:	8c400044 	addi	r17,r17,1
   817ac:	008001c4 	movi	r2,7
   817b0:	af000015 	stw	fp,0(r21)
   817b4:	ac000115 	stw	r16,4(r21)
   817b8:	dc800e15 	stw	r18,56(sp)
   817bc:	dc400d15 	stw	r17,52(sp)
   817c0:	14418216 	blt	r2,r17,81dcc <___vfprintf_internal_r+0xbc8>
   817c4:	ad400204 	addi	r21,r21,8
   817c8:	d9014c17 	ldw	r4,1328(sp)
   817cc:	2080400c 	andi	r2,r4,256
   817d0:	10004a1e 	bne	r2,zero,818fc <___vfprintf_internal_r+0x6f8>
   817d4:	d9414117 	ldw	r5,1284(sp)
   817d8:	91e5883a 	add	r18,r18,r7
   817dc:	8c400044 	addi	r17,r17,1
   817e0:	008001c4 	movi	r2,7
   817e4:	a9400015 	stw	r5,0(r21)
   817e8:	a9c00115 	stw	r7,4(r21)
   817ec:	dc800e15 	stw	r18,56(sp)
   817f0:	dc400d15 	stw	r17,52(sp)
   817f4:	14416716 	blt	r2,r17,81d94 <___vfprintf_internal_r+0xb90>
   817f8:	a8c00204 	addi	r3,r21,8
   817fc:	d9814c17 	ldw	r6,1328(sp)
   81800:	3080010c 	andi	r2,r6,4
   81804:	10002826 	beq	r2,zero,818a8 <___vfprintf_internal_r+0x6a4>
   81808:	d8814a17 	ldw	r2,1320(sp)
   8180c:	d9014517 	ldw	r4,1300(sp)
   81810:	1121c83a 	sub	r16,r2,r4
   81814:	0400240e 	bge	zero,r16,818a8 <___vfprintf_internal_r+0x6a4>
   81818:	00800404 	movi	r2,16
   8181c:	1404550e 	bge	r2,r16,82974 <___vfprintf_internal_r+0x1770>
   81820:	dc400d17 	ldw	r17,52(sp)
   81824:	1027883a 	mov	r19,r2
   81828:	07000274 	movhi	fp,9
   8182c:	e737e484 	addi	fp,fp,-8302
   81830:	050001c4 	movi	r20,7
   81834:	00000306 	br	81844 <___vfprintf_internal_r+0x640>
   81838:	843ffc04 	addi	r16,r16,-16
   8183c:	18c00204 	addi	r3,r3,8
   81840:	9c00110e 	bge	r19,r16,81888 <___vfprintf_internal_r+0x684>
   81844:	94800404 	addi	r18,r18,16
   81848:	8c400044 	addi	r17,r17,1
   8184c:	1f000015 	stw	fp,0(r3)
   81850:	1cc00115 	stw	r19,4(r3)
   81854:	dc800e15 	stw	r18,56(sp)
   81858:	dc400d15 	stw	r17,52(sp)
   8185c:	a47ff60e 	bge	r20,r17,81838 <___vfprintf_internal_r+0x634>
   81860:	d9014f17 	ldw	r4,1340(sp)
   81864:	b00b883a 	mov	r5,r22
   81868:	d9800c04 	addi	r6,sp,48
   8186c:	00811ac0 	call	811ac <__sprint_r>
   81870:	10001c1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81874:	843ffc04 	addi	r16,r16,-16
   81878:	dc800e17 	ldw	r18,56(sp)
   8187c:	dc400d17 	ldw	r17,52(sp)
   81880:	d8c01904 	addi	r3,sp,100
   81884:	9c3fef16 	blt	r19,r16,81844 <___vfprintf_internal_r+0x640>
   81888:	9425883a 	add	r18,r18,r16
   8188c:	8c400044 	addi	r17,r17,1
   81890:	008001c4 	movi	r2,7
   81894:	1f000015 	stw	fp,0(r3)
   81898:	1c000115 	stw	r16,4(r3)
   8189c:	dc800e15 	stw	r18,56(sp)
   818a0:	dc400d15 	stw	r17,52(sp)
   818a4:	1440cb16 	blt	r2,r17,81bd4 <___vfprintf_internal_r+0x9d0>
   818a8:	d8814a17 	ldw	r2,1320(sp)
   818ac:	d9414517 	ldw	r5,1300(sp)
   818b0:	1140010e 	bge	r2,r5,818b8 <___vfprintf_internal_r+0x6b4>
   818b4:	2805883a 	mov	r2,r5
   818b8:	d9814b17 	ldw	r6,1324(sp)
   818bc:	308d883a 	add	r6,r6,r2
   818c0:	d9814b15 	stw	r6,1324(sp)
   818c4:	90013b1e 	bne	r18,zero,81db4 <___vfprintf_internal_r+0xbb0>
   818c8:	d9c14017 	ldw	r7,1280(sp)
   818cc:	dd401904 	addi	r21,sp,100
   818d0:	d8000d15 	stw	zero,52(sp)
   818d4:	003ea706 	br	81374 <___vfprintf_internal_r+0x170>
   818d8:	d8800e17 	ldw	r2,56(sp)
   818dc:	1005451e 	bne	r2,zero,82df4 <___vfprintf_internal_r+0x1bf0>
   818e0:	d8000d15 	stw	zero,52(sp)
   818e4:	b080030b 	ldhu	r2,12(r22)
   818e8:	1080100c 	andi	r2,r2,64
   818ec:	103e8726 	beq	r2,zero,8130c <___vfprintf_internal_r+0x108>
   818f0:	00bfffc4 	movi	r2,-1
   818f4:	d8814b15 	stw	r2,1324(sp)
   818f8:	003e8406 	br	8130c <___vfprintf_internal_r+0x108>
   818fc:	d9814d17 	ldw	r6,1332(sp)
   81900:	00801944 	movi	r2,101
   81904:	11806e16 	blt	r2,r6,81ac0 <___vfprintf_internal_r+0x8bc>
   81908:	d9414717 	ldw	r5,1308(sp)
   8190c:	00c00044 	movi	r3,1
   81910:	1943490e 	bge	r3,r5,82638 <___vfprintf_internal_r+0x1434>
   81914:	d8814117 	ldw	r2,1284(sp)
   81918:	94800044 	addi	r18,r18,1
   8191c:	8c400044 	addi	r17,r17,1
   81920:	a8800015 	stw	r2,0(r21)
   81924:	008001c4 	movi	r2,7
   81928:	a8c00115 	stw	r3,4(r21)
   8192c:	dc800e15 	stw	r18,56(sp)
   81930:	dc400d15 	stw	r17,52(sp)
   81934:	1441ca16 	blt	r2,r17,82060 <___vfprintf_internal_r+0xe5c>
   81938:	a8c00204 	addi	r3,r21,8
   8193c:	d9014917 	ldw	r4,1316(sp)
   81940:	00800044 	movi	r2,1
   81944:	94800044 	addi	r18,r18,1
   81948:	8c400044 	addi	r17,r17,1
   8194c:	18800115 	stw	r2,4(r3)
   81950:	008001c4 	movi	r2,7
   81954:	19000015 	stw	r4,0(r3)
   81958:	dc800e15 	stw	r18,56(sp)
   8195c:	dc400d15 	stw	r17,52(sp)
   81960:	1441b616 	blt	r2,r17,8203c <___vfprintf_internal_r+0xe38>
   81964:	1cc00204 	addi	r19,r3,8
   81968:	d9014217 	ldw	r4,1288(sp)
   8196c:	d9414317 	ldw	r5,1292(sp)
   81970:	000d883a 	mov	r6,zero
   81974:	000f883a 	mov	r7,zero
   81978:	0089d2c0 	call	89d2c <__nedf2>
   8197c:	10017426 	beq	r2,zero,81f50 <___vfprintf_internal_r+0xd4c>
   81980:	d9414717 	ldw	r5,1308(sp)
   81984:	d9814117 	ldw	r6,1284(sp)
   81988:	8c400044 	addi	r17,r17,1
   8198c:	2c85883a 	add	r2,r5,r18
   81990:	14bfffc4 	addi	r18,r2,-1
   81994:	28bfffc4 	addi	r2,r5,-1
   81998:	30c00044 	addi	r3,r6,1
   8199c:	98800115 	stw	r2,4(r19)
   819a0:	008001c4 	movi	r2,7
   819a4:	98c00015 	stw	r3,0(r19)
   819a8:	dc800e15 	stw	r18,56(sp)
   819ac:	dc400d15 	stw	r17,52(sp)
   819b0:	14418e16 	blt	r2,r17,81fec <___vfprintf_internal_r+0xde8>
   819b4:	9cc00204 	addi	r19,r19,8
   819b8:	d9414817 	ldw	r5,1312(sp)
   819bc:	d8800804 	addi	r2,sp,32
   819c0:	8c400044 	addi	r17,r17,1
   819c4:	9165883a 	add	r18,r18,r5
   819c8:	98800015 	stw	r2,0(r19)
   819cc:	008001c4 	movi	r2,7
   819d0:	99400115 	stw	r5,4(r19)
   819d4:	dc800e15 	stw	r18,56(sp)
   819d8:	dc400d15 	stw	r17,52(sp)
   819dc:	1440ed16 	blt	r2,r17,81d94 <___vfprintf_internal_r+0xb90>
   819e0:	98c00204 	addi	r3,r19,8
   819e4:	003f8506 	br	817fc <___vfprintf_internal_r+0x5f8>
   819e8:	d9814a17 	ldw	r6,1320(sp)
   819ec:	d8814517 	ldw	r2,1300(sp)
   819f0:	30a1c83a 	sub	r16,r6,r2
   819f4:	043f4b0e 	bge	zero,r16,81724 <___vfprintf_internal_r+0x520>
   819f8:	00800404 	movi	r2,16
   819fc:	14043a0e 	bge	r2,r16,82ae8 <___vfprintf_internal_r+0x18e4>
   81a00:	1027883a 	mov	r19,r2
   81a04:	07000274 	movhi	fp,9
   81a08:	e737e084 	addi	fp,fp,-8318
   81a0c:	050001c4 	movi	r20,7
   81a10:	00000306 	br	81a20 <___vfprintf_internal_r+0x81c>
   81a14:	843ffc04 	addi	r16,r16,-16
   81a18:	ad400204 	addi	r21,r21,8
   81a1c:	9c00130e 	bge	r19,r16,81a6c <___vfprintf_internal_r+0x868>
   81a20:	94800404 	addi	r18,r18,16
   81a24:	8c400044 	addi	r17,r17,1
   81a28:	af000015 	stw	fp,0(r21)
   81a2c:	acc00115 	stw	r19,4(r21)
   81a30:	dc800e15 	stw	r18,56(sp)
   81a34:	dc400d15 	stw	r17,52(sp)
   81a38:	a47ff60e 	bge	r20,r17,81a14 <___vfprintf_internal_r+0x810>
   81a3c:	d9014f17 	ldw	r4,1340(sp)
   81a40:	b00b883a 	mov	r5,r22
   81a44:	d9800c04 	addi	r6,sp,48
   81a48:	d9c15115 	stw	r7,1348(sp)
   81a4c:	00811ac0 	call	811ac <__sprint_r>
   81a50:	d9c15117 	ldw	r7,1348(sp)
   81a54:	103fa31e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81a58:	843ffc04 	addi	r16,r16,-16
   81a5c:	dc800e17 	ldw	r18,56(sp)
   81a60:	dc400d17 	ldw	r17,52(sp)
   81a64:	dd401904 	addi	r21,sp,100
   81a68:	9c3fed16 	blt	r19,r16,81a20 <___vfprintf_internal_r+0x81c>
   81a6c:	9425883a 	add	r18,r18,r16
   81a70:	8c400044 	addi	r17,r17,1
   81a74:	008001c4 	movi	r2,7
   81a78:	af000015 	stw	fp,0(r21)
   81a7c:	ac000115 	stw	r16,4(r21)
   81a80:	dc800e15 	stw	r18,56(sp)
   81a84:	dc400d15 	stw	r17,52(sp)
   81a88:	14416116 	blt	r2,r17,82010 <___vfprintf_internal_r+0xe0c>
   81a8c:	ad400204 	addi	r21,r21,8
   81a90:	003f2406 	br	81724 <___vfprintf_internal_r+0x520>
   81a94:	d9014f17 	ldw	r4,1340(sp)
   81a98:	0084cb80 	call	84cb8 <__sinit>
   81a9c:	d9c15117 	ldw	r7,1348(sp)
   81aa0:	003def06 	br	81260 <___vfprintf_internal_r+0x5c>
   81aa4:	d9014f17 	ldw	r4,1340(sp)
   81aa8:	b00b883a 	mov	r5,r22
   81aac:	d9c15115 	stw	r7,1348(sp)
   81ab0:	00830ec0 	call	830ec <__swsetup_r>
   81ab4:	d9c15117 	ldw	r7,1348(sp)
   81ab8:	103dee26 	beq	r2,zero,81274 <___vfprintf_internal_r+0x70>
   81abc:	003f8c06 	br	818f0 <___vfprintf_internal_r+0x6ec>
   81ac0:	d9014217 	ldw	r4,1288(sp)
   81ac4:	d9414317 	ldw	r5,1292(sp)
   81ac8:	000d883a 	mov	r6,zero
   81acc:	000f883a 	mov	r7,zero
   81ad0:	0089ca40 	call	89ca4 <__eqdf2>
   81ad4:	1000f21e 	bne	r2,zero,81ea0 <___vfprintf_internal_r+0xc9c>
   81ad8:	00800274 	movhi	r2,9
   81adc:	10b7e004 	addi	r2,r2,-8320
   81ae0:	94800044 	addi	r18,r18,1
   81ae4:	8c400044 	addi	r17,r17,1
   81ae8:	a8800015 	stw	r2,0(r21)
   81aec:	00c00044 	movi	r3,1
   81af0:	008001c4 	movi	r2,7
   81af4:	a8c00115 	stw	r3,4(r21)
   81af8:	dc800e15 	stw	r18,56(sp)
   81afc:	dc400d15 	stw	r17,52(sp)
   81b00:	14430016 	blt	r2,r17,82704 <___vfprintf_internal_r+0x1500>
   81b04:	a8c00204 	addi	r3,r21,8
   81b08:	d8800517 	ldw	r2,20(sp)
   81b0c:	d9014717 	ldw	r4,1308(sp)
   81b10:	11015c0e 	bge	r2,r4,82084 <___vfprintf_internal_r+0xe80>
   81b14:	dc400d17 	ldw	r17,52(sp)
   81b18:	d9814917 	ldw	r6,1316(sp)
   81b1c:	00800044 	movi	r2,1
   81b20:	94800044 	addi	r18,r18,1
   81b24:	8c400044 	addi	r17,r17,1
   81b28:	18800115 	stw	r2,4(r3)
   81b2c:	008001c4 	movi	r2,7
   81b30:	19800015 	stw	r6,0(r3)
   81b34:	dc800e15 	stw	r18,56(sp)
   81b38:	dc400d15 	stw	r17,52(sp)
   81b3c:	14431616 	blt	r2,r17,82798 <___vfprintf_internal_r+0x1594>
   81b40:	18c00204 	addi	r3,r3,8
   81b44:	d8814717 	ldw	r2,1308(sp)
   81b48:	143fffc4 	addi	r16,r2,-1
   81b4c:	043f2b0e 	bge	zero,r16,817fc <___vfprintf_internal_r+0x5f8>
   81b50:	00800404 	movi	r2,16
   81b54:	1402a80e 	bge	r2,r16,825f8 <___vfprintf_internal_r+0x13f4>
   81b58:	dc400d17 	ldw	r17,52(sp)
   81b5c:	1027883a 	mov	r19,r2
   81b60:	07000274 	movhi	fp,9
   81b64:	e737e084 	addi	fp,fp,-8318
   81b68:	050001c4 	movi	r20,7
   81b6c:	00000306 	br	81b7c <___vfprintf_internal_r+0x978>
   81b70:	18c00204 	addi	r3,r3,8
   81b74:	843ffc04 	addi	r16,r16,-16
   81b78:	9c02a20e 	bge	r19,r16,82604 <___vfprintf_internal_r+0x1400>
   81b7c:	94800404 	addi	r18,r18,16
   81b80:	8c400044 	addi	r17,r17,1
   81b84:	1f000015 	stw	fp,0(r3)
   81b88:	1cc00115 	stw	r19,4(r3)
   81b8c:	dc800e15 	stw	r18,56(sp)
   81b90:	dc400d15 	stw	r17,52(sp)
   81b94:	a47ff60e 	bge	r20,r17,81b70 <___vfprintf_internal_r+0x96c>
   81b98:	d9014f17 	ldw	r4,1340(sp)
   81b9c:	b00b883a 	mov	r5,r22
   81ba0:	d9800c04 	addi	r6,sp,48
   81ba4:	00811ac0 	call	811ac <__sprint_r>
   81ba8:	103f4e1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81bac:	dc800e17 	ldw	r18,56(sp)
   81bb0:	dc400d17 	ldw	r17,52(sp)
   81bb4:	d8c01904 	addi	r3,sp,100
   81bb8:	003fee06 	br	81b74 <___vfprintf_internal_r+0x970>
   81bbc:	d8802c0b 	ldhu	r2,176(sp)
   81bc0:	00ffffc4 	movi	r3,-1
   81bc4:	d8c14b15 	stw	r3,1324(sp)
   81bc8:	1080100c 	andi	r2,r2,64
   81bcc:	103dcc1e 	bne	r2,zero,81300 <___vfprintf_internal_r+0xfc>
   81bd0:	003dce06 	br	8130c <___vfprintf_internal_r+0x108>
   81bd4:	d9014f17 	ldw	r4,1340(sp)
   81bd8:	b00b883a 	mov	r5,r22
   81bdc:	d9800c04 	addi	r6,sp,48
   81be0:	00811ac0 	call	811ac <__sprint_r>
   81be4:	103f3f1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81be8:	dc800e17 	ldw	r18,56(sp)
   81bec:	003f2e06 	br	818a8 <___vfprintf_internal_r+0x6a4>
   81bf0:	d9414c17 	ldw	r5,1328(sp)
   81bf4:	29400414 	ori	r5,r5,16
   81bf8:	d9414c15 	stw	r5,1328(sp)
   81bfc:	d9814c17 	ldw	r6,1328(sp)
   81c00:	3080080c 	andi	r2,r6,32
   81c04:	10014f1e 	bne	r2,zero,82144 <___vfprintf_internal_r+0xf40>
   81c08:	d8c14c17 	ldw	r3,1328(sp)
   81c0c:	1880040c 	andi	r2,r3,16
   81c10:	1002f01e 	bne	r2,zero,827d4 <___vfprintf_internal_r+0x15d0>
   81c14:	d9014c17 	ldw	r4,1328(sp)
   81c18:	2080100c 	andi	r2,r4,64
   81c1c:	1002ed26 	beq	r2,zero,827d4 <___vfprintf_internal_r+0x15d0>
   81c20:	3880000f 	ldh	r2,0(r7)
   81c24:	39c00104 	addi	r7,r7,4
   81c28:	d9c14015 	stw	r7,1280(sp)
   81c2c:	1023d7fa 	srai	r17,r2,31
   81c30:	1021883a 	mov	r16,r2
   81c34:	88037816 	blt	r17,zero,82a18 <___vfprintf_internal_r+0x1814>
   81c38:	01000044 	movi	r4,1
   81c3c:	98000416 	blt	r19,zero,81c50 <___vfprintf_internal_r+0xa4c>
   81c40:	d8c14c17 	ldw	r3,1328(sp)
   81c44:	00bfdfc4 	movi	r2,-129
   81c48:	1886703a 	and	r3,r3,r2
   81c4c:	d8c14c15 	stw	r3,1328(sp)
   81c50:	8444b03a 	or	r2,r16,r17
   81c54:	10022c1e 	bne	r2,zero,82508 <___vfprintf_internal_r+0x1304>
   81c58:	98022b1e 	bne	r19,zero,82508 <___vfprintf_internal_r+0x1304>
   81c5c:	20803fcc 	andi	r2,r4,255
   81c60:	1002a126 	beq	r2,zero,826e8 <___vfprintf_internal_r+0x14e4>
   81c64:	d8c01904 	addi	r3,sp,100
   81c68:	dd000f04 	addi	r20,sp,60
   81c6c:	d8c14115 	stw	r3,1284(sp)
   81c70:	d8c14117 	ldw	r3,1284(sp)
   81c74:	dcc14515 	stw	r19,1300(sp)
   81c78:	a0c5c83a 	sub	r2,r20,r3
   81c7c:	11c00a04 	addi	r7,r2,40
   81c80:	99c0010e 	bge	r19,r7,81c88 <___vfprintf_internal_r+0xa84>
   81c84:	d9c14515 	stw	r7,1300(sp)
   81c88:	dcc14615 	stw	r19,1304(sp)
   81c8c:	d8800407 	ldb	r2,16(sp)
   81c90:	103e4c26 	beq	r2,zero,815c4 <___vfprintf_internal_r+0x3c0>
   81c94:	d8814517 	ldw	r2,1300(sp)
   81c98:	10800044 	addi	r2,r2,1
   81c9c:	d8814515 	stw	r2,1300(sp)
   81ca0:	003e4806 	br	815c4 <___vfprintf_internal_r+0x3c0>
   81ca4:	d9814c17 	ldw	r6,1328(sp)
   81ca8:	31800414 	ori	r6,r6,16
   81cac:	d9814c15 	stw	r6,1328(sp)
   81cb0:	d8c14c17 	ldw	r3,1328(sp)
   81cb4:	1880080c 	andi	r2,r3,32
   81cb8:	1001271e 	bne	r2,zero,82158 <___vfprintf_internal_r+0xf54>
   81cbc:	d9414c17 	ldw	r5,1328(sp)
   81cc0:	2880040c 	andi	r2,r5,16
   81cc4:	1002bc1e 	bne	r2,zero,827b8 <___vfprintf_internal_r+0x15b4>
   81cc8:	d9814c17 	ldw	r6,1328(sp)
   81ccc:	3080100c 	andi	r2,r6,64
   81cd0:	1002b926 	beq	r2,zero,827b8 <___vfprintf_internal_r+0x15b4>
   81cd4:	3c00000b 	ldhu	r16,0(r7)
   81cd8:	0009883a 	mov	r4,zero
   81cdc:	39c00104 	addi	r7,r7,4
   81ce0:	0023883a 	mov	r17,zero
   81ce4:	d9c14015 	stw	r7,1280(sp)
   81ce8:	d8000405 	stb	zero,16(sp)
   81cec:	003fd306 	br	81c3c <___vfprintf_internal_r+0xa38>
   81cf0:	d9014c17 	ldw	r4,1328(sp)
   81cf4:	21000414 	ori	r4,r4,16
   81cf8:	d9014c15 	stw	r4,1328(sp)
   81cfc:	d9414c17 	ldw	r5,1328(sp)
   81d00:	2880080c 	andi	r2,r5,32
   81d04:	1001081e 	bne	r2,zero,82128 <___vfprintf_internal_r+0xf24>
   81d08:	d8c14c17 	ldw	r3,1328(sp)
   81d0c:	1880040c 	andi	r2,r3,16
   81d10:	1002b61e 	bne	r2,zero,827ec <___vfprintf_internal_r+0x15e8>
   81d14:	d9014c17 	ldw	r4,1328(sp)
   81d18:	2080100c 	andi	r2,r4,64
   81d1c:	1002b326 	beq	r2,zero,827ec <___vfprintf_internal_r+0x15e8>
   81d20:	3c00000b 	ldhu	r16,0(r7)
   81d24:	01000044 	movi	r4,1
   81d28:	39c00104 	addi	r7,r7,4
   81d2c:	0023883a 	mov	r17,zero
   81d30:	d9c14015 	stw	r7,1280(sp)
   81d34:	d8000405 	stb	zero,16(sp)
   81d38:	003fc006 	br	81c3c <___vfprintf_internal_r+0xa38>
   81d3c:	d9014f17 	ldw	r4,1340(sp)
   81d40:	b00b883a 	mov	r5,r22
   81d44:	d9800c04 	addi	r6,sp,48
   81d48:	00811ac0 	call	811ac <__sprint_r>
   81d4c:	103ee51e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81d50:	dc800e17 	ldw	r18,56(sp)
   81d54:	d8c01904 	addi	r3,sp,100
   81d58:	d9814c17 	ldw	r6,1328(sp)
   81d5c:	3080004c 	andi	r2,r6,1
   81d60:	1005003a 	cmpeq	r2,r2,zero
   81d64:	103ea51e 	bne	r2,zero,817fc <___vfprintf_internal_r+0x5f8>
   81d68:	00800044 	movi	r2,1
   81d6c:	dc400d17 	ldw	r17,52(sp)
   81d70:	18800115 	stw	r2,4(r3)
   81d74:	d8814917 	ldw	r2,1316(sp)
   81d78:	94800044 	addi	r18,r18,1
   81d7c:	8c400044 	addi	r17,r17,1
   81d80:	18800015 	stw	r2,0(r3)
   81d84:	008001c4 	movi	r2,7
   81d88:	dc800e15 	stw	r18,56(sp)
   81d8c:	dc400d15 	stw	r17,52(sp)
   81d90:	1442240e 	bge	r2,r17,82624 <___vfprintf_internal_r+0x1420>
   81d94:	d9014f17 	ldw	r4,1340(sp)
   81d98:	b00b883a 	mov	r5,r22
   81d9c:	d9800c04 	addi	r6,sp,48
   81da0:	00811ac0 	call	811ac <__sprint_r>
   81da4:	103ecf1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81da8:	dc800e17 	ldw	r18,56(sp)
   81dac:	d8c01904 	addi	r3,sp,100
   81db0:	003e9206 	br	817fc <___vfprintf_internal_r+0x5f8>
   81db4:	d9014f17 	ldw	r4,1340(sp)
   81db8:	b00b883a 	mov	r5,r22
   81dbc:	d9800c04 	addi	r6,sp,48
   81dc0:	00811ac0 	call	811ac <__sprint_r>
   81dc4:	103ec026 	beq	r2,zero,818c8 <___vfprintf_internal_r+0x6c4>
   81dc8:	003ec606 	br	818e4 <___vfprintf_internal_r+0x6e0>
   81dcc:	d9014f17 	ldw	r4,1340(sp)
   81dd0:	b00b883a 	mov	r5,r22
   81dd4:	d9800c04 	addi	r6,sp,48
   81dd8:	d9c15115 	stw	r7,1348(sp)
   81ddc:	00811ac0 	call	811ac <__sprint_r>
   81de0:	d9c15117 	ldw	r7,1348(sp)
   81de4:	103ebf1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81de8:	dc800e17 	ldw	r18,56(sp)
   81dec:	dc400d17 	ldw	r17,52(sp)
   81df0:	dd401904 	addi	r21,sp,100
   81df4:	003e7406 	br	817c8 <___vfprintf_internal_r+0x5c4>
   81df8:	d9014f17 	ldw	r4,1340(sp)
   81dfc:	b00b883a 	mov	r5,r22
   81e00:	d9800c04 	addi	r6,sp,48
   81e04:	d9c15115 	stw	r7,1348(sp)
   81e08:	00811ac0 	call	811ac <__sprint_r>
   81e0c:	d9c15117 	ldw	r7,1348(sp)
   81e10:	103eb41e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81e14:	dd401904 	addi	r21,sp,100
   81e18:	003d6d06 	br	813d0 <___vfprintf_internal_r+0x1cc>
   81e1c:	d9014f17 	ldw	r4,1340(sp)
   81e20:	b00b883a 	mov	r5,r22
   81e24:	d9800c04 	addi	r6,sp,48
   81e28:	d9c15115 	stw	r7,1348(sp)
   81e2c:	00811ac0 	call	811ac <__sprint_r>
   81e30:	d9c15117 	ldw	r7,1348(sp)
   81e34:	103eab1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81e38:	dc800e17 	ldw	r18,56(sp)
   81e3c:	dc400d17 	ldw	r17,52(sp)
   81e40:	dd401904 	addi	r21,sp,100
   81e44:	003e3406 	br	81718 <___vfprintf_internal_r+0x514>
   81e48:	d9014f17 	ldw	r4,1340(sp)
   81e4c:	b00b883a 	mov	r5,r22
   81e50:	d9800c04 	addi	r6,sp,48
   81e54:	d9c15115 	stw	r7,1348(sp)
   81e58:	00811ac0 	call	811ac <__sprint_r>
   81e5c:	d9c15117 	ldw	r7,1348(sp)
   81e60:	103ea01e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81e64:	dc800e17 	ldw	r18,56(sp)
   81e68:	dc400d17 	ldw	r17,52(sp)
   81e6c:	dd401904 	addi	r21,sp,100
   81e70:	003e1c06 	br	816e4 <___vfprintf_internal_r+0x4e0>
   81e74:	d9014f17 	ldw	r4,1340(sp)
   81e78:	b00b883a 	mov	r5,r22
   81e7c:	d9800c04 	addi	r6,sp,48
   81e80:	d9c15115 	stw	r7,1348(sp)
   81e84:	00811ac0 	call	811ac <__sprint_r>
   81e88:	d9c15117 	ldw	r7,1348(sp)
   81e8c:	103e951e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81e90:	dc800e17 	ldw	r18,56(sp)
   81e94:	dc400d17 	ldw	r17,52(sp)
   81e98:	dd401904 	addi	r21,sp,100
   81e9c:	003e0406 	br	816b0 <___vfprintf_internal_r+0x4ac>
   81ea0:	d9000517 	ldw	r4,20(sp)
   81ea4:	0102580e 	bge	zero,r4,82808 <___vfprintf_internal_r+0x1604>
   81ea8:	d9814717 	ldw	r6,1308(sp)
   81eac:	21807a16 	blt	r4,r6,82098 <___vfprintf_internal_r+0xe94>
   81eb0:	d8814117 	ldw	r2,1284(sp)
   81eb4:	91a5883a 	add	r18,r18,r6
   81eb8:	8c400044 	addi	r17,r17,1
   81ebc:	a8800015 	stw	r2,0(r21)
   81ec0:	008001c4 	movi	r2,7
   81ec4:	a9800115 	stw	r6,4(r21)
   81ec8:	dc800e15 	stw	r18,56(sp)
   81ecc:	dc400d15 	stw	r17,52(sp)
   81ed0:	1442fc16 	blt	r2,r17,82ac4 <___vfprintf_internal_r+0x18c0>
   81ed4:	a8c00204 	addi	r3,r21,8
   81ed8:	d9414717 	ldw	r5,1308(sp)
   81edc:	2161c83a 	sub	r16,r4,r5
   81ee0:	043f9d0e 	bge	zero,r16,81d58 <___vfprintf_internal_r+0xb54>
   81ee4:	00800404 	movi	r2,16
   81ee8:	1402190e 	bge	r2,r16,82750 <___vfprintf_internal_r+0x154c>
   81eec:	dc400d17 	ldw	r17,52(sp)
   81ef0:	1027883a 	mov	r19,r2
   81ef4:	07000274 	movhi	fp,9
   81ef8:	e737e084 	addi	fp,fp,-8318
   81efc:	050001c4 	movi	r20,7
   81f00:	00000306 	br	81f10 <___vfprintf_internal_r+0xd0c>
   81f04:	18c00204 	addi	r3,r3,8
   81f08:	843ffc04 	addi	r16,r16,-16
   81f0c:	9c02130e 	bge	r19,r16,8275c <___vfprintf_internal_r+0x1558>
   81f10:	94800404 	addi	r18,r18,16
   81f14:	8c400044 	addi	r17,r17,1
   81f18:	1f000015 	stw	fp,0(r3)
   81f1c:	1cc00115 	stw	r19,4(r3)
   81f20:	dc800e15 	stw	r18,56(sp)
   81f24:	dc400d15 	stw	r17,52(sp)
   81f28:	a47ff60e 	bge	r20,r17,81f04 <___vfprintf_internal_r+0xd00>
   81f2c:	d9014f17 	ldw	r4,1340(sp)
   81f30:	b00b883a 	mov	r5,r22
   81f34:	d9800c04 	addi	r6,sp,48
   81f38:	00811ac0 	call	811ac <__sprint_r>
   81f3c:	103e691e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81f40:	dc800e17 	ldw	r18,56(sp)
   81f44:	dc400d17 	ldw	r17,52(sp)
   81f48:	d8c01904 	addi	r3,sp,100
   81f4c:	003fee06 	br	81f08 <___vfprintf_internal_r+0xd04>
   81f50:	d8814717 	ldw	r2,1308(sp)
   81f54:	143fffc4 	addi	r16,r2,-1
   81f58:	043e970e 	bge	zero,r16,819b8 <___vfprintf_internal_r+0x7b4>
   81f5c:	00800404 	movi	r2,16
   81f60:	1400180e 	bge	r2,r16,81fc4 <___vfprintf_internal_r+0xdc0>
   81f64:	1029883a 	mov	r20,r2
   81f68:	07000274 	movhi	fp,9
   81f6c:	e737e084 	addi	fp,fp,-8318
   81f70:	054001c4 	movi	r21,7
   81f74:	00000306 	br	81f84 <___vfprintf_internal_r+0xd80>
   81f78:	9cc00204 	addi	r19,r19,8
   81f7c:	843ffc04 	addi	r16,r16,-16
   81f80:	a400120e 	bge	r20,r16,81fcc <___vfprintf_internal_r+0xdc8>
   81f84:	94800404 	addi	r18,r18,16
   81f88:	8c400044 	addi	r17,r17,1
   81f8c:	9f000015 	stw	fp,0(r19)
   81f90:	9d000115 	stw	r20,4(r19)
   81f94:	dc800e15 	stw	r18,56(sp)
   81f98:	dc400d15 	stw	r17,52(sp)
   81f9c:	ac7ff60e 	bge	r21,r17,81f78 <___vfprintf_internal_r+0xd74>
   81fa0:	d9014f17 	ldw	r4,1340(sp)
   81fa4:	b00b883a 	mov	r5,r22
   81fa8:	d9800c04 	addi	r6,sp,48
   81fac:	00811ac0 	call	811ac <__sprint_r>
   81fb0:	103e4c1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   81fb4:	dc800e17 	ldw	r18,56(sp)
   81fb8:	dc400d17 	ldw	r17,52(sp)
   81fbc:	dcc01904 	addi	r19,sp,100
   81fc0:	003fee06 	br	81f7c <___vfprintf_internal_r+0xd78>
   81fc4:	07000274 	movhi	fp,9
   81fc8:	e737e084 	addi	fp,fp,-8318
   81fcc:	9425883a 	add	r18,r18,r16
   81fd0:	8c400044 	addi	r17,r17,1
   81fd4:	008001c4 	movi	r2,7
   81fd8:	9f000015 	stw	fp,0(r19)
   81fdc:	9c000115 	stw	r16,4(r19)
   81fe0:	dc800e15 	stw	r18,56(sp)
   81fe4:	dc400d15 	stw	r17,52(sp)
   81fe8:	147e720e 	bge	r2,r17,819b4 <___vfprintf_internal_r+0x7b0>
   81fec:	d9014f17 	ldw	r4,1340(sp)
   81ff0:	b00b883a 	mov	r5,r22
   81ff4:	d9800c04 	addi	r6,sp,48
   81ff8:	00811ac0 	call	811ac <__sprint_r>
   81ffc:	103e391e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82000:	dc800e17 	ldw	r18,56(sp)
   82004:	dc400d17 	ldw	r17,52(sp)
   82008:	dcc01904 	addi	r19,sp,100
   8200c:	003e6a06 	br	819b8 <___vfprintf_internal_r+0x7b4>
   82010:	d9014f17 	ldw	r4,1340(sp)
   82014:	b00b883a 	mov	r5,r22
   82018:	d9800c04 	addi	r6,sp,48
   8201c:	d9c15115 	stw	r7,1348(sp)
   82020:	00811ac0 	call	811ac <__sprint_r>
   82024:	d9c15117 	ldw	r7,1348(sp)
   82028:	103e2e1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   8202c:	dc800e17 	ldw	r18,56(sp)
   82030:	dc400d17 	ldw	r17,52(sp)
   82034:	dd401904 	addi	r21,sp,100
   82038:	003dba06 	br	81724 <___vfprintf_internal_r+0x520>
   8203c:	d9014f17 	ldw	r4,1340(sp)
   82040:	b00b883a 	mov	r5,r22
   82044:	d9800c04 	addi	r6,sp,48
   82048:	00811ac0 	call	811ac <__sprint_r>
   8204c:	103e251e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82050:	dc800e17 	ldw	r18,56(sp)
   82054:	dc400d17 	ldw	r17,52(sp)
   82058:	dcc01904 	addi	r19,sp,100
   8205c:	003e4206 	br	81968 <___vfprintf_internal_r+0x764>
   82060:	d9014f17 	ldw	r4,1340(sp)
   82064:	b00b883a 	mov	r5,r22
   82068:	d9800c04 	addi	r6,sp,48
   8206c:	00811ac0 	call	811ac <__sprint_r>
   82070:	103e1c1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82074:	dc800e17 	ldw	r18,56(sp)
   82078:	dc400d17 	ldw	r17,52(sp)
   8207c:	d8c01904 	addi	r3,sp,100
   82080:	003e2e06 	br	8193c <___vfprintf_internal_r+0x738>
   82084:	d9414c17 	ldw	r5,1328(sp)
   82088:	2880004c 	andi	r2,r5,1
   8208c:	1005003a 	cmpeq	r2,r2,zero
   82090:	103dda1e 	bne	r2,zero,817fc <___vfprintf_internal_r+0x5f8>
   82094:	003e9f06 	br	81b14 <___vfprintf_internal_r+0x910>
   82098:	d8c14117 	ldw	r3,1284(sp)
   8209c:	9125883a 	add	r18,r18,r4
   820a0:	8c400044 	addi	r17,r17,1
   820a4:	008001c4 	movi	r2,7
   820a8:	a8c00015 	stw	r3,0(r21)
   820ac:	a9000115 	stw	r4,4(r21)
   820b0:	dc800e15 	stw	r18,56(sp)
   820b4:	dc400d15 	stw	r17,52(sp)
   820b8:	14426c16 	blt	r2,r17,82a6c <___vfprintf_internal_r+0x1868>
   820bc:	a8c00204 	addi	r3,r21,8
   820c0:	d9414917 	ldw	r5,1316(sp)
   820c4:	00800044 	movi	r2,1
   820c8:	94800044 	addi	r18,r18,1
   820cc:	8c400044 	addi	r17,r17,1
   820d0:	18800115 	stw	r2,4(r3)
   820d4:	008001c4 	movi	r2,7
   820d8:	19400015 	stw	r5,0(r3)
   820dc:	dc800e15 	stw	r18,56(sp)
   820e0:	dc400d15 	stw	r17,52(sp)
   820e4:	2021883a 	mov	r16,r4
   820e8:	14425616 	blt	r2,r17,82a44 <___vfprintf_internal_r+0x1840>
   820ec:	19400204 	addi	r5,r3,8
   820f0:	d9814717 	ldw	r6,1308(sp)
   820f4:	8c400044 	addi	r17,r17,1
   820f8:	dc400d15 	stw	r17,52(sp)
   820fc:	3107c83a 	sub	r3,r6,r4
   82100:	d9014117 	ldw	r4,1284(sp)
   82104:	90e5883a 	add	r18,r18,r3
   82108:	28c00115 	stw	r3,4(r5)
   8210c:	8105883a 	add	r2,r16,r4
   82110:	28800015 	stw	r2,0(r5)
   82114:	008001c4 	movi	r2,7
   82118:	dc800e15 	stw	r18,56(sp)
   8211c:	147f1d16 	blt	r2,r17,81d94 <___vfprintf_internal_r+0xb90>
   82120:	28c00204 	addi	r3,r5,8
   82124:	003db506 	br	817fc <___vfprintf_internal_r+0x5f8>
   82128:	3c000017 	ldw	r16,0(r7)
   8212c:	3c400117 	ldw	r17,4(r7)
   82130:	39800204 	addi	r6,r7,8
   82134:	01000044 	movi	r4,1
   82138:	d9814015 	stw	r6,1280(sp)
   8213c:	d8000405 	stb	zero,16(sp)
   82140:	003ebe06 	br	81c3c <___vfprintf_internal_r+0xa38>
   82144:	3c000017 	ldw	r16,0(r7)
   82148:	3c400117 	ldw	r17,4(r7)
   8214c:	38800204 	addi	r2,r7,8
   82150:	d8814015 	stw	r2,1280(sp)
   82154:	003eb706 	br	81c34 <___vfprintf_internal_r+0xa30>
   82158:	3c000017 	ldw	r16,0(r7)
   8215c:	3c400117 	ldw	r17,4(r7)
   82160:	39000204 	addi	r4,r7,8
   82164:	d9014015 	stw	r4,1280(sp)
   82168:	0009883a 	mov	r4,zero
   8216c:	d8000405 	stb	zero,16(sp)
   82170:	003eb206 	br	81c3c <___vfprintf_internal_r+0xa38>
   82174:	38c00017 	ldw	r3,0(r7)
   82178:	39c00104 	addi	r7,r7,4
   8217c:	d8c14a15 	stw	r3,1320(sp)
   82180:	1800d70e 	bge	r3,zero,824e0 <___vfprintf_internal_r+0x12dc>
   82184:	00c7c83a 	sub	r3,zero,r3
   82188:	d8c14a15 	stw	r3,1320(sp)
   8218c:	d9014c17 	ldw	r4,1328(sp)
   82190:	b8c00007 	ldb	r3,0(r23)
   82194:	21000114 	ori	r4,r4,4
   82198:	d9014c15 	stw	r4,1328(sp)
   8219c:	003c9806 	br	81400 <___vfprintf_internal_r+0x1fc>
   821a0:	d9814c17 	ldw	r6,1328(sp)
   821a4:	3080080c 	andi	r2,r6,32
   821a8:	1001f626 	beq	r2,zero,82984 <___vfprintf_internal_r+0x1780>
   821ac:	d9014b17 	ldw	r4,1324(sp)
   821b0:	38800017 	ldw	r2,0(r7)
   821b4:	39c00104 	addi	r7,r7,4
   821b8:	d9c14015 	stw	r7,1280(sp)
   821bc:	2007d7fa 	srai	r3,r4,31
   821c0:	d9c14017 	ldw	r7,1280(sp)
   821c4:	11000015 	stw	r4,0(r2)
   821c8:	10c00115 	stw	r3,4(r2)
   821cc:	003c6906 	br	81374 <___vfprintf_internal_r+0x170>
   821d0:	b8c00007 	ldb	r3,0(r23)
   821d4:	00801b04 	movi	r2,108
   821d8:	18825526 	beq	r3,r2,82b30 <___vfprintf_internal_r+0x192c>
   821dc:	d9414c17 	ldw	r5,1328(sp)
   821e0:	29400414 	ori	r5,r5,16
   821e4:	d9414c15 	stw	r5,1328(sp)
   821e8:	003c8506 	br	81400 <___vfprintf_internal_r+0x1fc>
   821ec:	d9814c17 	ldw	r6,1328(sp)
   821f0:	b8c00007 	ldb	r3,0(r23)
   821f4:	31800814 	ori	r6,r6,32
   821f8:	d9814c15 	stw	r6,1328(sp)
   821fc:	003c8006 	br	81400 <___vfprintf_internal_r+0x1fc>
   82200:	d8814c17 	ldw	r2,1328(sp)
   82204:	3c000017 	ldw	r16,0(r7)
   82208:	00c01e04 	movi	r3,120
   8220c:	10800094 	ori	r2,r2,2
   82210:	d8814c15 	stw	r2,1328(sp)
   82214:	39c00104 	addi	r7,r7,4
   82218:	01400274 	movhi	r5,9
   8221c:	2977c904 	addi	r5,r5,-8412
   82220:	00800c04 	movi	r2,48
   82224:	0023883a 	mov	r17,zero
   82228:	01000084 	movi	r4,2
   8222c:	d9c14015 	stw	r7,1280(sp)
   82230:	d8c14d15 	stw	r3,1332(sp)
   82234:	d9414415 	stw	r5,1296(sp)
   82238:	d8800445 	stb	r2,17(sp)
   8223c:	d8c00485 	stb	r3,18(sp)
   82240:	d8000405 	stb	zero,16(sp)
   82244:	003e7d06 	br	81c3c <___vfprintf_internal_r+0xa38>
   82248:	d8814c17 	ldw	r2,1328(sp)
   8224c:	b8c00007 	ldb	r3,0(r23)
   82250:	10801014 	ori	r2,r2,64
   82254:	d8814c15 	stw	r2,1328(sp)
   82258:	003c6906 	br	81400 <___vfprintf_internal_r+0x1fc>
   8225c:	d9414c17 	ldw	r5,1328(sp)
   82260:	2880020c 	andi	r2,r5,8
   82264:	1001e526 	beq	r2,zero,829fc <___vfprintf_internal_r+0x17f8>
   82268:	39800017 	ldw	r6,0(r7)
   8226c:	38800204 	addi	r2,r7,8
   82270:	d8814015 	stw	r2,1280(sp)
   82274:	d9814215 	stw	r6,1288(sp)
   82278:	39c00117 	ldw	r7,4(r7)
   8227c:	d9c14315 	stw	r7,1292(sp)
   82280:	d9014217 	ldw	r4,1288(sp)
   82284:	d9414317 	ldw	r5,1292(sp)
   82288:	0087cb40 	call	87cb4 <__isinfd>
   8228c:	10021d26 	beq	r2,zero,82b04 <___vfprintf_internal_r+0x1900>
   82290:	d9014217 	ldw	r4,1288(sp)
   82294:	d9414317 	ldw	r5,1292(sp)
   82298:	000d883a 	mov	r6,zero
   8229c:	000f883a 	mov	r7,zero
   822a0:	0089ec40 	call	89ec4 <__ltdf2>
   822a4:	1002d016 	blt	r2,zero,82de8 <___vfprintf_internal_r+0x1be4>
   822a8:	d9414d17 	ldw	r5,1332(sp)
   822ac:	008011c4 	movi	r2,71
   822b0:	11421016 	blt	r2,r5,82af4 <___vfprintf_internal_r+0x18f0>
   822b4:	01800274 	movhi	r6,9
   822b8:	31b7ce04 	addi	r6,r6,-8392
   822bc:	d9814115 	stw	r6,1284(sp)
   822c0:	d9014c17 	ldw	r4,1328(sp)
   822c4:	00c000c4 	movi	r3,3
   822c8:	00bfdfc4 	movi	r2,-129
   822cc:	2088703a 	and	r4,r4,r2
   822d0:	180f883a 	mov	r7,r3
   822d4:	d8c14515 	stw	r3,1300(sp)
   822d8:	d9014c15 	stw	r4,1328(sp)
   822dc:	d8014615 	stw	zero,1304(sp)
   822e0:	003e6a06 	br	81c8c <___vfprintf_internal_r+0xa88>
   822e4:	38800017 	ldw	r2,0(r7)
   822e8:	00c00044 	movi	r3,1
   822ec:	39c00104 	addi	r7,r7,4
   822f0:	d9c14015 	stw	r7,1280(sp)
   822f4:	d9000f04 	addi	r4,sp,60
   822f8:	180f883a 	mov	r7,r3
   822fc:	d8c14515 	stw	r3,1300(sp)
   82300:	d9014115 	stw	r4,1284(sp)
   82304:	d8800f05 	stb	r2,60(sp)
   82308:	d8000405 	stb	zero,16(sp)
   8230c:	003cac06 	br	815c0 <___vfprintf_internal_r+0x3bc>
   82310:	01400274 	movhi	r5,9
   82314:	2977d404 	addi	r5,r5,-8368
   82318:	d9414415 	stw	r5,1296(sp)
   8231c:	d9814c17 	ldw	r6,1328(sp)
   82320:	3080080c 	andi	r2,r6,32
   82324:	1000ff26 	beq	r2,zero,82724 <___vfprintf_internal_r+0x1520>
   82328:	3c000017 	ldw	r16,0(r7)
   8232c:	3c400117 	ldw	r17,4(r7)
   82330:	38800204 	addi	r2,r7,8
   82334:	d8814015 	stw	r2,1280(sp)
   82338:	d9414c17 	ldw	r5,1328(sp)
   8233c:	2880004c 	andi	r2,r5,1
   82340:	1005003a 	cmpeq	r2,r2,zero
   82344:	1000b91e 	bne	r2,zero,8262c <___vfprintf_internal_r+0x1428>
   82348:	8444b03a 	or	r2,r16,r17
   8234c:	1000b726 	beq	r2,zero,8262c <___vfprintf_internal_r+0x1428>
   82350:	d9814d17 	ldw	r6,1332(sp)
   82354:	29400094 	ori	r5,r5,2
   82358:	00800c04 	movi	r2,48
   8235c:	01000084 	movi	r4,2
   82360:	d9414c15 	stw	r5,1328(sp)
   82364:	d8800445 	stb	r2,17(sp)
   82368:	d9800485 	stb	r6,18(sp)
   8236c:	d8000405 	stb	zero,16(sp)
   82370:	003e3206 	br	81c3c <___vfprintf_internal_r+0xa38>
   82374:	01800274 	movhi	r6,9
   82378:	31b7c904 	addi	r6,r6,-8412
   8237c:	d9814415 	stw	r6,1296(sp)
   82380:	003fe606 	br	8231c <___vfprintf_internal_r+0x1118>
   82384:	00800ac4 	movi	r2,43
   82388:	d8800405 	stb	r2,16(sp)
   8238c:	b8c00007 	ldb	r3,0(r23)
   82390:	003c1b06 	br	81400 <___vfprintf_internal_r+0x1fc>
   82394:	d8814c17 	ldw	r2,1328(sp)
   82398:	b8c00007 	ldb	r3,0(r23)
   8239c:	10800054 	ori	r2,r2,1
   823a0:	d8814c15 	stw	r2,1328(sp)
   823a4:	003c1606 	br	81400 <___vfprintf_internal_r+0x1fc>
   823a8:	d8800407 	ldb	r2,16(sp)
   823ac:	10004c1e 	bne	r2,zero,824e0 <___vfprintf_internal_r+0x12dc>
   823b0:	00800804 	movi	r2,32
   823b4:	d8800405 	stb	r2,16(sp)
   823b8:	b8c00007 	ldb	r3,0(r23)
   823bc:	003c1006 	br	81400 <___vfprintf_internal_r+0x1fc>
   823c0:	d9814c17 	ldw	r6,1328(sp)
   823c4:	b8c00007 	ldb	r3,0(r23)
   823c8:	31800214 	ori	r6,r6,8
   823cc:	d9814c15 	stw	r6,1328(sp)
   823d0:	003c0b06 	br	81400 <___vfprintf_internal_r+0x1fc>
   823d4:	0009883a 	mov	r4,zero
   823d8:	04000244 	movi	r16,9
   823dc:	01400284 	movi	r5,10
   823e0:	d9c15115 	stw	r7,1348(sp)
   823e4:	0080e140 	call	80e14 <__mulsi3>
   823e8:	b9000007 	ldb	r4,0(r23)
   823ec:	d8c14d17 	ldw	r3,1332(sp)
   823f0:	bdc00044 	addi	r23,r23,1
   823f4:	d9014d15 	stw	r4,1332(sp)
   823f8:	d9414d17 	ldw	r5,1332(sp)
   823fc:	1885883a 	add	r2,r3,r2
   82400:	113ff404 	addi	r4,r2,-48
   82404:	28bff404 	addi	r2,r5,-48
   82408:	d9c15117 	ldw	r7,1348(sp)
   8240c:	80bff32e 	bgeu	r16,r2,823dc <___vfprintf_internal_r+0x11d8>
   82410:	d9014a15 	stw	r4,1320(sp)
   82414:	003bfc06 	br	81408 <___vfprintf_internal_r+0x204>
   82418:	d8814c17 	ldw	r2,1328(sp)
   8241c:	b8c00007 	ldb	r3,0(r23)
   82420:	10802014 	ori	r2,r2,128
   82424:	d8814c15 	stw	r2,1328(sp)
   82428:	003bf506 	br	81400 <___vfprintf_internal_r+0x1fc>
   8242c:	b8c00007 	ldb	r3,0(r23)
   82430:	00800a84 	movi	r2,42
   82434:	bdc00044 	addi	r23,r23,1
   82438:	18831826 	beq	r3,r2,8309c <___vfprintf_internal_r+0x1e98>
   8243c:	d8c14d15 	stw	r3,1332(sp)
   82440:	18bff404 	addi	r2,r3,-48
   82444:	00c00244 	movi	r3,9
   82448:	18827b36 	bltu	r3,r2,82e38 <___vfprintf_internal_r+0x1c34>
   8244c:	1821883a 	mov	r16,r3
   82450:	0009883a 	mov	r4,zero
   82454:	01400284 	movi	r5,10
   82458:	d9c15115 	stw	r7,1348(sp)
   8245c:	0080e140 	call	80e14 <__mulsi3>
   82460:	d9414d17 	ldw	r5,1332(sp)
   82464:	b9800007 	ldb	r6,0(r23)
   82468:	d9c15117 	ldw	r7,1348(sp)
   8246c:	1145883a 	add	r2,r2,r5
   82470:	113ff404 	addi	r4,r2,-48
   82474:	30bff404 	addi	r2,r6,-48
   82478:	d9814d15 	stw	r6,1332(sp)
   8247c:	bdc00044 	addi	r23,r23,1
   82480:	80bff42e 	bgeu	r16,r2,82454 <___vfprintf_internal_r+0x1250>
   82484:	2027883a 	mov	r19,r4
   82488:	203bdf0e 	bge	r4,zero,81408 <___vfprintf_internal_r+0x204>
   8248c:	04ffffc4 	movi	r19,-1
   82490:	003bdd06 	br	81408 <___vfprintf_internal_r+0x204>
   82494:	d8000405 	stb	zero,16(sp)
   82498:	39800017 	ldw	r6,0(r7)
   8249c:	39c00104 	addi	r7,r7,4
   824a0:	d9c14015 	stw	r7,1280(sp)
   824a4:	d9814115 	stw	r6,1284(sp)
   824a8:	3001c926 	beq	r6,zero,82bd0 <___vfprintf_internal_r+0x19cc>
   824ac:	98000e16 	blt	r19,zero,824e8 <___vfprintf_internal_r+0x12e4>
   824b0:	d9014117 	ldw	r4,1284(sp)
   824b4:	000b883a 	mov	r5,zero
   824b8:	980d883a 	mov	r6,r19
   824bc:	00863380 	call	86338 <memchr>
   824c0:	10025926 	beq	r2,zero,82e28 <___vfprintf_internal_r+0x1c24>
   824c4:	d8c14117 	ldw	r3,1284(sp)
   824c8:	10cfc83a 	sub	r7,r2,r3
   824cc:	99c19e16 	blt	r19,r7,82b48 <___vfprintf_internal_r+0x1944>
   824d0:	d9c14515 	stw	r7,1300(sp)
   824d4:	38000916 	blt	r7,zero,824fc <___vfprintf_internal_r+0x12f8>
   824d8:	d8014615 	stw	zero,1304(sp)
   824dc:	003deb06 	br	81c8c <___vfprintf_internal_r+0xa88>
   824e0:	b8c00007 	ldb	r3,0(r23)
   824e4:	003bc606 	br	81400 <___vfprintf_internal_r+0x1fc>
   824e8:	d9014117 	ldw	r4,1284(sp)
   824ec:	0087f9c0 	call	87f9c <strlen>
   824f0:	d8814515 	stw	r2,1300(sp)
   824f4:	100f883a 	mov	r7,r2
   824f8:	103ff70e 	bge	r2,zero,824d8 <___vfprintf_internal_r+0x12d4>
   824fc:	d8014515 	stw	zero,1300(sp)
   82500:	d8014615 	stw	zero,1304(sp)
   82504:	003de106 	br	81c8c <___vfprintf_internal_r+0xa88>
   82508:	20c03fcc 	andi	r3,r4,255
   8250c:	00800044 	movi	r2,1
   82510:	18802d26 	beq	r3,r2,825c8 <___vfprintf_internal_r+0x13c4>
   82514:	18800e36 	bltu	r3,r2,82550 <___vfprintf_internal_r+0x134c>
   82518:	00800084 	movi	r2,2
   8251c:	1880fa26 	beq	r3,r2,82908 <___vfprintf_internal_r+0x1704>
   82520:	01000274 	movhi	r4,9
   82524:	2137d904 	addi	r4,r4,-8348
   82528:	0087f9c0 	call	87f9c <strlen>
   8252c:	100f883a 	mov	r7,r2
   82530:	dcc14515 	stw	r19,1300(sp)
   82534:	9880010e 	bge	r19,r2,8253c <___vfprintf_internal_r+0x1338>
   82538:	d8814515 	stw	r2,1300(sp)
   8253c:	00800274 	movhi	r2,9
   82540:	10b7d904 	addi	r2,r2,-8348
   82544:	dcc14615 	stw	r19,1304(sp)
   82548:	d8814115 	stw	r2,1284(sp)
   8254c:	003dcf06 	br	81c8c <___vfprintf_internal_r+0xa88>
   82550:	d9401904 	addi	r5,sp,100
   82554:	dd000f04 	addi	r20,sp,60
   82558:	d9414115 	stw	r5,1284(sp)
   8255c:	880a977a 	slli	r5,r17,29
   82560:	d9814117 	ldw	r6,1284(sp)
   82564:	8004d0fa 	srli	r2,r16,3
   82568:	8806d0fa 	srli	r3,r17,3
   8256c:	810001cc 	andi	r4,r16,7
   82570:	2884b03a 	or	r2,r5,r2
   82574:	31bfffc4 	addi	r6,r6,-1
   82578:	21000c04 	addi	r4,r4,48
   8257c:	d9814115 	stw	r6,1284(sp)
   82580:	10cab03a 	or	r5,r2,r3
   82584:	31000005 	stb	r4,0(r6)
   82588:	1021883a 	mov	r16,r2
   8258c:	1823883a 	mov	r17,r3
   82590:	283ff21e 	bne	r5,zero,8255c <___vfprintf_internal_r+0x1358>
   82594:	d8c14c17 	ldw	r3,1328(sp)
   82598:	1880004c 	andi	r2,r3,1
   8259c:	1005003a 	cmpeq	r2,r2,zero
   825a0:	103db31e 	bne	r2,zero,81c70 <___vfprintf_internal_r+0xa6c>
   825a4:	20803fcc 	andi	r2,r4,255
   825a8:	1080201c 	xori	r2,r2,128
   825ac:	10bfe004 	addi	r2,r2,-128
   825b0:	00c00c04 	movi	r3,48
   825b4:	10fdae26 	beq	r2,r3,81c70 <___vfprintf_internal_r+0xa6c>
   825b8:	31bfffc4 	addi	r6,r6,-1
   825bc:	d9814115 	stw	r6,1284(sp)
   825c0:	30c00005 	stb	r3,0(r6)
   825c4:	003daa06 	br	81c70 <___vfprintf_internal_r+0xa6c>
   825c8:	88800068 	cmpgeui	r2,r17,1
   825cc:	10002c1e 	bne	r2,zero,82680 <___vfprintf_internal_r+0x147c>
   825d0:	8800021e 	bne	r17,zero,825dc <___vfprintf_internal_r+0x13d8>
   825d4:	00800244 	movi	r2,9
   825d8:	14002936 	bltu	r2,r16,82680 <___vfprintf_internal_r+0x147c>
   825dc:	d90018c4 	addi	r4,sp,99
   825e0:	dd000f04 	addi	r20,sp,60
   825e4:	d9014115 	stw	r4,1284(sp)
   825e8:	d9014117 	ldw	r4,1284(sp)
   825ec:	80800c04 	addi	r2,r16,48
   825f0:	20800005 	stb	r2,0(r4)
   825f4:	003d9e06 	br	81c70 <___vfprintf_internal_r+0xa6c>
   825f8:	dc400d17 	ldw	r17,52(sp)
   825fc:	07000274 	movhi	fp,9
   82600:	e737e084 	addi	fp,fp,-8318
   82604:	9425883a 	add	r18,r18,r16
   82608:	8c400044 	addi	r17,r17,1
   8260c:	008001c4 	movi	r2,7
   82610:	1f000015 	stw	fp,0(r3)
   82614:	1c000115 	stw	r16,4(r3)
   82618:	dc800e15 	stw	r18,56(sp)
   8261c:	dc400d15 	stw	r17,52(sp)
   82620:	147ddc16 	blt	r2,r17,81d94 <___vfprintf_internal_r+0xb90>
   82624:	18c00204 	addi	r3,r3,8
   82628:	003c7406 	br	817fc <___vfprintf_internal_r+0x5f8>
   8262c:	01000084 	movi	r4,2
   82630:	d8000405 	stb	zero,16(sp)
   82634:	003d8106 	br	81c3c <___vfprintf_internal_r+0xa38>
   82638:	d9814c17 	ldw	r6,1328(sp)
   8263c:	30c4703a 	and	r2,r6,r3
   82640:	1005003a 	cmpeq	r2,r2,zero
   82644:	103cb326 	beq	r2,zero,81914 <___vfprintf_internal_r+0x710>
   82648:	d9014117 	ldw	r4,1284(sp)
   8264c:	94800044 	addi	r18,r18,1
   82650:	8c400044 	addi	r17,r17,1
   82654:	008001c4 	movi	r2,7
   82658:	a9000015 	stw	r4,0(r21)
   8265c:	a8c00115 	stw	r3,4(r21)
   82660:	dc800e15 	stw	r18,56(sp)
   82664:	dc400d15 	stw	r17,52(sp)
   82668:	147e6016 	blt	r2,r17,81fec <___vfprintf_internal_r+0xde8>
   8266c:	acc00204 	addi	r19,r21,8
   82670:	003cd106 	br	819b8 <___vfprintf_internal_r+0x7b4>
   82674:	07000274 	movhi	fp,9
   82678:	e737e084 	addi	fp,fp,-8318
   8267c:	003c4906 	br	817a4 <___vfprintf_internal_r+0x5a0>
   82680:	dd000f04 	addi	r20,sp,60
   82684:	dc801904 	addi	r18,sp,100
   82688:	8009883a 	mov	r4,r16
   8268c:	880b883a 	mov	r5,r17
   82690:	01800284 	movi	r6,10
   82694:	000f883a 	mov	r7,zero
   82698:	0088b240 	call	88b24 <__umoddi3>
   8269c:	12000c04 	addi	r8,r2,48
   826a0:	94bfffc4 	addi	r18,r18,-1
   826a4:	8009883a 	mov	r4,r16
   826a8:	880b883a 	mov	r5,r17
   826ac:	01800284 	movi	r6,10
   826b0:	000f883a 	mov	r7,zero
   826b4:	92000005 	stb	r8,0(r18)
   826b8:	00884b80 	call	884b8 <__udivdi3>
   826bc:	1009883a 	mov	r4,r2
   826c0:	1021883a 	mov	r16,r2
   826c4:	18800068 	cmpgeui	r2,r3,1
   826c8:	1823883a 	mov	r17,r3
   826cc:	103fee1e 	bne	r2,zero,82688 <___vfprintf_internal_r+0x1484>
   826d0:	1800021e 	bne	r3,zero,826dc <___vfprintf_internal_r+0x14d8>
   826d4:	00800244 	movi	r2,9
   826d8:	113feb36 	bltu	r2,r4,82688 <___vfprintf_internal_r+0x1484>
   826dc:	94bfffc4 	addi	r18,r18,-1
   826e0:	dc814115 	stw	r18,1284(sp)
   826e4:	003fc006 	br	825e8 <___vfprintf_internal_r+0x13e4>
   826e8:	d9014c17 	ldw	r4,1328(sp)
   826ec:	2080004c 	andi	r2,r4,1
   826f0:	10009a1e 	bne	r2,zero,8295c <___vfprintf_internal_r+0x1758>
   826f4:	d9401904 	addi	r5,sp,100
   826f8:	dd000f04 	addi	r20,sp,60
   826fc:	d9414115 	stw	r5,1284(sp)
   82700:	003d5b06 	br	81c70 <___vfprintf_internal_r+0xa6c>
   82704:	d9014f17 	ldw	r4,1340(sp)
   82708:	b00b883a 	mov	r5,r22
   8270c:	d9800c04 	addi	r6,sp,48
   82710:	00811ac0 	call	811ac <__sprint_r>
   82714:	103c731e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82718:	dc800e17 	ldw	r18,56(sp)
   8271c:	d8c01904 	addi	r3,sp,100
   82720:	003cf906 	br	81b08 <___vfprintf_internal_r+0x904>
   82724:	d8c14c17 	ldw	r3,1328(sp)
   82728:	1880040c 	andi	r2,r3,16
   8272c:	1000711e 	bne	r2,zero,828f4 <___vfprintf_internal_r+0x16f0>
   82730:	d9014c17 	ldw	r4,1328(sp)
   82734:	2080100c 	andi	r2,r4,64
   82738:	10006e26 	beq	r2,zero,828f4 <___vfprintf_internal_r+0x16f0>
   8273c:	3c00000b 	ldhu	r16,0(r7)
   82740:	0023883a 	mov	r17,zero
   82744:	39c00104 	addi	r7,r7,4
   82748:	d9c14015 	stw	r7,1280(sp)
   8274c:	003efa06 	br	82338 <___vfprintf_internal_r+0x1134>
   82750:	dc400d17 	ldw	r17,52(sp)
   82754:	07000274 	movhi	fp,9
   82758:	e737e084 	addi	fp,fp,-8318
   8275c:	9425883a 	add	r18,r18,r16
   82760:	8c400044 	addi	r17,r17,1
   82764:	008001c4 	movi	r2,7
   82768:	1f000015 	stw	fp,0(r3)
   8276c:	1c000115 	stw	r16,4(r3)
   82770:	dc800e15 	stw	r18,56(sp)
   82774:	dc400d15 	stw	r17,52(sp)
   82778:	147d7016 	blt	r2,r17,81d3c <___vfprintf_internal_r+0xb38>
   8277c:	18c00204 	addi	r3,r3,8
   82780:	003d7506 	br	81d58 <___vfprintf_internal_r+0xb54>
   82784:	dc800e17 	ldw	r18,56(sp)
   82788:	dc400d17 	ldw	r17,52(sp)
   8278c:	07000274 	movhi	fp,9
   82790:	e737e484 	addi	fp,fp,-8302
   82794:	003bba06 	br	81680 <___vfprintf_internal_r+0x47c>
   82798:	d9014f17 	ldw	r4,1340(sp)
   8279c:	b00b883a 	mov	r5,r22
   827a0:	d9800c04 	addi	r6,sp,48
   827a4:	00811ac0 	call	811ac <__sprint_r>
   827a8:	103c4e1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   827ac:	dc800e17 	ldw	r18,56(sp)
   827b0:	d8c01904 	addi	r3,sp,100
   827b4:	003ce306 	br	81b44 <___vfprintf_internal_r+0x940>
   827b8:	3c000017 	ldw	r16,0(r7)
   827bc:	0009883a 	mov	r4,zero
   827c0:	39c00104 	addi	r7,r7,4
   827c4:	0023883a 	mov	r17,zero
   827c8:	d9c14015 	stw	r7,1280(sp)
   827cc:	d8000405 	stb	zero,16(sp)
   827d0:	003d1a06 	br	81c3c <___vfprintf_internal_r+0xa38>
   827d4:	38800017 	ldw	r2,0(r7)
   827d8:	39c00104 	addi	r7,r7,4
   827dc:	d9c14015 	stw	r7,1280(sp)
   827e0:	1023d7fa 	srai	r17,r2,31
   827e4:	1021883a 	mov	r16,r2
   827e8:	003d1206 	br	81c34 <___vfprintf_internal_r+0xa30>
   827ec:	3c000017 	ldw	r16,0(r7)
   827f0:	01000044 	movi	r4,1
   827f4:	39c00104 	addi	r7,r7,4
   827f8:	0023883a 	mov	r17,zero
   827fc:	d9c14015 	stw	r7,1280(sp)
   82800:	d8000405 	stb	zero,16(sp)
   82804:	003d0d06 	br	81c3c <___vfprintf_internal_r+0xa38>
   82808:	00800274 	movhi	r2,9
   8280c:	10b7e004 	addi	r2,r2,-8320
   82810:	94800044 	addi	r18,r18,1
   82814:	8c400044 	addi	r17,r17,1
   82818:	a8800015 	stw	r2,0(r21)
   8281c:	00c00044 	movi	r3,1
   82820:	008001c4 	movi	r2,7
   82824:	a8c00115 	stw	r3,4(r21)
   82828:	dc800e15 	stw	r18,56(sp)
   8282c:	dc400d15 	stw	r17,52(sp)
   82830:	1440ca16 	blt	r2,r17,82b5c <___vfprintf_internal_r+0x1958>
   82834:	a8c00204 	addi	r3,r21,8
   82838:	2000061e 	bne	r4,zero,82854 <___vfprintf_internal_r+0x1650>
   8283c:	d9414717 	ldw	r5,1308(sp)
   82840:	2800041e 	bne	r5,zero,82854 <___vfprintf_internal_r+0x1650>
   82844:	d9814c17 	ldw	r6,1328(sp)
   82848:	3080004c 	andi	r2,r6,1
   8284c:	1005003a 	cmpeq	r2,r2,zero
   82850:	103bea1e 	bne	r2,zero,817fc <___vfprintf_internal_r+0x5f8>
   82854:	00800044 	movi	r2,1
   82858:	dc400d17 	ldw	r17,52(sp)
   8285c:	18800115 	stw	r2,4(r3)
   82860:	d8814917 	ldw	r2,1316(sp)
   82864:	94800044 	addi	r18,r18,1
   82868:	8c400044 	addi	r17,r17,1
   8286c:	18800015 	stw	r2,0(r3)
   82870:	008001c4 	movi	r2,7
   82874:	dc800e15 	stw	r18,56(sp)
   82878:	dc400d15 	stw	r17,52(sp)
   8287c:	1440ca16 	blt	r2,r17,82ba8 <___vfprintf_internal_r+0x19a4>
   82880:	18c00204 	addi	r3,r3,8
   82884:	0121c83a 	sub	r16,zero,r4
   82888:	0400500e 	bge	zero,r16,829cc <___vfprintf_internal_r+0x17c8>
   8288c:	00800404 	movi	r2,16
   82890:	1400800e 	bge	r2,r16,82a94 <___vfprintf_internal_r+0x1890>
   82894:	1027883a 	mov	r19,r2
   82898:	07000274 	movhi	fp,9
   8289c:	e737e084 	addi	fp,fp,-8318
   828a0:	050001c4 	movi	r20,7
   828a4:	00000306 	br	828b4 <___vfprintf_internal_r+0x16b0>
   828a8:	18c00204 	addi	r3,r3,8
   828ac:	843ffc04 	addi	r16,r16,-16
   828b0:	9c007a0e 	bge	r19,r16,82a9c <___vfprintf_internal_r+0x1898>
   828b4:	94800404 	addi	r18,r18,16
   828b8:	8c400044 	addi	r17,r17,1
   828bc:	1f000015 	stw	fp,0(r3)
   828c0:	1cc00115 	stw	r19,4(r3)
   828c4:	dc800e15 	stw	r18,56(sp)
   828c8:	dc400d15 	stw	r17,52(sp)
   828cc:	a47ff60e 	bge	r20,r17,828a8 <___vfprintf_internal_r+0x16a4>
   828d0:	d9014f17 	ldw	r4,1340(sp)
   828d4:	b00b883a 	mov	r5,r22
   828d8:	d9800c04 	addi	r6,sp,48
   828dc:	00811ac0 	call	811ac <__sprint_r>
   828e0:	103c001e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   828e4:	dc800e17 	ldw	r18,56(sp)
   828e8:	dc400d17 	ldw	r17,52(sp)
   828ec:	d8c01904 	addi	r3,sp,100
   828f0:	003fee06 	br	828ac <___vfprintf_internal_r+0x16a8>
   828f4:	3c000017 	ldw	r16,0(r7)
   828f8:	0023883a 	mov	r17,zero
   828fc:	39c00104 	addi	r7,r7,4
   82900:	d9c14015 	stw	r7,1280(sp)
   82904:	003e8c06 	br	82338 <___vfprintf_internal_r+0x1134>
   82908:	d9401904 	addi	r5,sp,100
   8290c:	dd000f04 	addi	r20,sp,60
   82910:	d9414115 	stw	r5,1284(sp)
   82914:	d9814417 	ldw	r6,1296(sp)
   82918:	880a973a 	slli	r5,r17,28
   8291c:	8004d13a 	srli	r2,r16,4
   82920:	810003cc 	andi	r4,r16,15
   82924:	3109883a 	add	r4,r6,r4
   82928:	2884b03a 	or	r2,r5,r2
   8292c:	21400003 	ldbu	r5,0(r4)
   82930:	d9014117 	ldw	r4,1284(sp)
   82934:	8806d13a 	srli	r3,r17,4
   82938:	1021883a 	mov	r16,r2
   8293c:	213fffc4 	addi	r4,r4,-1
   82940:	d9014115 	stw	r4,1284(sp)
   82944:	d9814117 	ldw	r6,1284(sp)
   82948:	10c8b03a 	or	r4,r2,r3
   8294c:	1823883a 	mov	r17,r3
   82950:	31400005 	stb	r5,0(r6)
   82954:	203fef1e 	bne	r4,zero,82914 <___vfprintf_internal_r+0x1710>
   82958:	003cc506 	br	81c70 <___vfprintf_internal_r+0xa6c>
   8295c:	00800c04 	movi	r2,48
   82960:	d98018c4 	addi	r6,sp,99
   82964:	dd000f04 	addi	r20,sp,60
   82968:	d88018c5 	stb	r2,99(sp)
   8296c:	d9814115 	stw	r6,1284(sp)
   82970:	003cbf06 	br	81c70 <___vfprintf_internal_r+0xa6c>
   82974:	dc400d17 	ldw	r17,52(sp)
   82978:	07000274 	movhi	fp,9
   8297c:	e737e484 	addi	fp,fp,-8302
   82980:	003bc106 	br	81888 <___vfprintf_internal_r+0x684>
   82984:	d9414c17 	ldw	r5,1328(sp)
   82988:	2880040c 	andi	r2,r5,16
   8298c:	10007c26 	beq	r2,zero,82b80 <___vfprintf_internal_r+0x197c>
   82990:	38800017 	ldw	r2,0(r7)
   82994:	39c00104 	addi	r7,r7,4
   82998:	d9c14015 	stw	r7,1280(sp)
   8299c:	d9814b17 	ldw	r6,1324(sp)
   829a0:	d9c14017 	ldw	r7,1280(sp)
   829a4:	11800015 	stw	r6,0(r2)
   829a8:	003a7206 	br	81374 <___vfprintf_internal_r+0x170>
   829ac:	d9014f17 	ldw	r4,1340(sp)
   829b0:	b00b883a 	mov	r5,r22
   829b4:	d9800c04 	addi	r6,sp,48
   829b8:	00811ac0 	call	811ac <__sprint_r>
   829bc:	103bc91e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   829c0:	dc800e17 	ldw	r18,56(sp)
   829c4:	dc400d17 	ldw	r17,52(sp)
   829c8:	d8c01904 	addi	r3,sp,100
   829cc:	d9014717 	ldw	r4,1308(sp)
   829d0:	d9414117 	ldw	r5,1284(sp)
   829d4:	8c400044 	addi	r17,r17,1
   829d8:	9125883a 	add	r18,r18,r4
   829dc:	008001c4 	movi	r2,7
   829e0:	19400015 	stw	r5,0(r3)
   829e4:	19000115 	stw	r4,4(r3)
   829e8:	dc800e15 	stw	r18,56(sp)
   829ec:	dc400d15 	stw	r17,52(sp)
   829f0:	147ce816 	blt	r2,r17,81d94 <___vfprintf_internal_r+0xb90>
   829f4:	18c00204 	addi	r3,r3,8
   829f8:	003b8006 	br	817fc <___vfprintf_internal_r+0x5f8>
   829fc:	38c00017 	ldw	r3,0(r7)
   82a00:	39000204 	addi	r4,r7,8
   82a04:	d9014015 	stw	r4,1280(sp)
   82a08:	d8c14215 	stw	r3,1288(sp)
   82a0c:	39c00117 	ldw	r7,4(r7)
   82a10:	d9c14315 	stw	r7,1292(sp)
   82a14:	003e1a06 	br	82280 <___vfprintf_internal_r+0x107c>
   82a18:	0005883a 	mov	r2,zero
   82a1c:	1409c83a 	sub	r4,r2,r16
   82a20:	1105803a 	cmpltu	r2,r2,r4
   82a24:	044bc83a 	sub	r5,zero,r17
   82a28:	2885c83a 	sub	r2,r5,r2
   82a2c:	2021883a 	mov	r16,r4
   82a30:	1023883a 	mov	r17,r2
   82a34:	01000044 	movi	r4,1
   82a38:	00800b44 	movi	r2,45
   82a3c:	d8800405 	stb	r2,16(sp)
   82a40:	003c7e06 	br	81c3c <___vfprintf_internal_r+0xa38>
   82a44:	d9014f17 	ldw	r4,1340(sp)
   82a48:	b00b883a 	mov	r5,r22
   82a4c:	d9800c04 	addi	r6,sp,48
   82a50:	00811ac0 	call	811ac <__sprint_r>
   82a54:	103ba31e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82a58:	dc800e17 	ldw	r18,56(sp)
   82a5c:	dc400d17 	ldw	r17,52(sp)
   82a60:	d9000517 	ldw	r4,20(sp)
   82a64:	d9401904 	addi	r5,sp,100
   82a68:	003da106 	br	820f0 <___vfprintf_internal_r+0xeec>
   82a6c:	d9014f17 	ldw	r4,1340(sp)
   82a70:	b00b883a 	mov	r5,r22
   82a74:	d9800c04 	addi	r6,sp,48
   82a78:	00811ac0 	call	811ac <__sprint_r>
   82a7c:	103b991e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82a80:	dc800e17 	ldw	r18,56(sp)
   82a84:	dc400d17 	ldw	r17,52(sp)
   82a88:	d9000517 	ldw	r4,20(sp)
   82a8c:	d8c01904 	addi	r3,sp,100
   82a90:	003d8b06 	br	820c0 <___vfprintf_internal_r+0xebc>
   82a94:	07000274 	movhi	fp,9
   82a98:	e737e084 	addi	fp,fp,-8318
   82a9c:	9425883a 	add	r18,r18,r16
   82aa0:	8c400044 	addi	r17,r17,1
   82aa4:	008001c4 	movi	r2,7
   82aa8:	1f000015 	stw	fp,0(r3)
   82aac:	1c000115 	stw	r16,4(r3)
   82ab0:	dc800e15 	stw	r18,56(sp)
   82ab4:	dc400d15 	stw	r17,52(sp)
   82ab8:	147fbc16 	blt	r2,r17,829ac <___vfprintf_internal_r+0x17a8>
   82abc:	18c00204 	addi	r3,r3,8
   82ac0:	003fc206 	br	829cc <___vfprintf_internal_r+0x17c8>
   82ac4:	d9014f17 	ldw	r4,1340(sp)
   82ac8:	b00b883a 	mov	r5,r22
   82acc:	d9800c04 	addi	r6,sp,48
   82ad0:	00811ac0 	call	811ac <__sprint_r>
   82ad4:	103b831e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82ad8:	dc800e17 	ldw	r18,56(sp)
   82adc:	d9000517 	ldw	r4,20(sp)
   82ae0:	d8c01904 	addi	r3,sp,100
   82ae4:	003cfc06 	br	81ed8 <___vfprintf_internal_r+0xcd4>
   82ae8:	07000274 	movhi	fp,9
   82aec:	e737e084 	addi	fp,fp,-8318
   82af0:	003bde06 	br	81a6c <___vfprintf_internal_r+0x868>
   82af4:	00800274 	movhi	r2,9
   82af8:	10b7cf04 	addi	r2,r2,-8388
   82afc:	d8814115 	stw	r2,1284(sp)
   82b00:	003def06 	br	822c0 <___vfprintf_internal_r+0x10bc>
   82b04:	d9014217 	ldw	r4,1288(sp)
   82b08:	d9414317 	ldw	r5,1292(sp)
   82b0c:	0087cf40 	call	87cf4 <__isnand>
   82b10:	10003926 	beq	r2,zero,82bf8 <___vfprintf_internal_r+0x19f4>
   82b14:	d9414d17 	ldw	r5,1332(sp)
   82b18:	008011c4 	movi	r2,71
   82b1c:	1140ce16 	blt	r2,r5,82e58 <___vfprintf_internal_r+0x1c54>
   82b20:	01800274 	movhi	r6,9
   82b24:	31b7d004 	addi	r6,r6,-8384
   82b28:	d9814115 	stw	r6,1284(sp)
   82b2c:	003de406 	br	822c0 <___vfprintf_internal_r+0x10bc>
   82b30:	d9014c17 	ldw	r4,1328(sp)
   82b34:	bdc00044 	addi	r23,r23,1
   82b38:	b8c00007 	ldb	r3,0(r23)
   82b3c:	21000814 	ori	r4,r4,32
   82b40:	d9014c15 	stw	r4,1328(sp)
   82b44:	003a2e06 	br	81400 <___vfprintf_internal_r+0x1fc>
   82b48:	dcc14515 	stw	r19,1300(sp)
   82b4c:	98011016 	blt	r19,zero,82f90 <___vfprintf_internal_r+0x1d8c>
   82b50:	980f883a 	mov	r7,r19
   82b54:	d8014615 	stw	zero,1304(sp)
   82b58:	003c4c06 	br	81c8c <___vfprintf_internal_r+0xa88>
   82b5c:	d9014f17 	ldw	r4,1340(sp)
   82b60:	b00b883a 	mov	r5,r22
   82b64:	d9800c04 	addi	r6,sp,48
   82b68:	00811ac0 	call	811ac <__sprint_r>
   82b6c:	103b5d1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82b70:	dc800e17 	ldw	r18,56(sp)
   82b74:	d9000517 	ldw	r4,20(sp)
   82b78:	d8c01904 	addi	r3,sp,100
   82b7c:	003f2e06 	br	82838 <___vfprintf_internal_r+0x1634>
   82b80:	d8c14c17 	ldw	r3,1328(sp)
   82b84:	1880100c 	andi	r2,r3,64
   82b88:	1000a026 	beq	r2,zero,82e0c <___vfprintf_internal_r+0x1c08>
   82b8c:	38800017 	ldw	r2,0(r7)
   82b90:	39c00104 	addi	r7,r7,4
   82b94:	d9c14015 	stw	r7,1280(sp)
   82b98:	d9014b17 	ldw	r4,1324(sp)
   82b9c:	d9c14017 	ldw	r7,1280(sp)
   82ba0:	1100000d 	sth	r4,0(r2)
   82ba4:	0039f306 	br	81374 <___vfprintf_internal_r+0x170>
   82ba8:	d9014f17 	ldw	r4,1340(sp)
   82bac:	b00b883a 	mov	r5,r22
   82bb0:	d9800c04 	addi	r6,sp,48
   82bb4:	00811ac0 	call	811ac <__sprint_r>
   82bb8:	103b4a1e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82bbc:	dc800e17 	ldw	r18,56(sp)
   82bc0:	dc400d17 	ldw	r17,52(sp)
   82bc4:	d9000517 	ldw	r4,20(sp)
   82bc8:	d8c01904 	addi	r3,sp,100
   82bcc:	003f2d06 	br	82884 <___vfprintf_internal_r+0x1680>
   82bd0:	00800184 	movi	r2,6
   82bd4:	14c09a36 	bltu	r2,r19,82e40 <___vfprintf_internal_r+0x1c3c>
   82bd8:	dcc14515 	stw	r19,1300(sp)
   82bdc:	9800010e 	bge	r19,zero,82be4 <___vfprintf_internal_r+0x19e0>
   82be0:	d8014515 	stw	zero,1300(sp)
   82be4:	00800274 	movhi	r2,9
   82be8:	10b7d204 	addi	r2,r2,-8376
   82bec:	980f883a 	mov	r7,r19
   82bf0:	d8814115 	stw	r2,1284(sp)
   82bf4:	003a7206 	br	815c0 <___vfprintf_internal_r+0x3bc>
   82bf8:	00bfffc4 	movi	r2,-1
   82bfc:	9880e226 	beq	r19,r2,82f88 <___vfprintf_internal_r+0x1d84>
   82c00:	d9414d17 	ldw	r5,1332(sp)
   82c04:	008019c4 	movi	r2,103
   82c08:	2880dc26 	beq	r5,r2,82f7c <___vfprintf_internal_r+0x1d78>
   82c0c:	008011c4 	movi	r2,71
   82c10:	2880da26 	beq	r5,r2,82f7c <___vfprintf_internal_r+0x1d78>
   82c14:	d9414c17 	ldw	r5,1328(sp)
   82c18:	d9014317 	ldw	r4,1292(sp)
   82c1c:	d9814217 	ldw	r6,1288(sp)
   82c20:	29404014 	ori	r5,r5,256
   82c24:	d9414c15 	stw	r5,1328(sp)
   82c28:	2000cc16 	blt	r4,zero,82f5c <___vfprintf_internal_r+0x1d58>
   82c2c:	3021883a 	mov	r16,r6
   82c30:	2023883a 	mov	r17,r4
   82c34:	0039883a 	mov	fp,zero
   82c38:	d9414d17 	ldw	r5,1332(sp)
   82c3c:	00801984 	movi	r2,102
   82c40:	2880b726 	beq	r5,r2,82f20 <___vfprintf_internal_r+0x1d1c>
   82c44:	00801184 	movi	r2,70
   82c48:	2880b526 	beq	r5,r2,82f20 <___vfprintf_internal_r+0x1d1c>
   82c4c:	00801944 	movi	r2,101
   82c50:	2880c826 	beq	r5,r2,82f74 <___vfprintf_internal_r+0x1d70>
   82c54:	00801144 	movi	r2,69
   82c58:	2880c626 	beq	r5,r2,82f74 <___vfprintf_internal_r+0x1d70>
   82c5c:	9829883a 	mov	r20,r19
   82c60:	d9014f17 	ldw	r4,1340(sp)
   82c64:	d8800504 	addi	r2,sp,20
   82c68:	880d883a 	mov	r6,r17
   82c6c:	d8800115 	stw	r2,4(sp)
   82c70:	d8c00604 	addi	r3,sp,24
   82c74:	d8800704 	addi	r2,sp,28
   82c78:	800b883a 	mov	r5,r16
   82c7c:	01c00084 	movi	r7,2
   82c80:	d8c00215 	stw	r3,8(sp)
   82c84:	d8800315 	stw	r2,12(sp)
   82c88:	dd000015 	stw	r20,0(sp)
   82c8c:	008346c0 	call	8346c <_dtoa_r>
   82c90:	d9814d17 	ldw	r6,1332(sp)
   82c94:	d8814115 	stw	r2,1284(sp)
   82c98:	008019c4 	movi	r2,103
   82c9c:	30809526 	beq	r6,r2,82ef4 <___vfprintf_internal_r+0x1cf0>
   82ca0:	d8c14d17 	ldw	r3,1332(sp)
   82ca4:	008011c4 	movi	r2,71
   82ca8:	18809226 	beq	r3,r2,82ef4 <___vfprintf_internal_r+0x1cf0>
   82cac:	d9414117 	ldw	r5,1284(sp)
   82cb0:	d9814d17 	ldw	r6,1332(sp)
   82cb4:	00801984 	movi	r2,102
   82cb8:	2d25883a 	add	r18,r5,r20
   82cbc:	30808626 	beq	r6,r2,82ed8 <___vfprintf_internal_r+0x1cd4>
   82cc0:	00801184 	movi	r2,70
   82cc4:	30808426 	beq	r6,r2,82ed8 <___vfprintf_internal_r+0x1cd4>
   82cc8:	000d883a 	mov	r6,zero
   82ccc:	000f883a 	mov	r7,zero
   82cd0:	880b883a 	mov	r5,r17
   82cd4:	8009883a 	mov	r4,r16
   82cd8:	0089ca40 	call	89ca4 <__eqdf2>
   82cdc:	1000751e 	bne	r2,zero,82eb4 <___vfprintf_internal_r+0x1cb0>
   82ce0:	9005883a 	mov	r2,r18
   82ce4:	dc800715 	stw	r18,28(sp)
   82ce8:	d9014117 	ldw	r4,1284(sp)
   82cec:	d9414d17 	ldw	r5,1332(sp)
   82cf0:	00c019c4 	movi	r3,103
   82cf4:	1125c83a 	sub	r18,r2,r4
   82cf8:	28c06826 	beq	r5,r3,82e9c <___vfprintf_internal_r+0x1c98>
   82cfc:	008011c4 	movi	r2,71
   82d00:	28806626 	beq	r5,r2,82e9c <___vfprintf_internal_r+0x1c98>
   82d04:	d9000517 	ldw	r4,20(sp)
   82d08:	d8c14d17 	ldw	r3,1332(sp)
   82d0c:	00801944 	movi	r2,101
   82d10:	10c05516 	blt	r2,r3,82e68 <___vfprintf_internal_r+0x1c64>
   82d14:	213fffc4 	addi	r4,r4,-1
   82d18:	d9000515 	stw	r4,20(sp)
   82d1c:	d8c00805 	stb	r3,32(sp)
   82d20:	2021883a 	mov	r16,r4
   82d24:	2000c116 	blt	r4,zero,8302c <___vfprintf_internal_r+0x1e28>
   82d28:	00800ac4 	movi	r2,43
   82d2c:	d8800845 	stb	r2,33(sp)
   82d30:	00800244 	movi	r2,9
   82d34:	1400af0e 	bge	r2,r16,82ff4 <___vfprintf_internal_r+0x1df0>
   82d38:	1027883a 	mov	r19,r2
   82d3c:	dc400b84 	addi	r17,sp,46
   82d40:	8009883a 	mov	r4,r16
   82d44:	01400284 	movi	r5,10
   82d48:	0080da40 	call	80da4 <__modsi3>
   82d4c:	10800c04 	addi	r2,r2,48
   82d50:	8c7fffc4 	addi	r17,r17,-1
   82d54:	8009883a 	mov	r4,r16
   82d58:	01400284 	movi	r5,10
   82d5c:	88800005 	stb	r2,0(r17)
   82d60:	0080d440 	call	80d44 <__divsi3>
   82d64:	1021883a 	mov	r16,r2
   82d68:	98bff516 	blt	r19,r2,82d40 <___vfprintf_internal_r+0x1b3c>
   82d6c:	10c00c04 	addi	r3,r2,48
   82d70:	d88009c4 	addi	r2,sp,39
   82d74:	108001c4 	addi	r2,r2,7
   82d78:	897fffc4 	addi	r5,r17,-1
   82d7c:	88ffffc5 	stb	r3,-1(r17)
   82d80:	2880a72e 	bgeu	r5,r2,83020 <___vfprintf_internal_r+0x1e1c>
   82d84:	1009883a 	mov	r4,r2
   82d88:	d9800804 	addi	r6,sp,32
   82d8c:	d8c00884 	addi	r3,sp,34
   82d90:	28800003 	ldbu	r2,0(r5)
   82d94:	29400044 	addi	r5,r5,1
   82d98:	18800005 	stb	r2,0(r3)
   82d9c:	18c00044 	addi	r3,r3,1
   82da0:	293ffb36 	bltu	r5,r4,82d90 <___vfprintf_internal_r+0x1b8c>
   82da4:	1987c83a 	sub	r3,r3,r6
   82da8:	00800044 	movi	r2,1
   82dac:	d8c14815 	stw	r3,1312(sp)
   82db0:	90cf883a 	add	r7,r18,r3
   82db4:	1480960e 	bge	r2,r18,83010 <___vfprintf_internal_r+0x1e0c>
   82db8:	39c00044 	addi	r7,r7,1
   82dbc:	d9c14515 	stw	r7,1300(sp)
   82dc0:	38003416 	blt	r7,zero,82e94 <___vfprintf_internal_r+0x1c90>
   82dc4:	e0803fcc 	andi	r2,fp,255
   82dc8:	1080201c 	xori	r2,r2,128
   82dcc:	10bfe004 	addi	r2,r2,-128
   82dd0:	10004e26 	beq	r2,zero,82f0c <___vfprintf_internal_r+0x1d08>
   82dd4:	00800b44 	movi	r2,45
   82dd8:	dc814715 	stw	r18,1308(sp)
   82ddc:	d8014615 	stw	zero,1304(sp)
   82de0:	d8800405 	stb	r2,16(sp)
   82de4:	003bab06 	br	81c94 <___vfprintf_internal_r+0xa90>
   82de8:	00800b44 	movi	r2,45
   82dec:	d8800405 	stb	r2,16(sp)
   82df0:	003d2d06 	br	822a8 <___vfprintf_internal_r+0x10a4>
   82df4:	d9014f17 	ldw	r4,1340(sp)
   82df8:	b00b883a 	mov	r5,r22
   82dfc:	d9800c04 	addi	r6,sp,48
   82e00:	00811ac0 	call	811ac <__sprint_r>
   82e04:	103ab71e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0x6e0>
   82e08:	003ab506 	br	818e0 <___vfprintf_internal_r+0x6dc>
   82e0c:	38800017 	ldw	r2,0(r7)
   82e10:	39c00104 	addi	r7,r7,4
   82e14:	d9c14015 	stw	r7,1280(sp)
   82e18:	d9414b17 	ldw	r5,1324(sp)
   82e1c:	d9c14017 	ldw	r7,1280(sp)
   82e20:	11400015 	stw	r5,0(r2)
   82e24:	00395306 	br	81374 <___vfprintf_internal_r+0x170>
   82e28:	980f883a 	mov	r7,r19
   82e2c:	dcc14515 	stw	r19,1300(sp)
   82e30:	d8014615 	stw	zero,1304(sp)
   82e34:	003b9506 	br	81c8c <___vfprintf_internal_r+0xa88>
   82e38:	0027883a 	mov	r19,zero
   82e3c:	00397206 	br	81408 <___vfprintf_internal_r+0x204>
   82e40:	00c00274 	movhi	r3,9
   82e44:	18f7d204 	addi	r3,r3,-8376
   82e48:	100f883a 	mov	r7,r2
   82e4c:	d8814515 	stw	r2,1300(sp)
   82e50:	d8c14115 	stw	r3,1284(sp)
   82e54:	0039da06 	br	815c0 <___vfprintf_internal_r+0x3bc>
   82e58:	00800274 	movhi	r2,9
   82e5c:	10b7d104 	addi	r2,r2,-8380
   82e60:	d8814115 	stw	r2,1284(sp)
   82e64:	003d1606 	br	822c0 <___vfprintf_internal_r+0x10bc>
   82e68:	d9414d17 	ldw	r5,1332(sp)
   82e6c:	00801984 	movi	r2,102
   82e70:	28804926 	beq	r5,r2,82f98 <___vfprintf_internal_r+0x1d94>
   82e74:	200f883a 	mov	r7,r4
   82e78:	24805716 	blt	r4,r18,82fd8 <___vfprintf_internal_r+0x1dd4>
   82e7c:	d9414c17 	ldw	r5,1328(sp)
   82e80:	2880004c 	andi	r2,r5,1
   82e84:	10000126 	beq	r2,zero,82e8c <___vfprintf_internal_r+0x1c88>
   82e88:	21c00044 	addi	r7,r4,1
   82e8c:	d9c14515 	stw	r7,1300(sp)
   82e90:	383fcc0e 	bge	r7,zero,82dc4 <___vfprintf_internal_r+0x1bc0>
   82e94:	d8014515 	stw	zero,1300(sp)
   82e98:	003fca06 	br	82dc4 <___vfprintf_internal_r+0x1bc0>
   82e9c:	d9000517 	ldw	r4,20(sp)
   82ea0:	00bfff04 	movi	r2,-4
   82ea4:	1100480e 	bge	r2,r4,82fc8 <___vfprintf_internal_r+0x1dc4>
   82ea8:	99004716 	blt	r19,r4,82fc8 <___vfprintf_internal_r+0x1dc4>
   82eac:	d8c14d15 	stw	r3,1332(sp)
   82eb0:	003ff006 	br	82e74 <___vfprintf_internal_r+0x1c70>
   82eb4:	d8800717 	ldw	r2,28(sp)
   82eb8:	14bf8b2e 	bgeu	r2,r18,82ce8 <___vfprintf_internal_r+0x1ae4>
   82ebc:	9007883a 	mov	r3,r18
   82ec0:	01000c04 	movi	r4,48
   82ec4:	11000005 	stb	r4,0(r2)
   82ec8:	10800044 	addi	r2,r2,1
   82ecc:	d8800715 	stw	r2,28(sp)
   82ed0:	18bffc1e 	bne	r3,r2,82ec4 <___vfprintf_internal_r+0x1cc0>
   82ed4:	003f8406 	br	82ce8 <___vfprintf_internal_r+0x1ae4>
   82ed8:	d8814117 	ldw	r2,1284(sp)
   82edc:	10c00007 	ldb	r3,0(r2)
   82ee0:	00800c04 	movi	r2,48
   82ee4:	18805b26 	beq	r3,r2,83054 <___vfprintf_internal_r+0x1e50>
   82ee8:	d9000517 	ldw	r4,20(sp)
   82eec:	9125883a 	add	r18,r18,r4
   82ef0:	003f7506 	br	82cc8 <___vfprintf_internal_r+0x1ac4>
   82ef4:	d9014c17 	ldw	r4,1328(sp)
   82ef8:	2080004c 	andi	r2,r4,1
   82efc:	1005003a 	cmpeq	r2,r2,zero
   82f00:	103f6a26 	beq	r2,zero,82cac <___vfprintf_internal_r+0x1aa8>
   82f04:	d8800717 	ldw	r2,28(sp)
   82f08:	003f7706 	br	82ce8 <___vfprintf_internal_r+0x1ae4>
   82f0c:	d9c14515 	stw	r7,1300(sp)
   82f10:	38004d16 	blt	r7,zero,83048 <___vfprintf_internal_r+0x1e44>
   82f14:	dc814715 	stw	r18,1308(sp)
   82f18:	d8014615 	stw	zero,1304(sp)
   82f1c:	003b5b06 	br	81c8c <___vfprintf_internal_r+0xa88>
   82f20:	d9014f17 	ldw	r4,1340(sp)
   82f24:	d8800504 	addi	r2,sp,20
   82f28:	d8800115 	stw	r2,4(sp)
   82f2c:	d8c00604 	addi	r3,sp,24
   82f30:	d8800704 	addi	r2,sp,28
   82f34:	800b883a 	mov	r5,r16
   82f38:	880d883a 	mov	r6,r17
   82f3c:	01c000c4 	movi	r7,3
   82f40:	d8c00215 	stw	r3,8(sp)
   82f44:	d8800315 	stw	r2,12(sp)
   82f48:	dcc00015 	stw	r19,0(sp)
   82f4c:	9829883a 	mov	r20,r19
   82f50:	008346c0 	call	8346c <_dtoa_r>
   82f54:	d8814115 	stw	r2,1284(sp)
   82f58:	003f5106 	br	82ca0 <___vfprintf_internal_r+0x1a9c>
   82f5c:	d8c14217 	ldw	r3,1288(sp)
   82f60:	d9014317 	ldw	r4,1292(sp)
   82f64:	07000b44 	movi	fp,45
   82f68:	1821883a 	mov	r16,r3
   82f6c:	2460003c 	xorhi	r17,r4,32768
   82f70:	003f3106 	br	82c38 <___vfprintf_internal_r+0x1a34>
   82f74:	9d000044 	addi	r20,r19,1
   82f78:	003f3906 	br	82c60 <___vfprintf_internal_r+0x1a5c>
   82f7c:	983f251e 	bne	r19,zero,82c14 <___vfprintf_internal_r+0x1a10>
   82f80:	04c00044 	movi	r19,1
   82f84:	003f2306 	br	82c14 <___vfprintf_internal_r+0x1a10>
   82f88:	04c00184 	movi	r19,6
   82f8c:	003f2106 	br	82c14 <___vfprintf_internal_r+0x1a10>
   82f90:	d8014515 	stw	zero,1300(sp)
   82f94:	003eee06 	br	82b50 <___vfprintf_internal_r+0x194c>
   82f98:	200f883a 	mov	r7,r4
   82f9c:	0100370e 	bge	zero,r4,8307c <___vfprintf_internal_r+0x1e78>
   82fa0:	9800031e 	bne	r19,zero,82fb0 <___vfprintf_internal_r+0x1dac>
   82fa4:	d9814c17 	ldw	r6,1328(sp)
   82fa8:	3080004c 	andi	r2,r6,1
   82fac:	103fb726 	beq	r2,zero,82e8c <___vfprintf_internal_r+0x1c88>
   82fb0:	20800044 	addi	r2,r4,1
   82fb4:	98a7883a 	add	r19,r19,r2
   82fb8:	dcc14515 	stw	r19,1300(sp)
   82fbc:	980f883a 	mov	r7,r19
   82fc0:	983f800e 	bge	r19,zero,82dc4 <___vfprintf_internal_r+0x1bc0>
   82fc4:	003fb306 	br	82e94 <___vfprintf_internal_r+0x1c90>
   82fc8:	d9814d17 	ldw	r6,1332(sp)
   82fcc:	31bfff84 	addi	r6,r6,-2
   82fd0:	d9814d15 	stw	r6,1332(sp)
   82fd4:	003f4c06 	br	82d08 <___vfprintf_internal_r+0x1b04>
   82fd8:	0100180e 	bge	zero,r4,8303c <___vfprintf_internal_r+0x1e38>
   82fdc:	00800044 	movi	r2,1
   82fe0:	1485883a 	add	r2,r2,r18
   82fe4:	d8814515 	stw	r2,1300(sp)
   82fe8:	100f883a 	mov	r7,r2
   82fec:	103f750e 	bge	r2,zero,82dc4 <___vfprintf_internal_r+0x1bc0>
   82ff0:	003fa806 	br	82e94 <___vfprintf_internal_r+0x1c90>
   82ff4:	80c00c04 	addi	r3,r16,48
   82ff8:	00800c04 	movi	r2,48
   82ffc:	d8c008c5 	stb	r3,35(sp)
   83000:	d9800804 	addi	r6,sp,32
   83004:	d8c00904 	addi	r3,sp,36
   83008:	d8800885 	stb	r2,34(sp)
   8300c:	003f6506 	br	82da4 <___vfprintf_internal_r+0x1ba0>
   83010:	d9014c17 	ldw	r4,1328(sp)
   83014:	2084703a 	and	r2,r4,r2
   83018:	103f9c26 	beq	r2,zero,82e8c <___vfprintf_internal_r+0x1c88>
   8301c:	003f6606 	br	82db8 <___vfprintf_internal_r+0x1bb4>
   83020:	d9800804 	addi	r6,sp,32
   83024:	d8c00884 	addi	r3,sp,34
   83028:	003f5e06 	br	82da4 <___vfprintf_internal_r+0x1ba0>
   8302c:	00800b44 	movi	r2,45
   83030:	0121c83a 	sub	r16,zero,r4
   83034:	d8800845 	stb	r2,33(sp)
   83038:	003f3d06 	br	82d30 <___vfprintf_internal_r+0x1b2c>
   8303c:	00800084 	movi	r2,2
   83040:	1105c83a 	sub	r2,r2,r4
   83044:	003fe606 	br	82fe0 <___vfprintf_internal_r+0x1ddc>
   83048:	d8014515 	stw	zero,1300(sp)
   8304c:	dc814715 	stw	r18,1308(sp)
   83050:	003fb106 	br	82f18 <___vfprintf_internal_r+0x1d14>
   83054:	000d883a 	mov	r6,zero
   83058:	000f883a 	mov	r7,zero
   8305c:	8009883a 	mov	r4,r16
   83060:	880b883a 	mov	r5,r17
   83064:	0089d2c0 	call	89d2c <__nedf2>
   83068:	103f9f26 	beq	r2,zero,82ee8 <___vfprintf_internal_r+0x1ce4>
   8306c:	00800044 	movi	r2,1
   83070:	1509c83a 	sub	r4,r2,r20
   83074:	d9000515 	stw	r4,20(sp)
   83078:	003f9b06 	br	82ee8 <___vfprintf_internal_r+0x1ce4>
   8307c:	98000d1e 	bne	r19,zero,830b4 <___vfprintf_internal_r+0x1eb0>
   83080:	d8c14c17 	ldw	r3,1328(sp)
   83084:	1880004c 	andi	r2,r3,1
   83088:	10000a1e 	bne	r2,zero,830b4 <___vfprintf_internal_r+0x1eb0>
   8308c:	01000044 	movi	r4,1
   83090:	200f883a 	mov	r7,r4
   83094:	d9014515 	stw	r4,1300(sp)
   83098:	003f4a06 	br	82dc4 <___vfprintf_internal_r+0x1bc0>
   8309c:	3cc00017 	ldw	r19,0(r7)
   830a0:	39c00104 	addi	r7,r7,4
   830a4:	983d0e0e 	bge	r19,zero,824e0 <___vfprintf_internal_r+0x12dc>
   830a8:	b8c00007 	ldb	r3,0(r23)
   830ac:	04ffffc4 	movi	r19,-1
   830b0:	0038d306 	br	81400 <___vfprintf_internal_r+0x1fc>
   830b4:	9cc00084 	addi	r19,r19,2
   830b8:	dcc14515 	stw	r19,1300(sp)
   830bc:	980f883a 	mov	r7,r19
   830c0:	983f400e 	bge	r19,zero,82dc4 <___vfprintf_internal_r+0x1bc0>
   830c4:	003f7306 	br	82e94 <___vfprintf_internal_r+0x1c90>

000830c8 <__vfprintf_internal>:
   830c8:	00800274 	movhi	r2,9
   830cc:	10bff504 	addi	r2,r2,-44
   830d0:	2013883a 	mov	r9,r4
   830d4:	11000017 	ldw	r4,0(r2)
   830d8:	2805883a 	mov	r2,r5
   830dc:	300f883a 	mov	r7,r6
   830e0:	480b883a 	mov	r5,r9
   830e4:	100d883a 	mov	r6,r2
   830e8:	00812041 	jmpi	81204 <___vfprintf_internal_r>

000830ec <__swsetup_r>:
   830ec:	00800274 	movhi	r2,9
   830f0:	10bff504 	addi	r2,r2,-44
   830f4:	10c00017 	ldw	r3,0(r2)
   830f8:	defffd04 	addi	sp,sp,-12
   830fc:	dc400115 	stw	r17,4(sp)
   83100:	dc000015 	stw	r16,0(sp)
   83104:	dfc00215 	stw	ra,8(sp)
   83108:	2023883a 	mov	r17,r4
   8310c:	2821883a 	mov	r16,r5
   83110:	18000226 	beq	r3,zero,8311c <__swsetup_r+0x30>
   83114:	18800e17 	ldw	r2,56(r3)
   83118:	10001f26 	beq	r2,zero,83198 <__swsetup_r+0xac>
   8311c:	8100030b 	ldhu	r4,12(r16)
   83120:	2080020c 	andi	r2,r4,8
   83124:	10002826 	beq	r2,zero,831c8 <__swsetup_r+0xdc>
   83128:	81400417 	ldw	r5,16(r16)
   8312c:	28001d26 	beq	r5,zero,831a4 <__swsetup_r+0xb8>
   83130:	2080004c 	andi	r2,r4,1
   83134:	1005003a 	cmpeq	r2,r2,zero
   83138:	10000b26 	beq	r2,zero,83168 <__swsetup_r+0x7c>
   8313c:	2080008c 	andi	r2,r4,2
   83140:	10001226 	beq	r2,zero,8318c <__swsetup_r+0xa0>
   83144:	0005883a 	mov	r2,zero
   83148:	80800215 	stw	r2,8(r16)
   8314c:	28000b26 	beq	r5,zero,8317c <__swsetup_r+0x90>
   83150:	0005883a 	mov	r2,zero
   83154:	dfc00217 	ldw	ra,8(sp)
   83158:	dc400117 	ldw	r17,4(sp)
   8315c:	dc000017 	ldw	r16,0(sp)
   83160:	dec00304 	addi	sp,sp,12
   83164:	f800283a 	ret
   83168:	80800517 	ldw	r2,20(r16)
   8316c:	80000215 	stw	zero,8(r16)
   83170:	0085c83a 	sub	r2,zero,r2
   83174:	80800615 	stw	r2,24(r16)
   83178:	283ff51e 	bne	r5,zero,83150 <__swsetup_r+0x64>
   8317c:	2080200c 	andi	r2,r4,128
   83180:	103ff326 	beq	r2,zero,83150 <__swsetup_r+0x64>
   83184:	00bfffc4 	movi	r2,-1
   83188:	003ff206 	br	83154 <__swsetup_r+0x68>
   8318c:	80800517 	ldw	r2,20(r16)
   83190:	80800215 	stw	r2,8(r16)
   83194:	003fed06 	br	8314c <__swsetup_r+0x60>
   83198:	1809883a 	mov	r4,r3
   8319c:	0084cb80 	call	84cb8 <__sinit>
   831a0:	003fde06 	br	8311c <__swsetup_r+0x30>
   831a4:	20c0a00c 	andi	r3,r4,640
   831a8:	00808004 	movi	r2,512
   831ac:	18bfe026 	beq	r3,r2,83130 <__swsetup_r+0x44>
   831b0:	8809883a 	mov	r4,r17
   831b4:	800b883a 	mov	r5,r16
   831b8:	0085a640 	call	85a64 <__smakebuf_r>
   831bc:	8100030b 	ldhu	r4,12(r16)
   831c0:	81400417 	ldw	r5,16(r16)
   831c4:	003fda06 	br	83130 <__swsetup_r+0x44>
   831c8:	2080040c 	andi	r2,r4,16
   831cc:	103fed26 	beq	r2,zero,83184 <__swsetup_r+0x98>
   831d0:	2080010c 	andi	r2,r4,4
   831d4:	10001226 	beq	r2,zero,83220 <__swsetup_r+0x134>
   831d8:	81400c17 	ldw	r5,48(r16)
   831dc:	28000526 	beq	r5,zero,831f4 <__swsetup_r+0x108>
   831e0:	80801004 	addi	r2,r16,64
   831e4:	28800226 	beq	r5,r2,831f0 <__swsetup_r+0x104>
   831e8:	8809883a 	mov	r4,r17
   831ec:	00850700 	call	85070 <_free_r>
   831f0:	80000c15 	stw	zero,48(r16)
   831f4:	8080030b 	ldhu	r2,12(r16)
   831f8:	81400417 	ldw	r5,16(r16)
   831fc:	80000115 	stw	zero,4(r16)
   83200:	10bff6cc 	andi	r2,r2,65499
   83204:	8080030d 	sth	r2,12(r16)
   83208:	81400015 	stw	r5,0(r16)
   8320c:	8080030b 	ldhu	r2,12(r16)
   83210:	10800214 	ori	r2,r2,8
   83214:	113fffcc 	andi	r4,r2,65535
   83218:	8080030d 	sth	r2,12(r16)
   8321c:	003fc306 	br	8312c <__swsetup_r+0x40>
   83220:	81400417 	ldw	r5,16(r16)
   83224:	003ff906 	br	8320c <__swsetup_r+0x120>

00083228 <quorem>:
   83228:	28c00417 	ldw	r3,16(r5)
   8322c:	20800417 	ldw	r2,16(r4)
   83230:	defff104 	addi	sp,sp,-60
   83234:	dfc00e15 	stw	ra,56(sp)
   83238:	df000d15 	stw	fp,52(sp)
   8323c:	ddc00c15 	stw	r23,48(sp)
   83240:	dd800b15 	stw	r22,44(sp)
   83244:	dd400a15 	stw	r21,40(sp)
   83248:	dd000915 	stw	r20,36(sp)
   8324c:	dcc00815 	stw	r19,32(sp)
   83250:	dc800715 	stw	r18,28(sp)
   83254:	dc400615 	stw	r17,24(sp)
   83258:	dc000515 	stw	r16,20(sp)
   8325c:	d9000315 	stw	r4,12(sp)
   83260:	d9400415 	stw	r5,16(sp)
   83264:	10c07f16 	blt	r2,r3,83464 <quorem+0x23c>
   83268:	1d3fffc4 	addi	r20,r3,-1
   8326c:	d8c00417 	ldw	r3,16(sp)
   83270:	d9000317 	ldw	r4,12(sp)
   83274:	a505883a 	add	r2,r20,r20
   83278:	1085883a 	add	r2,r2,r2
   8327c:	1cc00504 	addi	r19,r3,20
   83280:	25c00504 	addi	r23,r4,20
   83284:	98ad883a 	add	r22,r19,r2
   83288:	15c7883a 	add	r3,r2,r23
   8328c:	b1400017 	ldw	r5,0(r22)
   83290:	19000017 	ldw	r4,0(r3)
   83294:	d8c00015 	stw	r3,0(sp)
   83298:	29400044 	addi	r5,r5,1
   8329c:	d9000215 	stw	r4,8(sp)
   832a0:	0080e040 	call	80e04 <__udivsi3>
   832a4:	1039883a 	mov	fp,r2
   832a8:	10003d1e 	bne	r2,zero,833a0 <quorem+0x178>
   832ac:	d9400417 	ldw	r5,16(sp)
   832b0:	d9000317 	ldw	r4,12(sp)
   832b4:	00867900 	call	86790 <__mcmp>
   832b8:	10002c16 	blt	r2,zero,8336c <quorem+0x144>
   832bc:	e7000044 	addi	fp,fp,1
   832c0:	b80f883a 	mov	r7,r23
   832c4:	0011883a 	mov	r8,zero
   832c8:	0009883a 	mov	r4,zero
   832cc:	99400017 	ldw	r5,0(r19)
   832d0:	38c00017 	ldw	r3,0(r7)
   832d4:	9cc00104 	addi	r19,r19,4
   832d8:	28bfffcc 	andi	r2,r5,65535
   832dc:	2085883a 	add	r2,r4,r2
   832e0:	11bfffcc 	andi	r6,r2,65535
   832e4:	193fffcc 	andi	r4,r3,65535
   832e8:	1004d43a 	srli	r2,r2,16
   832ec:	280ad43a 	srli	r5,r5,16
   832f0:	2189c83a 	sub	r4,r4,r6
   832f4:	2209883a 	add	r4,r4,r8
   832f8:	1806d43a 	srli	r3,r3,16
   832fc:	288b883a 	add	r5,r5,r2
   83300:	200dd43a 	srai	r6,r4,16
   83304:	28bfffcc 	andi	r2,r5,65535
   83308:	1887c83a 	sub	r3,r3,r2
   8330c:	1987883a 	add	r3,r3,r6
   83310:	3900000d 	sth	r4,0(r7)
   83314:	38c0008d 	sth	r3,2(r7)
   83318:	2808d43a 	srli	r4,r5,16
   8331c:	39c00104 	addi	r7,r7,4
   83320:	1811d43a 	srai	r8,r3,16
   83324:	b4ffe92e 	bgeu	r22,r19,832cc <quorem+0xa4>
   83328:	a505883a 	add	r2,r20,r20
   8332c:	1085883a 	add	r2,r2,r2
   83330:	b885883a 	add	r2,r23,r2
   83334:	10c00017 	ldw	r3,0(r2)
   83338:	18000c1e 	bne	r3,zero,8336c <quorem+0x144>
   8333c:	113fff04 	addi	r4,r2,-4
   83340:	b900082e 	bgeu	r23,r4,83364 <quorem+0x13c>
   83344:	10bfff17 	ldw	r2,-4(r2)
   83348:	10000326 	beq	r2,zero,83358 <quorem+0x130>
   8334c:	00000506 	br	83364 <quorem+0x13c>
   83350:	20800017 	ldw	r2,0(r4)
   83354:	1000031e 	bne	r2,zero,83364 <quorem+0x13c>
   83358:	213fff04 	addi	r4,r4,-4
   8335c:	a53fffc4 	addi	r20,r20,-1
   83360:	b93ffb36 	bltu	r23,r4,83350 <quorem+0x128>
   83364:	d9000317 	ldw	r4,12(sp)
   83368:	25000415 	stw	r20,16(r4)
   8336c:	e005883a 	mov	r2,fp
   83370:	dfc00e17 	ldw	ra,56(sp)
   83374:	df000d17 	ldw	fp,52(sp)
   83378:	ddc00c17 	ldw	r23,48(sp)
   8337c:	dd800b17 	ldw	r22,44(sp)
   83380:	dd400a17 	ldw	r21,40(sp)
   83384:	dd000917 	ldw	r20,36(sp)
   83388:	dcc00817 	ldw	r19,32(sp)
   8338c:	dc800717 	ldw	r18,28(sp)
   83390:	dc400617 	ldw	r17,24(sp)
   83394:	dc000517 	ldw	r16,20(sp)
   83398:	dec00f04 	addi	sp,sp,60
   8339c:	f800283a 	ret
   833a0:	b823883a 	mov	r17,r23
   833a4:	9825883a 	mov	r18,r19
   833a8:	d8000115 	stw	zero,4(sp)
   833ac:	002b883a 	mov	r21,zero
   833b0:	94000017 	ldw	r16,0(r18)
   833b4:	e009883a 	mov	r4,fp
   833b8:	94800104 	addi	r18,r18,4
   833bc:	817fffcc 	andi	r5,r16,65535
   833c0:	0080e140 	call	80e14 <__mulsi3>
   833c4:	800ad43a 	srli	r5,r16,16
   833c8:	e009883a 	mov	r4,fp
   833cc:	a8a1883a 	add	r16,r21,r2
   833d0:	0080e140 	call	80e14 <__mulsi3>
   833d4:	89000017 	ldw	r4,0(r17)
   833d8:	80ffffcc 	andi	r3,r16,65535
   833dc:	8020d43a 	srli	r16,r16,16
   833e0:	217fffcc 	andi	r5,r4,65535
   833e4:	28cbc83a 	sub	r5,r5,r3
   833e8:	d8c00117 	ldw	r3,4(sp)
   833ec:	2008d43a 	srli	r4,r4,16
   833f0:	1405883a 	add	r2,r2,r16
   833f4:	28cb883a 	add	r5,r5,r3
   833f8:	280dd43a 	srai	r6,r5,16
   833fc:	10ffffcc 	andi	r3,r2,65535
   83400:	20c9c83a 	sub	r4,r4,r3
   83404:	2189883a 	add	r4,r4,r6
   83408:	8900008d 	sth	r4,2(r17)
   8340c:	2009d43a 	srai	r4,r4,16
   83410:	8940000d 	sth	r5,0(r17)
   83414:	102ad43a 	srli	r21,r2,16
   83418:	8c400104 	addi	r17,r17,4
   8341c:	d9000115 	stw	r4,4(sp)
   83420:	b4bfe32e 	bgeu	r22,r18,833b0 <quorem+0x188>
   83424:	d9000217 	ldw	r4,8(sp)
   83428:	203fa01e 	bne	r4,zero,832ac <quorem+0x84>
   8342c:	d8800017 	ldw	r2,0(sp)
   83430:	10ffff04 	addi	r3,r2,-4
   83434:	b8c0082e 	bgeu	r23,r3,83458 <quorem+0x230>
   83438:	10bfff17 	ldw	r2,-4(r2)
   8343c:	10000326 	beq	r2,zero,8344c <quorem+0x224>
   83440:	00000506 	br	83458 <quorem+0x230>
   83444:	18800017 	ldw	r2,0(r3)
   83448:	1000031e 	bne	r2,zero,83458 <quorem+0x230>
   8344c:	18ffff04 	addi	r3,r3,-4
   83450:	a53fffc4 	addi	r20,r20,-1
   83454:	b8fffb36 	bltu	r23,r3,83444 <quorem+0x21c>
   83458:	d8c00317 	ldw	r3,12(sp)
   8345c:	1d000415 	stw	r20,16(r3)
   83460:	003f9206 	br	832ac <quorem+0x84>
   83464:	0005883a 	mov	r2,zero
   83468:	003fc106 	br	83370 <quorem+0x148>

0008346c <_dtoa_r>:
   8346c:	22001017 	ldw	r8,64(r4)
   83470:	deffda04 	addi	sp,sp,-152
   83474:	dd402115 	stw	r21,132(sp)
   83478:	dd002015 	stw	r20,128(sp)
   8347c:	dc801e15 	stw	r18,120(sp)
   83480:	dc401d15 	stw	r17,116(sp)
   83484:	dfc02515 	stw	ra,148(sp)
   83488:	df002415 	stw	fp,144(sp)
   8348c:	ddc02315 	stw	r23,140(sp)
   83490:	dd802215 	stw	r22,136(sp)
   83494:	dcc01f15 	stw	r19,124(sp)
   83498:	dc001c15 	stw	r16,112(sp)
   8349c:	d9001615 	stw	r4,88(sp)
   834a0:	3023883a 	mov	r17,r6
   834a4:	2829883a 	mov	r20,r5
   834a8:	d9c01715 	stw	r7,92(sp)
   834ac:	dc802817 	ldw	r18,160(sp)
   834b0:	302b883a 	mov	r21,r6
   834b4:	40000a26 	beq	r8,zero,834e0 <_dtoa_r+0x74>
   834b8:	20801117 	ldw	r2,68(r4)
   834bc:	400b883a 	mov	r5,r8
   834c0:	40800115 	stw	r2,4(r8)
   834c4:	20c01117 	ldw	r3,68(r4)
   834c8:	00800044 	movi	r2,1
   834cc:	10c4983a 	sll	r2,r2,r3
   834d0:	40800215 	stw	r2,8(r8)
   834d4:	00866340 	call	86634 <_Bfree>
   834d8:	d8c01617 	ldw	r3,88(sp)
   834dc:	18001015 	stw	zero,64(r3)
   834e0:	8800a316 	blt	r17,zero,83770 <_dtoa_r+0x304>
   834e4:	90000015 	stw	zero,0(r18)
   834e8:	a8dffc2c 	andhi	r3,r21,32752
   834ec:	009ffc34 	movhi	r2,32752
   834f0:	18809126 	beq	r3,r2,83738 <_dtoa_r+0x2cc>
   834f4:	000d883a 	mov	r6,zero
   834f8:	000f883a 	mov	r7,zero
   834fc:	a009883a 	mov	r4,r20
   83500:	a80b883a 	mov	r5,r21
   83504:	dd001215 	stw	r20,72(sp)
   83508:	dd401315 	stw	r21,76(sp)
   8350c:	0089d2c0 	call	89d2c <__nedf2>
   83510:	1000171e 	bne	r2,zero,83570 <_dtoa_r+0x104>
   83514:	d9802717 	ldw	r6,156(sp)
   83518:	00800044 	movi	r2,1
   8351c:	30800015 	stw	r2,0(r6)
   83520:	d8802917 	ldw	r2,164(sp)
   83524:	10029b26 	beq	r2,zero,83f94 <_dtoa_r+0xb28>
   83528:	d9002917 	ldw	r4,164(sp)
   8352c:	00800274 	movhi	r2,9
   83530:	10b7e044 	addi	r2,r2,-8319
   83534:	10ffffc4 	addi	r3,r2,-1
   83538:	20800015 	stw	r2,0(r4)
   8353c:	1805883a 	mov	r2,r3
   83540:	dfc02517 	ldw	ra,148(sp)
   83544:	df002417 	ldw	fp,144(sp)
   83548:	ddc02317 	ldw	r23,140(sp)
   8354c:	dd802217 	ldw	r22,136(sp)
   83550:	dd402117 	ldw	r21,132(sp)
   83554:	dd002017 	ldw	r20,128(sp)
   83558:	dcc01f17 	ldw	r19,124(sp)
   8355c:	dc801e17 	ldw	r18,120(sp)
   83560:	dc401d17 	ldw	r17,116(sp)
   83564:	dc001c17 	ldw	r16,112(sp)
   83568:	dec02604 	addi	sp,sp,152
   8356c:	f800283a 	ret
   83570:	d9001617 	ldw	r4,88(sp)
   83574:	d9401217 	ldw	r5,72(sp)
   83578:	d8800104 	addi	r2,sp,4
   8357c:	a80d883a 	mov	r6,r21
   83580:	d9c00204 	addi	r7,sp,8
   83584:	d8800015 	stw	r2,0(sp)
   83588:	0086c700 	call	86c70 <__d2b>
   8358c:	d8800715 	stw	r2,28(sp)
   83590:	a804d53a 	srli	r2,r21,20
   83594:	1101ffcc 	andi	r4,r2,2047
   83598:	20008626 	beq	r4,zero,837b4 <_dtoa_r+0x348>
   8359c:	d8c01217 	ldw	r3,72(sp)
   835a0:	00800434 	movhi	r2,16
   835a4:	10bfffc4 	addi	r2,r2,-1
   835a8:	ddc00117 	ldw	r23,4(sp)
   835ac:	a884703a 	and	r2,r21,r2
   835b0:	1811883a 	mov	r8,r3
   835b4:	124ffc34 	orhi	r9,r2,16368
   835b8:	25bf0044 	addi	r22,r4,-1023
   835bc:	d8000815 	stw	zero,32(sp)
   835c0:	0005883a 	mov	r2,zero
   835c4:	00cffe34 	movhi	r3,16376
   835c8:	480b883a 	mov	r5,r9
   835cc:	4009883a 	mov	r4,r8
   835d0:	180f883a 	mov	r7,r3
   835d4:	100d883a 	mov	r6,r2
   835d8:	00895940 	call	89594 <__subdf3>
   835dc:	0218dbf4 	movhi	r8,25455
   835e0:	4210d844 	addi	r8,r8,17249
   835e4:	024ff4f4 	movhi	r9,16339
   835e8:	4a61e9c4 	addi	r9,r9,-30809
   835ec:	480f883a 	mov	r7,r9
   835f0:	400d883a 	mov	r6,r8
   835f4:	180b883a 	mov	r5,r3
   835f8:	1009883a 	mov	r4,r2
   835fc:	00896880 	call	89688 <__muldf3>
   83600:	0222d874 	movhi	r8,35681
   83604:	42322cc4 	addi	r8,r8,-14157
   83608:	024ff1f4 	movhi	r9,16327
   8360c:	4a628a04 	addi	r9,r9,-30168
   83610:	480f883a 	mov	r7,r9
   83614:	400d883a 	mov	r6,r8
   83618:	180b883a 	mov	r5,r3
   8361c:	1009883a 	mov	r4,r2
   83620:	00896140 	call	89614 <__adddf3>
   83624:	b009883a 	mov	r4,r22
   83628:	1021883a 	mov	r16,r2
   8362c:	1823883a 	mov	r17,r3
   83630:	0089f4c0 	call	89f4c <__floatsidf>
   83634:	021427f4 	movhi	r8,20639
   83638:	421e7ec4 	addi	r8,r8,31227
   8363c:	024ff4f4 	movhi	r9,16339
   83640:	4a5104c4 	addi	r9,r9,17427
   83644:	480f883a 	mov	r7,r9
   83648:	400d883a 	mov	r6,r8
   8364c:	180b883a 	mov	r5,r3
   83650:	1009883a 	mov	r4,r2
   83654:	00896880 	call	89688 <__muldf3>
   83658:	180f883a 	mov	r7,r3
   8365c:	880b883a 	mov	r5,r17
   83660:	100d883a 	mov	r6,r2
   83664:	8009883a 	mov	r4,r16
   83668:	00896140 	call	89614 <__adddf3>
   8366c:	1009883a 	mov	r4,r2
   83670:	180b883a 	mov	r5,r3
   83674:	1021883a 	mov	r16,r2
   83678:	1823883a 	mov	r17,r3
   8367c:	008a0440 	call	8a044 <__fixdfsi>
   83680:	000d883a 	mov	r6,zero
   83684:	000f883a 	mov	r7,zero
   83688:	8009883a 	mov	r4,r16
   8368c:	880b883a 	mov	r5,r17
   83690:	d8800d15 	stw	r2,52(sp)
   83694:	0089ec40 	call	89ec4 <__ltdf2>
   83698:	10031716 	blt	r2,zero,842f8 <_dtoa_r+0xe8c>
   8369c:	d8c00d17 	ldw	r3,52(sp)
   836a0:	00800584 	movi	r2,22
   836a4:	10c1482e 	bgeu	r2,r3,83bc8 <_dtoa_r+0x75c>
   836a8:	01000044 	movi	r4,1
   836ac:	d9000c15 	stw	r4,48(sp)
   836b0:	bd85c83a 	sub	r2,r23,r22
   836b4:	11bfffc4 	addi	r6,r2,-1
   836b8:	30030b16 	blt	r6,zero,842e8 <_dtoa_r+0xe7c>
   836bc:	d9800a15 	stw	r6,40(sp)
   836c0:	d8001115 	stw	zero,68(sp)
   836c4:	d8c00d17 	ldw	r3,52(sp)
   836c8:	1802ff16 	blt	r3,zero,842c8 <_dtoa_r+0xe5c>
   836cc:	d9000a17 	ldw	r4,40(sp)
   836d0:	d8c00915 	stw	r3,36(sp)
   836d4:	d8001015 	stw	zero,64(sp)
   836d8:	20c9883a 	add	r4,r4,r3
   836dc:	d9000a15 	stw	r4,40(sp)
   836e0:	d9001717 	ldw	r4,92(sp)
   836e4:	00800244 	movi	r2,9
   836e8:	11004636 	bltu	r2,r4,83804 <_dtoa_r+0x398>
   836ec:	00800144 	movi	r2,5
   836f0:	11020416 	blt	r2,r4,83f04 <_dtoa_r+0xa98>
   836f4:	04400044 	movi	r17,1
   836f8:	d8c01717 	ldw	r3,92(sp)
   836fc:	00800144 	movi	r2,5
   83700:	10c1ed36 	bltu	r2,r3,83eb8 <_dtoa_r+0xa4c>
   83704:	18c5883a 	add	r2,r3,r3
   83708:	1085883a 	add	r2,r2,r2
   8370c:	00c00234 	movhi	r3,8
   83710:	18cdc804 	addi	r3,r3,14112
   83714:	10c5883a 	add	r2,r2,r3
   83718:	11000017 	ldw	r4,0(r2)
   8371c:	2000683a 	jmp	r4
   83720:	0008380c 	andi	zero,zero,8416
   83724:	0008380c 	andi	zero,zero,8416
   83728:	0008420c 	andi	zero,zero,8456
   8372c:	000841e4 	muli	zero,zero,8455
   83730:	00084228 	cmpgeui	zero,zero,8456
   83734:	00084234 	movhi	zero,8456
   83738:	d9002717 	ldw	r4,156(sp)
   8373c:	0089c3c4 	movi	r2,9999
   83740:	20800015 	stw	r2,0(r4)
   83744:	a0001026 	beq	r20,zero,83788 <_dtoa_r+0x31c>
   83748:	00c00274 	movhi	r3,9
   8374c:	18f88c04 	addi	r3,r3,-7632
   83750:	d9802917 	ldw	r6,164(sp)
   83754:	303f7926 	beq	r6,zero,8353c <_dtoa_r+0xd0>
   83758:	188000c7 	ldb	r2,3(r3)
   8375c:	190000c4 	addi	r4,r3,3
   83760:	1000101e 	bne	r2,zero,837a4 <_dtoa_r+0x338>
   83764:	d8802917 	ldw	r2,164(sp)
   83768:	11000015 	stw	r4,0(r2)
   8376c:	003f7306 	br	8353c <_dtoa_r+0xd0>
   83770:	00a00034 	movhi	r2,32768
   83774:	10bfffc4 	addi	r2,r2,-1
   83778:	00c00044 	movi	r3,1
   8377c:	88aa703a 	and	r21,r17,r2
   83780:	90c00015 	stw	r3,0(r18)
   83784:	003f5806 	br	834e8 <_dtoa_r+0x7c>
   83788:	00800434 	movhi	r2,16
   8378c:	10bfffc4 	addi	r2,r2,-1
   83790:	a884703a 	and	r2,r21,r2
   83794:	103fec1e 	bne	r2,zero,83748 <_dtoa_r+0x2dc>
   83798:	00c00274 	movhi	r3,9
   8379c:	18f88904 	addi	r3,r3,-7644
   837a0:	003feb06 	br	83750 <_dtoa_r+0x2e4>
   837a4:	d8802917 	ldw	r2,164(sp)
   837a8:	19000204 	addi	r4,r3,8
   837ac:	11000015 	stw	r4,0(r2)
   837b0:	003f6206 	br	8353c <_dtoa_r+0xd0>
   837b4:	ddc00117 	ldw	r23,4(sp)
   837b8:	d8800217 	ldw	r2,8(sp)
   837bc:	01000804 	movi	r4,32
   837c0:	b8c10c84 	addi	r3,r23,1074
   837c4:	18a3883a 	add	r17,r3,r2
   837c8:	2441b80e 	bge	r4,r17,83eac <_dtoa_r+0xa40>
   837cc:	00c01004 	movi	r3,64
   837d0:	1c47c83a 	sub	r3,r3,r17
   837d4:	88bff804 	addi	r2,r17,-32
   837d8:	a8c6983a 	sll	r3,r21,r3
   837dc:	a084d83a 	srl	r2,r20,r2
   837e0:	1888b03a 	or	r4,r3,r2
   837e4:	008a11c0 	call	8a11c <__floatunsidf>
   837e8:	1011883a 	mov	r8,r2
   837ec:	00bf8434 	movhi	r2,65040
   837f0:	01000044 	movi	r4,1
   837f4:	10d3883a 	add	r9,r2,r3
   837f8:	8dbef344 	addi	r22,r17,-1075
   837fc:	d9000815 	stw	r4,32(sp)
   83800:	003f6f06 	br	835c0 <_dtoa_r+0x154>
   83804:	d8001715 	stw	zero,92(sp)
   83808:	04400044 	movi	r17,1
   8380c:	00bfffc4 	movi	r2,-1
   83810:	00c00044 	movi	r3,1
   83814:	d8800e15 	stw	r2,56(sp)
   83818:	d8002615 	stw	zero,152(sp)
   8381c:	d8800f15 	stw	r2,60(sp)
   83820:	d8c00b15 	stw	r3,44(sp)
   83824:	1021883a 	mov	r16,r2
   83828:	d8801617 	ldw	r2,88(sp)
   8382c:	10001115 	stw	zero,68(r2)
   83830:	d8801617 	ldw	r2,88(sp)
   83834:	11401117 	ldw	r5,68(r2)
   83838:	1009883a 	mov	r4,r2
   8383c:	0086bb40 	call	86bb4 <_Balloc>
   83840:	d8c01617 	ldw	r3,88(sp)
   83844:	d8800515 	stw	r2,20(sp)
   83848:	18801015 	stw	r2,64(r3)
   8384c:	00800384 	movi	r2,14
   83850:	14006836 	bltu	r2,r16,839f4 <_dtoa_r+0x588>
   83854:	8805003a 	cmpeq	r2,r17,zero
   83858:	1000661e 	bne	r2,zero,839f4 <_dtoa_r+0x588>
   8385c:	d9000d17 	ldw	r4,52(sp)
   83860:	0102300e 	bge	zero,r4,84124 <_dtoa_r+0xcb8>
   83864:	208003cc 	andi	r2,r4,15
   83868:	100490fa 	slli	r2,r2,3
   8386c:	2025d13a 	srai	r18,r4,4
   83870:	00c00274 	movhi	r3,9
   83874:	18f89e04 	addi	r3,r3,-7560
   83878:	10c5883a 	add	r2,r2,r3
   8387c:	90c0040c 	andi	r3,r18,16
   83880:	14000017 	ldw	r16,0(r2)
   83884:	14400117 	ldw	r17,4(r2)
   83888:	18036a1e 	bne	r3,zero,84634 <_dtoa_r+0x11c8>
   8388c:	05800084 	movi	r22,2
   83890:	90001026 	beq	r18,zero,838d4 <_dtoa_r+0x468>
   83894:	04c00274 	movhi	r19,9
   83898:	9cf8d004 	addi	r19,r19,-7360
   8389c:	9080004c 	andi	r2,r18,1
   838a0:	1005003a 	cmpeq	r2,r2,zero
   838a4:	1000081e 	bne	r2,zero,838c8 <_dtoa_r+0x45c>
   838a8:	99800017 	ldw	r6,0(r19)
   838ac:	99c00117 	ldw	r7,4(r19)
   838b0:	880b883a 	mov	r5,r17
   838b4:	8009883a 	mov	r4,r16
   838b8:	00896880 	call	89688 <__muldf3>
   838bc:	1021883a 	mov	r16,r2
   838c0:	b5800044 	addi	r22,r22,1
   838c4:	1823883a 	mov	r17,r3
   838c8:	9025d07a 	srai	r18,r18,1
   838cc:	9cc00204 	addi	r19,r19,8
   838d0:	903ff21e 	bne	r18,zero,8389c <_dtoa_r+0x430>
   838d4:	a80b883a 	mov	r5,r21
   838d8:	a009883a 	mov	r4,r20
   838dc:	880f883a 	mov	r7,r17
   838e0:	800d883a 	mov	r6,r16
   838e4:	0089a4c0 	call	89a4c <__divdf3>
   838e8:	1029883a 	mov	r20,r2
   838ec:	182b883a 	mov	r21,r3
   838f0:	d8c00c17 	ldw	r3,48(sp)
   838f4:	1805003a 	cmpeq	r2,r3,zero
   838f8:	1000081e 	bne	r2,zero,8391c <_dtoa_r+0x4b0>
   838fc:	0005883a 	mov	r2,zero
   83900:	00cffc34 	movhi	r3,16368
   83904:	180f883a 	mov	r7,r3
   83908:	a009883a 	mov	r4,r20
   8390c:	a80b883a 	mov	r5,r21
   83910:	100d883a 	mov	r6,r2
   83914:	0089ec40 	call	89ec4 <__ltdf2>
   83918:	1003fe16 	blt	r2,zero,84914 <_dtoa_r+0x14a8>
   8391c:	b009883a 	mov	r4,r22
   83920:	0089f4c0 	call	89f4c <__floatsidf>
   83924:	180b883a 	mov	r5,r3
   83928:	1009883a 	mov	r4,r2
   8392c:	a00d883a 	mov	r6,r20
   83930:	a80f883a 	mov	r7,r21
   83934:	00896880 	call	89688 <__muldf3>
   83938:	0011883a 	mov	r8,zero
   8393c:	02500734 	movhi	r9,16412
   83940:	1009883a 	mov	r4,r2
   83944:	180b883a 	mov	r5,r3
   83948:	480f883a 	mov	r7,r9
   8394c:	400d883a 	mov	r6,r8
   83950:	00896140 	call	89614 <__adddf3>
   83954:	d9000f17 	ldw	r4,60(sp)
   83958:	102d883a 	mov	r22,r2
   8395c:	00bf3034 	movhi	r2,64704
   83960:	18b9883a 	add	fp,r3,r2
   83964:	e02f883a 	mov	r23,fp
   83968:	20028f1e 	bne	r4,zero,843a8 <_dtoa_r+0xf3c>
   8396c:	0005883a 	mov	r2,zero
   83970:	00d00534 	movhi	r3,16404
   83974:	a009883a 	mov	r4,r20
   83978:	a80b883a 	mov	r5,r21
   8397c:	180f883a 	mov	r7,r3
   83980:	100d883a 	mov	r6,r2
   83984:	00895940 	call	89594 <__subdf3>
   83988:	1009883a 	mov	r4,r2
   8398c:	e00f883a 	mov	r7,fp
   83990:	180b883a 	mov	r5,r3
   83994:	b00d883a 	mov	r6,r22
   83998:	1025883a 	mov	r18,r2
   8399c:	1827883a 	mov	r19,r3
   839a0:	0089db40 	call	89db4 <__gtdf2>
   839a4:	00834f16 	blt	zero,r2,846e4 <_dtoa_r+0x1278>
   839a8:	e0e0003c 	xorhi	r3,fp,32768
   839ac:	9009883a 	mov	r4,r18
   839b0:	980b883a 	mov	r5,r19
   839b4:	180f883a 	mov	r7,r3
   839b8:	b00d883a 	mov	r6,r22
   839bc:	0089ec40 	call	89ec4 <__ltdf2>
   839c0:	1000080e 	bge	r2,zero,839e4 <_dtoa_r+0x578>
   839c4:	0027883a 	mov	r19,zero
   839c8:	0025883a 	mov	r18,zero
   839cc:	d8802617 	ldw	r2,152(sp)
   839d0:	df000517 	ldw	fp,20(sp)
   839d4:	d8000615 	stw	zero,24(sp)
   839d8:	0084303a 	nor	r2,zero,r2
   839dc:	d8800d15 	stw	r2,52(sp)
   839e0:	00019b06 	br	84050 <_dtoa_r+0xbe4>
   839e4:	d9801217 	ldw	r6,72(sp)
   839e8:	d8801317 	ldw	r2,76(sp)
   839ec:	3029883a 	mov	r20,r6
   839f0:	102b883a 	mov	r21,r2
   839f4:	d8c00217 	ldw	r3,8(sp)
   839f8:	18008516 	blt	r3,zero,83c10 <_dtoa_r+0x7a4>
   839fc:	d9000d17 	ldw	r4,52(sp)
   83a00:	00800384 	movi	r2,14
   83a04:	11008216 	blt	r2,r4,83c10 <_dtoa_r+0x7a4>
   83a08:	200490fa 	slli	r2,r4,3
   83a0c:	d9802617 	ldw	r6,152(sp)
   83a10:	00c00274 	movhi	r3,9
   83a14:	18f89e04 	addi	r3,r3,-7560
   83a18:	10c5883a 	add	r2,r2,r3
   83a1c:	14800017 	ldw	r18,0(r2)
   83a20:	14c00117 	ldw	r19,4(r2)
   83a24:	30031e16 	blt	r6,zero,846a0 <_dtoa_r+0x1234>
   83a28:	d9000517 	ldw	r4,20(sp)
   83a2c:	d8c00f17 	ldw	r3,60(sp)
   83a30:	a823883a 	mov	r17,r21
   83a34:	a021883a 	mov	r16,r20
   83a38:	192b883a 	add	r21,r3,r4
   83a3c:	2039883a 	mov	fp,r4
   83a40:	00000f06 	br	83a80 <_dtoa_r+0x614>
   83a44:	0005883a 	mov	r2,zero
   83a48:	00d00934 	movhi	r3,16420
   83a4c:	5009883a 	mov	r4,r10
   83a50:	580b883a 	mov	r5,r11
   83a54:	180f883a 	mov	r7,r3
   83a58:	100d883a 	mov	r6,r2
   83a5c:	00896880 	call	89688 <__muldf3>
   83a60:	180b883a 	mov	r5,r3
   83a64:	000d883a 	mov	r6,zero
   83a68:	000f883a 	mov	r7,zero
   83a6c:	1009883a 	mov	r4,r2
   83a70:	1021883a 	mov	r16,r2
   83a74:	1823883a 	mov	r17,r3
   83a78:	0089d2c0 	call	89d2c <__nedf2>
   83a7c:	10004526 	beq	r2,zero,83b94 <_dtoa_r+0x728>
   83a80:	900d883a 	mov	r6,r18
   83a84:	980f883a 	mov	r7,r19
   83a88:	8009883a 	mov	r4,r16
   83a8c:	880b883a 	mov	r5,r17
   83a90:	0089a4c0 	call	89a4c <__divdf3>
   83a94:	180b883a 	mov	r5,r3
   83a98:	1009883a 	mov	r4,r2
   83a9c:	008a0440 	call	8a044 <__fixdfsi>
   83aa0:	1009883a 	mov	r4,r2
   83aa4:	1029883a 	mov	r20,r2
   83aa8:	0089f4c0 	call	89f4c <__floatsidf>
   83aac:	180f883a 	mov	r7,r3
   83ab0:	9009883a 	mov	r4,r18
   83ab4:	980b883a 	mov	r5,r19
   83ab8:	100d883a 	mov	r6,r2
   83abc:	00896880 	call	89688 <__muldf3>
   83ac0:	180f883a 	mov	r7,r3
   83ac4:	880b883a 	mov	r5,r17
   83ac8:	8009883a 	mov	r4,r16
   83acc:	100d883a 	mov	r6,r2
   83ad0:	00895940 	call	89594 <__subdf3>
   83ad4:	1015883a 	mov	r10,r2
   83ad8:	a0800c04 	addi	r2,r20,48
   83adc:	e0800005 	stb	r2,0(fp)
   83ae0:	e7000044 	addi	fp,fp,1
   83ae4:	1817883a 	mov	r11,r3
   83ae8:	e57fd61e 	bne	fp,r21,83a44 <_dtoa_r+0x5d8>
   83aec:	500d883a 	mov	r6,r10
   83af0:	180f883a 	mov	r7,r3
   83af4:	5009883a 	mov	r4,r10
   83af8:	180b883a 	mov	r5,r3
   83afc:	00896140 	call	89614 <__adddf3>
   83b00:	100d883a 	mov	r6,r2
   83b04:	9009883a 	mov	r4,r18
   83b08:	980b883a 	mov	r5,r19
   83b0c:	180f883a 	mov	r7,r3
   83b10:	1021883a 	mov	r16,r2
   83b14:	1823883a 	mov	r17,r3
   83b18:	0089ec40 	call	89ec4 <__ltdf2>
   83b1c:	10000816 	blt	r2,zero,83b40 <_dtoa_r+0x6d4>
   83b20:	980b883a 	mov	r5,r19
   83b24:	800d883a 	mov	r6,r16
   83b28:	880f883a 	mov	r7,r17
   83b2c:	9009883a 	mov	r4,r18
   83b30:	0089ca40 	call	89ca4 <__eqdf2>
   83b34:	1000171e 	bne	r2,zero,83b94 <_dtoa_r+0x728>
   83b38:	a080004c 	andi	r2,r20,1
   83b3c:	10001526 	beq	r2,zero,83b94 <_dtoa_r+0x728>
   83b40:	d8800d17 	ldw	r2,52(sp)
   83b44:	d8800415 	stw	r2,16(sp)
   83b48:	e009883a 	mov	r4,fp
   83b4c:	213fffc4 	addi	r4,r4,-1
   83b50:	20c00007 	ldb	r3,0(r4)
   83b54:	00800e44 	movi	r2,57
   83b58:	1880081e 	bne	r3,r2,83b7c <_dtoa_r+0x710>
   83b5c:	d8800517 	ldw	r2,20(sp)
   83b60:	113ffa1e 	bne	r2,r4,83b4c <_dtoa_r+0x6e0>
   83b64:	d8c00417 	ldw	r3,16(sp)
   83b68:	d9800517 	ldw	r6,20(sp)
   83b6c:	00800c04 	movi	r2,48
   83b70:	18c00044 	addi	r3,r3,1
   83b74:	d8c00415 	stw	r3,16(sp)
   83b78:	30800005 	stb	r2,0(r6)
   83b7c:	20800003 	ldbu	r2,0(r4)
   83b80:	d8c00417 	ldw	r3,16(sp)
   83b84:	27000044 	addi	fp,r4,1
   83b88:	10800044 	addi	r2,r2,1
   83b8c:	d8c00d15 	stw	r3,52(sp)
   83b90:	20800005 	stb	r2,0(r4)
   83b94:	d9001617 	ldw	r4,88(sp)
   83b98:	d9400717 	ldw	r5,28(sp)
   83b9c:	00866340 	call	86634 <_Bfree>
   83ba0:	e0000005 	stb	zero,0(fp)
   83ba4:	d9800d17 	ldw	r6,52(sp)
   83ba8:	d8c02717 	ldw	r3,156(sp)
   83bac:	d9002917 	ldw	r4,164(sp)
   83bb0:	30800044 	addi	r2,r6,1
   83bb4:	18800015 	stw	r2,0(r3)
   83bb8:	20029c26 	beq	r4,zero,8462c <_dtoa_r+0x11c0>
   83bbc:	d8c00517 	ldw	r3,20(sp)
   83bc0:	27000015 	stw	fp,0(r4)
   83bc4:	003e5d06 	br	8353c <_dtoa_r+0xd0>
   83bc8:	d9800d17 	ldw	r6,52(sp)
   83bcc:	00c00274 	movhi	r3,9
   83bd0:	18f89e04 	addi	r3,r3,-7560
   83bd4:	d9001217 	ldw	r4,72(sp)
   83bd8:	300490fa 	slli	r2,r6,3
   83bdc:	d9401317 	ldw	r5,76(sp)
   83be0:	10c5883a 	add	r2,r2,r3
   83be4:	12000017 	ldw	r8,0(r2)
   83be8:	12400117 	ldw	r9,4(r2)
   83bec:	400d883a 	mov	r6,r8
   83bf0:	480f883a 	mov	r7,r9
   83bf4:	0089ec40 	call	89ec4 <__ltdf2>
   83bf8:	1000030e 	bge	r2,zero,83c08 <_dtoa_r+0x79c>
   83bfc:	d8800d17 	ldw	r2,52(sp)
   83c00:	10bfffc4 	addi	r2,r2,-1
   83c04:	d8800d15 	stw	r2,52(sp)
   83c08:	d8000c15 	stw	zero,48(sp)
   83c0c:	003ea806 	br	836b0 <_dtoa_r+0x244>
   83c10:	d9000b17 	ldw	r4,44(sp)
   83c14:	202cc03a 	cmpne	r22,r4,zero
   83c18:	b000c71e 	bne	r22,zero,83f38 <_dtoa_r+0xacc>
   83c1c:	dc001117 	ldw	r16,68(sp)
   83c20:	dc801017 	ldw	r18,64(sp)
   83c24:	0027883a 	mov	r19,zero
   83c28:	04000b0e 	bge	zero,r16,83c58 <_dtoa_r+0x7ec>
   83c2c:	d8c00a17 	ldw	r3,40(sp)
   83c30:	00c0090e 	bge	zero,r3,83c58 <_dtoa_r+0x7ec>
   83c34:	8005883a 	mov	r2,r16
   83c38:	1c011316 	blt	r3,r16,84088 <_dtoa_r+0xc1c>
   83c3c:	d9000a17 	ldw	r4,40(sp)
   83c40:	d9801117 	ldw	r6,68(sp)
   83c44:	80a1c83a 	sub	r16,r16,r2
   83c48:	2089c83a 	sub	r4,r4,r2
   83c4c:	308dc83a 	sub	r6,r6,r2
   83c50:	d9000a15 	stw	r4,40(sp)
   83c54:	d9801115 	stw	r6,68(sp)
   83c58:	d8801017 	ldw	r2,64(sp)
   83c5c:	0080150e 	bge	zero,r2,83cb4 <_dtoa_r+0x848>
   83c60:	d8c00b17 	ldw	r3,44(sp)
   83c64:	1805003a 	cmpeq	r2,r3,zero
   83c68:	1001c91e 	bne	r2,zero,84390 <_dtoa_r+0xf24>
   83c6c:	04800e0e 	bge	zero,r18,83ca8 <_dtoa_r+0x83c>
   83c70:	d9001617 	ldw	r4,88(sp)
   83c74:	980b883a 	mov	r5,r19
   83c78:	900d883a 	mov	r6,r18
   83c7c:	00874800 	call	87480 <__pow5mult>
   83c80:	d9001617 	ldw	r4,88(sp)
   83c84:	d9800717 	ldw	r6,28(sp)
   83c88:	100b883a 	mov	r5,r2
   83c8c:	1027883a 	mov	r19,r2
   83c90:	00870c40 	call	870c4 <__multiply>
   83c94:	d9001617 	ldw	r4,88(sp)
   83c98:	d9400717 	ldw	r5,28(sp)
   83c9c:	1023883a 	mov	r17,r2
   83ca0:	00866340 	call	86634 <_Bfree>
   83ca4:	dc400715 	stw	r17,28(sp)
   83ca8:	d9001017 	ldw	r4,64(sp)
   83cac:	248dc83a 	sub	r6,r4,r18
   83cb0:	30010e1e 	bne	r6,zero,840ec <_dtoa_r+0xc80>
   83cb4:	d9001617 	ldw	r4,88(sp)
   83cb8:	04400044 	movi	r17,1
   83cbc:	880b883a 	mov	r5,r17
   83cc0:	00873180 	call	87318 <__i2b>
   83cc4:	d9800917 	ldw	r6,36(sp)
   83cc8:	1025883a 	mov	r18,r2
   83ccc:	0180040e 	bge	zero,r6,83ce0 <_dtoa_r+0x874>
   83cd0:	d9001617 	ldw	r4,88(sp)
   83cd4:	100b883a 	mov	r5,r2
   83cd8:	00874800 	call	87480 <__pow5mult>
   83cdc:	1025883a 	mov	r18,r2
   83ce0:	d8801717 	ldw	r2,92(sp)
   83ce4:	8880f30e 	bge	r17,r2,840b4 <_dtoa_r+0xc48>
   83ce8:	0023883a 	mov	r17,zero
   83cec:	d9800917 	ldw	r6,36(sp)
   83cf0:	30019e1e 	bne	r6,zero,8436c <_dtoa_r+0xf00>
   83cf4:	00c00044 	movi	r3,1
   83cf8:	d9000a17 	ldw	r4,40(sp)
   83cfc:	20c5883a 	add	r2,r4,r3
   83d00:	10c007cc 	andi	r3,r2,31
   83d04:	1800841e 	bne	r3,zero,83f18 <_dtoa_r+0xaac>
   83d08:	00800704 	movi	r2,28
   83d0c:	d9000a17 	ldw	r4,40(sp)
   83d10:	d9801117 	ldw	r6,68(sp)
   83d14:	80a1883a 	add	r16,r16,r2
   83d18:	2089883a 	add	r4,r4,r2
   83d1c:	308d883a 	add	r6,r6,r2
   83d20:	d9000a15 	stw	r4,40(sp)
   83d24:	d9801115 	stw	r6,68(sp)
   83d28:	d8801117 	ldw	r2,68(sp)
   83d2c:	0080050e 	bge	zero,r2,83d44 <_dtoa_r+0x8d8>
   83d30:	d9400717 	ldw	r5,28(sp)
   83d34:	d9001617 	ldw	r4,88(sp)
   83d38:	100d883a 	mov	r6,r2
   83d3c:	0086f780 	call	86f78 <__lshift>
   83d40:	d8800715 	stw	r2,28(sp)
   83d44:	d8c00a17 	ldw	r3,40(sp)
   83d48:	00c0050e 	bge	zero,r3,83d60 <_dtoa_r+0x8f4>
   83d4c:	d9001617 	ldw	r4,88(sp)
   83d50:	900b883a 	mov	r5,r18
   83d54:	180d883a 	mov	r6,r3
   83d58:	0086f780 	call	86f78 <__lshift>
   83d5c:	1025883a 	mov	r18,r2
   83d60:	d9000c17 	ldw	r4,48(sp)
   83d64:	2005003a 	cmpeq	r2,r4,zero
   83d68:	10016f26 	beq	r2,zero,84328 <_dtoa_r+0xebc>
   83d6c:	d9000f17 	ldw	r4,60(sp)
   83d70:	0102170e 	bge	zero,r4,845d0 <_dtoa_r+0x1164>
   83d74:	d9800b17 	ldw	r6,44(sp)
   83d78:	3005003a 	cmpeq	r2,r6,zero
   83d7c:	1000881e 	bne	r2,zero,83fa0 <_dtoa_r+0xb34>
   83d80:	0400050e 	bge	zero,r16,83d98 <_dtoa_r+0x92c>
   83d84:	d9001617 	ldw	r4,88(sp)
   83d88:	980b883a 	mov	r5,r19
   83d8c:	800d883a 	mov	r6,r16
   83d90:	0086f780 	call	86f78 <__lshift>
   83d94:	1027883a 	mov	r19,r2
   83d98:	8804c03a 	cmpne	r2,r17,zero
   83d9c:	1002541e 	bne	r2,zero,846f0 <_dtoa_r+0x1284>
   83da0:	980b883a 	mov	r5,r19
   83da4:	dd800517 	ldw	r22,20(sp)
   83da8:	dcc00615 	stw	r19,24(sp)
   83dac:	a700004c 	andi	fp,r20,1
   83db0:	2827883a 	mov	r19,r5
   83db4:	d9000717 	ldw	r4,28(sp)
   83db8:	900b883a 	mov	r5,r18
   83dbc:	00832280 	call	83228 <quorem>
   83dc0:	d9000717 	ldw	r4,28(sp)
   83dc4:	d9400617 	ldw	r5,24(sp)
   83dc8:	1023883a 	mov	r17,r2
   83dcc:	8dc00c04 	addi	r23,r17,48
   83dd0:	00867900 	call	86790 <__mcmp>
   83dd4:	d9001617 	ldw	r4,88(sp)
   83dd8:	900b883a 	mov	r5,r18
   83ddc:	980d883a 	mov	r6,r19
   83de0:	1029883a 	mov	r20,r2
   83de4:	0086dec0 	call	86dec <__mdiff>
   83de8:	102b883a 	mov	r21,r2
   83dec:	10800317 	ldw	r2,12(r2)
   83df0:	1001281e 	bne	r2,zero,84294 <_dtoa_r+0xe28>
   83df4:	d9000717 	ldw	r4,28(sp)
   83df8:	a80b883a 	mov	r5,r21
   83dfc:	00867900 	call	86790 <__mcmp>
   83e00:	d9001617 	ldw	r4,88(sp)
   83e04:	1021883a 	mov	r16,r2
   83e08:	a80b883a 	mov	r5,r21
   83e0c:	00866340 	call	86634 <_Bfree>
   83e10:	8000041e 	bne	r16,zero,83e24 <_dtoa_r+0x9b8>
   83e14:	d8801717 	ldw	r2,92(sp)
   83e18:	1000021e 	bne	r2,zero,83e24 <_dtoa_r+0x9b8>
   83e1c:	e004c03a 	cmpne	r2,fp,zero
   83e20:	10011726 	beq	r2,zero,84280 <_dtoa_r+0xe14>
   83e24:	a0010616 	blt	r20,zero,84240 <_dtoa_r+0xdd4>
   83e28:	a000041e 	bne	r20,zero,83e3c <_dtoa_r+0x9d0>
   83e2c:	d8c01717 	ldw	r3,92(sp)
   83e30:	1800021e 	bne	r3,zero,83e3c <_dtoa_r+0x9d0>
   83e34:	e004c03a 	cmpne	r2,fp,zero
   83e38:	10010126 	beq	r2,zero,84240 <_dtoa_r+0xdd4>
   83e3c:	04023d16 	blt	zero,r16,84734 <_dtoa_r+0x12c8>
   83e40:	b5c00005 	stb	r23,0(r22)
   83e44:	d9800517 	ldw	r6,20(sp)
   83e48:	d9000f17 	ldw	r4,60(sp)
   83e4c:	b5800044 	addi	r22,r22,1
   83e50:	3105883a 	add	r2,r6,r4
   83e54:	b0806526 	beq	r22,r2,83fec <_dtoa_r+0xb80>
   83e58:	d9400717 	ldw	r5,28(sp)
   83e5c:	d9001617 	ldw	r4,88(sp)
   83e60:	01800284 	movi	r6,10
   83e64:	000f883a 	mov	r7,zero
   83e68:	00873540 	call	87354 <__multadd>
   83e6c:	d8800715 	stw	r2,28(sp)
   83e70:	d8800617 	ldw	r2,24(sp)
   83e74:	14c10c26 	beq	r2,r19,842a8 <_dtoa_r+0xe3c>
   83e78:	d9400617 	ldw	r5,24(sp)
   83e7c:	d9001617 	ldw	r4,88(sp)
   83e80:	01800284 	movi	r6,10
   83e84:	000f883a 	mov	r7,zero
   83e88:	00873540 	call	87354 <__multadd>
   83e8c:	d9001617 	ldw	r4,88(sp)
   83e90:	980b883a 	mov	r5,r19
   83e94:	01800284 	movi	r6,10
   83e98:	000f883a 	mov	r7,zero
   83e9c:	d8800615 	stw	r2,24(sp)
   83ea0:	00873540 	call	87354 <__multadd>
   83ea4:	1027883a 	mov	r19,r2
   83ea8:	003fc206 	br	83db4 <_dtoa_r+0x948>
   83eac:	2445c83a 	sub	r2,r4,r17
   83eb0:	a088983a 	sll	r4,r20,r2
   83eb4:	003e4b06 	br	837e4 <_dtoa_r+0x378>
   83eb8:	01bfffc4 	movi	r6,-1
   83ebc:	00800044 	movi	r2,1
   83ec0:	d9800e15 	stw	r6,56(sp)
   83ec4:	d9800f15 	stw	r6,60(sp)
   83ec8:	d8800b15 	stw	r2,44(sp)
   83ecc:	d8c01617 	ldw	r3,88(sp)
   83ed0:	008005c4 	movi	r2,23
   83ed4:	18001115 	stw	zero,68(r3)
   83ed8:	1580082e 	bgeu	r2,r22,83efc <_dtoa_r+0xa90>
   83edc:	00c00104 	movi	r3,4
   83ee0:	0009883a 	mov	r4,zero
   83ee4:	18c7883a 	add	r3,r3,r3
   83ee8:	18800504 	addi	r2,r3,20
   83eec:	21000044 	addi	r4,r4,1
   83ef0:	b0bffc2e 	bgeu	r22,r2,83ee4 <_dtoa_r+0xa78>
   83ef4:	d9801617 	ldw	r6,88(sp)
   83ef8:	31001115 	stw	r4,68(r6)
   83efc:	dc000f17 	ldw	r16,60(sp)
   83f00:	003e4b06 	br	83830 <_dtoa_r+0x3c4>
   83f04:	d9801717 	ldw	r6,92(sp)
   83f08:	0023883a 	mov	r17,zero
   83f0c:	31bfff04 	addi	r6,r6,-4
   83f10:	d9801715 	stw	r6,92(sp)
   83f14:	003df806 	br	836f8 <_dtoa_r+0x28c>
   83f18:	00800804 	movi	r2,32
   83f1c:	10c9c83a 	sub	r4,r2,r3
   83f20:	00c00104 	movi	r3,4
   83f24:	19005a16 	blt	r3,r4,84090 <_dtoa_r+0xc24>
   83f28:	008000c4 	movi	r2,3
   83f2c:	113f7e16 	blt	r2,r4,83d28 <_dtoa_r+0x8bc>
   83f30:	20800704 	addi	r2,r4,28
   83f34:	003f7506 	br	83d0c <_dtoa_r+0x8a0>
   83f38:	d9801717 	ldw	r6,92(sp)
   83f3c:	00800044 	movi	r2,1
   83f40:	1180a10e 	bge	r2,r6,841c8 <_dtoa_r+0xd5c>
   83f44:	d9800f17 	ldw	r6,60(sp)
   83f48:	d8c01017 	ldw	r3,64(sp)
   83f4c:	30bfffc4 	addi	r2,r6,-1
   83f50:	1881c616 	blt	r3,r2,8466c <_dtoa_r+0x1200>
   83f54:	18a5c83a 	sub	r18,r3,r2
   83f58:	d8800f17 	ldw	r2,60(sp)
   83f5c:	10026216 	blt	r2,zero,848e8 <_dtoa_r+0x147c>
   83f60:	dc001117 	ldw	r16,68(sp)
   83f64:	1007883a 	mov	r3,r2
   83f68:	d9800a17 	ldw	r6,40(sp)
   83f6c:	d8801117 	ldw	r2,68(sp)
   83f70:	d9001617 	ldw	r4,88(sp)
   83f74:	30cd883a 	add	r6,r6,r3
   83f78:	10c5883a 	add	r2,r2,r3
   83f7c:	01400044 	movi	r5,1
   83f80:	d9800a15 	stw	r6,40(sp)
   83f84:	d8801115 	stw	r2,68(sp)
   83f88:	00873180 	call	87318 <__i2b>
   83f8c:	1027883a 	mov	r19,r2
   83f90:	003f2506 	br	83c28 <_dtoa_r+0x7bc>
   83f94:	00c00274 	movhi	r3,9
   83f98:	18f7e004 	addi	r3,r3,-8320
   83f9c:	003d6706 	br	8353c <_dtoa_r+0xd0>
   83fa0:	dd800517 	ldw	r22,20(sp)
   83fa4:	04000044 	movi	r16,1
   83fa8:	00000706 	br	83fc8 <_dtoa_r+0xb5c>
   83fac:	d9400717 	ldw	r5,28(sp)
   83fb0:	d9001617 	ldw	r4,88(sp)
   83fb4:	01800284 	movi	r6,10
   83fb8:	000f883a 	mov	r7,zero
   83fbc:	00873540 	call	87354 <__multadd>
   83fc0:	d8800715 	stw	r2,28(sp)
   83fc4:	84000044 	addi	r16,r16,1
   83fc8:	d9000717 	ldw	r4,28(sp)
   83fcc:	900b883a 	mov	r5,r18
   83fd0:	00832280 	call	83228 <quorem>
   83fd4:	15c00c04 	addi	r23,r2,48
   83fd8:	b5c00005 	stb	r23,0(r22)
   83fdc:	d8c00f17 	ldw	r3,60(sp)
   83fe0:	b5800044 	addi	r22,r22,1
   83fe4:	80fff116 	blt	r16,r3,83fac <_dtoa_r+0xb40>
   83fe8:	d8000615 	stw	zero,24(sp)
   83fec:	d9400717 	ldw	r5,28(sp)
   83ff0:	d9001617 	ldw	r4,88(sp)
   83ff4:	01800044 	movi	r6,1
   83ff8:	0086f780 	call	86f78 <__lshift>
   83ffc:	1009883a 	mov	r4,r2
   84000:	900b883a 	mov	r5,r18
   84004:	d8800715 	stw	r2,28(sp)
   84008:	00867900 	call	86790 <__mcmp>
   8400c:	00803c0e 	bge	zero,r2,84100 <_dtoa_r+0xc94>
   84010:	b009883a 	mov	r4,r22
   84014:	213fffc4 	addi	r4,r4,-1
   84018:	21400003 	ldbu	r5,0(r4)
   8401c:	00800e44 	movi	r2,57
   84020:	28c03fcc 	andi	r3,r5,255
   84024:	18c0201c 	xori	r3,r3,128
   84028:	18ffe004 	addi	r3,r3,-128
   8402c:	1881981e 	bne	r3,r2,84690 <_dtoa_r+0x1224>
   84030:	d9800517 	ldw	r6,20(sp)
   84034:	21bff71e 	bne	r4,r6,84014 <_dtoa_r+0xba8>
   84038:	d8800d17 	ldw	r2,52(sp)
   8403c:	37000044 	addi	fp,r6,1
   84040:	10800044 	addi	r2,r2,1
   84044:	d8800d15 	stw	r2,52(sp)
   84048:	00800c44 	movi	r2,49
   8404c:	30800005 	stb	r2,0(r6)
   84050:	d9001617 	ldw	r4,88(sp)
   84054:	900b883a 	mov	r5,r18
   84058:	00866340 	call	86634 <_Bfree>
   8405c:	983ecd26 	beq	r19,zero,83b94 <_dtoa_r+0x728>
   84060:	d8c00617 	ldw	r3,24(sp)
   84064:	18000426 	beq	r3,zero,84078 <_dtoa_r+0xc0c>
   84068:	1cc00326 	beq	r3,r19,84078 <_dtoa_r+0xc0c>
   8406c:	d9001617 	ldw	r4,88(sp)
   84070:	180b883a 	mov	r5,r3
   84074:	00866340 	call	86634 <_Bfree>
   84078:	d9001617 	ldw	r4,88(sp)
   8407c:	980b883a 	mov	r5,r19
   84080:	00866340 	call	86634 <_Bfree>
   84084:	003ec306 	br	83b94 <_dtoa_r+0x728>
   84088:	1805883a 	mov	r2,r3
   8408c:	003eeb06 	br	83c3c <_dtoa_r+0x7d0>
   84090:	d9800a17 	ldw	r6,40(sp)
   84094:	d8c01117 	ldw	r3,68(sp)
   84098:	20bfff04 	addi	r2,r4,-4
   8409c:	308d883a 	add	r6,r6,r2
   840a0:	1887883a 	add	r3,r3,r2
   840a4:	80a1883a 	add	r16,r16,r2
   840a8:	d9800a15 	stw	r6,40(sp)
   840ac:	d8c01115 	stw	r3,68(sp)
   840b0:	003f1d06 	br	83d28 <_dtoa_r+0x8bc>
   840b4:	a03f0c1e 	bne	r20,zero,83ce8 <_dtoa_r+0x87c>
   840b8:	00800434 	movhi	r2,16
   840bc:	10bfffc4 	addi	r2,r2,-1
   840c0:	a884703a 	and	r2,r21,r2
   840c4:	103f081e 	bne	r2,zero,83ce8 <_dtoa_r+0x87c>
   840c8:	a89ffc2c 	andhi	r2,r21,32752
   840cc:	103f0626 	beq	r2,zero,83ce8 <_dtoa_r+0x87c>
   840d0:	d8c01117 	ldw	r3,68(sp)
   840d4:	d9000a17 	ldw	r4,40(sp)
   840d8:	18c00044 	addi	r3,r3,1
   840dc:	21000044 	addi	r4,r4,1
   840e0:	d8c01115 	stw	r3,68(sp)
   840e4:	d9000a15 	stw	r4,40(sp)
   840e8:	003f0006 	br	83cec <_dtoa_r+0x880>
   840ec:	d9400717 	ldw	r5,28(sp)
   840f0:	d9001617 	ldw	r4,88(sp)
   840f4:	00874800 	call	87480 <__pow5mult>
   840f8:	d8800715 	stw	r2,28(sp)
   840fc:	003eed06 	br	83cb4 <_dtoa_r+0x848>
   84100:	1000021e 	bne	r2,zero,8410c <_dtoa_r+0xca0>
   84104:	b880004c 	andi	r2,r23,1
   84108:	103fc11e 	bne	r2,zero,84010 <_dtoa_r+0xba4>
   8410c:	b5bfffc4 	addi	r22,r22,-1
   84110:	b0c00007 	ldb	r3,0(r22)
   84114:	00800c04 	movi	r2,48
   84118:	18bffc26 	beq	r3,r2,8410c <_dtoa_r+0xca0>
   8411c:	b7000044 	addi	fp,r22,1
   84120:	003fcb06 	br	84050 <_dtoa_r+0xbe4>
   84124:	d9800d17 	ldw	r6,52(sp)
   84128:	018fc83a 	sub	r7,zero,r6
   8412c:	3801f726 	beq	r7,zero,8490c <_dtoa_r+0x14a0>
   84130:	398003cc 	andi	r6,r7,15
   84134:	300c90fa 	slli	r6,r6,3
   84138:	01400274 	movhi	r5,9
   8413c:	29789e04 	addi	r5,r5,-7560
   84140:	d9001217 	ldw	r4,72(sp)
   84144:	314d883a 	add	r6,r6,r5
   84148:	30c00117 	ldw	r3,4(r6)
   8414c:	30800017 	ldw	r2,0(r6)
   84150:	d9401317 	ldw	r5,76(sp)
   84154:	3821d13a 	srai	r16,r7,4
   84158:	100d883a 	mov	r6,r2
   8415c:	180f883a 	mov	r7,r3
   84160:	00896880 	call	89688 <__muldf3>
   84164:	1011883a 	mov	r8,r2
   84168:	1813883a 	mov	r9,r3
   8416c:	1029883a 	mov	r20,r2
   84170:	182b883a 	mov	r21,r3
   84174:	8001e526 	beq	r16,zero,8490c <_dtoa_r+0x14a0>
   84178:	05800084 	movi	r22,2
   8417c:	04400274 	movhi	r17,9
   84180:	8c78d004 	addi	r17,r17,-7360
   84184:	8080004c 	andi	r2,r16,1
   84188:	1005003a 	cmpeq	r2,r2,zero
   8418c:	1000081e 	bne	r2,zero,841b0 <_dtoa_r+0xd44>
   84190:	89800017 	ldw	r6,0(r17)
   84194:	89c00117 	ldw	r7,4(r17)
   84198:	480b883a 	mov	r5,r9
   8419c:	4009883a 	mov	r4,r8
   841a0:	00896880 	call	89688 <__muldf3>
   841a4:	1011883a 	mov	r8,r2
   841a8:	b5800044 	addi	r22,r22,1
   841ac:	1813883a 	mov	r9,r3
   841b0:	8021d07a 	srai	r16,r16,1
   841b4:	8c400204 	addi	r17,r17,8
   841b8:	803ff21e 	bne	r16,zero,84184 <_dtoa_r+0xd18>
   841bc:	4029883a 	mov	r20,r8
   841c0:	482b883a 	mov	r21,r9
   841c4:	003dca06 	br	838f0 <_dtoa_r+0x484>
   841c8:	d9000817 	ldw	r4,32(sp)
   841cc:	2005003a 	cmpeq	r2,r4,zero
   841d0:	1001f61e 	bne	r2,zero,849ac <_dtoa_r+0x1540>
   841d4:	dc001117 	ldw	r16,68(sp)
   841d8:	dc801017 	ldw	r18,64(sp)
   841dc:	18c10cc4 	addi	r3,r3,1075
   841e0:	003f6106 	br	83f68 <_dtoa_r+0xafc>
   841e4:	d8000b15 	stw	zero,44(sp)
   841e8:	d9802617 	ldw	r6,152(sp)
   841ec:	d8c00d17 	ldw	r3,52(sp)
   841f0:	30800044 	addi	r2,r6,1
   841f4:	18ad883a 	add	r22,r3,r2
   841f8:	b13fffc4 	addi	r4,r22,-1
   841fc:	d9000e15 	stw	r4,56(sp)
   84200:	0581f60e 	bge	zero,r22,849dc <_dtoa_r+0x1570>
   84204:	dd800f15 	stw	r22,60(sp)
   84208:	003f3006 	br	83ecc <_dtoa_r+0xa60>
   8420c:	d8000b15 	stw	zero,44(sp)
   84210:	d9002617 	ldw	r4,152(sp)
   84214:	0101eb0e 	bge	zero,r4,849c4 <_dtoa_r+0x1558>
   84218:	202d883a 	mov	r22,r4
   8421c:	d9000e15 	stw	r4,56(sp)
   84220:	d9000f15 	stw	r4,60(sp)
   84224:	003f2906 	br	83ecc <_dtoa_r+0xa60>
   84228:	01800044 	movi	r6,1
   8422c:	d9800b15 	stw	r6,44(sp)
   84230:	003ff706 	br	84210 <_dtoa_r+0xda4>
   84234:	01000044 	movi	r4,1
   84238:	d9000b15 	stw	r4,44(sp)
   8423c:	003fea06 	br	841e8 <_dtoa_r+0xd7c>
   84240:	04000c0e 	bge	zero,r16,84274 <_dtoa_r+0xe08>
   84244:	d9400717 	ldw	r5,28(sp)
   84248:	d9001617 	ldw	r4,88(sp)
   8424c:	01800044 	movi	r6,1
   84250:	0086f780 	call	86f78 <__lshift>
   84254:	1009883a 	mov	r4,r2
   84258:	900b883a 	mov	r5,r18
   8425c:	d8800715 	stw	r2,28(sp)
   84260:	00867900 	call	86790 <__mcmp>
   84264:	0081e00e 	bge	zero,r2,849e8 <_dtoa_r+0x157c>
   84268:	bdc00044 	addi	r23,r23,1
   8426c:	00800e84 	movi	r2,58
   84270:	b881a226 	beq	r23,r2,848fc <_dtoa_r+0x1490>
   84274:	b7000044 	addi	fp,r22,1
   84278:	b5c00005 	stb	r23,0(r22)
   8427c:	003f7406 	br	84050 <_dtoa_r+0xbe4>
   84280:	00800e44 	movi	r2,57
   84284:	b8819d26 	beq	r23,r2,848fc <_dtoa_r+0x1490>
   84288:	053ffa0e 	bge	zero,r20,84274 <_dtoa_r+0xe08>
   8428c:	8dc00c44 	addi	r23,r17,49
   84290:	003ff806 	br	84274 <_dtoa_r+0xe08>
   84294:	d9001617 	ldw	r4,88(sp)
   84298:	a80b883a 	mov	r5,r21
   8429c:	04000044 	movi	r16,1
   842a0:	00866340 	call	86634 <_Bfree>
   842a4:	003edf06 	br	83e24 <_dtoa_r+0x9b8>
   842a8:	d9001617 	ldw	r4,88(sp)
   842ac:	980b883a 	mov	r5,r19
   842b0:	01800284 	movi	r6,10
   842b4:	000f883a 	mov	r7,zero
   842b8:	00873540 	call	87354 <__multadd>
   842bc:	1027883a 	mov	r19,r2
   842c0:	d8800615 	stw	r2,24(sp)
   842c4:	003ebb06 	br	83db4 <_dtoa_r+0x948>
   842c8:	d9801117 	ldw	r6,68(sp)
   842cc:	d8800d17 	ldw	r2,52(sp)
   842d0:	d8000915 	stw	zero,36(sp)
   842d4:	308dc83a 	sub	r6,r6,r2
   842d8:	0087c83a 	sub	r3,zero,r2
   842dc:	d9801115 	stw	r6,68(sp)
   842e0:	d8c01015 	stw	r3,64(sp)
   842e4:	003cfe06 	br	836e0 <_dtoa_r+0x274>
   842e8:	018dc83a 	sub	r6,zero,r6
   842ec:	d9801115 	stw	r6,68(sp)
   842f0:	d8000a15 	stw	zero,40(sp)
   842f4:	003cf306 	br	836c4 <_dtoa_r+0x258>
   842f8:	d9000d17 	ldw	r4,52(sp)
   842fc:	0089f4c0 	call	89f4c <__floatsidf>
   84300:	880b883a 	mov	r5,r17
   84304:	8009883a 	mov	r4,r16
   84308:	180f883a 	mov	r7,r3
   8430c:	100d883a 	mov	r6,r2
   84310:	0089d2c0 	call	89d2c <__nedf2>
   84314:	103ce126 	beq	r2,zero,8369c <_dtoa_r+0x230>
   84318:	d9800d17 	ldw	r6,52(sp)
   8431c:	31bfffc4 	addi	r6,r6,-1
   84320:	d9800d15 	stw	r6,52(sp)
   84324:	003cdd06 	br	8369c <_dtoa_r+0x230>
   84328:	d9000717 	ldw	r4,28(sp)
   8432c:	900b883a 	mov	r5,r18
   84330:	00867900 	call	86790 <__mcmp>
   84334:	103e8d0e 	bge	r2,zero,83d6c <_dtoa_r+0x900>
   84338:	d9400717 	ldw	r5,28(sp)
   8433c:	d9001617 	ldw	r4,88(sp)
   84340:	01800284 	movi	r6,10
   84344:	000f883a 	mov	r7,zero
   84348:	00873540 	call	87354 <__multadd>
   8434c:	d9800d17 	ldw	r6,52(sp)
   84350:	d8800715 	stw	r2,28(sp)
   84354:	31bfffc4 	addi	r6,r6,-1
   84358:	d9800d15 	stw	r6,52(sp)
   8435c:	b001a71e 	bne	r22,zero,849fc <_dtoa_r+0x1590>
   84360:	d8800e17 	ldw	r2,56(sp)
   84364:	d8800f15 	stw	r2,60(sp)
   84368:	003e8006 	br	83d6c <_dtoa_r+0x900>
   8436c:	90800417 	ldw	r2,16(r18)
   84370:	1085883a 	add	r2,r2,r2
   84374:	1085883a 	add	r2,r2,r2
   84378:	1485883a 	add	r2,r2,r18
   8437c:	11000417 	ldw	r4,16(r2)
   84380:	008665c0 	call	8665c <__hi0bits>
   84384:	00c00804 	movi	r3,32
   84388:	1887c83a 	sub	r3,r3,r2
   8438c:	003e5a06 	br	83cf8 <_dtoa_r+0x88c>
   84390:	d9400717 	ldw	r5,28(sp)
   84394:	d9801017 	ldw	r6,64(sp)
   84398:	d9001617 	ldw	r4,88(sp)
   8439c:	00874800 	call	87480 <__pow5mult>
   843a0:	d8800715 	stw	r2,28(sp)
   843a4:	003e4306 	br	83cb4 <_dtoa_r+0x848>
   843a8:	d9800f17 	ldw	r6,60(sp)
   843ac:	d8800d17 	ldw	r2,52(sp)
   843b0:	d9800315 	stw	r6,12(sp)
   843b4:	d8800415 	stw	r2,16(sp)
   843b8:	d8c00b17 	ldw	r3,44(sp)
   843bc:	1805003a 	cmpeq	r2,r3,zero
   843c0:	1000e21e 	bne	r2,zero,8474c <_dtoa_r+0x12e0>
   843c4:	d9000317 	ldw	r4,12(sp)
   843c8:	0005883a 	mov	r2,zero
   843cc:	00cff834 	movhi	r3,16352
   843d0:	200c90fa 	slli	r6,r4,3
   843d4:	01000274 	movhi	r4,9
   843d8:	21389e04 	addi	r4,r4,-7560
   843dc:	180b883a 	mov	r5,r3
   843e0:	310d883a 	add	r6,r6,r4
   843e4:	327fff17 	ldw	r9,-4(r6)
   843e8:	323ffe17 	ldw	r8,-8(r6)
   843ec:	1009883a 	mov	r4,r2
   843f0:	480f883a 	mov	r7,r9
   843f4:	400d883a 	mov	r6,r8
   843f8:	0089a4c0 	call	89a4c <__divdf3>
   843fc:	180b883a 	mov	r5,r3
   84400:	b00d883a 	mov	r6,r22
   84404:	b80f883a 	mov	r7,r23
   84408:	1009883a 	mov	r4,r2
   8440c:	00895940 	call	89594 <__subdf3>
   84410:	a80b883a 	mov	r5,r21
   84414:	a009883a 	mov	r4,r20
   84418:	d8c01915 	stw	r3,100(sp)
   8441c:	d8801815 	stw	r2,96(sp)
   84420:	008a0440 	call	8a044 <__fixdfsi>
   84424:	1009883a 	mov	r4,r2
   84428:	1027883a 	mov	r19,r2
   8442c:	0089f4c0 	call	89f4c <__floatsidf>
   84430:	a80b883a 	mov	r5,r21
   84434:	a009883a 	mov	r4,r20
   84438:	180f883a 	mov	r7,r3
   8443c:	100d883a 	mov	r6,r2
   84440:	00895940 	call	89594 <__subdf3>
   84444:	d9801817 	ldw	r6,96(sp)
   84448:	1823883a 	mov	r17,r3
   8444c:	d8801415 	stw	r2,80(sp)
   84450:	302d883a 	mov	r22,r6
   84454:	d9800517 	ldw	r6,20(sp)
   84458:	9cc00c04 	addi	r19,r19,48
   8445c:	dc401515 	stw	r17,84(sp)
   84460:	d8c01917 	ldw	r3,100(sp)
   84464:	34c00005 	stb	r19,0(r6)
   84468:	d8800517 	ldw	r2,20(sp)
   8446c:	d9401917 	ldw	r5,100(sp)
   84470:	d9801417 	ldw	r6,80(sp)
   84474:	b009883a 	mov	r4,r22
   84478:	880f883a 	mov	r7,r17
   8447c:	182f883a 	mov	r23,r3
   84480:	17000044 	addi	fp,r2,1
   84484:	0089db40 	call	89db4 <__gtdf2>
   84488:	00804e16 	blt	zero,r2,845c4 <_dtoa_r+0x1158>
   8448c:	d9801417 	ldw	r6,80(sp)
   84490:	0005883a 	mov	r2,zero
   84494:	00cffc34 	movhi	r3,16368
   84498:	180b883a 	mov	r5,r3
   8449c:	880f883a 	mov	r7,r17
   844a0:	1009883a 	mov	r4,r2
   844a4:	00895940 	call	89594 <__subdf3>
   844a8:	d9401917 	ldw	r5,100(sp)
   844ac:	180f883a 	mov	r7,r3
   844b0:	b009883a 	mov	r4,r22
   844b4:	100d883a 	mov	r6,r2
   844b8:	0089db40 	call	89db4 <__gtdf2>
   844bc:	00bda216 	blt	zero,r2,83b48 <_dtoa_r+0x6dc>
   844c0:	d8c00317 	ldw	r3,12(sp)
   844c4:	00800044 	movi	r2,1
   844c8:	10c01216 	blt	r2,r3,84514 <_dtoa_r+0x10a8>
   844cc:	003d4506 	br	839e4 <_dtoa_r+0x578>
   844d0:	d9801417 	ldw	r6,80(sp)
   844d4:	0005883a 	mov	r2,zero
   844d8:	00cffc34 	movhi	r3,16368
   844dc:	180b883a 	mov	r5,r3
   844e0:	880f883a 	mov	r7,r17
   844e4:	1009883a 	mov	r4,r2
   844e8:	00895940 	call	89594 <__subdf3>
   844ec:	d9c01b17 	ldw	r7,108(sp)
   844f0:	180b883a 	mov	r5,r3
   844f4:	1009883a 	mov	r4,r2
   844f8:	b00d883a 	mov	r6,r22
   844fc:	0089ec40 	call	89ec4 <__ltdf2>
   84500:	103d9116 	blt	r2,zero,83b48 <_dtoa_r+0x6dc>
   84504:	d9800517 	ldw	r6,20(sp)
   84508:	d9000317 	ldw	r4,12(sp)
   8450c:	3105883a 	add	r2,r6,r4
   84510:	e0bd3426 	beq	fp,r2,839e4 <_dtoa_r+0x578>
   84514:	04500934 	movhi	r17,16420
   84518:	0021883a 	mov	r16,zero
   8451c:	b80b883a 	mov	r5,r23
   84520:	b009883a 	mov	r4,r22
   84524:	800d883a 	mov	r6,r16
   84528:	880f883a 	mov	r7,r17
   8452c:	00896880 	call	89688 <__muldf3>
   84530:	d9401517 	ldw	r5,84(sp)
   84534:	d9001417 	ldw	r4,80(sp)
   84538:	880f883a 	mov	r7,r17
   8453c:	000d883a 	mov	r6,zero
   84540:	d8801a15 	stw	r2,104(sp)
   84544:	d8c01b15 	stw	r3,108(sp)
   84548:	00896880 	call	89688 <__muldf3>
   8454c:	180b883a 	mov	r5,r3
   84550:	1009883a 	mov	r4,r2
   84554:	1823883a 	mov	r17,r3
   84558:	1021883a 	mov	r16,r2
   8455c:	008a0440 	call	8a044 <__fixdfsi>
   84560:	1009883a 	mov	r4,r2
   84564:	102b883a 	mov	r21,r2
   84568:	0089f4c0 	call	89f4c <__floatsidf>
   8456c:	880b883a 	mov	r5,r17
   84570:	8009883a 	mov	r4,r16
   84574:	180f883a 	mov	r7,r3
   84578:	100d883a 	mov	r6,r2
   8457c:	00895940 	call	89594 <__subdf3>
   84580:	1021883a 	mov	r16,r2
   84584:	d9001b17 	ldw	r4,108(sp)
   84588:	1823883a 	mov	r17,r3
   8458c:	dc001415 	stw	r16,80(sp)
   84590:	ad400c04 	addi	r21,r21,48
   84594:	dc401515 	stw	r17,84(sp)
   84598:	d8801a17 	ldw	r2,104(sp)
   8459c:	e5400005 	stb	r21,0(fp)
   845a0:	202f883a 	mov	r23,r4
   845a4:	d9c01b17 	ldw	r7,108(sp)
   845a8:	d9001417 	ldw	r4,80(sp)
   845ac:	880b883a 	mov	r5,r17
   845b0:	100d883a 	mov	r6,r2
   845b4:	102d883a 	mov	r22,r2
   845b8:	e7000044 	addi	fp,fp,1
   845bc:	0089ec40 	call	89ec4 <__ltdf2>
   845c0:	103fc30e 	bge	r2,zero,844d0 <_dtoa_r+0x1064>
   845c4:	d9000417 	ldw	r4,16(sp)
   845c8:	d9000d15 	stw	r4,52(sp)
   845cc:	003d7106 	br	83b94 <_dtoa_r+0x728>
   845d0:	d9801717 	ldw	r6,92(sp)
   845d4:	00800084 	movi	r2,2
   845d8:	11bde60e 	bge	r2,r6,83d74 <_dtoa_r+0x908>
   845dc:	203cfb1e 	bne	r4,zero,839cc <_dtoa_r+0x560>
   845e0:	d9001617 	ldw	r4,88(sp)
   845e4:	900b883a 	mov	r5,r18
   845e8:	01800144 	movi	r6,5
   845ec:	000f883a 	mov	r7,zero
   845f0:	00873540 	call	87354 <__multadd>
   845f4:	d9000717 	ldw	r4,28(sp)
   845f8:	100b883a 	mov	r5,r2
   845fc:	1025883a 	mov	r18,r2
   84600:	00867900 	call	86790 <__mcmp>
   84604:	00bcf10e 	bge	zero,r2,839cc <_dtoa_r+0x560>
   84608:	d8c00d17 	ldw	r3,52(sp)
   8460c:	d9000517 	ldw	r4,20(sp)
   84610:	d8000615 	stw	zero,24(sp)
   84614:	18c00044 	addi	r3,r3,1
   84618:	d8c00d15 	stw	r3,52(sp)
   8461c:	00800c44 	movi	r2,49
   84620:	27000044 	addi	fp,r4,1
   84624:	20800005 	stb	r2,0(r4)
   84628:	003e8906 	br	84050 <_dtoa_r+0xbe4>
   8462c:	d8c00517 	ldw	r3,20(sp)
   84630:	003bc206 	br	8353c <_dtoa_r+0xd0>
   84634:	01800274 	movhi	r6,9
   84638:	31b8d004 	addi	r6,r6,-7360
   8463c:	30c00917 	ldw	r3,36(r6)
   84640:	30800817 	ldw	r2,32(r6)
   84644:	d9001217 	ldw	r4,72(sp)
   84648:	d9401317 	ldw	r5,76(sp)
   8464c:	180f883a 	mov	r7,r3
   84650:	100d883a 	mov	r6,r2
   84654:	0089a4c0 	call	89a4c <__divdf3>
   84658:	948003cc 	andi	r18,r18,15
   8465c:	058000c4 	movi	r22,3
   84660:	1029883a 	mov	r20,r2
   84664:	182b883a 	mov	r21,r3
   84668:	003c8906 	br	83890 <_dtoa_r+0x424>
   8466c:	d9001017 	ldw	r4,64(sp)
   84670:	d9800917 	ldw	r6,36(sp)
   84674:	0025883a 	mov	r18,zero
   84678:	1105c83a 	sub	r2,r2,r4
   8467c:	2089883a 	add	r4,r4,r2
   84680:	308d883a 	add	r6,r6,r2
   84684:	d9001015 	stw	r4,64(sp)
   84688:	d9800915 	stw	r6,36(sp)
   8468c:	003e3206 	br	83f58 <_dtoa_r+0xaec>
   84690:	28800044 	addi	r2,r5,1
   84694:	27000044 	addi	fp,r4,1
   84698:	20800005 	stb	r2,0(r4)
   8469c:	003e6c06 	br	84050 <_dtoa_r+0xbe4>
   846a0:	d8800f17 	ldw	r2,60(sp)
   846a4:	00bce016 	blt	zero,r2,83a28 <_dtoa_r+0x5bc>
   846a8:	d9800f17 	ldw	r6,60(sp)
   846ac:	303cc51e 	bne	r6,zero,839c4 <_dtoa_r+0x558>
   846b0:	0005883a 	mov	r2,zero
   846b4:	00d00534 	movhi	r3,16404
   846b8:	980b883a 	mov	r5,r19
   846bc:	180f883a 	mov	r7,r3
   846c0:	9009883a 	mov	r4,r18
   846c4:	100d883a 	mov	r6,r2
   846c8:	00896880 	call	89688 <__muldf3>
   846cc:	180b883a 	mov	r5,r3
   846d0:	a80f883a 	mov	r7,r21
   846d4:	1009883a 	mov	r4,r2
   846d8:	a00d883a 	mov	r6,r20
   846dc:	0089e3c0 	call	89e3c <__gedf2>
   846e0:	103cb80e 	bge	r2,zero,839c4 <_dtoa_r+0x558>
   846e4:	0027883a 	mov	r19,zero
   846e8:	0025883a 	mov	r18,zero
   846ec:	003fc606 	br	84608 <_dtoa_r+0x119c>
   846f0:	99400117 	ldw	r5,4(r19)
   846f4:	d9001617 	ldw	r4,88(sp)
   846f8:	0086bb40 	call	86bb4 <_Balloc>
   846fc:	99800417 	ldw	r6,16(r19)
   84700:	11000304 	addi	r4,r2,12
   84704:	99400304 	addi	r5,r19,12
   84708:	318d883a 	add	r6,r6,r6
   8470c:	318d883a 	add	r6,r6,r6
   84710:	31800204 	addi	r6,r6,8
   84714:	1023883a 	mov	r17,r2
   84718:	008641c0 	call	8641c <memcpy>
   8471c:	d9001617 	ldw	r4,88(sp)
   84720:	880b883a 	mov	r5,r17
   84724:	01800044 	movi	r6,1
   84728:	0086f780 	call	86f78 <__lshift>
   8472c:	100b883a 	mov	r5,r2
   84730:	003d9c06 	br	83da4 <_dtoa_r+0x938>
   84734:	00800e44 	movi	r2,57
   84738:	b8807026 	beq	r23,r2,848fc <_dtoa_r+0x1490>
   8473c:	b8800044 	addi	r2,r23,1
   84740:	b7000044 	addi	fp,r22,1
   84744:	b0800005 	stb	r2,0(r22)
   84748:	003e4106 	br	84050 <_dtoa_r+0xbe4>
   8474c:	d8800317 	ldw	r2,12(sp)
   84750:	01800274 	movhi	r6,9
   84754:	31b89e04 	addi	r6,r6,-7560
   84758:	b009883a 	mov	r4,r22
   8475c:	100e90fa 	slli	r7,r2,3
   84760:	b80b883a 	mov	r5,r23
   84764:	398f883a 	add	r7,r7,r6
   84768:	38bffe17 	ldw	r2,-8(r7)
   8476c:	d9800517 	ldw	r6,20(sp)
   84770:	38ffff17 	ldw	r3,-4(r7)
   84774:	37000044 	addi	fp,r6,1
   84778:	180f883a 	mov	r7,r3
   8477c:	100d883a 	mov	r6,r2
   84780:	00896880 	call	89688 <__muldf3>
   84784:	a80b883a 	mov	r5,r21
   84788:	a009883a 	mov	r4,r20
   8478c:	182f883a 	mov	r23,r3
   84790:	102d883a 	mov	r22,r2
   84794:	008a0440 	call	8a044 <__fixdfsi>
   84798:	1009883a 	mov	r4,r2
   8479c:	1027883a 	mov	r19,r2
   847a0:	0089f4c0 	call	89f4c <__floatsidf>
   847a4:	a80b883a 	mov	r5,r21
   847a8:	a009883a 	mov	r4,r20
   847ac:	180f883a 	mov	r7,r3
   847b0:	100d883a 	mov	r6,r2
   847b4:	00895940 	call	89594 <__subdf3>
   847b8:	180b883a 	mov	r5,r3
   847bc:	d8c00517 	ldw	r3,20(sp)
   847c0:	9cc00c04 	addi	r19,r19,48
   847c4:	1009883a 	mov	r4,r2
   847c8:	1cc00005 	stb	r19,0(r3)
   847cc:	2021883a 	mov	r16,r4
   847d0:	d9000317 	ldw	r4,12(sp)
   847d4:	00800044 	movi	r2,1
   847d8:	2823883a 	mov	r17,r5
   847dc:	20802226 	beq	r4,r2,84868 <_dtoa_r+0x13fc>
   847e0:	1029883a 	mov	r20,r2
   847e4:	0005883a 	mov	r2,zero
   847e8:	00d00934 	movhi	r3,16420
   847ec:	180f883a 	mov	r7,r3
   847f0:	100d883a 	mov	r6,r2
   847f4:	880b883a 	mov	r5,r17
   847f8:	8009883a 	mov	r4,r16
   847fc:	00896880 	call	89688 <__muldf3>
   84800:	180b883a 	mov	r5,r3
   84804:	1009883a 	mov	r4,r2
   84808:	1823883a 	mov	r17,r3
   8480c:	1021883a 	mov	r16,r2
   84810:	008a0440 	call	8a044 <__fixdfsi>
   84814:	1009883a 	mov	r4,r2
   84818:	102b883a 	mov	r21,r2
   8481c:	0089f4c0 	call	89f4c <__floatsidf>
   84820:	880b883a 	mov	r5,r17
   84824:	8009883a 	mov	r4,r16
   84828:	180f883a 	mov	r7,r3
   8482c:	100d883a 	mov	r6,r2
   84830:	00895940 	call	89594 <__subdf3>
   84834:	180b883a 	mov	r5,r3
   84838:	d8c00517 	ldw	r3,20(sp)
   8483c:	1009883a 	mov	r4,r2
   84840:	ad400c04 	addi	r21,r21,48
   84844:	1d05883a 	add	r2,r3,r20
   84848:	15400005 	stb	r21,0(r2)
   8484c:	2021883a 	mov	r16,r4
   84850:	d9000317 	ldw	r4,12(sp)
   84854:	a5000044 	addi	r20,r20,1
   84858:	2823883a 	mov	r17,r5
   8485c:	a13fe11e 	bne	r20,r4,847e4 <_dtoa_r+0x1378>
   84860:	e505883a 	add	r2,fp,r20
   84864:	173fffc4 	addi	fp,r2,-1
   84868:	0025883a 	mov	r18,zero
   8486c:	04cff834 	movhi	r19,16352
   84870:	b009883a 	mov	r4,r22
   84874:	b80b883a 	mov	r5,r23
   84878:	900d883a 	mov	r6,r18
   8487c:	980f883a 	mov	r7,r19
   84880:	00896140 	call	89614 <__adddf3>
   84884:	180b883a 	mov	r5,r3
   84888:	1009883a 	mov	r4,r2
   8488c:	800d883a 	mov	r6,r16
   84890:	880f883a 	mov	r7,r17
   84894:	0089ec40 	call	89ec4 <__ltdf2>
   84898:	103cab16 	blt	r2,zero,83b48 <_dtoa_r+0x6dc>
   8489c:	0009883a 	mov	r4,zero
   848a0:	980b883a 	mov	r5,r19
   848a4:	b80f883a 	mov	r7,r23
   848a8:	b00d883a 	mov	r6,r22
   848ac:	00895940 	call	89594 <__subdf3>
   848b0:	180b883a 	mov	r5,r3
   848b4:	880f883a 	mov	r7,r17
   848b8:	1009883a 	mov	r4,r2
   848bc:	800d883a 	mov	r6,r16
   848c0:	0089db40 	call	89db4 <__gtdf2>
   848c4:	00bc470e 	bge	zero,r2,839e4 <_dtoa_r+0x578>
   848c8:	00c00c04 	movi	r3,48
   848cc:	e73fffc4 	addi	fp,fp,-1
   848d0:	e0800007 	ldb	r2,0(fp)
   848d4:	10fffd26 	beq	r2,r3,848cc <_dtoa_r+0x1460>
   848d8:	d9800417 	ldw	r6,16(sp)
   848dc:	e7000044 	addi	fp,fp,1
   848e0:	d9800d15 	stw	r6,52(sp)
   848e4:	003cab06 	br	83b94 <_dtoa_r+0x728>
   848e8:	d8c00f17 	ldw	r3,60(sp)
   848ec:	d9001117 	ldw	r4,68(sp)
   848f0:	20e1c83a 	sub	r16,r4,r3
   848f4:	0007883a 	mov	r3,zero
   848f8:	003d9b06 	br	83f68 <_dtoa_r+0xafc>
   848fc:	00800e44 	movi	r2,57
   84900:	b0800005 	stb	r2,0(r22)
   84904:	b5800044 	addi	r22,r22,1
   84908:	003dc106 	br	84010 <_dtoa_r+0xba4>
   8490c:	05800084 	movi	r22,2
   84910:	003bf706 	br	838f0 <_dtoa_r+0x484>
   84914:	d9000f17 	ldw	r4,60(sp)
   84918:	013c000e 	bge	zero,r4,8391c <_dtoa_r+0x4b0>
   8491c:	d9800e17 	ldw	r6,56(sp)
   84920:	01bc300e 	bge	zero,r6,839e4 <_dtoa_r+0x578>
   84924:	0005883a 	mov	r2,zero
   84928:	00d00934 	movhi	r3,16420
   8492c:	a80b883a 	mov	r5,r21
   84930:	180f883a 	mov	r7,r3
   84934:	a009883a 	mov	r4,r20
   84938:	100d883a 	mov	r6,r2
   8493c:	00896880 	call	89688 <__muldf3>
   84940:	b1000044 	addi	r4,r22,1
   84944:	1021883a 	mov	r16,r2
   84948:	1823883a 	mov	r17,r3
   8494c:	0089f4c0 	call	89f4c <__floatsidf>
   84950:	880b883a 	mov	r5,r17
   84954:	8009883a 	mov	r4,r16
   84958:	180f883a 	mov	r7,r3
   8495c:	100d883a 	mov	r6,r2
   84960:	00896880 	call	89688 <__muldf3>
   84964:	0011883a 	mov	r8,zero
   84968:	02500734 	movhi	r9,16412
   8496c:	180b883a 	mov	r5,r3
   84970:	480f883a 	mov	r7,r9
   84974:	1009883a 	mov	r4,r2
   84978:	400d883a 	mov	r6,r8
   8497c:	00896140 	call	89614 <__adddf3>
   84980:	102d883a 	mov	r22,r2
   84984:	00bf3034 	movhi	r2,64704
   84988:	10ef883a 	add	r23,r2,r3
   8498c:	d8800d17 	ldw	r2,52(sp)
   84990:	d8c00e17 	ldw	r3,56(sp)
   84994:	8029883a 	mov	r20,r16
   84998:	10bfffc4 	addi	r2,r2,-1
   8499c:	882b883a 	mov	r21,r17
   849a0:	d8800415 	stw	r2,16(sp)
   849a4:	d8c00315 	stw	r3,12(sp)
   849a8:	003e8306 	br	843b8 <_dtoa_r+0xf4c>
   849ac:	d8800117 	ldw	r2,4(sp)
   849b0:	dc001117 	ldw	r16,68(sp)
   849b4:	dc801017 	ldw	r18,64(sp)
   849b8:	00c00d84 	movi	r3,54
   849bc:	1887c83a 	sub	r3,r3,r2
   849c0:	003d6906 	br	83f68 <_dtoa_r+0xafc>
   849c4:	01800044 	movi	r6,1
   849c8:	3021883a 	mov	r16,r6
   849cc:	d9800f15 	stw	r6,60(sp)
   849d0:	d9802615 	stw	r6,152(sp)
   849d4:	d9800e15 	stw	r6,56(sp)
   849d8:	003b9306 	br	83828 <_dtoa_r+0x3bc>
   849dc:	b021883a 	mov	r16,r22
   849e0:	dd800f15 	stw	r22,60(sp)
   849e4:	003b9006 	br	83828 <_dtoa_r+0x3bc>
   849e8:	103e221e 	bne	r2,zero,84274 <_dtoa_r+0xe08>
   849ec:	b880004c 	andi	r2,r23,1
   849f0:	1005003a 	cmpeq	r2,r2,zero
   849f4:	103e1f1e 	bne	r2,zero,84274 <_dtoa_r+0xe08>
   849f8:	003e1b06 	br	84268 <_dtoa_r+0xdfc>
   849fc:	d9001617 	ldw	r4,88(sp)
   84a00:	980b883a 	mov	r5,r19
   84a04:	01800284 	movi	r6,10
   84a08:	000f883a 	mov	r7,zero
   84a0c:	00873540 	call	87354 <__multadd>
   84a10:	d8c00e17 	ldw	r3,56(sp)
   84a14:	1027883a 	mov	r19,r2
   84a18:	d8c00f15 	stw	r3,60(sp)
   84a1c:	003cd306 	br	83d6c <_dtoa_r+0x900>

00084a20 <_fflush_r>:
   84a20:	defffb04 	addi	sp,sp,-20
   84a24:	dcc00315 	stw	r19,12(sp)
   84a28:	dc800215 	stw	r18,8(sp)
   84a2c:	dfc00415 	stw	ra,16(sp)
   84a30:	dc400115 	stw	r17,4(sp)
   84a34:	dc000015 	stw	r16,0(sp)
   84a38:	2027883a 	mov	r19,r4
   84a3c:	2825883a 	mov	r18,r5
   84a40:	20000226 	beq	r4,zero,84a4c <_fflush_r+0x2c>
   84a44:	20800e17 	ldw	r2,56(r4)
   84a48:	10005626 	beq	r2,zero,84ba4 <_fflush_r+0x184>
   84a4c:	9100030b 	ldhu	r4,12(r18)
   84a50:	20ffffcc 	andi	r3,r4,65535
   84a54:	18e0001c 	xori	r3,r3,32768
   84a58:	18e00004 	addi	r3,r3,-32768
   84a5c:	1880020c 	andi	r2,r3,8
   84a60:	1000261e 	bne	r2,zero,84afc <_fflush_r+0xdc>
   84a64:	90c00117 	ldw	r3,4(r18)
   84a68:	20820014 	ori	r2,r4,2048
   84a6c:	9080030d 	sth	r2,12(r18)
   84a70:	1009883a 	mov	r4,r2
   84a74:	00c0400e 	bge	zero,r3,84b78 <_fflush_r+0x158>
   84a78:	92000a17 	ldw	r8,40(r18)
   84a7c:	40004026 	beq	r8,zero,84b80 <_fflush_r+0x160>
   84a80:	2084000c 	andi	r2,r4,4096
   84a84:	10005326 	beq	r2,zero,84bd4 <_fflush_r+0x1b4>
   84a88:	94001417 	ldw	r16,80(r18)
   84a8c:	9080030b 	ldhu	r2,12(r18)
   84a90:	1080010c 	andi	r2,r2,4
   84a94:	1000481e 	bne	r2,zero,84bb8 <_fflush_r+0x198>
   84a98:	91400717 	ldw	r5,28(r18)
   84a9c:	9809883a 	mov	r4,r19
   84aa0:	800d883a 	mov	r6,r16
   84aa4:	000f883a 	mov	r7,zero
   84aa8:	403ee83a 	callr	r8
   84aac:	8080261e 	bne	r16,r2,84b48 <_fflush_r+0x128>
   84ab0:	9080030b 	ldhu	r2,12(r18)
   84ab4:	91000417 	ldw	r4,16(r18)
   84ab8:	90000115 	stw	zero,4(r18)
   84abc:	10bdffcc 	andi	r2,r2,63487
   84ac0:	10ffffcc 	andi	r3,r2,65535
   84ac4:	18c4000c 	andi	r3,r3,4096
   84ac8:	9080030d 	sth	r2,12(r18)
   84acc:	91000015 	stw	r4,0(r18)
   84ad0:	18002b26 	beq	r3,zero,84b80 <_fflush_r+0x160>
   84ad4:	0007883a 	mov	r3,zero
   84ad8:	1805883a 	mov	r2,r3
   84adc:	94001415 	stw	r16,80(r18)
   84ae0:	dfc00417 	ldw	ra,16(sp)
   84ae4:	dcc00317 	ldw	r19,12(sp)
   84ae8:	dc800217 	ldw	r18,8(sp)
   84aec:	dc400117 	ldw	r17,4(sp)
   84af0:	dc000017 	ldw	r16,0(sp)
   84af4:	dec00504 	addi	sp,sp,20
   84af8:	f800283a 	ret
   84afc:	94400417 	ldw	r17,16(r18)
   84b00:	88001f26 	beq	r17,zero,84b80 <_fflush_r+0x160>
   84b04:	90800017 	ldw	r2,0(r18)
   84b08:	18c000cc 	andi	r3,r3,3
   84b0c:	94400015 	stw	r17,0(r18)
   84b10:	1461c83a 	sub	r16,r2,r17
   84b14:	18002526 	beq	r3,zero,84bac <_fflush_r+0x18c>
   84b18:	0005883a 	mov	r2,zero
   84b1c:	90800215 	stw	r2,8(r18)
   84b20:	0400170e 	bge	zero,r16,84b80 <_fflush_r+0x160>
   84b24:	90c00917 	ldw	r3,36(r18)
   84b28:	91400717 	ldw	r5,28(r18)
   84b2c:	880d883a 	mov	r6,r17
   84b30:	800f883a 	mov	r7,r16
   84b34:	9809883a 	mov	r4,r19
   84b38:	183ee83a 	callr	r3
   84b3c:	88a3883a 	add	r17,r17,r2
   84b40:	80a1c83a 	sub	r16,r16,r2
   84b44:	00bff616 	blt	zero,r2,84b20 <_fflush_r+0x100>
   84b48:	9080030b 	ldhu	r2,12(r18)
   84b4c:	00ffffc4 	movi	r3,-1
   84b50:	10801014 	ori	r2,r2,64
   84b54:	9080030d 	sth	r2,12(r18)
   84b58:	1805883a 	mov	r2,r3
   84b5c:	dfc00417 	ldw	ra,16(sp)
   84b60:	dcc00317 	ldw	r19,12(sp)
   84b64:	dc800217 	ldw	r18,8(sp)
   84b68:	dc400117 	ldw	r17,4(sp)
   84b6c:	dc000017 	ldw	r16,0(sp)
   84b70:	dec00504 	addi	sp,sp,20
   84b74:	f800283a 	ret
   84b78:	90800f17 	ldw	r2,60(r18)
   84b7c:	00bfbe16 	blt	zero,r2,84a78 <_fflush_r+0x58>
   84b80:	0007883a 	mov	r3,zero
   84b84:	1805883a 	mov	r2,r3
   84b88:	dfc00417 	ldw	ra,16(sp)
   84b8c:	dcc00317 	ldw	r19,12(sp)
   84b90:	dc800217 	ldw	r18,8(sp)
   84b94:	dc400117 	ldw	r17,4(sp)
   84b98:	dc000017 	ldw	r16,0(sp)
   84b9c:	dec00504 	addi	sp,sp,20
   84ba0:	f800283a 	ret
   84ba4:	0084cb80 	call	84cb8 <__sinit>
   84ba8:	003fa806 	br	84a4c <_fflush_r+0x2c>
   84bac:	90800517 	ldw	r2,20(r18)
   84bb0:	90800215 	stw	r2,8(r18)
   84bb4:	003fda06 	br	84b20 <_fflush_r+0x100>
   84bb8:	90800117 	ldw	r2,4(r18)
   84bbc:	90c00c17 	ldw	r3,48(r18)
   84bc0:	80a1c83a 	sub	r16,r16,r2
   84bc4:	183fb426 	beq	r3,zero,84a98 <_fflush_r+0x78>
   84bc8:	90800f17 	ldw	r2,60(r18)
   84bcc:	80a1c83a 	sub	r16,r16,r2
   84bd0:	003fb106 	br	84a98 <_fflush_r+0x78>
   84bd4:	91400717 	ldw	r5,28(r18)
   84bd8:	9809883a 	mov	r4,r19
   84bdc:	000d883a 	mov	r6,zero
   84be0:	01c00044 	movi	r7,1
   84be4:	403ee83a 	callr	r8
   84be8:	1021883a 	mov	r16,r2
   84bec:	00bfffc4 	movi	r2,-1
   84bf0:	80800226 	beq	r16,r2,84bfc <_fflush_r+0x1dc>
   84bf4:	92000a17 	ldw	r8,40(r18)
   84bf8:	003fa406 	br	84a8c <_fflush_r+0x6c>
   84bfc:	98c00017 	ldw	r3,0(r19)
   84c00:	00800744 	movi	r2,29
   84c04:	18bfde26 	beq	r3,r2,84b80 <_fflush_r+0x160>
   84c08:	9080030b 	ldhu	r2,12(r18)
   84c0c:	8007883a 	mov	r3,r16
   84c10:	10801014 	ori	r2,r2,64
   84c14:	9080030d 	sth	r2,12(r18)
   84c18:	003fcf06 	br	84b58 <_fflush_r+0x138>

00084c1c <fflush>:
   84c1c:	01400234 	movhi	r5,8
   84c20:	29528804 	addi	r5,r5,18976
   84c24:	2007883a 	mov	r3,r4
   84c28:	20000526 	beq	r4,zero,84c40 <fflush+0x24>
   84c2c:	00800274 	movhi	r2,9
   84c30:	10bff504 	addi	r2,r2,-44
   84c34:	11000017 	ldw	r4,0(r2)
   84c38:	180b883a 	mov	r5,r3
   84c3c:	0084a201 	jmpi	84a20 <_fflush_r>
   84c40:	00800274 	movhi	r2,9
   84c44:	10bff604 	addi	r2,r2,-40
   84c48:	11000017 	ldw	r4,0(r2)
   84c4c:	00858201 	jmpi	85820 <_fwalk_reent>

00084c50 <std>:
   84c50:	00800234 	movhi	r2,8
   84c54:	109f6504 	addi	r2,r2,32148
   84c58:	20800b15 	stw	r2,44(r4)
   84c5c:	00800234 	movhi	r2,8
   84c60:	109fa004 	addi	r2,r2,32384
   84c64:	20800815 	stw	r2,32(r4)
   84c68:	00c00234 	movhi	r3,8
   84c6c:	18df8104 	addi	r3,r3,32260
   84c70:	00800234 	movhi	r2,8
   84c74:	109f6704 	addi	r2,r2,32156
   84c78:	2140030d 	sth	r5,12(r4)
   84c7c:	2180038d 	sth	r6,14(r4)
   84c80:	20c00915 	stw	r3,36(r4)
   84c84:	20800a15 	stw	r2,40(r4)
   84c88:	20000015 	stw	zero,0(r4)
   84c8c:	20000115 	stw	zero,4(r4)
   84c90:	20000215 	stw	zero,8(r4)
   84c94:	20000415 	stw	zero,16(r4)
   84c98:	20000515 	stw	zero,20(r4)
   84c9c:	20000615 	stw	zero,24(r4)
   84ca0:	21000715 	stw	r4,28(r4)
   84ca4:	f800283a 	ret

00084ca8 <__sfp_lock_acquire>:
   84ca8:	f800283a 	ret

00084cac <__sfp_lock_release>:
   84cac:	f800283a 	ret

00084cb0 <__sinit_lock_acquire>:
   84cb0:	f800283a 	ret

00084cb4 <__sinit_lock_release>:
   84cb4:	f800283a 	ret

00084cb8 <__sinit>:
   84cb8:	20800e17 	ldw	r2,56(r4)
   84cbc:	defffd04 	addi	sp,sp,-12
   84cc0:	dc400115 	stw	r17,4(sp)
   84cc4:	dc000015 	stw	r16,0(sp)
   84cc8:	dfc00215 	stw	ra,8(sp)
   84ccc:	04400044 	movi	r17,1
   84cd0:	01400104 	movi	r5,4
   84cd4:	000d883a 	mov	r6,zero
   84cd8:	2021883a 	mov	r16,r4
   84cdc:	2200bb04 	addi	r8,r4,748
   84ce0:	200f883a 	mov	r7,r4
   84ce4:	10000526 	beq	r2,zero,84cfc <__sinit+0x44>
   84ce8:	dfc00217 	ldw	ra,8(sp)
   84cec:	dc400117 	ldw	r17,4(sp)
   84cf0:	dc000017 	ldw	r16,0(sp)
   84cf4:	dec00304 	addi	sp,sp,12
   84cf8:	f800283a 	ret
   84cfc:	21000117 	ldw	r4,4(r4)
   84d00:	00800234 	movhi	r2,8
   84d04:	10936704 	addi	r2,r2,19868
   84d08:	00c000c4 	movi	r3,3
   84d0c:	80800f15 	stw	r2,60(r16)
   84d10:	80c0b915 	stw	r3,740(r16)
   84d14:	8200ba15 	stw	r8,744(r16)
   84d18:	84400e15 	stw	r17,56(r16)
   84d1c:	8000b815 	stw	zero,736(r16)
   84d20:	0084c500 	call	84c50 <std>
   84d24:	81000217 	ldw	r4,8(r16)
   84d28:	880d883a 	mov	r6,r17
   84d2c:	800f883a 	mov	r7,r16
   84d30:	01400284 	movi	r5,10
   84d34:	0084c500 	call	84c50 <std>
   84d38:	81000317 	ldw	r4,12(r16)
   84d3c:	800f883a 	mov	r7,r16
   84d40:	01400484 	movi	r5,18
   84d44:	01800084 	movi	r6,2
   84d48:	dfc00217 	ldw	ra,8(sp)
   84d4c:	dc400117 	ldw	r17,4(sp)
   84d50:	dc000017 	ldw	r16,0(sp)
   84d54:	dec00304 	addi	sp,sp,12
   84d58:	0084c501 	jmpi	84c50 <std>

00084d5c <__fp_lock>:
   84d5c:	0005883a 	mov	r2,zero
   84d60:	f800283a 	ret

00084d64 <__fp_unlock>:
   84d64:	0005883a 	mov	r2,zero
   84d68:	f800283a 	ret

00084d6c <__fp_unlock_all>:
   84d6c:	00800274 	movhi	r2,9
   84d70:	10bff504 	addi	r2,r2,-44
   84d74:	11000017 	ldw	r4,0(r2)
   84d78:	01400234 	movhi	r5,8
   84d7c:	29535904 	addi	r5,r5,19812
   84d80:	00858e81 	jmpi	858e8 <_fwalk>

00084d84 <__fp_lock_all>:
   84d84:	00800274 	movhi	r2,9
   84d88:	10bff504 	addi	r2,r2,-44
   84d8c:	11000017 	ldw	r4,0(r2)
   84d90:	01400234 	movhi	r5,8
   84d94:	29535704 	addi	r5,r5,19804
   84d98:	00858e81 	jmpi	858e8 <_fwalk>

00084d9c <_cleanup_r>:
   84d9c:	01400274 	movhi	r5,9
   84da0:	2960b404 	addi	r5,r5,-32048
   84da4:	00858e81 	jmpi	858e8 <_fwalk>

00084da8 <_cleanup>:
   84da8:	00800274 	movhi	r2,9
   84dac:	10bff604 	addi	r2,r2,-40
   84db0:	11000017 	ldw	r4,0(r2)
   84db4:	0084d9c1 	jmpi	84d9c <_cleanup_r>

00084db8 <__sfmoreglue>:
   84db8:	defffc04 	addi	sp,sp,-16
   84dbc:	dc000015 	stw	r16,0(sp)
   84dc0:	2821883a 	mov	r16,r5
   84dc4:	dc400115 	stw	r17,4(sp)
   84dc8:	01401704 	movi	r5,92
   84dcc:	2023883a 	mov	r17,r4
   84dd0:	8009883a 	mov	r4,r16
   84dd4:	dfc00315 	stw	ra,12(sp)
   84dd8:	dcc00215 	stw	r19,8(sp)
   84ddc:	0080e140 	call	80e14 <__mulsi3>
   84de0:	11400304 	addi	r5,r2,12
   84de4:	8809883a 	mov	r4,r17
   84de8:	1027883a 	mov	r19,r2
   84dec:	0085bf80 	call	85bf8 <_malloc_r>
   84df0:	10c00304 	addi	r3,r2,12
   84df4:	1023883a 	mov	r17,r2
   84df8:	1809883a 	mov	r4,r3
   84dfc:	980d883a 	mov	r6,r19
   84e00:	000b883a 	mov	r5,zero
   84e04:	10000b26 	beq	r2,zero,84e34 <__sfmoreglue+0x7c>
   84e08:	14000115 	stw	r16,4(r2)
   84e0c:	10c00215 	stw	r3,8(r2)
   84e10:	10000015 	stw	zero,0(r2)
   84e14:	008659c0 	call	8659c <memset>
   84e18:	8805883a 	mov	r2,r17
   84e1c:	dfc00317 	ldw	ra,12(sp)
   84e20:	dcc00217 	ldw	r19,8(sp)
   84e24:	dc400117 	ldw	r17,4(sp)
   84e28:	dc000017 	ldw	r16,0(sp)
   84e2c:	dec00404 	addi	sp,sp,16
   84e30:	f800283a 	ret
   84e34:	0023883a 	mov	r17,zero
   84e38:	8805883a 	mov	r2,r17
   84e3c:	dfc00317 	ldw	ra,12(sp)
   84e40:	dcc00217 	ldw	r19,8(sp)
   84e44:	dc400117 	ldw	r17,4(sp)
   84e48:	dc000017 	ldw	r16,0(sp)
   84e4c:	dec00404 	addi	sp,sp,16
   84e50:	f800283a 	ret

00084e54 <__sfp>:
   84e54:	defffd04 	addi	sp,sp,-12
   84e58:	00800274 	movhi	r2,9
   84e5c:	10bff604 	addi	r2,r2,-40
   84e60:	dc000015 	stw	r16,0(sp)
   84e64:	14000017 	ldw	r16,0(r2)
   84e68:	dc400115 	stw	r17,4(sp)
   84e6c:	dfc00215 	stw	ra,8(sp)
   84e70:	80800e17 	ldw	r2,56(r16)
   84e74:	2023883a 	mov	r17,r4
   84e78:	10002626 	beq	r2,zero,84f14 <__sfp+0xc0>
   84e7c:	8400b804 	addi	r16,r16,736
   84e80:	80800117 	ldw	r2,4(r16)
   84e84:	81000217 	ldw	r4,8(r16)
   84e88:	10ffffc4 	addi	r3,r2,-1
   84e8c:	18000916 	blt	r3,zero,84eb4 <__sfp+0x60>
   84e90:	2080030f 	ldh	r2,12(r4)
   84e94:	10000b26 	beq	r2,zero,84ec4 <__sfp+0x70>
   84e98:	017fffc4 	movi	r5,-1
   84e9c:	00000206 	br	84ea8 <__sfp+0x54>
   84ea0:	2080030f 	ldh	r2,12(r4)
   84ea4:	10000726 	beq	r2,zero,84ec4 <__sfp+0x70>
   84ea8:	18ffffc4 	addi	r3,r3,-1
   84eac:	21001704 	addi	r4,r4,92
   84eb0:	197ffb1e 	bne	r3,r5,84ea0 <__sfp+0x4c>
   84eb4:	80800017 	ldw	r2,0(r16)
   84eb8:	10001926 	beq	r2,zero,84f20 <__sfp+0xcc>
   84ebc:	1021883a 	mov	r16,r2
   84ec0:	003fef06 	br	84e80 <__sfp+0x2c>
   84ec4:	00bfffc4 	movi	r2,-1
   84ec8:	00c00044 	movi	r3,1
   84ecc:	2080038d 	sth	r2,14(r4)
   84ed0:	20c0030d 	sth	r3,12(r4)
   84ed4:	20000015 	stw	zero,0(r4)
   84ed8:	20000215 	stw	zero,8(r4)
   84edc:	20000115 	stw	zero,4(r4)
   84ee0:	20000415 	stw	zero,16(r4)
   84ee4:	20000515 	stw	zero,20(r4)
   84ee8:	20000615 	stw	zero,24(r4)
   84eec:	20000c15 	stw	zero,48(r4)
   84ef0:	20000d15 	stw	zero,52(r4)
   84ef4:	20001115 	stw	zero,68(r4)
   84ef8:	20001215 	stw	zero,72(r4)
   84efc:	2005883a 	mov	r2,r4
   84f00:	dfc00217 	ldw	ra,8(sp)
   84f04:	dc400117 	ldw	r17,4(sp)
   84f08:	dc000017 	ldw	r16,0(sp)
   84f0c:	dec00304 	addi	sp,sp,12
   84f10:	f800283a 	ret
   84f14:	8009883a 	mov	r4,r16
   84f18:	0084cb80 	call	84cb8 <__sinit>
   84f1c:	003fd706 	br	84e7c <__sfp+0x28>
   84f20:	8809883a 	mov	r4,r17
   84f24:	01400104 	movi	r5,4
   84f28:	0084db80 	call	84db8 <__sfmoreglue>
   84f2c:	80800015 	stw	r2,0(r16)
   84f30:	103fe21e 	bne	r2,zero,84ebc <__sfp+0x68>
   84f34:	00800304 	movi	r2,12
   84f38:	0009883a 	mov	r4,zero
   84f3c:	88800015 	stw	r2,0(r17)
   84f40:	003fee06 	br	84efc <__sfp+0xa8>

00084f44 <_malloc_trim_r>:
   84f44:	defffb04 	addi	sp,sp,-20
   84f48:	dcc00315 	stw	r19,12(sp)
   84f4c:	04c00274 	movhi	r19,9
   84f50:	9cfa3f04 	addi	r19,r19,-5892
   84f54:	dc800215 	stw	r18,8(sp)
   84f58:	dc400115 	stw	r17,4(sp)
   84f5c:	dc000015 	stw	r16,0(sp)
   84f60:	2823883a 	mov	r17,r5
   84f64:	2025883a 	mov	r18,r4
   84f68:	dfc00415 	stw	ra,16(sp)
   84f6c:	008affc0 	call	8affc <__malloc_lock>
   84f70:	98800217 	ldw	r2,8(r19)
   84f74:	9009883a 	mov	r4,r18
   84f78:	000b883a 	mov	r5,zero
   84f7c:	10c00117 	ldw	r3,4(r2)
   84f80:	00bfff04 	movi	r2,-4
   84f84:	18a0703a 	and	r16,r3,r2
   84f88:	8463c83a 	sub	r17,r16,r17
   84f8c:	8c43fbc4 	addi	r17,r17,4079
   84f90:	8822d33a 	srli	r17,r17,12
   84f94:	0083ffc4 	movi	r2,4095
   84f98:	8c7fffc4 	addi	r17,r17,-1
   84f9c:	8822933a 	slli	r17,r17,12
   84fa0:	1440060e 	bge	r2,r17,84fbc <_malloc_trim_r+0x78>
   84fa4:	0087d240 	call	87d24 <_sbrk_r>
   84fa8:	98c00217 	ldw	r3,8(r19)
   84fac:	9009883a 	mov	r4,r18
   84fb0:	044bc83a 	sub	r5,zero,r17
   84fb4:	80c7883a 	add	r3,r16,r3
   84fb8:	10c00926 	beq	r2,r3,84fe0 <_malloc_trim_r+0x9c>
   84fbc:	008b01c0 	call	8b01c <__malloc_unlock>
   84fc0:	0005883a 	mov	r2,zero
   84fc4:	dfc00417 	ldw	ra,16(sp)
   84fc8:	dcc00317 	ldw	r19,12(sp)
   84fcc:	dc800217 	ldw	r18,8(sp)
   84fd0:	dc400117 	ldw	r17,4(sp)
   84fd4:	dc000017 	ldw	r16,0(sp)
   84fd8:	dec00504 	addi	sp,sp,20
   84fdc:	f800283a 	ret
   84fe0:	9009883a 	mov	r4,r18
   84fe4:	0087d240 	call	87d24 <_sbrk_r>
   84fe8:	844dc83a 	sub	r6,r16,r17
   84fec:	00ffffc4 	movi	r3,-1
   84ff0:	9009883a 	mov	r4,r18
   84ff4:	000b883a 	mov	r5,zero
   84ff8:	01c00274 	movhi	r7,9
   84ffc:	39c6dd04 	addi	r7,r7,7028
   85000:	31800054 	ori	r6,r6,1
   85004:	10c00926 	beq	r2,r3,8502c <_malloc_trim_r+0xe8>
   85008:	38800017 	ldw	r2,0(r7)
   8500c:	98c00217 	ldw	r3,8(r19)
   85010:	9009883a 	mov	r4,r18
   85014:	1445c83a 	sub	r2,r2,r17
   85018:	38800015 	stw	r2,0(r7)
   8501c:	19800115 	stw	r6,4(r3)
   85020:	008b01c0 	call	8b01c <__malloc_unlock>
   85024:	00800044 	movi	r2,1
   85028:	003fe606 	br	84fc4 <_malloc_trim_r+0x80>
   8502c:	0087d240 	call	87d24 <_sbrk_r>
   85030:	99800217 	ldw	r6,8(r19)
   85034:	100f883a 	mov	r7,r2
   85038:	9009883a 	mov	r4,r18
   8503c:	1187c83a 	sub	r3,r2,r6
   85040:	008003c4 	movi	r2,15
   85044:	19400054 	ori	r5,r3,1
   85048:	10ffdc0e 	bge	r2,r3,84fbc <_malloc_trim_r+0x78>
   8504c:	00800274 	movhi	r2,9
   85050:	10bffa04 	addi	r2,r2,-24
   85054:	10c00017 	ldw	r3,0(r2)
   85058:	00800274 	movhi	r2,9
   8505c:	1086dd04 	addi	r2,r2,7028
   85060:	31400115 	stw	r5,4(r6)
   85064:	38c7c83a 	sub	r3,r7,r3
   85068:	10c00015 	stw	r3,0(r2)
   8506c:	003fd306 	br	84fbc <_malloc_trim_r+0x78>

00085070 <_free_r>:
   85070:	defffd04 	addi	sp,sp,-12
   85074:	dc400115 	stw	r17,4(sp)
   85078:	dc000015 	stw	r16,0(sp)
   8507c:	dfc00215 	stw	ra,8(sp)
   85080:	2821883a 	mov	r16,r5
   85084:	2023883a 	mov	r17,r4
   85088:	28005a26 	beq	r5,zero,851f4 <_free_r+0x184>
   8508c:	008affc0 	call	8affc <__malloc_lock>
   85090:	823ffe04 	addi	r8,r16,-8
   85094:	41400117 	ldw	r5,4(r8)
   85098:	00bfff84 	movi	r2,-2
   8509c:	02800274 	movhi	r10,9
   850a0:	52ba3f04 	addi	r10,r10,-5892
   850a4:	288e703a 	and	r7,r5,r2
   850a8:	41cd883a 	add	r6,r8,r7
   850ac:	30c00117 	ldw	r3,4(r6)
   850b0:	51000217 	ldw	r4,8(r10)
   850b4:	00bfff04 	movi	r2,-4
   850b8:	1892703a 	and	r9,r3,r2
   850bc:	5017883a 	mov	r11,r10
   850c0:	31006726 	beq	r6,r4,85260 <_free_r+0x1f0>
   850c4:	2880004c 	andi	r2,r5,1
   850c8:	1005003a 	cmpeq	r2,r2,zero
   850cc:	32400115 	stw	r9,4(r6)
   850d0:	10001a1e 	bne	r2,zero,8513c <_free_r+0xcc>
   850d4:	000b883a 	mov	r5,zero
   850d8:	3247883a 	add	r3,r6,r9
   850dc:	18800117 	ldw	r2,4(r3)
   850e0:	1080004c 	andi	r2,r2,1
   850e4:	1000231e 	bne	r2,zero,85174 <_free_r+0x104>
   850e8:	280ac03a 	cmpne	r5,r5,zero
   850ec:	3a4f883a 	add	r7,r7,r9
   850f0:	2800451e 	bne	r5,zero,85208 <_free_r+0x198>
   850f4:	31000217 	ldw	r4,8(r6)
   850f8:	00800274 	movhi	r2,9
   850fc:	10ba4104 	addi	r2,r2,-5884
   85100:	20807b26 	beq	r4,r2,852f0 <_free_r+0x280>
   85104:	30800317 	ldw	r2,12(r6)
   85108:	3a07883a 	add	r3,r7,r8
   8510c:	19c00015 	stw	r7,0(r3)
   85110:	11000215 	stw	r4,8(r2)
   85114:	20800315 	stw	r2,12(r4)
   85118:	38800054 	ori	r2,r7,1
   8511c:	40800115 	stw	r2,4(r8)
   85120:	28001a26 	beq	r5,zero,8518c <_free_r+0x11c>
   85124:	8809883a 	mov	r4,r17
   85128:	dfc00217 	ldw	ra,8(sp)
   8512c:	dc400117 	ldw	r17,4(sp)
   85130:	dc000017 	ldw	r16,0(sp)
   85134:	dec00304 	addi	sp,sp,12
   85138:	008b01c1 	jmpi	8b01c <__malloc_unlock>
   8513c:	80bffe17 	ldw	r2,-8(r16)
   85140:	50c00204 	addi	r3,r10,8
   85144:	4091c83a 	sub	r8,r8,r2
   85148:	41000217 	ldw	r4,8(r8)
   8514c:	388f883a 	add	r7,r7,r2
   85150:	20c06126 	beq	r4,r3,852d8 <_free_r+0x268>
   85154:	40800317 	ldw	r2,12(r8)
   85158:	3247883a 	add	r3,r6,r9
   8515c:	000b883a 	mov	r5,zero
   85160:	11000215 	stw	r4,8(r2)
   85164:	20800315 	stw	r2,12(r4)
   85168:	18800117 	ldw	r2,4(r3)
   8516c:	1080004c 	andi	r2,r2,1
   85170:	103fdd26 	beq	r2,zero,850e8 <_free_r+0x78>
   85174:	38800054 	ori	r2,r7,1
   85178:	3a07883a 	add	r3,r7,r8
   8517c:	280ac03a 	cmpne	r5,r5,zero
   85180:	40800115 	stw	r2,4(r8)
   85184:	19c00015 	stw	r7,0(r3)
   85188:	283fe61e 	bne	r5,zero,85124 <_free_r+0xb4>
   8518c:	00807fc4 	movi	r2,511
   85190:	11c01f2e 	bgeu	r2,r7,85210 <_free_r+0x1a0>
   85194:	3806d27a 	srli	r3,r7,9
   85198:	1800481e 	bne	r3,zero,852bc <_free_r+0x24c>
   8519c:	3804d0fa 	srli	r2,r7,3
   851a0:	100690fa 	slli	r3,r2,3
   851a4:	1acd883a 	add	r6,r3,r11
   851a8:	31400217 	ldw	r5,8(r6)
   851ac:	31405926 	beq	r6,r5,85314 <_free_r+0x2a4>
   851b0:	28800117 	ldw	r2,4(r5)
   851b4:	00ffff04 	movi	r3,-4
   851b8:	10c4703a 	and	r2,r2,r3
   851bc:	3880022e 	bgeu	r7,r2,851c8 <_free_r+0x158>
   851c0:	29400217 	ldw	r5,8(r5)
   851c4:	317ffa1e 	bne	r6,r5,851b0 <_free_r+0x140>
   851c8:	29800317 	ldw	r6,12(r5)
   851cc:	41800315 	stw	r6,12(r8)
   851d0:	41400215 	stw	r5,8(r8)
   851d4:	8809883a 	mov	r4,r17
   851d8:	2a000315 	stw	r8,12(r5)
   851dc:	32000215 	stw	r8,8(r6)
   851e0:	dfc00217 	ldw	ra,8(sp)
   851e4:	dc400117 	ldw	r17,4(sp)
   851e8:	dc000017 	ldw	r16,0(sp)
   851ec:	dec00304 	addi	sp,sp,12
   851f0:	008b01c1 	jmpi	8b01c <__malloc_unlock>
   851f4:	dfc00217 	ldw	ra,8(sp)
   851f8:	dc400117 	ldw	r17,4(sp)
   851fc:	dc000017 	ldw	r16,0(sp)
   85200:	dec00304 	addi	sp,sp,12
   85204:	f800283a 	ret
   85208:	31000217 	ldw	r4,8(r6)
   8520c:	003fbd06 	br	85104 <_free_r+0x94>
   85210:	3806d0fa 	srli	r3,r7,3
   85214:	00800044 	movi	r2,1
   85218:	51400117 	ldw	r5,4(r10)
   8521c:	180890fa 	slli	r4,r3,3
   85220:	1807d0ba 	srai	r3,r3,2
   85224:	22c9883a 	add	r4,r4,r11
   85228:	21800217 	ldw	r6,8(r4)
   8522c:	10c4983a 	sll	r2,r2,r3
   85230:	41000315 	stw	r4,12(r8)
   85234:	41800215 	stw	r6,8(r8)
   85238:	288ab03a 	or	r5,r5,r2
   8523c:	22000215 	stw	r8,8(r4)
   85240:	8809883a 	mov	r4,r17
   85244:	51400115 	stw	r5,4(r10)
   85248:	32000315 	stw	r8,12(r6)
   8524c:	dfc00217 	ldw	ra,8(sp)
   85250:	dc400117 	ldw	r17,4(sp)
   85254:	dc000017 	ldw	r16,0(sp)
   85258:	dec00304 	addi	sp,sp,12
   8525c:	008b01c1 	jmpi	8b01c <__malloc_unlock>
   85260:	2880004c 	andi	r2,r5,1
   85264:	3a4d883a 	add	r6,r7,r9
   85268:	1000071e 	bne	r2,zero,85288 <_free_r+0x218>
   8526c:	80bffe17 	ldw	r2,-8(r16)
   85270:	4091c83a 	sub	r8,r8,r2
   85274:	41000317 	ldw	r4,12(r8)
   85278:	40c00217 	ldw	r3,8(r8)
   8527c:	308d883a 	add	r6,r6,r2
   85280:	20c00215 	stw	r3,8(r4)
   85284:	19000315 	stw	r4,12(r3)
   85288:	00800274 	movhi	r2,9
   8528c:	10bff904 	addi	r2,r2,-28
   85290:	11000017 	ldw	r4,0(r2)
   85294:	30c00054 	ori	r3,r6,1
   85298:	52000215 	stw	r8,8(r10)
   8529c:	40c00115 	stw	r3,4(r8)
   852a0:	313fa036 	bltu	r6,r4,85124 <_free_r+0xb4>
   852a4:	00800274 	movhi	r2,9
   852a8:	1086d304 	addi	r2,r2,6988
   852ac:	11400017 	ldw	r5,0(r2)
   852b0:	8809883a 	mov	r4,r17
   852b4:	0084f440 	call	84f44 <_malloc_trim_r>
   852b8:	003f9a06 	br	85124 <_free_r+0xb4>
   852bc:	00800104 	movi	r2,4
   852c0:	10c0072e 	bgeu	r2,r3,852e0 <_free_r+0x270>
   852c4:	00800504 	movi	r2,20
   852c8:	10c01936 	bltu	r2,r3,85330 <_free_r+0x2c0>
   852cc:	188016c4 	addi	r2,r3,91
   852d0:	100690fa 	slli	r3,r2,3
   852d4:	003fb306 	br	851a4 <_free_r+0x134>
   852d8:	01400044 	movi	r5,1
   852dc:	003f7e06 	br	850d8 <_free_r+0x68>
   852e0:	3804d1ba 	srli	r2,r7,6
   852e4:	10800e04 	addi	r2,r2,56
   852e8:	100690fa 	slli	r3,r2,3
   852ec:	003fad06 	br	851a4 <_free_r+0x134>
   852f0:	22000315 	stw	r8,12(r4)
   852f4:	22000215 	stw	r8,8(r4)
   852f8:	3a05883a 	add	r2,r7,r8
   852fc:	38c00054 	ori	r3,r7,1
   85300:	11c00015 	stw	r7,0(r2)
   85304:	41000215 	stw	r4,8(r8)
   85308:	40c00115 	stw	r3,4(r8)
   8530c:	41000315 	stw	r4,12(r8)
   85310:	003f8406 	br	85124 <_free_r+0xb4>
   85314:	1005d0ba 	srai	r2,r2,2
   85318:	00c00044 	movi	r3,1
   8531c:	51000117 	ldw	r4,4(r10)
   85320:	1886983a 	sll	r3,r3,r2
   85324:	20c8b03a 	or	r4,r4,r3
   85328:	51000115 	stw	r4,4(r10)
   8532c:	003fa706 	br	851cc <_free_r+0x15c>
   85330:	00801504 	movi	r2,84
   85334:	10c00436 	bltu	r2,r3,85348 <_free_r+0x2d8>
   85338:	3804d33a 	srli	r2,r7,12
   8533c:	10801b84 	addi	r2,r2,110
   85340:	100690fa 	slli	r3,r2,3
   85344:	003f9706 	br	851a4 <_free_r+0x134>
   85348:	00805504 	movi	r2,340
   8534c:	10c00436 	bltu	r2,r3,85360 <_free_r+0x2f0>
   85350:	3804d3fa 	srli	r2,r7,15
   85354:	10801dc4 	addi	r2,r2,119
   85358:	100690fa 	slli	r3,r2,3
   8535c:	003f9106 	br	851a4 <_free_r+0x134>
   85360:	00815504 	movi	r2,1364
   85364:	10c0032e 	bgeu	r2,r3,85374 <_free_r+0x304>
   85368:	00801f84 	movi	r2,126
   8536c:	00c0fc04 	movi	r3,1008
   85370:	003f8c06 	br	851a4 <_free_r+0x134>
   85374:	3804d4ba 	srli	r2,r7,18
   85378:	10801f04 	addi	r2,r2,124
   8537c:	100690fa 	slli	r3,r2,3
   85380:	003f8806 	br	851a4 <_free_r+0x134>

00085384 <__sfvwrite_r>:
   85384:	30800217 	ldw	r2,8(r6)
   85388:	defff504 	addi	sp,sp,-44
   8538c:	df000915 	stw	fp,36(sp)
   85390:	dd800715 	stw	r22,28(sp)
   85394:	dc800315 	stw	r18,12(sp)
   85398:	dfc00a15 	stw	ra,40(sp)
   8539c:	ddc00815 	stw	r23,32(sp)
   853a0:	dd400615 	stw	r21,24(sp)
   853a4:	dd000515 	stw	r20,20(sp)
   853a8:	dcc00415 	stw	r19,16(sp)
   853ac:	dc400215 	stw	r17,8(sp)
   853b0:	dc000115 	stw	r16,4(sp)
   853b4:	302d883a 	mov	r22,r6
   853b8:	2039883a 	mov	fp,r4
   853bc:	2825883a 	mov	r18,r5
   853c0:	10001c26 	beq	r2,zero,85434 <__sfvwrite_r+0xb0>
   853c4:	29c0030b 	ldhu	r7,12(r5)
   853c8:	3880020c 	andi	r2,r7,8
   853cc:	10002726 	beq	r2,zero,8546c <__sfvwrite_r+0xe8>
   853d0:	28800417 	ldw	r2,16(r5)
   853d4:	10002526 	beq	r2,zero,8546c <__sfvwrite_r+0xe8>
   853d8:	3880008c 	andi	r2,r7,2
   853dc:	b5400017 	ldw	r21,0(r22)
   853e0:	10002826 	beq	r2,zero,85484 <__sfvwrite_r+0x100>
   853e4:	0021883a 	mov	r16,zero
   853e8:	0023883a 	mov	r17,zero
   853ec:	880d883a 	mov	r6,r17
   853f0:	e009883a 	mov	r4,fp
   853f4:	00810004 	movi	r2,1024
   853f8:	80006e26 	beq	r16,zero,855b4 <__sfvwrite_r+0x230>
   853fc:	800f883a 	mov	r7,r16
   85400:	91400717 	ldw	r5,28(r18)
   85404:	1400012e 	bgeu	r2,r16,8540c <__sfvwrite_r+0x88>
   85408:	100f883a 	mov	r7,r2
   8540c:	90c00917 	ldw	r3,36(r18)
   85410:	183ee83a 	callr	r3
   85414:	1007883a 	mov	r3,r2
   85418:	80a1c83a 	sub	r16,r16,r2
   8541c:	88a3883a 	add	r17,r17,r2
   85420:	00806d0e 	bge	zero,r2,855d8 <__sfvwrite_r+0x254>
   85424:	b0800217 	ldw	r2,8(r22)
   85428:	10c5c83a 	sub	r2,r2,r3
   8542c:	b0800215 	stw	r2,8(r22)
   85430:	103fee1e 	bne	r2,zero,853ec <__sfvwrite_r+0x68>
   85434:	0009883a 	mov	r4,zero
   85438:	2005883a 	mov	r2,r4
   8543c:	dfc00a17 	ldw	ra,40(sp)
   85440:	df000917 	ldw	fp,36(sp)
   85444:	ddc00817 	ldw	r23,32(sp)
   85448:	dd800717 	ldw	r22,28(sp)
   8544c:	dd400617 	ldw	r21,24(sp)
   85450:	dd000517 	ldw	r20,20(sp)
   85454:	dcc00417 	ldw	r19,16(sp)
   85458:	dc800317 	ldw	r18,12(sp)
   8545c:	dc400217 	ldw	r17,8(sp)
   85460:	dc000117 	ldw	r16,4(sp)
   85464:	dec00b04 	addi	sp,sp,44
   85468:	f800283a 	ret
   8546c:	00830ec0 	call	830ec <__swsetup_r>
   85470:	1000e41e 	bne	r2,zero,85804 <__sfvwrite_r+0x480>
   85474:	91c0030b 	ldhu	r7,12(r18)
   85478:	b5400017 	ldw	r21,0(r22)
   8547c:	3880008c 	andi	r2,r7,2
   85480:	103fd81e 	bne	r2,zero,853e4 <__sfvwrite_r+0x60>
   85484:	3880004c 	andi	r2,r7,1
   85488:	1005003a 	cmpeq	r2,r2,zero
   8548c:	10005726 	beq	r2,zero,855ec <__sfvwrite_r+0x268>
   85490:	0029883a 	mov	r20,zero
   85494:	002f883a 	mov	r23,zero
   85498:	a0004226 	beq	r20,zero,855a4 <__sfvwrite_r+0x220>
   8549c:	3880800c 	andi	r2,r7,512
   854a0:	94000217 	ldw	r16,8(r18)
   854a4:	10008b26 	beq	r2,zero,856d4 <__sfvwrite_r+0x350>
   854a8:	800d883a 	mov	r6,r16
   854ac:	a400a536 	bltu	r20,r16,85744 <__sfvwrite_r+0x3c0>
   854b0:	3881200c 	andi	r2,r7,1152
   854b4:	10002726 	beq	r2,zero,85554 <__sfvwrite_r+0x1d0>
   854b8:	90800517 	ldw	r2,20(r18)
   854bc:	92000417 	ldw	r8,16(r18)
   854c0:	91400017 	ldw	r5,0(r18)
   854c4:	1087883a 	add	r3,r2,r2
   854c8:	1887883a 	add	r3,r3,r2
   854cc:	1808d7fa 	srli	r4,r3,31
   854d0:	2a21c83a 	sub	r16,r5,r8
   854d4:	80800044 	addi	r2,r16,1
   854d8:	20c9883a 	add	r4,r4,r3
   854dc:	2027d07a 	srai	r19,r4,1
   854e0:	a085883a 	add	r2,r20,r2
   854e4:	980d883a 	mov	r6,r19
   854e8:	9880022e 	bgeu	r19,r2,854f4 <__sfvwrite_r+0x170>
   854ec:	1027883a 	mov	r19,r2
   854f0:	100d883a 	mov	r6,r2
   854f4:	3881000c 	andi	r2,r7,1024
   854f8:	1000b826 	beq	r2,zero,857dc <__sfvwrite_r+0x458>
   854fc:	300b883a 	mov	r5,r6
   85500:	e009883a 	mov	r4,fp
   85504:	0085bf80 	call	85bf8 <_malloc_r>
   85508:	10003126 	beq	r2,zero,855d0 <__sfvwrite_r+0x24c>
   8550c:	91400417 	ldw	r5,16(r18)
   85510:	1009883a 	mov	r4,r2
   85514:	800d883a 	mov	r6,r16
   85518:	1023883a 	mov	r17,r2
   8551c:	008641c0 	call	8641c <memcpy>
   85520:	90c0030b 	ldhu	r3,12(r18)
   85524:	00beffc4 	movi	r2,-1025
   85528:	1886703a 	and	r3,r3,r2
   8552c:	18c02014 	ori	r3,r3,128
   85530:	90c0030d 	sth	r3,12(r18)
   85534:	9c07c83a 	sub	r3,r19,r16
   85538:	8c05883a 	add	r2,r17,r16
   8553c:	a00d883a 	mov	r6,r20
   85540:	a021883a 	mov	r16,r20
   85544:	90800015 	stw	r2,0(r18)
   85548:	90c00215 	stw	r3,8(r18)
   8554c:	94400415 	stw	r17,16(r18)
   85550:	94c00515 	stw	r19,20(r18)
   85554:	91000017 	ldw	r4,0(r18)
   85558:	b80b883a 	mov	r5,r23
   8555c:	a023883a 	mov	r17,r20
   85560:	00864bc0 	call	864bc <memmove>
   85564:	90c00217 	ldw	r3,8(r18)
   85568:	90800017 	ldw	r2,0(r18)
   8556c:	a027883a 	mov	r19,r20
   85570:	1c07c83a 	sub	r3,r3,r16
   85574:	1405883a 	add	r2,r2,r16
   85578:	90c00215 	stw	r3,8(r18)
   8557c:	a021883a 	mov	r16,r20
   85580:	90800015 	stw	r2,0(r18)
   85584:	b0800217 	ldw	r2,8(r22)
   85588:	1405c83a 	sub	r2,r2,r16
   8558c:	b0800215 	stw	r2,8(r22)
   85590:	103fa826 	beq	r2,zero,85434 <__sfvwrite_r+0xb0>
   85594:	a469c83a 	sub	r20,r20,r17
   85598:	91c0030b 	ldhu	r7,12(r18)
   8559c:	bcef883a 	add	r23,r23,r19
   855a0:	a03fbe1e 	bne	r20,zero,8549c <__sfvwrite_r+0x118>
   855a4:	adc00017 	ldw	r23,0(r21)
   855a8:	ad000117 	ldw	r20,4(r21)
   855ac:	ad400204 	addi	r21,r21,8
   855b0:	003fb906 	br	85498 <__sfvwrite_r+0x114>
   855b4:	ac400017 	ldw	r17,0(r21)
   855b8:	ac000117 	ldw	r16,4(r21)
   855bc:	ad400204 	addi	r21,r21,8
   855c0:	003f8a06 	br	853ec <__sfvwrite_r+0x68>
   855c4:	91400417 	ldw	r5,16(r18)
   855c8:	e009883a 	mov	r4,fp
   855cc:	00850700 	call	85070 <_free_r>
   855d0:	00800304 	movi	r2,12
   855d4:	e0800015 	stw	r2,0(fp)
   855d8:	9080030b 	ldhu	r2,12(r18)
   855dc:	013fffc4 	movi	r4,-1
   855e0:	10801014 	ori	r2,r2,64
   855e4:	9080030d 	sth	r2,12(r18)
   855e8:	003f9306 	br	85438 <__sfvwrite_r+0xb4>
   855ec:	0027883a 	mov	r19,zero
   855f0:	002f883a 	mov	r23,zero
   855f4:	d8000015 	stw	zero,0(sp)
   855f8:	0029883a 	mov	r20,zero
   855fc:	98001e26 	beq	r19,zero,85678 <__sfvwrite_r+0x2f4>
   85600:	d8c00017 	ldw	r3,0(sp)
   85604:	1804c03a 	cmpne	r2,r3,zero
   85608:	10005e26 	beq	r2,zero,85784 <__sfvwrite_r+0x400>
   8560c:	9821883a 	mov	r16,r19
   85610:	a4c0012e 	bgeu	r20,r19,85618 <__sfvwrite_r+0x294>
   85614:	a021883a 	mov	r16,r20
   85618:	91000017 	ldw	r4,0(r18)
   8561c:	90800417 	ldw	r2,16(r18)
   85620:	91800217 	ldw	r6,8(r18)
   85624:	91c00517 	ldw	r7,20(r18)
   85628:	1100022e 	bgeu	r2,r4,85634 <__sfvwrite_r+0x2b0>
   8562c:	31e3883a 	add	r17,r6,r7
   85630:	8c001616 	blt	r17,r16,8568c <__sfvwrite_r+0x308>
   85634:	81c03816 	blt	r16,r7,85718 <__sfvwrite_r+0x394>
   85638:	90c00917 	ldw	r3,36(r18)
   8563c:	91400717 	ldw	r5,28(r18)
   85640:	e009883a 	mov	r4,fp
   85644:	b80d883a 	mov	r6,r23
   85648:	183ee83a 	callr	r3
   8564c:	1023883a 	mov	r17,r2
   85650:	00bfe10e 	bge	zero,r2,855d8 <__sfvwrite_r+0x254>
   85654:	a469c83a 	sub	r20,r20,r17
   85658:	a0001826 	beq	r20,zero,856bc <__sfvwrite_r+0x338>
   8565c:	b0800217 	ldw	r2,8(r22)
   85660:	1445c83a 	sub	r2,r2,r17
   85664:	b0800215 	stw	r2,8(r22)
   85668:	103f7226 	beq	r2,zero,85434 <__sfvwrite_r+0xb0>
   8566c:	9c67c83a 	sub	r19,r19,r17
   85670:	bc6f883a 	add	r23,r23,r17
   85674:	983fe21e 	bne	r19,zero,85600 <__sfvwrite_r+0x27c>
   85678:	adc00017 	ldw	r23,0(r21)
   8567c:	acc00117 	ldw	r19,4(r21)
   85680:	ad400204 	addi	r21,r21,8
   85684:	d8000015 	stw	zero,0(sp)
   85688:	003fdc06 	br	855fc <__sfvwrite_r+0x278>
   8568c:	b80b883a 	mov	r5,r23
   85690:	880d883a 	mov	r6,r17
   85694:	00864bc0 	call	864bc <memmove>
   85698:	90c00017 	ldw	r3,0(r18)
   8569c:	e009883a 	mov	r4,fp
   856a0:	900b883a 	mov	r5,r18
   856a4:	1c47883a 	add	r3,r3,r17
   856a8:	90c00015 	stw	r3,0(r18)
   856ac:	0084a200 	call	84a20 <_fflush_r>
   856b0:	103fc91e 	bne	r2,zero,855d8 <__sfvwrite_r+0x254>
   856b4:	a469c83a 	sub	r20,r20,r17
   856b8:	a03fe81e 	bne	r20,zero,8565c <__sfvwrite_r+0x2d8>
   856bc:	e009883a 	mov	r4,fp
   856c0:	900b883a 	mov	r5,r18
   856c4:	0084a200 	call	84a20 <_fflush_r>
   856c8:	103fc31e 	bne	r2,zero,855d8 <__sfvwrite_r+0x254>
   856cc:	d8000015 	stw	zero,0(sp)
   856d0:	003fe206 	br	8565c <__sfvwrite_r+0x2d8>
   856d4:	91000017 	ldw	r4,0(r18)
   856d8:	90800417 	ldw	r2,16(r18)
   856dc:	1100022e 	bgeu	r2,r4,856e8 <__sfvwrite_r+0x364>
   856e0:	8023883a 	mov	r17,r16
   856e4:	85003136 	bltu	r16,r20,857ac <__sfvwrite_r+0x428>
   856e8:	91c00517 	ldw	r7,20(r18)
   856ec:	a1c01836 	bltu	r20,r7,85750 <__sfvwrite_r+0x3cc>
   856f0:	90c00917 	ldw	r3,36(r18)
   856f4:	91400717 	ldw	r5,28(r18)
   856f8:	e009883a 	mov	r4,fp
   856fc:	b80d883a 	mov	r6,r23
   85700:	183ee83a 	callr	r3
   85704:	1021883a 	mov	r16,r2
   85708:	00bfb30e 	bge	zero,r2,855d8 <__sfvwrite_r+0x254>
   8570c:	1023883a 	mov	r17,r2
   85710:	1027883a 	mov	r19,r2
   85714:	003f9b06 	br	85584 <__sfvwrite_r+0x200>
   85718:	b80b883a 	mov	r5,r23
   8571c:	800d883a 	mov	r6,r16
   85720:	00864bc0 	call	864bc <memmove>
   85724:	90c00217 	ldw	r3,8(r18)
   85728:	90800017 	ldw	r2,0(r18)
   8572c:	8023883a 	mov	r17,r16
   85730:	1c07c83a 	sub	r3,r3,r16
   85734:	1405883a 	add	r2,r2,r16
   85738:	90c00215 	stw	r3,8(r18)
   8573c:	90800015 	stw	r2,0(r18)
   85740:	003fc406 	br	85654 <__sfvwrite_r+0x2d0>
   85744:	a00d883a 	mov	r6,r20
   85748:	a021883a 	mov	r16,r20
   8574c:	003f8106 	br	85554 <__sfvwrite_r+0x1d0>
   85750:	b80b883a 	mov	r5,r23
   85754:	a00d883a 	mov	r6,r20
   85758:	00864bc0 	call	864bc <memmove>
   8575c:	90c00217 	ldw	r3,8(r18)
   85760:	90800017 	ldw	r2,0(r18)
   85764:	a021883a 	mov	r16,r20
   85768:	1d07c83a 	sub	r3,r3,r20
   8576c:	1505883a 	add	r2,r2,r20
   85770:	a023883a 	mov	r17,r20
   85774:	a027883a 	mov	r19,r20
   85778:	90c00215 	stw	r3,8(r18)
   8577c:	90800015 	stw	r2,0(r18)
   85780:	003f8006 	br	85584 <__sfvwrite_r+0x200>
   85784:	b809883a 	mov	r4,r23
   85788:	01400284 	movi	r5,10
   8578c:	980d883a 	mov	r6,r19
   85790:	00863380 	call	86338 <memchr>
   85794:	10001726 	beq	r2,zero,857f4 <__sfvwrite_r+0x470>
   85798:	15c5c83a 	sub	r2,r2,r23
   8579c:	15000044 	addi	r20,r2,1
   857a0:	00800044 	movi	r2,1
   857a4:	d8800015 	stw	r2,0(sp)
   857a8:	003f9806 	br	8560c <__sfvwrite_r+0x288>
   857ac:	b80b883a 	mov	r5,r23
   857b0:	800d883a 	mov	r6,r16
   857b4:	00864bc0 	call	864bc <memmove>
   857b8:	90c00017 	ldw	r3,0(r18)
   857bc:	e009883a 	mov	r4,fp
   857c0:	900b883a 	mov	r5,r18
   857c4:	1c07883a 	add	r3,r3,r16
   857c8:	90c00015 	stw	r3,0(r18)
   857cc:	8027883a 	mov	r19,r16
   857d0:	0084a200 	call	84a20 <_fflush_r>
   857d4:	103f6b26 	beq	r2,zero,85584 <__sfvwrite_r+0x200>
   857d8:	003f7f06 	br	855d8 <__sfvwrite_r+0x254>
   857dc:	400b883a 	mov	r5,r8
   857e0:	e009883a 	mov	r4,fp
   857e4:	00876c00 	call	876c0 <_realloc_r>
   857e8:	103f7626 	beq	r2,zero,855c4 <__sfvwrite_r+0x240>
   857ec:	1023883a 	mov	r17,r2
   857f0:	003f5006 	br	85534 <__sfvwrite_r+0x1b0>
   857f4:	00c00044 	movi	r3,1
   857f8:	9d000044 	addi	r20,r19,1
   857fc:	d8c00015 	stw	r3,0(sp)
   85800:	003f8206 	br	8560c <__sfvwrite_r+0x288>
   85804:	9080030b 	ldhu	r2,12(r18)
   85808:	00c00244 	movi	r3,9
   8580c:	013fffc4 	movi	r4,-1
   85810:	10801014 	ori	r2,r2,64
   85814:	9080030d 	sth	r2,12(r18)
   85818:	e0c00015 	stw	r3,0(fp)
   8581c:	003f0606 	br	85438 <__sfvwrite_r+0xb4>

00085820 <_fwalk_reent>:
   85820:	defff704 	addi	sp,sp,-36
   85824:	dcc00315 	stw	r19,12(sp)
   85828:	24c0b804 	addi	r19,r4,736
   8582c:	dd800615 	stw	r22,24(sp)
   85830:	dd400515 	stw	r21,20(sp)
   85834:	dfc00815 	stw	ra,32(sp)
   85838:	ddc00715 	stw	r23,28(sp)
   8583c:	dd000415 	stw	r20,16(sp)
   85840:	dc800215 	stw	r18,8(sp)
   85844:	dc400115 	stw	r17,4(sp)
   85848:	dc000015 	stw	r16,0(sp)
   8584c:	202b883a 	mov	r21,r4
   85850:	282d883a 	mov	r22,r5
   85854:	0084ca80 	call	84ca8 <__sfp_lock_acquire>
   85858:	98002126 	beq	r19,zero,858e0 <_fwalk_reent+0xc0>
   8585c:	002f883a 	mov	r23,zero
   85860:	9c800117 	ldw	r18,4(r19)
   85864:	9c000217 	ldw	r16,8(r19)
   85868:	90bfffc4 	addi	r2,r18,-1
   8586c:	10000d16 	blt	r2,zero,858a4 <_fwalk_reent+0x84>
   85870:	0023883a 	mov	r17,zero
   85874:	053fffc4 	movi	r20,-1
   85878:	8080030f 	ldh	r2,12(r16)
   8587c:	8c400044 	addi	r17,r17,1
   85880:	10000626 	beq	r2,zero,8589c <_fwalk_reent+0x7c>
   85884:	8080038f 	ldh	r2,14(r16)
   85888:	800b883a 	mov	r5,r16
   8588c:	a809883a 	mov	r4,r21
   85890:	15000226 	beq	r2,r20,8589c <_fwalk_reent+0x7c>
   85894:	b03ee83a 	callr	r22
   85898:	b8aeb03a 	or	r23,r23,r2
   8589c:	84001704 	addi	r16,r16,92
   858a0:	947ff51e 	bne	r18,r17,85878 <_fwalk_reent+0x58>
   858a4:	9cc00017 	ldw	r19,0(r19)
   858a8:	983fed1e 	bne	r19,zero,85860 <_fwalk_reent+0x40>
   858ac:	0084cac0 	call	84cac <__sfp_lock_release>
   858b0:	b805883a 	mov	r2,r23
   858b4:	dfc00817 	ldw	ra,32(sp)
   858b8:	ddc00717 	ldw	r23,28(sp)
   858bc:	dd800617 	ldw	r22,24(sp)
   858c0:	dd400517 	ldw	r21,20(sp)
   858c4:	dd000417 	ldw	r20,16(sp)
   858c8:	dcc00317 	ldw	r19,12(sp)
   858cc:	dc800217 	ldw	r18,8(sp)
   858d0:	dc400117 	ldw	r17,4(sp)
   858d4:	dc000017 	ldw	r16,0(sp)
   858d8:	dec00904 	addi	sp,sp,36
   858dc:	f800283a 	ret
   858e0:	002f883a 	mov	r23,zero
   858e4:	003ff106 	br	858ac <_fwalk_reent+0x8c>

000858e8 <_fwalk>:
   858e8:	defff804 	addi	sp,sp,-32
   858ec:	dcc00315 	stw	r19,12(sp)
   858f0:	24c0b804 	addi	r19,r4,736
   858f4:	dd400515 	stw	r21,20(sp)
   858f8:	dfc00715 	stw	ra,28(sp)
   858fc:	dd800615 	stw	r22,24(sp)
   85900:	dd000415 	stw	r20,16(sp)
   85904:	dc800215 	stw	r18,8(sp)
   85908:	dc400115 	stw	r17,4(sp)
   8590c:	dc000015 	stw	r16,0(sp)
   85910:	282b883a 	mov	r21,r5
   85914:	0084ca80 	call	84ca8 <__sfp_lock_acquire>
   85918:	98001f26 	beq	r19,zero,85998 <_fwalk+0xb0>
   8591c:	002d883a 	mov	r22,zero
   85920:	9c800117 	ldw	r18,4(r19)
   85924:	9c000217 	ldw	r16,8(r19)
   85928:	90bfffc4 	addi	r2,r18,-1
   8592c:	10000c16 	blt	r2,zero,85960 <_fwalk+0x78>
   85930:	0023883a 	mov	r17,zero
   85934:	053fffc4 	movi	r20,-1
   85938:	8080030f 	ldh	r2,12(r16)
   8593c:	8c400044 	addi	r17,r17,1
   85940:	10000526 	beq	r2,zero,85958 <_fwalk+0x70>
   85944:	8080038f 	ldh	r2,14(r16)
   85948:	8009883a 	mov	r4,r16
   8594c:	15000226 	beq	r2,r20,85958 <_fwalk+0x70>
   85950:	a83ee83a 	callr	r21
   85954:	b0acb03a 	or	r22,r22,r2
   85958:	84001704 	addi	r16,r16,92
   8595c:	947ff61e 	bne	r18,r17,85938 <_fwalk+0x50>
   85960:	9cc00017 	ldw	r19,0(r19)
   85964:	983fee1e 	bne	r19,zero,85920 <_fwalk+0x38>
   85968:	0084cac0 	call	84cac <__sfp_lock_release>
   8596c:	b005883a 	mov	r2,r22
   85970:	dfc00717 	ldw	ra,28(sp)
   85974:	dd800617 	ldw	r22,24(sp)
   85978:	dd400517 	ldw	r21,20(sp)
   8597c:	dd000417 	ldw	r20,16(sp)
   85980:	dcc00317 	ldw	r19,12(sp)
   85984:	dc800217 	ldw	r18,8(sp)
   85988:	dc400117 	ldw	r17,4(sp)
   8598c:	dc000017 	ldw	r16,0(sp)
   85990:	dec00804 	addi	sp,sp,32
   85994:	f800283a 	ret
   85998:	002d883a 	mov	r22,zero
   8599c:	003ff206 	br	85968 <_fwalk+0x80>

000859a0 <__locale_charset>:
   859a0:	d0a00417 	ldw	r2,-32752(gp)
   859a4:	f800283a 	ret

000859a8 <_localeconv_r>:
   859a8:	00800274 	movhi	r2,9
   859ac:	10b89204 	addi	r2,r2,-7608
   859b0:	f800283a 	ret

000859b4 <localeconv>:
   859b4:	00800274 	movhi	r2,9
   859b8:	10bff504 	addi	r2,r2,-44
   859bc:	11000017 	ldw	r4,0(r2)
   859c0:	00859a81 	jmpi	859a8 <_localeconv_r>

000859c4 <_setlocale_r>:
   859c4:	defffc04 	addi	sp,sp,-16
   859c8:	00c00274 	movhi	r3,9
   859cc:	18f88d04 	addi	r3,r3,-7628
   859d0:	dc800215 	stw	r18,8(sp)
   859d4:	dc400115 	stw	r17,4(sp)
   859d8:	dc000015 	stw	r16,0(sp)
   859dc:	2023883a 	mov	r17,r4
   859e0:	2825883a 	mov	r18,r5
   859e4:	dfc00315 	stw	ra,12(sp)
   859e8:	3021883a 	mov	r16,r6
   859ec:	3009883a 	mov	r4,r6
   859f0:	180b883a 	mov	r5,r3
   859f4:	30000926 	beq	r6,zero,85a1c <_setlocale_r+0x58>
   859f8:	0087ee00 	call	87ee0 <strcmp>
   859fc:	8009883a 	mov	r4,r16
   85a00:	01400274 	movhi	r5,9
   85a04:	2977d804 	addi	r5,r5,-8352
   85a08:	10000b1e 	bne	r2,zero,85a38 <_setlocale_r+0x74>
   85a0c:	8c000d15 	stw	r16,52(r17)
   85a10:	8c800c15 	stw	r18,48(r17)
   85a14:	00c00274 	movhi	r3,9
   85a18:	18f88d04 	addi	r3,r3,-7628
   85a1c:	1805883a 	mov	r2,r3
   85a20:	dfc00317 	ldw	ra,12(sp)
   85a24:	dc800217 	ldw	r18,8(sp)
   85a28:	dc400117 	ldw	r17,4(sp)
   85a2c:	dc000017 	ldw	r16,0(sp)
   85a30:	dec00404 	addi	sp,sp,16
   85a34:	f800283a 	ret
   85a38:	0087ee00 	call	87ee0 <strcmp>
   85a3c:	0007883a 	mov	r3,zero
   85a40:	103ff226 	beq	r2,zero,85a0c <_setlocale_r+0x48>
   85a44:	003ff506 	br	85a1c <_setlocale_r+0x58>

00085a48 <setlocale>:
   85a48:	01800274 	movhi	r6,9
   85a4c:	31bff504 	addi	r6,r6,-44
   85a50:	2007883a 	mov	r3,r4
   85a54:	31000017 	ldw	r4,0(r6)
   85a58:	280d883a 	mov	r6,r5
   85a5c:	180b883a 	mov	r5,r3
   85a60:	00859c41 	jmpi	859c4 <_setlocale_r>

00085a64 <__smakebuf_r>:
   85a64:	2880030b 	ldhu	r2,12(r5)
   85a68:	deffed04 	addi	sp,sp,-76
   85a6c:	dc401015 	stw	r17,64(sp)
   85a70:	1080008c 	andi	r2,r2,2
   85a74:	dc000f15 	stw	r16,60(sp)
   85a78:	dfc01215 	stw	ra,72(sp)
   85a7c:	dc801115 	stw	r18,68(sp)
   85a80:	2821883a 	mov	r16,r5
   85a84:	2023883a 	mov	r17,r4
   85a88:	10000b26 	beq	r2,zero,85ab8 <__smakebuf_r+0x54>
   85a8c:	28c010c4 	addi	r3,r5,67
   85a90:	00800044 	movi	r2,1
   85a94:	28800515 	stw	r2,20(r5)
   85a98:	28c00415 	stw	r3,16(r5)
   85a9c:	28c00015 	stw	r3,0(r5)
   85aa0:	dfc01217 	ldw	ra,72(sp)
   85aa4:	dc801117 	ldw	r18,68(sp)
   85aa8:	dc401017 	ldw	r17,64(sp)
   85aac:	dc000f17 	ldw	r16,60(sp)
   85ab0:	dec01304 	addi	sp,sp,76
   85ab4:	f800283a 	ret
   85ab8:	2940038f 	ldh	r5,14(r5)
   85abc:	28002116 	blt	r5,zero,85b44 <__smakebuf_r+0xe0>
   85ac0:	d80d883a 	mov	r6,sp
   85ac4:	00882e40 	call	882e4 <_fstat_r>
   85ac8:	10001e16 	blt	r2,zero,85b44 <__smakebuf_r+0xe0>
   85acc:	d8800117 	ldw	r2,4(sp)
   85ad0:	00e00014 	movui	r3,32768
   85ad4:	113c000c 	andi	r4,r2,61440
   85ad8:	20c03126 	beq	r4,r3,85ba0 <__smakebuf_r+0x13c>
   85adc:	8080030b 	ldhu	r2,12(r16)
   85ae0:	00c80004 	movi	r3,8192
   85ae4:	10820014 	ori	r2,r2,2048
   85ae8:	8080030d 	sth	r2,12(r16)
   85aec:	20c01e26 	beq	r4,r3,85b68 <__smakebuf_r+0x104>
   85af0:	04810004 	movi	r18,1024
   85af4:	8809883a 	mov	r4,r17
   85af8:	900b883a 	mov	r5,r18
   85afc:	0085bf80 	call	85bf8 <_malloc_r>
   85b00:	1009883a 	mov	r4,r2
   85b04:	10003126 	beq	r2,zero,85bcc <__smakebuf_r+0x168>
   85b08:	80c0030b 	ldhu	r3,12(r16)
   85b0c:	00800234 	movhi	r2,8
   85b10:	10936704 	addi	r2,r2,19868
   85b14:	88800f15 	stw	r2,60(r17)
   85b18:	18c02014 	ori	r3,r3,128
   85b1c:	84800515 	stw	r18,20(r16)
   85b20:	80c0030d 	sth	r3,12(r16)
   85b24:	81000415 	stw	r4,16(r16)
   85b28:	81000015 	stw	r4,0(r16)
   85b2c:	dfc01217 	ldw	ra,72(sp)
   85b30:	dc801117 	ldw	r18,68(sp)
   85b34:	dc401017 	ldw	r17,64(sp)
   85b38:	dc000f17 	ldw	r16,60(sp)
   85b3c:	dec01304 	addi	sp,sp,76
   85b40:	f800283a 	ret
   85b44:	80c0030b 	ldhu	r3,12(r16)
   85b48:	1880200c 	andi	r2,r3,128
   85b4c:	10000426 	beq	r2,zero,85b60 <__smakebuf_r+0xfc>
   85b50:	04801004 	movi	r18,64
   85b54:	18820014 	ori	r2,r3,2048
   85b58:	8080030d 	sth	r2,12(r16)
   85b5c:	003fe506 	br	85af4 <__smakebuf_r+0x90>
   85b60:	04810004 	movi	r18,1024
   85b64:	003ffb06 	br	85b54 <__smakebuf_r+0xf0>
   85b68:	8140038f 	ldh	r5,14(r16)
   85b6c:	8809883a 	mov	r4,r17
   85b70:	00883580 	call	88358 <_isatty_r>
   85b74:	103fde26 	beq	r2,zero,85af0 <__smakebuf_r+0x8c>
   85b78:	8080030b 	ldhu	r2,12(r16)
   85b7c:	80c010c4 	addi	r3,r16,67
   85b80:	04810004 	movi	r18,1024
   85b84:	10800054 	ori	r2,r2,1
   85b88:	8080030d 	sth	r2,12(r16)
   85b8c:	00800044 	movi	r2,1
   85b90:	80c00415 	stw	r3,16(r16)
   85b94:	80800515 	stw	r2,20(r16)
   85b98:	80c00015 	stw	r3,0(r16)
   85b9c:	003fd506 	br	85af4 <__smakebuf_r+0x90>
   85ba0:	80c00a17 	ldw	r3,40(r16)
   85ba4:	00800234 	movhi	r2,8
   85ba8:	109f6704 	addi	r2,r2,32156
   85bac:	18bfcb1e 	bne	r3,r2,85adc <__smakebuf_r+0x78>
   85bb0:	8080030b 	ldhu	r2,12(r16)
   85bb4:	00c10004 	movi	r3,1024
   85bb8:	1825883a 	mov	r18,r3
   85bbc:	10c4b03a 	or	r2,r2,r3
   85bc0:	8080030d 	sth	r2,12(r16)
   85bc4:	80c01315 	stw	r3,76(r16)
   85bc8:	003fca06 	br	85af4 <__smakebuf_r+0x90>
   85bcc:	8100030b 	ldhu	r4,12(r16)
   85bd0:	2080800c 	andi	r2,r4,512
   85bd4:	103fb21e 	bne	r2,zero,85aa0 <__smakebuf_r+0x3c>
   85bd8:	80c010c4 	addi	r3,r16,67
   85bdc:	21000094 	ori	r4,r4,2
   85be0:	00800044 	movi	r2,1
   85be4:	80800515 	stw	r2,20(r16)
   85be8:	8100030d 	sth	r4,12(r16)
   85bec:	80c00415 	stw	r3,16(r16)
   85bf0:	80c00015 	stw	r3,0(r16)
   85bf4:	003faa06 	br	85aa0 <__smakebuf_r+0x3c>

00085bf8 <_malloc_r>:
   85bf8:	defff604 	addi	sp,sp,-40
   85bfc:	28c002c4 	addi	r3,r5,11
   85c00:	00800584 	movi	r2,22
   85c04:	dc800215 	stw	r18,8(sp)
   85c08:	dfc00915 	stw	ra,36(sp)
   85c0c:	df000815 	stw	fp,32(sp)
   85c10:	ddc00715 	stw	r23,28(sp)
   85c14:	dd800615 	stw	r22,24(sp)
   85c18:	dd400515 	stw	r21,20(sp)
   85c1c:	dd000415 	stw	r20,16(sp)
   85c20:	dcc00315 	stw	r19,12(sp)
   85c24:	dc400115 	stw	r17,4(sp)
   85c28:	dc000015 	stw	r16,0(sp)
   85c2c:	2025883a 	mov	r18,r4
   85c30:	10c01236 	bltu	r2,r3,85c7c <_malloc_r+0x84>
   85c34:	04400404 	movi	r17,16
   85c38:	8940142e 	bgeu	r17,r5,85c8c <_malloc_r+0x94>
   85c3c:	00800304 	movi	r2,12
   85c40:	0007883a 	mov	r3,zero
   85c44:	90800015 	stw	r2,0(r18)
   85c48:	1805883a 	mov	r2,r3
   85c4c:	dfc00917 	ldw	ra,36(sp)
   85c50:	df000817 	ldw	fp,32(sp)
   85c54:	ddc00717 	ldw	r23,28(sp)
   85c58:	dd800617 	ldw	r22,24(sp)
   85c5c:	dd400517 	ldw	r21,20(sp)
   85c60:	dd000417 	ldw	r20,16(sp)
   85c64:	dcc00317 	ldw	r19,12(sp)
   85c68:	dc800217 	ldw	r18,8(sp)
   85c6c:	dc400117 	ldw	r17,4(sp)
   85c70:	dc000017 	ldw	r16,0(sp)
   85c74:	dec00a04 	addi	sp,sp,40
   85c78:	f800283a 	ret
   85c7c:	00bffe04 	movi	r2,-8
   85c80:	18a2703a 	and	r17,r3,r2
   85c84:	883fed16 	blt	r17,zero,85c3c <_malloc_r+0x44>
   85c88:	897fec36 	bltu	r17,r5,85c3c <_malloc_r+0x44>
   85c8c:	9009883a 	mov	r4,r18
   85c90:	008affc0 	call	8affc <__malloc_lock>
   85c94:	00807dc4 	movi	r2,503
   85c98:	14402b2e 	bgeu	r2,r17,85d48 <_malloc_r+0x150>
   85c9c:	8806d27a 	srli	r3,r17,9
   85ca0:	18003f1e 	bne	r3,zero,85da0 <_malloc_r+0x1a8>
   85ca4:	880cd0fa 	srli	r6,r17,3
   85ca8:	300490fa 	slli	r2,r6,3
   85cac:	02c00274 	movhi	r11,9
   85cb0:	5afa3f04 	addi	r11,r11,-5892
   85cb4:	12cb883a 	add	r5,r2,r11
   85cb8:	2c000317 	ldw	r16,12(r5)
   85cbc:	580f883a 	mov	r7,r11
   85cc0:	2c00041e 	bne	r5,r16,85cd4 <_malloc_r+0xdc>
   85cc4:	00000a06 	br	85cf0 <_malloc_r+0xf8>
   85cc8:	1800860e 	bge	r3,zero,85ee4 <_malloc_r+0x2ec>
   85ccc:	84000317 	ldw	r16,12(r16)
   85cd0:	2c000726 	beq	r5,r16,85cf0 <_malloc_r+0xf8>
   85cd4:	80800117 	ldw	r2,4(r16)
   85cd8:	00ffff04 	movi	r3,-4
   85cdc:	10c8703a 	and	r4,r2,r3
   85ce0:	2447c83a 	sub	r3,r4,r17
   85ce4:	008003c4 	movi	r2,15
   85ce8:	10fff70e 	bge	r2,r3,85cc8 <_malloc_r+0xd0>
   85cec:	31bfffc4 	addi	r6,r6,-1
   85cf0:	32400044 	addi	r9,r6,1
   85cf4:	02800274 	movhi	r10,9
   85cf8:	52ba4104 	addi	r10,r10,-5884
   85cfc:	54000217 	ldw	r16,8(r10)
   85d00:	8280a026 	beq	r16,r10,85f84 <_malloc_r+0x38c>
   85d04:	80800117 	ldw	r2,4(r16)
   85d08:	00ffff04 	movi	r3,-4
   85d0c:	10ca703a 	and	r5,r2,r3
   85d10:	2c4dc83a 	sub	r6,r5,r17
   85d14:	008003c4 	movi	r2,15
   85d18:	11808316 	blt	r2,r6,85f28 <_malloc_r+0x330>
   85d1c:	52800315 	stw	r10,12(r10)
   85d20:	52800215 	stw	r10,8(r10)
   85d24:	30002916 	blt	r6,zero,85dcc <_malloc_r+0x1d4>
   85d28:	8147883a 	add	r3,r16,r5
   85d2c:	18800117 	ldw	r2,4(r3)
   85d30:	9009883a 	mov	r4,r18
   85d34:	10800054 	ori	r2,r2,1
   85d38:	18800115 	stw	r2,4(r3)
   85d3c:	008b01c0 	call	8b01c <__malloc_unlock>
   85d40:	80c00204 	addi	r3,r16,8
   85d44:	003fc006 	br	85c48 <_malloc_r+0x50>
   85d48:	02c00274 	movhi	r11,9
   85d4c:	5afa3f04 	addi	r11,r11,-5892
   85d50:	8ac5883a 	add	r2,r17,r11
   85d54:	14000317 	ldw	r16,12(r2)
   85d58:	580f883a 	mov	r7,r11
   85d5c:	8806d0fa 	srli	r3,r17,3
   85d60:	14006c26 	beq	r2,r16,85f14 <_malloc_r+0x31c>
   85d64:	80c00117 	ldw	r3,4(r16)
   85d68:	00bfff04 	movi	r2,-4
   85d6c:	81800317 	ldw	r6,12(r16)
   85d70:	1886703a 	and	r3,r3,r2
   85d74:	80c7883a 	add	r3,r16,r3
   85d78:	18800117 	ldw	r2,4(r3)
   85d7c:	81400217 	ldw	r5,8(r16)
   85d80:	9009883a 	mov	r4,r18
   85d84:	10800054 	ori	r2,r2,1
   85d88:	18800115 	stw	r2,4(r3)
   85d8c:	31400215 	stw	r5,8(r6)
   85d90:	29800315 	stw	r6,12(r5)
   85d94:	008b01c0 	call	8b01c <__malloc_unlock>
   85d98:	80c00204 	addi	r3,r16,8
   85d9c:	003faa06 	br	85c48 <_malloc_r+0x50>
   85da0:	00800104 	movi	r2,4
   85da4:	10c0052e 	bgeu	r2,r3,85dbc <_malloc_r+0x1c4>
   85da8:	00800504 	movi	r2,20
   85dac:	10c07836 	bltu	r2,r3,85f90 <_malloc_r+0x398>
   85db0:	198016c4 	addi	r6,r3,91
   85db4:	300490fa 	slli	r2,r6,3
   85db8:	003fbc06 	br	85cac <_malloc_r+0xb4>
   85dbc:	8804d1ba 	srli	r2,r17,6
   85dc0:	11800e04 	addi	r6,r2,56
   85dc4:	300490fa 	slli	r2,r6,3
   85dc8:	003fb806 	br	85cac <_malloc_r+0xb4>
   85dcc:	00807fc4 	movi	r2,511
   85dd0:	1140bb36 	bltu	r2,r5,860c0 <_malloc_r+0x4c8>
   85dd4:	2806d0fa 	srli	r3,r5,3
   85dd8:	573ffe04 	addi	fp,r10,-8
   85ddc:	00800044 	movi	r2,1
   85de0:	180890fa 	slli	r4,r3,3
   85de4:	1807d0ba 	srai	r3,r3,2
   85de8:	e1c00117 	ldw	r7,4(fp)
   85dec:	5909883a 	add	r4,r11,r4
   85df0:	21400217 	ldw	r5,8(r4)
   85df4:	10c4983a 	sll	r2,r2,r3
   85df8:	81000315 	stw	r4,12(r16)
   85dfc:	81400215 	stw	r5,8(r16)
   85e00:	388eb03a 	or	r7,r7,r2
   85e04:	2c000315 	stw	r16,12(r5)
   85e08:	24000215 	stw	r16,8(r4)
   85e0c:	e1c00115 	stw	r7,4(fp)
   85e10:	4807883a 	mov	r3,r9
   85e14:	4800cd16 	blt	r9,zero,8614c <_malloc_r+0x554>
   85e18:	1807d0ba 	srai	r3,r3,2
   85e1c:	00800044 	movi	r2,1
   85e20:	10c8983a 	sll	r4,r2,r3
   85e24:	39004436 	bltu	r7,r4,85f38 <_malloc_r+0x340>
   85e28:	21c4703a 	and	r2,r4,r7
   85e2c:	10000a1e 	bne	r2,zero,85e58 <_malloc_r+0x260>
   85e30:	2109883a 	add	r4,r4,r4
   85e34:	00bfff04 	movi	r2,-4
   85e38:	4884703a 	and	r2,r9,r2
   85e3c:	3906703a 	and	r3,r7,r4
   85e40:	12400104 	addi	r9,r2,4
   85e44:	1800041e 	bne	r3,zero,85e58 <_malloc_r+0x260>
   85e48:	2109883a 	add	r4,r4,r4
   85e4c:	3904703a 	and	r2,r7,r4
   85e50:	4a400104 	addi	r9,r9,4
   85e54:	103ffc26 	beq	r2,zero,85e48 <_malloc_r+0x250>
   85e58:	480490fa 	slli	r2,r9,3
   85e5c:	4819883a 	mov	r12,r9
   85e60:	023fff04 	movi	r8,-4
   85e64:	589b883a 	add	r13,r11,r2
   85e68:	6807883a 	mov	r3,r13
   85e6c:	014003c4 	movi	r5,15
   85e70:	1c000317 	ldw	r16,12(r3)
   85e74:	1c00041e 	bne	r3,r16,85e88 <_malloc_r+0x290>
   85e78:	0000a706 	br	86118 <_malloc_r+0x520>
   85e7c:	3000ab0e 	bge	r6,zero,8612c <_malloc_r+0x534>
   85e80:	84000317 	ldw	r16,12(r16)
   85e84:	1c00a426 	beq	r3,r16,86118 <_malloc_r+0x520>
   85e88:	80800117 	ldw	r2,4(r16)
   85e8c:	1204703a 	and	r2,r2,r8
   85e90:	144dc83a 	sub	r6,r2,r17
   85e94:	29bff90e 	bge	r5,r6,85e7c <_malloc_r+0x284>
   85e98:	81000317 	ldw	r4,12(r16)
   85e9c:	80c00217 	ldw	r3,8(r16)
   85ea0:	89400054 	ori	r5,r17,1
   85ea4:	8445883a 	add	r2,r16,r17
   85ea8:	20c00215 	stw	r3,8(r4)
   85eac:	19000315 	stw	r4,12(r3)
   85eb0:	81400115 	stw	r5,4(r16)
   85eb4:	1187883a 	add	r3,r2,r6
   85eb8:	31000054 	ori	r4,r6,1
   85ebc:	50800315 	stw	r2,12(r10)
   85ec0:	50800215 	stw	r2,8(r10)
   85ec4:	19800015 	stw	r6,0(r3)
   85ec8:	11000115 	stw	r4,4(r2)
   85ecc:	12800215 	stw	r10,8(r2)
   85ed0:	12800315 	stw	r10,12(r2)
   85ed4:	9009883a 	mov	r4,r18
   85ed8:	008b01c0 	call	8b01c <__malloc_unlock>
   85edc:	80c00204 	addi	r3,r16,8
   85ee0:	003f5906 	br	85c48 <_malloc_r+0x50>
   85ee4:	8109883a 	add	r4,r16,r4
   85ee8:	20800117 	ldw	r2,4(r4)
   85eec:	80c00217 	ldw	r3,8(r16)
   85ef0:	81400317 	ldw	r5,12(r16)
   85ef4:	10800054 	ori	r2,r2,1
   85ef8:	20800115 	stw	r2,4(r4)
   85efc:	28c00215 	stw	r3,8(r5)
   85f00:	19400315 	stw	r5,12(r3)
   85f04:	9009883a 	mov	r4,r18
   85f08:	008b01c0 	call	8b01c <__malloc_unlock>
   85f0c:	80c00204 	addi	r3,r16,8
   85f10:	003f4d06 	br	85c48 <_malloc_r+0x50>
   85f14:	80800204 	addi	r2,r16,8
   85f18:	14000317 	ldw	r16,12(r2)
   85f1c:	143f911e 	bne	r2,r16,85d64 <_malloc_r+0x16c>
   85f20:	1a400084 	addi	r9,r3,2
   85f24:	003f7306 	br	85cf4 <_malloc_r+0xfc>
   85f28:	88c00054 	ori	r3,r17,1
   85f2c:	8445883a 	add	r2,r16,r17
   85f30:	80c00115 	stw	r3,4(r16)
   85f34:	003fdf06 	br	85eb4 <_malloc_r+0x2bc>
   85f38:	e4000217 	ldw	r16,8(fp)
   85f3c:	00bfff04 	movi	r2,-4
   85f40:	80c00117 	ldw	r3,4(r16)
   85f44:	802d883a 	mov	r22,r16
   85f48:	18aa703a 	and	r21,r3,r2
   85f4c:	ac401636 	bltu	r21,r17,85fa8 <_malloc_r+0x3b0>
   85f50:	ac49c83a 	sub	r4,r21,r17
   85f54:	008003c4 	movi	r2,15
   85f58:	1100130e 	bge	r2,r4,85fa8 <_malloc_r+0x3b0>
   85f5c:	88800054 	ori	r2,r17,1
   85f60:	8447883a 	add	r3,r16,r17
   85f64:	80800115 	stw	r2,4(r16)
   85f68:	20800054 	ori	r2,r4,1
   85f6c:	18800115 	stw	r2,4(r3)
   85f70:	e0c00215 	stw	r3,8(fp)
   85f74:	9009883a 	mov	r4,r18
   85f78:	008b01c0 	call	8b01c <__malloc_unlock>
   85f7c:	80c00204 	addi	r3,r16,8
   85f80:	003f3106 	br	85c48 <_malloc_r+0x50>
   85f84:	39c00117 	ldw	r7,4(r7)
   85f88:	573ffe04 	addi	fp,r10,-8
   85f8c:	003fa006 	br	85e10 <_malloc_r+0x218>
   85f90:	00801504 	movi	r2,84
   85f94:	10c06736 	bltu	r2,r3,86134 <_malloc_r+0x53c>
   85f98:	8804d33a 	srli	r2,r17,12
   85f9c:	11801b84 	addi	r6,r2,110
   85fa0:	300490fa 	slli	r2,r6,3
   85fa4:	003f4106 	br	85cac <_malloc_r+0xb4>
   85fa8:	d0a6df17 	ldw	r2,-25732(gp)
   85fac:	d0e00617 	ldw	r3,-32744(gp)
   85fb0:	053fffc4 	movi	r20,-1
   85fb4:	10800404 	addi	r2,r2,16
   85fb8:	88a7883a 	add	r19,r17,r2
   85fbc:	1d000326 	beq	r3,r20,85fcc <_malloc_r+0x3d4>
   85fc0:	98c3ffc4 	addi	r3,r19,4095
   85fc4:	00bc0004 	movi	r2,-4096
   85fc8:	18a6703a 	and	r19,r3,r2
   85fcc:	9009883a 	mov	r4,r18
   85fd0:	980b883a 	mov	r5,r19
   85fd4:	0087d240 	call	87d24 <_sbrk_r>
   85fd8:	1009883a 	mov	r4,r2
   85fdc:	15000426 	beq	r2,r20,85ff0 <_malloc_r+0x3f8>
   85fe0:	854b883a 	add	r5,r16,r21
   85fe4:	1029883a 	mov	r20,r2
   85fe8:	11405a2e 	bgeu	r2,r5,86154 <_malloc_r+0x55c>
   85fec:	87000c26 	beq	r16,fp,86020 <_malloc_r+0x428>
   85ff0:	e4000217 	ldw	r16,8(fp)
   85ff4:	80c00117 	ldw	r3,4(r16)
   85ff8:	00bfff04 	movi	r2,-4
   85ffc:	1884703a 	and	r2,r3,r2
   86000:	14400336 	bltu	r2,r17,86010 <_malloc_r+0x418>
   86004:	1449c83a 	sub	r4,r2,r17
   86008:	008003c4 	movi	r2,15
   8600c:	113fd316 	blt	r2,r4,85f5c <_malloc_r+0x364>
   86010:	9009883a 	mov	r4,r18
   86014:	008b01c0 	call	8b01c <__malloc_unlock>
   86018:	0007883a 	mov	r3,zero
   8601c:	003f0a06 	br	85c48 <_malloc_r+0x50>
   86020:	05c00274 	movhi	r23,9
   86024:	bdc6dd04 	addi	r23,r23,7028
   86028:	b8800017 	ldw	r2,0(r23)
   8602c:	988d883a 	add	r6,r19,r2
   86030:	b9800015 	stw	r6,0(r23)
   86034:	d0e00617 	ldw	r3,-32744(gp)
   86038:	00bfffc4 	movi	r2,-1
   8603c:	18808e26 	beq	r3,r2,86278 <_malloc_r+0x680>
   86040:	2145c83a 	sub	r2,r4,r5
   86044:	3085883a 	add	r2,r6,r2
   86048:	b8800015 	stw	r2,0(r23)
   8604c:	20c001cc 	andi	r3,r4,7
   86050:	18005f1e 	bne	r3,zero,861d0 <_malloc_r+0x5d8>
   86054:	000b883a 	mov	r5,zero
   86058:	a4c5883a 	add	r2,r20,r19
   8605c:	1083ffcc 	andi	r2,r2,4095
   86060:	00c40004 	movi	r3,4096
   86064:	1887c83a 	sub	r3,r3,r2
   86068:	28e7883a 	add	r19,r5,r3
   8606c:	9009883a 	mov	r4,r18
   86070:	980b883a 	mov	r5,r19
   86074:	0087d240 	call	87d24 <_sbrk_r>
   86078:	1007883a 	mov	r3,r2
   8607c:	00bfffc4 	movi	r2,-1
   86080:	18807a26 	beq	r3,r2,8626c <_malloc_r+0x674>
   86084:	1d05c83a 	sub	r2,r3,r20
   86088:	9885883a 	add	r2,r19,r2
   8608c:	10c00054 	ori	r3,r2,1
   86090:	b8800017 	ldw	r2,0(r23)
   86094:	a021883a 	mov	r16,r20
   86098:	a0c00115 	stw	r3,4(r20)
   8609c:	9885883a 	add	r2,r19,r2
   860a0:	b8800015 	stw	r2,0(r23)
   860a4:	e5000215 	stw	r20,8(fp)
   860a8:	b7003626 	beq	r22,fp,86184 <_malloc_r+0x58c>
   860ac:	018003c4 	movi	r6,15
   860b0:	35404b36 	bltu	r6,r21,861e0 <_malloc_r+0x5e8>
   860b4:	00800044 	movi	r2,1
   860b8:	a0800115 	stw	r2,4(r20)
   860bc:	003fcd06 	br	85ff4 <_malloc_r+0x3fc>
   860c0:	2808d27a 	srli	r4,r5,9
   860c4:	2000371e 	bne	r4,zero,861a4 <_malloc_r+0x5ac>
   860c8:	2808d0fa 	srli	r4,r5,3
   860cc:	200690fa 	slli	r3,r4,3
   860d0:	1ad1883a 	add	r8,r3,r11
   860d4:	41800217 	ldw	r6,8(r8)
   860d8:	41805b26 	beq	r8,r6,86248 <_malloc_r+0x650>
   860dc:	30800117 	ldw	r2,4(r6)
   860e0:	00ffff04 	movi	r3,-4
   860e4:	10c4703a 	and	r2,r2,r3
   860e8:	2880022e 	bgeu	r5,r2,860f4 <_malloc_r+0x4fc>
   860ec:	31800217 	ldw	r6,8(r6)
   860f0:	41bffa1e 	bne	r8,r6,860dc <_malloc_r+0x4e4>
   860f4:	32000317 	ldw	r8,12(r6)
   860f8:	39c00117 	ldw	r7,4(r7)
   860fc:	82000315 	stw	r8,12(r16)
   86100:	81800215 	stw	r6,8(r16)
   86104:	07000274 	movhi	fp,9
   86108:	e73a3f04 	addi	fp,fp,-5892
   8610c:	34000315 	stw	r16,12(r6)
   86110:	44000215 	stw	r16,8(r8)
   86114:	003f3e06 	br	85e10 <_malloc_r+0x218>
   86118:	63000044 	addi	r12,r12,1
   8611c:	608000cc 	andi	r2,r12,3
   86120:	10005d26 	beq	r2,zero,86298 <_malloc_r+0x6a0>
   86124:	18c00204 	addi	r3,r3,8
   86128:	003f5106 	br	85e70 <_malloc_r+0x278>
   8612c:	8089883a 	add	r4,r16,r2
   86130:	003f6d06 	br	85ee8 <_malloc_r+0x2f0>
   86134:	00805504 	movi	r2,340
   86138:	10c02036 	bltu	r2,r3,861bc <_malloc_r+0x5c4>
   8613c:	8804d3fa 	srli	r2,r17,15
   86140:	11801dc4 	addi	r6,r2,119
   86144:	300490fa 	slli	r2,r6,3
   86148:	003ed806 	br	85cac <_malloc_r+0xb4>
   8614c:	48c000c4 	addi	r3,r9,3
   86150:	003f3106 	br	85e18 <_malloc_r+0x220>
   86154:	05c00274 	movhi	r23,9
   86158:	bdc6dd04 	addi	r23,r23,7028
   8615c:	b8800017 	ldw	r2,0(r23)
   86160:	988d883a 	add	r6,r19,r2
   86164:	b9800015 	stw	r6,0(r23)
   86168:	293fb21e 	bne	r5,r4,86034 <_malloc_r+0x43c>
   8616c:	2083ffcc 	andi	r2,r4,4095
   86170:	103fb01e 	bne	r2,zero,86034 <_malloc_r+0x43c>
   86174:	e4000217 	ldw	r16,8(fp)
   86178:	9d45883a 	add	r2,r19,r21
   8617c:	10800054 	ori	r2,r2,1
   86180:	80800115 	stw	r2,4(r16)
   86184:	b8c00017 	ldw	r3,0(r23)
   86188:	d0a6e017 	ldw	r2,-25728(gp)
   8618c:	10c0012e 	bgeu	r2,r3,86194 <_malloc_r+0x59c>
   86190:	d0e6e015 	stw	r3,-25728(gp)
   86194:	d0a6e117 	ldw	r2,-25724(gp)
   86198:	10ff962e 	bgeu	r2,r3,85ff4 <_malloc_r+0x3fc>
   8619c:	d0e6e115 	stw	r3,-25724(gp)
   861a0:	003f9406 	br	85ff4 <_malloc_r+0x3fc>
   861a4:	00800104 	movi	r2,4
   861a8:	11001e36 	bltu	r2,r4,86224 <_malloc_r+0x62c>
   861ac:	2804d1ba 	srli	r2,r5,6
   861b0:	11000e04 	addi	r4,r2,56
   861b4:	200690fa 	slli	r3,r4,3
   861b8:	003fc506 	br	860d0 <_malloc_r+0x4d8>
   861bc:	00815504 	movi	r2,1364
   861c0:	10c01d2e 	bgeu	r2,r3,86238 <_malloc_r+0x640>
   861c4:	01801f84 	movi	r6,126
   861c8:	0080fc04 	movi	r2,1008
   861cc:	003eb706 	br	85cac <_malloc_r+0xb4>
   861d0:	00800204 	movi	r2,8
   861d4:	10cbc83a 	sub	r5,r2,r3
   861d8:	2169883a 	add	r20,r4,r5
   861dc:	003f9e06 	br	86058 <_malloc_r+0x460>
   861e0:	00bffe04 	movi	r2,-8
   861e4:	a93ffd04 	addi	r4,r21,-12
   861e8:	2088703a 	and	r4,r4,r2
   861ec:	b10b883a 	add	r5,r22,r4
   861f0:	00c00144 	movi	r3,5
   861f4:	28c00215 	stw	r3,8(r5)
   861f8:	28c00115 	stw	r3,4(r5)
   861fc:	b0800117 	ldw	r2,4(r22)
   86200:	1080004c 	andi	r2,r2,1
   86204:	2084b03a 	or	r2,r4,r2
   86208:	b0800115 	stw	r2,4(r22)
   8620c:	313fdd2e 	bgeu	r6,r4,86184 <_malloc_r+0x58c>
   86210:	b1400204 	addi	r5,r22,8
   86214:	9009883a 	mov	r4,r18
   86218:	00850700 	call	85070 <_free_r>
   8621c:	e4000217 	ldw	r16,8(fp)
   86220:	003fd806 	br	86184 <_malloc_r+0x58c>
   86224:	00800504 	movi	r2,20
   86228:	11001536 	bltu	r2,r4,86280 <_malloc_r+0x688>
   8622c:	210016c4 	addi	r4,r4,91
   86230:	200690fa 	slli	r3,r4,3
   86234:	003fa606 	br	860d0 <_malloc_r+0x4d8>
   86238:	8804d4ba 	srli	r2,r17,18
   8623c:	11801f04 	addi	r6,r2,124
   86240:	300490fa 	slli	r2,r6,3
   86244:	003e9906 	br	85cac <_malloc_r+0xb4>
   86248:	2009d0ba 	srai	r4,r4,2
   8624c:	01400274 	movhi	r5,9
   86250:	297a3f04 	addi	r5,r5,-5892
   86254:	00c00044 	movi	r3,1
   86258:	28800117 	ldw	r2,4(r5)
   8625c:	1906983a 	sll	r3,r3,r4
   86260:	10c4b03a 	or	r2,r2,r3
   86264:	28800115 	stw	r2,4(r5)
   86268:	003fa306 	br	860f8 <_malloc_r+0x500>
   8626c:	0027883a 	mov	r19,zero
   86270:	00c00044 	movi	r3,1
   86274:	003f8606 	br	86090 <_malloc_r+0x498>
   86278:	d1200615 	stw	r4,-32744(gp)
   8627c:	003f7306 	br	8604c <_malloc_r+0x454>
   86280:	00801504 	movi	r2,84
   86284:	11001936 	bltu	r2,r4,862ec <_malloc_r+0x6f4>
   86288:	2804d33a 	srli	r2,r5,12
   8628c:	11001b84 	addi	r4,r2,110
   86290:	200690fa 	slli	r3,r4,3
   86294:	003f8e06 	br	860d0 <_malloc_r+0x4d8>
   86298:	480b883a 	mov	r5,r9
   8629c:	6807883a 	mov	r3,r13
   862a0:	288000cc 	andi	r2,r5,3
   862a4:	18fffe04 	addi	r3,r3,-8
   862a8:	297fffc4 	addi	r5,r5,-1
   862ac:	10001526 	beq	r2,zero,86304 <_malloc_r+0x70c>
   862b0:	18800217 	ldw	r2,8(r3)
   862b4:	10fffa26 	beq	r2,r3,862a0 <_malloc_r+0x6a8>
   862b8:	2109883a 	add	r4,r4,r4
   862bc:	393f1e36 	bltu	r7,r4,85f38 <_malloc_r+0x340>
   862c0:	203f1d26 	beq	r4,zero,85f38 <_malloc_r+0x340>
   862c4:	21c4703a 	and	r2,r4,r7
   862c8:	10000226 	beq	r2,zero,862d4 <_malloc_r+0x6dc>
   862cc:	6013883a 	mov	r9,r12
   862d0:	003ee106 	br	85e58 <_malloc_r+0x260>
   862d4:	2109883a 	add	r4,r4,r4
   862d8:	3904703a 	and	r2,r7,r4
   862dc:	63000104 	addi	r12,r12,4
   862e0:	103ffc26 	beq	r2,zero,862d4 <_malloc_r+0x6dc>
   862e4:	6013883a 	mov	r9,r12
   862e8:	003edb06 	br	85e58 <_malloc_r+0x260>
   862ec:	00805504 	movi	r2,340
   862f0:	11000836 	bltu	r2,r4,86314 <_malloc_r+0x71c>
   862f4:	2804d3fa 	srli	r2,r5,15
   862f8:	11001dc4 	addi	r4,r2,119
   862fc:	200690fa 	slli	r3,r4,3
   86300:	003f7306 	br	860d0 <_malloc_r+0x4d8>
   86304:	0104303a 	nor	r2,zero,r4
   86308:	388e703a 	and	r7,r7,r2
   8630c:	e1c00115 	stw	r7,4(fp)
   86310:	003fe906 	br	862b8 <_malloc_r+0x6c0>
   86314:	00815504 	movi	r2,1364
   86318:	1100032e 	bgeu	r2,r4,86328 <_malloc_r+0x730>
   8631c:	01001f84 	movi	r4,126
   86320:	00c0fc04 	movi	r3,1008
   86324:	003f6a06 	br	860d0 <_malloc_r+0x4d8>
   86328:	2804d4ba 	srli	r2,r5,18
   8632c:	11001f04 	addi	r4,r2,124
   86330:	200690fa 	slli	r3,r4,3
   86334:	003f6606 	br	860d0 <_malloc_r+0x4d8>

00086338 <memchr>:
   86338:	008000c4 	movi	r2,3
   8633c:	29403fcc 	andi	r5,r5,255
   86340:	2007883a 	mov	r3,r4
   86344:	1180022e 	bgeu	r2,r6,86350 <memchr+0x18>
   86348:	2084703a 	and	r2,r4,r2
   8634c:	10000b26 	beq	r2,zero,8637c <memchr+0x44>
   86350:	313fffc4 	addi	r4,r6,-1
   86354:	3000051e 	bne	r6,zero,8636c <memchr+0x34>
   86358:	00002c06 	br	8640c <memchr+0xd4>
   8635c:	213fffc4 	addi	r4,r4,-1
   86360:	00bfffc4 	movi	r2,-1
   86364:	18c00044 	addi	r3,r3,1
   86368:	20802826 	beq	r4,r2,8640c <memchr+0xd4>
   8636c:	18800003 	ldbu	r2,0(r3)
   86370:	28bffa1e 	bne	r5,r2,8635c <memchr+0x24>
   86374:	1805883a 	mov	r2,r3
   86378:	f800283a 	ret
   8637c:	0011883a 	mov	r8,zero
   86380:	0007883a 	mov	r3,zero
   86384:	01c00104 	movi	r7,4
   86388:	4004923a 	slli	r2,r8,8
   8638c:	18c00044 	addi	r3,r3,1
   86390:	1151883a 	add	r8,r2,r5
   86394:	19fffc1e 	bne	r3,r7,86388 <memchr+0x50>
   86398:	02bfbff4 	movhi	r10,65279
   8639c:	52bfbfc4 	addi	r10,r10,-257
   863a0:	02602074 	movhi	r9,32897
   863a4:	4a602004 	addi	r9,r9,-32640
   863a8:	02c000c4 	movi	r11,3
   863ac:	20800017 	ldw	r2,0(r4)
   863b0:	31bfff04 	addi	r6,r6,-4
   863b4:	200f883a 	mov	r7,r4
   863b8:	1204f03a 	xor	r2,r2,r8
   863bc:	1287883a 	add	r3,r2,r10
   863c0:	1a46703a 	and	r3,r3,r9
   863c4:	0084303a 	nor	r2,zero,r2
   863c8:	10c4703a 	and	r2,r2,r3
   863cc:	10000b26 	beq	r2,zero,863fc <memchr+0xc4>
   863d0:	20800003 	ldbu	r2,0(r4)
   863d4:	28800f26 	beq	r5,r2,86414 <memchr+0xdc>
   863d8:	20800043 	ldbu	r2,1(r4)
   863dc:	21c00044 	addi	r7,r4,1
   863e0:	28800c26 	beq	r5,r2,86414 <memchr+0xdc>
   863e4:	20800083 	ldbu	r2,2(r4)
   863e8:	21c00084 	addi	r7,r4,2
   863ec:	28800926 	beq	r5,r2,86414 <memchr+0xdc>
   863f0:	208000c3 	ldbu	r2,3(r4)
   863f4:	21c000c4 	addi	r7,r4,3
   863f8:	28800626 	beq	r5,r2,86414 <memchr+0xdc>
   863fc:	21000104 	addi	r4,r4,4
   86400:	59bfea36 	bltu	r11,r6,863ac <memchr+0x74>
   86404:	2007883a 	mov	r3,r4
   86408:	003fd106 	br	86350 <memchr+0x18>
   8640c:	0005883a 	mov	r2,zero
   86410:	f800283a 	ret
   86414:	3805883a 	mov	r2,r7
   86418:	f800283a 	ret

0008641c <memcpy>:
   8641c:	01c003c4 	movi	r7,15
   86420:	2007883a 	mov	r3,r4
   86424:	3980032e 	bgeu	r7,r6,86434 <memcpy+0x18>
   86428:	2904b03a 	or	r2,r5,r4
   8642c:	108000cc 	andi	r2,r2,3
   86430:	10000926 	beq	r2,zero,86458 <memcpy+0x3c>
   86434:	30000626 	beq	r6,zero,86450 <memcpy+0x34>
   86438:	30cd883a 	add	r6,r6,r3
   8643c:	28800003 	ldbu	r2,0(r5)
   86440:	29400044 	addi	r5,r5,1
   86444:	18800005 	stb	r2,0(r3)
   86448:	18c00044 	addi	r3,r3,1
   8644c:	30fffb1e 	bne	r6,r3,8643c <memcpy+0x20>
   86450:	2005883a 	mov	r2,r4
   86454:	f800283a 	ret
   86458:	3811883a 	mov	r8,r7
   8645c:	200f883a 	mov	r7,r4
   86460:	28c00017 	ldw	r3,0(r5)
   86464:	31bffc04 	addi	r6,r6,-16
   86468:	38c00015 	stw	r3,0(r7)
   8646c:	28800117 	ldw	r2,4(r5)
   86470:	38800115 	stw	r2,4(r7)
   86474:	28c00217 	ldw	r3,8(r5)
   86478:	38c00215 	stw	r3,8(r7)
   8647c:	28800317 	ldw	r2,12(r5)
   86480:	29400404 	addi	r5,r5,16
   86484:	38800315 	stw	r2,12(r7)
   86488:	39c00404 	addi	r7,r7,16
   8648c:	41bff436 	bltu	r8,r6,86460 <memcpy+0x44>
   86490:	008000c4 	movi	r2,3
   86494:	1180072e 	bgeu	r2,r6,864b4 <memcpy+0x98>
   86498:	1007883a 	mov	r3,r2
   8649c:	28800017 	ldw	r2,0(r5)
   864a0:	31bfff04 	addi	r6,r6,-4
   864a4:	29400104 	addi	r5,r5,4
   864a8:	38800015 	stw	r2,0(r7)
   864ac:	39c00104 	addi	r7,r7,4
   864b0:	19bffa36 	bltu	r3,r6,8649c <memcpy+0x80>
   864b4:	3807883a 	mov	r3,r7
   864b8:	003fde06 	br	86434 <memcpy+0x18>

000864bc <memmove>:
   864bc:	2807883a 	mov	r3,r5
   864c0:	2011883a 	mov	r8,r4
   864c4:	29000c2e 	bgeu	r5,r4,864f8 <memmove+0x3c>
   864c8:	298f883a 	add	r7,r5,r6
   864cc:	21c00a2e 	bgeu	r4,r7,864f8 <memmove+0x3c>
   864d0:	30000726 	beq	r6,zero,864f0 <memmove+0x34>
   864d4:	2187883a 	add	r3,r4,r6
   864d8:	198dc83a 	sub	r6,r3,r6
   864dc:	39ffffc4 	addi	r7,r7,-1
   864e0:	38800003 	ldbu	r2,0(r7)
   864e4:	18ffffc4 	addi	r3,r3,-1
   864e8:	18800005 	stb	r2,0(r3)
   864ec:	19bffb1e 	bne	r3,r6,864dc <memmove+0x20>
   864f0:	2005883a 	mov	r2,r4
   864f4:	f800283a 	ret
   864f8:	01c003c4 	movi	r7,15
   864fc:	39800a36 	bltu	r7,r6,86528 <memmove+0x6c>
   86500:	303ffb26 	beq	r6,zero,864f0 <memmove+0x34>
   86504:	400f883a 	mov	r7,r8
   86508:	320d883a 	add	r6,r6,r8
   8650c:	28800003 	ldbu	r2,0(r5)
   86510:	29400044 	addi	r5,r5,1
   86514:	38800005 	stb	r2,0(r7)
   86518:	39c00044 	addi	r7,r7,1
   8651c:	39bffb1e 	bne	r7,r6,8650c <memmove+0x50>
   86520:	2005883a 	mov	r2,r4
   86524:	f800283a 	ret
   86528:	1904b03a 	or	r2,r3,r4
   8652c:	108000cc 	andi	r2,r2,3
   86530:	103ff31e 	bne	r2,zero,86500 <memmove+0x44>
   86534:	3811883a 	mov	r8,r7
   86538:	180b883a 	mov	r5,r3
   8653c:	200f883a 	mov	r7,r4
   86540:	28c00017 	ldw	r3,0(r5)
   86544:	31bffc04 	addi	r6,r6,-16
   86548:	38c00015 	stw	r3,0(r7)
   8654c:	28800117 	ldw	r2,4(r5)
   86550:	38800115 	stw	r2,4(r7)
   86554:	28c00217 	ldw	r3,8(r5)
   86558:	38c00215 	stw	r3,8(r7)
   8655c:	28800317 	ldw	r2,12(r5)
   86560:	29400404 	addi	r5,r5,16
   86564:	38800315 	stw	r2,12(r7)
   86568:	39c00404 	addi	r7,r7,16
   8656c:	41bff436 	bltu	r8,r6,86540 <memmove+0x84>
   86570:	008000c4 	movi	r2,3
   86574:	1180072e 	bgeu	r2,r6,86594 <memmove+0xd8>
   86578:	1007883a 	mov	r3,r2
   8657c:	28800017 	ldw	r2,0(r5)
   86580:	31bfff04 	addi	r6,r6,-4
   86584:	29400104 	addi	r5,r5,4
   86588:	38800015 	stw	r2,0(r7)
   8658c:	39c00104 	addi	r7,r7,4
   86590:	19bffa36 	bltu	r3,r6,8657c <memmove+0xc0>
   86594:	3811883a 	mov	r8,r7
   86598:	003fd906 	br	86500 <memmove+0x44>

0008659c <memset>:
   8659c:	008000c4 	movi	r2,3
   865a0:	29403fcc 	andi	r5,r5,255
   865a4:	2007883a 	mov	r3,r4
   865a8:	1180022e 	bgeu	r2,r6,865b4 <memset+0x18>
   865ac:	2084703a 	and	r2,r4,r2
   865b0:	10000826 	beq	r2,zero,865d4 <memset+0x38>
   865b4:	30000526 	beq	r6,zero,865cc <memset+0x30>
   865b8:	2805883a 	mov	r2,r5
   865bc:	30cd883a 	add	r6,r6,r3
   865c0:	18800005 	stb	r2,0(r3)
   865c4:	18c00044 	addi	r3,r3,1
   865c8:	19bffd1e 	bne	r3,r6,865c0 <memset+0x24>
   865cc:	2005883a 	mov	r2,r4
   865d0:	f800283a 	ret
   865d4:	2804923a 	slli	r2,r5,8
   865d8:	020003c4 	movi	r8,15
   865dc:	200f883a 	mov	r7,r4
   865e0:	2884b03a 	or	r2,r5,r2
   865e4:	1006943a 	slli	r3,r2,16
   865e8:	10c6b03a 	or	r3,r2,r3
   865ec:	41800a2e 	bgeu	r8,r6,86618 <memset+0x7c>
   865f0:	4005883a 	mov	r2,r8
   865f4:	31bffc04 	addi	r6,r6,-16
   865f8:	38c00015 	stw	r3,0(r7)
   865fc:	38c00115 	stw	r3,4(r7)
   86600:	38c00215 	stw	r3,8(r7)
   86604:	38c00315 	stw	r3,12(r7)
   86608:	39c00404 	addi	r7,r7,16
   8660c:	11bff936 	bltu	r2,r6,865f4 <memset+0x58>
   86610:	008000c4 	movi	r2,3
   86614:	1180052e 	bgeu	r2,r6,8662c <memset+0x90>
   86618:	31bfff04 	addi	r6,r6,-4
   8661c:	008000c4 	movi	r2,3
   86620:	38c00015 	stw	r3,0(r7)
   86624:	39c00104 	addi	r7,r7,4
   86628:	11bffb36 	bltu	r2,r6,86618 <memset+0x7c>
   8662c:	3807883a 	mov	r3,r7
   86630:	003fe006 	br	865b4 <memset+0x18>

00086634 <_Bfree>:
   86634:	28000826 	beq	r5,zero,86658 <_Bfree+0x24>
   86638:	28800117 	ldw	r2,4(r5)
   8663c:	21001317 	ldw	r4,76(r4)
   86640:	1085883a 	add	r2,r2,r2
   86644:	1085883a 	add	r2,r2,r2
   86648:	1105883a 	add	r2,r2,r4
   8664c:	10c00017 	ldw	r3,0(r2)
   86650:	28c00015 	stw	r3,0(r5)
   86654:	11400015 	stw	r5,0(r2)
   86658:	f800283a 	ret

0008665c <__hi0bits>:
   8665c:	20bfffec 	andhi	r2,r4,65535
   86660:	10001426 	beq	r2,zero,866b4 <__hi0bits+0x58>
   86664:	0007883a 	mov	r3,zero
   86668:	20bfc02c 	andhi	r2,r4,65280
   8666c:	1000021e 	bne	r2,zero,86678 <__hi0bits+0x1c>
   86670:	2008923a 	slli	r4,r4,8
   86674:	18c00204 	addi	r3,r3,8
   86678:	20bc002c 	andhi	r2,r4,61440
   8667c:	1000021e 	bne	r2,zero,86688 <__hi0bits+0x2c>
   86680:	2008913a 	slli	r4,r4,4
   86684:	18c00104 	addi	r3,r3,4
   86688:	20b0002c 	andhi	r2,r4,49152
   8668c:	1000031e 	bne	r2,zero,8669c <__hi0bits+0x40>
   86690:	2105883a 	add	r2,r4,r4
   86694:	18c00084 	addi	r3,r3,2
   86698:	1089883a 	add	r4,r2,r2
   8669c:	20000316 	blt	r4,zero,866ac <__hi0bits+0x50>
   866a0:	2090002c 	andhi	r2,r4,16384
   866a4:	10000626 	beq	r2,zero,866c0 <__hi0bits+0x64>
   866a8:	18c00044 	addi	r3,r3,1
   866ac:	1805883a 	mov	r2,r3
   866b0:	f800283a 	ret
   866b4:	2008943a 	slli	r4,r4,16
   866b8:	00c00404 	movi	r3,16
   866bc:	003fea06 	br	86668 <__hi0bits+0xc>
   866c0:	00c00804 	movi	r3,32
   866c4:	1805883a 	mov	r2,r3
   866c8:	f800283a 	ret

000866cc <__lo0bits>:
   866cc:	20c00017 	ldw	r3,0(r4)
   866d0:	188001cc 	andi	r2,r3,7
   866d4:	10000a26 	beq	r2,zero,86700 <__lo0bits+0x34>
   866d8:	1880004c 	andi	r2,r3,1
   866dc:	1005003a 	cmpeq	r2,r2,zero
   866e0:	10002126 	beq	r2,zero,86768 <__lo0bits+0x9c>
   866e4:	1880008c 	andi	r2,r3,2
   866e8:	1000251e 	bne	r2,zero,86780 <__lo0bits+0xb4>
   866ec:	1804d0ba 	srli	r2,r3,2
   866f0:	01400084 	movi	r5,2
   866f4:	20800015 	stw	r2,0(r4)
   866f8:	2805883a 	mov	r2,r5
   866fc:	f800283a 	ret
   86700:	18bfffcc 	andi	r2,r3,65535
   86704:	10001526 	beq	r2,zero,8675c <__lo0bits+0x90>
   86708:	000b883a 	mov	r5,zero
   8670c:	18803fcc 	andi	r2,r3,255
   86710:	1000021e 	bne	r2,zero,8671c <__lo0bits+0x50>
   86714:	1806d23a 	srli	r3,r3,8
   86718:	29400204 	addi	r5,r5,8
   8671c:	188003cc 	andi	r2,r3,15
   86720:	1000021e 	bne	r2,zero,8672c <__lo0bits+0x60>
   86724:	1806d13a 	srli	r3,r3,4
   86728:	29400104 	addi	r5,r5,4
   8672c:	188000cc 	andi	r2,r3,3
   86730:	1000021e 	bne	r2,zero,8673c <__lo0bits+0x70>
   86734:	1806d0ba 	srli	r3,r3,2
   86738:	29400084 	addi	r5,r5,2
   8673c:	1880004c 	andi	r2,r3,1
   86740:	1000031e 	bne	r2,zero,86750 <__lo0bits+0x84>
   86744:	1806d07a 	srli	r3,r3,1
   86748:	18000a26 	beq	r3,zero,86774 <__lo0bits+0xa8>
   8674c:	29400044 	addi	r5,r5,1
   86750:	2805883a 	mov	r2,r5
   86754:	20c00015 	stw	r3,0(r4)
   86758:	f800283a 	ret
   8675c:	1806d43a 	srli	r3,r3,16
   86760:	01400404 	movi	r5,16
   86764:	003fe906 	br	8670c <__lo0bits+0x40>
   86768:	000b883a 	mov	r5,zero
   8676c:	2805883a 	mov	r2,r5
   86770:	f800283a 	ret
   86774:	01400804 	movi	r5,32
   86778:	2805883a 	mov	r2,r5
   8677c:	f800283a 	ret
   86780:	1804d07a 	srli	r2,r3,1
   86784:	01400044 	movi	r5,1
   86788:	20800015 	stw	r2,0(r4)
   8678c:	003fda06 	br	866f8 <__lo0bits+0x2c>

00086790 <__mcmp>:
   86790:	20800417 	ldw	r2,16(r4)
   86794:	28c00417 	ldw	r3,16(r5)
   86798:	10cfc83a 	sub	r7,r2,r3
   8679c:	38000c1e 	bne	r7,zero,867d0 <__mcmp+0x40>
   867a0:	18c5883a 	add	r2,r3,r3
   867a4:	1085883a 	add	r2,r2,r2
   867a8:	10c00504 	addi	r3,r2,20
   867ac:	21000504 	addi	r4,r4,20
   867b0:	28cb883a 	add	r5,r5,r3
   867b4:	2085883a 	add	r2,r4,r2
   867b8:	10bfff04 	addi	r2,r2,-4
   867bc:	297fff04 	addi	r5,r5,-4
   867c0:	11800017 	ldw	r6,0(r2)
   867c4:	28c00017 	ldw	r3,0(r5)
   867c8:	30c0031e 	bne	r6,r3,867d8 <__mcmp+0x48>
   867cc:	20bffa36 	bltu	r4,r2,867b8 <__mcmp+0x28>
   867d0:	3805883a 	mov	r2,r7
   867d4:	f800283a 	ret
   867d8:	30c00336 	bltu	r6,r3,867e8 <__mcmp+0x58>
   867dc:	01c00044 	movi	r7,1
   867e0:	3805883a 	mov	r2,r7
   867e4:	f800283a 	ret
   867e8:	01ffffc4 	movi	r7,-1
   867ec:	003ff806 	br	867d0 <__mcmp+0x40>

000867f0 <__ulp>:
   867f0:	295ffc2c 	andhi	r5,r5,32752
   867f4:	013f3034 	movhi	r4,64704
   867f8:	290b883a 	add	r5,r5,r4
   867fc:	0145c83a 	sub	r2,zero,r5
   86800:	1007d53a 	srai	r3,r2,20
   86804:	000d883a 	mov	r6,zero
   86808:	0140040e 	bge	zero,r5,8681c <__ulp+0x2c>
   8680c:	280f883a 	mov	r7,r5
   86810:	3807883a 	mov	r3,r7
   86814:	3005883a 	mov	r2,r6
   86818:	f800283a 	ret
   8681c:	008004c4 	movi	r2,19
   86820:	193ffb04 	addi	r4,r3,-20
   86824:	10c00c0e 	bge	r2,r3,86858 <__ulp+0x68>
   86828:	008007c4 	movi	r2,31
   8682c:	1107c83a 	sub	r3,r2,r4
   86830:	00800784 	movi	r2,30
   86834:	01400044 	movi	r5,1
   86838:	11000216 	blt	r2,r4,86844 <__ulp+0x54>
   8683c:	00800044 	movi	r2,1
   86840:	10ca983a 	sll	r5,r2,r3
   86844:	000f883a 	mov	r7,zero
   86848:	280d883a 	mov	r6,r5
   8684c:	3807883a 	mov	r3,r7
   86850:	3005883a 	mov	r2,r6
   86854:	f800283a 	ret
   86858:	00800234 	movhi	r2,8
   8685c:	10cfd83a 	sra	r7,r2,r3
   86860:	000d883a 	mov	r6,zero
   86864:	3005883a 	mov	r2,r6
   86868:	3807883a 	mov	r3,r7
   8686c:	f800283a 	ret

00086870 <__b2d>:
   86870:	20800417 	ldw	r2,16(r4)
   86874:	defff904 	addi	sp,sp,-28
   86878:	dd000415 	stw	r20,16(sp)
   8687c:	1085883a 	add	r2,r2,r2
   86880:	25000504 	addi	r20,r4,20
   86884:	1085883a 	add	r2,r2,r2
   86888:	dc000015 	stw	r16,0(sp)
   8688c:	a0a1883a 	add	r16,r20,r2
   86890:	dd400515 	stw	r21,20(sp)
   86894:	857fff17 	ldw	r21,-4(r16)
   86898:	dc400115 	stw	r17,4(sp)
   8689c:	dfc00615 	stw	ra,24(sp)
   868a0:	a809883a 	mov	r4,r21
   868a4:	2823883a 	mov	r17,r5
   868a8:	dcc00315 	stw	r19,12(sp)
   868ac:	dc800215 	stw	r18,8(sp)
   868b0:	008665c0 	call	8665c <__hi0bits>
   868b4:	100b883a 	mov	r5,r2
   868b8:	00800804 	movi	r2,32
   868bc:	1145c83a 	sub	r2,r2,r5
   868c0:	88800015 	stw	r2,0(r17)
   868c4:	00800284 	movi	r2,10
   868c8:	80ffff04 	addi	r3,r16,-4
   868cc:	11401416 	blt	r2,r5,86920 <__b2d+0xb0>
   868d0:	008002c4 	movi	r2,11
   868d4:	1149c83a 	sub	r4,r2,r5
   868d8:	a0c02736 	bltu	r20,r3,86978 <__b2d+0x108>
   868dc:	000d883a 	mov	r6,zero
   868e0:	28800544 	addi	r2,r5,21
   868e4:	a906d83a 	srl	r3,r21,r4
   868e8:	a884983a 	sll	r2,r21,r2
   868ec:	1ccffc34 	orhi	r19,r3,16368
   868f0:	11a4b03a 	or	r18,r2,r6
   868f4:	9005883a 	mov	r2,r18
   868f8:	9807883a 	mov	r3,r19
   868fc:	dfc00617 	ldw	ra,24(sp)
   86900:	dd400517 	ldw	r21,20(sp)
   86904:	dd000417 	ldw	r20,16(sp)
   86908:	dcc00317 	ldw	r19,12(sp)
   8690c:	dc800217 	ldw	r18,8(sp)
   86910:	dc400117 	ldw	r17,4(sp)
   86914:	dc000017 	ldw	r16,0(sp)
   86918:	dec00704 	addi	sp,sp,28
   8691c:	f800283a 	ret
   86920:	a0c00e36 	bltu	r20,r3,8695c <__b2d+0xec>
   86924:	293ffd44 	addi	r4,r5,-11
   86928:	000d883a 	mov	r6,zero
   8692c:	20000f26 	beq	r4,zero,8696c <__b2d+0xfc>
   86930:	00800804 	movi	r2,32
   86934:	110bc83a 	sub	r5,r2,r4
   86938:	a0c01236 	bltu	r20,r3,86984 <__b2d+0x114>
   8693c:	000f883a 	mov	r7,zero
   86940:	a904983a 	sll	r2,r21,r4
   86944:	3146d83a 	srl	r3,r6,r5
   86948:	3108983a 	sll	r4,r6,r4
   8694c:	108ffc34 	orhi	r2,r2,16368
   86950:	18a6b03a 	or	r19,r3,r2
   86954:	3924b03a 	or	r18,r7,r4
   86958:	003fe606 	br	868f4 <__b2d+0x84>
   8695c:	293ffd44 	addi	r4,r5,-11
   86960:	81bffe17 	ldw	r6,-8(r16)
   86964:	80fffe04 	addi	r3,r16,-8
   86968:	203ff11e 	bne	r4,zero,86930 <__b2d+0xc0>
   8696c:	accffc34 	orhi	r19,r21,16368
   86970:	3025883a 	mov	r18,r6
   86974:	003fdf06 	br	868f4 <__b2d+0x84>
   86978:	18bfff17 	ldw	r2,-4(r3)
   8697c:	110cd83a 	srl	r6,r2,r4
   86980:	003fd706 	br	868e0 <__b2d+0x70>
   86984:	18bfff17 	ldw	r2,-4(r3)
   86988:	114ed83a 	srl	r7,r2,r5
   8698c:	003fec06 	br	86940 <__b2d+0xd0>

00086990 <__ratio>:
   86990:	defff904 	addi	sp,sp,-28
   86994:	dc400215 	stw	r17,8(sp)
   86998:	2823883a 	mov	r17,r5
   8699c:	d80b883a 	mov	r5,sp
   869a0:	dfc00615 	stw	ra,24(sp)
   869a4:	dd000515 	stw	r20,20(sp)
   869a8:	dcc00415 	stw	r19,16(sp)
   869ac:	dc800315 	stw	r18,12(sp)
   869b0:	2025883a 	mov	r18,r4
   869b4:	00868700 	call	86870 <__b2d>
   869b8:	8809883a 	mov	r4,r17
   869bc:	d9400104 	addi	r5,sp,4
   869c0:	1027883a 	mov	r19,r2
   869c4:	1829883a 	mov	r20,r3
   869c8:	00868700 	call	86870 <__b2d>
   869cc:	89000417 	ldw	r4,16(r17)
   869d0:	91c00417 	ldw	r7,16(r18)
   869d4:	d9800117 	ldw	r6,4(sp)
   869d8:	180b883a 	mov	r5,r3
   869dc:	390fc83a 	sub	r7,r7,r4
   869e0:	1009883a 	mov	r4,r2
   869e4:	d8800017 	ldw	r2,0(sp)
   869e8:	380e917a 	slli	r7,r7,5
   869ec:	2011883a 	mov	r8,r4
   869f0:	1185c83a 	sub	r2,r2,r6
   869f4:	11c5883a 	add	r2,r2,r7
   869f8:	1006953a 	slli	r3,r2,20
   869fc:	2813883a 	mov	r9,r5
   86a00:	00800d0e 	bge	zero,r2,86a38 <__ratio+0xa8>
   86a04:	1d29883a 	add	r20,r3,r20
   86a08:	a00b883a 	mov	r5,r20
   86a0c:	480f883a 	mov	r7,r9
   86a10:	9809883a 	mov	r4,r19
   86a14:	400d883a 	mov	r6,r8
   86a18:	0089a4c0 	call	89a4c <__divdf3>
   86a1c:	dfc00617 	ldw	ra,24(sp)
   86a20:	dd000517 	ldw	r20,20(sp)
   86a24:	dcc00417 	ldw	r19,16(sp)
   86a28:	dc800317 	ldw	r18,12(sp)
   86a2c:	dc400217 	ldw	r17,8(sp)
   86a30:	dec00704 	addi	sp,sp,28
   86a34:	f800283a 	ret
   86a38:	28d3c83a 	sub	r9,r5,r3
   86a3c:	003ff206 	br	86a08 <__ratio+0x78>

00086a40 <_mprec_log10>:
   86a40:	defffe04 	addi	sp,sp,-8
   86a44:	008005c4 	movi	r2,23
   86a48:	dc000015 	stw	r16,0(sp)
   86a4c:	dfc00115 	stw	ra,4(sp)
   86a50:	2021883a 	mov	r16,r4
   86a54:	11000c16 	blt	r2,r4,86a88 <_mprec_log10+0x48>
   86a58:	200490fa 	slli	r2,r4,3
   86a5c:	00c00274 	movhi	r3,9
   86a60:	18f89e04 	addi	r3,r3,-7560
   86a64:	10c5883a 	add	r2,r2,r3
   86a68:	12400117 	ldw	r9,4(r2)
   86a6c:	12000017 	ldw	r8,0(r2)
   86a70:	4807883a 	mov	r3,r9
   86a74:	4005883a 	mov	r2,r8
   86a78:	dfc00117 	ldw	ra,4(sp)
   86a7c:	dc000017 	ldw	r16,0(sp)
   86a80:	dec00204 	addi	sp,sp,8
   86a84:	f800283a 	ret
   86a88:	0011883a 	mov	r8,zero
   86a8c:	024ffc34 	movhi	r9,16368
   86a90:	0005883a 	mov	r2,zero
   86a94:	00d00934 	movhi	r3,16420
   86a98:	480b883a 	mov	r5,r9
   86a9c:	4009883a 	mov	r4,r8
   86aa0:	180f883a 	mov	r7,r3
   86aa4:	100d883a 	mov	r6,r2
   86aa8:	00896880 	call	89688 <__muldf3>
   86aac:	843fffc4 	addi	r16,r16,-1
   86ab0:	1011883a 	mov	r8,r2
   86ab4:	1813883a 	mov	r9,r3
   86ab8:	803ff51e 	bne	r16,zero,86a90 <_mprec_log10+0x50>
   86abc:	4005883a 	mov	r2,r8
   86ac0:	4807883a 	mov	r3,r9
   86ac4:	dfc00117 	ldw	ra,4(sp)
   86ac8:	dc000017 	ldw	r16,0(sp)
   86acc:	dec00204 	addi	sp,sp,8
   86ad0:	f800283a 	ret

00086ad4 <__copybits>:
   86ad4:	297fffc4 	addi	r5,r5,-1
   86ad8:	30800417 	ldw	r2,16(r6)
   86adc:	280bd17a 	srai	r5,r5,5
   86ae0:	31800504 	addi	r6,r6,20
   86ae4:	1085883a 	add	r2,r2,r2
   86ae8:	294b883a 	add	r5,r5,r5
   86aec:	294b883a 	add	r5,r5,r5
   86af0:	1085883a 	add	r2,r2,r2
   86af4:	290b883a 	add	r5,r5,r4
   86af8:	3087883a 	add	r3,r6,r2
   86afc:	29400104 	addi	r5,r5,4
   86b00:	30c0052e 	bgeu	r6,r3,86b18 <__copybits+0x44>
   86b04:	30800017 	ldw	r2,0(r6)
   86b08:	31800104 	addi	r6,r6,4
   86b0c:	20800015 	stw	r2,0(r4)
   86b10:	21000104 	addi	r4,r4,4
   86b14:	30fffb36 	bltu	r6,r3,86b04 <__copybits+0x30>
   86b18:	2140032e 	bgeu	r4,r5,86b28 <__copybits+0x54>
   86b1c:	20000015 	stw	zero,0(r4)
   86b20:	21000104 	addi	r4,r4,4
   86b24:	217ffd36 	bltu	r4,r5,86b1c <__copybits+0x48>
   86b28:	f800283a 	ret

00086b2c <__any_on>:
   86b2c:	20800417 	ldw	r2,16(r4)
   86b30:	2807d17a 	srai	r3,r5,5
   86b34:	21000504 	addi	r4,r4,20
   86b38:	10c00d0e 	bge	r2,r3,86b70 <__any_on+0x44>
   86b3c:	1085883a 	add	r2,r2,r2
   86b40:	1085883a 	add	r2,r2,r2
   86b44:	208d883a 	add	r6,r4,r2
   86b48:	2180182e 	bgeu	r4,r6,86bac <__any_on+0x80>
   86b4c:	30bfff17 	ldw	r2,-4(r6)
   86b50:	30ffff04 	addi	r3,r6,-4
   86b54:	1000041e 	bne	r2,zero,86b68 <__any_on+0x3c>
   86b58:	20c0142e 	bgeu	r4,r3,86bac <__any_on+0x80>
   86b5c:	18ffff04 	addi	r3,r3,-4
   86b60:	18800017 	ldw	r2,0(r3)
   86b64:	103ffc26 	beq	r2,zero,86b58 <__any_on+0x2c>
   86b68:	00800044 	movi	r2,1
   86b6c:	f800283a 	ret
   86b70:	18800a0e 	bge	r3,r2,86b9c <__any_on+0x70>
   86b74:	294007cc 	andi	r5,r5,31
   86b78:	28000826 	beq	r5,zero,86b9c <__any_on+0x70>
   86b7c:	18c5883a 	add	r2,r3,r3
   86b80:	1085883a 	add	r2,r2,r2
   86b84:	208d883a 	add	r6,r4,r2
   86b88:	30c00017 	ldw	r3,0(r6)
   86b8c:	1944d83a 	srl	r2,r3,r5
   86b90:	1144983a 	sll	r2,r2,r5
   86b94:	18bff41e 	bne	r3,r2,86b68 <__any_on+0x3c>
   86b98:	003feb06 	br	86b48 <__any_on+0x1c>
   86b9c:	18c5883a 	add	r2,r3,r3
   86ba0:	1085883a 	add	r2,r2,r2
   86ba4:	208d883a 	add	r6,r4,r2
   86ba8:	003fe706 	br	86b48 <__any_on+0x1c>
   86bac:	0005883a 	mov	r2,zero
   86bb0:	f800283a 	ret

00086bb4 <_Balloc>:
   86bb4:	20c01317 	ldw	r3,76(r4)
   86bb8:	defffb04 	addi	sp,sp,-20
   86bbc:	dcc00315 	stw	r19,12(sp)
   86bc0:	dc800215 	stw	r18,8(sp)
   86bc4:	dfc00415 	stw	ra,16(sp)
   86bc8:	2825883a 	mov	r18,r5
   86bcc:	dc400115 	stw	r17,4(sp)
   86bd0:	dc000015 	stw	r16,0(sp)
   86bd4:	2027883a 	mov	r19,r4
   86bd8:	01800404 	movi	r6,16
   86bdc:	01400104 	movi	r5,4
   86be0:	18001726 	beq	r3,zero,86c40 <_Balloc+0x8c>
   86be4:	01400044 	movi	r5,1
   86be8:	9485883a 	add	r2,r18,r18
   86bec:	2ca2983a 	sll	r17,r5,r18
   86bf0:	1085883a 	add	r2,r2,r2
   86bf4:	10c7883a 	add	r3,r2,r3
   86bf8:	1c000017 	ldw	r16,0(r3)
   86bfc:	8c4d883a 	add	r6,r17,r17
   86c00:	318d883a 	add	r6,r6,r6
   86c04:	9809883a 	mov	r4,r19
   86c08:	31800504 	addi	r6,r6,20
   86c0c:	80001226 	beq	r16,zero,86c58 <_Balloc+0xa4>
   86c10:	80800017 	ldw	r2,0(r16)
   86c14:	18800015 	stw	r2,0(r3)
   86c18:	80000415 	stw	zero,16(r16)
   86c1c:	80000315 	stw	zero,12(r16)
   86c20:	8005883a 	mov	r2,r16
   86c24:	dfc00417 	ldw	ra,16(sp)
   86c28:	dcc00317 	ldw	r19,12(sp)
   86c2c:	dc800217 	ldw	r18,8(sp)
   86c30:	dc400117 	ldw	r17,4(sp)
   86c34:	dc000017 	ldw	r16,0(sp)
   86c38:	dec00504 	addi	sp,sp,20
   86c3c:	f800283a 	ret
   86c40:	00880880 	call	88088 <_calloc_r>
   86c44:	1007883a 	mov	r3,r2
   86c48:	0021883a 	mov	r16,zero
   86c4c:	98801315 	stw	r2,76(r19)
   86c50:	103fe41e 	bne	r2,zero,86be4 <_Balloc+0x30>
   86c54:	003ff206 	br	86c20 <_Balloc+0x6c>
   86c58:	00880880 	call	88088 <_calloc_r>
   86c5c:	103ff026 	beq	r2,zero,86c20 <_Balloc+0x6c>
   86c60:	1021883a 	mov	r16,r2
   86c64:	14800115 	stw	r18,4(r2)
   86c68:	14400215 	stw	r17,8(r2)
   86c6c:	003fea06 	br	86c18 <_Balloc+0x64>

00086c70 <__d2b>:
   86c70:	defff504 	addi	sp,sp,-44
   86c74:	dcc00515 	stw	r19,20(sp)
   86c78:	04c00044 	movi	r19,1
   86c7c:	dc000215 	stw	r16,8(sp)
   86c80:	2821883a 	mov	r16,r5
   86c84:	980b883a 	mov	r5,r19
   86c88:	ddc00915 	stw	r23,36(sp)
   86c8c:	dd800815 	stw	r22,32(sp)
   86c90:	dd400715 	stw	r21,28(sp)
   86c94:	dd000615 	stw	r20,24(sp)
   86c98:	dc800415 	stw	r18,16(sp)
   86c9c:	dc400315 	stw	r17,12(sp)
   86ca0:	dfc00a15 	stw	ra,40(sp)
   86ca4:	3023883a 	mov	r17,r6
   86ca8:	382d883a 	mov	r22,r7
   86cac:	ddc00b17 	ldw	r23,44(sp)
   86cb0:	0086bb40 	call	86bb4 <_Balloc>
   86cb4:	1025883a 	mov	r18,r2
   86cb8:	00a00034 	movhi	r2,32768
   86cbc:	10bfffc4 	addi	r2,r2,-1
   86cc0:	8888703a 	and	r4,r17,r2
   86cc4:	202ad53a 	srli	r21,r4,20
   86cc8:	00800434 	movhi	r2,16
   86ccc:	10bfffc4 	addi	r2,r2,-1
   86cd0:	8886703a 	and	r3,r17,r2
   86cd4:	a829003a 	cmpeq	r20,r21,zero
   86cd8:	800b883a 	mov	r5,r16
   86cdc:	d8c00115 	stw	r3,4(sp)
   86ce0:	94000504 	addi	r16,r18,20
   86ce4:	a000021e 	bne	r20,zero,86cf0 <__d2b+0x80>
   86ce8:	18c00434 	orhi	r3,r3,16
   86cec:	d8c00115 	stw	r3,4(sp)
   86cf0:	28002726 	beq	r5,zero,86d90 <__d2b+0x120>
   86cf4:	d809883a 	mov	r4,sp
   86cf8:	d9400015 	stw	r5,0(sp)
   86cfc:	00866cc0 	call	866cc <__lo0bits>
   86d00:	100d883a 	mov	r6,r2
   86d04:	10003526 	beq	r2,zero,86ddc <__d2b+0x16c>
   86d08:	d8c00117 	ldw	r3,4(sp)
   86d0c:	00800804 	movi	r2,32
   86d10:	1185c83a 	sub	r2,r2,r6
   86d14:	d9000017 	ldw	r4,0(sp)
   86d18:	1886983a 	sll	r3,r3,r2
   86d1c:	1906b03a 	or	r3,r3,r4
   86d20:	90c00515 	stw	r3,20(r18)
   86d24:	d8c00117 	ldw	r3,4(sp)
   86d28:	1986d83a 	srl	r3,r3,r6
   86d2c:	d8c00115 	stw	r3,4(sp)
   86d30:	180b003a 	cmpeq	r5,r3,zero
   86d34:	00800084 	movi	r2,2
   86d38:	114bc83a 	sub	r5,r2,r5
   86d3c:	80c00115 	stw	r3,4(r16)
   86d40:	91400415 	stw	r5,16(r18)
   86d44:	a0001a1e 	bne	r20,zero,86db0 <__d2b+0x140>
   86d48:	3545883a 	add	r2,r6,r21
   86d4c:	10bef344 	addi	r2,r2,-1075
   86d50:	00c00d44 	movi	r3,53
   86d54:	b0800015 	stw	r2,0(r22)
   86d58:	1987c83a 	sub	r3,r3,r6
   86d5c:	b8c00015 	stw	r3,0(r23)
   86d60:	9005883a 	mov	r2,r18
   86d64:	dfc00a17 	ldw	ra,40(sp)
   86d68:	ddc00917 	ldw	r23,36(sp)
   86d6c:	dd800817 	ldw	r22,32(sp)
   86d70:	dd400717 	ldw	r21,28(sp)
   86d74:	dd000617 	ldw	r20,24(sp)
   86d78:	dcc00517 	ldw	r19,20(sp)
   86d7c:	dc800417 	ldw	r18,16(sp)
   86d80:	dc400317 	ldw	r17,12(sp)
   86d84:	dc000217 	ldw	r16,8(sp)
   86d88:	dec00b04 	addi	sp,sp,44
   86d8c:	f800283a 	ret
   86d90:	d9000104 	addi	r4,sp,4
   86d94:	00866cc0 	call	866cc <__lo0bits>
   86d98:	11800804 	addi	r6,r2,32
   86d9c:	d8800117 	ldw	r2,4(sp)
   86da0:	94c00415 	stw	r19,16(r18)
   86da4:	980b883a 	mov	r5,r19
   86da8:	90800515 	stw	r2,20(r18)
   86dac:	a03fe626 	beq	r20,zero,86d48 <__d2b+0xd8>
   86db0:	2945883a 	add	r2,r5,r5
   86db4:	1085883a 	add	r2,r2,r2
   86db8:	1405883a 	add	r2,r2,r16
   86dbc:	113fff17 	ldw	r4,-4(r2)
   86dc0:	30fef384 	addi	r3,r6,-1074
   86dc4:	2820917a 	slli	r16,r5,5
   86dc8:	b0c00015 	stw	r3,0(r22)
   86dcc:	008665c0 	call	8665c <__hi0bits>
   86dd0:	80a1c83a 	sub	r16,r16,r2
   86dd4:	bc000015 	stw	r16,0(r23)
   86dd8:	003fe106 	br	86d60 <__d2b+0xf0>
   86ddc:	d8800017 	ldw	r2,0(sp)
   86de0:	90800515 	stw	r2,20(r18)
   86de4:	d8c00117 	ldw	r3,4(sp)
   86de8:	003fd106 	br	86d30 <__d2b+0xc0>

00086dec <__mdiff>:
   86dec:	defffb04 	addi	sp,sp,-20
   86df0:	dc000015 	stw	r16,0(sp)
   86df4:	2821883a 	mov	r16,r5
   86df8:	dc800215 	stw	r18,8(sp)
   86dfc:	300b883a 	mov	r5,r6
   86e00:	2025883a 	mov	r18,r4
   86e04:	8009883a 	mov	r4,r16
   86e08:	dc400115 	stw	r17,4(sp)
   86e0c:	dfc00415 	stw	ra,16(sp)
   86e10:	dcc00315 	stw	r19,12(sp)
   86e14:	3023883a 	mov	r17,r6
   86e18:	00867900 	call	86790 <__mcmp>
   86e1c:	10004226 	beq	r2,zero,86f28 <__mdiff+0x13c>
   86e20:	10005016 	blt	r2,zero,86f64 <__mdiff+0x178>
   86e24:	0027883a 	mov	r19,zero
   86e28:	81400117 	ldw	r5,4(r16)
   86e2c:	9009883a 	mov	r4,r18
   86e30:	0086bb40 	call	86bb4 <_Balloc>
   86e34:	1019883a 	mov	r12,r2
   86e38:	82800417 	ldw	r10,16(r16)
   86e3c:	88800417 	ldw	r2,16(r17)
   86e40:	81800504 	addi	r6,r16,20
   86e44:	5287883a 	add	r3,r10,r10
   86e48:	1085883a 	add	r2,r2,r2
   86e4c:	18c7883a 	add	r3,r3,r3
   86e50:	1085883a 	add	r2,r2,r2
   86e54:	8a000504 	addi	r8,r17,20
   86e58:	64c00315 	stw	r19,12(r12)
   86e5c:	30db883a 	add	r13,r6,r3
   86e60:	4097883a 	add	r11,r8,r2
   86e64:	61c00504 	addi	r7,r12,20
   86e68:	0013883a 	mov	r9,zero
   86e6c:	31000017 	ldw	r4,0(r6)
   86e70:	41400017 	ldw	r5,0(r8)
   86e74:	42000104 	addi	r8,r8,4
   86e78:	20bfffcc 	andi	r2,r4,65535
   86e7c:	28ffffcc 	andi	r3,r5,65535
   86e80:	10c5c83a 	sub	r2,r2,r3
   86e84:	1245883a 	add	r2,r2,r9
   86e88:	2008d43a 	srli	r4,r4,16
   86e8c:	280ad43a 	srli	r5,r5,16
   86e90:	1007d43a 	srai	r3,r2,16
   86e94:	3880000d 	sth	r2,0(r7)
   86e98:	2149c83a 	sub	r4,r4,r5
   86e9c:	20c9883a 	add	r4,r4,r3
   86ea0:	3900008d 	sth	r4,2(r7)
   86ea4:	31800104 	addi	r6,r6,4
   86ea8:	39c00104 	addi	r7,r7,4
   86eac:	2013d43a 	srai	r9,r4,16
   86eb0:	42ffee36 	bltu	r8,r11,86e6c <__mdiff+0x80>
   86eb4:	33400c2e 	bgeu	r6,r13,86ee8 <__mdiff+0xfc>
   86eb8:	30800017 	ldw	r2,0(r6)
   86ebc:	31800104 	addi	r6,r6,4
   86ec0:	10ffffcc 	andi	r3,r2,65535
   86ec4:	1a47883a 	add	r3,r3,r9
   86ec8:	1004d43a 	srli	r2,r2,16
   86ecc:	1809d43a 	srai	r4,r3,16
   86ed0:	38c0000d 	sth	r3,0(r7)
   86ed4:	1105883a 	add	r2,r2,r4
   86ed8:	3880008d 	sth	r2,2(r7)
   86edc:	1013d43a 	srai	r9,r2,16
   86ee0:	39c00104 	addi	r7,r7,4
   86ee4:	337ff436 	bltu	r6,r13,86eb8 <__mdiff+0xcc>
   86ee8:	38bfff17 	ldw	r2,-4(r7)
   86eec:	38ffff04 	addi	r3,r7,-4
   86ef0:	1000041e 	bne	r2,zero,86f04 <__mdiff+0x118>
   86ef4:	18ffff04 	addi	r3,r3,-4
   86ef8:	18800017 	ldw	r2,0(r3)
   86efc:	52bfffc4 	addi	r10,r10,-1
   86f00:	103ffc26 	beq	r2,zero,86ef4 <__mdiff+0x108>
   86f04:	6005883a 	mov	r2,r12
   86f08:	62800415 	stw	r10,16(r12)
   86f0c:	dfc00417 	ldw	ra,16(sp)
   86f10:	dcc00317 	ldw	r19,12(sp)
   86f14:	dc800217 	ldw	r18,8(sp)
   86f18:	dc400117 	ldw	r17,4(sp)
   86f1c:	dc000017 	ldw	r16,0(sp)
   86f20:	dec00504 	addi	sp,sp,20
   86f24:	f800283a 	ret
   86f28:	9009883a 	mov	r4,r18
   86f2c:	000b883a 	mov	r5,zero
   86f30:	0086bb40 	call	86bb4 <_Balloc>
   86f34:	1019883a 	mov	r12,r2
   86f38:	00800044 	movi	r2,1
   86f3c:	60800415 	stw	r2,16(r12)
   86f40:	6005883a 	mov	r2,r12
   86f44:	60000515 	stw	zero,20(r12)
   86f48:	dfc00417 	ldw	ra,16(sp)
   86f4c:	dcc00317 	ldw	r19,12(sp)
   86f50:	dc800217 	ldw	r18,8(sp)
   86f54:	dc400117 	ldw	r17,4(sp)
   86f58:	dc000017 	ldw	r16,0(sp)
   86f5c:	dec00504 	addi	sp,sp,20
   86f60:	f800283a 	ret
   86f64:	880d883a 	mov	r6,r17
   86f68:	04c00044 	movi	r19,1
   86f6c:	8023883a 	mov	r17,r16
   86f70:	3021883a 	mov	r16,r6
   86f74:	003fac06 	br	86e28 <__mdiff+0x3c>

00086f78 <__lshift>:
   86f78:	defff904 	addi	sp,sp,-28
   86f7c:	28800417 	ldw	r2,16(r5)
   86f80:	dc000015 	stw	r16,0(sp)
   86f84:	3021d17a 	srai	r16,r6,5
   86f88:	28c00217 	ldw	r3,8(r5)
   86f8c:	10800044 	addi	r2,r2,1
   86f90:	dc400115 	stw	r17,4(sp)
   86f94:	80a3883a 	add	r17,r16,r2
   86f98:	dd400515 	stw	r21,20(sp)
   86f9c:	dd000415 	stw	r20,16(sp)
   86fa0:	dc800215 	stw	r18,8(sp)
   86fa4:	dfc00615 	stw	ra,24(sp)
   86fa8:	2825883a 	mov	r18,r5
   86fac:	dcc00315 	stw	r19,12(sp)
   86fb0:	3029883a 	mov	r20,r6
   86fb4:	202b883a 	mov	r21,r4
   86fb8:	29400117 	ldw	r5,4(r5)
   86fbc:	1c40030e 	bge	r3,r17,86fcc <__lshift+0x54>
   86fc0:	18c7883a 	add	r3,r3,r3
   86fc4:	29400044 	addi	r5,r5,1
   86fc8:	1c7ffd16 	blt	r3,r17,86fc0 <__lshift+0x48>
   86fcc:	a809883a 	mov	r4,r21
   86fd0:	0086bb40 	call	86bb4 <_Balloc>
   86fd4:	1027883a 	mov	r19,r2
   86fd8:	11400504 	addi	r5,r2,20
   86fdc:	0400090e 	bge	zero,r16,87004 <__lshift+0x8c>
   86fe0:	2805883a 	mov	r2,r5
   86fe4:	0007883a 	mov	r3,zero
   86fe8:	18c00044 	addi	r3,r3,1
   86fec:	10000015 	stw	zero,0(r2)
   86ff0:	10800104 	addi	r2,r2,4
   86ff4:	80fffc1e 	bne	r16,r3,86fe8 <__lshift+0x70>
   86ff8:	8405883a 	add	r2,r16,r16
   86ffc:	1085883a 	add	r2,r2,r2
   87000:	288b883a 	add	r5,r5,r2
   87004:	90800417 	ldw	r2,16(r18)
   87008:	91000504 	addi	r4,r18,20
   8700c:	a18007cc 	andi	r6,r20,31
   87010:	1085883a 	add	r2,r2,r2
   87014:	1085883a 	add	r2,r2,r2
   87018:	208f883a 	add	r7,r4,r2
   8701c:	30001e26 	beq	r6,zero,87098 <__lshift+0x120>
   87020:	00800804 	movi	r2,32
   87024:	1191c83a 	sub	r8,r2,r6
   87028:	0007883a 	mov	r3,zero
   8702c:	20800017 	ldw	r2,0(r4)
   87030:	1184983a 	sll	r2,r2,r6
   87034:	1884b03a 	or	r2,r3,r2
   87038:	28800015 	stw	r2,0(r5)
   8703c:	20c00017 	ldw	r3,0(r4)
   87040:	21000104 	addi	r4,r4,4
   87044:	29400104 	addi	r5,r5,4
   87048:	1a06d83a 	srl	r3,r3,r8
   8704c:	21fff736 	bltu	r4,r7,8702c <__lshift+0xb4>
   87050:	28c00015 	stw	r3,0(r5)
   87054:	18000126 	beq	r3,zero,8705c <__lshift+0xe4>
   87058:	8c400044 	addi	r17,r17,1
   8705c:	88bfffc4 	addi	r2,r17,-1
   87060:	98800415 	stw	r2,16(r19)
   87064:	a809883a 	mov	r4,r21
   87068:	900b883a 	mov	r5,r18
   8706c:	00866340 	call	86634 <_Bfree>
   87070:	9805883a 	mov	r2,r19
   87074:	dfc00617 	ldw	ra,24(sp)
   87078:	dd400517 	ldw	r21,20(sp)
   8707c:	dd000417 	ldw	r20,16(sp)
   87080:	dcc00317 	ldw	r19,12(sp)
   87084:	dc800217 	ldw	r18,8(sp)
   87088:	dc400117 	ldw	r17,4(sp)
   8708c:	dc000017 	ldw	r16,0(sp)
   87090:	dec00704 	addi	sp,sp,28
   87094:	f800283a 	ret
   87098:	20800017 	ldw	r2,0(r4)
   8709c:	21000104 	addi	r4,r4,4
   870a0:	28800015 	stw	r2,0(r5)
   870a4:	29400104 	addi	r5,r5,4
   870a8:	21ffec2e 	bgeu	r4,r7,8705c <__lshift+0xe4>
   870ac:	20800017 	ldw	r2,0(r4)
   870b0:	21000104 	addi	r4,r4,4
   870b4:	28800015 	stw	r2,0(r5)
   870b8:	29400104 	addi	r5,r5,4
   870bc:	21fff636 	bltu	r4,r7,87098 <__lshift+0x120>
   870c0:	003fe606 	br	8705c <__lshift+0xe4>

000870c4 <__multiply>:
   870c4:	defff004 	addi	sp,sp,-64
   870c8:	dc800815 	stw	r18,32(sp)
   870cc:	dc400715 	stw	r17,28(sp)
   870d0:	2c800417 	ldw	r18,16(r5)
   870d4:	34400417 	ldw	r17,16(r6)
   870d8:	dcc00915 	stw	r19,36(sp)
   870dc:	dc000615 	stw	r16,24(sp)
   870e0:	dfc00f15 	stw	ra,60(sp)
   870e4:	df000e15 	stw	fp,56(sp)
   870e8:	ddc00d15 	stw	r23,52(sp)
   870ec:	dd800c15 	stw	r22,48(sp)
   870f0:	dd400b15 	stw	r21,44(sp)
   870f4:	dd000a15 	stw	r20,40(sp)
   870f8:	2821883a 	mov	r16,r5
   870fc:	3027883a 	mov	r19,r6
   87100:	9440040e 	bge	r18,r17,87114 <__multiply+0x50>
   87104:	8825883a 	mov	r18,r17
   87108:	2c400417 	ldw	r17,16(r5)
   8710c:	2827883a 	mov	r19,r5
   87110:	3021883a 	mov	r16,r6
   87114:	80800217 	ldw	r2,8(r16)
   87118:	9447883a 	add	r3,r18,r17
   8711c:	d8c00415 	stw	r3,16(sp)
   87120:	81400117 	ldw	r5,4(r16)
   87124:	10c0010e 	bge	r2,r3,8712c <__multiply+0x68>
   87128:	29400044 	addi	r5,r5,1
   8712c:	0086bb40 	call	86bb4 <_Balloc>
   87130:	d8800515 	stw	r2,20(sp)
   87134:	d9000417 	ldw	r4,16(sp)
   87138:	d8c00517 	ldw	r3,20(sp)
   8713c:	2105883a 	add	r2,r4,r4
   87140:	1085883a 	add	r2,r2,r2
   87144:	19000504 	addi	r4,r3,20
   87148:	2085883a 	add	r2,r4,r2
   8714c:	d8800315 	stw	r2,12(sp)
   87150:	2080052e 	bgeu	r4,r2,87168 <__multiply+0xa4>
   87154:	2005883a 	mov	r2,r4
   87158:	d8c00317 	ldw	r3,12(sp)
   8715c:	10000015 	stw	zero,0(r2)
   87160:	10800104 	addi	r2,r2,4
   87164:	10fffc36 	bltu	r2,r3,87158 <__multiply+0x94>
   87168:	8c45883a 	add	r2,r17,r17
   8716c:	9487883a 	add	r3,r18,r18
   87170:	9dc00504 	addi	r23,r19,20
   87174:	1085883a 	add	r2,r2,r2
   87178:	84000504 	addi	r16,r16,20
   8717c:	18c7883a 	add	r3,r3,r3
   87180:	b885883a 	add	r2,r23,r2
   87184:	dc000015 	stw	r16,0(sp)
   87188:	d8800215 	stw	r2,8(sp)
   8718c:	80f9883a 	add	fp,r16,r3
   87190:	b880432e 	bgeu	r23,r2,872a0 <__multiply+0x1dc>
   87194:	d9000115 	stw	r4,4(sp)
   87198:	b9000017 	ldw	r4,0(r23)
   8719c:	253fffcc 	andi	r20,r4,65535
   871a0:	a0001a26 	beq	r20,zero,8720c <__multiply+0x148>
   871a4:	dcc00017 	ldw	r19,0(sp)
   871a8:	dc800117 	ldw	r18,4(sp)
   871ac:	002b883a 	mov	r21,zero
   871b0:	9c400017 	ldw	r17,0(r19)
   871b4:	94000017 	ldw	r16,0(r18)
   871b8:	a009883a 	mov	r4,r20
   871bc:	897fffcc 	andi	r5,r17,65535
   871c0:	0080e140 	call	80e14 <__mulsi3>
   871c4:	880ad43a 	srli	r5,r17,16
   871c8:	80ffffcc 	andi	r3,r16,65535
   871cc:	a8c7883a 	add	r3,r21,r3
   871d0:	a009883a 	mov	r4,r20
   871d4:	10e3883a 	add	r17,r2,r3
   871d8:	8020d43a 	srli	r16,r16,16
   871dc:	0080e140 	call	80e14 <__mulsi3>
   871e0:	8806d43a 	srli	r3,r17,16
   871e4:	1405883a 	add	r2,r2,r16
   871e8:	9cc00104 	addi	r19,r19,4
   871ec:	1887883a 	add	r3,r3,r2
   871f0:	90c0008d 	sth	r3,2(r18)
   871f4:	9440000d 	sth	r17,0(r18)
   871f8:	182ad43a 	srli	r21,r3,16
   871fc:	94800104 	addi	r18,r18,4
   87200:	9f3feb36 	bltu	r19,fp,871b0 <__multiply+0xec>
   87204:	95400015 	stw	r21,0(r18)
   87208:	b9000017 	ldw	r4,0(r23)
   8720c:	202ad43a 	srli	r21,r4,16
   87210:	a8001c26 	beq	r21,zero,87284 <__multiply+0x1c0>
   87214:	d9000117 	ldw	r4,4(sp)
   87218:	dd000017 	ldw	r20,0(sp)
   8721c:	002d883a 	mov	r22,zero
   87220:	24c00017 	ldw	r19,0(r4)
   87224:	2025883a 	mov	r18,r4
   87228:	9823883a 	mov	r17,r19
   8722c:	a4000017 	ldw	r16,0(r20)
   87230:	a809883a 	mov	r4,r21
   87234:	a5000104 	addi	r20,r20,4
   87238:	817fffcc 	andi	r5,r16,65535
   8723c:	0080e140 	call	80e14 <__mulsi3>
   87240:	8806d43a 	srli	r3,r17,16
   87244:	800ad43a 	srli	r5,r16,16
   87248:	94c0000d 	sth	r19,0(r18)
   8724c:	b0c7883a 	add	r3,r22,r3
   87250:	10e1883a 	add	r16,r2,r3
   87254:	9400008d 	sth	r16,2(r18)
   87258:	a809883a 	mov	r4,r21
   8725c:	94800104 	addi	r18,r18,4
   87260:	0080e140 	call	80e14 <__mulsi3>
   87264:	94400017 	ldw	r17,0(r18)
   87268:	8020d43a 	srli	r16,r16,16
   8726c:	88ffffcc 	andi	r3,r17,65535
   87270:	10c5883a 	add	r2,r2,r3
   87274:	80a7883a 	add	r19,r16,r2
   87278:	982cd43a 	srli	r22,r19,16
   8727c:	a73feb36 	bltu	r20,fp,8722c <__multiply+0x168>
   87280:	94c00015 	stw	r19,0(r18)
   87284:	d8800217 	ldw	r2,8(sp)
   87288:	bdc00104 	addi	r23,r23,4
   8728c:	b880042e 	bgeu	r23,r2,872a0 <__multiply+0x1dc>
   87290:	d8c00117 	ldw	r3,4(sp)
   87294:	18c00104 	addi	r3,r3,4
   87298:	d8c00115 	stw	r3,4(sp)
   8729c:	003fbe06 	br	87198 <__multiply+0xd4>
   872a0:	d9000417 	ldw	r4,16(sp)
   872a4:	01000c0e 	bge	zero,r4,872d8 <__multiply+0x214>
   872a8:	d8c00317 	ldw	r3,12(sp)
   872ac:	18bfff17 	ldw	r2,-4(r3)
   872b0:	18ffff04 	addi	r3,r3,-4
   872b4:	10000326 	beq	r2,zero,872c4 <__multiply+0x200>
   872b8:	00000706 	br	872d8 <__multiply+0x214>
   872bc:	18800017 	ldw	r2,0(r3)
   872c0:	1000051e 	bne	r2,zero,872d8 <__multiply+0x214>
   872c4:	d9000417 	ldw	r4,16(sp)
   872c8:	18ffff04 	addi	r3,r3,-4
   872cc:	213fffc4 	addi	r4,r4,-1
   872d0:	d9000415 	stw	r4,16(sp)
   872d4:	203ff91e 	bne	r4,zero,872bc <__multiply+0x1f8>
   872d8:	d8800417 	ldw	r2,16(sp)
   872dc:	d8c00517 	ldw	r3,20(sp)
   872e0:	18800415 	stw	r2,16(r3)
   872e4:	1805883a 	mov	r2,r3
   872e8:	dfc00f17 	ldw	ra,60(sp)
   872ec:	df000e17 	ldw	fp,56(sp)
   872f0:	ddc00d17 	ldw	r23,52(sp)
   872f4:	dd800c17 	ldw	r22,48(sp)
   872f8:	dd400b17 	ldw	r21,44(sp)
   872fc:	dd000a17 	ldw	r20,40(sp)
   87300:	dcc00917 	ldw	r19,36(sp)
   87304:	dc800817 	ldw	r18,32(sp)
   87308:	dc400717 	ldw	r17,28(sp)
   8730c:	dc000617 	ldw	r16,24(sp)
   87310:	dec01004 	addi	sp,sp,64
   87314:	f800283a 	ret

00087318 <__i2b>:
   87318:	defffd04 	addi	sp,sp,-12
   8731c:	dc000015 	stw	r16,0(sp)
   87320:	04000044 	movi	r16,1
   87324:	dc800115 	stw	r18,4(sp)
   87328:	2825883a 	mov	r18,r5
   8732c:	800b883a 	mov	r5,r16
   87330:	dfc00215 	stw	ra,8(sp)
   87334:	0086bb40 	call	86bb4 <_Balloc>
   87338:	14000415 	stw	r16,16(r2)
   8733c:	14800515 	stw	r18,20(r2)
   87340:	dfc00217 	ldw	ra,8(sp)
   87344:	dc800117 	ldw	r18,4(sp)
   87348:	dc000017 	ldw	r16,0(sp)
   8734c:	dec00304 	addi	sp,sp,12
   87350:	f800283a 	ret

00087354 <__multadd>:
   87354:	defff604 	addi	sp,sp,-40
   87358:	dd800615 	stw	r22,24(sp)
   8735c:	2d800417 	ldw	r22,16(r5)
   87360:	df000815 	stw	fp,32(sp)
   87364:	ddc00715 	stw	r23,28(sp)
   87368:	dd400515 	stw	r21,20(sp)
   8736c:	dd000415 	stw	r20,16(sp)
   87370:	dcc00315 	stw	r19,12(sp)
   87374:	dc800215 	stw	r18,8(sp)
   87378:	dfc00915 	stw	ra,36(sp)
   8737c:	dc400115 	stw	r17,4(sp)
   87380:	dc000015 	stw	r16,0(sp)
   87384:	282f883a 	mov	r23,r5
   87388:	2039883a 	mov	fp,r4
   8738c:	302b883a 	mov	r21,r6
   87390:	3829883a 	mov	r20,r7
   87394:	2c800504 	addi	r18,r5,20
   87398:	0027883a 	mov	r19,zero
   8739c:	94400017 	ldw	r17,0(r18)
   873a0:	a80b883a 	mov	r5,r21
   873a4:	9cc00044 	addi	r19,r19,1
   873a8:	893fffcc 	andi	r4,r17,65535
   873ac:	0080e140 	call	80e14 <__mulsi3>
   873b0:	8808d43a 	srli	r4,r17,16
   873b4:	1521883a 	add	r16,r2,r20
   873b8:	a80b883a 	mov	r5,r21
   873bc:	0080e140 	call	80e14 <__mulsi3>
   873c0:	8008d43a 	srli	r4,r16,16
   873c4:	843fffcc 	andi	r16,r16,65535
   873c8:	1105883a 	add	r2,r2,r4
   873cc:	1006943a 	slli	r3,r2,16
   873d0:	1028d43a 	srli	r20,r2,16
   873d4:	1c07883a 	add	r3,r3,r16
   873d8:	90c00015 	stw	r3,0(r18)
   873dc:	94800104 	addi	r18,r18,4
   873e0:	9dbfee16 	blt	r19,r22,8739c <__multadd+0x48>
   873e4:	a0000826 	beq	r20,zero,87408 <__multadd+0xb4>
   873e8:	b8800217 	ldw	r2,8(r23)
   873ec:	b080130e 	bge	r22,r2,8743c <__multadd+0xe8>
   873f0:	b585883a 	add	r2,r22,r22
   873f4:	1085883a 	add	r2,r2,r2
   873f8:	15c5883a 	add	r2,r2,r23
   873fc:	b0c00044 	addi	r3,r22,1
   87400:	15000515 	stw	r20,20(r2)
   87404:	b8c00415 	stw	r3,16(r23)
   87408:	b805883a 	mov	r2,r23
   8740c:	dfc00917 	ldw	ra,36(sp)
   87410:	df000817 	ldw	fp,32(sp)
   87414:	ddc00717 	ldw	r23,28(sp)
   87418:	dd800617 	ldw	r22,24(sp)
   8741c:	dd400517 	ldw	r21,20(sp)
   87420:	dd000417 	ldw	r20,16(sp)
   87424:	dcc00317 	ldw	r19,12(sp)
   87428:	dc800217 	ldw	r18,8(sp)
   8742c:	dc400117 	ldw	r17,4(sp)
   87430:	dc000017 	ldw	r16,0(sp)
   87434:	dec00a04 	addi	sp,sp,40
   87438:	f800283a 	ret
   8743c:	b9400117 	ldw	r5,4(r23)
   87440:	e009883a 	mov	r4,fp
   87444:	29400044 	addi	r5,r5,1
   87448:	0086bb40 	call	86bb4 <_Balloc>
   8744c:	b9800417 	ldw	r6,16(r23)
   87450:	b9400304 	addi	r5,r23,12
   87454:	11000304 	addi	r4,r2,12
   87458:	318d883a 	add	r6,r6,r6
   8745c:	318d883a 	add	r6,r6,r6
   87460:	31800204 	addi	r6,r6,8
   87464:	1023883a 	mov	r17,r2
   87468:	008641c0 	call	8641c <memcpy>
   8746c:	b80b883a 	mov	r5,r23
   87470:	e009883a 	mov	r4,fp
   87474:	00866340 	call	86634 <_Bfree>
   87478:	882f883a 	mov	r23,r17
   8747c:	003fdc06 	br	873f0 <__multadd+0x9c>

00087480 <__pow5mult>:
   87480:	defffa04 	addi	sp,sp,-24
   87484:	308000cc 	andi	r2,r6,3
   87488:	dd000415 	stw	r20,16(sp)
   8748c:	dcc00315 	stw	r19,12(sp)
   87490:	dc000015 	stw	r16,0(sp)
   87494:	dfc00515 	stw	ra,20(sp)
   87498:	dc800215 	stw	r18,8(sp)
   8749c:	dc400115 	stw	r17,4(sp)
   874a0:	3021883a 	mov	r16,r6
   874a4:	2027883a 	mov	r19,r4
   874a8:	2829883a 	mov	r20,r5
   874ac:	10002b1e 	bne	r2,zero,8755c <__pow5mult+0xdc>
   874b0:	8025d0ba 	srai	r18,r16,2
   874b4:	90001b26 	beq	r18,zero,87524 <__pow5mult+0xa4>
   874b8:	9c001217 	ldw	r16,72(r19)
   874bc:	8000081e 	bne	r16,zero,874e0 <__pow5mult+0x60>
   874c0:	00003006 	br	87584 <__pow5mult+0x104>
   874c4:	800b883a 	mov	r5,r16
   874c8:	800d883a 	mov	r6,r16
   874cc:	9809883a 	mov	r4,r19
   874d0:	90001426 	beq	r18,zero,87524 <__pow5mult+0xa4>
   874d4:	80800017 	ldw	r2,0(r16)
   874d8:	10001b26 	beq	r2,zero,87548 <__pow5mult+0xc8>
   874dc:	1021883a 	mov	r16,r2
   874e0:	9080004c 	andi	r2,r18,1
   874e4:	1005003a 	cmpeq	r2,r2,zero
   874e8:	9025d07a 	srai	r18,r18,1
   874ec:	800d883a 	mov	r6,r16
   874f0:	9809883a 	mov	r4,r19
   874f4:	a00b883a 	mov	r5,r20
   874f8:	103ff21e 	bne	r2,zero,874c4 <__pow5mult+0x44>
   874fc:	00870c40 	call	870c4 <__multiply>
   87500:	a00b883a 	mov	r5,r20
   87504:	9809883a 	mov	r4,r19
   87508:	1023883a 	mov	r17,r2
   8750c:	00866340 	call	86634 <_Bfree>
   87510:	8829883a 	mov	r20,r17
   87514:	800b883a 	mov	r5,r16
   87518:	800d883a 	mov	r6,r16
   8751c:	9809883a 	mov	r4,r19
   87520:	903fec1e 	bne	r18,zero,874d4 <__pow5mult+0x54>
   87524:	a005883a 	mov	r2,r20
   87528:	dfc00517 	ldw	ra,20(sp)
   8752c:	dd000417 	ldw	r20,16(sp)
   87530:	dcc00317 	ldw	r19,12(sp)
   87534:	dc800217 	ldw	r18,8(sp)
   87538:	dc400117 	ldw	r17,4(sp)
   8753c:	dc000017 	ldw	r16,0(sp)
   87540:	dec00604 	addi	sp,sp,24
   87544:	f800283a 	ret
   87548:	00870c40 	call	870c4 <__multiply>
   8754c:	80800015 	stw	r2,0(r16)
   87550:	1021883a 	mov	r16,r2
   87554:	10000015 	stw	zero,0(r2)
   87558:	003fe106 	br	874e0 <__pow5mult+0x60>
   8755c:	1085883a 	add	r2,r2,r2
   87560:	00c00274 	movhi	r3,9
   87564:	18f8e404 	addi	r3,r3,-7280
   87568:	1085883a 	add	r2,r2,r2
   8756c:	10c5883a 	add	r2,r2,r3
   87570:	11bfff17 	ldw	r6,-4(r2)
   87574:	000f883a 	mov	r7,zero
   87578:	00873540 	call	87354 <__multadd>
   8757c:	1029883a 	mov	r20,r2
   87580:	003fcb06 	br	874b0 <__pow5mult+0x30>
   87584:	9809883a 	mov	r4,r19
   87588:	01409c44 	movi	r5,625
   8758c:	00873180 	call	87318 <__i2b>
   87590:	98801215 	stw	r2,72(r19)
   87594:	1021883a 	mov	r16,r2
   87598:	10000015 	stw	zero,0(r2)
   8759c:	003fd006 	br	874e0 <__pow5mult+0x60>

000875a0 <__s2b>:
   875a0:	defff904 	addi	sp,sp,-28
   875a4:	dcc00315 	stw	r19,12(sp)
   875a8:	dc800215 	stw	r18,8(sp)
   875ac:	2827883a 	mov	r19,r5
   875b0:	2025883a 	mov	r18,r4
   875b4:	01400244 	movi	r5,9
   875b8:	39000204 	addi	r4,r7,8
   875bc:	dd000415 	stw	r20,16(sp)
   875c0:	dc400115 	stw	r17,4(sp)
   875c4:	dfc00615 	stw	ra,24(sp)
   875c8:	dd400515 	stw	r21,20(sp)
   875cc:	dc000015 	stw	r16,0(sp)
   875d0:	3829883a 	mov	r20,r7
   875d4:	3023883a 	mov	r17,r6
   875d8:	0080d440 	call	80d44 <__divsi3>
   875dc:	00c00044 	movi	r3,1
   875e0:	1880350e 	bge	r3,r2,876b8 <__s2b+0x118>
   875e4:	000b883a 	mov	r5,zero
   875e8:	18c7883a 	add	r3,r3,r3
   875ec:	29400044 	addi	r5,r5,1
   875f0:	18bffd16 	blt	r3,r2,875e8 <__s2b+0x48>
   875f4:	9009883a 	mov	r4,r18
   875f8:	0086bb40 	call	86bb4 <_Balloc>
   875fc:	1011883a 	mov	r8,r2
   87600:	d8800717 	ldw	r2,28(sp)
   87604:	00c00044 	movi	r3,1
   87608:	01800244 	movi	r6,9
   8760c:	40800515 	stw	r2,20(r8)
   87610:	40c00415 	stw	r3,16(r8)
   87614:	3440260e 	bge	r6,r17,876b0 <__s2b+0x110>
   87618:	3021883a 	mov	r16,r6
   8761c:	99ab883a 	add	r21,r19,r6
   87620:	9c05883a 	add	r2,r19,r16
   87624:	11c00007 	ldb	r7,0(r2)
   87628:	400b883a 	mov	r5,r8
   8762c:	9009883a 	mov	r4,r18
   87630:	39fff404 	addi	r7,r7,-48
   87634:	01800284 	movi	r6,10
   87638:	00873540 	call	87354 <__multadd>
   8763c:	84000044 	addi	r16,r16,1
   87640:	1011883a 	mov	r8,r2
   87644:	8c3ff61e 	bne	r17,r16,87620 <__s2b+0x80>
   87648:	ac45883a 	add	r2,r21,r17
   8764c:	117ffe04 	addi	r5,r2,-8
   87650:	880d883a 	mov	r6,r17
   87654:	35000c0e 	bge	r6,r20,87688 <__s2b+0xe8>
   87658:	a185c83a 	sub	r2,r20,r6
   8765c:	2821883a 	mov	r16,r5
   87660:	28a3883a 	add	r17,r5,r2
   87664:	81c00007 	ldb	r7,0(r16)
   87668:	400b883a 	mov	r5,r8
   8766c:	9009883a 	mov	r4,r18
   87670:	39fff404 	addi	r7,r7,-48
   87674:	01800284 	movi	r6,10
   87678:	00873540 	call	87354 <__multadd>
   8767c:	84000044 	addi	r16,r16,1
   87680:	1011883a 	mov	r8,r2
   87684:	847ff71e 	bne	r16,r17,87664 <__s2b+0xc4>
   87688:	4005883a 	mov	r2,r8
   8768c:	dfc00617 	ldw	ra,24(sp)
   87690:	dd400517 	ldw	r21,20(sp)
   87694:	dd000417 	ldw	r20,16(sp)
   87698:	dcc00317 	ldw	r19,12(sp)
   8769c:	dc800217 	ldw	r18,8(sp)
   876a0:	dc400117 	ldw	r17,4(sp)
   876a4:	dc000017 	ldw	r16,0(sp)
   876a8:	dec00704 	addi	sp,sp,28
   876ac:	f800283a 	ret
   876b0:	99400284 	addi	r5,r19,10
   876b4:	003fe706 	br	87654 <__s2b+0xb4>
   876b8:	000b883a 	mov	r5,zero
   876bc:	003fcd06 	br	875f4 <__s2b+0x54>

000876c0 <_realloc_r>:
   876c0:	defff404 	addi	sp,sp,-48
   876c4:	dd800815 	stw	r22,32(sp)
   876c8:	dc800415 	stw	r18,16(sp)
   876cc:	dc400315 	stw	r17,12(sp)
   876d0:	dfc00b15 	stw	ra,44(sp)
   876d4:	df000a15 	stw	fp,40(sp)
   876d8:	ddc00915 	stw	r23,36(sp)
   876dc:	dd400715 	stw	r21,28(sp)
   876e0:	dd000615 	stw	r20,24(sp)
   876e4:	dcc00515 	stw	r19,20(sp)
   876e8:	dc000215 	stw	r16,8(sp)
   876ec:	2825883a 	mov	r18,r5
   876f0:	3023883a 	mov	r17,r6
   876f4:	202d883a 	mov	r22,r4
   876f8:	2800c926 	beq	r5,zero,87a20 <_realloc_r+0x360>
   876fc:	008affc0 	call	8affc <__malloc_lock>
   87700:	943ffe04 	addi	r16,r18,-8
   87704:	88c002c4 	addi	r3,r17,11
   87708:	00800584 	movi	r2,22
   8770c:	82000117 	ldw	r8,4(r16)
   87710:	10c01b2e 	bgeu	r2,r3,87780 <_realloc_r+0xc0>
   87714:	00bffe04 	movi	r2,-8
   87718:	188e703a 	and	r7,r3,r2
   8771c:	3839883a 	mov	fp,r7
   87720:	38001a16 	blt	r7,zero,8778c <_realloc_r+0xcc>
   87724:	e4401936 	bltu	fp,r17,8778c <_realloc_r+0xcc>
   87728:	013fff04 	movi	r4,-4
   8772c:	4126703a 	and	r19,r8,r4
   87730:	99c02616 	blt	r19,r7,877cc <_realloc_r+0x10c>
   87734:	802b883a 	mov	r21,r16
   87738:	9829883a 	mov	r20,r19
   8773c:	84000204 	addi	r16,r16,8
   87740:	a80f883a 	mov	r7,r21
   87744:	a70dc83a 	sub	r6,r20,fp
   87748:	008003c4 	movi	r2,15
   8774c:	1180c136 	bltu	r2,r6,87a54 <_realloc_r+0x394>
   87750:	38800117 	ldw	r2,4(r7)
   87754:	a549883a 	add	r4,r20,r21
   87758:	1080004c 	andi	r2,r2,1
   8775c:	a084b03a 	or	r2,r20,r2
   87760:	38800115 	stw	r2,4(r7)
   87764:	20c00117 	ldw	r3,4(r4)
   87768:	18c00054 	ori	r3,r3,1
   8776c:	20c00115 	stw	r3,4(r4)
   87770:	b009883a 	mov	r4,r22
   87774:	008b01c0 	call	8b01c <__malloc_unlock>
   87778:	8023883a 	mov	r17,r16
   8777c:	00000606 	br	87798 <_realloc_r+0xd8>
   87780:	01c00404 	movi	r7,16
   87784:	3839883a 	mov	fp,r7
   87788:	e47fe72e 	bgeu	fp,r17,87728 <_realloc_r+0x68>
   8778c:	00800304 	movi	r2,12
   87790:	0023883a 	mov	r17,zero
   87794:	b0800015 	stw	r2,0(r22)
   87798:	8805883a 	mov	r2,r17
   8779c:	dfc00b17 	ldw	ra,44(sp)
   877a0:	df000a17 	ldw	fp,40(sp)
   877a4:	ddc00917 	ldw	r23,36(sp)
   877a8:	dd800817 	ldw	r22,32(sp)
   877ac:	dd400717 	ldw	r21,28(sp)
   877b0:	dd000617 	ldw	r20,24(sp)
   877b4:	dcc00517 	ldw	r19,20(sp)
   877b8:	dc800417 	ldw	r18,16(sp)
   877bc:	dc400317 	ldw	r17,12(sp)
   877c0:	dc000217 	ldw	r16,8(sp)
   877c4:	dec00c04 	addi	sp,sp,48
   877c8:	f800283a 	ret
   877cc:	00800274 	movhi	r2,9
   877d0:	10ba3f04 	addi	r2,r2,-5892
   877d4:	12400217 	ldw	r9,8(r2)
   877d8:	84cd883a 	add	r6,r16,r19
   877dc:	802b883a 	mov	r21,r16
   877e0:	3240b926 	beq	r6,r9,87ac8 <_realloc_r+0x408>
   877e4:	31400117 	ldw	r5,4(r6)
   877e8:	00bfff84 	movi	r2,-2
   877ec:	2884703a 	and	r2,r5,r2
   877f0:	1185883a 	add	r2,r2,r6
   877f4:	10c00117 	ldw	r3,4(r2)
   877f8:	18c0004c 	andi	r3,r3,1
   877fc:	1807003a 	cmpeq	r3,r3,zero
   87800:	1800a326 	beq	r3,zero,87a90 <_realloc_r+0x3d0>
   87804:	2908703a 	and	r4,r5,r4
   87808:	9929883a 	add	r20,r19,r4
   8780c:	a1c0a30e 	bge	r20,r7,87a9c <_realloc_r+0x3dc>
   87810:	4080004c 	andi	r2,r8,1
   87814:	1000551e 	bne	r2,zero,8796c <_realloc_r+0x2ac>
   87818:	80800017 	ldw	r2,0(r16)
   8781c:	80afc83a 	sub	r23,r16,r2
   87820:	b8c00117 	ldw	r3,4(r23)
   87824:	00bfff04 	movi	r2,-4
   87828:	1884703a 	and	r2,r3,r2
   8782c:	30002e26 	beq	r6,zero,878e8 <_realloc_r+0x228>
   87830:	3240b926 	beq	r6,r9,87b18 <_realloc_r+0x458>
   87834:	98a9883a 	add	r20,r19,r2
   87838:	2509883a 	add	r4,r4,r20
   8783c:	d9000015 	stw	r4,0(sp)
   87840:	21c02a16 	blt	r4,r7,878ec <_realloc_r+0x22c>
   87844:	30800317 	ldw	r2,12(r6)
   87848:	30c00217 	ldw	r3,8(r6)
   8784c:	01400904 	movi	r5,36
   87850:	99bfff04 	addi	r6,r19,-4
   87854:	18800315 	stw	r2,12(r3)
   87858:	10c00215 	stw	r3,8(r2)
   8785c:	b9000317 	ldw	r4,12(r23)
   87860:	b8800217 	ldw	r2,8(r23)
   87864:	b82b883a 	mov	r21,r23
   87868:	bc000204 	addi	r16,r23,8
   8786c:	20800215 	stw	r2,8(r4)
   87870:	11000315 	stw	r4,12(r2)
   87874:	2980e436 	bltu	r5,r6,87c08 <_realloc_r+0x548>
   87878:	008004c4 	movi	r2,19
   8787c:	9009883a 	mov	r4,r18
   87880:	8011883a 	mov	r8,r16
   87884:	11800f2e 	bgeu	r2,r6,878c4 <_realloc_r+0x204>
   87888:	90800017 	ldw	r2,0(r18)
   8788c:	ba000404 	addi	r8,r23,16
   87890:	91000204 	addi	r4,r18,8
   87894:	b8800215 	stw	r2,8(r23)
   87898:	90c00117 	ldw	r3,4(r18)
   8789c:	008006c4 	movi	r2,27
   878a0:	b8c00315 	stw	r3,12(r23)
   878a4:	1180072e 	bgeu	r2,r6,878c4 <_realloc_r+0x204>
   878a8:	90c00217 	ldw	r3,8(r18)
   878ac:	ba000604 	addi	r8,r23,24
   878b0:	91000404 	addi	r4,r18,16
   878b4:	b8c00415 	stw	r3,16(r23)
   878b8:	90800317 	ldw	r2,12(r18)
   878bc:	b8800515 	stw	r2,20(r23)
   878c0:	3140e726 	beq	r6,r5,87c60 <_realloc_r+0x5a0>
   878c4:	20800017 	ldw	r2,0(r4)
   878c8:	dd000017 	ldw	r20,0(sp)
   878cc:	b80f883a 	mov	r7,r23
   878d0:	40800015 	stw	r2,0(r8)
   878d4:	20c00117 	ldw	r3,4(r4)
   878d8:	40c00115 	stw	r3,4(r8)
   878dc:	20800217 	ldw	r2,8(r4)
   878e0:	40800215 	stw	r2,8(r8)
   878e4:	003f9706 	br	87744 <_realloc_r+0x84>
   878e8:	98a9883a 	add	r20,r19,r2
   878ec:	a1c01f16 	blt	r20,r7,8796c <_realloc_r+0x2ac>
   878f0:	b8c00317 	ldw	r3,12(r23)
   878f4:	b8800217 	ldw	r2,8(r23)
   878f8:	99bfff04 	addi	r6,r19,-4
   878fc:	01400904 	movi	r5,36
   87900:	b82b883a 	mov	r21,r23
   87904:	18800215 	stw	r2,8(r3)
   87908:	10c00315 	stw	r3,12(r2)
   8790c:	bc000204 	addi	r16,r23,8
   87910:	2980c336 	bltu	r5,r6,87c20 <_realloc_r+0x560>
   87914:	008004c4 	movi	r2,19
   87918:	9009883a 	mov	r4,r18
   8791c:	8011883a 	mov	r8,r16
   87920:	11800f2e 	bgeu	r2,r6,87960 <_realloc_r+0x2a0>
   87924:	90800017 	ldw	r2,0(r18)
   87928:	ba000404 	addi	r8,r23,16
   8792c:	91000204 	addi	r4,r18,8
   87930:	b8800215 	stw	r2,8(r23)
   87934:	90c00117 	ldw	r3,4(r18)
   87938:	008006c4 	movi	r2,27
   8793c:	b8c00315 	stw	r3,12(r23)
   87940:	1180072e 	bgeu	r2,r6,87960 <_realloc_r+0x2a0>
   87944:	90c00217 	ldw	r3,8(r18)
   87948:	ba000604 	addi	r8,r23,24
   8794c:	91000404 	addi	r4,r18,16
   87950:	b8c00415 	stw	r3,16(r23)
   87954:	90800317 	ldw	r2,12(r18)
   87958:	b8800515 	stw	r2,20(r23)
   8795c:	3140c726 	beq	r6,r5,87c7c <_realloc_r+0x5bc>
   87960:	20800017 	ldw	r2,0(r4)
   87964:	b80f883a 	mov	r7,r23
   87968:	003fd906 	br	878d0 <_realloc_r+0x210>
   8796c:	880b883a 	mov	r5,r17
   87970:	b009883a 	mov	r4,r22
   87974:	0085bf80 	call	85bf8 <_malloc_r>
   87978:	1023883a 	mov	r17,r2
   8797c:	10002526 	beq	r2,zero,87a14 <_realloc_r+0x354>
   87980:	80800117 	ldw	r2,4(r16)
   87984:	00ffff84 	movi	r3,-2
   87988:	893ffe04 	addi	r4,r17,-8
   8798c:	10c4703a 	and	r2,r2,r3
   87990:	8085883a 	add	r2,r16,r2
   87994:	20809526 	beq	r4,r2,87bec <_realloc_r+0x52c>
   87998:	99bfff04 	addi	r6,r19,-4
   8799c:	01c00904 	movi	r7,36
   879a0:	39804536 	bltu	r7,r6,87ab8 <_realloc_r+0x3f8>
   879a4:	008004c4 	movi	r2,19
   879a8:	9009883a 	mov	r4,r18
   879ac:	880b883a 	mov	r5,r17
   879b0:	11800f2e 	bgeu	r2,r6,879f0 <_realloc_r+0x330>
   879b4:	90800017 	ldw	r2,0(r18)
   879b8:	89400204 	addi	r5,r17,8
   879bc:	91000204 	addi	r4,r18,8
   879c0:	88800015 	stw	r2,0(r17)
   879c4:	90c00117 	ldw	r3,4(r18)
   879c8:	008006c4 	movi	r2,27
   879cc:	88c00115 	stw	r3,4(r17)
   879d0:	1180072e 	bgeu	r2,r6,879f0 <_realloc_r+0x330>
   879d4:	90c00217 	ldw	r3,8(r18)
   879d8:	89400404 	addi	r5,r17,16
   879dc:	91000404 	addi	r4,r18,16
   879e0:	88c00215 	stw	r3,8(r17)
   879e4:	90800317 	ldw	r2,12(r18)
   879e8:	88800315 	stw	r2,12(r17)
   879ec:	31c09126 	beq	r6,r7,87c34 <_realloc_r+0x574>
   879f0:	20800017 	ldw	r2,0(r4)
   879f4:	28800015 	stw	r2,0(r5)
   879f8:	20c00117 	ldw	r3,4(r4)
   879fc:	28c00115 	stw	r3,4(r5)
   87a00:	20800217 	ldw	r2,8(r4)
   87a04:	28800215 	stw	r2,8(r5)
   87a08:	900b883a 	mov	r5,r18
   87a0c:	b009883a 	mov	r4,r22
   87a10:	00850700 	call	85070 <_free_r>
   87a14:	b009883a 	mov	r4,r22
   87a18:	008b01c0 	call	8b01c <__malloc_unlock>
   87a1c:	003f5e06 	br	87798 <_realloc_r+0xd8>
   87a20:	300b883a 	mov	r5,r6
   87a24:	dfc00b17 	ldw	ra,44(sp)
   87a28:	df000a17 	ldw	fp,40(sp)
   87a2c:	ddc00917 	ldw	r23,36(sp)
   87a30:	dd800817 	ldw	r22,32(sp)
   87a34:	dd400717 	ldw	r21,28(sp)
   87a38:	dd000617 	ldw	r20,24(sp)
   87a3c:	dcc00517 	ldw	r19,20(sp)
   87a40:	dc800417 	ldw	r18,16(sp)
   87a44:	dc400317 	ldw	r17,12(sp)
   87a48:	dc000217 	ldw	r16,8(sp)
   87a4c:	dec00c04 	addi	sp,sp,48
   87a50:	0085bf81 	jmpi	85bf8 <_malloc_r>
   87a54:	38800117 	ldw	r2,4(r7)
   87a58:	e54b883a 	add	r5,fp,r21
   87a5c:	31000054 	ori	r4,r6,1
   87a60:	1080004c 	andi	r2,r2,1
   87a64:	1704b03a 	or	r2,r2,fp
   87a68:	38800115 	stw	r2,4(r7)
   87a6c:	29000115 	stw	r4,4(r5)
   87a70:	2987883a 	add	r3,r5,r6
   87a74:	18800117 	ldw	r2,4(r3)
   87a78:	29400204 	addi	r5,r5,8
   87a7c:	b009883a 	mov	r4,r22
   87a80:	10800054 	ori	r2,r2,1
   87a84:	18800115 	stw	r2,4(r3)
   87a88:	00850700 	call	85070 <_free_r>
   87a8c:	003f3806 	br	87770 <_realloc_r+0xb0>
   87a90:	000d883a 	mov	r6,zero
   87a94:	0009883a 	mov	r4,zero
   87a98:	003f5d06 	br	87810 <_realloc_r+0x150>
   87a9c:	30c00217 	ldw	r3,8(r6)
   87aa0:	30800317 	ldw	r2,12(r6)
   87aa4:	800f883a 	mov	r7,r16
   87aa8:	84000204 	addi	r16,r16,8
   87aac:	10c00215 	stw	r3,8(r2)
   87ab0:	18800315 	stw	r2,12(r3)
   87ab4:	003f2306 	br	87744 <_realloc_r+0x84>
   87ab8:	8809883a 	mov	r4,r17
   87abc:	900b883a 	mov	r5,r18
   87ac0:	00864bc0 	call	864bc <memmove>
   87ac4:	003fd006 	br	87a08 <_realloc_r+0x348>
   87ac8:	30800117 	ldw	r2,4(r6)
   87acc:	e0c00404 	addi	r3,fp,16
   87ad0:	1108703a 	and	r4,r2,r4
   87ad4:	9905883a 	add	r2,r19,r4
   87ad8:	10ff4d16 	blt	r2,r3,87810 <_realloc_r+0x150>
   87adc:	1705c83a 	sub	r2,r2,fp
   87ae0:	870b883a 	add	r5,r16,fp
   87ae4:	10800054 	ori	r2,r2,1
   87ae8:	28800115 	stw	r2,4(r5)
   87aec:	80c00117 	ldw	r3,4(r16)
   87af0:	00800274 	movhi	r2,9
   87af4:	10ba3f04 	addi	r2,r2,-5892
   87af8:	b009883a 	mov	r4,r22
   87afc:	18c0004c 	andi	r3,r3,1
   87b00:	e0c6b03a 	or	r3,fp,r3
   87b04:	11400215 	stw	r5,8(r2)
   87b08:	80c00115 	stw	r3,4(r16)
   87b0c:	008b01c0 	call	8b01c <__malloc_unlock>
   87b10:	84400204 	addi	r17,r16,8
   87b14:	003f2006 	br	87798 <_realloc_r+0xd8>
   87b18:	98a9883a 	add	r20,r19,r2
   87b1c:	2509883a 	add	r4,r4,r20
   87b20:	e0800404 	addi	r2,fp,16
   87b24:	d9000115 	stw	r4,4(sp)
   87b28:	20bf7016 	blt	r4,r2,878ec <_realloc_r+0x22c>
   87b2c:	b8c00317 	ldw	r3,12(r23)
   87b30:	b8800217 	ldw	r2,8(r23)
   87b34:	99bfff04 	addi	r6,r19,-4
   87b38:	01400904 	movi	r5,36
   87b3c:	18800215 	stw	r2,8(r3)
   87b40:	10c00315 	stw	r3,12(r2)
   87b44:	bc400204 	addi	r17,r23,8
   87b48:	29804136 	bltu	r5,r6,87c50 <_realloc_r+0x590>
   87b4c:	008004c4 	movi	r2,19
   87b50:	9009883a 	mov	r4,r18
   87b54:	880f883a 	mov	r7,r17
   87b58:	11800f2e 	bgeu	r2,r6,87b98 <_realloc_r+0x4d8>
   87b5c:	90800017 	ldw	r2,0(r18)
   87b60:	b9c00404 	addi	r7,r23,16
   87b64:	91000204 	addi	r4,r18,8
   87b68:	b8800215 	stw	r2,8(r23)
   87b6c:	90c00117 	ldw	r3,4(r18)
   87b70:	008006c4 	movi	r2,27
   87b74:	b8c00315 	stw	r3,12(r23)
   87b78:	1180072e 	bgeu	r2,r6,87b98 <_realloc_r+0x4d8>
   87b7c:	90c00217 	ldw	r3,8(r18)
   87b80:	b9c00604 	addi	r7,r23,24
   87b84:	91000404 	addi	r4,r18,16
   87b88:	b8c00415 	stw	r3,16(r23)
   87b8c:	90800317 	ldw	r2,12(r18)
   87b90:	b8800515 	stw	r2,20(r23)
   87b94:	31404026 	beq	r6,r5,87c98 <_realloc_r+0x5d8>
   87b98:	20800017 	ldw	r2,0(r4)
   87b9c:	38800015 	stw	r2,0(r7)
   87ba0:	20c00117 	ldw	r3,4(r4)
   87ba4:	38c00115 	stw	r3,4(r7)
   87ba8:	20800217 	ldw	r2,8(r4)
   87bac:	38800215 	stw	r2,8(r7)
   87bb0:	d8c00117 	ldw	r3,4(sp)
   87bb4:	bf0b883a 	add	r5,r23,fp
   87bb8:	b009883a 	mov	r4,r22
   87bbc:	1f05c83a 	sub	r2,r3,fp
   87bc0:	10800054 	ori	r2,r2,1
   87bc4:	28800115 	stw	r2,4(r5)
   87bc8:	b8c00117 	ldw	r3,4(r23)
   87bcc:	00800274 	movhi	r2,9
   87bd0:	10ba3f04 	addi	r2,r2,-5892
   87bd4:	11400215 	stw	r5,8(r2)
   87bd8:	18c0004c 	andi	r3,r3,1
   87bdc:	e0c6b03a 	or	r3,fp,r3
   87be0:	b8c00115 	stw	r3,4(r23)
   87be4:	008b01c0 	call	8b01c <__malloc_unlock>
   87be8:	003eeb06 	br	87798 <_realloc_r+0xd8>
   87bec:	20800117 	ldw	r2,4(r4)
   87bf0:	00ffff04 	movi	r3,-4
   87bf4:	800f883a 	mov	r7,r16
   87bf8:	10c4703a 	and	r2,r2,r3
   87bfc:	98a9883a 	add	r20,r19,r2
   87c00:	84000204 	addi	r16,r16,8
   87c04:	003ecf06 	br	87744 <_realloc_r+0x84>
   87c08:	900b883a 	mov	r5,r18
   87c0c:	8009883a 	mov	r4,r16
   87c10:	00864bc0 	call	864bc <memmove>
   87c14:	dd000017 	ldw	r20,0(sp)
   87c18:	b80f883a 	mov	r7,r23
   87c1c:	003ec906 	br	87744 <_realloc_r+0x84>
   87c20:	900b883a 	mov	r5,r18
   87c24:	8009883a 	mov	r4,r16
   87c28:	00864bc0 	call	864bc <memmove>
   87c2c:	b80f883a 	mov	r7,r23
   87c30:	003ec406 	br	87744 <_realloc_r+0x84>
   87c34:	90c00417 	ldw	r3,16(r18)
   87c38:	89400604 	addi	r5,r17,24
   87c3c:	91000604 	addi	r4,r18,24
   87c40:	88c00415 	stw	r3,16(r17)
   87c44:	90800517 	ldw	r2,20(r18)
   87c48:	88800515 	stw	r2,20(r17)
   87c4c:	003f6806 	br	879f0 <_realloc_r+0x330>
   87c50:	900b883a 	mov	r5,r18
   87c54:	8809883a 	mov	r4,r17
   87c58:	00864bc0 	call	864bc <memmove>
   87c5c:	003fd406 	br	87bb0 <_realloc_r+0x4f0>
   87c60:	90c00417 	ldw	r3,16(r18)
   87c64:	91000604 	addi	r4,r18,24
   87c68:	ba000804 	addi	r8,r23,32
   87c6c:	b8c00615 	stw	r3,24(r23)
   87c70:	90800517 	ldw	r2,20(r18)
   87c74:	b8800715 	stw	r2,28(r23)
   87c78:	003f1206 	br	878c4 <_realloc_r+0x204>
   87c7c:	90c00417 	ldw	r3,16(r18)
   87c80:	91000604 	addi	r4,r18,24
   87c84:	ba000804 	addi	r8,r23,32
   87c88:	b8c00615 	stw	r3,24(r23)
   87c8c:	90800517 	ldw	r2,20(r18)
   87c90:	b8800715 	stw	r2,28(r23)
   87c94:	003f3206 	br	87960 <_realloc_r+0x2a0>
   87c98:	90c00417 	ldw	r3,16(r18)
   87c9c:	91000604 	addi	r4,r18,24
   87ca0:	b9c00804 	addi	r7,r23,32
   87ca4:	b8c00615 	stw	r3,24(r23)
   87ca8:	90800517 	ldw	r2,20(r18)
   87cac:	b8800715 	stw	r2,28(r23)
   87cb0:	003fb906 	br	87b98 <_realloc_r+0x4d8>

00087cb4 <__isinfd>:
   87cb4:	200d883a 	mov	r6,r4
   87cb8:	0109c83a 	sub	r4,zero,r4
   87cbc:	2188b03a 	or	r4,r4,r6
   87cc0:	2008d7fa 	srli	r4,r4,31
   87cc4:	00a00034 	movhi	r2,32768
   87cc8:	10bfffc4 	addi	r2,r2,-1
   87ccc:	1144703a 	and	r2,r2,r5
   87cd0:	2088b03a 	or	r4,r4,r2
   87cd4:	009ffc34 	movhi	r2,32752
   87cd8:	1105c83a 	sub	r2,r2,r4
   87cdc:	0087c83a 	sub	r3,zero,r2
   87ce0:	10c4b03a 	or	r2,r2,r3
   87ce4:	1004d7fa 	srli	r2,r2,31
   87ce8:	00c00044 	movi	r3,1
   87cec:	1885c83a 	sub	r2,r3,r2
   87cf0:	f800283a 	ret

00087cf4 <__isnand>:
   87cf4:	200d883a 	mov	r6,r4
   87cf8:	0109c83a 	sub	r4,zero,r4
   87cfc:	2188b03a 	or	r4,r4,r6
   87d00:	2008d7fa 	srli	r4,r4,31
   87d04:	00a00034 	movhi	r2,32768
   87d08:	10bfffc4 	addi	r2,r2,-1
   87d0c:	1144703a 	and	r2,r2,r5
   87d10:	2088b03a 	or	r4,r4,r2
   87d14:	009ffc34 	movhi	r2,32752
   87d18:	1105c83a 	sub	r2,r2,r4
   87d1c:	1004d7fa 	srli	r2,r2,31
   87d20:	f800283a 	ret

00087d24 <_sbrk_r>:
   87d24:	defffd04 	addi	sp,sp,-12
   87d28:	dc000015 	stw	r16,0(sp)
   87d2c:	04000274 	movhi	r16,9
   87d30:	8406d604 	addi	r16,r16,7000
   87d34:	dc400115 	stw	r17,4(sp)
   87d38:	80000015 	stw	zero,0(r16)
   87d3c:	2023883a 	mov	r17,r4
   87d40:	2809883a 	mov	r4,r5
   87d44:	dfc00215 	stw	ra,8(sp)
   87d48:	008b2780 	call	8b278 <sbrk>
   87d4c:	1007883a 	mov	r3,r2
   87d50:	00bfffc4 	movi	r2,-1
   87d54:	18800626 	beq	r3,r2,87d70 <_sbrk_r+0x4c>
   87d58:	1805883a 	mov	r2,r3
   87d5c:	dfc00217 	ldw	ra,8(sp)
   87d60:	dc400117 	ldw	r17,4(sp)
   87d64:	dc000017 	ldw	r16,0(sp)
   87d68:	dec00304 	addi	sp,sp,12
   87d6c:	f800283a 	ret
   87d70:	80800017 	ldw	r2,0(r16)
   87d74:	103ff826 	beq	r2,zero,87d58 <_sbrk_r+0x34>
   87d78:	88800015 	stw	r2,0(r17)
   87d7c:	1805883a 	mov	r2,r3
   87d80:	dfc00217 	ldw	ra,8(sp)
   87d84:	dc400117 	ldw	r17,4(sp)
   87d88:	dc000017 	ldw	r16,0(sp)
   87d8c:	dec00304 	addi	sp,sp,12
   87d90:	f800283a 	ret

00087d94 <__sclose>:
   87d94:	2940038f 	ldh	r5,14(r5)
   87d98:	00881501 	jmpi	88150 <_close_r>

00087d9c <__sseek>:
   87d9c:	defffe04 	addi	sp,sp,-8
   87da0:	dc000015 	stw	r16,0(sp)
   87da4:	2821883a 	mov	r16,r5
   87da8:	2940038f 	ldh	r5,14(r5)
   87dac:	dfc00115 	stw	ra,4(sp)
   87db0:	00883c80 	call	883c8 <_lseek_r>
   87db4:	1007883a 	mov	r3,r2
   87db8:	00bfffc4 	movi	r2,-1
   87dbc:	18800926 	beq	r3,r2,87de4 <__sseek+0x48>
   87dc0:	8080030b 	ldhu	r2,12(r16)
   87dc4:	80c01415 	stw	r3,80(r16)
   87dc8:	10840014 	ori	r2,r2,4096
   87dcc:	8080030d 	sth	r2,12(r16)
   87dd0:	1805883a 	mov	r2,r3
   87dd4:	dfc00117 	ldw	ra,4(sp)
   87dd8:	dc000017 	ldw	r16,0(sp)
   87ddc:	dec00204 	addi	sp,sp,8
   87de0:	f800283a 	ret
   87de4:	8080030b 	ldhu	r2,12(r16)
   87de8:	10bbffcc 	andi	r2,r2,61439
   87dec:	8080030d 	sth	r2,12(r16)
   87df0:	1805883a 	mov	r2,r3
   87df4:	dfc00117 	ldw	ra,4(sp)
   87df8:	dc000017 	ldw	r16,0(sp)
   87dfc:	dec00204 	addi	sp,sp,8
   87e00:	f800283a 	ret

00087e04 <__swrite>:
   87e04:	2880030b 	ldhu	r2,12(r5)
   87e08:	defffb04 	addi	sp,sp,-20
   87e0c:	dcc00315 	stw	r19,12(sp)
   87e10:	1080400c 	andi	r2,r2,256
   87e14:	dc800215 	stw	r18,8(sp)
   87e18:	dc400115 	stw	r17,4(sp)
   87e1c:	dc000015 	stw	r16,0(sp)
   87e20:	3027883a 	mov	r19,r6
   87e24:	3825883a 	mov	r18,r7
   87e28:	dfc00415 	stw	ra,16(sp)
   87e2c:	2821883a 	mov	r16,r5
   87e30:	000d883a 	mov	r6,zero
   87e34:	01c00084 	movi	r7,2
   87e38:	2023883a 	mov	r17,r4
   87e3c:	10000226 	beq	r2,zero,87e48 <__swrite+0x44>
   87e40:	2940038f 	ldh	r5,14(r5)
   87e44:	00883c80 	call	883c8 <_lseek_r>
   87e48:	8080030b 	ldhu	r2,12(r16)
   87e4c:	8140038f 	ldh	r5,14(r16)
   87e50:	8809883a 	mov	r4,r17
   87e54:	10bbffcc 	andi	r2,r2,61439
   87e58:	980d883a 	mov	r6,r19
   87e5c:	900f883a 	mov	r7,r18
   87e60:	8080030d 	sth	r2,12(r16)
   87e64:	dfc00417 	ldw	ra,16(sp)
   87e68:	dcc00317 	ldw	r19,12(sp)
   87e6c:	dc800217 	ldw	r18,8(sp)
   87e70:	dc400117 	ldw	r17,4(sp)
   87e74:	dc000017 	ldw	r16,0(sp)
   87e78:	dec00504 	addi	sp,sp,20
   87e7c:	00880101 	jmpi	88010 <_write_r>

00087e80 <__sread>:
   87e80:	defffe04 	addi	sp,sp,-8
   87e84:	dc000015 	stw	r16,0(sp)
   87e88:	2821883a 	mov	r16,r5
   87e8c:	2940038f 	ldh	r5,14(r5)
   87e90:	dfc00115 	stw	ra,4(sp)
   87e94:	00884400 	call	88440 <_read_r>
   87e98:	1007883a 	mov	r3,r2
   87e9c:	10000816 	blt	r2,zero,87ec0 <__sread+0x40>
   87ea0:	80801417 	ldw	r2,80(r16)
   87ea4:	10c5883a 	add	r2,r2,r3
   87ea8:	80801415 	stw	r2,80(r16)
   87eac:	1805883a 	mov	r2,r3
   87eb0:	dfc00117 	ldw	ra,4(sp)
   87eb4:	dc000017 	ldw	r16,0(sp)
   87eb8:	dec00204 	addi	sp,sp,8
   87ebc:	f800283a 	ret
   87ec0:	8080030b 	ldhu	r2,12(r16)
   87ec4:	10bbffcc 	andi	r2,r2,61439
   87ec8:	8080030d 	sth	r2,12(r16)
   87ecc:	1805883a 	mov	r2,r3
   87ed0:	dfc00117 	ldw	ra,4(sp)
   87ed4:	dc000017 	ldw	r16,0(sp)
   87ed8:	dec00204 	addi	sp,sp,8
   87edc:	f800283a 	ret

00087ee0 <strcmp>:
   87ee0:	2144b03a 	or	r2,r4,r5
   87ee4:	108000cc 	andi	r2,r2,3
   87ee8:	10001d1e 	bne	r2,zero,87f60 <strcmp+0x80>
   87eec:	200f883a 	mov	r7,r4
   87ef0:	28800017 	ldw	r2,0(r5)
   87ef4:	21000017 	ldw	r4,0(r4)
   87ef8:	280d883a 	mov	r6,r5
   87efc:	2080161e 	bne	r4,r2,87f58 <strcmp+0x78>
   87f00:	023fbff4 	movhi	r8,65279
   87f04:	423fbfc4 	addi	r8,r8,-257
   87f08:	2207883a 	add	r3,r4,r8
   87f0c:	01602074 	movhi	r5,32897
   87f10:	29602004 	addi	r5,r5,-32640
   87f14:	1946703a 	and	r3,r3,r5
   87f18:	0104303a 	nor	r2,zero,r4
   87f1c:	10c4703a 	and	r2,r2,r3
   87f20:	10001c1e 	bne	r2,zero,87f94 <strcmp+0xb4>
   87f24:	4013883a 	mov	r9,r8
   87f28:	2811883a 	mov	r8,r5
   87f2c:	00000106 	br	87f34 <strcmp+0x54>
   87f30:	1800181e 	bne	r3,zero,87f94 <strcmp+0xb4>
   87f34:	39c00104 	addi	r7,r7,4
   87f38:	39000017 	ldw	r4,0(r7)
   87f3c:	31800104 	addi	r6,r6,4
   87f40:	31400017 	ldw	r5,0(r6)
   87f44:	2245883a 	add	r2,r4,r9
   87f48:	1204703a 	and	r2,r2,r8
   87f4c:	0106303a 	nor	r3,zero,r4
   87f50:	1886703a 	and	r3,r3,r2
   87f54:	217ff626 	beq	r4,r5,87f30 <strcmp+0x50>
   87f58:	3809883a 	mov	r4,r7
   87f5c:	300b883a 	mov	r5,r6
   87f60:	20c00007 	ldb	r3,0(r4)
   87f64:	1800051e 	bne	r3,zero,87f7c <strcmp+0x9c>
   87f68:	00000606 	br	87f84 <strcmp+0xa4>
   87f6c:	21000044 	addi	r4,r4,1
   87f70:	20c00007 	ldb	r3,0(r4)
   87f74:	29400044 	addi	r5,r5,1
   87f78:	18000226 	beq	r3,zero,87f84 <strcmp+0xa4>
   87f7c:	28800007 	ldb	r2,0(r5)
   87f80:	18bffa26 	beq	r3,r2,87f6c <strcmp+0x8c>
   87f84:	20c00003 	ldbu	r3,0(r4)
   87f88:	28800003 	ldbu	r2,0(r5)
   87f8c:	1885c83a 	sub	r2,r3,r2
   87f90:	f800283a 	ret
   87f94:	0005883a 	mov	r2,zero
   87f98:	f800283a 	ret

00087f9c <strlen>:
   87f9c:	208000cc 	andi	r2,r4,3
   87fa0:	2011883a 	mov	r8,r4
   87fa4:	1000161e 	bne	r2,zero,88000 <strlen+0x64>
   87fa8:	20c00017 	ldw	r3,0(r4)
   87fac:	017fbff4 	movhi	r5,65279
   87fb0:	297fbfc4 	addi	r5,r5,-257
   87fb4:	01e02074 	movhi	r7,32897
   87fb8:	39e02004 	addi	r7,r7,-32640
   87fbc:	1945883a 	add	r2,r3,r5
   87fc0:	11c4703a 	and	r2,r2,r7
   87fc4:	00c6303a 	nor	r3,zero,r3
   87fc8:	1886703a 	and	r3,r3,r2
   87fcc:	18000c1e 	bne	r3,zero,88000 <strlen+0x64>
   87fd0:	280d883a 	mov	r6,r5
   87fd4:	380b883a 	mov	r5,r7
   87fd8:	21000104 	addi	r4,r4,4
   87fdc:	20800017 	ldw	r2,0(r4)
   87fe0:	1187883a 	add	r3,r2,r6
   87fe4:	1946703a 	and	r3,r3,r5
   87fe8:	0084303a 	nor	r2,zero,r2
   87fec:	10c4703a 	and	r2,r2,r3
   87ff0:	103ff926 	beq	r2,zero,87fd8 <strlen+0x3c>
   87ff4:	20800007 	ldb	r2,0(r4)
   87ff8:	10000326 	beq	r2,zero,88008 <strlen+0x6c>
   87ffc:	21000044 	addi	r4,r4,1
   88000:	20800007 	ldb	r2,0(r4)
   88004:	103ffd1e 	bne	r2,zero,87ffc <strlen+0x60>
   88008:	2205c83a 	sub	r2,r4,r8
   8800c:	f800283a 	ret

00088010 <_write_r>:
   88010:	defffd04 	addi	sp,sp,-12
   88014:	dc000015 	stw	r16,0(sp)
   88018:	04000274 	movhi	r16,9
   8801c:	8406d604 	addi	r16,r16,7000
   88020:	dc400115 	stw	r17,4(sp)
   88024:	80000015 	stw	zero,0(r16)
   88028:	2023883a 	mov	r17,r4
   8802c:	2809883a 	mov	r4,r5
   88030:	300b883a 	mov	r5,r6
   88034:	380d883a 	mov	r6,r7
   88038:	dfc00215 	stw	ra,8(sp)
   8803c:	008b3640 	call	8b364 <write>
   88040:	1007883a 	mov	r3,r2
   88044:	00bfffc4 	movi	r2,-1
   88048:	18800626 	beq	r3,r2,88064 <_write_r+0x54>
   8804c:	1805883a 	mov	r2,r3
   88050:	dfc00217 	ldw	ra,8(sp)
   88054:	dc400117 	ldw	r17,4(sp)
   88058:	dc000017 	ldw	r16,0(sp)
   8805c:	dec00304 	addi	sp,sp,12
   88060:	f800283a 	ret
   88064:	80800017 	ldw	r2,0(r16)
   88068:	103ff826 	beq	r2,zero,8804c <_write_r+0x3c>
   8806c:	88800015 	stw	r2,0(r17)
   88070:	1805883a 	mov	r2,r3
   88074:	dfc00217 	ldw	ra,8(sp)
   88078:	dc400117 	ldw	r17,4(sp)
   8807c:	dc000017 	ldw	r16,0(sp)
   88080:	dec00304 	addi	sp,sp,12
   88084:	f800283a 	ret

00088088 <_calloc_r>:
   88088:	defffe04 	addi	sp,sp,-8
   8808c:	dc400015 	stw	r17,0(sp)
   88090:	2023883a 	mov	r17,r4
   88094:	2809883a 	mov	r4,r5
   88098:	300b883a 	mov	r5,r6
   8809c:	dfc00115 	stw	ra,4(sp)
   880a0:	0080e140 	call	80e14 <__mulsi3>
   880a4:	100b883a 	mov	r5,r2
   880a8:	8809883a 	mov	r4,r17
   880ac:	0085bf80 	call	85bf8 <_malloc_r>
   880b0:	1023883a 	mov	r17,r2
   880b4:	01c00904 	movi	r7,36
   880b8:	10000d26 	beq	r2,zero,880f0 <_calloc_r+0x68>
   880bc:	10ffff17 	ldw	r3,-4(r2)
   880c0:	1009883a 	mov	r4,r2
   880c4:	00bfff04 	movi	r2,-4
   880c8:	1886703a 	and	r3,r3,r2
   880cc:	1887883a 	add	r3,r3,r2
   880d0:	180d883a 	mov	r6,r3
   880d4:	000b883a 	mov	r5,zero
   880d8:	38c01736 	bltu	r7,r3,88138 <_calloc_r+0xb0>
   880dc:	008004c4 	movi	r2,19
   880e0:	10c00836 	bltu	r2,r3,88104 <_calloc_r+0x7c>
   880e4:	20000215 	stw	zero,8(r4)
   880e8:	20000015 	stw	zero,0(r4)
   880ec:	20000115 	stw	zero,4(r4)
   880f0:	8805883a 	mov	r2,r17
   880f4:	dfc00117 	ldw	ra,4(sp)
   880f8:	dc400017 	ldw	r17,0(sp)
   880fc:	dec00204 	addi	sp,sp,8
   88100:	f800283a 	ret
   88104:	008006c4 	movi	r2,27
   88108:	88000015 	stw	zero,0(r17)
   8810c:	88000115 	stw	zero,4(r17)
   88110:	89000204 	addi	r4,r17,8
   88114:	10fff32e 	bgeu	r2,r3,880e4 <_calloc_r+0x5c>
   88118:	88000215 	stw	zero,8(r17)
   8811c:	88000315 	stw	zero,12(r17)
   88120:	89000404 	addi	r4,r17,16
   88124:	19ffef1e 	bne	r3,r7,880e4 <_calloc_r+0x5c>
   88128:	89000604 	addi	r4,r17,24
   8812c:	88000415 	stw	zero,16(r17)
   88130:	88000515 	stw	zero,20(r17)
   88134:	003feb06 	br	880e4 <_calloc_r+0x5c>
   88138:	008659c0 	call	8659c <memset>
   8813c:	8805883a 	mov	r2,r17
   88140:	dfc00117 	ldw	ra,4(sp)
   88144:	dc400017 	ldw	r17,0(sp)
   88148:	dec00204 	addi	sp,sp,8
   8814c:	f800283a 	ret

00088150 <_close_r>:
   88150:	defffd04 	addi	sp,sp,-12
   88154:	dc000015 	stw	r16,0(sp)
   88158:	04000274 	movhi	r16,9
   8815c:	8406d604 	addi	r16,r16,7000
   88160:	dc400115 	stw	r17,4(sp)
   88164:	80000015 	stw	zero,0(r16)
   88168:	2023883a 	mov	r17,r4
   8816c:	2809883a 	mov	r4,r5
   88170:	dfc00215 	stw	ra,8(sp)
   88174:	008a9680 	call	8a968 <close>
   88178:	1007883a 	mov	r3,r2
   8817c:	00bfffc4 	movi	r2,-1
   88180:	18800626 	beq	r3,r2,8819c <_close_r+0x4c>
   88184:	1805883a 	mov	r2,r3
   88188:	dfc00217 	ldw	ra,8(sp)
   8818c:	dc400117 	ldw	r17,4(sp)
   88190:	dc000017 	ldw	r16,0(sp)
   88194:	dec00304 	addi	sp,sp,12
   88198:	f800283a 	ret
   8819c:	80800017 	ldw	r2,0(r16)
   881a0:	103ff826 	beq	r2,zero,88184 <_close_r+0x34>
   881a4:	88800015 	stw	r2,0(r17)
   881a8:	1805883a 	mov	r2,r3
   881ac:	dfc00217 	ldw	ra,8(sp)
   881b0:	dc400117 	ldw	r17,4(sp)
   881b4:	dc000017 	ldw	r16,0(sp)
   881b8:	dec00304 	addi	sp,sp,12
   881bc:	f800283a 	ret

000881c0 <_fclose_r>:
   881c0:	defffc04 	addi	sp,sp,-16
   881c4:	dc400115 	stw	r17,4(sp)
   881c8:	dc000015 	stw	r16,0(sp)
   881cc:	dfc00315 	stw	ra,12(sp)
   881d0:	dc800215 	stw	r18,8(sp)
   881d4:	2821883a 	mov	r16,r5
   881d8:	2023883a 	mov	r17,r4
   881dc:	28002926 	beq	r5,zero,88284 <_fclose_r+0xc4>
   881e0:	0084ca80 	call	84ca8 <__sfp_lock_acquire>
   881e4:	88000226 	beq	r17,zero,881f0 <_fclose_r+0x30>
   881e8:	88800e17 	ldw	r2,56(r17)
   881ec:	10002d26 	beq	r2,zero,882a4 <_fclose_r+0xe4>
   881f0:	8080030f 	ldh	r2,12(r16)
   881f4:	10002226 	beq	r2,zero,88280 <_fclose_r+0xc0>
   881f8:	8809883a 	mov	r4,r17
   881fc:	800b883a 	mov	r5,r16
   88200:	0084a200 	call	84a20 <_fflush_r>
   88204:	1025883a 	mov	r18,r2
   88208:	80800b17 	ldw	r2,44(r16)
   8820c:	10000426 	beq	r2,zero,88220 <_fclose_r+0x60>
   88210:	81400717 	ldw	r5,28(r16)
   88214:	8809883a 	mov	r4,r17
   88218:	103ee83a 	callr	r2
   8821c:	10002a16 	blt	r2,zero,882c8 <_fclose_r+0x108>
   88220:	8080030b 	ldhu	r2,12(r16)
   88224:	1080200c 	andi	r2,r2,128
   88228:	1000231e 	bne	r2,zero,882b8 <_fclose_r+0xf8>
   8822c:	81400c17 	ldw	r5,48(r16)
   88230:	28000526 	beq	r5,zero,88248 <_fclose_r+0x88>
   88234:	80801004 	addi	r2,r16,64
   88238:	28800226 	beq	r5,r2,88244 <_fclose_r+0x84>
   8823c:	8809883a 	mov	r4,r17
   88240:	00850700 	call	85070 <_free_r>
   88244:	80000c15 	stw	zero,48(r16)
   88248:	81401117 	ldw	r5,68(r16)
   8824c:	28000326 	beq	r5,zero,8825c <_fclose_r+0x9c>
   88250:	8809883a 	mov	r4,r17
   88254:	00850700 	call	85070 <_free_r>
   88258:	80001115 	stw	zero,68(r16)
   8825c:	8000030d 	sth	zero,12(r16)
   88260:	0084cac0 	call	84cac <__sfp_lock_release>
   88264:	9005883a 	mov	r2,r18
   88268:	dfc00317 	ldw	ra,12(sp)
   8826c:	dc800217 	ldw	r18,8(sp)
   88270:	dc400117 	ldw	r17,4(sp)
   88274:	dc000017 	ldw	r16,0(sp)
   88278:	dec00404 	addi	sp,sp,16
   8827c:	f800283a 	ret
   88280:	0084cac0 	call	84cac <__sfp_lock_release>
   88284:	0025883a 	mov	r18,zero
   88288:	9005883a 	mov	r2,r18
   8828c:	dfc00317 	ldw	ra,12(sp)
   88290:	dc800217 	ldw	r18,8(sp)
   88294:	dc400117 	ldw	r17,4(sp)
   88298:	dc000017 	ldw	r16,0(sp)
   8829c:	dec00404 	addi	sp,sp,16
   882a0:	f800283a 	ret
   882a4:	8809883a 	mov	r4,r17
   882a8:	0084cb80 	call	84cb8 <__sinit>
   882ac:	8080030f 	ldh	r2,12(r16)
   882b0:	103fd11e 	bne	r2,zero,881f8 <_fclose_r+0x38>
   882b4:	003ff206 	br	88280 <_fclose_r+0xc0>
   882b8:	81400417 	ldw	r5,16(r16)
   882bc:	8809883a 	mov	r4,r17
   882c0:	00850700 	call	85070 <_free_r>
   882c4:	003fd906 	br	8822c <_fclose_r+0x6c>
   882c8:	04bfffc4 	movi	r18,-1
   882cc:	003fd406 	br	88220 <_fclose_r+0x60>

000882d0 <fclose>:
   882d0:	00800274 	movhi	r2,9
   882d4:	10bff504 	addi	r2,r2,-44
   882d8:	200b883a 	mov	r5,r4
   882dc:	11000017 	ldw	r4,0(r2)
   882e0:	00881c01 	jmpi	881c0 <_fclose_r>

000882e4 <_fstat_r>:
   882e4:	defffd04 	addi	sp,sp,-12
   882e8:	dc000015 	stw	r16,0(sp)
   882ec:	04000274 	movhi	r16,9
   882f0:	8406d604 	addi	r16,r16,7000
   882f4:	dc400115 	stw	r17,4(sp)
   882f8:	80000015 	stw	zero,0(r16)
   882fc:	2023883a 	mov	r17,r4
   88300:	2809883a 	mov	r4,r5
   88304:	300b883a 	mov	r5,r6
   88308:	dfc00215 	stw	ra,8(sp)
   8830c:	008aaf40 	call	8aaf4 <fstat>
   88310:	1007883a 	mov	r3,r2
   88314:	00bfffc4 	movi	r2,-1
   88318:	18800626 	beq	r3,r2,88334 <_fstat_r+0x50>
   8831c:	1805883a 	mov	r2,r3
   88320:	dfc00217 	ldw	ra,8(sp)
   88324:	dc400117 	ldw	r17,4(sp)
   88328:	dc000017 	ldw	r16,0(sp)
   8832c:	dec00304 	addi	sp,sp,12
   88330:	f800283a 	ret
   88334:	80800017 	ldw	r2,0(r16)
   88338:	103ff826 	beq	r2,zero,8831c <_fstat_r+0x38>
   8833c:	88800015 	stw	r2,0(r17)
   88340:	1805883a 	mov	r2,r3
   88344:	dfc00217 	ldw	ra,8(sp)
   88348:	dc400117 	ldw	r17,4(sp)
   8834c:	dc000017 	ldw	r16,0(sp)
   88350:	dec00304 	addi	sp,sp,12
   88354:	f800283a 	ret

00088358 <_isatty_r>:
   88358:	defffd04 	addi	sp,sp,-12
   8835c:	dc000015 	stw	r16,0(sp)
   88360:	04000274 	movhi	r16,9
   88364:	8406d604 	addi	r16,r16,7000
   88368:	dc400115 	stw	r17,4(sp)
   8836c:	80000015 	stw	zero,0(r16)
   88370:	2023883a 	mov	r17,r4
   88374:	2809883a 	mov	r4,r5
   88378:	dfc00215 	stw	ra,8(sp)
   8837c:	008ac2c0 	call	8ac2c <isatty>
   88380:	1007883a 	mov	r3,r2
   88384:	00bfffc4 	movi	r2,-1
   88388:	18800626 	beq	r3,r2,883a4 <_isatty_r+0x4c>
   8838c:	1805883a 	mov	r2,r3
   88390:	dfc00217 	ldw	ra,8(sp)
   88394:	dc400117 	ldw	r17,4(sp)
   88398:	dc000017 	ldw	r16,0(sp)
   8839c:	dec00304 	addi	sp,sp,12
   883a0:	f800283a 	ret
   883a4:	80800017 	ldw	r2,0(r16)
   883a8:	103ff826 	beq	r2,zero,8838c <_isatty_r+0x34>
   883ac:	88800015 	stw	r2,0(r17)
   883b0:	1805883a 	mov	r2,r3
   883b4:	dfc00217 	ldw	ra,8(sp)
   883b8:	dc400117 	ldw	r17,4(sp)
   883bc:	dc000017 	ldw	r16,0(sp)
   883c0:	dec00304 	addi	sp,sp,12
   883c4:	f800283a 	ret

000883c8 <_lseek_r>:
   883c8:	defffd04 	addi	sp,sp,-12
   883cc:	dc000015 	stw	r16,0(sp)
   883d0:	04000274 	movhi	r16,9
   883d4:	8406d604 	addi	r16,r16,7000
   883d8:	dc400115 	stw	r17,4(sp)
   883dc:	80000015 	stw	zero,0(r16)
   883e0:	2023883a 	mov	r17,r4
   883e4:	2809883a 	mov	r4,r5
   883e8:	300b883a 	mov	r5,r6
   883ec:	380d883a 	mov	r6,r7
   883f0:	dfc00215 	stw	ra,8(sp)
   883f4:	008ae3c0 	call	8ae3c <lseek>
   883f8:	1007883a 	mov	r3,r2
   883fc:	00bfffc4 	movi	r2,-1
   88400:	18800626 	beq	r3,r2,8841c <_lseek_r+0x54>
   88404:	1805883a 	mov	r2,r3
   88408:	dfc00217 	ldw	ra,8(sp)
   8840c:	dc400117 	ldw	r17,4(sp)
   88410:	dc000017 	ldw	r16,0(sp)
   88414:	dec00304 	addi	sp,sp,12
   88418:	f800283a 	ret
   8841c:	80800017 	ldw	r2,0(r16)
   88420:	103ff826 	beq	r2,zero,88404 <_lseek_r+0x3c>
   88424:	88800015 	stw	r2,0(r17)
   88428:	1805883a 	mov	r2,r3
   8842c:	dfc00217 	ldw	ra,8(sp)
   88430:	dc400117 	ldw	r17,4(sp)
   88434:	dc000017 	ldw	r16,0(sp)
   88438:	dec00304 	addi	sp,sp,12
   8843c:	f800283a 	ret

00088440 <_read_r>:
   88440:	defffd04 	addi	sp,sp,-12
   88444:	dc000015 	stw	r16,0(sp)
   88448:	04000274 	movhi	r16,9
   8844c:	8406d604 	addi	r16,r16,7000
   88450:	dc400115 	stw	r17,4(sp)
   88454:	80000015 	stw	zero,0(r16)
   88458:	2023883a 	mov	r17,r4
   8845c:	2809883a 	mov	r4,r5
   88460:	300b883a 	mov	r5,r6
   88464:	380d883a 	mov	r6,r7
   88468:	dfc00215 	stw	ra,8(sp)
   8846c:	008b07c0 	call	8b07c <read>
   88470:	1007883a 	mov	r3,r2
   88474:	00bfffc4 	movi	r2,-1
   88478:	18800626 	beq	r3,r2,88494 <_read_r+0x54>
   8847c:	1805883a 	mov	r2,r3
   88480:	dfc00217 	ldw	ra,8(sp)
   88484:	dc400117 	ldw	r17,4(sp)
   88488:	dc000017 	ldw	r16,0(sp)
   8848c:	dec00304 	addi	sp,sp,12
   88490:	f800283a 	ret
   88494:	80800017 	ldw	r2,0(r16)
   88498:	103ff826 	beq	r2,zero,8847c <_read_r+0x3c>
   8849c:	88800015 	stw	r2,0(r17)
   884a0:	1805883a 	mov	r2,r3
   884a4:	dfc00217 	ldw	ra,8(sp)
   884a8:	dc400117 	ldw	r17,4(sp)
   884ac:	dc000017 	ldw	r16,0(sp)
   884b0:	dec00304 	addi	sp,sp,12
   884b4:	f800283a 	ret

000884b8 <__udivdi3>:
   884b8:	defff104 	addi	sp,sp,-60
   884bc:	0015883a 	mov	r10,zero
   884c0:	2005883a 	mov	r2,r4
   884c4:	3011883a 	mov	r8,r6
   884c8:	df000d15 	stw	fp,52(sp)
   884cc:	dd400a15 	stw	r21,40(sp)
   884d0:	dcc00815 	stw	r19,32(sp)
   884d4:	dfc00e15 	stw	ra,56(sp)
   884d8:	ddc00c15 	stw	r23,48(sp)
   884dc:	dd800b15 	stw	r22,44(sp)
   884e0:	dd000915 	stw	r20,36(sp)
   884e4:	dc800715 	stw	r18,28(sp)
   884e8:	dc400615 	stw	r17,24(sp)
   884ec:	dc000515 	stw	r16,20(sp)
   884f0:	da800315 	stw	r10,12(sp)
   884f4:	4027883a 	mov	r19,r8
   884f8:	1039883a 	mov	fp,r2
   884fc:	282b883a 	mov	r21,r5
   88500:	da800415 	stw	r10,16(sp)
   88504:	3800401e 	bne	r7,zero,88608 <__udivdi3+0x150>
   88508:	2a006536 	bltu	r5,r8,886a0 <__udivdi3+0x1e8>
   8850c:	4000b526 	beq	r8,zero,887e4 <__udivdi3+0x32c>
   88510:	00bfffd4 	movui	r2,65535
   88514:	14c0ad36 	bltu	r2,r19,887cc <__udivdi3+0x314>
   88518:	00803fc4 	movi	r2,255
   8851c:	14c15e36 	bltu	r2,r19,88a98 <__udivdi3+0x5e0>
   88520:	000b883a 	mov	r5,zero
   88524:	0005883a 	mov	r2,zero
   88528:	9884d83a 	srl	r2,r19,r2
   8852c:	01000274 	movhi	r4,9
   88530:	2138ec04 	addi	r4,r4,-7248
   88534:	01800804 	movi	r6,32
   88538:	1105883a 	add	r2,r2,r4
   8853c:	10c00003 	ldbu	r3,0(r2)
   88540:	28c7883a 	add	r3,r5,r3
   88544:	30e9c83a 	sub	r20,r6,r3
   88548:	a0010a1e 	bne	r20,zero,88974 <__udivdi3+0x4bc>
   8854c:	982ed43a 	srli	r23,r19,16
   88550:	acebc83a 	sub	r21,r21,r19
   88554:	9dbfffcc 	andi	r22,r19,65535
   88558:	05000044 	movi	r20,1
   8855c:	a809883a 	mov	r4,r21
   88560:	b80b883a 	mov	r5,r23
   88564:	0080e040 	call	80e04 <__udivsi3>
   88568:	100b883a 	mov	r5,r2
   8856c:	b009883a 	mov	r4,r22
   88570:	1021883a 	mov	r16,r2
   88574:	0080e140 	call	80e14 <__mulsi3>
   88578:	a809883a 	mov	r4,r21
   8857c:	b80b883a 	mov	r5,r23
   88580:	1023883a 	mov	r17,r2
   88584:	0080e0c0 	call	80e0c <__umodsi3>
   88588:	1004943a 	slli	r2,r2,16
   8858c:	e006d43a 	srli	r3,fp,16
   88590:	10c4b03a 	or	r2,r2,r3
   88594:	1440042e 	bgeu	r2,r17,885a8 <__udivdi3+0xf0>
   88598:	14c5883a 	add	r2,r2,r19
   8859c:	843fffc4 	addi	r16,r16,-1
   885a0:	14c00136 	bltu	r2,r19,885a8 <__udivdi3+0xf0>
   885a4:	14415c36 	bltu	r2,r17,88b18 <__udivdi3+0x660>
   885a8:	1463c83a 	sub	r17,r2,r17
   885ac:	8809883a 	mov	r4,r17
   885b0:	b80b883a 	mov	r5,r23
   885b4:	0080e040 	call	80e04 <__udivsi3>
   885b8:	100b883a 	mov	r5,r2
   885bc:	b009883a 	mov	r4,r22
   885c0:	102b883a 	mov	r21,r2
   885c4:	0080e140 	call	80e14 <__mulsi3>
   885c8:	8809883a 	mov	r4,r17
   885cc:	b80b883a 	mov	r5,r23
   885d0:	1025883a 	mov	r18,r2
   885d4:	0080e0c0 	call	80e0c <__umodsi3>
   885d8:	1004943a 	slli	r2,r2,16
   885dc:	e0ffffcc 	andi	r3,fp,65535
   885e0:	10c4b03a 	or	r2,r2,r3
   885e4:	1480042e 	bgeu	r2,r18,885f8 <__udivdi3+0x140>
   885e8:	9885883a 	add	r2,r19,r2
   885ec:	ad7fffc4 	addi	r21,r21,-1
   885f0:	14c00136 	bltu	r2,r19,885f8 <__udivdi3+0x140>
   885f4:	14813c36 	bltu	r2,r18,88ae8 <__udivdi3+0x630>
   885f8:	8004943a 	slli	r2,r16,16
   885fc:	a009883a 	mov	r4,r20
   88600:	a884b03a 	or	r2,r21,r2
   88604:	00001506 	br	8865c <__udivdi3+0x1a4>
   88608:	380d883a 	mov	r6,r7
   8860c:	29c06c36 	bltu	r5,r7,887c0 <__udivdi3+0x308>
   88610:	00bfffd4 	movui	r2,65535
   88614:	11c06436 	bltu	r2,r7,887a8 <__udivdi3+0x2f0>
   88618:	00803fc4 	movi	r2,255
   8861c:	11c11836 	bltu	r2,r7,88a80 <__udivdi3+0x5c8>
   88620:	000b883a 	mov	r5,zero
   88624:	0005883a 	mov	r2,zero
   88628:	3084d83a 	srl	r2,r6,r2
   8862c:	01000274 	movhi	r4,9
   88630:	2138ec04 	addi	r4,r4,-7248
   88634:	01c00804 	movi	r7,32
   88638:	1105883a 	add	r2,r2,r4
   8863c:	10c00003 	ldbu	r3,0(r2)
   88640:	28c7883a 	add	r3,r5,r3
   88644:	38edc83a 	sub	r22,r7,r3
   88648:	b000731e 	bne	r22,zero,88818 <__udivdi3+0x360>
   8864c:	35400136 	bltu	r6,r21,88654 <__udivdi3+0x19c>
   88650:	e4c05b36 	bltu	fp,r19,887c0 <__udivdi3+0x308>
   88654:	00800044 	movi	r2,1
   88658:	0009883a 	mov	r4,zero
   8865c:	d8800315 	stw	r2,12(sp)
   88660:	d9400317 	ldw	r5,12(sp)
   88664:	2007883a 	mov	r3,r4
   88668:	d9000415 	stw	r4,16(sp)
   8866c:	2805883a 	mov	r2,r5
   88670:	dfc00e17 	ldw	ra,56(sp)
   88674:	df000d17 	ldw	fp,52(sp)
   88678:	ddc00c17 	ldw	r23,48(sp)
   8867c:	dd800b17 	ldw	r22,44(sp)
   88680:	dd400a17 	ldw	r21,40(sp)
   88684:	dd000917 	ldw	r20,36(sp)
   88688:	dcc00817 	ldw	r19,32(sp)
   8868c:	dc800717 	ldw	r18,28(sp)
   88690:	dc400617 	ldw	r17,24(sp)
   88694:	dc000517 	ldw	r16,20(sp)
   88698:	dec00f04 	addi	sp,sp,60
   8869c:	f800283a 	ret
   886a0:	00bfffd4 	movui	r2,65535
   886a4:	12005636 	bltu	r2,r8,88800 <__udivdi3+0x348>
   886a8:	00803fc4 	movi	r2,255
   886ac:	12010036 	bltu	r2,r8,88ab0 <__udivdi3+0x5f8>
   886b0:	000b883a 	mov	r5,zero
   886b4:	0005883a 	mov	r2,zero
   886b8:	9884d83a 	srl	r2,r19,r2
   886bc:	01000274 	movhi	r4,9
   886c0:	2138ec04 	addi	r4,r4,-7248
   886c4:	01800804 	movi	r6,32
   886c8:	1105883a 	add	r2,r2,r4
   886cc:	10c00003 	ldbu	r3,0(r2)
   886d0:	28c7883a 	add	r3,r5,r3
   886d4:	30cbc83a 	sub	r5,r6,r3
   886d8:	28000626 	beq	r5,zero,886f4 <__udivdi3+0x23c>
   886dc:	3145c83a 	sub	r2,r6,r5
   886e0:	e084d83a 	srl	r2,fp,r2
   886e4:	a946983a 	sll	r3,r21,r5
   886e8:	e178983a 	sll	fp,fp,r5
   886ec:	9966983a 	sll	r19,r19,r5
   886f0:	18aab03a 	or	r21,r3,r2
   886f4:	982ed43a 	srli	r23,r19,16
   886f8:	a809883a 	mov	r4,r21
   886fc:	9cbfffcc 	andi	r18,r19,65535
   88700:	b80b883a 	mov	r5,r23
   88704:	0080e040 	call	80e04 <__udivsi3>
   88708:	100b883a 	mov	r5,r2
   8870c:	9009883a 	mov	r4,r18
   88710:	1021883a 	mov	r16,r2
   88714:	0080e140 	call	80e14 <__mulsi3>
   88718:	a809883a 	mov	r4,r21
   8871c:	b80b883a 	mov	r5,r23
   88720:	1023883a 	mov	r17,r2
   88724:	0080e0c0 	call	80e0c <__umodsi3>
   88728:	1004943a 	slli	r2,r2,16
   8872c:	e006d43a 	srli	r3,fp,16
   88730:	10c4b03a 	or	r2,r2,r3
   88734:	1440042e 	bgeu	r2,r17,88748 <__udivdi3+0x290>
   88738:	14c5883a 	add	r2,r2,r19
   8873c:	843fffc4 	addi	r16,r16,-1
   88740:	14c00136 	bltu	r2,r19,88748 <__udivdi3+0x290>
   88744:	1440ea36 	bltu	r2,r17,88af0 <__udivdi3+0x638>
   88748:	1463c83a 	sub	r17,r2,r17
   8874c:	8809883a 	mov	r4,r17
   88750:	b80b883a 	mov	r5,r23
   88754:	0080e040 	call	80e04 <__udivsi3>
   88758:	100b883a 	mov	r5,r2
   8875c:	9009883a 	mov	r4,r18
   88760:	102b883a 	mov	r21,r2
   88764:	0080e140 	call	80e14 <__mulsi3>
   88768:	8809883a 	mov	r4,r17
   8876c:	b80b883a 	mov	r5,r23
   88770:	1025883a 	mov	r18,r2
   88774:	0080e0c0 	call	80e0c <__umodsi3>
   88778:	1004943a 	slli	r2,r2,16
   8877c:	e0ffffcc 	andi	r3,fp,65535
   88780:	10c4b03a 	or	r2,r2,r3
   88784:	1480042e 	bgeu	r2,r18,88798 <__udivdi3+0x2e0>
   88788:	9885883a 	add	r2,r19,r2
   8878c:	ad7fffc4 	addi	r21,r21,-1
   88790:	14c00136 	bltu	r2,r19,88798 <__udivdi3+0x2e0>
   88794:	1480d936 	bltu	r2,r18,88afc <__udivdi3+0x644>
   88798:	8004943a 	slli	r2,r16,16
   8879c:	0009883a 	mov	r4,zero
   887a0:	a884b03a 	or	r2,r21,r2
   887a4:	003fad06 	br	8865c <__udivdi3+0x1a4>
   887a8:	00804034 	movhi	r2,256
   887ac:	10bfffc4 	addi	r2,r2,-1
   887b0:	11c0b636 	bltu	r2,r7,88a8c <__udivdi3+0x5d4>
   887b4:	01400404 	movi	r5,16
   887b8:	2805883a 	mov	r2,r5
   887bc:	003f9a06 	br	88628 <__udivdi3+0x170>
   887c0:	0005883a 	mov	r2,zero
   887c4:	0009883a 	mov	r4,zero
   887c8:	003fa406 	br	8865c <__udivdi3+0x1a4>
   887cc:	00804034 	movhi	r2,256
   887d0:	10bfffc4 	addi	r2,r2,-1
   887d4:	14c0b336 	bltu	r2,r19,88aa4 <__udivdi3+0x5ec>
   887d8:	01400404 	movi	r5,16
   887dc:	2805883a 	mov	r2,r5
   887e0:	003f5106 	br	88528 <__udivdi3+0x70>
   887e4:	01000044 	movi	r4,1
   887e8:	000b883a 	mov	r5,zero
   887ec:	0080e040 	call	80e04 <__udivsi3>
   887f0:	1027883a 	mov	r19,r2
   887f4:	00bfffd4 	movui	r2,65535
   887f8:	14fff436 	bltu	r2,r19,887cc <__udivdi3+0x314>
   887fc:	003f4606 	br	88518 <__udivdi3+0x60>
   88800:	00804034 	movhi	r2,256
   88804:	10bfffc4 	addi	r2,r2,-1
   88808:	1200ac36 	bltu	r2,r8,88abc <__udivdi3+0x604>
   8880c:	01400404 	movi	r5,16
   88810:	2805883a 	mov	r2,r5
   88814:	003fa806 	br	886b8 <__udivdi3+0x200>
   88818:	3d85c83a 	sub	r2,r7,r22
   8881c:	3588983a 	sll	r4,r6,r22
   88820:	9886d83a 	srl	r3,r19,r2
   88824:	a8a2d83a 	srl	r17,r21,r2
   88828:	e084d83a 	srl	r2,fp,r2
   8882c:	20eeb03a 	or	r23,r4,r3
   88830:	b824d43a 	srli	r18,r23,16
   88834:	ad86983a 	sll	r3,r21,r22
   88838:	8809883a 	mov	r4,r17
   8883c:	900b883a 	mov	r5,r18
   88840:	1886b03a 	or	r3,r3,r2
   88844:	d8c00115 	stw	r3,4(sp)
   88848:	bc3fffcc 	andi	r16,r23,65535
   8884c:	0080e040 	call	80e04 <__udivsi3>
   88850:	100b883a 	mov	r5,r2
   88854:	8009883a 	mov	r4,r16
   88858:	1029883a 	mov	r20,r2
   8885c:	0080e140 	call	80e14 <__mulsi3>
   88860:	900b883a 	mov	r5,r18
   88864:	8809883a 	mov	r4,r17
   88868:	102b883a 	mov	r21,r2
   8886c:	0080e0c0 	call	80e0c <__umodsi3>
   88870:	d9400117 	ldw	r5,4(sp)
   88874:	1004943a 	slli	r2,r2,16
   88878:	9da6983a 	sll	r19,r19,r22
   8887c:	2806d43a 	srli	r3,r5,16
   88880:	10c4b03a 	or	r2,r2,r3
   88884:	1540032e 	bgeu	r2,r21,88894 <__udivdi3+0x3dc>
   88888:	15c5883a 	add	r2,r2,r23
   8888c:	a53fffc4 	addi	r20,r20,-1
   88890:	15c0912e 	bgeu	r2,r23,88ad8 <__udivdi3+0x620>
   88894:	1563c83a 	sub	r17,r2,r21
   88898:	8809883a 	mov	r4,r17
   8889c:	900b883a 	mov	r5,r18
   888a0:	0080e040 	call	80e04 <__udivsi3>
   888a4:	100b883a 	mov	r5,r2
   888a8:	8009883a 	mov	r4,r16
   888ac:	102b883a 	mov	r21,r2
   888b0:	0080e140 	call	80e14 <__mulsi3>
   888b4:	8809883a 	mov	r4,r17
   888b8:	900b883a 	mov	r5,r18
   888bc:	1021883a 	mov	r16,r2
   888c0:	0080e0c0 	call	80e0c <__umodsi3>
   888c4:	da800117 	ldw	r10,4(sp)
   888c8:	1004943a 	slli	r2,r2,16
   888cc:	50ffffcc 	andi	r3,r10,65535
   888d0:	10c6b03a 	or	r3,r2,r3
   888d4:	1c00032e 	bgeu	r3,r16,888e4 <__udivdi3+0x42c>
   888d8:	1dc7883a 	add	r3,r3,r23
   888dc:	ad7fffc4 	addi	r21,r21,-1
   888e0:	1dc0792e 	bgeu	r3,r23,88ac8 <__udivdi3+0x610>
   888e4:	a004943a 	slli	r2,r20,16
   888e8:	982ed43a 	srli	r23,r19,16
   888ec:	9cffffcc 	andi	r19,r19,65535
   888f0:	a8a4b03a 	or	r18,r21,r2
   888f4:	947fffcc 	andi	r17,r18,65535
   888f8:	902ad43a 	srli	r21,r18,16
   888fc:	8809883a 	mov	r4,r17
   88900:	980b883a 	mov	r5,r19
   88904:	1c21c83a 	sub	r16,r3,r16
   88908:	0080e140 	call	80e14 <__mulsi3>
   8890c:	8809883a 	mov	r4,r17
   88910:	b80b883a 	mov	r5,r23
   88914:	1029883a 	mov	r20,r2
   88918:	0080e140 	call	80e14 <__mulsi3>
   8891c:	980b883a 	mov	r5,r19
   88920:	a809883a 	mov	r4,r21
   88924:	1023883a 	mov	r17,r2
   88928:	0080e140 	call	80e14 <__mulsi3>
   8892c:	a809883a 	mov	r4,r21
   88930:	b80b883a 	mov	r5,r23
   88934:	1027883a 	mov	r19,r2
   88938:	0080e140 	call	80e14 <__mulsi3>
   8893c:	1009883a 	mov	r4,r2
   88940:	a004d43a 	srli	r2,r20,16
   88944:	8ce3883a 	add	r17,r17,r19
   88948:	1447883a 	add	r3,r2,r17
   8894c:	1cc0022e 	bgeu	r3,r19,88958 <__udivdi3+0x4a0>
   88950:	00800074 	movhi	r2,1
   88954:	2089883a 	add	r4,r4,r2
   88958:	1804d43a 	srli	r2,r3,16
   8895c:	2085883a 	add	r2,r4,r2
   88960:	80804436 	bltu	r16,r2,88a74 <__udivdi3+0x5bc>
   88964:	80803e26 	beq	r16,r2,88a60 <__udivdi3+0x5a8>
   88968:	9005883a 	mov	r2,r18
   8896c:	0009883a 	mov	r4,zero
   88970:	003f3a06 	br	8865c <__udivdi3+0x1a4>
   88974:	9d26983a 	sll	r19,r19,r20
   88978:	3505c83a 	sub	r2,r6,r20
   8897c:	a8a2d83a 	srl	r17,r21,r2
   88980:	982ed43a 	srli	r23,r19,16
   88984:	e084d83a 	srl	r2,fp,r2
   88988:	ad06983a 	sll	r3,r21,r20
   8898c:	8809883a 	mov	r4,r17
   88990:	b80b883a 	mov	r5,r23
   88994:	1886b03a 	or	r3,r3,r2
   88998:	d8c00015 	stw	r3,0(sp)
   8899c:	9dbfffcc 	andi	r22,r19,65535
   889a0:	0080e040 	call	80e04 <__udivsi3>
   889a4:	100b883a 	mov	r5,r2
   889a8:	b009883a 	mov	r4,r22
   889ac:	d8800215 	stw	r2,8(sp)
   889b0:	0080e140 	call	80e14 <__mulsi3>
   889b4:	8809883a 	mov	r4,r17
   889b8:	b80b883a 	mov	r5,r23
   889bc:	102b883a 	mov	r21,r2
   889c0:	0080e0c0 	call	80e0c <__umodsi3>
   889c4:	d9000017 	ldw	r4,0(sp)
   889c8:	1004943a 	slli	r2,r2,16
   889cc:	2006d43a 	srli	r3,r4,16
   889d0:	10c4b03a 	or	r2,r2,r3
   889d4:	1540052e 	bgeu	r2,r21,889ec <__udivdi3+0x534>
   889d8:	d9400217 	ldw	r5,8(sp)
   889dc:	14c5883a 	add	r2,r2,r19
   889e0:	297fffc4 	addi	r5,r5,-1
   889e4:	d9400215 	stw	r5,8(sp)
   889e8:	14c0462e 	bgeu	r2,r19,88b04 <__udivdi3+0x64c>
   889ec:	1563c83a 	sub	r17,r2,r21
   889f0:	8809883a 	mov	r4,r17
   889f4:	b80b883a 	mov	r5,r23
   889f8:	0080e040 	call	80e04 <__udivsi3>
   889fc:	100b883a 	mov	r5,r2
   88a00:	b009883a 	mov	r4,r22
   88a04:	1025883a 	mov	r18,r2
   88a08:	0080e140 	call	80e14 <__mulsi3>
   88a0c:	8809883a 	mov	r4,r17
   88a10:	b80b883a 	mov	r5,r23
   88a14:	1021883a 	mov	r16,r2
   88a18:	0080e0c0 	call	80e0c <__umodsi3>
   88a1c:	da800017 	ldw	r10,0(sp)
   88a20:	1004943a 	slli	r2,r2,16
   88a24:	50ffffcc 	andi	r3,r10,65535
   88a28:	10c6b03a 	or	r3,r2,r3
   88a2c:	1c00062e 	bgeu	r3,r16,88a48 <__udivdi3+0x590>
   88a30:	1cc7883a 	add	r3,r3,r19
   88a34:	94bfffc4 	addi	r18,r18,-1
   88a38:	1cc00336 	bltu	r3,r19,88a48 <__udivdi3+0x590>
   88a3c:	1c00022e 	bgeu	r3,r16,88a48 <__udivdi3+0x590>
   88a40:	94bfffc4 	addi	r18,r18,-1
   88a44:	1cc7883a 	add	r3,r3,r19
   88a48:	d9000217 	ldw	r4,8(sp)
   88a4c:	e538983a 	sll	fp,fp,r20
   88a50:	1c2bc83a 	sub	r21,r3,r16
   88a54:	2004943a 	slli	r2,r4,16
   88a58:	90a8b03a 	or	r20,r18,r2
   88a5c:	003ebf06 	br	8855c <__udivdi3+0xa4>
   88a60:	1804943a 	slli	r2,r3,16
   88a64:	e588983a 	sll	r4,fp,r22
   88a68:	a0ffffcc 	andi	r3,r20,65535
   88a6c:	10c5883a 	add	r2,r2,r3
   88a70:	20bfbd2e 	bgeu	r4,r2,88968 <__udivdi3+0x4b0>
   88a74:	90bfffc4 	addi	r2,r18,-1
   88a78:	0009883a 	mov	r4,zero
   88a7c:	003ef706 	br	8865c <__udivdi3+0x1a4>
   88a80:	01400204 	movi	r5,8
   88a84:	2805883a 	mov	r2,r5
   88a88:	003ee706 	br	88628 <__udivdi3+0x170>
   88a8c:	01400604 	movi	r5,24
   88a90:	2805883a 	mov	r2,r5
   88a94:	003ee406 	br	88628 <__udivdi3+0x170>
   88a98:	01400204 	movi	r5,8
   88a9c:	2805883a 	mov	r2,r5
   88aa0:	003ea106 	br	88528 <__udivdi3+0x70>
   88aa4:	01400604 	movi	r5,24
   88aa8:	2805883a 	mov	r2,r5
   88aac:	003e9e06 	br	88528 <__udivdi3+0x70>
   88ab0:	01400204 	movi	r5,8
   88ab4:	2805883a 	mov	r2,r5
   88ab8:	003eff06 	br	886b8 <__udivdi3+0x200>
   88abc:	01400604 	movi	r5,24
   88ac0:	2805883a 	mov	r2,r5
   88ac4:	003efc06 	br	886b8 <__udivdi3+0x200>
   88ac8:	1c3f862e 	bgeu	r3,r16,888e4 <__udivdi3+0x42c>
   88acc:	1dc7883a 	add	r3,r3,r23
   88ad0:	ad7fffc4 	addi	r21,r21,-1
   88ad4:	003f8306 	br	888e4 <__udivdi3+0x42c>
   88ad8:	157f6e2e 	bgeu	r2,r21,88894 <__udivdi3+0x3dc>
   88adc:	a53fffc4 	addi	r20,r20,-1
   88ae0:	15c5883a 	add	r2,r2,r23
   88ae4:	003f6b06 	br	88894 <__udivdi3+0x3dc>
   88ae8:	ad7fffc4 	addi	r21,r21,-1
   88aec:	003ec206 	br	885f8 <__udivdi3+0x140>
   88af0:	843fffc4 	addi	r16,r16,-1
   88af4:	14c5883a 	add	r2,r2,r19
   88af8:	003f1306 	br	88748 <__udivdi3+0x290>
   88afc:	ad7fffc4 	addi	r21,r21,-1
   88b00:	003f2506 	br	88798 <__udivdi3+0x2e0>
   88b04:	157fb92e 	bgeu	r2,r21,889ec <__udivdi3+0x534>
   88b08:	297fffc4 	addi	r5,r5,-1
   88b0c:	14c5883a 	add	r2,r2,r19
   88b10:	d9400215 	stw	r5,8(sp)
   88b14:	003fb506 	br	889ec <__udivdi3+0x534>
   88b18:	843fffc4 	addi	r16,r16,-1
   88b1c:	14c5883a 	add	r2,r2,r19
   88b20:	003ea106 	br	885a8 <__udivdi3+0xf0>

00088b24 <__umoddi3>:
   88b24:	defff004 	addi	sp,sp,-64
   88b28:	3011883a 	mov	r8,r6
   88b2c:	000d883a 	mov	r6,zero
   88b30:	dd400b15 	stw	r21,44(sp)
   88b34:	dcc00915 	stw	r19,36(sp)
   88b38:	dc000615 	stw	r16,24(sp)
   88b3c:	dfc00f15 	stw	ra,60(sp)
   88b40:	df000e15 	stw	fp,56(sp)
   88b44:	ddc00d15 	stw	r23,52(sp)
   88b48:	dd800c15 	stw	r22,48(sp)
   88b4c:	dd000a15 	stw	r20,40(sp)
   88b50:	dc800815 	stw	r18,32(sp)
   88b54:	dc400715 	stw	r17,28(sp)
   88b58:	2817883a 	mov	r11,r5
   88b5c:	d9800415 	stw	r6,16(sp)
   88b60:	4027883a 	mov	r19,r8
   88b64:	d9800515 	stw	r6,20(sp)
   88b68:	2021883a 	mov	r16,r4
   88b6c:	282b883a 	mov	r21,r5
   88b70:	38002c1e 	bne	r7,zero,88c24 <__umoddi3+0x100>
   88b74:	2a005636 	bltu	r5,r8,88cd0 <__umoddi3+0x1ac>
   88b78:	40009a26 	beq	r8,zero,88de4 <__umoddi3+0x2c0>
   88b7c:	00bfffd4 	movui	r2,65535
   88b80:	14c09236 	bltu	r2,r19,88dcc <__umoddi3+0x2a8>
   88b84:	00803fc4 	movi	r2,255
   88b88:	14c15c36 	bltu	r2,r19,890fc <__umoddi3+0x5d8>
   88b8c:	000b883a 	mov	r5,zero
   88b90:	0005883a 	mov	r2,zero
   88b94:	9884d83a 	srl	r2,r19,r2
   88b98:	01000274 	movhi	r4,9
   88b9c:	2138ec04 	addi	r4,r4,-7248
   88ba0:	01800804 	movi	r6,32
   88ba4:	1105883a 	add	r2,r2,r4
   88ba8:	10c00003 	ldbu	r3,0(r2)
   88bac:	28c7883a 	add	r3,r5,r3
   88bb0:	30e5c83a 	sub	r18,r6,r3
   88bb4:	9000a41e 	bne	r18,zero,88e48 <__umoddi3+0x324>
   88bb8:	982ed43a 	srli	r23,r19,16
   88bbc:	acebc83a 	sub	r21,r21,r19
   88bc0:	9d3fffcc 	andi	r20,r19,65535
   88bc4:	002d883a 	mov	r22,zero
   88bc8:	a809883a 	mov	r4,r21
   88bcc:	b80b883a 	mov	r5,r23
   88bd0:	0080e040 	call	80e04 <__udivsi3>
   88bd4:	100b883a 	mov	r5,r2
   88bd8:	a009883a 	mov	r4,r20
   88bdc:	0080e140 	call	80e14 <__mulsi3>
   88be0:	a809883a 	mov	r4,r21
   88be4:	b80b883a 	mov	r5,r23
   88be8:	1023883a 	mov	r17,r2
   88bec:	0080e0c0 	call	80e0c <__umodsi3>
   88bf0:	1004943a 	slli	r2,r2,16
   88bf4:	8006d43a 	srli	r3,r16,16
   88bf8:	10c4b03a 	or	r2,r2,r3
   88bfc:	1440032e 	bgeu	r2,r17,88c0c <__umoddi3+0xe8>
   88c00:	14c5883a 	add	r2,r2,r19
   88c04:	14c00136 	bltu	r2,r19,88c0c <__umoddi3+0xe8>
   88c08:	14415836 	bltu	r2,r17,8916c <__umoddi3+0x648>
   88c0c:	1463c83a 	sub	r17,r2,r17
   88c10:	8809883a 	mov	r4,r17
   88c14:	b80b883a 	mov	r5,r23
   88c18:	0080e040 	call	80e04 <__udivsi3>
   88c1c:	a009883a 	mov	r4,r20
   88c20:	00005306 	br	88d70 <__umoddi3+0x24c>
   88c24:	380d883a 	mov	r6,r7
   88c28:	29c0132e 	bgeu	r5,r7,88c78 <__umoddi3+0x154>
   88c2c:	d9000415 	stw	r4,16(sp)
   88c30:	d9400515 	stw	r5,20(sp)
   88c34:	d9400417 	ldw	r5,16(sp)
   88c38:	5813883a 	mov	r9,r11
   88c3c:	2811883a 	mov	r8,r5
   88c40:	4005883a 	mov	r2,r8
   88c44:	4807883a 	mov	r3,r9
   88c48:	dfc00f17 	ldw	ra,60(sp)
   88c4c:	df000e17 	ldw	fp,56(sp)
   88c50:	ddc00d17 	ldw	r23,52(sp)
   88c54:	dd800c17 	ldw	r22,48(sp)
   88c58:	dd400b17 	ldw	r21,44(sp)
   88c5c:	dd000a17 	ldw	r20,40(sp)
   88c60:	dcc00917 	ldw	r19,36(sp)
   88c64:	dc800817 	ldw	r18,32(sp)
   88c68:	dc400717 	ldw	r17,28(sp)
   88c6c:	dc000617 	ldw	r16,24(sp)
   88c70:	dec01004 	addi	sp,sp,64
   88c74:	f800283a 	ret
   88c78:	00bfffd4 	movui	r2,65535
   88c7c:	11c06636 	bltu	r2,r7,88e18 <__umoddi3+0x2f4>
   88c80:	00803fc4 	movi	r2,255
   88c84:	11c12036 	bltu	r2,r7,89108 <__umoddi3+0x5e4>
   88c88:	000b883a 	mov	r5,zero
   88c8c:	0005883a 	mov	r2,zero
   88c90:	3084d83a 	srl	r2,r6,r2
   88c94:	01000274 	movhi	r4,9
   88c98:	2138ec04 	addi	r4,r4,-7248
   88c9c:	01c00804 	movi	r7,32
   88ca0:	1105883a 	add	r2,r2,r4
   88ca4:	10c00003 	ldbu	r3,0(r2)
   88ca8:	28c7883a 	add	r3,r5,r3
   88cac:	38e5c83a 	sub	r18,r7,r3
   88cb0:	9000941e 	bne	r18,zero,88f04 <__umoddi3+0x3e0>
   88cb4:	35405e36 	bltu	r6,r21,88e30 <__umoddi3+0x30c>
   88cb8:	84c05d2e 	bgeu	r16,r19,88e30 <__umoddi3+0x30c>
   88cbc:	8011883a 	mov	r8,r16
   88cc0:	a813883a 	mov	r9,r21
   88cc4:	dc000415 	stw	r16,16(sp)
   88cc8:	dd400515 	stw	r21,20(sp)
   88ccc:	003fdc06 	br	88c40 <__umoddi3+0x11c>
   88cd0:	00bfffd4 	movui	r2,65535
   88cd4:	12004a36 	bltu	r2,r8,88e00 <__umoddi3+0x2dc>
   88cd8:	00803fc4 	movi	r2,255
   88cdc:	12010d36 	bltu	r2,r8,89114 <__umoddi3+0x5f0>
   88ce0:	000b883a 	mov	r5,zero
   88ce4:	0005883a 	mov	r2,zero
   88ce8:	9884d83a 	srl	r2,r19,r2
   88cec:	01000274 	movhi	r4,9
   88cf0:	2138ec04 	addi	r4,r4,-7248
   88cf4:	01800804 	movi	r6,32
   88cf8:	1105883a 	add	r2,r2,r4
   88cfc:	10c00003 	ldbu	r3,0(r2)
   88d00:	28c7883a 	add	r3,r5,r3
   88d04:	30c7c83a 	sub	r3,r6,r3
   88d08:	1800dc1e 	bne	r3,zero,8907c <__umoddi3+0x558>
   88d0c:	002d883a 	mov	r22,zero
   88d10:	982ed43a 	srli	r23,r19,16
   88d14:	a809883a 	mov	r4,r21
   88d18:	9cbfffcc 	andi	r18,r19,65535
   88d1c:	b80b883a 	mov	r5,r23
   88d20:	0080e040 	call	80e04 <__udivsi3>
   88d24:	100b883a 	mov	r5,r2
   88d28:	9009883a 	mov	r4,r18
   88d2c:	0080e140 	call	80e14 <__mulsi3>
   88d30:	a809883a 	mov	r4,r21
   88d34:	b80b883a 	mov	r5,r23
   88d38:	1023883a 	mov	r17,r2
   88d3c:	0080e0c0 	call	80e0c <__umodsi3>
   88d40:	1004943a 	slli	r2,r2,16
   88d44:	8006d43a 	srli	r3,r16,16
   88d48:	10c4b03a 	or	r2,r2,r3
   88d4c:	1440032e 	bgeu	r2,r17,88d5c <__umoddi3+0x238>
   88d50:	14c5883a 	add	r2,r2,r19
   88d54:	14c00136 	bltu	r2,r19,88d5c <__umoddi3+0x238>
   88d58:	14410236 	bltu	r2,r17,89164 <__umoddi3+0x640>
   88d5c:	1463c83a 	sub	r17,r2,r17
   88d60:	8809883a 	mov	r4,r17
   88d64:	b80b883a 	mov	r5,r23
   88d68:	0080e040 	call	80e04 <__udivsi3>
   88d6c:	9009883a 	mov	r4,r18
   88d70:	100b883a 	mov	r5,r2
   88d74:	0080e140 	call	80e14 <__mulsi3>
   88d78:	8809883a 	mov	r4,r17
   88d7c:	b80b883a 	mov	r5,r23
   88d80:	102b883a 	mov	r21,r2
   88d84:	0080e0c0 	call	80e0c <__umodsi3>
   88d88:	1004943a 	slli	r2,r2,16
   88d8c:	80ffffcc 	andi	r3,r16,65535
   88d90:	10c4b03a 	or	r2,r2,r3
   88d94:	1540042e 	bgeu	r2,r21,88da8 <__umoddi3+0x284>
   88d98:	14c5883a 	add	r2,r2,r19
   88d9c:	14c00236 	bltu	r2,r19,88da8 <__umoddi3+0x284>
   88da0:	1540012e 	bgeu	r2,r21,88da8 <__umoddi3+0x284>
   88da4:	14c5883a 	add	r2,r2,r19
   88da8:	1545c83a 	sub	r2,r2,r21
   88dac:	1584d83a 	srl	r2,r2,r22
   88db0:	0013883a 	mov	r9,zero
   88db4:	d8800415 	stw	r2,16(sp)
   88db8:	d8c00417 	ldw	r3,16(sp)
   88dbc:	0005883a 	mov	r2,zero
   88dc0:	d8800515 	stw	r2,20(sp)
   88dc4:	1811883a 	mov	r8,r3
   88dc8:	003f9d06 	br	88c40 <__umoddi3+0x11c>
   88dcc:	00804034 	movhi	r2,256
   88dd0:	10bfffc4 	addi	r2,r2,-1
   88dd4:	14c0c636 	bltu	r2,r19,890f0 <__umoddi3+0x5cc>
   88dd8:	01400404 	movi	r5,16
   88ddc:	2805883a 	mov	r2,r5
   88de0:	003f6c06 	br	88b94 <__umoddi3+0x70>
   88de4:	01000044 	movi	r4,1
   88de8:	000b883a 	mov	r5,zero
   88dec:	0080e040 	call	80e04 <__udivsi3>
   88df0:	1027883a 	mov	r19,r2
   88df4:	00bfffd4 	movui	r2,65535
   88df8:	14fff436 	bltu	r2,r19,88dcc <__umoddi3+0x2a8>
   88dfc:	003f6106 	br	88b84 <__umoddi3+0x60>
   88e00:	00804034 	movhi	r2,256
   88e04:	10bfffc4 	addi	r2,r2,-1
   88e08:	1200c536 	bltu	r2,r8,89120 <__umoddi3+0x5fc>
   88e0c:	01400404 	movi	r5,16
   88e10:	2805883a 	mov	r2,r5
   88e14:	003fb406 	br	88ce8 <__umoddi3+0x1c4>
   88e18:	00804034 	movhi	r2,256
   88e1c:	10bfffc4 	addi	r2,r2,-1
   88e20:	11c0c236 	bltu	r2,r7,8912c <__umoddi3+0x608>
   88e24:	01400404 	movi	r5,16
   88e28:	2805883a 	mov	r2,r5
   88e2c:	003f9806 	br	88c90 <__umoddi3+0x16c>
   88e30:	84c9c83a 	sub	r4,r16,r19
   88e34:	8105803a 	cmpltu	r2,r16,r4
   88e38:	a987c83a 	sub	r3,r21,r6
   88e3c:	18abc83a 	sub	r21,r3,r2
   88e40:	2021883a 	mov	r16,r4
   88e44:	003f9d06 	br	88cbc <__umoddi3+0x198>
   88e48:	9ca6983a 	sll	r19,r19,r18
   88e4c:	3485c83a 	sub	r2,r6,r18
   88e50:	a8a2d83a 	srl	r17,r21,r2
   88e54:	982ed43a 	srli	r23,r19,16
   88e58:	ac86983a 	sll	r3,r21,r18
   88e5c:	8084d83a 	srl	r2,r16,r2
   88e60:	8809883a 	mov	r4,r17
   88e64:	b80b883a 	mov	r5,r23
   88e68:	18b8b03a 	or	fp,r3,r2
   88e6c:	9d3fffcc 	andi	r20,r19,65535
   88e70:	0080e040 	call	80e04 <__udivsi3>
   88e74:	100b883a 	mov	r5,r2
   88e78:	a009883a 	mov	r4,r20
   88e7c:	0080e140 	call	80e14 <__mulsi3>
   88e80:	8809883a 	mov	r4,r17
   88e84:	b80b883a 	mov	r5,r23
   88e88:	102b883a 	mov	r21,r2
   88e8c:	0080e0c0 	call	80e0c <__umodsi3>
   88e90:	1004943a 	slli	r2,r2,16
   88e94:	e006d43a 	srli	r3,fp,16
   88e98:	902d883a 	mov	r22,r18
   88e9c:	10c4b03a 	or	r2,r2,r3
   88ea0:	1540022e 	bgeu	r2,r21,88eac <__umoddi3+0x388>
   88ea4:	14c5883a 	add	r2,r2,r19
   88ea8:	14c0ab2e 	bgeu	r2,r19,89158 <__umoddi3+0x634>
   88eac:	1563c83a 	sub	r17,r2,r21
   88eb0:	8809883a 	mov	r4,r17
   88eb4:	b80b883a 	mov	r5,r23
   88eb8:	0080e040 	call	80e04 <__udivsi3>
   88ebc:	100b883a 	mov	r5,r2
   88ec0:	a009883a 	mov	r4,r20
   88ec4:	0080e140 	call	80e14 <__mulsi3>
   88ec8:	8809883a 	mov	r4,r17
   88ecc:	b80b883a 	mov	r5,r23
   88ed0:	102b883a 	mov	r21,r2
   88ed4:	0080e0c0 	call	80e0c <__umodsi3>
   88ed8:	1004943a 	slli	r2,r2,16
   88edc:	e0ffffcc 	andi	r3,fp,65535
   88ee0:	10c4b03a 	or	r2,r2,r3
   88ee4:	1540042e 	bgeu	r2,r21,88ef8 <__umoddi3+0x3d4>
   88ee8:	14c5883a 	add	r2,r2,r19
   88eec:	14c00236 	bltu	r2,r19,88ef8 <__umoddi3+0x3d4>
   88ef0:	1540012e 	bgeu	r2,r21,88ef8 <__umoddi3+0x3d4>
   88ef4:	14c5883a 	add	r2,r2,r19
   88ef8:	84a0983a 	sll	r16,r16,r18
   88efc:	156bc83a 	sub	r21,r2,r21
   88f00:	003f3106 	br	88bc8 <__umoddi3+0xa4>
   88f04:	3c8fc83a 	sub	r7,r7,r18
   88f08:	3486983a 	sll	r3,r6,r18
   88f0c:	99c4d83a 	srl	r2,r19,r7
   88f10:	a9e2d83a 	srl	r17,r21,r7
   88f14:	ac8c983a 	sll	r6,r21,r18
   88f18:	18acb03a 	or	r22,r3,r2
   88f1c:	b02ed43a 	srli	r23,r22,16
   88f20:	81c4d83a 	srl	r2,r16,r7
   88f24:	8809883a 	mov	r4,r17
   88f28:	b80b883a 	mov	r5,r23
   88f2c:	308cb03a 	or	r6,r6,r2
   88f30:	d9c00315 	stw	r7,12(sp)
   88f34:	d9800215 	stw	r6,8(sp)
   88f38:	b53fffcc 	andi	r20,r22,65535
   88f3c:	0080e040 	call	80e04 <__udivsi3>
   88f40:	100b883a 	mov	r5,r2
   88f44:	a009883a 	mov	r4,r20
   88f48:	1039883a 	mov	fp,r2
   88f4c:	0080e140 	call	80e14 <__mulsi3>
   88f50:	8809883a 	mov	r4,r17
   88f54:	b80b883a 	mov	r5,r23
   88f58:	102b883a 	mov	r21,r2
   88f5c:	0080e0c0 	call	80e0c <__umodsi3>
   88f60:	d9000217 	ldw	r4,8(sp)
   88f64:	1004943a 	slli	r2,r2,16
   88f68:	9ca6983a 	sll	r19,r19,r18
   88f6c:	2006d43a 	srli	r3,r4,16
   88f70:	84a0983a 	sll	r16,r16,r18
   88f74:	dcc00015 	stw	r19,0(sp)
   88f78:	10c4b03a 	or	r2,r2,r3
   88f7c:	dc000115 	stw	r16,4(sp)
   88f80:	1540032e 	bgeu	r2,r21,88f90 <__umoddi3+0x46c>
   88f84:	1585883a 	add	r2,r2,r22
   88f88:	e73fffc4 	addi	fp,fp,-1
   88f8c:	15806e2e 	bgeu	r2,r22,89148 <__umoddi3+0x624>
   88f90:	1563c83a 	sub	r17,r2,r21
   88f94:	8809883a 	mov	r4,r17
   88f98:	b80b883a 	mov	r5,r23
   88f9c:	0080e040 	call	80e04 <__udivsi3>
   88fa0:	100b883a 	mov	r5,r2
   88fa4:	a009883a 	mov	r4,r20
   88fa8:	1021883a 	mov	r16,r2
   88fac:	0080e140 	call	80e14 <__mulsi3>
   88fb0:	b80b883a 	mov	r5,r23
   88fb4:	8809883a 	mov	r4,r17
   88fb8:	1029883a 	mov	r20,r2
   88fbc:	0080e0c0 	call	80e0c <__umodsi3>
   88fc0:	d9400217 	ldw	r5,8(sp)
   88fc4:	1004943a 	slli	r2,r2,16
   88fc8:	28ffffcc 	andi	r3,r5,65535
   88fcc:	10c4b03a 	or	r2,r2,r3
   88fd0:	1500032e 	bgeu	r2,r20,88fe0 <__umoddi3+0x4bc>
   88fd4:	1585883a 	add	r2,r2,r22
   88fd8:	843fffc4 	addi	r16,r16,-1
   88fdc:	1580562e 	bgeu	r2,r22,89138 <__umoddi3+0x614>
   88fe0:	d9800017 	ldw	r6,0(sp)
   88fe4:	e022943a 	slli	r17,fp,16
   88fe8:	302ed43a 	srli	r23,r6,16
   88fec:	8462b03a 	or	r17,r16,r17
   88ff0:	34ffffcc 	andi	r19,r6,65535
   88ff4:	882ad43a 	srli	r21,r17,16
   88ff8:	8c7fffcc 	andi	r17,r17,65535
   88ffc:	8809883a 	mov	r4,r17
   89000:	980b883a 	mov	r5,r19
   89004:	1521c83a 	sub	r16,r2,r20
   89008:	0080e140 	call	80e14 <__mulsi3>
   8900c:	8809883a 	mov	r4,r17
   89010:	b80b883a 	mov	r5,r23
   89014:	1029883a 	mov	r20,r2
   89018:	0080e140 	call	80e14 <__mulsi3>
   8901c:	980b883a 	mov	r5,r19
   89020:	a809883a 	mov	r4,r21
   89024:	1023883a 	mov	r17,r2
   89028:	0080e140 	call	80e14 <__mulsi3>
   8902c:	a809883a 	mov	r4,r21
   89030:	b80b883a 	mov	r5,r23
   89034:	1027883a 	mov	r19,r2
   89038:	0080e140 	call	80e14 <__mulsi3>
   8903c:	100b883a 	mov	r5,r2
   89040:	a004d43a 	srli	r2,r20,16
   89044:	8ce3883a 	add	r17,r17,r19
   89048:	1449883a 	add	r4,r2,r17
   8904c:	24c0022e 	bgeu	r4,r19,89058 <__umoddi3+0x534>
   89050:	00800074 	movhi	r2,1
   89054:	288b883a 	add	r5,r5,r2
   89058:	2004d43a 	srli	r2,r4,16
   8905c:	2008943a 	slli	r4,r4,16
   89060:	a0ffffcc 	andi	r3,r20,65535
   89064:	288d883a 	add	r6,r5,r2
   89068:	20c9883a 	add	r4,r4,r3
   8906c:	81800b36 	bltu	r16,r6,8909c <__umoddi3+0x578>
   89070:	81804026 	beq	r16,r6,89174 <__umoddi3+0x650>
   89074:	818dc83a 	sub	r6,r16,r6
   89078:	00000f06 	br	890b8 <__umoddi3+0x594>
   8907c:	30c5c83a 	sub	r2,r6,r3
   89080:	182d883a 	mov	r22,r3
   89084:	8084d83a 	srl	r2,r16,r2
   89088:	a8c6983a 	sll	r3,r21,r3
   8908c:	9da6983a 	sll	r19,r19,r22
   89090:	85a0983a 	sll	r16,r16,r22
   89094:	18aab03a 	or	r21,r3,r2
   89098:	003f1d06 	br	88d10 <__umoddi3+0x1ec>
   8909c:	d8c00017 	ldw	r3,0(sp)
   890a0:	20c5c83a 	sub	r2,r4,r3
   890a4:	2089803a 	cmpltu	r4,r4,r2
   890a8:	3587c83a 	sub	r3,r6,r22
   890ac:	1907c83a 	sub	r3,r3,r4
   890b0:	80cdc83a 	sub	r6,r16,r3
   890b4:	1009883a 	mov	r4,r2
   890b8:	d9400117 	ldw	r5,4(sp)
   890bc:	2905c83a 	sub	r2,r5,r4
   890c0:	2887803a 	cmpltu	r3,r5,r2
   890c4:	30c7c83a 	sub	r3,r6,r3
   890c8:	d9800317 	ldw	r6,12(sp)
   890cc:	1484d83a 	srl	r2,r2,r18
   890d0:	1988983a 	sll	r4,r3,r6
   890d4:	1c86d83a 	srl	r3,r3,r18
   890d8:	2088b03a 	or	r4,r4,r2
   890dc:	2011883a 	mov	r8,r4
   890e0:	1813883a 	mov	r9,r3
   890e4:	d9000415 	stw	r4,16(sp)
   890e8:	d8c00515 	stw	r3,20(sp)
   890ec:	003ed406 	br	88c40 <__umoddi3+0x11c>
   890f0:	01400604 	movi	r5,24
   890f4:	2805883a 	mov	r2,r5
   890f8:	003ea606 	br	88b94 <__umoddi3+0x70>
   890fc:	01400204 	movi	r5,8
   89100:	2805883a 	mov	r2,r5
   89104:	003ea306 	br	88b94 <__umoddi3+0x70>
   89108:	01400204 	movi	r5,8
   8910c:	2805883a 	mov	r2,r5
   89110:	003edf06 	br	88c90 <__umoddi3+0x16c>
   89114:	01400204 	movi	r5,8
   89118:	2805883a 	mov	r2,r5
   8911c:	003ef206 	br	88ce8 <__umoddi3+0x1c4>
   89120:	01400604 	movi	r5,24
   89124:	2805883a 	mov	r2,r5
   89128:	003eef06 	br	88ce8 <__umoddi3+0x1c4>
   8912c:	01400604 	movi	r5,24
   89130:	2805883a 	mov	r2,r5
   89134:	003ed606 	br	88c90 <__umoddi3+0x16c>
   89138:	153fa92e 	bgeu	r2,r20,88fe0 <__umoddi3+0x4bc>
   8913c:	843fffc4 	addi	r16,r16,-1
   89140:	1585883a 	add	r2,r2,r22
   89144:	003fa606 	br	88fe0 <__umoddi3+0x4bc>
   89148:	157f912e 	bgeu	r2,r21,88f90 <__umoddi3+0x46c>
   8914c:	e73fffc4 	addi	fp,fp,-1
   89150:	1585883a 	add	r2,r2,r22
   89154:	003f8e06 	br	88f90 <__umoddi3+0x46c>
   89158:	157f542e 	bgeu	r2,r21,88eac <__umoddi3+0x388>
   8915c:	14c5883a 	add	r2,r2,r19
   89160:	003f5206 	br	88eac <__umoddi3+0x388>
   89164:	14c5883a 	add	r2,r2,r19
   89168:	003efc06 	br	88d5c <__umoddi3+0x238>
   8916c:	14c5883a 	add	r2,r2,r19
   89170:	003ea606 	br	88c0c <__umoddi3+0xe8>
   89174:	d8800117 	ldw	r2,4(sp)
   89178:	113fc836 	bltu	r2,r4,8909c <__umoddi3+0x578>
   8917c:	000d883a 	mov	r6,zero
   89180:	003fcd06 	br	890b8 <__umoddi3+0x594>

00089184 <_fpadd_parts>:
   89184:	defff804 	addi	sp,sp,-32
   89188:	dcc00315 	stw	r19,12(sp)
   8918c:	2027883a 	mov	r19,r4
   89190:	21000017 	ldw	r4,0(r4)
   89194:	00c00044 	movi	r3,1
   89198:	dd400515 	stw	r21,20(sp)
   8919c:	dd000415 	stw	r20,16(sp)
   891a0:	ddc00715 	stw	r23,28(sp)
   891a4:	dd800615 	stw	r22,24(sp)
   891a8:	dc800215 	stw	r18,8(sp)
   891ac:	dc400115 	stw	r17,4(sp)
   891b0:	dc000015 	stw	r16,0(sp)
   891b4:	282b883a 	mov	r21,r5
   891b8:	3029883a 	mov	r20,r6
   891bc:	1900632e 	bgeu	r3,r4,8934c <_fpadd_parts+0x1c8>
   891c0:	28800017 	ldw	r2,0(r5)
   891c4:	1880812e 	bgeu	r3,r2,893cc <_fpadd_parts+0x248>
   891c8:	00c00104 	movi	r3,4
   891cc:	20c0dc26 	beq	r4,r3,89540 <_fpadd_parts+0x3bc>
   891d0:	10c07e26 	beq	r2,r3,893cc <_fpadd_parts+0x248>
   891d4:	00c00084 	movi	r3,2
   891d8:	10c06726 	beq	r2,r3,89378 <_fpadd_parts+0x1f4>
   891dc:	20c07b26 	beq	r4,r3,893cc <_fpadd_parts+0x248>
   891e0:	9dc00217 	ldw	r23,8(r19)
   891e4:	28c00217 	ldw	r3,8(r5)
   891e8:	9c400317 	ldw	r17,12(r19)
   891ec:	2bc00317 	ldw	r15,12(r5)
   891f0:	b8cdc83a 	sub	r6,r23,r3
   891f4:	9c800417 	ldw	r18,16(r19)
   891f8:	2c000417 	ldw	r16,16(r5)
   891fc:	3009883a 	mov	r4,r6
   89200:	30009716 	blt	r6,zero,89460 <_fpadd_parts+0x2dc>
   89204:	00800fc4 	movi	r2,63
   89208:	11806b16 	blt	r2,r6,893b8 <_fpadd_parts+0x234>
   8920c:	0100a40e 	bge	zero,r4,894a0 <_fpadd_parts+0x31c>
   89210:	35bff804 	addi	r22,r6,-32
   89214:	b000bc16 	blt	r22,zero,89508 <_fpadd_parts+0x384>
   89218:	8596d83a 	srl	r11,r16,r22
   8921c:	0019883a 	mov	r12,zero
   89220:	0013883a 	mov	r9,zero
   89224:	01000044 	movi	r4,1
   89228:	0015883a 	mov	r10,zero
   8922c:	b000be16 	blt	r22,zero,89528 <_fpadd_parts+0x3a4>
   89230:	2590983a 	sll	r8,r4,r22
   89234:	000f883a 	mov	r7,zero
   89238:	00bfffc4 	movi	r2,-1
   8923c:	3889883a 	add	r4,r7,r2
   89240:	408b883a 	add	r5,r8,r2
   89244:	21cd803a 	cmpltu	r6,r4,r7
   89248:	314b883a 	add	r5,r6,r5
   8924c:	7904703a 	and	r2,r15,r4
   89250:	8146703a 	and	r3,r16,r5
   89254:	10c4b03a 	or	r2,r2,r3
   89258:	10000226 	beq	r2,zero,89264 <_fpadd_parts+0xe0>
   8925c:	02400044 	movi	r9,1
   89260:	0015883a 	mov	r10,zero
   89264:	5a5eb03a 	or	r15,r11,r9
   89268:	62a0b03a 	or	r16,r12,r10
   8926c:	99400117 	ldw	r5,4(r19)
   89270:	a8800117 	ldw	r2,4(r21)
   89274:	28806e26 	beq	r5,r2,89430 <_fpadd_parts+0x2ac>
   89278:	28006626 	beq	r5,zero,89414 <_fpadd_parts+0x290>
   8927c:	7c45c83a 	sub	r2,r15,r17
   89280:	7889803a 	cmpltu	r4,r15,r2
   89284:	8487c83a 	sub	r3,r16,r18
   89288:	1909c83a 	sub	r4,r3,r4
   8928c:	100d883a 	mov	r6,r2
   89290:	200f883a 	mov	r7,r4
   89294:	38007716 	blt	r7,zero,89474 <_fpadd_parts+0x2f0>
   89298:	a5c00215 	stw	r23,8(r20)
   8929c:	a1c00415 	stw	r7,16(r20)
   892a0:	a0000115 	stw	zero,4(r20)
   892a4:	a1800315 	stw	r6,12(r20)
   892a8:	a2000317 	ldw	r8,12(r20)
   892ac:	a2400417 	ldw	r9,16(r20)
   892b0:	00bfffc4 	movi	r2,-1
   892b4:	408b883a 	add	r5,r8,r2
   892b8:	2a09803a 	cmpltu	r4,r5,r8
   892bc:	488d883a 	add	r6,r9,r2
   892c0:	01c40034 	movhi	r7,4096
   892c4:	39ffffc4 	addi	r7,r7,-1
   892c8:	218d883a 	add	r6,r4,r6
   892cc:	39801736 	bltu	r7,r6,8932c <_fpadd_parts+0x1a8>
   892d0:	31c06526 	beq	r6,r7,89468 <_fpadd_parts+0x2e4>
   892d4:	a3000217 	ldw	r12,8(r20)
   892d8:	4209883a 	add	r4,r8,r8
   892dc:	00bfffc4 	movi	r2,-1
   892e0:	220f803a 	cmpltu	r7,r4,r8
   892e4:	4a4b883a 	add	r5,r9,r9
   892e8:	394f883a 	add	r7,r7,r5
   892ec:	2095883a 	add	r10,r4,r2
   892f0:	3897883a 	add	r11,r7,r2
   892f4:	510d803a 	cmpltu	r6,r10,r4
   892f8:	6099883a 	add	r12,r12,r2
   892fc:	32d7883a 	add	r11,r6,r11
   89300:	00840034 	movhi	r2,4096
   89304:	10bfffc4 	addi	r2,r2,-1
   89308:	2011883a 	mov	r8,r4
   8930c:	3813883a 	mov	r9,r7
   89310:	a1000315 	stw	r4,12(r20)
   89314:	a1c00415 	stw	r7,16(r20)
   89318:	a3000215 	stw	r12,8(r20)
   8931c:	12c00336 	bltu	r2,r11,8932c <_fpadd_parts+0x1a8>
   89320:	58bfed1e 	bne	r11,r2,892d8 <_fpadd_parts+0x154>
   89324:	00bfff84 	movi	r2,-2
   89328:	12bfeb2e 	bgeu	r2,r10,892d8 <_fpadd_parts+0x154>
   8932c:	a2800417 	ldw	r10,16(r20)
   89330:	008000c4 	movi	r2,3
   89334:	00c80034 	movhi	r3,8192
   89338:	18ffffc4 	addi	r3,r3,-1
   8933c:	a2400317 	ldw	r9,12(r20)
   89340:	a0800015 	stw	r2,0(r20)
   89344:	1a802336 	bltu	r3,r10,893d4 <_fpadd_parts+0x250>
   89348:	a027883a 	mov	r19,r20
   8934c:	9805883a 	mov	r2,r19
   89350:	ddc00717 	ldw	r23,28(sp)
   89354:	dd800617 	ldw	r22,24(sp)
   89358:	dd400517 	ldw	r21,20(sp)
   8935c:	dd000417 	ldw	r20,16(sp)
   89360:	dcc00317 	ldw	r19,12(sp)
   89364:	dc800217 	ldw	r18,8(sp)
   89368:	dc400117 	ldw	r17,4(sp)
   8936c:	dc000017 	ldw	r16,0(sp)
   89370:	dec00804 	addi	sp,sp,32
   89374:	f800283a 	ret
   89378:	20fff41e 	bne	r4,r3,8934c <_fpadd_parts+0x1c8>
   8937c:	31000015 	stw	r4,0(r6)
   89380:	98800117 	ldw	r2,4(r19)
   89384:	30800115 	stw	r2,4(r6)
   89388:	98c00217 	ldw	r3,8(r19)
   8938c:	30c00215 	stw	r3,8(r6)
   89390:	98800317 	ldw	r2,12(r19)
   89394:	30800315 	stw	r2,12(r6)
   89398:	98c00417 	ldw	r3,16(r19)
   8939c:	30c00415 	stw	r3,16(r6)
   893a0:	98800117 	ldw	r2,4(r19)
   893a4:	28c00117 	ldw	r3,4(r5)
   893a8:	3027883a 	mov	r19,r6
   893ac:	10c4703a 	and	r2,r2,r3
   893b0:	30800115 	stw	r2,4(r6)
   893b4:	003fe506 	br	8934c <_fpadd_parts+0x1c8>
   893b8:	1dc02616 	blt	r3,r23,89454 <_fpadd_parts+0x2d0>
   893bc:	0023883a 	mov	r17,zero
   893c0:	182f883a 	mov	r23,r3
   893c4:	0025883a 	mov	r18,zero
   893c8:	003fa806 	br	8926c <_fpadd_parts+0xe8>
   893cc:	a827883a 	mov	r19,r21
   893d0:	003fde06 	br	8934c <_fpadd_parts+0x1c8>
   893d4:	01800044 	movi	r6,1
   893d8:	500497fa 	slli	r2,r10,31
   893dc:	4808d07a 	srli	r4,r9,1
   893e0:	518ad83a 	srl	r5,r10,r6
   893e4:	a2000217 	ldw	r8,8(r20)
   893e8:	1108b03a 	or	r4,r2,r4
   893ec:	0007883a 	mov	r3,zero
   893f0:	4984703a 	and	r2,r9,r6
   893f4:	208cb03a 	or	r6,r4,r2
   893f8:	28ceb03a 	or	r7,r5,r3
   893fc:	42000044 	addi	r8,r8,1
   89400:	a027883a 	mov	r19,r20
   89404:	a1c00415 	stw	r7,16(r20)
   89408:	a2000215 	stw	r8,8(r20)
   8940c:	a1800315 	stw	r6,12(r20)
   89410:	003fce06 	br	8934c <_fpadd_parts+0x1c8>
   89414:	8bc5c83a 	sub	r2,r17,r15
   89418:	8889803a 	cmpltu	r4,r17,r2
   8941c:	9407c83a 	sub	r3,r18,r16
   89420:	1909c83a 	sub	r4,r3,r4
   89424:	100d883a 	mov	r6,r2
   89428:	200f883a 	mov	r7,r4
   8942c:	003f9906 	br	89294 <_fpadd_parts+0x110>
   89430:	7c45883a 	add	r2,r15,r17
   89434:	13c9803a 	cmpltu	r4,r2,r15
   89438:	8487883a 	add	r3,r16,r18
   8943c:	20c9883a 	add	r4,r4,r3
   89440:	a1400115 	stw	r5,4(r20)
   89444:	a5c00215 	stw	r23,8(r20)
   89448:	a0800315 	stw	r2,12(r20)
   8944c:	a1000415 	stw	r4,16(r20)
   89450:	003fb606 	br	8932c <_fpadd_parts+0x1a8>
   89454:	001f883a 	mov	r15,zero
   89458:	0021883a 	mov	r16,zero
   8945c:	003f8306 	br	8926c <_fpadd_parts+0xe8>
   89460:	018dc83a 	sub	r6,zero,r6
   89464:	003f6706 	br	89204 <_fpadd_parts+0x80>
   89468:	00bfff84 	movi	r2,-2
   8946c:	117faf36 	bltu	r2,r5,8932c <_fpadd_parts+0x1a8>
   89470:	003f9806 	br	892d4 <_fpadd_parts+0x150>
   89474:	0005883a 	mov	r2,zero
   89478:	1189c83a 	sub	r4,r2,r6
   8947c:	1105803a 	cmpltu	r2,r2,r4
   89480:	01cbc83a 	sub	r5,zero,r7
   89484:	2885c83a 	sub	r2,r5,r2
   89488:	01800044 	movi	r6,1
   8948c:	a1800115 	stw	r6,4(r20)
   89490:	a5c00215 	stw	r23,8(r20)
   89494:	a1000315 	stw	r4,12(r20)
   89498:	a0800415 	stw	r2,16(r20)
   8949c:	003f8206 	br	892a8 <_fpadd_parts+0x124>
   894a0:	203f7226 	beq	r4,zero,8926c <_fpadd_parts+0xe8>
   894a4:	35bff804 	addi	r22,r6,-32
   894a8:	b9af883a 	add	r23,r23,r6
   894ac:	b0003116 	blt	r22,zero,89574 <_fpadd_parts+0x3f0>
   894b0:	959ad83a 	srl	r13,r18,r22
   894b4:	001d883a 	mov	r14,zero
   894b8:	000f883a 	mov	r7,zero
   894bc:	01000044 	movi	r4,1
   894c0:	0011883a 	mov	r8,zero
   894c4:	b0002516 	blt	r22,zero,8955c <_fpadd_parts+0x3d8>
   894c8:	2594983a 	sll	r10,r4,r22
   894cc:	0013883a 	mov	r9,zero
   894d0:	00bfffc4 	movi	r2,-1
   894d4:	4889883a 	add	r4,r9,r2
   894d8:	508b883a 	add	r5,r10,r2
   894dc:	224d803a 	cmpltu	r6,r4,r9
   894e0:	314b883a 	add	r5,r6,r5
   894e4:	8904703a 	and	r2,r17,r4
   894e8:	9146703a 	and	r3,r18,r5
   894ec:	10c4b03a 	or	r2,r2,r3
   894f0:	10000226 	beq	r2,zero,894fc <_fpadd_parts+0x378>
   894f4:	01c00044 	movi	r7,1
   894f8:	0011883a 	mov	r8,zero
   894fc:	69e2b03a 	or	r17,r13,r7
   89500:	7224b03a 	or	r18,r14,r8
   89504:	003f5906 	br	8926c <_fpadd_parts+0xe8>
   89508:	8407883a 	add	r3,r16,r16
   8950c:	008007c4 	movi	r2,31
   89510:	1185c83a 	sub	r2,r2,r6
   89514:	1886983a 	sll	r3,r3,r2
   89518:	7996d83a 	srl	r11,r15,r6
   8951c:	8198d83a 	srl	r12,r16,r6
   89520:	1ad6b03a 	or	r11,r3,r11
   89524:	003f3e06 	br	89220 <_fpadd_parts+0x9c>
   89528:	2006d07a 	srli	r3,r4,1
   8952c:	008007c4 	movi	r2,31
   89530:	1185c83a 	sub	r2,r2,r6
   89534:	1890d83a 	srl	r8,r3,r2
   89538:	218e983a 	sll	r7,r4,r6
   8953c:	003f3e06 	br	89238 <_fpadd_parts+0xb4>
   89540:	113f821e 	bne	r2,r4,8934c <_fpadd_parts+0x1c8>
   89544:	28c00117 	ldw	r3,4(r5)
   89548:	98800117 	ldw	r2,4(r19)
   8954c:	10ff7f26 	beq	r2,r3,8934c <_fpadd_parts+0x1c8>
   89550:	04c00274 	movhi	r19,9
   89554:	9cf8e704 	addi	r19,r19,-7268
   89558:	003f7c06 	br	8934c <_fpadd_parts+0x1c8>
   8955c:	2006d07a 	srli	r3,r4,1
   89560:	008007c4 	movi	r2,31
   89564:	1185c83a 	sub	r2,r2,r6
   89568:	1894d83a 	srl	r10,r3,r2
   8956c:	2192983a 	sll	r9,r4,r6
   89570:	003fd706 	br	894d0 <_fpadd_parts+0x34c>
   89574:	9487883a 	add	r3,r18,r18
   89578:	008007c4 	movi	r2,31
   8957c:	1185c83a 	sub	r2,r2,r6
   89580:	1886983a 	sll	r3,r3,r2
   89584:	899ad83a 	srl	r13,r17,r6
   89588:	919cd83a 	srl	r14,r18,r6
   8958c:	1b5ab03a 	or	r13,r3,r13
   89590:	003fc906 	br	894b8 <_fpadd_parts+0x334>

00089594 <__subdf3>:
   89594:	deffea04 	addi	sp,sp,-88
   89598:	dcc01415 	stw	r19,80(sp)
   8959c:	dcc00404 	addi	r19,sp,16
   895a0:	2011883a 	mov	r8,r4
   895a4:	2813883a 	mov	r9,r5
   895a8:	dc401315 	stw	r17,76(sp)
   895ac:	d809883a 	mov	r4,sp
   895b0:	980b883a 	mov	r5,r19
   895b4:	dc400904 	addi	r17,sp,36
   895b8:	dfc01515 	stw	ra,84(sp)
   895bc:	da400115 	stw	r9,4(sp)
   895c0:	d9c00315 	stw	r7,12(sp)
   895c4:	da000015 	stw	r8,0(sp)
   895c8:	d9800215 	stw	r6,8(sp)
   895cc:	008a7680 	call	8a768 <__unpack_d>
   895d0:	d9000204 	addi	r4,sp,8
   895d4:	880b883a 	mov	r5,r17
   895d8:	008a7680 	call	8a768 <__unpack_d>
   895dc:	d8800a17 	ldw	r2,40(sp)
   895e0:	880b883a 	mov	r5,r17
   895e4:	9809883a 	mov	r4,r19
   895e8:	d9800e04 	addi	r6,sp,56
   895ec:	1080005c 	xori	r2,r2,1
   895f0:	d8800a15 	stw	r2,40(sp)
   895f4:	00891840 	call	89184 <_fpadd_parts>
   895f8:	1009883a 	mov	r4,r2
   895fc:	008a4540 	call	8a454 <__pack_d>
   89600:	dfc01517 	ldw	ra,84(sp)
   89604:	dcc01417 	ldw	r19,80(sp)
   89608:	dc401317 	ldw	r17,76(sp)
   8960c:	dec01604 	addi	sp,sp,88
   89610:	f800283a 	ret

00089614 <__adddf3>:
   89614:	deffea04 	addi	sp,sp,-88
   89618:	dcc01415 	stw	r19,80(sp)
   8961c:	dcc00404 	addi	r19,sp,16
   89620:	2011883a 	mov	r8,r4
   89624:	2813883a 	mov	r9,r5
   89628:	dc401315 	stw	r17,76(sp)
   8962c:	d809883a 	mov	r4,sp
   89630:	980b883a 	mov	r5,r19
   89634:	dc400904 	addi	r17,sp,36
   89638:	dfc01515 	stw	ra,84(sp)
   8963c:	da400115 	stw	r9,4(sp)
   89640:	d9c00315 	stw	r7,12(sp)
   89644:	da000015 	stw	r8,0(sp)
   89648:	d9800215 	stw	r6,8(sp)
   8964c:	008a7680 	call	8a768 <__unpack_d>
   89650:	d9000204 	addi	r4,sp,8
   89654:	880b883a 	mov	r5,r17
   89658:	008a7680 	call	8a768 <__unpack_d>
   8965c:	d9800e04 	addi	r6,sp,56
   89660:	9809883a 	mov	r4,r19
   89664:	880b883a 	mov	r5,r17
   89668:	00891840 	call	89184 <_fpadd_parts>
   8966c:	1009883a 	mov	r4,r2
   89670:	008a4540 	call	8a454 <__pack_d>
   89674:	dfc01517 	ldw	ra,84(sp)
   89678:	dcc01417 	ldw	r19,80(sp)
   8967c:	dc401317 	ldw	r17,76(sp)
   89680:	dec01604 	addi	sp,sp,88
   89684:	f800283a 	ret

00089688 <__muldf3>:
   89688:	deffe004 	addi	sp,sp,-128
   8968c:	dc401815 	stw	r17,96(sp)
   89690:	dc400404 	addi	r17,sp,16
   89694:	2011883a 	mov	r8,r4
   89698:	2813883a 	mov	r9,r5
   8969c:	dc001715 	stw	r16,92(sp)
   896a0:	d809883a 	mov	r4,sp
   896a4:	880b883a 	mov	r5,r17
   896a8:	dc000904 	addi	r16,sp,36
   896ac:	dfc01f15 	stw	ra,124(sp)
   896b0:	da400115 	stw	r9,4(sp)
   896b4:	d9c00315 	stw	r7,12(sp)
   896b8:	da000015 	stw	r8,0(sp)
   896bc:	d9800215 	stw	r6,8(sp)
   896c0:	ddc01e15 	stw	r23,120(sp)
   896c4:	dd801d15 	stw	r22,116(sp)
   896c8:	dd401c15 	stw	r21,112(sp)
   896cc:	dd001b15 	stw	r20,108(sp)
   896d0:	dcc01a15 	stw	r19,104(sp)
   896d4:	dc801915 	stw	r18,100(sp)
   896d8:	008a7680 	call	8a768 <__unpack_d>
   896dc:	d9000204 	addi	r4,sp,8
   896e0:	800b883a 	mov	r5,r16
   896e4:	008a7680 	call	8a768 <__unpack_d>
   896e8:	d9000417 	ldw	r4,16(sp)
   896ec:	00800044 	movi	r2,1
   896f0:	1100102e 	bgeu	r2,r4,89734 <__muldf3+0xac>
   896f4:	d8c00917 	ldw	r3,36(sp)
   896f8:	10c0062e 	bgeu	r2,r3,89714 <__muldf3+0x8c>
   896fc:	00800104 	movi	r2,4
   89700:	20800a26 	beq	r4,r2,8972c <__muldf3+0xa4>
   89704:	1880cc26 	beq	r3,r2,89a38 <__muldf3+0x3b0>
   89708:	00800084 	movi	r2,2
   8970c:	20800926 	beq	r4,r2,89734 <__muldf3+0xac>
   89710:	1880191e 	bne	r3,r2,89778 <__muldf3+0xf0>
   89714:	d8c00a17 	ldw	r3,40(sp)
   89718:	d8800517 	ldw	r2,20(sp)
   8971c:	8009883a 	mov	r4,r16
   89720:	10c4c03a 	cmpne	r2,r2,r3
   89724:	d8800a15 	stw	r2,40(sp)
   89728:	00000706 	br	89748 <__muldf3+0xc0>
   8972c:	00800084 	movi	r2,2
   89730:	1880c326 	beq	r3,r2,89a40 <__muldf3+0x3b8>
   89734:	d8800517 	ldw	r2,20(sp)
   89738:	d8c00a17 	ldw	r3,40(sp)
   8973c:	8809883a 	mov	r4,r17
   89740:	10c4c03a 	cmpne	r2,r2,r3
   89744:	d8800515 	stw	r2,20(sp)
   89748:	008a4540 	call	8a454 <__pack_d>
   8974c:	dfc01f17 	ldw	ra,124(sp)
   89750:	ddc01e17 	ldw	r23,120(sp)
   89754:	dd801d17 	ldw	r22,116(sp)
   89758:	dd401c17 	ldw	r21,112(sp)
   8975c:	dd001b17 	ldw	r20,108(sp)
   89760:	dcc01a17 	ldw	r19,104(sp)
   89764:	dc801917 	ldw	r18,100(sp)
   89768:	dc401817 	ldw	r17,96(sp)
   8976c:	dc001717 	ldw	r16,92(sp)
   89770:	dec02004 	addi	sp,sp,128
   89774:	f800283a 	ret
   89778:	dd800717 	ldw	r22,28(sp)
   8977c:	dc800c17 	ldw	r18,48(sp)
   89780:	002b883a 	mov	r21,zero
   89784:	0023883a 	mov	r17,zero
   89788:	a80b883a 	mov	r5,r21
   8978c:	b00d883a 	mov	r6,r22
   89790:	880f883a 	mov	r7,r17
   89794:	ddc00817 	ldw	r23,32(sp)
   89798:	dcc00d17 	ldw	r19,52(sp)
   8979c:	9009883a 	mov	r4,r18
   897a0:	008a2b00 	call	8a2b0 <__muldi3>
   897a4:	001b883a 	mov	r13,zero
   897a8:	680f883a 	mov	r7,r13
   897ac:	b009883a 	mov	r4,r22
   897b0:	000b883a 	mov	r5,zero
   897b4:	980d883a 	mov	r6,r19
   897b8:	b82d883a 	mov	r22,r23
   897bc:	002f883a 	mov	r23,zero
   897c0:	db401615 	stw	r13,88(sp)
   897c4:	d8801315 	stw	r2,76(sp)
   897c8:	d8c01415 	stw	r3,80(sp)
   897cc:	dcc01515 	stw	r19,84(sp)
   897d0:	008a2b00 	call	8a2b0 <__muldi3>
   897d4:	b00d883a 	mov	r6,r22
   897d8:	000b883a 	mov	r5,zero
   897dc:	9009883a 	mov	r4,r18
   897e0:	b80f883a 	mov	r7,r23
   897e4:	1021883a 	mov	r16,r2
   897e8:	1823883a 	mov	r17,r3
   897ec:	008a2b00 	call	8a2b0 <__muldi3>
   897f0:	8085883a 	add	r2,r16,r2
   897f4:	140d803a 	cmpltu	r6,r2,r16
   897f8:	88c7883a 	add	r3,r17,r3
   897fc:	30cd883a 	add	r6,r6,r3
   89800:	1029883a 	mov	r20,r2
   89804:	302b883a 	mov	r21,r6
   89808:	da801317 	ldw	r10,76(sp)
   8980c:	dac01417 	ldw	r11,80(sp)
   89810:	db001517 	ldw	r12,84(sp)
   89814:	db401617 	ldw	r13,88(sp)
   89818:	3440612e 	bgeu	r6,r17,899a0 <__muldf3+0x318>
   8981c:	0009883a 	mov	r4,zero
   89820:	5105883a 	add	r2,r10,r4
   89824:	128d803a 	cmpltu	r6,r2,r10
   89828:	5d07883a 	add	r3,r11,r20
   8982c:	30cd883a 	add	r6,r6,r3
   89830:	0021883a 	mov	r16,zero
   89834:	04400044 	movi	r17,1
   89838:	1025883a 	mov	r18,r2
   8983c:	3027883a 	mov	r19,r6
   89840:	32c06236 	bltu	r6,r11,899cc <__muldf3+0x344>
   89844:	59807a26 	beq	r11,r6,89a30 <__muldf3+0x3a8>
   89848:	680b883a 	mov	r5,r13
   8984c:	b80f883a 	mov	r7,r23
   89850:	6009883a 	mov	r4,r12
   89854:	b00d883a 	mov	r6,r22
   89858:	008a2b00 	call	8a2b0 <__muldi3>
   8985c:	1009883a 	mov	r4,r2
   89860:	000f883a 	mov	r7,zero
   89864:	1545883a 	add	r2,r2,r21
   89868:	1111803a 	cmpltu	r8,r2,r4
   8986c:	19c7883a 	add	r3,r3,r7
   89870:	40c7883a 	add	r3,r8,r3
   89874:	88cb883a 	add	r5,r17,r3
   89878:	d8c00617 	ldw	r3,24(sp)
   8987c:	8089883a 	add	r4,r16,r2
   89880:	d8800b17 	ldw	r2,44(sp)
   89884:	18c00104 	addi	r3,r3,4
   89888:	240d803a 	cmpltu	r6,r4,r16
   8988c:	10c7883a 	add	r3,r2,r3
   89890:	2013883a 	mov	r9,r4
   89894:	d8800a17 	ldw	r2,40(sp)
   89898:	d9000517 	ldw	r4,20(sp)
   8989c:	314d883a 	add	r6,r6,r5
   898a0:	3015883a 	mov	r10,r6
   898a4:	2088c03a 	cmpne	r4,r4,r2
   898a8:	00880034 	movhi	r2,8192
   898ac:	10bfffc4 	addi	r2,r2,-1
   898b0:	d9000f15 	stw	r4,60(sp)
   898b4:	d8c01015 	stw	r3,64(sp)
   898b8:	1180162e 	bgeu	r2,r6,89914 <__muldf3+0x28c>
   898bc:	1811883a 	mov	r8,r3
   898c0:	101f883a 	mov	r15,r2
   898c4:	980497fa 	slli	r2,r19,31
   898c8:	9016d07a 	srli	r11,r18,1
   898cc:	500697fa 	slli	r3,r10,31
   898d0:	480cd07a 	srli	r6,r9,1
   898d4:	500ed07a 	srli	r7,r10,1
   898d8:	12d6b03a 	or	r11,r2,r11
   898dc:	00800044 	movi	r2,1
   898e0:	198cb03a 	or	r6,r3,r6
   898e4:	4888703a 	and	r4,r9,r2
   898e8:	9818d07a 	srli	r12,r19,1
   898ec:	001b883a 	mov	r13,zero
   898f0:	03a00034 	movhi	r14,32768
   898f4:	3013883a 	mov	r9,r6
   898f8:	3815883a 	mov	r10,r7
   898fc:	4091883a 	add	r8,r8,r2
   89900:	20000226 	beq	r4,zero,8990c <__muldf3+0x284>
   89904:	5b64b03a 	or	r18,r11,r13
   89908:	63a6b03a 	or	r19,r12,r14
   8990c:	7abfed36 	bltu	r15,r10,898c4 <__muldf3+0x23c>
   89910:	da001015 	stw	r8,64(sp)
   89914:	00840034 	movhi	r2,4096
   89918:	10bfffc4 	addi	r2,r2,-1
   8991c:	12801436 	bltu	r2,r10,89970 <__muldf3+0x2e8>
   89920:	da001017 	ldw	r8,64(sp)
   89924:	101f883a 	mov	r15,r2
   89928:	4a45883a 	add	r2,r9,r9
   8992c:	124d803a 	cmpltu	r6,r2,r9
   89930:	5287883a 	add	r3,r10,r10
   89934:	9497883a 	add	r11,r18,r18
   89938:	5c8f803a 	cmpltu	r7,r11,r18
   8993c:	9cd9883a 	add	r12,r19,r19
   89940:	01000044 	movi	r4,1
   89944:	30cd883a 	add	r6,r6,r3
   89948:	3b0f883a 	add	r7,r7,r12
   8994c:	423fffc4 	addi	r8,r8,-1
   89950:	1013883a 	mov	r9,r2
   89954:	3015883a 	mov	r10,r6
   89958:	111ab03a 	or	r13,r2,r4
   8995c:	98003016 	blt	r19,zero,89a20 <__muldf3+0x398>
   89960:	5825883a 	mov	r18,r11
   89964:	3827883a 	mov	r19,r7
   89968:	7abfef2e 	bgeu	r15,r10,89928 <__muldf3+0x2a0>
   8996c:	da001015 	stw	r8,64(sp)
   89970:	00803fc4 	movi	r2,255
   89974:	488e703a 	and	r7,r9,r2
   89978:	00802004 	movi	r2,128
   8997c:	0007883a 	mov	r3,zero
   89980:	0011883a 	mov	r8,zero
   89984:	38801826 	beq	r7,r2,899e8 <__muldf3+0x360>
   89988:	008000c4 	movi	r2,3
   8998c:	d9000e04 	addi	r4,sp,56
   89990:	da801215 	stw	r10,72(sp)
   89994:	d8800e15 	stw	r2,56(sp)
   89998:	da401115 	stw	r9,68(sp)
   8999c:	003f6a06 	br	89748 <__muldf3+0xc0>
   899a0:	89802126 	beq	r17,r6,89a28 <__muldf3+0x3a0>
   899a4:	0009883a 	mov	r4,zero
   899a8:	5105883a 	add	r2,r10,r4
   899ac:	128d803a 	cmpltu	r6,r2,r10
   899b0:	5d07883a 	add	r3,r11,r20
   899b4:	30cd883a 	add	r6,r6,r3
   899b8:	0021883a 	mov	r16,zero
   899bc:	0023883a 	mov	r17,zero
   899c0:	1025883a 	mov	r18,r2
   899c4:	3027883a 	mov	r19,r6
   899c8:	32ff9e2e 	bgeu	r6,r11,89844 <__muldf3+0x1bc>
   899cc:	00800044 	movi	r2,1
   899d0:	8089883a 	add	r4,r16,r2
   899d4:	240d803a 	cmpltu	r6,r4,r16
   899d8:	344d883a 	add	r6,r6,r17
   899dc:	2021883a 	mov	r16,r4
   899e0:	3023883a 	mov	r17,r6
   899e4:	003f9806 	br	89848 <__muldf3+0x1c0>
   899e8:	403fe71e 	bne	r8,zero,89988 <__muldf3+0x300>
   899ec:	01004004 	movi	r4,256
   899f0:	4904703a 	and	r2,r9,r4
   899f4:	10c4b03a 	or	r2,r2,r3
   899f8:	103fe31e 	bne	r2,zero,89988 <__muldf3+0x300>
   899fc:	94c4b03a 	or	r2,r18,r19
   89a00:	103fe126 	beq	r2,zero,89988 <__muldf3+0x300>
   89a04:	49c5883a 	add	r2,r9,r7
   89a08:	1251803a 	cmpltu	r8,r2,r9
   89a0c:	4291883a 	add	r8,r8,r10
   89a10:	013fc004 	movi	r4,-256
   89a14:	1112703a 	and	r9,r2,r4
   89a18:	4015883a 	mov	r10,r8
   89a1c:	003fda06 	br	89988 <__muldf3+0x300>
   89a20:	6813883a 	mov	r9,r13
   89a24:	003fce06 	br	89960 <__muldf3+0x2d8>
   89a28:	143f7c36 	bltu	r2,r16,8981c <__muldf3+0x194>
   89a2c:	003fdd06 	br	899a4 <__muldf3+0x31c>
   89a30:	12bf852e 	bgeu	r2,r10,89848 <__muldf3+0x1c0>
   89a34:	003fe506 	br	899cc <__muldf3+0x344>
   89a38:	00800084 	movi	r2,2
   89a3c:	20bf351e 	bne	r4,r2,89714 <__muldf3+0x8c>
   89a40:	01000274 	movhi	r4,9
   89a44:	2138e704 	addi	r4,r4,-7268
   89a48:	003f3f06 	br	89748 <__muldf3+0xc0>

00089a4c <__divdf3>:
   89a4c:	deffed04 	addi	sp,sp,-76
   89a50:	dcc01115 	stw	r19,68(sp)
   89a54:	dcc00404 	addi	r19,sp,16
   89a58:	2011883a 	mov	r8,r4
   89a5c:	2813883a 	mov	r9,r5
   89a60:	dc000e15 	stw	r16,56(sp)
   89a64:	d809883a 	mov	r4,sp
   89a68:	980b883a 	mov	r5,r19
   89a6c:	dc000904 	addi	r16,sp,36
   89a70:	dfc01215 	stw	ra,72(sp)
   89a74:	da400115 	stw	r9,4(sp)
   89a78:	d9c00315 	stw	r7,12(sp)
   89a7c:	da000015 	stw	r8,0(sp)
   89a80:	d9800215 	stw	r6,8(sp)
   89a84:	dc801015 	stw	r18,64(sp)
   89a88:	dc400f15 	stw	r17,60(sp)
   89a8c:	008a7680 	call	8a768 <__unpack_d>
   89a90:	d9000204 	addi	r4,sp,8
   89a94:	800b883a 	mov	r5,r16
   89a98:	008a7680 	call	8a768 <__unpack_d>
   89a9c:	d9000417 	ldw	r4,16(sp)
   89aa0:	00800044 	movi	r2,1
   89aa4:	11000b2e 	bgeu	r2,r4,89ad4 <__divdf3+0x88>
   89aa8:	d9400917 	ldw	r5,36(sp)
   89aac:	1140762e 	bgeu	r2,r5,89c88 <__divdf3+0x23c>
   89ab0:	d8800517 	ldw	r2,20(sp)
   89ab4:	d8c00a17 	ldw	r3,40(sp)
   89ab8:	01800104 	movi	r6,4
   89abc:	10c4f03a 	xor	r2,r2,r3
   89ac0:	d8800515 	stw	r2,20(sp)
   89ac4:	21800226 	beq	r4,r6,89ad0 <__divdf3+0x84>
   89ac8:	00800084 	movi	r2,2
   89acc:	2080141e 	bne	r4,r2,89b20 <__divdf3+0xd4>
   89ad0:	29000926 	beq	r5,r4,89af8 <__divdf3+0xac>
   89ad4:	9809883a 	mov	r4,r19
   89ad8:	008a4540 	call	8a454 <__pack_d>
   89adc:	dfc01217 	ldw	ra,72(sp)
   89ae0:	dcc01117 	ldw	r19,68(sp)
   89ae4:	dc801017 	ldw	r18,64(sp)
   89ae8:	dc400f17 	ldw	r17,60(sp)
   89aec:	dc000e17 	ldw	r16,56(sp)
   89af0:	dec01304 	addi	sp,sp,76
   89af4:	f800283a 	ret
   89af8:	01000274 	movhi	r4,9
   89afc:	2138e704 	addi	r4,r4,-7268
   89b00:	008a4540 	call	8a454 <__pack_d>
   89b04:	dfc01217 	ldw	ra,72(sp)
   89b08:	dcc01117 	ldw	r19,68(sp)
   89b0c:	dc801017 	ldw	r18,64(sp)
   89b10:	dc400f17 	ldw	r17,60(sp)
   89b14:	dc000e17 	ldw	r16,56(sp)
   89b18:	dec01304 	addi	sp,sp,76
   89b1c:	f800283a 	ret
   89b20:	29805b26 	beq	r5,r6,89c90 <__divdf3+0x244>
   89b24:	28802d26 	beq	r5,r2,89bdc <__divdf3+0x190>
   89b28:	d8c00617 	ldw	r3,24(sp)
   89b2c:	d8800b17 	ldw	r2,44(sp)
   89b30:	d9c00817 	ldw	r7,32(sp)
   89b34:	dc400d17 	ldw	r17,52(sp)
   89b38:	188bc83a 	sub	r5,r3,r2
   89b3c:	d9800717 	ldw	r6,28(sp)
   89b40:	dc000c17 	ldw	r16,48(sp)
   89b44:	d9400615 	stw	r5,24(sp)
   89b48:	3c403836 	bltu	r7,r17,89c2c <__divdf3+0x1e0>
   89b4c:	89c03626 	beq	r17,r7,89c28 <__divdf3+0x1dc>
   89b50:	0015883a 	mov	r10,zero
   89b54:	001d883a 	mov	r14,zero
   89b58:	02c40034 	movhi	r11,4096
   89b5c:	001f883a 	mov	r15,zero
   89b60:	003f883a 	mov	ra,zero
   89b64:	04800f44 	movi	r18,61
   89b68:	00000f06 	br	89ba8 <__divdf3+0x15c>
   89b6c:	601d883a 	mov	r14,r12
   89b70:	681f883a 	mov	r15,r13
   89b74:	400d883a 	mov	r6,r8
   89b78:	100f883a 	mov	r7,r2
   89b7c:	3191883a 	add	r8,r6,r6
   89b80:	5808d07a 	srli	r4,r11,1
   89b84:	4185803a 	cmpltu	r2,r8,r6
   89b88:	39d3883a 	add	r9,r7,r7
   89b8c:	28c6b03a 	or	r3,r5,r3
   89b90:	1245883a 	add	r2,r2,r9
   89b94:	1815883a 	mov	r10,r3
   89b98:	2017883a 	mov	r11,r4
   89b9c:	400d883a 	mov	r6,r8
   89ba0:	100f883a 	mov	r7,r2
   89ba4:	fc801726 	beq	ra,r18,89c04 <__divdf3+0x1b8>
   89ba8:	580a97fa 	slli	r5,r11,31
   89bac:	5006d07a 	srli	r3,r10,1
   89bb0:	ffc00044 	addi	ra,ra,1
   89bb4:	3c7ff136 	bltu	r7,r17,89b7c <__divdf3+0x130>
   89bb8:	3411c83a 	sub	r8,r6,r16
   89bbc:	3205803a 	cmpltu	r2,r6,r8
   89bc0:	3c53c83a 	sub	r9,r7,r17
   89bc4:	7298b03a 	or	r12,r14,r10
   89bc8:	7adab03a 	or	r13,r15,r11
   89bcc:	4885c83a 	sub	r2,r9,r2
   89bd0:	89ffe61e 	bne	r17,r7,89b6c <__divdf3+0x120>
   89bd4:	343fe936 	bltu	r6,r16,89b7c <__divdf3+0x130>
   89bd8:	003fe406 	br	89b6c <__divdf3+0x120>
   89bdc:	9809883a 	mov	r4,r19
   89be0:	d9800415 	stw	r6,16(sp)
   89be4:	008a4540 	call	8a454 <__pack_d>
   89be8:	dfc01217 	ldw	ra,72(sp)
   89bec:	dcc01117 	ldw	r19,68(sp)
   89bf0:	dc801017 	ldw	r18,64(sp)
   89bf4:	dc400f17 	ldw	r17,60(sp)
   89bf8:	dc000e17 	ldw	r16,56(sp)
   89bfc:	dec01304 	addi	sp,sp,76
   89c00:	f800283a 	ret
   89c04:	00803fc4 	movi	r2,255
   89c08:	7090703a 	and	r8,r14,r2
   89c0c:	00802004 	movi	r2,128
   89c10:	0007883a 	mov	r3,zero
   89c14:	0013883a 	mov	r9,zero
   89c18:	40800d26 	beq	r8,r2,89c50 <__divdf3+0x204>
   89c1c:	dbc00815 	stw	r15,32(sp)
   89c20:	db800715 	stw	r14,28(sp)
   89c24:	003fab06 	br	89ad4 <__divdf3+0x88>
   89c28:	343fc92e 	bgeu	r6,r16,89b50 <__divdf3+0x104>
   89c2c:	3185883a 	add	r2,r6,r6
   89c30:	1189803a 	cmpltu	r4,r2,r6
   89c34:	39c7883a 	add	r3,r7,r7
   89c38:	20c9883a 	add	r4,r4,r3
   89c3c:	297fffc4 	addi	r5,r5,-1
   89c40:	100d883a 	mov	r6,r2
   89c44:	200f883a 	mov	r7,r4
   89c48:	d9400615 	stw	r5,24(sp)
   89c4c:	003fc006 	br	89b50 <__divdf3+0x104>
   89c50:	483ff21e 	bne	r9,zero,89c1c <__divdf3+0x1d0>
   89c54:	01004004 	movi	r4,256
   89c58:	7104703a 	and	r2,r14,r4
   89c5c:	10c4b03a 	or	r2,r2,r3
   89c60:	103fee1e 	bne	r2,zero,89c1c <__divdf3+0x1d0>
   89c64:	31c4b03a 	or	r2,r6,r7
   89c68:	103fec26 	beq	r2,zero,89c1c <__divdf3+0x1d0>
   89c6c:	7205883a 	add	r2,r14,r8
   89c70:	1391803a 	cmpltu	r8,r2,r14
   89c74:	43d1883a 	add	r8,r8,r15
   89c78:	013fc004 	movi	r4,-256
   89c7c:	111c703a 	and	r14,r2,r4
   89c80:	401f883a 	mov	r15,r8
   89c84:	003fe506 	br	89c1c <__divdf3+0x1d0>
   89c88:	8009883a 	mov	r4,r16
   89c8c:	003f9206 	br	89ad8 <__divdf3+0x8c>
   89c90:	9809883a 	mov	r4,r19
   89c94:	d8000715 	stw	zero,28(sp)
   89c98:	d8000815 	stw	zero,32(sp)
   89c9c:	d8000615 	stw	zero,24(sp)
   89ca0:	003f8d06 	br	89ad8 <__divdf3+0x8c>

00089ca4 <__eqdf2>:
   89ca4:	deffef04 	addi	sp,sp,-68
   89ca8:	dc400f15 	stw	r17,60(sp)
   89cac:	dc400404 	addi	r17,sp,16
   89cb0:	2005883a 	mov	r2,r4
   89cb4:	2807883a 	mov	r3,r5
   89cb8:	dc000e15 	stw	r16,56(sp)
   89cbc:	d809883a 	mov	r4,sp
   89cc0:	880b883a 	mov	r5,r17
   89cc4:	dc000904 	addi	r16,sp,36
   89cc8:	d8c00115 	stw	r3,4(sp)
   89ccc:	d8800015 	stw	r2,0(sp)
   89cd0:	d9800215 	stw	r6,8(sp)
   89cd4:	dfc01015 	stw	ra,64(sp)
   89cd8:	d9c00315 	stw	r7,12(sp)
   89cdc:	008a7680 	call	8a768 <__unpack_d>
   89ce0:	d9000204 	addi	r4,sp,8
   89ce4:	800b883a 	mov	r5,r16
   89ce8:	008a7680 	call	8a768 <__unpack_d>
   89cec:	d8800417 	ldw	r2,16(sp)
   89cf0:	00c00044 	movi	r3,1
   89cf4:	180d883a 	mov	r6,r3
   89cf8:	1880062e 	bgeu	r3,r2,89d14 <__eqdf2+0x70>
   89cfc:	d8800917 	ldw	r2,36(sp)
   89d00:	8809883a 	mov	r4,r17
   89d04:	800b883a 	mov	r5,r16
   89d08:	1880022e 	bgeu	r3,r2,89d14 <__eqdf2+0x70>
   89d0c:	008a8a00 	call	8a8a0 <__fpcmp_parts_d>
   89d10:	100d883a 	mov	r6,r2
   89d14:	3005883a 	mov	r2,r6
   89d18:	dfc01017 	ldw	ra,64(sp)
   89d1c:	dc400f17 	ldw	r17,60(sp)
   89d20:	dc000e17 	ldw	r16,56(sp)
   89d24:	dec01104 	addi	sp,sp,68
   89d28:	f800283a 	ret

00089d2c <__nedf2>:
   89d2c:	deffef04 	addi	sp,sp,-68
   89d30:	dc400f15 	stw	r17,60(sp)
   89d34:	dc400404 	addi	r17,sp,16
   89d38:	2005883a 	mov	r2,r4
   89d3c:	2807883a 	mov	r3,r5
   89d40:	dc000e15 	stw	r16,56(sp)
   89d44:	d809883a 	mov	r4,sp
   89d48:	880b883a 	mov	r5,r17
   89d4c:	dc000904 	addi	r16,sp,36
   89d50:	d8c00115 	stw	r3,4(sp)
   89d54:	d8800015 	stw	r2,0(sp)
   89d58:	d9800215 	stw	r6,8(sp)
   89d5c:	dfc01015 	stw	ra,64(sp)
   89d60:	d9c00315 	stw	r7,12(sp)
   89d64:	008a7680 	call	8a768 <__unpack_d>
   89d68:	d9000204 	addi	r4,sp,8
   89d6c:	800b883a 	mov	r5,r16
   89d70:	008a7680 	call	8a768 <__unpack_d>
   89d74:	d8800417 	ldw	r2,16(sp)
   89d78:	00c00044 	movi	r3,1
   89d7c:	180d883a 	mov	r6,r3
   89d80:	1880062e 	bgeu	r3,r2,89d9c <__nedf2+0x70>
   89d84:	d8800917 	ldw	r2,36(sp)
   89d88:	8809883a 	mov	r4,r17
   89d8c:	800b883a 	mov	r5,r16
   89d90:	1880022e 	bgeu	r3,r2,89d9c <__nedf2+0x70>
   89d94:	008a8a00 	call	8a8a0 <__fpcmp_parts_d>
   89d98:	100d883a 	mov	r6,r2
   89d9c:	3005883a 	mov	r2,r6
   89da0:	dfc01017 	ldw	ra,64(sp)
   89da4:	dc400f17 	ldw	r17,60(sp)
   89da8:	dc000e17 	ldw	r16,56(sp)
   89dac:	dec01104 	addi	sp,sp,68
   89db0:	f800283a 	ret

00089db4 <__gtdf2>:
   89db4:	deffef04 	addi	sp,sp,-68
   89db8:	dc400f15 	stw	r17,60(sp)
   89dbc:	dc400404 	addi	r17,sp,16
   89dc0:	2005883a 	mov	r2,r4
   89dc4:	2807883a 	mov	r3,r5
   89dc8:	dc000e15 	stw	r16,56(sp)
   89dcc:	d809883a 	mov	r4,sp
   89dd0:	880b883a 	mov	r5,r17
   89dd4:	dc000904 	addi	r16,sp,36
   89dd8:	d8c00115 	stw	r3,4(sp)
   89ddc:	d8800015 	stw	r2,0(sp)
   89de0:	d9800215 	stw	r6,8(sp)
   89de4:	dfc01015 	stw	ra,64(sp)
   89de8:	d9c00315 	stw	r7,12(sp)
   89dec:	008a7680 	call	8a768 <__unpack_d>
   89df0:	d9000204 	addi	r4,sp,8
   89df4:	800b883a 	mov	r5,r16
   89df8:	008a7680 	call	8a768 <__unpack_d>
   89dfc:	d8800417 	ldw	r2,16(sp)
   89e00:	00c00044 	movi	r3,1
   89e04:	01bfffc4 	movi	r6,-1
   89e08:	1880062e 	bgeu	r3,r2,89e24 <__gtdf2+0x70>
   89e0c:	d8800917 	ldw	r2,36(sp)
   89e10:	8809883a 	mov	r4,r17
   89e14:	800b883a 	mov	r5,r16
   89e18:	1880022e 	bgeu	r3,r2,89e24 <__gtdf2+0x70>
   89e1c:	008a8a00 	call	8a8a0 <__fpcmp_parts_d>
   89e20:	100d883a 	mov	r6,r2
   89e24:	3005883a 	mov	r2,r6
   89e28:	dfc01017 	ldw	ra,64(sp)
   89e2c:	dc400f17 	ldw	r17,60(sp)
   89e30:	dc000e17 	ldw	r16,56(sp)
   89e34:	dec01104 	addi	sp,sp,68
   89e38:	f800283a 	ret

00089e3c <__gedf2>:
   89e3c:	deffef04 	addi	sp,sp,-68
   89e40:	dc400f15 	stw	r17,60(sp)
   89e44:	dc400404 	addi	r17,sp,16
   89e48:	2005883a 	mov	r2,r4
   89e4c:	2807883a 	mov	r3,r5
   89e50:	dc000e15 	stw	r16,56(sp)
   89e54:	d809883a 	mov	r4,sp
   89e58:	880b883a 	mov	r5,r17
   89e5c:	dc000904 	addi	r16,sp,36
   89e60:	d8c00115 	stw	r3,4(sp)
   89e64:	d8800015 	stw	r2,0(sp)
   89e68:	d9800215 	stw	r6,8(sp)
   89e6c:	dfc01015 	stw	ra,64(sp)
   89e70:	d9c00315 	stw	r7,12(sp)
   89e74:	008a7680 	call	8a768 <__unpack_d>
   89e78:	d9000204 	addi	r4,sp,8
   89e7c:	800b883a 	mov	r5,r16
   89e80:	008a7680 	call	8a768 <__unpack_d>
   89e84:	d8800417 	ldw	r2,16(sp)
   89e88:	00c00044 	movi	r3,1
   89e8c:	01bfffc4 	movi	r6,-1
   89e90:	1880062e 	bgeu	r3,r2,89eac <__gedf2+0x70>
   89e94:	d8800917 	ldw	r2,36(sp)
   89e98:	8809883a 	mov	r4,r17
   89e9c:	800b883a 	mov	r5,r16
   89ea0:	1880022e 	bgeu	r3,r2,89eac <__gedf2+0x70>
   89ea4:	008a8a00 	call	8a8a0 <__fpcmp_parts_d>
   89ea8:	100d883a 	mov	r6,r2
   89eac:	3005883a 	mov	r2,r6
   89eb0:	dfc01017 	ldw	ra,64(sp)
   89eb4:	dc400f17 	ldw	r17,60(sp)
   89eb8:	dc000e17 	ldw	r16,56(sp)
   89ebc:	dec01104 	addi	sp,sp,68
   89ec0:	f800283a 	ret

00089ec4 <__ltdf2>:
   89ec4:	deffef04 	addi	sp,sp,-68
   89ec8:	dc400f15 	stw	r17,60(sp)
   89ecc:	dc400404 	addi	r17,sp,16
   89ed0:	2005883a 	mov	r2,r4
   89ed4:	2807883a 	mov	r3,r5
   89ed8:	dc000e15 	stw	r16,56(sp)
   89edc:	d809883a 	mov	r4,sp
   89ee0:	880b883a 	mov	r5,r17
   89ee4:	dc000904 	addi	r16,sp,36
   89ee8:	d8c00115 	stw	r3,4(sp)
   89eec:	d8800015 	stw	r2,0(sp)
   89ef0:	d9800215 	stw	r6,8(sp)
   89ef4:	dfc01015 	stw	ra,64(sp)
   89ef8:	d9c00315 	stw	r7,12(sp)
   89efc:	008a7680 	call	8a768 <__unpack_d>
   89f00:	d9000204 	addi	r4,sp,8
   89f04:	800b883a 	mov	r5,r16
   89f08:	008a7680 	call	8a768 <__unpack_d>
   89f0c:	d8800417 	ldw	r2,16(sp)
   89f10:	00c00044 	movi	r3,1
   89f14:	180d883a 	mov	r6,r3
   89f18:	1880062e 	bgeu	r3,r2,89f34 <__ltdf2+0x70>
   89f1c:	d8800917 	ldw	r2,36(sp)
   89f20:	8809883a 	mov	r4,r17
   89f24:	800b883a 	mov	r5,r16
   89f28:	1880022e 	bgeu	r3,r2,89f34 <__ltdf2+0x70>
   89f2c:	008a8a00 	call	8a8a0 <__fpcmp_parts_d>
   89f30:	100d883a 	mov	r6,r2
   89f34:	3005883a 	mov	r2,r6
   89f38:	dfc01017 	ldw	ra,64(sp)
   89f3c:	dc400f17 	ldw	r17,60(sp)
   89f40:	dc000e17 	ldw	r16,56(sp)
   89f44:	dec01104 	addi	sp,sp,68
   89f48:	f800283a 	ret

00089f4c <__floatsidf>:
   89f4c:	2006d7fa 	srli	r3,r4,31
   89f50:	defff604 	addi	sp,sp,-40
   89f54:	008000c4 	movi	r2,3
   89f58:	dfc00915 	stw	ra,36(sp)
   89f5c:	dcc00815 	stw	r19,32(sp)
   89f60:	dc800715 	stw	r18,28(sp)
   89f64:	dc400615 	stw	r17,24(sp)
   89f68:	dc000515 	stw	r16,20(sp)
   89f6c:	d8800015 	stw	r2,0(sp)
   89f70:	d8c00115 	stw	r3,4(sp)
   89f74:	20000f1e 	bne	r4,zero,89fb4 <__floatsidf+0x68>
   89f78:	00800084 	movi	r2,2
   89f7c:	d8800015 	stw	r2,0(sp)
   89f80:	d809883a 	mov	r4,sp
   89f84:	008a4540 	call	8a454 <__pack_d>
   89f88:	1009883a 	mov	r4,r2
   89f8c:	180b883a 	mov	r5,r3
   89f90:	2005883a 	mov	r2,r4
   89f94:	2807883a 	mov	r3,r5
   89f98:	dfc00917 	ldw	ra,36(sp)
   89f9c:	dcc00817 	ldw	r19,32(sp)
   89fa0:	dc800717 	ldw	r18,28(sp)
   89fa4:	dc400617 	ldw	r17,24(sp)
   89fa8:	dc000517 	ldw	r16,20(sp)
   89fac:	dec00a04 	addi	sp,sp,40
   89fb0:	f800283a 	ret
   89fb4:	00800f04 	movi	r2,60
   89fb8:	1807003a 	cmpeq	r3,r3,zero
   89fbc:	d8800215 	stw	r2,8(sp)
   89fc0:	18001126 	beq	r3,zero,8a008 <__floatsidf+0xbc>
   89fc4:	0027883a 	mov	r19,zero
   89fc8:	2025883a 	mov	r18,r4
   89fcc:	d9000315 	stw	r4,12(sp)
   89fd0:	dcc00415 	stw	r19,16(sp)
   89fd4:	008a3d40 	call	8a3d4 <__clzsi2>
   89fd8:	11000744 	addi	r4,r2,29
   89fdc:	013fe80e 	bge	zero,r4,89f80 <__floatsidf+0x34>
   89fe0:	10bfff44 	addi	r2,r2,-3
   89fe4:	10000c16 	blt	r2,zero,8a018 <__floatsidf+0xcc>
   89fe8:	90a2983a 	sll	r17,r18,r2
   89fec:	0021883a 	mov	r16,zero
   89ff0:	d8800217 	ldw	r2,8(sp)
   89ff4:	dc400415 	stw	r17,16(sp)
   89ff8:	dc000315 	stw	r16,12(sp)
   89ffc:	1105c83a 	sub	r2,r2,r4
   8a000:	d8800215 	stw	r2,8(sp)
   8a004:	003fde06 	br	89f80 <__floatsidf+0x34>
   8a008:	00a00034 	movhi	r2,32768
   8a00c:	20800a26 	beq	r4,r2,8a038 <__floatsidf+0xec>
   8a010:	0109c83a 	sub	r4,zero,r4
   8a014:	003feb06 	br	89fc4 <__floatsidf+0x78>
   8a018:	9006d07a 	srli	r3,r18,1
   8a01c:	008007c4 	movi	r2,31
   8a020:	1105c83a 	sub	r2,r2,r4
   8a024:	1886d83a 	srl	r3,r3,r2
   8a028:	9922983a 	sll	r17,r19,r4
   8a02c:	9120983a 	sll	r16,r18,r4
   8a030:	1c62b03a 	or	r17,r3,r17
   8a034:	003fee06 	br	89ff0 <__floatsidf+0xa4>
   8a038:	0009883a 	mov	r4,zero
   8a03c:	01707834 	movhi	r5,49632
   8a040:	003fd306 	br	89f90 <__floatsidf+0x44>

0008a044 <__fixdfsi>:
   8a044:	defff804 	addi	sp,sp,-32
   8a048:	2005883a 	mov	r2,r4
   8a04c:	2807883a 	mov	r3,r5
   8a050:	d809883a 	mov	r4,sp
   8a054:	d9400204 	addi	r5,sp,8
   8a058:	d8c00115 	stw	r3,4(sp)
   8a05c:	d8800015 	stw	r2,0(sp)
   8a060:	dfc00715 	stw	ra,28(sp)
   8a064:	008a7680 	call	8a768 <__unpack_d>
   8a068:	d8c00217 	ldw	r3,8(sp)
   8a06c:	00800084 	movi	r2,2
   8a070:	1880051e 	bne	r3,r2,8a088 <__fixdfsi+0x44>
   8a074:	0007883a 	mov	r3,zero
   8a078:	1805883a 	mov	r2,r3
   8a07c:	dfc00717 	ldw	ra,28(sp)
   8a080:	dec00804 	addi	sp,sp,32
   8a084:	f800283a 	ret
   8a088:	00800044 	movi	r2,1
   8a08c:	10fff92e 	bgeu	r2,r3,8a074 <__fixdfsi+0x30>
   8a090:	00800104 	movi	r2,4
   8a094:	18800426 	beq	r3,r2,8a0a8 <__fixdfsi+0x64>
   8a098:	d8c00417 	ldw	r3,16(sp)
   8a09c:	183ff516 	blt	r3,zero,8a074 <__fixdfsi+0x30>
   8a0a0:	00800784 	movi	r2,30
   8a0a4:	10c0080e 	bge	r2,r3,8a0c8 <__fixdfsi+0x84>
   8a0a8:	d8800317 	ldw	r2,12(sp)
   8a0ac:	1000121e 	bne	r2,zero,8a0f8 <__fixdfsi+0xb4>
   8a0b0:	00e00034 	movhi	r3,32768
   8a0b4:	18ffffc4 	addi	r3,r3,-1
   8a0b8:	1805883a 	mov	r2,r3
   8a0bc:	dfc00717 	ldw	ra,28(sp)
   8a0c0:	dec00804 	addi	sp,sp,32
   8a0c4:	f800283a 	ret
   8a0c8:	00800f04 	movi	r2,60
   8a0cc:	10d1c83a 	sub	r8,r2,r3
   8a0d0:	40bff804 	addi	r2,r8,-32
   8a0d4:	d9800517 	ldw	r6,20(sp)
   8a0d8:	d9c00617 	ldw	r7,24(sp)
   8a0dc:	10000816 	blt	r2,zero,8a100 <__fixdfsi+0xbc>
   8a0e0:	3888d83a 	srl	r4,r7,r2
   8a0e4:	d8800317 	ldw	r2,12(sp)
   8a0e8:	2007883a 	mov	r3,r4
   8a0ec:	103fe226 	beq	r2,zero,8a078 <__fixdfsi+0x34>
   8a0f0:	0107c83a 	sub	r3,zero,r4
   8a0f4:	003fe006 	br	8a078 <__fixdfsi+0x34>
   8a0f8:	00e00034 	movhi	r3,32768
   8a0fc:	003fde06 	br	8a078 <__fixdfsi+0x34>
   8a100:	39c7883a 	add	r3,r7,r7
   8a104:	008007c4 	movi	r2,31
   8a108:	1205c83a 	sub	r2,r2,r8
   8a10c:	1886983a 	sll	r3,r3,r2
   8a110:	3208d83a 	srl	r4,r6,r8
   8a114:	1908b03a 	or	r4,r3,r4
   8a118:	003ff206 	br	8a0e4 <__fixdfsi+0xa0>

0008a11c <__floatunsidf>:
   8a11c:	defff204 	addi	sp,sp,-56
   8a120:	dfc00d15 	stw	ra,52(sp)
   8a124:	ddc00c15 	stw	r23,48(sp)
   8a128:	dd800b15 	stw	r22,44(sp)
   8a12c:	dd400a15 	stw	r21,40(sp)
   8a130:	dd000915 	stw	r20,36(sp)
   8a134:	dcc00815 	stw	r19,32(sp)
   8a138:	dc800715 	stw	r18,28(sp)
   8a13c:	dc400615 	stw	r17,24(sp)
   8a140:	dc000515 	stw	r16,20(sp)
   8a144:	d8000115 	stw	zero,4(sp)
   8a148:	20000f1e 	bne	r4,zero,8a188 <__floatunsidf+0x6c>
   8a14c:	00800084 	movi	r2,2
   8a150:	d8800015 	stw	r2,0(sp)
   8a154:	d809883a 	mov	r4,sp
   8a158:	008a4540 	call	8a454 <__pack_d>
   8a15c:	dfc00d17 	ldw	ra,52(sp)
   8a160:	ddc00c17 	ldw	r23,48(sp)
   8a164:	dd800b17 	ldw	r22,44(sp)
   8a168:	dd400a17 	ldw	r21,40(sp)
   8a16c:	dd000917 	ldw	r20,36(sp)
   8a170:	dcc00817 	ldw	r19,32(sp)
   8a174:	dc800717 	ldw	r18,28(sp)
   8a178:	dc400617 	ldw	r17,24(sp)
   8a17c:	dc000517 	ldw	r16,20(sp)
   8a180:	dec00e04 	addi	sp,sp,56
   8a184:	f800283a 	ret
   8a188:	008000c4 	movi	r2,3
   8a18c:	00c00f04 	movi	r3,60
   8a190:	002f883a 	mov	r23,zero
   8a194:	202d883a 	mov	r22,r4
   8a198:	d8800015 	stw	r2,0(sp)
   8a19c:	d8c00215 	stw	r3,8(sp)
   8a1a0:	d9000315 	stw	r4,12(sp)
   8a1a4:	ddc00415 	stw	r23,16(sp)
   8a1a8:	008a3d40 	call	8a3d4 <__clzsi2>
   8a1ac:	12400744 	addi	r9,r2,29
   8a1b0:	48000b16 	blt	r9,zero,8a1e0 <__floatunsidf+0xc4>
   8a1b4:	483fe726 	beq	r9,zero,8a154 <__floatunsidf+0x38>
   8a1b8:	10bfff44 	addi	r2,r2,-3
   8a1bc:	10002e16 	blt	r2,zero,8a278 <__floatunsidf+0x15c>
   8a1c0:	b0a2983a 	sll	r17,r22,r2
   8a1c4:	0021883a 	mov	r16,zero
   8a1c8:	d8800217 	ldw	r2,8(sp)
   8a1cc:	dc400415 	stw	r17,16(sp)
   8a1d0:	dc000315 	stw	r16,12(sp)
   8a1d4:	1245c83a 	sub	r2,r2,r9
   8a1d8:	d8800215 	stw	r2,8(sp)
   8a1dc:	003fdd06 	br	8a154 <__floatunsidf+0x38>
   8a1e0:	0255c83a 	sub	r10,zero,r9
   8a1e4:	51bff804 	addi	r6,r10,-32
   8a1e8:	30001b16 	blt	r6,zero,8a258 <__floatunsidf+0x13c>
   8a1ec:	b9a8d83a 	srl	r20,r23,r6
   8a1f0:	002b883a 	mov	r21,zero
   8a1f4:	000f883a 	mov	r7,zero
   8a1f8:	01000044 	movi	r4,1
   8a1fc:	0011883a 	mov	r8,zero
   8a200:	30002516 	blt	r6,zero,8a298 <__floatunsidf+0x17c>
   8a204:	21a6983a 	sll	r19,r4,r6
   8a208:	0025883a 	mov	r18,zero
   8a20c:	00bfffc4 	movi	r2,-1
   8a210:	9089883a 	add	r4,r18,r2
   8a214:	988b883a 	add	r5,r19,r2
   8a218:	248d803a 	cmpltu	r6,r4,r18
   8a21c:	314b883a 	add	r5,r6,r5
   8a220:	b104703a 	and	r2,r22,r4
   8a224:	b946703a 	and	r3,r23,r5
   8a228:	10c4b03a 	or	r2,r2,r3
   8a22c:	10000226 	beq	r2,zero,8a238 <__floatunsidf+0x11c>
   8a230:	01c00044 	movi	r7,1
   8a234:	0011883a 	mov	r8,zero
   8a238:	d9000217 	ldw	r4,8(sp)
   8a23c:	a1c4b03a 	or	r2,r20,r7
   8a240:	aa06b03a 	or	r3,r21,r8
   8a244:	2249c83a 	sub	r4,r4,r9
   8a248:	d8c00415 	stw	r3,16(sp)
   8a24c:	d9000215 	stw	r4,8(sp)
   8a250:	d8800315 	stw	r2,12(sp)
   8a254:	003fbf06 	br	8a154 <__floatunsidf+0x38>
   8a258:	bdc7883a 	add	r3,r23,r23
   8a25c:	008007c4 	movi	r2,31
   8a260:	1285c83a 	sub	r2,r2,r10
   8a264:	1886983a 	sll	r3,r3,r2
   8a268:	b2a8d83a 	srl	r20,r22,r10
   8a26c:	baaad83a 	srl	r21,r23,r10
   8a270:	1d28b03a 	or	r20,r3,r20
   8a274:	003fdf06 	br	8a1f4 <__floatunsidf+0xd8>
   8a278:	b006d07a 	srli	r3,r22,1
   8a27c:	008007c4 	movi	r2,31
   8a280:	1245c83a 	sub	r2,r2,r9
   8a284:	1886d83a 	srl	r3,r3,r2
   8a288:	ba62983a 	sll	r17,r23,r9
   8a28c:	b260983a 	sll	r16,r22,r9
   8a290:	1c62b03a 	or	r17,r3,r17
   8a294:	003fcc06 	br	8a1c8 <__floatunsidf+0xac>
   8a298:	2006d07a 	srli	r3,r4,1
   8a29c:	008007c4 	movi	r2,31
   8a2a0:	1285c83a 	sub	r2,r2,r10
   8a2a4:	18a6d83a 	srl	r19,r3,r2
   8a2a8:	22a4983a 	sll	r18,r4,r10
   8a2ac:	003fd706 	br	8a20c <__floatunsidf+0xf0>

0008a2b0 <__muldi3>:
   8a2b0:	defff204 	addi	sp,sp,-56
   8a2b4:	df000c15 	stw	fp,48(sp)
   8a2b8:	3038d43a 	srli	fp,r6,16
   8a2bc:	dd000815 	stw	r20,32(sp)
   8a2c0:	dc400515 	stw	r17,20(sp)
   8a2c4:	2028d43a 	srli	r20,r4,16
   8a2c8:	247fffcc 	andi	r17,r4,65535
   8a2cc:	dc000415 	stw	r16,16(sp)
   8a2d0:	343fffcc 	andi	r16,r6,65535
   8a2d4:	dcc00715 	stw	r19,28(sp)
   8a2d8:	d9000015 	stw	r4,0(sp)
   8a2dc:	2827883a 	mov	r19,r5
   8a2e0:	8809883a 	mov	r4,r17
   8a2e4:	d9400115 	stw	r5,4(sp)
   8a2e8:	800b883a 	mov	r5,r16
   8a2ec:	d9800215 	stw	r6,8(sp)
   8a2f0:	dfc00d15 	stw	ra,52(sp)
   8a2f4:	d9c00315 	stw	r7,12(sp)
   8a2f8:	dd800a15 	stw	r22,40(sp)
   8a2fc:	dd400915 	stw	r21,36(sp)
   8a300:	302d883a 	mov	r22,r6
   8a304:	ddc00b15 	stw	r23,44(sp)
   8a308:	dc800615 	stw	r18,24(sp)
   8a30c:	0080e140 	call	80e14 <__mulsi3>
   8a310:	8809883a 	mov	r4,r17
   8a314:	e00b883a 	mov	r5,fp
   8a318:	102b883a 	mov	r21,r2
   8a31c:	0080e140 	call	80e14 <__mulsi3>
   8a320:	800b883a 	mov	r5,r16
   8a324:	a009883a 	mov	r4,r20
   8a328:	1023883a 	mov	r17,r2
   8a32c:	0080e140 	call	80e14 <__mulsi3>
   8a330:	a009883a 	mov	r4,r20
   8a334:	e00b883a 	mov	r5,fp
   8a338:	1021883a 	mov	r16,r2
   8a33c:	0080e140 	call	80e14 <__mulsi3>
   8a340:	a8ffffcc 	andi	r3,r21,65535
   8a344:	a82ad43a 	srli	r21,r21,16
   8a348:	8c23883a 	add	r17,r17,r16
   8a34c:	1011883a 	mov	r8,r2
   8a350:	ac6b883a 	add	r21,r21,r17
   8a354:	a804943a 	slli	r2,r21,16
   8a358:	b009883a 	mov	r4,r22
   8a35c:	980b883a 	mov	r5,r19
   8a360:	10c7883a 	add	r3,r2,r3
   8a364:	a812d43a 	srli	r9,r21,16
   8a368:	180d883a 	mov	r6,r3
   8a36c:	ac00022e 	bgeu	r21,r16,8a378 <__muldi3+0xc8>
   8a370:	00800074 	movhi	r2,1
   8a374:	4091883a 	add	r8,r8,r2
   8a378:	4267883a 	add	r19,r8,r9
   8a37c:	302d883a 	mov	r22,r6
   8a380:	0080e140 	call	80e14 <__mulsi3>
   8a384:	d9400317 	ldw	r5,12(sp)
   8a388:	d9000017 	ldw	r4,0(sp)
   8a38c:	1023883a 	mov	r17,r2
   8a390:	0080e140 	call	80e14 <__mulsi3>
   8a394:	14cb883a 	add	r5,r2,r19
   8a398:	894b883a 	add	r5,r17,r5
   8a39c:	b005883a 	mov	r2,r22
   8a3a0:	2807883a 	mov	r3,r5
   8a3a4:	dfc00d17 	ldw	ra,52(sp)
   8a3a8:	df000c17 	ldw	fp,48(sp)
   8a3ac:	ddc00b17 	ldw	r23,44(sp)
   8a3b0:	dd800a17 	ldw	r22,40(sp)
   8a3b4:	dd400917 	ldw	r21,36(sp)
   8a3b8:	dd000817 	ldw	r20,32(sp)
   8a3bc:	dcc00717 	ldw	r19,28(sp)
   8a3c0:	dc800617 	ldw	r18,24(sp)
   8a3c4:	dc400517 	ldw	r17,20(sp)
   8a3c8:	dc000417 	ldw	r16,16(sp)
   8a3cc:	dec00e04 	addi	sp,sp,56
   8a3d0:	f800283a 	ret

0008a3d4 <__clzsi2>:
   8a3d4:	00bfffd4 	movui	r2,65535
   8a3d8:	11000e36 	bltu	r2,r4,8a414 <__clzsi2+0x40>
   8a3dc:	00803fc4 	movi	r2,255
   8a3e0:	01400204 	movi	r5,8
   8a3e4:	0007883a 	mov	r3,zero
   8a3e8:	11001036 	bltu	r2,r4,8a42c <__clzsi2+0x58>
   8a3ec:	000b883a 	mov	r5,zero
   8a3f0:	20c6d83a 	srl	r3,r4,r3
   8a3f4:	00800274 	movhi	r2,9
   8a3f8:	10b8ec04 	addi	r2,r2,-7248
   8a3fc:	1887883a 	add	r3,r3,r2
   8a400:	18800003 	ldbu	r2,0(r3)
   8a404:	00c00804 	movi	r3,32
   8a408:	2885883a 	add	r2,r5,r2
   8a40c:	1885c83a 	sub	r2,r3,r2
   8a410:	f800283a 	ret
   8a414:	01400404 	movi	r5,16
   8a418:	00804034 	movhi	r2,256
   8a41c:	10bfffc4 	addi	r2,r2,-1
   8a420:	2807883a 	mov	r3,r5
   8a424:	113ff22e 	bgeu	r2,r4,8a3f0 <__clzsi2+0x1c>
   8a428:	01400604 	movi	r5,24
   8a42c:	2807883a 	mov	r3,r5
   8a430:	20c6d83a 	srl	r3,r4,r3
   8a434:	00800274 	movhi	r2,9
   8a438:	10b8ec04 	addi	r2,r2,-7248
   8a43c:	1887883a 	add	r3,r3,r2
   8a440:	18800003 	ldbu	r2,0(r3)
   8a444:	00c00804 	movi	r3,32
   8a448:	2885883a 	add	r2,r5,r2
   8a44c:	1885c83a 	sub	r2,r3,r2
   8a450:	f800283a 	ret

0008a454 <__pack_d>:
   8a454:	20c00017 	ldw	r3,0(r4)
   8a458:	defffd04 	addi	sp,sp,-12
   8a45c:	dc000015 	stw	r16,0(sp)
   8a460:	dc800215 	stw	r18,8(sp)
   8a464:	dc400115 	stw	r17,4(sp)
   8a468:	00800044 	movi	r2,1
   8a46c:	22000317 	ldw	r8,12(r4)
   8a470:	001f883a 	mov	r15,zero
   8a474:	22400417 	ldw	r9,16(r4)
   8a478:	24000117 	ldw	r16,4(r4)
   8a47c:	10c0552e 	bgeu	r2,r3,8a5d4 <__pack_d+0x180>
   8a480:	00800104 	movi	r2,4
   8a484:	18804f26 	beq	r3,r2,8a5c4 <__pack_d+0x170>
   8a488:	00800084 	movi	r2,2
   8a48c:	18800226 	beq	r3,r2,8a498 <__pack_d+0x44>
   8a490:	4244b03a 	or	r2,r8,r9
   8a494:	10001a1e 	bne	r2,zero,8a500 <__pack_d+0xac>
   8a498:	000d883a 	mov	r6,zero
   8a49c:	000f883a 	mov	r7,zero
   8a4a0:	0011883a 	mov	r8,zero
   8a4a4:	00800434 	movhi	r2,16
   8a4a8:	10bfffc4 	addi	r2,r2,-1
   8a4ac:	301d883a 	mov	r14,r6
   8a4b0:	3884703a 	and	r2,r7,r2
   8a4b4:	400a953a 	slli	r5,r8,20
   8a4b8:	79bffc2c 	andhi	r6,r15,65520
   8a4bc:	308cb03a 	or	r6,r6,r2
   8a4c0:	00e00434 	movhi	r3,32784
   8a4c4:	18ffffc4 	addi	r3,r3,-1
   8a4c8:	800497fa 	slli	r2,r16,31
   8a4cc:	30c6703a 	and	r3,r6,r3
   8a4d0:	1946b03a 	or	r3,r3,r5
   8a4d4:	01600034 	movhi	r5,32768
   8a4d8:	297fffc4 	addi	r5,r5,-1
   8a4dc:	194a703a 	and	r5,r3,r5
   8a4e0:	288ab03a 	or	r5,r5,r2
   8a4e4:	2807883a 	mov	r3,r5
   8a4e8:	7005883a 	mov	r2,r14
   8a4ec:	dc800217 	ldw	r18,8(sp)
   8a4f0:	dc400117 	ldw	r17,4(sp)
   8a4f4:	dc000017 	ldw	r16,0(sp)
   8a4f8:	dec00304 	addi	sp,sp,12
   8a4fc:	f800283a 	ret
   8a500:	21000217 	ldw	r4,8(r4)
   8a504:	00bf0084 	movi	r2,-1022
   8a508:	20803f16 	blt	r4,r2,8a608 <__pack_d+0x1b4>
   8a50c:	0080ffc4 	movi	r2,1023
   8a510:	11002c16 	blt	r2,r4,8a5c4 <__pack_d+0x170>
   8a514:	00803fc4 	movi	r2,255
   8a518:	408c703a 	and	r6,r8,r2
   8a51c:	00802004 	movi	r2,128
   8a520:	0007883a 	mov	r3,zero
   8a524:	000f883a 	mov	r7,zero
   8a528:	2280ffc4 	addi	r10,r4,1023
   8a52c:	30801e26 	beq	r6,r2,8a5a8 <__pack_d+0x154>
   8a530:	00801fc4 	movi	r2,127
   8a534:	4089883a 	add	r4,r8,r2
   8a538:	220d803a 	cmpltu	r6,r4,r8
   8a53c:	324d883a 	add	r6,r6,r9
   8a540:	2011883a 	mov	r8,r4
   8a544:	3013883a 	mov	r9,r6
   8a548:	00880034 	movhi	r2,8192
   8a54c:	10bfffc4 	addi	r2,r2,-1
   8a550:	12400d36 	bltu	r2,r9,8a588 <__pack_d+0x134>
   8a554:	4804963a 	slli	r2,r9,24
   8a558:	400cd23a 	srli	r6,r8,8
   8a55c:	480ed23a 	srli	r7,r9,8
   8a560:	013fffc4 	movi	r4,-1
   8a564:	118cb03a 	or	r6,r2,r6
   8a568:	01400434 	movhi	r5,16
   8a56c:	297fffc4 	addi	r5,r5,-1
   8a570:	3104703a 	and	r2,r6,r4
   8a574:	3946703a 	and	r3,r7,r5
   8a578:	5201ffcc 	andi	r8,r10,2047
   8a57c:	100d883a 	mov	r6,r2
   8a580:	180f883a 	mov	r7,r3
   8a584:	003fc706 	br	8a4a4 <__pack_d+0x50>
   8a588:	480897fa 	slli	r4,r9,31
   8a58c:	4004d07a 	srli	r2,r8,1
   8a590:	4806d07a 	srli	r3,r9,1
   8a594:	52800044 	addi	r10,r10,1
   8a598:	2084b03a 	or	r2,r4,r2
   8a59c:	1011883a 	mov	r8,r2
   8a5a0:	1813883a 	mov	r9,r3
   8a5a4:	003feb06 	br	8a554 <__pack_d+0x100>
   8a5a8:	383fe11e 	bne	r7,zero,8a530 <__pack_d+0xdc>
   8a5ac:	01004004 	movi	r4,256
   8a5b0:	4104703a 	and	r2,r8,r4
   8a5b4:	10c4b03a 	or	r2,r2,r3
   8a5b8:	103fe326 	beq	r2,zero,8a548 <__pack_d+0xf4>
   8a5bc:	3005883a 	mov	r2,r6
   8a5c0:	003fdc06 	br	8a534 <__pack_d+0xe0>
   8a5c4:	000d883a 	mov	r6,zero
   8a5c8:	000f883a 	mov	r7,zero
   8a5cc:	0201ffc4 	movi	r8,2047
   8a5d0:	003fb406 	br	8a4a4 <__pack_d+0x50>
   8a5d4:	0005883a 	mov	r2,zero
   8a5d8:	00c00234 	movhi	r3,8
   8a5dc:	408cb03a 	or	r6,r8,r2
   8a5e0:	48ceb03a 	or	r7,r9,r3
   8a5e4:	013fffc4 	movi	r4,-1
   8a5e8:	01400434 	movhi	r5,16
   8a5ec:	297fffc4 	addi	r5,r5,-1
   8a5f0:	3104703a 	and	r2,r6,r4
   8a5f4:	3946703a 	and	r3,r7,r5
   8a5f8:	100d883a 	mov	r6,r2
   8a5fc:	180f883a 	mov	r7,r3
   8a600:	0201ffc4 	movi	r8,2047
   8a604:	003fa706 	br	8a4a4 <__pack_d+0x50>
   8a608:	1109c83a 	sub	r4,r2,r4
   8a60c:	00800e04 	movi	r2,56
   8a610:	11004316 	blt	r2,r4,8a720 <__pack_d+0x2cc>
   8a614:	21fff804 	addi	r7,r4,-32
   8a618:	38004516 	blt	r7,zero,8a730 <__pack_d+0x2dc>
   8a61c:	49d8d83a 	srl	r12,r9,r7
   8a620:	001b883a 	mov	r13,zero
   8a624:	0023883a 	mov	r17,zero
   8a628:	01400044 	movi	r5,1
   8a62c:	0025883a 	mov	r18,zero
   8a630:	38004716 	blt	r7,zero,8a750 <__pack_d+0x2fc>
   8a634:	29d6983a 	sll	r11,r5,r7
   8a638:	0015883a 	mov	r10,zero
   8a63c:	00bfffc4 	movi	r2,-1
   8a640:	5089883a 	add	r4,r10,r2
   8a644:	588b883a 	add	r5,r11,r2
   8a648:	228d803a 	cmpltu	r6,r4,r10
   8a64c:	314b883a 	add	r5,r6,r5
   8a650:	4104703a 	and	r2,r8,r4
   8a654:	4946703a 	and	r3,r9,r5
   8a658:	10c4b03a 	or	r2,r2,r3
   8a65c:	10000226 	beq	r2,zero,8a668 <__pack_d+0x214>
   8a660:	04400044 	movi	r17,1
   8a664:	0025883a 	mov	r18,zero
   8a668:	00803fc4 	movi	r2,255
   8a66c:	644eb03a 	or	r7,r12,r17
   8a670:	3892703a 	and	r9,r7,r2
   8a674:	00802004 	movi	r2,128
   8a678:	6c90b03a 	or	r8,r13,r18
   8a67c:	0015883a 	mov	r10,zero
   8a680:	48801626 	beq	r9,r2,8a6dc <__pack_d+0x288>
   8a684:	01001fc4 	movi	r4,127
   8a688:	3905883a 	add	r2,r7,r4
   8a68c:	11cd803a 	cmpltu	r6,r2,r7
   8a690:	320d883a 	add	r6,r6,r8
   8a694:	100f883a 	mov	r7,r2
   8a698:	00840034 	movhi	r2,4096
   8a69c:	10bfffc4 	addi	r2,r2,-1
   8a6a0:	3011883a 	mov	r8,r6
   8a6a4:	0007883a 	mov	r3,zero
   8a6a8:	11801b36 	bltu	r2,r6,8a718 <__pack_d+0x2c4>
   8a6ac:	4004963a 	slli	r2,r8,24
   8a6b0:	3808d23a 	srli	r4,r7,8
   8a6b4:	400ad23a 	srli	r5,r8,8
   8a6b8:	1813883a 	mov	r9,r3
   8a6bc:	1108b03a 	or	r4,r2,r4
   8a6c0:	00bfffc4 	movi	r2,-1
   8a6c4:	00c00434 	movhi	r3,16
   8a6c8:	18ffffc4 	addi	r3,r3,-1
   8a6cc:	208c703a 	and	r6,r4,r2
   8a6d0:	28ce703a 	and	r7,r5,r3
   8a6d4:	4a01ffcc 	andi	r8,r9,2047
   8a6d8:	003f7206 	br	8a4a4 <__pack_d+0x50>
   8a6dc:	503fe91e 	bne	r10,zero,8a684 <__pack_d+0x230>
   8a6e0:	01004004 	movi	r4,256
   8a6e4:	3904703a 	and	r2,r7,r4
   8a6e8:	0007883a 	mov	r3,zero
   8a6ec:	10c4b03a 	or	r2,r2,r3
   8a6f0:	10000626 	beq	r2,zero,8a70c <__pack_d+0x2b8>
   8a6f4:	3a45883a 	add	r2,r7,r9
   8a6f8:	11cd803a 	cmpltu	r6,r2,r7
   8a6fc:	320d883a 	add	r6,r6,r8
   8a700:	100f883a 	mov	r7,r2
   8a704:	3011883a 	mov	r8,r6
   8a708:	0007883a 	mov	r3,zero
   8a70c:	00840034 	movhi	r2,4096
   8a710:	10bfffc4 	addi	r2,r2,-1
   8a714:	123fe52e 	bgeu	r2,r8,8a6ac <__pack_d+0x258>
   8a718:	00c00044 	movi	r3,1
   8a71c:	003fe306 	br	8a6ac <__pack_d+0x258>
   8a720:	0009883a 	mov	r4,zero
   8a724:	0013883a 	mov	r9,zero
   8a728:	000b883a 	mov	r5,zero
   8a72c:	003fe406 	br	8a6c0 <__pack_d+0x26c>
   8a730:	4a47883a 	add	r3,r9,r9
   8a734:	008007c4 	movi	r2,31
   8a738:	1105c83a 	sub	r2,r2,r4
   8a73c:	1886983a 	sll	r3,r3,r2
   8a740:	4118d83a 	srl	r12,r8,r4
   8a744:	491ad83a 	srl	r13,r9,r4
   8a748:	1b18b03a 	or	r12,r3,r12
   8a74c:	003fb506 	br	8a624 <__pack_d+0x1d0>
   8a750:	2806d07a 	srli	r3,r5,1
   8a754:	008007c4 	movi	r2,31
   8a758:	1105c83a 	sub	r2,r2,r4
   8a75c:	1896d83a 	srl	r11,r3,r2
   8a760:	2914983a 	sll	r10,r5,r4
   8a764:	003fb506 	br	8a63c <__pack_d+0x1e8>

0008a768 <__unpack_d>:
   8a768:	20c00117 	ldw	r3,4(r4)
   8a76c:	22400017 	ldw	r9,0(r4)
   8a770:	00800434 	movhi	r2,16
   8a774:	10bfffc4 	addi	r2,r2,-1
   8a778:	1808d53a 	srli	r4,r3,20
   8a77c:	180cd7fa 	srli	r6,r3,31
   8a780:	1894703a 	and	r10,r3,r2
   8a784:	2201ffcc 	andi	r8,r4,2047
   8a788:	281b883a 	mov	r13,r5
   8a78c:	4817883a 	mov	r11,r9
   8a790:	29800115 	stw	r6,4(r5)
   8a794:	5019883a 	mov	r12,r10
   8a798:	40001e1e 	bne	r8,zero,8a814 <__unpack_d+0xac>
   8a79c:	4a84b03a 	or	r2,r9,r10
   8a7a0:	10001926 	beq	r2,zero,8a808 <__unpack_d+0xa0>
   8a7a4:	4804d63a 	srli	r2,r9,24
   8a7a8:	500c923a 	slli	r6,r10,8
   8a7ac:	013f0084 	movi	r4,-1022
   8a7b0:	00c40034 	movhi	r3,4096
   8a7b4:	18ffffc4 	addi	r3,r3,-1
   8a7b8:	118cb03a 	or	r6,r2,r6
   8a7bc:	008000c4 	movi	r2,3
   8a7c0:	480a923a 	slli	r5,r9,8
   8a7c4:	68800015 	stw	r2,0(r13)
   8a7c8:	69000215 	stw	r4,8(r13)
   8a7cc:	19800b36 	bltu	r3,r6,8a7fc <__unpack_d+0x94>
   8a7d0:	200f883a 	mov	r7,r4
   8a7d4:	1811883a 	mov	r8,r3
   8a7d8:	2945883a 	add	r2,r5,r5
   8a7dc:	1149803a 	cmpltu	r4,r2,r5
   8a7e0:	3187883a 	add	r3,r6,r6
   8a7e4:	20c9883a 	add	r4,r4,r3
   8a7e8:	100b883a 	mov	r5,r2
   8a7ec:	200d883a 	mov	r6,r4
   8a7f0:	39ffffc4 	addi	r7,r7,-1
   8a7f4:	413ff82e 	bgeu	r8,r4,8a7d8 <__unpack_d+0x70>
   8a7f8:	69c00215 	stw	r7,8(r13)
   8a7fc:	69800415 	stw	r6,16(r13)
   8a800:	69400315 	stw	r5,12(r13)
   8a804:	f800283a 	ret
   8a808:	00800084 	movi	r2,2
   8a80c:	28800015 	stw	r2,0(r5)
   8a810:	f800283a 	ret
   8a814:	0081ffc4 	movi	r2,2047
   8a818:	40800f26 	beq	r8,r2,8a858 <__unpack_d+0xf0>
   8a81c:	480cd63a 	srli	r6,r9,24
   8a820:	5006923a 	slli	r3,r10,8
   8a824:	4804923a 	slli	r2,r9,8
   8a828:	0009883a 	mov	r4,zero
   8a82c:	30c6b03a 	or	r3,r6,r3
   8a830:	01440034 	movhi	r5,4096
   8a834:	110cb03a 	or	r6,r2,r4
   8a838:	423f0044 	addi	r8,r8,-1023
   8a83c:	194eb03a 	or	r7,r3,r5
   8a840:	008000c4 	movi	r2,3
   8a844:	69c00415 	stw	r7,16(r13)
   8a848:	6a000215 	stw	r8,8(r13)
   8a84c:	68800015 	stw	r2,0(r13)
   8a850:	69800315 	stw	r6,12(r13)
   8a854:	f800283a 	ret
   8a858:	4a84b03a 	or	r2,r9,r10
   8a85c:	1000031e 	bne	r2,zero,8a86c <__unpack_d+0x104>
   8a860:	00800104 	movi	r2,4
   8a864:	28800015 	stw	r2,0(r5)
   8a868:	f800283a 	ret
   8a86c:	0009883a 	mov	r4,zero
   8a870:	01400234 	movhi	r5,8
   8a874:	4904703a 	and	r2,r9,r4
   8a878:	5146703a 	and	r3,r10,r5
   8a87c:	10c4b03a 	or	r2,r2,r3
   8a880:	10000526 	beq	r2,zero,8a898 <__unpack_d+0x130>
   8a884:	00800044 	movi	r2,1
   8a888:	68800015 	stw	r2,0(r13)
   8a88c:	6b000415 	stw	r12,16(r13)
   8a890:	6ac00315 	stw	r11,12(r13)
   8a894:	f800283a 	ret
   8a898:	68000015 	stw	zero,0(r13)
   8a89c:	003ffb06 	br	8a88c <__unpack_d+0x124>

0008a8a0 <__fpcmp_parts_d>:
   8a8a0:	21800017 	ldw	r6,0(r4)
   8a8a4:	00c00044 	movi	r3,1
   8a8a8:	19800a2e 	bgeu	r3,r6,8a8d4 <__fpcmp_parts_d+0x34>
   8a8ac:	28800017 	ldw	r2,0(r5)
   8a8b0:	1880082e 	bgeu	r3,r2,8a8d4 <__fpcmp_parts_d+0x34>
   8a8b4:	00c00104 	movi	r3,4
   8a8b8:	30c02626 	beq	r6,r3,8a954 <__fpcmp_parts_d+0xb4>
   8a8bc:	10c02226 	beq	r2,r3,8a948 <__fpcmp_parts_d+0xa8>
   8a8c0:	00c00084 	movi	r3,2
   8a8c4:	30c00526 	beq	r6,r3,8a8dc <__fpcmp_parts_d+0x3c>
   8a8c8:	10c0071e 	bne	r2,r3,8a8e8 <__fpcmp_parts_d+0x48>
   8a8cc:	20800117 	ldw	r2,4(r4)
   8a8d0:	1000091e 	bne	r2,zero,8a8f8 <__fpcmp_parts_d+0x58>
   8a8d4:	00800044 	movi	r2,1
   8a8d8:	f800283a 	ret
   8a8dc:	10c01a1e 	bne	r2,r3,8a948 <__fpcmp_parts_d+0xa8>
   8a8e0:	0005883a 	mov	r2,zero
   8a8e4:	f800283a 	ret
   8a8e8:	22000117 	ldw	r8,4(r4)
   8a8ec:	28800117 	ldw	r2,4(r5)
   8a8f0:	40800326 	beq	r8,r2,8a900 <__fpcmp_parts_d+0x60>
   8a8f4:	403ff726 	beq	r8,zero,8a8d4 <__fpcmp_parts_d+0x34>
   8a8f8:	00bfffc4 	movi	r2,-1
   8a8fc:	f800283a 	ret
   8a900:	20c00217 	ldw	r3,8(r4)
   8a904:	28800217 	ldw	r2,8(r5)
   8a908:	10fffa16 	blt	r2,r3,8a8f4 <__fpcmp_parts_d+0x54>
   8a90c:	18800916 	blt	r3,r2,8a934 <__fpcmp_parts_d+0x94>
   8a910:	21c00417 	ldw	r7,16(r4)
   8a914:	28c00417 	ldw	r3,16(r5)
   8a918:	21800317 	ldw	r6,12(r4)
   8a91c:	28800317 	ldw	r2,12(r5)
   8a920:	19fff436 	bltu	r3,r7,8a8f4 <__fpcmp_parts_d+0x54>
   8a924:	38c00526 	beq	r7,r3,8a93c <__fpcmp_parts_d+0x9c>
   8a928:	38c00236 	bltu	r7,r3,8a934 <__fpcmp_parts_d+0x94>
   8a92c:	19ffec1e 	bne	r3,r7,8a8e0 <__fpcmp_parts_d+0x40>
   8a930:	30bfeb2e 	bgeu	r6,r2,8a8e0 <__fpcmp_parts_d+0x40>
   8a934:	403fe71e 	bne	r8,zero,8a8d4 <__fpcmp_parts_d+0x34>
   8a938:	003fef06 	br	8a8f8 <__fpcmp_parts_d+0x58>
   8a93c:	11bffa2e 	bgeu	r2,r6,8a928 <__fpcmp_parts_d+0x88>
   8a940:	403fe426 	beq	r8,zero,8a8d4 <__fpcmp_parts_d+0x34>
   8a944:	003fec06 	br	8a8f8 <__fpcmp_parts_d+0x58>
   8a948:	28800117 	ldw	r2,4(r5)
   8a94c:	103fe11e 	bne	r2,zero,8a8d4 <__fpcmp_parts_d+0x34>
   8a950:	003fe906 	br	8a8f8 <__fpcmp_parts_d+0x58>
   8a954:	11bfdd1e 	bne	r2,r6,8a8cc <__fpcmp_parts_d+0x2c>
   8a958:	28c00117 	ldw	r3,4(r5)
   8a95c:	20800117 	ldw	r2,4(r4)
   8a960:	1885c83a 	sub	r2,r3,r2
   8a964:	f800283a 	ret

0008a968 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8a968:	defff804 	addi	sp,sp,-32
   8a96c:	dfc00715 	stw	ra,28(sp)
   8a970:	df000615 	stw	fp,24(sp)
   8a974:	df000604 	addi	fp,sp,24
   8a978:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8a97c:	e0bffc17 	ldw	r2,-16(fp)
   8a980:	1004803a 	cmplt	r2,r2,zero
   8a984:	1000091e 	bne	r2,zero,8a9ac <close+0x44>
   8a988:	e13ffc17 	ldw	r4,-16(fp)
   8a98c:	01400304 	movi	r5,12
   8a990:	0080e140 	call	80e14 <__mulsi3>
   8a994:	1007883a 	mov	r3,r2
   8a998:	00800274 	movhi	r2,9
   8a99c:	10bb4b04 	addi	r2,r2,-4820
   8a9a0:	1887883a 	add	r3,r3,r2
   8a9a4:	e0ffff15 	stw	r3,-4(fp)
   8a9a8:	00000106 	br	8a9b0 <close+0x48>
   8a9ac:	e03fff15 	stw	zero,-4(fp)
   8a9b0:	e0bfff17 	ldw	r2,-4(fp)
   8a9b4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8a9b8:	e0bffb17 	ldw	r2,-20(fp)
   8a9bc:	1005003a 	cmpeq	r2,r2,zero
   8a9c0:	10001d1e 	bne	r2,zero,8aa38 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8a9c4:	e0bffb17 	ldw	r2,-20(fp)
   8a9c8:	10800017 	ldw	r2,0(r2)
   8a9cc:	10800417 	ldw	r2,16(r2)
   8a9d0:	1005003a 	cmpeq	r2,r2,zero
   8a9d4:	1000071e 	bne	r2,zero,8a9f4 <close+0x8c>
   8a9d8:	e0bffb17 	ldw	r2,-20(fp)
   8a9dc:	10800017 	ldw	r2,0(r2)
   8a9e0:	10800417 	ldw	r2,16(r2)
   8a9e4:	e13ffb17 	ldw	r4,-20(fp)
   8a9e8:	103ee83a 	callr	r2
   8a9ec:	e0bffe15 	stw	r2,-8(fp)
   8a9f0:	00000106 	br	8a9f8 <close+0x90>
   8a9f4:	e03ffe15 	stw	zero,-8(fp)
   8a9f8:	e0bffe17 	ldw	r2,-8(fp)
   8a9fc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8aa00:	e13ffc17 	ldw	r4,-16(fp)
   8aa04:	008b2000 	call	8b200 <alt_release_fd>
    if (rval < 0)
   8aa08:	e0bffa17 	ldw	r2,-24(fp)
   8aa0c:	1004403a 	cmpge	r2,r2,zero
   8aa10:	1000071e 	bne	r2,zero,8aa30 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8aa14:	008aa680 	call	8aa68 <alt_get_errno>
   8aa18:	e0fffa17 	ldw	r3,-24(fp)
   8aa1c:	00c7c83a 	sub	r3,zero,r3
   8aa20:	10c00015 	stw	r3,0(r2)
      return -1;
   8aa24:	00bfffc4 	movi	r2,-1
   8aa28:	e0bffd15 	stw	r2,-12(fp)
   8aa2c:	00000806 	br	8aa50 <close+0xe8>
    }
    return 0;
   8aa30:	e03ffd15 	stw	zero,-12(fp)
   8aa34:	00000606 	br	8aa50 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8aa38:	008aa680 	call	8aa68 <alt_get_errno>
   8aa3c:	1007883a 	mov	r3,r2
   8aa40:	00801444 	movi	r2,81
   8aa44:	18800015 	stw	r2,0(r3)
    return -1;
   8aa48:	00bfffc4 	movi	r2,-1
   8aa4c:	e0bffd15 	stw	r2,-12(fp)
   8aa50:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8aa54:	e037883a 	mov	sp,fp
   8aa58:	dfc00117 	ldw	ra,4(sp)
   8aa5c:	df000017 	ldw	fp,0(sp)
   8aa60:	dec00204 	addi	sp,sp,8
   8aa64:	f800283a 	ret

0008aa68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8aa68:	defffd04 	addi	sp,sp,-12
   8aa6c:	dfc00215 	stw	ra,8(sp)
   8aa70:	df000115 	stw	fp,4(sp)
   8aa74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8aa78:	00800274 	movhi	r2,9
   8aa7c:	10800004 	addi	r2,r2,0
   8aa80:	10800017 	ldw	r2,0(r2)
   8aa84:	1005003a 	cmpeq	r2,r2,zero
   8aa88:	1000061e 	bne	r2,zero,8aaa4 <alt_get_errno+0x3c>
   8aa8c:	00800274 	movhi	r2,9
   8aa90:	10800004 	addi	r2,r2,0
   8aa94:	10800017 	ldw	r2,0(r2)
   8aa98:	103ee83a 	callr	r2
   8aa9c:	e0bfff15 	stw	r2,-4(fp)
   8aaa0:	00000306 	br	8aab0 <alt_get_errno+0x48>
   8aaa4:	00800274 	movhi	r2,9
   8aaa8:	1086d604 	addi	r2,r2,7000
   8aaac:	e0bfff15 	stw	r2,-4(fp)
   8aab0:	e0bfff17 	ldw	r2,-4(fp)
}
   8aab4:	e037883a 	mov	sp,fp
   8aab8:	dfc00117 	ldw	ra,4(sp)
   8aabc:	df000017 	ldw	fp,0(sp)
   8aac0:	dec00204 	addi	sp,sp,8
   8aac4:	f800283a 	ret

0008aac8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8aac8:	defffc04 	addi	sp,sp,-16
   8aacc:	df000315 	stw	fp,12(sp)
   8aad0:	df000304 	addi	fp,sp,12
   8aad4:	e13ffd15 	stw	r4,-12(fp)
   8aad8:	e17ffe15 	stw	r5,-8(fp)
   8aadc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8aae0:	e0bfff17 	ldw	r2,-4(fp)
}
   8aae4:	e037883a 	mov	sp,fp
   8aae8:	df000017 	ldw	fp,0(sp)
   8aaec:	dec00104 	addi	sp,sp,4
   8aaf0:	f800283a 	ret

0008aaf4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8aaf4:	defff904 	addi	sp,sp,-28
   8aaf8:	dfc00615 	stw	ra,24(sp)
   8aafc:	df000515 	stw	fp,20(sp)
   8ab00:	df000504 	addi	fp,sp,20
   8ab04:	e13ffc15 	stw	r4,-16(fp)
   8ab08:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ab0c:	e0bffc17 	ldw	r2,-16(fp)
   8ab10:	1004803a 	cmplt	r2,r2,zero
   8ab14:	1000091e 	bne	r2,zero,8ab3c <fstat+0x48>
   8ab18:	e13ffc17 	ldw	r4,-16(fp)
   8ab1c:	01400304 	movi	r5,12
   8ab20:	0080e140 	call	80e14 <__mulsi3>
   8ab24:	1007883a 	mov	r3,r2
   8ab28:	00800274 	movhi	r2,9
   8ab2c:	10bb4b04 	addi	r2,r2,-4820
   8ab30:	1887883a 	add	r3,r3,r2
   8ab34:	e0ffff15 	stw	r3,-4(fp)
   8ab38:	00000106 	br	8ab40 <fstat+0x4c>
   8ab3c:	e03fff15 	stw	zero,-4(fp)
   8ab40:	e0bfff17 	ldw	r2,-4(fp)
   8ab44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ab48:	e0bffb17 	ldw	r2,-20(fp)
   8ab4c:	1005003a 	cmpeq	r2,r2,zero
   8ab50:	1000121e 	bne	r2,zero,8ab9c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8ab54:	e0bffb17 	ldw	r2,-20(fp)
   8ab58:	10800017 	ldw	r2,0(r2)
   8ab5c:	10800817 	ldw	r2,32(r2)
   8ab60:	1005003a 	cmpeq	r2,r2,zero
   8ab64:	1000081e 	bne	r2,zero,8ab88 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8ab68:	e0bffb17 	ldw	r2,-20(fp)
   8ab6c:	10800017 	ldw	r2,0(r2)
   8ab70:	10800817 	ldw	r2,32(r2)
   8ab74:	e13ffb17 	ldw	r4,-20(fp)
   8ab78:	e17ffd17 	ldw	r5,-12(fp)
   8ab7c:	103ee83a 	callr	r2
   8ab80:	e0bffe15 	stw	r2,-8(fp)
   8ab84:	00000b06 	br	8abb4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8ab88:	e0fffd17 	ldw	r3,-12(fp)
   8ab8c:	00880004 	movi	r2,8192
   8ab90:	18800115 	stw	r2,4(r3)
      return 0;
   8ab94:	e03ffe15 	stw	zero,-8(fp)
   8ab98:	00000606 	br	8abb4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8ab9c:	008abcc0 	call	8abcc <alt_get_errno>
   8aba0:	1007883a 	mov	r3,r2
   8aba4:	00801444 	movi	r2,81
   8aba8:	18800015 	stw	r2,0(r3)
    return -1;
   8abac:	00bfffc4 	movi	r2,-1
   8abb0:	e0bffe15 	stw	r2,-8(fp)
   8abb4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8abb8:	e037883a 	mov	sp,fp
   8abbc:	dfc00117 	ldw	ra,4(sp)
   8abc0:	df000017 	ldw	fp,0(sp)
   8abc4:	dec00204 	addi	sp,sp,8
   8abc8:	f800283a 	ret

0008abcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8abcc:	defffd04 	addi	sp,sp,-12
   8abd0:	dfc00215 	stw	ra,8(sp)
   8abd4:	df000115 	stw	fp,4(sp)
   8abd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8abdc:	00800274 	movhi	r2,9
   8abe0:	10800004 	addi	r2,r2,0
   8abe4:	10800017 	ldw	r2,0(r2)
   8abe8:	1005003a 	cmpeq	r2,r2,zero
   8abec:	1000061e 	bne	r2,zero,8ac08 <alt_get_errno+0x3c>
   8abf0:	00800274 	movhi	r2,9
   8abf4:	10800004 	addi	r2,r2,0
   8abf8:	10800017 	ldw	r2,0(r2)
   8abfc:	103ee83a 	callr	r2
   8ac00:	e0bfff15 	stw	r2,-4(fp)
   8ac04:	00000306 	br	8ac14 <alt_get_errno+0x48>
   8ac08:	00800274 	movhi	r2,9
   8ac0c:	1086d604 	addi	r2,r2,7000
   8ac10:	e0bfff15 	stw	r2,-4(fp)
   8ac14:	e0bfff17 	ldw	r2,-4(fp)
}
   8ac18:	e037883a 	mov	sp,fp
   8ac1c:	dfc00117 	ldw	ra,4(sp)
   8ac20:	df000017 	ldw	fp,0(sp)
   8ac24:	dec00204 	addi	sp,sp,8
   8ac28:	f800283a 	ret

0008ac2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ac2c:	deffeb04 	addi	sp,sp,-84
   8ac30:	dfc01415 	stw	ra,80(sp)
   8ac34:	df001315 	stw	fp,76(sp)
   8ac38:	df001304 	addi	fp,sp,76
   8ac3c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ac40:	e0bffd17 	ldw	r2,-12(fp)
   8ac44:	1004803a 	cmplt	r2,r2,zero
   8ac48:	1000091e 	bne	r2,zero,8ac70 <isatty+0x44>
   8ac4c:	e13ffd17 	ldw	r4,-12(fp)
   8ac50:	01400304 	movi	r5,12
   8ac54:	0080e140 	call	80e14 <__mulsi3>
   8ac58:	1007883a 	mov	r3,r2
   8ac5c:	00800274 	movhi	r2,9
   8ac60:	10bb4b04 	addi	r2,r2,-4820
   8ac64:	1887883a 	add	r3,r3,r2
   8ac68:	e0ffff15 	stw	r3,-4(fp)
   8ac6c:	00000106 	br	8ac74 <isatty+0x48>
   8ac70:	e03fff15 	stw	zero,-4(fp)
   8ac74:	e0bfff17 	ldw	r2,-4(fp)
   8ac78:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8ac7c:	e0bfed17 	ldw	r2,-76(fp)
   8ac80:	1005003a 	cmpeq	r2,r2,zero
   8ac84:	10000f1e 	bne	r2,zero,8acc4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8ac88:	e0bfed17 	ldw	r2,-76(fp)
   8ac8c:	10800017 	ldw	r2,0(r2)
   8ac90:	10800817 	ldw	r2,32(r2)
   8ac94:	1004c03a 	cmpne	r2,r2,zero
   8ac98:	1000031e 	bne	r2,zero,8aca8 <isatty+0x7c>
    {
      return 1;
   8ac9c:	00800044 	movi	r2,1
   8aca0:	e0bffe15 	stw	r2,-8(fp)
   8aca4:	00000c06 	br	8acd8 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8aca8:	e17fee04 	addi	r5,fp,-72
   8acac:	e13ffd17 	ldw	r4,-12(fp)
   8acb0:	008aaf40 	call	8aaf4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8acb4:	e0bfef17 	ldw	r2,-68(fp)
   8acb8:	10880020 	cmpeqi	r2,r2,8192
   8acbc:	e0bffe15 	stw	r2,-8(fp)
   8acc0:	00000506 	br	8acd8 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8acc4:	008acf00 	call	8acf0 <alt_get_errno>
   8acc8:	1007883a 	mov	r3,r2
   8accc:	00801444 	movi	r2,81
   8acd0:	18800015 	stw	r2,0(r3)
    return 0;
   8acd4:	e03ffe15 	stw	zero,-8(fp)
   8acd8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8acdc:	e037883a 	mov	sp,fp
   8ace0:	dfc00117 	ldw	ra,4(sp)
   8ace4:	df000017 	ldw	fp,0(sp)
   8ace8:	dec00204 	addi	sp,sp,8
   8acec:	f800283a 	ret

0008acf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8acf0:	defffd04 	addi	sp,sp,-12
   8acf4:	dfc00215 	stw	ra,8(sp)
   8acf8:	df000115 	stw	fp,4(sp)
   8acfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ad00:	00800274 	movhi	r2,9
   8ad04:	10800004 	addi	r2,r2,0
   8ad08:	10800017 	ldw	r2,0(r2)
   8ad0c:	1005003a 	cmpeq	r2,r2,zero
   8ad10:	1000061e 	bne	r2,zero,8ad2c <alt_get_errno+0x3c>
   8ad14:	00800274 	movhi	r2,9
   8ad18:	10800004 	addi	r2,r2,0
   8ad1c:	10800017 	ldw	r2,0(r2)
   8ad20:	103ee83a 	callr	r2
   8ad24:	e0bfff15 	stw	r2,-4(fp)
   8ad28:	00000306 	br	8ad38 <alt_get_errno+0x48>
   8ad2c:	00800274 	movhi	r2,9
   8ad30:	1086d604 	addi	r2,r2,7000
   8ad34:	e0bfff15 	stw	r2,-4(fp)
   8ad38:	e0bfff17 	ldw	r2,-4(fp)
}
   8ad3c:	e037883a 	mov	sp,fp
   8ad40:	dfc00117 	ldw	ra,4(sp)
   8ad44:	df000017 	ldw	fp,0(sp)
   8ad48:	dec00204 	addi	sp,sp,8
   8ad4c:	f800283a 	ret

0008ad50 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8ad50:	defffe04 	addi	sp,sp,-8
   8ad54:	dfc00115 	stw	ra,4(sp)
   8ad58:	df000015 	stw	fp,0(sp)
   8ad5c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8ad60:	01000274 	movhi	r4,9
   8ad64:	21000504 	addi	r4,r4,20
   8ad68:	01400274 	movhi	r5,9
   8ad6c:	29793c04 	addi	r5,r5,-6928
   8ad70:	01800274 	movhi	r6,9
   8ad74:	31800504 	addi	r6,r6,20
   8ad78:	008add00 	call	8add0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8ad7c:	01000234 	movhi	r4,8
   8ad80:	21000804 	addi	r4,r4,32
   8ad84:	01400234 	movhi	r5,8
   8ad88:	29400804 	addi	r5,r5,32
   8ad8c:	01800234 	movhi	r6,8
   8ad90:	31806d04 	addi	r6,r6,436
   8ad94:	008add00 	call	8add0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8ad98:	01000274 	movhi	r4,9
   8ad9c:	2137af04 	addi	r4,r4,-8516
   8ada0:	01400274 	movhi	r5,9
   8ada4:	2977af04 	addi	r5,r5,-8516
   8ada8:	01800274 	movhi	r6,9
   8adac:	31b93c04 	addi	r6,r6,-6928
   8adb0:	008add00 	call	8add0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8adb4:	008ccc40 	call	8ccc4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8adb8:	008cebc0 	call	8cebc <alt_icache_flush_all>
}
   8adbc:	e037883a 	mov	sp,fp
   8adc0:	dfc00117 	ldw	ra,4(sp)
   8adc4:	df000017 	ldw	fp,0(sp)
   8adc8:	dec00204 	addi	sp,sp,8
   8adcc:	f800283a 	ret

0008add0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8add0:	defffc04 	addi	sp,sp,-16
   8add4:	df000315 	stw	fp,12(sp)
   8add8:	df000304 	addi	fp,sp,12
   8addc:	e13ffd15 	stw	r4,-12(fp)
   8ade0:	e17ffe15 	stw	r5,-8(fp)
   8ade4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8ade8:	e0fffe17 	ldw	r3,-8(fp)
   8adec:	e0bffd17 	ldw	r2,-12(fp)
   8adf0:	18800e26 	beq	r3,r2,8ae2c <alt_load_section+0x5c>
  {
    while( to != end )
   8adf4:	00000a06 	br	8ae20 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8adf8:	e0bffd17 	ldw	r2,-12(fp)
   8adfc:	10c00017 	ldw	r3,0(r2)
   8ae00:	e0bffe17 	ldw	r2,-8(fp)
   8ae04:	10c00015 	stw	r3,0(r2)
   8ae08:	e0bffe17 	ldw	r2,-8(fp)
   8ae0c:	10800104 	addi	r2,r2,4
   8ae10:	e0bffe15 	stw	r2,-8(fp)
   8ae14:	e0bffd17 	ldw	r2,-12(fp)
   8ae18:	10800104 	addi	r2,r2,4
   8ae1c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8ae20:	e0fffe17 	ldw	r3,-8(fp)
   8ae24:	e0bfff17 	ldw	r2,-4(fp)
   8ae28:	18bff31e 	bne	r3,r2,8adf8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8ae2c:	e037883a 	mov	sp,fp
   8ae30:	df000017 	ldw	fp,0(sp)
   8ae34:	dec00104 	addi	sp,sp,4
   8ae38:	f800283a 	ret

0008ae3c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8ae3c:	defff804 	addi	sp,sp,-32
   8ae40:	dfc00715 	stw	ra,28(sp)
   8ae44:	df000615 	stw	fp,24(sp)
   8ae48:	df000604 	addi	fp,sp,24
   8ae4c:	e13ffc15 	stw	r4,-16(fp)
   8ae50:	e17ffd15 	stw	r5,-12(fp)
   8ae54:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8ae58:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ae5c:	e0bffc17 	ldw	r2,-16(fp)
   8ae60:	1004803a 	cmplt	r2,r2,zero
   8ae64:	1000091e 	bne	r2,zero,8ae8c <lseek+0x50>
   8ae68:	e13ffc17 	ldw	r4,-16(fp)
   8ae6c:	01400304 	movi	r5,12
   8ae70:	0080e140 	call	80e14 <__mulsi3>
   8ae74:	1007883a 	mov	r3,r2
   8ae78:	00800274 	movhi	r2,9
   8ae7c:	10bb4b04 	addi	r2,r2,-4820
   8ae80:	1887883a 	add	r3,r3,r2
   8ae84:	e0ffff15 	stw	r3,-4(fp)
   8ae88:	00000106 	br	8ae90 <lseek+0x54>
   8ae8c:	e03fff15 	stw	zero,-4(fp)
   8ae90:	e0bfff17 	ldw	r2,-4(fp)
   8ae94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8ae98:	e0bffb17 	ldw	r2,-20(fp)
   8ae9c:	1005003a 	cmpeq	r2,r2,zero
   8aea0:	1000111e 	bne	r2,zero,8aee8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8aea4:	e0bffb17 	ldw	r2,-20(fp)
   8aea8:	10800017 	ldw	r2,0(r2)
   8aeac:	10800717 	ldw	r2,28(r2)
   8aeb0:	1005003a 	cmpeq	r2,r2,zero
   8aeb4:	1000091e 	bne	r2,zero,8aedc <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8aeb8:	e0bffb17 	ldw	r2,-20(fp)
   8aebc:	10800017 	ldw	r2,0(r2)
   8aec0:	10800717 	ldw	r2,28(r2)
   8aec4:	e13ffb17 	ldw	r4,-20(fp)
   8aec8:	e17ffd17 	ldw	r5,-12(fp)
   8aecc:	e1bffe17 	ldw	r6,-8(fp)
   8aed0:	103ee83a 	callr	r2
   8aed4:	e0bffa15 	stw	r2,-24(fp)
   8aed8:	00000506 	br	8aef0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8aedc:	00bfde84 	movi	r2,-134
   8aee0:	e0bffa15 	stw	r2,-24(fp)
   8aee4:	00000206 	br	8aef0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8aee8:	00bfebc4 	movi	r2,-81
   8aeec:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8aef0:	e0bffa17 	ldw	r2,-24(fp)
   8aef4:	1004403a 	cmpge	r2,r2,zero
   8aef8:	1000071e 	bne	r2,zero,8af18 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8aefc:	008af300 	call	8af30 <alt_get_errno>
   8af00:	1007883a 	mov	r3,r2
   8af04:	e0bffa17 	ldw	r2,-24(fp)
   8af08:	0085c83a 	sub	r2,zero,r2
   8af0c:	18800015 	stw	r2,0(r3)
    rc = -1;
   8af10:	00bfffc4 	movi	r2,-1
   8af14:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8af18:	e0bffa17 	ldw	r2,-24(fp)
}
   8af1c:	e037883a 	mov	sp,fp
   8af20:	dfc00117 	ldw	ra,4(sp)
   8af24:	df000017 	ldw	fp,0(sp)
   8af28:	dec00204 	addi	sp,sp,8
   8af2c:	f800283a 	ret

0008af30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8af30:	defffd04 	addi	sp,sp,-12
   8af34:	dfc00215 	stw	ra,8(sp)
   8af38:	df000115 	stw	fp,4(sp)
   8af3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8af40:	00800274 	movhi	r2,9
   8af44:	10800004 	addi	r2,r2,0
   8af48:	10800017 	ldw	r2,0(r2)
   8af4c:	1005003a 	cmpeq	r2,r2,zero
   8af50:	1000061e 	bne	r2,zero,8af6c <alt_get_errno+0x3c>
   8af54:	00800274 	movhi	r2,9
   8af58:	10800004 	addi	r2,r2,0
   8af5c:	10800017 	ldw	r2,0(r2)
   8af60:	103ee83a 	callr	r2
   8af64:	e0bfff15 	stw	r2,-4(fp)
   8af68:	00000306 	br	8af78 <alt_get_errno+0x48>
   8af6c:	00800274 	movhi	r2,9
   8af70:	1086d604 	addi	r2,r2,7000
   8af74:	e0bfff15 	stw	r2,-4(fp)
   8af78:	e0bfff17 	ldw	r2,-4(fp)
}
   8af7c:	e037883a 	mov	sp,fp
   8af80:	dfc00117 	ldw	ra,4(sp)
   8af84:	df000017 	ldw	fp,0(sp)
   8af88:	dec00204 	addi	sp,sp,8
   8af8c:	f800283a 	ret

0008af90 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8af90:	defffd04 	addi	sp,sp,-12
   8af94:	dfc00215 	stw	ra,8(sp)
   8af98:	df000115 	stw	fp,4(sp)
   8af9c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8afa0:	0009883a 	mov	r4,zero
   8afa4:	008b4e80 	call	8b4e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8afa8:	008b51c0 	call	8b51c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8afac:	01000274 	movhi	r4,9
   8afb0:	21392f04 	addi	r4,r4,-6980
   8afb4:	01400274 	movhi	r5,9
   8afb8:	29792f04 	addi	r5,r5,-6980
   8afbc:	01800274 	movhi	r6,9
   8afc0:	31b92f04 	addi	r6,r6,-6980
   8afc4:	008d27c0 	call	8d27c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8afc8:	008cdf40 	call	8cdf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8afcc:	01000274 	movhi	r4,9
   8afd0:	21339604 	addi	r4,r4,-12712
   8afd4:	008da200 	call	8da20 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8afd8:	d126e317 	ldw	r4,-25716(gp)
   8afdc:	d166e417 	ldw	r5,-25712(gp)
   8afe0:	d1a6e517 	ldw	r6,-25708(gp)
   8afe4:	00804f40 	call	804f4 <main>
   8afe8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8afec:	01000044 	movi	r4,1
   8aff0:	008a9680 	call	8a968 <close>
  exit (result);
   8aff4:	e13fff17 	ldw	r4,-4(fp)
   8aff8:	008da340 	call	8da34 <exit>

0008affc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8affc:	defffe04 	addi	sp,sp,-8
   8b000:	df000115 	stw	fp,4(sp)
   8b004:	df000104 	addi	fp,sp,4
   8b008:	e13fff15 	stw	r4,-4(fp)
}
   8b00c:	e037883a 	mov	sp,fp
   8b010:	df000017 	ldw	fp,0(sp)
   8b014:	dec00104 	addi	sp,sp,4
   8b018:	f800283a 	ret

0008b01c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8b01c:	defffe04 	addi	sp,sp,-8
   8b020:	df000115 	stw	fp,4(sp)
   8b024:	df000104 	addi	fp,sp,4
   8b028:	e13fff15 	stw	r4,-4(fp)
}
   8b02c:	e037883a 	mov	sp,fp
   8b030:	df000017 	ldw	fp,0(sp)
   8b034:	dec00104 	addi	sp,sp,4
   8b038:	f800283a 	ret

0008b03c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   8b03c:	defffd04 	addi	sp,sp,-12
   8b040:	dfc00215 	stw	ra,8(sp)
   8b044:	df000115 	stw	fp,4(sp)
   8b048:	df000104 	addi	fp,sp,4
   8b04c:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   8b050:	00800274 	movhi	r2,9
   8b054:	10bff504 	addi	r2,r2,-44
   8b058:	10800017 	ldw	r2,0(r2)
   8b05c:	11400217 	ldw	r5,8(r2)
   8b060:	e13fff17 	ldw	r4,-4(fp)
   8b064:	008dae00 	call	8dae0 <fputs>
#endif
}
   8b068:	e037883a 	mov	sp,fp
   8b06c:	dfc00117 	ldw	ra,4(sp)
   8b070:	df000017 	ldw	fp,0(sp)
   8b074:	dec00204 	addi	sp,sp,8
   8b078:	f800283a 	ret

0008b07c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b07c:	defff704 	addi	sp,sp,-36
   8b080:	dfc00815 	stw	ra,32(sp)
   8b084:	df000715 	stw	fp,28(sp)
   8b088:	df000704 	addi	fp,sp,28
   8b08c:	e13ffb15 	stw	r4,-20(fp)
   8b090:	e17ffc15 	stw	r5,-16(fp)
   8b094:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b098:	e0bffb17 	ldw	r2,-20(fp)
   8b09c:	1004803a 	cmplt	r2,r2,zero
   8b0a0:	1000091e 	bne	r2,zero,8b0c8 <read+0x4c>
   8b0a4:	e13ffb17 	ldw	r4,-20(fp)
   8b0a8:	01400304 	movi	r5,12
   8b0ac:	0080e140 	call	80e14 <__mulsi3>
   8b0b0:	1007883a 	mov	r3,r2
   8b0b4:	00800274 	movhi	r2,9
   8b0b8:	10bb4b04 	addi	r2,r2,-4820
   8b0bc:	1887883a 	add	r3,r3,r2
   8b0c0:	e0ffff15 	stw	r3,-4(fp)
   8b0c4:	00000106 	br	8b0cc <read+0x50>
   8b0c8:	e03fff15 	stw	zero,-4(fp)
   8b0cc:	e0bfff17 	ldw	r2,-4(fp)
   8b0d0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b0d4:	e0bffa17 	ldw	r2,-24(fp)
   8b0d8:	1005003a 	cmpeq	r2,r2,zero
   8b0dc:	1000241e 	bne	r2,zero,8b170 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b0e0:	e0bffa17 	ldw	r2,-24(fp)
   8b0e4:	10800217 	ldw	r2,8(r2)
   8b0e8:	108000cc 	andi	r2,r2,3
   8b0ec:	10800060 	cmpeqi	r2,r2,1
   8b0f0:	10001a1e 	bne	r2,zero,8b15c <read+0xe0>
   8b0f4:	e0bffa17 	ldw	r2,-24(fp)
   8b0f8:	10800017 	ldw	r2,0(r2)
   8b0fc:	10800517 	ldw	r2,20(r2)
   8b100:	1005003a 	cmpeq	r2,r2,zero
   8b104:	1000151e 	bne	r2,zero,8b15c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b108:	e0bffa17 	ldw	r2,-24(fp)
   8b10c:	10800017 	ldw	r2,0(r2)
   8b110:	10800517 	ldw	r2,20(r2)
   8b114:	e17ffc17 	ldw	r5,-16(fp)
   8b118:	e1bffd17 	ldw	r6,-12(fp)
   8b11c:	e13ffa17 	ldw	r4,-24(fp)
   8b120:	103ee83a 	callr	r2
   8b124:	e0bff915 	stw	r2,-28(fp)
   8b128:	e0bff917 	ldw	r2,-28(fp)
   8b12c:	1004403a 	cmpge	r2,r2,zero
   8b130:	1000071e 	bne	r2,zero,8b150 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8b134:	008b1a00 	call	8b1a0 <alt_get_errno>
   8b138:	e0fff917 	ldw	r3,-28(fp)
   8b13c:	00c7c83a 	sub	r3,zero,r3
   8b140:	10c00015 	stw	r3,0(r2)
          return -1;
   8b144:	00bfffc4 	movi	r2,-1
   8b148:	e0bffe15 	stw	r2,-8(fp)
   8b14c:	00000e06 	br	8b188 <read+0x10c>
        }
        return rval;
   8b150:	e0bff917 	ldw	r2,-28(fp)
   8b154:	e0bffe15 	stw	r2,-8(fp)
   8b158:	00000b06 	br	8b188 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b15c:	008b1a00 	call	8b1a0 <alt_get_errno>
   8b160:	1007883a 	mov	r3,r2
   8b164:	00800344 	movi	r2,13
   8b168:	18800015 	stw	r2,0(r3)
   8b16c:	00000406 	br	8b180 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b170:	008b1a00 	call	8b1a0 <alt_get_errno>
   8b174:	1007883a 	mov	r3,r2
   8b178:	00801444 	movi	r2,81
   8b17c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b180:	00bfffc4 	movi	r2,-1
   8b184:	e0bffe15 	stw	r2,-8(fp)
   8b188:	e0bffe17 	ldw	r2,-8(fp)
}
   8b18c:	e037883a 	mov	sp,fp
   8b190:	dfc00117 	ldw	ra,4(sp)
   8b194:	df000017 	ldw	fp,0(sp)
   8b198:	dec00204 	addi	sp,sp,8
   8b19c:	f800283a 	ret

0008b1a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b1a0:	defffd04 	addi	sp,sp,-12
   8b1a4:	dfc00215 	stw	ra,8(sp)
   8b1a8:	df000115 	stw	fp,4(sp)
   8b1ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b1b0:	00800274 	movhi	r2,9
   8b1b4:	10800004 	addi	r2,r2,0
   8b1b8:	10800017 	ldw	r2,0(r2)
   8b1bc:	1005003a 	cmpeq	r2,r2,zero
   8b1c0:	1000061e 	bne	r2,zero,8b1dc <alt_get_errno+0x3c>
   8b1c4:	00800274 	movhi	r2,9
   8b1c8:	10800004 	addi	r2,r2,0
   8b1cc:	10800017 	ldw	r2,0(r2)
   8b1d0:	103ee83a 	callr	r2
   8b1d4:	e0bfff15 	stw	r2,-4(fp)
   8b1d8:	00000306 	br	8b1e8 <alt_get_errno+0x48>
   8b1dc:	00800274 	movhi	r2,9
   8b1e0:	1086d604 	addi	r2,r2,7000
   8b1e4:	e0bfff15 	stw	r2,-4(fp)
   8b1e8:	e0bfff17 	ldw	r2,-4(fp)
}
   8b1ec:	e037883a 	mov	sp,fp
   8b1f0:	dfc00117 	ldw	ra,4(sp)
   8b1f4:	df000017 	ldw	fp,0(sp)
   8b1f8:	dec00204 	addi	sp,sp,8
   8b1fc:	f800283a 	ret

0008b200 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b200:	defffc04 	addi	sp,sp,-16
   8b204:	dfc00315 	stw	ra,12(sp)
   8b208:	df000215 	stw	fp,8(sp)
   8b20c:	dc000115 	stw	r16,4(sp)
   8b210:	df000104 	addi	fp,sp,4
   8b214:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b218:	e0bfff17 	ldw	r2,-4(fp)
   8b21c:	108000d0 	cmplti	r2,r2,3
   8b220:	10000f1e 	bne	r2,zero,8b260 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b224:	e13fff17 	ldw	r4,-4(fp)
   8b228:	04000274 	movhi	r16,9
   8b22c:	843b4b04 	addi	r16,r16,-4820
   8b230:	01400304 	movi	r5,12
   8b234:	0080e140 	call	80e14 <__mulsi3>
   8b238:	1405883a 	add	r2,r2,r16
   8b23c:	10800204 	addi	r2,r2,8
   8b240:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b244:	e13fff17 	ldw	r4,-4(fp)
   8b248:	04000274 	movhi	r16,9
   8b24c:	843b4b04 	addi	r16,r16,-4820
   8b250:	01400304 	movi	r5,12
   8b254:	0080e140 	call	80e14 <__mulsi3>
   8b258:	1405883a 	add	r2,r2,r16
   8b25c:	10000015 	stw	zero,0(r2)
  }
}
   8b260:	e037883a 	mov	sp,fp
   8b264:	dfc00217 	ldw	ra,8(sp)
   8b268:	df000117 	ldw	fp,4(sp)
   8b26c:	dc000017 	ldw	r16,0(sp)
   8b270:	dec00304 	addi	sp,sp,12
   8b274:	f800283a 	ret

0008b278 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b278:	defff804 	addi	sp,sp,-32
   8b27c:	df000715 	stw	fp,28(sp)
   8b280:	df000704 	addi	fp,sp,28
   8b284:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b288:	0005303a 	rdctl	r2,status
   8b28c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b290:	e0fffb17 	ldw	r3,-20(fp)
   8b294:	00bfff84 	movi	r2,-2
   8b298:	1884703a 	and	r2,r3,r2
   8b29c:	1001703a 	wrctl	status,r2
  
  return context;
   8b2a0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8b2a4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8b2a8:	d0a00d17 	ldw	r2,-32716(gp)
   8b2ac:	10c000c4 	addi	r3,r2,3
   8b2b0:	00bfff04 	movi	r2,-4
   8b2b4:	1884703a 	and	r2,r3,r2
   8b2b8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8b2bc:	d0e00d17 	ldw	r3,-32716(gp)
   8b2c0:	e0bffe17 	ldw	r2,-8(fp)
   8b2c4:	1887883a 	add	r3,r3,r2
   8b2c8:	008003b4 	movhi	r2,14
   8b2cc:	1086a004 	addi	r2,r2,6784
   8b2d0:	10c0072e 	bgeu	r2,r3,8b2f0 <sbrk+0x78>
   8b2d4:	e0bffd17 	ldw	r2,-12(fp)
   8b2d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b2dc:	e0bffa17 	ldw	r2,-24(fp)
   8b2e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8b2e4:	00bfffc4 	movi	r2,-1
   8b2e8:	e0bfff15 	stw	r2,-4(fp)
   8b2ec:	00000c06 	br	8b320 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8b2f0:	d0a00d17 	ldw	r2,-32716(gp)
   8b2f4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8b2f8:	d0e00d17 	ldw	r3,-32716(gp)
   8b2fc:	e0bffe17 	ldw	r2,-8(fp)
   8b300:	1885883a 	add	r2,r3,r2
   8b304:	d0a00d15 	stw	r2,-32716(gp)
   8b308:	e0bffd17 	ldw	r2,-12(fp)
   8b30c:	e0bff915 	stw	r2,-28(fp)
   8b310:	e0bff917 	ldw	r2,-28(fp)
   8b314:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8b318:	e0bffc17 	ldw	r2,-16(fp)
   8b31c:	e0bfff15 	stw	r2,-4(fp)
   8b320:	e0bfff17 	ldw	r2,-4(fp)
} 
   8b324:	e037883a 	mov	sp,fp
   8b328:	df000017 	ldw	fp,0(sp)
   8b32c:	dec00104 	addi	sp,sp,4
   8b330:	f800283a 	ret

0008b334 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8b334:	defffd04 	addi	sp,sp,-12
   8b338:	dfc00215 	stw	ra,8(sp)
   8b33c:	df000115 	stw	fp,4(sp)
   8b340:	df000104 	addi	fp,sp,4
   8b344:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8b348:	e13fff17 	ldw	r4,-4(fp)
   8b34c:	008cb680 	call	8cb68 <alt_busy_sleep>
}
   8b350:	e037883a 	mov	sp,fp
   8b354:	dfc00117 	ldw	ra,4(sp)
   8b358:	df000017 	ldw	fp,0(sp)
   8b35c:	dec00204 	addi	sp,sp,8
   8b360:	f800283a 	ret

0008b364 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8b364:	defff704 	addi	sp,sp,-36
   8b368:	dfc00815 	stw	ra,32(sp)
   8b36c:	df000715 	stw	fp,28(sp)
   8b370:	df000704 	addi	fp,sp,28
   8b374:	e13ffb15 	stw	r4,-20(fp)
   8b378:	e17ffc15 	stw	r5,-16(fp)
   8b37c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b380:	e0bffb17 	ldw	r2,-20(fp)
   8b384:	1004803a 	cmplt	r2,r2,zero
   8b388:	1000091e 	bne	r2,zero,8b3b0 <write+0x4c>
   8b38c:	e13ffb17 	ldw	r4,-20(fp)
   8b390:	01400304 	movi	r5,12
   8b394:	0080e140 	call	80e14 <__mulsi3>
   8b398:	1007883a 	mov	r3,r2
   8b39c:	00800274 	movhi	r2,9
   8b3a0:	10bb4b04 	addi	r2,r2,-4820
   8b3a4:	1887883a 	add	r3,r3,r2
   8b3a8:	e0ffff15 	stw	r3,-4(fp)
   8b3ac:	00000106 	br	8b3b4 <write+0x50>
   8b3b0:	e03fff15 	stw	zero,-4(fp)
   8b3b4:	e0bfff17 	ldw	r2,-4(fp)
   8b3b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b3bc:	e0bffa17 	ldw	r2,-24(fp)
   8b3c0:	1005003a 	cmpeq	r2,r2,zero
   8b3c4:	1000241e 	bne	r2,zero,8b458 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8b3c8:	e0bffa17 	ldw	r2,-24(fp)
   8b3cc:	10800217 	ldw	r2,8(r2)
   8b3d0:	108000cc 	andi	r2,r2,3
   8b3d4:	1005003a 	cmpeq	r2,r2,zero
   8b3d8:	10001a1e 	bne	r2,zero,8b444 <write+0xe0>
   8b3dc:	e0bffa17 	ldw	r2,-24(fp)
   8b3e0:	10800017 	ldw	r2,0(r2)
   8b3e4:	10800617 	ldw	r2,24(r2)
   8b3e8:	1005003a 	cmpeq	r2,r2,zero
   8b3ec:	1000151e 	bne	r2,zero,8b444 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8b3f0:	e0bffa17 	ldw	r2,-24(fp)
   8b3f4:	10800017 	ldw	r2,0(r2)
   8b3f8:	10800617 	ldw	r2,24(r2)
   8b3fc:	e17ffc17 	ldw	r5,-16(fp)
   8b400:	e1bffd17 	ldw	r6,-12(fp)
   8b404:	e13ffa17 	ldw	r4,-24(fp)
   8b408:	103ee83a 	callr	r2
   8b40c:	e0bff915 	stw	r2,-28(fp)
   8b410:	e0bff917 	ldw	r2,-28(fp)
   8b414:	1004403a 	cmpge	r2,r2,zero
   8b418:	1000071e 	bne	r2,zero,8b438 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8b41c:	008b4880 	call	8b488 <alt_get_errno>
   8b420:	e0fff917 	ldw	r3,-28(fp)
   8b424:	00c7c83a 	sub	r3,zero,r3
   8b428:	10c00015 	stw	r3,0(r2)
        return -1;
   8b42c:	00bfffc4 	movi	r2,-1
   8b430:	e0bffe15 	stw	r2,-8(fp)
   8b434:	00000e06 	br	8b470 <write+0x10c>
      }
      return rval;
   8b438:	e0bff917 	ldw	r2,-28(fp)
   8b43c:	e0bffe15 	stw	r2,-8(fp)
   8b440:	00000b06 	br	8b470 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8b444:	008b4880 	call	8b488 <alt_get_errno>
   8b448:	1007883a 	mov	r3,r2
   8b44c:	00800344 	movi	r2,13
   8b450:	18800015 	stw	r2,0(r3)
   8b454:	00000406 	br	8b468 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8b458:	008b4880 	call	8b488 <alt_get_errno>
   8b45c:	1007883a 	mov	r3,r2
   8b460:	00801444 	movi	r2,81
   8b464:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b468:	00bfffc4 	movi	r2,-1
   8b46c:	e0bffe15 	stw	r2,-8(fp)
   8b470:	e0bffe17 	ldw	r2,-8(fp)
}
   8b474:	e037883a 	mov	sp,fp
   8b478:	dfc00117 	ldw	ra,4(sp)
   8b47c:	df000017 	ldw	fp,0(sp)
   8b480:	dec00204 	addi	sp,sp,8
   8b484:	f800283a 	ret

0008b488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b488:	defffd04 	addi	sp,sp,-12
   8b48c:	dfc00215 	stw	ra,8(sp)
   8b490:	df000115 	stw	fp,4(sp)
   8b494:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b498:	00800274 	movhi	r2,9
   8b49c:	10800004 	addi	r2,r2,0
   8b4a0:	10800017 	ldw	r2,0(r2)
   8b4a4:	1005003a 	cmpeq	r2,r2,zero
   8b4a8:	1000061e 	bne	r2,zero,8b4c4 <alt_get_errno+0x3c>
   8b4ac:	00800274 	movhi	r2,9
   8b4b0:	10800004 	addi	r2,r2,0
   8b4b4:	10800017 	ldw	r2,0(r2)
   8b4b8:	103ee83a 	callr	r2
   8b4bc:	e0bfff15 	stw	r2,-4(fp)
   8b4c0:	00000306 	br	8b4d0 <alt_get_errno+0x48>
   8b4c4:	00800274 	movhi	r2,9
   8b4c8:	1086d604 	addi	r2,r2,7000
   8b4cc:	e0bfff15 	stw	r2,-4(fp)
   8b4d0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b4d4:	e037883a 	mov	sp,fp
   8b4d8:	dfc00117 	ldw	ra,4(sp)
   8b4dc:	df000017 	ldw	fp,0(sp)
   8b4e0:	dec00204 	addi	sp,sp,8
   8b4e4:	f800283a 	ret

0008b4e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8b4e8:	defffd04 	addi	sp,sp,-12
   8b4ec:	dfc00215 	stw	ra,8(sp)
   8b4f0:	df000115 	stw	fp,4(sp)
   8b4f4:	df000104 	addi	fp,sp,4
   8b4f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8b4fc:	008d77c0 	call	8d77c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8b500:	00800044 	movi	r2,1
   8b504:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8b508:	e037883a 	mov	sp,fp
   8b50c:	dfc00117 	ldw	ra,4(sp)
   8b510:	df000017 	ldw	fp,0(sp)
   8b514:	dec00204 	addi	sp,sp,8
   8b518:	f800283a 	ret

0008b51c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8b51c:	defffe04 	addi	sp,sp,-8
   8b520:	dfc00115 	stw	ra,4(sp)
   8b524:	df000015 	stw	fp,0(sp)
   8b528:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8b52c:	01000274 	movhi	r4,9
   8b530:	213bb504 	addi	r4,r4,-4396
   8b534:	000b883a 	mov	r5,zero
   8b538:	000d883a 	mov	r6,zero
   8b53c:	008b7000 	call	8b700 <altera_avalon_jtag_uart_init>
   8b540:	01000274 	movhi	r4,9
   8b544:	213bab04 	addi	r4,r4,-4436
   8b548:	008b5800 	call	8b580 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   8b54c:	01000274 	movhi	r4,9
   8b550:	213fcd04 	addi	r4,r4,-204
   8b554:	000b883a 	mov	r5,zero
   8b558:	01800044 	movi	r6,1
   8b55c:	008c15c0 	call	8c15c <altera_avalon_uart_init>
   8b560:	01000274 	movhi	r4,9
   8b564:	213fc304 	addi	r4,r4,-244
   8b568:	008b5800 	call	8b580 <alt_dev_reg>
}
   8b56c:	e037883a 	mov	sp,fp
   8b570:	dfc00117 	ldw	ra,4(sp)
   8b574:	df000017 	ldw	fp,0(sp)
   8b578:	dec00204 	addi	sp,sp,8
   8b57c:	f800283a 	ret

0008b580 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8b580:	defffd04 	addi	sp,sp,-12
   8b584:	dfc00215 	stw	ra,8(sp)
   8b588:	df000115 	stw	fp,4(sp)
   8b58c:	df000104 	addi	fp,sp,4
   8b590:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8b594:	e13fff17 	ldw	r4,-4(fp)
   8b598:	01400274 	movhi	r5,9
   8b59c:	297ffd04 	addi	r5,r5,-12
   8b5a0:	008cce00 	call	8cce0 <alt_dev_llist_insert>
}
   8b5a4:	e037883a 	mov	sp,fp
   8b5a8:	dfc00117 	ldw	ra,4(sp)
   8b5ac:	df000017 	ldw	fp,0(sp)
   8b5b0:	dec00204 	addi	sp,sp,8
   8b5b4:	f800283a 	ret

0008b5b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8b5b8:	defffa04 	addi	sp,sp,-24
   8b5bc:	dfc00515 	stw	ra,20(sp)
   8b5c0:	df000415 	stw	fp,16(sp)
   8b5c4:	df000404 	addi	fp,sp,16
   8b5c8:	e13ffd15 	stw	r4,-12(fp)
   8b5cc:	e17ffe15 	stw	r5,-8(fp)
   8b5d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b5d4:	e0bffd17 	ldw	r2,-12(fp)
   8b5d8:	10800017 	ldw	r2,0(r2)
   8b5dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8b5e0:	e0bffc17 	ldw	r2,-16(fp)
   8b5e4:	11000a04 	addi	r4,r2,40
   8b5e8:	e0bffd17 	ldw	r2,-12(fp)
   8b5ec:	11c00217 	ldw	r7,8(r2)
   8b5f0:	e17ffe17 	ldw	r5,-8(fp)
   8b5f4:	e1bfff17 	ldw	r6,-4(fp)
   8b5f8:	008bc000 	call	8bc00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8b5fc:	e037883a 	mov	sp,fp
   8b600:	dfc00117 	ldw	ra,4(sp)
   8b604:	df000017 	ldw	fp,0(sp)
   8b608:	dec00204 	addi	sp,sp,8
   8b60c:	f800283a 	ret

0008b610 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8b610:	defffa04 	addi	sp,sp,-24
   8b614:	dfc00515 	stw	ra,20(sp)
   8b618:	df000415 	stw	fp,16(sp)
   8b61c:	df000404 	addi	fp,sp,16
   8b620:	e13ffd15 	stw	r4,-12(fp)
   8b624:	e17ffe15 	stw	r5,-8(fp)
   8b628:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b62c:	e0bffd17 	ldw	r2,-12(fp)
   8b630:	10800017 	ldw	r2,0(r2)
   8b634:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8b638:	e0bffc17 	ldw	r2,-16(fp)
   8b63c:	11000a04 	addi	r4,r2,40
   8b640:	e0bffd17 	ldw	r2,-12(fp)
   8b644:	11c00217 	ldw	r7,8(r2)
   8b648:	e17ffe17 	ldw	r5,-8(fp)
   8b64c:	e1bfff17 	ldw	r6,-4(fp)
   8b650:	008be240 	call	8be24 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8b654:	e037883a 	mov	sp,fp
   8b658:	dfc00117 	ldw	ra,4(sp)
   8b65c:	df000017 	ldw	fp,0(sp)
   8b660:	dec00204 	addi	sp,sp,8
   8b664:	f800283a 	ret

0008b668 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8b668:	defffc04 	addi	sp,sp,-16
   8b66c:	dfc00315 	stw	ra,12(sp)
   8b670:	df000215 	stw	fp,8(sp)
   8b674:	df000204 	addi	fp,sp,8
   8b678:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b67c:	e0bfff17 	ldw	r2,-4(fp)
   8b680:	10800017 	ldw	r2,0(r2)
   8b684:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8b688:	e0bffe17 	ldw	r2,-8(fp)
   8b68c:	11000a04 	addi	r4,r2,40
   8b690:	e0bfff17 	ldw	r2,-4(fp)
   8b694:	11400217 	ldw	r5,8(r2)
   8b698:	008ba980 	call	8ba98 <altera_avalon_jtag_uart_close>
}
   8b69c:	e037883a 	mov	sp,fp
   8b6a0:	dfc00117 	ldw	ra,4(sp)
   8b6a4:	df000017 	ldw	fp,0(sp)
   8b6a8:	dec00204 	addi	sp,sp,8
   8b6ac:	f800283a 	ret

0008b6b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8b6b0:	defffa04 	addi	sp,sp,-24
   8b6b4:	dfc00515 	stw	ra,20(sp)
   8b6b8:	df000415 	stw	fp,16(sp)
   8b6bc:	df000404 	addi	fp,sp,16
   8b6c0:	e13ffd15 	stw	r4,-12(fp)
   8b6c4:	e17ffe15 	stw	r5,-8(fp)
   8b6c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8b6cc:	e0bffd17 	ldw	r2,-12(fp)
   8b6d0:	10800017 	ldw	r2,0(r2)
   8b6d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8b6d8:	e0bffc17 	ldw	r2,-16(fp)
   8b6dc:	11000a04 	addi	r4,r2,40
   8b6e0:	e17ffe17 	ldw	r5,-8(fp)
   8b6e4:	e1bfff17 	ldw	r6,-4(fp)
   8b6e8:	008bb0c0 	call	8bb0c <altera_avalon_jtag_uart_ioctl>
}
   8b6ec:	e037883a 	mov	sp,fp
   8b6f0:	dfc00117 	ldw	ra,4(sp)
   8b6f4:	df000017 	ldw	fp,0(sp)
   8b6f8:	dec00204 	addi	sp,sp,8
   8b6fc:	f800283a 	ret

0008b700 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8b700:	defffa04 	addi	sp,sp,-24
   8b704:	dfc00515 	stw	ra,20(sp)
   8b708:	df000415 	stw	fp,16(sp)
   8b70c:	df000404 	addi	fp,sp,16
   8b710:	e13ffd15 	stw	r4,-12(fp)
   8b714:	e17ffe15 	stw	r5,-8(fp)
   8b718:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b71c:	e0fffd17 	ldw	r3,-12(fp)
   8b720:	00800044 	movi	r2,1
   8b724:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8b728:	e0bffd17 	ldw	r2,-12(fp)
   8b72c:	10800017 	ldw	r2,0(r2)
   8b730:	11000104 	addi	r4,r2,4
   8b734:	e0bffd17 	ldw	r2,-12(fp)
   8b738:	10800817 	ldw	r2,32(r2)
   8b73c:	1007883a 	mov	r3,r2
   8b740:	2005883a 	mov	r2,r4
   8b744:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8b748:	e13ffe17 	ldw	r4,-8(fp)
   8b74c:	e17fff17 	ldw	r5,-4(fp)
   8b750:	d8000015 	stw	zero,0(sp)
   8b754:	01800274 	movhi	r6,9
   8b758:	31adf004 	addi	r6,r6,-18496
   8b75c:	e1fffd17 	ldw	r7,-12(fp)
   8b760:	008ced80 	call	8ced8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8b764:	e0bffd17 	ldw	r2,-12(fp)
   8b768:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8b76c:	e0bffd17 	ldw	r2,-12(fp)
   8b770:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8b774:	00800274 	movhi	r2,9
   8b778:	1086db04 	addi	r2,r2,7020
   8b77c:	10800017 	ldw	r2,0(r2)
   8b780:	100b883a 	mov	r5,r2
   8b784:	01800274 	movhi	r6,9
   8b788:	31ae7a04 	addi	r6,r6,-17944
   8b78c:	e1fffd17 	ldw	r7,-12(fp)
   8b790:	008ca140 	call	8ca14 <alt_alarm_start>
   8b794:	1004403a 	cmpge	r2,r2,zero
   8b798:	1000041e 	bne	r2,zero,8b7ac <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8b79c:	e0fffd17 	ldw	r3,-12(fp)
   8b7a0:	00a00034 	movhi	r2,32768
   8b7a4:	10bfffc4 	addi	r2,r2,-1
   8b7a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8b7ac:	e037883a 	mov	sp,fp
   8b7b0:	dfc00117 	ldw	ra,4(sp)
   8b7b4:	df000017 	ldw	fp,0(sp)
   8b7b8:	dec00204 	addi	sp,sp,8
   8b7bc:	f800283a 	ret

0008b7c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8b7c0:	defff804 	addi	sp,sp,-32
   8b7c4:	df000715 	stw	fp,28(sp)
   8b7c8:	df000704 	addi	fp,sp,28
   8b7cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8b7d0:	e0bfff17 	ldw	r2,-4(fp)
   8b7d4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8b7d8:	e0bffe17 	ldw	r2,-8(fp)
   8b7dc:	10800017 	ldw	r2,0(r2)
   8b7e0:	e0bffd15 	stw	r2,-12(fp)
   8b7e4:	00000006 	br	8b7e8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b7e8:	e0bffd17 	ldw	r2,-12(fp)
   8b7ec:	10800104 	addi	r2,r2,4
   8b7f0:	10800037 	ldwio	r2,0(r2)
   8b7f4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8b7f8:	e0bffc17 	ldw	r2,-16(fp)
   8b7fc:	1080c00c 	andi	r2,r2,768
   8b800:	1005003a 	cmpeq	r2,r2,zero
   8b804:	1000741e 	bne	r2,zero,8b9d8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8b808:	e0bffc17 	ldw	r2,-16(fp)
   8b80c:	1080400c 	andi	r2,r2,256
   8b810:	1005003a 	cmpeq	r2,r2,zero
   8b814:	1000351e 	bne	r2,zero,8b8ec <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8b818:	00800074 	movhi	r2,1
   8b81c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b820:	e0bffe17 	ldw	r2,-8(fp)
   8b824:	10800a17 	ldw	r2,40(r2)
   8b828:	10800044 	addi	r2,r2,1
   8b82c:	1081ffcc 	andi	r2,r2,2047
   8b830:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8b834:	e0bffe17 	ldw	r2,-8(fp)
   8b838:	10c00b17 	ldw	r3,44(r2)
   8b83c:	e0bffa17 	ldw	r2,-24(fp)
   8b840:	18801626 	beq	r3,r2,8b89c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8b844:	e0bffd17 	ldw	r2,-12(fp)
   8b848:	10800037 	ldwio	r2,0(r2)
   8b84c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8b850:	e0bffb17 	ldw	r2,-20(fp)
   8b854:	10a0000c 	andi	r2,r2,32768
   8b858:	1005003a 	cmpeq	r2,r2,zero
   8b85c:	10000f1e 	bne	r2,zero,8b89c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8b860:	e0bffe17 	ldw	r2,-8(fp)
   8b864:	10c00a17 	ldw	r3,40(r2)
   8b868:	e0bffb17 	ldw	r2,-20(fp)
   8b86c:	1009883a 	mov	r4,r2
   8b870:	e0bffe17 	ldw	r2,-8(fp)
   8b874:	1885883a 	add	r2,r3,r2
   8b878:	10800e04 	addi	r2,r2,56
   8b87c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b880:	e0bffe17 	ldw	r2,-8(fp)
   8b884:	10800a17 	ldw	r2,40(r2)
   8b888:	10800044 	addi	r2,r2,1
   8b88c:	10c1ffcc 	andi	r3,r2,2047
   8b890:	e0bffe17 	ldw	r2,-8(fp)
   8b894:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8b898:	003fe106 	br	8b820 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8b89c:	e0bffb17 	ldw	r2,-20(fp)
   8b8a0:	10bfffec 	andhi	r2,r2,65535
   8b8a4:	1005003a 	cmpeq	r2,r2,zero
   8b8a8:	1000101e 	bne	r2,zero,8b8ec <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b8ac:	e0bffe17 	ldw	r2,-8(fp)
   8b8b0:	10c00817 	ldw	r3,32(r2)
   8b8b4:	00bfff84 	movi	r2,-2
   8b8b8:	1886703a 	and	r3,r3,r2
   8b8bc:	e0bffe17 	ldw	r2,-8(fp)
   8b8c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8b8c4:	e0bffd17 	ldw	r2,-12(fp)
   8b8c8:	11000104 	addi	r4,r2,4
   8b8cc:	e0bffe17 	ldw	r2,-8(fp)
   8b8d0:	10800817 	ldw	r2,32(r2)
   8b8d4:	1007883a 	mov	r3,r2
   8b8d8:	2005883a 	mov	r2,r4
   8b8dc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b8e0:	e0bffd17 	ldw	r2,-12(fp)
   8b8e4:	10800104 	addi	r2,r2,4
   8b8e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8b8ec:	e0bffc17 	ldw	r2,-16(fp)
   8b8f0:	1080800c 	andi	r2,r2,512
   8b8f4:	1005003a 	cmpeq	r2,r2,zero
   8b8f8:	103fbb1e 	bne	r2,zero,8b7e8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8b8fc:	e0bffc17 	ldw	r2,-16(fp)
   8b900:	10bfffec 	andhi	r2,r2,65535
   8b904:	1004d43a 	srli	r2,r2,16
   8b908:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b90c:	00001506 	br	8b964 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8b910:	e13ffd17 	ldw	r4,-12(fp)
   8b914:	e0bffe17 	ldw	r2,-8(fp)
   8b918:	10c00d17 	ldw	r3,52(r2)
   8b91c:	e0bffe17 	ldw	r2,-8(fp)
   8b920:	1885883a 	add	r2,r3,r2
   8b924:	10820e04 	addi	r2,r2,2104
   8b928:	10800003 	ldbu	r2,0(r2)
   8b92c:	10c03fcc 	andi	r3,r2,255
   8b930:	18c0201c 	xori	r3,r3,128
   8b934:	18ffe004 	addi	r3,r3,-128
   8b938:	2005883a 	mov	r2,r4
   8b93c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b940:	e0bffe17 	ldw	r2,-8(fp)
   8b944:	10800d17 	ldw	r2,52(r2)
   8b948:	10800044 	addi	r2,r2,1
   8b94c:	10c1ffcc 	andi	r3,r2,2047
   8b950:	e0bffe17 	ldw	r2,-8(fp)
   8b954:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8b958:	e0bff917 	ldw	r2,-28(fp)
   8b95c:	10bfffc4 	addi	r2,r2,-1
   8b960:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b964:	e0bff917 	ldw	r2,-28(fp)
   8b968:	1005003a 	cmpeq	r2,r2,zero
   8b96c:	1000051e 	bne	r2,zero,8b984 <altera_avalon_jtag_uart_irq+0x1c4>
   8b970:	e0bffe17 	ldw	r2,-8(fp)
   8b974:	10c00d17 	ldw	r3,52(r2)
   8b978:	e0bffe17 	ldw	r2,-8(fp)
   8b97c:	10800c17 	ldw	r2,48(r2)
   8b980:	18bfe31e 	bne	r3,r2,8b910 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8b984:	e0bff917 	ldw	r2,-28(fp)
   8b988:	1005003a 	cmpeq	r2,r2,zero
   8b98c:	103f961e 	bne	r2,zero,8b7e8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b990:	e0bffe17 	ldw	r2,-8(fp)
   8b994:	10c00817 	ldw	r3,32(r2)
   8b998:	00bfff44 	movi	r2,-3
   8b99c:	1886703a 	and	r3,r3,r2
   8b9a0:	e0bffe17 	ldw	r2,-8(fp)
   8b9a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b9a8:	e0bffe17 	ldw	r2,-8(fp)
   8b9ac:	10800017 	ldw	r2,0(r2)
   8b9b0:	11000104 	addi	r4,r2,4
   8b9b4:	e0bffe17 	ldw	r2,-8(fp)
   8b9b8:	10800817 	ldw	r2,32(r2)
   8b9bc:	1007883a 	mov	r3,r2
   8b9c0:	2005883a 	mov	r2,r4
   8b9c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b9c8:	e0bffd17 	ldw	r2,-12(fp)
   8b9cc:	10800104 	addi	r2,r2,4
   8b9d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8b9d4:	003f8406 	br	8b7e8 <altera_avalon_jtag_uart_irq+0x28>
}
   8b9d8:	e037883a 	mov	sp,fp
   8b9dc:	df000017 	ldw	fp,0(sp)
   8b9e0:	dec00104 	addi	sp,sp,4
   8b9e4:	f800283a 	ret

0008b9e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8b9e8:	defffc04 	addi	sp,sp,-16
   8b9ec:	df000315 	stw	fp,12(sp)
   8b9f0:	df000304 	addi	fp,sp,12
   8b9f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8b9f8:	e0bfff17 	ldw	r2,-4(fp)
   8b9fc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8ba00:	e0bffe17 	ldw	r2,-8(fp)
   8ba04:	10800017 	ldw	r2,0(r2)
   8ba08:	10800104 	addi	r2,r2,4
   8ba0c:	10800037 	ldwio	r2,0(r2)
   8ba10:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8ba14:	e0bffd17 	ldw	r2,-12(fp)
   8ba18:	1081000c 	andi	r2,r2,1024
   8ba1c:	1005003a 	cmpeq	r2,r2,zero
   8ba20:	10000c1e 	bne	r2,zero,8ba54 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8ba24:	e0bffe17 	ldw	r2,-8(fp)
   8ba28:	10800017 	ldw	r2,0(r2)
   8ba2c:	11000104 	addi	r4,r2,4
   8ba30:	e0bffe17 	ldw	r2,-8(fp)
   8ba34:	10800817 	ldw	r2,32(r2)
   8ba38:	10810014 	ori	r2,r2,1024
   8ba3c:	1007883a 	mov	r3,r2
   8ba40:	2005883a 	mov	r2,r4
   8ba44:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8ba48:	e0bffe17 	ldw	r2,-8(fp)
   8ba4c:	10000915 	stw	zero,36(r2)
   8ba50:	00000a06 	br	8ba7c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8ba54:	e0bffe17 	ldw	r2,-8(fp)
   8ba58:	10c00917 	ldw	r3,36(r2)
   8ba5c:	00a00034 	movhi	r2,32768
   8ba60:	10bfff04 	addi	r2,r2,-4
   8ba64:	10c00536 	bltu	r2,r3,8ba7c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8ba68:	e0bffe17 	ldw	r2,-8(fp)
   8ba6c:	10800917 	ldw	r2,36(r2)
   8ba70:	10c00044 	addi	r3,r2,1
   8ba74:	e0bffe17 	ldw	r2,-8(fp)
   8ba78:	10c00915 	stw	r3,36(r2)
   8ba7c:	00800274 	movhi	r2,9
   8ba80:	1086db04 	addi	r2,r2,7020
   8ba84:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8ba88:	e037883a 	mov	sp,fp
   8ba8c:	df000017 	ldw	fp,0(sp)
   8ba90:	dec00104 	addi	sp,sp,4
   8ba94:	f800283a 	ret

0008ba98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8ba98:	defffc04 	addi	sp,sp,-16
   8ba9c:	df000315 	stw	fp,12(sp)
   8baa0:	df000304 	addi	fp,sp,12
   8baa4:	e13ffd15 	stw	r4,-12(fp)
   8baa8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8baac:	00000706 	br	8bacc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8bab0:	e0bffe17 	ldw	r2,-8(fp)
   8bab4:	1090000c 	andi	r2,r2,16384
   8bab8:	1005003a 	cmpeq	r2,r2,zero
   8babc:	1000031e 	bne	r2,zero,8bacc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8bac0:	00bffd44 	movi	r2,-11
   8bac4:	e0bfff15 	stw	r2,-4(fp)
   8bac8:	00000b06 	br	8baf8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8bacc:	e0bffd17 	ldw	r2,-12(fp)
   8bad0:	10c00d17 	ldw	r3,52(r2)
   8bad4:	e0bffd17 	ldw	r2,-12(fp)
   8bad8:	10800c17 	ldw	r2,48(r2)
   8badc:	18800526 	beq	r3,r2,8baf4 <altera_avalon_jtag_uart_close+0x5c>
   8bae0:	e0bffd17 	ldw	r2,-12(fp)
   8bae4:	10c00917 	ldw	r3,36(r2)
   8bae8:	e0bffd17 	ldw	r2,-12(fp)
   8baec:	10800117 	ldw	r2,4(r2)
   8baf0:	18bfef36 	bltu	r3,r2,8bab0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8baf4:	e03fff15 	stw	zero,-4(fp)
   8baf8:	e0bfff17 	ldw	r2,-4(fp)
}
   8bafc:	e037883a 	mov	sp,fp
   8bb00:	df000017 	ldw	fp,0(sp)
   8bb04:	dec00104 	addi	sp,sp,4
   8bb08:	f800283a 	ret

0008bb0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8bb0c:	defff804 	addi	sp,sp,-32
   8bb10:	df000715 	stw	fp,28(sp)
   8bb14:	df000704 	addi	fp,sp,28
   8bb18:	e13ffb15 	stw	r4,-20(fp)
   8bb1c:	e17ffc15 	stw	r5,-16(fp)
   8bb20:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8bb24:	00bff9c4 	movi	r2,-25
   8bb28:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8bb2c:	e0bffc17 	ldw	r2,-16(fp)
   8bb30:	e0bfff15 	stw	r2,-4(fp)
   8bb34:	e0ffff17 	ldw	r3,-4(fp)
   8bb38:	189a8060 	cmpeqi	r2,r3,27137
   8bb3c:	1000041e 	bne	r2,zero,8bb50 <altera_avalon_jtag_uart_ioctl+0x44>
   8bb40:	e0ffff17 	ldw	r3,-4(fp)
   8bb44:	189a80a0 	cmpeqi	r2,r3,27138
   8bb48:	10001b1e 	bne	r2,zero,8bbb8 <altera_avalon_jtag_uart_ioctl+0xac>
   8bb4c:	00002706 	br	8bbec <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8bb50:	e0bffb17 	ldw	r2,-20(fp)
   8bb54:	10c00117 	ldw	r3,4(r2)
   8bb58:	00a00034 	movhi	r2,32768
   8bb5c:	10bfffc4 	addi	r2,r2,-1
   8bb60:	18802226 	beq	r3,r2,8bbec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8bb64:	e0bffd17 	ldw	r2,-12(fp)
   8bb68:	10800017 	ldw	r2,0(r2)
   8bb6c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8bb70:	e0bff917 	ldw	r2,-28(fp)
   8bb74:	10800090 	cmplti	r2,r2,2
   8bb78:	1000071e 	bne	r2,zero,8bb98 <altera_avalon_jtag_uart_ioctl+0x8c>
   8bb7c:	e0fff917 	ldw	r3,-28(fp)
   8bb80:	00a00034 	movhi	r2,32768
   8bb84:	10bfffc4 	addi	r2,r2,-1
   8bb88:	18800326 	beq	r3,r2,8bb98 <altera_avalon_jtag_uart_ioctl+0x8c>
   8bb8c:	e0bff917 	ldw	r2,-28(fp)
   8bb90:	e0bffe15 	stw	r2,-8(fp)
   8bb94:	00000306 	br	8bba4 <altera_avalon_jtag_uart_ioctl+0x98>
   8bb98:	00e00034 	movhi	r3,32768
   8bb9c:	18ffff84 	addi	r3,r3,-2
   8bba0:	e0fffe15 	stw	r3,-8(fp)
   8bba4:	e0bffb17 	ldw	r2,-20(fp)
   8bba8:	e0fffe17 	ldw	r3,-8(fp)
   8bbac:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8bbb0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8bbb4:	00000d06 	br	8bbec <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8bbb8:	e0bffb17 	ldw	r2,-20(fp)
   8bbbc:	10c00117 	ldw	r3,4(r2)
   8bbc0:	00a00034 	movhi	r2,32768
   8bbc4:	10bfffc4 	addi	r2,r2,-1
   8bbc8:	18800826 	beq	r3,r2,8bbec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8bbcc:	e13ffd17 	ldw	r4,-12(fp)
   8bbd0:	e0bffb17 	ldw	r2,-20(fp)
   8bbd4:	10c00917 	ldw	r3,36(r2)
   8bbd8:	e0bffb17 	ldw	r2,-20(fp)
   8bbdc:	10800117 	ldw	r2,4(r2)
   8bbe0:	1885803a 	cmpltu	r2,r3,r2
   8bbe4:	20800015 	stw	r2,0(r4)
      rc = 0;
   8bbe8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8bbec:	e0bffa17 	ldw	r2,-24(fp)
}
   8bbf0:	e037883a 	mov	sp,fp
   8bbf4:	df000017 	ldw	fp,0(sp)
   8bbf8:	dec00104 	addi	sp,sp,4
   8bbfc:	f800283a 	ret

0008bc00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8bc00:	defff204 	addi	sp,sp,-56
   8bc04:	dfc00d15 	stw	ra,52(sp)
   8bc08:	df000c15 	stw	fp,48(sp)
   8bc0c:	df000c04 	addi	fp,sp,48
   8bc10:	e13ffb15 	stw	r4,-20(fp)
   8bc14:	e17ffc15 	stw	r5,-16(fp)
   8bc18:	e1bffd15 	stw	r6,-12(fp)
   8bc1c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8bc20:	e0bffc17 	ldw	r2,-16(fp)
   8bc24:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8bc28:	00004806 	br	8bd4c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8bc2c:	e0bffb17 	ldw	r2,-20(fp)
   8bc30:	10800a17 	ldw	r2,40(r2)
   8bc34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8bc38:	e0bffb17 	ldw	r2,-20(fp)
   8bc3c:	10800b17 	ldw	r2,44(r2)
   8bc40:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8bc44:	e0fff717 	ldw	r3,-36(fp)
   8bc48:	e0bff617 	ldw	r2,-40(fp)
   8bc4c:	18800536 	bltu	r3,r2,8bc64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8bc50:	e0bff717 	ldw	r2,-36(fp)
   8bc54:	e0fff617 	ldw	r3,-40(fp)
   8bc58:	10c5c83a 	sub	r2,r2,r3
   8bc5c:	e0bff815 	stw	r2,-32(fp)
   8bc60:	00000406 	br	8bc74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8bc64:	00820004 	movi	r2,2048
   8bc68:	e0fff617 	ldw	r3,-40(fp)
   8bc6c:	10c5c83a 	sub	r2,r2,r3
   8bc70:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bc74:	e0bff817 	ldw	r2,-32(fp)
   8bc78:	1005003a 	cmpeq	r2,r2,zero
   8bc7c:	10001f1e 	bne	r2,zero,8bcfc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8bc80:	e0fffd17 	ldw	r3,-12(fp)
   8bc84:	e0bff817 	ldw	r2,-32(fp)
   8bc88:	1880022e 	bgeu	r3,r2,8bc94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8bc8c:	e0bffd17 	ldw	r2,-12(fp)
   8bc90:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8bc94:	e0bffb17 	ldw	r2,-20(fp)
   8bc98:	10c00e04 	addi	r3,r2,56
   8bc9c:	e0bff617 	ldw	r2,-40(fp)
   8bca0:	1887883a 	add	r3,r3,r2
   8bca4:	e0bffa17 	ldw	r2,-24(fp)
   8bca8:	1009883a 	mov	r4,r2
   8bcac:	180b883a 	mov	r5,r3
   8bcb0:	e1bff817 	ldw	r6,-32(fp)
   8bcb4:	008641c0 	call	8641c <memcpy>
      ptr   += n;
   8bcb8:	e0fff817 	ldw	r3,-32(fp)
   8bcbc:	e0bffa17 	ldw	r2,-24(fp)
   8bcc0:	10c5883a 	add	r2,r2,r3
   8bcc4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8bcc8:	e0fffd17 	ldw	r3,-12(fp)
   8bccc:	e0bff817 	ldw	r2,-32(fp)
   8bcd0:	1885c83a 	sub	r2,r3,r2
   8bcd4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bcd8:	e0fff617 	ldw	r3,-40(fp)
   8bcdc:	e0bff817 	ldw	r2,-32(fp)
   8bce0:	1885883a 	add	r2,r3,r2
   8bce4:	10c1ffcc 	andi	r3,r2,2047
   8bce8:	e0bffb17 	ldw	r2,-20(fp)
   8bcec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8bcf0:	e0bffd17 	ldw	r2,-12(fp)
   8bcf4:	10800048 	cmpgei	r2,r2,1
   8bcf8:	103fcc1e 	bne	r2,zero,8bc2c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8bcfc:	e0fffa17 	ldw	r3,-24(fp)
   8bd00:	e0bffc17 	ldw	r2,-16(fp)
   8bd04:	1880141e 	bne	r3,r2,8bd58 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8bd08:	e0bffe17 	ldw	r2,-8(fp)
   8bd0c:	1090000c 	andi	r2,r2,16384
   8bd10:	1004c03a 	cmpne	r2,r2,zero
   8bd14:	1000101e 	bne	r2,zero,8bd58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8bd18:	e0bffb17 	ldw	r2,-20(fp)
   8bd1c:	10c00a17 	ldw	r3,40(r2)
   8bd20:	e0bff717 	ldw	r2,-36(fp)
   8bd24:	1880051e 	bne	r3,r2,8bd3c <altera_avalon_jtag_uart_read+0x13c>
   8bd28:	e0bffb17 	ldw	r2,-20(fp)
   8bd2c:	10c00917 	ldw	r3,36(r2)
   8bd30:	e0bffb17 	ldw	r2,-20(fp)
   8bd34:	10800117 	ldw	r2,4(r2)
   8bd38:	18bff736 	bltu	r3,r2,8bd18 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8bd3c:	e0bffb17 	ldw	r2,-20(fp)
   8bd40:	10c00a17 	ldw	r3,40(r2)
   8bd44:	e0bff717 	ldw	r2,-36(fp)
   8bd48:	18800326 	beq	r3,r2,8bd58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8bd4c:	e0bffd17 	ldw	r2,-12(fp)
   8bd50:	10800048 	cmpgei	r2,r2,1
   8bd54:	103fb51e 	bne	r2,zero,8bc2c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8bd58:	e0fffa17 	ldw	r3,-24(fp)
   8bd5c:	e0bffc17 	ldw	r2,-16(fp)
   8bd60:	18801926 	beq	r3,r2,8bdc8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bd64:	0005303a 	rdctl	r2,status
   8bd68:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bd6c:	e0fff517 	ldw	r3,-44(fp)
   8bd70:	00bfff84 	movi	r2,-2
   8bd74:	1884703a 	and	r2,r3,r2
   8bd78:	1001703a 	wrctl	status,r2
  
  return context;
   8bd7c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8bd80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bd84:	e0bffb17 	ldw	r2,-20(fp)
   8bd88:	10800817 	ldw	r2,32(r2)
   8bd8c:	10c00054 	ori	r3,r2,1
   8bd90:	e0bffb17 	ldw	r2,-20(fp)
   8bd94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bd98:	e0bffb17 	ldw	r2,-20(fp)
   8bd9c:	10800017 	ldw	r2,0(r2)
   8bda0:	11000104 	addi	r4,r2,4
   8bda4:	e0bffb17 	ldw	r2,-20(fp)
   8bda8:	10800817 	ldw	r2,32(r2)
   8bdac:	1007883a 	mov	r3,r2
   8bdb0:	2005883a 	mov	r2,r4
   8bdb4:	10c00035 	stwio	r3,0(r2)
   8bdb8:	e0bff917 	ldw	r2,-28(fp)
   8bdbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bdc0:	e0bff417 	ldw	r2,-48(fp)
   8bdc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8bdc8:	e0fffa17 	ldw	r3,-24(fp)
   8bdcc:	e0bffc17 	ldw	r2,-16(fp)
   8bdd0:	18800526 	beq	r3,r2,8bde8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8bdd4:	e0fffa17 	ldw	r3,-24(fp)
   8bdd8:	e0bffc17 	ldw	r2,-16(fp)
   8bddc:	1887c83a 	sub	r3,r3,r2
   8bde0:	e0ffff15 	stw	r3,-4(fp)
   8bde4:	00000906 	br	8be0c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8bde8:	e0bffe17 	ldw	r2,-8(fp)
   8bdec:	1090000c 	andi	r2,r2,16384
   8bdf0:	1005003a 	cmpeq	r2,r2,zero
   8bdf4:	1000031e 	bne	r2,zero,8be04 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8bdf8:	00bffd44 	movi	r2,-11
   8bdfc:	e0bfff15 	stw	r2,-4(fp)
   8be00:	00000206 	br	8be0c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8be04:	00bffec4 	movi	r2,-5
   8be08:	e0bfff15 	stw	r2,-4(fp)
   8be0c:	e0bfff17 	ldw	r2,-4(fp)
}
   8be10:	e037883a 	mov	sp,fp
   8be14:	dfc00117 	ldw	ra,4(sp)
   8be18:	df000017 	ldw	fp,0(sp)
   8be1c:	dec00204 	addi	sp,sp,8
   8be20:	f800283a 	ret

0008be24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8be24:	defff204 	addi	sp,sp,-56
   8be28:	dfc00d15 	stw	ra,52(sp)
   8be2c:	df000c15 	stw	fp,48(sp)
   8be30:	df000c04 	addi	fp,sp,48
   8be34:	e13ffb15 	stw	r4,-20(fp)
   8be38:	e17ffc15 	stw	r5,-16(fp)
   8be3c:	e1bffd15 	stw	r6,-12(fp)
   8be40:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8be44:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8be48:	e0bffc17 	ldw	r2,-16(fp)
   8be4c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8be50:	00003a06 	br	8bf3c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8be54:	e0bffb17 	ldw	r2,-20(fp)
   8be58:	10800c17 	ldw	r2,48(r2)
   8be5c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8be60:	e0bffb17 	ldw	r2,-20(fp)
   8be64:	10800d17 	ldw	r2,52(r2)
   8be68:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8be6c:	e0fffa17 	ldw	r3,-24(fp)
   8be70:	e0bff917 	ldw	r2,-28(fp)
   8be74:	1880062e 	bgeu	r3,r2,8be90 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8be78:	e0fff917 	ldw	r3,-28(fp)
   8be7c:	e0bffa17 	ldw	r2,-24(fp)
   8be80:	1885c83a 	sub	r2,r3,r2
   8be84:	10bfffc4 	addi	r2,r2,-1
   8be88:	e0bff815 	stw	r2,-32(fp)
   8be8c:	00000c06 	br	8bec0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8be90:	e0bff917 	ldw	r2,-28(fp)
   8be94:	1005003a 	cmpeq	r2,r2,zero
   8be98:	1000051e 	bne	r2,zero,8beb0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8be9c:	00820004 	movi	r2,2048
   8bea0:	e0fffa17 	ldw	r3,-24(fp)
   8bea4:	10c5c83a 	sub	r2,r2,r3
   8bea8:	e0bff815 	stw	r2,-32(fp)
   8beac:	00000406 	br	8bec0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8beb0:	0081ffc4 	movi	r2,2047
   8beb4:	e0fffa17 	ldw	r3,-24(fp)
   8beb8:	10c5c83a 	sub	r2,r2,r3
   8bebc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bec0:	e0bff817 	ldw	r2,-32(fp)
   8bec4:	1005003a 	cmpeq	r2,r2,zero
   8bec8:	10001f1e 	bne	r2,zero,8bf48 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8becc:	e0fffd17 	ldw	r3,-12(fp)
   8bed0:	e0bff817 	ldw	r2,-32(fp)
   8bed4:	1880022e 	bgeu	r3,r2,8bee0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8bed8:	e0bffd17 	ldw	r2,-12(fp)
   8bedc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8bee0:	e0bffb17 	ldw	r2,-20(fp)
   8bee4:	10c20e04 	addi	r3,r2,2104
   8bee8:	e0bffa17 	ldw	r2,-24(fp)
   8beec:	1885883a 	add	r2,r3,r2
   8bef0:	e0fffc17 	ldw	r3,-16(fp)
   8bef4:	1009883a 	mov	r4,r2
   8bef8:	180b883a 	mov	r5,r3
   8befc:	e1bff817 	ldw	r6,-32(fp)
   8bf00:	008641c0 	call	8641c <memcpy>
      ptr   += n;
   8bf04:	e0fff817 	ldw	r3,-32(fp)
   8bf08:	e0bffc17 	ldw	r2,-16(fp)
   8bf0c:	10c5883a 	add	r2,r2,r3
   8bf10:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8bf14:	e0fffd17 	ldw	r3,-12(fp)
   8bf18:	e0bff817 	ldw	r2,-32(fp)
   8bf1c:	1885c83a 	sub	r2,r3,r2
   8bf20:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bf24:	e0fffa17 	ldw	r3,-24(fp)
   8bf28:	e0bff817 	ldw	r2,-32(fp)
   8bf2c:	1885883a 	add	r2,r3,r2
   8bf30:	10c1ffcc 	andi	r3,r2,2047
   8bf34:	e0bffb17 	ldw	r2,-20(fp)
   8bf38:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bf3c:	e0bffd17 	ldw	r2,-12(fp)
   8bf40:	10800048 	cmpgei	r2,r2,1
   8bf44:	103fc31e 	bne	r2,zero,8be54 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bf48:	0005303a 	rdctl	r2,status
   8bf4c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bf50:	e0fff517 	ldw	r3,-44(fp)
   8bf54:	00bfff84 	movi	r2,-2
   8bf58:	1884703a 	and	r2,r3,r2
   8bf5c:	1001703a 	wrctl	status,r2
  
  return context;
   8bf60:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8bf64:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8bf68:	e0bffb17 	ldw	r2,-20(fp)
   8bf6c:	10800817 	ldw	r2,32(r2)
   8bf70:	10c00094 	ori	r3,r2,2
   8bf74:	e0bffb17 	ldw	r2,-20(fp)
   8bf78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bf7c:	e0bffb17 	ldw	r2,-20(fp)
   8bf80:	10800017 	ldw	r2,0(r2)
   8bf84:	11000104 	addi	r4,r2,4
   8bf88:	e0bffb17 	ldw	r2,-20(fp)
   8bf8c:	10800817 	ldw	r2,32(r2)
   8bf90:	1007883a 	mov	r3,r2
   8bf94:	2005883a 	mov	r2,r4
   8bf98:	10c00035 	stwio	r3,0(r2)
   8bf9c:	e0bff717 	ldw	r2,-36(fp)
   8bfa0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bfa4:	e0bff417 	ldw	r2,-48(fp)
   8bfa8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8bfac:	e0bffd17 	ldw	r2,-12(fp)
   8bfb0:	10800050 	cmplti	r2,r2,1
   8bfb4:	1000111e 	bne	r2,zero,8bffc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8bfb8:	e0bffe17 	ldw	r2,-8(fp)
   8bfbc:	1090000c 	andi	r2,r2,16384
   8bfc0:	1004c03a 	cmpne	r2,r2,zero
   8bfc4:	1000101e 	bne	r2,zero,8c008 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8bfc8:	e0bffb17 	ldw	r2,-20(fp)
   8bfcc:	10c00d17 	ldw	r3,52(r2)
   8bfd0:	e0bff917 	ldw	r2,-28(fp)
   8bfd4:	1880051e 	bne	r3,r2,8bfec <altera_avalon_jtag_uart_write+0x1c8>
   8bfd8:	e0bffb17 	ldw	r2,-20(fp)
   8bfdc:	10c00917 	ldw	r3,36(r2)
   8bfe0:	e0bffb17 	ldw	r2,-20(fp)
   8bfe4:	10800117 	ldw	r2,4(r2)
   8bfe8:	18bff736 	bltu	r3,r2,8bfc8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8bfec:	e0bffb17 	ldw	r2,-20(fp)
   8bff0:	10c00d17 	ldw	r3,52(r2)
   8bff4:	e0bff917 	ldw	r2,-28(fp)
   8bff8:	18800326 	beq	r3,r2,8c008 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   8bffc:	e0bffd17 	ldw	r2,-12(fp)
   8c000:	10800048 	cmpgei	r2,r2,1
   8c004:	103fcd1e 	bne	r2,zero,8bf3c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8c008:	e0fffc17 	ldw	r3,-16(fp)
   8c00c:	e0bff617 	ldw	r2,-40(fp)
   8c010:	18800526 	beq	r3,r2,8c028 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8c014:	e0fffc17 	ldw	r3,-16(fp)
   8c018:	e0bff617 	ldw	r2,-40(fp)
   8c01c:	1887c83a 	sub	r3,r3,r2
   8c020:	e0ffff15 	stw	r3,-4(fp)
   8c024:	00000906 	br	8c04c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8c028:	e0bffe17 	ldw	r2,-8(fp)
   8c02c:	1090000c 	andi	r2,r2,16384
   8c030:	1005003a 	cmpeq	r2,r2,zero
   8c034:	1000031e 	bne	r2,zero,8c044 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8c038:	00bffd44 	movi	r2,-11
   8c03c:	e0bfff15 	stw	r2,-4(fp)
   8c040:	00000206 	br	8c04c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8c044:	00bffec4 	movi	r2,-5
   8c048:	e0bfff15 	stw	r2,-4(fp)
   8c04c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c050:	e037883a 	mov	sp,fp
   8c054:	dfc00117 	ldw	ra,4(sp)
   8c058:	df000017 	ldw	fp,0(sp)
   8c05c:	dec00204 	addi	sp,sp,8
   8c060:	f800283a 	ret

0008c064 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8c064:	defffa04 	addi	sp,sp,-24
   8c068:	dfc00515 	stw	ra,20(sp)
   8c06c:	df000415 	stw	fp,16(sp)
   8c070:	df000404 	addi	fp,sp,16
   8c074:	e13ffd15 	stw	r4,-12(fp)
   8c078:	e17ffe15 	stw	r5,-8(fp)
   8c07c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8c080:	e0bffd17 	ldw	r2,-12(fp)
   8c084:	10800017 	ldw	r2,0(r2)
   8c088:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   8c08c:	e0bffc17 	ldw	r2,-16(fp)
   8c090:	11000a04 	addi	r4,r2,40
   8c094:	e0bffd17 	ldw	r2,-12(fp)
   8c098:	11c00217 	ldw	r7,8(r2)
   8c09c:	e17ffe17 	ldw	r5,-8(fp)
   8c0a0:	e1bfff17 	ldw	r6,-4(fp)
   8c0a4:	008c55c0 	call	8c55c <altera_avalon_uart_read>
      fd->fd_flags);
}
   8c0a8:	e037883a 	mov	sp,fp
   8c0ac:	dfc00117 	ldw	ra,4(sp)
   8c0b0:	df000017 	ldw	fp,0(sp)
   8c0b4:	dec00204 	addi	sp,sp,8
   8c0b8:	f800283a 	ret

0008c0bc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8c0bc:	defffa04 	addi	sp,sp,-24
   8c0c0:	dfc00515 	stw	ra,20(sp)
   8c0c4:	df000415 	stw	fp,16(sp)
   8c0c8:	df000404 	addi	fp,sp,16
   8c0cc:	e13ffd15 	stw	r4,-12(fp)
   8c0d0:	e17ffe15 	stw	r5,-8(fp)
   8c0d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8c0d8:	e0bffd17 	ldw	r2,-12(fp)
   8c0dc:	10800017 	ldw	r2,0(r2)
   8c0e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8c0e4:	e0bffc17 	ldw	r2,-16(fp)
   8c0e8:	11000a04 	addi	r4,r2,40
   8c0ec:	e0bffd17 	ldw	r2,-12(fp)
   8c0f0:	11c00217 	ldw	r7,8(r2)
   8c0f4:	e17ffe17 	ldw	r5,-8(fp)
   8c0f8:	e1bfff17 	ldw	r6,-4(fp)
   8c0fc:	008c7ec0 	call	8c7ec <altera_avalon_uart_write>
      fd->fd_flags);
}
   8c100:	e037883a 	mov	sp,fp
   8c104:	dfc00117 	ldw	ra,4(sp)
   8c108:	df000017 	ldw	fp,0(sp)
   8c10c:	dec00204 	addi	sp,sp,8
   8c110:	f800283a 	ret

0008c114 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   8c114:	defffc04 	addi	sp,sp,-16
   8c118:	dfc00315 	stw	ra,12(sp)
   8c11c:	df000215 	stw	fp,8(sp)
   8c120:	df000204 	addi	fp,sp,8
   8c124:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8c128:	e0bfff17 	ldw	r2,-4(fp)
   8c12c:	10800017 	ldw	r2,0(r2)
   8c130:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   8c134:	e0bffe17 	ldw	r2,-8(fp)
   8c138:	11000a04 	addi	r4,r2,40
   8c13c:	e0bfff17 	ldw	r2,-4(fp)
   8c140:	11400217 	ldw	r5,8(r2)
   8c144:	008c4fc0 	call	8c4fc <altera_avalon_uart_close>
}
   8c148:	e037883a 	mov	sp,fp
   8c14c:	dfc00117 	ldw	ra,4(sp)
   8c150:	df000017 	ldw	fp,0(sp)
   8c154:	dec00204 	addi	sp,sp,8
   8c158:	f800283a 	ret

0008c15c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   8c15c:	defff704 	addi	sp,sp,-36
   8c160:	dfc00815 	stw	ra,32(sp)
   8c164:	df000715 	stw	fp,28(sp)
   8c168:	df000704 	addi	fp,sp,28
   8c16c:	e13ffc15 	stw	r4,-16(fp)
   8c170:	e17ffd15 	stw	r5,-12(fp)
   8c174:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
   8c178:	e0bffc17 	ldw	r2,-16(fp)
   8c17c:	10800017 	ldw	r2,0(r2)
   8c180:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   8c184:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   8c188:	1004c03a 	cmpne	r2,r2,zero
   8c18c:	1000061e 	bne	r2,zero,8c1a8 <altera_avalon_uart_init+0x4c>
   8c190:	0005883a 	mov	r2,zero
   8c194:	1004c03a 	cmpne	r2,r2,zero
   8c198:	1000031e 	bne	r2,zero,8c1a8 <altera_avalon_uart_init+0x4c>
   8c19c:	0005883a 	mov	r2,zero
   8c1a0:	1005003a 	cmpeq	r2,r2,zero
   8c1a4:	1000031e 	bne	r2,zero,8c1b4 <altera_avalon_uart_init+0x58>
   8c1a8:	00800044 	movi	r2,1
   8c1ac:	e0bfff15 	stw	r2,-4(fp)
   8c1b0:	00000106 	br	8c1b8 <altera_avalon_uart_init+0x5c>
   8c1b4:	e03fff15 	stw	zero,-4(fp)
   8c1b8:	e0bfff17 	ldw	r2,-4(fp)
   8c1bc:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   8c1c0:	e0bffa17 	ldw	r2,-24(fp)
   8c1c4:	1004c03a 	cmpne	r2,r2,zero
   8c1c8:	1000111e 	bne	r2,zero,8c210 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   8c1cc:	e0fffc17 	ldw	r3,-16(fp)
   8c1d0:	00832004 	movi	r2,3200
   8c1d4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   8c1d8:	e0bffb17 	ldw	r2,-20(fp)
   8c1dc:	11000304 	addi	r4,r2,12
   8c1e0:	e0bffc17 	ldw	r2,-16(fp)
   8c1e4:	10800117 	ldw	r2,4(r2)
   8c1e8:	1007883a 	mov	r3,r2
   8c1ec:	2005883a 	mov	r2,r4
   8c1f0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   8c1f4:	d8000015 	stw	zero,0(sp)
   8c1f8:	e13ffd17 	ldw	r4,-12(fp)
   8c1fc:	e17ffe17 	ldw	r5,-8(fp)
   8c200:	01800274 	movhi	r6,9
   8c204:	31b08904 	addi	r6,r6,-15836
   8c208:	e1fffc17 	ldw	r7,-16(fp)
   8c20c:	008ced80 	call	8ced8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   8c210:	e037883a 	mov	sp,fp
   8c214:	dfc00117 	ldw	ra,4(sp)
   8c218:	df000017 	ldw	fp,0(sp)
   8c21c:	dec00204 	addi	sp,sp,8
   8c220:	f800283a 	ret

0008c224 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   8c224:	defffa04 	addi	sp,sp,-24
   8c228:	dfc00515 	stw	ra,20(sp)
   8c22c:	df000415 	stw	fp,16(sp)
   8c230:	df000404 	addi	fp,sp,16
   8c234:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   8c238:	e0bfff17 	ldw	r2,-4(fp)
   8c23c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
   8c240:	e0bffd17 	ldw	r2,-12(fp)
   8c244:	10800017 	ldw	r2,0(r2)
   8c248:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   8c24c:	e0bffc17 	ldw	r2,-16(fp)
   8c250:	10800204 	addi	r2,r2,8
   8c254:	10800037 	ldwio	r2,0(r2)
   8c258:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   8c25c:	e0bffc17 	ldw	r2,-16(fp)
   8c260:	10800204 	addi	r2,r2,8
   8c264:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   8c268:	e0bffc17 	ldw	r2,-16(fp)
   8c26c:	10800204 	addi	r2,r2,8
   8c270:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   8c274:	e0bffe17 	ldw	r2,-8(fp)
   8c278:	1080200c 	andi	r2,r2,128
   8c27c:	1005003a 	cmpeq	r2,r2,zero
   8c280:	1000031e 	bne	r2,zero,8c290 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   8c284:	e13ffd17 	ldw	r4,-12(fp)
   8c288:	e17ffe17 	ldw	r5,-8(fp)
   8c28c:	008c2c00 	call	8c2c0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   8c290:	e0bffe17 	ldw	r2,-8(fp)
   8c294:	1081100c 	andi	r2,r2,1088
   8c298:	1005003a 	cmpeq	r2,r2,zero
   8c29c:	1000031e 	bne	r2,zero,8c2ac <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   8c2a0:	e13ffd17 	ldw	r4,-12(fp)
   8c2a4:	e17ffe17 	ldw	r5,-8(fp)
   8c2a8:	008c3a00 	call	8c3a0 <altera_avalon_uart_txirq>
  }
  

}
   8c2ac:	e037883a 	mov	sp,fp
   8c2b0:	dfc00117 	ldw	ra,4(sp)
   8c2b4:	df000017 	ldw	fp,0(sp)
   8c2b8:	dec00204 	addi	sp,sp,8
   8c2bc:	f800283a 	ret

0008c2c0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8c2c0:	defffc04 	addi	sp,sp,-16
   8c2c4:	df000315 	stw	fp,12(sp)
   8c2c8:	df000304 	addi	fp,sp,12
   8c2cc:	e13ffe15 	stw	r4,-8(fp)
   8c2d0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   8c2d4:	e0bfff17 	ldw	r2,-4(fp)
   8c2d8:	108000cc 	andi	r2,r2,3
   8c2dc:	1004c03a 	cmpne	r2,r2,zero
   8c2e0:	10002b1e 	bne	r2,zero,8c390 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   8c2e4:	e0bffe17 	ldw	r2,-8(fp)
   8c2e8:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8c2ec:	e0bffe17 	ldw	r2,-8(fp)
   8c2f0:	10800317 	ldw	r2,12(r2)
   8c2f4:	10800044 	addi	r2,r2,1
   8c2f8:	10800fcc 	andi	r2,r2,63
   8c2fc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   8c300:	e0bffe17 	ldw	r2,-8(fp)
   8c304:	11000317 	ldw	r4,12(r2)
   8c308:	e0bffe17 	ldw	r2,-8(fp)
   8c30c:	10800017 	ldw	r2,0(r2)
   8c310:	10800037 	ldwio	r2,0(r2)
   8c314:	1007883a 	mov	r3,r2
   8c318:	e0bffe17 	ldw	r2,-8(fp)
   8c31c:	2085883a 	add	r2,r4,r2
   8c320:	10800704 	addi	r2,r2,28
   8c324:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   8c328:	e0fffe17 	ldw	r3,-8(fp)
   8c32c:	e0bffd17 	ldw	r2,-12(fp)
   8c330:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8c334:	e0bffe17 	ldw	r2,-8(fp)
   8c338:	10800317 	ldw	r2,12(r2)
   8c33c:	10800044 	addi	r2,r2,1
   8c340:	10800fcc 	andi	r2,r2,63
   8c344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   8c348:	e0bffe17 	ldw	r2,-8(fp)
   8c34c:	10c00217 	ldw	r3,8(r2)
   8c350:	e0bffd17 	ldw	r2,-12(fp)
   8c354:	18800e1e 	bne	r3,r2,8c390 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8c358:	e0bffe17 	ldw	r2,-8(fp)
   8c35c:	10c00117 	ldw	r3,4(r2)
   8c360:	00bfdfc4 	movi	r2,-129
   8c364:	1886703a 	and	r3,r3,r2
   8c368:	e0bffe17 	ldw	r2,-8(fp)
   8c36c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   8c370:	e0bffe17 	ldw	r2,-8(fp)
   8c374:	10800017 	ldw	r2,0(r2)
   8c378:	11000304 	addi	r4,r2,12
   8c37c:	e0bffe17 	ldw	r2,-8(fp)
   8c380:	10800117 	ldw	r2,4(r2)
   8c384:	1007883a 	mov	r3,r2
   8c388:	2005883a 	mov	r2,r4
   8c38c:	10c00035 	stwio	r3,0(r2)
  }   
}
   8c390:	e037883a 	mov	sp,fp
   8c394:	df000017 	ldw	fp,0(sp)
   8c398:	dec00104 	addi	sp,sp,4
   8c39c:	f800283a 	ret

0008c3a0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8c3a0:	defffd04 	addi	sp,sp,-12
   8c3a4:	df000215 	stw	fp,8(sp)
   8c3a8:	df000204 	addi	fp,sp,8
   8c3ac:	e13ffe15 	stw	r4,-8(fp)
   8c3b0:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   8c3b4:	e0bffe17 	ldw	r2,-8(fp)
   8c3b8:	10c00417 	ldw	r3,16(r2)
   8c3bc:	e0bffe17 	ldw	r2,-8(fp)
   8c3c0:	10800517 	ldw	r2,20(r2)
   8c3c4:	18803626 	beq	r3,r2,8c4a0 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8c3c8:	e0bffe17 	ldw	r2,-8(fp)
   8c3cc:	10800617 	ldw	r2,24(r2)
   8c3d0:	1080008c 	andi	r2,r2,2
   8c3d4:	1005003a 	cmpeq	r2,r2,zero
   8c3d8:	1000041e 	bne	r2,zero,8c3ec <altera_avalon_uart_txirq+0x4c>
   8c3dc:	e0bfff17 	ldw	r2,-4(fp)
   8c3e0:	1082000c 	andi	r2,r2,2048
   8c3e4:	1005003a 	cmpeq	r2,r2,zero
   8c3e8:	10001e1e 	bne	r2,zero,8c464 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   8c3ec:	e0bffe17 	ldw	r2,-8(fp)
   8c3f0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   8c3f4:	e0bffe17 	ldw	r2,-8(fp)
   8c3f8:	10800017 	ldw	r2,0(r2)
   8c3fc:	11000104 	addi	r4,r2,4
   8c400:	e0bffe17 	ldw	r2,-8(fp)
   8c404:	10c00417 	ldw	r3,16(r2)
   8c408:	e0bffe17 	ldw	r2,-8(fp)
   8c40c:	1885883a 	add	r2,r3,r2
   8c410:	10801704 	addi	r2,r2,92
   8c414:	10800003 	ldbu	r2,0(r2)
   8c418:	10c03fcc 	andi	r3,r2,255
   8c41c:	2005883a 	mov	r2,r4
   8c420:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   8c424:	e0bffe17 	ldw	r2,-8(fp)
   8c428:	10800417 	ldw	r2,16(r2)
   8c42c:	10c00044 	addi	r3,r2,1
   8c430:	e0bffe17 	ldw	r2,-8(fp)
   8c434:	10c00415 	stw	r3,16(r2)
   8c438:	e0bffe17 	ldw	r2,-8(fp)
   8c43c:	10800417 	ldw	r2,16(r2)
   8c440:	10c00fcc 	andi	r3,r2,63
   8c444:	e0bffe17 	ldw	r2,-8(fp)
   8c448:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8c44c:	e0bffe17 	ldw	r2,-8(fp)
   8c450:	10800117 	ldw	r2,4(r2)
   8c454:	10c01014 	ori	r3,r2,64
   8c458:	e0bffe17 	ldw	r2,-8(fp)
   8c45c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8c460:	00000f06 	br	8c4a0 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   8c464:	e0bffe17 	ldw	r2,-8(fp)
   8c468:	10800017 	ldw	r2,0(r2)
   8c46c:	10800204 	addi	r2,r2,8
   8c470:	10800037 	ldwio	r2,0(r2)
   8c474:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   8c478:	e0bfff17 	ldw	r2,-4(fp)
   8c47c:	1082000c 	andi	r2,r2,2048
   8c480:	1004c03a 	cmpne	r2,r2,zero
   8c484:	1000061e 	bne	r2,zero,8c4a0 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8c488:	e0bffe17 	ldw	r2,-8(fp)
   8c48c:	10c00117 	ldw	r3,4(r2)
   8c490:	00bfefc4 	movi	r2,-65
   8c494:	1886703a 	and	r3,r3,r2
   8c498:	e0bffe17 	ldw	r2,-8(fp)
   8c49c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   8c4a0:	e0bffe17 	ldw	r2,-8(fp)
   8c4a4:	10c00417 	ldw	r3,16(r2)
   8c4a8:	e0bffe17 	ldw	r2,-8(fp)
   8c4ac:	10800517 	ldw	r2,20(r2)
   8c4b0:	1880061e 	bne	r3,r2,8c4cc <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8c4b4:	e0bffe17 	ldw	r2,-8(fp)
   8c4b8:	10c00117 	ldw	r3,4(r2)
   8c4bc:	00beefc4 	movi	r2,-1089
   8c4c0:	1886703a 	and	r3,r3,r2
   8c4c4:	e0bffe17 	ldw	r2,-8(fp)
   8c4c8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8c4cc:	e0bffe17 	ldw	r2,-8(fp)
   8c4d0:	10800017 	ldw	r2,0(r2)
   8c4d4:	11000304 	addi	r4,r2,12
   8c4d8:	e0bffe17 	ldw	r2,-8(fp)
   8c4dc:	10800117 	ldw	r2,4(r2)
   8c4e0:	1007883a 	mov	r3,r2
   8c4e4:	2005883a 	mov	r2,r4
   8c4e8:	10c00035 	stwio	r3,0(r2)
}
   8c4ec:	e037883a 	mov	sp,fp
   8c4f0:	df000017 	ldw	fp,0(sp)
   8c4f4:	dec00104 	addi	sp,sp,4
   8c4f8:	f800283a 	ret

0008c4fc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   8c4fc:	defffc04 	addi	sp,sp,-16
   8c500:	df000315 	stw	fp,12(sp)
   8c504:	df000304 	addi	fp,sp,12
   8c508:	e13ffd15 	stw	r4,-12(fp)
   8c50c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8c510:	00000706 	br	8c530 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8c514:	e0bffe17 	ldw	r2,-8(fp)
   8c518:	1090000c 	andi	r2,r2,16384
   8c51c:	1005003a 	cmpeq	r2,r2,zero
   8c520:	1000031e 	bne	r2,zero,8c530 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
   8c524:	00bffd44 	movi	r2,-11
   8c528:	e0bfff15 	stw	r2,-4(fp)
   8c52c:	00000606 	br	8c548 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8c530:	e0bffd17 	ldw	r2,-12(fp)
   8c534:	10c00417 	ldw	r3,16(r2)
   8c538:	e0bffd17 	ldw	r2,-12(fp)
   8c53c:	10800517 	ldw	r2,20(r2)
   8c540:	18bff41e 	bne	r3,r2,8c514 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c544:	e03fff15 	stw	zero,-4(fp)
   8c548:	e0bfff17 	ldw	r2,-4(fp)
}
   8c54c:	e037883a 	mov	sp,fp
   8c550:	df000017 	ldw	fp,0(sp)
   8c554:	dec00104 	addi	sp,sp,4
   8c558:	f800283a 	ret

0008c55c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   8c55c:	defff004 	addi	sp,sp,-64
   8c560:	dfc00f15 	stw	ra,60(sp)
   8c564:	df000e15 	stw	fp,56(sp)
   8c568:	df000e04 	addi	fp,sp,56
   8c56c:	e13ffb15 	stw	r4,-20(fp)
   8c570:	e17ffc15 	stw	r5,-16(fp)
   8c574:	e1bffd15 	stw	r6,-12(fp)
   8c578:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   8c57c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
   8c580:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   8c584:	e0bffe17 	ldw	r2,-8(fp)
   8c588:	1090000c 	andi	r2,r2,16384
   8c58c:	1005003a 	cmpeq	r2,r2,zero
   8c590:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   8c594:	e0bffb17 	ldw	r2,-20(fp)
   8c598:	10800217 	ldw	r2,8(r2)
   8c59c:	10800044 	addi	r2,r2,1
   8c5a0:	10800fcc 	andi	r2,r2,63
   8c5a4:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8c5a8:	00001906 	br	8c610 <altera_avalon_uart_read+0xb4>
    {
      count++;
   8c5ac:	e0bff617 	ldw	r2,-40(fp)
   8c5b0:	10800044 	addi	r2,r2,1
   8c5b4:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   8c5b8:	e0bffb17 	ldw	r2,-20(fp)
   8c5bc:	10c00217 	ldw	r3,8(r2)
   8c5c0:	e0bffb17 	ldw	r2,-20(fp)
   8c5c4:	1885883a 	add	r2,r3,r2
   8c5c8:	10800704 	addi	r2,r2,28
   8c5cc:	10800003 	ldbu	r2,0(r2)
   8c5d0:	1007883a 	mov	r3,r2
   8c5d4:	e0bffc17 	ldw	r2,-16(fp)
   8c5d8:	10c00005 	stb	r3,0(r2)
   8c5dc:	e0bffc17 	ldw	r2,-16(fp)
   8c5e0:	10800044 	addi	r2,r2,1
   8c5e4:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   8c5e8:	e0bffb17 	ldw	r2,-20(fp)
   8c5ec:	10800217 	ldw	r2,8(r2)
   8c5f0:	10c00044 	addi	r3,r2,1
   8c5f4:	e0bffb17 	ldw	r2,-20(fp)
   8c5f8:	10c00215 	stw	r3,8(r2)
   8c5fc:	e0bffb17 	ldw	r2,-20(fp)
   8c600:	10800217 	ldw	r2,8(r2)
   8c604:	10c00fcc 	andi	r3,r2,63
   8c608:	e0bffb17 	ldw	r2,-20(fp)
   8c60c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8c610:	e0fff617 	ldw	r3,-40(fp)
   8c614:	e0bffd17 	ldw	r2,-12(fp)
   8c618:	1880050e 	bge	r3,r2,8c630 <altera_avalon_uart_read+0xd4>
   8c61c:	e0bffb17 	ldw	r2,-20(fp)
   8c620:	10c00217 	ldw	r3,8(r2)
   8c624:	e0bffb17 	ldw	r2,-20(fp)
   8c628:	10800317 	ldw	r2,12(r2)
   8c62c:	18bfdf1e 	bne	r3,r2,8c5ac <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   8c630:	e0bff617 	ldw	r2,-40(fp)
   8c634:	1004c03a 	cmpne	r2,r2,zero
   8c638:	1000271e 	bne	r2,zero,8c6d8 <altera_avalon_uart_read+0x17c>
   8c63c:	e0bffb17 	ldw	r2,-20(fp)
   8c640:	10c00217 	ldw	r3,8(r2)
   8c644:	e0bffb17 	ldw	r2,-20(fp)
   8c648:	10800317 	ldw	r2,12(r2)
   8c64c:	1880221e 	bne	r3,r2,8c6d8 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
   8c650:	e0bff917 	ldw	r2,-28(fp)
   8c654:	1004c03a 	cmpne	r2,r2,zero
   8c658:	1000061e 	bne	r2,zero,8c674 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   8c65c:	008c78c0 	call	8c78c <alt_get_errno>
   8c660:	00c002c4 	movi	r3,11
   8c664:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   8c668:	00800044 	movi	r2,1
   8c66c:	e0bff705 	stb	r2,-36(fp)
        break;
   8c670:	00001f06 	br	8c6f0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c674:	0005303a 	rdctl	r2,status
   8c678:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c67c:	e0fff517 	ldw	r3,-44(fp)
   8c680:	00bfff84 	movi	r2,-2
   8c684:	1884703a 	and	r2,r3,r2
   8c688:	1001703a 	wrctl	status,r2
  
  return context;
   8c68c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   8c690:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8c694:	e0bffb17 	ldw	r2,-20(fp)
   8c698:	10800117 	ldw	r2,4(r2)
   8c69c:	10c02014 	ori	r3,r2,128
   8c6a0:	e0bffb17 	ldw	r2,-20(fp)
   8c6a4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8c6a8:	e0bffb17 	ldw	r2,-20(fp)
   8c6ac:	10800017 	ldw	r2,0(r2)
   8c6b0:	11000304 	addi	r4,r2,12
   8c6b4:	e0bffb17 	ldw	r2,-20(fp)
   8c6b8:	10800117 	ldw	r2,4(r2)
   8c6bc:	1007883a 	mov	r3,r2
   8c6c0:	2005883a 	mov	r2,r4
   8c6c4:	10c00035 	stwio	r3,0(r2)
   8c6c8:	e0bffa17 	ldw	r2,-24(fp)
   8c6cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c6d0:	e0bff417 	ldw	r2,-48(fp)
   8c6d4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   8c6d8:	e0bff617 	ldw	r2,-40(fp)
   8c6dc:	1004c03a 	cmpne	r2,r2,zero
   8c6e0:	1000031e 	bne	r2,zero,8c6f0 <altera_avalon_uart_read+0x194>
   8c6e4:	e0bffd17 	ldw	r2,-12(fp)
   8c6e8:	1004c03a 	cmpne	r2,r2,zero
   8c6ec:	103fc81e 	bne	r2,zero,8c610 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c6f0:	0005303a 	rdctl	r2,status
   8c6f4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c6f8:	e0fff317 	ldw	r3,-52(fp)
   8c6fc:	00bfff84 	movi	r2,-2
   8c700:	1884703a 	and	r2,r3,r2
   8c704:	1001703a 	wrctl	status,r2
  
  return context;
   8c708:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   8c70c:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8c710:	e0bffb17 	ldw	r2,-20(fp)
   8c714:	10800117 	ldw	r2,4(r2)
   8c718:	10c02014 	ori	r3,r2,128
   8c71c:	e0bffb17 	ldw	r2,-20(fp)
   8c720:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8c724:	e0bffb17 	ldw	r2,-20(fp)
   8c728:	10800017 	ldw	r2,0(r2)
   8c72c:	11000304 	addi	r4,r2,12
   8c730:	e0bffb17 	ldw	r2,-20(fp)
   8c734:	10800117 	ldw	r2,4(r2)
   8c738:	1007883a 	mov	r3,r2
   8c73c:	2005883a 	mov	r2,r4
   8c740:	10c00035 	stwio	r3,0(r2)
   8c744:	e0bffa17 	ldw	r2,-24(fp)
   8c748:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c74c:	e0bff217 	ldw	r2,-56(fp)
   8c750:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   8c754:	e0bff703 	ldbu	r2,-36(fp)
   8c758:	1005003a 	cmpeq	r2,r2,zero
   8c75c:	1000031e 	bne	r2,zero,8c76c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
   8c760:	00bffd04 	movi	r2,-12
   8c764:	e0bfff15 	stw	r2,-4(fp)
   8c768:	00000206 	br	8c774 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
   8c76c:	e0bff617 	ldw	r2,-40(fp)
   8c770:	e0bfff15 	stw	r2,-4(fp)
   8c774:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8c778:	e037883a 	mov	sp,fp
   8c77c:	dfc00117 	ldw	ra,4(sp)
   8c780:	df000017 	ldw	fp,0(sp)
   8c784:	dec00204 	addi	sp,sp,8
   8c788:	f800283a 	ret

0008c78c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c78c:	defffd04 	addi	sp,sp,-12
   8c790:	dfc00215 	stw	ra,8(sp)
   8c794:	df000115 	stw	fp,4(sp)
   8c798:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c79c:	00800274 	movhi	r2,9
   8c7a0:	10800004 	addi	r2,r2,0
   8c7a4:	10800017 	ldw	r2,0(r2)
   8c7a8:	1005003a 	cmpeq	r2,r2,zero
   8c7ac:	1000061e 	bne	r2,zero,8c7c8 <alt_get_errno+0x3c>
   8c7b0:	00800274 	movhi	r2,9
   8c7b4:	10800004 	addi	r2,r2,0
   8c7b8:	10800017 	ldw	r2,0(r2)
   8c7bc:	103ee83a 	callr	r2
   8c7c0:	e0bfff15 	stw	r2,-4(fp)
   8c7c4:	00000306 	br	8c7d4 <alt_get_errno+0x48>
   8c7c8:	00800274 	movhi	r2,9
   8c7cc:	1086d604 	addi	r2,r2,7000
   8c7d0:	e0bfff15 	stw	r2,-4(fp)
   8c7d4:	e0bfff17 	ldw	r2,-4(fp)
}
   8c7d8:	e037883a 	mov	sp,fp
   8c7dc:	dfc00117 	ldw	ra,4(sp)
   8c7e0:	df000017 	ldw	fp,0(sp)
   8c7e4:	dec00204 	addi	sp,sp,8
   8c7e8:	f800283a 	ret

0008c7ec <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   8c7ec:	defff204 	addi	sp,sp,-56
   8c7f0:	dfc00d15 	stw	ra,52(sp)
   8c7f4:	df000c15 	stw	fp,48(sp)
   8c7f8:	df000c04 	addi	fp,sp,48
   8c7fc:	e13ffc15 	stw	r4,-16(fp)
   8c800:	e17ffd15 	stw	r5,-12(fp)
   8c804:	e1bffe15 	stw	r6,-8(fp)
   8c808:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   8c80c:	e0bffe17 	ldw	r2,-8(fp)
   8c810:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   8c814:	e0bfff17 	ldw	r2,-4(fp)
   8c818:	1090000c 	andi	r2,r2,16384
   8c81c:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8c820:	00004006 	br	8c924 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8c824:	e0bffc17 	ldw	r2,-16(fp)
   8c828:	10800517 	ldw	r2,20(r2)
   8c82c:	10800044 	addi	r2,r2,1
   8c830:	10800fcc 	andi	r2,r2,63
   8c834:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   8c838:	e0bffc17 	ldw	r2,-16(fp)
   8c83c:	10c00417 	ldw	r3,16(r2)
   8c840:	e0bff917 	ldw	r2,-28(fp)
   8c844:	1880251e 	bne	r3,r2,8c8dc <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
   8c848:	e0bffa17 	ldw	r2,-24(fp)
   8c84c:	1005003a 	cmpeq	r2,r2,zero
   8c850:	1000051e 	bne	r2,zero,8c868 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   8c854:	008c9b40 	call	8c9b4 <alt_get_errno>
   8c858:	1007883a 	mov	r3,r2
   8c85c:	008002c4 	movi	r2,11
   8c860:	18800015 	stw	r2,0(r3)
        break;
   8c864:	00003206 	br	8c930 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c868:	0005303a 	rdctl	r2,status
   8c86c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c870:	e0fff717 	ldw	r3,-36(fp)
   8c874:	00bfff84 	movi	r2,-2
   8c878:	1884703a 	and	r2,r3,r2
   8c87c:	1001703a 	wrctl	status,r2
  
  return context;
   8c880:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   8c884:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8c888:	e0bffc17 	ldw	r2,-16(fp)
   8c88c:	10800117 	ldw	r2,4(r2)
   8c890:	10c11014 	ori	r3,r2,1088
   8c894:	e0bffc17 	ldw	r2,-16(fp)
   8c898:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8c89c:	e0bffc17 	ldw	r2,-16(fp)
   8c8a0:	10800017 	ldw	r2,0(r2)
   8c8a4:	11000304 	addi	r4,r2,12
   8c8a8:	e0bffc17 	ldw	r2,-16(fp)
   8c8ac:	10800117 	ldw	r2,4(r2)
   8c8b0:	1007883a 	mov	r3,r2
   8c8b4:	2005883a 	mov	r2,r4
   8c8b8:	10c00035 	stwio	r3,0(r2)
   8c8bc:	e0bffb17 	ldw	r2,-20(fp)
   8c8c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c8c4:	e0bff617 	ldw	r2,-40(fp)
   8c8c8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   8c8cc:	e0bffc17 	ldw	r2,-16(fp)
   8c8d0:	10c00417 	ldw	r3,16(r2)
   8c8d4:	e0bff917 	ldw	r2,-28(fp)
   8c8d8:	18bffc26 	beq	r3,r2,8c8cc <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
   8c8dc:	e0bff817 	ldw	r2,-32(fp)
   8c8e0:	10bfffc4 	addi	r2,r2,-1
   8c8e4:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   8c8e8:	e0bffc17 	ldw	r2,-16(fp)
   8c8ec:	10c00517 	ldw	r3,20(r2)
   8c8f0:	e0bffd17 	ldw	r2,-12(fp)
   8c8f4:	10800003 	ldbu	r2,0(r2)
   8c8f8:	1009883a 	mov	r4,r2
   8c8fc:	e0bffc17 	ldw	r2,-16(fp)
   8c900:	1885883a 	add	r2,r3,r2
   8c904:	10801704 	addi	r2,r2,92
   8c908:	11000005 	stb	r4,0(r2)
   8c90c:	e0bffd17 	ldw	r2,-12(fp)
   8c910:	10800044 	addi	r2,r2,1
   8c914:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   8c918:	e0fffc17 	ldw	r3,-16(fp)
   8c91c:	e0bff917 	ldw	r2,-28(fp)
   8c920:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8c924:	e0bff817 	ldw	r2,-32(fp)
   8c928:	1004c03a 	cmpne	r2,r2,zero
   8c92c:	103fbd1e 	bne	r2,zero,8c824 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c930:	0005303a 	rdctl	r2,status
   8c934:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c938:	e0fff517 	ldw	r3,-44(fp)
   8c93c:	00bfff84 	movi	r2,-2
   8c940:	1884703a 	and	r2,r3,r2
   8c944:	1001703a 	wrctl	status,r2
  
  return context;
   8c948:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   8c94c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8c950:	e0bffc17 	ldw	r2,-16(fp)
   8c954:	10800117 	ldw	r2,4(r2)
   8c958:	10c11014 	ori	r3,r2,1088
   8c95c:	e0bffc17 	ldw	r2,-16(fp)
   8c960:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8c964:	e0bffc17 	ldw	r2,-16(fp)
   8c968:	10800017 	ldw	r2,0(r2)
   8c96c:	11000304 	addi	r4,r2,12
   8c970:	e0bffc17 	ldw	r2,-16(fp)
   8c974:	10800117 	ldw	r2,4(r2)
   8c978:	1007883a 	mov	r3,r2
   8c97c:	2005883a 	mov	r2,r4
   8c980:	10c00035 	stwio	r3,0(r2)
   8c984:	e0bffb17 	ldw	r2,-20(fp)
   8c988:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c98c:	e0bff417 	ldw	r2,-48(fp)
   8c990:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   8c994:	e0fffe17 	ldw	r3,-8(fp)
   8c998:	e0bff817 	ldw	r2,-32(fp)
   8c99c:	1885c83a 	sub	r2,r3,r2
}
   8c9a0:	e037883a 	mov	sp,fp
   8c9a4:	dfc00117 	ldw	ra,4(sp)
   8c9a8:	df000017 	ldw	fp,0(sp)
   8c9ac:	dec00204 	addi	sp,sp,8
   8c9b0:	f800283a 	ret

0008c9b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c9b4:	defffd04 	addi	sp,sp,-12
   8c9b8:	dfc00215 	stw	ra,8(sp)
   8c9bc:	df000115 	stw	fp,4(sp)
   8c9c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c9c4:	00800274 	movhi	r2,9
   8c9c8:	10800004 	addi	r2,r2,0
   8c9cc:	10800017 	ldw	r2,0(r2)
   8c9d0:	1005003a 	cmpeq	r2,r2,zero
   8c9d4:	1000061e 	bne	r2,zero,8c9f0 <alt_get_errno+0x3c>
   8c9d8:	00800274 	movhi	r2,9
   8c9dc:	10800004 	addi	r2,r2,0
   8c9e0:	10800017 	ldw	r2,0(r2)
   8c9e4:	103ee83a 	callr	r2
   8c9e8:	e0bfff15 	stw	r2,-4(fp)
   8c9ec:	00000306 	br	8c9fc <alt_get_errno+0x48>
   8c9f0:	00800274 	movhi	r2,9
   8c9f4:	1086d604 	addi	r2,r2,7000
   8c9f8:	e0bfff15 	stw	r2,-4(fp)
   8c9fc:	e0bfff17 	ldw	r2,-4(fp)
}
   8ca00:	e037883a 	mov	sp,fp
   8ca04:	dfc00117 	ldw	ra,4(sp)
   8ca08:	df000017 	ldw	fp,0(sp)
   8ca0c:	dec00204 	addi	sp,sp,8
   8ca10:	f800283a 	ret

0008ca14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8ca14:	defff404 	addi	sp,sp,-48
   8ca18:	df000b15 	stw	fp,44(sp)
   8ca1c:	df000b04 	addi	fp,sp,44
   8ca20:	e13ffb15 	stw	r4,-20(fp)
   8ca24:	e17ffc15 	stw	r5,-16(fp)
   8ca28:	e1bffd15 	stw	r6,-12(fp)
   8ca2c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8ca30:	e03ff915 	stw	zero,-28(fp)
   8ca34:	00800274 	movhi	r2,9
   8ca38:	1086db04 	addi	r2,r2,7020
   8ca3c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8ca40:	1005003a 	cmpeq	r2,r2,zero
   8ca44:	1000411e 	bne	r2,zero,8cb4c <alt_alarm_start+0x138>
  {
    if (alarm)
   8ca48:	e0bffb17 	ldw	r2,-20(fp)
   8ca4c:	1005003a 	cmpeq	r2,r2,zero
   8ca50:	10003b1e 	bne	r2,zero,8cb40 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8ca54:	e0fffb17 	ldw	r3,-20(fp)
   8ca58:	e0bffd17 	ldw	r2,-12(fp)
   8ca5c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8ca60:	e0fffb17 	ldw	r3,-20(fp)
   8ca64:	e0bffe17 	ldw	r2,-8(fp)
   8ca68:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ca6c:	0005303a 	rdctl	r2,status
   8ca70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ca74:	e0fff817 	ldw	r3,-32(fp)
   8ca78:	00bfff84 	movi	r2,-2
   8ca7c:	1884703a 	and	r2,r3,r2
   8ca80:	1001703a 	wrctl	status,r2
  
  return context;
   8ca84:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8ca88:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8ca8c:	00800274 	movhi	r2,9
   8ca90:	1086dc04 	addi	r2,r2,7024
   8ca94:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8ca98:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8ca9c:	e0fffc17 	ldw	r3,-16(fp)
   8caa0:	e0bff917 	ldw	r2,-28(fp)
   8caa4:	1885883a 	add	r2,r3,r2
   8caa8:	10c00044 	addi	r3,r2,1
   8caac:	e0bffb17 	ldw	r2,-20(fp)
   8cab0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8cab4:	e0bffb17 	ldw	r2,-20(fp)
   8cab8:	10c00217 	ldw	r3,8(r2)
   8cabc:	e0bff917 	ldw	r2,-28(fp)
   8cac0:	1880042e 	bgeu	r3,r2,8cad4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8cac4:	e0fffb17 	ldw	r3,-20(fp)
   8cac8:	00800044 	movi	r2,1
   8cacc:	18800405 	stb	r2,16(r3)
   8cad0:	00000206 	br	8cadc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8cad4:	e0bffb17 	ldw	r2,-20(fp)
   8cad8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8cadc:	e0fffb17 	ldw	r3,-20(fp)
   8cae0:	00800274 	movhi	r2,9
   8cae4:	10800304 	addi	r2,r2,12
   8cae8:	e0bff615 	stw	r2,-40(fp)
   8caec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8caf0:	e0fff717 	ldw	r3,-36(fp)
   8caf4:	e0bff617 	ldw	r2,-40(fp)
   8caf8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8cafc:	e0bff617 	ldw	r2,-40(fp)
   8cb00:	10c00017 	ldw	r3,0(r2)
   8cb04:	e0bff717 	ldw	r2,-36(fp)
   8cb08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8cb0c:	e0bff617 	ldw	r2,-40(fp)
   8cb10:	10c00017 	ldw	r3,0(r2)
   8cb14:	e0bff717 	ldw	r2,-36(fp)
   8cb18:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8cb1c:	e0fff617 	ldw	r3,-40(fp)
   8cb20:	e0bff717 	ldw	r2,-36(fp)
   8cb24:	18800015 	stw	r2,0(r3)
   8cb28:	e0bffa17 	ldw	r2,-24(fp)
   8cb2c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cb30:	e0bff517 	ldw	r2,-44(fp)
   8cb34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8cb38:	e03fff15 	stw	zero,-4(fp)
   8cb3c:	00000506 	br	8cb54 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8cb40:	00bffa84 	movi	r2,-22
   8cb44:	e0bfff15 	stw	r2,-4(fp)
   8cb48:	00000206 	br	8cb54 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8cb4c:	00bfde84 	movi	r2,-134
   8cb50:	e0bfff15 	stw	r2,-4(fp)
   8cb54:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8cb58:	e037883a 	mov	sp,fp
   8cb5c:	df000017 	ldw	fp,0(sp)
   8cb60:	dec00104 	addi	sp,sp,4
   8cb64:	f800283a 	ret

0008cb68 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8cb68:	defffa04 	addi	sp,sp,-24
   8cb6c:	dfc00515 	stw	ra,20(sp)
   8cb70:	df000415 	stw	fp,16(sp)
   8cb74:	df000404 	addi	fp,sp,16
   8cb78:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8cb7c:	00800244 	movi	r2,9
   8cb80:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8cb84:	e13ffc17 	ldw	r4,-16(fp)
   8cb88:	014003f4 	movhi	r5,15
   8cb8c:	29509004 	addi	r5,r5,16960
   8cb90:	0080e140 	call	80e14 <__mulsi3>
   8cb94:	100b883a 	mov	r5,r2
   8cb98:	0100bef4 	movhi	r4,763
   8cb9c:	213c2004 	addi	r4,r4,-3968
   8cba0:	0080e040 	call	80e04 <__udivsi3>
   8cba4:	100b883a 	mov	r5,r2
   8cba8:	01200034 	movhi	r4,32768
   8cbac:	213fffc4 	addi	r4,r4,-1
   8cbb0:	0080e040 	call	80e04 <__udivsi3>
   8cbb4:	100b883a 	mov	r5,r2
   8cbb8:	e13fff17 	ldw	r4,-4(fp)
   8cbbc:	0080e040 	call	80e04 <__udivsi3>
   8cbc0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8cbc4:	e0bffd17 	ldw	r2,-12(fp)
   8cbc8:	1005003a 	cmpeq	r2,r2,zero
   8cbcc:	10002a1e 	bne	r2,zero,8cc78 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   8cbd0:	e03ffe15 	stw	zero,-8(fp)
   8cbd4:	00001706 	br	8cc34 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8cbd8:	00a00034 	movhi	r2,32768
   8cbdc:	10bfffc4 	addi	r2,r2,-1
   8cbe0:	10bfffc4 	addi	r2,r2,-1
   8cbe4:	103ffe1e 	bne	r2,zero,8cbe0 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8cbe8:	e13ffc17 	ldw	r4,-16(fp)
   8cbec:	014003f4 	movhi	r5,15
   8cbf0:	29509004 	addi	r5,r5,16960
   8cbf4:	0080e140 	call	80e14 <__mulsi3>
   8cbf8:	100b883a 	mov	r5,r2
   8cbfc:	0100bef4 	movhi	r4,763
   8cc00:	213c2004 	addi	r4,r4,-3968
   8cc04:	0080e040 	call	80e04 <__udivsi3>
   8cc08:	100b883a 	mov	r5,r2
   8cc0c:	01200034 	movhi	r4,32768
   8cc10:	213fffc4 	addi	r4,r4,-1
   8cc14:	0080e040 	call	80e04 <__udivsi3>
   8cc18:	1007883a 	mov	r3,r2
   8cc1c:	e0bfff17 	ldw	r2,-4(fp)
   8cc20:	10c5c83a 	sub	r2,r2,r3
   8cc24:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8cc28:	e0bffe17 	ldw	r2,-8(fp)
   8cc2c:	10800044 	addi	r2,r2,1
   8cc30:	e0bffe15 	stw	r2,-8(fp)
   8cc34:	e0fffe17 	ldw	r3,-8(fp)
   8cc38:	e0bffd17 	ldw	r2,-12(fp)
   8cc3c:	18bfe616 	blt	r3,r2,8cbd8 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8cc40:	e13ffc17 	ldw	r4,-16(fp)
   8cc44:	014003f4 	movhi	r5,15
   8cc48:	29509004 	addi	r5,r5,16960
   8cc4c:	0080e140 	call	80e14 <__mulsi3>
   8cc50:	100b883a 	mov	r5,r2
   8cc54:	0100bef4 	movhi	r4,763
   8cc58:	213c2004 	addi	r4,r4,-3968
   8cc5c:	0080e040 	call	80e04 <__udivsi3>
   8cc60:	1009883a 	mov	r4,r2
   8cc64:	e17fff17 	ldw	r5,-4(fp)
   8cc68:	0080e140 	call	80e14 <__mulsi3>
   8cc6c:	10bfffc4 	addi	r2,r2,-1
   8cc70:	103ffe1e 	bne	r2,zero,8cc6c <alt_busy_sleep+0x104>
   8cc74:	00000d06 	br	8ccac <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8cc78:	e13ffc17 	ldw	r4,-16(fp)
   8cc7c:	014003f4 	movhi	r5,15
   8cc80:	29509004 	addi	r5,r5,16960
   8cc84:	0080e140 	call	80e14 <__mulsi3>
   8cc88:	100b883a 	mov	r5,r2
   8cc8c:	0100bef4 	movhi	r4,763
   8cc90:	213c2004 	addi	r4,r4,-3968
   8cc94:	0080e040 	call	80e04 <__udivsi3>
   8cc98:	1009883a 	mov	r4,r2
   8cc9c:	e17fff17 	ldw	r5,-4(fp)
   8cca0:	0080e140 	call	80e14 <__mulsi3>
   8cca4:	10bfffc4 	addi	r2,r2,-1
   8cca8:	00bffe16 	blt	zero,r2,8cca4 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8ccac:	0005883a 	mov	r2,zero
}
   8ccb0:	e037883a 	mov	sp,fp
   8ccb4:	dfc00117 	ldw	ra,4(sp)
   8ccb8:	df000017 	ldw	fp,0(sp)
   8ccbc:	dec00204 	addi	sp,sp,8
   8ccc0:	f800283a 	ret

0008ccc4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8ccc4:	deffff04 	addi	sp,sp,-4
   8ccc8:	df000015 	stw	fp,0(sp)
   8cccc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8ccd0:	e037883a 	mov	sp,fp
   8ccd4:	df000017 	ldw	fp,0(sp)
   8ccd8:	dec00104 	addi	sp,sp,4
   8ccdc:	f800283a 	ret

0008cce0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8cce0:	defff904 	addi	sp,sp,-28
   8cce4:	dfc00615 	stw	ra,24(sp)
   8cce8:	df000515 	stw	fp,20(sp)
   8ccec:	df000504 	addi	fp,sp,20
   8ccf0:	e13ffd15 	stw	r4,-12(fp)
   8ccf4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8ccf8:	e0bffd17 	ldw	r2,-12(fp)
   8ccfc:	1005003a 	cmpeq	r2,r2,zero
   8cd00:	1000041e 	bne	r2,zero,8cd14 <alt_dev_llist_insert+0x34>
   8cd04:	e0bffd17 	ldw	r2,-12(fp)
   8cd08:	10800217 	ldw	r2,8(r2)
   8cd0c:	1004c03a 	cmpne	r2,r2,zero
   8cd10:	1000071e 	bne	r2,zero,8cd30 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8cd14:	008cd940 	call	8cd94 <alt_get_errno>
   8cd18:	1007883a 	mov	r3,r2
   8cd1c:	00800584 	movi	r2,22
   8cd20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8cd24:	00bffa84 	movi	r2,-22
   8cd28:	e0bfff15 	stw	r2,-4(fp)
   8cd2c:	00001306 	br	8cd7c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8cd30:	e0fffd17 	ldw	r3,-12(fp)
   8cd34:	e0bffe17 	ldw	r2,-8(fp)
   8cd38:	e0bffb15 	stw	r2,-20(fp)
   8cd3c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8cd40:	e0fffc17 	ldw	r3,-16(fp)
   8cd44:	e0bffb17 	ldw	r2,-20(fp)
   8cd48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8cd4c:	e0bffb17 	ldw	r2,-20(fp)
   8cd50:	10c00017 	ldw	r3,0(r2)
   8cd54:	e0bffc17 	ldw	r2,-16(fp)
   8cd58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8cd5c:	e0bffb17 	ldw	r2,-20(fp)
   8cd60:	10c00017 	ldw	r3,0(r2)
   8cd64:	e0bffc17 	ldw	r2,-16(fp)
   8cd68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8cd6c:	e0fffb17 	ldw	r3,-20(fp)
   8cd70:	e0bffc17 	ldw	r2,-16(fp)
   8cd74:	18800015 	stw	r2,0(r3)

  return 0;  
   8cd78:	e03fff15 	stw	zero,-4(fp)
   8cd7c:	e0bfff17 	ldw	r2,-4(fp)
}
   8cd80:	e037883a 	mov	sp,fp
   8cd84:	dfc00117 	ldw	ra,4(sp)
   8cd88:	df000017 	ldw	fp,0(sp)
   8cd8c:	dec00204 	addi	sp,sp,8
   8cd90:	f800283a 	ret

0008cd94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8cd94:	defffd04 	addi	sp,sp,-12
   8cd98:	dfc00215 	stw	ra,8(sp)
   8cd9c:	df000115 	stw	fp,4(sp)
   8cda0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8cda4:	00800274 	movhi	r2,9
   8cda8:	10800004 	addi	r2,r2,0
   8cdac:	10800017 	ldw	r2,0(r2)
   8cdb0:	1005003a 	cmpeq	r2,r2,zero
   8cdb4:	1000061e 	bne	r2,zero,8cdd0 <alt_get_errno+0x3c>
   8cdb8:	00800274 	movhi	r2,9
   8cdbc:	10800004 	addi	r2,r2,0
   8cdc0:	10800017 	ldw	r2,0(r2)
   8cdc4:	103ee83a 	callr	r2
   8cdc8:	e0bfff15 	stw	r2,-4(fp)
   8cdcc:	00000306 	br	8cddc <alt_get_errno+0x48>
   8cdd0:	00800274 	movhi	r2,9
   8cdd4:	1086d604 	addi	r2,r2,7000
   8cdd8:	e0bfff15 	stw	r2,-4(fp)
   8cddc:	e0bfff17 	ldw	r2,-4(fp)
}
   8cde0:	e037883a 	mov	sp,fp
   8cde4:	dfc00117 	ldw	ra,4(sp)
   8cde8:	df000017 	ldw	fp,0(sp)
   8cdec:	dec00204 	addi	sp,sp,8
   8cdf0:	f800283a 	ret

0008cdf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8cdf4:	defffd04 	addi	sp,sp,-12
   8cdf8:	dfc00215 	stw	ra,8(sp)
   8cdfc:	df000115 	stw	fp,4(sp)
   8ce00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8ce04:	00bfff04 	movi	r2,-4
   8ce08:	00c00274 	movhi	r3,9
   8ce0c:	18f7af04 	addi	r3,r3,-8516
   8ce10:	1885883a 	add	r2,r3,r2
   8ce14:	e0bfff15 	stw	r2,-4(fp)
   8ce18:	00000606 	br	8ce34 <_do_ctors+0x40>
        (*ctor) (); 
   8ce1c:	e0bfff17 	ldw	r2,-4(fp)
   8ce20:	10800017 	ldw	r2,0(r2)
   8ce24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8ce28:	e0bfff17 	ldw	r2,-4(fp)
   8ce2c:	10bfff04 	addi	r2,r2,-4
   8ce30:	e0bfff15 	stw	r2,-4(fp)
   8ce34:	e0ffff17 	ldw	r3,-4(fp)
   8ce38:	00800274 	movhi	r2,9
   8ce3c:	10b7ae04 	addi	r2,r2,-8520
   8ce40:	18bff62e 	bgeu	r3,r2,8ce1c <_do_ctors+0x28>
        (*ctor) (); 
}
   8ce44:	e037883a 	mov	sp,fp
   8ce48:	dfc00117 	ldw	ra,4(sp)
   8ce4c:	df000017 	ldw	fp,0(sp)
   8ce50:	dec00204 	addi	sp,sp,8
   8ce54:	f800283a 	ret

0008ce58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8ce58:	defffd04 	addi	sp,sp,-12
   8ce5c:	dfc00215 	stw	ra,8(sp)
   8ce60:	df000115 	stw	fp,4(sp)
   8ce64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8ce68:	00bfff04 	movi	r2,-4
   8ce6c:	00c00274 	movhi	r3,9
   8ce70:	18f7af04 	addi	r3,r3,-8516
   8ce74:	1885883a 	add	r2,r3,r2
   8ce78:	e0bfff15 	stw	r2,-4(fp)
   8ce7c:	00000606 	br	8ce98 <_do_dtors+0x40>
        (*dtor) (); 
   8ce80:	e0bfff17 	ldw	r2,-4(fp)
   8ce84:	10800017 	ldw	r2,0(r2)
   8ce88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8ce8c:	e0bfff17 	ldw	r2,-4(fp)
   8ce90:	10bfff04 	addi	r2,r2,-4
   8ce94:	e0bfff15 	stw	r2,-4(fp)
   8ce98:	e0ffff17 	ldw	r3,-4(fp)
   8ce9c:	00800274 	movhi	r2,9
   8cea0:	10b7af04 	addi	r2,r2,-8516
   8cea4:	18bff62e 	bgeu	r3,r2,8ce80 <_do_dtors+0x28>
        (*dtor) (); 
}
   8cea8:	e037883a 	mov	sp,fp
   8ceac:	dfc00117 	ldw	ra,4(sp)
   8ceb0:	df000017 	ldw	fp,0(sp)
   8ceb4:	dec00204 	addi	sp,sp,8
   8ceb8:	f800283a 	ret

0008cebc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8cebc:	deffff04 	addi	sp,sp,-4
   8cec0:	df000015 	stw	fp,0(sp)
   8cec4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8cec8:	e037883a 	mov	sp,fp
   8cecc:	df000017 	ldw	fp,0(sp)
   8ced0:	dec00104 	addi	sp,sp,4
   8ced4:	f800283a 	ret

0008ced8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8ced8:	defff904 	addi	sp,sp,-28
   8cedc:	dfc00615 	stw	ra,24(sp)
   8cee0:	df000515 	stw	fp,20(sp)
   8cee4:	df000504 	addi	fp,sp,20
   8cee8:	e13ffc15 	stw	r4,-16(fp)
   8ceec:	e17ffd15 	stw	r5,-12(fp)
   8cef0:	e1bffe15 	stw	r6,-8(fp)
   8cef4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8cef8:	e0800217 	ldw	r2,8(fp)
   8cefc:	d8800015 	stw	r2,0(sp)
   8cf00:	e13ffc17 	ldw	r4,-16(fp)
   8cf04:	e17ffd17 	ldw	r5,-12(fp)
   8cf08:	e1bffe17 	ldw	r6,-8(fp)
   8cf0c:	e1ffff17 	ldw	r7,-4(fp)
   8cf10:	008d0ac0 	call	8d0ac <alt_iic_isr_register>
}  
   8cf14:	e037883a 	mov	sp,fp
   8cf18:	dfc00117 	ldw	ra,4(sp)
   8cf1c:	df000017 	ldw	fp,0(sp)
   8cf20:	dec00204 	addi	sp,sp,8
   8cf24:	f800283a 	ret

0008cf28 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8cf28:	defff904 	addi	sp,sp,-28
   8cf2c:	df000615 	stw	fp,24(sp)
   8cf30:	df000604 	addi	fp,sp,24
   8cf34:	e13ffe15 	stw	r4,-8(fp)
   8cf38:	e17fff15 	stw	r5,-4(fp)
   8cf3c:	e0bfff17 	ldw	r2,-4(fp)
   8cf40:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cf44:	0005303a 	rdctl	r2,status
   8cf48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cf4c:	e0fffb17 	ldw	r3,-20(fp)
   8cf50:	00bfff84 	movi	r2,-2
   8cf54:	1884703a 	and	r2,r3,r2
   8cf58:	1001703a 	wrctl	status,r2
  
  return context;
   8cf5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8cf60:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8cf64:	e0fffc17 	ldw	r3,-16(fp)
   8cf68:	00800044 	movi	r2,1
   8cf6c:	10c4983a 	sll	r2,r2,r3
   8cf70:	1007883a 	mov	r3,r2
   8cf74:	00800274 	movhi	r2,9
   8cf78:	1086da04 	addi	r2,r2,7016
   8cf7c:	10800017 	ldw	r2,0(r2)
   8cf80:	1886b03a 	or	r3,r3,r2
   8cf84:	00800274 	movhi	r2,9
   8cf88:	1086da04 	addi	r2,r2,7016
   8cf8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8cf90:	00800274 	movhi	r2,9
   8cf94:	1086da04 	addi	r2,r2,7016
   8cf98:	10800017 	ldw	r2,0(r2)
   8cf9c:	100170fa 	wrctl	ienable,r2
   8cfa0:	e0bffd17 	ldw	r2,-12(fp)
   8cfa4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cfa8:	e0bffa17 	ldw	r2,-24(fp)
   8cfac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8cfb0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8cfb4:	e037883a 	mov	sp,fp
   8cfb8:	df000017 	ldw	fp,0(sp)
   8cfbc:	dec00104 	addi	sp,sp,4
   8cfc0:	f800283a 	ret

0008cfc4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8cfc4:	defff904 	addi	sp,sp,-28
   8cfc8:	df000615 	stw	fp,24(sp)
   8cfcc:	df000604 	addi	fp,sp,24
   8cfd0:	e13ffe15 	stw	r4,-8(fp)
   8cfd4:	e17fff15 	stw	r5,-4(fp)
   8cfd8:	e0bfff17 	ldw	r2,-4(fp)
   8cfdc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cfe0:	0005303a 	rdctl	r2,status
   8cfe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cfe8:	e0fffb17 	ldw	r3,-20(fp)
   8cfec:	00bfff84 	movi	r2,-2
   8cff0:	1884703a 	and	r2,r3,r2
   8cff4:	1001703a 	wrctl	status,r2
  
  return context;
   8cff8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8cffc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8d000:	e0fffc17 	ldw	r3,-16(fp)
   8d004:	00800044 	movi	r2,1
   8d008:	10c4983a 	sll	r2,r2,r3
   8d00c:	0084303a 	nor	r2,zero,r2
   8d010:	1007883a 	mov	r3,r2
   8d014:	00800274 	movhi	r2,9
   8d018:	1086da04 	addi	r2,r2,7016
   8d01c:	10800017 	ldw	r2,0(r2)
   8d020:	1886703a 	and	r3,r3,r2
   8d024:	00800274 	movhi	r2,9
   8d028:	1086da04 	addi	r2,r2,7016
   8d02c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d030:	00800274 	movhi	r2,9
   8d034:	1086da04 	addi	r2,r2,7016
   8d038:	10800017 	ldw	r2,0(r2)
   8d03c:	100170fa 	wrctl	ienable,r2
   8d040:	e0bffd17 	ldw	r2,-12(fp)
   8d044:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d048:	e0bffa17 	ldw	r2,-24(fp)
   8d04c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d050:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8d054:	e037883a 	mov	sp,fp
   8d058:	df000017 	ldw	fp,0(sp)
   8d05c:	dec00104 	addi	sp,sp,4
   8d060:	f800283a 	ret

0008d064 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8d064:	defffc04 	addi	sp,sp,-16
   8d068:	df000315 	stw	fp,12(sp)
   8d06c:	df000304 	addi	fp,sp,12
   8d070:	e13ffe15 	stw	r4,-8(fp)
   8d074:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8d078:	000530fa 	rdctl	r2,ienable
   8d07c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8d080:	e0ffff17 	ldw	r3,-4(fp)
   8d084:	00800044 	movi	r2,1
   8d088:	10c4983a 	sll	r2,r2,r3
   8d08c:	1007883a 	mov	r3,r2
   8d090:	e0bffd17 	ldw	r2,-12(fp)
   8d094:	1884703a 	and	r2,r3,r2
   8d098:	1004c03a 	cmpne	r2,r2,zero
}
   8d09c:	e037883a 	mov	sp,fp
   8d0a0:	df000017 	ldw	fp,0(sp)
   8d0a4:	dec00104 	addi	sp,sp,4
   8d0a8:	f800283a 	ret

0008d0ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d0ac:	defff404 	addi	sp,sp,-48
   8d0b0:	dfc00b15 	stw	ra,44(sp)
   8d0b4:	df000a15 	stw	fp,40(sp)
   8d0b8:	df000a04 	addi	fp,sp,40
   8d0bc:	e13ffb15 	stw	r4,-20(fp)
   8d0c0:	e17ffc15 	stw	r5,-16(fp)
   8d0c4:	e1bffd15 	stw	r6,-12(fp)
   8d0c8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8d0cc:	00bffa84 	movi	r2,-22
   8d0d0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8d0d4:	e0bffc17 	ldw	r2,-16(fp)
   8d0d8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8d0dc:	e0bff917 	ldw	r2,-28(fp)
   8d0e0:	10800808 	cmpgei	r2,r2,32
   8d0e4:	1000291e 	bne	r2,zero,8d18c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d0e8:	0005303a 	rdctl	r2,status
   8d0ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d0f0:	e0fff717 	ldw	r3,-36(fp)
   8d0f4:	00bfff84 	movi	r2,-2
   8d0f8:	1884703a 	and	r2,r3,r2
   8d0fc:	1001703a 	wrctl	status,r2
  
  return context;
   8d100:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8d104:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8d108:	e0bff917 	ldw	r2,-28(fp)
   8d10c:	00c00274 	movhi	r3,9
   8d110:	18c6e704 	addi	r3,r3,7068
   8d114:	100490fa 	slli	r2,r2,3
   8d118:	10c7883a 	add	r3,r2,r3
   8d11c:	e0bffd17 	ldw	r2,-12(fp)
   8d120:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8d124:	e0bff917 	ldw	r2,-28(fp)
   8d128:	00c00274 	movhi	r3,9
   8d12c:	18c6e704 	addi	r3,r3,7068
   8d130:	100490fa 	slli	r2,r2,3
   8d134:	10c5883a 	add	r2,r2,r3
   8d138:	10c00104 	addi	r3,r2,4
   8d13c:	e0bffe17 	ldw	r2,-8(fp)
   8d140:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8d144:	e0bffd17 	ldw	r2,-12(fp)
   8d148:	1005003a 	cmpeq	r2,r2,zero
   8d14c:	1000051e 	bne	r2,zero,8d164 <alt_iic_isr_register+0xb8>
   8d150:	e17ff917 	ldw	r5,-28(fp)
   8d154:	e13ffb17 	ldw	r4,-20(fp)
   8d158:	008cf280 	call	8cf28 <alt_ic_irq_enable>
   8d15c:	e0bfff15 	stw	r2,-4(fp)
   8d160:	00000406 	br	8d174 <alt_iic_isr_register+0xc8>
   8d164:	e17ff917 	ldw	r5,-28(fp)
   8d168:	e13ffb17 	ldw	r4,-20(fp)
   8d16c:	008cfc40 	call	8cfc4 <alt_ic_irq_disable>
   8d170:	e0bfff15 	stw	r2,-4(fp)
   8d174:	e0bfff17 	ldw	r2,-4(fp)
   8d178:	e0bffa15 	stw	r2,-24(fp)
   8d17c:	e0bff817 	ldw	r2,-32(fp)
   8d180:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d184:	e0bff617 	ldw	r2,-40(fp)
   8d188:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8d18c:	e0bffa17 	ldw	r2,-24(fp)
}
   8d190:	e037883a 	mov	sp,fp
   8d194:	dfc00117 	ldw	ra,4(sp)
   8d198:	df000017 	ldw	fp,0(sp)
   8d19c:	dec00204 	addi	sp,sp,8
   8d1a0:	f800283a 	ret

0008d1a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8d1a4:	defff804 	addi	sp,sp,-32
   8d1a8:	dfc00715 	stw	ra,28(sp)
   8d1ac:	df000615 	stw	fp,24(sp)
   8d1b0:	dc000515 	stw	r16,20(sp)
   8d1b4:	df000504 	addi	fp,sp,20
   8d1b8:	e13ffc15 	stw	r4,-16(fp)
   8d1bc:	e17ffd15 	stw	r5,-12(fp)
   8d1c0:	e1bffe15 	stw	r6,-8(fp)
   8d1c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8d1c8:	e13ffd17 	ldw	r4,-12(fp)
   8d1cc:	e17ffe17 	ldw	r5,-8(fp)
   8d1d0:	e1bfff17 	ldw	r6,-4(fp)
   8d1d4:	008d3ec0 	call	8d3ec <open>
   8d1d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8d1dc:	e0bffb17 	ldw	r2,-20(fp)
   8d1e0:	1004803a 	cmplt	r2,r2,zero
   8d1e4:	10001f1e 	bne	r2,zero,8d264 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8d1e8:	e13ffb17 	ldw	r4,-20(fp)
   8d1ec:	04000274 	movhi	r16,9
   8d1f0:	843b4b04 	addi	r16,r16,-4820
   8d1f4:	01400304 	movi	r5,12
   8d1f8:	0080e140 	call	80e14 <__mulsi3>
   8d1fc:	1405883a 	add	r2,r2,r16
   8d200:	10c00017 	ldw	r3,0(r2)
   8d204:	e0bffc17 	ldw	r2,-16(fp)
   8d208:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8d20c:	e13ffb17 	ldw	r4,-20(fp)
   8d210:	04000274 	movhi	r16,9
   8d214:	843b4b04 	addi	r16,r16,-4820
   8d218:	01400304 	movi	r5,12
   8d21c:	0080e140 	call	80e14 <__mulsi3>
   8d220:	1405883a 	add	r2,r2,r16
   8d224:	10800104 	addi	r2,r2,4
   8d228:	10c00017 	ldw	r3,0(r2)
   8d22c:	e0bffc17 	ldw	r2,-16(fp)
   8d230:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8d234:	e13ffb17 	ldw	r4,-20(fp)
   8d238:	04000274 	movhi	r16,9
   8d23c:	843b4b04 	addi	r16,r16,-4820
   8d240:	01400304 	movi	r5,12
   8d244:	0080e140 	call	80e14 <__mulsi3>
   8d248:	1405883a 	add	r2,r2,r16
   8d24c:	10800204 	addi	r2,r2,8
   8d250:	10c00017 	ldw	r3,0(r2)
   8d254:	e0bffc17 	ldw	r2,-16(fp)
   8d258:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8d25c:	e13ffb17 	ldw	r4,-20(fp)
   8d260:	008b2000 	call	8b200 <alt_release_fd>
  }
} 
   8d264:	e037883a 	mov	sp,fp
   8d268:	dfc00217 	ldw	ra,8(sp)
   8d26c:	df000117 	ldw	fp,4(sp)
   8d270:	dc000017 	ldw	r16,0(sp)
   8d274:	dec00304 	addi	sp,sp,12
   8d278:	f800283a 	ret

0008d27c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8d27c:	defffb04 	addi	sp,sp,-20
   8d280:	dfc00415 	stw	ra,16(sp)
   8d284:	df000315 	stw	fp,12(sp)
   8d288:	df000304 	addi	fp,sp,12
   8d28c:	e13ffd15 	stw	r4,-12(fp)
   8d290:	e17ffe15 	stw	r5,-8(fp)
   8d294:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8d298:	01000274 	movhi	r4,9
   8d29c:	213b4e04 	addi	r4,r4,-4808
   8d2a0:	e17ffd17 	ldw	r5,-12(fp)
   8d2a4:	01800044 	movi	r6,1
   8d2a8:	01c07fc4 	movi	r7,511
   8d2ac:	008d1a40 	call	8d1a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8d2b0:	01000274 	movhi	r4,9
   8d2b4:	213b4b04 	addi	r4,r4,-4820
   8d2b8:	e17ffe17 	ldw	r5,-8(fp)
   8d2bc:	000d883a 	mov	r6,zero
   8d2c0:	01c07fc4 	movi	r7,511
   8d2c4:	008d1a40 	call	8d1a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8d2c8:	01000274 	movhi	r4,9
   8d2cc:	213b5104 	addi	r4,r4,-4796
   8d2d0:	e17fff17 	ldw	r5,-4(fp)
   8d2d4:	01800044 	movi	r6,1
   8d2d8:	01c07fc4 	movi	r7,511
   8d2dc:	008d1a40 	call	8d1a4 <alt_open_fd>
}  
   8d2e0:	e037883a 	mov	sp,fp
   8d2e4:	dfc00117 	ldw	ra,4(sp)
   8d2e8:	df000017 	ldw	fp,0(sp)
   8d2ec:	dec00204 	addi	sp,sp,8
   8d2f0:	f800283a 	ret

0008d2f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8d2f4:	defffa04 	addi	sp,sp,-24
   8d2f8:	dfc00515 	stw	ra,20(sp)
   8d2fc:	df000415 	stw	fp,16(sp)
   8d300:	dc000315 	stw	r16,12(sp)
   8d304:	df000304 	addi	fp,sp,12
   8d308:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8d30c:	e0bffe17 	ldw	r2,-8(fp)
   8d310:	10800217 	ldw	r2,8(r2)
   8d314:	10d00034 	orhi	r3,r2,16384
   8d318:	e0bffe17 	ldw	r2,-8(fp)
   8d31c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d320:	e03ffd15 	stw	zero,-12(fp)
   8d324:	00002306 	br	8d3b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d328:	e13ffd17 	ldw	r4,-12(fp)
   8d32c:	04000274 	movhi	r16,9
   8d330:	843b4b04 	addi	r16,r16,-4820
   8d334:	01400304 	movi	r5,12
   8d338:	0080e140 	call	80e14 <__mulsi3>
   8d33c:	1405883a 	add	r2,r2,r16
   8d340:	10c00017 	ldw	r3,0(r2)
   8d344:	e0bffe17 	ldw	r2,-8(fp)
   8d348:	10800017 	ldw	r2,0(r2)
   8d34c:	1880161e 	bne	r3,r2,8d3a8 <alt_file_locked+0xb4>
   8d350:	e13ffd17 	ldw	r4,-12(fp)
   8d354:	04000274 	movhi	r16,9
   8d358:	843b4b04 	addi	r16,r16,-4820
   8d35c:	01400304 	movi	r5,12
   8d360:	0080e140 	call	80e14 <__mulsi3>
   8d364:	1405883a 	add	r2,r2,r16
   8d368:	10800204 	addi	r2,r2,8
   8d36c:	10800017 	ldw	r2,0(r2)
   8d370:	1004403a 	cmpge	r2,r2,zero
   8d374:	10000c1e 	bne	r2,zero,8d3a8 <alt_file_locked+0xb4>
   8d378:	e13ffd17 	ldw	r4,-12(fp)
   8d37c:	01400304 	movi	r5,12
   8d380:	0080e140 	call	80e14 <__mulsi3>
   8d384:	1007883a 	mov	r3,r2
   8d388:	00800274 	movhi	r2,9
   8d38c:	10bb4b04 	addi	r2,r2,-4820
   8d390:	1887883a 	add	r3,r3,r2
   8d394:	e0bffe17 	ldw	r2,-8(fp)
   8d398:	18800326 	beq	r3,r2,8d3a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d39c:	00bffcc4 	movi	r2,-13
   8d3a0:	e0bfff15 	stw	r2,-4(fp)
   8d3a4:	00000a06 	br	8d3d0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d3a8:	e0bffd17 	ldw	r2,-12(fp)
   8d3ac:	10800044 	addi	r2,r2,1
   8d3b0:	e0bffd15 	stw	r2,-12(fp)
   8d3b4:	00800274 	movhi	r2,9
   8d3b8:	10bfff04 	addi	r2,r2,-4
   8d3bc:	10800017 	ldw	r2,0(r2)
   8d3c0:	1007883a 	mov	r3,r2
   8d3c4:	e0bffd17 	ldw	r2,-12(fp)
   8d3c8:	18bfd72e 	bgeu	r3,r2,8d328 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d3cc:	e03fff15 	stw	zero,-4(fp)
   8d3d0:	e0bfff17 	ldw	r2,-4(fp)
}
   8d3d4:	e037883a 	mov	sp,fp
   8d3d8:	dfc00217 	ldw	ra,8(sp)
   8d3dc:	df000117 	ldw	fp,4(sp)
   8d3e0:	dc000017 	ldw	r16,0(sp)
   8d3e4:	dec00304 	addi	sp,sp,12
   8d3e8:	f800283a 	ret

0008d3ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d3ec:	defff404 	addi	sp,sp,-48
   8d3f0:	dfc00b15 	stw	ra,44(sp)
   8d3f4:	df000a15 	stw	fp,40(sp)
   8d3f8:	df000a04 	addi	fp,sp,40
   8d3fc:	e13ffb15 	stw	r4,-20(fp)
   8d400:	e17ffc15 	stw	r5,-16(fp)
   8d404:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d408:	00bfffc4 	movi	r2,-1
   8d40c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8d410:	00bffb44 	movi	r2,-19
   8d414:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8d418:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d41c:	e13ffb17 	ldw	r4,-20(fp)
   8d420:	01400274 	movhi	r5,9
   8d424:	297ffd04 	addi	r5,r5,-12
   8d428:	008d79c0 	call	8d79c <alt_find_dev>
   8d42c:	e0bffa15 	stw	r2,-24(fp)
   8d430:	e0bffa17 	ldw	r2,-24(fp)
   8d434:	1004c03a 	cmpne	r2,r2,zero
   8d438:	1000051e 	bne	r2,zero,8d450 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d43c:	e13ffb17 	ldw	r4,-20(fp)
   8d440:	008d8300 	call	8d830 <alt_find_file>
   8d444:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8d448:	00800044 	movi	r2,1
   8d44c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d450:	e0bffa17 	ldw	r2,-24(fp)
   8d454:	1005003a 	cmpeq	r2,r2,zero
   8d458:	1000311e 	bne	r2,zero,8d520 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d45c:	e13ffa17 	ldw	r4,-24(fp)
   8d460:	008d9500 	call	8d950 <alt_get_fd>
   8d464:	e0bff815 	stw	r2,-32(fp)
   8d468:	e0bff817 	ldw	r2,-32(fp)
   8d46c:	1004403a 	cmpge	r2,r2,zero
   8d470:	1000031e 	bne	r2,zero,8d480 <open+0x94>
    {
      status = index;
   8d474:	e0bff817 	ldw	r2,-32(fp)
   8d478:	e0bff715 	stw	r2,-36(fp)
   8d47c:	00002a06 	br	8d528 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d480:	e13ff817 	ldw	r4,-32(fp)
   8d484:	01400304 	movi	r5,12
   8d488:	0080e140 	call	80e14 <__mulsi3>
   8d48c:	1007883a 	mov	r3,r2
   8d490:	00800274 	movhi	r2,9
   8d494:	10bb4b04 	addi	r2,r2,-4820
   8d498:	1885883a 	add	r2,r3,r2
   8d49c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d4a0:	e0fffc17 	ldw	r3,-16(fp)
   8d4a4:	00900034 	movhi	r2,16384
   8d4a8:	10bfffc4 	addi	r2,r2,-1
   8d4ac:	1886703a 	and	r3,r3,r2
   8d4b0:	e0bff917 	ldw	r2,-28(fp)
   8d4b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d4b8:	e0bff617 	ldw	r2,-40(fp)
   8d4bc:	1004c03a 	cmpne	r2,r2,zero
   8d4c0:	1000061e 	bne	r2,zero,8d4dc <open+0xf0>
   8d4c4:	e13ff917 	ldw	r4,-28(fp)
   8d4c8:	008d2f40 	call	8d2f4 <alt_file_locked>
   8d4cc:	e0bff715 	stw	r2,-36(fp)
   8d4d0:	e0bff717 	ldw	r2,-36(fp)
   8d4d4:	1004803a 	cmplt	r2,r2,zero
   8d4d8:	1000131e 	bne	r2,zero,8d528 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d4dc:	e0bffa17 	ldw	r2,-24(fp)
   8d4e0:	10800317 	ldw	r2,12(r2)
   8d4e4:	1005003a 	cmpeq	r2,r2,zero
   8d4e8:	1000091e 	bne	r2,zero,8d510 <open+0x124>
   8d4ec:	e0bffa17 	ldw	r2,-24(fp)
   8d4f0:	10800317 	ldw	r2,12(r2)
   8d4f4:	e13ff917 	ldw	r4,-28(fp)
   8d4f8:	e17ffb17 	ldw	r5,-20(fp)
   8d4fc:	e1bffc17 	ldw	r6,-16(fp)
   8d500:	e1fffd17 	ldw	r7,-12(fp)
   8d504:	103ee83a 	callr	r2
   8d508:	e0bfff15 	stw	r2,-4(fp)
   8d50c:	00000106 	br	8d514 <open+0x128>
   8d510:	e03fff15 	stw	zero,-4(fp)
   8d514:	e0bfff17 	ldw	r2,-4(fp)
   8d518:	e0bff715 	stw	r2,-36(fp)
   8d51c:	00000206 	br	8d528 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d520:	00bffb44 	movi	r2,-19
   8d524:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d528:	e0bff717 	ldw	r2,-36(fp)
   8d52c:	1004403a 	cmpge	r2,r2,zero
   8d530:	1000091e 	bne	r2,zero,8d558 <open+0x16c>
  {
    alt_release_fd (index);  
   8d534:	e13ff817 	ldw	r4,-32(fp)
   8d538:	008b2000 	call	8b200 <alt_release_fd>
    ALT_ERRNO = -status;
   8d53c:	008d5780 	call	8d578 <alt_get_errno>
   8d540:	e0fff717 	ldw	r3,-36(fp)
   8d544:	00c7c83a 	sub	r3,zero,r3
   8d548:	10c00015 	stw	r3,0(r2)
    return -1;
   8d54c:	00bfffc4 	movi	r2,-1
   8d550:	e0bffe15 	stw	r2,-8(fp)
   8d554:	00000206 	br	8d560 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8d558:	e0bff817 	ldw	r2,-32(fp)
   8d55c:	e0bffe15 	stw	r2,-8(fp)
   8d560:	e0bffe17 	ldw	r2,-8(fp)
}
   8d564:	e037883a 	mov	sp,fp
   8d568:	dfc00117 	ldw	ra,4(sp)
   8d56c:	df000017 	ldw	fp,0(sp)
   8d570:	dec00204 	addi	sp,sp,8
   8d574:	f800283a 	ret

0008d578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d578:	defffd04 	addi	sp,sp,-12
   8d57c:	dfc00215 	stw	ra,8(sp)
   8d580:	df000115 	stw	fp,4(sp)
   8d584:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d588:	00800274 	movhi	r2,9
   8d58c:	10800004 	addi	r2,r2,0
   8d590:	10800017 	ldw	r2,0(r2)
   8d594:	1005003a 	cmpeq	r2,r2,zero
   8d598:	1000061e 	bne	r2,zero,8d5b4 <alt_get_errno+0x3c>
   8d59c:	00800274 	movhi	r2,9
   8d5a0:	10800004 	addi	r2,r2,0
   8d5a4:	10800017 	ldw	r2,0(r2)
   8d5a8:	103ee83a 	callr	r2
   8d5ac:	e0bfff15 	stw	r2,-4(fp)
   8d5b0:	00000306 	br	8d5c0 <alt_get_errno+0x48>
   8d5b4:	00800274 	movhi	r2,9
   8d5b8:	1086d604 	addi	r2,r2,7000
   8d5bc:	e0bfff15 	stw	r2,-4(fp)
   8d5c0:	e0bfff17 	ldw	r2,-4(fp)
}
   8d5c4:	e037883a 	mov	sp,fp
   8d5c8:	dfc00117 	ldw	ra,4(sp)
   8d5cc:	df000017 	ldw	fp,0(sp)
   8d5d0:	dec00204 	addi	sp,sp,8
   8d5d4:	f800283a 	ret

0008d5d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8d5d8:	defffa04 	addi	sp,sp,-24
   8d5dc:	df000515 	stw	fp,20(sp)
   8d5e0:	df000504 	addi	fp,sp,20
   8d5e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d5e8:	0005303a 	rdctl	r2,status
   8d5ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d5f0:	e0fffd17 	ldw	r3,-12(fp)
   8d5f4:	00bfff84 	movi	r2,-2
   8d5f8:	1884703a 	and	r2,r3,r2
   8d5fc:	1001703a 	wrctl	status,r2
  
  return context;
   8d600:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8d604:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8d608:	e0bfff17 	ldw	r2,-4(fp)
   8d60c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8d610:	e0bffc17 	ldw	r2,-16(fp)
   8d614:	10c00017 	ldw	r3,0(r2)
   8d618:	e0bffc17 	ldw	r2,-16(fp)
   8d61c:	10800117 	ldw	r2,4(r2)
   8d620:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8d624:	e0bffc17 	ldw	r2,-16(fp)
   8d628:	10c00117 	ldw	r3,4(r2)
   8d62c:	e0bffc17 	ldw	r2,-16(fp)
   8d630:	10800017 	ldw	r2,0(r2)
   8d634:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8d638:	e0fffc17 	ldw	r3,-16(fp)
   8d63c:	e0bffc17 	ldw	r2,-16(fp)
   8d640:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8d644:	e0fffc17 	ldw	r3,-16(fp)
   8d648:	e0bffc17 	ldw	r2,-16(fp)
   8d64c:	18800015 	stw	r2,0(r3)
   8d650:	e0bffe17 	ldw	r2,-8(fp)
   8d654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d658:	e0bffb17 	ldw	r2,-20(fp)
   8d65c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8d660:	e037883a 	mov	sp,fp
   8d664:	df000017 	ldw	fp,0(sp)
   8d668:	dec00104 	addi	sp,sp,4
   8d66c:	f800283a 	ret

0008d670 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8d670:	defffb04 	addi	sp,sp,-20
   8d674:	dfc00415 	stw	ra,16(sp)
   8d678:	df000315 	stw	fp,12(sp)
   8d67c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8d680:	d0a00f17 	ldw	r2,-32708(gp)
   8d684:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8d688:	d0a6e817 	ldw	r2,-25696(gp)
   8d68c:	10800044 	addi	r2,r2,1
   8d690:	d0a6e815 	stw	r2,-25696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d694:	00003106 	br	8d75c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8d698:	e0bffe17 	ldw	r2,-8(fp)
   8d69c:	10800017 	ldw	r2,0(r2)
   8d6a0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8d6a4:	e0bffe17 	ldw	r2,-8(fp)
   8d6a8:	10800403 	ldbu	r2,16(r2)
   8d6ac:	10803fcc 	andi	r2,r2,255
   8d6b0:	1005003a 	cmpeq	r2,r2,zero
   8d6b4:	1000051e 	bne	r2,zero,8d6cc <alt_tick+0x5c>
   8d6b8:	d0a6e817 	ldw	r2,-25696(gp)
   8d6bc:	1004c03a 	cmpne	r2,r2,zero
   8d6c0:	1000021e 	bne	r2,zero,8d6cc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8d6c4:	e0bffe17 	ldw	r2,-8(fp)
   8d6c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8d6cc:	e0bffe17 	ldw	r2,-8(fp)
   8d6d0:	10c00217 	ldw	r3,8(r2)
   8d6d4:	d0a6e817 	ldw	r2,-25696(gp)
   8d6d8:	10c01e36 	bltu	r2,r3,8d754 <alt_tick+0xe4>
   8d6dc:	e0bffe17 	ldw	r2,-8(fp)
   8d6e0:	10800403 	ldbu	r2,16(r2)
   8d6e4:	10803fcc 	andi	r2,r2,255
   8d6e8:	1004c03a 	cmpne	r2,r2,zero
   8d6ec:	1000191e 	bne	r2,zero,8d754 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8d6f0:	e0bffe17 	ldw	r2,-8(fp)
   8d6f4:	10c00317 	ldw	r3,12(r2)
   8d6f8:	e0bffe17 	ldw	r2,-8(fp)
   8d6fc:	11000517 	ldw	r4,20(r2)
   8d700:	183ee83a 	callr	r3
   8d704:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8d708:	e0bffd17 	ldw	r2,-12(fp)
   8d70c:	1004c03a 	cmpne	r2,r2,zero
   8d710:	1000031e 	bne	r2,zero,8d720 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8d714:	e13ffe17 	ldw	r4,-8(fp)
   8d718:	008d5d80 	call	8d5d8 <alt_alarm_stop>
   8d71c:	00000d06 	br	8d754 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8d720:	e0bffe17 	ldw	r2,-8(fp)
   8d724:	10c00217 	ldw	r3,8(r2)
   8d728:	e0bffd17 	ldw	r2,-12(fp)
   8d72c:	1887883a 	add	r3,r3,r2
   8d730:	e0bffe17 	ldw	r2,-8(fp)
   8d734:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8d738:	e0bffe17 	ldw	r2,-8(fp)
   8d73c:	10c00217 	ldw	r3,8(r2)
   8d740:	d0a6e817 	ldw	r2,-25696(gp)
   8d744:	1880032e 	bgeu	r3,r2,8d754 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8d748:	e0fffe17 	ldw	r3,-8(fp)
   8d74c:	00800044 	movi	r2,1
   8d750:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8d754:	e0bfff17 	ldw	r2,-4(fp)
   8d758:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d75c:	d0e00f04 	addi	r3,gp,-32708
   8d760:	e0bffe17 	ldw	r2,-8(fp)
   8d764:	10ffcc1e 	bne	r2,r3,8d698 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8d768:	e037883a 	mov	sp,fp
   8d76c:	dfc00117 	ldw	ra,4(sp)
   8d770:	df000017 	ldw	fp,0(sp)
   8d774:	dec00204 	addi	sp,sp,8
   8d778:	f800283a 	ret

0008d77c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8d77c:	deffff04 	addi	sp,sp,-4
   8d780:	df000015 	stw	fp,0(sp)
   8d784:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8d788:	000170fa 	wrctl	ienable,zero
}
   8d78c:	e037883a 	mov	sp,fp
   8d790:	df000017 	ldw	fp,0(sp)
   8d794:	dec00104 	addi	sp,sp,4
   8d798:	f800283a 	ret

0008d79c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d79c:	defff904 	addi	sp,sp,-28
   8d7a0:	dfc00615 	stw	ra,24(sp)
   8d7a4:	df000515 	stw	fp,20(sp)
   8d7a8:	df000504 	addi	fp,sp,20
   8d7ac:	e13ffd15 	stw	r4,-12(fp)
   8d7b0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d7b4:	e0bffe17 	ldw	r2,-8(fp)
   8d7b8:	10800017 	ldw	r2,0(r2)
   8d7bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d7c0:	e13ffd17 	ldw	r4,-12(fp)
   8d7c4:	0087f9c0 	call	87f9c <strlen>
   8d7c8:	10800044 	addi	r2,r2,1
   8d7cc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d7d0:	00000d06 	br	8d808 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8d7d4:	e0bffc17 	ldw	r2,-16(fp)
   8d7d8:	11000217 	ldw	r4,8(r2)
   8d7dc:	e1bffb17 	ldw	r6,-20(fp)
   8d7e0:	e17ffd17 	ldw	r5,-12(fp)
   8d7e4:	008dafc0 	call	8dafc <memcmp>
   8d7e8:	1004c03a 	cmpne	r2,r2,zero
   8d7ec:	1000031e 	bne	r2,zero,8d7fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8d7f0:	e0bffc17 	ldw	r2,-16(fp)
   8d7f4:	e0bfff15 	stw	r2,-4(fp)
   8d7f8:	00000706 	br	8d818 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8d7fc:	e0bffc17 	ldw	r2,-16(fp)
   8d800:	10800017 	ldw	r2,0(r2)
   8d804:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d808:	e0fffe17 	ldw	r3,-8(fp)
   8d80c:	e0bffc17 	ldw	r2,-16(fp)
   8d810:	10fff01e 	bne	r2,r3,8d7d4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8d814:	e03fff15 	stw	zero,-4(fp)
   8d818:	e0bfff17 	ldw	r2,-4(fp)
}
   8d81c:	e037883a 	mov	sp,fp
   8d820:	dfc00117 	ldw	ra,4(sp)
   8d824:	df000017 	ldw	fp,0(sp)
   8d828:	dec00204 	addi	sp,sp,8
   8d82c:	f800283a 	ret

0008d830 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8d830:	defffa04 	addi	sp,sp,-24
   8d834:	dfc00515 	stw	ra,20(sp)
   8d838:	df000415 	stw	fp,16(sp)
   8d83c:	df000404 	addi	fp,sp,16
   8d840:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8d844:	00800274 	movhi	r2,9
   8d848:	10bffb04 	addi	r2,r2,-20
   8d84c:	10800017 	ldw	r2,0(r2)
   8d850:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d854:	00003306 	br	8d924 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8d858:	e0bffd17 	ldw	r2,-12(fp)
   8d85c:	11000217 	ldw	r4,8(r2)
   8d860:	0087f9c0 	call	87f9c <strlen>
   8d864:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8d868:	e0bffd17 	ldw	r2,-12(fp)
   8d86c:	10c00217 	ldw	r3,8(r2)
   8d870:	e0bffc17 	ldw	r2,-16(fp)
   8d874:	1885883a 	add	r2,r3,r2
   8d878:	10bfffc4 	addi	r2,r2,-1
   8d87c:	10800003 	ldbu	r2,0(r2)
   8d880:	10803fcc 	andi	r2,r2,255
   8d884:	1080201c 	xori	r2,r2,128
   8d888:	10bfe004 	addi	r2,r2,-128
   8d88c:	10800bd8 	cmpnei	r2,r2,47
   8d890:	1000031e 	bne	r2,zero,8d8a0 <alt_find_file+0x70>
    {
      len -= 1;
   8d894:	e0bffc17 	ldw	r2,-16(fp)
   8d898:	10bfffc4 	addi	r2,r2,-1
   8d89c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8d8a0:	e0bffc17 	ldw	r2,-16(fp)
   8d8a4:	1007883a 	mov	r3,r2
   8d8a8:	e0bffe17 	ldw	r2,-8(fp)
   8d8ac:	1885883a 	add	r2,r3,r2
   8d8b0:	10800003 	ldbu	r2,0(r2)
   8d8b4:	10803fcc 	andi	r2,r2,255
   8d8b8:	1080201c 	xori	r2,r2,128
   8d8bc:	10bfe004 	addi	r2,r2,-128
   8d8c0:	10800be0 	cmpeqi	r2,r2,47
   8d8c4:	10000a1e 	bne	r2,zero,8d8f0 <alt_find_file+0xc0>
   8d8c8:	e0bffc17 	ldw	r2,-16(fp)
   8d8cc:	1007883a 	mov	r3,r2
   8d8d0:	e0bffe17 	ldw	r2,-8(fp)
   8d8d4:	1885883a 	add	r2,r3,r2
   8d8d8:	10800003 	ldbu	r2,0(r2)
   8d8dc:	10803fcc 	andi	r2,r2,255
   8d8e0:	1080201c 	xori	r2,r2,128
   8d8e4:	10bfe004 	addi	r2,r2,-128
   8d8e8:	1004c03a 	cmpne	r2,r2,zero
   8d8ec:	10000a1e 	bne	r2,zero,8d918 <alt_find_file+0xe8>
   8d8f0:	e0bffd17 	ldw	r2,-12(fp)
   8d8f4:	11000217 	ldw	r4,8(r2)
   8d8f8:	e1bffc17 	ldw	r6,-16(fp)
   8d8fc:	e17ffe17 	ldw	r5,-8(fp)
   8d900:	008dafc0 	call	8dafc <memcmp>
   8d904:	1004c03a 	cmpne	r2,r2,zero
   8d908:	1000031e 	bne	r2,zero,8d918 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8d90c:	e0bffd17 	ldw	r2,-12(fp)
   8d910:	e0bfff15 	stw	r2,-4(fp)
   8d914:	00000806 	br	8d938 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8d918:	e0bffd17 	ldw	r2,-12(fp)
   8d91c:	10800017 	ldw	r2,0(r2)
   8d920:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d924:	00c00274 	movhi	r3,9
   8d928:	18fffb04 	addi	r3,r3,-20
   8d92c:	e0bffd17 	ldw	r2,-12(fp)
   8d930:	10ffc91e 	bne	r2,r3,8d858 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8d934:	e03fff15 	stw	zero,-4(fp)
   8d938:	e0bfff17 	ldw	r2,-4(fp)
}
   8d93c:	e037883a 	mov	sp,fp
   8d940:	dfc00117 	ldw	ra,4(sp)
   8d944:	df000017 	ldw	fp,0(sp)
   8d948:	dec00204 	addi	sp,sp,8
   8d94c:	f800283a 	ret

0008d950 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8d950:	defffa04 	addi	sp,sp,-24
   8d954:	dfc00515 	stw	ra,20(sp)
   8d958:	df000415 	stw	fp,16(sp)
   8d95c:	dc000315 	stw	r16,12(sp)
   8d960:	df000304 	addi	fp,sp,12
   8d964:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8d968:	00bffa04 	movi	r2,-24
   8d96c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d970:	e03ffe15 	stw	zero,-8(fp)
   8d974:	00002006 	br	8d9f8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8d978:	e13ffe17 	ldw	r4,-8(fp)
   8d97c:	04000274 	movhi	r16,9
   8d980:	843b4b04 	addi	r16,r16,-4820
   8d984:	01400304 	movi	r5,12
   8d988:	0080e140 	call	80e14 <__mulsi3>
   8d98c:	1405883a 	add	r2,r2,r16
   8d990:	10800017 	ldw	r2,0(r2)
   8d994:	1004c03a 	cmpne	r2,r2,zero
   8d998:	1000141e 	bne	r2,zero,8d9ec <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8d99c:	e13ffe17 	ldw	r4,-8(fp)
   8d9a0:	04000274 	movhi	r16,9
   8d9a4:	843b4b04 	addi	r16,r16,-4820
   8d9a8:	01400304 	movi	r5,12
   8d9ac:	0080e140 	call	80e14 <__mulsi3>
   8d9b0:	1407883a 	add	r3,r2,r16
   8d9b4:	e0bfff17 	ldw	r2,-4(fp)
   8d9b8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8d9bc:	00800274 	movhi	r2,9
   8d9c0:	10bfff04 	addi	r2,r2,-4
   8d9c4:	10c00017 	ldw	r3,0(r2)
   8d9c8:	e0bffe17 	ldw	r2,-8(fp)
   8d9cc:	1880040e 	bge	r3,r2,8d9e0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8d9d0:	00c00274 	movhi	r3,9
   8d9d4:	18ffff04 	addi	r3,r3,-4
   8d9d8:	e0bffe17 	ldw	r2,-8(fp)
   8d9dc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8d9e0:	e0bffe17 	ldw	r2,-8(fp)
   8d9e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8d9e8:	00000606 	br	8da04 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d9ec:	e0bffe17 	ldw	r2,-8(fp)
   8d9f0:	10800044 	addi	r2,r2,1
   8d9f4:	e0bffe15 	stw	r2,-8(fp)
   8d9f8:	e0bffe17 	ldw	r2,-8(fp)
   8d9fc:	10800810 	cmplti	r2,r2,32
   8da00:	103fdd1e 	bne	r2,zero,8d978 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8da04:	e0bffd17 	ldw	r2,-12(fp)
}
   8da08:	e037883a 	mov	sp,fp
   8da0c:	dfc00217 	ldw	ra,8(sp)
   8da10:	df000117 	ldw	fp,4(sp)
   8da14:	dc000017 	ldw	r16,0(sp)
   8da18:	dec00304 	addi	sp,sp,12
   8da1c:	f800283a 	ret

0008da20 <atexit>:
   8da20:	200b883a 	mov	r5,r4
   8da24:	000d883a 	mov	r6,zero
   8da28:	0009883a 	mov	r4,zero
   8da2c:	000f883a 	mov	r7,zero
   8da30:	008db701 	jmpi	8db70 <__register_exitproc>

0008da34 <exit>:
   8da34:	defffe04 	addi	sp,sp,-8
   8da38:	000b883a 	mov	r5,zero
   8da3c:	dc000015 	stw	r16,0(sp)
   8da40:	dfc00115 	stw	ra,4(sp)
   8da44:	2021883a 	mov	r16,r4
   8da48:	008dca80 	call	8dca8 <__call_exitprocs>
   8da4c:	00800274 	movhi	r2,9
   8da50:	10bff604 	addi	r2,r2,-40
   8da54:	11000017 	ldw	r4,0(r2)
   8da58:	20800f17 	ldw	r2,60(r4)
   8da5c:	10000126 	beq	r2,zero,8da64 <exit+0x30>
   8da60:	103ee83a 	callr	r2
   8da64:	8009883a 	mov	r4,r16
   8da68:	008de980 	call	8de98 <_exit>

0008da6c <_fputs_r>:
   8da6c:	defff804 	addi	sp,sp,-32
   8da70:	dc000515 	stw	r16,20(sp)
   8da74:	2021883a 	mov	r16,r4
   8da78:	2809883a 	mov	r4,r5
   8da7c:	dc400615 	stw	r17,24(sp)
   8da80:	dfc00715 	stw	ra,28(sp)
   8da84:	3023883a 	mov	r17,r6
   8da88:	d9400015 	stw	r5,0(sp)
   8da8c:	0087f9c0 	call	87f9c <strlen>
   8da90:	00c00044 	movi	r3,1
   8da94:	d8800115 	stw	r2,4(sp)
   8da98:	d8c00315 	stw	r3,12(sp)
   8da9c:	d8800415 	stw	r2,16(sp)
   8daa0:	dec00215 	stw	sp,8(sp)
   8daa4:	80000326 	beq	r16,zero,8dab4 <_fputs_r+0x48>
   8daa8:	80800e17 	ldw	r2,56(r16)
   8daac:	8009883a 	mov	r4,r16
   8dab0:	10000926 	beq	r2,zero,8dad8 <_fputs_r+0x6c>
   8dab4:	8009883a 	mov	r4,r16
   8dab8:	880b883a 	mov	r5,r17
   8dabc:	d9800204 	addi	r6,sp,8
   8dac0:	00853840 	call	85384 <__sfvwrite_r>
   8dac4:	dfc00717 	ldw	ra,28(sp)
   8dac8:	dc400617 	ldw	r17,24(sp)
   8dacc:	dc000517 	ldw	r16,20(sp)
   8dad0:	dec00804 	addi	sp,sp,32
   8dad4:	f800283a 	ret
   8dad8:	0084cb80 	call	84cb8 <__sinit>
   8dadc:	003ff506 	br	8dab4 <_fputs_r+0x48>

0008dae0 <fputs>:
   8dae0:	01800274 	movhi	r6,9
   8dae4:	31bff504 	addi	r6,r6,-44
   8dae8:	2007883a 	mov	r3,r4
   8daec:	31000017 	ldw	r4,0(r6)
   8daf0:	280d883a 	mov	r6,r5
   8daf4:	180b883a 	mov	r5,r3
   8daf8:	008da6c1 	jmpi	8da6c <_fputs_r>

0008dafc <memcmp>:
   8dafc:	00c000c4 	movi	r3,3
   8db00:	1980032e 	bgeu	r3,r6,8db10 <memcmp+0x14>
   8db04:	2144b03a 	or	r2,r4,r5
   8db08:	10c4703a 	and	r2,r2,r3
   8db0c:	10000f26 	beq	r2,zero,8db4c <memcmp+0x50>
   8db10:	31ffffc4 	addi	r7,r6,-1
   8db14:	3000061e 	bne	r6,zero,8db30 <memcmp+0x34>
   8db18:	00000a06 	br	8db44 <memcmp+0x48>
   8db1c:	39ffffc4 	addi	r7,r7,-1
   8db20:	00bfffc4 	movi	r2,-1
   8db24:	21000044 	addi	r4,r4,1
   8db28:	29400044 	addi	r5,r5,1
   8db2c:	38800526 	beq	r7,r2,8db44 <memcmp+0x48>
   8db30:	20c00003 	ldbu	r3,0(r4)
   8db34:	28800003 	ldbu	r2,0(r5)
   8db38:	18bff826 	beq	r3,r2,8db1c <memcmp+0x20>
   8db3c:	1885c83a 	sub	r2,r3,r2
   8db40:	f800283a 	ret
   8db44:	0005883a 	mov	r2,zero
   8db48:	f800283a 	ret
   8db4c:	180f883a 	mov	r7,r3
   8db50:	20c00017 	ldw	r3,0(r4)
   8db54:	28800017 	ldw	r2,0(r5)
   8db58:	18bfed1e 	bne	r3,r2,8db10 <memcmp+0x14>
   8db5c:	31bfff04 	addi	r6,r6,-4
   8db60:	21000104 	addi	r4,r4,4
   8db64:	29400104 	addi	r5,r5,4
   8db68:	39bff936 	bltu	r7,r6,8db50 <memcmp+0x54>
   8db6c:	003fe806 	br	8db10 <memcmp+0x14>

0008db70 <__register_exitproc>:
   8db70:	defffa04 	addi	sp,sp,-24
   8db74:	00800274 	movhi	r2,9
   8db78:	10bff604 	addi	r2,r2,-40
   8db7c:	dc000015 	stw	r16,0(sp)
   8db80:	14000017 	ldw	r16,0(r2)
   8db84:	dd000415 	stw	r20,16(sp)
   8db88:	2829883a 	mov	r20,r5
   8db8c:	81405217 	ldw	r5,328(r16)
   8db90:	dcc00315 	stw	r19,12(sp)
   8db94:	dc800215 	stw	r18,8(sp)
   8db98:	dc400115 	stw	r17,4(sp)
   8db9c:	dfc00515 	stw	ra,20(sp)
   8dba0:	2023883a 	mov	r17,r4
   8dba4:	3027883a 	mov	r19,r6
   8dba8:	3825883a 	mov	r18,r7
   8dbac:	28002526 	beq	r5,zero,8dc44 <__register_exitproc+0xd4>
   8dbb0:	29000117 	ldw	r4,4(r5)
   8dbb4:	008007c4 	movi	r2,31
   8dbb8:	11002716 	blt	r2,r4,8dc58 <__register_exitproc+0xe8>
   8dbbc:	8800101e 	bne	r17,zero,8dc00 <__register_exitproc+0x90>
   8dbc0:	2105883a 	add	r2,r4,r4
   8dbc4:	1085883a 	add	r2,r2,r2
   8dbc8:	20c00044 	addi	r3,r4,1
   8dbcc:	1145883a 	add	r2,r2,r5
   8dbd0:	0009883a 	mov	r4,zero
   8dbd4:	15000215 	stw	r20,8(r2)
   8dbd8:	28c00115 	stw	r3,4(r5)
   8dbdc:	2005883a 	mov	r2,r4
   8dbe0:	dfc00517 	ldw	ra,20(sp)
   8dbe4:	dd000417 	ldw	r20,16(sp)
   8dbe8:	dcc00317 	ldw	r19,12(sp)
   8dbec:	dc800217 	ldw	r18,8(sp)
   8dbf0:	dc400117 	ldw	r17,4(sp)
   8dbf4:	dc000017 	ldw	r16,0(sp)
   8dbf8:	dec00604 	addi	sp,sp,24
   8dbfc:	f800283a 	ret
   8dc00:	29802204 	addi	r6,r5,136
   8dc04:	00800044 	movi	r2,1
   8dc08:	110e983a 	sll	r7,r2,r4
   8dc0c:	30c04017 	ldw	r3,256(r6)
   8dc10:	2105883a 	add	r2,r4,r4
   8dc14:	1085883a 	add	r2,r2,r2
   8dc18:	1185883a 	add	r2,r2,r6
   8dc1c:	19c6b03a 	or	r3,r3,r7
   8dc20:	14802015 	stw	r18,128(r2)
   8dc24:	14c00015 	stw	r19,0(r2)
   8dc28:	00800084 	movi	r2,2
   8dc2c:	30c04015 	stw	r3,256(r6)
   8dc30:	88bfe31e 	bne	r17,r2,8dbc0 <__register_exitproc+0x50>
   8dc34:	30804117 	ldw	r2,260(r6)
   8dc38:	11c4b03a 	or	r2,r2,r7
   8dc3c:	30804115 	stw	r2,260(r6)
   8dc40:	003fdf06 	br	8dbc0 <__register_exitproc+0x50>
   8dc44:	00800274 	movhi	r2,9
   8dc48:	10872704 	addi	r2,r2,7324
   8dc4c:	100b883a 	mov	r5,r2
   8dc50:	80805215 	stw	r2,328(r16)
   8dc54:	003fd606 	br	8dbb0 <__register_exitproc+0x40>
   8dc58:	00800034 	movhi	r2,0
   8dc5c:	10800004 	addi	r2,r2,0
   8dc60:	1000021e 	bne	r2,zero,8dc6c <__register_exitproc+0xfc>
   8dc64:	013fffc4 	movi	r4,-1
   8dc68:	003fdc06 	br	8dbdc <__register_exitproc+0x6c>
   8dc6c:	01006404 	movi	r4,400
   8dc70:	103ee83a 	callr	r2
   8dc74:	1007883a 	mov	r3,r2
   8dc78:	103ffa26 	beq	r2,zero,8dc64 <__register_exitproc+0xf4>
   8dc7c:	80805217 	ldw	r2,328(r16)
   8dc80:	180b883a 	mov	r5,r3
   8dc84:	18000115 	stw	zero,4(r3)
   8dc88:	18800015 	stw	r2,0(r3)
   8dc8c:	80c05215 	stw	r3,328(r16)
   8dc90:	18006215 	stw	zero,392(r3)
   8dc94:	18006315 	stw	zero,396(r3)
   8dc98:	0009883a 	mov	r4,zero
   8dc9c:	883fc826 	beq	r17,zero,8dbc0 <__register_exitproc+0x50>
   8dca0:	003fd706 	br	8dc00 <__register_exitproc+0x90>

0008dca4 <register_fini>:
   8dca4:	f800283a 	ret

0008dca8 <__call_exitprocs>:
   8dca8:	00800274 	movhi	r2,9
   8dcac:	10bff604 	addi	r2,r2,-40
   8dcb0:	10800017 	ldw	r2,0(r2)
   8dcb4:	defff304 	addi	sp,sp,-52
   8dcb8:	df000b15 	stw	fp,44(sp)
   8dcbc:	d8800115 	stw	r2,4(sp)
   8dcc0:	00800034 	movhi	r2,0
   8dcc4:	10800004 	addi	r2,r2,0
   8dcc8:	1005003a 	cmpeq	r2,r2,zero
   8dccc:	d8800215 	stw	r2,8(sp)
   8dcd0:	d8800117 	ldw	r2,4(sp)
   8dcd4:	dd400815 	stw	r21,32(sp)
   8dcd8:	dd000715 	stw	r20,28(sp)
   8dcdc:	10805204 	addi	r2,r2,328
   8dce0:	dfc00c15 	stw	ra,48(sp)
   8dce4:	ddc00a15 	stw	r23,40(sp)
   8dce8:	dd800915 	stw	r22,36(sp)
   8dcec:	dcc00615 	stw	r19,24(sp)
   8dcf0:	dc800515 	stw	r18,20(sp)
   8dcf4:	dc400415 	stw	r17,16(sp)
   8dcf8:	dc000315 	stw	r16,12(sp)
   8dcfc:	282b883a 	mov	r21,r5
   8dd00:	2039883a 	mov	fp,r4
   8dd04:	d8800015 	stw	r2,0(sp)
   8dd08:	2829003a 	cmpeq	r20,r5,zero
   8dd0c:	d8800117 	ldw	r2,4(sp)
   8dd10:	14405217 	ldw	r17,328(r2)
   8dd14:	88001026 	beq	r17,zero,8dd58 <__call_exitprocs+0xb0>
   8dd18:	ddc00017 	ldw	r23,0(sp)
   8dd1c:	88800117 	ldw	r2,4(r17)
   8dd20:	8c802204 	addi	r18,r17,136
   8dd24:	143fffc4 	addi	r16,r2,-1
   8dd28:	80000916 	blt	r16,zero,8dd50 <__call_exitprocs+0xa8>
   8dd2c:	05bfffc4 	movi	r22,-1
   8dd30:	a000151e 	bne	r20,zero,8dd88 <__call_exitprocs+0xe0>
   8dd34:	8409883a 	add	r4,r16,r16
   8dd38:	2105883a 	add	r2,r4,r4
   8dd3c:	1485883a 	add	r2,r2,r18
   8dd40:	10c02017 	ldw	r3,128(r2)
   8dd44:	a8c01126 	beq	r21,r3,8dd8c <__call_exitprocs+0xe4>
   8dd48:	843fffc4 	addi	r16,r16,-1
   8dd4c:	85bff81e 	bne	r16,r22,8dd30 <__call_exitprocs+0x88>
   8dd50:	d8800217 	ldw	r2,8(sp)
   8dd54:	10003126 	beq	r2,zero,8de1c <__call_exitprocs+0x174>
   8dd58:	dfc00c17 	ldw	ra,48(sp)
   8dd5c:	df000b17 	ldw	fp,44(sp)
   8dd60:	ddc00a17 	ldw	r23,40(sp)
   8dd64:	dd800917 	ldw	r22,36(sp)
   8dd68:	dd400817 	ldw	r21,32(sp)
   8dd6c:	dd000717 	ldw	r20,28(sp)
   8dd70:	dcc00617 	ldw	r19,24(sp)
   8dd74:	dc800517 	ldw	r18,20(sp)
   8dd78:	dc400417 	ldw	r17,16(sp)
   8dd7c:	dc000317 	ldw	r16,12(sp)
   8dd80:	dec00d04 	addi	sp,sp,52
   8dd84:	f800283a 	ret
   8dd88:	8409883a 	add	r4,r16,r16
   8dd8c:	88c00117 	ldw	r3,4(r17)
   8dd90:	2105883a 	add	r2,r4,r4
   8dd94:	1445883a 	add	r2,r2,r17
   8dd98:	18ffffc4 	addi	r3,r3,-1
   8dd9c:	11800217 	ldw	r6,8(r2)
   8dda0:	1c001526 	beq	r3,r16,8ddf8 <__call_exitprocs+0x150>
   8dda4:	10000215 	stw	zero,8(r2)
   8dda8:	303fe726 	beq	r6,zero,8dd48 <__call_exitprocs+0xa0>
   8ddac:	00c00044 	movi	r3,1
   8ddb0:	1c06983a 	sll	r3,r3,r16
   8ddb4:	90804017 	ldw	r2,256(r18)
   8ddb8:	8cc00117 	ldw	r19,4(r17)
   8ddbc:	1884703a 	and	r2,r3,r2
   8ddc0:	10001426 	beq	r2,zero,8de14 <__call_exitprocs+0x16c>
   8ddc4:	90804117 	ldw	r2,260(r18)
   8ddc8:	1884703a 	and	r2,r3,r2
   8ddcc:	10000c1e 	bne	r2,zero,8de00 <__call_exitprocs+0x158>
   8ddd0:	2105883a 	add	r2,r4,r4
   8ddd4:	1485883a 	add	r2,r2,r18
   8ddd8:	11400017 	ldw	r5,0(r2)
   8dddc:	e009883a 	mov	r4,fp
   8dde0:	303ee83a 	callr	r6
   8dde4:	88800117 	ldw	r2,4(r17)
   8dde8:	98bfc81e 	bne	r19,r2,8dd0c <__call_exitprocs+0x64>
   8ddec:	b8800017 	ldw	r2,0(r23)
   8ddf0:	147fd526 	beq	r2,r17,8dd48 <__call_exitprocs+0xa0>
   8ddf4:	003fc506 	br	8dd0c <__call_exitprocs+0x64>
   8ddf8:	8c000115 	stw	r16,4(r17)
   8ddfc:	003fea06 	br	8dda8 <__call_exitprocs+0x100>
   8de00:	2105883a 	add	r2,r4,r4
   8de04:	1485883a 	add	r2,r2,r18
   8de08:	11000017 	ldw	r4,0(r2)
   8de0c:	303ee83a 	callr	r6
   8de10:	003ff406 	br	8dde4 <__call_exitprocs+0x13c>
   8de14:	303ee83a 	callr	r6
   8de18:	003ff206 	br	8dde4 <__call_exitprocs+0x13c>
   8de1c:	88800117 	ldw	r2,4(r17)
   8de20:	1000081e 	bne	r2,zero,8de44 <__call_exitprocs+0x19c>
   8de24:	89000017 	ldw	r4,0(r17)
   8de28:	20000726 	beq	r4,zero,8de48 <__call_exitprocs+0x1a0>
   8de2c:	b9000015 	stw	r4,0(r23)
   8de30:	8809883a 	mov	r4,r17
   8de34:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8de38:	bc400017 	ldw	r17,0(r23)
   8de3c:	883fb71e 	bne	r17,zero,8dd1c <__call_exitprocs+0x74>
   8de40:	003fc506 	br	8dd58 <__call_exitprocs+0xb0>
   8de44:	89000017 	ldw	r4,0(r17)
   8de48:	882f883a 	mov	r23,r17
   8de4c:	2023883a 	mov	r17,r4
   8de50:	883fb21e 	bne	r17,zero,8dd1c <__call_exitprocs+0x74>
   8de54:	003fc006 	br	8dd58 <__call_exitprocs+0xb0>

0008de58 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8de58:	defffd04 	addi	sp,sp,-12
   8de5c:	df000215 	stw	fp,8(sp)
   8de60:	df000204 	addi	fp,sp,8
   8de64:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8de68:	e0bfff17 	ldw	r2,-4(fp)
   8de6c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8de70:	e0bffe17 	ldw	r2,-8(fp)
   8de74:	1005003a 	cmpeq	r2,r2,zero
   8de78:	1000021e 	bne	r2,zero,8de84 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8de7c:	002af070 	cmpltui	zero,zero,43969
   8de80:	00000106 	br	8de88 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8de84:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8de88:	e037883a 	mov	sp,fp
   8de8c:	df000017 	ldw	fp,0(sp)
   8de90:	dec00104 	addi	sp,sp,4
   8de94:	f800283a 	ret

0008de98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8de98:	defffd04 	addi	sp,sp,-12
   8de9c:	dfc00215 	stw	ra,8(sp)
   8dea0:	df000115 	stw	fp,4(sp)
   8dea4:	df000104 	addi	fp,sp,4
   8dea8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8deac:	e13fff17 	ldw	r4,-4(fp)
   8deb0:	008de580 	call	8de58 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8deb4:	003fff06 	br	8deb4 <_exit+0x1c>
   8deb8:	0008dca4 	muli	zero,zero,9074
