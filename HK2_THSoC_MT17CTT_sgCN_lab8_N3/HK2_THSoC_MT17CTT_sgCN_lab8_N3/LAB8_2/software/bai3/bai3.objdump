
bai3.elf:     file format elf32-littlenios2
bai3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000031c0 memsz 0x000031c0 flags r-x
    LOAD off    0x000041e0 vaddr 0x000831e0 paddr 0x000848d8 align 2**12
         filesz 0x000016f8 memsz 0x000016f8 flags rw-
    LOAD off    0x00005fd0 vaddr 0x00085fd0 paddr 0x00085fd0 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002fc8  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  00083180  00083180  00004180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016f8  000831e0  000848d8  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  00085fd0  00085fd0  00005fd0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000670  00000000  00000000  00005900  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008d96  00000000  00000000  00005f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002fb5  00000000  00000000  0000ed06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003282  00000000  00000000  00011cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000ad0  00000000  00000000  00014f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000018ee  00000000  00000000  00015a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000166f  00000000  00000000  000172fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00018970  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  000189b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001a83e  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001a841  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001a84d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001a84e  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001a84f  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001a85a  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001a865  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  0001a870  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000016  00000000  00000000  0001a874  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00034ca9  00000000  00000000  0001a88a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
00083180 l    d  .rodata	00000000 .rodata
000831e0 l    d  .rwdata	00000000 .rwdata
00085fd0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bai3_bsp//obj/HAL/src/crt0.o
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00080394 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00080528 l     F .text	00000038 alt_dev_reg
000831e0 l     O .rwdata	00001060 jtag_uart_0
00084240 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008081c l     F .text	00000204 altera_avalon_jtag_uart_irq
00080a20 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00081214 l     F .text	00000098 altera_avalon_uart_irq
000812ac l     F .text	000000d8 altera_avalon_uart_rxirq
00081384 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00081514 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00081768 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00081bf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081d2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00081d58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000821e4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008233c l     F .text	00000050 alt_get_errno
0008238c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000844ac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00082fec l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00080480 g     F .text	00000078 alt_main
00085fec g     O .bss	00000100 alt_irq
000848d8 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00085fe8 g     O .bss	00000004 errno
00085fd4 g     O .bss	00000004 alt_argv
0008c8ac g       *ABS*	00000000 _gp
000804f8 g     F .text	00000030 usleep
0008432c g     O .rwdata	00000180 alt_fd_list
00082810 g     F .text	00000090 alt_find_dev
00082b50 g     F .text	00000140 memcpy
000822c4 g     F .text	00000078 alt_io_redirect
00083180 g       *ABS*	00000000 __DTOR_END__
00080c20 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008310c g     F .text	00000008 __udivsi3
000848bc g     O .rwdata	00000004 alt_max_fd
000848d0 g     O .rwdata	00000004 _global_impure_ptr
0008627c g       *ABS*	00000000 __bss_end
000820f4 g     F .text	000000f0 alt_iic_isr_register
000826ec g     F .text	00000104 alt_tick
0008116c g     F .text	000000a8 altera_avalon_uart_init
000820a8 g     F .text	0000004c alt_ic_irq_enabled
00082654 g     F .text	00000098 alt_alarm_stop
00085fdc g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
00084304 g     O .rwdata	00000028 alt_dev_null
00081d10 g     F .text	0000001c alt_dcache_flush_all
000848d8 g       *ABS*	00000000 __ram_rwdata_end
000848b4 g     O .rwdata	00000008 alt_dev_list
000831e0 g       *ABS*	00000000 __ram_rodata_end
00083114 g     F .text	00000008 __umodsi3
0008627c g       *ABS*	00000000 end
000817b8 g     F .text	000001a8 altera_avalon_uart_write
0008075c g     F .text	000000c0 altera_avalon_jtag_uart_init
00083180 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
000810bc g     F .text	00000060 altera_avalon_uart_write_fd
0008111c g     F .text	00000050 altera_avalon_uart_close_fd
00080e38 g     F .text	00000224 altera_avalon_jtag_uart_write
00082e4c g     F .text	000001a0 __call_exitprocs
000801b8 g     F .text	0000003c _start
00085fe0 g     O .bss	00000004 _alt_tick_rate
00085fe4 g     O .bss	00000004 _alt_nticks
00080594 g     F .text	00000064 alt_sys_init
00082d1c g     F .text	00000130 __register_exitproc
00080ac4 g     F .text	00000068 altera_avalon_jtag_uart_close
0008311c g     F .text	00000028 __mulsi3
000831e0 g       *ABS*	00000000 __ram_rwdata_start
00083180 g       *ABS*	00000000 __ram_rodata_start
000805f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000829b4 g     F .text	000000d4 alt_get_fd
00081aa0 g     F .text	00000154 alt_busy_sleep
00082ad4 g     F .text	0000007c memcmp
000806b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008627c g       *ABS*	00000000 __alt_stack_base
00080708 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000828a0 g     F .text	00000114 alt_find_file
00081da8 g     F .text	000000a0 alt_dev_llist_insert
00085fd0 g       *ABS*	00000000 __bss_start
000801f4 g     F .text	00000090 transmitString
000802f0 g     F .text	000000a4 main
00085fd8 g     O .bss	00000004 alt_envp
00080658 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000860ec g     O .bss	00000190 _atexit0
000848c0 g     O .rwdata	00000004 alt_errno
00080284 g     F .text	0000006c receiveChar
00083060 g     F .text	00000050 __divsi3
00083180 g       *ABS*	00000000 __CTOR_END__
00083180 g       *ABS*	00000000 __flash_rodata_start
00083180 g       *ABS*	00000000 __DTOR_LIST__
00080560 g     F .text	00000034 alt_irq_init
000825d4 g     F .text	00000080 alt_release_fd
00082a88 g     F .text	00000014 atexit
000848d4 g     O .rwdata	00000004 _impure_ptr
00085fd0 g     O .bss	00000004 alt_argc
00081ea4 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000848ac g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00081f1c g     F .text	00000050 alt_ic_isr_register
000848d8 g       *ABS*	00000000 _edata
0008105c g     F .text	00000060 altera_avalon_uart_read_fd
0008627c g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
00080b2c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00082008 g     F .text	000000a0 alt_ic_irq_disable
000827f0 g     F .text	00000020 altera_nios2_qsys_irq_init
00082a9c g     F .text	00000038 exit
000830b0 g     F .text	0000005c __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000814c0 g     F .text	00000054 altera_avalon_uart_close
00083144 g     F .text	0000003c _exit
00081960 g     F .text	00000140 alt_alarm_start
00082c90 g     F .text	0000008c strlen
0008247c g     F .text	00000158 open
00081f00 g     F .text	0000001c alt_icache_flush_all
000848c4 g     O .rwdata	00000004 alt_priority_mask
00081f6c g     F .text	0000009c alt_ic_irq_enable
00081564 g     F .text	00000204 altera_avalon_uart_read
000848c8 g     O .rwdata	00000008 alt_alarm_list
00081e48 g     F .text	0000005c _do_ctors
00081c44 g     F .text	000000cc close
00080400 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406e14 	ori	at,at,440
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00234 	movhi	r3,8
   80130:	18d7fb04 	addi	r3,r3,24556
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000234 	movhi	r4,8
   80148:	2117fb04 	addi	r4,r4,24556
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   801c0:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c4:	d6b22b14 	ori	gp,gp,51372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801cc:	1097f414 	ori	r2,r2,24528

    movhi r3, %hi(__bss_end)
   801d0:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d4:	18d89f14 	ori	r3,r3,25212

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	00804000 	call	80400 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	00804800 	call	80480 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <transmitString>:
#include "unistd.h"
#include "altera_avalon_uart_regs.h"
#include "altera_avalon_uart.h"

// Ham gui du lieu UART
void transmitString(char* mess) {
   801f4:	defffd04 	addi	sp,sp,-12
   801f8:	dfc00215 	stw	ra,8(sp)
   801fc:	df000115 	stw	fp,4(sp)
   80200:	df000104 	addi	fp,sp,4
   80204:	e13fff15 	stw	r4,-4(fp)
    // Cho UART san sang de gui
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
   80208:	0001883a 	nop
   8020c:	00800434 	movhi	r2,16
   80210:	10840a04 	addi	r2,r2,4136
   80214:	10800037 	ldwio	r2,0(r2)
   80218:	1080100c 	andi	r2,r2,64
   8021c:	103ffb26 	beq	r2,zero,8020c <transmitString+0x18>

    // Gui tung ky tu trong chuoi
    while (*mess) {
   80220:	00000d06 	br	80258 <transmitString+0x64>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, *mess);
   80224:	e0bfff17 	ldw	r2,-4(fp)
   80228:	10800003 	ldbu	r2,0(r2)
   8022c:	10c03fcc 	andi	r3,r2,255
   80230:	18c0201c 	xori	r3,r3,128
   80234:	18ffe004 	addi	r3,r3,-128
   80238:	00800434 	movhi	r2,16
   8023c:	10840904 	addi	r2,r2,4132
   80240:	10c00035 	stwio	r3,0(r2)
        mess++;
   80244:	e0bfff17 	ldw	r2,-4(fp)
   80248:	10800044 	addi	r2,r2,1
   8024c:	e0bfff15 	stw	r2,-4(fp)
        usleep(600); // Cho mot chut de dam bao gui xong
   80250:	01009604 	movi	r4,600
   80254:	00804f80 	call	804f8 <usleep>
void transmitString(char* mess) {
    // Cho UART san sang de gui
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));

    // Gui tung ky tu trong chuoi
    while (*mess) {
   80258:	e0bfff17 	ldw	r2,-4(fp)
   8025c:	10800003 	ldbu	r2,0(r2)
   80260:	10803fcc 	andi	r2,r2,255
   80264:	1080201c 	xori	r2,r2,128
   80268:	10bfe004 	addi	r2,r2,-128
   8026c:	103fed1e 	bne	r2,zero,80224 <transmitString+0x30>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, *mess);
        mess++;
        usleep(600); // Cho mot chut de dam bao gui xong
    }
}
   80270:	e037883a 	mov	sp,fp
   80274:	dfc00117 	ldw	ra,4(sp)
   80278:	df000017 	ldw	fp,0(sp)
   8027c:	dec00204 	addi	sp,sp,8
   80280:	f800283a 	ret

00080284 <receiveChar>:

// Ham nhan du lieu UART
char receiveChar() {
   80284:	defffe04 	addi	sp,sp,-8
   80288:	df000115 	stw	fp,4(sp)
   8028c:	df000104 	addi	fp,sp,4
    alt_u8 status;
    char buff;

    // Doc trang thai UART
    status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   80290:	00800434 	movhi	r2,16
   80294:	10840a04 	addi	r2,r2,4136
   80298:	10800037 	ldwio	r2,0(r2)
   8029c:	e0bfff05 	stb	r2,-4(fp)

    // Kiem tra neu UART san sang nhan du lieu
    if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
   802a0:	e0bfff03 	ldbu	r2,-4(fp)
   802a4:	10803fcc 	andi	r2,r2,255
   802a8:	1080201c 	xori	r2,r2,128
   802ac:	10bfe004 	addi	r2,r2,-128
   802b0:	10000a0e 	bge	r2,zero,802dc <receiveChar+0x58>
        buff = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); // Nhan ky tu tu UART
   802b4:	00800434 	movhi	r2,16
   802b8:	10840804 	addi	r2,r2,4128
   802bc:	10800037 	ldwio	r2,0(r2)
   802c0:	e0bfff45 	stb	r2,-3(fp)

        // Xoa co trang thai de chuan bi nhan tiep
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
   802c4:	0007883a 	mov	r3,zero
   802c8:	00800434 	movhi	r2,16
   802cc:	10840a04 	addi	r2,r2,4136
   802d0:	10c00035 	stwio	r3,0(r2)
        return buff;
   802d4:	e0bfff43 	ldbu	r2,-3(fp)
   802d8:	00000106 	br	802e0 <receiveChar+0x5c>
    }

    return '\0'; // Tra ve NULL neu khong co du lieu
   802dc:	0005883a 	mov	r2,zero
}
   802e0:	e037883a 	mov	sp,fp
   802e4:	df000017 	ldw	fp,0(sp)
   802e8:	dec00104 	addi	sp,sp,4
   802ec:	f800283a 	ret

000802f0 <main>:

int main() {
   802f0:	defffd04 	addi	sp,sp,-12
   802f4:	dfc00215 	stw	ra,8(sp)
   802f8:	df000115 	stw	fp,4(sp)
   802fc:	df000104 	addi	fp,sp,4
   80300:	00000106 	br	80308 <main+0x18>
                    break;
                default:
                    break;
            }
        }
    }
   80304:	0001883a 	nop
int main() {
    char rxData;

    while (1) {
        // Nhan du lieu tu UART
        rxData = receiveChar();
   80308:	00802840 	call	80284 <receiveChar>
   8030c:	e0bfff05 	stb	r2,-4(fp)

        if (rxData != '\0') {  // Neu nhan duoc du lieu hop le
   80310:	e0bfff07 	ldb	r2,-4(fp)
   80314:	103ffb26 	beq	r2,zero,80304 <main+0x14>
            switch (rxData) {
   80318:	e0bfff07 	ldb	r2,-4(fp)
   8031c:	10c01120 	cmpeqi	r3,r2,68
   80320:	1800161e 	bne	r3,zero,8037c <main+0x8c>
   80324:	10c01148 	cmpgei	r3,r2,69
   80328:	1800031e 	bne	r3,zero,80338 <main+0x48>
   8032c:	10801060 	cmpeqi	r2,r2,65
   80330:	10000e1e 	bne	r2,zero,8036c <main+0x7c>
   80334:	00001506 	br	8038c <main+0x9c>
   80338:	10c014e0 	cmpeqi	r3,r2,83
   8033c:	1800031e 	bne	r3,zero,8034c <main+0x5c>
   80340:	108015e0 	cmpeqi	r2,r2,87
   80344:	1000051e 	bne	r2,zero,8035c <main+0x6c>
   80348:	00001006 	br	8038c <main+0x9c>
                case 'S':
                    transmitString("Down\n");
   8034c:	01000234 	movhi	r4,8
   80350:	210c6004 	addi	r4,r4,12672
   80354:	00801f40 	call	801f4 <transmitString>
                    break;
   80358:	00000d06 	br	80390 <main+0xa0>
                case 'W':
                    transmitString("Up\n");
   8035c:	01000234 	movhi	r4,8
   80360:	210c6204 	addi	r4,r4,12680
   80364:	00801f40 	call	801f4 <transmitString>
                    break;
   80368:	00000906 	br	80390 <main+0xa0>
                case 'A':
                    transmitString("Left\n");
   8036c:	01000234 	movhi	r4,8
   80370:	210c6304 	addi	r4,r4,12684
   80374:	00801f40 	call	801f4 <transmitString>
                    break;
   80378:	00000506 	br	80390 <main+0xa0>
                case 'D':
                    transmitString("Right\n");
   8037c:	01000234 	movhi	r4,8
   80380:	210c6504 	addi	r4,r4,12692
   80384:	00801f40 	call	801f4 <transmitString>
                    break;
   80388:	00000106 	br	80390 <main+0xa0>
                default:
                    break;
   8038c:	0001883a 	nop
            }
        }
    }
   80390:	003fdc06 	br	80304 <main+0x14>

00080394 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80394:	defffc04 	addi	sp,sp,-16
   80398:	df000315 	stw	fp,12(sp)
   8039c:	df000304 	addi	fp,sp,12
   803a0:	e13ffd15 	stw	r4,-12(fp)
   803a4:	e17ffe15 	stw	r5,-8(fp)
   803a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   803ac:	e0fffe17 	ldw	r3,-8(fp)
   803b0:	e0bffd17 	ldw	r2,-12(fp)
   803b4:	18800e26 	beq	r3,r2,803f0 <alt_load_section+0x5c>
  {
    while( to != end )
   803b8:	00000a06 	br	803e4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   803bc:	e0bffd17 	ldw	r2,-12(fp)
   803c0:	10c00017 	ldw	r3,0(r2)
   803c4:	e0bffe17 	ldw	r2,-8(fp)
   803c8:	10c00015 	stw	r3,0(r2)
   803cc:	e0bffe17 	ldw	r2,-8(fp)
   803d0:	10800104 	addi	r2,r2,4
   803d4:	e0bffe15 	stw	r2,-8(fp)
   803d8:	e0bffd17 	ldw	r2,-12(fp)
   803dc:	10800104 	addi	r2,r2,4
   803e0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   803e4:	e0fffe17 	ldw	r3,-8(fp)
   803e8:	e0bfff17 	ldw	r2,-4(fp)
   803ec:	18bff31e 	bne	r3,r2,803bc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   803f0:	e037883a 	mov	sp,fp
   803f4:	df000017 	ldw	fp,0(sp)
   803f8:	dec00104 	addi	sp,sp,4
   803fc:	f800283a 	ret

00080400 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80400:	defffe04 	addi	sp,sp,-8
   80404:	dfc00115 	stw	ra,4(sp)
   80408:	df000015 	stw	fp,0(sp)
   8040c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80410:	01000234 	movhi	r4,8
   80414:	21123604 	addi	r4,r4,18648
   80418:	01400234 	movhi	r5,8
   8041c:	294c7804 	addi	r5,r5,12768
   80420:	01800234 	movhi	r6,8
   80424:	31923604 	addi	r6,r6,18648
   80428:	00803940 	call	80394 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8042c:	01000234 	movhi	r4,8
   80430:	21000804 	addi	r4,r4,32
   80434:	01400234 	movhi	r5,8
   80438:	29400804 	addi	r5,r5,32
   8043c:	01800234 	movhi	r6,8
   80440:	31806e04 	addi	r6,r6,440
   80444:	00803940 	call	80394 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80448:	01000234 	movhi	r4,8
   8044c:	210c6004 	addi	r4,r4,12672
   80450:	01400234 	movhi	r5,8
   80454:	294c6004 	addi	r5,r5,12672
   80458:	01800234 	movhi	r6,8
   8045c:	318c7804 	addi	r6,r6,12768
   80460:	00803940 	call	80394 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80464:	0081d100 	call	81d10 <alt_dcache_flush_all>
  alt_icache_flush_all();
   80468:	0081f000 	call	81f00 <alt_icache_flush_all>
}
   8046c:	e037883a 	mov	sp,fp
   80470:	dfc00117 	ldw	ra,4(sp)
   80474:	df000017 	ldw	fp,0(sp)
   80478:	dec00204 	addi	sp,sp,8
   8047c:	f800283a 	ret

00080480 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80480:	defffd04 	addi	sp,sp,-12
   80484:	dfc00215 	stw	ra,8(sp)
   80488:	df000115 	stw	fp,4(sp)
   8048c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80490:	0009883a 	mov	r4,zero
   80494:	00805600 	call	80560 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   80498:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8049c:	00805940 	call	80594 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   804a0:	01000234 	movhi	r4,8
   804a4:	210c6704 	addi	r4,r4,12700
   804a8:	01400234 	movhi	r5,8
   804ac:	294c6704 	addi	r5,r5,12700
   804b0:	01800234 	movhi	r6,8
   804b4:	318c6704 	addi	r6,r6,12700
   804b8:	00822c40 	call	822c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   804bc:	0081e480 	call	81e48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   804c0:	01000234 	movhi	r4,8
   804c4:	2107a904 	addi	r4,r4,7844
   804c8:	0082a880 	call	82a88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   804cc:	d125c917 	ldw	r4,-26844(gp)
   804d0:	d0e5ca17 	ldw	r3,-26840(gp)
   804d4:	d0a5cb17 	ldw	r2,-26836(gp)
   804d8:	180b883a 	mov	r5,r3
   804dc:	100d883a 	mov	r6,r2
   804e0:	00802f00 	call	802f0 <main>
   804e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   804e8:	01000044 	movi	r4,1
   804ec:	0081c440 	call	81c44 <close>
  exit (result);
   804f0:	e13fff17 	ldw	r4,-4(fp)
   804f4:	0082a9c0 	call	82a9c <exit>

000804f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   804f8:	defffd04 	addi	sp,sp,-12
   804fc:	dfc00215 	stw	ra,8(sp)
   80500:	df000115 	stw	fp,4(sp)
   80504:	df000104 	addi	fp,sp,4
   80508:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8050c:	e13fff17 	ldw	r4,-4(fp)
   80510:	0081aa00 	call	81aa0 <alt_busy_sleep>
}
   80514:	e037883a 	mov	sp,fp
   80518:	dfc00117 	ldw	ra,4(sp)
   8051c:	df000017 	ldw	fp,0(sp)
   80520:	dec00204 	addi	sp,sp,8
   80524:	f800283a 	ret

00080528 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80528:	defffd04 	addi	sp,sp,-12
   8052c:	dfc00215 	stw	ra,8(sp)
   80530:	df000115 	stw	fp,4(sp)
   80534:	df000104 	addi	fp,sp,4
   80538:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8053c:	e13fff17 	ldw	r4,-4(fp)
   80540:	01400234 	movhi	r5,8
   80544:	29522d04 	addi	r5,r5,18612
   80548:	0081da80 	call	81da8 <alt_dev_llist_insert>
}
   8054c:	e037883a 	mov	sp,fp
   80550:	dfc00117 	ldw	ra,4(sp)
   80554:	df000017 	ldw	fp,0(sp)
   80558:	dec00204 	addi	sp,sp,8
   8055c:	f800283a 	ret

00080560 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80560:	defffd04 	addi	sp,sp,-12
   80564:	dfc00215 	stw	ra,8(sp)
   80568:	df000115 	stw	fp,4(sp)
   8056c:	df000104 	addi	fp,sp,4
   80570:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   80574:	00827f00 	call	827f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80578:	00800044 	movi	r2,1
   8057c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80580:	e037883a 	mov	sp,fp
   80584:	dfc00117 	ldw	ra,4(sp)
   80588:	df000017 	ldw	fp,0(sp)
   8058c:	dec00204 	addi	sp,sp,8
   80590:	f800283a 	ret

00080594 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80594:	defffe04 	addi	sp,sp,-8
   80598:	dfc00115 	stw	ra,4(sp)
   8059c:	df000015 	stw	fp,0(sp)
   805a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   805a4:	01000234 	movhi	r4,8
   805a8:	210c8204 	addi	r4,r4,12808
   805ac:	000b883a 	mov	r5,zero
   805b0:	000d883a 	mov	r6,zero
   805b4:	008075c0 	call	8075c <altera_avalon_jtag_uart_init>
   805b8:	01000234 	movhi	r4,8
   805bc:	210c7804 	addi	r4,r4,12768
   805c0:	00805280 	call	80528 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   805c4:	01000234 	movhi	r4,8
   805c8:	21109a04 	addi	r4,r4,17000
   805cc:	000b883a 	mov	r5,zero
   805d0:	01800044 	movi	r6,1
   805d4:	008116c0 	call	8116c <altera_avalon_uart_init>
   805d8:	01000234 	movhi	r4,8
   805dc:	21109004 	addi	r4,r4,16960
   805e0:	00805280 	call	80528 <alt_dev_reg>
}
   805e4:	e037883a 	mov	sp,fp
   805e8:	dfc00117 	ldw	ra,4(sp)
   805ec:	df000017 	ldw	fp,0(sp)
   805f0:	dec00204 	addi	sp,sp,8
   805f4:	f800283a 	ret

000805f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   805f8:	defffa04 	addi	sp,sp,-24
   805fc:	dfc00515 	stw	ra,20(sp)
   80600:	df000415 	stw	fp,16(sp)
   80604:	df000404 	addi	fp,sp,16
   80608:	e13ffd15 	stw	r4,-12(fp)
   8060c:	e17ffe15 	stw	r5,-8(fp)
   80610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80614:	e0bffd17 	ldw	r2,-12(fp)
   80618:	10800017 	ldw	r2,0(r2)
   8061c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80620:	e0bffc17 	ldw	r2,-16(fp)
   80624:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   80628:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8062c:	10800217 	ldw	r2,8(r2)
   80630:	1809883a 	mov	r4,r3
   80634:	e17ffe17 	ldw	r5,-8(fp)
   80638:	e1bfff17 	ldw	r6,-4(fp)
   8063c:	100f883a 	mov	r7,r2
   80640:	0080c200 	call	80c20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80644:	e037883a 	mov	sp,fp
   80648:	dfc00117 	ldw	ra,4(sp)
   8064c:	df000017 	ldw	fp,0(sp)
   80650:	dec00204 	addi	sp,sp,8
   80654:	f800283a 	ret

00080658 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80658:	defffa04 	addi	sp,sp,-24
   8065c:	dfc00515 	stw	ra,20(sp)
   80660:	df000415 	stw	fp,16(sp)
   80664:	df000404 	addi	fp,sp,16
   80668:	e13ffd15 	stw	r4,-12(fp)
   8066c:	e17ffe15 	stw	r5,-8(fp)
   80670:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80674:	e0bffd17 	ldw	r2,-12(fp)
   80678:	10800017 	ldw	r2,0(r2)
   8067c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80680:	e0bffc17 	ldw	r2,-16(fp)
   80684:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   80688:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8068c:	10800217 	ldw	r2,8(r2)
   80690:	1809883a 	mov	r4,r3
   80694:	e17ffe17 	ldw	r5,-8(fp)
   80698:	e1bfff17 	ldw	r6,-4(fp)
   8069c:	100f883a 	mov	r7,r2
   806a0:	0080e380 	call	80e38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   806a4:	e037883a 	mov	sp,fp
   806a8:	dfc00117 	ldw	ra,4(sp)
   806ac:	df000017 	ldw	fp,0(sp)
   806b0:	dec00204 	addi	sp,sp,8
   806b4:	f800283a 	ret

000806b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   806b8:	defffc04 	addi	sp,sp,-16
   806bc:	dfc00315 	stw	ra,12(sp)
   806c0:	df000215 	stw	fp,8(sp)
   806c4:	df000204 	addi	fp,sp,8
   806c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   806cc:	e0bfff17 	ldw	r2,-4(fp)
   806d0:	10800017 	ldw	r2,0(r2)
   806d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   806d8:	e0bffe17 	ldw	r2,-8(fp)
   806dc:	10c00a04 	addi	r3,r2,40
   806e0:	e0bfff17 	ldw	r2,-4(fp)
   806e4:	10800217 	ldw	r2,8(r2)
   806e8:	1809883a 	mov	r4,r3
   806ec:	100b883a 	mov	r5,r2
   806f0:	0080ac40 	call	80ac4 <altera_avalon_jtag_uart_close>
}
   806f4:	e037883a 	mov	sp,fp
   806f8:	dfc00117 	ldw	ra,4(sp)
   806fc:	df000017 	ldw	fp,0(sp)
   80700:	dec00204 	addi	sp,sp,8
   80704:	f800283a 	ret

00080708 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80708:	defffa04 	addi	sp,sp,-24
   8070c:	dfc00515 	stw	ra,20(sp)
   80710:	df000415 	stw	fp,16(sp)
   80714:	df000404 	addi	fp,sp,16
   80718:	e13ffd15 	stw	r4,-12(fp)
   8071c:	e17ffe15 	stw	r5,-8(fp)
   80720:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   80724:	e0bffd17 	ldw	r2,-12(fp)
   80728:	10800017 	ldw	r2,0(r2)
   8072c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80730:	e0bffc17 	ldw	r2,-16(fp)
   80734:	10800a04 	addi	r2,r2,40
   80738:	1009883a 	mov	r4,r2
   8073c:	e17ffe17 	ldw	r5,-8(fp)
   80740:	e1bfff17 	ldw	r6,-4(fp)
   80744:	0080b2c0 	call	80b2c <altera_avalon_jtag_uart_ioctl>
}
   80748:	e037883a 	mov	sp,fp
   8074c:	dfc00117 	ldw	ra,4(sp)
   80750:	df000017 	ldw	fp,0(sp)
   80754:	dec00204 	addi	sp,sp,8
   80758:	f800283a 	ret

0008075c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8075c:	defffa04 	addi	sp,sp,-24
   80760:	dfc00515 	stw	ra,20(sp)
   80764:	df000415 	stw	fp,16(sp)
   80768:	df000404 	addi	fp,sp,16
   8076c:	e13ffd15 	stw	r4,-12(fp)
   80770:	e17ffe15 	stw	r5,-8(fp)
   80774:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80778:	e0bffd17 	ldw	r2,-12(fp)
   8077c:	00c00044 	movi	r3,1
   80780:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80784:	e0bffd17 	ldw	r2,-12(fp)
   80788:	10800017 	ldw	r2,0(r2)
   8078c:	10800104 	addi	r2,r2,4
   80790:	e0fffd17 	ldw	r3,-12(fp)
   80794:	18c00817 	ldw	r3,32(r3)
   80798:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8079c:	e0fffe17 	ldw	r3,-8(fp)
   807a0:	e0bfff17 	ldw	r2,-4(fp)
   807a4:	d8000015 	stw	zero,0(sp)
   807a8:	1809883a 	mov	r4,r3
   807ac:	100b883a 	mov	r5,r2
   807b0:	01800234 	movhi	r6,8
   807b4:	31820704 	addi	r6,r6,2076
   807b8:	e1fffd17 	ldw	r7,-12(fp)
   807bc:	0081f1c0 	call	81f1c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   807c0:	e0bffd17 	ldw	r2,-12(fp)
   807c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   807c8:	e0bffd17 	ldw	r2,-12(fp)
   807cc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   807d0:	00800234 	movhi	r2,8
   807d4:	1097f804 	addi	r2,r2,24544
   807d8:	10800017 	ldw	r2,0(r2)
   807dc:	1809883a 	mov	r4,r3
   807e0:	100b883a 	mov	r5,r2
   807e4:	01800234 	movhi	r6,8
   807e8:	31828804 	addi	r6,r6,2592
   807ec:	e1fffd17 	ldw	r7,-12(fp)
   807f0:	00819600 	call	81960 <alt_alarm_start>
   807f4:	1000040e 	bge	r2,zero,80808 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   807f8:	e0bffd17 	ldw	r2,-12(fp)
   807fc:	00e00034 	movhi	r3,32768
   80800:	18ffffc4 	addi	r3,r3,-1
   80804:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80808:	e037883a 	mov	sp,fp
   8080c:	dfc00117 	ldw	ra,4(sp)
   80810:	df000017 	ldw	fp,0(sp)
   80814:	dec00204 	addi	sp,sp,8
   80818:	f800283a 	ret

0008081c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8081c:	defff804 	addi	sp,sp,-32
   80820:	df000715 	stw	fp,28(sp)
   80824:	df000704 	addi	fp,sp,28
   80828:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8082c:	e0bfff17 	ldw	r2,-4(fp)
   80830:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   80834:	e0bffb17 	ldw	r2,-20(fp)
   80838:	10800017 	ldw	r2,0(r2)
   8083c:	e0bffc15 	stw	r2,-16(fp)
   80840:	00000106 	br	80848 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   80844:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80848:	e0bffc17 	ldw	r2,-16(fp)
   8084c:	10800104 	addi	r2,r2,4
   80850:	10800037 	ldwio	r2,0(r2)
   80854:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80858:	e0bffd17 	ldw	r2,-12(fp)
   8085c:	1080c00c 	andi	r2,r2,768
   80860:	10006a26 	beq	r2,zero,80a0c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80864:	e0bffd17 	ldw	r2,-12(fp)
   80868:	1080400c 	andi	r2,r2,256
   8086c:	10003326 	beq	r2,zero,8093c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   80870:	00800074 	movhi	r2,1
   80874:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80878:	e0bffb17 	ldw	r2,-20(fp)
   8087c:	10800a17 	ldw	r2,40(r2)
   80880:	10800044 	addi	r2,r2,1
   80884:	1081ffcc 	andi	r2,r2,2047
   80888:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8088c:	e0bffb17 	ldw	r2,-20(fp)
   80890:	10c00b17 	ldw	r3,44(r2)
   80894:	e0bffe17 	ldw	r2,-8(fp)
   80898:	18801426 	beq	r3,r2,808ec <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8089c:	e0bffc17 	ldw	r2,-16(fp)
   808a0:	10800037 	ldwio	r2,0(r2)
   808a4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   808a8:	e0bff917 	ldw	r2,-28(fp)
   808ac:	10a0000c 	andi	r2,r2,32768
   808b0:	10001026 	beq	r2,zero,808f4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   808b4:	e0bffb17 	ldw	r2,-20(fp)
   808b8:	10800a17 	ldw	r2,40(r2)
   808bc:	e0fff917 	ldw	r3,-28(fp)
   808c0:	e13ffb17 	ldw	r4,-20(fp)
   808c4:	2085883a 	add	r2,r4,r2
   808c8:	10800e04 	addi	r2,r2,56
   808cc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   808d0:	e0bffb17 	ldw	r2,-20(fp)
   808d4:	10800a17 	ldw	r2,40(r2)
   808d8:	10800044 	addi	r2,r2,1
   808dc:	10c1ffcc 	andi	r3,r2,2047
   808e0:	e0bffb17 	ldw	r2,-20(fp)
   808e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   808e8:	003fe306 	br	80878 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   808ec:	0001883a 	nop
   808f0:	00000106 	br	808f8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   808f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   808f8:	e0bff917 	ldw	r2,-28(fp)
   808fc:	10bfffec 	andhi	r2,r2,65535
   80900:	10000e26 	beq	r2,zero,8093c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80904:	e0bffb17 	ldw	r2,-20(fp)
   80908:	10c00817 	ldw	r3,32(r2)
   8090c:	00bfff84 	movi	r2,-2
   80910:	1886703a 	and	r3,r3,r2
   80914:	e0bffb17 	ldw	r2,-20(fp)
   80918:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8091c:	e0bffc17 	ldw	r2,-16(fp)
   80920:	10800104 	addi	r2,r2,4
   80924:	e0fffb17 	ldw	r3,-20(fp)
   80928:	18c00817 	ldw	r3,32(r3)
   8092c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80930:	e0bffc17 	ldw	r2,-16(fp)
   80934:	10800104 	addi	r2,r2,4
   80938:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8093c:	e0bffd17 	ldw	r2,-12(fp)
   80940:	1080800c 	andi	r2,r2,512
   80944:	103fbf26 	beq	r2,zero,80844 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80948:	e0bffd17 	ldw	r2,-12(fp)
   8094c:	1004d43a 	srli	r2,r2,16
   80950:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   80954:	00001406 	br	809a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80958:	e0bffc17 	ldw	r2,-16(fp)
   8095c:	e0fffb17 	ldw	r3,-20(fp)
   80960:	18c00d17 	ldw	r3,52(r3)
   80964:	e13ffb17 	ldw	r4,-20(fp)
   80968:	20c7883a 	add	r3,r4,r3
   8096c:	18c20e04 	addi	r3,r3,2104
   80970:	18c00003 	ldbu	r3,0(r3)
   80974:	18c03fcc 	andi	r3,r3,255
   80978:	18c0201c 	xori	r3,r3,128
   8097c:	18ffe004 	addi	r3,r3,-128
   80980:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80984:	e0bffb17 	ldw	r2,-20(fp)
   80988:	10800d17 	ldw	r2,52(r2)
   8098c:	10800044 	addi	r2,r2,1
   80990:	10c1ffcc 	andi	r3,r2,2047
   80994:	e0bffb17 	ldw	r2,-20(fp)
   80998:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8099c:	e0bffa17 	ldw	r2,-24(fp)
   809a0:	10bfffc4 	addi	r2,r2,-1
   809a4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   809a8:	e0bffa17 	ldw	r2,-24(fp)
   809ac:	10000526 	beq	r2,zero,809c4 <altera_avalon_jtag_uart_irq+0x1a8>
   809b0:	e0bffb17 	ldw	r2,-20(fp)
   809b4:	10c00d17 	ldw	r3,52(r2)
   809b8:	e0bffb17 	ldw	r2,-20(fp)
   809bc:	10800c17 	ldw	r2,48(r2)
   809c0:	18bfe51e 	bne	r3,r2,80958 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   809c4:	e0bffa17 	ldw	r2,-24(fp)
   809c8:	103f9e26 	beq	r2,zero,80844 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   809cc:	e0bffb17 	ldw	r2,-20(fp)
   809d0:	10c00817 	ldw	r3,32(r2)
   809d4:	00bfff44 	movi	r2,-3
   809d8:	1886703a 	and	r3,r3,r2
   809dc:	e0bffb17 	ldw	r2,-20(fp)
   809e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   809e4:	e0bffb17 	ldw	r2,-20(fp)
   809e8:	10800017 	ldw	r2,0(r2)
   809ec:	10800104 	addi	r2,r2,4
   809f0:	e0fffb17 	ldw	r3,-20(fp)
   809f4:	18c00817 	ldw	r3,32(r3)
   809f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   809fc:	e0bffc17 	ldw	r2,-16(fp)
   80a00:	10800104 	addi	r2,r2,4
   80a04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   80a08:	003f8e06 	br	80844 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   80a0c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   80a10:	e037883a 	mov	sp,fp
   80a14:	df000017 	ldw	fp,0(sp)
   80a18:	dec00104 	addi	sp,sp,4
   80a1c:	f800283a 	ret

00080a20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   80a20:	defffc04 	addi	sp,sp,-16
   80a24:	df000315 	stw	fp,12(sp)
   80a28:	df000304 	addi	fp,sp,12
   80a2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   80a30:	e0bfff17 	ldw	r2,-4(fp)
   80a34:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80a38:	e0bffd17 	ldw	r2,-12(fp)
   80a3c:	10800017 	ldw	r2,0(r2)
   80a40:	10800104 	addi	r2,r2,4
   80a44:	10800037 	ldwio	r2,0(r2)
   80a48:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   80a4c:	e0bffe17 	ldw	r2,-8(fp)
   80a50:	1081000c 	andi	r2,r2,1024
   80a54:	10000a26 	beq	r2,zero,80a80 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80a58:	e0bffd17 	ldw	r2,-12(fp)
   80a5c:	10800017 	ldw	r2,0(r2)
   80a60:	10800104 	addi	r2,r2,4
   80a64:	e0fffd17 	ldw	r3,-12(fp)
   80a68:	18c00817 	ldw	r3,32(r3)
   80a6c:	18c10014 	ori	r3,r3,1024
   80a70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   80a74:	e0bffd17 	ldw	r2,-12(fp)
   80a78:	10000915 	stw	zero,36(r2)
   80a7c:	00000a06 	br	80aa8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   80a80:	e0bffd17 	ldw	r2,-12(fp)
   80a84:	10800917 	ldw	r2,36(r2)
   80a88:	00e00034 	movhi	r3,32768
   80a8c:	18ffff04 	addi	r3,r3,-4
   80a90:	18800536 	bltu	r3,r2,80aa8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   80a94:	e0bffd17 	ldw	r2,-12(fp)
   80a98:	10800917 	ldw	r2,36(r2)
   80a9c:	10c00044 	addi	r3,r2,1
   80aa0:	e0bffd17 	ldw	r2,-12(fp)
   80aa4:	10c00915 	stw	r3,36(r2)
   80aa8:	00800234 	movhi	r2,8
   80aac:	1097f804 	addi	r2,r2,24544
   80ab0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80ab4:	e037883a 	mov	sp,fp
   80ab8:	df000017 	ldw	fp,0(sp)
   80abc:	dec00104 	addi	sp,sp,4
   80ac0:	f800283a 	ret

00080ac4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   80ac4:	defffd04 	addi	sp,sp,-12
   80ac8:	df000215 	stw	fp,8(sp)
   80acc:	df000204 	addi	fp,sp,8
   80ad0:	e13ffe15 	stw	r4,-8(fp)
   80ad4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80ad8:	00000506 	br	80af0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   80adc:	e0bfff17 	ldw	r2,-4(fp)
   80ae0:	1090000c 	andi	r2,r2,16384
   80ae4:	10000226 	beq	r2,zero,80af0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   80ae8:	00bffd44 	movi	r2,-11
   80aec:	00000b06 	br	80b1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80af0:	e0bffe17 	ldw	r2,-8(fp)
   80af4:	10c00d17 	ldw	r3,52(r2)
   80af8:	e0bffe17 	ldw	r2,-8(fp)
   80afc:	10800c17 	ldw	r2,48(r2)
   80b00:	18800526 	beq	r3,r2,80b18 <altera_avalon_jtag_uart_close+0x54>
   80b04:	e0bffe17 	ldw	r2,-8(fp)
   80b08:	10c00917 	ldw	r3,36(r2)
   80b0c:	e0bffe17 	ldw	r2,-8(fp)
   80b10:	10800117 	ldw	r2,4(r2)
   80b14:	18bff136 	bltu	r3,r2,80adc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   80b18:	0005883a 	mov	r2,zero
}
   80b1c:	e037883a 	mov	sp,fp
   80b20:	df000017 	ldw	fp,0(sp)
   80b24:	dec00104 	addi	sp,sp,4
   80b28:	f800283a 	ret

00080b2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   80b2c:	defffa04 	addi	sp,sp,-24
   80b30:	df000515 	stw	fp,20(sp)
   80b34:	df000504 	addi	fp,sp,20
   80b38:	e13ffd15 	stw	r4,-12(fp)
   80b3c:	e17ffe15 	stw	r5,-8(fp)
   80b40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   80b44:	00bff9c4 	movi	r2,-25
   80b48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   80b4c:	e0bffe17 	ldw	r2,-8(fp)
   80b50:	10da8060 	cmpeqi	r3,r2,27137
   80b54:	1800031e 	bne	r3,zero,80b64 <altera_avalon_jtag_uart_ioctl+0x38>
   80b58:	109a80a0 	cmpeqi	r2,r2,27138
   80b5c:	1000181e 	bne	r2,zero,80bc0 <altera_avalon_jtag_uart_ioctl+0x94>
   80b60:	00002606 	br	80bfc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   80b64:	e0bffd17 	ldw	r2,-12(fp)
   80b68:	10c00117 	ldw	r3,4(r2)
   80b6c:	00a00034 	movhi	r2,32768
   80b70:	10bfffc4 	addi	r2,r2,-1
   80b74:	18802226 	beq	r3,r2,80c00 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   80b78:	e0bfff17 	ldw	r2,-4(fp)
   80b7c:	10800017 	ldw	r2,0(r2)
   80b80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   80b84:	e0bffc17 	ldw	r2,-16(fp)
   80b88:	10800090 	cmplti	r2,r2,2
   80b8c:	1000061e 	bne	r2,zero,80ba8 <altera_avalon_jtag_uart_ioctl+0x7c>
   80b90:	e0fffc17 	ldw	r3,-16(fp)
   80b94:	00a00034 	movhi	r2,32768
   80b98:	10bfffc4 	addi	r2,r2,-1
   80b9c:	18800226 	beq	r3,r2,80ba8 <altera_avalon_jtag_uart_ioctl+0x7c>
   80ba0:	e0bffc17 	ldw	r2,-16(fp)
   80ba4:	00000206 	br	80bb0 <altera_avalon_jtag_uart_ioctl+0x84>
   80ba8:	00a00034 	movhi	r2,32768
   80bac:	10bfff84 	addi	r2,r2,-2
   80bb0:	e0fffd17 	ldw	r3,-12(fp)
   80bb4:	18800115 	stw	r2,4(r3)
      rc = 0;
   80bb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   80bbc:	00001006 	br	80c00 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80bc0:	e0bffd17 	ldw	r2,-12(fp)
   80bc4:	10c00117 	ldw	r3,4(r2)
   80bc8:	00a00034 	movhi	r2,32768
   80bcc:	10bfffc4 	addi	r2,r2,-1
   80bd0:	18800d26 	beq	r3,r2,80c08 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80bd4:	e0bffd17 	ldw	r2,-12(fp)
   80bd8:	10c00917 	ldw	r3,36(r2)
   80bdc:	e0bffd17 	ldw	r2,-12(fp)
   80be0:	10800117 	ldw	r2,4(r2)
   80be4:	1885803a 	cmpltu	r2,r3,r2
   80be8:	10c03fcc 	andi	r3,r2,255
   80bec:	e0bfff17 	ldw	r2,-4(fp)
   80bf0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   80bf4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   80bf8:	00000306 	br	80c08 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   80bfc:	00000306 	br	80c0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   80c00:	0001883a 	nop
   80c04:	00000106 	br	80c0c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   80c08:	0001883a 	nop

  default:
    break;
  }

  return rc;
   80c0c:	e0bffb17 	ldw	r2,-20(fp)
}
   80c10:	e037883a 	mov	sp,fp
   80c14:	df000017 	ldw	fp,0(sp)
   80c18:	dec00104 	addi	sp,sp,4
   80c1c:	f800283a 	ret

00080c20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80c20:	defff304 	addi	sp,sp,-52
   80c24:	dfc00c15 	stw	ra,48(sp)
   80c28:	df000b15 	stw	fp,44(sp)
   80c2c:	df000b04 	addi	fp,sp,44
   80c30:	e13ffc15 	stw	r4,-16(fp)
   80c34:	e17ffd15 	stw	r5,-12(fp)
   80c38:	e1bffe15 	stw	r6,-8(fp)
   80c3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   80c40:	e0bffd17 	ldw	r2,-12(fp)
   80c44:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80c48:	00004706 	br	80d68 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   80c4c:	e0bffc17 	ldw	r2,-16(fp)
   80c50:	10800a17 	ldw	r2,40(r2)
   80c54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   80c58:	e0bffc17 	ldw	r2,-16(fp)
   80c5c:	10800b17 	ldw	r2,44(r2)
   80c60:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   80c64:	e0fff717 	ldw	r3,-36(fp)
   80c68:	e0bff817 	ldw	r2,-32(fp)
   80c6c:	18800536 	bltu	r3,r2,80c84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   80c70:	e0fff717 	ldw	r3,-36(fp)
   80c74:	e0bff817 	ldw	r2,-32(fp)
   80c78:	1885c83a 	sub	r2,r3,r2
   80c7c:	e0bff615 	stw	r2,-40(fp)
   80c80:	00000406 	br	80c94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80c84:	00c20004 	movi	r3,2048
   80c88:	e0bff817 	ldw	r2,-32(fp)
   80c8c:	1885c83a 	sub	r2,r3,r2
   80c90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   80c94:	e0bff617 	ldw	r2,-40(fp)
   80c98:	10001e26 	beq	r2,zero,80d14 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   80c9c:	e0fffe17 	ldw	r3,-8(fp)
   80ca0:	e0bff617 	ldw	r2,-40(fp)
   80ca4:	1880022e 	bgeu	r3,r2,80cb0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   80ca8:	e0bffe17 	ldw	r2,-8(fp)
   80cac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   80cb0:	e0bff817 	ldw	r2,-32(fp)
   80cb4:	10800e04 	addi	r2,r2,56
   80cb8:	e0fffc17 	ldw	r3,-16(fp)
   80cbc:	1885883a 	add	r2,r3,r2
   80cc0:	e13ff517 	ldw	r4,-44(fp)
   80cc4:	100b883a 	mov	r5,r2
   80cc8:	e1bff617 	ldw	r6,-40(fp)
   80ccc:	0082b500 	call	82b50 <memcpy>
      ptr   += n;
   80cd0:	e0fff517 	ldw	r3,-44(fp)
   80cd4:	e0bff617 	ldw	r2,-40(fp)
   80cd8:	1885883a 	add	r2,r3,r2
   80cdc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   80ce0:	e0fffe17 	ldw	r3,-8(fp)
   80ce4:	e0bff617 	ldw	r2,-40(fp)
   80ce8:	1885c83a 	sub	r2,r3,r2
   80cec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80cf0:	e0fff817 	ldw	r3,-32(fp)
   80cf4:	e0bff617 	ldw	r2,-40(fp)
   80cf8:	1885883a 	add	r2,r3,r2
   80cfc:	10c1ffcc 	andi	r3,r2,2047
   80d00:	e0bffc17 	ldw	r2,-16(fp)
   80d04:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   80d08:	e0bffe17 	ldw	r2,-8(fp)
   80d0c:	00bfcf16 	blt	zero,r2,80c4c <altera_avalon_jtag_uart_read+0x2c>
   80d10:	00000106 	br	80d18 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   80d14:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   80d18:	e0fff517 	ldw	r3,-44(fp)
   80d1c:	e0bffd17 	ldw	r2,-12(fp)
   80d20:	1880141e 	bne	r3,r2,80d74 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80d24:	e0bfff17 	ldw	r2,-4(fp)
   80d28:	1090000c 	andi	r2,r2,16384
   80d2c:	1000131e 	bne	r2,zero,80d7c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   80d30:	0001883a 	nop
   80d34:	e0bffc17 	ldw	r2,-16(fp)
   80d38:	10c00a17 	ldw	r3,40(r2)
   80d3c:	e0bff717 	ldw	r2,-36(fp)
   80d40:	1880051e 	bne	r3,r2,80d58 <altera_avalon_jtag_uart_read+0x138>
   80d44:	e0bffc17 	ldw	r2,-16(fp)
   80d48:	10c00917 	ldw	r3,36(r2)
   80d4c:	e0bffc17 	ldw	r2,-16(fp)
   80d50:	10800117 	ldw	r2,4(r2)
   80d54:	18bff736 	bltu	r3,r2,80d34 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   80d58:	e0bffc17 	ldw	r2,-16(fp)
   80d5c:	10c00a17 	ldw	r3,40(r2)
   80d60:	e0bff717 	ldw	r2,-36(fp)
   80d64:	18800726 	beq	r3,r2,80d84 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80d68:	e0bffe17 	ldw	r2,-8(fp)
   80d6c:	00bfb716 	blt	zero,r2,80c4c <altera_avalon_jtag_uart_read+0x2c>
   80d70:	00000506 	br	80d88 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   80d74:	0001883a 	nop
   80d78:	00000306 	br	80d88 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   80d7c:	0001883a 	nop
   80d80:	00000106 	br	80d88 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   80d84:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   80d88:	e0fff517 	ldw	r3,-44(fp)
   80d8c:	e0bffd17 	ldw	r2,-12(fp)
   80d90:	18801726 	beq	r3,r2,80df0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80d94:	0005303a 	rdctl	r2,status
   80d98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80d9c:	e0fffa17 	ldw	r3,-24(fp)
   80da0:	00bfff84 	movi	r2,-2
   80da4:	1884703a 	and	r2,r3,r2
   80da8:	1001703a 	wrctl	status,r2
  
  return context;
   80dac:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   80db0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80db4:	e0bffc17 	ldw	r2,-16(fp)
   80db8:	10800817 	ldw	r2,32(r2)
   80dbc:	10c00054 	ori	r3,r2,1
   80dc0:	e0bffc17 	ldw	r2,-16(fp)
   80dc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80dc8:	e0bffc17 	ldw	r2,-16(fp)
   80dcc:	10800017 	ldw	r2,0(r2)
   80dd0:	10800104 	addi	r2,r2,4
   80dd4:	e0fffc17 	ldw	r3,-16(fp)
   80dd8:	18c00817 	ldw	r3,32(r3)
   80ddc:	10c00035 	stwio	r3,0(r2)
   80de0:	e0bff917 	ldw	r2,-28(fp)
   80de4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80de8:	e0bffb17 	ldw	r2,-20(fp)
   80dec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   80df0:	e0fff517 	ldw	r3,-44(fp)
   80df4:	e0bffd17 	ldw	r2,-12(fp)
   80df8:	18800426 	beq	r3,r2,80e0c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   80dfc:	e0fff517 	ldw	r3,-44(fp)
   80e00:	e0bffd17 	ldw	r2,-12(fp)
   80e04:	1885c83a 	sub	r2,r3,r2
   80e08:	00000606 	br	80e24 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   80e0c:	e0bfff17 	ldw	r2,-4(fp)
   80e10:	1090000c 	andi	r2,r2,16384
   80e14:	10000226 	beq	r2,zero,80e20 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   80e18:	00bffd44 	movi	r2,-11
   80e1c:	00000106 	br	80e24 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   80e20:	00bffec4 	movi	r2,-5
}
   80e24:	e037883a 	mov	sp,fp
   80e28:	dfc00117 	ldw	ra,4(sp)
   80e2c:	df000017 	ldw	fp,0(sp)
   80e30:	dec00204 	addi	sp,sp,8
   80e34:	f800283a 	ret

00080e38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80e38:	defff304 	addi	sp,sp,-52
   80e3c:	dfc00c15 	stw	ra,48(sp)
   80e40:	df000b15 	stw	fp,44(sp)
   80e44:	df000b04 	addi	fp,sp,44
   80e48:	e13ffc15 	stw	r4,-16(fp)
   80e4c:	e17ffd15 	stw	r5,-12(fp)
   80e50:	e1bffe15 	stw	r6,-8(fp)
   80e54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   80e58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   80e5c:	e0bffd17 	ldw	r2,-12(fp)
   80e60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80e64:	00003706 	br	80f44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   80e68:	e0bffc17 	ldw	r2,-16(fp)
   80e6c:	10800c17 	ldw	r2,48(r2)
   80e70:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   80e74:	e0bffc17 	ldw	r2,-16(fp)
   80e78:	10800d17 	ldw	r2,52(r2)
   80e7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   80e80:	e0fff817 	ldw	r3,-32(fp)
   80e84:	e0bff517 	ldw	r2,-44(fp)
   80e88:	1880062e 	bgeu	r3,r2,80ea4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   80e8c:	e0fff517 	ldw	r3,-44(fp)
   80e90:	e0bff817 	ldw	r2,-32(fp)
   80e94:	1885c83a 	sub	r2,r3,r2
   80e98:	10bfffc4 	addi	r2,r2,-1
   80e9c:	e0bff615 	stw	r2,-40(fp)
   80ea0:	00000b06 	br	80ed0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   80ea4:	e0bff517 	ldw	r2,-44(fp)
   80ea8:	10000526 	beq	r2,zero,80ec0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   80eac:	00c20004 	movi	r3,2048
   80eb0:	e0bff817 	ldw	r2,-32(fp)
   80eb4:	1885c83a 	sub	r2,r3,r2
   80eb8:	e0bff615 	stw	r2,-40(fp)
   80ebc:	00000406 	br	80ed0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   80ec0:	00c1ffc4 	movi	r3,2047
   80ec4:	e0bff817 	ldw	r2,-32(fp)
   80ec8:	1885c83a 	sub	r2,r3,r2
   80ecc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   80ed0:	e0bff617 	ldw	r2,-40(fp)
   80ed4:	10001e26 	beq	r2,zero,80f50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   80ed8:	e0fffe17 	ldw	r3,-8(fp)
   80edc:	e0bff617 	ldw	r2,-40(fp)
   80ee0:	1880022e 	bgeu	r3,r2,80eec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   80ee4:	e0bffe17 	ldw	r2,-8(fp)
   80ee8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   80eec:	e0bff817 	ldw	r2,-32(fp)
   80ef0:	10820e04 	addi	r2,r2,2104
   80ef4:	e0fffc17 	ldw	r3,-16(fp)
   80ef8:	1885883a 	add	r2,r3,r2
   80efc:	1009883a 	mov	r4,r2
   80f00:	e17ffd17 	ldw	r5,-12(fp)
   80f04:	e1bff617 	ldw	r6,-40(fp)
   80f08:	0082b500 	call	82b50 <memcpy>
      ptr   += n;
   80f0c:	e0fffd17 	ldw	r3,-12(fp)
   80f10:	e0bff617 	ldw	r2,-40(fp)
   80f14:	1885883a 	add	r2,r3,r2
   80f18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   80f1c:	e0fffe17 	ldw	r3,-8(fp)
   80f20:	e0bff617 	ldw	r2,-40(fp)
   80f24:	1885c83a 	sub	r2,r3,r2
   80f28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80f2c:	e0fff817 	ldw	r3,-32(fp)
   80f30:	e0bff617 	ldw	r2,-40(fp)
   80f34:	1885883a 	add	r2,r3,r2
   80f38:	10c1ffcc 	andi	r3,r2,2047
   80f3c:	e0bffc17 	ldw	r2,-16(fp)
   80f40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80f44:	e0bffe17 	ldw	r2,-8(fp)
   80f48:	00bfc716 	blt	zero,r2,80e68 <altera_avalon_jtag_uart_write+0x30>
   80f4c:	00000106 	br	80f54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   80f50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f54:	0005303a 	rdctl	r2,status
   80f58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f5c:	e0fffa17 	ldw	r3,-24(fp)
   80f60:	00bfff84 	movi	r2,-2
   80f64:	1884703a 	and	r2,r3,r2
   80f68:	1001703a 	wrctl	status,r2
  
  return context;
   80f6c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   80f70:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80f74:	e0bffc17 	ldw	r2,-16(fp)
   80f78:	10800817 	ldw	r2,32(r2)
   80f7c:	10c00094 	ori	r3,r2,2
   80f80:	e0bffc17 	ldw	r2,-16(fp)
   80f84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80f88:	e0bffc17 	ldw	r2,-16(fp)
   80f8c:	10800017 	ldw	r2,0(r2)
   80f90:	10800104 	addi	r2,r2,4
   80f94:	e0fffc17 	ldw	r3,-16(fp)
   80f98:	18c00817 	ldw	r3,32(r3)
   80f9c:	10c00035 	stwio	r3,0(r2)
   80fa0:	e0bff917 	ldw	r2,-28(fp)
   80fa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80fa8:	e0bffb17 	ldw	r2,-20(fp)
   80fac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   80fb0:	e0bffe17 	ldw	r2,-8(fp)
   80fb4:	0080110e 	bge	zero,r2,80ffc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   80fb8:	e0bfff17 	ldw	r2,-4(fp)
   80fbc:	1090000c 	andi	r2,r2,16384
   80fc0:	1000111e 	bne	r2,zero,81008 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   80fc4:	0001883a 	nop
   80fc8:	e0bffc17 	ldw	r2,-16(fp)
   80fcc:	10c00d17 	ldw	r3,52(r2)
   80fd0:	e0bff517 	ldw	r2,-44(fp)
   80fd4:	1880051e 	bne	r3,r2,80fec <altera_avalon_jtag_uart_write+0x1b4>
   80fd8:	e0bffc17 	ldw	r2,-16(fp)
   80fdc:	10c00917 	ldw	r3,36(r2)
   80fe0:	e0bffc17 	ldw	r2,-16(fp)
   80fe4:	10800117 	ldw	r2,4(r2)
   80fe8:	18bff736 	bltu	r3,r2,80fc8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   80fec:	e0bffc17 	ldw	r2,-16(fp)
   80ff0:	10c00d17 	ldw	r3,52(r2)
   80ff4:	e0bff517 	ldw	r2,-44(fp)
   80ff8:	18800526 	beq	r3,r2,81010 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   80ffc:	e0bffe17 	ldw	r2,-8(fp)
   81000:	00bfd016 	blt	zero,r2,80f44 <altera_avalon_jtag_uart_write+0x10c>
   81004:	00000306 	br	81014 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   81008:	0001883a 	nop
   8100c:	00000106 	br	81014 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   81010:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81014:	e0fffd17 	ldw	r3,-12(fp)
   81018:	e0bff717 	ldw	r2,-36(fp)
   8101c:	18800426 	beq	r3,r2,81030 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   81020:	e0fffd17 	ldw	r3,-12(fp)
   81024:	e0bff717 	ldw	r2,-36(fp)
   81028:	1885c83a 	sub	r2,r3,r2
   8102c:	00000606 	br	81048 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   81030:	e0bfff17 	ldw	r2,-4(fp)
   81034:	1090000c 	andi	r2,r2,16384
   81038:	10000226 	beq	r2,zero,81044 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8103c:	00bffd44 	movi	r2,-11
   81040:	00000106 	br	81048 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   81044:	00bffec4 	movi	r2,-5
}
   81048:	e037883a 	mov	sp,fp
   8104c:	dfc00117 	ldw	ra,4(sp)
   81050:	df000017 	ldw	fp,0(sp)
   81054:	dec00204 	addi	sp,sp,8
   81058:	f800283a 	ret

0008105c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8105c:	defffa04 	addi	sp,sp,-24
   81060:	dfc00515 	stw	ra,20(sp)
   81064:	df000415 	stw	fp,16(sp)
   81068:	df000404 	addi	fp,sp,16
   8106c:	e13ffd15 	stw	r4,-12(fp)
   81070:	e17ffe15 	stw	r5,-8(fp)
   81074:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   81078:	e0bffd17 	ldw	r2,-12(fp)
   8107c:	10800017 	ldw	r2,0(r2)
   81080:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   81084:	e0bffc17 	ldw	r2,-16(fp)
   81088:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8108c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   81090:	10800217 	ldw	r2,8(r2)
   81094:	1809883a 	mov	r4,r3
   81098:	e17ffe17 	ldw	r5,-8(fp)
   8109c:	e1bfff17 	ldw	r6,-4(fp)
   810a0:	100f883a 	mov	r7,r2
   810a4:	00815640 	call	81564 <altera_avalon_uart_read>
      fd->fd_flags);
}
   810a8:	e037883a 	mov	sp,fp
   810ac:	dfc00117 	ldw	ra,4(sp)
   810b0:	df000017 	ldw	fp,0(sp)
   810b4:	dec00204 	addi	sp,sp,8
   810b8:	f800283a 	ret

000810bc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   810bc:	defffa04 	addi	sp,sp,-24
   810c0:	dfc00515 	stw	ra,20(sp)
   810c4:	df000415 	stw	fp,16(sp)
   810c8:	df000404 	addi	fp,sp,16
   810cc:	e13ffd15 	stw	r4,-12(fp)
   810d0:	e17ffe15 	stw	r5,-8(fp)
   810d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   810d8:	e0bffd17 	ldw	r2,-12(fp)
   810dc:	10800017 	ldw	r2,0(r2)
   810e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   810e4:	e0bffc17 	ldw	r2,-16(fp)
   810e8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   810ec:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   810f0:	10800217 	ldw	r2,8(r2)
   810f4:	1809883a 	mov	r4,r3
   810f8:	e17ffe17 	ldw	r5,-8(fp)
   810fc:	e1bfff17 	ldw	r6,-4(fp)
   81100:	100f883a 	mov	r7,r2
   81104:	00817b80 	call	817b8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   81108:	e037883a 	mov	sp,fp
   8110c:	dfc00117 	ldw	ra,4(sp)
   81110:	df000017 	ldw	fp,0(sp)
   81114:	dec00204 	addi	sp,sp,8
   81118:	f800283a 	ret

0008111c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   8111c:	defffc04 	addi	sp,sp,-16
   81120:	dfc00315 	stw	ra,12(sp)
   81124:	df000215 	stw	fp,8(sp)
   81128:	df000204 	addi	fp,sp,8
   8112c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   81130:	e0bfff17 	ldw	r2,-4(fp)
   81134:	10800017 	ldw	r2,0(r2)
   81138:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   8113c:	e0bffe17 	ldw	r2,-8(fp)
   81140:	10c00a04 	addi	r3,r2,40
   81144:	e0bfff17 	ldw	r2,-4(fp)
   81148:	10800217 	ldw	r2,8(r2)
   8114c:	1809883a 	mov	r4,r3
   81150:	100b883a 	mov	r5,r2
   81154:	00814c00 	call	814c0 <altera_avalon_uart_close>
}
   81158:	e037883a 	mov	sp,fp
   8115c:	dfc00117 	ldw	ra,4(sp)
   81160:	df000017 	ldw	fp,0(sp)
   81164:	dec00204 	addi	sp,sp,8
   81168:	f800283a 	ret

0008116c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   8116c:	defff804 	addi	sp,sp,-32
   81170:	dfc00715 	stw	ra,28(sp)
   81174:	df000615 	stw	fp,24(sp)
   81178:	df000604 	addi	fp,sp,24
   8117c:	e13ffd15 	stw	r4,-12(fp)
   81180:	e17ffe15 	stw	r5,-8(fp)
   81184:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   81188:	e0bffd17 	ldw	r2,-12(fp)
   8118c:	10800017 	ldw	r2,0(r2)
   81190:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   81194:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   81198:	1000041e 	bne	r2,zero,811ac <altera_avalon_uart_init+0x40>
   8119c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   811a0:	1000021e 	bne	r2,zero,811ac <altera_avalon_uart_init+0x40>
   811a4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   811a8:	10000226 	beq	r2,zero,811b4 <altera_avalon_uart_init+0x48>
   811ac:	00800044 	movi	r2,1
   811b0:	00000106 	br	811b8 <altera_avalon_uart_init+0x4c>
   811b4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   811b8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   811bc:	e0bffc17 	ldw	r2,-16(fp)
   811c0:	10000f1e 	bne	r2,zero,81200 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   811c4:	e0bffd17 	ldw	r2,-12(fp)
   811c8:	00c32004 	movi	r3,3200
   811cc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   811d0:	e0bffb17 	ldw	r2,-20(fp)
   811d4:	10800304 	addi	r2,r2,12
   811d8:	e0fffd17 	ldw	r3,-12(fp)
   811dc:	18c00117 	ldw	r3,4(r3)
   811e0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   811e4:	d8000015 	stw	zero,0(sp)
   811e8:	e13ffe17 	ldw	r4,-8(fp)
   811ec:	e17fff17 	ldw	r5,-4(fp)
   811f0:	01800234 	movhi	r6,8
   811f4:	31848504 	addi	r6,r6,4628
   811f8:	e1fffd17 	ldw	r7,-12(fp)
   811fc:	0081f1c0 	call	81f1c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   81200:	e037883a 	mov	sp,fp
   81204:	dfc00117 	ldw	ra,4(sp)
   81208:	df000017 	ldw	fp,0(sp)
   8120c:	dec00204 	addi	sp,sp,8
   81210:	f800283a 	ret

00081214 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   81214:	defffa04 	addi	sp,sp,-24
   81218:	dfc00515 	stw	ra,20(sp)
   8121c:	df000415 	stw	fp,16(sp)
   81220:	df000404 	addi	fp,sp,16
   81224:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   81228:	e0bfff17 	ldw	r2,-4(fp)
   8122c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   81230:	e0bffc17 	ldw	r2,-16(fp)
   81234:	10800017 	ldw	r2,0(r2)
   81238:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   8123c:	e0bffd17 	ldw	r2,-12(fp)
   81240:	10800204 	addi	r2,r2,8
   81244:	10800037 	ldwio	r2,0(r2)
   81248:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   8124c:	e0bffd17 	ldw	r2,-12(fp)
   81250:	10800204 	addi	r2,r2,8
   81254:	0007883a 	mov	r3,zero
   81258:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   8125c:	e0bffd17 	ldw	r2,-12(fp)
   81260:	10800204 	addi	r2,r2,8
   81264:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   81268:	e0bffe17 	ldw	r2,-8(fp)
   8126c:	1080200c 	andi	r2,r2,128
   81270:	10000326 	beq	r2,zero,81280 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   81274:	e13ffc17 	ldw	r4,-16(fp)
   81278:	e17ffe17 	ldw	r5,-8(fp)
   8127c:	00812ac0 	call	812ac <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   81280:	e0bffe17 	ldw	r2,-8(fp)
   81284:	1081100c 	andi	r2,r2,1088
   81288:	10000326 	beq	r2,zero,81298 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   8128c:	e13ffc17 	ldw	r4,-16(fp)
   81290:	e17ffe17 	ldw	r5,-8(fp)
   81294:	00813840 	call	81384 <altera_avalon_uart_txirq>
  }
  

}
   81298:	e037883a 	mov	sp,fp
   8129c:	dfc00117 	ldw	ra,4(sp)
   812a0:	df000017 	ldw	fp,0(sp)
   812a4:	dec00204 	addi	sp,sp,8
   812a8:	f800283a 	ret

000812ac <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   812ac:	defffc04 	addi	sp,sp,-16
   812b0:	df000315 	stw	fp,12(sp)
   812b4:	df000304 	addi	fp,sp,12
   812b8:	e13ffe15 	stw	r4,-8(fp)
   812bc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   812c0:	e0bfff17 	ldw	r2,-4(fp)
   812c4:	108000cc 	andi	r2,r2,3
   812c8:	1000291e 	bne	r2,zero,81370 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   812cc:	e0bffe17 	ldw	r2,-8(fp)
   812d0:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   812d4:	e0bffe17 	ldw	r2,-8(fp)
   812d8:	10800317 	ldw	r2,12(r2)
   812dc:	10800044 	addi	r2,r2,1
   812e0:	10800fcc 	andi	r2,r2,63
   812e4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   812e8:	e0bffe17 	ldw	r2,-8(fp)
   812ec:	10800317 	ldw	r2,12(r2)
   812f0:	e0fffe17 	ldw	r3,-8(fp)
   812f4:	18c00017 	ldw	r3,0(r3)
   812f8:	18c00037 	ldwio	r3,0(r3)
   812fc:	e13ffe17 	ldw	r4,-8(fp)
   81300:	2085883a 	add	r2,r4,r2
   81304:	10800704 	addi	r2,r2,28
   81308:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   8130c:	e0bffe17 	ldw	r2,-8(fp)
   81310:	e0fffd17 	ldw	r3,-12(fp)
   81314:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   81318:	e0bffe17 	ldw	r2,-8(fp)
   8131c:	10800317 	ldw	r2,12(r2)
   81320:	10800044 	addi	r2,r2,1
   81324:	10800fcc 	andi	r2,r2,63
   81328:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   8132c:	e0bffe17 	ldw	r2,-8(fp)
   81330:	10c00217 	ldw	r3,8(r2)
   81334:	e0bffd17 	ldw	r2,-12(fp)
   81338:	18800e1e 	bne	r3,r2,81374 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8133c:	e0bffe17 	ldw	r2,-8(fp)
   81340:	10c00117 	ldw	r3,4(r2)
   81344:	00bfdfc4 	movi	r2,-129
   81348:	1886703a 	and	r3,r3,r2
   8134c:	e0bffe17 	ldw	r2,-8(fp)
   81350:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   81354:	e0bffe17 	ldw	r2,-8(fp)
   81358:	10800017 	ldw	r2,0(r2)
   8135c:	10800304 	addi	r2,r2,12
   81360:	e0fffe17 	ldw	r3,-8(fp)
   81364:	18c00117 	ldw	r3,4(r3)
   81368:	10c00035 	stwio	r3,0(r2)
   8136c:	00000106 	br	81374 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   81370:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   81374:	e037883a 	mov	sp,fp
   81378:	df000017 	ldw	fp,0(sp)
   8137c:	dec00104 	addi	sp,sp,4
   81380:	f800283a 	ret

00081384 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   81384:	defffd04 	addi	sp,sp,-12
   81388:	df000215 	stw	fp,8(sp)
   8138c:	df000204 	addi	fp,sp,8
   81390:	e13ffe15 	stw	r4,-8(fp)
   81394:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   81398:	e0bffe17 	ldw	r2,-8(fp)
   8139c:	10c00417 	ldw	r3,16(r2)
   813a0:	e0bffe17 	ldw	r2,-8(fp)
   813a4:	10800517 	ldw	r2,20(r2)
   813a8:	18803026 	beq	r3,r2,8146c <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   813ac:	e0bffe17 	ldw	r2,-8(fp)
   813b0:	10800617 	ldw	r2,24(r2)
   813b4:	1080008c 	andi	r2,r2,2
   813b8:	10000326 	beq	r2,zero,813c8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   813bc:	e0bfff17 	ldw	r2,-4(fp)
   813c0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   813c4:	10001b26 	beq	r2,zero,81434 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   813c8:	e0bffe17 	ldw	r2,-8(fp)
   813cc:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   813d0:	e0bffe17 	ldw	r2,-8(fp)
   813d4:	10800017 	ldw	r2,0(r2)
   813d8:	10800104 	addi	r2,r2,4
   813dc:	e0fffe17 	ldw	r3,-8(fp)
   813e0:	18c00417 	ldw	r3,16(r3)
   813e4:	e13ffe17 	ldw	r4,-8(fp)
   813e8:	20c7883a 	add	r3,r4,r3
   813ec:	18c01704 	addi	r3,r3,92
   813f0:	18c00003 	ldbu	r3,0(r3)
   813f4:	18c03fcc 	andi	r3,r3,255
   813f8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   813fc:	e0bffe17 	ldw	r2,-8(fp)
   81400:	10800417 	ldw	r2,16(r2)
   81404:	10800044 	addi	r2,r2,1
   81408:	e0fffe17 	ldw	r3,-8(fp)
   8140c:	18800415 	stw	r2,16(r3)
   81410:	10c00fcc 	andi	r3,r2,63
   81414:	e0bffe17 	ldw	r2,-8(fp)
   81418:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8141c:	e0bffe17 	ldw	r2,-8(fp)
   81420:	10800117 	ldw	r2,4(r2)
   81424:	10c01014 	ori	r3,r2,64
   81428:	e0bffe17 	ldw	r2,-8(fp)
   8142c:	10c00115 	stw	r3,4(r2)
   81430:	00000e06 	br	8146c <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   81434:	e0bffe17 	ldw	r2,-8(fp)
   81438:	10800017 	ldw	r2,0(r2)
   8143c:	10800204 	addi	r2,r2,8
   81440:	10800037 	ldwio	r2,0(r2)
   81444:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   81448:	e0bfff17 	ldw	r2,-4(fp)
   8144c:	1082000c 	andi	r2,r2,2048
   81450:	1000061e 	bne	r2,zero,8146c <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   81454:	e0bffe17 	ldw	r2,-8(fp)
   81458:	10c00117 	ldw	r3,4(r2)
   8145c:	00bfefc4 	movi	r2,-65
   81460:	1886703a 	and	r3,r3,r2
   81464:	e0bffe17 	ldw	r2,-8(fp)
   81468:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   8146c:	e0bffe17 	ldw	r2,-8(fp)
   81470:	10c00417 	ldw	r3,16(r2)
   81474:	e0bffe17 	ldw	r2,-8(fp)
   81478:	10800517 	ldw	r2,20(r2)
   8147c:	1880061e 	bne	r3,r2,81498 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   81480:	e0bffe17 	ldw	r2,-8(fp)
   81484:	10c00117 	ldw	r3,4(r2)
   81488:	00beefc4 	movi	r2,-1089
   8148c:	1886703a 	and	r3,r3,r2
   81490:	e0bffe17 	ldw	r2,-8(fp)
   81494:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   81498:	e0bffe17 	ldw	r2,-8(fp)
   8149c:	10800017 	ldw	r2,0(r2)
   814a0:	10800304 	addi	r2,r2,12
   814a4:	e0fffe17 	ldw	r3,-8(fp)
   814a8:	18c00117 	ldw	r3,4(r3)
   814ac:	10c00035 	stwio	r3,0(r2)
}
   814b0:	e037883a 	mov	sp,fp
   814b4:	df000017 	ldw	fp,0(sp)
   814b8:	dec00104 	addi	sp,sp,4
   814bc:	f800283a 	ret

000814c0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   814c0:	defffd04 	addi	sp,sp,-12
   814c4:	df000215 	stw	fp,8(sp)
   814c8:	df000204 	addi	fp,sp,8
   814cc:	e13ffe15 	stw	r4,-8(fp)
   814d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   814d4:	00000506 	br	814ec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   814d8:	e0bfff17 	ldw	r2,-4(fp)
   814dc:	1090000c 	andi	r2,r2,16384
   814e0:	10000226 	beq	r2,zero,814ec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   814e4:	00bffd44 	movi	r2,-11
   814e8:	00000606 	br	81504 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   814ec:	e0bffe17 	ldw	r2,-8(fp)
   814f0:	10c00417 	ldw	r3,16(r2)
   814f4:	e0bffe17 	ldw	r2,-8(fp)
   814f8:	10800517 	ldw	r2,20(r2)
   814fc:	18bff61e 	bne	r3,r2,814d8 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   81500:	0005883a 	mov	r2,zero
}
   81504:	e037883a 	mov	sp,fp
   81508:	df000017 	ldw	fp,0(sp)
   8150c:	dec00104 	addi	sp,sp,4
   81510:	f800283a 	ret

00081514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81514:	defffe04 	addi	sp,sp,-8
   81518:	dfc00115 	stw	ra,4(sp)
   8151c:	df000015 	stw	fp,0(sp)
   81520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81524:	00800234 	movhi	r2,8
   81528:	10923004 	addi	r2,r2,18624
   8152c:	10800017 	ldw	r2,0(r2)
   81530:	10000526 	beq	r2,zero,81548 <alt_get_errno+0x34>
   81534:	00800234 	movhi	r2,8
   81538:	10923004 	addi	r2,r2,18624
   8153c:	10800017 	ldw	r2,0(r2)
   81540:	103ee83a 	callr	r2
   81544:	00000206 	br	81550 <alt_get_errno+0x3c>
   81548:	00800234 	movhi	r2,8
   8154c:	1097fa04 	addi	r2,r2,24552
}
   81550:	e037883a 	mov	sp,fp
   81554:	dfc00117 	ldw	ra,4(sp)
   81558:	df000017 	ldw	fp,0(sp)
   8155c:	dec00204 	addi	sp,sp,8
   81560:	f800283a 	ret

00081564 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   81564:	defff104 	addi	sp,sp,-60
   81568:	dfc00e15 	stw	ra,56(sp)
   8156c:	df000d15 	stw	fp,52(sp)
   81570:	df000d04 	addi	fp,sp,52
   81574:	e13ffc15 	stw	r4,-16(fp)
   81578:	e17ffd15 	stw	r5,-12(fp)
   8157c:	e1bffe15 	stw	r6,-8(fp)
   81580:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   81584:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
   81588:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   8158c:	e0bfff17 	ldw	r2,-4(fp)
   81590:	1090000c 	andi	r2,r2,16384
   81594:	1005003a 	cmpeq	r2,r2,zero
   81598:	10803fcc 	andi	r2,r2,255
   8159c:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   815a0:	e0bffc17 	ldw	r2,-16(fp)
   815a4:	10800217 	ldw	r2,8(r2)
   815a8:	10800044 	addi	r2,r2,1
   815ac:	10800fcc 	andi	r2,r2,63
   815b0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   815b4:	00001906 	br	8161c <altera_avalon_uart_read+0xb8>
    {
      count++;
   815b8:	e0bff417 	ldw	r2,-48(fp)
   815bc:	10800044 	addi	r2,r2,1
   815c0:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   815c4:	e0bffc17 	ldw	r2,-16(fp)
   815c8:	10800217 	ldw	r2,8(r2)
   815cc:	e0fffc17 	ldw	r3,-16(fp)
   815d0:	1885883a 	add	r2,r3,r2
   815d4:	10800704 	addi	r2,r2,28
   815d8:	10800003 	ldbu	r2,0(r2)
   815dc:	1007883a 	mov	r3,r2
   815e0:	e0bffd17 	ldw	r2,-12(fp)
   815e4:	10c00005 	stb	r3,0(r2)
   815e8:	e0bffd17 	ldw	r2,-12(fp)
   815ec:	10800044 	addi	r2,r2,1
   815f0:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   815f4:	e0bffc17 	ldw	r2,-16(fp)
   815f8:	10800217 	ldw	r2,8(r2)
   815fc:	10c00044 	addi	r3,r2,1
   81600:	e0bffc17 	ldw	r2,-16(fp)
   81604:	10c00215 	stw	r3,8(r2)
   81608:	e0bffc17 	ldw	r2,-16(fp)
   8160c:	10800217 	ldw	r2,8(r2)
   81610:	10c00fcc 	andi	r3,r2,63
   81614:	e0bffc17 	ldw	r2,-16(fp)
   81618:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8161c:	e0fff417 	ldw	r3,-48(fp)
   81620:	e0bffe17 	ldw	r2,-8(fp)
   81624:	1880050e 	bge	r3,r2,8163c <altera_avalon_uart_read+0xd8>
   81628:	e0bffc17 	ldw	r2,-16(fp)
   8162c:	10c00217 	ldw	r3,8(r2)
   81630:	e0bffc17 	ldw	r2,-16(fp)
   81634:	10800317 	ldw	r2,12(r2)
   81638:	18bfdf1e 	bne	r3,r2,815b8 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   8163c:	e0bff417 	ldw	r2,-48(fp)
   81640:	1000241e 	bne	r2,zero,816d4 <altera_avalon_uart_read+0x170>
   81644:	e0bffc17 	ldw	r2,-16(fp)
   81648:	10c00217 	ldw	r3,8(r2)
   8164c:	e0bffc17 	ldw	r2,-16(fp)
   81650:	10800317 	ldw	r2,12(r2)
   81654:	18801f1e 	bne	r3,r2,816d4 <altera_avalon_uart_read+0x170>
    {
      if (!block)
   81658:	e0bff517 	ldw	r2,-44(fp)
   8165c:	1000061e 	bne	r2,zero,81678 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   81660:	00815140 	call	81514 <alt_get_errno>
   81664:	00c002c4 	movi	r3,11
   81668:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   8166c:	00800044 	movi	r2,1
   81670:	e0bff305 	stb	r2,-52(fp)
        break;
   81674:	00001b06 	br	816e4 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81678:	0005303a 	rdctl	r2,status
   8167c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81680:	e0fff817 	ldw	r3,-32(fp)
   81684:	00bfff84 	movi	r2,-2
   81688:	1884703a 	and	r2,r3,r2
   8168c:	1001703a 	wrctl	status,r2
  
  return context;
   81690:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   81694:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   81698:	e0bffc17 	ldw	r2,-16(fp)
   8169c:	10800117 	ldw	r2,4(r2)
   816a0:	10c02014 	ori	r3,r2,128
   816a4:	e0bffc17 	ldw	r2,-16(fp)
   816a8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   816ac:	e0bffc17 	ldw	r2,-16(fp)
   816b0:	10800017 	ldw	r2,0(r2)
   816b4:	10800304 	addi	r2,r2,12
   816b8:	e0fffc17 	ldw	r3,-16(fp)
   816bc:	18c00117 	ldw	r3,4(r3)
   816c0:	10c00035 	stwio	r3,0(r2)
   816c4:	e0bff717 	ldw	r2,-36(fp)
   816c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   816cc:	e0bff917 	ldw	r2,-28(fp)
   816d0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   816d4:	e0bff417 	ldw	r2,-48(fp)
   816d8:	1000021e 	bne	r2,zero,816e4 <altera_avalon_uart_read+0x180>
   816dc:	e0bffe17 	ldw	r2,-8(fp)
   816e0:	103fce1e 	bne	r2,zero,8161c <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   816e4:	0005303a 	rdctl	r2,status
   816e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   816ec:	e0fffa17 	ldw	r3,-24(fp)
   816f0:	00bfff84 	movi	r2,-2
   816f4:	1884703a 	and	r2,r3,r2
   816f8:	1001703a 	wrctl	status,r2
  
  return context;
   816fc:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   81700:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   81704:	e0bffc17 	ldw	r2,-16(fp)
   81708:	10800117 	ldw	r2,4(r2)
   8170c:	10c02014 	ori	r3,r2,128
   81710:	e0bffc17 	ldw	r2,-16(fp)
   81714:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   81718:	e0bffc17 	ldw	r2,-16(fp)
   8171c:	10800017 	ldw	r2,0(r2)
   81720:	10800304 	addi	r2,r2,12
   81724:	e0fffc17 	ldw	r3,-16(fp)
   81728:	18c00117 	ldw	r3,4(r3)
   8172c:	10c00035 	stwio	r3,0(r2)
   81730:	e0bff717 	ldw	r2,-36(fp)
   81734:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81738:	e0bffb17 	ldw	r2,-20(fp)
   8173c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   81740:	e0bff303 	ldbu	r2,-52(fp)
   81744:	10000226 	beq	r2,zero,81750 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
   81748:	00bffd44 	movi	r2,-11
   8174c:	00000106 	br	81754 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
   81750:	e0bff417 	ldw	r2,-48(fp)
  }
}
   81754:	e037883a 	mov	sp,fp
   81758:	dfc00117 	ldw	ra,4(sp)
   8175c:	df000017 	ldw	fp,0(sp)
   81760:	dec00204 	addi	sp,sp,8
   81764:	f800283a 	ret

00081768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81768:	defffe04 	addi	sp,sp,-8
   8176c:	dfc00115 	stw	ra,4(sp)
   81770:	df000015 	stw	fp,0(sp)
   81774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81778:	00800234 	movhi	r2,8
   8177c:	10923004 	addi	r2,r2,18624
   81780:	10800017 	ldw	r2,0(r2)
   81784:	10000526 	beq	r2,zero,8179c <alt_get_errno+0x34>
   81788:	00800234 	movhi	r2,8
   8178c:	10923004 	addi	r2,r2,18624
   81790:	10800017 	ldw	r2,0(r2)
   81794:	103ee83a 	callr	r2
   81798:	00000206 	br	817a4 <alt_get_errno+0x3c>
   8179c:	00800234 	movhi	r2,8
   817a0:	1097fa04 	addi	r2,r2,24552
}
   817a4:	e037883a 	mov	sp,fp
   817a8:	dfc00117 	ldw	ra,4(sp)
   817ac:	df000017 	ldw	fp,0(sp)
   817b0:	dec00204 	addi	sp,sp,8
   817b4:	f800283a 	ret

000817b8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   817b8:	defff204 	addi	sp,sp,-56
   817bc:	dfc00d15 	stw	ra,52(sp)
   817c0:	df000c15 	stw	fp,48(sp)
   817c4:	df000c04 	addi	fp,sp,48
   817c8:	e13ffc15 	stw	r4,-16(fp)
   817cc:	e17ffd15 	stw	r5,-12(fp)
   817d0:	e1bffe15 	stw	r6,-8(fp)
   817d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   817d8:	e0bffe17 	ldw	r2,-8(fp)
   817dc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   817e0:	e0bfff17 	ldw	r2,-4(fp)
   817e4:	1090000c 	andi	r2,r2,16384
   817e8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   817ec:	00003b06 	br	818dc <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   817f0:	e0bffc17 	ldw	r2,-16(fp)
   817f4:	10800517 	ldw	r2,20(r2)
   817f8:	10800044 	addi	r2,r2,1
   817fc:	10800fcc 	andi	r2,r2,63
   81800:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   81804:	e0bffc17 	ldw	r2,-16(fp)
   81808:	10c00417 	ldw	r3,16(r2)
   8180c:	e0bff617 	ldw	r2,-40(fp)
   81810:	1880211e 	bne	r3,r2,81898 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
   81814:	e0bff517 	ldw	r2,-44(fp)
   81818:	10000426 	beq	r2,zero,8182c <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   8181c:	00817680 	call	81768 <alt_get_errno>
   81820:	00c002c4 	movi	r3,11
   81824:	10c00015 	stw	r3,0(r2)
        break;
   81828:	00002e06 	br	818e4 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8182c:	0005303a 	rdctl	r2,status
   81830:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81834:	e0fff817 	ldw	r3,-32(fp)
   81838:	00bfff84 	movi	r2,-2
   8183c:	1884703a 	and	r2,r3,r2
   81840:	1001703a 	wrctl	status,r2
  
  return context;
   81844:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   81848:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8184c:	e0bffc17 	ldw	r2,-16(fp)
   81850:	10800117 	ldw	r2,4(r2)
   81854:	10c11014 	ori	r3,r2,1088
   81858:	e0bffc17 	ldw	r2,-16(fp)
   8185c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   81860:	e0bffc17 	ldw	r2,-16(fp)
   81864:	10800017 	ldw	r2,0(r2)
   81868:	10800304 	addi	r2,r2,12
   8186c:	e0fffc17 	ldw	r3,-16(fp)
   81870:	18c00117 	ldw	r3,4(r3)
   81874:	10c00035 	stwio	r3,0(r2)
   81878:	e0bff717 	ldw	r2,-36(fp)
   8187c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81880:	e0bff917 	ldw	r2,-28(fp)
   81884:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   81888:	e0bffc17 	ldw	r2,-16(fp)
   8188c:	10c00417 	ldw	r3,16(r2)
   81890:	e0bff617 	ldw	r2,-40(fp)
   81894:	18bffc26 	beq	r3,r2,81888 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
   81898:	e0bff417 	ldw	r2,-48(fp)
   8189c:	10bfffc4 	addi	r2,r2,-1
   818a0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   818a4:	e0bffc17 	ldw	r2,-16(fp)
   818a8:	10800517 	ldw	r2,20(r2)
   818ac:	e0fffd17 	ldw	r3,-12(fp)
   818b0:	18c00003 	ldbu	r3,0(r3)
   818b4:	e13ffc17 	ldw	r4,-16(fp)
   818b8:	2085883a 	add	r2,r4,r2
   818bc:	10801704 	addi	r2,r2,92
   818c0:	10c00005 	stb	r3,0(r2)
   818c4:	e0bffd17 	ldw	r2,-12(fp)
   818c8:	10800044 	addi	r2,r2,1
   818cc:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   818d0:	e0bffc17 	ldw	r2,-16(fp)
   818d4:	e0fff617 	ldw	r3,-40(fp)
   818d8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   818dc:	e0bff417 	ldw	r2,-48(fp)
   818e0:	103fc31e 	bne	r2,zero,817f0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   818e4:	0005303a 	rdctl	r2,status
   818e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   818ec:	e0fffa17 	ldw	r3,-24(fp)
   818f0:	00bfff84 	movi	r2,-2
   818f4:	1884703a 	and	r2,r3,r2
   818f8:	1001703a 	wrctl	status,r2
  
  return context;
   818fc:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   81900:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   81904:	e0bffc17 	ldw	r2,-16(fp)
   81908:	10800117 	ldw	r2,4(r2)
   8190c:	10c11014 	ori	r3,r2,1088
   81910:	e0bffc17 	ldw	r2,-16(fp)
   81914:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   81918:	e0bffc17 	ldw	r2,-16(fp)
   8191c:	10800017 	ldw	r2,0(r2)
   81920:	10800304 	addi	r2,r2,12
   81924:	e0fffc17 	ldw	r3,-16(fp)
   81928:	18c00117 	ldw	r3,4(r3)
   8192c:	10c00035 	stwio	r3,0(r2)
   81930:	e0bff717 	ldw	r2,-36(fp)
   81934:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81938:	e0bffb17 	ldw	r2,-20(fp)
   8193c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   81940:	e0fffe17 	ldw	r3,-8(fp)
   81944:	e0bff417 	ldw	r2,-48(fp)
   81948:	1885c83a 	sub	r2,r3,r2
}
   8194c:	e037883a 	mov	sp,fp
   81950:	dfc00117 	ldw	ra,4(sp)
   81954:	df000017 	ldw	fp,0(sp)
   81958:	dec00204 	addi	sp,sp,8
   8195c:	f800283a 	ret

00081960 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   81960:	defff504 	addi	sp,sp,-44
   81964:	df000a15 	stw	fp,40(sp)
   81968:	df000a04 	addi	fp,sp,40
   8196c:	e13ffc15 	stw	r4,-16(fp)
   81970:	e17ffd15 	stw	r5,-12(fp)
   81974:	e1bffe15 	stw	r6,-8(fp)
   81978:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8197c:	e03ff615 	stw	zero,-40(fp)
   81980:	00800234 	movhi	r2,8
   81984:	1097f804 	addi	r2,r2,24544
   81988:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8198c:	10003f26 	beq	r2,zero,81a8c <alt_alarm_start+0x12c>
  {
    if (alarm)
   81990:	e0bffc17 	ldw	r2,-16(fp)
   81994:	10003b26 	beq	r2,zero,81a84 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   81998:	e0bffc17 	ldw	r2,-16(fp)
   8199c:	e0fffe17 	ldw	r3,-8(fp)
   819a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   819a4:	e0bffc17 	ldw	r2,-16(fp)
   819a8:	e0ffff17 	ldw	r3,-4(fp)
   819ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   819b0:	0005303a 	rdctl	r2,status
   819b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   819b8:	e0fff817 	ldw	r3,-32(fp)
   819bc:	00bfff84 	movi	r2,-2
   819c0:	1884703a 	and	r2,r3,r2
   819c4:	1001703a 	wrctl	status,r2
  
  return context;
   819c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   819cc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   819d0:	00800234 	movhi	r2,8
   819d4:	1097f904 	addi	r2,r2,24548
   819d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   819dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   819e0:	e0fffd17 	ldw	r3,-12(fp)
   819e4:	e0bff617 	ldw	r2,-40(fp)
   819e8:	1885883a 	add	r2,r3,r2
   819ec:	10c00044 	addi	r3,r2,1
   819f0:	e0bffc17 	ldw	r2,-16(fp)
   819f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   819f8:	e0bffc17 	ldw	r2,-16(fp)
   819fc:	10c00217 	ldw	r3,8(r2)
   81a00:	e0bff617 	ldw	r2,-40(fp)
   81a04:	1880042e 	bgeu	r3,r2,81a18 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   81a08:	e0bffc17 	ldw	r2,-16(fp)
   81a0c:	00c00044 	movi	r3,1
   81a10:	10c00405 	stb	r3,16(r2)
   81a14:	00000206 	br	81a20 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   81a18:	e0bffc17 	ldw	r2,-16(fp)
   81a1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   81a20:	e0bffc17 	ldw	r2,-16(fp)
   81a24:	00c00234 	movhi	r3,8
   81a28:	18d23204 	addi	r3,r3,18632
   81a2c:	e0fff915 	stw	r3,-28(fp)
   81a30:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81a34:	e0bffa17 	ldw	r2,-24(fp)
   81a38:	e0fff917 	ldw	r3,-28(fp)
   81a3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   81a40:	e0bff917 	ldw	r2,-28(fp)
   81a44:	10c00017 	ldw	r3,0(r2)
   81a48:	e0bffa17 	ldw	r2,-24(fp)
   81a4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81a50:	e0bff917 	ldw	r2,-28(fp)
   81a54:	10800017 	ldw	r2,0(r2)
   81a58:	e0fffa17 	ldw	r3,-24(fp)
   81a5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   81a60:	e0bff917 	ldw	r2,-28(fp)
   81a64:	e0fffa17 	ldw	r3,-24(fp)
   81a68:	10c00015 	stw	r3,0(r2)
   81a6c:	e0bff717 	ldw	r2,-36(fp)
   81a70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81a74:	e0bffb17 	ldw	r2,-20(fp)
   81a78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   81a7c:	0005883a 	mov	r2,zero
   81a80:	00000306 	br	81a90 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   81a84:	00bffa84 	movi	r2,-22
   81a88:	00000106 	br	81a90 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   81a8c:	00bfde84 	movi	r2,-134
  }
}
   81a90:	e037883a 	mov	sp,fp
   81a94:	df000017 	ldw	fp,0(sp)
   81a98:	dec00104 	addi	sp,sp,4
   81a9c:	f800283a 	ret

00081aa0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   81aa0:	defffa04 	addi	sp,sp,-24
   81aa4:	dfc00515 	stw	ra,20(sp)
   81aa8:	df000415 	stw	fp,16(sp)
   81aac:	df000404 	addi	fp,sp,16
   81ab0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   81ab4:	00800244 	movi	r2,9
   81ab8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   81abc:	e13ffd17 	ldw	r4,-12(fp)
   81ac0:	014003f4 	movhi	r5,15
   81ac4:	29509004 	addi	r5,r5,16960
   81ac8:	008311c0 	call	8311c <__mulsi3>
   81acc:	0100bef4 	movhi	r4,763
   81ad0:	213c2004 	addi	r4,r4,-3968
   81ad4:	100b883a 	mov	r5,r2
   81ad8:	008310c0 	call	8310c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   81adc:	01200034 	movhi	r4,32768
   81ae0:	213fffc4 	addi	r4,r4,-1
   81ae4:	100b883a 	mov	r5,r2
   81ae8:	008310c0 	call	8310c <__udivsi3>
   81aec:	e13fff17 	ldw	r4,-4(fp)
   81af0:	100b883a 	mov	r5,r2
   81af4:	008310c0 	call	8310c <__udivsi3>
   81af8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   81afc:	e0bffe17 	ldw	r2,-8(fp)
   81b00:	10002926 	beq	r2,zero,81ba8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   81b04:	e03ffc15 	stw	zero,-16(fp)
   81b08:	00001606 	br	81b64 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   81b0c:	00a00034 	movhi	r2,32768
   81b10:	10bfffc4 	addi	r2,r2,-1
   81b14:	10bfffc4 	addi	r2,r2,-1
   81b18:	103ffe1e 	bne	r2,zero,81b14 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   81b1c:	e13ffd17 	ldw	r4,-12(fp)
   81b20:	014003f4 	movhi	r5,15
   81b24:	29509004 	addi	r5,r5,16960
   81b28:	008311c0 	call	8311c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   81b2c:	0100bef4 	movhi	r4,763
   81b30:	213c2004 	addi	r4,r4,-3968
   81b34:	100b883a 	mov	r5,r2
   81b38:	008310c0 	call	8310c <__udivsi3>
   81b3c:	01200034 	movhi	r4,32768
   81b40:	213fffc4 	addi	r4,r4,-1
   81b44:	100b883a 	mov	r5,r2
   81b48:	008310c0 	call	8310c <__udivsi3>
   81b4c:	e0ffff17 	ldw	r3,-4(fp)
   81b50:	1885c83a 	sub	r2,r3,r2
   81b54:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   81b58:	e0bffc17 	ldw	r2,-16(fp)
   81b5c:	10800044 	addi	r2,r2,1
   81b60:	e0bffc15 	stw	r2,-16(fp)
   81b64:	e0fffc17 	ldw	r3,-16(fp)
   81b68:	e0bffe17 	ldw	r2,-8(fp)
   81b6c:	18bfe716 	blt	r3,r2,81b0c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   81b70:	e13ffd17 	ldw	r4,-12(fp)
   81b74:	014003f4 	movhi	r5,15
   81b78:	29509004 	addi	r5,r5,16960
   81b7c:	008311c0 	call	8311c <__mulsi3>
   81b80:	0100bef4 	movhi	r4,763
   81b84:	213c2004 	addi	r4,r4,-3968
   81b88:	100b883a 	mov	r5,r2
   81b8c:	008310c0 	call	8310c <__udivsi3>
   81b90:	1009883a 	mov	r4,r2
   81b94:	e17fff17 	ldw	r5,-4(fp)
   81b98:	008311c0 	call	8311c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   81b9c:	10bfffc4 	addi	r2,r2,-1
   81ba0:	103ffe1e 	bne	r2,zero,81b9c <alt_busy_sleep+0xfc>
   81ba4:	00000d06 	br	81bdc <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   81ba8:	e13ffd17 	ldw	r4,-12(fp)
   81bac:	014003f4 	movhi	r5,15
   81bb0:	29509004 	addi	r5,r5,16960
   81bb4:	008311c0 	call	8311c <__mulsi3>
   81bb8:	0100bef4 	movhi	r4,763
   81bbc:	213c2004 	addi	r4,r4,-3968
   81bc0:	100b883a 	mov	r5,r2
   81bc4:	008310c0 	call	8310c <__udivsi3>
   81bc8:	1009883a 	mov	r4,r2
   81bcc:	e17fff17 	ldw	r5,-4(fp)
   81bd0:	008311c0 	call	8311c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   81bd4:	10bfffc4 	addi	r2,r2,-1
   81bd8:	00bffe16 	blt	zero,r2,81bd4 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   81bdc:	0005883a 	mov	r2,zero
}
   81be0:	e037883a 	mov	sp,fp
   81be4:	dfc00117 	ldw	ra,4(sp)
   81be8:	df000017 	ldw	fp,0(sp)
   81bec:	dec00204 	addi	sp,sp,8
   81bf0:	f800283a 	ret

00081bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81bf4:	defffe04 	addi	sp,sp,-8
   81bf8:	dfc00115 	stw	ra,4(sp)
   81bfc:	df000015 	stw	fp,0(sp)
   81c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81c04:	00800234 	movhi	r2,8
   81c08:	10923004 	addi	r2,r2,18624
   81c0c:	10800017 	ldw	r2,0(r2)
   81c10:	10000526 	beq	r2,zero,81c28 <alt_get_errno+0x34>
   81c14:	00800234 	movhi	r2,8
   81c18:	10923004 	addi	r2,r2,18624
   81c1c:	10800017 	ldw	r2,0(r2)
   81c20:	103ee83a 	callr	r2
   81c24:	00000206 	br	81c30 <alt_get_errno+0x3c>
   81c28:	00800234 	movhi	r2,8
   81c2c:	1097fa04 	addi	r2,r2,24552
}
   81c30:	e037883a 	mov	sp,fp
   81c34:	dfc00117 	ldw	ra,4(sp)
   81c38:	df000017 	ldw	fp,0(sp)
   81c3c:	dec00204 	addi	sp,sp,8
   81c40:	f800283a 	ret

00081c44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81c44:	defffb04 	addi	sp,sp,-20
   81c48:	dfc00415 	stw	ra,16(sp)
   81c4c:	df000315 	stw	fp,12(sp)
   81c50:	df000304 	addi	fp,sp,12
   81c54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81c58:	e0bfff17 	ldw	r2,-4(fp)
   81c5c:	10000716 	blt	r2,zero,81c7c <close+0x38>
   81c60:	e13fff17 	ldw	r4,-4(fp)
   81c64:	01400304 	movi	r5,12
   81c68:	008311c0 	call	8311c <__mulsi3>
   81c6c:	00c00234 	movhi	r3,8
   81c70:	18d0cb04 	addi	r3,r3,17196
   81c74:	10c5883a 	add	r2,r2,r3
   81c78:	00000106 	br	81c80 <close+0x3c>
   81c7c:	0005883a 	mov	r2,zero
   81c80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   81c84:	e0bffd17 	ldw	r2,-12(fp)
   81c88:	10001826 	beq	r2,zero,81cec <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   81c8c:	e0bffd17 	ldw	r2,-12(fp)
   81c90:	10800017 	ldw	r2,0(r2)
   81c94:	10800417 	ldw	r2,16(r2)
   81c98:	10000626 	beq	r2,zero,81cb4 <close+0x70>
   81c9c:	e0bffd17 	ldw	r2,-12(fp)
   81ca0:	10800017 	ldw	r2,0(r2)
   81ca4:	10800417 	ldw	r2,16(r2)
   81ca8:	e13ffd17 	ldw	r4,-12(fp)
   81cac:	103ee83a 	callr	r2
   81cb0:	00000106 	br	81cb8 <close+0x74>
   81cb4:	0005883a 	mov	r2,zero
   81cb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81cbc:	e13fff17 	ldw	r4,-4(fp)
   81cc0:	00825d40 	call	825d4 <alt_release_fd>
    if (rval < 0)
   81cc4:	e0bffe17 	ldw	r2,-8(fp)
   81cc8:	1000060e 	bge	r2,zero,81ce4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   81ccc:	0081bf40 	call	81bf4 <alt_get_errno>
   81cd0:	e0fffe17 	ldw	r3,-8(fp)
   81cd4:	00c7c83a 	sub	r3,zero,r3
   81cd8:	10c00015 	stw	r3,0(r2)
      return -1;
   81cdc:	00bfffc4 	movi	r2,-1
   81ce0:	00000606 	br	81cfc <close+0xb8>
    }
    return 0;
   81ce4:	0005883a 	mov	r2,zero
   81ce8:	00000406 	br	81cfc <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81cec:	0081bf40 	call	81bf4 <alt_get_errno>
   81cf0:	00c01444 	movi	r3,81
   81cf4:	10c00015 	stw	r3,0(r2)
    return -1;
   81cf8:	00bfffc4 	movi	r2,-1
  }
}
   81cfc:	e037883a 	mov	sp,fp
   81d00:	dfc00117 	ldw	ra,4(sp)
   81d04:	df000017 	ldw	fp,0(sp)
   81d08:	dec00204 	addi	sp,sp,8
   81d0c:	f800283a 	ret

00081d10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81d10:	deffff04 	addi	sp,sp,-4
   81d14:	df000015 	stw	fp,0(sp)
   81d18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81d1c:	e037883a 	mov	sp,fp
   81d20:	df000017 	ldw	fp,0(sp)
   81d24:	dec00104 	addi	sp,sp,4
   81d28:	f800283a 	ret

00081d2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   81d2c:	defffc04 	addi	sp,sp,-16
   81d30:	df000315 	stw	fp,12(sp)
   81d34:	df000304 	addi	fp,sp,12
   81d38:	e13ffd15 	stw	r4,-12(fp)
   81d3c:	e17ffe15 	stw	r5,-8(fp)
   81d40:	e1bfff15 	stw	r6,-4(fp)
  return len;
   81d44:	e0bfff17 	ldw	r2,-4(fp)
}
   81d48:	e037883a 	mov	sp,fp
   81d4c:	df000017 	ldw	fp,0(sp)
   81d50:	dec00104 	addi	sp,sp,4
   81d54:	f800283a 	ret

00081d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81d58:	defffe04 	addi	sp,sp,-8
   81d5c:	dfc00115 	stw	ra,4(sp)
   81d60:	df000015 	stw	fp,0(sp)
   81d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81d68:	00800234 	movhi	r2,8
   81d6c:	10923004 	addi	r2,r2,18624
   81d70:	10800017 	ldw	r2,0(r2)
   81d74:	10000526 	beq	r2,zero,81d8c <alt_get_errno+0x34>
   81d78:	00800234 	movhi	r2,8
   81d7c:	10923004 	addi	r2,r2,18624
   81d80:	10800017 	ldw	r2,0(r2)
   81d84:	103ee83a 	callr	r2
   81d88:	00000206 	br	81d94 <alt_get_errno+0x3c>
   81d8c:	00800234 	movhi	r2,8
   81d90:	1097fa04 	addi	r2,r2,24552
}
   81d94:	e037883a 	mov	sp,fp
   81d98:	dfc00117 	ldw	ra,4(sp)
   81d9c:	df000017 	ldw	fp,0(sp)
   81da0:	dec00204 	addi	sp,sp,8
   81da4:	f800283a 	ret

00081da8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81da8:	defffa04 	addi	sp,sp,-24
   81dac:	dfc00515 	stw	ra,20(sp)
   81db0:	df000415 	stw	fp,16(sp)
   81db4:	df000404 	addi	fp,sp,16
   81db8:	e13ffe15 	stw	r4,-8(fp)
   81dbc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81dc0:	e0bffe17 	ldw	r2,-8(fp)
   81dc4:	10000326 	beq	r2,zero,81dd4 <alt_dev_llist_insert+0x2c>
   81dc8:	e0bffe17 	ldw	r2,-8(fp)
   81dcc:	10800217 	ldw	r2,8(r2)
   81dd0:	1000051e 	bne	r2,zero,81de8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   81dd4:	0081d580 	call	81d58 <alt_get_errno>
   81dd8:	00c00584 	movi	r3,22
   81ddc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   81de0:	00bffa84 	movi	r2,-22
   81de4:	00001306 	br	81e34 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   81de8:	e0bffe17 	ldw	r2,-8(fp)
   81dec:	e0ffff17 	ldw	r3,-4(fp)
   81df0:	e0fffc15 	stw	r3,-16(fp)
   81df4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81df8:	e0bffd17 	ldw	r2,-12(fp)
   81dfc:	e0fffc17 	ldw	r3,-16(fp)
   81e00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   81e04:	e0bffc17 	ldw	r2,-16(fp)
   81e08:	10c00017 	ldw	r3,0(r2)
   81e0c:	e0bffd17 	ldw	r2,-12(fp)
   81e10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81e14:	e0bffc17 	ldw	r2,-16(fp)
   81e18:	10800017 	ldw	r2,0(r2)
   81e1c:	e0fffd17 	ldw	r3,-12(fp)
   81e20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   81e24:	e0bffc17 	ldw	r2,-16(fp)
   81e28:	e0fffd17 	ldw	r3,-12(fp)
   81e2c:	10c00015 	stw	r3,0(r2)

  return 0;  
   81e30:	0005883a 	mov	r2,zero
}
   81e34:	e037883a 	mov	sp,fp
   81e38:	dfc00117 	ldw	ra,4(sp)
   81e3c:	df000017 	ldw	fp,0(sp)
   81e40:	dec00204 	addi	sp,sp,8
   81e44:	f800283a 	ret

00081e48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   81e48:	defffd04 	addi	sp,sp,-12
   81e4c:	dfc00215 	stw	ra,8(sp)
   81e50:	df000115 	stw	fp,4(sp)
   81e54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81e58:	00800234 	movhi	r2,8
   81e5c:	108c5f04 	addi	r2,r2,12668
   81e60:	e0bfff15 	stw	r2,-4(fp)
   81e64:	00000606 	br	81e80 <_do_ctors+0x38>
        (*ctor) (); 
   81e68:	e0bfff17 	ldw	r2,-4(fp)
   81e6c:	10800017 	ldw	r2,0(r2)
   81e70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   81e74:	e0bfff17 	ldw	r2,-4(fp)
   81e78:	10bfff04 	addi	r2,r2,-4
   81e7c:	e0bfff15 	stw	r2,-4(fp)
   81e80:	e0ffff17 	ldw	r3,-4(fp)
   81e84:	00800234 	movhi	r2,8
   81e88:	108c6004 	addi	r2,r2,12672
   81e8c:	18bff62e 	bgeu	r3,r2,81e68 <_do_ctors+0x20>
        (*ctor) (); 
}
   81e90:	e037883a 	mov	sp,fp
   81e94:	dfc00117 	ldw	ra,4(sp)
   81e98:	df000017 	ldw	fp,0(sp)
   81e9c:	dec00204 	addi	sp,sp,8
   81ea0:	f800283a 	ret

00081ea4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   81ea4:	defffd04 	addi	sp,sp,-12
   81ea8:	dfc00215 	stw	ra,8(sp)
   81eac:	df000115 	stw	fp,4(sp)
   81eb0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81eb4:	00800234 	movhi	r2,8
   81eb8:	108c5f04 	addi	r2,r2,12668
   81ebc:	e0bfff15 	stw	r2,-4(fp)
   81ec0:	00000606 	br	81edc <_do_dtors+0x38>
        (*dtor) (); 
   81ec4:	e0bfff17 	ldw	r2,-4(fp)
   81ec8:	10800017 	ldw	r2,0(r2)
   81ecc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81ed0:	e0bfff17 	ldw	r2,-4(fp)
   81ed4:	10bfff04 	addi	r2,r2,-4
   81ed8:	e0bfff15 	stw	r2,-4(fp)
   81edc:	e0ffff17 	ldw	r3,-4(fp)
   81ee0:	00800234 	movhi	r2,8
   81ee4:	108c6004 	addi	r2,r2,12672
   81ee8:	18bff62e 	bgeu	r3,r2,81ec4 <_do_dtors+0x20>
        (*dtor) (); 
}
   81eec:	e037883a 	mov	sp,fp
   81ef0:	dfc00117 	ldw	ra,4(sp)
   81ef4:	df000017 	ldw	fp,0(sp)
   81ef8:	dec00204 	addi	sp,sp,8
   81efc:	f800283a 	ret

00081f00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81f00:	deffff04 	addi	sp,sp,-4
   81f04:	df000015 	stw	fp,0(sp)
   81f08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   81f0c:	e037883a 	mov	sp,fp
   81f10:	df000017 	ldw	fp,0(sp)
   81f14:	dec00104 	addi	sp,sp,4
   81f18:	f800283a 	ret

00081f1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81f1c:	defff904 	addi	sp,sp,-28
   81f20:	dfc00615 	stw	ra,24(sp)
   81f24:	df000515 	stw	fp,20(sp)
   81f28:	df000504 	addi	fp,sp,20
   81f2c:	e13ffc15 	stw	r4,-16(fp)
   81f30:	e17ffd15 	stw	r5,-12(fp)
   81f34:	e1bffe15 	stw	r6,-8(fp)
   81f38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81f3c:	e0800217 	ldw	r2,8(fp)
   81f40:	d8800015 	stw	r2,0(sp)
   81f44:	e13ffc17 	ldw	r4,-16(fp)
   81f48:	e17ffd17 	ldw	r5,-12(fp)
   81f4c:	e1bffe17 	ldw	r6,-8(fp)
   81f50:	e1ffff17 	ldw	r7,-4(fp)
   81f54:	00820f40 	call	820f4 <alt_iic_isr_register>
}  
   81f58:	e037883a 	mov	sp,fp
   81f5c:	dfc00117 	ldw	ra,4(sp)
   81f60:	df000017 	ldw	fp,0(sp)
   81f64:	dec00204 	addi	sp,sp,8
   81f68:	f800283a 	ret

00081f6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   81f6c:	defff904 	addi	sp,sp,-28
   81f70:	df000615 	stw	fp,24(sp)
   81f74:	df000604 	addi	fp,sp,24
   81f78:	e13ffe15 	stw	r4,-8(fp)
   81f7c:	e17fff15 	stw	r5,-4(fp)
   81f80:	e0bfff17 	ldw	r2,-4(fp)
   81f84:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81f88:	0005303a 	rdctl	r2,status
   81f8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81f90:	e0fffb17 	ldw	r3,-20(fp)
   81f94:	00bfff84 	movi	r2,-2
   81f98:	1884703a 	and	r2,r3,r2
   81f9c:	1001703a 	wrctl	status,r2
  
  return context;
   81fa0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   81fa4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   81fa8:	e0bffa17 	ldw	r2,-24(fp)
   81fac:	00c00044 	movi	r3,1
   81fb0:	1884983a 	sll	r2,r3,r2
   81fb4:	1007883a 	mov	r3,r2
   81fb8:	00800234 	movhi	r2,8
   81fbc:	1097f704 	addi	r2,r2,24540
   81fc0:	10800017 	ldw	r2,0(r2)
   81fc4:	1886b03a 	or	r3,r3,r2
   81fc8:	00800234 	movhi	r2,8
   81fcc:	1097f704 	addi	r2,r2,24540
   81fd0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81fd4:	00800234 	movhi	r2,8
   81fd8:	1097f704 	addi	r2,r2,24540
   81fdc:	10800017 	ldw	r2,0(r2)
   81fe0:	100170fa 	wrctl	ienable,r2
   81fe4:	e0bffc17 	ldw	r2,-16(fp)
   81fe8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81fec:	e0bffd17 	ldw	r2,-12(fp)
   81ff0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   81ff4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   81ff8:	e037883a 	mov	sp,fp
   81ffc:	df000017 	ldw	fp,0(sp)
   82000:	dec00104 	addi	sp,sp,4
   82004:	f800283a 	ret

00082008 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   82008:	defff904 	addi	sp,sp,-28
   8200c:	df000615 	stw	fp,24(sp)
   82010:	df000604 	addi	fp,sp,24
   82014:	e13ffe15 	stw	r4,-8(fp)
   82018:	e17fff15 	stw	r5,-4(fp)
   8201c:	e0bfff17 	ldw	r2,-4(fp)
   82020:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82024:	0005303a 	rdctl	r2,status
   82028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8202c:	e0fffb17 	ldw	r3,-20(fp)
   82030:	00bfff84 	movi	r2,-2
   82034:	1884703a 	and	r2,r3,r2
   82038:	1001703a 	wrctl	status,r2
  
  return context;
   8203c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82040:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   82044:	e0bffa17 	ldw	r2,-24(fp)
   82048:	00c00044 	movi	r3,1
   8204c:	1884983a 	sll	r2,r3,r2
   82050:	0084303a 	nor	r2,zero,r2
   82054:	1007883a 	mov	r3,r2
   82058:	00800234 	movhi	r2,8
   8205c:	1097f704 	addi	r2,r2,24540
   82060:	10800017 	ldw	r2,0(r2)
   82064:	1886703a 	and	r3,r3,r2
   82068:	00800234 	movhi	r2,8
   8206c:	1097f704 	addi	r2,r2,24540
   82070:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82074:	00800234 	movhi	r2,8
   82078:	1097f704 	addi	r2,r2,24540
   8207c:	10800017 	ldw	r2,0(r2)
   82080:	100170fa 	wrctl	ienable,r2
   82084:	e0bffc17 	ldw	r2,-16(fp)
   82088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8208c:	e0bffd17 	ldw	r2,-12(fp)
   82090:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82094:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   82098:	e037883a 	mov	sp,fp
   8209c:	df000017 	ldw	fp,0(sp)
   820a0:	dec00104 	addi	sp,sp,4
   820a4:	f800283a 	ret

000820a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   820a8:	defffc04 	addi	sp,sp,-16
   820ac:	df000315 	stw	fp,12(sp)
   820b0:	df000304 	addi	fp,sp,12
   820b4:	e13ffe15 	stw	r4,-8(fp)
   820b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   820bc:	000530fa 	rdctl	r2,ienable
   820c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   820c4:	e0bfff17 	ldw	r2,-4(fp)
   820c8:	00c00044 	movi	r3,1
   820cc:	1884983a 	sll	r2,r3,r2
   820d0:	1007883a 	mov	r3,r2
   820d4:	e0bffd17 	ldw	r2,-12(fp)
   820d8:	1884703a 	and	r2,r3,r2
   820dc:	1004c03a 	cmpne	r2,r2,zero
   820e0:	10803fcc 	andi	r2,r2,255
}
   820e4:	e037883a 	mov	sp,fp
   820e8:	df000017 	ldw	fp,0(sp)
   820ec:	dec00104 	addi	sp,sp,4
   820f0:	f800283a 	ret

000820f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   820f4:	defff504 	addi	sp,sp,-44
   820f8:	dfc00a15 	stw	ra,40(sp)
   820fc:	df000915 	stw	fp,36(sp)
   82100:	df000904 	addi	fp,sp,36
   82104:	e13ffc15 	stw	r4,-16(fp)
   82108:	e17ffd15 	stw	r5,-12(fp)
   8210c:	e1bffe15 	stw	r6,-8(fp)
   82110:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   82114:	00bffa84 	movi	r2,-22
   82118:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8211c:	e0bffd17 	ldw	r2,-12(fp)
   82120:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82124:	e0bff817 	ldw	r2,-32(fp)
   82128:	10800808 	cmpgei	r2,r2,32
   8212c:	1000271e 	bne	r2,zero,821cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82130:	0005303a 	rdctl	r2,status
   82134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82138:	e0fffa17 	ldw	r3,-24(fp)
   8213c:	00bfff84 	movi	r2,-2
   82140:	1884703a 	and	r2,r3,r2
   82144:	1001703a 	wrctl	status,r2
  
  return context;
   82148:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8214c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   82150:	00c00234 	movhi	r3,8
   82154:	18d7fb04 	addi	r3,r3,24556
   82158:	e0bff817 	ldw	r2,-32(fp)
   8215c:	100490fa 	slli	r2,r2,3
   82160:	1885883a 	add	r2,r3,r2
   82164:	e0fffe17 	ldw	r3,-8(fp)
   82168:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8216c:	00c00234 	movhi	r3,8
   82170:	18d7fb04 	addi	r3,r3,24556
   82174:	e0bff817 	ldw	r2,-32(fp)
   82178:	100490fa 	slli	r2,r2,3
   8217c:	1885883a 	add	r2,r3,r2
   82180:	10800104 	addi	r2,r2,4
   82184:	e0ffff17 	ldw	r3,-4(fp)
   82188:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8218c:	e0bffe17 	ldw	r2,-8(fp)
   82190:	10000526 	beq	r2,zero,821a8 <alt_iic_isr_register+0xb4>
   82194:	e0bff817 	ldw	r2,-32(fp)
   82198:	e13ffc17 	ldw	r4,-16(fp)
   8219c:	100b883a 	mov	r5,r2
   821a0:	0081f6c0 	call	81f6c <alt_ic_irq_enable>
   821a4:	00000406 	br	821b8 <alt_iic_isr_register+0xc4>
   821a8:	e0bff817 	ldw	r2,-32(fp)
   821ac:	e13ffc17 	ldw	r4,-16(fp)
   821b0:	100b883a 	mov	r5,r2
   821b4:	00820080 	call	82008 <alt_ic_irq_disable>
   821b8:	e0bff715 	stw	r2,-36(fp)
   821bc:	e0bff917 	ldw	r2,-28(fp)
   821c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   821c4:	e0bffb17 	ldw	r2,-20(fp)
   821c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   821cc:	e0bff717 	ldw	r2,-36(fp)
}
   821d0:	e037883a 	mov	sp,fp
   821d4:	dfc00117 	ldw	ra,4(sp)
   821d8:	df000017 	ldw	fp,0(sp)
   821dc:	dec00204 	addi	sp,sp,8
   821e0:	f800283a 	ret

000821e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   821e4:	defff804 	addi	sp,sp,-32
   821e8:	dfc00715 	stw	ra,28(sp)
   821ec:	df000615 	stw	fp,24(sp)
   821f0:	dc000515 	stw	r16,20(sp)
   821f4:	df000504 	addi	fp,sp,20
   821f8:	e13ffc15 	stw	r4,-16(fp)
   821fc:	e17ffd15 	stw	r5,-12(fp)
   82200:	e1bffe15 	stw	r6,-8(fp)
   82204:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   82208:	e13ffd17 	ldw	r4,-12(fp)
   8220c:	e17ffe17 	ldw	r5,-8(fp)
   82210:	e1bfff17 	ldw	r6,-4(fp)
   82214:	008247c0 	call	8247c <open>
   82218:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8221c:	e0bffb17 	ldw	r2,-20(fp)
   82220:	10002216 	blt	r2,zero,822ac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   82224:	04000234 	movhi	r16,8
   82228:	8410cb04 	addi	r16,r16,17196
   8222c:	e0bffb17 	ldw	r2,-20(fp)
   82230:	1009883a 	mov	r4,r2
   82234:	01400304 	movi	r5,12
   82238:	008311c0 	call	8311c <__mulsi3>
   8223c:	8085883a 	add	r2,r16,r2
   82240:	10c00017 	ldw	r3,0(r2)
   82244:	e0bffc17 	ldw	r2,-16(fp)
   82248:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8224c:	04000234 	movhi	r16,8
   82250:	8410cb04 	addi	r16,r16,17196
   82254:	e0bffb17 	ldw	r2,-20(fp)
   82258:	1009883a 	mov	r4,r2
   8225c:	01400304 	movi	r5,12
   82260:	008311c0 	call	8311c <__mulsi3>
   82264:	8085883a 	add	r2,r16,r2
   82268:	10800104 	addi	r2,r2,4
   8226c:	10c00017 	ldw	r3,0(r2)
   82270:	e0bffc17 	ldw	r2,-16(fp)
   82274:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82278:	04000234 	movhi	r16,8
   8227c:	8410cb04 	addi	r16,r16,17196
   82280:	e0bffb17 	ldw	r2,-20(fp)
   82284:	1009883a 	mov	r4,r2
   82288:	01400304 	movi	r5,12
   8228c:	008311c0 	call	8311c <__mulsi3>
   82290:	8085883a 	add	r2,r16,r2
   82294:	10800204 	addi	r2,r2,8
   82298:	10c00017 	ldw	r3,0(r2)
   8229c:	e0bffc17 	ldw	r2,-16(fp)
   822a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   822a4:	e13ffb17 	ldw	r4,-20(fp)
   822a8:	00825d40 	call	825d4 <alt_release_fd>
  }
} 
   822ac:	e037883a 	mov	sp,fp
   822b0:	dfc00217 	ldw	ra,8(sp)
   822b4:	df000117 	ldw	fp,4(sp)
   822b8:	dc000017 	ldw	r16,0(sp)
   822bc:	dec00304 	addi	sp,sp,12
   822c0:	f800283a 	ret

000822c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   822c4:	defffb04 	addi	sp,sp,-20
   822c8:	dfc00415 	stw	ra,16(sp)
   822cc:	df000315 	stw	fp,12(sp)
   822d0:	df000304 	addi	fp,sp,12
   822d4:	e13ffd15 	stw	r4,-12(fp)
   822d8:	e17ffe15 	stw	r5,-8(fp)
   822dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   822e0:	01000234 	movhi	r4,8
   822e4:	2110ce04 	addi	r4,r4,17208
   822e8:	e17ffd17 	ldw	r5,-12(fp)
   822ec:	01800044 	movi	r6,1
   822f0:	01c07fc4 	movi	r7,511
   822f4:	00821e40 	call	821e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   822f8:	01000234 	movhi	r4,8
   822fc:	2110cb04 	addi	r4,r4,17196
   82300:	e17ffe17 	ldw	r5,-8(fp)
   82304:	000d883a 	mov	r6,zero
   82308:	01c07fc4 	movi	r7,511
   8230c:	00821e40 	call	821e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82310:	01000234 	movhi	r4,8
   82314:	2110d104 	addi	r4,r4,17220
   82318:	e17fff17 	ldw	r5,-4(fp)
   8231c:	01800044 	movi	r6,1
   82320:	01c07fc4 	movi	r7,511
   82324:	00821e40 	call	821e4 <alt_open_fd>
}  
   82328:	e037883a 	mov	sp,fp
   8232c:	dfc00117 	ldw	ra,4(sp)
   82330:	df000017 	ldw	fp,0(sp)
   82334:	dec00204 	addi	sp,sp,8
   82338:	f800283a 	ret

0008233c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8233c:	defffe04 	addi	sp,sp,-8
   82340:	dfc00115 	stw	ra,4(sp)
   82344:	df000015 	stw	fp,0(sp)
   82348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8234c:	00800234 	movhi	r2,8
   82350:	10923004 	addi	r2,r2,18624
   82354:	10800017 	ldw	r2,0(r2)
   82358:	10000526 	beq	r2,zero,82370 <alt_get_errno+0x34>
   8235c:	00800234 	movhi	r2,8
   82360:	10923004 	addi	r2,r2,18624
   82364:	10800017 	ldw	r2,0(r2)
   82368:	103ee83a 	callr	r2
   8236c:	00000206 	br	82378 <alt_get_errno+0x3c>
   82370:	00800234 	movhi	r2,8
   82374:	1097fa04 	addi	r2,r2,24552
}
   82378:	e037883a 	mov	sp,fp
   8237c:	dfc00117 	ldw	ra,4(sp)
   82380:	df000017 	ldw	fp,0(sp)
   82384:	dec00204 	addi	sp,sp,8
   82388:	f800283a 	ret

0008238c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8238c:	defffb04 	addi	sp,sp,-20
   82390:	dfc00415 	stw	ra,16(sp)
   82394:	df000315 	stw	fp,12(sp)
   82398:	dc000215 	stw	r16,8(sp)
   8239c:	df000204 	addi	fp,sp,8
   823a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   823a4:	e0bfff17 	ldw	r2,-4(fp)
   823a8:	10800217 	ldw	r2,8(r2)
   823ac:	10d00034 	orhi	r3,r2,16384
   823b0:	e0bfff17 	ldw	r2,-4(fp)
   823b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   823b8:	e03ffe15 	stw	zero,-8(fp)
   823bc:	00002206 	br	82448 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   823c0:	04000234 	movhi	r16,8
   823c4:	8410cb04 	addi	r16,r16,17196
   823c8:	e0bffe17 	ldw	r2,-8(fp)
   823cc:	1009883a 	mov	r4,r2
   823d0:	01400304 	movi	r5,12
   823d4:	008311c0 	call	8311c <__mulsi3>
   823d8:	8085883a 	add	r2,r16,r2
   823dc:	10c00017 	ldw	r3,0(r2)
   823e0:	e0bfff17 	ldw	r2,-4(fp)
   823e4:	10800017 	ldw	r2,0(r2)
   823e8:	1880141e 	bne	r3,r2,8243c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   823ec:	04000234 	movhi	r16,8
   823f0:	8410cb04 	addi	r16,r16,17196
   823f4:	e0bffe17 	ldw	r2,-8(fp)
   823f8:	1009883a 	mov	r4,r2
   823fc:	01400304 	movi	r5,12
   82400:	008311c0 	call	8311c <__mulsi3>
   82404:	8085883a 	add	r2,r16,r2
   82408:	10800204 	addi	r2,r2,8
   8240c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82410:	10000a0e 	bge	r2,zero,8243c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   82414:	e13ffe17 	ldw	r4,-8(fp)
   82418:	01400304 	movi	r5,12
   8241c:	008311c0 	call	8311c <__mulsi3>
   82420:	00c00234 	movhi	r3,8
   82424:	18d0cb04 	addi	r3,r3,17196
   82428:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8242c:	e0bfff17 	ldw	r2,-4(fp)
   82430:	18800226 	beq	r3,r2,8243c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82434:	00bffcc4 	movi	r2,-13
   82438:	00000a06 	br	82464 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8243c:	e0bffe17 	ldw	r2,-8(fp)
   82440:	10800044 	addi	r2,r2,1
   82444:	e0bffe15 	stw	r2,-8(fp)
   82448:	00800234 	movhi	r2,8
   8244c:	10922f04 	addi	r2,r2,18620
   82450:	10800017 	ldw	r2,0(r2)
   82454:	1007883a 	mov	r3,r2
   82458:	e0bffe17 	ldw	r2,-8(fp)
   8245c:	18bfd82e 	bgeu	r3,r2,823c0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82460:	0005883a 	mov	r2,zero
}
   82464:	e037883a 	mov	sp,fp
   82468:	dfc00217 	ldw	ra,8(sp)
   8246c:	df000117 	ldw	fp,4(sp)
   82470:	dc000017 	ldw	r16,0(sp)
   82474:	dec00304 	addi	sp,sp,12
   82478:	f800283a 	ret

0008247c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8247c:	defff604 	addi	sp,sp,-40
   82480:	dfc00915 	stw	ra,36(sp)
   82484:	df000815 	stw	fp,32(sp)
   82488:	df000804 	addi	fp,sp,32
   8248c:	e13ffd15 	stw	r4,-12(fp)
   82490:	e17ffe15 	stw	r5,-8(fp)
   82494:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82498:	00bfffc4 	movi	r2,-1
   8249c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   824a0:	00bffb44 	movi	r2,-19
   824a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   824a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   824ac:	e13ffd17 	ldw	r4,-12(fp)
   824b0:	01400234 	movhi	r5,8
   824b4:	29522d04 	addi	r5,r5,18612
   824b8:	00828100 	call	82810 <alt_find_dev>
   824bc:	e0bff815 	stw	r2,-32(fp)
   824c0:	e0bff817 	ldw	r2,-32(fp)
   824c4:	1000051e 	bne	r2,zero,824dc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   824c8:	e13ffd17 	ldw	r4,-12(fp)
   824cc:	00828a00 	call	828a0 <alt_find_file>
   824d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   824d4:	00800044 	movi	r2,1
   824d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   824dc:	e0bff817 	ldw	r2,-32(fp)
   824e0:	10002a26 	beq	r2,zero,8258c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   824e4:	e13ff817 	ldw	r4,-32(fp)
   824e8:	00829b40 	call	829b4 <alt_get_fd>
   824ec:	e0bff915 	stw	r2,-28(fp)
   824f0:	e0bff917 	ldw	r2,-28(fp)
   824f4:	1000030e 	bge	r2,zero,82504 <open+0x88>
    {
      status = index;
   824f8:	e0bff917 	ldw	r2,-28(fp)
   824fc:	e0bffa15 	stw	r2,-24(fp)
   82500:	00002406 	br	82594 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   82504:	e13ff917 	ldw	r4,-28(fp)
   82508:	01400304 	movi	r5,12
   8250c:	008311c0 	call	8311c <__mulsi3>
   82510:	00c00234 	movhi	r3,8
   82514:	18d0cb04 	addi	r3,r3,17196
   82518:	10c5883a 	add	r2,r2,r3
   8251c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82520:	e0fffe17 	ldw	r3,-8(fp)
   82524:	00900034 	movhi	r2,16384
   82528:	10bfffc4 	addi	r2,r2,-1
   8252c:	1886703a 	and	r3,r3,r2
   82530:	e0bffc17 	ldw	r2,-16(fp)
   82534:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82538:	e0bffb17 	ldw	r2,-20(fp)
   8253c:	1000051e 	bne	r2,zero,82554 <open+0xd8>
   82540:	e13ffc17 	ldw	r4,-16(fp)
   82544:	008238c0 	call	8238c <alt_file_locked>
   82548:	e0bffa15 	stw	r2,-24(fp)
   8254c:	e0bffa17 	ldw	r2,-24(fp)
   82550:	10001016 	blt	r2,zero,82594 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82554:	e0bff817 	ldw	r2,-32(fp)
   82558:	10800317 	ldw	r2,12(r2)
   8255c:	10000826 	beq	r2,zero,82580 <open+0x104>
   82560:	e0bff817 	ldw	r2,-32(fp)
   82564:	10800317 	ldw	r2,12(r2)
   82568:	e13ffc17 	ldw	r4,-16(fp)
   8256c:	e17ffd17 	ldw	r5,-12(fp)
   82570:	e1bffe17 	ldw	r6,-8(fp)
   82574:	e1ffff17 	ldw	r7,-4(fp)
   82578:	103ee83a 	callr	r2
   8257c:	00000106 	br	82584 <open+0x108>
   82580:	0005883a 	mov	r2,zero
   82584:	e0bffa15 	stw	r2,-24(fp)
   82588:	00000206 	br	82594 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8258c:	00bffb44 	movi	r2,-19
   82590:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82594:	e0bffa17 	ldw	r2,-24(fp)
   82598:	1000080e 	bge	r2,zero,825bc <open+0x140>
  {
    alt_release_fd (index);  
   8259c:	e13ff917 	ldw	r4,-28(fp)
   825a0:	00825d40 	call	825d4 <alt_release_fd>
    ALT_ERRNO = -status;
   825a4:	008233c0 	call	8233c <alt_get_errno>
   825a8:	e0fffa17 	ldw	r3,-24(fp)
   825ac:	00c7c83a 	sub	r3,zero,r3
   825b0:	10c00015 	stw	r3,0(r2)
    return -1;
   825b4:	00bfffc4 	movi	r2,-1
   825b8:	00000106 	br	825c0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   825bc:	e0bff917 	ldw	r2,-28(fp)
}
   825c0:	e037883a 	mov	sp,fp
   825c4:	dfc00117 	ldw	ra,4(sp)
   825c8:	df000017 	ldw	fp,0(sp)
   825cc:	dec00204 	addi	sp,sp,8
   825d0:	f800283a 	ret

000825d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   825d4:	defffc04 	addi	sp,sp,-16
   825d8:	dfc00315 	stw	ra,12(sp)
   825dc:	df000215 	stw	fp,8(sp)
   825e0:	dc000115 	stw	r16,4(sp)
   825e4:	df000104 	addi	fp,sp,4
   825e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   825ec:	e0bfff17 	ldw	r2,-4(fp)
   825f0:	108000d0 	cmplti	r2,r2,3
   825f4:	1000111e 	bne	r2,zero,8263c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   825f8:	04000234 	movhi	r16,8
   825fc:	8410cb04 	addi	r16,r16,17196
   82600:	e0bfff17 	ldw	r2,-4(fp)
   82604:	1009883a 	mov	r4,r2
   82608:	01400304 	movi	r5,12
   8260c:	008311c0 	call	8311c <__mulsi3>
   82610:	8085883a 	add	r2,r16,r2
   82614:	10800204 	addi	r2,r2,8
   82618:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8261c:	04000234 	movhi	r16,8
   82620:	8410cb04 	addi	r16,r16,17196
   82624:	e0bfff17 	ldw	r2,-4(fp)
   82628:	1009883a 	mov	r4,r2
   8262c:	01400304 	movi	r5,12
   82630:	008311c0 	call	8311c <__mulsi3>
   82634:	8085883a 	add	r2,r16,r2
   82638:	10000015 	stw	zero,0(r2)
  }
}
   8263c:	e037883a 	mov	sp,fp
   82640:	dfc00217 	ldw	ra,8(sp)
   82644:	df000117 	ldw	fp,4(sp)
   82648:	dc000017 	ldw	r16,0(sp)
   8264c:	dec00304 	addi	sp,sp,12
   82650:	f800283a 	ret

00082654 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82654:	defffa04 	addi	sp,sp,-24
   82658:	df000515 	stw	fp,20(sp)
   8265c:	df000504 	addi	fp,sp,20
   82660:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82664:	0005303a 	rdctl	r2,status
   82668:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8266c:	e0fffc17 	ldw	r3,-16(fp)
   82670:	00bfff84 	movi	r2,-2
   82674:	1884703a 	and	r2,r3,r2
   82678:	1001703a 	wrctl	status,r2
  
  return context;
   8267c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82680:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   82684:	e0bfff17 	ldw	r2,-4(fp)
   82688:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8268c:	e0bffd17 	ldw	r2,-12(fp)
   82690:	10800017 	ldw	r2,0(r2)
   82694:	e0fffd17 	ldw	r3,-12(fp)
   82698:	18c00117 	ldw	r3,4(r3)
   8269c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   826a0:	e0bffd17 	ldw	r2,-12(fp)
   826a4:	10800117 	ldw	r2,4(r2)
   826a8:	e0fffd17 	ldw	r3,-12(fp)
   826ac:	18c00017 	ldw	r3,0(r3)
   826b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   826b4:	e0bffd17 	ldw	r2,-12(fp)
   826b8:	e0fffd17 	ldw	r3,-12(fp)
   826bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   826c0:	e0bffd17 	ldw	r2,-12(fp)
   826c4:	e0fffd17 	ldw	r3,-12(fp)
   826c8:	10c00015 	stw	r3,0(r2)
   826cc:	e0bffb17 	ldw	r2,-20(fp)
   826d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   826d4:	e0bffe17 	ldw	r2,-8(fp)
   826d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   826dc:	e037883a 	mov	sp,fp
   826e0:	df000017 	ldw	fp,0(sp)
   826e4:	dec00104 	addi	sp,sp,4
   826e8:	f800283a 	ret

000826ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   826ec:	defffb04 	addi	sp,sp,-20
   826f0:	dfc00415 	stw	ra,16(sp)
   826f4:	df000315 	stw	fp,12(sp)
   826f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   826fc:	d0a00717 	ldw	r2,-32740(gp)
   82700:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   82704:	d0a5ce17 	ldw	r2,-26824(gp)
   82708:	10800044 	addi	r2,r2,1
   8270c:	d0a5ce15 	stw	r2,-26824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82710:	00002e06 	br	827cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   82714:	e0bffd17 	ldw	r2,-12(fp)
   82718:	10800017 	ldw	r2,0(r2)
   8271c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   82720:	e0bffd17 	ldw	r2,-12(fp)
   82724:	10800403 	ldbu	r2,16(r2)
   82728:	10803fcc 	andi	r2,r2,255
   8272c:	10000426 	beq	r2,zero,82740 <alt_tick+0x54>
   82730:	d0a5ce17 	ldw	r2,-26824(gp)
   82734:	1000021e 	bne	r2,zero,82740 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   82738:	e0bffd17 	ldw	r2,-12(fp)
   8273c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   82740:	e0bffd17 	ldw	r2,-12(fp)
   82744:	10800217 	ldw	r2,8(r2)
   82748:	d0e5ce17 	ldw	r3,-26824(gp)
   8274c:	18801d36 	bltu	r3,r2,827c4 <alt_tick+0xd8>
   82750:	e0bffd17 	ldw	r2,-12(fp)
   82754:	10800403 	ldbu	r2,16(r2)
   82758:	10803fcc 	andi	r2,r2,255
   8275c:	1000191e 	bne	r2,zero,827c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   82760:	e0bffd17 	ldw	r2,-12(fp)
   82764:	10c00317 	ldw	r3,12(r2)
   82768:	e0bffd17 	ldw	r2,-12(fp)
   8276c:	10800517 	ldw	r2,20(r2)
   82770:	1009883a 	mov	r4,r2
   82774:	183ee83a 	callr	r3
   82778:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8277c:	e0bfff17 	ldw	r2,-4(fp)
   82780:	1000031e 	bne	r2,zero,82790 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   82784:	e13ffd17 	ldw	r4,-12(fp)
   82788:	00826540 	call	82654 <alt_alarm_stop>
   8278c:	00000d06 	br	827c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   82790:	e0bffd17 	ldw	r2,-12(fp)
   82794:	10c00217 	ldw	r3,8(r2)
   82798:	e0bfff17 	ldw	r2,-4(fp)
   8279c:	1887883a 	add	r3,r3,r2
   827a0:	e0bffd17 	ldw	r2,-12(fp)
   827a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   827a8:	e0bffd17 	ldw	r2,-12(fp)
   827ac:	10c00217 	ldw	r3,8(r2)
   827b0:	d0a5ce17 	ldw	r2,-26824(gp)
   827b4:	1880032e 	bgeu	r3,r2,827c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   827b8:	e0bffd17 	ldw	r2,-12(fp)
   827bc:	00c00044 	movi	r3,1
   827c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   827c4:	e0bffe17 	ldw	r2,-8(fp)
   827c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   827cc:	e0fffd17 	ldw	r3,-12(fp)
   827d0:	d0a00704 	addi	r2,gp,-32740
   827d4:	18bfcf1e 	bne	r3,r2,82714 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   827d8:	0001883a 	nop
}
   827dc:	e037883a 	mov	sp,fp
   827e0:	dfc00117 	ldw	ra,4(sp)
   827e4:	df000017 	ldw	fp,0(sp)
   827e8:	dec00204 	addi	sp,sp,8
   827ec:	f800283a 	ret

000827f0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   827f0:	deffff04 	addi	sp,sp,-4
   827f4:	df000015 	stw	fp,0(sp)
   827f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   827fc:	000170fa 	wrctl	ienable,zero
}
   82800:	e037883a 	mov	sp,fp
   82804:	df000017 	ldw	fp,0(sp)
   82808:	dec00104 	addi	sp,sp,4
   8280c:	f800283a 	ret

00082810 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82810:	defffa04 	addi	sp,sp,-24
   82814:	dfc00515 	stw	ra,20(sp)
   82818:	df000415 	stw	fp,16(sp)
   8281c:	df000404 	addi	fp,sp,16
   82820:	e13ffe15 	stw	r4,-8(fp)
   82824:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82828:	e0bfff17 	ldw	r2,-4(fp)
   8282c:	10800017 	ldw	r2,0(r2)
   82830:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82834:	e13ffe17 	ldw	r4,-8(fp)
   82838:	0082c900 	call	82c90 <strlen>
   8283c:	10800044 	addi	r2,r2,1
   82840:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82844:	00000d06 	br	8287c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82848:	e0bffc17 	ldw	r2,-16(fp)
   8284c:	10c00217 	ldw	r3,8(r2)
   82850:	e0bffd17 	ldw	r2,-12(fp)
   82854:	1809883a 	mov	r4,r3
   82858:	e17ffe17 	ldw	r5,-8(fp)
   8285c:	100d883a 	mov	r6,r2
   82860:	0082ad40 	call	82ad4 <memcmp>
   82864:	1000021e 	bne	r2,zero,82870 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   82868:	e0bffc17 	ldw	r2,-16(fp)
   8286c:	00000706 	br	8288c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   82870:	e0bffc17 	ldw	r2,-16(fp)
   82874:	10800017 	ldw	r2,0(r2)
   82878:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8287c:	e0fffc17 	ldw	r3,-16(fp)
   82880:	e0bfff17 	ldw	r2,-4(fp)
   82884:	18bff01e 	bne	r3,r2,82848 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   82888:	0005883a 	mov	r2,zero
}
   8288c:	e037883a 	mov	sp,fp
   82890:	dfc00117 	ldw	ra,4(sp)
   82894:	df000017 	ldw	fp,0(sp)
   82898:	dec00204 	addi	sp,sp,8
   8289c:	f800283a 	ret

000828a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   828a0:	defffb04 	addi	sp,sp,-20
   828a4:	dfc00415 	stw	ra,16(sp)
   828a8:	df000315 	stw	fp,12(sp)
   828ac:	df000304 	addi	fp,sp,12
   828b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   828b4:	00800234 	movhi	r2,8
   828b8:	10922b04 	addi	r2,r2,18604
   828bc:	10800017 	ldw	r2,0(r2)
   828c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   828c4:	00003106 	br	8298c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   828c8:	e0bffd17 	ldw	r2,-12(fp)
   828cc:	10800217 	ldw	r2,8(r2)
   828d0:	1009883a 	mov	r4,r2
   828d4:	0082c900 	call	82c90 <strlen>
   828d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   828dc:	e0bffd17 	ldw	r2,-12(fp)
   828e0:	10c00217 	ldw	r3,8(r2)
   828e4:	e0bffe17 	ldw	r2,-8(fp)
   828e8:	10bfffc4 	addi	r2,r2,-1
   828ec:	1885883a 	add	r2,r3,r2
   828f0:	10800003 	ldbu	r2,0(r2)
   828f4:	10803fcc 	andi	r2,r2,255
   828f8:	1080201c 	xori	r2,r2,128
   828fc:	10bfe004 	addi	r2,r2,-128
   82900:	10800bd8 	cmpnei	r2,r2,47
   82904:	1000031e 	bne	r2,zero,82914 <alt_find_file+0x74>
    {
      len -= 1;
   82908:	e0bffe17 	ldw	r2,-8(fp)
   8290c:	10bfffc4 	addi	r2,r2,-1
   82910:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82914:	e0bffe17 	ldw	r2,-8(fp)
   82918:	e0ffff17 	ldw	r3,-4(fp)
   8291c:	1885883a 	add	r2,r3,r2
   82920:	10800003 	ldbu	r2,0(r2)
   82924:	10803fcc 	andi	r2,r2,255
   82928:	1080201c 	xori	r2,r2,128
   8292c:	10bfe004 	addi	r2,r2,-128
   82930:	10800be0 	cmpeqi	r2,r2,47
   82934:	1000081e 	bne	r2,zero,82958 <alt_find_file+0xb8>
   82938:	e0bffe17 	ldw	r2,-8(fp)
   8293c:	e0ffff17 	ldw	r3,-4(fp)
   82940:	1885883a 	add	r2,r3,r2
   82944:	10800003 	ldbu	r2,0(r2)
   82948:	10803fcc 	andi	r2,r2,255
   8294c:	1080201c 	xori	r2,r2,128
   82950:	10bfe004 	addi	r2,r2,-128
   82954:	10000a1e 	bne	r2,zero,82980 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   82958:	e0bffd17 	ldw	r2,-12(fp)
   8295c:	10c00217 	ldw	r3,8(r2)
   82960:	e0bffe17 	ldw	r2,-8(fp)
   82964:	1809883a 	mov	r4,r3
   82968:	e17fff17 	ldw	r5,-4(fp)
   8296c:	100d883a 	mov	r6,r2
   82970:	0082ad40 	call	82ad4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82974:	1000021e 	bne	r2,zero,82980 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   82978:	e0bffd17 	ldw	r2,-12(fp)
   8297c:	00000806 	br	829a0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   82980:	e0bffd17 	ldw	r2,-12(fp)
   82984:	10800017 	ldw	r2,0(r2)
   82988:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8298c:	e0fffd17 	ldw	r3,-12(fp)
   82990:	00800234 	movhi	r2,8
   82994:	10922b04 	addi	r2,r2,18604
   82998:	18bfcb1e 	bne	r3,r2,828c8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8299c:	0005883a 	mov	r2,zero
}
   829a0:	e037883a 	mov	sp,fp
   829a4:	dfc00117 	ldw	ra,4(sp)
   829a8:	df000017 	ldw	fp,0(sp)
   829ac:	dec00204 	addi	sp,sp,8
   829b0:	f800283a 	ret

000829b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   829b4:	defffa04 	addi	sp,sp,-24
   829b8:	dfc00515 	stw	ra,20(sp)
   829bc:	df000415 	stw	fp,16(sp)
   829c0:	dc000315 	stw	r16,12(sp)
   829c4:	df000304 	addi	fp,sp,12
   829c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   829cc:	00bffa04 	movi	r2,-24
   829d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   829d4:	e03ffd15 	stw	zero,-12(fp)
   829d8:	00002106 	br	82a60 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   829dc:	04000234 	movhi	r16,8
   829e0:	8410cb04 	addi	r16,r16,17196
   829e4:	e0bffd17 	ldw	r2,-12(fp)
   829e8:	1009883a 	mov	r4,r2
   829ec:	01400304 	movi	r5,12
   829f0:	008311c0 	call	8311c <__mulsi3>
   829f4:	8085883a 	add	r2,r16,r2
   829f8:	10800017 	ldw	r2,0(r2)
   829fc:	1000151e 	bne	r2,zero,82a54 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   82a00:	04000234 	movhi	r16,8
   82a04:	8410cb04 	addi	r16,r16,17196
   82a08:	e0bffd17 	ldw	r2,-12(fp)
   82a0c:	1009883a 	mov	r4,r2
   82a10:	01400304 	movi	r5,12
   82a14:	008311c0 	call	8311c <__mulsi3>
   82a18:	8085883a 	add	r2,r16,r2
   82a1c:	e0ffff17 	ldw	r3,-4(fp)
   82a20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   82a24:	00800234 	movhi	r2,8
   82a28:	10922f04 	addi	r2,r2,18620
   82a2c:	10c00017 	ldw	r3,0(r2)
   82a30:	e0bffd17 	ldw	r2,-12(fp)
   82a34:	1880040e 	bge	r3,r2,82a48 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   82a38:	00800234 	movhi	r2,8
   82a3c:	10922f04 	addi	r2,r2,18620
   82a40:	e0fffd17 	ldw	r3,-12(fp)
   82a44:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   82a48:	e0bffd17 	ldw	r2,-12(fp)
   82a4c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   82a50:	00000606 	br	82a6c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82a54:	e0bffd17 	ldw	r2,-12(fp)
   82a58:	10800044 	addi	r2,r2,1
   82a5c:	e0bffd15 	stw	r2,-12(fp)
   82a60:	e0bffd17 	ldw	r2,-12(fp)
   82a64:	10800810 	cmplti	r2,r2,32
   82a68:	103fdc1e 	bne	r2,zero,829dc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   82a6c:	e0bffe17 	ldw	r2,-8(fp)
}
   82a70:	e037883a 	mov	sp,fp
   82a74:	dfc00217 	ldw	ra,8(sp)
   82a78:	df000117 	ldw	fp,4(sp)
   82a7c:	dc000017 	ldw	r16,0(sp)
   82a80:	dec00304 	addi	sp,sp,12
   82a84:	f800283a 	ret

00082a88 <atexit>:
   82a88:	200b883a 	mov	r5,r4
   82a8c:	000d883a 	mov	r6,zero
   82a90:	0009883a 	mov	r4,zero
   82a94:	000f883a 	mov	r7,zero
   82a98:	0082d1c1 	jmpi	82d1c <__register_exitproc>

00082a9c <exit>:
   82a9c:	defffe04 	addi	sp,sp,-8
   82aa0:	000b883a 	mov	r5,zero
   82aa4:	dc000015 	stw	r16,0(sp)
   82aa8:	dfc00115 	stw	ra,4(sp)
   82aac:	2021883a 	mov	r16,r4
   82ab0:	0082e4c0 	call	82e4c <__call_exitprocs>
   82ab4:	00800234 	movhi	r2,8
   82ab8:	10923404 	addi	r2,r2,18640
   82abc:	11000017 	ldw	r4,0(r2)
   82ac0:	20800f17 	ldw	r2,60(r4)
   82ac4:	10000126 	beq	r2,zero,82acc <exit+0x30>
   82ac8:	103ee83a 	callr	r2
   82acc:	8009883a 	mov	r4,r16
   82ad0:	00831440 	call	83144 <_exit>

00082ad4 <memcmp>:
   82ad4:	01c000c4 	movi	r7,3
   82ad8:	3980192e 	bgeu	r7,r6,82b40 <memcmp+0x6c>
   82adc:	2904b03a 	or	r2,r5,r4
   82ae0:	11c4703a 	and	r2,r2,r7
   82ae4:	10000f26 	beq	r2,zero,82b24 <memcmp+0x50>
   82ae8:	20c00003 	ldbu	r3,0(r4)
   82aec:	28800003 	ldbu	r2,0(r5)
   82af0:	1880151e 	bne	r3,r2,82b48 <memcmp+0x74>
   82af4:	31bfff84 	addi	r6,r6,-2
   82af8:	01ffffc4 	movi	r7,-1
   82afc:	00000406 	br	82b10 <memcmp+0x3c>
   82b00:	20c00003 	ldbu	r3,0(r4)
   82b04:	28800003 	ldbu	r2,0(r5)
   82b08:	31bfffc4 	addi	r6,r6,-1
   82b0c:	18800e1e 	bne	r3,r2,82b48 <memcmp+0x74>
   82b10:	21000044 	addi	r4,r4,1
   82b14:	29400044 	addi	r5,r5,1
   82b18:	31fff91e 	bne	r6,r7,82b00 <memcmp+0x2c>
   82b1c:	0005883a 	mov	r2,zero
   82b20:	f800283a 	ret
   82b24:	20c00017 	ldw	r3,0(r4)
   82b28:	28800017 	ldw	r2,0(r5)
   82b2c:	1880041e 	bne	r3,r2,82b40 <memcmp+0x6c>
   82b30:	31bfff04 	addi	r6,r6,-4
   82b34:	21000104 	addi	r4,r4,4
   82b38:	29400104 	addi	r5,r5,4
   82b3c:	39bff936 	bltu	r7,r6,82b24 <memcmp+0x50>
   82b40:	303fe91e 	bne	r6,zero,82ae8 <memcmp+0x14>
   82b44:	003ff506 	br	82b1c <memcmp+0x48>
   82b48:	1885c83a 	sub	r2,r3,r2
   82b4c:	f800283a 	ret

00082b50 <memcpy>:
   82b50:	defffb04 	addi	sp,sp,-20
   82b54:	dc000015 	stw	r16,0(sp)
   82b58:	dfc00415 	stw	ra,16(sp)
   82b5c:	dcc00315 	stw	r19,12(sp)
   82b60:	dc800215 	stw	r18,8(sp)
   82b64:	dc400115 	stw	r17,4(sp)
   82b68:	00c003c4 	movi	r3,15
   82b6c:	2021883a 	mov	r16,r4
   82b70:	3005883a 	mov	r2,r6
   82b74:	1980032e 	bgeu	r3,r6,82b84 <memcpy+0x34>
   82b78:	2906b03a 	or	r3,r5,r4
   82b7c:	18c000cc 	andi	r3,r3,3
   82b80:	18001026 	beq	r3,zero,82bc4 <memcpy+0x74>
   82b84:	8007883a 	mov	r3,r16
   82b88:	288f883a 	add	r7,r5,r2
   82b8c:	10000526 	beq	r2,zero,82ba4 <memcpy+0x54>
   82b90:	29800003 	ldbu	r6,0(r5)
   82b94:	18c00044 	addi	r3,r3,1
   82b98:	29400044 	addi	r5,r5,1
   82b9c:	19bfffc5 	stb	r6,-1(r3)
   82ba0:	29fffb1e 	bne	r5,r7,82b90 <memcpy+0x40>
   82ba4:	8005883a 	mov	r2,r16
   82ba8:	dfc00417 	ldw	ra,16(sp)
   82bac:	dcc00317 	ldw	r19,12(sp)
   82bb0:	dc800217 	ldw	r18,8(sp)
   82bb4:	dc400117 	ldw	r17,4(sp)
   82bb8:	dc000017 	ldw	r16,0(sp)
   82bbc:	dec00504 	addi	sp,sp,20
   82bc0:	f800283a 	ret
   82bc4:	32bffc04 	addi	r10,r6,-16
   82bc8:	5014d13a 	srli	r10,r10,4
   82bcc:	20800404 	addi	r2,r4,16
   82bd0:	2007883a 	mov	r3,r4
   82bd4:	5008913a 	slli	r4,r10,4
   82bd8:	280f883a 	mov	r7,r5
   82bdc:	1105883a 	add	r2,r2,r4
   82be0:	3a000017 	ldw	r8,0(r7)
   82be4:	18c00404 	addi	r3,r3,16
   82be8:	39c00404 	addi	r7,r7,16
   82bec:	1a3ffc15 	stw	r8,-16(r3)
   82bf0:	3a3ffd17 	ldw	r8,-12(r7)
   82bf4:	1a3ffd15 	stw	r8,-12(r3)
   82bf8:	3a3ffe17 	ldw	r8,-8(r7)
   82bfc:	1a3ffe15 	stw	r8,-8(r3)
   82c00:	3a3fff17 	ldw	r8,-4(r7)
   82c04:	1a3fff15 	stw	r8,-4(r3)
   82c08:	18bff51e 	bne	r3,r2,82be0 <memcpy+0x90>
   82c0c:	52800044 	addi	r10,r10,1
   82c10:	5014913a 	slli	r10,r10,4
   82c14:	308003cc 	andi	r2,r6,15
   82c18:	010000c4 	movi	r4,3
   82c1c:	8287883a 	add	r3,r16,r10
   82c20:	2a95883a 	add	r10,r5,r10
   82c24:	2080182e 	bgeu	r4,r2,82c88 <memcpy+0x138>
   82c28:	147fff04 	addi	r17,r2,-4
   82c2c:	8808d0ba 	srli	r4,r17,2
   82c30:	1a400104 	addi	r9,r3,4
   82c34:	180d883a 	mov	r6,r3
   82c38:	2105883a 	add	r2,r4,r4
   82c3c:	1085883a 	add	r2,r2,r2
   82c40:	4893883a 	add	r9,r9,r2
   82c44:	500f883a 	mov	r7,r10
   82c48:	3a000017 	ldw	r8,0(r7)
   82c4c:	31800104 	addi	r6,r6,4
   82c50:	39c00104 	addi	r7,r7,4
   82c54:	323fff15 	stw	r8,-4(r6)
   82c58:	327ffb1e 	bne	r6,r9,82c48 <memcpy+0xf8>
   82c5c:	20800044 	addi	r2,r4,1
   82c60:	1085883a 	add	r2,r2,r2
   82c64:	1085883a 	add	r2,r2,r2
   82c68:	017fff04 	movi	r5,-4
   82c6c:	18a5883a 	add	r18,r3,r2
   82c70:	50a7883a 	add	r19,r10,r2
   82c74:	008311c0 	call	8311c <__mulsi3>
   82c78:	1445883a 	add	r2,r2,r17
   82c7c:	980b883a 	mov	r5,r19
   82c80:	9007883a 	mov	r3,r18
   82c84:	003fc006 	br	82b88 <memcpy+0x38>
   82c88:	500b883a 	mov	r5,r10
   82c8c:	003fbe06 	br	82b88 <memcpy+0x38>

00082c90 <strlen>:
   82c90:	208000cc 	andi	r2,r4,3
   82c94:	10001f1e 	bne	r2,zero,82d14 <strlen+0x84>
   82c98:	20800017 	ldw	r2,0(r4)
   82c9c:	01ffbff4 	movhi	r7,65279
   82ca0:	39ffbfc4 	addi	r7,r7,-257
   82ca4:	01a02074 	movhi	r6,32897
   82ca8:	31a02004 	addi	r6,r6,-32640
   82cac:	11c7883a 	add	r3,r2,r7
   82cb0:	0084303a 	nor	r2,zero,r2
   82cb4:	1886703a 	and	r3,r3,r2
   82cb8:	1986703a 	and	r3,r3,r6
   82cbc:	2005883a 	mov	r2,r4
   82cc0:	1800101e 	bne	r3,zero,82d04 <strlen+0x74>
   82cc4:	10800104 	addi	r2,r2,4
   82cc8:	10c00017 	ldw	r3,0(r2)
   82ccc:	19cb883a 	add	r5,r3,r7
   82cd0:	00c6303a 	nor	r3,zero,r3
   82cd4:	28c6703a 	and	r3,r5,r3
   82cd8:	1986703a 	and	r3,r3,r6
   82cdc:	1800091e 	bne	r3,zero,82d04 <strlen+0x74>
   82ce0:	10800104 	addi	r2,r2,4
   82ce4:	10c00017 	ldw	r3,0(r2)
   82ce8:	19cb883a 	add	r5,r3,r7
   82cec:	00c6303a 	nor	r3,zero,r3
   82cf0:	28c6703a 	and	r3,r5,r3
   82cf4:	1986703a 	and	r3,r3,r6
   82cf8:	183ff226 	beq	r3,zero,82cc4 <strlen+0x34>
   82cfc:	00000106 	br	82d04 <strlen+0x74>
   82d00:	10800044 	addi	r2,r2,1
   82d04:	10c00007 	ldb	r3,0(r2)
   82d08:	183ffd1e 	bne	r3,zero,82d00 <strlen+0x70>
   82d0c:	1105c83a 	sub	r2,r2,r4
   82d10:	f800283a 	ret
   82d14:	2005883a 	mov	r2,r4
   82d18:	003ffa06 	br	82d04 <strlen+0x74>

00082d1c <__register_exitproc>:
   82d1c:	defffa04 	addi	sp,sp,-24
   82d20:	00800234 	movhi	r2,8
   82d24:	10923404 	addi	r2,r2,18640
   82d28:	dc000315 	stw	r16,12(sp)
   82d2c:	14000017 	ldw	r16,0(r2)
   82d30:	dc400415 	stw	r17,16(sp)
   82d34:	dfc00515 	stw	ra,20(sp)
   82d38:	80805217 	ldw	r2,328(r16)
   82d3c:	2023883a 	mov	r17,r4
   82d40:	10003e26 	beq	r2,zero,82e3c <__register_exitproc+0x120>
   82d44:	10c00117 	ldw	r3,4(r2)
   82d48:	020007c4 	movi	r8,31
   82d4c:	40c0180e 	bge	r8,r3,82db0 <__register_exitproc+0x94>
   82d50:	00800034 	movhi	r2,0
   82d54:	10800004 	addi	r2,r2,0
   82d58:	1000061e 	bne	r2,zero,82d74 <__register_exitproc+0x58>
   82d5c:	00bfffc4 	movi	r2,-1
   82d60:	dfc00517 	ldw	ra,20(sp)
   82d64:	dc400417 	ldw	r17,16(sp)
   82d68:	dc000317 	ldw	r16,12(sp)
   82d6c:	dec00604 	addi	sp,sp,24
   82d70:	f800283a 	ret
   82d74:	01006404 	movi	r4,400
   82d78:	d9400015 	stw	r5,0(sp)
   82d7c:	d9800115 	stw	r6,4(sp)
   82d80:	d9c00215 	stw	r7,8(sp)
   82d84:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   82d88:	d9400017 	ldw	r5,0(sp)
   82d8c:	d9800117 	ldw	r6,4(sp)
   82d90:	d9c00217 	ldw	r7,8(sp)
   82d94:	103ff126 	beq	r2,zero,82d5c <__register_exitproc+0x40>
   82d98:	80c05217 	ldw	r3,328(r16)
   82d9c:	10000115 	stw	zero,4(r2)
   82da0:	10c00015 	stw	r3,0(r2)
   82da4:	80805215 	stw	r2,328(r16)
   82da8:	10006215 	stw	zero,392(r2)
   82dac:	10006315 	stw	zero,396(r2)
   82db0:	10c00117 	ldw	r3,4(r2)
   82db4:	88000d1e 	bne	r17,zero,82dec <__register_exitproc+0xd0>
   82db8:	19000084 	addi	r4,r3,2
   82dbc:	2109883a 	add	r4,r4,r4
   82dc0:	18c00044 	addi	r3,r3,1
   82dc4:	2109883a 	add	r4,r4,r4
   82dc8:	1109883a 	add	r4,r2,r4
   82dcc:	10c00115 	stw	r3,4(r2)
   82dd0:	0005883a 	mov	r2,zero
   82dd4:	21400015 	stw	r5,0(r4)
   82dd8:	dfc00517 	ldw	ra,20(sp)
   82ddc:	dc400417 	ldw	r17,16(sp)
   82de0:	dc000317 	ldw	r16,12(sp)
   82de4:	dec00604 	addi	sp,sp,24
   82de8:	f800283a 	ret
   82dec:	02400044 	movi	r9,1
   82df0:	12806217 	ldw	r10,392(r2)
   82df4:	48d2983a 	sll	r9,r9,r3
   82df8:	19000804 	addi	r4,r3,32
   82dfc:	18d1883a 	add	r8,r3,r3
   82e00:	2109883a 	add	r4,r4,r4
   82e04:	4211883a 	add	r8,r8,r8
   82e08:	2109883a 	add	r4,r4,r4
   82e0c:	1109883a 	add	r4,r2,r4
   82e10:	1211883a 	add	r8,r2,r8
   82e14:	5254b03a 	or	r10,r10,r9
   82e18:	21c02215 	stw	r7,136(r4)
   82e1c:	41802215 	stw	r6,136(r8)
   82e20:	12806215 	stw	r10,392(r2)
   82e24:	01000084 	movi	r4,2
   82e28:	893fe31e 	bne	r17,r4,82db8 <__register_exitproc+0x9c>
   82e2c:	11006317 	ldw	r4,396(r2)
   82e30:	2252b03a 	or	r9,r4,r9
   82e34:	12406315 	stw	r9,396(r2)
   82e38:	003fdf06 	br	82db8 <__register_exitproc+0x9c>
   82e3c:	00800234 	movhi	r2,8
   82e40:	10983b04 	addi	r2,r2,24812
   82e44:	80805215 	stw	r2,328(r16)
   82e48:	003fbe06 	br	82d44 <__register_exitproc+0x28>

00082e4c <__call_exitprocs>:
   82e4c:	00800234 	movhi	r2,8
   82e50:	10923404 	addi	r2,r2,18640
   82e54:	10800017 	ldw	r2,0(r2)
   82e58:	defff304 	addi	sp,sp,-52
   82e5c:	df000b15 	stw	fp,44(sp)
   82e60:	d8800015 	stw	r2,0(sp)
   82e64:	10805204 	addi	r2,r2,328
   82e68:	dd400815 	stw	r21,32(sp)
   82e6c:	dfc00c15 	stw	ra,48(sp)
   82e70:	ddc00a15 	stw	r23,40(sp)
   82e74:	dd800915 	stw	r22,36(sp)
   82e78:	dd000715 	stw	r20,28(sp)
   82e7c:	dcc00615 	stw	r19,24(sp)
   82e80:	dc800515 	stw	r18,20(sp)
   82e84:	dc400415 	stw	r17,16(sp)
   82e88:	dc000315 	stw	r16,12(sp)
   82e8c:	d9000115 	stw	r4,4(sp)
   82e90:	2839883a 	mov	fp,r5
   82e94:	d8800215 	stw	r2,8(sp)
   82e98:	057fffc4 	movi	r21,-1
   82e9c:	d8800017 	ldw	r2,0(sp)
   82ea0:	ddc00217 	ldw	r23,8(sp)
   82ea4:	14805217 	ldw	r18,328(r2)
   82ea8:	90001726 	beq	r18,zero,82f08 <__call_exitprocs+0xbc>
   82eac:	94400117 	ldw	r17,4(r18)
   82eb0:	8c3fffc4 	addi	r16,r17,-1
   82eb4:	80001116 	blt	r16,zero,82efc <__call_exitprocs+0xb0>
   82eb8:	8c400044 	addi	r17,r17,1
   82ebc:	8427883a 	add	r19,r16,r16
   82ec0:	8c63883a 	add	r17,r17,r17
   82ec4:	95802204 	addi	r22,r18,136
   82ec8:	9ce7883a 	add	r19,r19,r19
   82ecc:	8c63883a 	add	r17,r17,r17
   82ed0:	b4e7883a 	add	r19,r22,r19
   82ed4:	9463883a 	add	r17,r18,r17
   82ed8:	e0001726 	beq	fp,zero,82f38 <__call_exitprocs+0xec>
   82edc:	8c87c83a 	sub	r3,r17,r18
   82ee0:	b0c7883a 	add	r3,r22,r3
   82ee4:	18c01e17 	ldw	r3,120(r3)
   82ee8:	1f001326 	beq	r3,fp,82f38 <__call_exitprocs+0xec>
   82eec:	843fffc4 	addi	r16,r16,-1
   82ef0:	9cffff04 	addi	r19,r19,-4
   82ef4:	8c7fff04 	addi	r17,r17,-4
   82ef8:	857ff71e 	bne	r16,r21,82ed8 <__call_exitprocs+0x8c>
   82efc:	00800034 	movhi	r2,0
   82f00:	10800004 	addi	r2,r2,0
   82f04:	10002a1e 	bne	r2,zero,82fb0 <__call_exitprocs+0x164>
   82f08:	dfc00c17 	ldw	ra,48(sp)
   82f0c:	df000b17 	ldw	fp,44(sp)
   82f10:	ddc00a17 	ldw	r23,40(sp)
   82f14:	dd800917 	ldw	r22,36(sp)
   82f18:	dd400817 	ldw	r21,32(sp)
   82f1c:	dd000717 	ldw	r20,28(sp)
   82f20:	dcc00617 	ldw	r19,24(sp)
   82f24:	dc800517 	ldw	r18,20(sp)
   82f28:	dc400417 	ldw	r17,16(sp)
   82f2c:	dc000317 	ldw	r16,12(sp)
   82f30:	dec00d04 	addi	sp,sp,52
   82f34:	f800283a 	ret
   82f38:	91000117 	ldw	r4,4(r18)
   82f3c:	88c00017 	ldw	r3,0(r17)
   82f40:	213fffc4 	addi	r4,r4,-1
   82f44:	24001526 	beq	r4,r16,82f9c <__call_exitprocs+0x150>
   82f48:	88000015 	stw	zero,0(r17)
   82f4c:	183fe726 	beq	r3,zero,82eec <__call_exitprocs+0xa0>
   82f50:	00800044 	movi	r2,1
   82f54:	1408983a 	sll	r4,r2,r16
   82f58:	91406217 	ldw	r5,392(r18)
   82f5c:	95000117 	ldw	r20,4(r18)
   82f60:	214a703a 	and	r5,r4,r5
   82f64:	28000b26 	beq	r5,zero,82f94 <__call_exitprocs+0x148>
   82f68:	91406317 	ldw	r5,396(r18)
   82f6c:	2148703a 	and	r4,r4,r5
   82f70:	20000c1e 	bne	r4,zero,82fa4 <__call_exitprocs+0x158>
   82f74:	99400017 	ldw	r5,0(r19)
   82f78:	d9000117 	ldw	r4,4(sp)
   82f7c:	183ee83a 	callr	r3
   82f80:	90c00117 	ldw	r3,4(r18)
   82f84:	1d3fc51e 	bne	r3,r20,82e9c <__call_exitprocs+0x50>
   82f88:	b8c00017 	ldw	r3,0(r23)
   82f8c:	1cbfd726 	beq	r3,r18,82eec <__call_exitprocs+0xa0>
   82f90:	003fc206 	br	82e9c <__call_exitprocs+0x50>
   82f94:	183ee83a 	callr	r3
   82f98:	003ff906 	br	82f80 <__call_exitprocs+0x134>
   82f9c:	94000115 	stw	r16,4(r18)
   82fa0:	003fea06 	br	82f4c <__call_exitprocs+0x100>
   82fa4:	99000017 	ldw	r4,0(r19)
   82fa8:	183ee83a 	callr	r3
   82fac:	003ff406 	br	82f80 <__call_exitprocs+0x134>
   82fb0:	90c00117 	ldw	r3,4(r18)
   82fb4:	1800071e 	bne	r3,zero,82fd4 <__call_exitprocs+0x188>
   82fb8:	90c00017 	ldw	r3,0(r18)
   82fbc:	18000926 	beq	r3,zero,82fe4 <__call_exitprocs+0x198>
   82fc0:	9009883a 	mov	r4,r18
   82fc4:	b8c00015 	stw	r3,0(r23)
   82fc8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   82fcc:	bc800017 	ldw	r18,0(r23)
   82fd0:	003fb506 	br	82ea8 <__call_exitprocs+0x5c>
   82fd4:	90c00017 	ldw	r3,0(r18)
   82fd8:	902f883a 	mov	r23,r18
   82fdc:	1825883a 	mov	r18,r3
   82fe0:	003fb106 	br	82ea8 <__call_exitprocs+0x5c>
   82fe4:	0007883a 	mov	r3,zero
   82fe8:	003ffb06 	br	82fd8 <__call_exitprocs+0x18c>

00082fec <udivmodsi4>:
   82fec:	2005883a 	mov	r2,r4
   82ff0:	2900182e 	bgeu	r5,r4,83054 <udivmodsi4+0x68>
   82ff4:	28001716 	blt	r5,zero,83054 <udivmodsi4+0x68>
   82ff8:	01000804 	movi	r4,32
   82ffc:	00c00044 	movi	r3,1
   83000:	00000206 	br	8300c <udivmodsi4+0x20>
   83004:	20001126 	beq	r4,zero,8304c <udivmodsi4+0x60>
   83008:	28000516 	blt	r5,zero,83020 <udivmodsi4+0x34>
   8300c:	294b883a 	add	r5,r5,r5
   83010:	213fffc4 	addi	r4,r4,-1
   83014:	18c7883a 	add	r3,r3,r3
   83018:	28bffa36 	bltu	r5,r2,83004 <udivmodsi4+0x18>
   8301c:	18000b26 	beq	r3,zero,8304c <udivmodsi4+0x60>
   83020:	0009883a 	mov	r4,zero
   83024:	11400236 	bltu	r2,r5,83030 <udivmodsi4+0x44>
   83028:	1145c83a 	sub	r2,r2,r5
   8302c:	20c8b03a 	or	r4,r4,r3
   83030:	1806d07a 	srli	r3,r3,1
   83034:	280ad07a 	srli	r5,r5,1
   83038:	183ffa1e 	bne	r3,zero,83024 <udivmodsi4+0x38>
   8303c:	3000021e 	bne	r6,zero,83048 <udivmodsi4+0x5c>
   83040:	2005883a 	mov	r2,r4
   83044:	f800283a 	ret
   83048:	f800283a 	ret
   8304c:	0009883a 	mov	r4,zero
   83050:	003ffa06 	br	8303c <udivmodsi4+0x50>
   83054:	00c00044 	movi	r3,1
   83058:	0009883a 	mov	r4,zero
   8305c:	003ff106 	br	83024 <udivmodsi4+0x38>

00083060 <__divsi3>:
   83060:	defffe04 	addi	sp,sp,-8
   83064:	dfc00115 	stw	ra,4(sp)
   83068:	dc000015 	stw	r16,0(sp)
   8306c:	20000a16 	blt	r4,zero,83098 <__divsi3+0x38>
   83070:	0021883a 	mov	r16,zero
   83074:	28000b16 	blt	r5,zero,830a4 <__divsi3+0x44>
   83078:	000d883a 	mov	r6,zero
   8307c:	0082fec0 	call	82fec <udivmodsi4>
   83080:	80000126 	beq	r16,zero,83088 <__divsi3+0x28>
   83084:	0085c83a 	sub	r2,zero,r2
   83088:	dfc00117 	ldw	ra,4(sp)
   8308c:	dc000017 	ldw	r16,0(sp)
   83090:	dec00204 	addi	sp,sp,8
   83094:	f800283a 	ret
   83098:	0109c83a 	sub	r4,zero,r4
   8309c:	04000044 	movi	r16,1
   830a0:	283ff50e 	bge	r5,zero,83078 <__divsi3+0x18>
   830a4:	014bc83a 	sub	r5,zero,r5
   830a8:	8400005c 	xori	r16,r16,1
   830ac:	003ff206 	br	83078 <__divsi3+0x18>

000830b0 <__modsi3>:
   830b0:	deffff04 	addi	sp,sp,-4
   830b4:	dfc00015 	stw	ra,0(sp)
   830b8:	20000516 	blt	r4,zero,830d0 <__modsi3+0x20>
   830bc:	28000c16 	blt	r5,zero,830f0 <__modsi3+0x40>
   830c0:	01800044 	movi	r6,1
   830c4:	dfc00017 	ldw	ra,0(sp)
   830c8:	dec00104 	addi	sp,sp,4
   830cc:	0082fec1 	jmpi	82fec <udivmodsi4>
   830d0:	0109c83a 	sub	r4,zero,r4
   830d4:	28000b16 	blt	r5,zero,83104 <__modsi3+0x54>
   830d8:	01800044 	movi	r6,1
   830dc:	0082fec0 	call	82fec <udivmodsi4>
   830e0:	0085c83a 	sub	r2,zero,r2
   830e4:	dfc00017 	ldw	ra,0(sp)
   830e8:	dec00104 	addi	sp,sp,4
   830ec:	f800283a 	ret
   830f0:	014bc83a 	sub	r5,zero,r5
   830f4:	01800044 	movi	r6,1
   830f8:	dfc00017 	ldw	ra,0(sp)
   830fc:	dec00104 	addi	sp,sp,4
   83100:	0082fec1 	jmpi	82fec <udivmodsi4>
   83104:	014bc83a 	sub	r5,zero,r5
   83108:	003ff306 	br	830d8 <__modsi3+0x28>

0008310c <__udivsi3>:
   8310c:	000d883a 	mov	r6,zero
   83110:	0082fec1 	jmpi	82fec <udivmodsi4>

00083114 <__umodsi3>:
   83114:	01800044 	movi	r6,1
   83118:	0082fec1 	jmpi	82fec <udivmodsi4>

0008311c <__mulsi3>:
   8311c:	0005883a 	mov	r2,zero
   83120:	20000726 	beq	r4,zero,83140 <__mulsi3+0x24>
   83124:	20c0004c 	andi	r3,r4,1
   83128:	2008d07a 	srli	r4,r4,1
   8312c:	18000126 	beq	r3,zero,83134 <__mulsi3+0x18>
   83130:	1145883a 	add	r2,r2,r5
   83134:	294b883a 	add	r5,r5,r5
   83138:	203ffa1e 	bne	r4,zero,83124 <__mulsi3+0x8>
   8313c:	f800283a 	ret
   83140:	f800283a 	ret

00083144 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   83144:	defffc04 	addi	sp,sp,-16
   83148:	df000315 	stw	fp,12(sp)
   8314c:	df000304 	addi	fp,sp,12
   83150:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   83154:	0001883a 	nop
   83158:	e0bfff17 	ldw	r2,-4(fp)
   8315c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   83160:	e0bffd17 	ldw	r2,-12(fp)
   83164:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   83168:	e0bffe17 	ldw	r2,-8(fp)
   8316c:	10000226 	beq	r2,zero,83178 <_exit+0x34>
    ALT_SIM_FAIL();
   83170:	002af070 	cmpltui	zero,zero,43969
   83174:	00000106 	br	8317c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   83178:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8317c:	003fff06 	br	8317c <_exit+0x38>
