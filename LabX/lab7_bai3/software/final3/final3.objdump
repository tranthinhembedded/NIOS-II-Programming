
final3.elf:     file format elf32-littlenios2
final3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000f1d8 memsz 0x0000f1d8 flags r-x
    LOAD off    0x000101f8 vaddr 0x0008f1f8 paddr 0x00090d28 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00012858 vaddr 0x00092858 paddr 0x00092858 align 2**12
         filesz 0x00000000 memsz 0x00000364 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e888  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007bc  0008ea3c  0008ea3c  0000fa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  0008f1f8  00090d28  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000364  00092858  00092858  00012858  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00011d28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  00011d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001749  00000000  00000000  00012ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026a74  00000000  00000000  00014231  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000084e7  00000000  00000000  0003aca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015ae9  00000000  00000000  0004318c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001cbc  00000000  00000000  00058c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000247a  00000000  00000000  0005a934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c67c  00000000  00000000  0005cdae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006942c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00069470  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d4ec  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006d4ef  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d4fb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d4fc  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006d4fd  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006d508  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006d513  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0006d51e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  0006d526  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000a1c86  00000000  00000000  0006d54f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008ea3c l    d  .rodata	00000000 .rodata
0008f1f8 l    d  .rwdata	00000000 .rwdata
00092858 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00092884 l     O .bss	00000004 key3_delay.2956
00092888 l     O .bss	00000004 key2_delay.2955
0009288c l     O .bss	00000004 key1_delay.2954
00092890 l     O .bss	00000004 key3_count.2953
00092894 l     O .bss	00000004 key2_count.2952
00092898 l     O .bss	00000004 key1_count.2951
00000000 l    df *ABS*	00000000 lib2-divmod.c
00081730 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00081cf0 l     F .text	00000058 __sprint_r
0008ec9a l     O .rodata	00000010 blanks.3452
0008ec8a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0008edab l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00083d6c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085794 l     F .text	00000058 std
000858a0 l     F .text	00000008 __fp_lock
000858a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008f1f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00090cf4 l     O .rwdata	00000004 charset
0008ef50 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008f098 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00089bb4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008b4d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008b530 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008b634 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008ba24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008bb04 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008bc64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0008bed4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00090d1c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008c1bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008fbb4 l     O .rwdata	00001060 jtag_uart_0
00090c14 l     O .rwdata	000000c4 uart_0
0008c2cc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008c50c l     F .text	00000228 altera_avalon_jtag_uart_irq
0008c734 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008cdb0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0008d070 l     F .text	0000009c altera_avalon_uart_irq
0008d10c l     F .text	000000e0 altera_avalon_uart_rxirq
0008d1ec l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0008d5d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0008d800 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008dbe0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008dd24 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008de74 l     F .text	000000f8 alt_file_locked
0008e0f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008e824 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008e9d8 l     F .text	00000040 alt_sim_halt
000874e4 g     F .text	00000094 _mprec_log10
000875d0 g     F .text	00000088 __any_on
00088d88 g     F .text	00000070 _isatty_r
0008f070 g     O .rodata	00000028 __mprec_tinytens
0008bcc4 g     F .text	0000006c alt_main
0009292c g     O .bss	00000100 alt_irq
00088df8 g     F .text	00000078 _lseek_r
00090d28 g       *ABS*	00000000 __flash_rwdata_start
00092874 g     O .bss	00000004 display_time
0008a6d4 g     F .text	00000088 __eqdf2
0008026c g     F .text	00000080 lcd_data
00092bbc g       *ABS*	00000000 __alt_heap_start
00088840 g     F .text	00000068 __sseek
000857fc g     F .text	000000a4 __sinit
00086508 g     F .text	00000084 _setlocale_r
000858fc g     F .text	0000009c __sfmoreglue
0008bd50 g     F .text	00000020 __malloc_unlock
00080920 g     F .text	000001b4 Timer_IRQ_Handler
00081090 g     F .text	00000044 Switch_Init
00092880 g     O .bss	00000004 data_ready
0009285c g     O .bss	00000004 mm
00086f60 g     F .text	000000e0 memmove
000858ec g     F .text	00000010 _cleanup
00087658 g     F .text	000000bc _Balloc
0008bd70 g     F .text	00000040 alt_putstr
00090ce0 g     O .rwdata	00000004 prev_key3_state
0008a7e4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00088d14 g     F .text	00000074 _fstat_r
000928b4 g     O .bss	00000004 errno
000928c0 g     O .bss	00000004 alt_argv
00098cd8 g       *ABS*	00000000 _gp
0008c068 g     F .text	00000030 usleep
000815e4 g     F .text	00000064 UART_Init
0008ea4c g     O .rodata	00000011 test_string
0008fa34 g     O .rwdata	00000180 alt_fd_list
0008e31c g     F .text	00000094 alt_find_dev
00081894 g     F .text	000000a0 memcpy
000811dc g     F .text	000002ec parse_data
000858e0 g     F .text	0000000c _cleanup_r
0008a97c g     F .text	000000f8 __floatsidf
0008ddfc g     F .text	00000078 alt_io_redirect
0008a8f4 g     F .text	00000088 __ltdf2
0008ea3c g       *ABS*	00000000 __DTOR_END__
00087434 g     F .text	000000b0 __ratio
0008c94c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008186c g     F .text	00000008 __udivsi3
0008b960 g     F .text	000000c4 isatty
0008ef80 g     O .rodata	000000c8 __mprec_tens
000864e4 g     F .text	00000008 __locale_charset
00092860 g     O .bss	00000004 ss
00080494 g     F .text	0000030c display_on_led
000928a8 g     O .bss	00000004 __malloc_top_pad
00090cf0 g     O .rwdata	00000004 __mb_cur_max
000864ec g     F .text	0000000c _localeconv_r
00087dbc g     F .text	0000003c __i2b
00085ec8 g     F .text	0000049c __sfvwrite_r
00092868 g     O .bss	00000004 month
000887c8 g     F .text	00000070 _sbrk_r
00088e70 g     F .text	00000078 _read_r
0008f5f8 g     O .rwdata	0000000c __lc_ctype
00090d10 g     O .rwdata	00000004 alt_max_fd
0008b1d0 g     F .text	00000138 __unpack_d
00088bf0 g     F .text	00000110 _fclose_r
00085760 g     F .text	00000034 fflush
000928ac g     O .bss	00000004 __malloc_max_sbrked_mem
0008a044 g     F .text	00000074 __adddf3
00087314 g     F .text	00000120 __b2d
00089554 g     F .text	00000660 __umoddi3
0008bb70 g     F .text	000000f4 lseek
00090cec g     O .rwdata	00000004 _global_impure_ptr
00088164 g     F .text	000005f4 _realloc_r
000928f8 g     O .bss	00000020 lcd_buffer
00092bbc g       *ABS*	00000000 __bss_end
0008b868 g     F .text	000000f8 alt_iic_isr_register
0008e1f0 g     F .text	0000010c alt_tick
00088ee8 g     F .text	0000066c __udivdi3
0008f048 g     O .rodata	00000028 __mprec_bigtens
00088044 g     F .text	00000120 __s2b
0008ab4c g     F .text	00000194 __floatunsidf
00087234 g     F .text	00000060 __mcmp
0008cfa8 g     F .text	000000c8 altera_avalon_uart_init
00090ce4 g     O .rwdata	00000004 __ctype_ptr
000858c8 g     F .text	00000018 __fp_lock_all
0008b820 g     F .text	00000048 alt_ic_irq_enabled
0008e158 g     F .text	00000098 alt_alarm_stop
00081ccc g     F .text	00000024 strtol
000928b8 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008fa0c g     O .rwdata	00000028 alt_dev_null
0008db10 g     F .text	0000001c alt_dcache_flush_all
00087100 g     F .text	00000070 __hi0bits
0008aa74 g     F .text	000000d8 __fixdfsi
00090d28 g       *ABS*	00000000 __ram_rwdata_end
00090d08 g     O .rwdata	00000008 alt_dev_list
0008c098 g     F .text	00000124 write
0008f1f8 g       *ABS*	00000000 __ram_rodata_end
0008b55c g     F .text	000000d8 fstat
00087f24 g     F .text	00000120 __pow5mult
0009289c g     O .bss	00000004 __nlocale_changed
00081874 g     F .text	00000008 __umodsi3
00092870 g     O .bss	00000004 display_mode
00092bbc g       *ABS*	00000000 end
00092878 g     O .bss	00000004 mode
0008187c g     F .text	0000000c _atoi_r
0008d638 g     F .text	000001c8 altera_avalon_uart_write
00092918 g     O .bss	00000014 uart_buffer
0008c44c g     F .text	000000c0 altera_avalon_jtag_uart_init
0008ea38 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008ce20 g     F .text	00000090 alt_avalon_timer_sc_init
0008cf08 g     F .text	00000058 altera_avalon_uart_write_fd
0008ae3c g     F .text	00000080 __clzsi2
0008cf60 g     F .text	00000048 altera_avalon_uart_close_fd
0008cb70 g     F .text	00000240 altera_avalon_jtag_uart_write
000857ec g     F .text	00000004 __sfp_lock_acquire
00086e7c g     F .text	000000e4 memchr
00081d48 g     F .text	00001ec4 ___vfprintf_internal_r
000819a8 g     F .text	00000060 _sprintf_r
00080ad4 g     F .text	00000070 Timer_Init
00085bb4 g     F .text	00000314 _free_r
000802ec g     F .text	00000088 lcd_string
0008e828 g     F .text	000001b0 __call_exitprocs
000928a0 g     O .bss	00000004 __mlocale_changed
00090cfc g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
000928c8 g     O .bss	00000004 _alt_tick_rate
00080cc8 g     F .text	000003c8 Key_Handler
00092864 g     O .bss	00000004 dd
00087a1c g     F .text	0000014c __lshift
000928cc g     O .bss	00000004 _alt_nticks
0008bdb0 g     F .text	00000124 read
0008c250 g     F .text	0000007c alt_sys_init
0008e6f0 g     F .text	00000134 __register_exitproc
00087b68 g     F .text	00000254 __multiply
0008c7e4 g     F .text	00000074 altera_avalon_jtag_uart_close
0008ace0 g     F .text	00000038 __mulsi3
0008f1f8 g       *ABS*	00000000 __ram_rwdata_start
0008ea3c g       *ABS*	00000000 __ram_rodata_start
000928d0 g     O .bss	00000028 __malloc_current_mallinfo
00087714 g     F .text	0000017c __d2b
000807a0 g     F .text	00000078 blink_leds
0008c304 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008e4d0 g     F .text	000000d0 alt_get_fd
0008d9b4 g     F .text	0000015c alt_busy_sleep
0008b308 g     F .text	000000c8 __fpcmp_parts_d
00088b80 g     F .text	00000070 _close_r
0008e67c g     F .text	00000074 memcmp
0008c3b4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00090cdc g     O .rwdata	00000004 prev_key2_state
00092bbc g       *ABS*	00000000 __alt_stack_base
0008c3fc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00083c30 g     F .text	0000013c __swsetup_r
0008a47c g     F .text	00000258 __divdf3
00085998 g     F .text	000000f0 __sfp
00087578 g     F .text	00000058 __copybits
0008f604 g     O .rwdata	00000408 __malloc_av_
000857f8 g     F .text	00000004 __sinit_lock_release
0008a0b8 g     F .text	000003c4 __muldf3
00088924 g     F .text	00000060 __sread
0008e3b0 g     F .text	00000120 alt_find_file
0008db2c g     F .text	000000b4 alt_dev_llist_insert
0008bd30 g     F .text	00000020 __malloc_lock
0008bfac g     F .text	000000bc sbrk
00085564 g     F .text	000001fc _fflush_r
00088ab8 g     F .text	000000c8 _calloc_r
00092858 g       *ABS*	00000000 __bss_start
00087040 g     F .text	00000098 memset
000810d4 g     F .text	00000094 transmitString
00080374 g     F .text	0000008c lcd_init
00081648 g     F .text	000000e8 main
000928c4 g     O .bss	00000004 alt_envp
000928b0 g     O .bss	00000004 __malloc_max_total_mem
0008c35c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00088838 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
00088d00 g     F .text	00000014 fclose
00081a7c g     F .text	00000250 _strtol_r
00092a2c g     O .bss	00000190 _atexit0
00083fb0 g     F .text	000015b4 _dtoa_r
0008673c g     F .text	00000740 _malloc_r
00090d14 g     O .rwdata	00000004 alt_errno
00081168 g     F .text	00000074 receiveChar
0008642c g     F .text	000000b8 _fwalk
0009287c g     O .bss	00000004 uart_index
000817ac g     F .text	00000060 __divsi3
0008f0a4 g     O .rodata	00000014 __thenan_df
00085a88 g     F .text	0000012c _malloc_trim_r
0008ea3c g       *ABS*	00000000 __CTOR_END__
00080400 g     F .text	00000094 display_on_lcd
00088984 g     F .text	000000bc strcmp
0008ea3c g       *ABS*	00000000 __flash_rodata_start
0008ea3c g       *ABS*	00000000 __DTOR_LIST__
0008a75c g     F .text	00000088 __nedf2
0008c21c g     F .text	00000034 alt_irq_init
0008bf34 g     F .text	00000078 alt_release_fd
00081934 g     F .text	00000074 sprintf
0008f0b8 g     O .rodata	00000100 __clz_tab
000928a4 g     O .bss	00000004 _PathLocale
0009286c g     O .bss	00000004 year
0008e5a0 g     F .text	00000014 atexit
00088a40 g     F .text	00000078 _write_r
0008658c g     F .text	0000001c setlocale
00080818 g     F .text	00000108 display_alarm_lcd
00090ce8 g     O .rwdata	00000004 _impure_ptr
000928bc g     O .bss	00000004 alt_argc
0008dca4 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00087294 g     F .text	00000080 __ulp
00088758 g     F .text	00000040 __isinfd
000858b0 g     F .text	00000018 __fp_unlock_all
00090d00 g     O .rwdata	00000008 alt_fs_list
00090cd8 g     O .rwdata	00000004 prev_key1_state
00080020 g       *ABS*	00000000 __ram_exceptions_start
000864f8 g     F .text	00000010 localeconv
00092858 g     O .bss	00000004 hh
0008b694 g     F .text	00000050 alt_ic_isr_register
00090d28 g       *ABS*	00000000 _edata
0008ceb0 g     F .text	00000058 altera_avalon_uart_read_fd
00092bbc g       *ABS*	00000000 _end
00080b44 g     F .text	00000184 Switch_IRQ_Handler
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008c858 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008e5ec g     F .text	00000074 _fputs_r
0008b780 g     F .text	000000a0 alt_ic_irq_disable
000888a8 g     F .text	0000007c __swrite
00090cf8 g     O .rwdata	00000004 __malloc_trim_threshold
0008e2fc g     F .text	00000020 altera_nios2_qsys_irq_init
0008e5b4 g     F .text	00000038 exit
00086364 g     F .text	000000c8 _fwalk_reent
00087890 g     F .text	0000018c __mdiff
0008180c g     F .text	00000060 __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000857f0 g     F .text	00000004 __sfp_lock_release
00081888 g     F .text	0000000c atoi
0008ecaa g     O .rodata	00000101 _ctype_
0008d348 g     F .text	00000060 altera_avalon_uart_close
0008ea18 g     F .text	00000020 _exit
00088798 g     F .text	00000030 __isnand
0008d860 g     F .text	00000154 alt_alarm_start
0008ad18 g     F .text	00000124 __muldi3
000865a8 g     F .text	00000194 __smakebuf_r
00081a08 g     F .text	00000074 strlen
0008df6c g     F .text	0000018c open
0008a86c g     F .text	00000088 __gedf2
0008dd08 g     F .text	0000001c alt_icache_flush_all
000801f0 g     F .text	0000007c lcd_command
0008e660 g     F .text	0000001c fputs
00090d18 g     O .rwdata	00000004 alt_priority_mask
0008b6e4 g     F .text	0000009c alt_ic_irq_enable
00083c0c g     F .text	00000024 __vfprintf_internal
0008d3a8 g     F .text	00000230 altera_avalon_uart_read
00089fc4 g     F .text	00000080 __subdf3
000814c8 g     F .text	0000011c UART_IRQ_Handler
00087170 g     F .text	000000c4 __lo0bits
00090d20 g     O .rwdata	00000008 alt_alarm_list
0008dc40 g     F .text	00000064 _do_ctors
0008b3d0 g     F .text	00000100 close
0008ba84 g     F .text	00000080 alt_load
0008aebc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000857f4 g     F .text	00000004 __sinit_lock_acquire
00087df8 g     F .text	0000012c __multadd
000870d8 g     F .text	00000028 _Bfree
0008ea3c g     O .rodata	00000010 hex_table



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18ca4b04 	addi	r3,r3,10540
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18ca4b04 	addi	r3,r3,10540
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec6a014 	ori	sp,sp,6784

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d6a33614 	ori	gp,gp,36056
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	108a1614 	ori	r2,r2,10328

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18caef14 	ori	r3,r3,11196

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008ba840 	call	8ba84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008bcc40 	call	8bcc4 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <lcd_command>:
volatile int data_ready = 0;
// Test string for parse_data
const char test_string[] = "$24042025155045%";

// ======================= LCD Functions ===================================
void lcd_command(char data) {
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	dfc00215 	stw	ra,8(sp)
   801f8:	df000115 	stw	fp,4(sp)
   801fc:	df000104 	addi	fp,sp,4
   80200:	e13fff05 	stb	r4,-4(fp)
    IOWR(LCD_RS_BASE, 0, 0x00);
   80204:	00800434 	movhi	r2,16
   80208:	10849004 	addi	r2,r2,4672
   8020c:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_RW_BASE, 0, 0x00);
   80210:	00800434 	movhi	r2,16
   80214:	10849404 	addi	r2,r2,4688
   80218:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_DATA_BASE, 0, data);
   8021c:	e0ffff07 	ldb	r3,-4(fp)
   80220:	00800434 	movhi	r2,16
   80224:	10849804 	addi	r2,r2,4704
   80228:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_EN_BASE, 0, 0x01);
   8022c:	00c00434 	movhi	r3,16
   80230:	18c48c04 	addi	r3,r3,4656
   80234:	00800044 	movi	r2,1
   80238:	18800035 	stwio	r2,0(r3)
    usleep(5);
   8023c:	01000144 	movi	r4,5
   80240:	008c0680 	call	8c068 <usleep>
    IOWR(LCD_EN_BASE, 0, 0x00);
   80244:	00800434 	movhi	r2,16
   80248:	10848c04 	addi	r2,r2,4656
   8024c:	10000035 	stwio	zero,0(r2)
    usleep(5);
   80250:	01000144 	movi	r4,5
   80254:	008c0680 	call	8c068 <usleep>
}
   80258:	e037883a 	mov	sp,fp
   8025c:	dfc00117 	ldw	ra,4(sp)
   80260:	df000017 	ldw	fp,0(sp)
   80264:	dec00204 	addi	sp,sp,8
   80268:	f800283a 	ret

0008026c <lcd_data>:

void lcd_data(char data) {
   8026c:	defffd04 	addi	sp,sp,-12
   80270:	dfc00215 	stw	ra,8(sp)
   80274:	df000115 	stw	fp,4(sp)
   80278:	df000104 	addi	fp,sp,4
   8027c:	e13fff05 	stb	r4,-4(fp)
    IOWR(LCD_RS_BASE, 0, 0x01);
   80280:	00c00434 	movhi	r3,16
   80284:	18c49004 	addi	r3,r3,4672
   80288:	00800044 	movi	r2,1
   8028c:	18800035 	stwio	r2,0(r3)
    IOWR(LCD_RW_BASE, 0, 0x00);
   80290:	00800434 	movhi	r2,16
   80294:	10849404 	addi	r2,r2,4688
   80298:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_DATA_BASE, 0, data);
   8029c:	e0ffff07 	ldb	r3,-4(fp)
   802a0:	00800434 	movhi	r2,16
   802a4:	10849804 	addi	r2,r2,4704
   802a8:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_EN_BASE, 0, 0x01);
   802ac:	00c00434 	movhi	r3,16
   802b0:	18c48c04 	addi	r3,r3,4656
   802b4:	00800044 	movi	r2,1
   802b8:	18800035 	stwio	r2,0(r3)
    usleep(5);
   802bc:	01000144 	movi	r4,5
   802c0:	008c0680 	call	8c068 <usleep>
    IOWR(LCD_EN_BASE, 0, 0x00);
   802c4:	00800434 	movhi	r2,16
   802c8:	10848c04 	addi	r2,r2,4656
   802cc:	10000035 	stwio	zero,0(r2)
    usleep(5);
   802d0:	01000144 	movi	r4,5
   802d4:	008c0680 	call	8c068 <usleep>
}
   802d8:	e037883a 	mov	sp,fp
   802dc:	dfc00117 	ldw	ra,4(sp)
   802e0:	df000017 	ldw	fp,0(sp)
   802e4:	dec00204 	addi	sp,sp,8
   802e8:	f800283a 	ret

000802ec <lcd_string>:

void lcd_string(char *str) {
   802ec:	defffc04 	addi	sp,sp,-16
   802f0:	dfc00315 	stw	ra,12(sp)
   802f4:	df000215 	stw	fp,8(sp)
   802f8:	df000204 	addi	fp,sp,8
   802fc:	e13fff15 	stw	r4,-4(fp)
    int i = 0;
   80300:	e03ffe15 	stw	zero,-8(fp)
    while (str[i] != 0) {
   80304:	00000c06 	br	80338 <lcd_string+0x4c>
        lcd_data(str[i]);
   80308:	e0bffe17 	ldw	r2,-8(fp)
   8030c:	1007883a 	mov	r3,r2
   80310:	e0bfff17 	ldw	r2,-4(fp)
   80314:	1885883a 	add	r2,r3,r2
   80318:	10800003 	ldbu	r2,0(r2)
   8031c:	11003fcc 	andi	r4,r2,255
   80320:	2100201c 	xori	r4,r4,128
   80324:	213fe004 	addi	r4,r4,-128
   80328:	008026c0 	call	8026c <lcd_data>
        i++;
   8032c:	e0bffe17 	ldw	r2,-8(fp)
   80330:	10800044 	addi	r2,r2,1
   80334:	e0bffe15 	stw	r2,-8(fp)
    usleep(5);
}

void lcd_string(char *str) {
    int i = 0;
    while (str[i] != 0) {
   80338:	e0bffe17 	ldw	r2,-8(fp)
   8033c:	1007883a 	mov	r3,r2
   80340:	e0bfff17 	ldw	r2,-4(fp)
   80344:	1885883a 	add	r2,r3,r2
   80348:	10800003 	ldbu	r2,0(r2)
   8034c:	10803fcc 	andi	r2,r2,255
   80350:	1080201c 	xori	r2,r2,128
   80354:	10bfe004 	addi	r2,r2,-128
   80358:	1004c03a 	cmpne	r2,r2,zero
   8035c:	103fea1e 	bne	r2,zero,80308 <lcd_string+0x1c>
        lcd_data(str[i]);
        i++;
    }
}
   80360:	e037883a 	mov	sp,fp
   80364:	dfc00117 	ldw	ra,4(sp)
   80368:	df000017 	ldw	fp,0(sp)
   8036c:	dec00204 	addi	sp,sp,8
   80370:	f800283a 	ret

00080374 <lcd_init>:

void lcd_init(void) {
   80374:	defffe04 	addi	sp,sp,-8
   80378:	dfc00115 	stw	ra,4(sp)
   8037c:	df000015 	stw	fp,0(sp)
   80380:	d839883a 	mov	fp,sp
    usleep(15000);               // Wait 15ms
   80384:	010ea604 	movi	r4,15000
   80388:	008c0680 	call	8c068 <usleep>
    lcd_command(0x38);           // 8-bit, 2-line mode
   8038c:	01000e04 	movi	r4,56
   80390:	00801f00 	call	801f0 <lcd_command>
    usleep(4100);
   80394:	01040104 	movi	r4,4100
   80398:	008c0680 	call	8c068 <usleep>
    lcd_command(0x38);
   8039c:	01000e04 	movi	r4,56
   803a0:	00801f00 	call	801f0 <lcd_command>
    usleep(100);
   803a4:	01001904 	movi	r4,100
   803a8:	008c0680 	call	8c068 <usleep>
    lcd_command(0x38);
   803ac:	01000e04 	movi	r4,56
   803b0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803b4:	0101f404 	movi	r4,2000
   803b8:	008c0680 	call	8c068 <usleep>
    lcd_command(0x0C);           // Display ON, Cursor OFF
   803bc:	01000304 	movi	r4,12
   803c0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803c4:	0101f404 	movi	r4,2000
   803c8:	008c0680 	call	8c068 <usleep>
    lcd_command(0x01);           // Clear display
   803cc:	01000044 	movi	r4,1
   803d0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803d4:	0101f404 	movi	r4,2000
   803d8:	008c0680 	call	8c068 <usleep>
    lcd_command(0x06);           // Entry mode: Increment cursor
   803dc:	01000184 	movi	r4,6
   803e0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803e4:	0101f404 	movi	r4,2000
   803e8:	008c0680 	call	8c068 <usleep>
}
   803ec:	e037883a 	mov	sp,fp
   803f0:	dfc00117 	ldw	ra,4(sp)
   803f4:	df000017 	ldw	fp,0(sp)
   803f8:	dec00204 	addi	sp,sp,8
   803fc:	f800283a 	ret

00080400 <display_on_lcd>:

// ====================== Display Functions ================================
void display_on_lcd(void) {
   80400:	defffd04 	addi	sp,sp,-12
   80404:	dfc00215 	stw	ra,8(sp)
   80408:	df000115 	stw	fp,4(sp)
   8040c:	df000104 	addi	fp,sp,4
    lcd_command(0x80); // First line
   80410:	013fe004 	movi	r4,-128
   80414:	00801f00 	call	801f0 <lcd_command>
    sprintf(lcd_buffer, "    %02d:%02d:%02d    ", hh, mm, ss);
   80418:	d1a6e017 	ldw	r6,-25728(gp)
   8041c:	d1e6e117 	ldw	r7,-25724(gp)
   80420:	d0a6e217 	ldw	r2,-25720(gp)
   80424:	d8800015 	stw	r2,0(sp)
   80428:	01000274 	movhi	r4,9
   8042c:	210a3e04 	addi	r4,r4,10488
   80430:	01400274 	movhi	r5,9
   80434:	297a9804 	addi	r5,r5,-5536
   80438:	00819340 	call	81934 <sprintf>
    lcd_string(lcd_buffer);
   8043c:	01000274 	movhi	r4,9
   80440:	210a3e04 	addi	r4,r4,10488
   80444:	00802ec0 	call	802ec <lcd_string>

    lcd_command(0xC0); // Second line
   80448:	013ff004 	movi	r4,-64
   8044c:	00801f00 	call	801f0 <lcd_command>
    sprintf(lcd_buffer, "   %02d-%02d-%04d   ", dd, month, year);
   80450:	d1a6e317 	ldw	r6,-25716(gp)
   80454:	d1e6e417 	ldw	r7,-25712(gp)
   80458:	d0a6e517 	ldw	r2,-25708(gp)
   8045c:	d8800015 	stw	r2,0(sp)
   80460:	01000274 	movhi	r4,9
   80464:	210a3e04 	addi	r4,r4,10488
   80468:	01400274 	movhi	r5,9
   8046c:	297a9e04 	addi	r5,r5,-5512
   80470:	00819340 	call	81934 <sprintf>
    lcd_string(lcd_buffer);
   80474:	01000274 	movhi	r4,9
   80478:	210a3e04 	addi	r4,r4,10488
   8047c:	00802ec0 	call	802ec <lcd_string>
}
   80480:	e037883a 	mov	sp,fp
   80484:	dfc00117 	ldw	ra,4(sp)
   80488:	df000017 	ldw	fp,0(sp)
   8048c:	dec00204 	addi	sp,sp,8
   80490:	f800283a 	ret

00080494 <display_on_led>:

void display_on_led(void) {
   80494:	defffe04 	addi	sp,sp,-8
   80498:	dfc00115 	stw	ra,4(sp)
   8049c:	df000015 	stw	fp,0(sp)
   804a0:	d839883a 	mov	fp,sp
    if (display_mode == 0) {
   804a4:	d0a6e617 	ldw	r2,-25704(gp)
   804a8:	1004c03a 	cmpne	r2,r2,zero
   804ac:	1000511e 	bne	r2,zero,805f4 <display_on_led+0x160>
        // Show time
        IOWR(LED8_BASE, 0, hex_table[hh / 10]);
   804b0:	d126e017 	ldw	r4,-25728(gp)
   804b4:	01400284 	movi	r5,10
   804b8:	00817ac0 	call	817ac <__divsi3>
   804bc:	1007883a 	mov	r3,r2
   804c0:	00800274 	movhi	r2,9
   804c4:	10ba8f04 	addi	r2,r2,-5572
   804c8:	10c5883a 	add	r2,r2,r3
   804cc:	10800003 	ldbu	r2,0(r2)
   804d0:	10c03fcc 	andi	r3,r2,255
   804d4:	00800434 	movhi	r2,16
   804d8:	10846804 	addi	r2,r2,4512
   804dc:	10c00035 	stwio	r3,0(r2)
        IOWR(LED7_BASE, 0, hex_table[hh % 10]);
   804e0:	d126e017 	ldw	r4,-25728(gp)
   804e4:	01400284 	movi	r5,10
   804e8:	008180c0 	call	8180c <__modsi3>
   804ec:	1007883a 	mov	r3,r2
   804f0:	00800274 	movhi	r2,9
   804f4:	10ba8f04 	addi	r2,r2,-5572
   804f8:	10c5883a 	add	r2,r2,r3
   804fc:	10800003 	ldbu	r2,0(r2)
   80500:	10c03fcc 	andi	r3,r2,255
   80504:	00800434 	movhi	r2,16
   80508:	10846c04 	addi	r2,r2,4528
   8050c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED6_BASE, 0, hex_table[mm / 10]);
   80510:	d126e117 	ldw	r4,-25724(gp)
   80514:	01400284 	movi	r5,10
   80518:	00817ac0 	call	817ac <__divsi3>
   8051c:	1007883a 	mov	r3,r2
   80520:	00800274 	movhi	r2,9
   80524:	10ba8f04 	addi	r2,r2,-5572
   80528:	10c5883a 	add	r2,r2,r3
   8052c:	10800003 	ldbu	r2,0(r2)
   80530:	10c03fcc 	andi	r3,r2,255
   80534:	00800434 	movhi	r2,16
   80538:	10847004 	addi	r2,r2,4544
   8053c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED5_BASE, 0, hex_table[mm % 10]);
   80540:	d126e117 	ldw	r4,-25724(gp)
   80544:	01400284 	movi	r5,10
   80548:	008180c0 	call	8180c <__modsi3>
   8054c:	1007883a 	mov	r3,r2
   80550:	00800274 	movhi	r2,9
   80554:	10ba8f04 	addi	r2,r2,-5572
   80558:	10c5883a 	add	r2,r2,r3
   8055c:	10800003 	ldbu	r2,0(r2)
   80560:	10c03fcc 	andi	r3,r2,255
   80564:	00800434 	movhi	r2,16
   80568:	10847404 	addi	r2,r2,4560
   8056c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED4_BASE, 0, hex_table[ss / 10]);
   80570:	d126e217 	ldw	r4,-25720(gp)
   80574:	01400284 	movi	r5,10
   80578:	00817ac0 	call	817ac <__divsi3>
   8057c:	1007883a 	mov	r3,r2
   80580:	00800274 	movhi	r2,9
   80584:	10ba8f04 	addi	r2,r2,-5572
   80588:	10c5883a 	add	r2,r2,r3
   8058c:	10800003 	ldbu	r2,0(r2)
   80590:	10c03fcc 	andi	r3,r2,255
   80594:	00800434 	movhi	r2,16
   80598:	10847804 	addi	r2,r2,4576
   8059c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED3_BASE, 0, hex_table[ss % 10]);
   805a0:	d126e217 	ldw	r4,-25720(gp)
   805a4:	01400284 	movi	r5,10
   805a8:	008180c0 	call	8180c <__modsi3>
   805ac:	1007883a 	mov	r3,r2
   805b0:	00800274 	movhi	r2,9
   805b4:	10ba8f04 	addi	r2,r2,-5572
   805b8:	10c5883a 	add	r2,r2,r3
   805bc:	10800003 	ldbu	r2,0(r2)
   805c0:	10c03fcc 	andi	r3,r2,255
   805c4:	00800434 	movhi	r2,16
   805c8:	10847c04 	addi	r2,r2,4592
   805cc:	10c00035 	stwio	r3,0(r2)
        IOWR(LED2_BASE, 0, 0xFF);
   805d0:	00c00434 	movhi	r3,16
   805d4:	18c48004 	addi	r3,r3,4608
   805d8:	00803fc4 	movi	r2,255
   805dc:	18800035 	stwio	r2,0(r3)
        IOWR(LED1_BASE, 0, 0xFF);
   805e0:	00c00434 	movhi	r3,16
   805e4:	18c48404 	addi	r3,r3,4624
   805e8:	00803fc4 	movi	r2,255
   805ec:	18800035 	stwio	r2,0(r3)
   805f0:	00006606 	br	8078c <display_on_led+0x2f8>
    } else {
        // Show date
        IOWR(LED8_BASE, 0, hex_table[dd / 10]);
   805f4:	d126e317 	ldw	r4,-25716(gp)
   805f8:	01400284 	movi	r5,10
   805fc:	00817ac0 	call	817ac <__divsi3>
   80600:	1007883a 	mov	r3,r2
   80604:	00800274 	movhi	r2,9
   80608:	10ba8f04 	addi	r2,r2,-5572
   8060c:	10c5883a 	add	r2,r2,r3
   80610:	10800003 	ldbu	r2,0(r2)
   80614:	10c03fcc 	andi	r3,r2,255
   80618:	00800434 	movhi	r2,16
   8061c:	10846804 	addi	r2,r2,4512
   80620:	10c00035 	stwio	r3,0(r2)
        IOWR(LED7_BASE, 0, hex_table[dd % 10]);
   80624:	d126e317 	ldw	r4,-25716(gp)
   80628:	01400284 	movi	r5,10
   8062c:	008180c0 	call	8180c <__modsi3>
   80630:	1007883a 	mov	r3,r2
   80634:	00800274 	movhi	r2,9
   80638:	10ba8f04 	addi	r2,r2,-5572
   8063c:	10c5883a 	add	r2,r2,r3
   80640:	10800003 	ldbu	r2,0(r2)
   80644:	10c03fcc 	andi	r3,r2,255
   80648:	00800434 	movhi	r2,16
   8064c:	10846c04 	addi	r2,r2,4528
   80650:	10c00035 	stwio	r3,0(r2)
        IOWR(LED6_BASE, 0, hex_table[month / 10]);
   80654:	d126e417 	ldw	r4,-25712(gp)
   80658:	01400284 	movi	r5,10
   8065c:	00817ac0 	call	817ac <__divsi3>
   80660:	1007883a 	mov	r3,r2
   80664:	00800274 	movhi	r2,9
   80668:	10ba8f04 	addi	r2,r2,-5572
   8066c:	10c5883a 	add	r2,r2,r3
   80670:	10800003 	ldbu	r2,0(r2)
   80674:	10c03fcc 	andi	r3,r2,255
   80678:	00800434 	movhi	r2,16
   8067c:	10847004 	addi	r2,r2,4544
   80680:	10c00035 	stwio	r3,0(r2)
        IOWR(LED5_BASE, 0, hex_table[month % 10]);
   80684:	d126e417 	ldw	r4,-25712(gp)
   80688:	01400284 	movi	r5,10
   8068c:	008180c0 	call	8180c <__modsi3>
   80690:	1007883a 	mov	r3,r2
   80694:	00800274 	movhi	r2,9
   80698:	10ba8f04 	addi	r2,r2,-5572
   8069c:	10c5883a 	add	r2,r2,r3
   806a0:	10800003 	ldbu	r2,0(r2)
   806a4:	10c03fcc 	andi	r3,r2,255
   806a8:	00800434 	movhi	r2,16
   806ac:	10847404 	addi	r2,r2,4560
   806b0:	10c00035 	stwio	r3,0(r2)
        IOWR(LED4_BASE, 0, hex_table[year / 1000]);
   806b4:	d126e517 	ldw	r4,-25708(gp)
   806b8:	0140fa04 	movi	r5,1000
   806bc:	00817ac0 	call	817ac <__divsi3>
   806c0:	1007883a 	mov	r3,r2
   806c4:	00800274 	movhi	r2,9
   806c8:	10ba8f04 	addi	r2,r2,-5572
   806cc:	10c5883a 	add	r2,r2,r3
   806d0:	10800003 	ldbu	r2,0(r2)
   806d4:	10c03fcc 	andi	r3,r2,255
   806d8:	00800434 	movhi	r2,16
   806dc:	10847804 	addi	r2,r2,4576
   806e0:	10c00035 	stwio	r3,0(r2)
        IOWR(LED3_BASE, 0, hex_table[(year / 100) % 10]);
   806e4:	d126e517 	ldw	r4,-25708(gp)
   806e8:	01401904 	movi	r5,100
   806ec:	00817ac0 	call	817ac <__divsi3>
   806f0:	1009883a 	mov	r4,r2
   806f4:	01400284 	movi	r5,10
   806f8:	008180c0 	call	8180c <__modsi3>
   806fc:	1007883a 	mov	r3,r2
   80700:	00800274 	movhi	r2,9
   80704:	10ba8f04 	addi	r2,r2,-5572
   80708:	10c5883a 	add	r2,r2,r3
   8070c:	10800003 	ldbu	r2,0(r2)
   80710:	10c03fcc 	andi	r3,r2,255
   80714:	00800434 	movhi	r2,16
   80718:	10847c04 	addi	r2,r2,4592
   8071c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED2_BASE, 0, hex_table[(year / 10) % 10]);
   80720:	d126e517 	ldw	r4,-25708(gp)
   80724:	01400284 	movi	r5,10
   80728:	00817ac0 	call	817ac <__divsi3>
   8072c:	1009883a 	mov	r4,r2
   80730:	01400284 	movi	r5,10
   80734:	008180c0 	call	8180c <__modsi3>
   80738:	1007883a 	mov	r3,r2
   8073c:	00800274 	movhi	r2,9
   80740:	10ba8f04 	addi	r2,r2,-5572
   80744:	10c5883a 	add	r2,r2,r3
   80748:	10800003 	ldbu	r2,0(r2)
   8074c:	10c03fcc 	andi	r3,r2,255
   80750:	00800434 	movhi	r2,16
   80754:	10848004 	addi	r2,r2,4608
   80758:	10c00035 	stwio	r3,0(r2)
        IOWR(LED1_BASE, 0, hex_table[year % 10]);
   8075c:	d126e517 	ldw	r4,-25708(gp)
   80760:	01400284 	movi	r5,10
   80764:	008180c0 	call	8180c <__modsi3>
   80768:	1007883a 	mov	r3,r2
   8076c:	00800274 	movhi	r2,9
   80770:	10ba8f04 	addi	r2,r2,-5572
   80774:	10c5883a 	add	r2,r2,r3
   80778:	10800003 	ldbu	r2,0(r2)
   8077c:	10c03fcc 	andi	r3,r2,255
   80780:	00800434 	movhi	r2,16
   80784:	10848404 	addi	r2,r2,4624
   80788:	10c00035 	stwio	r3,0(r2)
    }
}
   8078c:	e037883a 	mov	sp,fp
   80790:	dfc00117 	ldw	ra,4(sp)
   80794:	df000017 	ldw	fp,0(sp)
   80798:	dec00204 	addi	sp,sp,8
   8079c:	f800283a 	ret

000807a0 <blink_leds>:
// ====================== LED and LCD Alarm Functions ======================
void blink_leds(void) {
   807a0:	defffd04 	addi	sp,sp,-12
   807a4:	dfc00215 	stw	ra,8(sp)
   807a8:	df000115 	stw	fp,4(sp)
   807ac:	df000104 	addi	fp,sp,4
	int i;
    for (i = 0; i < 10; i++) {
   807b0:	e03fff15 	stw	zero,-4(fp)
   807b4:	00001006 	br	807f8 <blink_leds+0x58>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0xFF); // Turn on all 8 LEDs
   807b8:	00c00434 	movhi	r3,16
   807bc:	18c45404 	addi	r3,r3,4432
   807c0:	00803fc4 	movi	r2,255
   807c4:	18800035 	stwio	r2,0(r3)
        usleep(200000); // 500ms ON
   807c8:	010000f4 	movhi	r4,3
   807cc:	21035004 	addi	r4,r4,3392
   807d0:	008c0680 	call	8c068 <usleep>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x00); // Turn off all 8 LEDs
   807d4:	00800434 	movhi	r2,16
   807d8:	10845404 	addi	r2,r2,4432
   807dc:	10000035 	stwio	zero,0(r2)
        usleep(200000); // 500ms OFF
   807e0:	010000f4 	movhi	r4,3
   807e4:	21035004 	addi	r4,r4,3392
   807e8:	008c0680 	call	8c068 <usleep>
    }
}
// ====================== LED and LCD Alarm Functions ======================
void blink_leds(void) {
	int i;
    for (i = 0; i < 10; i++) {
   807ec:	e0bfff17 	ldw	r2,-4(fp)
   807f0:	10800044 	addi	r2,r2,1
   807f4:	e0bfff15 	stw	r2,-4(fp)
   807f8:	e0bfff17 	ldw	r2,-4(fp)
   807fc:	10800290 	cmplti	r2,r2,10
   80800:	103fed1e 	bne	r2,zero,807b8 <blink_leds+0x18>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0xFF); // Turn on all 8 LEDs
        usleep(200000); // 500ms ON
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x00); // Turn off all 8 LEDs
        usleep(200000); // 500ms OFF
    }
}
   80804:	e037883a 	mov	sp,fp
   80808:	dfc00117 	ldw	ra,4(sp)
   8080c:	df000017 	ldw	fp,0(sp)
   80810:	dec00204 	addi	sp,sp,8
   80814:	f800283a 	ret

00080818 <display_alarm_lcd>:

void display_alarm_lcd(void) {
   80818:	defffd04 	addi	sp,sp,-12
   8081c:	dfc00215 	stw	ra,8(sp)
   80820:	df000115 	stw	fp,4(sp)
   80824:	df000104 	addi	fp,sp,4
	int i;
    for (i = 0; i < 10; i++) {
   80828:	e03fff15 	stw	zero,-4(fp)
   8082c:	00003406 	br	80900 <display_alarm_lcd+0xe8>
        // Display "ALARM" on line 1
        lcd_command(0x80); // First line
   80830:	013fe004 	movi	r4,-128
   80834:	00801f00 	call	801f0 <lcd_command>
        lcd_string("    ALARM    ");
   80838:	01000274 	movhi	r4,9
   8083c:	213aa404 	addi	r4,r4,-5488
   80840:	00802ec0 	call	802ec <lcd_string>
        // Keep date on line 2
        lcd_command(0xC0); // Second line
   80844:	013ff004 	movi	r4,-64
   80848:	00801f00 	call	801f0 <lcd_command>
        sprintf(lcd_buffer, "                ");
   8084c:	00800274 	movhi	r2,9
   80850:	108a3e04 	addi	r2,r2,10488
   80854:	00c00274 	movhi	r3,9
   80858:	18faa804 	addi	r3,r3,-5472
   8085c:	1009883a 	mov	r4,r2
   80860:	180b883a 	mov	r5,r3
   80864:	01800444 	movi	r6,17
   80868:	00818940 	call	81894 <memcpy>
        lcd_string(lcd_buffer);
   8086c:	01000274 	movhi	r4,9
   80870:	210a3e04 	addi	r4,r4,10488
   80874:	00802ec0 	call	802ec <lcd_string>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0xFF); // Turn on all 8 LEDs
   80878:	00c00434 	movhi	r3,16
   8087c:	18c45404 	addi	r3,r3,4432
   80880:	00803fc4 	movi	r2,255
   80884:	18800035 	stwio	r2,0(r3)
        usleep(200000); // 500ms ON
   80888:	010000f4 	movhi	r4,3
   8088c:	21035004 	addi	r4,r4,3392
   80890:	008c0680 	call	8c068 <usleep>

        // Clear line 1
        lcd_command(0x80);
   80894:	013fe004 	movi	r4,-128
   80898:	00801f00 	call	801f0 <lcd_command>
        lcd_string("             ");
   8089c:	01000274 	movhi	r4,9
   808a0:	213aad04 	addi	r4,r4,-5452
   808a4:	00802ec0 	call	802ec <lcd_string>
        // Keep date on line 2
        lcd_command(0xC0);
   808a8:	013ff004 	movi	r4,-64
   808ac:	00801f00 	call	801f0 <lcd_command>
        sprintf(lcd_buffer, "                ");
   808b0:	00800274 	movhi	r2,9
   808b4:	108a3e04 	addi	r2,r2,10488
   808b8:	00c00274 	movhi	r3,9
   808bc:	18faa804 	addi	r3,r3,-5472
   808c0:	1009883a 	mov	r4,r2
   808c4:	180b883a 	mov	r5,r3
   808c8:	01800444 	movi	r6,17
   808cc:	00818940 	call	81894 <memcpy>
        lcd_string(lcd_buffer);
   808d0:	01000274 	movhi	r4,9
   808d4:	210a3e04 	addi	r4,r4,10488
   808d8:	00802ec0 	call	802ec <lcd_string>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x00); // Turn off all 8 LEDs
   808dc:	00800434 	movhi	r2,16
   808e0:	10845404 	addi	r2,r2,4432
   808e4:	10000035 	stwio	zero,0(r2)
        usleep(200000); // 500ms OFF
   808e8:	010000f4 	movhi	r4,3
   808ec:	21035004 	addi	r4,r4,3392
   808f0:	008c0680 	call	8c068 <usleep>
    }
}

void display_alarm_lcd(void) {
	int i;
    for (i = 0; i < 10; i++) {
   808f4:	e0bfff17 	ldw	r2,-4(fp)
   808f8:	10800044 	addi	r2,r2,1
   808fc:	e0bfff15 	stw	r2,-4(fp)
   80900:	e0bfff17 	ldw	r2,-4(fp)
   80904:	10800290 	cmplti	r2,r2,10
   80908:	103fc91e 	bne	r2,zero,80830 <display_alarm_lcd+0x18>
        sprintf(lcd_buffer, "                ");
        lcd_string(lcd_buffer);
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 0x00); // Turn off all 8 LEDs
        usleep(200000); // 500ms OFF
    }
}
   8090c:	e037883a 	mov	sp,fp
   80910:	dfc00117 	ldw	ra,4(sp)
   80914:	df000017 	ldw	fp,0(sp)
   80918:	dec00204 	addi	sp,sp,8
   8091c:	f800283a 	ret

00080920 <Timer_IRQ_Handler>:
// ====================== Timer IRQ Handler ================================
void Timer_IRQ_Handler(void* isr_context) {
   80920:	defffe04 	addi	sp,sp,-8
   80924:	df000115 	stw	fp,4(sp)
   80928:	df000104 	addi	fp,sp,4
   8092c:	e13fff15 	stw	r4,-4(fp)
    if (mode == 0) {
   80930:	d0a6e817 	ldw	r2,-25696(gp)
   80934:	1004c03a 	cmpne	r2,r2,zero
   80938:	1000491e 	bne	r2,zero,80a60 <Timer_IRQ_Handler+0x140>
        ss++;
   8093c:	d0a6e217 	ldw	r2,-25720(gp)
   80940:	10800044 	addi	r2,r2,1
   80944:	d0a6e215 	stw	r2,-25720(gp)
        if (ss == 60) { ss = 0; mm++; }
   80948:	d0a6e217 	ldw	r2,-25720(gp)
   8094c:	10800f18 	cmpnei	r2,r2,60
   80950:	1000041e 	bne	r2,zero,80964 <Timer_IRQ_Handler+0x44>
   80954:	d026e215 	stw	zero,-25720(gp)
   80958:	d0a6e117 	ldw	r2,-25724(gp)
   8095c:	10800044 	addi	r2,r2,1
   80960:	d0a6e115 	stw	r2,-25724(gp)
        if (mm == 60) { mm = 0; hh++; }
   80964:	d0a6e117 	ldw	r2,-25724(gp)
   80968:	10800f18 	cmpnei	r2,r2,60
   8096c:	1000041e 	bne	r2,zero,80980 <Timer_IRQ_Handler+0x60>
   80970:	d026e115 	stw	zero,-25724(gp)
   80974:	d0a6e017 	ldw	r2,-25728(gp)
   80978:	10800044 	addi	r2,r2,1
   8097c:	d0a6e015 	stw	r2,-25728(gp)
        if (hh == 24) { hh = 0; dd++; }
   80980:	d0a6e017 	ldw	r2,-25728(gp)
   80984:	10800618 	cmpnei	r2,r2,24
   80988:	1000041e 	bne	r2,zero,8099c <Timer_IRQ_Handler+0x7c>
   8098c:	d026e015 	stw	zero,-25728(gp)
   80990:	d0a6e317 	ldw	r2,-25716(gp)
   80994:	10800044 	addi	r2,r2,1
   80998:	d0a6e315 	stw	r2,-25716(gp)

        // Update day/month/year
        if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
   8099c:	d0a6e417 	ldw	r2,-25712(gp)
   809a0:	10800120 	cmpeqi	r2,r2,4
   809a4:	1000091e 	bne	r2,zero,809cc <Timer_IRQ_Handler+0xac>
   809a8:	d0a6e417 	ldw	r2,-25712(gp)
   809ac:	108001a0 	cmpeqi	r2,r2,6
   809b0:	1000061e 	bne	r2,zero,809cc <Timer_IRQ_Handler+0xac>
   809b4:	d0a6e417 	ldw	r2,-25712(gp)
   809b8:	10800260 	cmpeqi	r2,r2,9
   809bc:	1000031e 	bne	r2,zero,809cc <Timer_IRQ_Handler+0xac>
   809c0:	d0a6e417 	ldw	r2,-25712(gp)
   809c4:	108002d8 	cmpnei	r2,r2,11
   809c8:	1000091e 	bne	r2,zero,809f0 <Timer_IRQ_Handler+0xd0>
   809cc:	d0a6e317 	ldw	r2,-25716(gp)
   809d0:	108007d0 	cmplti	r2,r2,31
   809d4:	1000061e 	bne	r2,zero,809f0 <Timer_IRQ_Handler+0xd0>
            dd = 1; month++;
   809d8:	00800044 	movi	r2,1
   809dc:	d0a6e315 	stw	r2,-25716(gp)
   809e0:	d0a6e417 	ldw	r2,-25712(gp)
   809e4:	10800044 	addi	r2,r2,1
   809e8:	d0a6e415 	stw	r2,-25712(gp)
        if (ss == 60) { ss = 0; mm++; }
        if (mm == 60) { mm = 0; hh++; }
        if (hh == 24) { hh = 0; dd++; }

        // Update day/month/year
        if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
   809ec:	00001406 	br	80a40 <Timer_IRQ_Handler+0x120>
            dd = 1; month++;
        } else if (month == 2 && dd > 28) {
   809f0:	d0a6e417 	ldw	r2,-25712(gp)
   809f4:	10800098 	cmpnei	r2,r2,2
   809f8:	1000091e 	bne	r2,zero,80a20 <Timer_IRQ_Handler+0x100>
   809fc:	d0a6e317 	ldw	r2,-25716(gp)
   80a00:	10800750 	cmplti	r2,r2,29
   80a04:	1000061e 	bne	r2,zero,80a20 <Timer_IRQ_Handler+0x100>
            dd = 1; month++; // Not leap year
   80a08:	00800044 	movi	r2,1
   80a0c:	d0a6e315 	stw	r2,-25716(gp)
   80a10:	d0a6e417 	ldw	r2,-25712(gp)
   80a14:	10800044 	addi	r2,r2,1
   80a18:	d0a6e415 	stw	r2,-25712(gp)
        if (hh == 24) { hh = 0; dd++; }

        // Update day/month/year
        if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
            dd = 1; month++;
        } else if (month == 2 && dd > 28) {
   80a1c:	00000806 	br	80a40 <Timer_IRQ_Handler+0x120>
            dd = 1; month++; // Not leap year
        } else if (dd > 31) {
   80a20:	d0a6e317 	ldw	r2,-25716(gp)
   80a24:	10800810 	cmplti	r2,r2,32
   80a28:	1000051e 	bne	r2,zero,80a40 <Timer_IRQ_Handler+0x120>
            dd = 1; month++;
   80a2c:	00800044 	movi	r2,1
   80a30:	d0a6e315 	stw	r2,-25716(gp)
   80a34:	d0a6e417 	ldw	r2,-25712(gp)
   80a38:	10800044 	addi	r2,r2,1
   80a3c:	d0a6e415 	stw	r2,-25712(gp)
        }

        if (month > 12) {
   80a40:	d0a6e417 	ldw	r2,-25712(gp)
   80a44:	10800350 	cmplti	r2,r2,13
   80a48:	1000051e 	bne	r2,zero,80a60 <Timer_IRQ_Handler+0x140>
            month = 1; year++;
   80a4c:	00800044 	movi	r2,1
   80a50:	d0a6e415 	stw	r2,-25712(gp)
   80a54:	d0a6e517 	ldw	r2,-25708(gp)
   80a58:	10800044 	addi	r2,r2,1
   80a5c:	d0a6e515 	stw	r2,-25708(gp)
        }
    }

    // Update display mode timing
    display_time++;
   80a60:	d0a6e717 	ldw	r2,-25700(gp)
   80a64:	10800044 	addi	r2,r2,1
   80a68:	d0a6e715 	stw	r2,-25700(gp)
    if (display_mode == 0 && display_time >= 8) {
   80a6c:	d0a6e617 	ldw	r2,-25704(gp)
   80a70:	1004c03a 	cmpne	r2,r2,zero
   80a74:	1000071e 	bne	r2,zero,80a94 <Timer_IRQ_Handler+0x174>
   80a78:	d0a6e717 	ldw	r2,-25700(gp)
   80a7c:	10800210 	cmplti	r2,r2,8
   80a80:	1000041e 	bne	r2,zero,80a94 <Timer_IRQ_Handler+0x174>
        display_mode = 1;
   80a84:	00800044 	movi	r2,1
   80a88:	d0a6e615 	stw	r2,-25704(gp)
        display_time = 0;
   80a8c:	d026e715 	stw	zero,-25700(gp)
        }
    }

    // Update display mode timing
    display_time++;
    if (display_mode == 0 && display_time >= 8) {
   80a90:	00000806 	br	80ab4 <Timer_IRQ_Handler+0x194>
        display_mode = 1;
        display_time = 0;
    } else if (display_mode == 1 && display_time >= 2) {
   80a94:	d0a6e617 	ldw	r2,-25704(gp)
   80a98:	10800058 	cmpnei	r2,r2,1
   80a9c:	1000051e 	bne	r2,zero,80ab4 <Timer_IRQ_Handler+0x194>
   80aa0:	d0a6e717 	ldw	r2,-25700(gp)
   80aa4:	10800090 	cmplti	r2,r2,2
   80aa8:	1000021e 	bne	r2,zero,80ab4 <Timer_IRQ_Handler+0x194>
        display_mode = 0;
   80aac:	d026e615 	stw	zero,-25704(gp)
        display_time = 0;
   80ab0:	d026e715 	stw	zero,-25700(gp)
    }

    // Clear timer interrupt flag
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
   80ab4:	00c00434 	movhi	r3,16
   80ab8:	18c41004 	addi	r3,r3,4160
   80abc:	00800044 	movi	r2,1
   80ac0:	18800035 	stwio	r2,0(r3)
}
   80ac4:	e037883a 	mov	sp,fp
   80ac8:	df000017 	ldw	fp,0(sp)
   80acc:	dec00104 	addi	sp,sp,4
   80ad0:	f800283a 	ret

00080ad4 <Timer_Init>:

// ====================== Timer Initialization ==============================
void Timer_Init(void) {
   80ad4:	defffe04 	addi	sp,sp,-8
   80ad8:	df000115 	stw	fp,4(sp)
   80adc:	df000104 	addi	fp,sp,4
    unsigned int period = 50000000 - 1; // 1 second with 50 MHz clock
   80ae0:	0080bef4 	movhi	r2,763
   80ae4:	10bc1fc4 	addi	r2,r2,-3969
   80ae8:	e0bfff15 	stw	r2,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   80aec:	00c00434 	movhi	r3,16
   80af0:	18c41104 	addi	r3,r3,4164
   80af4:	00800204 	movi	r2,8
   80af8:	18800035 	stwio	r2,0(r3)

    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
   80afc:	e0ffff17 	ldw	r3,-4(fp)
   80b00:	00800434 	movhi	r2,16
   80b04:	10841204 	addi	r2,r2,4168
   80b08:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
   80b0c:	e0bfff17 	ldw	r2,-4(fp)
   80b10:	1004d43a 	srli	r2,r2,16
   80b14:	1007883a 	mov	r3,r2
   80b18:	00800434 	movhi	r2,16
   80b1c:	10841304 	addi	r2,r2,4172
   80b20:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(
   80b24:	00c00434 	movhi	r3,16
   80b28:	18c41104 	addi	r3,r3,4164
   80b2c:	008001c4 	movi	r2,7
   80b30:	18800035 	stwio	r2,0(r3)
        TIMER_0_BASE,
        ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
        ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
        ALTERA_AVALON_TIMER_CONTROL_START_MSK
    );
}
   80b34:	e037883a 	mov	sp,fp
   80b38:	df000017 	ldw	fp,0(sp)
   80b3c:	dec00104 	addi	sp,sp,4
   80b40:	f800283a 	ret

00080b44 <Switch_IRQ_Handler>:
// ====================== Switch and Key Functions =========================
void Switch_IRQ_Handler(void* context) {
   80b44:	defffa04 	addi	sp,sp,-24
   80b48:	dfc00515 	stw	ra,20(sp)
   80b4c:	df000415 	stw	fp,16(sp)
   80b50:	df000404 	addi	fp,sp,16
   80b54:	e13fff15 	stw	r4,-4(fp)
    // Read and clear edge capture
    unsigned char edge_val = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE);
   80b58:	00800434 	movhi	r2,16
   80b5c:	10846704 	addi	r2,r2,4508
   80b60:	10800037 	ldwio	r2,0(r2)
   80b64:	e0bffe05 	stb	r2,-8(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, edge_val); // Clear edge capture
   80b68:	e0fffe03 	ldbu	r3,-8(fp)
   80b6c:	00800434 	movhi	r2,16
   80b70:	10846704 	addi	r2,r2,4508
   80b74:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0x00);    // Ensure all edges cleared
   80b78:	00800434 	movhi	r2,16
   80b7c:	10846704 	addi	r2,r2,4508
   80b80:	10000035 	stwio	zero,0(r2)

    // Debounce: Read switch state multiple times
    unsigned char sw_state = IORD_ALTERA_AVALON_PIO_DATA(SWITCH0_BASE);
   80b84:	00800434 	movhi	r2,16
   80b88:	10846404 	addi	r2,r2,4496
   80b8c:	10800037 	ldwio	r2,0(r2)
   80b90:	e0bffdc5 	stb	r2,-9(fp)
    usleep(20000); // Wait 20ms for stability
   80b94:	01138804 	movi	r4,20000
   80b98:	008c0680 	call	8c068 <usleep>
    unsigned char sw_state2 = IORD_ALTERA_AVALON_PIO_DATA(SWITCH0_BASE);
   80b9c:	00800434 	movhi	r2,16
   80ba0:	10846404 	addi	r2,r2,4496
   80ba4:	10800037 	ldwio	r2,0(r2)
   80ba8:	e0bffd85 	stb	r2,-10(fp)
    if (sw_state != sw_state2) {
   80bac:	e0fffdc3 	ldbu	r3,-9(fp)
   80bb0:	e0bffd83 	ldbu	r2,-10(fp)
   80bb4:	18800426 	beq	r3,r2,80bc8 <Switch_IRQ_Handler+0x84>
        alt_putstr("Switch unstable, ignoring interrupt\n");
   80bb8:	01000274 	movhi	r4,9
   80bbc:	213ab104 	addi	r4,r4,-5436
   80bc0:	008bd700 	call	8bd70 <alt_putstr>
        return; // Ignore if unstable
   80bc4:	00003b06 	br	80cb4 <Switch_IRQ_Handler+0x170>
    }

    unsigned char sw0 = sw_state & 0x01;
   80bc8:	e0bffdc3 	ldbu	r2,-9(fp)
   80bcc:	1080004c 	andi	r2,r2,1
   80bd0:	e0bffd45 	stb	r2,-11(fp)
    unsigned char sw1 = (sw_state >> 1) & 0x01;
   80bd4:	e0bffdc3 	ldbu	r2,-9(fp)
   80bd8:	1004d07a 	srli	r2,r2,1
   80bdc:	1080004c 	andi	r2,r2,1
   80be0:	e0bffd05 	stb	r2,-12(fp)

    // Debug: Print switch state and mode
    sprintf(lcd_buffer, "SW0=%d, SW1=%d, mode=%d\n", sw0, sw1, mode);
   80be4:	e1bffd43 	ldbu	r6,-11(fp)
   80be8:	e1fffd03 	ldbu	r7,-12(fp)
   80bec:	d0a6e817 	ldw	r2,-25696(gp)
   80bf0:	d8800015 	stw	r2,0(sp)
   80bf4:	01000274 	movhi	r4,9
   80bf8:	210a3e04 	addi	r4,r4,10488
   80bfc:	01400274 	movhi	r5,9
   80c00:	297abb04 	addi	r5,r5,-5396
   80c04:	00819340 	call	81934 <sprintf>
    alt_putstr(lcd_buffer);
   80c08:	01000274 	movhi	r4,9
   80c0c:	210a3e04 	addi	r4,r4,10488
   80c10:	008bd700 	call	8bd70 <alt_putstr>

    if (sw0 == 1 && sw1 == 0) {
   80c14:	e0bffd43 	ldbu	r2,-11(fp)
   80c18:	10800058 	cmpnei	r2,r2,1
   80c1c:	1000091e 	bne	r2,zero,80c44 <Switch_IRQ_Handler+0x100>
   80c20:	e0bffd03 	ldbu	r2,-12(fp)
   80c24:	1004c03a 	cmpne	r2,r2,zero
   80c28:	1000061e 	bne	r2,zero,80c44 <Switch_IRQ_Handler+0x100>
        mode = 1; // Edit time mode
   80c2c:	00800044 	movi	r2,1
   80c30:	d0a6e815 	stw	r2,-25696(gp)
        transmitString("Editing time mode\n");
   80c34:	01000274 	movhi	r4,9
   80c38:	213ac204 	addi	r4,r4,-5368
   80c3c:	00810d40 	call	810d4 <transmitString>

    // Debug: Print switch state and mode
    sprintf(lcd_buffer, "SW0=%d, SW1=%d, mode=%d\n", sw0, sw1, mode);
    alt_putstr(lcd_buffer);

    if (sw0 == 1 && sw1 == 0) {
   80c40:	00001006 	br	80c84 <Switch_IRQ_Handler+0x140>
        mode = 1; // Edit time mode
        transmitString("Editing time mode\n");
    } else if (sw1 == 1 && sw0 == 0) {
   80c44:	e0bffd03 	ldbu	r2,-12(fp)
   80c48:	10800058 	cmpnei	r2,r2,1
   80c4c:	1000091e 	bne	r2,zero,80c74 <Switch_IRQ_Handler+0x130>
   80c50:	e0bffd43 	ldbu	r2,-11(fp)
   80c54:	1004c03a 	cmpne	r2,r2,zero
   80c58:	1000061e 	bne	r2,zero,80c74 <Switch_IRQ_Handler+0x130>
        mode = 2; // Edit date mode
   80c5c:	00800084 	movi	r2,2
   80c60:	d0a6e815 	stw	r2,-25696(gp)
        transmitString("Editing date mode\n");
   80c64:	01000274 	movhi	r4,9
   80c68:	213ac704 	addi	r4,r4,-5348
   80c6c:	00810d40 	call	810d4 <transmitString>
    alt_putstr(lcd_buffer);

    if (sw0 == 1 && sw1 == 0) {
        mode = 1; // Edit time mode
        transmitString("Editing time mode\n");
    } else if (sw1 == 1 && sw0 == 0) {
   80c70:	00000406 	br	80c84 <Switch_IRQ_Handler+0x140>
        mode = 2; // Edit date mode
        transmitString("Editing date mode\n");
    } else {
        mode = 0; // Normal clock mode
   80c74:	d026e815 	stw	zero,-25696(gp)
        transmitString("Normal clock mode\n");
   80c78:	01000274 	movhi	r4,9
   80c7c:	213acc04 	addi	r4,r4,-5328
   80c80:	00810d40 	call	810d4 <transmitString>
    }

    // Temporarily disable switch interrupts to prevent re-triggering
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 0x00);
   80c84:	00800434 	movhi	r2,16
   80c88:	10846604 	addi	r2,r2,4504
   80c8c:	10000035 	stwio	zero,0(r2)
    usleep(50000); // Wait 50ms
   80c90:	0130d414 	movui	r4,50000
   80c94:	008c0680 	call	8c068 <usleep>
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0x00); // Clear again
   80c98:	00800434 	movhi	r2,16
   80c9c:	10846704 	addi	r2,r2,4508
   80ca0:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 0x03); // Re-enable interrupts
   80ca4:	00c00434 	movhi	r3,16
   80ca8:	18c46604 	addi	r3,r3,4504
   80cac:	008000c4 	movi	r2,3
   80cb0:	18800035 	stwio	r2,0(r3)
}
   80cb4:	e037883a 	mov	sp,fp
   80cb8:	dfc00117 	ldw	ra,4(sp)
   80cbc:	df000017 	ldw	fp,0(sp)
   80cc0:	dec00204 	addi	sp,sp,8
   80cc4:	f800283a 	ret

00080cc8 <Key_Handler>:
void Key_Handler(void) {
   80cc8:	defffb04 	addi	sp,sp,-20
   80ccc:	dfc00415 	stw	ra,16(sp)
   80cd0:	df000315 	stw	fp,12(sp)
   80cd4:	df000304 	addi	fp,sp,12
    static int key1_count = 0, key2_count = 0, key3_count = 0;
    static int key1_delay = 0, key2_delay = 0, key3_delay = 0;

    unsigned char key1_state = IORD_ALTERA_AVALON_PIO_DATA(KEY1_BASE);
   80cd8:	00800434 	movhi	r2,16
   80cdc:	10845804 	addi	r2,r2,4448
   80ce0:	10800037 	ldwio	r2,0(r2)
   80ce4:	e0bfff85 	stb	r2,-2(fp)
    unsigned char key2_state = IORD_ALTERA_AVALON_PIO_DATA(KEY2_BASE);
   80ce8:	00800434 	movhi	r2,16
   80cec:	10845c04 	addi	r2,r2,4464
   80cf0:	10800037 	ldwio	r2,0(r2)
   80cf4:	e0bfff45 	stb	r2,-3(fp)
    unsigned char key3_state = IORD_ALTERA_AVALON_PIO_DATA(KEY3_BASE);
   80cf8:	00800434 	movhi	r2,16
   80cfc:	10846004 	addi	r2,r2,4480
   80d00:	10800037 	ldwio	r2,0(r2)
   80d04:	e0bfff05 	stb	r2,-4(fp)

    int threshold = 30;
   80d08:	00800784 	movi	r2,30
   80d0c:	e0bffe15 	stw	r2,-8(fp)
    int repeat_rate = 10;
   80d10:	00800284 	movi	r2,10
   80d14:	e0bffd15 	stw	r2,-12(fp)

    if (mode == 1) {
   80d18:	d0a6e817 	ldw	r2,-25696(gp)
   80d1c:	10800058 	cmpnei	r2,r2,1
   80d20:	1000671e 	bne	r2,zero,80ec0 <Key_Handler+0x1f8>

        if (key1_state == 0) {
   80d24:	e0bfff83 	ldbu	r2,-2(fp)
   80d28:	1004c03a 	cmpne	r2,r2,zero
   80d2c:	10001d1e 	bne	r2,zero,80da4 <Key_Handler+0xdc>
            if (prev_key1_state == 1) {
   80d30:	d0a00017 	ldw	r2,-32768(gp)
   80d34:	10800058 	cmpnei	r2,r2,1
   80d38:	1000071e 	bne	r2,zero,80d58 <Key_Handler+0x90>
                hh = (hh + 1) % 24;
   80d3c:	d0a6e017 	ldw	r2,-25728(gp)
   80d40:	11000044 	addi	r4,r2,1
   80d44:	01400604 	movi	r5,24
   80d48:	008180c0 	call	8180c <__modsi3>
   80d4c:	d0a6e015 	stw	r2,-25728(gp)
                key1_count = 0;
   80d50:	d026f015 	stw	zero,-25664(gp)
   80d54:	00001506 	br	80dac <Key_Handler+0xe4>
            } else {
                key1_count++;
   80d58:	d0a6f017 	ldw	r2,-25664(gp)
   80d5c:	10800044 	addi	r2,r2,1
   80d60:	d0a6f015 	stw	r2,-25664(gp)
                if (key1_count > threshold) {
   80d64:	d0e6f017 	ldw	r3,-25664(gp)
   80d68:	e0bffe17 	ldw	r2,-8(fp)
   80d6c:	10c00f0e 	bge	r2,r3,80dac <Key_Handler+0xe4>
                    key1_delay++;
   80d70:	d0a6ed17 	ldw	r2,-25676(gp)
   80d74:	10800044 	addi	r2,r2,1
   80d78:	d0a6ed15 	stw	r2,-25676(gp)
                    if (key1_delay >= repeat_rate) {
   80d7c:	d0e6ed17 	ldw	r3,-25676(gp)
   80d80:	e0bffd17 	ldw	r2,-12(fp)
   80d84:	18800916 	blt	r3,r2,80dac <Key_Handler+0xe4>
                        hh = (hh + 1) % 24;
   80d88:	d0a6e017 	ldw	r2,-25728(gp)
   80d8c:	11000044 	addi	r4,r2,1
   80d90:	01400604 	movi	r5,24
   80d94:	008180c0 	call	8180c <__modsi3>
   80d98:	d0a6e015 	stw	r2,-25728(gp)
                        key1_delay = 0;
   80d9c:	d026ed15 	stw	zero,-25676(gp)
   80da0:	00000206 	br	80dac <Key_Handler+0xe4>
                    }
                }
            }
        } else {
            key1_count = 0;
   80da4:	d026f015 	stw	zero,-25664(gp)
            key1_delay = 0;
   80da8:	d026ed15 	stw	zero,-25676(gp)
        }

        // KEY2 - Minute
        if (key2_state == 0) {
   80dac:	e0bfff43 	ldbu	r2,-3(fp)
   80db0:	1004c03a 	cmpne	r2,r2,zero
   80db4:	10001d1e 	bne	r2,zero,80e2c <Key_Handler+0x164>
            if (prev_key2_state == 1) {
   80db8:	d0a00117 	ldw	r2,-32764(gp)
   80dbc:	10800058 	cmpnei	r2,r2,1
   80dc0:	1000071e 	bne	r2,zero,80de0 <Key_Handler+0x118>
                mm = (mm + 1) % 60;
   80dc4:	d0a6e117 	ldw	r2,-25724(gp)
   80dc8:	11000044 	addi	r4,r2,1
   80dcc:	01400f04 	movi	r5,60
   80dd0:	008180c0 	call	8180c <__modsi3>
   80dd4:	d0a6e115 	stw	r2,-25724(gp)
                key2_count = 0;
   80dd8:	d026ef15 	stw	zero,-25668(gp)
   80ddc:	00001506 	br	80e34 <Key_Handler+0x16c>
            } else {
                key2_count++;
   80de0:	d0a6ef17 	ldw	r2,-25668(gp)
   80de4:	10800044 	addi	r2,r2,1
   80de8:	d0a6ef15 	stw	r2,-25668(gp)
                if (key2_count > threshold) {
   80dec:	d0e6ef17 	ldw	r3,-25668(gp)
   80df0:	e0bffe17 	ldw	r2,-8(fp)
   80df4:	10c00f0e 	bge	r2,r3,80e34 <Key_Handler+0x16c>
                    key2_delay++;
   80df8:	d0a6ec17 	ldw	r2,-25680(gp)
   80dfc:	10800044 	addi	r2,r2,1
   80e00:	d0a6ec15 	stw	r2,-25680(gp)
                    if (key2_delay >= repeat_rate) {
   80e04:	d0e6ec17 	ldw	r3,-25680(gp)
   80e08:	e0bffd17 	ldw	r2,-12(fp)
   80e0c:	18800916 	blt	r3,r2,80e34 <Key_Handler+0x16c>
                        mm = (mm + 1) % 60;
   80e10:	d0a6e117 	ldw	r2,-25724(gp)
   80e14:	11000044 	addi	r4,r2,1
   80e18:	01400f04 	movi	r5,60
   80e1c:	008180c0 	call	8180c <__modsi3>
   80e20:	d0a6e115 	stw	r2,-25724(gp)
                        key2_delay = 0;
   80e24:	d026ec15 	stw	zero,-25680(gp)
   80e28:	00000206 	br	80e34 <Key_Handler+0x16c>
                    }
                }
            }
        } else {
            key2_count = 0;
   80e2c:	d026ef15 	stw	zero,-25668(gp)
            key2_delay = 0;
   80e30:	d026ec15 	stw	zero,-25680(gp)
        }

        // KEY3 - Second
        if (key3_state == 0) {
   80e34:	e0bfff03 	ldbu	r2,-4(fp)
   80e38:	1004c03a 	cmpne	r2,r2,zero
   80e3c:	10001d1e 	bne	r2,zero,80eb4 <Key_Handler+0x1ec>
            if (prev_key3_state == 1) {
   80e40:	d0a00217 	ldw	r2,-32760(gp)
   80e44:	10800058 	cmpnei	r2,r2,1
   80e48:	1000071e 	bne	r2,zero,80e68 <Key_Handler+0x1a0>
                ss = (ss + 1) % 60;
   80e4c:	d0a6e217 	ldw	r2,-25720(gp)
   80e50:	11000044 	addi	r4,r2,1
   80e54:	01400f04 	movi	r5,60
   80e58:	008180c0 	call	8180c <__modsi3>
   80e5c:	d0a6e215 	stw	r2,-25720(gp)
                key3_count = 0;
   80e60:	d026ee15 	stw	zero,-25672(gp)
   80e64:	00007f06 	br	81064 <Key_Handler+0x39c>
            } else {
                key3_count++;
   80e68:	d0a6ee17 	ldw	r2,-25672(gp)
   80e6c:	10800044 	addi	r2,r2,1
   80e70:	d0a6ee15 	stw	r2,-25672(gp)
                if (key3_count > threshold) {
   80e74:	d0e6ee17 	ldw	r3,-25672(gp)
   80e78:	e0bffe17 	ldw	r2,-8(fp)
   80e7c:	10c0790e 	bge	r2,r3,81064 <Key_Handler+0x39c>
                    key3_delay++;
   80e80:	d0a6eb17 	ldw	r2,-25684(gp)
   80e84:	10800044 	addi	r2,r2,1
   80e88:	d0a6eb15 	stw	r2,-25684(gp)
                    if (key3_delay >= repeat_rate) {
   80e8c:	d0e6eb17 	ldw	r3,-25684(gp)
   80e90:	e0bffd17 	ldw	r2,-12(fp)
   80e94:	18807316 	blt	r3,r2,81064 <Key_Handler+0x39c>
                        ss = (ss + 1) % 60;
   80e98:	d0a6e217 	ldw	r2,-25720(gp)
   80e9c:	11000044 	addi	r4,r2,1
   80ea0:	01400f04 	movi	r5,60
   80ea4:	008180c0 	call	8180c <__modsi3>
   80ea8:	d0a6e215 	stw	r2,-25720(gp)
                        key3_delay = 0;
   80eac:	d026eb15 	stw	zero,-25684(gp)
   80eb0:	00006c06 	br	81064 <Key_Handler+0x39c>
                    }
                }
            }
        } else {
            key3_count = 0;
   80eb4:	d026ee15 	stw	zero,-25672(gp)
            key3_delay = 0;
   80eb8:	d026eb15 	stw	zero,-25684(gp)
   80ebc:	00006906 	br	81064 <Key_Handler+0x39c>
        }

    } else if (mode == 2) { // Edit date
   80ec0:	d0a6e817 	ldw	r2,-25696(gp)
   80ec4:	10800098 	cmpnei	r2,r2,2
   80ec8:	1000661e 	bne	r2,zero,81064 <Key_Handler+0x39c>
        // KEY1 - Day
        if (key1_state == 0) {
   80ecc:	e0bfff83 	ldbu	r2,-2(fp)
   80ed0:	1004c03a 	cmpne	r2,r2,zero
   80ed4:	10001d1e 	bne	r2,zero,80f4c <Key_Handler+0x284>
            if (prev_key1_state == 1) {
   80ed8:	d0a00017 	ldw	r2,-32768(gp)
   80edc:	10800058 	cmpnei	r2,r2,1
   80ee0:	1000071e 	bne	r2,zero,80f00 <Key_Handler+0x238>
                dd = (dd % 31) + 1;
   80ee4:	d126e317 	ldw	r4,-25716(gp)
   80ee8:	014007c4 	movi	r5,31
   80eec:	008180c0 	call	8180c <__modsi3>
   80ef0:	10800044 	addi	r2,r2,1
   80ef4:	d0a6e315 	stw	r2,-25716(gp)
                key1_count = 0;
   80ef8:	d026f015 	stw	zero,-25664(gp)
   80efc:	00001506 	br	80f54 <Key_Handler+0x28c>
            } else {
                key1_count++;
   80f00:	d0a6f017 	ldw	r2,-25664(gp)
   80f04:	10800044 	addi	r2,r2,1
   80f08:	d0a6f015 	stw	r2,-25664(gp)
                if (key1_count > threshold) {
   80f0c:	d0e6f017 	ldw	r3,-25664(gp)
   80f10:	e0bffe17 	ldw	r2,-8(fp)
   80f14:	10c00f0e 	bge	r2,r3,80f54 <Key_Handler+0x28c>
                    key1_delay++;
   80f18:	d0a6ed17 	ldw	r2,-25676(gp)
   80f1c:	10800044 	addi	r2,r2,1
   80f20:	d0a6ed15 	stw	r2,-25676(gp)
                    if (key1_delay >= repeat_rate) {
   80f24:	d0e6ed17 	ldw	r3,-25676(gp)
   80f28:	e0bffd17 	ldw	r2,-12(fp)
   80f2c:	18800916 	blt	r3,r2,80f54 <Key_Handler+0x28c>
                        dd = (dd % 31) + 1;
   80f30:	d126e317 	ldw	r4,-25716(gp)
   80f34:	014007c4 	movi	r5,31
   80f38:	008180c0 	call	8180c <__modsi3>
   80f3c:	10800044 	addi	r2,r2,1
   80f40:	d0a6e315 	stw	r2,-25716(gp)
                        key1_delay = 0;
   80f44:	d026ed15 	stw	zero,-25676(gp)
   80f48:	00000206 	br	80f54 <Key_Handler+0x28c>
                    }
                }
            }
        } else {
            key1_count = 0;
   80f4c:	d026f015 	stw	zero,-25664(gp)
            key1_delay = 0;
   80f50:	d026ed15 	stw	zero,-25676(gp)
        }

        // KEY2 - Month
        if (key2_state == 0) {
   80f54:	e0bfff43 	ldbu	r2,-3(fp)
   80f58:	1004c03a 	cmpne	r2,r2,zero
   80f5c:	10001d1e 	bne	r2,zero,80fd4 <Key_Handler+0x30c>
            if (prev_key2_state == 1) {
   80f60:	d0a00117 	ldw	r2,-32764(gp)
   80f64:	10800058 	cmpnei	r2,r2,1
   80f68:	1000071e 	bne	r2,zero,80f88 <Key_Handler+0x2c0>
                month = (month % 12) + 1;
   80f6c:	d126e417 	ldw	r4,-25712(gp)
   80f70:	01400304 	movi	r5,12
   80f74:	008180c0 	call	8180c <__modsi3>
   80f78:	10800044 	addi	r2,r2,1
   80f7c:	d0a6e415 	stw	r2,-25712(gp)
                key2_count = 0;
   80f80:	d026ef15 	stw	zero,-25668(gp)
   80f84:	00001506 	br	80fdc <Key_Handler+0x314>
            } else {
                key2_count++;
   80f88:	d0a6ef17 	ldw	r2,-25668(gp)
   80f8c:	10800044 	addi	r2,r2,1
   80f90:	d0a6ef15 	stw	r2,-25668(gp)
                if (key2_count > threshold) {
   80f94:	d0e6ef17 	ldw	r3,-25668(gp)
   80f98:	e0bffe17 	ldw	r2,-8(fp)
   80f9c:	10c00f0e 	bge	r2,r3,80fdc <Key_Handler+0x314>
                    key2_delay++;
   80fa0:	d0a6ec17 	ldw	r2,-25680(gp)
   80fa4:	10800044 	addi	r2,r2,1
   80fa8:	d0a6ec15 	stw	r2,-25680(gp)
                    if (key2_delay >= repeat_rate) {
   80fac:	d0e6ec17 	ldw	r3,-25680(gp)
   80fb0:	e0bffd17 	ldw	r2,-12(fp)
   80fb4:	18800916 	blt	r3,r2,80fdc <Key_Handler+0x314>
                        month = (month % 12) + 1;
   80fb8:	d126e417 	ldw	r4,-25712(gp)
   80fbc:	01400304 	movi	r5,12
   80fc0:	008180c0 	call	8180c <__modsi3>
   80fc4:	10800044 	addi	r2,r2,1
   80fc8:	d0a6e415 	stw	r2,-25712(gp)
                        key2_delay = 0;
   80fcc:	d026ec15 	stw	zero,-25680(gp)
   80fd0:	00000206 	br	80fdc <Key_Handler+0x314>
                    }
                }
            }
        } else {
            key2_count = 0;
   80fd4:	d026ef15 	stw	zero,-25668(gp)
            key2_delay = 0;
   80fd8:	d026ec15 	stw	zero,-25680(gp)
        }

        // KEY3 - Year
        if (key3_state == 0) {
   80fdc:	e0bfff03 	ldbu	r2,-4(fp)
   80fe0:	1004c03a 	cmpne	r2,r2,zero
   80fe4:	10001d1e 	bne	r2,zero,8105c <Key_Handler+0x394>
            if (prev_key3_state == 1) {
   80fe8:	d0a00217 	ldw	r2,-32760(gp)
   80fec:	10800058 	cmpnei	r2,r2,1
   80ff0:	1000071e 	bne	r2,zero,81010 <Key_Handler+0x348>
                year = (year + 1) % 10000;
   80ff4:	d0a6e517 	ldw	r2,-25708(gp)
   80ff8:	11000044 	addi	r4,r2,1
   80ffc:	0149c404 	movi	r5,10000
   81000:	008180c0 	call	8180c <__modsi3>
   81004:	d0a6e515 	stw	r2,-25708(gp)
                key3_count = 0;
   81008:	d026ee15 	stw	zero,-25672(gp)
   8100c:	00001506 	br	81064 <Key_Handler+0x39c>
            } else {
                key3_count++;
   81010:	d0a6ee17 	ldw	r2,-25672(gp)
   81014:	10800044 	addi	r2,r2,1
   81018:	d0a6ee15 	stw	r2,-25672(gp)
                if (key3_count > threshold) {
   8101c:	d0e6ee17 	ldw	r3,-25672(gp)
   81020:	e0bffe17 	ldw	r2,-8(fp)
   81024:	10c00f0e 	bge	r2,r3,81064 <Key_Handler+0x39c>
                    key3_delay++;
   81028:	d0a6eb17 	ldw	r2,-25684(gp)
   8102c:	10800044 	addi	r2,r2,1
   81030:	d0a6eb15 	stw	r2,-25684(gp)
                    if (key3_delay >= repeat_rate) {
   81034:	d0e6eb17 	ldw	r3,-25684(gp)
   81038:	e0bffd17 	ldw	r2,-12(fp)
   8103c:	18800916 	blt	r3,r2,81064 <Key_Handler+0x39c>
                        year = (year + 1) % 10000;
   81040:	d0a6e517 	ldw	r2,-25708(gp)
   81044:	11000044 	addi	r4,r2,1
   81048:	0149c404 	movi	r5,10000
   8104c:	008180c0 	call	8180c <__modsi3>
   81050:	d0a6e515 	stw	r2,-25708(gp)
                        key3_delay = 0;
   81054:	d026eb15 	stw	zero,-25684(gp)
   81058:	00000206 	br	81064 <Key_Handler+0x39c>
                    }
                }
            }
        } else {
            key3_count = 0;
   8105c:	d026ee15 	stw	zero,-25672(gp)
            key3_delay = 0;
   81060:	d026eb15 	stw	zero,-25684(gp)
        }
    }

    prev_key1_state = key1_state;
   81064:	e0bfff83 	ldbu	r2,-2(fp)
   81068:	d0a00015 	stw	r2,-32768(gp)
    prev_key2_state = key2_state;
   8106c:	e0bfff43 	ldbu	r2,-3(fp)
   81070:	d0a00115 	stw	r2,-32764(gp)
    prev_key3_state = key3_state;
   81074:	e0bfff03 	ldbu	r2,-4(fp)
   81078:	d0a00215 	stw	r2,-32760(gp)
}
   8107c:	e037883a 	mov	sp,fp
   81080:	dfc00117 	ldw	ra,4(sp)
   81084:	df000017 	ldw	fp,0(sp)
   81088:	dec00204 	addi	sp,sp,8
   8108c:	f800283a 	ret

00081090 <Switch_Init>:

void Switch_Init(void) {
   81090:	deffff04 	addi	sp,sp,-4
   81094:	df000015 	stw	fp,0(sp)
   81098:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH0_BASE, 0x03); // Enable interrupts for SW0, SW1
   8109c:	00c00434 	movhi	r3,16
   810a0:	18c46604 	addi	r3,r3,4504
   810a4:	008000c4 	movi	r2,3
   810a8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH0_BASE, 0x00); // Clear initial edge capture
   810ac:	00800434 	movhi	r2,16
   810b0:	10846704 	addi	r2,r2,4508
   810b4:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SWITCH0_BASE, 0x00); // Set as input
   810b8:	00800434 	movhi	r2,16
   810bc:	10846504 	addi	r2,r2,4500
   810c0:	10000035 	stwio	zero,0(r2)
}
   810c4:	e037883a 	mov	sp,fp
   810c8:	df000017 	ldw	fp,0(sp)
   810cc:	dec00104 	addi	sp,sp,4
   810d0:	f800283a 	ret

000810d4 <transmitString>:




// ====================== UART Functions ===================================
void transmitString(char* mess) {
   810d4:	defffd04 	addi	sp,sp,-12
   810d8:	dfc00215 	stw	ra,8(sp)
   810dc:	df000115 	stw	fp,4(sp)
   810e0:	df000104 	addi	fp,sp,4
   810e4:	e13fff15 	stw	r4,-4(fp)
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
   810e8:	00800434 	movhi	r2,16
   810ec:	10841a04 	addi	r2,r2,4200
   810f0:	10800037 	ldwio	r2,0(r2)
   810f4:	1080100c 	andi	r2,r2,64
   810f8:	1005003a 	cmpeq	r2,r2,zero
   810fc:	103ffa1e 	bne	r2,zero,810e8 <transmitString+0x14>

    while (*mess) {
   81100:	00000d06 	br	81138 <transmitString+0x64>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, *mess);
   81104:	e0bfff17 	ldw	r2,-4(fp)
   81108:	10800003 	ldbu	r2,0(r2)
   8110c:	10c03fcc 	andi	r3,r2,255
   81110:	18c0201c 	xori	r3,r3,128
   81114:	18ffe004 	addi	r3,r3,-128
   81118:	00800434 	movhi	r2,16
   8111c:	10841904 	addi	r2,r2,4196
   81120:	10c00035 	stwio	r3,0(r2)
        mess++;
   81124:	e0bfff17 	ldw	r2,-4(fp)
   81128:	10800044 	addi	r2,r2,1
   8112c:	e0bfff15 	stw	r2,-4(fp)
        usleep(600);
   81130:	01009604 	movi	r4,600
   81134:	008c0680 	call	8c068 <usleep>

// ====================== UART Functions ===================================
void transmitString(char* mess) {
    while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));

    while (*mess) {
   81138:	e0bfff17 	ldw	r2,-4(fp)
   8113c:	10800003 	ldbu	r2,0(r2)
   81140:	10803fcc 	andi	r2,r2,255
   81144:	1080201c 	xori	r2,r2,128
   81148:	10bfe004 	addi	r2,r2,-128
   8114c:	1004c03a 	cmpne	r2,r2,zero
   81150:	103fec1e 	bne	r2,zero,81104 <transmitString+0x30>
        IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, *mess);
        mess++;
        usleep(600);
    }
}
   81154:	e037883a 	mov	sp,fp
   81158:	dfc00117 	ldw	ra,4(sp)
   8115c:	df000017 	ldw	fp,0(sp)
   81160:	dec00204 	addi	sp,sp,8
   81164:	f800283a 	ret

00081168 <receiveChar>:

char receiveChar() {
   81168:	defffd04 	addi	sp,sp,-12
   8116c:	df000215 	stw	fp,8(sp)
   81170:	df000204 	addi	fp,sp,8
    alt_u8 status;
    char buff;

    status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   81174:	00800434 	movhi	r2,16
   81178:	10841a04 	addi	r2,r2,4200
   8117c:	10800037 	ldwio	r2,0(r2)
   81180:	e0bffe45 	stb	r2,-7(fp)

    if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
   81184:	e0bffe43 	ldbu	r2,-7(fp)
   81188:	10803fcc 	andi	r2,r2,255
   8118c:	1080201c 	xori	r2,r2,128
   81190:	10bfe004 	addi	r2,r2,-128
   81194:	1004403a 	cmpge	r2,r2,zero
   81198:	10000a1e 	bne	r2,zero,811c4 <receiveChar+0x5c>
        buff = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   8119c:	00800434 	movhi	r2,16
   811a0:	10841804 	addi	r2,r2,4192
   811a4:	10800037 	ldwio	r2,0(r2)
   811a8:	e0bffe05 	stb	r2,-8(fp)
        IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
   811ac:	00800434 	movhi	r2,16
   811b0:	10841a04 	addi	r2,r2,4200
   811b4:	10000035 	stwio	zero,0(r2)
        return buff;
   811b8:	e0bffe07 	ldb	r2,-8(fp)
   811bc:	e0bfff15 	stw	r2,-4(fp)
   811c0:	00000106 	br	811c8 <receiveChar+0x60>
    }

    return '\0';
   811c4:	e03fff15 	stw	zero,-4(fp)
   811c8:	e0bfff17 	ldw	r2,-4(fp)
}
   811cc:	e037883a 	mov	sp,fp
   811d0:	df000017 	ldw	fp,0(sp)
   811d4:	dec00104 	addi	sp,sp,4
   811d8:	f800283a 	ret

000811dc <parse_data>:

void parse_data(char* str) {
   811dc:	deffe704 	addi	sp,sp,-100
   811e0:	dfc01815 	stw	ra,96(sp)
   811e4:	df001715 	stw	fp,92(sp)
   811e8:	df001704 	addi	fp,sp,92
   811ec:	e13fff15 	stw	r4,-4(fp)
    if (str[0] == '$' && str[15] == '%' && strlen(str) == 16) {
   811f0:	e0bfff17 	ldw	r2,-4(fp)
   811f4:	10800003 	ldbu	r2,0(r2)
   811f8:	10803fcc 	andi	r2,r2,255
   811fc:	1080201c 	xori	r2,r2,128
   81200:	10bfe004 	addi	r2,r2,-128
   81204:	10800918 	cmpnei	r2,r2,36
   81208:	1000a71e 	bne	r2,zero,814a8 <parse_data+0x2cc>
   8120c:	e0bfff17 	ldw	r2,-4(fp)
   81210:	108003c4 	addi	r2,r2,15
   81214:	10800003 	ldbu	r2,0(r2)
   81218:	10803fcc 	andi	r2,r2,255
   8121c:	1080201c 	xori	r2,r2,128
   81220:	10bfe004 	addi	r2,r2,-128
   81224:	10800958 	cmpnei	r2,r2,37
   81228:	10009f1e 	bne	r2,zero,814a8 <parse_data+0x2cc>
   8122c:	e13fff17 	ldw	r4,-4(fp)
   81230:	0081a080 	call	81a08 <strlen>
   81234:	10800418 	cmpnei	r2,r2,16
   81238:	10009b1e 	bne	r2,zero,814a8 <parse_data+0x2cc>
        char dd_str[3] = {str[1], str[2], '\0'};
   8123c:	e0bfff17 	ldw	r2,-4(fp)
   81240:	10800044 	addi	r2,r2,1
   81244:	10c00003 	ldbu	r3,0(r2)
   81248:	e0bfff17 	ldw	r2,-4(fp)
   8124c:	10800084 	addi	r2,r2,2
   81250:	10800003 	ldbu	r2,0(r2)
   81254:	e0ffed05 	stb	r3,-76(fp)
   81258:	e0bfed45 	stb	r2,-75(fp)
   8125c:	e03fed85 	stb	zero,-74(fp)
        char month_str[3] = {str[3], str[4], '\0'};
   81260:	e0bfff17 	ldw	r2,-4(fp)
   81264:	108000c4 	addi	r2,r2,3
   81268:	10c00003 	ldbu	r3,0(r2)
   8126c:	e0bfff17 	ldw	r2,-4(fp)
   81270:	10800104 	addi	r2,r2,4
   81274:	10800003 	ldbu	r2,0(r2)
   81278:	e0ffedc5 	stb	r3,-73(fp)
   8127c:	e0bfee05 	stb	r2,-72(fp)
   81280:	e03fee45 	stb	zero,-71(fp)
        char year_str[5] = {str[5], str[6], str[7], str[8], '\0'};
   81284:	e0bfff17 	ldw	r2,-4(fp)
   81288:	10800144 	addi	r2,r2,5
   8128c:	10c00003 	ldbu	r3,0(r2)
   81290:	e0bfff17 	ldw	r2,-4(fp)
   81294:	10800184 	addi	r2,r2,6
   81298:	11000003 	ldbu	r4,0(r2)
   8129c:	e0bfff17 	ldw	r2,-4(fp)
   812a0:	108001c4 	addi	r2,r2,7
   812a4:	11400003 	ldbu	r5,0(r2)
   812a8:	e0bfff17 	ldw	r2,-4(fp)
   812ac:	10800204 	addi	r2,r2,8
   812b0:	10800003 	ldbu	r2,0(r2)
   812b4:	e0ffee85 	stb	r3,-70(fp)
   812b8:	e13feec5 	stb	r4,-69(fp)
   812bc:	e17fef05 	stb	r5,-68(fp)
   812c0:	e0bfef45 	stb	r2,-67(fp)
   812c4:	e03fef85 	stb	zero,-66(fp)
        char hh_str[3] = {str[9], str[10], '\0'};
   812c8:	e0bfff17 	ldw	r2,-4(fp)
   812cc:	10800244 	addi	r2,r2,9
   812d0:	10c00003 	ldbu	r3,0(r2)
   812d4:	e0bfff17 	ldw	r2,-4(fp)
   812d8:	10800284 	addi	r2,r2,10
   812dc:	10800003 	ldbu	r2,0(r2)
   812e0:	e0ffefc5 	stb	r3,-65(fp)
   812e4:	e0bff005 	stb	r2,-64(fp)
   812e8:	e03ff045 	stb	zero,-63(fp)
        char mm_str[3] = {str[11], str[12], '\0'};
   812ec:	e0bfff17 	ldw	r2,-4(fp)
   812f0:	108002c4 	addi	r2,r2,11
   812f4:	10c00003 	ldbu	r3,0(r2)
   812f8:	e0bfff17 	ldw	r2,-4(fp)
   812fc:	10800304 	addi	r2,r2,12
   81300:	10800003 	ldbu	r2,0(r2)
   81304:	e0fff085 	stb	r3,-62(fp)
   81308:	e0bff0c5 	stb	r2,-61(fp)
   8130c:	e03ff105 	stb	zero,-60(fp)
        char ss_str[3] = {str[13], str[14], '\0'};
   81310:	e0bfff17 	ldw	r2,-4(fp)
   81314:	10800344 	addi	r2,r2,13
   81318:	10c00003 	ldbu	r3,0(r2)
   8131c:	e0bfff17 	ldw	r2,-4(fp)
   81320:	10800384 	addi	r2,r2,14
   81324:	10800003 	ldbu	r2,0(r2)
   81328:	e0fff145 	stb	r3,-59(fp)
   8132c:	e0bff185 	stb	r2,-58(fp)
   81330:	e03ff1c5 	stb	zero,-57(fp)

        dd = atoi(dd_str);
   81334:	e13fed04 	addi	r4,fp,-76
   81338:	00818880 	call	81888 <atoi>
   8133c:	d0a6e315 	stw	r2,-25716(gp)
        month = atoi(month_str);
   81340:	e13fedc4 	addi	r4,fp,-73
   81344:	00818880 	call	81888 <atoi>
   81348:	d0a6e415 	stw	r2,-25712(gp)
        year = atoi(year_str);
   8134c:	e13fee84 	addi	r4,fp,-70
   81350:	00818880 	call	81888 <atoi>
   81354:	d0a6e515 	stw	r2,-25708(gp)
        hh = atoi(hh_str);
   81358:	e13fefc4 	addi	r4,fp,-65
   8135c:	00818880 	call	81888 <atoi>
   81360:	d0a6e015 	stw	r2,-25728(gp)
        mm = atoi(mm_str);
   81364:	e13ff084 	addi	r4,fp,-62
   81368:	00818880 	call	81888 <atoi>
   8136c:	d0a6e115 	stw	r2,-25724(gp)
        ss = atoi(ss_str);
   81370:	e13ff144 	addi	r4,fp,-59
   81374:	00818880 	call	81888 <atoi>
   81378:	d0a6e215 	stw	r2,-25720(gp)

        sprintf(lcd_buffer, "dd=%d, month=%d, year=%d, hh=%d, mm=%d, ss=%d\n",
   8137c:	d1a6e317 	ldw	r6,-25716(gp)
   81380:	d1e6e417 	ldw	r7,-25712(gp)
   81384:	d0a6e517 	ldw	r2,-25708(gp)
   81388:	d0e6e017 	ldw	r3,-25728(gp)
   8138c:	d126e117 	ldw	r4,-25724(gp)
   81390:	d166e217 	ldw	r5,-25720(gp)
   81394:	d8800015 	stw	r2,0(sp)
   81398:	d8c00115 	stw	r3,4(sp)
   8139c:	d9000215 	stw	r4,8(sp)
   813a0:	d9400315 	stw	r5,12(sp)
   813a4:	01000274 	movhi	r4,9
   813a8:	210a3e04 	addi	r4,r4,10488
   813ac:	01400274 	movhi	r5,9
   813b0:	297ad104 	addi	r5,r5,-5308
   813b4:	00819340 	call	81934 <sprintf>
                dd, month, year, hh, mm, ss);
        alt_putstr(lcd_buffer);
   813b8:	01000274 	movhi	r4,9
   813bc:	210a3e04 	addi	r4,r4,10488
   813c0:	008bd700 	call	8bd70 <alt_putstr>

        if (dd >= 1 && dd <= 31 && month >= 1 && month <= 12 && year >= 0 &&
   813c4:	d0a6e317 	ldw	r2,-25716(gp)
   813c8:	10800050 	cmplti	r2,r2,1
   813cc:	1000321e 	bne	r2,zero,81498 <parse_data+0x2bc>
   813d0:	d0a6e317 	ldw	r2,-25716(gp)
   813d4:	10800808 	cmpgei	r2,r2,32
   813d8:	10002f1e 	bne	r2,zero,81498 <parse_data+0x2bc>
   813dc:	d0a6e417 	ldw	r2,-25712(gp)
   813e0:	10800050 	cmplti	r2,r2,1
   813e4:	10002c1e 	bne	r2,zero,81498 <parse_data+0x2bc>
   813e8:	d0a6e417 	ldw	r2,-25712(gp)
   813ec:	10800348 	cmpgei	r2,r2,13
   813f0:	1000291e 	bne	r2,zero,81498 <parse_data+0x2bc>
   813f4:	d0a6e517 	ldw	r2,-25708(gp)
   813f8:	1004803a 	cmplt	r2,r2,zero
   813fc:	1000261e 	bne	r2,zero,81498 <parse_data+0x2bc>
   81400:	d0a6e017 	ldw	r2,-25728(gp)
   81404:	1004803a 	cmplt	r2,r2,zero
   81408:	1000231e 	bne	r2,zero,81498 <parse_data+0x2bc>
   8140c:	d0a6e017 	ldw	r2,-25728(gp)
   81410:	10800608 	cmpgei	r2,r2,24
   81414:	1000201e 	bne	r2,zero,81498 <parse_data+0x2bc>
   81418:	d0a6e117 	ldw	r2,-25724(gp)
   8141c:	1004803a 	cmplt	r2,r2,zero
   81420:	10001d1e 	bne	r2,zero,81498 <parse_data+0x2bc>
   81424:	d0a6e117 	ldw	r2,-25724(gp)
   81428:	10800f08 	cmpgei	r2,r2,60
   8142c:	10001a1e 	bne	r2,zero,81498 <parse_data+0x2bc>
   81430:	d0a6e217 	ldw	r2,-25720(gp)
   81434:	1004803a 	cmplt	r2,r2,zero
   81438:	1000171e 	bne	r2,zero,81498 <parse_data+0x2bc>
   8143c:	d0a6e217 	ldw	r2,-25720(gp)
   81440:	10800f08 	cmpgei	r2,r2,60
   81444:	1000141e 	bne	r2,zero,81498 <parse_data+0x2bc>
            hh >= 0 && hh <= 23 && mm >= 0 && mm <= 59 && ss >= 0 && ss <= 59) {
            char confirm_msg[50];
            sprintf(confirm_msg, "Time updated: %02d/%02d/%04d %02d:%02d:%02d\n", dd, month, year, hh, mm, ss);
   81448:	d1e6e317 	ldw	r7,-25716(gp)
   8144c:	d226e417 	ldw	r8,-25712(gp)
   81450:	d0a6e517 	ldw	r2,-25708(gp)
   81454:	d0e6e017 	ldw	r3,-25728(gp)
   81458:	d126e117 	ldw	r4,-25724(gp)
   8145c:	d166e217 	ldw	r5,-25720(gp)
   81460:	e1bff204 	addi	r6,fp,-56
   81464:	d8800015 	stw	r2,0(sp)
   81468:	d8c00115 	stw	r3,4(sp)
   8146c:	d9000215 	stw	r4,8(sp)
   81470:	d9400315 	stw	r5,12(sp)
   81474:	3009883a 	mov	r4,r6
   81478:	01400274 	movhi	r5,9
   8147c:	297add04 	addi	r5,r5,-5260
   81480:	380d883a 	mov	r6,r7
   81484:	400f883a 	mov	r7,r8
   81488:	00819340 	call	81934 <sprintf>
            transmitString(confirm_msg);
   8148c:	e13ff204 	addi	r4,fp,-56
   81490:	00810d40 	call	810d4 <transmitString>

        sprintf(lcd_buffer, "dd=%d, month=%d, year=%d, hh=%d, mm=%d, ss=%d\n",
                dd, month, year, hh, mm, ss);
        alt_putstr(lcd_buffer);

        if (dd >= 1 && dd <= 31 && month >= 1 && month <= 12 && year >= 0 &&
   81494:	00000706 	br	814b4 <parse_data+0x2d8>
            hh >= 0 && hh <= 23 && mm >= 0 && mm <= 59 && ss >= 0 && ss <= 59) {
            char confirm_msg[50];
            sprintf(confirm_msg, "Time updated: %02d/%02d/%04d %02d:%02d:%02d\n", dd, month, year, hh, mm, ss);
            transmitString(confirm_msg);
        } else {
            transmitString("Invalid time data\n");
   81498:	01000274 	movhi	r4,9
   8149c:	213ae904 	addi	r4,r4,-5212
   814a0:	00810d40 	call	810d4 <transmitString>

    return '\0';
}

void parse_data(char* str) {
    if (str[0] == '$' && str[15] == '%' && strlen(str) == 16) {
   814a4:	00000306 	br	814b4 <parse_data+0x2d8>
            transmitString(confirm_msg);
        } else {
            transmitString("Invalid time data\n");
        }
    } else {
        transmitString("Invalid format\n");
   814a8:	01000274 	movhi	r4,9
   814ac:	213aee04 	addi	r4,r4,-5192
   814b0:	00810d40 	call	810d4 <transmitString>
    }
}
   814b4:	e037883a 	mov	sp,fp
   814b8:	dfc00117 	ldw	ra,4(sp)
   814bc:	df000017 	ldw	fp,0(sp)
   814c0:	dec00204 	addi	sp,sp,8
   814c4:	f800283a 	ret

000814c8 <UART_IRQ_Handler>:

void UART_IRQ_Handler(void* context) {
   814c8:	defffc04 	addi	sp,sp,-16
   814cc:	dfc00315 	stw	ra,12(sp)
   814d0:	df000215 	stw	fp,8(sp)
   814d4:	df000204 	addi	fp,sp,8
   814d8:	e13fff15 	stw	r4,-4(fp)
    unsigned char data = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   814dc:	00800434 	movhi	r2,16
   814e0:	10841804 	addi	r2,r2,4192
   814e4:	10800037 	ldwio	r2,0(r2)
   814e8:	e0bffe05 	stb	r2,-8(fp)

    if (data == 'A') {
   814ec:	e0bffe03 	ldbu	r2,-8(fp)
   814f0:	10801058 	cmpnei	r2,r2,65
   814f4:	1000031e 	bne	r2,zero,81504 <UART_IRQ_Handler+0x3c>
        // Blink LEDs and display ALARM on LCD
        //blink_leds();
        display_alarm_lcd();
   814f8:	00808180 	call	80818 <display_alarm_lcd>
        // Restore normal display
        display_on_lcd();
   814fc:	00804000 	call	80400 <display_on_lcd>
   81500:	00003006 	br	815c4 <UART_IRQ_Handler+0xfc>
    } else if (data == '$') {
   81504:	e0bffe03 	ldbu	r2,-8(fp)
   81508:	10800918 	cmpnei	r2,r2,36
   8150c:	10000a1e 	bne	r2,zero,81538 <UART_IRQ_Handler+0x70>
        uart_index = 0;
   81510:	d026e915 	stw	zero,-25692(gp)
        uart_buffer[uart_index++] = data;
   81514:	d0e6e917 	ldw	r3,-25692(gp)
   81518:	e13ffe03 	ldbu	r4,-8(fp)
   8151c:	00800274 	movhi	r2,9
   81520:	108a4604 	addi	r2,r2,10520
   81524:	10c5883a 	add	r2,r2,r3
   81528:	11000005 	stb	r4,0(r2)
   8152c:	18800044 	addi	r2,r3,1
   81530:	d0a6e915 	stw	r2,-25692(gp)
   81534:	00002306 	br	815c4 <UART_IRQ_Handler+0xfc>
    } else if (data == '%' && uart_index > 0) {
   81538:	e0bffe03 	ldbu	r2,-8(fp)
   8153c:	10800958 	cmpnei	r2,r2,37
   81540:	1000121e 	bne	r2,zero,8158c <UART_IRQ_Handler+0xc4>
   81544:	d0a6e917 	ldw	r2,-25692(gp)
   81548:	10800050 	cmplti	r2,r2,1
   8154c:	10000f1e 	bne	r2,zero,8158c <UART_IRQ_Handler+0xc4>
        uart_buffer[uart_index] = data;
   81550:	d0e6e917 	ldw	r3,-25692(gp)
   81554:	e13ffe03 	ldbu	r4,-8(fp)
   81558:	00800274 	movhi	r2,9
   8155c:	108a4604 	addi	r2,r2,10520
   81560:	10c5883a 	add	r2,r2,r3
   81564:	11000005 	stb	r4,0(r2)
        uart_buffer[uart_index + 1] = '\0';
   81568:	d0a6e917 	ldw	r2,-25692(gp)
   8156c:	10c00044 	addi	r3,r2,1
   81570:	00800274 	movhi	r2,9
   81574:	108a4604 	addi	r2,r2,10520
   81578:	10c5883a 	add	r2,r2,r3
   8157c:	10000005 	stb	zero,0(r2)
        data_ready = 1;
   81580:	00800044 	movi	r2,1
   81584:	d0a6ea15 	stw	r2,-25688(gp)
        // Restore normal display
        display_on_lcd();
    } else if (data == '$') {
        uart_index = 0;
        uart_buffer[uart_index++] = data;
    } else if (data == '%' && uart_index > 0) {
   81588:	00000e06 	br	815c4 <UART_IRQ_Handler+0xfc>
        uart_buffer[uart_index] = data;
        uart_buffer[uart_index + 1] = '\0';
        data_ready = 1;
    } else if (uart_index > 0 && uart_index < 20) {
   8158c:	d0a6e917 	ldw	r2,-25692(gp)
   81590:	10800050 	cmplti	r2,r2,1
   81594:	10000b1e 	bne	r2,zero,815c4 <UART_IRQ_Handler+0xfc>
   81598:	d0a6e917 	ldw	r2,-25692(gp)
   8159c:	10800508 	cmpgei	r2,r2,20
   815a0:	1000081e 	bne	r2,zero,815c4 <UART_IRQ_Handler+0xfc>
        uart_buffer[uart_index++] = data;
   815a4:	d0e6e917 	ldw	r3,-25692(gp)
   815a8:	e13ffe03 	ldbu	r4,-8(fp)
   815ac:	00800274 	movhi	r2,9
   815b0:	108a4604 	addi	r2,r2,10520
   815b4:	10c5883a 	add	r2,r2,r3
   815b8:	11000005 	stb	r4,0(r2)
   815bc:	18800044 	addi	r2,r3,1
   815c0:	d0a6e915 	stw	r2,-25692(gp)
    }

    IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
   815c4:	00800434 	movhi	r2,16
   815c8:	10841a04 	addi	r2,r2,4200
   815cc:	10000035 	stwio	zero,0(r2)
}
   815d0:	e037883a 	mov	sp,fp
   815d4:	dfc00117 	ldw	ra,4(sp)
   815d8:	df000017 	ldw	fp,0(sp)
   815dc:	dec00204 	addi	sp,sp,8
   815e0:	f800283a 	ret

000815e4 <UART_Init>:

void UART_Init(void) {
   815e4:	defffc04 	addi	sp,sp,-16
   815e8:	dfc00315 	stw	ra,12(sp)
   815ec:	df000215 	stw	fp,8(sp)
   815f0:	df000204 	addi	fp,sp,8
    unsigned int baud_rate = 9600;
   815f4:	00896004 	movi	r2,9600
   815f8:	e0bfff15 	stw	r2,-4(fp)
    unsigned int divisor = (ALT_CPU_FREQ / baud_rate) - 1;
   815fc:	0100bef4 	movhi	r4,763
   81600:	213c2004 	addi	r4,r4,-3968
   81604:	e17fff17 	ldw	r5,-4(fp)
   81608:	008186c0 	call	8186c <__udivsi3>
   8160c:	10bfffc4 	addi	r2,r2,-1
   81610:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
   81614:	e0fffe17 	ldw	r3,-8(fp)
   81618:	00800434 	movhi	r2,16
   8161c:	10841c04 	addi	r2,r2,4208
   81620:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   81624:	00c00434 	movhi	r3,16
   81628:	18c41b04 	addi	r3,r3,4204
   8162c:	00802004 	movi	r2,128
   81630:	18800035 	stwio	r2,0(r3)
}
   81634:	e037883a 	mov	sp,fp
   81638:	dfc00117 	ldw	ra,4(sp)
   8163c:	df000017 	ldw	fp,0(sp)
   81640:	dec00204 	addi	sp,sp,8
   81644:	f800283a 	ret

00081648 <main>:

// ============================ MAIN ========================================
int main() {
   81648:	defffd04 	addi	sp,sp,-12
   8164c:	dfc00215 	stw	ra,8(sp)
   81650:	df000115 	stw	fp,4(sp)
   81654:	df000104 	addi	fp,sp,4
    alt_putstr("DIGITAL CLOCK - GROUP 3 !!!\n");
   81658:	01000274 	movhi	r4,9
   8165c:	213af204 	addi	r4,r4,-5176
   81660:	008bd700 	call	8bd70 <alt_putstr>
    // Turn on LCD
    lcd_init();
   81664:	00803740 	call	80374 <lcd_init>
    IOWR(LCD_ON_BASE, 0, 0x01);
   81668:	00c00434 	movhi	r3,16
   8166c:	18c48804 	addi	r3,r3,4640
   81670:	00800044 	movi	r2,1
   81674:	18800035 	stwio	r2,0(r3)
    usleep(50000);
   81678:	0130d414 	movui	r4,50000
   8167c:	008c0680 	call	8c068 <usleep>

    // Setup timer
    Timer_Init();
   81680:	0080ad40 	call	80ad4 <Timer_Init>
    // Setup switch
    Switch_Init();
   81684:	00810900 	call	81090 <Switch_Init>
    // UART init
    UART_Init();
   81688:	00815e40 	call	815e4 <UART_Init>

    // Register IRQ functions
    alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, NULL, NULL);
   8168c:	d8000015 	stw	zero,0(sp)
   81690:	0009883a 	mov	r4,zero
   81694:	014000c4 	movi	r5,3
   81698:	01800234 	movhi	r6,8
   8169c:	31824804 	addi	r6,r6,2336
   816a0:	000f883a 	mov	r7,zero
   816a4:	008b6940 	call	8b694 <alt_ic_isr_register>
    alt_ic_isr_register(0, UART_0_IRQ, UART_IRQ_Handler, NULL, NULL);
   816a8:	d8000015 	stw	zero,0(sp)
   816ac:	0009883a 	mov	r4,zero
   816b0:	01400044 	movi	r5,1
   816b4:	01800234 	movhi	r6,8
   816b8:	31853204 	addi	r6,r6,5320
   816bc:	000f883a 	mov	r7,zero
   816c0:	008b6940 	call	8b694 <alt_ic_isr_register>
    alt_ic_isr_register(0, SWITCH0_IRQ, Switch_IRQ_Handler, NULL, NULL);
   816c4:	d8000015 	stw	zero,0(sp)
   816c8:	0009883a 	mov	r4,zero
   816cc:	01400084 	movi	r5,2
   816d0:	01800234 	movhi	r6,8
   816d4:	3182d104 	addi	r6,r6,2884
   816d8:	000f883a 	mov	r7,zero
   816dc:	008b6940 	call	8b694 <alt_ic_isr_register>

    // Send initial message
    transmitString("Ready to receive time data\n");
   816e0:	01000274 	movhi	r4,9
   816e4:	213afa04 	addi	r4,r4,-5144
   816e8:	00810d40 	call	810d4 <transmitString>
    // Test parse_data with test_string

    alt_putstr("Testing parse_data with test string:\n");
   816ec:	01000274 	movhi	r4,9
   816f0:	213b0104 	addi	r4,r4,-5116
   816f4:	008bd700 	call	8bd70 <alt_putstr>
    parse_data((char*)test_string);
   816f8:	01000274 	movhi	r4,9
   816fc:	213a9304 	addi	r4,r4,-5556
   81700:	00811dc0 	call	811dc <parse_data>
    while (1) {
        if (data_ready) {
   81704:	d0a6ea17 	ldw	r2,-25688(gp)
   81708:	1005003a 	cmpeq	r2,r2,zero
   8170c:	1000041e 	bne	r2,zero,81720 <main+0xd8>
            parse_data(uart_buffer);
   81710:	01000274 	movhi	r4,9
   81714:	210a4604 	addi	r4,r4,10520
   81718:	00811dc0 	call	811dc <parse_data>
            data_ready = 0;
   8171c:	d026ea15 	stw	zero,-25688(gp)
        }
        // Handle key inputs
        Key_Handler();
   81720:	0080cc80 	call	80cc8 <Key_Handler>
        // Update display
        display_on_lcd();
   81724:	00804000 	call	80400 <display_on_lcd>
        display_on_led();
   81728:	00804940 	call	80494 <display_on_led>
    }
   8172c:	003ff506 	br	81704 <main+0xbc>

00081730 <udivmodsi4>:
   81730:	29001b2e 	bgeu	r5,r4,817a0 <udivmodsi4+0x70>
   81734:	28001a16 	blt	r5,zero,817a0 <udivmodsi4+0x70>
   81738:	00800044 	movi	r2,1
   8173c:	0007883a 	mov	r3,zero
   81740:	01c007c4 	movi	r7,31
   81744:	00000306 	br	81754 <udivmodsi4+0x24>
   81748:	19c01326 	beq	r3,r7,81798 <udivmodsi4+0x68>
   8174c:	18c00044 	addi	r3,r3,1
   81750:	28000416 	blt	r5,zero,81764 <udivmodsi4+0x34>
   81754:	294b883a 	add	r5,r5,r5
   81758:	1085883a 	add	r2,r2,r2
   8175c:	293ffa36 	bltu	r5,r4,81748 <udivmodsi4+0x18>
   81760:	10000d26 	beq	r2,zero,81798 <udivmodsi4+0x68>
   81764:	0007883a 	mov	r3,zero
   81768:	21400236 	bltu	r4,r5,81774 <udivmodsi4+0x44>
   8176c:	2149c83a 	sub	r4,r4,r5
   81770:	1886b03a 	or	r3,r3,r2
   81774:	1004d07a 	srli	r2,r2,1
   81778:	280ad07a 	srli	r5,r5,1
   8177c:	103ffa1e 	bne	r2,zero,81768 <udivmodsi4+0x38>
   81780:	30000226 	beq	r6,zero,8178c <udivmodsi4+0x5c>
   81784:	2005883a 	mov	r2,r4
   81788:	f800283a 	ret
   8178c:	1809883a 	mov	r4,r3
   81790:	2005883a 	mov	r2,r4
   81794:	f800283a 	ret
   81798:	0007883a 	mov	r3,zero
   8179c:	003ff806 	br	81780 <udivmodsi4+0x50>
   817a0:	00800044 	movi	r2,1
   817a4:	0007883a 	mov	r3,zero
   817a8:	003fef06 	br	81768 <udivmodsi4+0x38>

000817ac <__divsi3>:
   817ac:	defffe04 	addi	sp,sp,-8
   817b0:	dc000015 	stw	r16,0(sp)
   817b4:	dfc00115 	stw	ra,4(sp)
   817b8:	0021883a 	mov	r16,zero
   817bc:	20000c16 	blt	r4,zero,817f0 <__divsi3+0x44>
   817c0:	000d883a 	mov	r6,zero
   817c4:	28000e16 	blt	r5,zero,81800 <__divsi3+0x54>
   817c8:	00817300 	call	81730 <udivmodsi4>
   817cc:	1007883a 	mov	r3,r2
   817d0:	8005003a 	cmpeq	r2,r16,zero
   817d4:	1000011e 	bne	r2,zero,817dc <__divsi3+0x30>
   817d8:	00c7c83a 	sub	r3,zero,r3
   817dc:	1805883a 	mov	r2,r3
   817e0:	dfc00117 	ldw	ra,4(sp)
   817e4:	dc000017 	ldw	r16,0(sp)
   817e8:	dec00204 	addi	sp,sp,8
   817ec:	f800283a 	ret
   817f0:	0109c83a 	sub	r4,zero,r4
   817f4:	04000044 	movi	r16,1
   817f8:	000d883a 	mov	r6,zero
   817fc:	283ff20e 	bge	r5,zero,817c8 <__divsi3+0x1c>
   81800:	014bc83a 	sub	r5,zero,r5
   81804:	8021003a 	cmpeq	r16,r16,zero
   81808:	003fef06 	br	817c8 <__divsi3+0x1c>

0008180c <__modsi3>:
   8180c:	deffff04 	addi	sp,sp,-4
   81810:	dfc00015 	stw	ra,0(sp)
   81814:	01800044 	movi	r6,1
   81818:	2807883a 	mov	r3,r5
   8181c:	20000416 	blt	r4,zero,81830 <__modsi3+0x24>
   81820:	28000c16 	blt	r5,zero,81854 <__modsi3+0x48>
   81824:	dfc00017 	ldw	ra,0(sp)
   81828:	dec00104 	addi	sp,sp,4
   8182c:	00817301 	jmpi	81730 <udivmodsi4>
   81830:	0109c83a 	sub	r4,zero,r4
   81834:	28000b16 	blt	r5,zero,81864 <__modsi3+0x58>
   81838:	180b883a 	mov	r5,r3
   8183c:	01800044 	movi	r6,1
   81840:	00817300 	call	81730 <udivmodsi4>
   81844:	0085c83a 	sub	r2,zero,r2
   81848:	dfc00017 	ldw	ra,0(sp)
   8184c:	dec00104 	addi	sp,sp,4
   81850:	f800283a 	ret
   81854:	014bc83a 	sub	r5,zero,r5
   81858:	dfc00017 	ldw	ra,0(sp)
   8185c:	dec00104 	addi	sp,sp,4
   81860:	00817301 	jmpi	81730 <udivmodsi4>
   81864:	0147c83a 	sub	r3,zero,r5
   81868:	003ff306 	br	81838 <__modsi3+0x2c>

0008186c <__udivsi3>:
   8186c:	000d883a 	mov	r6,zero
   81870:	00817301 	jmpi	81730 <udivmodsi4>

00081874 <__umodsi3>:
   81874:	01800044 	movi	r6,1
   81878:	00817301 	jmpi	81730 <udivmodsi4>

0008187c <_atoi_r>:
   8187c:	000d883a 	mov	r6,zero
   81880:	01c00284 	movi	r7,10
   81884:	0081a7c1 	jmpi	81a7c <_strtol_r>

00081888 <atoi>:
   81888:	000b883a 	mov	r5,zero
   8188c:	01800284 	movi	r6,10
   81890:	0081ccc1 	jmpi	81ccc <strtol>

00081894 <memcpy>:
   81894:	01c003c4 	movi	r7,15
   81898:	2007883a 	mov	r3,r4
   8189c:	3980032e 	bgeu	r7,r6,818ac <memcpy+0x18>
   818a0:	2904b03a 	or	r2,r5,r4
   818a4:	108000cc 	andi	r2,r2,3
   818a8:	10000926 	beq	r2,zero,818d0 <memcpy+0x3c>
   818ac:	30000626 	beq	r6,zero,818c8 <memcpy+0x34>
   818b0:	30cd883a 	add	r6,r6,r3
   818b4:	28800003 	ldbu	r2,0(r5)
   818b8:	29400044 	addi	r5,r5,1
   818bc:	18800005 	stb	r2,0(r3)
   818c0:	18c00044 	addi	r3,r3,1
   818c4:	30fffb1e 	bne	r6,r3,818b4 <memcpy+0x20>
   818c8:	2005883a 	mov	r2,r4
   818cc:	f800283a 	ret
   818d0:	3811883a 	mov	r8,r7
   818d4:	200f883a 	mov	r7,r4
   818d8:	28c00017 	ldw	r3,0(r5)
   818dc:	31bffc04 	addi	r6,r6,-16
   818e0:	38c00015 	stw	r3,0(r7)
   818e4:	28800117 	ldw	r2,4(r5)
   818e8:	38800115 	stw	r2,4(r7)
   818ec:	28c00217 	ldw	r3,8(r5)
   818f0:	38c00215 	stw	r3,8(r7)
   818f4:	28800317 	ldw	r2,12(r5)
   818f8:	29400404 	addi	r5,r5,16
   818fc:	38800315 	stw	r2,12(r7)
   81900:	39c00404 	addi	r7,r7,16
   81904:	41bff436 	bltu	r8,r6,818d8 <memcpy+0x44>
   81908:	008000c4 	movi	r2,3
   8190c:	1180072e 	bgeu	r2,r6,8192c <memcpy+0x98>
   81910:	1007883a 	mov	r3,r2
   81914:	28800017 	ldw	r2,0(r5)
   81918:	31bfff04 	addi	r6,r6,-4
   8191c:	29400104 	addi	r5,r5,4
   81920:	38800015 	stw	r2,0(r7)
   81924:	39c00104 	addi	r7,r7,4
   81928:	19bffa36 	bltu	r3,r6,81914 <memcpy+0x80>
   8192c:	3807883a 	mov	r3,r7
   81930:	003fde06 	br	818ac <memcpy+0x18>

00081934 <sprintf>:
   81934:	deffe504 	addi	sp,sp,-108
   81938:	2013883a 	mov	r9,r4
   8193c:	dfc01815 	stw	ra,96(sp)
   81940:	d9801915 	stw	r6,100(sp)
   81944:	d9c01a15 	stw	r7,104(sp)
   81948:	d8801904 	addi	r2,sp,100
   8194c:	d8800015 	stw	r2,0(sp)
   81950:	00800274 	movhi	r2,9
   81954:	10833a04 	addi	r2,r2,3304
   81958:	11000017 	ldw	r4,0(r2)
   8195c:	d9c00017 	ldw	r7,0(sp)
   81960:	00808204 	movi	r2,520
   81964:	00e00034 	movhi	r3,32768
   81968:	18ffffc4 	addi	r3,r3,-1
   8196c:	280d883a 	mov	r6,r5
   81970:	d880040d 	sth	r2,16(sp)
   81974:	d9400104 	addi	r5,sp,4
   81978:	00bfffc4 	movi	r2,-1
   8197c:	d8c00615 	stw	r3,24(sp)
   81980:	d8c00315 	stw	r3,12(sp)
   81984:	da400515 	stw	r9,20(sp)
   81988:	d880048d 	sth	r2,18(sp)
   8198c:	da400115 	stw	r9,4(sp)
   81990:	0081d480 	call	81d48 <___vfprintf_internal_r>
   81994:	d8c00117 	ldw	r3,4(sp)
   81998:	18000005 	stb	zero,0(r3)
   8199c:	dfc01817 	ldw	ra,96(sp)
   819a0:	dec01b04 	addi	sp,sp,108
   819a4:	f800283a 	ret

000819a8 <_sprintf_r>:
   819a8:	deffe604 	addi	sp,sp,-104
   819ac:	2813883a 	mov	r9,r5
   819b0:	dfc01815 	stw	ra,96(sp)
   819b4:	d9c01915 	stw	r7,100(sp)
   819b8:	d8801904 	addi	r2,sp,100
   819bc:	d8800015 	stw	r2,0(sp)
   819c0:	100f883a 	mov	r7,r2
   819c4:	00808204 	movi	r2,520
   819c8:	00e00034 	movhi	r3,32768
   819cc:	18ffffc4 	addi	r3,r3,-1
   819d0:	d880040d 	sth	r2,16(sp)
   819d4:	d9400104 	addi	r5,sp,4
   819d8:	00bfffc4 	movi	r2,-1
   819dc:	d8c00615 	stw	r3,24(sp)
   819e0:	d8c00315 	stw	r3,12(sp)
   819e4:	da400515 	stw	r9,20(sp)
   819e8:	d880048d 	sth	r2,18(sp)
   819ec:	da400115 	stw	r9,4(sp)
   819f0:	0081d480 	call	81d48 <___vfprintf_internal_r>
   819f4:	d8c00117 	ldw	r3,4(sp)
   819f8:	18000005 	stb	zero,0(r3)
   819fc:	dfc01817 	ldw	ra,96(sp)
   81a00:	dec01a04 	addi	sp,sp,104
   81a04:	f800283a 	ret

00081a08 <strlen>:
   81a08:	208000cc 	andi	r2,r4,3
   81a0c:	2011883a 	mov	r8,r4
   81a10:	1000161e 	bne	r2,zero,81a6c <strlen+0x64>
   81a14:	20c00017 	ldw	r3,0(r4)
   81a18:	017fbff4 	movhi	r5,65279
   81a1c:	297fbfc4 	addi	r5,r5,-257
   81a20:	01e02074 	movhi	r7,32897
   81a24:	39e02004 	addi	r7,r7,-32640
   81a28:	1945883a 	add	r2,r3,r5
   81a2c:	11c4703a 	and	r2,r2,r7
   81a30:	00c6303a 	nor	r3,zero,r3
   81a34:	1886703a 	and	r3,r3,r2
   81a38:	18000c1e 	bne	r3,zero,81a6c <strlen+0x64>
   81a3c:	280d883a 	mov	r6,r5
   81a40:	380b883a 	mov	r5,r7
   81a44:	21000104 	addi	r4,r4,4
   81a48:	20800017 	ldw	r2,0(r4)
   81a4c:	1187883a 	add	r3,r2,r6
   81a50:	1946703a 	and	r3,r3,r5
   81a54:	0084303a 	nor	r2,zero,r2
   81a58:	10c4703a 	and	r2,r2,r3
   81a5c:	103ff926 	beq	r2,zero,81a44 <strlen+0x3c>
   81a60:	20800007 	ldb	r2,0(r4)
   81a64:	10000326 	beq	r2,zero,81a74 <strlen+0x6c>
   81a68:	21000044 	addi	r4,r4,1
   81a6c:	20800007 	ldb	r2,0(r4)
   81a70:	103ffd1e 	bne	r2,zero,81a68 <strlen+0x60>
   81a74:	2205c83a 	sub	r2,r4,r8
   81a78:	f800283a 	ret

00081a7c <_strtol_r>:
   81a7c:	defff304 	addi	sp,sp,-52
   81a80:	00800274 	movhi	r2,9
   81a84:	10833904 	addi	r2,r2,3300
   81a88:	dd000715 	stw	r20,28(sp)
   81a8c:	15000017 	ldw	r20,0(r2)
   81a90:	ddc00a15 	stw	r23,40(sp)
   81a94:	dc800515 	stw	r18,20(sp)
   81a98:	dc400415 	stw	r17,16(sp)
   81a9c:	dfc00c15 	stw	ra,48(sp)
   81aa0:	df000b15 	stw	fp,44(sp)
   81aa4:	dd800915 	stw	r22,36(sp)
   81aa8:	dd400815 	stw	r21,32(sp)
   81aac:	dcc00615 	stw	r19,24(sp)
   81ab0:	dc000315 	stw	r16,12(sp)
   81ab4:	282f883a 	mov	r23,r5
   81ab8:	d9000115 	stw	r4,4(sp)
   81abc:	d9800215 	stw	r6,8(sp)
   81ac0:	3825883a 	mov	r18,r7
   81ac4:	2823883a 	mov	r17,r5
   81ac8:	8c000007 	ldb	r16,0(r17)
   81acc:	8c400044 	addi	r17,r17,1
   81ad0:	a407883a 	add	r3,r20,r16
   81ad4:	18800003 	ldbu	r2,0(r3)
   81ad8:	1080020c 	andi	r2,r2,8
   81adc:	103ffa1e 	bne	r2,zero,81ac8 <_strtol_r+0x4c>
   81ae0:	00800b44 	movi	r2,45
   81ae4:	80805c26 	beq	r16,r2,81c58 <_strtol_r+0x1dc>
   81ae8:	00800ac4 	movi	r2,43
   81aec:	80805726 	beq	r16,r2,81c4c <_strtol_r+0x1d0>
   81af0:	d8000015 	stw	zero,0(sp)
   81af4:	9007003a 	cmpeq	r3,r18,zero
   81af8:	1800431e 	bne	r3,zero,81c08 <_strtol_r+0x18c>
   81afc:	00800404 	movi	r2,16
   81b00:	90804126 	beq	r18,r2,81c08 <_strtol_r+0x18c>
   81b04:	902b883a 	mov	r21,r18
   81b08:	d8c00017 	ldw	r3,0(sp)
   81b0c:	1838c03a 	cmpne	fp,r3,zero
   81b10:	e0004a1e 	bne	fp,zero,81c3c <_strtol_r+0x1c0>
   81b14:	04e00034 	movhi	r19,32768
   81b18:	9cffffc4 	addi	r19,r19,-1
   81b1c:	9809883a 	mov	r4,r19
   81b20:	a80b883a 	mov	r5,r21
   81b24:	00818740 	call	81874 <__umodsi3>
   81b28:	9809883a 	mov	r4,r19
   81b2c:	a80b883a 	mov	r5,r21
   81b30:	102d883a 	mov	r22,r2
   81b34:	008186c0 	call	8186c <__udivsi3>
   81b38:	1027883a 	mov	r19,r2
   81b3c:	a405883a 	add	r2,r20,r16
   81b40:	11400003 	ldbu	r5,0(r2)
   81b44:	0009883a 	mov	r4,zero
   81b48:	000d883a 	mov	r6,zero
   81b4c:	28c0010c 	andi	r3,r5,4
   81b50:	18000f26 	beq	r3,zero,81b90 <_strtol_r+0x114>
   81b54:	843ff404 	addi	r16,r16,-48
   81b58:	8480150e 	bge	r16,r18,81bb0 <_strtol_r+0x134>
   81b5c:	30003216 	blt	r6,zero,81c28 <_strtol_r+0x1ac>
   81b60:	99003136 	bltu	r19,r4,81c28 <_strtol_r+0x1ac>
   81b64:	24c02f26 	beq	r4,r19,81c24 <_strtol_r+0x1a8>
   81b68:	a80b883a 	mov	r5,r21
   81b6c:	008ace00 	call	8ace0 <__mulsi3>
   81b70:	1409883a 	add	r4,r2,r16
   81b74:	01800044 	movi	r6,1
   81b78:	8c000007 	ldb	r16,0(r17)
   81b7c:	8c400044 	addi	r17,r17,1
   81b80:	a405883a 	add	r2,r20,r16
   81b84:	11400003 	ldbu	r5,0(r2)
   81b88:	28c0010c 	andi	r3,r5,4
   81b8c:	183ff11e 	bne	r3,zero,81b54 <_strtol_r+0xd8>
   81b90:	288000cc 	andi	r2,r5,3
   81b94:	10000626 	beq	r2,zero,81bb0 <_strtol_r+0x134>
   81b98:	2880004c 	andi	r2,r5,1
   81b9c:	1005003a 	cmpeq	r2,r2,zero
   81ba0:	1000231e 	bne	r2,zero,81c30 <_strtol_r+0x1b4>
   81ba4:	00800dc4 	movi	r2,55
   81ba8:	80a1c83a 	sub	r16,r16,r2
   81bac:	84bfeb16 	blt	r16,r18,81b5c <_strtol_r+0xe0>
   81bb0:	30002e16 	blt	r6,zero,81c6c <_strtol_r+0x1f0>
   81bb4:	e000231e 	bne	fp,zero,81c44 <_strtol_r+0x1c8>
   81bb8:	2007883a 	mov	r3,r4
   81bbc:	d8800217 	ldw	r2,8(sp)
   81bc0:	10000426 	beq	r2,zero,81bd4 <_strtol_r+0x158>
   81bc4:	30000126 	beq	r6,zero,81bcc <_strtol_r+0x150>
   81bc8:	8dffffc4 	addi	r23,r17,-1
   81bcc:	d9000217 	ldw	r4,8(sp)
   81bd0:	25c00015 	stw	r23,0(r4)
   81bd4:	1805883a 	mov	r2,r3
   81bd8:	dfc00c17 	ldw	ra,48(sp)
   81bdc:	df000b17 	ldw	fp,44(sp)
   81be0:	ddc00a17 	ldw	r23,40(sp)
   81be4:	dd800917 	ldw	r22,36(sp)
   81be8:	dd400817 	ldw	r21,32(sp)
   81bec:	dd000717 	ldw	r20,28(sp)
   81bf0:	dcc00617 	ldw	r19,24(sp)
   81bf4:	dc800517 	ldw	r18,20(sp)
   81bf8:	dc400417 	ldw	r17,16(sp)
   81bfc:	dc000317 	ldw	r16,12(sp)
   81c00:	dec00d04 	addi	sp,sp,52
   81c04:	f800283a 	ret
   81c08:	00800c04 	movi	r2,48
   81c0c:	80801f26 	beq	r16,r2,81c8c <_strtol_r+0x210>
   81c10:	183fbc26 	beq	r3,zero,81b04 <_strtol_r+0x88>
   81c14:	00800c04 	movi	r2,48
   81c18:	80802926 	beq	r16,r2,81cc0 <_strtol_r+0x244>
   81c1c:	04800284 	movi	r18,10
   81c20:	003fb806 	br	81b04 <_strtol_r+0x88>
   81c24:	b43fd00e 	bge	r22,r16,81b68 <_strtol_r+0xec>
   81c28:	01bfffc4 	movi	r6,-1
   81c2c:	003fd206 	br	81b78 <_strtol_r+0xfc>
   81c30:	008015c4 	movi	r2,87
   81c34:	80a1c83a 	sub	r16,r16,r2
   81c38:	003fdc06 	br	81bac <_strtol_r+0x130>
   81c3c:	04e00034 	movhi	r19,32768
   81c40:	003fb606 	br	81b1c <_strtol_r+0xa0>
   81c44:	0107c83a 	sub	r3,zero,r4
   81c48:	003fdc06 	br	81bbc <_strtol_r+0x140>
   81c4c:	8c000007 	ldb	r16,0(r17)
   81c50:	8c400044 	addi	r17,r17,1
   81c54:	003fa606 	br	81af0 <_strtol_r+0x74>
   81c58:	8c000007 	ldb	r16,0(r17)
   81c5c:	00800044 	movi	r2,1
   81c60:	8c400044 	addi	r17,r17,1
   81c64:	d8800015 	stw	r2,0(sp)
   81c68:	003fa206 	br	81af4 <_strtol_r+0x78>
   81c6c:	d9000017 	ldw	r4,0(sp)
   81c70:	2005003a 	cmpeq	r2,r4,zero
   81c74:	10000f1e 	bne	r2,zero,81cb4 <_strtol_r+0x238>
   81c78:	00e00034 	movhi	r3,32768
   81c7c:	d9000117 	ldw	r4,4(sp)
   81c80:	00800884 	movi	r2,34
   81c84:	20800015 	stw	r2,0(r4)
   81c88:	003fcc06 	br	81bbc <_strtol_r+0x140>
   81c8c:	89000007 	ldb	r4,0(r17)
   81c90:	00801e04 	movi	r2,120
   81c94:	20800226 	beq	r4,r2,81ca0 <_strtol_r+0x224>
   81c98:	00801604 	movi	r2,88
   81c9c:	20bfdc1e 	bne	r4,r2,81c10 <_strtol_r+0x194>
   81ca0:	8c000047 	ldb	r16,1(r17)
   81ca4:	04800404 	movi	r18,16
   81ca8:	8c400084 	addi	r17,r17,2
   81cac:	902b883a 	mov	r21,r18
   81cb0:	003f9506 	br	81b08 <_strtol_r+0x8c>
   81cb4:	00e00034 	movhi	r3,32768
   81cb8:	18ffffc4 	addi	r3,r3,-1
   81cbc:	003fef06 	br	81c7c <_strtol_r+0x200>
   81cc0:	04800204 	movi	r18,8
   81cc4:	902b883a 	mov	r21,r18
   81cc8:	003f8f06 	br	81b08 <_strtol_r+0x8c>

00081ccc <strtol>:
   81ccc:	00800274 	movhi	r2,9
   81cd0:	10833a04 	addi	r2,r2,3304
   81cd4:	2013883a 	mov	r9,r4
   81cd8:	11000017 	ldw	r4,0(r2)
   81cdc:	2805883a 	mov	r2,r5
   81ce0:	300f883a 	mov	r7,r6
   81ce4:	480b883a 	mov	r5,r9
   81ce8:	100d883a 	mov	r6,r2
   81cec:	0081a7c1 	jmpi	81a7c <_strtol_r>

00081cf0 <__sprint_r>:
   81cf0:	30800217 	ldw	r2,8(r6)
   81cf4:	defffe04 	addi	sp,sp,-8
   81cf8:	dc000015 	stw	r16,0(sp)
   81cfc:	dfc00115 	stw	ra,4(sp)
   81d00:	3021883a 	mov	r16,r6
   81d04:	0007883a 	mov	r3,zero
   81d08:	1000061e 	bne	r2,zero,81d24 <__sprint_r+0x34>
   81d0c:	1805883a 	mov	r2,r3
   81d10:	30000115 	stw	zero,4(r6)
   81d14:	dfc00117 	ldw	ra,4(sp)
   81d18:	dc000017 	ldw	r16,0(sp)
   81d1c:	dec00204 	addi	sp,sp,8
   81d20:	f800283a 	ret
   81d24:	0085ec80 	call	85ec8 <__sfvwrite_r>
   81d28:	1007883a 	mov	r3,r2
   81d2c:	1805883a 	mov	r2,r3
   81d30:	80000115 	stw	zero,4(r16)
   81d34:	80000215 	stw	zero,8(r16)
   81d38:	dfc00117 	ldw	ra,4(sp)
   81d3c:	dc000017 	ldw	r16,0(sp)
   81d40:	dec00204 	addi	sp,sp,8
   81d44:	f800283a 	ret

00081d48 <___vfprintf_internal_r>:
   81d48:	defea404 	addi	sp,sp,-1392
   81d4c:	dd815815 	stw	r22,1376(sp)
   81d50:	dc015215 	stw	r16,1352(sp)
   81d54:	d9c15115 	stw	r7,1348(sp)
   81d58:	dfc15b15 	stw	ra,1388(sp)
   81d5c:	df015a15 	stw	fp,1384(sp)
   81d60:	ddc15915 	stw	r23,1380(sp)
   81d64:	dd415715 	stw	r21,1372(sp)
   81d68:	dd015615 	stw	r20,1368(sp)
   81d6c:	dcc15515 	stw	r19,1364(sp)
   81d70:	dc815415 	stw	r18,1360(sp)
   81d74:	dc415315 	stw	r17,1356(sp)
   81d78:	282d883a 	mov	r22,r5
   81d7c:	3021883a 	mov	r16,r6
   81d80:	d9014f15 	stw	r4,1340(sp)
   81d84:	00864ec0 	call	864ec <_localeconv_r>
   81d88:	10800017 	ldw	r2,0(r2)
   81d8c:	d9c15117 	ldw	r7,1348(sp)
   81d90:	d8814915 	stw	r2,1316(sp)
   81d94:	d8814f17 	ldw	r2,1340(sp)
   81d98:	10000226 	beq	r2,zero,81da4 <___vfprintf_internal_r+0x5c>
   81d9c:	10800e17 	ldw	r2,56(r2)
   81da0:	10020d26 	beq	r2,zero,825d8 <___vfprintf_internal_r+0x890>
   81da4:	b080030b 	ldhu	r2,12(r22)
   81da8:	1080020c 	andi	r2,r2,8
   81dac:	10020e26 	beq	r2,zero,825e8 <___vfprintf_internal_r+0x8a0>
   81db0:	b0800417 	ldw	r2,16(r22)
   81db4:	10020c26 	beq	r2,zero,825e8 <___vfprintf_internal_r+0x8a0>
   81db8:	b200030b 	ldhu	r8,12(r22)
   81dbc:	00800284 	movi	r2,10
   81dc0:	40c0068c 	andi	r3,r8,26
   81dc4:	18802f1e 	bne	r3,r2,81e84 <___vfprintf_internal_r+0x13c>
   81dc8:	b080038f 	ldh	r2,14(r22)
   81dcc:	10002d16 	blt	r2,zero,81e84 <___vfprintf_internal_r+0x13c>
   81dd0:	b240038b 	ldhu	r9,14(r22)
   81dd4:	b2800717 	ldw	r10,28(r22)
   81dd8:	b2c00917 	ldw	r11,36(r22)
   81ddc:	d9014f17 	ldw	r4,1340(sp)
   81de0:	dc402904 	addi	r17,sp,164
   81de4:	d8804004 	addi	r2,sp,256
   81de8:	00c10004 	movi	r3,1024
   81dec:	423fff4c 	andi	r8,r8,65533
   81df0:	800d883a 	mov	r6,r16
   81df4:	880b883a 	mov	r5,r17
   81df8:	da002c0d 	sth	r8,176(sp)
   81dfc:	da402c8d 	sth	r9,178(sp)
   81e00:	da803015 	stw	r10,192(sp)
   81e04:	dac03215 	stw	r11,200(sp)
   81e08:	d8802d15 	stw	r2,180(sp)
   81e0c:	d8c02e15 	stw	r3,184(sp)
   81e10:	d8802915 	stw	r2,164(sp)
   81e14:	d8c02b15 	stw	r3,172(sp)
   81e18:	d8002f15 	stw	zero,188(sp)
   81e1c:	0081d480 	call	81d48 <___vfprintf_internal_r>
   81e20:	d8814b15 	stw	r2,1324(sp)
   81e24:	10000416 	blt	r2,zero,81e38 <___vfprintf_internal_r+0xf0>
   81e28:	d9014f17 	ldw	r4,1340(sp)
   81e2c:	880b883a 	mov	r5,r17
   81e30:	00855640 	call	85564 <_fflush_r>
   81e34:	1002321e 	bne	r2,zero,82700 <___vfprintf_internal_r+0x9b8>
   81e38:	d8802c0b 	ldhu	r2,176(sp)
   81e3c:	1080100c 	andi	r2,r2,64
   81e40:	10000326 	beq	r2,zero,81e50 <___vfprintf_internal_r+0x108>
   81e44:	b080030b 	ldhu	r2,12(r22)
   81e48:	10801014 	ori	r2,r2,64
   81e4c:	b080030d 	sth	r2,12(r22)
   81e50:	d8814b17 	ldw	r2,1324(sp)
   81e54:	dfc15b17 	ldw	ra,1388(sp)
   81e58:	df015a17 	ldw	fp,1384(sp)
   81e5c:	ddc15917 	ldw	r23,1380(sp)
   81e60:	dd815817 	ldw	r22,1376(sp)
   81e64:	dd415717 	ldw	r21,1372(sp)
   81e68:	dd015617 	ldw	r20,1368(sp)
   81e6c:	dcc15517 	ldw	r19,1364(sp)
   81e70:	dc815417 	ldw	r18,1360(sp)
   81e74:	dc415317 	ldw	r17,1356(sp)
   81e78:	dc015217 	ldw	r16,1352(sp)
   81e7c:	dec15c04 	addi	sp,sp,1392
   81e80:	f800283a 	ret
   81e84:	0005883a 	mov	r2,zero
   81e88:	0007883a 	mov	r3,zero
   81e8c:	dd401904 	addi	r21,sp,100
   81e90:	d8814215 	stw	r2,1288(sp)
   81e94:	802f883a 	mov	r23,r16
   81e98:	d8c14315 	stw	r3,1292(sp)
   81e9c:	d8014b15 	stw	zero,1324(sp)
   81ea0:	d8014815 	stw	zero,1312(sp)
   81ea4:	d8014415 	stw	zero,1296(sp)
   81ea8:	d8014715 	stw	zero,1308(sp)
   81eac:	dd400c15 	stw	r21,48(sp)
   81eb0:	d8000e15 	stw	zero,56(sp)
   81eb4:	d8000d15 	stw	zero,52(sp)
   81eb8:	b8800007 	ldb	r2,0(r23)
   81ebc:	10001926 	beq	r2,zero,81f24 <___vfprintf_internal_r+0x1dc>
   81ec0:	00c00944 	movi	r3,37
   81ec4:	10c01726 	beq	r2,r3,81f24 <___vfprintf_internal_r+0x1dc>
   81ec8:	b821883a 	mov	r16,r23
   81ecc:	00000106 	br	81ed4 <___vfprintf_internal_r+0x18c>
   81ed0:	10c00326 	beq	r2,r3,81ee0 <___vfprintf_internal_r+0x198>
   81ed4:	84000044 	addi	r16,r16,1
   81ed8:	80800007 	ldb	r2,0(r16)
   81edc:	103ffc1e 	bne	r2,zero,81ed0 <___vfprintf_internal_r+0x188>
   81ee0:	85e7c83a 	sub	r19,r16,r23
   81ee4:	98000e26 	beq	r19,zero,81f20 <___vfprintf_internal_r+0x1d8>
   81ee8:	dc800e17 	ldw	r18,56(sp)
   81eec:	dc400d17 	ldw	r17,52(sp)
   81ef0:	008001c4 	movi	r2,7
   81ef4:	94e5883a 	add	r18,r18,r19
   81ef8:	8c400044 	addi	r17,r17,1
   81efc:	adc00015 	stw	r23,0(r21)
   81f00:	dc800e15 	stw	r18,56(sp)
   81f04:	acc00115 	stw	r19,4(r21)
   81f08:	dc400d15 	stw	r17,52(sp)
   81f0c:	14428b16 	blt	r2,r17,8293c <___vfprintf_internal_r+0xbf4>
   81f10:	ad400204 	addi	r21,r21,8
   81f14:	d9014b17 	ldw	r4,1324(sp)
   81f18:	24c9883a 	add	r4,r4,r19
   81f1c:	d9014b15 	stw	r4,1324(sp)
   81f20:	802f883a 	mov	r23,r16
   81f24:	b8800007 	ldb	r2,0(r23)
   81f28:	10013c26 	beq	r2,zero,8241c <___vfprintf_internal_r+0x6d4>
   81f2c:	bdc00044 	addi	r23,r23,1
   81f30:	d8000405 	stb	zero,16(sp)
   81f34:	b8c00007 	ldb	r3,0(r23)
   81f38:	04ffffc4 	movi	r19,-1
   81f3c:	d8014c15 	stw	zero,1328(sp)
   81f40:	d8014a15 	stw	zero,1320(sp)
   81f44:	d8c14d15 	stw	r3,1332(sp)
   81f48:	bdc00044 	addi	r23,r23,1
   81f4c:	d9414d17 	ldw	r5,1332(sp)
   81f50:	00801604 	movi	r2,88
   81f54:	28fff804 	addi	r3,r5,-32
   81f58:	10c06036 	bltu	r2,r3,820dc <___vfprintf_internal_r+0x394>
   81f5c:	18c5883a 	add	r2,r3,r3
   81f60:	1085883a 	add	r2,r2,r2
   81f64:	00c00234 	movhi	r3,8
   81f68:	18c7de04 	addi	r3,r3,8056
   81f6c:	10c5883a 	add	r2,r2,r3
   81f70:	11000017 	ldw	r4,0(r2)
   81f74:	2000683a 	jmp	r4
   81f78:	00082eec 	andhi	zero,zero,8379
   81f7c:	000820dc 	xori	zero,zero,8323
   81f80:	000820dc 	xori	zero,zero,8323
   81f84:	00082ed8 	cmpnei	zero,zero,8379
   81f88:	000820dc 	xori	zero,zero,8323
   81f8c:	000820dc 	xori	zero,zero,8323
   81f90:	000820dc 	xori	zero,zero,8323
   81f94:	000820dc 	xori	zero,zero,8323
   81f98:	000820dc 	xori	zero,zero,8323
   81f9c:	000820dc 	xori	zero,zero,8323
   81fa0:	00082cb8 	rdprs	zero,zero,8370
   81fa4:	00082ec8 	cmpgei	zero,zero,8379
   81fa8:	000820dc 	xori	zero,zero,8323
   81fac:	00082cd0 	cmplti	zero,zero,8371
   81fb0:	00082f70 	cmpltui	zero,zero,8381
   81fb4:	000820dc 	xori	zero,zero,8323
   81fb8:	00082f5c 	xori	zero,zero,8381
   81fbc:	00082f18 	cmpnei	zero,zero,8380
   81fc0:	00082f18 	cmpnei	zero,zero,8380
   81fc4:	00082f18 	cmpnei	zero,zero,8380
   81fc8:	00082f18 	cmpnei	zero,zero,8380
   81fcc:	00082f18 	cmpnei	zero,zero,8380
   81fd0:	00082f18 	cmpnei	zero,zero,8380
   81fd4:	00082f18 	cmpnei	zero,zero,8380
   81fd8:	00082f18 	cmpnei	zero,zero,8380
   81fdc:	00082f18 	cmpnei	zero,zero,8380
   81fe0:	000820dc 	xori	zero,zero,8323
   81fe4:	000820dc 	xori	zero,zero,8323
   81fe8:	000820dc 	xori	zero,zero,8323
   81fec:	000820dc 	xori	zero,zero,8323
   81ff0:	000820dc 	xori	zero,zero,8323
   81ff4:	000820dc 	xori	zero,zero,8323
   81ff8:	000820dc 	xori	zero,zero,8323
   81ffc:	000820dc 	xori	zero,zero,8323
   82000:	000820dc 	xori	zero,zero,8323
   82004:	000820dc 	xori	zero,zero,8323
   82008:	00082734 	movhi	zero,8348
   8200c:	00082da0 	cmpeqi	zero,zero,8374
   82010:	000820dc 	xori	zero,zero,8323
   82014:	00082da0 	cmpeqi	zero,zero,8374
   82018:	000820dc 	xori	zero,zero,8323
   8201c:	000820dc 	xori	zero,zero,8323
   82020:	000820dc 	xori	zero,zero,8323
   82024:	000820dc 	xori	zero,zero,8323
   82028:	00082f04 	movi	zero,8380
   8202c:	000820dc 	xori	zero,zero,8323
   82030:	000820dc 	xori	zero,zero,8323
   82034:	000827e8 	cmpgeui	zero,zero,8351
   82038:	000820dc 	xori	zero,zero,8323
   8203c:	000820dc 	xori	zero,zero,8323
   82040:	000820dc 	xori	zero,zero,8323
   82044:	000820dc 	xori	zero,zero,8323
   82048:	000820dc 	xori	zero,zero,8323
   8204c:	00082834 	movhi	zero,8352
   82050:	000820dc 	xori	zero,zero,8323
   82054:	000820dc 	xori	zero,zero,8323
   82058:	00082e54 	movui	zero,8377
   8205c:	000820dc 	xori	zero,zero,8323
   82060:	000820dc 	xori	zero,zero,8323
   82064:	000820dc 	xori	zero,zero,8323
   82068:	000820dc 	xori	zero,zero,8323
   8206c:	000820dc 	xori	zero,zero,8323
   82070:	000820dc 	xori	zero,zero,8323
   82074:	000820dc 	xori	zero,zero,8323
   82078:	000820dc 	xori	zero,zero,8323
   8207c:	000820dc 	xori	zero,zero,8323
   82080:	000820dc 	xori	zero,zero,8323
   82084:	00082e28 	cmpgeui	zero,zero,8376
   82088:	00082740 	call	8274 <__alt_mem_onchip_memory2_0-0x77d8c>
   8208c:	00082da0 	cmpeqi	zero,zero,8374
   82090:	00082da0 	cmpeqi	zero,zero,8374
   82094:	00082da0 	cmpeqi	zero,zero,8374
   82098:	00082d8c 	andi	zero,zero,8374
   8209c:	00082740 	call	8274 <__alt_mem_onchip_memory2_0-0x77d8c>
   820a0:	000820dc 	xori	zero,zero,8323
   820a4:	000820dc 	xori	zero,zero,8323
   820a8:	00082d14 	movui	zero,8372
   820ac:	000820dc 	xori	zero,zero,8323
   820b0:	00082ce4 	muli	zero,zero,8371
   820b4:	000827f4 	movhi	zero,8351
   820b8:	00082d44 	movi	zero,8373
   820bc:	00082d30 	cmpltui	zero,zero,8372
   820c0:	000820dc 	xori	zero,zero,8323
   820c4:	00082fd8 	cmpnei	zero,zero,8383
   820c8:	000820dc 	xori	zero,zero,8323
   820cc:	00082840 	call	8284 <__alt_mem_onchip_memory2_0-0x77d7c>
   820d0:	000820dc 	xori	zero,zero,8323
   820d4:	000820dc 	xori	zero,zero,8323
   820d8:	00082eb8 	rdprs	zero,zero,8378
   820dc:	d9014d17 	ldw	r4,1332(sp)
   820e0:	2000ce26 	beq	r4,zero,8241c <___vfprintf_internal_r+0x6d4>
   820e4:	01400044 	movi	r5,1
   820e8:	d9800f04 	addi	r6,sp,60
   820ec:	d9c14015 	stw	r7,1280(sp)
   820f0:	d9414515 	stw	r5,1300(sp)
   820f4:	d9814115 	stw	r6,1284(sp)
   820f8:	280f883a 	mov	r7,r5
   820fc:	d9000f05 	stb	r4,60(sp)
   82100:	d8000405 	stb	zero,16(sp)
   82104:	d8014615 	stw	zero,1304(sp)
   82108:	d8c14c17 	ldw	r3,1328(sp)
   8210c:	1880008c 	andi	r2,r3,2
   82110:	1005003a 	cmpeq	r2,r2,zero
   82114:	d8815015 	stw	r2,1344(sp)
   82118:	1000031e 	bne	r2,zero,82128 <___vfprintf_internal_r+0x3e0>
   8211c:	d9014517 	ldw	r4,1300(sp)
   82120:	21000084 	addi	r4,r4,2
   82124:	d9014515 	stw	r4,1300(sp)
   82128:	d9414c17 	ldw	r5,1328(sp)
   8212c:	2940210c 	andi	r5,r5,132
   82130:	d9414e15 	stw	r5,1336(sp)
   82134:	28002d1e 	bne	r5,zero,821ec <___vfprintf_internal_r+0x4a4>
   82138:	d9814a17 	ldw	r6,1320(sp)
   8213c:	d8814517 	ldw	r2,1300(sp)
   82140:	30a1c83a 	sub	r16,r6,r2
   82144:	0400290e 	bge	zero,r16,821ec <___vfprintf_internal_r+0x4a4>
   82148:	00800404 	movi	r2,16
   8214c:	14045e0e 	bge	r2,r16,832c8 <___vfprintf_internal_r+0x1580>
   82150:	dc800e17 	ldw	r18,56(sp)
   82154:	dc400d17 	ldw	r17,52(sp)
   82158:	1027883a 	mov	r19,r2
   8215c:	07000274 	movhi	fp,9
   82160:	e73b2684 	addi	fp,fp,-4966
   82164:	050001c4 	movi	r20,7
   82168:	00000306 	br	82178 <___vfprintf_internal_r+0x430>
   8216c:	843ffc04 	addi	r16,r16,-16
   82170:	ad400204 	addi	r21,r21,8
   82174:	9c00130e 	bge	r19,r16,821c4 <___vfprintf_internal_r+0x47c>
   82178:	94800404 	addi	r18,r18,16
   8217c:	8c400044 	addi	r17,r17,1
   82180:	af000015 	stw	fp,0(r21)
   82184:	acc00115 	stw	r19,4(r21)
   82188:	dc800e15 	stw	r18,56(sp)
   8218c:	dc400d15 	stw	r17,52(sp)
   82190:	a47ff60e 	bge	r20,r17,8216c <___vfprintf_internal_r+0x424>
   82194:	d9014f17 	ldw	r4,1340(sp)
   82198:	b00b883a 	mov	r5,r22
   8219c:	d9800c04 	addi	r6,sp,48
   821a0:	d9c15115 	stw	r7,1348(sp)
   821a4:	0081cf00 	call	81cf0 <__sprint_r>
   821a8:	d9c15117 	ldw	r7,1348(sp)
   821ac:	10009e1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   821b0:	843ffc04 	addi	r16,r16,-16
   821b4:	dc800e17 	ldw	r18,56(sp)
   821b8:	dc400d17 	ldw	r17,52(sp)
   821bc:	dd401904 	addi	r21,sp,100
   821c0:	9c3fed16 	blt	r19,r16,82178 <___vfprintf_internal_r+0x430>
   821c4:	9425883a 	add	r18,r18,r16
   821c8:	8c400044 	addi	r17,r17,1
   821cc:	008001c4 	movi	r2,7
   821d0:	af000015 	stw	fp,0(r21)
   821d4:	ac000115 	stw	r16,4(r21)
   821d8:	dc800e15 	stw	r18,56(sp)
   821dc:	dc400d15 	stw	r17,52(sp)
   821e0:	1441f516 	blt	r2,r17,829b8 <___vfprintf_internal_r+0xc70>
   821e4:	ad400204 	addi	r21,r21,8
   821e8:	00000206 	br	821f4 <___vfprintf_internal_r+0x4ac>
   821ec:	dc800e17 	ldw	r18,56(sp)
   821f0:	dc400d17 	ldw	r17,52(sp)
   821f4:	d8800407 	ldb	r2,16(sp)
   821f8:	10000b26 	beq	r2,zero,82228 <___vfprintf_internal_r+0x4e0>
   821fc:	00800044 	movi	r2,1
   82200:	94800044 	addi	r18,r18,1
   82204:	8c400044 	addi	r17,r17,1
   82208:	a8800115 	stw	r2,4(r21)
   8220c:	d8c00404 	addi	r3,sp,16
   82210:	008001c4 	movi	r2,7
   82214:	a8c00015 	stw	r3,0(r21)
   82218:	dc800e15 	stw	r18,56(sp)
   8221c:	dc400d15 	stw	r17,52(sp)
   82220:	1441da16 	blt	r2,r17,8298c <___vfprintf_internal_r+0xc44>
   82224:	ad400204 	addi	r21,r21,8
   82228:	d9015017 	ldw	r4,1344(sp)
   8222c:	20000b1e 	bne	r4,zero,8225c <___vfprintf_internal_r+0x514>
   82230:	d8800444 	addi	r2,sp,17
   82234:	94800084 	addi	r18,r18,2
   82238:	8c400044 	addi	r17,r17,1
   8223c:	a8800015 	stw	r2,0(r21)
   82240:	00c00084 	movi	r3,2
   82244:	008001c4 	movi	r2,7
   82248:	a8c00115 	stw	r3,4(r21)
   8224c:	dc800e15 	stw	r18,56(sp)
   82250:	dc400d15 	stw	r17,52(sp)
   82254:	1441c216 	blt	r2,r17,82960 <___vfprintf_internal_r+0xc18>
   82258:	ad400204 	addi	r21,r21,8
   8225c:	d9414e17 	ldw	r5,1336(sp)
   82260:	00802004 	movi	r2,128
   82264:	2880b126 	beq	r5,r2,8252c <___vfprintf_internal_r+0x7e4>
   82268:	d8c14617 	ldw	r3,1304(sp)
   8226c:	19e1c83a 	sub	r16,r3,r7
   82270:	0400260e 	bge	zero,r16,8230c <___vfprintf_internal_r+0x5c4>
   82274:	00800404 	movi	r2,16
   82278:	1403cf0e 	bge	r2,r16,831b8 <___vfprintf_internal_r+0x1470>
   8227c:	1027883a 	mov	r19,r2
   82280:	07000274 	movhi	fp,9
   82284:	e73b2284 	addi	fp,fp,-4982
   82288:	050001c4 	movi	r20,7
   8228c:	00000306 	br	8229c <___vfprintf_internal_r+0x554>
   82290:	843ffc04 	addi	r16,r16,-16
   82294:	ad400204 	addi	r21,r21,8
   82298:	9c00130e 	bge	r19,r16,822e8 <___vfprintf_internal_r+0x5a0>
   8229c:	94800404 	addi	r18,r18,16
   822a0:	8c400044 	addi	r17,r17,1
   822a4:	af000015 	stw	fp,0(r21)
   822a8:	acc00115 	stw	r19,4(r21)
   822ac:	dc800e15 	stw	r18,56(sp)
   822b0:	dc400d15 	stw	r17,52(sp)
   822b4:	a47ff60e 	bge	r20,r17,82290 <___vfprintf_internal_r+0x548>
   822b8:	d9014f17 	ldw	r4,1340(sp)
   822bc:	b00b883a 	mov	r5,r22
   822c0:	d9800c04 	addi	r6,sp,48
   822c4:	d9c15115 	stw	r7,1348(sp)
   822c8:	0081cf00 	call	81cf0 <__sprint_r>
   822cc:	d9c15117 	ldw	r7,1348(sp)
   822d0:	1000551e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   822d4:	843ffc04 	addi	r16,r16,-16
   822d8:	dc800e17 	ldw	r18,56(sp)
   822dc:	dc400d17 	ldw	r17,52(sp)
   822e0:	dd401904 	addi	r21,sp,100
   822e4:	9c3fed16 	blt	r19,r16,8229c <___vfprintf_internal_r+0x554>
   822e8:	9425883a 	add	r18,r18,r16
   822ec:	8c400044 	addi	r17,r17,1
   822f0:	008001c4 	movi	r2,7
   822f4:	af000015 	stw	fp,0(r21)
   822f8:	ac000115 	stw	r16,4(r21)
   822fc:	dc800e15 	stw	r18,56(sp)
   82300:	dc400d15 	stw	r17,52(sp)
   82304:	14418216 	blt	r2,r17,82910 <___vfprintf_internal_r+0xbc8>
   82308:	ad400204 	addi	r21,r21,8
   8230c:	d9014c17 	ldw	r4,1328(sp)
   82310:	2080400c 	andi	r2,r4,256
   82314:	10004a1e 	bne	r2,zero,82440 <___vfprintf_internal_r+0x6f8>
   82318:	d9414117 	ldw	r5,1284(sp)
   8231c:	91e5883a 	add	r18,r18,r7
   82320:	8c400044 	addi	r17,r17,1
   82324:	008001c4 	movi	r2,7
   82328:	a9400015 	stw	r5,0(r21)
   8232c:	a9c00115 	stw	r7,4(r21)
   82330:	dc800e15 	stw	r18,56(sp)
   82334:	dc400d15 	stw	r17,52(sp)
   82338:	14416716 	blt	r2,r17,828d8 <___vfprintf_internal_r+0xb90>
   8233c:	a8c00204 	addi	r3,r21,8
   82340:	d9814c17 	ldw	r6,1328(sp)
   82344:	3080010c 	andi	r2,r6,4
   82348:	10002826 	beq	r2,zero,823ec <___vfprintf_internal_r+0x6a4>
   8234c:	d8814a17 	ldw	r2,1320(sp)
   82350:	d9014517 	ldw	r4,1300(sp)
   82354:	1121c83a 	sub	r16,r2,r4
   82358:	0400240e 	bge	zero,r16,823ec <___vfprintf_internal_r+0x6a4>
   8235c:	00800404 	movi	r2,16
   82360:	1404550e 	bge	r2,r16,834b8 <___vfprintf_internal_r+0x1770>
   82364:	dc400d17 	ldw	r17,52(sp)
   82368:	1027883a 	mov	r19,r2
   8236c:	07000274 	movhi	fp,9
   82370:	e73b2684 	addi	fp,fp,-4966
   82374:	050001c4 	movi	r20,7
   82378:	00000306 	br	82388 <___vfprintf_internal_r+0x640>
   8237c:	843ffc04 	addi	r16,r16,-16
   82380:	18c00204 	addi	r3,r3,8
   82384:	9c00110e 	bge	r19,r16,823cc <___vfprintf_internal_r+0x684>
   82388:	94800404 	addi	r18,r18,16
   8238c:	8c400044 	addi	r17,r17,1
   82390:	1f000015 	stw	fp,0(r3)
   82394:	1cc00115 	stw	r19,4(r3)
   82398:	dc800e15 	stw	r18,56(sp)
   8239c:	dc400d15 	stw	r17,52(sp)
   823a0:	a47ff60e 	bge	r20,r17,8237c <___vfprintf_internal_r+0x634>
   823a4:	d9014f17 	ldw	r4,1340(sp)
   823a8:	b00b883a 	mov	r5,r22
   823ac:	d9800c04 	addi	r6,sp,48
   823b0:	0081cf00 	call	81cf0 <__sprint_r>
   823b4:	10001c1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   823b8:	843ffc04 	addi	r16,r16,-16
   823bc:	dc800e17 	ldw	r18,56(sp)
   823c0:	dc400d17 	ldw	r17,52(sp)
   823c4:	d8c01904 	addi	r3,sp,100
   823c8:	9c3fef16 	blt	r19,r16,82388 <___vfprintf_internal_r+0x640>
   823cc:	9425883a 	add	r18,r18,r16
   823d0:	8c400044 	addi	r17,r17,1
   823d4:	008001c4 	movi	r2,7
   823d8:	1f000015 	stw	fp,0(r3)
   823dc:	1c000115 	stw	r16,4(r3)
   823e0:	dc800e15 	stw	r18,56(sp)
   823e4:	dc400d15 	stw	r17,52(sp)
   823e8:	1440cb16 	blt	r2,r17,82718 <___vfprintf_internal_r+0x9d0>
   823ec:	d8814a17 	ldw	r2,1320(sp)
   823f0:	d9414517 	ldw	r5,1300(sp)
   823f4:	1140010e 	bge	r2,r5,823fc <___vfprintf_internal_r+0x6b4>
   823f8:	2805883a 	mov	r2,r5
   823fc:	d9814b17 	ldw	r6,1324(sp)
   82400:	308d883a 	add	r6,r6,r2
   82404:	d9814b15 	stw	r6,1324(sp)
   82408:	90013b1e 	bne	r18,zero,828f8 <___vfprintf_internal_r+0xbb0>
   8240c:	d9c14017 	ldw	r7,1280(sp)
   82410:	dd401904 	addi	r21,sp,100
   82414:	d8000d15 	stw	zero,52(sp)
   82418:	003ea706 	br	81eb8 <___vfprintf_internal_r+0x170>
   8241c:	d8800e17 	ldw	r2,56(sp)
   82420:	1005451e 	bne	r2,zero,83938 <___vfprintf_internal_r+0x1bf0>
   82424:	d8000d15 	stw	zero,52(sp)
   82428:	b080030b 	ldhu	r2,12(r22)
   8242c:	1080100c 	andi	r2,r2,64
   82430:	103e8726 	beq	r2,zero,81e50 <___vfprintf_internal_r+0x108>
   82434:	00bfffc4 	movi	r2,-1
   82438:	d8814b15 	stw	r2,1324(sp)
   8243c:	003e8406 	br	81e50 <___vfprintf_internal_r+0x108>
   82440:	d9814d17 	ldw	r6,1332(sp)
   82444:	00801944 	movi	r2,101
   82448:	11806e16 	blt	r2,r6,82604 <___vfprintf_internal_r+0x8bc>
   8244c:	d9414717 	ldw	r5,1308(sp)
   82450:	00c00044 	movi	r3,1
   82454:	1943490e 	bge	r3,r5,8317c <___vfprintf_internal_r+0x1434>
   82458:	d8814117 	ldw	r2,1284(sp)
   8245c:	94800044 	addi	r18,r18,1
   82460:	8c400044 	addi	r17,r17,1
   82464:	a8800015 	stw	r2,0(r21)
   82468:	008001c4 	movi	r2,7
   8246c:	a8c00115 	stw	r3,4(r21)
   82470:	dc800e15 	stw	r18,56(sp)
   82474:	dc400d15 	stw	r17,52(sp)
   82478:	1441ca16 	blt	r2,r17,82ba4 <___vfprintf_internal_r+0xe5c>
   8247c:	a8c00204 	addi	r3,r21,8
   82480:	d9014917 	ldw	r4,1316(sp)
   82484:	00800044 	movi	r2,1
   82488:	94800044 	addi	r18,r18,1
   8248c:	8c400044 	addi	r17,r17,1
   82490:	18800115 	stw	r2,4(r3)
   82494:	008001c4 	movi	r2,7
   82498:	19000015 	stw	r4,0(r3)
   8249c:	dc800e15 	stw	r18,56(sp)
   824a0:	dc400d15 	stw	r17,52(sp)
   824a4:	1441b616 	blt	r2,r17,82b80 <___vfprintf_internal_r+0xe38>
   824a8:	1cc00204 	addi	r19,r3,8
   824ac:	d9014217 	ldw	r4,1288(sp)
   824b0:	d9414317 	ldw	r5,1292(sp)
   824b4:	000d883a 	mov	r6,zero
   824b8:	000f883a 	mov	r7,zero
   824bc:	008a75c0 	call	8a75c <__nedf2>
   824c0:	10017426 	beq	r2,zero,82a94 <___vfprintf_internal_r+0xd4c>
   824c4:	d9414717 	ldw	r5,1308(sp)
   824c8:	d9814117 	ldw	r6,1284(sp)
   824cc:	8c400044 	addi	r17,r17,1
   824d0:	2c85883a 	add	r2,r5,r18
   824d4:	14bfffc4 	addi	r18,r2,-1
   824d8:	28bfffc4 	addi	r2,r5,-1
   824dc:	30c00044 	addi	r3,r6,1
   824e0:	98800115 	stw	r2,4(r19)
   824e4:	008001c4 	movi	r2,7
   824e8:	98c00015 	stw	r3,0(r19)
   824ec:	dc800e15 	stw	r18,56(sp)
   824f0:	dc400d15 	stw	r17,52(sp)
   824f4:	14418e16 	blt	r2,r17,82b30 <___vfprintf_internal_r+0xde8>
   824f8:	9cc00204 	addi	r19,r19,8
   824fc:	d9414817 	ldw	r5,1312(sp)
   82500:	d8800804 	addi	r2,sp,32
   82504:	8c400044 	addi	r17,r17,1
   82508:	9165883a 	add	r18,r18,r5
   8250c:	98800015 	stw	r2,0(r19)
   82510:	008001c4 	movi	r2,7
   82514:	99400115 	stw	r5,4(r19)
   82518:	dc800e15 	stw	r18,56(sp)
   8251c:	dc400d15 	stw	r17,52(sp)
   82520:	1440ed16 	blt	r2,r17,828d8 <___vfprintf_internal_r+0xb90>
   82524:	98c00204 	addi	r3,r19,8
   82528:	003f8506 	br	82340 <___vfprintf_internal_r+0x5f8>
   8252c:	d9814a17 	ldw	r6,1320(sp)
   82530:	d8814517 	ldw	r2,1300(sp)
   82534:	30a1c83a 	sub	r16,r6,r2
   82538:	043f4b0e 	bge	zero,r16,82268 <___vfprintf_internal_r+0x520>
   8253c:	00800404 	movi	r2,16
   82540:	14043a0e 	bge	r2,r16,8362c <___vfprintf_internal_r+0x18e4>
   82544:	1027883a 	mov	r19,r2
   82548:	07000274 	movhi	fp,9
   8254c:	e73b2284 	addi	fp,fp,-4982
   82550:	050001c4 	movi	r20,7
   82554:	00000306 	br	82564 <___vfprintf_internal_r+0x81c>
   82558:	843ffc04 	addi	r16,r16,-16
   8255c:	ad400204 	addi	r21,r21,8
   82560:	9c00130e 	bge	r19,r16,825b0 <___vfprintf_internal_r+0x868>
   82564:	94800404 	addi	r18,r18,16
   82568:	8c400044 	addi	r17,r17,1
   8256c:	af000015 	stw	fp,0(r21)
   82570:	acc00115 	stw	r19,4(r21)
   82574:	dc800e15 	stw	r18,56(sp)
   82578:	dc400d15 	stw	r17,52(sp)
   8257c:	a47ff60e 	bge	r20,r17,82558 <___vfprintf_internal_r+0x810>
   82580:	d9014f17 	ldw	r4,1340(sp)
   82584:	b00b883a 	mov	r5,r22
   82588:	d9800c04 	addi	r6,sp,48
   8258c:	d9c15115 	stw	r7,1348(sp)
   82590:	0081cf00 	call	81cf0 <__sprint_r>
   82594:	d9c15117 	ldw	r7,1348(sp)
   82598:	103fa31e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8259c:	843ffc04 	addi	r16,r16,-16
   825a0:	dc800e17 	ldw	r18,56(sp)
   825a4:	dc400d17 	ldw	r17,52(sp)
   825a8:	dd401904 	addi	r21,sp,100
   825ac:	9c3fed16 	blt	r19,r16,82564 <___vfprintf_internal_r+0x81c>
   825b0:	9425883a 	add	r18,r18,r16
   825b4:	8c400044 	addi	r17,r17,1
   825b8:	008001c4 	movi	r2,7
   825bc:	af000015 	stw	fp,0(r21)
   825c0:	ac000115 	stw	r16,4(r21)
   825c4:	dc800e15 	stw	r18,56(sp)
   825c8:	dc400d15 	stw	r17,52(sp)
   825cc:	14416116 	blt	r2,r17,82b54 <___vfprintf_internal_r+0xe0c>
   825d0:	ad400204 	addi	r21,r21,8
   825d4:	003f2406 	br	82268 <___vfprintf_internal_r+0x520>
   825d8:	d9014f17 	ldw	r4,1340(sp)
   825dc:	00857fc0 	call	857fc <__sinit>
   825e0:	d9c15117 	ldw	r7,1348(sp)
   825e4:	003def06 	br	81da4 <___vfprintf_internal_r+0x5c>
   825e8:	d9014f17 	ldw	r4,1340(sp)
   825ec:	b00b883a 	mov	r5,r22
   825f0:	d9c15115 	stw	r7,1348(sp)
   825f4:	0083c300 	call	83c30 <__swsetup_r>
   825f8:	d9c15117 	ldw	r7,1348(sp)
   825fc:	103dee26 	beq	r2,zero,81db8 <___vfprintf_internal_r+0x70>
   82600:	003f8c06 	br	82434 <___vfprintf_internal_r+0x6ec>
   82604:	d9014217 	ldw	r4,1288(sp)
   82608:	d9414317 	ldw	r5,1292(sp)
   8260c:	000d883a 	mov	r6,zero
   82610:	000f883a 	mov	r7,zero
   82614:	008a6d40 	call	8a6d4 <__eqdf2>
   82618:	1000f21e 	bne	r2,zero,829e4 <___vfprintf_internal_r+0xc9c>
   8261c:	00800274 	movhi	r2,9
   82620:	10bb2204 	addi	r2,r2,-4984
   82624:	94800044 	addi	r18,r18,1
   82628:	8c400044 	addi	r17,r17,1
   8262c:	a8800015 	stw	r2,0(r21)
   82630:	00c00044 	movi	r3,1
   82634:	008001c4 	movi	r2,7
   82638:	a8c00115 	stw	r3,4(r21)
   8263c:	dc800e15 	stw	r18,56(sp)
   82640:	dc400d15 	stw	r17,52(sp)
   82644:	14430016 	blt	r2,r17,83248 <___vfprintf_internal_r+0x1500>
   82648:	a8c00204 	addi	r3,r21,8
   8264c:	d8800517 	ldw	r2,20(sp)
   82650:	d9014717 	ldw	r4,1308(sp)
   82654:	11015c0e 	bge	r2,r4,82bc8 <___vfprintf_internal_r+0xe80>
   82658:	dc400d17 	ldw	r17,52(sp)
   8265c:	d9814917 	ldw	r6,1316(sp)
   82660:	00800044 	movi	r2,1
   82664:	94800044 	addi	r18,r18,1
   82668:	8c400044 	addi	r17,r17,1
   8266c:	18800115 	stw	r2,4(r3)
   82670:	008001c4 	movi	r2,7
   82674:	19800015 	stw	r6,0(r3)
   82678:	dc800e15 	stw	r18,56(sp)
   8267c:	dc400d15 	stw	r17,52(sp)
   82680:	14431616 	blt	r2,r17,832dc <___vfprintf_internal_r+0x1594>
   82684:	18c00204 	addi	r3,r3,8
   82688:	d8814717 	ldw	r2,1308(sp)
   8268c:	143fffc4 	addi	r16,r2,-1
   82690:	043f2b0e 	bge	zero,r16,82340 <___vfprintf_internal_r+0x5f8>
   82694:	00800404 	movi	r2,16
   82698:	1402a80e 	bge	r2,r16,8313c <___vfprintf_internal_r+0x13f4>
   8269c:	dc400d17 	ldw	r17,52(sp)
   826a0:	1027883a 	mov	r19,r2
   826a4:	07000274 	movhi	fp,9
   826a8:	e73b2284 	addi	fp,fp,-4982
   826ac:	050001c4 	movi	r20,7
   826b0:	00000306 	br	826c0 <___vfprintf_internal_r+0x978>
   826b4:	18c00204 	addi	r3,r3,8
   826b8:	843ffc04 	addi	r16,r16,-16
   826bc:	9c02a20e 	bge	r19,r16,83148 <___vfprintf_internal_r+0x1400>
   826c0:	94800404 	addi	r18,r18,16
   826c4:	8c400044 	addi	r17,r17,1
   826c8:	1f000015 	stw	fp,0(r3)
   826cc:	1cc00115 	stw	r19,4(r3)
   826d0:	dc800e15 	stw	r18,56(sp)
   826d4:	dc400d15 	stw	r17,52(sp)
   826d8:	a47ff60e 	bge	r20,r17,826b4 <___vfprintf_internal_r+0x96c>
   826dc:	d9014f17 	ldw	r4,1340(sp)
   826e0:	b00b883a 	mov	r5,r22
   826e4:	d9800c04 	addi	r6,sp,48
   826e8:	0081cf00 	call	81cf0 <__sprint_r>
   826ec:	103f4e1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   826f0:	dc800e17 	ldw	r18,56(sp)
   826f4:	dc400d17 	ldw	r17,52(sp)
   826f8:	d8c01904 	addi	r3,sp,100
   826fc:	003fee06 	br	826b8 <___vfprintf_internal_r+0x970>
   82700:	d8802c0b 	ldhu	r2,176(sp)
   82704:	00ffffc4 	movi	r3,-1
   82708:	d8c14b15 	stw	r3,1324(sp)
   8270c:	1080100c 	andi	r2,r2,64
   82710:	103dcc1e 	bne	r2,zero,81e44 <___vfprintf_internal_r+0xfc>
   82714:	003dce06 	br	81e50 <___vfprintf_internal_r+0x108>
   82718:	d9014f17 	ldw	r4,1340(sp)
   8271c:	b00b883a 	mov	r5,r22
   82720:	d9800c04 	addi	r6,sp,48
   82724:	0081cf00 	call	81cf0 <__sprint_r>
   82728:	103f3f1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8272c:	dc800e17 	ldw	r18,56(sp)
   82730:	003f2e06 	br	823ec <___vfprintf_internal_r+0x6a4>
   82734:	d9414c17 	ldw	r5,1328(sp)
   82738:	29400414 	ori	r5,r5,16
   8273c:	d9414c15 	stw	r5,1328(sp)
   82740:	d9814c17 	ldw	r6,1328(sp)
   82744:	3080080c 	andi	r2,r6,32
   82748:	10014f1e 	bne	r2,zero,82c88 <___vfprintf_internal_r+0xf40>
   8274c:	d8c14c17 	ldw	r3,1328(sp)
   82750:	1880040c 	andi	r2,r3,16
   82754:	1002f01e 	bne	r2,zero,83318 <___vfprintf_internal_r+0x15d0>
   82758:	d9014c17 	ldw	r4,1328(sp)
   8275c:	2080100c 	andi	r2,r4,64
   82760:	1002ed26 	beq	r2,zero,83318 <___vfprintf_internal_r+0x15d0>
   82764:	3880000f 	ldh	r2,0(r7)
   82768:	39c00104 	addi	r7,r7,4
   8276c:	d9c14015 	stw	r7,1280(sp)
   82770:	1023d7fa 	srai	r17,r2,31
   82774:	1021883a 	mov	r16,r2
   82778:	88037816 	blt	r17,zero,8355c <___vfprintf_internal_r+0x1814>
   8277c:	01000044 	movi	r4,1
   82780:	98000416 	blt	r19,zero,82794 <___vfprintf_internal_r+0xa4c>
   82784:	d8c14c17 	ldw	r3,1328(sp)
   82788:	00bfdfc4 	movi	r2,-129
   8278c:	1886703a 	and	r3,r3,r2
   82790:	d8c14c15 	stw	r3,1328(sp)
   82794:	8444b03a 	or	r2,r16,r17
   82798:	10022c1e 	bne	r2,zero,8304c <___vfprintf_internal_r+0x1304>
   8279c:	98022b1e 	bne	r19,zero,8304c <___vfprintf_internal_r+0x1304>
   827a0:	20803fcc 	andi	r2,r4,255
   827a4:	1002a126 	beq	r2,zero,8322c <___vfprintf_internal_r+0x14e4>
   827a8:	d8c01904 	addi	r3,sp,100
   827ac:	dd000f04 	addi	r20,sp,60
   827b0:	d8c14115 	stw	r3,1284(sp)
   827b4:	d8c14117 	ldw	r3,1284(sp)
   827b8:	dcc14515 	stw	r19,1300(sp)
   827bc:	a0c5c83a 	sub	r2,r20,r3
   827c0:	11c00a04 	addi	r7,r2,40
   827c4:	99c0010e 	bge	r19,r7,827cc <___vfprintf_internal_r+0xa84>
   827c8:	d9c14515 	stw	r7,1300(sp)
   827cc:	dcc14615 	stw	r19,1304(sp)
   827d0:	d8800407 	ldb	r2,16(sp)
   827d4:	103e4c26 	beq	r2,zero,82108 <___vfprintf_internal_r+0x3c0>
   827d8:	d8814517 	ldw	r2,1300(sp)
   827dc:	10800044 	addi	r2,r2,1
   827e0:	d8814515 	stw	r2,1300(sp)
   827e4:	003e4806 	br	82108 <___vfprintf_internal_r+0x3c0>
   827e8:	d9814c17 	ldw	r6,1328(sp)
   827ec:	31800414 	ori	r6,r6,16
   827f0:	d9814c15 	stw	r6,1328(sp)
   827f4:	d8c14c17 	ldw	r3,1328(sp)
   827f8:	1880080c 	andi	r2,r3,32
   827fc:	1001271e 	bne	r2,zero,82c9c <___vfprintf_internal_r+0xf54>
   82800:	d9414c17 	ldw	r5,1328(sp)
   82804:	2880040c 	andi	r2,r5,16
   82808:	1002bc1e 	bne	r2,zero,832fc <___vfprintf_internal_r+0x15b4>
   8280c:	d9814c17 	ldw	r6,1328(sp)
   82810:	3080100c 	andi	r2,r6,64
   82814:	1002b926 	beq	r2,zero,832fc <___vfprintf_internal_r+0x15b4>
   82818:	3c00000b 	ldhu	r16,0(r7)
   8281c:	0009883a 	mov	r4,zero
   82820:	39c00104 	addi	r7,r7,4
   82824:	0023883a 	mov	r17,zero
   82828:	d9c14015 	stw	r7,1280(sp)
   8282c:	d8000405 	stb	zero,16(sp)
   82830:	003fd306 	br	82780 <___vfprintf_internal_r+0xa38>
   82834:	d9014c17 	ldw	r4,1328(sp)
   82838:	21000414 	ori	r4,r4,16
   8283c:	d9014c15 	stw	r4,1328(sp)
   82840:	d9414c17 	ldw	r5,1328(sp)
   82844:	2880080c 	andi	r2,r5,32
   82848:	1001081e 	bne	r2,zero,82c6c <___vfprintf_internal_r+0xf24>
   8284c:	d8c14c17 	ldw	r3,1328(sp)
   82850:	1880040c 	andi	r2,r3,16
   82854:	1002b61e 	bne	r2,zero,83330 <___vfprintf_internal_r+0x15e8>
   82858:	d9014c17 	ldw	r4,1328(sp)
   8285c:	2080100c 	andi	r2,r4,64
   82860:	1002b326 	beq	r2,zero,83330 <___vfprintf_internal_r+0x15e8>
   82864:	3c00000b 	ldhu	r16,0(r7)
   82868:	01000044 	movi	r4,1
   8286c:	39c00104 	addi	r7,r7,4
   82870:	0023883a 	mov	r17,zero
   82874:	d9c14015 	stw	r7,1280(sp)
   82878:	d8000405 	stb	zero,16(sp)
   8287c:	003fc006 	br	82780 <___vfprintf_internal_r+0xa38>
   82880:	d9014f17 	ldw	r4,1340(sp)
   82884:	b00b883a 	mov	r5,r22
   82888:	d9800c04 	addi	r6,sp,48
   8288c:	0081cf00 	call	81cf0 <__sprint_r>
   82890:	103ee51e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82894:	dc800e17 	ldw	r18,56(sp)
   82898:	d8c01904 	addi	r3,sp,100
   8289c:	d9814c17 	ldw	r6,1328(sp)
   828a0:	3080004c 	andi	r2,r6,1
   828a4:	1005003a 	cmpeq	r2,r2,zero
   828a8:	103ea51e 	bne	r2,zero,82340 <___vfprintf_internal_r+0x5f8>
   828ac:	00800044 	movi	r2,1
   828b0:	dc400d17 	ldw	r17,52(sp)
   828b4:	18800115 	stw	r2,4(r3)
   828b8:	d8814917 	ldw	r2,1316(sp)
   828bc:	94800044 	addi	r18,r18,1
   828c0:	8c400044 	addi	r17,r17,1
   828c4:	18800015 	stw	r2,0(r3)
   828c8:	008001c4 	movi	r2,7
   828cc:	dc800e15 	stw	r18,56(sp)
   828d0:	dc400d15 	stw	r17,52(sp)
   828d4:	1442240e 	bge	r2,r17,83168 <___vfprintf_internal_r+0x1420>
   828d8:	d9014f17 	ldw	r4,1340(sp)
   828dc:	b00b883a 	mov	r5,r22
   828e0:	d9800c04 	addi	r6,sp,48
   828e4:	0081cf00 	call	81cf0 <__sprint_r>
   828e8:	103ecf1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   828ec:	dc800e17 	ldw	r18,56(sp)
   828f0:	d8c01904 	addi	r3,sp,100
   828f4:	003e9206 	br	82340 <___vfprintf_internal_r+0x5f8>
   828f8:	d9014f17 	ldw	r4,1340(sp)
   828fc:	b00b883a 	mov	r5,r22
   82900:	d9800c04 	addi	r6,sp,48
   82904:	0081cf00 	call	81cf0 <__sprint_r>
   82908:	103ec026 	beq	r2,zero,8240c <___vfprintf_internal_r+0x6c4>
   8290c:	003ec606 	br	82428 <___vfprintf_internal_r+0x6e0>
   82910:	d9014f17 	ldw	r4,1340(sp)
   82914:	b00b883a 	mov	r5,r22
   82918:	d9800c04 	addi	r6,sp,48
   8291c:	d9c15115 	stw	r7,1348(sp)
   82920:	0081cf00 	call	81cf0 <__sprint_r>
   82924:	d9c15117 	ldw	r7,1348(sp)
   82928:	103ebf1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8292c:	dc800e17 	ldw	r18,56(sp)
   82930:	dc400d17 	ldw	r17,52(sp)
   82934:	dd401904 	addi	r21,sp,100
   82938:	003e7406 	br	8230c <___vfprintf_internal_r+0x5c4>
   8293c:	d9014f17 	ldw	r4,1340(sp)
   82940:	b00b883a 	mov	r5,r22
   82944:	d9800c04 	addi	r6,sp,48
   82948:	d9c15115 	stw	r7,1348(sp)
   8294c:	0081cf00 	call	81cf0 <__sprint_r>
   82950:	d9c15117 	ldw	r7,1348(sp)
   82954:	103eb41e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82958:	dd401904 	addi	r21,sp,100
   8295c:	003d6d06 	br	81f14 <___vfprintf_internal_r+0x1cc>
   82960:	d9014f17 	ldw	r4,1340(sp)
   82964:	b00b883a 	mov	r5,r22
   82968:	d9800c04 	addi	r6,sp,48
   8296c:	d9c15115 	stw	r7,1348(sp)
   82970:	0081cf00 	call	81cf0 <__sprint_r>
   82974:	d9c15117 	ldw	r7,1348(sp)
   82978:	103eab1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8297c:	dc800e17 	ldw	r18,56(sp)
   82980:	dc400d17 	ldw	r17,52(sp)
   82984:	dd401904 	addi	r21,sp,100
   82988:	003e3406 	br	8225c <___vfprintf_internal_r+0x514>
   8298c:	d9014f17 	ldw	r4,1340(sp)
   82990:	b00b883a 	mov	r5,r22
   82994:	d9800c04 	addi	r6,sp,48
   82998:	d9c15115 	stw	r7,1348(sp)
   8299c:	0081cf00 	call	81cf0 <__sprint_r>
   829a0:	d9c15117 	ldw	r7,1348(sp)
   829a4:	103ea01e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   829a8:	dc800e17 	ldw	r18,56(sp)
   829ac:	dc400d17 	ldw	r17,52(sp)
   829b0:	dd401904 	addi	r21,sp,100
   829b4:	003e1c06 	br	82228 <___vfprintf_internal_r+0x4e0>
   829b8:	d9014f17 	ldw	r4,1340(sp)
   829bc:	b00b883a 	mov	r5,r22
   829c0:	d9800c04 	addi	r6,sp,48
   829c4:	d9c15115 	stw	r7,1348(sp)
   829c8:	0081cf00 	call	81cf0 <__sprint_r>
   829cc:	d9c15117 	ldw	r7,1348(sp)
   829d0:	103e951e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   829d4:	dc800e17 	ldw	r18,56(sp)
   829d8:	dc400d17 	ldw	r17,52(sp)
   829dc:	dd401904 	addi	r21,sp,100
   829e0:	003e0406 	br	821f4 <___vfprintf_internal_r+0x4ac>
   829e4:	d9000517 	ldw	r4,20(sp)
   829e8:	0102580e 	bge	zero,r4,8334c <___vfprintf_internal_r+0x1604>
   829ec:	d9814717 	ldw	r6,1308(sp)
   829f0:	21807a16 	blt	r4,r6,82bdc <___vfprintf_internal_r+0xe94>
   829f4:	d8814117 	ldw	r2,1284(sp)
   829f8:	91a5883a 	add	r18,r18,r6
   829fc:	8c400044 	addi	r17,r17,1
   82a00:	a8800015 	stw	r2,0(r21)
   82a04:	008001c4 	movi	r2,7
   82a08:	a9800115 	stw	r6,4(r21)
   82a0c:	dc800e15 	stw	r18,56(sp)
   82a10:	dc400d15 	stw	r17,52(sp)
   82a14:	1442fc16 	blt	r2,r17,83608 <___vfprintf_internal_r+0x18c0>
   82a18:	a8c00204 	addi	r3,r21,8
   82a1c:	d9414717 	ldw	r5,1308(sp)
   82a20:	2161c83a 	sub	r16,r4,r5
   82a24:	043f9d0e 	bge	zero,r16,8289c <___vfprintf_internal_r+0xb54>
   82a28:	00800404 	movi	r2,16
   82a2c:	1402190e 	bge	r2,r16,83294 <___vfprintf_internal_r+0x154c>
   82a30:	dc400d17 	ldw	r17,52(sp)
   82a34:	1027883a 	mov	r19,r2
   82a38:	07000274 	movhi	fp,9
   82a3c:	e73b2284 	addi	fp,fp,-4982
   82a40:	050001c4 	movi	r20,7
   82a44:	00000306 	br	82a54 <___vfprintf_internal_r+0xd0c>
   82a48:	18c00204 	addi	r3,r3,8
   82a4c:	843ffc04 	addi	r16,r16,-16
   82a50:	9c02130e 	bge	r19,r16,832a0 <___vfprintf_internal_r+0x1558>
   82a54:	94800404 	addi	r18,r18,16
   82a58:	8c400044 	addi	r17,r17,1
   82a5c:	1f000015 	stw	fp,0(r3)
   82a60:	1cc00115 	stw	r19,4(r3)
   82a64:	dc800e15 	stw	r18,56(sp)
   82a68:	dc400d15 	stw	r17,52(sp)
   82a6c:	a47ff60e 	bge	r20,r17,82a48 <___vfprintf_internal_r+0xd00>
   82a70:	d9014f17 	ldw	r4,1340(sp)
   82a74:	b00b883a 	mov	r5,r22
   82a78:	d9800c04 	addi	r6,sp,48
   82a7c:	0081cf00 	call	81cf0 <__sprint_r>
   82a80:	103e691e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82a84:	dc800e17 	ldw	r18,56(sp)
   82a88:	dc400d17 	ldw	r17,52(sp)
   82a8c:	d8c01904 	addi	r3,sp,100
   82a90:	003fee06 	br	82a4c <___vfprintf_internal_r+0xd04>
   82a94:	d8814717 	ldw	r2,1308(sp)
   82a98:	143fffc4 	addi	r16,r2,-1
   82a9c:	043e970e 	bge	zero,r16,824fc <___vfprintf_internal_r+0x7b4>
   82aa0:	00800404 	movi	r2,16
   82aa4:	1400180e 	bge	r2,r16,82b08 <___vfprintf_internal_r+0xdc0>
   82aa8:	1029883a 	mov	r20,r2
   82aac:	07000274 	movhi	fp,9
   82ab0:	e73b2284 	addi	fp,fp,-4982
   82ab4:	054001c4 	movi	r21,7
   82ab8:	00000306 	br	82ac8 <___vfprintf_internal_r+0xd80>
   82abc:	9cc00204 	addi	r19,r19,8
   82ac0:	843ffc04 	addi	r16,r16,-16
   82ac4:	a400120e 	bge	r20,r16,82b10 <___vfprintf_internal_r+0xdc8>
   82ac8:	94800404 	addi	r18,r18,16
   82acc:	8c400044 	addi	r17,r17,1
   82ad0:	9f000015 	stw	fp,0(r19)
   82ad4:	9d000115 	stw	r20,4(r19)
   82ad8:	dc800e15 	stw	r18,56(sp)
   82adc:	dc400d15 	stw	r17,52(sp)
   82ae0:	ac7ff60e 	bge	r21,r17,82abc <___vfprintf_internal_r+0xd74>
   82ae4:	d9014f17 	ldw	r4,1340(sp)
   82ae8:	b00b883a 	mov	r5,r22
   82aec:	d9800c04 	addi	r6,sp,48
   82af0:	0081cf00 	call	81cf0 <__sprint_r>
   82af4:	103e4c1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82af8:	dc800e17 	ldw	r18,56(sp)
   82afc:	dc400d17 	ldw	r17,52(sp)
   82b00:	dcc01904 	addi	r19,sp,100
   82b04:	003fee06 	br	82ac0 <___vfprintf_internal_r+0xd78>
   82b08:	07000274 	movhi	fp,9
   82b0c:	e73b2284 	addi	fp,fp,-4982
   82b10:	9425883a 	add	r18,r18,r16
   82b14:	8c400044 	addi	r17,r17,1
   82b18:	008001c4 	movi	r2,7
   82b1c:	9f000015 	stw	fp,0(r19)
   82b20:	9c000115 	stw	r16,4(r19)
   82b24:	dc800e15 	stw	r18,56(sp)
   82b28:	dc400d15 	stw	r17,52(sp)
   82b2c:	147e720e 	bge	r2,r17,824f8 <___vfprintf_internal_r+0x7b0>
   82b30:	d9014f17 	ldw	r4,1340(sp)
   82b34:	b00b883a 	mov	r5,r22
   82b38:	d9800c04 	addi	r6,sp,48
   82b3c:	0081cf00 	call	81cf0 <__sprint_r>
   82b40:	103e391e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82b44:	dc800e17 	ldw	r18,56(sp)
   82b48:	dc400d17 	ldw	r17,52(sp)
   82b4c:	dcc01904 	addi	r19,sp,100
   82b50:	003e6a06 	br	824fc <___vfprintf_internal_r+0x7b4>
   82b54:	d9014f17 	ldw	r4,1340(sp)
   82b58:	b00b883a 	mov	r5,r22
   82b5c:	d9800c04 	addi	r6,sp,48
   82b60:	d9c15115 	stw	r7,1348(sp)
   82b64:	0081cf00 	call	81cf0 <__sprint_r>
   82b68:	d9c15117 	ldw	r7,1348(sp)
   82b6c:	103e2e1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82b70:	dc800e17 	ldw	r18,56(sp)
   82b74:	dc400d17 	ldw	r17,52(sp)
   82b78:	dd401904 	addi	r21,sp,100
   82b7c:	003dba06 	br	82268 <___vfprintf_internal_r+0x520>
   82b80:	d9014f17 	ldw	r4,1340(sp)
   82b84:	b00b883a 	mov	r5,r22
   82b88:	d9800c04 	addi	r6,sp,48
   82b8c:	0081cf00 	call	81cf0 <__sprint_r>
   82b90:	103e251e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82b94:	dc800e17 	ldw	r18,56(sp)
   82b98:	dc400d17 	ldw	r17,52(sp)
   82b9c:	dcc01904 	addi	r19,sp,100
   82ba0:	003e4206 	br	824ac <___vfprintf_internal_r+0x764>
   82ba4:	d9014f17 	ldw	r4,1340(sp)
   82ba8:	b00b883a 	mov	r5,r22
   82bac:	d9800c04 	addi	r6,sp,48
   82bb0:	0081cf00 	call	81cf0 <__sprint_r>
   82bb4:	103e1c1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   82bb8:	dc800e17 	ldw	r18,56(sp)
   82bbc:	dc400d17 	ldw	r17,52(sp)
   82bc0:	d8c01904 	addi	r3,sp,100
   82bc4:	003e2e06 	br	82480 <___vfprintf_internal_r+0x738>
   82bc8:	d9414c17 	ldw	r5,1328(sp)
   82bcc:	2880004c 	andi	r2,r5,1
   82bd0:	1005003a 	cmpeq	r2,r2,zero
   82bd4:	103dda1e 	bne	r2,zero,82340 <___vfprintf_internal_r+0x5f8>
   82bd8:	003e9f06 	br	82658 <___vfprintf_internal_r+0x910>
   82bdc:	d8c14117 	ldw	r3,1284(sp)
   82be0:	9125883a 	add	r18,r18,r4
   82be4:	8c400044 	addi	r17,r17,1
   82be8:	008001c4 	movi	r2,7
   82bec:	a8c00015 	stw	r3,0(r21)
   82bf0:	a9000115 	stw	r4,4(r21)
   82bf4:	dc800e15 	stw	r18,56(sp)
   82bf8:	dc400d15 	stw	r17,52(sp)
   82bfc:	14426c16 	blt	r2,r17,835b0 <___vfprintf_internal_r+0x1868>
   82c00:	a8c00204 	addi	r3,r21,8
   82c04:	d9414917 	ldw	r5,1316(sp)
   82c08:	00800044 	movi	r2,1
   82c0c:	94800044 	addi	r18,r18,1
   82c10:	8c400044 	addi	r17,r17,1
   82c14:	18800115 	stw	r2,4(r3)
   82c18:	008001c4 	movi	r2,7
   82c1c:	19400015 	stw	r5,0(r3)
   82c20:	dc800e15 	stw	r18,56(sp)
   82c24:	dc400d15 	stw	r17,52(sp)
   82c28:	2021883a 	mov	r16,r4
   82c2c:	14425616 	blt	r2,r17,83588 <___vfprintf_internal_r+0x1840>
   82c30:	19400204 	addi	r5,r3,8
   82c34:	d9814717 	ldw	r6,1308(sp)
   82c38:	8c400044 	addi	r17,r17,1
   82c3c:	dc400d15 	stw	r17,52(sp)
   82c40:	3107c83a 	sub	r3,r6,r4
   82c44:	d9014117 	ldw	r4,1284(sp)
   82c48:	90e5883a 	add	r18,r18,r3
   82c4c:	28c00115 	stw	r3,4(r5)
   82c50:	8105883a 	add	r2,r16,r4
   82c54:	28800015 	stw	r2,0(r5)
   82c58:	008001c4 	movi	r2,7
   82c5c:	dc800e15 	stw	r18,56(sp)
   82c60:	147f1d16 	blt	r2,r17,828d8 <___vfprintf_internal_r+0xb90>
   82c64:	28c00204 	addi	r3,r5,8
   82c68:	003db506 	br	82340 <___vfprintf_internal_r+0x5f8>
   82c6c:	3c000017 	ldw	r16,0(r7)
   82c70:	3c400117 	ldw	r17,4(r7)
   82c74:	39800204 	addi	r6,r7,8
   82c78:	01000044 	movi	r4,1
   82c7c:	d9814015 	stw	r6,1280(sp)
   82c80:	d8000405 	stb	zero,16(sp)
   82c84:	003ebe06 	br	82780 <___vfprintf_internal_r+0xa38>
   82c88:	3c000017 	ldw	r16,0(r7)
   82c8c:	3c400117 	ldw	r17,4(r7)
   82c90:	38800204 	addi	r2,r7,8
   82c94:	d8814015 	stw	r2,1280(sp)
   82c98:	003eb706 	br	82778 <___vfprintf_internal_r+0xa30>
   82c9c:	3c000017 	ldw	r16,0(r7)
   82ca0:	3c400117 	ldw	r17,4(r7)
   82ca4:	39000204 	addi	r4,r7,8
   82ca8:	d9014015 	stw	r4,1280(sp)
   82cac:	0009883a 	mov	r4,zero
   82cb0:	d8000405 	stb	zero,16(sp)
   82cb4:	003eb206 	br	82780 <___vfprintf_internal_r+0xa38>
   82cb8:	38c00017 	ldw	r3,0(r7)
   82cbc:	39c00104 	addi	r7,r7,4
   82cc0:	d8c14a15 	stw	r3,1320(sp)
   82cc4:	1800d70e 	bge	r3,zero,83024 <___vfprintf_internal_r+0x12dc>
   82cc8:	00c7c83a 	sub	r3,zero,r3
   82ccc:	d8c14a15 	stw	r3,1320(sp)
   82cd0:	d9014c17 	ldw	r4,1328(sp)
   82cd4:	b8c00007 	ldb	r3,0(r23)
   82cd8:	21000114 	ori	r4,r4,4
   82cdc:	d9014c15 	stw	r4,1328(sp)
   82ce0:	003c9806 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82ce4:	d9814c17 	ldw	r6,1328(sp)
   82ce8:	3080080c 	andi	r2,r6,32
   82cec:	1001f626 	beq	r2,zero,834c8 <___vfprintf_internal_r+0x1780>
   82cf0:	d9014b17 	ldw	r4,1324(sp)
   82cf4:	38800017 	ldw	r2,0(r7)
   82cf8:	39c00104 	addi	r7,r7,4
   82cfc:	d9c14015 	stw	r7,1280(sp)
   82d00:	2007d7fa 	srai	r3,r4,31
   82d04:	d9c14017 	ldw	r7,1280(sp)
   82d08:	11000015 	stw	r4,0(r2)
   82d0c:	10c00115 	stw	r3,4(r2)
   82d10:	003c6906 	br	81eb8 <___vfprintf_internal_r+0x170>
   82d14:	b8c00007 	ldb	r3,0(r23)
   82d18:	00801b04 	movi	r2,108
   82d1c:	18825526 	beq	r3,r2,83674 <___vfprintf_internal_r+0x192c>
   82d20:	d9414c17 	ldw	r5,1328(sp)
   82d24:	29400414 	ori	r5,r5,16
   82d28:	d9414c15 	stw	r5,1328(sp)
   82d2c:	003c8506 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82d30:	d9814c17 	ldw	r6,1328(sp)
   82d34:	b8c00007 	ldb	r3,0(r23)
   82d38:	31800814 	ori	r6,r6,32
   82d3c:	d9814c15 	stw	r6,1328(sp)
   82d40:	003c8006 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82d44:	d8814c17 	ldw	r2,1328(sp)
   82d48:	3c000017 	ldw	r16,0(r7)
   82d4c:	00c01e04 	movi	r3,120
   82d50:	10800094 	ori	r2,r2,2
   82d54:	d8814c15 	stw	r2,1328(sp)
   82d58:	39c00104 	addi	r7,r7,4
   82d5c:	01400274 	movhi	r5,9
   82d60:	297b0b04 	addi	r5,r5,-5076
   82d64:	00800c04 	movi	r2,48
   82d68:	0023883a 	mov	r17,zero
   82d6c:	01000084 	movi	r4,2
   82d70:	d9c14015 	stw	r7,1280(sp)
   82d74:	d8c14d15 	stw	r3,1332(sp)
   82d78:	d9414415 	stw	r5,1296(sp)
   82d7c:	d8800445 	stb	r2,17(sp)
   82d80:	d8c00485 	stb	r3,18(sp)
   82d84:	d8000405 	stb	zero,16(sp)
   82d88:	003e7d06 	br	82780 <___vfprintf_internal_r+0xa38>
   82d8c:	d8814c17 	ldw	r2,1328(sp)
   82d90:	b8c00007 	ldb	r3,0(r23)
   82d94:	10801014 	ori	r2,r2,64
   82d98:	d8814c15 	stw	r2,1328(sp)
   82d9c:	003c6906 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82da0:	d9414c17 	ldw	r5,1328(sp)
   82da4:	2880020c 	andi	r2,r5,8
   82da8:	1001e526 	beq	r2,zero,83540 <___vfprintf_internal_r+0x17f8>
   82dac:	39800017 	ldw	r6,0(r7)
   82db0:	38800204 	addi	r2,r7,8
   82db4:	d8814015 	stw	r2,1280(sp)
   82db8:	d9814215 	stw	r6,1288(sp)
   82dbc:	39c00117 	ldw	r7,4(r7)
   82dc0:	d9c14315 	stw	r7,1292(sp)
   82dc4:	d9014217 	ldw	r4,1288(sp)
   82dc8:	d9414317 	ldw	r5,1292(sp)
   82dcc:	00887580 	call	88758 <__isinfd>
   82dd0:	10021d26 	beq	r2,zero,83648 <___vfprintf_internal_r+0x1900>
   82dd4:	d9014217 	ldw	r4,1288(sp)
   82dd8:	d9414317 	ldw	r5,1292(sp)
   82ddc:	000d883a 	mov	r6,zero
   82de0:	000f883a 	mov	r7,zero
   82de4:	008a8f40 	call	8a8f4 <__ltdf2>
   82de8:	1002d016 	blt	r2,zero,8392c <___vfprintf_internal_r+0x1be4>
   82dec:	d9414d17 	ldw	r5,1332(sp)
   82df0:	008011c4 	movi	r2,71
   82df4:	11421016 	blt	r2,r5,83638 <___vfprintf_internal_r+0x18f0>
   82df8:	01800274 	movhi	r6,9
   82dfc:	31bb1004 	addi	r6,r6,-5056
   82e00:	d9814115 	stw	r6,1284(sp)
   82e04:	d9014c17 	ldw	r4,1328(sp)
   82e08:	00c000c4 	movi	r3,3
   82e0c:	00bfdfc4 	movi	r2,-129
   82e10:	2088703a 	and	r4,r4,r2
   82e14:	180f883a 	mov	r7,r3
   82e18:	d8c14515 	stw	r3,1300(sp)
   82e1c:	d9014c15 	stw	r4,1328(sp)
   82e20:	d8014615 	stw	zero,1304(sp)
   82e24:	003e6a06 	br	827d0 <___vfprintf_internal_r+0xa88>
   82e28:	38800017 	ldw	r2,0(r7)
   82e2c:	00c00044 	movi	r3,1
   82e30:	39c00104 	addi	r7,r7,4
   82e34:	d9c14015 	stw	r7,1280(sp)
   82e38:	d9000f04 	addi	r4,sp,60
   82e3c:	180f883a 	mov	r7,r3
   82e40:	d8c14515 	stw	r3,1300(sp)
   82e44:	d9014115 	stw	r4,1284(sp)
   82e48:	d8800f05 	stb	r2,60(sp)
   82e4c:	d8000405 	stb	zero,16(sp)
   82e50:	003cac06 	br	82104 <___vfprintf_internal_r+0x3bc>
   82e54:	01400274 	movhi	r5,9
   82e58:	297b1604 	addi	r5,r5,-5032
   82e5c:	d9414415 	stw	r5,1296(sp)
   82e60:	d9814c17 	ldw	r6,1328(sp)
   82e64:	3080080c 	andi	r2,r6,32
   82e68:	1000ff26 	beq	r2,zero,83268 <___vfprintf_internal_r+0x1520>
   82e6c:	3c000017 	ldw	r16,0(r7)
   82e70:	3c400117 	ldw	r17,4(r7)
   82e74:	38800204 	addi	r2,r7,8
   82e78:	d8814015 	stw	r2,1280(sp)
   82e7c:	d9414c17 	ldw	r5,1328(sp)
   82e80:	2880004c 	andi	r2,r5,1
   82e84:	1005003a 	cmpeq	r2,r2,zero
   82e88:	1000b91e 	bne	r2,zero,83170 <___vfprintf_internal_r+0x1428>
   82e8c:	8444b03a 	or	r2,r16,r17
   82e90:	1000b726 	beq	r2,zero,83170 <___vfprintf_internal_r+0x1428>
   82e94:	d9814d17 	ldw	r6,1332(sp)
   82e98:	29400094 	ori	r5,r5,2
   82e9c:	00800c04 	movi	r2,48
   82ea0:	01000084 	movi	r4,2
   82ea4:	d9414c15 	stw	r5,1328(sp)
   82ea8:	d8800445 	stb	r2,17(sp)
   82eac:	d9800485 	stb	r6,18(sp)
   82eb0:	d8000405 	stb	zero,16(sp)
   82eb4:	003e3206 	br	82780 <___vfprintf_internal_r+0xa38>
   82eb8:	01800274 	movhi	r6,9
   82ebc:	31bb0b04 	addi	r6,r6,-5076
   82ec0:	d9814415 	stw	r6,1296(sp)
   82ec4:	003fe606 	br	82e60 <___vfprintf_internal_r+0x1118>
   82ec8:	00800ac4 	movi	r2,43
   82ecc:	d8800405 	stb	r2,16(sp)
   82ed0:	b8c00007 	ldb	r3,0(r23)
   82ed4:	003c1b06 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82ed8:	d8814c17 	ldw	r2,1328(sp)
   82edc:	b8c00007 	ldb	r3,0(r23)
   82ee0:	10800054 	ori	r2,r2,1
   82ee4:	d8814c15 	stw	r2,1328(sp)
   82ee8:	003c1606 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82eec:	d8800407 	ldb	r2,16(sp)
   82ef0:	10004c1e 	bne	r2,zero,83024 <___vfprintf_internal_r+0x12dc>
   82ef4:	00800804 	movi	r2,32
   82ef8:	d8800405 	stb	r2,16(sp)
   82efc:	b8c00007 	ldb	r3,0(r23)
   82f00:	003c1006 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82f04:	d9814c17 	ldw	r6,1328(sp)
   82f08:	b8c00007 	ldb	r3,0(r23)
   82f0c:	31800214 	ori	r6,r6,8
   82f10:	d9814c15 	stw	r6,1328(sp)
   82f14:	003c0b06 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82f18:	0009883a 	mov	r4,zero
   82f1c:	04000244 	movi	r16,9
   82f20:	01400284 	movi	r5,10
   82f24:	d9c15115 	stw	r7,1348(sp)
   82f28:	008ace00 	call	8ace0 <__mulsi3>
   82f2c:	b9000007 	ldb	r4,0(r23)
   82f30:	d8c14d17 	ldw	r3,1332(sp)
   82f34:	bdc00044 	addi	r23,r23,1
   82f38:	d9014d15 	stw	r4,1332(sp)
   82f3c:	d9414d17 	ldw	r5,1332(sp)
   82f40:	1885883a 	add	r2,r3,r2
   82f44:	113ff404 	addi	r4,r2,-48
   82f48:	28bff404 	addi	r2,r5,-48
   82f4c:	d9c15117 	ldw	r7,1348(sp)
   82f50:	80bff32e 	bgeu	r16,r2,82f20 <___vfprintf_internal_r+0x11d8>
   82f54:	d9014a15 	stw	r4,1320(sp)
   82f58:	003bfc06 	br	81f4c <___vfprintf_internal_r+0x204>
   82f5c:	d8814c17 	ldw	r2,1328(sp)
   82f60:	b8c00007 	ldb	r3,0(r23)
   82f64:	10802014 	ori	r2,r2,128
   82f68:	d8814c15 	stw	r2,1328(sp)
   82f6c:	003bf506 	br	81f44 <___vfprintf_internal_r+0x1fc>
   82f70:	b8c00007 	ldb	r3,0(r23)
   82f74:	00800a84 	movi	r2,42
   82f78:	bdc00044 	addi	r23,r23,1
   82f7c:	18831826 	beq	r3,r2,83be0 <___vfprintf_internal_r+0x1e98>
   82f80:	d8c14d15 	stw	r3,1332(sp)
   82f84:	18bff404 	addi	r2,r3,-48
   82f88:	00c00244 	movi	r3,9
   82f8c:	18827b36 	bltu	r3,r2,8397c <___vfprintf_internal_r+0x1c34>
   82f90:	1821883a 	mov	r16,r3
   82f94:	0009883a 	mov	r4,zero
   82f98:	01400284 	movi	r5,10
   82f9c:	d9c15115 	stw	r7,1348(sp)
   82fa0:	008ace00 	call	8ace0 <__mulsi3>
   82fa4:	d9414d17 	ldw	r5,1332(sp)
   82fa8:	b9800007 	ldb	r6,0(r23)
   82fac:	d9c15117 	ldw	r7,1348(sp)
   82fb0:	1145883a 	add	r2,r2,r5
   82fb4:	113ff404 	addi	r4,r2,-48
   82fb8:	30bff404 	addi	r2,r6,-48
   82fbc:	d9814d15 	stw	r6,1332(sp)
   82fc0:	bdc00044 	addi	r23,r23,1
   82fc4:	80bff42e 	bgeu	r16,r2,82f98 <___vfprintf_internal_r+0x1250>
   82fc8:	2027883a 	mov	r19,r4
   82fcc:	203bdf0e 	bge	r4,zero,81f4c <___vfprintf_internal_r+0x204>
   82fd0:	04ffffc4 	movi	r19,-1
   82fd4:	003bdd06 	br	81f4c <___vfprintf_internal_r+0x204>
   82fd8:	d8000405 	stb	zero,16(sp)
   82fdc:	39800017 	ldw	r6,0(r7)
   82fe0:	39c00104 	addi	r7,r7,4
   82fe4:	d9c14015 	stw	r7,1280(sp)
   82fe8:	d9814115 	stw	r6,1284(sp)
   82fec:	3001c926 	beq	r6,zero,83714 <___vfprintf_internal_r+0x19cc>
   82ff0:	98000e16 	blt	r19,zero,8302c <___vfprintf_internal_r+0x12e4>
   82ff4:	d9014117 	ldw	r4,1284(sp)
   82ff8:	000b883a 	mov	r5,zero
   82ffc:	980d883a 	mov	r6,r19
   83000:	0086e7c0 	call	86e7c <memchr>
   83004:	10025926 	beq	r2,zero,8396c <___vfprintf_internal_r+0x1c24>
   83008:	d8c14117 	ldw	r3,1284(sp)
   8300c:	10cfc83a 	sub	r7,r2,r3
   83010:	99c19e16 	blt	r19,r7,8368c <___vfprintf_internal_r+0x1944>
   83014:	d9c14515 	stw	r7,1300(sp)
   83018:	38000916 	blt	r7,zero,83040 <___vfprintf_internal_r+0x12f8>
   8301c:	d8014615 	stw	zero,1304(sp)
   83020:	003deb06 	br	827d0 <___vfprintf_internal_r+0xa88>
   83024:	b8c00007 	ldb	r3,0(r23)
   83028:	003bc606 	br	81f44 <___vfprintf_internal_r+0x1fc>
   8302c:	d9014117 	ldw	r4,1284(sp)
   83030:	0081a080 	call	81a08 <strlen>
   83034:	d8814515 	stw	r2,1300(sp)
   83038:	100f883a 	mov	r7,r2
   8303c:	103ff70e 	bge	r2,zero,8301c <___vfprintf_internal_r+0x12d4>
   83040:	d8014515 	stw	zero,1300(sp)
   83044:	d8014615 	stw	zero,1304(sp)
   83048:	003de106 	br	827d0 <___vfprintf_internal_r+0xa88>
   8304c:	20c03fcc 	andi	r3,r4,255
   83050:	00800044 	movi	r2,1
   83054:	18802d26 	beq	r3,r2,8310c <___vfprintf_internal_r+0x13c4>
   83058:	18800e36 	bltu	r3,r2,83094 <___vfprintf_internal_r+0x134c>
   8305c:	00800084 	movi	r2,2
   83060:	1880fa26 	beq	r3,r2,8344c <___vfprintf_internal_r+0x1704>
   83064:	01000274 	movhi	r4,9
   83068:	213b1b04 	addi	r4,r4,-5012
   8306c:	0081a080 	call	81a08 <strlen>
   83070:	100f883a 	mov	r7,r2
   83074:	dcc14515 	stw	r19,1300(sp)
   83078:	9880010e 	bge	r19,r2,83080 <___vfprintf_internal_r+0x1338>
   8307c:	d8814515 	stw	r2,1300(sp)
   83080:	00800274 	movhi	r2,9
   83084:	10bb1b04 	addi	r2,r2,-5012
   83088:	dcc14615 	stw	r19,1304(sp)
   8308c:	d8814115 	stw	r2,1284(sp)
   83090:	003dcf06 	br	827d0 <___vfprintf_internal_r+0xa88>
   83094:	d9401904 	addi	r5,sp,100
   83098:	dd000f04 	addi	r20,sp,60
   8309c:	d9414115 	stw	r5,1284(sp)
   830a0:	880a977a 	slli	r5,r17,29
   830a4:	d9814117 	ldw	r6,1284(sp)
   830a8:	8004d0fa 	srli	r2,r16,3
   830ac:	8806d0fa 	srli	r3,r17,3
   830b0:	810001cc 	andi	r4,r16,7
   830b4:	2884b03a 	or	r2,r5,r2
   830b8:	31bfffc4 	addi	r6,r6,-1
   830bc:	21000c04 	addi	r4,r4,48
   830c0:	d9814115 	stw	r6,1284(sp)
   830c4:	10cab03a 	or	r5,r2,r3
   830c8:	31000005 	stb	r4,0(r6)
   830cc:	1021883a 	mov	r16,r2
   830d0:	1823883a 	mov	r17,r3
   830d4:	283ff21e 	bne	r5,zero,830a0 <___vfprintf_internal_r+0x1358>
   830d8:	d8c14c17 	ldw	r3,1328(sp)
   830dc:	1880004c 	andi	r2,r3,1
   830e0:	1005003a 	cmpeq	r2,r2,zero
   830e4:	103db31e 	bne	r2,zero,827b4 <___vfprintf_internal_r+0xa6c>
   830e8:	20803fcc 	andi	r2,r4,255
   830ec:	1080201c 	xori	r2,r2,128
   830f0:	10bfe004 	addi	r2,r2,-128
   830f4:	00c00c04 	movi	r3,48
   830f8:	10fdae26 	beq	r2,r3,827b4 <___vfprintf_internal_r+0xa6c>
   830fc:	31bfffc4 	addi	r6,r6,-1
   83100:	d9814115 	stw	r6,1284(sp)
   83104:	30c00005 	stb	r3,0(r6)
   83108:	003daa06 	br	827b4 <___vfprintf_internal_r+0xa6c>
   8310c:	88800068 	cmpgeui	r2,r17,1
   83110:	10002c1e 	bne	r2,zero,831c4 <___vfprintf_internal_r+0x147c>
   83114:	8800021e 	bne	r17,zero,83120 <___vfprintf_internal_r+0x13d8>
   83118:	00800244 	movi	r2,9
   8311c:	14002936 	bltu	r2,r16,831c4 <___vfprintf_internal_r+0x147c>
   83120:	d90018c4 	addi	r4,sp,99
   83124:	dd000f04 	addi	r20,sp,60
   83128:	d9014115 	stw	r4,1284(sp)
   8312c:	d9014117 	ldw	r4,1284(sp)
   83130:	80800c04 	addi	r2,r16,48
   83134:	20800005 	stb	r2,0(r4)
   83138:	003d9e06 	br	827b4 <___vfprintf_internal_r+0xa6c>
   8313c:	dc400d17 	ldw	r17,52(sp)
   83140:	07000274 	movhi	fp,9
   83144:	e73b2284 	addi	fp,fp,-4982
   83148:	9425883a 	add	r18,r18,r16
   8314c:	8c400044 	addi	r17,r17,1
   83150:	008001c4 	movi	r2,7
   83154:	1f000015 	stw	fp,0(r3)
   83158:	1c000115 	stw	r16,4(r3)
   8315c:	dc800e15 	stw	r18,56(sp)
   83160:	dc400d15 	stw	r17,52(sp)
   83164:	147ddc16 	blt	r2,r17,828d8 <___vfprintf_internal_r+0xb90>
   83168:	18c00204 	addi	r3,r3,8
   8316c:	003c7406 	br	82340 <___vfprintf_internal_r+0x5f8>
   83170:	01000084 	movi	r4,2
   83174:	d8000405 	stb	zero,16(sp)
   83178:	003d8106 	br	82780 <___vfprintf_internal_r+0xa38>
   8317c:	d9814c17 	ldw	r6,1328(sp)
   83180:	30c4703a 	and	r2,r6,r3
   83184:	1005003a 	cmpeq	r2,r2,zero
   83188:	103cb326 	beq	r2,zero,82458 <___vfprintf_internal_r+0x710>
   8318c:	d9014117 	ldw	r4,1284(sp)
   83190:	94800044 	addi	r18,r18,1
   83194:	8c400044 	addi	r17,r17,1
   83198:	008001c4 	movi	r2,7
   8319c:	a9000015 	stw	r4,0(r21)
   831a0:	a8c00115 	stw	r3,4(r21)
   831a4:	dc800e15 	stw	r18,56(sp)
   831a8:	dc400d15 	stw	r17,52(sp)
   831ac:	147e6016 	blt	r2,r17,82b30 <___vfprintf_internal_r+0xde8>
   831b0:	acc00204 	addi	r19,r21,8
   831b4:	003cd106 	br	824fc <___vfprintf_internal_r+0x7b4>
   831b8:	07000274 	movhi	fp,9
   831bc:	e73b2284 	addi	fp,fp,-4982
   831c0:	003c4906 	br	822e8 <___vfprintf_internal_r+0x5a0>
   831c4:	dd000f04 	addi	r20,sp,60
   831c8:	dc801904 	addi	r18,sp,100
   831cc:	8009883a 	mov	r4,r16
   831d0:	880b883a 	mov	r5,r17
   831d4:	01800284 	movi	r6,10
   831d8:	000f883a 	mov	r7,zero
   831dc:	00895540 	call	89554 <__umoddi3>
   831e0:	12000c04 	addi	r8,r2,48
   831e4:	94bfffc4 	addi	r18,r18,-1
   831e8:	8009883a 	mov	r4,r16
   831ec:	880b883a 	mov	r5,r17
   831f0:	01800284 	movi	r6,10
   831f4:	000f883a 	mov	r7,zero
   831f8:	92000005 	stb	r8,0(r18)
   831fc:	0088ee80 	call	88ee8 <__udivdi3>
   83200:	1009883a 	mov	r4,r2
   83204:	1021883a 	mov	r16,r2
   83208:	18800068 	cmpgeui	r2,r3,1
   8320c:	1823883a 	mov	r17,r3
   83210:	103fee1e 	bne	r2,zero,831cc <___vfprintf_internal_r+0x1484>
   83214:	1800021e 	bne	r3,zero,83220 <___vfprintf_internal_r+0x14d8>
   83218:	00800244 	movi	r2,9
   8321c:	113feb36 	bltu	r2,r4,831cc <___vfprintf_internal_r+0x1484>
   83220:	94bfffc4 	addi	r18,r18,-1
   83224:	dc814115 	stw	r18,1284(sp)
   83228:	003fc006 	br	8312c <___vfprintf_internal_r+0x13e4>
   8322c:	d9014c17 	ldw	r4,1328(sp)
   83230:	2080004c 	andi	r2,r4,1
   83234:	10009a1e 	bne	r2,zero,834a0 <___vfprintf_internal_r+0x1758>
   83238:	d9401904 	addi	r5,sp,100
   8323c:	dd000f04 	addi	r20,sp,60
   83240:	d9414115 	stw	r5,1284(sp)
   83244:	003d5b06 	br	827b4 <___vfprintf_internal_r+0xa6c>
   83248:	d9014f17 	ldw	r4,1340(sp)
   8324c:	b00b883a 	mov	r5,r22
   83250:	d9800c04 	addi	r6,sp,48
   83254:	0081cf00 	call	81cf0 <__sprint_r>
   83258:	103c731e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8325c:	dc800e17 	ldw	r18,56(sp)
   83260:	d8c01904 	addi	r3,sp,100
   83264:	003cf906 	br	8264c <___vfprintf_internal_r+0x904>
   83268:	d8c14c17 	ldw	r3,1328(sp)
   8326c:	1880040c 	andi	r2,r3,16
   83270:	1000711e 	bne	r2,zero,83438 <___vfprintf_internal_r+0x16f0>
   83274:	d9014c17 	ldw	r4,1328(sp)
   83278:	2080100c 	andi	r2,r4,64
   8327c:	10006e26 	beq	r2,zero,83438 <___vfprintf_internal_r+0x16f0>
   83280:	3c00000b 	ldhu	r16,0(r7)
   83284:	0023883a 	mov	r17,zero
   83288:	39c00104 	addi	r7,r7,4
   8328c:	d9c14015 	stw	r7,1280(sp)
   83290:	003efa06 	br	82e7c <___vfprintf_internal_r+0x1134>
   83294:	dc400d17 	ldw	r17,52(sp)
   83298:	07000274 	movhi	fp,9
   8329c:	e73b2284 	addi	fp,fp,-4982
   832a0:	9425883a 	add	r18,r18,r16
   832a4:	8c400044 	addi	r17,r17,1
   832a8:	008001c4 	movi	r2,7
   832ac:	1f000015 	stw	fp,0(r3)
   832b0:	1c000115 	stw	r16,4(r3)
   832b4:	dc800e15 	stw	r18,56(sp)
   832b8:	dc400d15 	stw	r17,52(sp)
   832bc:	147d7016 	blt	r2,r17,82880 <___vfprintf_internal_r+0xb38>
   832c0:	18c00204 	addi	r3,r3,8
   832c4:	003d7506 	br	8289c <___vfprintf_internal_r+0xb54>
   832c8:	dc800e17 	ldw	r18,56(sp)
   832cc:	dc400d17 	ldw	r17,52(sp)
   832d0:	07000274 	movhi	fp,9
   832d4:	e73b2684 	addi	fp,fp,-4966
   832d8:	003bba06 	br	821c4 <___vfprintf_internal_r+0x47c>
   832dc:	d9014f17 	ldw	r4,1340(sp)
   832e0:	b00b883a 	mov	r5,r22
   832e4:	d9800c04 	addi	r6,sp,48
   832e8:	0081cf00 	call	81cf0 <__sprint_r>
   832ec:	103c4e1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   832f0:	dc800e17 	ldw	r18,56(sp)
   832f4:	d8c01904 	addi	r3,sp,100
   832f8:	003ce306 	br	82688 <___vfprintf_internal_r+0x940>
   832fc:	3c000017 	ldw	r16,0(r7)
   83300:	0009883a 	mov	r4,zero
   83304:	39c00104 	addi	r7,r7,4
   83308:	0023883a 	mov	r17,zero
   8330c:	d9c14015 	stw	r7,1280(sp)
   83310:	d8000405 	stb	zero,16(sp)
   83314:	003d1a06 	br	82780 <___vfprintf_internal_r+0xa38>
   83318:	38800017 	ldw	r2,0(r7)
   8331c:	39c00104 	addi	r7,r7,4
   83320:	d9c14015 	stw	r7,1280(sp)
   83324:	1023d7fa 	srai	r17,r2,31
   83328:	1021883a 	mov	r16,r2
   8332c:	003d1206 	br	82778 <___vfprintf_internal_r+0xa30>
   83330:	3c000017 	ldw	r16,0(r7)
   83334:	01000044 	movi	r4,1
   83338:	39c00104 	addi	r7,r7,4
   8333c:	0023883a 	mov	r17,zero
   83340:	d9c14015 	stw	r7,1280(sp)
   83344:	d8000405 	stb	zero,16(sp)
   83348:	003d0d06 	br	82780 <___vfprintf_internal_r+0xa38>
   8334c:	00800274 	movhi	r2,9
   83350:	10bb2204 	addi	r2,r2,-4984
   83354:	94800044 	addi	r18,r18,1
   83358:	8c400044 	addi	r17,r17,1
   8335c:	a8800015 	stw	r2,0(r21)
   83360:	00c00044 	movi	r3,1
   83364:	008001c4 	movi	r2,7
   83368:	a8c00115 	stw	r3,4(r21)
   8336c:	dc800e15 	stw	r18,56(sp)
   83370:	dc400d15 	stw	r17,52(sp)
   83374:	1440ca16 	blt	r2,r17,836a0 <___vfprintf_internal_r+0x1958>
   83378:	a8c00204 	addi	r3,r21,8
   8337c:	2000061e 	bne	r4,zero,83398 <___vfprintf_internal_r+0x1650>
   83380:	d9414717 	ldw	r5,1308(sp)
   83384:	2800041e 	bne	r5,zero,83398 <___vfprintf_internal_r+0x1650>
   83388:	d9814c17 	ldw	r6,1328(sp)
   8338c:	3080004c 	andi	r2,r6,1
   83390:	1005003a 	cmpeq	r2,r2,zero
   83394:	103bea1e 	bne	r2,zero,82340 <___vfprintf_internal_r+0x5f8>
   83398:	00800044 	movi	r2,1
   8339c:	dc400d17 	ldw	r17,52(sp)
   833a0:	18800115 	stw	r2,4(r3)
   833a4:	d8814917 	ldw	r2,1316(sp)
   833a8:	94800044 	addi	r18,r18,1
   833ac:	8c400044 	addi	r17,r17,1
   833b0:	18800015 	stw	r2,0(r3)
   833b4:	008001c4 	movi	r2,7
   833b8:	dc800e15 	stw	r18,56(sp)
   833bc:	dc400d15 	stw	r17,52(sp)
   833c0:	1440ca16 	blt	r2,r17,836ec <___vfprintf_internal_r+0x19a4>
   833c4:	18c00204 	addi	r3,r3,8
   833c8:	0121c83a 	sub	r16,zero,r4
   833cc:	0400500e 	bge	zero,r16,83510 <___vfprintf_internal_r+0x17c8>
   833d0:	00800404 	movi	r2,16
   833d4:	1400800e 	bge	r2,r16,835d8 <___vfprintf_internal_r+0x1890>
   833d8:	1027883a 	mov	r19,r2
   833dc:	07000274 	movhi	fp,9
   833e0:	e73b2284 	addi	fp,fp,-4982
   833e4:	050001c4 	movi	r20,7
   833e8:	00000306 	br	833f8 <___vfprintf_internal_r+0x16b0>
   833ec:	18c00204 	addi	r3,r3,8
   833f0:	843ffc04 	addi	r16,r16,-16
   833f4:	9c007a0e 	bge	r19,r16,835e0 <___vfprintf_internal_r+0x1898>
   833f8:	94800404 	addi	r18,r18,16
   833fc:	8c400044 	addi	r17,r17,1
   83400:	1f000015 	stw	fp,0(r3)
   83404:	1cc00115 	stw	r19,4(r3)
   83408:	dc800e15 	stw	r18,56(sp)
   8340c:	dc400d15 	stw	r17,52(sp)
   83410:	a47ff60e 	bge	r20,r17,833ec <___vfprintf_internal_r+0x16a4>
   83414:	d9014f17 	ldw	r4,1340(sp)
   83418:	b00b883a 	mov	r5,r22
   8341c:	d9800c04 	addi	r6,sp,48
   83420:	0081cf00 	call	81cf0 <__sprint_r>
   83424:	103c001e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   83428:	dc800e17 	ldw	r18,56(sp)
   8342c:	dc400d17 	ldw	r17,52(sp)
   83430:	d8c01904 	addi	r3,sp,100
   83434:	003fee06 	br	833f0 <___vfprintf_internal_r+0x16a8>
   83438:	3c000017 	ldw	r16,0(r7)
   8343c:	0023883a 	mov	r17,zero
   83440:	39c00104 	addi	r7,r7,4
   83444:	d9c14015 	stw	r7,1280(sp)
   83448:	003e8c06 	br	82e7c <___vfprintf_internal_r+0x1134>
   8344c:	d9401904 	addi	r5,sp,100
   83450:	dd000f04 	addi	r20,sp,60
   83454:	d9414115 	stw	r5,1284(sp)
   83458:	d9814417 	ldw	r6,1296(sp)
   8345c:	880a973a 	slli	r5,r17,28
   83460:	8004d13a 	srli	r2,r16,4
   83464:	810003cc 	andi	r4,r16,15
   83468:	3109883a 	add	r4,r6,r4
   8346c:	2884b03a 	or	r2,r5,r2
   83470:	21400003 	ldbu	r5,0(r4)
   83474:	d9014117 	ldw	r4,1284(sp)
   83478:	8806d13a 	srli	r3,r17,4
   8347c:	1021883a 	mov	r16,r2
   83480:	213fffc4 	addi	r4,r4,-1
   83484:	d9014115 	stw	r4,1284(sp)
   83488:	d9814117 	ldw	r6,1284(sp)
   8348c:	10c8b03a 	or	r4,r2,r3
   83490:	1823883a 	mov	r17,r3
   83494:	31400005 	stb	r5,0(r6)
   83498:	203fef1e 	bne	r4,zero,83458 <___vfprintf_internal_r+0x1710>
   8349c:	003cc506 	br	827b4 <___vfprintf_internal_r+0xa6c>
   834a0:	00800c04 	movi	r2,48
   834a4:	d98018c4 	addi	r6,sp,99
   834a8:	dd000f04 	addi	r20,sp,60
   834ac:	d88018c5 	stb	r2,99(sp)
   834b0:	d9814115 	stw	r6,1284(sp)
   834b4:	003cbf06 	br	827b4 <___vfprintf_internal_r+0xa6c>
   834b8:	dc400d17 	ldw	r17,52(sp)
   834bc:	07000274 	movhi	fp,9
   834c0:	e73b2684 	addi	fp,fp,-4966
   834c4:	003bc106 	br	823cc <___vfprintf_internal_r+0x684>
   834c8:	d9414c17 	ldw	r5,1328(sp)
   834cc:	2880040c 	andi	r2,r5,16
   834d0:	10007c26 	beq	r2,zero,836c4 <___vfprintf_internal_r+0x197c>
   834d4:	38800017 	ldw	r2,0(r7)
   834d8:	39c00104 	addi	r7,r7,4
   834dc:	d9c14015 	stw	r7,1280(sp)
   834e0:	d9814b17 	ldw	r6,1324(sp)
   834e4:	d9c14017 	ldw	r7,1280(sp)
   834e8:	11800015 	stw	r6,0(r2)
   834ec:	003a7206 	br	81eb8 <___vfprintf_internal_r+0x170>
   834f0:	d9014f17 	ldw	r4,1340(sp)
   834f4:	b00b883a 	mov	r5,r22
   834f8:	d9800c04 	addi	r6,sp,48
   834fc:	0081cf00 	call	81cf0 <__sprint_r>
   83500:	103bc91e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   83504:	dc800e17 	ldw	r18,56(sp)
   83508:	dc400d17 	ldw	r17,52(sp)
   8350c:	d8c01904 	addi	r3,sp,100
   83510:	d9014717 	ldw	r4,1308(sp)
   83514:	d9414117 	ldw	r5,1284(sp)
   83518:	8c400044 	addi	r17,r17,1
   8351c:	9125883a 	add	r18,r18,r4
   83520:	008001c4 	movi	r2,7
   83524:	19400015 	stw	r5,0(r3)
   83528:	19000115 	stw	r4,4(r3)
   8352c:	dc800e15 	stw	r18,56(sp)
   83530:	dc400d15 	stw	r17,52(sp)
   83534:	147ce816 	blt	r2,r17,828d8 <___vfprintf_internal_r+0xb90>
   83538:	18c00204 	addi	r3,r3,8
   8353c:	003b8006 	br	82340 <___vfprintf_internal_r+0x5f8>
   83540:	38c00017 	ldw	r3,0(r7)
   83544:	39000204 	addi	r4,r7,8
   83548:	d9014015 	stw	r4,1280(sp)
   8354c:	d8c14215 	stw	r3,1288(sp)
   83550:	39c00117 	ldw	r7,4(r7)
   83554:	d9c14315 	stw	r7,1292(sp)
   83558:	003e1a06 	br	82dc4 <___vfprintf_internal_r+0x107c>
   8355c:	0005883a 	mov	r2,zero
   83560:	1409c83a 	sub	r4,r2,r16
   83564:	1105803a 	cmpltu	r2,r2,r4
   83568:	044bc83a 	sub	r5,zero,r17
   8356c:	2885c83a 	sub	r2,r5,r2
   83570:	2021883a 	mov	r16,r4
   83574:	1023883a 	mov	r17,r2
   83578:	01000044 	movi	r4,1
   8357c:	00800b44 	movi	r2,45
   83580:	d8800405 	stb	r2,16(sp)
   83584:	003c7e06 	br	82780 <___vfprintf_internal_r+0xa38>
   83588:	d9014f17 	ldw	r4,1340(sp)
   8358c:	b00b883a 	mov	r5,r22
   83590:	d9800c04 	addi	r6,sp,48
   83594:	0081cf00 	call	81cf0 <__sprint_r>
   83598:	103ba31e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8359c:	dc800e17 	ldw	r18,56(sp)
   835a0:	dc400d17 	ldw	r17,52(sp)
   835a4:	d9000517 	ldw	r4,20(sp)
   835a8:	d9401904 	addi	r5,sp,100
   835ac:	003da106 	br	82c34 <___vfprintf_internal_r+0xeec>
   835b0:	d9014f17 	ldw	r4,1340(sp)
   835b4:	b00b883a 	mov	r5,r22
   835b8:	d9800c04 	addi	r6,sp,48
   835bc:	0081cf00 	call	81cf0 <__sprint_r>
   835c0:	103b991e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   835c4:	dc800e17 	ldw	r18,56(sp)
   835c8:	dc400d17 	ldw	r17,52(sp)
   835cc:	d9000517 	ldw	r4,20(sp)
   835d0:	d8c01904 	addi	r3,sp,100
   835d4:	003d8b06 	br	82c04 <___vfprintf_internal_r+0xebc>
   835d8:	07000274 	movhi	fp,9
   835dc:	e73b2284 	addi	fp,fp,-4982
   835e0:	9425883a 	add	r18,r18,r16
   835e4:	8c400044 	addi	r17,r17,1
   835e8:	008001c4 	movi	r2,7
   835ec:	1f000015 	stw	fp,0(r3)
   835f0:	1c000115 	stw	r16,4(r3)
   835f4:	dc800e15 	stw	r18,56(sp)
   835f8:	dc400d15 	stw	r17,52(sp)
   835fc:	147fbc16 	blt	r2,r17,834f0 <___vfprintf_internal_r+0x17a8>
   83600:	18c00204 	addi	r3,r3,8
   83604:	003fc206 	br	83510 <___vfprintf_internal_r+0x17c8>
   83608:	d9014f17 	ldw	r4,1340(sp)
   8360c:	b00b883a 	mov	r5,r22
   83610:	d9800c04 	addi	r6,sp,48
   83614:	0081cf00 	call	81cf0 <__sprint_r>
   83618:	103b831e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8361c:	dc800e17 	ldw	r18,56(sp)
   83620:	d9000517 	ldw	r4,20(sp)
   83624:	d8c01904 	addi	r3,sp,100
   83628:	003cfc06 	br	82a1c <___vfprintf_internal_r+0xcd4>
   8362c:	07000274 	movhi	fp,9
   83630:	e73b2284 	addi	fp,fp,-4982
   83634:	003bde06 	br	825b0 <___vfprintf_internal_r+0x868>
   83638:	00800274 	movhi	r2,9
   8363c:	10bb1104 	addi	r2,r2,-5052
   83640:	d8814115 	stw	r2,1284(sp)
   83644:	003def06 	br	82e04 <___vfprintf_internal_r+0x10bc>
   83648:	d9014217 	ldw	r4,1288(sp)
   8364c:	d9414317 	ldw	r5,1292(sp)
   83650:	00887980 	call	88798 <__isnand>
   83654:	10003926 	beq	r2,zero,8373c <___vfprintf_internal_r+0x19f4>
   83658:	d9414d17 	ldw	r5,1332(sp)
   8365c:	008011c4 	movi	r2,71
   83660:	1140ce16 	blt	r2,r5,8399c <___vfprintf_internal_r+0x1c54>
   83664:	01800274 	movhi	r6,9
   83668:	31bb1204 	addi	r6,r6,-5048
   8366c:	d9814115 	stw	r6,1284(sp)
   83670:	003de406 	br	82e04 <___vfprintf_internal_r+0x10bc>
   83674:	d9014c17 	ldw	r4,1328(sp)
   83678:	bdc00044 	addi	r23,r23,1
   8367c:	b8c00007 	ldb	r3,0(r23)
   83680:	21000814 	ori	r4,r4,32
   83684:	d9014c15 	stw	r4,1328(sp)
   83688:	003a2e06 	br	81f44 <___vfprintf_internal_r+0x1fc>
   8368c:	dcc14515 	stw	r19,1300(sp)
   83690:	98011016 	blt	r19,zero,83ad4 <___vfprintf_internal_r+0x1d8c>
   83694:	980f883a 	mov	r7,r19
   83698:	d8014615 	stw	zero,1304(sp)
   8369c:	003c4c06 	br	827d0 <___vfprintf_internal_r+0xa88>
   836a0:	d9014f17 	ldw	r4,1340(sp)
   836a4:	b00b883a 	mov	r5,r22
   836a8:	d9800c04 	addi	r6,sp,48
   836ac:	0081cf00 	call	81cf0 <__sprint_r>
   836b0:	103b5d1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   836b4:	dc800e17 	ldw	r18,56(sp)
   836b8:	d9000517 	ldw	r4,20(sp)
   836bc:	d8c01904 	addi	r3,sp,100
   836c0:	003f2e06 	br	8337c <___vfprintf_internal_r+0x1634>
   836c4:	d8c14c17 	ldw	r3,1328(sp)
   836c8:	1880100c 	andi	r2,r3,64
   836cc:	1000a026 	beq	r2,zero,83950 <___vfprintf_internal_r+0x1c08>
   836d0:	38800017 	ldw	r2,0(r7)
   836d4:	39c00104 	addi	r7,r7,4
   836d8:	d9c14015 	stw	r7,1280(sp)
   836dc:	d9014b17 	ldw	r4,1324(sp)
   836e0:	d9c14017 	ldw	r7,1280(sp)
   836e4:	1100000d 	sth	r4,0(r2)
   836e8:	0039f306 	br	81eb8 <___vfprintf_internal_r+0x170>
   836ec:	d9014f17 	ldw	r4,1340(sp)
   836f0:	b00b883a 	mov	r5,r22
   836f4:	d9800c04 	addi	r6,sp,48
   836f8:	0081cf00 	call	81cf0 <__sprint_r>
   836fc:	103b4a1e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   83700:	dc800e17 	ldw	r18,56(sp)
   83704:	dc400d17 	ldw	r17,52(sp)
   83708:	d9000517 	ldw	r4,20(sp)
   8370c:	d8c01904 	addi	r3,sp,100
   83710:	003f2d06 	br	833c8 <___vfprintf_internal_r+0x1680>
   83714:	00800184 	movi	r2,6
   83718:	14c09a36 	bltu	r2,r19,83984 <___vfprintf_internal_r+0x1c3c>
   8371c:	dcc14515 	stw	r19,1300(sp)
   83720:	9800010e 	bge	r19,zero,83728 <___vfprintf_internal_r+0x19e0>
   83724:	d8014515 	stw	zero,1300(sp)
   83728:	00800274 	movhi	r2,9
   8372c:	10bb1404 	addi	r2,r2,-5040
   83730:	980f883a 	mov	r7,r19
   83734:	d8814115 	stw	r2,1284(sp)
   83738:	003a7206 	br	82104 <___vfprintf_internal_r+0x3bc>
   8373c:	00bfffc4 	movi	r2,-1
   83740:	9880e226 	beq	r19,r2,83acc <___vfprintf_internal_r+0x1d84>
   83744:	d9414d17 	ldw	r5,1332(sp)
   83748:	008019c4 	movi	r2,103
   8374c:	2880dc26 	beq	r5,r2,83ac0 <___vfprintf_internal_r+0x1d78>
   83750:	008011c4 	movi	r2,71
   83754:	2880da26 	beq	r5,r2,83ac0 <___vfprintf_internal_r+0x1d78>
   83758:	d9414c17 	ldw	r5,1328(sp)
   8375c:	d9014317 	ldw	r4,1292(sp)
   83760:	d9814217 	ldw	r6,1288(sp)
   83764:	29404014 	ori	r5,r5,256
   83768:	d9414c15 	stw	r5,1328(sp)
   8376c:	2000cc16 	blt	r4,zero,83aa0 <___vfprintf_internal_r+0x1d58>
   83770:	3021883a 	mov	r16,r6
   83774:	2023883a 	mov	r17,r4
   83778:	0039883a 	mov	fp,zero
   8377c:	d9414d17 	ldw	r5,1332(sp)
   83780:	00801984 	movi	r2,102
   83784:	2880b726 	beq	r5,r2,83a64 <___vfprintf_internal_r+0x1d1c>
   83788:	00801184 	movi	r2,70
   8378c:	2880b526 	beq	r5,r2,83a64 <___vfprintf_internal_r+0x1d1c>
   83790:	00801944 	movi	r2,101
   83794:	2880c826 	beq	r5,r2,83ab8 <___vfprintf_internal_r+0x1d70>
   83798:	00801144 	movi	r2,69
   8379c:	2880c626 	beq	r5,r2,83ab8 <___vfprintf_internal_r+0x1d70>
   837a0:	9829883a 	mov	r20,r19
   837a4:	d9014f17 	ldw	r4,1340(sp)
   837a8:	d8800504 	addi	r2,sp,20
   837ac:	880d883a 	mov	r6,r17
   837b0:	d8800115 	stw	r2,4(sp)
   837b4:	d8c00604 	addi	r3,sp,24
   837b8:	d8800704 	addi	r2,sp,28
   837bc:	800b883a 	mov	r5,r16
   837c0:	01c00084 	movi	r7,2
   837c4:	d8c00215 	stw	r3,8(sp)
   837c8:	d8800315 	stw	r2,12(sp)
   837cc:	dd000015 	stw	r20,0(sp)
   837d0:	0083fb00 	call	83fb0 <_dtoa_r>
   837d4:	d9814d17 	ldw	r6,1332(sp)
   837d8:	d8814115 	stw	r2,1284(sp)
   837dc:	008019c4 	movi	r2,103
   837e0:	30809526 	beq	r6,r2,83a38 <___vfprintf_internal_r+0x1cf0>
   837e4:	d8c14d17 	ldw	r3,1332(sp)
   837e8:	008011c4 	movi	r2,71
   837ec:	18809226 	beq	r3,r2,83a38 <___vfprintf_internal_r+0x1cf0>
   837f0:	d9414117 	ldw	r5,1284(sp)
   837f4:	d9814d17 	ldw	r6,1332(sp)
   837f8:	00801984 	movi	r2,102
   837fc:	2d25883a 	add	r18,r5,r20
   83800:	30808626 	beq	r6,r2,83a1c <___vfprintf_internal_r+0x1cd4>
   83804:	00801184 	movi	r2,70
   83808:	30808426 	beq	r6,r2,83a1c <___vfprintf_internal_r+0x1cd4>
   8380c:	000d883a 	mov	r6,zero
   83810:	000f883a 	mov	r7,zero
   83814:	880b883a 	mov	r5,r17
   83818:	8009883a 	mov	r4,r16
   8381c:	008a6d40 	call	8a6d4 <__eqdf2>
   83820:	1000751e 	bne	r2,zero,839f8 <___vfprintf_internal_r+0x1cb0>
   83824:	9005883a 	mov	r2,r18
   83828:	dc800715 	stw	r18,28(sp)
   8382c:	d9014117 	ldw	r4,1284(sp)
   83830:	d9414d17 	ldw	r5,1332(sp)
   83834:	00c019c4 	movi	r3,103
   83838:	1125c83a 	sub	r18,r2,r4
   8383c:	28c06826 	beq	r5,r3,839e0 <___vfprintf_internal_r+0x1c98>
   83840:	008011c4 	movi	r2,71
   83844:	28806626 	beq	r5,r2,839e0 <___vfprintf_internal_r+0x1c98>
   83848:	d9000517 	ldw	r4,20(sp)
   8384c:	d8c14d17 	ldw	r3,1332(sp)
   83850:	00801944 	movi	r2,101
   83854:	10c05516 	blt	r2,r3,839ac <___vfprintf_internal_r+0x1c64>
   83858:	213fffc4 	addi	r4,r4,-1
   8385c:	d9000515 	stw	r4,20(sp)
   83860:	d8c00805 	stb	r3,32(sp)
   83864:	2021883a 	mov	r16,r4
   83868:	2000c116 	blt	r4,zero,83b70 <___vfprintf_internal_r+0x1e28>
   8386c:	00800ac4 	movi	r2,43
   83870:	d8800845 	stb	r2,33(sp)
   83874:	00800244 	movi	r2,9
   83878:	1400af0e 	bge	r2,r16,83b38 <___vfprintf_internal_r+0x1df0>
   8387c:	1027883a 	mov	r19,r2
   83880:	dc400b84 	addi	r17,sp,46
   83884:	8009883a 	mov	r4,r16
   83888:	01400284 	movi	r5,10
   8388c:	008180c0 	call	8180c <__modsi3>
   83890:	10800c04 	addi	r2,r2,48
   83894:	8c7fffc4 	addi	r17,r17,-1
   83898:	8009883a 	mov	r4,r16
   8389c:	01400284 	movi	r5,10
   838a0:	88800005 	stb	r2,0(r17)
   838a4:	00817ac0 	call	817ac <__divsi3>
   838a8:	1021883a 	mov	r16,r2
   838ac:	98bff516 	blt	r19,r2,83884 <___vfprintf_internal_r+0x1b3c>
   838b0:	10c00c04 	addi	r3,r2,48
   838b4:	d88009c4 	addi	r2,sp,39
   838b8:	108001c4 	addi	r2,r2,7
   838bc:	897fffc4 	addi	r5,r17,-1
   838c0:	88ffffc5 	stb	r3,-1(r17)
   838c4:	2880a72e 	bgeu	r5,r2,83b64 <___vfprintf_internal_r+0x1e1c>
   838c8:	1009883a 	mov	r4,r2
   838cc:	d9800804 	addi	r6,sp,32
   838d0:	d8c00884 	addi	r3,sp,34
   838d4:	28800003 	ldbu	r2,0(r5)
   838d8:	29400044 	addi	r5,r5,1
   838dc:	18800005 	stb	r2,0(r3)
   838e0:	18c00044 	addi	r3,r3,1
   838e4:	293ffb36 	bltu	r5,r4,838d4 <___vfprintf_internal_r+0x1b8c>
   838e8:	1987c83a 	sub	r3,r3,r6
   838ec:	00800044 	movi	r2,1
   838f0:	d8c14815 	stw	r3,1312(sp)
   838f4:	90cf883a 	add	r7,r18,r3
   838f8:	1480960e 	bge	r2,r18,83b54 <___vfprintf_internal_r+0x1e0c>
   838fc:	39c00044 	addi	r7,r7,1
   83900:	d9c14515 	stw	r7,1300(sp)
   83904:	38003416 	blt	r7,zero,839d8 <___vfprintf_internal_r+0x1c90>
   83908:	e0803fcc 	andi	r2,fp,255
   8390c:	1080201c 	xori	r2,r2,128
   83910:	10bfe004 	addi	r2,r2,-128
   83914:	10004e26 	beq	r2,zero,83a50 <___vfprintf_internal_r+0x1d08>
   83918:	00800b44 	movi	r2,45
   8391c:	dc814715 	stw	r18,1308(sp)
   83920:	d8014615 	stw	zero,1304(sp)
   83924:	d8800405 	stb	r2,16(sp)
   83928:	003bab06 	br	827d8 <___vfprintf_internal_r+0xa90>
   8392c:	00800b44 	movi	r2,45
   83930:	d8800405 	stb	r2,16(sp)
   83934:	003d2d06 	br	82dec <___vfprintf_internal_r+0x10a4>
   83938:	d9014f17 	ldw	r4,1340(sp)
   8393c:	b00b883a 	mov	r5,r22
   83940:	d9800c04 	addi	r6,sp,48
   83944:	0081cf00 	call	81cf0 <__sprint_r>
   83948:	103ab71e 	bne	r2,zero,82428 <___vfprintf_internal_r+0x6e0>
   8394c:	003ab506 	br	82424 <___vfprintf_internal_r+0x6dc>
   83950:	38800017 	ldw	r2,0(r7)
   83954:	39c00104 	addi	r7,r7,4
   83958:	d9c14015 	stw	r7,1280(sp)
   8395c:	d9414b17 	ldw	r5,1324(sp)
   83960:	d9c14017 	ldw	r7,1280(sp)
   83964:	11400015 	stw	r5,0(r2)
   83968:	00395306 	br	81eb8 <___vfprintf_internal_r+0x170>
   8396c:	980f883a 	mov	r7,r19
   83970:	dcc14515 	stw	r19,1300(sp)
   83974:	d8014615 	stw	zero,1304(sp)
   83978:	003b9506 	br	827d0 <___vfprintf_internal_r+0xa88>
   8397c:	0027883a 	mov	r19,zero
   83980:	00397206 	br	81f4c <___vfprintf_internal_r+0x204>
   83984:	00c00274 	movhi	r3,9
   83988:	18fb1404 	addi	r3,r3,-5040
   8398c:	100f883a 	mov	r7,r2
   83990:	d8814515 	stw	r2,1300(sp)
   83994:	d8c14115 	stw	r3,1284(sp)
   83998:	0039da06 	br	82104 <___vfprintf_internal_r+0x3bc>
   8399c:	00800274 	movhi	r2,9
   839a0:	10bb1304 	addi	r2,r2,-5044
   839a4:	d8814115 	stw	r2,1284(sp)
   839a8:	003d1606 	br	82e04 <___vfprintf_internal_r+0x10bc>
   839ac:	d9414d17 	ldw	r5,1332(sp)
   839b0:	00801984 	movi	r2,102
   839b4:	28804926 	beq	r5,r2,83adc <___vfprintf_internal_r+0x1d94>
   839b8:	200f883a 	mov	r7,r4
   839bc:	24805716 	blt	r4,r18,83b1c <___vfprintf_internal_r+0x1dd4>
   839c0:	d9414c17 	ldw	r5,1328(sp)
   839c4:	2880004c 	andi	r2,r5,1
   839c8:	10000126 	beq	r2,zero,839d0 <___vfprintf_internal_r+0x1c88>
   839cc:	21c00044 	addi	r7,r4,1
   839d0:	d9c14515 	stw	r7,1300(sp)
   839d4:	383fcc0e 	bge	r7,zero,83908 <___vfprintf_internal_r+0x1bc0>
   839d8:	d8014515 	stw	zero,1300(sp)
   839dc:	003fca06 	br	83908 <___vfprintf_internal_r+0x1bc0>
   839e0:	d9000517 	ldw	r4,20(sp)
   839e4:	00bfff04 	movi	r2,-4
   839e8:	1100480e 	bge	r2,r4,83b0c <___vfprintf_internal_r+0x1dc4>
   839ec:	99004716 	blt	r19,r4,83b0c <___vfprintf_internal_r+0x1dc4>
   839f0:	d8c14d15 	stw	r3,1332(sp)
   839f4:	003ff006 	br	839b8 <___vfprintf_internal_r+0x1c70>
   839f8:	d8800717 	ldw	r2,28(sp)
   839fc:	14bf8b2e 	bgeu	r2,r18,8382c <___vfprintf_internal_r+0x1ae4>
   83a00:	9007883a 	mov	r3,r18
   83a04:	01000c04 	movi	r4,48
   83a08:	11000005 	stb	r4,0(r2)
   83a0c:	10800044 	addi	r2,r2,1
   83a10:	d8800715 	stw	r2,28(sp)
   83a14:	18bffc1e 	bne	r3,r2,83a08 <___vfprintf_internal_r+0x1cc0>
   83a18:	003f8406 	br	8382c <___vfprintf_internal_r+0x1ae4>
   83a1c:	d8814117 	ldw	r2,1284(sp)
   83a20:	10c00007 	ldb	r3,0(r2)
   83a24:	00800c04 	movi	r2,48
   83a28:	18805b26 	beq	r3,r2,83b98 <___vfprintf_internal_r+0x1e50>
   83a2c:	d9000517 	ldw	r4,20(sp)
   83a30:	9125883a 	add	r18,r18,r4
   83a34:	003f7506 	br	8380c <___vfprintf_internal_r+0x1ac4>
   83a38:	d9014c17 	ldw	r4,1328(sp)
   83a3c:	2080004c 	andi	r2,r4,1
   83a40:	1005003a 	cmpeq	r2,r2,zero
   83a44:	103f6a26 	beq	r2,zero,837f0 <___vfprintf_internal_r+0x1aa8>
   83a48:	d8800717 	ldw	r2,28(sp)
   83a4c:	003f7706 	br	8382c <___vfprintf_internal_r+0x1ae4>
   83a50:	d9c14515 	stw	r7,1300(sp)
   83a54:	38004d16 	blt	r7,zero,83b8c <___vfprintf_internal_r+0x1e44>
   83a58:	dc814715 	stw	r18,1308(sp)
   83a5c:	d8014615 	stw	zero,1304(sp)
   83a60:	003b5b06 	br	827d0 <___vfprintf_internal_r+0xa88>
   83a64:	d9014f17 	ldw	r4,1340(sp)
   83a68:	d8800504 	addi	r2,sp,20
   83a6c:	d8800115 	stw	r2,4(sp)
   83a70:	d8c00604 	addi	r3,sp,24
   83a74:	d8800704 	addi	r2,sp,28
   83a78:	800b883a 	mov	r5,r16
   83a7c:	880d883a 	mov	r6,r17
   83a80:	01c000c4 	movi	r7,3
   83a84:	d8c00215 	stw	r3,8(sp)
   83a88:	d8800315 	stw	r2,12(sp)
   83a8c:	dcc00015 	stw	r19,0(sp)
   83a90:	9829883a 	mov	r20,r19
   83a94:	0083fb00 	call	83fb0 <_dtoa_r>
   83a98:	d8814115 	stw	r2,1284(sp)
   83a9c:	003f5106 	br	837e4 <___vfprintf_internal_r+0x1a9c>
   83aa0:	d8c14217 	ldw	r3,1288(sp)
   83aa4:	d9014317 	ldw	r4,1292(sp)
   83aa8:	07000b44 	movi	fp,45
   83aac:	1821883a 	mov	r16,r3
   83ab0:	2460003c 	xorhi	r17,r4,32768
   83ab4:	003f3106 	br	8377c <___vfprintf_internal_r+0x1a34>
   83ab8:	9d000044 	addi	r20,r19,1
   83abc:	003f3906 	br	837a4 <___vfprintf_internal_r+0x1a5c>
   83ac0:	983f251e 	bne	r19,zero,83758 <___vfprintf_internal_r+0x1a10>
   83ac4:	04c00044 	movi	r19,1
   83ac8:	003f2306 	br	83758 <___vfprintf_internal_r+0x1a10>
   83acc:	04c00184 	movi	r19,6
   83ad0:	003f2106 	br	83758 <___vfprintf_internal_r+0x1a10>
   83ad4:	d8014515 	stw	zero,1300(sp)
   83ad8:	003eee06 	br	83694 <___vfprintf_internal_r+0x194c>
   83adc:	200f883a 	mov	r7,r4
   83ae0:	0100370e 	bge	zero,r4,83bc0 <___vfprintf_internal_r+0x1e78>
   83ae4:	9800031e 	bne	r19,zero,83af4 <___vfprintf_internal_r+0x1dac>
   83ae8:	d9814c17 	ldw	r6,1328(sp)
   83aec:	3080004c 	andi	r2,r6,1
   83af0:	103fb726 	beq	r2,zero,839d0 <___vfprintf_internal_r+0x1c88>
   83af4:	20800044 	addi	r2,r4,1
   83af8:	98a7883a 	add	r19,r19,r2
   83afc:	dcc14515 	stw	r19,1300(sp)
   83b00:	980f883a 	mov	r7,r19
   83b04:	983f800e 	bge	r19,zero,83908 <___vfprintf_internal_r+0x1bc0>
   83b08:	003fb306 	br	839d8 <___vfprintf_internal_r+0x1c90>
   83b0c:	d9814d17 	ldw	r6,1332(sp)
   83b10:	31bfff84 	addi	r6,r6,-2
   83b14:	d9814d15 	stw	r6,1332(sp)
   83b18:	003f4c06 	br	8384c <___vfprintf_internal_r+0x1b04>
   83b1c:	0100180e 	bge	zero,r4,83b80 <___vfprintf_internal_r+0x1e38>
   83b20:	00800044 	movi	r2,1
   83b24:	1485883a 	add	r2,r2,r18
   83b28:	d8814515 	stw	r2,1300(sp)
   83b2c:	100f883a 	mov	r7,r2
   83b30:	103f750e 	bge	r2,zero,83908 <___vfprintf_internal_r+0x1bc0>
   83b34:	003fa806 	br	839d8 <___vfprintf_internal_r+0x1c90>
   83b38:	80c00c04 	addi	r3,r16,48
   83b3c:	00800c04 	movi	r2,48
   83b40:	d8c008c5 	stb	r3,35(sp)
   83b44:	d9800804 	addi	r6,sp,32
   83b48:	d8c00904 	addi	r3,sp,36
   83b4c:	d8800885 	stb	r2,34(sp)
   83b50:	003f6506 	br	838e8 <___vfprintf_internal_r+0x1ba0>
   83b54:	d9014c17 	ldw	r4,1328(sp)
   83b58:	2084703a 	and	r2,r4,r2
   83b5c:	103f9c26 	beq	r2,zero,839d0 <___vfprintf_internal_r+0x1c88>
   83b60:	003f6606 	br	838fc <___vfprintf_internal_r+0x1bb4>
   83b64:	d9800804 	addi	r6,sp,32
   83b68:	d8c00884 	addi	r3,sp,34
   83b6c:	003f5e06 	br	838e8 <___vfprintf_internal_r+0x1ba0>
   83b70:	00800b44 	movi	r2,45
   83b74:	0121c83a 	sub	r16,zero,r4
   83b78:	d8800845 	stb	r2,33(sp)
   83b7c:	003f3d06 	br	83874 <___vfprintf_internal_r+0x1b2c>
   83b80:	00800084 	movi	r2,2
   83b84:	1105c83a 	sub	r2,r2,r4
   83b88:	003fe606 	br	83b24 <___vfprintf_internal_r+0x1ddc>
   83b8c:	d8014515 	stw	zero,1300(sp)
   83b90:	dc814715 	stw	r18,1308(sp)
   83b94:	003fb106 	br	83a5c <___vfprintf_internal_r+0x1d14>
   83b98:	000d883a 	mov	r6,zero
   83b9c:	000f883a 	mov	r7,zero
   83ba0:	8009883a 	mov	r4,r16
   83ba4:	880b883a 	mov	r5,r17
   83ba8:	008a75c0 	call	8a75c <__nedf2>
   83bac:	103f9f26 	beq	r2,zero,83a2c <___vfprintf_internal_r+0x1ce4>
   83bb0:	00800044 	movi	r2,1
   83bb4:	1509c83a 	sub	r4,r2,r20
   83bb8:	d9000515 	stw	r4,20(sp)
   83bbc:	003f9b06 	br	83a2c <___vfprintf_internal_r+0x1ce4>
   83bc0:	98000d1e 	bne	r19,zero,83bf8 <___vfprintf_internal_r+0x1eb0>
   83bc4:	d8c14c17 	ldw	r3,1328(sp)
   83bc8:	1880004c 	andi	r2,r3,1
   83bcc:	10000a1e 	bne	r2,zero,83bf8 <___vfprintf_internal_r+0x1eb0>
   83bd0:	01000044 	movi	r4,1
   83bd4:	200f883a 	mov	r7,r4
   83bd8:	d9014515 	stw	r4,1300(sp)
   83bdc:	003f4a06 	br	83908 <___vfprintf_internal_r+0x1bc0>
   83be0:	3cc00017 	ldw	r19,0(r7)
   83be4:	39c00104 	addi	r7,r7,4
   83be8:	983d0e0e 	bge	r19,zero,83024 <___vfprintf_internal_r+0x12dc>
   83bec:	b8c00007 	ldb	r3,0(r23)
   83bf0:	04ffffc4 	movi	r19,-1
   83bf4:	0038d306 	br	81f44 <___vfprintf_internal_r+0x1fc>
   83bf8:	9cc00084 	addi	r19,r19,2
   83bfc:	dcc14515 	stw	r19,1300(sp)
   83c00:	980f883a 	mov	r7,r19
   83c04:	983f400e 	bge	r19,zero,83908 <___vfprintf_internal_r+0x1bc0>
   83c08:	003f7306 	br	839d8 <___vfprintf_internal_r+0x1c90>

00083c0c <__vfprintf_internal>:
   83c0c:	00800274 	movhi	r2,9
   83c10:	10833a04 	addi	r2,r2,3304
   83c14:	2013883a 	mov	r9,r4
   83c18:	11000017 	ldw	r4,0(r2)
   83c1c:	2805883a 	mov	r2,r5
   83c20:	300f883a 	mov	r7,r6
   83c24:	480b883a 	mov	r5,r9
   83c28:	100d883a 	mov	r6,r2
   83c2c:	0081d481 	jmpi	81d48 <___vfprintf_internal_r>

00083c30 <__swsetup_r>:
   83c30:	00800274 	movhi	r2,9
   83c34:	10833a04 	addi	r2,r2,3304
   83c38:	10c00017 	ldw	r3,0(r2)
   83c3c:	defffd04 	addi	sp,sp,-12
   83c40:	dc400115 	stw	r17,4(sp)
   83c44:	dc000015 	stw	r16,0(sp)
   83c48:	dfc00215 	stw	ra,8(sp)
   83c4c:	2023883a 	mov	r17,r4
   83c50:	2821883a 	mov	r16,r5
   83c54:	18000226 	beq	r3,zero,83c60 <__swsetup_r+0x30>
   83c58:	18800e17 	ldw	r2,56(r3)
   83c5c:	10001f26 	beq	r2,zero,83cdc <__swsetup_r+0xac>
   83c60:	8100030b 	ldhu	r4,12(r16)
   83c64:	2080020c 	andi	r2,r4,8
   83c68:	10002826 	beq	r2,zero,83d0c <__swsetup_r+0xdc>
   83c6c:	81400417 	ldw	r5,16(r16)
   83c70:	28001d26 	beq	r5,zero,83ce8 <__swsetup_r+0xb8>
   83c74:	2080004c 	andi	r2,r4,1
   83c78:	1005003a 	cmpeq	r2,r2,zero
   83c7c:	10000b26 	beq	r2,zero,83cac <__swsetup_r+0x7c>
   83c80:	2080008c 	andi	r2,r4,2
   83c84:	10001226 	beq	r2,zero,83cd0 <__swsetup_r+0xa0>
   83c88:	0005883a 	mov	r2,zero
   83c8c:	80800215 	stw	r2,8(r16)
   83c90:	28000b26 	beq	r5,zero,83cc0 <__swsetup_r+0x90>
   83c94:	0005883a 	mov	r2,zero
   83c98:	dfc00217 	ldw	ra,8(sp)
   83c9c:	dc400117 	ldw	r17,4(sp)
   83ca0:	dc000017 	ldw	r16,0(sp)
   83ca4:	dec00304 	addi	sp,sp,12
   83ca8:	f800283a 	ret
   83cac:	80800517 	ldw	r2,20(r16)
   83cb0:	80000215 	stw	zero,8(r16)
   83cb4:	0085c83a 	sub	r2,zero,r2
   83cb8:	80800615 	stw	r2,24(r16)
   83cbc:	283ff51e 	bne	r5,zero,83c94 <__swsetup_r+0x64>
   83cc0:	2080200c 	andi	r2,r4,128
   83cc4:	103ff326 	beq	r2,zero,83c94 <__swsetup_r+0x64>
   83cc8:	00bfffc4 	movi	r2,-1
   83ccc:	003ff206 	br	83c98 <__swsetup_r+0x68>
   83cd0:	80800517 	ldw	r2,20(r16)
   83cd4:	80800215 	stw	r2,8(r16)
   83cd8:	003fed06 	br	83c90 <__swsetup_r+0x60>
   83cdc:	1809883a 	mov	r4,r3
   83ce0:	00857fc0 	call	857fc <__sinit>
   83ce4:	003fde06 	br	83c60 <__swsetup_r+0x30>
   83ce8:	20c0a00c 	andi	r3,r4,640
   83cec:	00808004 	movi	r2,512
   83cf0:	18bfe026 	beq	r3,r2,83c74 <__swsetup_r+0x44>
   83cf4:	8809883a 	mov	r4,r17
   83cf8:	800b883a 	mov	r5,r16
   83cfc:	00865a80 	call	865a8 <__smakebuf_r>
   83d00:	8100030b 	ldhu	r4,12(r16)
   83d04:	81400417 	ldw	r5,16(r16)
   83d08:	003fda06 	br	83c74 <__swsetup_r+0x44>
   83d0c:	2080040c 	andi	r2,r4,16
   83d10:	103fed26 	beq	r2,zero,83cc8 <__swsetup_r+0x98>
   83d14:	2080010c 	andi	r2,r4,4
   83d18:	10001226 	beq	r2,zero,83d64 <__swsetup_r+0x134>
   83d1c:	81400c17 	ldw	r5,48(r16)
   83d20:	28000526 	beq	r5,zero,83d38 <__swsetup_r+0x108>
   83d24:	80801004 	addi	r2,r16,64
   83d28:	28800226 	beq	r5,r2,83d34 <__swsetup_r+0x104>
   83d2c:	8809883a 	mov	r4,r17
   83d30:	0085bb40 	call	85bb4 <_free_r>
   83d34:	80000c15 	stw	zero,48(r16)
   83d38:	8080030b 	ldhu	r2,12(r16)
   83d3c:	81400417 	ldw	r5,16(r16)
   83d40:	80000115 	stw	zero,4(r16)
   83d44:	10bff6cc 	andi	r2,r2,65499
   83d48:	8080030d 	sth	r2,12(r16)
   83d4c:	81400015 	stw	r5,0(r16)
   83d50:	8080030b 	ldhu	r2,12(r16)
   83d54:	10800214 	ori	r2,r2,8
   83d58:	113fffcc 	andi	r4,r2,65535
   83d5c:	8080030d 	sth	r2,12(r16)
   83d60:	003fc306 	br	83c70 <__swsetup_r+0x40>
   83d64:	81400417 	ldw	r5,16(r16)
   83d68:	003ff906 	br	83d50 <__swsetup_r+0x120>

00083d6c <quorem>:
   83d6c:	28c00417 	ldw	r3,16(r5)
   83d70:	20800417 	ldw	r2,16(r4)
   83d74:	defff104 	addi	sp,sp,-60
   83d78:	dfc00e15 	stw	ra,56(sp)
   83d7c:	df000d15 	stw	fp,52(sp)
   83d80:	ddc00c15 	stw	r23,48(sp)
   83d84:	dd800b15 	stw	r22,44(sp)
   83d88:	dd400a15 	stw	r21,40(sp)
   83d8c:	dd000915 	stw	r20,36(sp)
   83d90:	dcc00815 	stw	r19,32(sp)
   83d94:	dc800715 	stw	r18,28(sp)
   83d98:	dc400615 	stw	r17,24(sp)
   83d9c:	dc000515 	stw	r16,20(sp)
   83da0:	d9000315 	stw	r4,12(sp)
   83da4:	d9400415 	stw	r5,16(sp)
   83da8:	10c07f16 	blt	r2,r3,83fa8 <quorem+0x23c>
   83dac:	1d3fffc4 	addi	r20,r3,-1
   83db0:	d8c00417 	ldw	r3,16(sp)
   83db4:	d9000317 	ldw	r4,12(sp)
   83db8:	a505883a 	add	r2,r20,r20
   83dbc:	1085883a 	add	r2,r2,r2
   83dc0:	1cc00504 	addi	r19,r3,20
   83dc4:	25c00504 	addi	r23,r4,20
   83dc8:	98ad883a 	add	r22,r19,r2
   83dcc:	15c7883a 	add	r3,r2,r23
   83dd0:	b1400017 	ldw	r5,0(r22)
   83dd4:	19000017 	ldw	r4,0(r3)
   83dd8:	d8c00015 	stw	r3,0(sp)
   83ddc:	29400044 	addi	r5,r5,1
   83de0:	d9000215 	stw	r4,8(sp)
   83de4:	008186c0 	call	8186c <__udivsi3>
   83de8:	1039883a 	mov	fp,r2
   83dec:	10003d1e 	bne	r2,zero,83ee4 <quorem+0x178>
   83df0:	d9400417 	ldw	r5,16(sp)
   83df4:	d9000317 	ldw	r4,12(sp)
   83df8:	00872340 	call	87234 <__mcmp>
   83dfc:	10002c16 	blt	r2,zero,83eb0 <quorem+0x144>
   83e00:	e7000044 	addi	fp,fp,1
   83e04:	b80f883a 	mov	r7,r23
   83e08:	0011883a 	mov	r8,zero
   83e0c:	0009883a 	mov	r4,zero
   83e10:	99400017 	ldw	r5,0(r19)
   83e14:	38c00017 	ldw	r3,0(r7)
   83e18:	9cc00104 	addi	r19,r19,4
   83e1c:	28bfffcc 	andi	r2,r5,65535
   83e20:	2085883a 	add	r2,r4,r2
   83e24:	11bfffcc 	andi	r6,r2,65535
   83e28:	193fffcc 	andi	r4,r3,65535
   83e2c:	1004d43a 	srli	r2,r2,16
   83e30:	280ad43a 	srli	r5,r5,16
   83e34:	2189c83a 	sub	r4,r4,r6
   83e38:	2209883a 	add	r4,r4,r8
   83e3c:	1806d43a 	srli	r3,r3,16
   83e40:	288b883a 	add	r5,r5,r2
   83e44:	200dd43a 	srai	r6,r4,16
   83e48:	28bfffcc 	andi	r2,r5,65535
   83e4c:	1887c83a 	sub	r3,r3,r2
   83e50:	1987883a 	add	r3,r3,r6
   83e54:	3900000d 	sth	r4,0(r7)
   83e58:	38c0008d 	sth	r3,2(r7)
   83e5c:	2808d43a 	srli	r4,r5,16
   83e60:	39c00104 	addi	r7,r7,4
   83e64:	1811d43a 	srai	r8,r3,16
   83e68:	b4ffe92e 	bgeu	r22,r19,83e10 <quorem+0xa4>
   83e6c:	a505883a 	add	r2,r20,r20
   83e70:	1085883a 	add	r2,r2,r2
   83e74:	b885883a 	add	r2,r23,r2
   83e78:	10c00017 	ldw	r3,0(r2)
   83e7c:	18000c1e 	bne	r3,zero,83eb0 <quorem+0x144>
   83e80:	113fff04 	addi	r4,r2,-4
   83e84:	b900082e 	bgeu	r23,r4,83ea8 <quorem+0x13c>
   83e88:	10bfff17 	ldw	r2,-4(r2)
   83e8c:	10000326 	beq	r2,zero,83e9c <quorem+0x130>
   83e90:	00000506 	br	83ea8 <quorem+0x13c>
   83e94:	20800017 	ldw	r2,0(r4)
   83e98:	1000031e 	bne	r2,zero,83ea8 <quorem+0x13c>
   83e9c:	213fff04 	addi	r4,r4,-4
   83ea0:	a53fffc4 	addi	r20,r20,-1
   83ea4:	b93ffb36 	bltu	r23,r4,83e94 <quorem+0x128>
   83ea8:	d9000317 	ldw	r4,12(sp)
   83eac:	25000415 	stw	r20,16(r4)
   83eb0:	e005883a 	mov	r2,fp
   83eb4:	dfc00e17 	ldw	ra,56(sp)
   83eb8:	df000d17 	ldw	fp,52(sp)
   83ebc:	ddc00c17 	ldw	r23,48(sp)
   83ec0:	dd800b17 	ldw	r22,44(sp)
   83ec4:	dd400a17 	ldw	r21,40(sp)
   83ec8:	dd000917 	ldw	r20,36(sp)
   83ecc:	dcc00817 	ldw	r19,32(sp)
   83ed0:	dc800717 	ldw	r18,28(sp)
   83ed4:	dc400617 	ldw	r17,24(sp)
   83ed8:	dc000517 	ldw	r16,20(sp)
   83edc:	dec00f04 	addi	sp,sp,60
   83ee0:	f800283a 	ret
   83ee4:	b823883a 	mov	r17,r23
   83ee8:	9825883a 	mov	r18,r19
   83eec:	d8000115 	stw	zero,4(sp)
   83ef0:	002b883a 	mov	r21,zero
   83ef4:	94000017 	ldw	r16,0(r18)
   83ef8:	e009883a 	mov	r4,fp
   83efc:	94800104 	addi	r18,r18,4
   83f00:	817fffcc 	andi	r5,r16,65535
   83f04:	008ace00 	call	8ace0 <__mulsi3>
   83f08:	800ad43a 	srli	r5,r16,16
   83f0c:	e009883a 	mov	r4,fp
   83f10:	a8a1883a 	add	r16,r21,r2
   83f14:	008ace00 	call	8ace0 <__mulsi3>
   83f18:	89000017 	ldw	r4,0(r17)
   83f1c:	80ffffcc 	andi	r3,r16,65535
   83f20:	8020d43a 	srli	r16,r16,16
   83f24:	217fffcc 	andi	r5,r4,65535
   83f28:	28cbc83a 	sub	r5,r5,r3
   83f2c:	d8c00117 	ldw	r3,4(sp)
   83f30:	2008d43a 	srli	r4,r4,16
   83f34:	1405883a 	add	r2,r2,r16
   83f38:	28cb883a 	add	r5,r5,r3
   83f3c:	280dd43a 	srai	r6,r5,16
   83f40:	10ffffcc 	andi	r3,r2,65535
   83f44:	20c9c83a 	sub	r4,r4,r3
   83f48:	2189883a 	add	r4,r4,r6
   83f4c:	8900008d 	sth	r4,2(r17)
   83f50:	2009d43a 	srai	r4,r4,16
   83f54:	8940000d 	sth	r5,0(r17)
   83f58:	102ad43a 	srli	r21,r2,16
   83f5c:	8c400104 	addi	r17,r17,4
   83f60:	d9000115 	stw	r4,4(sp)
   83f64:	b4bfe32e 	bgeu	r22,r18,83ef4 <quorem+0x188>
   83f68:	d9000217 	ldw	r4,8(sp)
   83f6c:	203fa01e 	bne	r4,zero,83df0 <quorem+0x84>
   83f70:	d8800017 	ldw	r2,0(sp)
   83f74:	10ffff04 	addi	r3,r2,-4
   83f78:	b8c0082e 	bgeu	r23,r3,83f9c <quorem+0x230>
   83f7c:	10bfff17 	ldw	r2,-4(r2)
   83f80:	10000326 	beq	r2,zero,83f90 <quorem+0x224>
   83f84:	00000506 	br	83f9c <quorem+0x230>
   83f88:	18800017 	ldw	r2,0(r3)
   83f8c:	1000031e 	bne	r2,zero,83f9c <quorem+0x230>
   83f90:	18ffff04 	addi	r3,r3,-4
   83f94:	a53fffc4 	addi	r20,r20,-1
   83f98:	b8fffb36 	bltu	r23,r3,83f88 <quorem+0x21c>
   83f9c:	d8c00317 	ldw	r3,12(sp)
   83fa0:	1d000415 	stw	r20,16(r3)
   83fa4:	003f9206 	br	83df0 <quorem+0x84>
   83fa8:	0005883a 	mov	r2,zero
   83fac:	003fc106 	br	83eb4 <quorem+0x148>

00083fb0 <_dtoa_r>:
   83fb0:	22001017 	ldw	r8,64(r4)
   83fb4:	deffda04 	addi	sp,sp,-152
   83fb8:	dd402115 	stw	r21,132(sp)
   83fbc:	dd002015 	stw	r20,128(sp)
   83fc0:	dc801e15 	stw	r18,120(sp)
   83fc4:	dc401d15 	stw	r17,116(sp)
   83fc8:	dfc02515 	stw	ra,148(sp)
   83fcc:	df002415 	stw	fp,144(sp)
   83fd0:	ddc02315 	stw	r23,140(sp)
   83fd4:	dd802215 	stw	r22,136(sp)
   83fd8:	dcc01f15 	stw	r19,124(sp)
   83fdc:	dc001c15 	stw	r16,112(sp)
   83fe0:	d9001615 	stw	r4,88(sp)
   83fe4:	3023883a 	mov	r17,r6
   83fe8:	2829883a 	mov	r20,r5
   83fec:	d9c01715 	stw	r7,92(sp)
   83ff0:	dc802817 	ldw	r18,160(sp)
   83ff4:	302b883a 	mov	r21,r6
   83ff8:	40000a26 	beq	r8,zero,84024 <_dtoa_r+0x74>
   83ffc:	20801117 	ldw	r2,68(r4)
   84000:	400b883a 	mov	r5,r8
   84004:	40800115 	stw	r2,4(r8)
   84008:	20c01117 	ldw	r3,68(r4)
   8400c:	00800044 	movi	r2,1
   84010:	10c4983a 	sll	r2,r2,r3
   84014:	40800215 	stw	r2,8(r8)
   84018:	00870d80 	call	870d8 <_Bfree>
   8401c:	d8c01617 	ldw	r3,88(sp)
   84020:	18001015 	stw	zero,64(r3)
   84024:	8800a316 	blt	r17,zero,842b4 <_dtoa_r+0x304>
   84028:	90000015 	stw	zero,0(r18)
   8402c:	a8dffc2c 	andhi	r3,r21,32752
   84030:	009ffc34 	movhi	r2,32752
   84034:	18809126 	beq	r3,r2,8427c <_dtoa_r+0x2cc>
   84038:	000d883a 	mov	r6,zero
   8403c:	000f883a 	mov	r7,zero
   84040:	a009883a 	mov	r4,r20
   84044:	a80b883a 	mov	r5,r21
   84048:	dd001215 	stw	r20,72(sp)
   8404c:	dd401315 	stw	r21,76(sp)
   84050:	008a75c0 	call	8a75c <__nedf2>
   84054:	1000171e 	bne	r2,zero,840b4 <_dtoa_r+0x104>
   84058:	d9802717 	ldw	r6,156(sp)
   8405c:	00800044 	movi	r2,1
   84060:	30800015 	stw	r2,0(r6)
   84064:	d8802917 	ldw	r2,164(sp)
   84068:	10029b26 	beq	r2,zero,84ad8 <_dtoa_r+0xb28>
   8406c:	d9002917 	ldw	r4,164(sp)
   84070:	00800274 	movhi	r2,9
   84074:	10bb2244 	addi	r2,r2,-4983
   84078:	10ffffc4 	addi	r3,r2,-1
   8407c:	20800015 	stw	r2,0(r4)
   84080:	1805883a 	mov	r2,r3
   84084:	dfc02517 	ldw	ra,148(sp)
   84088:	df002417 	ldw	fp,144(sp)
   8408c:	ddc02317 	ldw	r23,140(sp)
   84090:	dd802217 	ldw	r22,136(sp)
   84094:	dd402117 	ldw	r21,132(sp)
   84098:	dd002017 	ldw	r20,128(sp)
   8409c:	dcc01f17 	ldw	r19,124(sp)
   840a0:	dc801e17 	ldw	r18,120(sp)
   840a4:	dc401d17 	ldw	r17,116(sp)
   840a8:	dc001c17 	ldw	r16,112(sp)
   840ac:	dec02604 	addi	sp,sp,152
   840b0:	f800283a 	ret
   840b4:	d9001617 	ldw	r4,88(sp)
   840b8:	d9401217 	ldw	r5,72(sp)
   840bc:	d8800104 	addi	r2,sp,4
   840c0:	a80d883a 	mov	r6,r21
   840c4:	d9c00204 	addi	r7,sp,8
   840c8:	d8800015 	stw	r2,0(sp)
   840cc:	00877140 	call	87714 <__d2b>
   840d0:	d8800715 	stw	r2,28(sp)
   840d4:	a804d53a 	srli	r2,r21,20
   840d8:	1101ffcc 	andi	r4,r2,2047
   840dc:	20008626 	beq	r4,zero,842f8 <_dtoa_r+0x348>
   840e0:	d8c01217 	ldw	r3,72(sp)
   840e4:	00800434 	movhi	r2,16
   840e8:	10bfffc4 	addi	r2,r2,-1
   840ec:	ddc00117 	ldw	r23,4(sp)
   840f0:	a884703a 	and	r2,r21,r2
   840f4:	1811883a 	mov	r8,r3
   840f8:	124ffc34 	orhi	r9,r2,16368
   840fc:	25bf0044 	addi	r22,r4,-1023
   84100:	d8000815 	stw	zero,32(sp)
   84104:	0005883a 	mov	r2,zero
   84108:	00cffe34 	movhi	r3,16376
   8410c:	480b883a 	mov	r5,r9
   84110:	4009883a 	mov	r4,r8
   84114:	180f883a 	mov	r7,r3
   84118:	100d883a 	mov	r6,r2
   8411c:	0089fc40 	call	89fc4 <__subdf3>
   84120:	0218dbf4 	movhi	r8,25455
   84124:	4210d844 	addi	r8,r8,17249
   84128:	024ff4f4 	movhi	r9,16339
   8412c:	4a61e9c4 	addi	r9,r9,-30809
   84130:	480f883a 	mov	r7,r9
   84134:	400d883a 	mov	r6,r8
   84138:	180b883a 	mov	r5,r3
   8413c:	1009883a 	mov	r4,r2
   84140:	008a0b80 	call	8a0b8 <__muldf3>
   84144:	0222d874 	movhi	r8,35681
   84148:	42322cc4 	addi	r8,r8,-14157
   8414c:	024ff1f4 	movhi	r9,16327
   84150:	4a628a04 	addi	r9,r9,-30168
   84154:	480f883a 	mov	r7,r9
   84158:	400d883a 	mov	r6,r8
   8415c:	180b883a 	mov	r5,r3
   84160:	1009883a 	mov	r4,r2
   84164:	008a0440 	call	8a044 <__adddf3>
   84168:	b009883a 	mov	r4,r22
   8416c:	1021883a 	mov	r16,r2
   84170:	1823883a 	mov	r17,r3
   84174:	008a97c0 	call	8a97c <__floatsidf>
   84178:	021427f4 	movhi	r8,20639
   8417c:	421e7ec4 	addi	r8,r8,31227
   84180:	024ff4f4 	movhi	r9,16339
   84184:	4a5104c4 	addi	r9,r9,17427
   84188:	480f883a 	mov	r7,r9
   8418c:	400d883a 	mov	r6,r8
   84190:	180b883a 	mov	r5,r3
   84194:	1009883a 	mov	r4,r2
   84198:	008a0b80 	call	8a0b8 <__muldf3>
   8419c:	180f883a 	mov	r7,r3
   841a0:	880b883a 	mov	r5,r17
   841a4:	100d883a 	mov	r6,r2
   841a8:	8009883a 	mov	r4,r16
   841ac:	008a0440 	call	8a044 <__adddf3>
   841b0:	1009883a 	mov	r4,r2
   841b4:	180b883a 	mov	r5,r3
   841b8:	1021883a 	mov	r16,r2
   841bc:	1823883a 	mov	r17,r3
   841c0:	008aa740 	call	8aa74 <__fixdfsi>
   841c4:	000d883a 	mov	r6,zero
   841c8:	000f883a 	mov	r7,zero
   841cc:	8009883a 	mov	r4,r16
   841d0:	880b883a 	mov	r5,r17
   841d4:	d8800d15 	stw	r2,52(sp)
   841d8:	008a8f40 	call	8a8f4 <__ltdf2>
   841dc:	10031716 	blt	r2,zero,84e3c <_dtoa_r+0xe8c>
   841e0:	d8c00d17 	ldw	r3,52(sp)
   841e4:	00800584 	movi	r2,22
   841e8:	10c1482e 	bgeu	r2,r3,8470c <_dtoa_r+0x75c>
   841ec:	01000044 	movi	r4,1
   841f0:	d9000c15 	stw	r4,48(sp)
   841f4:	bd85c83a 	sub	r2,r23,r22
   841f8:	11bfffc4 	addi	r6,r2,-1
   841fc:	30030b16 	blt	r6,zero,84e2c <_dtoa_r+0xe7c>
   84200:	d9800a15 	stw	r6,40(sp)
   84204:	d8001115 	stw	zero,68(sp)
   84208:	d8c00d17 	ldw	r3,52(sp)
   8420c:	1802ff16 	blt	r3,zero,84e0c <_dtoa_r+0xe5c>
   84210:	d9000a17 	ldw	r4,40(sp)
   84214:	d8c00915 	stw	r3,36(sp)
   84218:	d8001015 	stw	zero,64(sp)
   8421c:	20c9883a 	add	r4,r4,r3
   84220:	d9000a15 	stw	r4,40(sp)
   84224:	d9001717 	ldw	r4,92(sp)
   84228:	00800244 	movi	r2,9
   8422c:	11004636 	bltu	r2,r4,84348 <_dtoa_r+0x398>
   84230:	00800144 	movi	r2,5
   84234:	11020416 	blt	r2,r4,84a48 <_dtoa_r+0xa98>
   84238:	04400044 	movi	r17,1
   8423c:	d8c01717 	ldw	r3,92(sp)
   84240:	00800144 	movi	r2,5
   84244:	10c1ed36 	bltu	r2,r3,849fc <_dtoa_r+0xa4c>
   84248:	18c5883a 	add	r2,r3,r3
   8424c:	1085883a 	add	r2,r2,r2
   84250:	00c00234 	movhi	r3,8
   84254:	18d09904 	addi	r3,r3,16996
   84258:	10c5883a 	add	r2,r2,r3
   8425c:	11000017 	ldw	r4,0(r2)
   84260:	2000683a 	jmp	r4
   84264:	00084350 	cmplti	zero,zero,8461
   84268:	00084350 	cmplti	zero,zero,8461
   8426c:	00084d50 	cmplti	zero,zero,8501
   84270:	00084d28 	cmpgeui	zero,zero,8500
   84274:	00084d6c 	andhi	zero,zero,8501
   84278:	00084d78 	rdprs	zero,zero,8501
   8427c:	d9002717 	ldw	r4,156(sp)
   84280:	0089c3c4 	movi	r2,9999
   84284:	20800015 	stw	r2,0(r4)
   84288:	a0001026 	beq	r20,zero,842cc <_dtoa_r+0x31c>
   8428c:	00c00274 	movhi	r3,9
   84290:	18fbce04 	addi	r3,r3,-4296
   84294:	d9802917 	ldw	r6,164(sp)
   84298:	303f7926 	beq	r6,zero,84080 <_dtoa_r+0xd0>
   8429c:	188000c7 	ldb	r2,3(r3)
   842a0:	190000c4 	addi	r4,r3,3
   842a4:	1000101e 	bne	r2,zero,842e8 <_dtoa_r+0x338>
   842a8:	d8802917 	ldw	r2,164(sp)
   842ac:	11000015 	stw	r4,0(r2)
   842b0:	003f7306 	br	84080 <_dtoa_r+0xd0>
   842b4:	00a00034 	movhi	r2,32768
   842b8:	10bfffc4 	addi	r2,r2,-1
   842bc:	00c00044 	movi	r3,1
   842c0:	88aa703a 	and	r21,r17,r2
   842c4:	90c00015 	stw	r3,0(r18)
   842c8:	003f5806 	br	8402c <_dtoa_r+0x7c>
   842cc:	00800434 	movhi	r2,16
   842d0:	10bfffc4 	addi	r2,r2,-1
   842d4:	a884703a 	and	r2,r21,r2
   842d8:	103fec1e 	bne	r2,zero,8428c <_dtoa_r+0x2dc>
   842dc:	00c00274 	movhi	r3,9
   842e0:	18fbcb04 	addi	r3,r3,-4308
   842e4:	003feb06 	br	84294 <_dtoa_r+0x2e4>
   842e8:	d8802917 	ldw	r2,164(sp)
   842ec:	19000204 	addi	r4,r3,8
   842f0:	11000015 	stw	r4,0(r2)
   842f4:	003f6206 	br	84080 <_dtoa_r+0xd0>
   842f8:	ddc00117 	ldw	r23,4(sp)
   842fc:	d8800217 	ldw	r2,8(sp)
   84300:	01000804 	movi	r4,32
   84304:	b8c10c84 	addi	r3,r23,1074
   84308:	18a3883a 	add	r17,r3,r2
   8430c:	2441b80e 	bge	r4,r17,849f0 <_dtoa_r+0xa40>
   84310:	00c01004 	movi	r3,64
   84314:	1c47c83a 	sub	r3,r3,r17
   84318:	88bff804 	addi	r2,r17,-32
   8431c:	a8c6983a 	sll	r3,r21,r3
   84320:	a084d83a 	srl	r2,r20,r2
   84324:	1888b03a 	or	r4,r3,r2
   84328:	008ab4c0 	call	8ab4c <__floatunsidf>
   8432c:	1011883a 	mov	r8,r2
   84330:	00bf8434 	movhi	r2,65040
   84334:	01000044 	movi	r4,1
   84338:	10d3883a 	add	r9,r2,r3
   8433c:	8dbef344 	addi	r22,r17,-1075
   84340:	d9000815 	stw	r4,32(sp)
   84344:	003f6f06 	br	84104 <_dtoa_r+0x154>
   84348:	d8001715 	stw	zero,92(sp)
   8434c:	04400044 	movi	r17,1
   84350:	00bfffc4 	movi	r2,-1
   84354:	00c00044 	movi	r3,1
   84358:	d8800e15 	stw	r2,56(sp)
   8435c:	d8002615 	stw	zero,152(sp)
   84360:	d8800f15 	stw	r2,60(sp)
   84364:	d8c00b15 	stw	r3,44(sp)
   84368:	1021883a 	mov	r16,r2
   8436c:	d8801617 	ldw	r2,88(sp)
   84370:	10001115 	stw	zero,68(r2)
   84374:	d8801617 	ldw	r2,88(sp)
   84378:	11401117 	ldw	r5,68(r2)
   8437c:	1009883a 	mov	r4,r2
   84380:	00876580 	call	87658 <_Balloc>
   84384:	d8c01617 	ldw	r3,88(sp)
   84388:	d8800515 	stw	r2,20(sp)
   8438c:	18801015 	stw	r2,64(r3)
   84390:	00800384 	movi	r2,14
   84394:	14006836 	bltu	r2,r16,84538 <_dtoa_r+0x588>
   84398:	8805003a 	cmpeq	r2,r17,zero
   8439c:	1000661e 	bne	r2,zero,84538 <_dtoa_r+0x588>
   843a0:	d9000d17 	ldw	r4,52(sp)
   843a4:	0102300e 	bge	zero,r4,84c68 <_dtoa_r+0xcb8>
   843a8:	208003cc 	andi	r2,r4,15
   843ac:	100490fa 	slli	r2,r2,3
   843b0:	2025d13a 	srai	r18,r4,4
   843b4:	00c00274 	movhi	r3,9
   843b8:	18fbe004 	addi	r3,r3,-4224
   843bc:	10c5883a 	add	r2,r2,r3
   843c0:	90c0040c 	andi	r3,r18,16
   843c4:	14000017 	ldw	r16,0(r2)
   843c8:	14400117 	ldw	r17,4(r2)
   843cc:	18036a1e 	bne	r3,zero,85178 <_dtoa_r+0x11c8>
   843d0:	05800084 	movi	r22,2
   843d4:	90001026 	beq	r18,zero,84418 <_dtoa_r+0x468>
   843d8:	04c00274 	movhi	r19,9
   843dc:	9cfc1204 	addi	r19,r19,-4024
   843e0:	9080004c 	andi	r2,r18,1
   843e4:	1005003a 	cmpeq	r2,r2,zero
   843e8:	1000081e 	bne	r2,zero,8440c <_dtoa_r+0x45c>
   843ec:	99800017 	ldw	r6,0(r19)
   843f0:	99c00117 	ldw	r7,4(r19)
   843f4:	880b883a 	mov	r5,r17
   843f8:	8009883a 	mov	r4,r16
   843fc:	008a0b80 	call	8a0b8 <__muldf3>
   84400:	1021883a 	mov	r16,r2
   84404:	b5800044 	addi	r22,r22,1
   84408:	1823883a 	mov	r17,r3
   8440c:	9025d07a 	srai	r18,r18,1
   84410:	9cc00204 	addi	r19,r19,8
   84414:	903ff21e 	bne	r18,zero,843e0 <_dtoa_r+0x430>
   84418:	a80b883a 	mov	r5,r21
   8441c:	a009883a 	mov	r4,r20
   84420:	880f883a 	mov	r7,r17
   84424:	800d883a 	mov	r6,r16
   84428:	008a47c0 	call	8a47c <__divdf3>
   8442c:	1029883a 	mov	r20,r2
   84430:	182b883a 	mov	r21,r3
   84434:	d8c00c17 	ldw	r3,48(sp)
   84438:	1805003a 	cmpeq	r2,r3,zero
   8443c:	1000081e 	bne	r2,zero,84460 <_dtoa_r+0x4b0>
   84440:	0005883a 	mov	r2,zero
   84444:	00cffc34 	movhi	r3,16368
   84448:	180f883a 	mov	r7,r3
   8444c:	a009883a 	mov	r4,r20
   84450:	a80b883a 	mov	r5,r21
   84454:	100d883a 	mov	r6,r2
   84458:	008a8f40 	call	8a8f4 <__ltdf2>
   8445c:	1003fe16 	blt	r2,zero,85458 <_dtoa_r+0x14a8>
   84460:	b009883a 	mov	r4,r22
   84464:	008a97c0 	call	8a97c <__floatsidf>
   84468:	180b883a 	mov	r5,r3
   8446c:	1009883a 	mov	r4,r2
   84470:	a00d883a 	mov	r6,r20
   84474:	a80f883a 	mov	r7,r21
   84478:	008a0b80 	call	8a0b8 <__muldf3>
   8447c:	0011883a 	mov	r8,zero
   84480:	02500734 	movhi	r9,16412
   84484:	1009883a 	mov	r4,r2
   84488:	180b883a 	mov	r5,r3
   8448c:	480f883a 	mov	r7,r9
   84490:	400d883a 	mov	r6,r8
   84494:	008a0440 	call	8a044 <__adddf3>
   84498:	d9000f17 	ldw	r4,60(sp)
   8449c:	102d883a 	mov	r22,r2
   844a0:	00bf3034 	movhi	r2,64704
   844a4:	18b9883a 	add	fp,r3,r2
   844a8:	e02f883a 	mov	r23,fp
   844ac:	20028f1e 	bne	r4,zero,84eec <_dtoa_r+0xf3c>
   844b0:	0005883a 	mov	r2,zero
   844b4:	00d00534 	movhi	r3,16404
   844b8:	a009883a 	mov	r4,r20
   844bc:	a80b883a 	mov	r5,r21
   844c0:	180f883a 	mov	r7,r3
   844c4:	100d883a 	mov	r6,r2
   844c8:	0089fc40 	call	89fc4 <__subdf3>
   844cc:	1009883a 	mov	r4,r2
   844d0:	e00f883a 	mov	r7,fp
   844d4:	180b883a 	mov	r5,r3
   844d8:	b00d883a 	mov	r6,r22
   844dc:	1025883a 	mov	r18,r2
   844e0:	1827883a 	mov	r19,r3
   844e4:	008a7e40 	call	8a7e4 <__gtdf2>
   844e8:	00834f16 	blt	zero,r2,85228 <_dtoa_r+0x1278>
   844ec:	e0e0003c 	xorhi	r3,fp,32768
   844f0:	9009883a 	mov	r4,r18
   844f4:	980b883a 	mov	r5,r19
   844f8:	180f883a 	mov	r7,r3
   844fc:	b00d883a 	mov	r6,r22
   84500:	008a8f40 	call	8a8f4 <__ltdf2>
   84504:	1000080e 	bge	r2,zero,84528 <_dtoa_r+0x578>
   84508:	0027883a 	mov	r19,zero
   8450c:	0025883a 	mov	r18,zero
   84510:	d8802617 	ldw	r2,152(sp)
   84514:	df000517 	ldw	fp,20(sp)
   84518:	d8000615 	stw	zero,24(sp)
   8451c:	0084303a 	nor	r2,zero,r2
   84520:	d8800d15 	stw	r2,52(sp)
   84524:	00019b06 	br	84b94 <_dtoa_r+0xbe4>
   84528:	d9801217 	ldw	r6,72(sp)
   8452c:	d8801317 	ldw	r2,76(sp)
   84530:	3029883a 	mov	r20,r6
   84534:	102b883a 	mov	r21,r2
   84538:	d8c00217 	ldw	r3,8(sp)
   8453c:	18008516 	blt	r3,zero,84754 <_dtoa_r+0x7a4>
   84540:	d9000d17 	ldw	r4,52(sp)
   84544:	00800384 	movi	r2,14
   84548:	11008216 	blt	r2,r4,84754 <_dtoa_r+0x7a4>
   8454c:	200490fa 	slli	r2,r4,3
   84550:	d9802617 	ldw	r6,152(sp)
   84554:	00c00274 	movhi	r3,9
   84558:	18fbe004 	addi	r3,r3,-4224
   8455c:	10c5883a 	add	r2,r2,r3
   84560:	14800017 	ldw	r18,0(r2)
   84564:	14c00117 	ldw	r19,4(r2)
   84568:	30031e16 	blt	r6,zero,851e4 <_dtoa_r+0x1234>
   8456c:	d9000517 	ldw	r4,20(sp)
   84570:	d8c00f17 	ldw	r3,60(sp)
   84574:	a823883a 	mov	r17,r21
   84578:	a021883a 	mov	r16,r20
   8457c:	192b883a 	add	r21,r3,r4
   84580:	2039883a 	mov	fp,r4
   84584:	00000f06 	br	845c4 <_dtoa_r+0x614>
   84588:	0005883a 	mov	r2,zero
   8458c:	00d00934 	movhi	r3,16420
   84590:	5009883a 	mov	r4,r10
   84594:	580b883a 	mov	r5,r11
   84598:	180f883a 	mov	r7,r3
   8459c:	100d883a 	mov	r6,r2
   845a0:	008a0b80 	call	8a0b8 <__muldf3>
   845a4:	180b883a 	mov	r5,r3
   845a8:	000d883a 	mov	r6,zero
   845ac:	000f883a 	mov	r7,zero
   845b0:	1009883a 	mov	r4,r2
   845b4:	1021883a 	mov	r16,r2
   845b8:	1823883a 	mov	r17,r3
   845bc:	008a75c0 	call	8a75c <__nedf2>
   845c0:	10004526 	beq	r2,zero,846d8 <_dtoa_r+0x728>
   845c4:	900d883a 	mov	r6,r18
   845c8:	980f883a 	mov	r7,r19
   845cc:	8009883a 	mov	r4,r16
   845d0:	880b883a 	mov	r5,r17
   845d4:	008a47c0 	call	8a47c <__divdf3>
   845d8:	180b883a 	mov	r5,r3
   845dc:	1009883a 	mov	r4,r2
   845e0:	008aa740 	call	8aa74 <__fixdfsi>
   845e4:	1009883a 	mov	r4,r2
   845e8:	1029883a 	mov	r20,r2
   845ec:	008a97c0 	call	8a97c <__floatsidf>
   845f0:	180f883a 	mov	r7,r3
   845f4:	9009883a 	mov	r4,r18
   845f8:	980b883a 	mov	r5,r19
   845fc:	100d883a 	mov	r6,r2
   84600:	008a0b80 	call	8a0b8 <__muldf3>
   84604:	180f883a 	mov	r7,r3
   84608:	880b883a 	mov	r5,r17
   8460c:	8009883a 	mov	r4,r16
   84610:	100d883a 	mov	r6,r2
   84614:	0089fc40 	call	89fc4 <__subdf3>
   84618:	1015883a 	mov	r10,r2
   8461c:	a0800c04 	addi	r2,r20,48
   84620:	e0800005 	stb	r2,0(fp)
   84624:	e7000044 	addi	fp,fp,1
   84628:	1817883a 	mov	r11,r3
   8462c:	e57fd61e 	bne	fp,r21,84588 <_dtoa_r+0x5d8>
   84630:	500d883a 	mov	r6,r10
   84634:	180f883a 	mov	r7,r3
   84638:	5009883a 	mov	r4,r10
   8463c:	180b883a 	mov	r5,r3
   84640:	008a0440 	call	8a044 <__adddf3>
   84644:	100d883a 	mov	r6,r2
   84648:	9009883a 	mov	r4,r18
   8464c:	980b883a 	mov	r5,r19
   84650:	180f883a 	mov	r7,r3
   84654:	1021883a 	mov	r16,r2
   84658:	1823883a 	mov	r17,r3
   8465c:	008a8f40 	call	8a8f4 <__ltdf2>
   84660:	10000816 	blt	r2,zero,84684 <_dtoa_r+0x6d4>
   84664:	980b883a 	mov	r5,r19
   84668:	800d883a 	mov	r6,r16
   8466c:	880f883a 	mov	r7,r17
   84670:	9009883a 	mov	r4,r18
   84674:	008a6d40 	call	8a6d4 <__eqdf2>
   84678:	1000171e 	bne	r2,zero,846d8 <_dtoa_r+0x728>
   8467c:	a080004c 	andi	r2,r20,1
   84680:	10001526 	beq	r2,zero,846d8 <_dtoa_r+0x728>
   84684:	d8800d17 	ldw	r2,52(sp)
   84688:	d8800415 	stw	r2,16(sp)
   8468c:	e009883a 	mov	r4,fp
   84690:	213fffc4 	addi	r4,r4,-1
   84694:	20c00007 	ldb	r3,0(r4)
   84698:	00800e44 	movi	r2,57
   8469c:	1880081e 	bne	r3,r2,846c0 <_dtoa_r+0x710>
   846a0:	d8800517 	ldw	r2,20(sp)
   846a4:	113ffa1e 	bne	r2,r4,84690 <_dtoa_r+0x6e0>
   846a8:	d8c00417 	ldw	r3,16(sp)
   846ac:	d9800517 	ldw	r6,20(sp)
   846b0:	00800c04 	movi	r2,48
   846b4:	18c00044 	addi	r3,r3,1
   846b8:	d8c00415 	stw	r3,16(sp)
   846bc:	30800005 	stb	r2,0(r6)
   846c0:	20800003 	ldbu	r2,0(r4)
   846c4:	d8c00417 	ldw	r3,16(sp)
   846c8:	27000044 	addi	fp,r4,1
   846cc:	10800044 	addi	r2,r2,1
   846d0:	d8c00d15 	stw	r3,52(sp)
   846d4:	20800005 	stb	r2,0(r4)
   846d8:	d9001617 	ldw	r4,88(sp)
   846dc:	d9400717 	ldw	r5,28(sp)
   846e0:	00870d80 	call	870d8 <_Bfree>
   846e4:	e0000005 	stb	zero,0(fp)
   846e8:	d9800d17 	ldw	r6,52(sp)
   846ec:	d8c02717 	ldw	r3,156(sp)
   846f0:	d9002917 	ldw	r4,164(sp)
   846f4:	30800044 	addi	r2,r6,1
   846f8:	18800015 	stw	r2,0(r3)
   846fc:	20029c26 	beq	r4,zero,85170 <_dtoa_r+0x11c0>
   84700:	d8c00517 	ldw	r3,20(sp)
   84704:	27000015 	stw	fp,0(r4)
   84708:	003e5d06 	br	84080 <_dtoa_r+0xd0>
   8470c:	d9800d17 	ldw	r6,52(sp)
   84710:	00c00274 	movhi	r3,9
   84714:	18fbe004 	addi	r3,r3,-4224
   84718:	d9001217 	ldw	r4,72(sp)
   8471c:	300490fa 	slli	r2,r6,3
   84720:	d9401317 	ldw	r5,76(sp)
   84724:	10c5883a 	add	r2,r2,r3
   84728:	12000017 	ldw	r8,0(r2)
   8472c:	12400117 	ldw	r9,4(r2)
   84730:	400d883a 	mov	r6,r8
   84734:	480f883a 	mov	r7,r9
   84738:	008a8f40 	call	8a8f4 <__ltdf2>
   8473c:	1000030e 	bge	r2,zero,8474c <_dtoa_r+0x79c>
   84740:	d8800d17 	ldw	r2,52(sp)
   84744:	10bfffc4 	addi	r2,r2,-1
   84748:	d8800d15 	stw	r2,52(sp)
   8474c:	d8000c15 	stw	zero,48(sp)
   84750:	003ea806 	br	841f4 <_dtoa_r+0x244>
   84754:	d9000b17 	ldw	r4,44(sp)
   84758:	202cc03a 	cmpne	r22,r4,zero
   8475c:	b000c71e 	bne	r22,zero,84a7c <_dtoa_r+0xacc>
   84760:	dc001117 	ldw	r16,68(sp)
   84764:	dc801017 	ldw	r18,64(sp)
   84768:	0027883a 	mov	r19,zero
   8476c:	04000b0e 	bge	zero,r16,8479c <_dtoa_r+0x7ec>
   84770:	d8c00a17 	ldw	r3,40(sp)
   84774:	00c0090e 	bge	zero,r3,8479c <_dtoa_r+0x7ec>
   84778:	8005883a 	mov	r2,r16
   8477c:	1c011316 	blt	r3,r16,84bcc <_dtoa_r+0xc1c>
   84780:	d9000a17 	ldw	r4,40(sp)
   84784:	d9801117 	ldw	r6,68(sp)
   84788:	80a1c83a 	sub	r16,r16,r2
   8478c:	2089c83a 	sub	r4,r4,r2
   84790:	308dc83a 	sub	r6,r6,r2
   84794:	d9000a15 	stw	r4,40(sp)
   84798:	d9801115 	stw	r6,68(sp)
   8479c:	d8801017 	ldw	r2,64(sp)
   847a0:	0080150e 	bge	zero,r2,847f8 <_dtoa_r+0x848>
   847a4:	d8c00b17 	ldw	r3,44(sp)
   847a8:	1805003a 	cmpeq	r2,r3,zero
   847ac:	1001c91e 	bne	r2,zero,84ed4 <_dtoa_r+0xf24>
   847b0:	04800e0e 	bge	zero,r18,847ec <_dtoa_r+0x83c>
   847b4:	d9001617 	ldw	r4,88(sp)
   847b8:	980b883a 	mov	r5,r19
   847bc:	900d883a 	mov	r6,r18
   847c0:	0087f240 	call	87f24 <__pow5mult>
   847c4:	d9001617 	ldw	r4,88(sp)
   847c8:	d9800717 	ldw	r6,28(sp)
   847cc:	100b883a 	mov	r5,r2
   847d0:	1027883a 	mov	r19,r2
   847d4:	0087b680 	call	87b68 <__multiply>
   847d8:	d9001617 	ldw	r4,88(sp)
   847dc:	d9400717 	ldw	r5,28(sp)
   847e0:	1023883a 	mov	r17,r2
   847e4:	00870d80 	call	870d8 <_Bfree>
   847e8:	dc400715 	stw	r17,28(sp)
   847ec:	d9001017 	ldw	r4,64(sp)
   847f0:	248dc83a 	sub	r6,r4,r18
   847f4:	30010e1e 	bne	r6,zero,84c30 <_dtoa_r+0xc80>
   847f8:	d9001617 	ldw	r4,88(sp)
   847fc:	04400044 	movi	r17,1
   84800:	880b883a 	mov	r5,r17
   84804:	0087dbc0 	call	87dbc <__i2b>
   84808:	d9800917 	ldw	r6,36(sp)
   8480c:	1025883a 	mov	r18,r2
   84810:	0180040e 	bge	zero,r6,84824 <_dtoa_r+0x874>
   84814:	d9001617 	ldw	r4,88(sp)
   84818:	100b883a 	mov	r5,r2
   8481c:	0087f240 	call	87f24 <__pow5mult>
   84820:	1025883a 	mov	r18,r2
   84824:	d8801717 	ldw	r2,92(sp)
   84828:	8880f30e 	bge	r17,r2,84bf8 <_dtoa_r+0xc48>
   8482c:	0023883a 	mov	r17,zero
   84830:	d9800917 	ldw	r6,36(sp)
   84834:	30019e1e 	bne	r6,zero,84eb0 <_dtoa_r+0xf00>
   84838:	00c00044 	movi	r3,1
   8483c:	d9000a17 	ldw	r4,40(sp)
   84840:	20c5883a 	add	r2,r4,r3
   84844:	10c007cc 	andi	r3,r2,31
   84848:	1800841e 	bne	r3,zero,84a5c <_dtoa_r+0xaac>
   8484c:	00800704 	movi	r2,28
   84850:	d9000a17 	ldw	r4,40(sp)
   84854:	d9801117 	ldw	r6,68(sp)
   84858:	80a1883a 	add	r16,r16,r2
   8485c:	2089883a 	add	r4,r4,r2
   84860:	308d883a 	add	r6,r6,r2
   84864:	d9000a15 	stw	r4,40(sp)
   84868:	d9801115 	stw	r6,68(sp)
   8486c:	d8801117 	ldw	r2,68(sp)
   84870:	0080050e 	bge	zero,r2,84888 <_dtoa_r+0x8d8>
   84874:	d9400717 	ldw	r5,28(sp)
   84878:	d9001617 	ldw	r4,88(sp)
   8487c:	100d883a 	mov	r6,r2
   84880:	0087a1c0 	call	87a1c <__lshift>
   84884:	d8800715 	stw	r2,28(sp)
   84888:	d8c00a17 	ldw	r3,40(sp)
   8488c:	00c0050e 	bge	zero,r3,848a4 <_dtoa_r+0x8f4>
   84890:	d9001617 	ldw	r4,88(sp)
   84894:	900b883a 	mov	r5,r18
   84898:	180d883a 	mov	r6,r3
   8489c:	0087a1c0 	call	87a1c <__lshift>
   848a0:	1025883a 	mov	r18,r2
   848a4:	d9000c17 	ldw	r4,48(sp)
   848a8:	2005003a 	cmpeq	r2,r4,zero
   848ac:	10016f26 	beq	r2,zero,84e6c <_dtoa_r+0xebc>
   848b0:	d9000f17 	ldw	r4,60(sp)
   848b4:	0102170e 	bge	zero,r4,85114 <_dtoa_r+0x1164>
   848b8:	d9800b17 	ldw	r6,44(sp)
   848bc:	3005003a 	cmpeq	r2,r6,zero
   848c0:	1000881e 	bne	r2,zero,84ae4 <_dtoa_r+0xb34>
   848c4:	0400050e 	bge	zero,r16,848dc <_dtoa_r+0x92c>
   848c8:	d9001617 	ldw	r4,88(sp)
   848cc:	980b883a 	mov	r5,r19
   848d0:	800d883a 	mov	r6,r16
   848d4:	0087a1c0 	call	87a1c <__lshift>
   848d8:	1027883a 	mov	r19,r2
   848dc:	8804c03a 	cmpne	r2,r17,zero
   848e0:	1002541e 	bne	r2,zero,85234 <_dtoa_r+0x1284>
   848e4:	980b883a 	mov	r5,r19
   848e8:	dd800517 	ldw	r22,20(sp)
   848ec:	dcc00615 	stw	r19,24(sp)
   848f0:	a700004c 	andi	fp,r20,1
   848f4:	2827883a 	mov	r19,r5
   848f8:	d9000717 	ldw	r4,28(sp)
   848fc:	900b883a 	mov	r5,r18
   84900:	0083d6c0 	call	83d6c <quorem>
   84904:	d9000717 	ldw	r4,28(sp)
   84908:	d9400617 	ldw	r5,24(sp)
   8490c:	1023883a 	mov	r17,r2
   84910:	8dc00c04 	addi	r23,r17,48
   84914:	00872340 	call	87234 <__mcmp>
   84918:	d9001617 	ldw	r4,88(sp)
   8491c:	900b883a 	mov	r5,r18
   84920:	980d883a 	mov	r6,r19
   84924:	1029883a 	mov	r20,r2
   84928:	00878900 	call	87890 <__mdiff>
   8492c:	102b883a 	mov	r21,r2
   84930:	10800317 	ldw	r2,12(r2)
   84934:	1001281e 	bne	r2,zero,84dd8 <_dtoa_r+0xe28>
   84938:	d9000717 	ldw	r4,28(sp)
   8493c:	a80b883a 	mov	r5,r21
   84940:	00872340 	call	87234 <__mcmp>
   84944:	d9001617 	ldw	r4,88(sp)
   84948:	1021883a 	mov	r16,r2
   8494c:	a80b883a 	mov	r5,r21
   84950:	00870d80 	call	870d8 <_Bfree>
   84954:	8000041e 	bne	r16,zero,84968 <_dtoa_r+0x9b8>
   84958:	d8801717 	ldw	r2,92(sp)
   8495c:	1000021e 	bne	r2,zero,84968 <_dtoa_r+0x9b8>
   84960:	e004c03a 	cmpne	r2,fp,zero
   84964:	10011726 	beq	r2,zero,84dc4 <_dtoa_r+0xe14>
   84968:	a0010616 	blt	r20,zero,84d84 <_dtoa_r+0xdd4>
   8496c:	a000041e 	bne	r20,zero,84980 <_dtoa_r+0x9d0>
   84970:	d8c01717 	ldw	r3,92(sp)
   84974:	1800021e 	bne	r3,zero,84980 <_dtoa_r+0x9d0>
   84978:	e004c03a 	cmpne	r2,fp,zero
   8497c:	10010126 	beq	r2,zero,84d84 <_dtoa_r+0xdd4>
   84980:	04023d16 	blt	zero,r16,85278 <_dtoa_r+0x12c8>
   84984:	b5c00005 	stb	r23,0(r22)
   84988:	d9800517 	ldw	r6,20(sp)
   8498c:	d9000f17 	ldw	r4,60(sp)
   84990:	b5800044 	addi	r22,r22,1
   84994:	3105883a 	add	r2,r6,r4
   84998:	b0806526 	beq	r22,r2,84b30 <_dtoa_r+0xb80>
   8499c:	d9400717 	ldw	r5,28(sp)
   849a0:	d9001617 	ldw	r4,88(sp)
   849a4:	01800284 	movi	r6,10
   849a8:	000f883a 	mov	r7,zero
   849ac:	0087df80 	call	87df8 <__multadd>
   849b0:	d8800715 	stw	r2,28(sp)
   849b4:	d8800617 	ldw	r2,24(sp)
   849b8:	14c10c26 	beq	r2,r19,84dec <_dtoa_r+0xe3c>
   849bc:	d9400617 	ldw	r5,24(sp)
   849c0:	d9001617 	ldw	r4,88(sp)
   849c4:	01800284 	movi	r6,10
   849c8:	000f883a 	mov	r7,zero
   849cc:	0087df80 	call	87df8 <__multadd>
   849d0:	d9001617 	ldw	r4,88(sp)
   849d4:	980b883a 	mov	r5,r19
   849d8:	01800284 	movi	r6,10
   849dc:	000f883a 	mov	r7,zero
   849e0:	d8800615 	stw	r2,24(sp)
   849e4:	0087df80 	call	87df8 <__multadd>
   849e8:	1027883a 	mov	r19,r2
   849ec:	003fc206 	br	848f8 <_dtoa_r+0x948>
   849f0:	2445c83a 	sub	r2,r4,r17
   849f4:	a088983a 	sll	r4,r20,r2
   849f8:	003e4b06 	br	84328 <_dtoa_r+0x378>
   849fc:	01bfffc4 	movi	r6,-1
   84a00:	00800044 	movi	r2,1
   84a04:	d9800e15 	stw	r6,56(sp)
   84a08:	d9800f15 	stw	r6,60(sp)
   84a0c:	d8800b15 	stw	r2,44(sp)
   84a10:	d8c01617 	ldw	r3,88(sp)
   84a14:	008005c4 	movi	r2,23
   84a18:	18001115 	stw	zero,68(r3)
   84a1c:	1580082e 	bgeu	r2,r22,84a40 <_dtoa_r+0xa90>
   84a20:	00c00104 	movi	r3,4
   84a24:	0009883a 	mov	r4,zero
   84a28:	18c7883a 	add	r3,r3,r3
   84a2c:	18800504 	addi	r2,r3,20
   84a30:	21000044 	addi	r4,r4,1
   84a34:	b0bffc2e 	bgeu	r22,r2,84a28 <_dtoa_r+0xa78>
   84a38:	d9801617 	ldw	r6,88(sp)
   84a3c:	31001115 	stw	r4,68(r6)
   84a40:	dc000f17 	ldw	r16,60(sp)
   84a44:	003e4b06 	br	84374 <_dtoa_r+0x3c4>
   84a48:	d9801717 	ldw	r6,92(sp)
   84a4c:	0023883a 	mov	r17,zero
   84a50:	31bfff04 	addi	r6,r6,-4
   84a54:	d9801715 	stw	r6,92(sp)
   84a58:	003df806 	br	8423c <_dtoa_r+0x28c>
   84a5c:	00800804 	movi	r2,32
   84a60:	10c9c83a 	sub	r4,r2,r3
   84a64:	00c00104 	movi	r3,4
   84a68:	19005a16 	blt	r3,r4,84bd4 <_dtoa_r+0xc24>
   84a6c:	008000c4 	movi	r2,3
   84a70:	113f7e16 	blt	r2,r4,8486c <_dtoa_r+0x8bc>
   84a74:	20800704 	addi	r2,r4,28
   84a78:	003f7506 	br	84850 <_dtoa_r+0x8a0>
   84a7c:	d9801717 	ldw	r6,92(sp)
   84a80:	00800044 	movi	r2,1
   84a84:	1180a10e 	bge	r2,r6,84d0c <_dtoa_r+0xd5c>
   84a88:	d9800f17 	ldw	r6,60(sp)
   84a8c:	d8c01017 	ldw	r3,64(sp)
   84a90:	30bfffc4 	addi	r2,r6,-1
   84a94:	1881c616 	blt	r3,r2,851b0 <_dtoa_r+0x1200>
   84a98:	18a5c83a 	sub	r18,r3,r2
   84a9c:	d8800f17 	ldw	r2,60(sp)
   84aa0:	10026216 	blt	r2,zero,8542c <_dtoa_r+0x147c>
   84aa4:	dc001117 	ldw	r16,68(sp)
   84aa8:	1007883a 	mov	r3,r2
   84aac:	d9800a17 	ldw	r6,40(sp)
   84ab0:	d8801117 	ldw	r2,68(sp)
   84ab4:	d9001617 	ldw	r4,88(sp)
   84ab8:	30cd883a 	add	r6,r6,r3
   84abc:	10c5883a 	add	r2,r2,r3
   84ac0:	01400044 	movi	r5,1
   84ac4:	d9800a15 	stw	r6,40(sp)
   84ac8:	d8801115 	stw	r2,68(sp)
   84acc:	0087dbc0 	call	87dbc <__i2b>
   84ad0:	1027883a 	mov	r19,r2
   84ad4:	003f2506 	br	8476c <_dtoa_r+0x7bc>
   84ad8:	00c00274 	movhi	r3,9
   84adc:	18fb2204 	addi	r3,r3,-4984
   84ae0:	003d6706 	br	84080 <_dtoa_r+0xd0>
   84ae4:	dd800517 	ldw	r22,20(sp)
   84ae8:	04000044 	movi	r16,1
   84aec:	00000706 	br	84b0c <_dtoa_r+0xb5c>
   84af0:	d9400717 	ldw	r5,28(sp)
   84af4:	d9001617 	ldw	r4,88(sp)
   84af8:	01800284 	movi	r6,10
   84afc:	000f883a 	mov	r7,zero
   84b00:	0087df80 	call	87df8 <__multadd>
   84b04:	d8800715 	stw	r2,28(sp)
   84b08:	84000044 	addi	r16,r16,1
   84b0c:	d9000717 	ldw	r4,28(sp)
   84b10:	900b883a 	mov	r5,r18
   84b14:	0083d6c0 	call	83d6c <quorem>
   84b18:	15c00c04 	addi	r23,r2,48
   84b1c:	b5c00005 	stb	r23,0(r22)
   84b20:	d8c00f17 	ldw	r3,60(sp)
   84b24:	b5800044 	addi	r22,r22,1
   84b28:	80fff116 	blt	r16,r3,84af0 <_dtoa_r+0xb40>
   84b2c:	d8000615 	stw	zero,24(sp)
   84b30:	d9400717 	ldw	r5,28(sp)
   84b34:	d9001617 	ldw	r4,88(sp)
   84b38:	01800044 	movi	r6,1
   84b3c:	0087a1c0 	call	87a1c <__lshift>
   84b40:	1009883a 	mov	r4,r2
   84b44:	900b883a 	mov	r5,r18
   84b48:	d8800715 	stw	r2,28(sp)
   84b4c:	00872340 	call	87234 <__mcmp>
   84b50:	00803c0e 	bge	zero,r2,84c44 <_dtoa_r+0xc94>
   84b54:	b009883a 	mov	r4,r22
   84b58:	213fffc4 	addi	r4,r4,-1
   84b5c:	21400003 	ldbu	r5,0(r4)
   84b60:	00800e44 	movi	r2,57
   84b64:	28c03fcc 	andi	r3,r5,255
   84b68:	18c0201c 	xori	r3,r3,128
   84b6c:	18ffe004 	addi	r3,r3,-128
   84b70:	1881981e 	bne	r3,r2,851d4 <_dtoa_r+0x1224>
   84b74:	d9800517 	ldw	r6,20(sp)
   84b78:	21bff71e 	bne	r4,r6,84b58 <_dtoa_r+0xba8>
   84b7c:	d8800d17 	ldw	r2,52(sp)
   84b80:	37000044 	addi	fp,r6,1
   84b84:	10800044 	addi	r2,r2,1
   84b88:	d8800d15 	stw	r2,52(sp)
   84b8c:	00800c44 	movi	r2,49
   84b90:	30800005 	stb	r2,0(r6)
   84b94:	d9001617 	ldw	r4,88(sp)
   84b98:	900b883a 	mov	r5,r18
   84b9c:	00870d80 	call	870d8 <_Bfree>
   84ba0:	983ecd26 	beq	r19,zero,846d8 <_dtoa_r+0x728>
   84ba4:	d8c00617 	ldw	r3,24(sp)
   84ba8:	18000426 	beq	r3,zero,84bbc <_dtoa_r+0xc0c>
   84bac:	1cc00326 	beq	r3,r19,84bbc <_dtoa_r+0xc0c>
   84bb0:	d9001617 	ldw	r4,88(sp)
   84bb4:	180b883a 	mov	r5,r3
   84bb8:	00870d80 	call	870d8 <_Bfree>
   84bbc:	d9001617 	ldw	r4,88(sp)
   84bc0:	980b883a 	mov	r5,r19
   84bc4:	00870d80 	call	870d8 <_Bfree>
   84bc8:	003ec306 	br	846d8 <_dtoa_r+0x728>
   84bcc:	1805883a 	mov	r2,r3
   84bd0:	003eeb06 	br	84780 <_dtoa_r+0x7d0>
   84bd4:	d9800a17 	ldw	r6,40(sp)
   84bd8:	d8c01117 	ldw	r3,68(sp)
   84bdc:	20bfff04 	addi	r2,r4,-4
   84be0:	308d883a 	add	r6,r6,r2
   84be4:	1887883a 	add	r3,r3,r2
   84be8:	80a1883a 	add	r16,r16,r2
   84bec:	d9800a15 	stw	r6,40(sp)
   84bf0:	d8c01115 	stw	r3,68(sp)
   84bf4:	003f1d06 	br	8486c <_dtoa_r+0x8bc>
   84bf8:	a03f0c1e 	bne	r20,zero,8482c <_dtoa_r+0x87c>
   84bfc:	00800434 	movhi	r2,16
   84c00:	10bfffc4 	addi	r2,r2,-1
   84c04:	a884703a 	and	r2,r21,r2
   84c08:	103f081e 	bne	r2,zero,8482c <_dtoa_r+0x87c>
   84c0c:	a89ffc2c 	andhi	r2,r21,32752
   84c10:	103f0626 	beq	r2,zero,8482c <_dtoa_r+0x87c>
   84c14:	d8c01117 	ldw	r3,68(sp)
   84c18:	d9000a17 	ldw	r4,40(sp)
   84c1c:	18c00044 	addi	r3,r3,1
   84c20:	21000044 	addi	r4,r4,1
   84c24:	d8c01115 	stw	r3,68(sp)
   84c28:	d9000a15 	stw	r4,40(sp)
   84c2c:	003f0006 	br	84830 <_dtoa_r+0x880>
   84c30:	d9400717 	ldw	r5,28(sp)
   84c34:	d9001617 	ldw	r4,88(sp)
   84c38:	0087f240 	call	87f24 <__pow5mult>
   84c3c:	d8800715 	stw	r2,28(sp)
   84c40:	003eed06 	br	847f8 <_dtoa_r+0x848>
   84c44:	1000021e 	bne	r2,zero,84c50 <_dtoa_r+0xca0>
   84c48:	b880004c 	andi	r2,r23,1
   84c4c:	103fc11e 	bne	r2,zero,84b54 <_dtoa_r+0xba4>
   84c50:	b5bfffc4 	addi	r22,r22,-1
   84c54:	b0c00007 	ldb	r3,0(r22)
   84c58:	00800c04 	movi	r2,48
   84c5c:	18bffc26 	beq	r3,r2,84c50 <_dtoa_r+0xca0>
   84c60:	b7000044 	addi	fp,r22,1
   84c64:	003fcb06 	br	84b94 <_dtoa_r+0xbe4>
   84c68:	d9800d17 	ldw	r6,52(sp)
   84c6c:	018fc83a 	sub	r7,zero,r6
   84c70:	3801f726 	beq	r7,zero,85450 <_dtoa_r+0x14a0>
   84c74:	398003cc 	andi	r6,r7,15
   84c78:	300c90fa 	slli	r6,r6,3
   84c7c:	01400274 	movhi	r5,9
   84c80:	297be004 	addi	r5,r5,-4224
   84c84:	d9001217 	ldw	r4,72(sp)
   84c88:	314d883a 	add	r6,r6,r5
   84c8c:	30c00117 	ldw	r3,4(r6)
   84c90:	30800017 	ldw	r2,0(r6)
   84c94:	d9401317 	ldw	r5,76(sp)
   84c98:	3821d13a 	srai	r16,r7,4
   84c9c:	100d883a 	mov	r6,r2
   84ca0:	180f883a 	mov	r7,r3
   84ca4:	008a0b80 	call	8a0b8 <__muldf3>
   84ca8:	1011883a 	mov	r8,r2
   84cac:	1813883a 	mov	r9,r3
   84cb0:	1029883a 	mov	r20,r2
   84cb4:	182b883a 	mov	r21,r3
   84cb8:	8001e526 	beq	r16,zero,85450 <_dtoa_r+0x14a0>
   84cbc:	05800084 	movi	r22,2
   84cc0:	04400274 	movhi	r17,9
   84cc4:	8c7c1204 	addi	r17,r17,-4024
   84cc8:	8080004c 	andi	r2,r16,1
   84ccc:	1005003a 	cmpeq	r2,r2,zero
   84cd0:	1000081e 	bne	r2,zero,84cf4 <_dtoa_r+0xd44>
   84cd4:	89800017 	ldw	r6,0(r17)
   84cd8:	89c00117 	ldw	r7,4(r17)
   84cdc:	480b883a 	mov	r5,r9
   84ce0:	4009883a 	mov	r4,r8
   84ce4:	008a0b80 	call	8a0b8 <__muldf3>
   84ce8:	1011883a 	mov	r8,r2
   84cec:	b5800044 	addi	r22,r22,1
   84cf0:	1813883a 	mov	r9,r3
   84cf4:	8021d07a 	srai	r16,r16,1
   84cf8:	8c400204 	addi	r17,r17,8
   84cfc:	803ff21e 	bne	r16,zero,84cc8 <_dtoa_r+0xd18>
   84d00:	4029883a 	mov	r20,r8
   84d04:	482b883a 	mov	r21,r9
   84d08:	003dca06 	br	84434 <_dtoa_r+0x484>
   84d0c:	d9000817 	ldw	r4,32(sp)
   84d10:	2005003a 	cmpeq	r2,r4,zero
   84d14:	1001f61e 	bne	r2,zero,854f0 <_dtoa_r+0x1540>
   84d18:	dc001117 	ldw	r16,68(sp)
   84d1c:	dc801017 	ldw	r18,64(sp)
   84d20:	18c10cc4 	addi	r3,r3,1075
   84d24:	003f6106 	br	84aac <_dtoa_r+0xafc>
   84d28:	d8000b15 	stw	zero,44(sp)
   84d2c:	d9802617 	ldw	r6,152(sp)
   84d30:	d8c00d17 	ldw	r3,52(sp)
   84d34:	30800044 	addi	r2,r6,1
   84d38:	18ad883a 	add	r22,r3,r2
   84d3c:	b13fffc4 	addi	r4,r22,-1
   84d40:	d9000e15 	stw	r4,56(sp)
   84d44:	0581f60e 	bge	zero,r22,85520 <_dtoa_r+0x1570>
   84d48:	dd800f15 	stw	r22,60(sp)
   84d4c:	003f3006 	br	84a10 <_dtoa_r+0xa60>
   84d50:	d8000b15 	stw	zero,44(sp)
   84d54:	d9002617 	ldw	r4,152(sp)
   84d58:	0101eb0e 	bge	zero,r4,85508 <_dtoa_r+0x1558>
   84d5c:	202d883a 	mov	r22,r4
   84d60:	d9000e15 	stw	r4,56(sp)
   84d64:	d9000f15 	stw	r4,60(sp)
   84d68:	003f2906 	br	84a10 <_dtoa_r+0xa60>
   84d6c:	01800044 	movi	r6,1
   84d70:	d9800b15 	stw	r6,44(sp)
   84d74:	003ff706 	br	84d54 <_dtoa_r+0xda4>
   84d78:	01000044 	movi	r4,1
   84d7c:	d9000b15 	stw	r4,44(sp)
   84d80:	003fea06 	br	84d2c <_dtoa_r+0xd7c>
   84d84:	04000c0e 	bge	zero,r16,84db8 <_dtoa_r+0xe08>
   84d88:	d9400717 	ldw	r5,28(sp)
   84d8c:	d9001617 	ldw	r4,88(sp)
   84d90:	01800044 	movi	r6,1
   84d94:	0087a1c0 	call	87a1c <__lshift>
   84d98:	1009883a 	mov	r4,r2
   84d9c:	900b883a 	mov	r5,r18
   84da0:	d8800715 	stw	r2,28(sp)
   84da4:	00872340 	call	87234 <__mcmp>
   84da8:	0081e00e 	bge	zero,r2,8552c <_dtoa_r+0x157c>
   84dac:	bdc00044 	addi	r23,r23,1
   84db0:	00800e84 	movi	r2,58
   84db4:	b881a226 	beq	r23,r2,85440 <_dtoa_r+0x1490>
   84db8:	b7000044 	addi	fp,r22,1
   84dbc:	b5c00005 	stb	r23,0(r22)
   84dc0:	003f7406 	br	84b94 <_dtoa_r+0xbe4>
   84dc4:	00800e44 	movi	r2,57
   84dc8:	b8819d26 	beq	r23,r2,85440 <_dtoa_r+0x1490>
   84dcc:	053ffa0e 	bge	zero,r20,84db8 <_dtoa_r+0xe08>
   84dd0:	8dc00c44 	addi	r23,r17,49
   84dd4:	003ff806 	br	84db8 <_dtoa_r+0xe08>
   84dd8:	d9001617 	ldw	r4,88(sp)
   84ddc:	a80b883a 	mov	r5,r21
   84de0:	04000044 	movi	r16,1
   84de4:	00870d80 	call	870d8 <_Bfree>
   84de8:	003edf06 	br	84968 <_dtoa_r+0x9b8>
   84dec:	d9001617 	ldw	r4,88(sp)
   84df0:	980b883a 	mov	r5,r19
   84df4:	01800284 	movi	r6,10
   84df8:	000f883a 	mov	r7,zero
   84dfc:	0087df80 	call	87df8 <__multadd>
   84e00:	1027883a 	mov	r19,r2
   84e04:	d8800615 	stw	r2,24(sp)
   84e08:	003ebb06 	br	848f8 <_dtoa_r+0x948>
   84e0c:	d9801117 	ldw	r6,68(sp)
   84e10:	d8800d17 	ldw	r2,52(sp)
   84e14:	d8000915 	stw	zero,36(sp)
   84e18:	308dc83a 	sub	r6,r6,r2
   84e1c:	0087c83a 	sub	r3,zero,r2
   84e20:	d9801115 	stw	r6,68(sp)
   84e24:	d8c01015 	stw	r3,64(sp)
   84e28:	003cfe06 	br	84224 <_dtoa_r+0x274>
   84e2c:	018dc83a 	sub	r6,zero,r6
   84e30:	d9801115 	stw	r6,68(sp)
   84e34:	d8000a15 	stw	zero,40(sp)
   84e38:	003cf306 	br	84208 <_dtoa_r+0x258>
   84e3c:	d9000d17 	ldw	r4,52(sp)
   84e40:	008a97c0 	call	8a97c <__floatsidf>
   84e44:	880b883a 	mov	r5,r17
   84e48:	8009883a 	mov	r4,r16
   84e4c:	180f883a 	mov	r7,r3
   84e50:	100d883a 	mov	r6,r2
   84e54:	008a75c0 	call	8a75c <__nedf2>
   84e58:	103ce126 	beq	r2,zero,841e0 <_dtoa_r+0x230>
   84e5c:	d9800d17 	ldw	r6,52(sp)
   84e60:	31bfffc4 	addi	r6,r6,-1
   84e64:	d9800d15 	stw	r6,52(sp)
   84e68:	003cdd06 	br	841e0 <_dtoa_r+0x230>
   84e6c:	d9000717 	ldw	r4,28(sp)
   84e70:	900b883a 	mov	r5,r18
   84e74:	00872340 	call	87234 <__mcmp>
   84e78:	103e8d0e 	bge	r2,zero,848b0 <_dtoa_r+0x900>
   84e7c:	d9400717 	ldw	r5,28(sp)
   84e80:	d9001617 	ldw	r4,88(sp)
   84e84:	01800284 	movi	r6,10
   84e88:	000f883a 	mov	r7,zero
   84e8c:	0087df80 	call	87df8 <__multadd>
   84e90:	d9800d17 	ldw	r6,52(sp)
   84e94:	d8800715 	stw	r2,28(sp)
   84e98:	31bfffc4 	addi	r6,r6,-1
   84e9c:	d9800d15 	stw	r6,52(sp)
   84ea0:	b001a71e 	bne	r22,zero,85540 <_dtoa_r+0x1590>
   84ea4:	d8800e17 	ldw	r2,56(sp)
   84ea8:	d8800f15 	stw	r2,60(sp)
   84eac:	003e8006 	br	848b0 <_dtoa_r+0x900>
   84eb0:	90800417 	ldw	r2,16(r18)
   84eb4:	1085883a 	add	r2,r2,r2
   84eb8:	1085883a 	add	r2,r2,r2
   84ebc:	1485883a 	add	r2,r2,r18
   84ec0:	11000417 	ldw	r4,16(r2)
   84ec4:	00871000 	call	87100 <__hi0bits>
   84ec8:	00c00804 	movi	r3,32
   84ecc:	1887c83a 	sub	r3,r3,r2
   84ed0:	003e5a06 	br	8483c <_dtoa_r+0x88c>
   84ed4:	d9400717 	ldw	r5,28(sp)
   84ed8:	d9801017 	ldw	r6,64(sp)
   84edc:	d9001617 	ldw	r4,88(sp)
   84ee0:	0087f240 	call	87f24 <__pow5mult>
   84ee4:	d8800715 	stw	r2,28(sp)
   84ee8:	003e4306 	br	847f8 <_dtoa_r+0x848>
   84eec:	d9800f17 	ldw	r6,60(sp)
   84ef0:	d8800d17 	ldw	r2,52(sp)
   84ef4:	d9800315 	stw	r6,12(sp)
   84ef8:	d8800415 	stw	r2,16(sp)
   84efc:	d8c00b17 	ldw	r3,44(sp)
   84f00:	1805003a 	cmpeq	r2,r3,zero
   84f04:	1000e21e 	bne	r2,zero,85290 <_dtoa_r+0x12e0>
   84f08:	d9000317 	ldw	r4,12(sp)
   84f0c:	0005883a 	mov	r2,zero
   84f10:	00cff834 	movhi	r3,16352
   84f14:	200c90fa 	slli	r6,r4,3
   84f18:	01000274 	movhi	r4,9
   84f1c:	213be004 	addi	r4,r4,-4224
   84f20:	180b883a 	mov	r5,r3
   84f24:	310d883a 	add	r6,r6,r4
   84f28:	327fff17 	ldw	r9,-4(r6)
   84f2c:	323ffe17 	ldw	r8,-8(r6)
   84f30:	1009883a 	mov	r4,r2
   84f34:	480f883a 	mov	r7,r9
   84f38:	400d883a 	mov	r6,r8
   84f3c:	008a47c0 	call	8a47c <__divdf3>
   84f40:	180b883a 	mov	r5,r3
   84f44:	b00d883a 	mov	r6,r22
   84f48:	b80f883a 	mov	r7,r23
   84f4c:	1009883a 	mov	r4,r2
   84f50:	0089fc40 	call	89fc4 <__subdf3>
   84f54:	a80b883a 	mov	r5,r21
   84f58:	a009883a 	mov	r4,r20
   84f5c:	d8c01915 	stw	r3,100(sp)
   84f60:	d8801815 	stw	r2,96(sp)
   84f64:	008aa740 	call	8aa74 <__fixdfsi>
   84f68:	1009883a 	mov	r4,r2
   84f6c:	1027883a 	mov	r19,r2
   84f70:	008a97c0 	call	8a97c <__floatsidf>
   84f74:	a80b883a 	mov	r5,r21
   84f78:	a009883a 	mov	r4,r20
   84f7c:	180f883a 	mov	r7,r3
   84f80:	100d883a 	mov	r6,r2
   84f84:	0089fc40 	call	89fc4 <__subdf3>
   84f88:	d9801817 	ldw	r6,96(sp)
   84f8c:	1823883a 	mov	r17,r3
   84f90:	d8801415 	stw	r2,80(sp)
   84f94:	302d883a 	mov	r22,r6
   84f98:	d9800517 	ldw	r6,20(sp)
   84f9c:	9cc00c04 	addi	r19,r19,48
   84fa0:	dc401515 	stw	r17,84(sp)
   84fa4:	d8c01917 	ldw	r3,100(sp)
   84fa8:	34c00005 	stb	r19,0(r6)
   84fac:	d8800517 	ldw	r2,20(sp)
   84fb0:	d9401917 	ldw	r5,100(sp)
   84fb4:	d9801417 	ldw	r6,80(sp)
   84fb8:	b009883a 	mov	r4,r22
   84fbc:	880f883a 	mov	r7,r17
   84fc0:	182f883a 	mov	r23,r3
   84fc4:	17000044 	addi	fp,r2,1
   84fc8:	008a7e40 	call	8a7e4 <__gtdf2>
   84fcc:	00804e16 	blt	zero,r2,85108 <_dtoa_r+0x1158>
   84fd0:	d9801417 	ldw	r6,80(sp)
   84fd4:	0005883a 	mov	r2,zero
   84fd8:	00cffc34 	movhi	r3,16368
   84fdc:	180b883a 	mov	r5,r3
   84fe0:	880f883a 	mov	r7,r17
   84fe4:	1009883a 	mov	r4,r2
   84fe8:	0089fc40 	call	89fc4 <__subdf3>
   84fec:	d9401917 	ldw	r5,100(sp)
   84ff0:	180f883a 	mov	r7,r3
   84ff4:	b009883a 	mov	r4,r22
   84ff8:	100d883a 	mov	r6,r2
   84ffc:	008a7e40 	call	8a7e4 <__gtdf2>
   85000:	00bda216 	blt	zero,r2,8468c <_dtoa_r+0x6dc>
   85004:	d8c00317 	ldw	r3,12(sp)
   85008:	00800044 	movi	r2,1
   8500c:	10c01216 	blt	r2,r3,85058 <_dtoa_r+0x10a8>
   85010:	003d4506 	br	84528 <_dtoa_r+0x578>
   85014:	d9801417 	ldw	r6,80(sp)
   85018:	0005883a 	mov	r2,zero
   8501c:	00cffc34 	movhi	r3,16368
   85020:	180b883a 	mov	r5,r3
   85024:	880f883a 	mov	r7,r17
   85028:	1009883a 	mov	r4,r2
   8502c:	0089fc40 	call	89fc4 <__subdf3>
   85030:	d9c01b17 	ldw	r7,108(sp)
   85034:	180b883a 	mov	r5,r3
   85038:	1009883a 	mov	r4,r2
   8503c:	b00d883a 	mov	r6,r22
   85040:	008a8f40 	call	8a8f4 <__ltdf2>
   85044:	103d9116 	blt	r2,zero,8468c <_dtoa_r+0x6dc>
   85048:	d9800517 	ldw	r6,20(sp)
   8504c:	d9000317 	ldw	r4,12(sp)
   85050:	3105883a 	add	r2,r6,r4
   85054:	e0bd3426 	beq	fp,r2,84528 <_dtoa_r+0x578>
   85058:	04500934 	movhi	r17,16420
   8505c:	0021883a 	mov	r16,zero
   85060:	b80b883a 	mov	r5,r23
   85064:	b009883a 	mov	r4,r22
   85068:	800d883a 	mov	r6,r16
   8506c:	880f883a 	mov	r7,r17
   85070:	008a0b80 	call	8a0b8 <__muldf3>
   85074:	d9401517 	ldw	r5,84(sp)
   85078:	d9001417 	ldw	r4,80(sp)
   8507c:	880f883a 	mov	r7,r17
   85080:	000d883a 	mov	r6,zero
   85084:	d8801a15 	stw	r2,104(sp)
   85088:	d8c01b15 	stw	r3,108(sp)
   8508c:	008a0b80 	call	8a0b8 <__muldf3>
   85090:	180b883a 	mov	r5,r3
   85094:	1009883a 	mov	r4,r2
   85098:	1823883a 	mov	r17,r3
   8509c:	1021883a 	mov	r16,r2
   850a0:	008aa740 	call	8aa74 <__fixdfsi>
   850a4:	1009883a 	mov	r4,r2
   850a8:	102b883a 	mov	r21,r2
   850ac:	008a97c0 	call	8a97c <__floatsidf>
   850b0:	880b883a 	mov	r5,r17
   850b4:	8009883a 	mov	r4,r16
   850b8:	180f883a 	mov	r7,r3
   850bc:	100d883a 	mov	r6,r2
   850c0:	0089fc40 	call	89fc4 <__subdf3>
   850c4:	1021883a 	mov	r16,r2
   850c8:	d9001b17 	ldw	r4,108(sp)
   850cc:	1823883a 	mov	r17,r3
   850d0:	dc001415 	stw	r16,80(sp)
   850d4:	ad400c04 	addi	r21,r21,48
   850d8:	dc401515 	stw	r17,84(sp)
   850dc:	d8801a17 	ldw	r2,104(sp)
   850e0:	e5400005 	stb	r21,0(fp)
   850e4:	202f883a 	mov	r23,r4
   850e8:	d9c01b17 	ldw	r7,108(sp)
   850ec:	d9001417 	ldw	r4,80(sp)
   850f0:	880b883a 	mov	r5,r17
   850f4:	100d883a 	mov	r6,r2
   850f8:	102d883a 	mov	r22,r2
   850fc:	e7000044 	addi	fp,fp,1
   85100:	008a8f40 	call	8a8f4 <__ltdf2>
   85104:	103fc30e 	bge	r2,zero,85014 <_dtoa_r+0x1064>
   85108:	d9000417 	ldw	r4,16(sp)
   8510c:	d9000d15 	stw	r4,52(sp)
   85110:	003d7106 	br	846d8 <_dtoa_r+0x728>
   85114:	d9801717 	ldw	r6,92(sp)
   85118:	00800084 	movi	r2,2
   8511c:	11bde60e 	bge	r2,r6,848b8 <_dtoa_r+0x908>
   85120:	203cfb1e 	bne	r4,zero,84510 <_dtoa_r+0x560>
   85124:	d9001617 	ldw	r4,88(sp)
   85128:	900b883a 	mov	r5,r18
   8512c:	01800144 	movi	r6,5
   85130:	000f883a 	mov	r7,zero
   85134:	0087df80 	call	87df8 <__multadd>
   85138:	d9000717 	ldw	r4,28(sp)
   8513c:	100b883a 	mov	r5,r2
   85140:	1025883a 	mov	r18,r2
   85144:	00872340 	call	87234 <__mcmp>
   85148:	00bcf10e 	bge	zero,r2,84510 <_dtoa_r+0x560>
   8514c:	d8c00d17 	ldw	r3,52(sp)
   85150:	d9000517 	ldw	r4,20(sp)
   85154:	d8000615 	stw	zero,24(sp)
   85158:	18c00044 	addi	r3,r3,1
   8515c:	d8c00d15 	stw	r3,52(sp)
   85160:	00800c44 	movi	r2,49
   85164:	27000044 	addi	fp,r4,1
   85168:	20800005 	stb	r2,0(r4)
   8516c:	003e8906 	br	84b94 <_dtoa_r+0xbe4>
   85170:	d8c00517 	ldw	r3,20(sp)
   85174:	003bc206 	br	84080 <_dtoa_r+0xd0>
   85178:	01800274 	movhi	r6,9
   8517c:	31bc1204 	addi	r6,r6,-4024
   85180:	30c00917 	ldw	r3,36(r6)
   85184:	30800817 	ldw	r2,32(r6)
   85188:	d9001217 	ldw	r4,72(sp)
   8518c:	d9401317 	ldw	r5,76(sp)
   85190:	180f883a 	mov	r7,r3
   85194:	100d883a 	mov	r6,r2
   85198:	008a47c0 	call	8a47c <__divdf3>
   8519c:	948003cc 	andi	r18,r18,15
   851a0:	058000c4 	movi	r22,3
   851a4:	1029883a 	mov	r20,r2
   851a8:	182b883a 	mov	r21,r3
   851ac:	003c8906 	br	843d4 <_dtoa_r+0x424>
   851b0:	d9001017 	ldw	r4,64(sp)
   851b4:	d9800917 	ldw	r6,36(sp)
   851b8:	0025883a 	mov	r18,zero
   851bc:	1105c83a 	sub	r2,r2,r4
   851c0:	2089883a 	add	r4,r4,r2
   851c4:	308d883a 	add	r6,r6,r2
   851c8:	d9001015 	stw	r4,64(sp)
   851cc:	d9800915 	stw	r6,36(sp)
   851d0:	003e3206 	br	84a9c <_dtoa_r+0xaec>
   851d4:	28800044 	addi	r2,r5,1
   851d8:	27000044 	addi	fp,r4,1
   851dc:	20800005 	stb	r2,0(r4)
   851e0:	003e6c06 	br	84b94 <_dtoa_r+0xbe4>
   851e4:	d8800f17 	ldw	r2,60(sp)
   851e8:	00bce016 	blt	zero,r2,8456c <_dtoa_r+0x5bc>
   851ec:	d9800f17 	ldw	r6,60(sp)
   851f0:	303cc51e 	bne	r6,zero,84508 <_dtoa_r+0x558>
   851f4:	0005883a 	mov	r2,zero
   851f8:	00d00534 	movhi	r3,16404
   851fc:	980b883a 	mov	r5,r19
   85200:	180f883a 	mov	r7,r3
   85204:	9009883a 	mov	r4,r18
   85208:	100d883a 	mov	r6,r2
   8520c:	008a0b80 	call	8a0b8 <__muldf3>
   85210:	180b883a 	mov	r5,r3
   85214:	a80f883a 	mov	r7,r21
   85218:	1009883a 	mov	r4,r2
   8521c:	a00d883a 	mov	r6,r20
   85220:	008a86c0 	call	8a86c <__gedf2>
   85224:	103cb80e 	bge	r2,zero,84508 <_dtoa_r+0x558>
   85228:	0027883a 	mov	r19,zero
   8522c:	0025883a 	mov	r18,zero
   85230:	003fc606 	br	8514c <_dtoa_r+0x119c>
   85234:	99400117 	ldw	r5,4(r19)
   85238:	d9001617 	ldw	r4,88(sp)
   8523c:	00876580 	call	87658 <_Balloc>
   85240:	99800417 	ldw	r6,16(r19)
   85244:	11000304 	addi	r4,r2,12
   85248:	99400304 	addi	r5,r19,12
   8524c:	318d883a 	add	r6,r6,r6
   85250:	318d883a 	add	r6,r6,r6
   85254:	31800204 	addi	r6,r6,8
   85258:	1023883a 	mov	r17,r2
   8525c:	00818940 	call	81894 <memcpy>
   85260:	d9001617 	ldw	r4,88(sp)
   85264:	880b883a 	mov	r5,r17
   85268:	01800044 	movi	r6,1
   8526c:	0087a1c0 	call	87a1c <__lshift>
   85270:	100b883a 	mov	r5,r2
   85274:	003d9c06 	br	848e8 <_dtoa_r+0x938>
   85278:	00800e44 	movi	r2,57
   8527c:	b8807026 	beq	r23,r2,85440 <_dtoa_r+0x1490>
   85280:	b8800044 	addi	r2,r23,1
   85284:	b7000044 	addi	fp,r22,1
   85288:	b0800005 	stb	r2,0(r22)
   8528c:	003e4106 	br	84b94 <_dtoa_r+0xbe4>
   85290:	d8800317 	ldw	r2,12(sp)
   85294:	01800274 	movhi	r6,9
   85298:	31bbe004 	addi	r6,r6,-4224
   8529c:	b009883a 	mov	r4,r22
   852a0:	100e90fa 	slli	r7,r2,3
   852a4:	b80b883a 	mov	r5,r23
   852a8:	398f883a 	add	r7,r7,r6
   852ac:	38bffe17 	ldw	r2,-8(r7)
   852b0:	d9800517 	ldw	r6,20(sp)
   852b4:	38ffff17 	ldw	r3,-4(r7)
   852b8:	37000044 	addi	fp,r6,1
   852bc:	180f883a 	mov	r7,r3
   852c0:	100d883a 	mov	r6,r2
   852c4:	008a0b80 	call	8a0b8 <__muldf3>
   852c8:	a80b883a 	mov	r5,r21
   852cc:	a009883a 	mov	r4,r20
   852d0:	182f883a 	mov	r23,r3
   852d4:	102d883a 	mov	r22,r2
   852d8:	008aa740 	call	8aa74 <__fixdfsi>
   852dc:	1009883a 	mov	r4,r2
   852e0:	1027883a 	mov	r19,r2
   852e4:	008a97c0 	call	8a97c <__floatsidf>
   852e8:	a80b883a 	mov	r5,r21
   852ec:	a009883a 	mov	r4,r20
   852f0:	180f883a 	mov	r7,r3
   852f4:	100d883a 	mov	r6,r2
   852f8:	0089fc40 	call	89fc4 <__subdf3>
   852fc:	180b883a 	mov	r5,r3
   85300:	d8c00517 	ldw	r3,20(sp)
   85304:	9cc00c04 	addi	r19,r19,48
   85308:	1009883a 	mov	r4,r2
   8530c:	1cc00005 	stb	r19,0(r3)
   85310:	2021883a 	mov	r16,r4
   85314:	d9000317 	ldw	r4,12(sp)
   85318:	00800044 	movi	r2,1
   8531c:	2823883a 	mov	r17,r5
   85320:	20802226 	beq	r4,r2,853ac <_dtoa_r+0x13fc>
   85324:	1029883a 	mov	r20,r2
   85328:	0005883a 	mov	r2,zero
   8532c:	00d00934 	movhi	r3,16420
   85330:	180f883a 	mov	r7,r3
   85334:	100d883a 	mov	r6,r2
   85338:	880b883a 	mov	r5,r17
   8533c:	8009883a 	mov	r4,r16
   85340:	008a0b80 	call	8a0b8 <__muldf3>
   85344:	180b883a 	mov	r5,r3
   85348:	1009883a 	mov	r4,r2
   8534c:	1823883a 	mov	r17,r3
   85350:	1021883a 	mov	r16,r2
   85354:	008aa740 	call	8aa74 <__fixdfsi>
   85358:	1009883a 	mov	r4,r2
   8535c:	102b883a 	mov	r21,r2
   85360:	008a97c0 	call	8a97c <__floatsidf>
   85364:	880b883a 	mov	r5,r17
   85368:	8009883a 	mov	r4,r16
   8536c:	180f883a 	mov	r7,r3
   85370:	100d883a 	mov	r6,r2
   85374:	0089fc40 	call	89fc4 <__subdf3>
   85378:	180b883a 	mov	r5,r3
   8537c:	d8c00517 	ldw	r3,20(sp)
   85380:	1009883a 	mov	r4,r2
   85384:	ad400c04 	addi	r21,r21,48
   85388:	1d05883a 	add	r2,r3,r20
   8538c:	15400005 	stb	r21,0(r2)
   85390:	2021883a 	mov	r16,r4
   85394:	d9000317 	ldw	r4,12(sp)
   85398:	a5000044 	addi	r20,r20,1
   8539c:	2823883a 	mov	r17,r5
   853a0:	a13fe11e 	bne	r20,r4,85328 <_dtoa_r+0x1378>
   853a4:	e505883a 	add	r2,fp,r20
   853a8:	173fffc4 	addi	fp,r2,-1
   853ac:	0025883a 	mov	r18,zero
   853b0:	04cff834 	movhi	r19,16352
   853b4:	b009883a 	mov	r4,r22
   853b8:	b80b883a 	mov	r5,r23
   853bc:	900d883a 	mov	r6,r18
   853c0:	980f883a 	mov	r7,r19
   853c4:	008a0440 	call	8a044 <__adddf3>
   853c8:	180b883a 	mov	r5,r3
   853cc:	1009883a 	mov	r4,r2
   853d0:	800d883a 	mov	r6,r16
   853d4:	880f883a 	mov	r7,r17
   853d8:	008a8f40 	call	8a8f4 <__ltdf2>
   853dc:	103cab16 	blt	r2,zero,8468c <_dtoa_r+0x6dc>
   853e0:	0009883a 	mov	r4,zero
   853e4:	980b883a 	mov	r5,r19
   853e8:	b80f883a 	mov	r7,r23
   853ec:	b00d883a 	mov	r6,r22
   853f0:	0089fc40 	call	89fc4 <__subdf3>
   853f4:	180b883a 	mov	r5,r3
   853f8:	880f883a 	mov	r7,r17
   853fc:	1009883a 	mov	r4,r2
   85400:	800d883a 	mov	r6,r16
   85404:	008a7e40 	call	8a7e4 <__gtdf2>
   85408:	00bc470e 	bge	zero,r2,84528 <_dtoa_r+0x578>
   8540c:	00c00c04 	movi	r3,48
   85410:	e73fffc4 	addi	fp,fp,-1
   85414:	e0800007 	ldb	r2,0(fp)
   85418:	10fffd26 	beq	r2,r3,85410 <_dtoa_r+0x1460>
   8541c:	d9800417 	ldw	r6,16(sp)
   85420:	e7000044 	addi	fp,fp,1
   85424:	d9800d15 	stw	r6,52(sp)
   85428:	003cab06 	br	846d8 <_dtoa_r+0x728>
   8542c:	d8c00f17 	ldw	r3,60(sp)
   85430:	d9001117 	ldw	r4,68(sp)
   85434:	20e1c83a 	sub	r16,r4,r3
   85438:	0007883a 	mov	r3,zero
   8543c:	003d9b06 	br	84aac <_dtoa_r+0xafc>
   85440:	00800e44 	movi	r2,57
   85444:	b0800005 	stb	r2,0(r22)
   85448:	b5800044 	addi	r22,r22,1
   8544c:	003dc106 	br	84b54 <_dtoa_r+0xba4>
   85450:	05800084 	movi	r22,2
   85454:	003bf706 	br	84434 <_dtoa_r+0x484>
   85458:	d9000f17 	ldw	r4,60(sp)
   8545c:	013c000e 	bge	zero,r4,84460 <_dtoa_r+0x4b0>
   85460:	d9800e17 	ldw	r6,56(sp)
   85464:	01bc300e 	bge	zero,r6,84528 <_dtoa_r+0x578>
   85468:	0005883a 	mov	r2,zero
   8546c:	00d00934 	movhi	r3,16420
   85470:	a80b883a 	mov	r5,r21
   85474:	180f883a 	mov	r7,r3
   85478:	a009883a 	mov	r4,r20
   8547c:	100d883a 	mov	r6,r2
   85480:	008a0b80 	call	8a0b8 <__muldf3>
   85484:	b1000044 	addi	r4,r22,1
   85488:	1021883a 	mov	r16,r2
   8548c:	1823883a 	mov	r17,r3
   85490:	008a97c0 	call	8a97c <__floatsidf>
   85494:	880b883a 	mov	r5,r17
   85498:	8009883a 	mov	r4,r16
   8549c:	180f883a 	mov	r7,r3
   854a0:	100d883a 	mov	r6,r2
   854a4:	008a0b80 	call	8a0b8 <__muldf3>
   854a8:	0011883a 	mov	r8,zero
   854ac:	02500734 	movhi	r9,16412
   854b0:	180b883a 	mov	r5,r3
   854b4:	480f883a 	mov	r7,r9
   854b8:	1009883a 	mov	r4,r2
   854bc:	400d883a 	mov	r6,r8
   854c0:	008a0440 	call	8a044 <__adddf3>
   854c4:	102d883a 	mov	r22,r2
   854c8:	00bf3034 	movhi	r2,64704
   854cc:	10ef883a 	add	r23,r2,r3
   854d0:	d8800d17 	ldw	r2,52(sp)
   854d4:	d8c00e17 	ldw	r3,56(sp)
   854d8:	8029883a 	mov	r20,r16
   854dc:	10bfffc4 	addi	r2,r2,-1
   854e0:	882b883a 	mov	r21,r17
   854e4:	d8800415 	stw	r2,16(sp)
   854e8:	d8c00315 	stw	r3,12(sp)
   854ec:	003e8306 	br	84efc <_dtoa_r+0xf4c>
   854f0:	d8800117 	ldw	r2,4(sp)
   854f4:	dc001117 	ldw	r16,68(sp)
   854f8:	dc801017 	ldw	r18,64(sp)
   854fc:	00c00d84 	movi	r3,54
   85500:	1887c83a 	sub	r3,r3,r2
   85504:	003d6906 	br	84aac <_dtoa_r+0xafc>
   85508:	01800044 	movi	r6,1
   8550c:	3021883a 	mov	r16,r6
   85510:	d9800f15 	stw	r6,60(sp)
   85514:	d9802615 	stw	r6,152(sp)
   85518:	d9800e15 	stw	r6,56(sp)
   8551c:	003b9306 	br	8436c <_dtoa_r+0x3bc>
   85520:	b021883a 	mov	r16,r22
   85524:	dd800f15 	stw	r22,60(sp)
   85528:	003b9006 	br	8436c <_dtoa_r+0x3bc>
   8552c:	103e221e 	bne	r2,zero,84db8 <_dtoa_r+0xe08>
   85530:	b880004c 	andi	r2,r23,1
   85534:	1005003a 	cmpeq	r2,r2,zero
   85538:	103e1f1e 	bne	r2,zero,84db8 <_dtoa_r+0xe08>
   8553c:	003e1b06 	br	84dac <_dtoa_r+0xdfc>
   85540:	d9001617 	ldw	r4,88(sp)
   85544:	980b883a 	mov	r5,r19
   85548:	01800284 	movi	r6,10
   8554c:	000f883a 	mov	r7,zero
   85550:	0087df80 	call	87df8 <__multadd>
   85554:	d8c00e17 	ldw	r3,56(sp)
   85558:	1027883a 	mov	r19,r2
   8555c:	d8c00f15 	stw	r3,60(sp)
   85560:	003cd306 	br	848b0 <_dtoa_r+0x900>

00085564 <_fflush_r>:
   85564:	defffb04 	addi	sp,sp,-20
   85568:	dcc00315 	stw	r19,12(sp)
   8556c:	dc800215 	stw	r18,8(sp)
   85570:	dfc00415 	stw	ra,16(sp)
   85574:	dc400115 	stw	r17,4(sp)
   85578:	dc000015 	stw	r16,0(sp)
   8557c:	2027883a 	mov	r19,r4
   85580:	2825883a 	mov	r18,r5
   85584:	20000226 	beq	r4,zero,85590 <_fflush_r+0x2c>
   85588:	20800e17 	ldw	r2,56(r4)
   8558c:	10005626 	beq	r2,zero,856e8 <_fflush_r+0x184>
   85590:	9100030b 	ldhu	r4,12(r18)
   85594:	20ffffcc 	andi	r3,r4,65535
   85598:	18e0001c 	xori	r3,r3,32768
   8559c:	18e00004 	addi	r3,r3,-32768
   855a0:	1880020c 	andi	r2,r3,8
   855a4:	1000261e 	bne	r2,zero,85640 <_fflush_r+0xdc>
   855a8:	90c00117 	ldw	r3,4(r18)
   855ac:	20820014 	ori	r2,r4,2048
   855b0:	9080030d 	sth	r2,12(r18)
   855b4:	1009883a 	mov	r4,r2
   855b8:	00c0400e 	bge	zero,r3,856bc <_fflush_r+0x158>
   855bc:	92000a17 	ldw	r8,40(r18)
   855c0:	40004026 	beq	r8,zero,856c4 <_fflush_r+0x160>
   855c4:	2084000c 	andi	r2,r4,4096
   855c8:	10005326 	beq	r2,zero,85718 <_fflush_r+0x1b4>
   855cc:	94001417 	ldw	r16,80(r18)
   855d0:	9080030b 	ldhu	r2,12(r18)
   855d4:	1080010c 	andi	r2,r2,4
   855d8:	1000481e 	bne	r2,zero,856fc <_fflush_r+0x198>
   855dc:	91400717 	ldw	r5,28(r18)
   855e0:	9809883a 	mov	r4,r19
   855e4:	800d883a 	mov	r6,r16
   855e8:	000f883a 	mov	r7,zero
   855ec:	403ee83a 	callr	r8
   855f0:	8080261e 	bne	r16,r2,8568c <_fflush_r+0x128>
   855f4:	9080030b 	ldhu	r2,12(r18)
   855f8:	91000417 	ldw	r4,16(r18)
   855fc:	90000115 	stw	zero,4(r18)
   85600:	10bdffcc 	andi	r2,r2,63487
   85604:	10ffffcc 	andi	r3,r2,65535
   85608:	18c4000c 	andi	r3,r3,4096
   8560c:	9080030d 	sth	r2,12(r18)
   85610:	91000015 	stw	r4,0(r18)
   85614:	18002b26 	beq	r3,zero,856c4 <_fflush_r+0x160>
   85618:	0007883a 	mov	r3,zero
   8561c:	1805883a 	mov	r2,r3
   85620:	94001415 	stw	r16,80(r18)
   85624:	dfc00417 	ldw	ra,16(sp)
   85628:	dcc00317 	ldw	r19,12(sp)
   8562c:	dc800217 	ldw	r18,8(sp)
   85630:	dc400117 	ldw	r17,4(sp)
   85634:	dc000017 	ldw	r16,0(sp)
   85638:	dec00504 	addi	sp,sp,20
   8563c:	f800283a 	ret
   85640:	94400417 	ldw	r17,16(r18)
   85644:	88001f26 	beq	r17,zero,856c4 <_fflush_r+0x160>
   85648:	90800017 	ldw	r2,0(r18)
   8564c:	18c000cc 	andi	r3,r3,3
   85650:	94400015 	stw	r17,0(r18)
   85654:	1461c83a 	sub	r16,r2,r17
   85658:	18002526 	beq	r3,zero,856f0 <_fflush_r+0x18c>
   8565c:	0005883a 	mov	r2,zero
   85660:	90800215 	stw	r2,8(r18)
   85664:	0400170e 	bge	zero,r16,856c4 <_fflush_r+0x160>
   85668:	90c00917 	ldw	r3,36(r18)
   8566c:	91400717 	ldw	r5,28(r18)
   85670:	880d883a 	mov	r6,r17
   85674:	800f883a 	mov	r7,r16
   85678:	9809883a 	mov	r4,r19
   8567c:	183ee83a 	callr	r3
   85680:	88a3883a 	add	r17,r17,r2
   85684:	80a1c83a 	sub	r16,r16,r2
   85688:	00bff616 	blt	zero,r2,85664 <_fflush_r+0x100>
   8568c:	9080030b 	ldhu	r2,12(r18)
   85690:	00ffffc4 	movi	r3,-1
   85694:	10801014 	ori	r2,r2,64
   85698:	9080030d 	sth	r2,12(r18)
   8569c:	1805883a 	mov	r2,r3
   856a0:	dfc00417 	ldw	ra,16(sp)
   856a4:	dcc00317 	ldw	r19,12(sp)
   856a8:	dc800217 	ldw	r18,8(sp)
   856ac:	dc400117 	ldw	r17,4(sp)
   856b0:	dc000017 	ldw	r16,0(sp)
   856b4:	dec00504 	addi	sp,sp,20
   856b8:	f800283a 	ret
   856bc:	90800f17 	ldw	r2,60(r18)
   856c0:	00bfbe16 	blt	zero,r2,855bc <_fflush_r+0x58>
   856c4:	0007883a 	mov	r3,zero
   856c8:	1805883a 	mov	r2,r3
   856cc:	dfc00417 	ldw	ra,16(sp)
   856d0:	dcc00317 	ldw	r19,12(sp)
   856d4:	dc800217 	ldw	r18,8(sp)
   856d8:	dc400117 	ldw	r17,4(sp)
   856dc:	dc000017 	ldw	r16,0(sp)
   856e0:	dec00504 	addi	sp,sp,20
   856e4:	f800283a 	ret
   856e8:	00857fc0 	call	857fc <__sinit>
   856ec:	003fa806 	br	85590 <_fflush_r+0x2c>
   856f0:	90800517 	ldw	r2,20(r18)
   856f4:	90800215 	stw	r2,8(r18)
   856f8:	003fda06 	br	85664 <_fflush_r+0x100>
   856fc:	90800117 	ldw	r2,4(r18)
   85700:	90c00c17 	ldw	r3,48(r18)
   85704:	80a1c83a 	sub	r16,r16,r2
   85708:	183fb426 	beq	r3,zero,855dc <_fflush_r+0x78>
   8570c:	90800f17 	ldw	r2,60(r18)
   85710:	80a1c83a 	sub	r16,r16,r2
   85714:	003fb106 	br	855dc <_fflush_r+0x78>
   85718:	91400717 	ldw	r5,28(r18)
   8571c:	9809883a 	mov	r4,r19
   85720:	000d883a 	mov	r6,zero
   85724:	01c00044 	movi	r7,1
   85728:	403ee83a 	callr	r8
   8572c:	1021883a 	mov	r16,r2
   85730:	00bfffc4 	movi	r2,-1
   85734:	80800226 	beq	r16,r2,85740 <_fflush_r+0x1dc>
   85738:	92000a17 	ldw	r8,40(r18)
   8573c:	003fa406 	br	855d0 <_fflush_r+0x6c>
   85740:	98c00017 	ldw	r3,0(r19)
   85744:	00800744 	movi	r2,29
   85748:	18bfde26 	beq	r3,r2,856c4 <_fflush_r+0x160>
   8574c:	9080030b 	ldhu	r2,12(r18)
   85750:	8007883a 	mov	r3,r16
   85754:	10801014 	ori	r2,r2,64
   85758:	9080030d 	sth	r2,12(r18)
   8575c:	003fcf06 	br	8569c <_fflush_r+0x138>

00085760 <fflush>:
   85760:	01400234 	movhi	r5,8
   85764:	29555904 	addi	r5,r5,21860
   85768:	2007883a 	mov	r3,r4
   8576c:	20000526 	beq	r4,zero,85784 <fflush+0x24>
   85770:	00800274 	movhi	r2,9
   85774:	10833a04 	addi	r2,r2,3304
   85778:	11000017 	ldw	r4,0(r2)
   8577c:	180b883a 	mov	r5,r3
   85780:	00855641 	jmpi	85564 <_fflush_r>
   85784:	00800274 	movhi	r2,9
   85788:	10833b04 	addi	r2,r2,3308
   8578c:	11000017 	ldw	r4,0(r2)
   85790:	00863641 	jmpi	86364 <_fwalk_reent>

00085794 <std>:
   85794:	00800274 	movhi	r2,9
   85798:	10a20e04 	addi	r2,r2,-30664
   8579c:	20800b15 	stw	r2,44(r4)
   857a0:	00800274 	movhi	r2,9
   857a4:	10a24904 	addi	r2,r2,-30428
   857a8:	20800815 	stw	r2,32(r4)
   857ac:	00c00274 	movhi	r3,9
   857b0:	18e22a04 	addi	r3,r3,-30552
   857b4:	00800274 	movhi	r2,9
   857b8:	10a21004 	addi	r2,r2,-30656
   857bc:	2140030d 	sth	r5,12(r4)
   857c0:	2180038d 	sth	r6,14(r4)
   857c4:	20c00915 	stw	r3,36(r4)
   857c8:	20800a15 	stw	r2,40(r4)
   857cc:	20000015 	stw	zero,0(r4)
   857d0:	20000115 	stw	zero,4(r4)
   857d4:	20000215 	stw	zero,8(r4)
   857d8:	20000415 	stw	zero,16(r4)
   857dc:	20000515 	stw	zero,20(r4)
   857e0:	20000615 	stw	zero,24(r4)
   857e4:	21000715 	stw	r4,28(r4)
   857e8:	f800283a 	ret

000857ec <__sfp_lock_acquire>:
   857ec:	f800283a 	ret

000857f0 <__sfp_lock_release>:
   857f0:	f800283a 	ret

000857f4 <__sinit_lock_acquire>:
   857f4:	f800283a 	ret

000857f8 <__sinit_lock_release>:
   857f8:	f800283a 	ret

000857fc <__sinit>:
   857fc:	20800e17 	ldw	r2,56(r4)
   85800:	defffd04 	addi	sp,sp,-12
   85804:	dc400115 	stw	r17,4(sp)
   85808:	dc000015 	stw	r16,0(sp)
   8580c:	dfc00215 	stw	ra,8(sp)
   85810:	04400044 	movi	r17,1
   85814:	01400104 	movi	r5,4
   85818:	000d883a 	mov	r6,zero
   8581c:	2021883a 	mov	r16,r4
   85820:	2200bb04 	addi	r8,r4,748
   85824:	200f883a 	mov	r7,r4
   85828:	10000526 	beq	r2,zero,85840 <__sinit+0x44>
   8582c:	dfc00217 	ldw	ra,8(sp)
   85830:	dc400117 	ldw	r17,4(sp)
   85834:	dc000017 	ldw	r16,0(sp)
   85838:	dec00304 	addi	sp,sp,12
   8583c:	f800283a 	ret
   85840:	21000117 	ldw	r4,4(r4)
   85844:	00800234 	movhi	r2,8
   85848:	10963804 	addi	r2,r2,22752
   8584c:	00c000c4 	movi	r3,3
   85850:	80800f15 	stw	r2,60(r16)
   85854:	80c0b915 	stw	r3,740(r16)
   85858:	8200ba15 	stw	r8,744(r16)
   8585c:	84400e15 	stw	r17,56(r16)
   85860:	8000b815 	stw	zero,736(r16)
   85864:	00857940 	call	85794 <std>
   85868:	81000217 	ldw	r4,8(r16)
   8586c:	880d883a 	mov	r6,r17
   85870:	800f883a 	mov	r7,r16
   85874:	01400284 	movi	r5,10
   85878:	00857940 	call	85794 <std>
   8587c:	81000317 	ldw	r4,12(r16)
   85880:	800f883a 	mov	r7,r16
   85884:	01400484 	movi	r5,18
   85888:	01800084 	movi	r6,2
   8588c:	dfc00217 	ldw	ra,8(sp)
   85890:	dc400117 	ldw	r17,4(sp)
   85894:	dc000017 	ldw	r16,0(sp)
   85898:	dec00304 	addi	sp,sp,12
   8589c:	00857941 	jmpi	85794 <std>

000858a0 <__fp_lock>:
   858a0:	0005883a 	mov	r2,zero
   858a4:	f800283a 	ret

000858a8 <__fp_unlock>:
   858a8:	0005883a 	mov	r2,zero
   858ac:	f800283a 	ret

000858b0 <__fp_unlock_all>:
   858b0:	00800274 	movhi	r2,9
   858b4:	10833a04 	addi	r2,r2,3304
   858b8:	11000017 	ldw	r4,0(r2)
   858bc:	01400234 	movhi	r5,8
   858c0:	29562a04 	addi	r5,r5,22696
   858c4:	008642c1 	jmpi	8642c <_fwalk>

000858c8 <__fp_lock_all>:
   858c8:	00800274 	movhi	r2,9
   858cc:	10833a04 	addi	r2,r2,3304
   858d0:	11000017 	ldw	r4,0(r2)
   858d4:	01400234 	movhi	r5,8
   858d8:	29562804 	addi	r5,r5,22688
   858dc:	008642c1 	jmpi	8642c <_fwalk>

000858e0 <_cleanup_r>:
   858e0:	01400274 	movhi	r5,9
   858e4:	29634004 	addi	r5,r5,-29440
   858e8:	008642c1 	jmpi	8642c <_fwalk>

000858ec <_cleanup>:
   858ec:	00800274 	movhi	r2,9
   858f0:	10833b04 	addi	r2,r2,3308
   858f4:	11000017 	ldw	r4,0(r2)
   858f8:	00858e01 	jmpi	858e0 <_cleanup_r>

000858fc <__sfmoreglue>:
   858fc:	defffc04 	addi	sp,sp,-16
   85900:	dc000015 	stw	r16,0(sp)
   85904:	2821883a 	mov	r16,r5
   85908:	dc400115 	stw	r17,4(sp)
   8590c:	01401704 	movi	r5,92
   85910:	2023883a 	mov	r17,r4
   85914:	8009883a 	mov	r4,r16
   85918:	dfc00315 	stw	ra,12(sp)
   8591c:	dcc00215 	stw	r19,8(sp)
   85920:	008ace00 	call	8ace0 <__mulsi3>
   85924:	11400304 	addi	r5,r2,12
   85928:	8809883a 	mov	r4,r17
   8592c:	1027883a 	mov	r19,r2
   85930:	008673c0 	call	8673c <_malloc_r>
   85934:	10c00304 	addi	r3,r2,12
   85938:	1023883a 	mov	r17,r2
   8593c:	1809883a 	mov	r4,r3
   85940:	980d883a 	mov	r6,r19
   85944:	000b883a 	mov	r5,zero
   85948:	10000b26 	beq	r2,zero,85978 <__sfmoreglue+0x7c>
   8594c:	14000115 	stw	r16,4(r2)
   85950:	10c00215 	stw	r3,8(r2)
   85954:	10000015 	stw	zero,0(r2)
   85958:	00870400 	call	87040 <memset>
   8595c:	8805883a 	mov	r2,r17
   85960:	dfc00317 	ldw	ra,12(sp)
   85964:	dcc00217 	ldw	r19,8(sp)
   85968:	dc400117 	ldw	r17,4(sp)
   8596c:	dc000017 	ldw	r16,0(sp)
   85970:	dec00404 	addi	sp,sp,16
   85974:	f800283a 	ret
   85978:	0023883a 	mov	r17,zero
   8597c:	8805883a 	mov	r2,r17
   85980:	dfc00317 	ldw	ra,12(sp)
   85984:	dcc00217 	ldw	r19,8(sp)
   85988:	dc400117 	ldw	r17,4(sp)
   8598c:	dc000017 	ldw	r16,0(sp)
   85990:	dec00404 	addi	sp,sp,16
   85994:	f800283a 	ret

00085998 <__sfp>:
   85998:	defffd04 	addi	sp,sp,-12
   8599c:	00800274 	movhi	r2,9
   859a0:	10833b04 	addi	r2,r2,3308
   859a4:	dc000015 	stw	r16,0(sp)
   859a8:	14000017 	ldw	r16,0(r2)
   859ac:	dc400115 	stw	r17,4(sp)
   859b0:	dfc00215 	stw	ra,8(sp)
   859b4:	80800e17 	ldw	r2,56(r16)
   859b8:	2023883a 	mov	r17,r4
   859bc:	10002626 	beq	r2,zero,85a58 <__sfp+0xc0>
   859c0:	8400b804 	addi	r16,r16,736
   859c4:	80800117 	ldw	r2,4(r16)
   859c8:	81000217 	ldw	r4,8(r16)
   859cc:	10ffffc4 	addi	r3,r2,-1
   859d0:	18000916 	blt	r3,zero,859f8 <__sfp+0x60>
   859d4:	2080030f 	ldh	r2,12(r4)
   859d8:	10000b26 	beq	r2,zero,85a08 <__sfp+0x70>
   859dc:	017fffc4 	movi	r5,-1
   859e0:	00000206 	br	859ec <__sfp+0x54>
   859e4:	2080030f 	ldh	r2,12(r4)
   859e8:	10000726 	beq	r2,zero,85a08 <__sfp+0x70>
   859ec:	18ffffc4 	addi	r3,r3,-1
   859f0:	21001704 	addi	r4,r4,92
   859f4:	197ffb1e 	bne	r3,r5,859e4 <__sfp+0x4c>
   859f8:	80800017 	ldw	r2,0(r16)
   859fc:	10001926 	beq	r2,zero,85a64 <__sfp+0xcc>
   85a00:	1021883a 	mov	r16,r2
   85a04:	003fef06 	br	859c4 <__sfp+0x2c>
   85a08:	00bfffc4 	movi	r2,-1
   85a0c:	00c00044 	movi	r3,1
   85a10:	2080038d 	sth	r2,14(r4)
   85a14:	20c0030d 	sth	r3,12(r4)
   85a18:	20000015 	stw	zero,0(r4)
   85a1c:	20000215 	stw	zero,8(r4)
   85a20:	20000115 	stw	zero,4(r4)
   85a24:	20000415 	stw	zero,16(r4)
   85a28:	20000515 	stw	zero,20(r4)
   85a2c:	20000615 	stw	zero,24(r4)
   85a30:	20000c15 	stw	zero,48(r4)
   85a34:	20000d15 	stw	zero,52(r4)
   85a38:	20001115 	stw	zero,68(r4)
   85a3c:	20001215 	stw	zero,72(r4)
   85a40:	2005883a 	mov	r2,r4
   85a44:	dfc00217 	ldw	ra,8(sp)
   85a48:	dc400117 	ldw	r17,4(sp)
   85a4c:	dc000017 	ldw	r16,0(sp)
   85a50:	dec00304 	addi	sp,sp,12
   85a54:	f800283a 	ret
   85a58:	8009883a 	mov	r4,r16
   85a5c:	00857fc0 	call	857fc <__sinit>
   85a60:	003fd706 	br	859c0 <__sfp+0x28>
   85a64:	8809883a 	mov	r4,r17
   85a68:	01400104 	movi	r5,4
   85a6c:	00858fc0 	call	858fc <__sfmoreglue>
   85a70:	80800015 	stw	r2,0(r16)
   85a74:	103fe21e 	bne	r2,zero,85a00 <__sfp+0x68>
   85a78:	00800304 	movi	r2,12
   85a7c:	0009883a 	mov	r4,zero
   85a80:	88800015 	stw	r2,0(r17)
   85a84:	003fee06 	br	85a40 <__sfp+0xa8>

00085a88 <_malloc_trim_r>:
   85a88:	defffb04 	addi	sp,sp,-20
   85a8c:	dcc00315 	stw	r19,12(sp)
   85a90:	04c00274 	movhi	r19,9
   85a94:	9cfd8104 	addi	r19,r19,-2556
   85a98:	dc800215 	stw	r18,8(sp)
   85a9c:	dc400115 	stw	r17,4(sp)
   85aa0:	dc000015 	stw	r16,0(sp)
   85aa4:	2823883a 	mov	r17,r5
   85aa8:	2025883a 	mov	r18,r4
   85aac:	dfc00415 	stw	ra,16(sp)
   85ab0:	008bd300 	call	8bd30 <__malloc_lock>
   85ab4:	98800217 	ldw	r2,8(r19)
   85ab8:	9009883a 	mov	r4,r18
   85abc:	000b883a 	mov	r5,zero
   85ac0:	10c00117 	ldw	r3,4(r2)
   85ac4:	00bfff04 	movi	r2,-4
   85ac8:	18a0703a 	and	r16,r3,r2
   85acc:	8463c83a 	sub	r17,r16,r17
   85ad0:	8c43fbc4 	addi	r17,r17,4079
   85ad4:	8822d33a 	srli	r17,r17,12
   85ad8:	0083ffc4 	movi	r2,4095
   85adc:	8c7fffc4 	addi	r17,r17,-1
   85ae0:	8822933a 	slli	r17,r17,12
   85ae4:	1440060e 	bge	r2,r17,85b00 <_malloc_trim_r+0x78>
   85ae8:	00887c80 	call	887c8 <_sbrk_r>
   85aec:	98c00217 	ldw	r3,8(r19)
   85af0:	9009883a 	mov	r4,r18
   85af4:	044bc83a 	sub	r5,zero,r17
   85af8:	80c7883a 	add	r3,r16,r3
   85afc:	10c00926 	beq	r2,r3,85b24 <_malloc_trim_r+0x9c>
   85b00:	008bd500 	call	8bd50 <__malloc_unlock>
   85b04:	0005883a 	mov	r2,zero
   85b08:	dfc00417 	ldw	ra,16(sp)
   85b0c:	dcc00317 	ldw	r19,12(sp)
   85b10:	dc800217 	ldw	r18,8(sp)
   85b14:	dc400117 	ldw	r17,4(sp)
   85b18:	dc000017 	ldw	r16,0(sp)
   85b1c:	dec00504 	addi	sp,sp,20
   85b20:	f800283a 	ret
   85b24:	9009883a 	mov	r4,r18
   85b28:	00887c80 	call	887c8 <_sbrk_r>
   85b2c:	844dc83a 	sub	r6,r16,r17
   85b30:	00ffffc4 	movi	r3,-1
   85b34:	9009883a 	mov	r4,r18
   85b38:	000b883a 	mov	r5,zero
   85b3c:	01c00274 	movhi	r7,9
   85b40:	39ca3404 	addi	r7,r7,10448
   85b44:	31800054 	ori	r6,r6,1
   85b48:	10c00926 	beq	r2,r3,85b70 <_malloc_trim_r+0xe8>
   85b4c:	38800017 	ldw	r2,0(r7)
   85b50:	98c00217 	ldw	r3,8(r19)
   85b54:	9009883a 	mov	r4,r18
   85b58:	1445c83a 	sub	r2,r2,r17
   85b5c:	38800015 	stw	r2,0(r7)
   85b60:	19800115 	stw	r6,4(r3)
   85b64:	008bd500 	call	8bd50 <__malloc_unlock>
   85b68:	00800044 	movi	r2,1
   85b6c:	003fe606 	br	85b08 <_malloc_trim_r+0x80>
   85b70:	00887c80 	call	887c8 <_sbrk_r>
   85b74:	99800217 	ldw	r6,8(r19)
   85b78:	100f883a 	mov	r7,r2
   85b7c:	9009883a 	mov	r4,r18
   85b80:	1187c83a 	sub	r3,r2,r6
   85b84:	008003c4 	movi	r2,15
   85b88:	19400054 	ori	r5,r3,1
   85b8c:	10ffdc0e 	bge	r2,r3,85b00 <_malloc_trim_r+0x78>
   85b90:	00800274 	movhi	r2,9
   85b94:	10833f04 	addi	r2,r2,3324
   85b98:	10c00017 	ldw	r3,0(r2)
   85b9c:	00800274 	movhi	r2,9
   85ba0:	108a3404 	addi	r2,r2,10448
   85ba4:	31400115 	stw	r5,4(r6)
   85ba8:	38c7c83a 	sub	r3,r7,r3
   85bac:	10c00015 	stw	r3,0(r2)
   85bb0:	003fd306 	br	85b00 <_malloc_trim_r+0x78>

00085bb4 <_free_r>:
   85bb4:	defffd04 	addi	sp,sp,-12
   85bb8:	dc400115 	stw	r17,4(sp)
   85bbc:	dc000015 	stw	r16,0(sp)
   85bc0:	dfc00215 	stw	ra,8(sp)
   85bc4:	2821883a 	mov	r16,r5
   85bc8:	2023883a 	mov	r17,r4
   85bcc:	28005a26 	beq	r5,zero,85d38 <_free_r+0x184>
   85bd0:	008bd300 	call	8bd30 <__malloc_lock>
   85bd4:	823ffe04 	addi	r8,r16,-8
   85bd8:	41400117 	ldw	r5,4(r8)
   85bdc:	00bfff84 	movi	r2,-2
   85be0:	02800274 	movhi	r10,9
   85be4:	52bd8104 	addi	r10,r10,-2556
   85be8:	288e703a 	and	r7,r5,r2
   85bec:	41cd883a 	add	r6,r8,r7
   85bf0:	30c00117 	ldw	r3,4(r6)
   85bf4:	51000217 	ldw	r4,8(r10)
   85bf8:	00bfff04 	movi	r2,-4
   85bfc:	1892703a 	and	r9,r3,r2
   85c00:	5017883a 	mov	r11,r10
   85c04:	31006726 	beq	r6,r4,85da4 <_free_r+0x1f0>
   85c08:	2880004c 	andi	r2,r5,1
   85c0c:	1005003a 	cmpeq	r2,r2,zero
   85c10:	32400115 	stw	r9,4(r6)
   85c14:	10001a1e 	bne	r2,zero,85c80 <_free_r+0xcc>
   85c18:	000b883a 	mov	r5,zero
   85c1c:	3247883a 	add	r3,r6,r9
   85c20:	18800117 	ldw	r2,4(r3)
   85c24:	1080004c 	andi	r2,r2,1
   85c28:	1000231e 	bne	r2,zero,85cb8 <_free_r+0x104>
   85c2c:	280ac03a 	cmpne	r5,r5,zero
   85c30:	3a4f883a 	add	r7,r7,r9
   85c34:	2800451e 	bne	r5,zero,85d4c <_free_r+0x198>
   85c38:	31000217 	ldw	r4,8(r6)
   85c3c:	00800274 	movhi	r2,9
   85c40:	10bd8304 	addi	r2,r2,-2548
   85c44:	20807b26 	beq	r4,r2,85e34 <_free_r+0x280>
   85c48:	30800317 	ldw	r2,12(r6)
   85c4c:	3a07883a 	add	r3,r7,r8
   85c50:	19c00015 	stw	r7,0(r3)
   85c54:	11000215 	stw	r4,8(r2)
   85c58:	20800315 	stw	r2,12(r4)
   85c5c:	38800054 	ori	r2,r7,1
   85c60:	40800115 	stw	r2,4(r8)
   85c64:	28001a26 	beq	r5,zero,85cd0 <_free_r+0x11c>
   85c68:	8809883a 	mov	r4,r17
   85c6c:	dfc00217 	ldw	ra,8(sp)
   85c70:	dc400117 	ldw	r17,4(sp)
   85c74:	dc000017 	ldw	r16,0(sp)
   85c78:	dec00304 	addi	sp,sp,12
   85c7c:	008bd501 	jmpi	8bd50 <__malloc_unlock>
   85c80:	80bffe17 	ldw	r2,-8(r16)
   85c84:	50c00204 	addi	r3,r10,8
   85c88:	4091c83a 	sub	r8,r8,r2
   85c8c:	41000217 	ldw	r4,8(r8)
   85c90:	388f883a 	add	r7,r7,r2
   85c94:	20c06126 	beq	r4,r3,85e1c <_free_r+0x268>
   85c98:	40800317 	ldw	r2,12(r8)
   85c9c:	3247883a 	add	r3,r6,r9
   85ca0:	000b883a 	mov	r5,zero
   85ca4:	11000215 	stw	r4,8(r2)
   85ca8:	20800315 	stw	r2,12(r4)
   85cac:	18800117 	ldw	r2,4(r3)
   85cb0:	1080004c 	andi	r2,r2,1
   85cb4:	103fdd26 	beq	r2,zero,85c2c <_free_r+0x78>
   85cb8:	38800054 	ori	r2,r7,1
   85cbc:	3a07883a 	add	r3,r7,r8
   85cc0:	280ac03a 	cmpne	r5,r5,zero
   85cc4:	40800115 	stw	r2,4(r8)
   85cc8:	19c00015 	stw	r7,0(r3)
   85ccc:	283fe61e 	bne	r5,zero,85c68 <_free_r+0xb4>
   85cd0:	00807fc4 	movi	r2,511
   85cd4:	11c01f2e 	bgeu	r2,r7,85d54 <_free_r+0x1a0>
   85cd8:	3806d27a 	srli	r3,r7,9
   85cdc:	1800481e 	bne	r3,zero,85e00 <_free_r+0x24c>
   85ce0:	3804d0fa 	srli	r2,r7,3
   85ce4:	100690fa 	slli	r3,r2,3
   85ce8:	1acd883a 	add	r6,r3,r11
   85cec:	31400217 	ldw	r5,8(r6)
   85cf0:	31405926 	beq	r6,r5,85e58 <_free_r+0x2a4>
   85cf4:	28800117 	ldw	r2,4(r5)
   85cf8:	00ffff04 	movi	r3,-4
   85cfc:	10c4703a 	and	r2,r2,r3
   85d00:	3880022e 	bgeu	r7,r2,85d0c <_free_r+0x158>
   85d04:	29400217 	ldw	r5,8(r5)
   85d08:	317ffa1e 	bne	r6,r5,85cf4 <_free_r+0x140>
   85d0c:	29800317 	ldw	r6,12(r5)
   85d10:	41800315 	stw	r6,12(r8)
   85d14:	41400215 	stw	r5,8(r8)
   85d18:	8809883a 	mov	r4,r17
   85d1c:	2a000315 	stw	r8,12(r5)
   85d20:	32000215 	stw	r8,8(r6)
   85d24:	dfc00217 	ldw	ra,8(sp)
   85d28:	dc400117 	ldw	r17,4(sp)
   85d2c:	dc000017 	ldw	r16,0(sp)
   85d30:	dec00304 	addi	sp,sp,12
   85d34:	008bd501 	jmpi	8bd50 <__malloc_unlock>
   85d38:	dfc00217 	ldw	ra,8(sp)
   85d3c:	dc400117 	ldw	r17,4(sp)
   85d40:	dc000017 	ldw	r16,0(sp)
   85d44:	dec00304 	addi	sp,sp,12
   85d48:	f800283a 	ret
   85d4c:	31000217 	ldw	r4,8(r6)
   85d50:	003fbd06 	br	85c48 <_free_r+0x94>
   85d54:	3806d0fa 	srli	r3,r7,3
   85d58:	00800044 	movi	r2,1
   85d5c:	51400117 	ldw	r5,4(r10)
   85d60:	180890fa 	slli	r4,r3,3
   85d64:	1807d0ba 	srai	r3,r3,2
   85d68:	22c9883a 	add	r4,r4,r11
   85d6c:	21800217 	ldw	r6,8(r4)
   85d70:	10c4983a 	sll	r2,r2,r3
   85d74:	41000315 	stw	r4,12(r8)
   85d78:	41800215 	stw	r6,8(r8)
   85d7c:	288ab03a 	or	r5,r5,r2
   85d80:	22000215 	stw	r8,8(r4)
   85d84:	8809883a 	mov	r4,r17
   85d88:	51400115 	stw	r5,4(r10)
   85d8c:	32000315 	stw	r8,12(r6)
   85d90:	dfc00217 	ldw	ra,8(sp)
   85d94:	dc400117 	ldw	r17,4(sp)
   85d98:	dc000017 	ldw	r16,0(sp)
   85d9c:	dec00304 	addi	sp,sp,12
   85da0:	008bd501 	jmpi	8bd50 <__malloc_unlock>
   85da4:	2880004c 	andi	r2,r5,1
   85da8:	3a4d883a 	add	r6,r7,r9
   85dac:	1000071e 	bne	r2,zero,85dcc <_free_r+0x218>
   85db0:	80bffe17 	ldw	r2,-8(r16)
   85db4:	4091c83a 	sub	r8,r8,r2
   85db8:	41000317 	ldw	r4,12(r8)
   85dbc:	40c00217 	ldw	r3,8(r8)
   85dc0:	308d883a 	add	r6,r6,r2
   85dc4:	20c00215 	stw	r3,8(r4)
   85dc8:	19000315 	stw	r4,12(r3)
   85dcc:	00800274 	movhi	r2,9
   85dd0:	10833e04 	addi	r2,r2,3320
   85dd4:	11000017 	ldw	r4,0(r2)
   85dd8:	30c00054 	ori	r3,r6,1
   85ddc:	52000215 	stw	r8,8(r10)
   85de0:	40c00115 	stw	r3,4(r8)
   85de4:	313fa036 	bltu	r6,r4,85c68 <_free_r+0xb4>
   85de8:	00800274 	movhi	r2,9
   85dec:	108a2a04 	addi	r2,r2,10408
   85df0:	11400017 	ldw	r5,0(r2)
   85df4:	8809883a 	mov	r4,r17
   85df8:	0085a880 	call	85a88 <_malloc_trim_r>
   85dfc:	003f9a06 	br	85c68 <_free_r+0xb4>
   85e00:	00800104 	movi	r2,4
   85e04:	10c0072e 	bgeu	r2,r3,85e24 <_free_r+0x270>
   85e08:	00800504 	movi	r2,20
   85e0c:	10c01936 	bltu	r2,r3,85e74 <_free_r+0x2c0>
   85e10:	188016c4 	addi	r2,r3,91
   85e14:	100690fa 	slli	r3,r2,3
   85e18:	003fb306 	br	85ce8 <_free_r+0x134>
   85e1c:	01400044 	movi	r5,1
   85e20:	003f7e06 	br	85c1c <_free_r+0x68>
   85e24:	3804d1ba 	srli	r2,r7,6
   85e28:	10800e04 	addi	r2,r2,56
   85e2c:	100690fa 	slli	r3,r2,3
   85e30:	003fad06 	br	85ce8 <_free_r+0x134>
   85e34:	22000315 	stw	r8,12(r4)
   85e38:	22000215 	stw	r8,8(r4)
   85e3c:	3a05883a 	add	r2,r7,r8
   85e40:	38c00054 	ori	r3,r7,1
   85e44:	11c00015 	stw	r7,0(r2)
   85e48:	41000215 	stw	r4,8(r8)
   85e4c:	40c00115 	stw	r3,4(r8)
   85e50:	41000315 	stw	r4,12(r8)
   85e54:	003f8406 	br	85c68 <_free_r+0xb4>
   85e58:	1005d0ba 	srai	r2,r2,2
   85e5c:	00c00044 	movi	r3,1
   85e60:	51000117 	ldw	r4,4(r10)
   85e64:	1886983a 	sll	r3,r3,r2
   85e68:	20c8b03a 	or	r4,r4,r3
   85e6c:	51000115 	stw	r4,4(r10)
   85e70:	003fa706 	br	85d10 <_free_r+0x15c>
   85e74:	00801504 	movi	r2,84
   85e78:	10c00436 	bltu	r2,r3,85e8c <_free_r+0x2d8>
   85e7c:	3804d33a 	srli	r2,r7,12
   85e80:	10801b84 	addi	r2,r2,110
   85e84:	100690fa 	slli	r3,r2,3
   85e88:	003f9706 	br	85ce8 <_free_r+0x134>
   85e8c:	00805504 	movi	r2,340
   85e90:	10c00436 	bltu	r2,r3,85ea4 <_free_r+0x2f0>
   85e94:	3804d3fa 	srli	r2,r7,15
   85e98:	10801dc4 	addi	r2,r2,119
   85e9c:	100690fa 	slli	r3,r2,3
   85ea0:	003f9106 	br	85ce8 <_free_r+0x134>
   85ea4:	00815504 	movi	r2,1364
   85ea8:	10c0032e 	bgeu	r2,r3,85eb8 <_free_r+0x304>
   85eac:	00801f84 	movi	r2,126
   85eb0:	00c0fc04 	movi	r3,1008
   85eb4:	003f8c06 	br	85ce8 <_free_r+0x134>
   85eb8:	3804d4ba 	srli	r2,r7,18
   85ebc:	10801f04 	addi	r2,r2,124
   85ec0:	100690fa 	slli	r3,r2,3
   85ec4:	003f8806 	br	85ce8 <_free_r+0x134>

00085ec8 <__sfvwrite_r>:
   85ec8:	30800217 	ldw	r2,8(r6)
   85ecc:	defff504 	addi	sp,sp,-44
   85ed0:	df000915 	stw	fp,36(sp)
   85ed4:	dd800715 	stw	r22,28(sp)
   85ed8:	dc800315 	stw	r18,12(sp)
   85edc:	dfc00a15 	stw	ra,40(sp)
   85ee0:	ddc00815 	stw	r23,32(sp)
   85ee4:	dd400615 	stw	r21,24(sp)
   85ee8:	dd000515 	stw	r20,20(sp)
   85eec:	dcc00415 	stw	r19,16(sp)
   85ef0:	dc400215 	stw	r17,8(sp)
   85ef4:	dc000115 	stw	r16,4(sp)
   85ef8:	302d883a 	mov	r22,r6
   85efc:	2039883a 	mov	fp,r4
   85f00:	2825883a 	mov	r18,r5
   85f04:	10001c26 	beq	r2,zero,85f78 <__sfvwrite_r+0xb0>
   85f08:	29c0030b 	ldhu	r7,12(r5)
   85f0c:	3880020c 	andi	r2,r7,8
   85f10:	10002726 	beq	r2,zero,85fb0 <__sfvwrite_r+0xe8>
   85f14:	28800417 	ldw	r2,16(r5)
   85f18:	10002526 	beq	r2,zero,85fb0 <__sfvwrite_r+0xe8>
   85f1c:	3880008c 	andi	r2,r7,2
   85f20:	b5400017 	ldw	r21,0(r22)
   85f24:	10002826 	beq	r2,zero,85fc8 <__sfvwrite_r+0x100>
   85f28:	0021883a 	mov	r16,zero
   85f2c:	0023883a 	mov	r17,zero
   85f30:	880d883a 	mov	r6,r17
   85f34:	e009883a 	mov	r4,fp
   85f38:	00810004 	movi	r2,1024
   85f3c:	80006e26 	beq	r16,zero,860f8 <__sfvwrite_r+0x230>
   85f40:	800f883a 	mov	r7,r16
   85f44:	91400717 	ldw	r5,28(r18)
   85f48:	1400012e 	bgeu	r2,r16,85f50 <__sfvwrite_r+0x88>
   85f4c:	100f883a 	mov	r7,r2
   85f50:	90c00917 	ldw	r3,36(r18)
   85f54:	183ee83a 	callr	r3
   85f58:	1007883a 	mov	r3,r2
   85f5c:	80a1c83a 	sub	r16,r16,r2
   85f60:	88a3883a 	add	r17,r17,r2
   85f64:	00806d0e 	bge	zero,r2,8611c <__sfvwrite_r+0x254>
   85f68:	b0800217 	ldw	r2,8(r22)
   85f6c:	10c5c83a 	sub	r2,r2,r3
   85f70:	b0800215 	stw	r2,8(r22)
   85f74:	103fee1e 	bne	r2,zero,85f30 <__sfvwrite_r+0x68>
   85f78:	0009883a 	mov	r4,zero
   85f7c:	2005883a 	mov	r2,r4
   85f80:	dfc00a17 	ldw	ra,40(sp)
   85f84:	df000917 	ldw	fp,36(sp)
   85f88:	ddc00817 	ldw	r23,32(sp)
   85f8c:	dd800717 	ldw	r22,28(sp)
   85f90:	dd400617 	ldw	r21,24(sp)
   85f94:	dd000517 	ldw	r20,20(sp)
   85f98:	dcc00417 	ldw	r19,16(sp)
   85f9c:	dc800317 	ldw	r18,12(sp)
   85fa0:	dc400217 	ldw	r17,8(sp)
   85fa4:	dc000117 	ldw	r16,4(sp)
   85fa8:	dec00b04 	addi	sp,sp,44
   85fac:	f800283a 	ret
   85fb0:	0083c300 	call	83c30 <__swsetup_r>
   85fb4:	1000e41e 	bne	r2,zero,86348 <__sfvwrite_r+0x480>
   85fb8:	91c0030b 	ldhu	r7,12(r18)
   85fbc:	b5400017 	ldw	r21,0(r22)
   85fc0:	3880008c 	andi	r2,r7,2
   85fc4:	103fd81e 	bne	r2,zero,85f28 <__sfvwrite_r+0x60>
   85fc8:	3880004c 	andi	r2,r7,1
   85fcc:	1005003a 	cmpeq	r2,r2,zero
   85fd0:	10005726 	beq	r2,zero,86130 <__sfvwrite_r+0x268>
   85fd4:	0029883a 	mov	r20,zero
   85fd8:	002f883a 	mov	r23,zero
   85fdc:	a0004226 	beq	r20,zero,860e8 <__sfvwrite_r+0x220>
   85fe0:	3880800c 	andi	r2,r7,512
   85fe4:	94000217 	ldw	r16,8(r18)
   85fe8:	10008b26 	beq	r2,zero,86218 <__sfvwrite_r+0x350>
   85fec:	800d883a 	mov	r6,r16
   85ff0:	a400a536 	bltu	r20,r16,86288 <__sfvwrite_r+0x3c0>
   85ff4:	3881200c 	andi	r2,r7,1152
   85ff8:	10002726 	beq	r2,zero,86098 <__sfvwrite_r+0x1d0>
   85ffc:	90800517 	ldw	r2,20(r18)
   86000:	92000417 	ldw	r8,16(r18)
   86004:	91400017 	ldw	r5,0(r18)
   86008:	1087883a 	add	r3,r2,r2
   8600c:	1887883a 	add	r3,r3,r2
   86010:	1808d7fa 	srli	r4,r3,31
   86014:	2a21c83a 	sub	r16,r5,r8
   86018:	80800044 	addi	r2,r16,1
   8601c:	20c9883a 	add	r4,r4,r3
   86020:	2027d07a 	srai	r19,r4,1
   86024:	a085883a 	add	r2,r20,r2
   86028:	980d883a 	mov	r6,r19
   8602c:	9880022e 	bgeu	r19,r2,86038 <__sfvwrite_r+0x170>
   86030:	1027883a 	mov	r19,r2
   86034:	100d883a 	mov	r6,r2
   86038:	3881000c 	andi	r2,r7,1024
   8603c:	1000b826 	beq	r2,zero,86320 <__sfvwrite_r+0x458>
   86040:	300b883a 	mov	r5,r6
   86044:	e009883a 	mov	r4,fp
   86048:	008673c0 	call	8673c <_malloc_r>
   8604c:	10003126 	beq	r2,zero,86114 <__sfvwrite_r+0x24c>
   86050:	91400417 	ldw	r5,16(r18)
   86054:	1009883a 	mov	r4,r2
   86058:	800d883a 	mov	r6,r16
   8605c:	1023883a 	mov	r17,r2
   86060:	00818940 	call	81894 <memcpy>
   86064:	90c0030b 	ldhu	r3,12(r18)
   86068:	00beffc4 	movi	r2,-1025
   8606c:	1886703a 	and	r3,r3,r2
   86070:	18c02014 	ori	r3,r3,128
   86074:	90c0030d 	sth	r3,12(r18)
   86078:	9c07c83a 	sub	r3,r19,r16
   8607c:	8c05883a 	add	r2,r17,r16
   86080:	a00d883a 	mov	r6,r20
   86084:	a021883a 	mov	r16,r20
   86088:	90800015 	stw	r2,0(r18)
   8608c:	90c00215 	stw	r3,8(r18)
   86090:	94400415 	stw	r17,16(r18)
   86094:	94c00515 	stw	r19,20(r18)
   86098:	91000017 	ldw	r4,0(r18)
   8609c:	b80b883a 	mov	r5,r23
   860a0:	a023883a 	mov	r17,r20
   860a4:	0086f600 	call	86f60 <memmove>
   860a8:	90c00217 	ldw	r3,8(r18)
   860ac:	90800017 	ldw	r2,0(r18)
   860b0:	a027883a 	mov	r19,r20
   860b4:	1c07c83a 	sub	r3,r3,r16
   860b8:	1405883a 	add	r2,r2,r16
   860bc:	90c00215 	stw	r3,8(r18)
   860c0:	a021883a 	mov	r16,r20
   860c4:	90800015 	stw	r2,0(r18)
   860c8:	b0800217 	ldw	r2,8(r22)
   860cc:	1405c83a 	sub	r2,r2,r16
   860d0:	b0800215 	stw	r2,8(r22)
   860d4:	103fa826 	beq	r2,zero,85f78 <__sfvwrite_r+0xb0>
   860d8:	a469c83a 	sub	r20,r20,r17
   860dc:	91c0030b 	ldhu	r7,12(r18)
   860e0:	bcef883a 	add	r23,r23,r19
   860e4:	a03fbe1e 	bne	r20,zero,85fe0 <__sfvwrite_r+0x118>
   860e8:	adc00017 	ldw	r23,0(r21)
   860ec:	ad000117 	ldw	r20,4(r21)
   860f0:	ad400204 	addi	r21,r21,8
   860f4:	003fb906 	br	85fdc <__sfvwrite_r+0x114>
   860f8:	ac400017 	ldw	r17,0(r21)
   860fc:	ac000117 	ldw	r16,4(r21)
   86100:	ad400204 	addi	r21,r21,8
   86104:	003f8a06 	br	85f30 <__sfvwrite_r+0x68>
   86108:	91400417 	ldw	r5,16(r18)
   8610c:	e009883a 	mov	r4,fp
   86110:	0085bb40 	call	85bb4 <_free_r>
   86114:	00800304 	movi	r2,12
   86118:	e0800015 	stw	r2,0(fp)
   8611c:	9080030b 	ldhu	r2,12(r18)
   86120:	013fffc4 	movi	r4,-1
   86124:	10801014 	ori	r2,r2,64
   86128:	9080030d 	sth	r2,12(r18)
   8612c:	003f9306 	br	85f7c <__sfvwrite_r+0xb4>
   86130:	0027883a 	mov	r19,zero
   86134:	002f883a 	mov	r23,zero
   86138:	d8000015 	stw	zero,0(sp)
   8613c:	0029883a 	mov	r20,zero
   86140:	98001e26 	beq	r19,zero,861bc <__sfvwrite_r+0x2f4>
   86144:	d8c00017 	ldw	r3,0(sp)
   86148:	1804c03a 	cmpne	r2,r3,zero
   8614c:	10005e26 	beq	r2,zero,862c8 <__sfvwrite_r+0x400>
   86150:	9821883a 	mov	r16,r19
   86154:	a4c0012e 	bgeu	r20,r19,8615c <__sfvwrite_r+0x294>
   86158:	a021883a 	mov	r16,r20
   8615c:	91000017 	ldw	r4,0(r18)
   86160:	90800417 	ldw	r2,16(r18)
   86164:	91800217 	ldw	r6,8(r18)
   86168:	91c00517 	ldw	r7,20(r18)
   8616c:	1100022e 	bgeu	r2,r4,86178 <__sfvwrite_r+0x2b0>
   86170:	31e3883a 	add	r17,r6,r7
   86174:	8c001616 	blt	r17,r16,861d0 <__sfvwrite_r+0x308>
   86178:	81c03816 	blt	r16,r7,8625c <__sfvwrite_r+0x394>
   8617c:	90c00917 	ldw	r3,36(r18)
   86180:	91400717 	ldw	r5,28(r18)
   86184:	e009883a 	mov	r4,fp
   86188:	b80d883a 	mov	r6,r23
   8618c:	183ee83a 	callr	r3
   86190:	1023883a 	mov	r17,r2
   86194:	00bfe10e 	bge	zero,r2,8611c <__sfvwrite_r+0x254>
   86198:	a469c83a 	sub	r20,r20,r17
   8619c:	a0001826 	beq	r20,zero,86200 <__sfvwrite_r+0x338>
   861a0:	b0800217 	ldw	r2,8(r22)
   861a4:	1445c83a 	sub	r2,r2,r17
   861a8:	b0800215 	stw	r2,8(r22)
   861ac:	103f7226 	beq	r2,zero,85f78 <__sfvwrite_r+0xb0>
   861b0:	9c67c83a 	sub	r19,r19,r17
   861b4:	bc6f883a 	add	r23,r23,r17
   861b8:	983fe21e 	bne	r19,zero,86144 <__sfvwrite_r+0x27c>
   861bc:	adc00017 	ldw	r23,0(r21)
   861c0:	acc00117 	ldw	r19,4(r21)
   861c4:	ad400204 	addi	r21,r21,8
   861c8:	d8000015 	stw	zero,0(sp)
   861cc:	003fdc06 	br	86140 <__sfvwrite_r+0x278>
   861d0:	b80b883a 	mov	r5,r23
   861d4:	880d883a 	mov	r6,r17
   861d8:	0086f600 	call	86f60 <memmove>
   861dc:	90c00017 	ldw	r3,0(r18)
   861e0:	e009883a 	mov	r4,fp
   861e4:	900b883a 	mov	r5,r18
   861e8:	1c47883a 	add	r3,r3,r17
   861ec:	90c00015 	stw	r3,0(r18)
   861f0:	00855640 	call	85564 <_fflush_r>
   861f4:	103fc91e 	bne	r2,zero,8611c <__sfvwrite_r+0x254>
   861f8:	a469c83a 	sub	r20,r20,r17
   861fc:	a03fe81e 	bne	r20,zero,861a0 <__sfvwrite_r+0x2d8>
   86200:	e009883a 	mov	r4,fp
   86204:	900b883a 	mov	r5,r18
   86208:	00855640 	call	85564 <_fflush_r>
   8620c:	103fc31e 	bne	r2,zero,8611c <__sfvwrite_r+0x254>
   86210:	d8000015 	stw	zero,0(sp)
   86214:	003fe206 	br	861a0 <__sfvwrite_r+0x2d8>
   86218:	91000017 	ldw	r4,0(r18)
   8621c:	90800417 	ldw	r2,16(r18)
   86220:	1100022e 	bgeu	r2,r4,8622c <__sfvwrite_r+0x364>
   86224:	8023883a 	mov	r17,r16
   86228:	85003136 	bltu	r16,r20,862f0 <__sfvwrite_r+0x428>
   8622c:	91c00517 	ldw	r7,20(r18)
   86230:	a1c01836 	bltu	r20,r7,86294 <__sfvwrite_r+0x3cc>
   86234:	90c00917 	ldw	r3,36(r18)
   86238:	91400717 	ldw	r5,28(r18)
   8623c:	e009883a 	mov	r4,fp
   86240:	b80d883a 	mov	r6,r23
   86244:	183ee83a 	callr	r3
   86248:	1021883a 	mov	r16,r2
   8624c:	00bfb30e 	bge	zero,r2,8611c <__sfvwrite_r+0x254>
   86250:	1023883a 	mov	r17,r2
   86254:	1027883a 	mov	r19,r2
   86258:	003f9b06 	br	860c8 <__sfvwrite_r+0x200>
   8625c:	b80b883a 	mov	r5,r23
   86260:	800d883a 	mov	r6,r16
   86264:	0086f600 	call	86f60 <memmove>
   86268:	90c00217 	ldw	r3,8(r18)
   8626c:	90800017 	ldw	r2,0(r18)
   86270:	8023883a 	mov	r17,r16
   86274:	1c07c83a 	sub	r3,r3,r16
   86278:	1405883a 	add	r2,r2,r16
   8627c:	90c00215 	stw	r3,8(r18)
   86280:	90800015 	stw	r2,0(r18)
   86284:	003fc406 	br	86198 <__sfvwrite_r+0x2d0>
   86288:	a00d883a 	mov	r6,r20
   8628c:	a021883a 	mov	r16,r20
   86290:	003f8106 	br	86098 <__sfvwrite_r+0x1d0>
   86294:	b80b883a 	mov	r5,r23
   86298:	a00d883a 	mov	r6,r20
   8629c:	0086f600 	call	86f60 <memmove>
   862a0:	90c00217 	ldw	r3,8(r18)
   862a4:	90800017 	ldw	r2,0(r18)
   862a8:	a021883a 	mov	r16,r20
   862ac:	1d07c83a 	sub	r3,r3,r20
   862b0:	1505883a 	add	r2,r2,r20
   862b4:	a023883a 	mov	r17,r20
   862b8:	a027883a 	mov	r19,r20
   862bc:	90c00215 	stw	r3,8(r18)
   862c0:	90800015 	stw	r2,0(r18)
   862c4:	003f8006 	br	860c8 <__sfvwrite_r+0x200>
   862c8:	b809883a 	mov	r4,r23
   862cc:	01400284 	movi	r5,10
   862d0:	980d883a 	mov	r6,r19
   862d4:	0086e7c0 	call	86e7c <memchr>
   862d8:	10001726 	beq	r2,zero,86338 <__sfvwrite_r+0x470>
   862dc:	15c5c83a 	sub	r2,r2,r23
   862e0:	15000044 	addi	r20,r2,1
   862e4:	00800044 	movi	r2,1
   862e8:	d8800015 	stw	r2,0(sp)
   862ec:	003f9806 	br	86150 <__sfvwrite_r+0x288>
   862f0:	b80b883a 	mov	r5,r23
   862f4:	800d883a 	mov	r6,r16
   862f8:	0086f600 	call	86f60 <memmove>
   862fc:	90c00017 	ldw	r3,0(r18)
   86300:	e009883a 	mov	r4,fp
   86304:	900b883a 	mov	r5,r18
   86308:	1c07883a 	add	r3,r3,r16
   8630c:	90c00015 	stw	r3,0(r18)
   86310:	8027883a 	mov	r19,r16
   86314:	00855640 	call	85564 <_fflush_r>
   86318:	103f6b26 	beq	r2,zero,860c8 <__sfvwrite_r+0x200>
   8631c:	003f7f06 	br	8611c <__sfvwrite_r+0x254>
   86320:	400b883a 	mov	r5,r8
   86324:	e009883a 	mov	r4,fp
   86328:	00881640 	call	88164 <_realloc_r>
   8632c:	103f7626 	beq	r2,zero,86108 <__sfvwrite_r+0x240>
   86330:	1023883a 	mov	r17,r2
   86334:	003f5006 	br	86078 <__sfvwrite_r+0x1b0>
   86338:	00c00044 	movi	r3,1
   8633c:	9d000044 	addi	r20,r19,1
   86340:	d8c00015 	stw	r3,0(sp)
   86344:	003f8206 	br	86150 <__sfvwrite_r+0x288>
   86348:	9080030b 	ldhu	r2,12(r18)
   8634c:	00c00244 	movi	r3,9
   86350:	013fffc4 	movi	r4,-1
   86354:	10801014 	ori	r2,r2,64
   86358:	9080030d 	sth	r2,12(r18)
   8635c:	e0c00015 	stw	r3,0(fp)
   86360:	003f0606 	br	85f7c <__sfvwrite_r+0xb4>

00086364 <_fwalk_reent>:
   86364:	defff704 	addi	sp,sp,-36
   86368:	dcc00315 	stw	r19,12(sp)
   8636c:	24c0b804 	addi	r19,r4,736
   86370:	dd800615 	stw	r22,24(sp)
   86374:	dd400515 	stw	r21,20(sp)
   86378:	dfc00815 	stw	ra,32(sp)
   8637c:	ddc00715 	stw	r23,28(sp)
   86380:	dd000415 	stw	r20,16(sp)
   86384:	dc800215 	stw	r18,8(sp)
   86388:	dc400115 	stw	r17,4(sp)
   8638c:	dc000015 	stw	r16,0(sp)
   86390:	202b883a 	mov	r21,r4
   86394:	282d883a 	mov	r22,r5
   86398:	00857ec0 	call	857ec <__sfp_lock_acquire>
   8639c:	98002126 	beq	r19,zero,86424 <_fwalk_reent+0xc0>
   863a0:	002f883a 	mov	r23,zero
   863a4:	9c800117 	ldw	r18,4(r19)
   863a8:	9c000217 	ldw	r16,8(r19)
   863ac:	90bfffc4 	addi	r2,r18,-1
   863b0:	10000d16 	blt	r2,zero,863e8 <_fwalk_reent+0x84>
   863b4:	0023883a 	mov	r17,zero
   863b8:	053fffc4 	movi	r20,-1
   863bc:	8080030f 	ldh	r2,12(r16)
   863c0:	8c400044 	addi	r17,r17,1
   863c4:	10000626 	beq	r2,zero,863e0 <_fwalk_reent+0x7c>
   863c8:	8080038f 	ldh	r2,14(r16)
   863cc:	800b883a 	mov	r5,r16
   863d0:	a809883a 	mov	r4,r21
   863d4:	15000226 	beq	r2,r20,863e0 <_fwalk_reent+0x7c>
   863d8:	b03ee83a 	callr	r22
   863dc:	b8aeb03a 	or	r23,r23,r2
   863e0:	84001704 	addi	r16,r16,92
   863e4:	947ff51e 	bne	r18,r17,863bc <_fwalk_reent+0x58>
   863e8:	9cc00017 	ldw	r19,0(r19)
   863ec:	983fed1e 	bne	r19,zero,863a4 <_fwalk_reent+0x40>
   863f0:	00857f00 	call	857f0 <__sfp_lock_release>
   863f4:	b805883a 	mov	r2,r23
   863f8:	dfc00817 	ldw	ra,32(sp)
   863fc:	ddc00717 	ldw	r23,28(sp)
   86400:	dd800617 	ldw	r22,24(sp)
   86404:	dd400517 	ldw	r21,20(sp)
   86408:	dd000417 	ldw	r20,16(sp)
   8640c:	dcc00317 	ldw	r19,12(sp)
   86410:	dc800217 	ldw	r18,8(sp)
   86414:	dc400117 	ldw	r17,4(sp)
   86418:	dc000017 	ldw	r16,0(sp)
   8641c:	dec00904 	addi	sp,sp,36
   86420:	f800283a 	ret
   86424:	002f883a 	mov	r23,zero
   86428:	003ff106 	br	863f0 <_fwalk_reent+0x8c>

0008642c <_fwalk>:
   8642c:	defff804 	addi	sp,sp,-32
   86430:	dcc00315 	stw	r19,12(sp)
   86434:	24c0b804 	addi	r19,r4,736
   86438:	dd400515 	stw	r21,20(sp)
   8643c:	dfc00715 	stw	ra,28(sp)
   86440:	dd800615 	stw	r22,24(sp)
   86444:	dd000415 	stw	r20,16(sp)
   86448:	dc800215 	stw	r18,8(sp)
   8644c:	dc400115 	stw	r17,4(sp)
   86450:	dc000015 	stw	r16,0(sp)
   86454:	282b883a 	mov	r21,r5
   86458:	00857ec0 	call	857ec <__sfp_lock_acquire>
   8645c:	98001f26 	beq	r19,zero,864dc <_fwalk+0xb0>
   86460:	002d883a 	mov	r22,zero
   86464:	9c800117 	ldw	r18,4(r19)
   86468:	9c000217 	ldw	r16,8(r19)
   8646c:	90bfffc4 	addi	r2,r18,-1
   86470:	10000c16 	blt	r2,zero,864a4 <_fwalk+0x78>
   86474:	0023883a 	mov	r17,zero
   86478:	053fffc4 	movi	r20,-1
   8647c:	8080030f 	ldh	r2,12(r16)
   86480:	8c400044 	addi	r17,r17,1
   86484:	10000526 	beq	r2,zero,8649c <_fwalk+0x70>
   86488:	8080038f 	ldh	r2,14(r16)
   8648c:	8009883a 	mov	r4,r16
   86490:	15000226 	beq	r2,r20,8649c <_fwalk+0x70>
   86494:	a83ee83a 	callr	r21
   86498:	b0acb03a 	or	r22,r22,r2
   8649c:	84001704 	addi	r16,r16,92
   864a0:	947ff61e 	bne	r18,r17,8647c <_fwalk+0x50>
   864a4:	9cc00017 	ldw	r19,0(r19)
   864a8:	983fee1e 	bne	r19,zero,86464 <_fwalk+0x38>
   864ac:	00857f00 	call	857f0 <__sfp_lock_release>
   864b0:	b005883a 	mov	r2,r22
   864b4:	dfc00717 	ldw	ra,28(sp)
   864b8:	dd800617 	ldw	r22,24(sp)
   864bc:	dd400517 	ldw	r21,20(sp)
   864c0:	dd000417 	ldw	r20,16(sp)
   864c4:	dcc00317 	ldw	r19,12(sp)
   864c8:	dc800217 	ldw	r18,8(sp)
   864cc:	dc400117 	ldw	r17,4(sp)
   864d0:	dc000017 	ldw	r16,0(sp)
   864d4:	dec00804 	addi	sp,sp,32
   864d8:	f800283a 	ret
   864dc:	002d883a 	mov	r22,zero
   864e0:	003ff206 	br	864ac <_fwalk+0x80>

000864e4 <__locale_charset>:
   864e4:	d0a00717 	ldw	r2,-32740(gp)
   864e8:	f800283a 	ret

000864ec <_localeconv_r>:
   864ec:	00800274 	movhi	r2,9
   864f0:	10bbd404 	addi	r2,r2,-4272
   864f4:	f800283a 	ret

000864f8 <localeconv>:
   864f8:	00800274 	movhi	r2,9
   864fc:	10833a04 	addi	r2,r2,3304
   86500:	11000017 	ldw	r4,0(r2)
   86504:	00864ec1 	jmpi	864ec <_localeconv_r>

00086508 <_setlocale_r>:
   86508:	defffc04 	addi	sp,sp,-16
   8650c:	00c00274 	movhi	r3,9
   86510:	18fbcf04 	addi	r3,r3,-4292
   86514:	dc800215 	stw	r18,8(sp)
   86518:	dc400115 	stw	r17,4(sp)
   8651c:	dc000015 	stw	r16,0(sp)
   86520:	2023883a 	mov	r17,r4
   86524:	2825883a 	mov	r18,r5
   86528:	dfc00315 	stw	ra,12(sp)
   8652c:	3021883a 	mov	r16,r6
   86530:	3009883a 	mov	r4,r6
   86534:	180b883a 	mov	r5,r3
   86538:	30000926 	beq	r6,zero,86560 <_setlocale_r+0x58>
   8653c:	00889840 	call	88984 <strcmp>
   86540:	8009883a 	mov	r4,r16
   86544:	01400274 	movhi	r5,9
   86548:	297b1a04 	addi	r5,r5,-5016
   8654c:	10000b1e 	bne	r2,zero,8657c <_setlocale_r+0x74>
   86550:	8c000d15 	stw	r16,52(r17)
   86554:	8c800c15 	stw	r18,48(r17)
   86558:	00c00274 	movhi	r3,9
   8655c:	18fbcf04 	addi	r3,r3,-4292
   86560:	1805883a 	mov	r2,r3
   86564:	dfc00317 	ldw	ra,12(sp)
   86568:	dc800217 	ldw	r18,8(sp)
   8656c:	dc400117 	ldw	r17,4(sp)
   86570:	dc000017 	ldw	r16,0(sp)
   86574:	dec00404 	addi	sp,sp,16
   86578:	f800283a 	ret
   8657c:	00889840 	call	88984 <strcmp>
   86580:	0007883a 	mov	r3,zero
   86584:	103ff226 	beq	r2,zero,86550 <_setlocale_r+0x48>
   86588:	003ff506 	br	86560 <_setlocale_r+0x58>

0008658c <setlocale>:
   8658c:	01800274 	movhi	r6,9
   86590:	31833a04 	addi	r6,r6,3304
   86594:	2007883a 	mov	r3,r4
   86598:	31000017 	ldw	r4,0(r6)
   8659c:	280d883a 	mov	r6,r5
   865a0:	180b883a 	mov	r5,r3
   865a4:	00865081 	jmpi	86508 <_setlocale_r>

000865a8 <__smakebuf_r>:
   865a8:	2880030b 	ldhu	r2,12(r5)
   865ac:	deffed04 	addi	sp,sp,-76
   865b0:	dc401015 	stw	r17,64(sp)
   865b4:	1080008c 	andi	r2,r2,2
   865b8:	dc000f15 	stw	r16,60(sp)
   865bc:	dfc01215 	stw	ra,72(sp)
   865c0:	dc801115 	stw	r18,68(sp)
   865c4:	2821883a 	mov	r16,r5
   865c8:	2023883a 	mov	r17,r4
   865cc:	10000b26 	beq	r2,zero,865fc <__smakebuf_r+0x54>
   865d0:	28c010c4 	addi	r3,r5,67
   865d4:	00800044 	movi	r2,1
   865d8:	28800515 	stw	r2,20(r5)
   865dc:	28c00415 	stw	r3,16(r5)
   865e0:	28c00015 	stw	r3,0(r5)
   865e4:	dfc01217 	ldw	ra,72(sp)
   865e8:	dc801117 	ldw	r18,68(sp)
   865ec:	dc401017 	ldw	r17,64(sp)
   865f0:	dc000f17 	ldw	r16,60(sp)
   865f4:	dec01304 	addi	sp,sp,76
   865f8:	f800283a 	ret
   865fc:	2940038f 	ldh	r5,14(r5)
   86600:	28002116 	blt	r5,zero,86688 <__smakebuf_r+0xe0>
   86604:	d80d883a 	mov	r6,sp
   86608:	0088d140 	call	88d14 <_fstat_r>
   8660c:	10001e16 	blt	r2,zero,86688 <__smakebuf_r+0xe0>
   86610:	d8800117 	ldw	r2,4(sp)
   86614:	00e00014 	movui	r3,32768
   86618:	113c000c 	andi	r4,r2,61440
   8661c:	20c03126 	beq	r4,r3,866e4 <__smakebuf_r+0x13c>
   86620:	8080030b 	ldhu	r2,12(r16)
   86624:	00c80004 	movi	r3,8192
   86628:	10820014 	ori	r2,r2,2048
   8662c:	8080030d 	sth	r2,12(r16)
   86630:	20c01e26 	beq	r4,r3,866ac <__smakebuf_r+0x104>
   86634:	04810004 	movi	r18,1024
   86638:	8809883a 	mov	r4,r17
   8663c:	900b883a 	mov	r5,r18
   86640:	008673c0 	call	8673c <_malloc_r>
   86644:	1009883a 	mov	r4,r2
   86648:	10003126 	beq	r2,zero,86710 <__smakebuf_r+0x168>
   8664c:	80c0030b 	ldhu	r3,12(r16)
   86650:	00800234 	movhi	r2,8
   86654:	10963804 	addi	r2,r2,22752
   86658:	88800f15 	stw	r2,60(r17)
   8665c:	18c02014 	ori	r3,r3,128
   86660:	84800515 	stw	r18,20(r16)
   86664:	80c0030d 	sth	r3,12(r16)
   86668:	81000415 	stw	r4,16(r16)
   8666c:	81000015 	stw	r4,0(r16)
   86670:	dfc01217 	ldw	ra,72(sp)
   86674:	dc801117 	ldw	r18,68(sp)
   86678:	dc401017 	ldw	r17,64(sp)
   8667c:	dc000f17 	ldw	r16,60(sp)
   86680:	dec01304 	addi	sp,sp,76
   86684:	f800283a 	ret
   86688:	80c0030b 	ldhu	r3,12(r16)
   8668c:	1880200c 	andi	r2,r3,128
   86690:	10000426 	beq	r2,zero,866a4 <__smakebuf_r+0xfc>
   86694:	04801004 	movi	r18,64
   86698:	18820014 	ori	r2,r3,2048
   8669c:	8080030d 	sth	r2,12(r16)
   866a0:	003fe506 	br	86638 <__smakebuf_r+0x90>
   866a4:	04810004 	movi	r18,1024
   866a8:	003ffb06 	br	86698 <__smakebuf_r+0xf0>
   866ac:	8140038f 	ldh	r5,14(r16)
   866b0:	8809883a 	mov	r4,r17
   866b4:	0088d880 	call	88d88 <_isatty_r>
   866b8:	103fde26 	beq	r2,zero,86634 <__smakebuf_r+0x8c>
   866bc:	8080030b 	ldhu	r2,12(r16)
   866c0:	80c010c4 	addi	r3,r16,67
   866c4:	04810004 	movi	r18,1024
   866c8:	10800054 	ori	r2,r2,1
   866cc:	8080030d 	sth	r2,12(r16)
   866d0:	00800044 	movi	r2,1
   866d4:	80c00415 	stw	r3,16(r16)
   866d8:	80800515 	stw	r2,20(r16)
   866dc:	80c00015 	stw	r3,0(r16)
   866e0:	003fd506 	br	86638 <__smakebuf_r+0x90>
   866e4:	80c00a17 	ldw	r3,40(r16)
   866e8:	00800274 	movhi	r2,9
   866ec:	10a21004 	addi	r2,r2,-30656
   866f0:	18bfcb1e 	bne	r3,r2,86620 <__smakebuf_r+0x78>
   866f4:	8080030b 	ldhu	r2,12(r16)
   866f8:	00c10004 	movi	r3,1024
   866fc:	1825883a 	mov	r18,r3
   86700:	10c4b03a 	or	r2,r2,r3
   86704:	8080030d 	sth	r2,12(r16)
   86708:	80c01315 	stw	r3,76(r16)
   8670c:	003fca06 	br	86638 <__smakebuf_r+0x90>
   86710:	8100030b 	ldhu	r4,12(r16)
   86714:	2080800c 	andi	r2,r4,512
   86718:	103fb21e 	bne	r2,zero,865e4 <__smakebuf_r+0x3c>
   8671c:	80c010c4 	addi	r3,r16,67
   86720:	21000094 	ori	r4,r4,2
   86724:	00800044 	movi	r2,1
   86728:	80800515 	stw	r2,20(r16)
   8672c:	8100030d 	sth	r4,12(r16)
   86730:	80c00415 	stw	r3,16(r16)
   86734:	80c00015 	stw	r3,0(r16)
   86738:	003faa06 	br	865e4 <__smakebuf_r+0x3c>

0008673c <_malloc_r>:
   8673c:	defff604 	addi	sp,sp,-40
   86740:	28c002c4 	addi	r3,r5,11
   86744:	00800584 	movi	r2,22
   86748:	dc800215 	stw	r18,8(sp)
   8674c:	dfc00915 	stw	ra,36(sp)
   86750:	df000815 	stw	fp,32(sp)
   86754:	ddc00715 	stw	r23,28(sp)
   86758:	dd800615 	stw	r22,24(sp)
   8675c:	dd400515 	stw	r21,20(sp)
   86760:	dd000415 	stw	r20,16(sp)
   86764:	dcc00315 	stw	r19,12(sp)
   86768:	dc400115 	stw	r17,4(sp)
   8676c:	dc000015 	stw	r16,0(sp)
   86770:	2025883a 	mov	r18,r4
   86774:	10c01236 	bltu	r2,r3,867c0 <_malloc_r+0x84>
   86778:	04400404 	movi	r17,16
   8677c:	8940142e 	bgeu	r17,r5,867d0 <_malloc_r+0x94>
   86780:	00800304 	movi	r2,12
   86784:	0007883a 	mov	r3,zero
   86788:	90800015 	stw	r2,0(r18)
   8678c:	1805883a 	mov	r2,r3
   86790:	dfc00917 	ldw	ra,36(sp)
   86794:	df000817 	ldw	fp,32(sp)
   86798:	ddc00717 	ldw	r23,28(sp)
   8679c:	dd800617 	ldw	r22,24(sp)
   867a0:	dd400517 	ldw	r21,20(sp)
   867a4:	dd000417 	ldw	r20,16(sp)
   867a8:	dcc00317 	ldw	r19,12(sp)
   867ac:	dc800217 	ldw	r18,8(sp)
   867b0:	dc400117 	ldw	r17,4(sp)
   867b4:	dc000017 	ldw	r16,0(sp)
   867b8:	dec00a04 	addi	sp,sp,40
   867bc:	f800283a 	ret
   867c0:	00bffe04 	movi	r2,-8
   867c4:	18a2703a 	and	r17,r3,r2
   867c8:	883fed16 	blt	r17,zero,86780 <_malloc_r+0x44>
   867cc:	897fec36 	bltu	r17,r5,86780 <_malloc_r+0x44>
   867d0:	9009883a 	mov	r4,r18
   867d4:	008bd300 	call	8bd30 <__malloc_lock>
   867d8:	00807dc4 	movi	r2,503
   867dc:	14402b2e 	bgeu	r2,r17,8688c <_malloc_r+0x150>
   867e0:	8806d27a 	srli	r3,r17,9
   867e4:	18003f1e 	bne	r3,zero,868e4 <_malloc_r+0x1a8>
   867e8:	880cd0fa 	srli	r6,r17,3
   867ec:	300490fa 	slli	r2,r6,3
   867f0:	02c00274 	movhi	r11,9
   867f4:	5afd8104 	addi	r11,r11,-2556
   867f8:	12cb883a 	add	r5,r2,r11
   867fc:	2c000317 	ldw	r16,12(r5)
   86800:	580f883a 	mov	r7,r11
   86804:	2c00041e 	bne	r5,r16,86818 <_malloc_r+0xdc>
   86808:	00000a06 	br	86834 <_malloc_r+0xf8>
   8680c:	1800860e 	bge	r3,zero,86a28 <_malloc_r+0x2ec>
   86810:	84000317 	ldw	r16,12(r16)
   86814:	2c000726 	beq	r5,r16,86834 <_malloc_r+0xf8>
   86818:	80800117 	ldw	r2,4(r16)
   8681c:	00ffff04 	movi	r3,-4
   86820:	10c8703a 	and	r4,r2,r3
   86824:	2447c83a 	sub	r3,r4,r17
   86828:	008003c4 	movi	r2,15
   8682c:	10fff70e 	bge	r2,r3,8680c <_malloc_r+0xd0>
   86830:	31bfffc4 	addi	r6,r6,-1
   86834:	32400044 	addi	r9,r6,1
   86838:	02800274 	movhi	r10,9
   8683c:	52bd8304 	addi	r10,r10,-2548
   86840:	54000217 	ldw	r16,8(r10)
   86844:	8280a026 	beq	r16,r10,86ac8 <_malloc_r+0x38c>
   86848:	80800117 	ldw	r2,4(r16)
   8684c:	00ffff04 	movi	r3,-4
   86850:	10ca703a 	and	r5,r2,r3
   86854:	2c4dc83a 	sub	r6,r5,r17
   86858:	008003c4 	movi	r2,15
   8685c:	11808316 	blt	r2,r6,86a6c <_malloc_r+0x330>
   86860:	52800315 	stw	r10,12(r10)
   86864:	52800215 	stw	r10,8(r10)
   86868:	30002916 	blt	r6,zero,86910 <_malloc_r+0x1d4>
   8686c:	8147883a 	add	r3,r16,r5
   86870:	18800117 	ldw	r2,4(r3)
   86874:	9009883a 	mov	r4,r18
   86878:	10800054 	ori	r2,r2,1
   8687c:	18800115 	stw	r2,4(r3)
   86880:	008bd500 	call	8bd50 <__malloc_unlock>
   86884:	80c00204 	addi	r3,r16,8
   86888:	003fc006 	br	8678c <_malloc_r+0x50>
   8688c:	02c00274 	movhi	r11,9
   86890:	5afd8104 	addi	r11,r11,-2556
   86894:	8ac5883a 	add	r2,r17,r11
   86898:	14000317 	ldw	r16,12(r2)
   8689c:	580f883a 	mov	r7,r11
   868a0:	8806d0fa 	srli	r3,r17,3
   868a4:	14006c26 	beq	r2,r16,86a58 <_malloc_r+0x31c>
   868a8:	80c00117 	ldw	r3,4(r16)
   868ac:	00bfff04 	movi	r2,-4
   868b0:	81800317 	ldw	r6,12(r16)
   868b4:	1886703a 	and	r3,r3,r2
   868b8:	80c7883a 	add	r3,r16,r3
   868bc:	18800117 	ldw	r2,4(r3)
   868c0:	81400217 	ldw	r5,8(r16)
   868c4:	9009883a 	mov	r4,r18
   868c8:	10800054 	ori	r2,r2,1
   868cc:	18800115 	stw	r2,4(r3)
   868d0:	31400215 	stw	r5,8(r6)
   868d4:	29800315 	stw	r6,12(r5)
   868d8:	008bd500 	call	8bd50 <__malloc_unlock>
   868dc:	80c00204 	addi	r3,r16,8
   868e0:	003faa06 	br	8678c <_malloc_r+0x50>
   868e4:	00800104 	movi	r2,4
   868e8:	10c0052e 	bgeu	r2,r3,86900 <_malloc_r+0x1c4>
   868ec:	00800504 	movi	r2,20
   868f0:	10c07836 	bltu	r2,r3,86ad4 <_malloc_r+0x398>
   868f4:	198016c4 	addi	r6,r3,91
   868f8:	300490fa 	slli	r2,r6,3
   868fc:	003fbc06 	br	867f0 <_malloc_r+0xb4>
   86900:	8804d1ba 	srli	r2,r17,6
   86904:	11800e04 	addi	r6,r2,56
   86908:	300490fa 	slli	r2,r6,3
   8690c:	003fb806 	br	867f0 <_malloc_r+0xb4>
   86910:	00807fc4 	movi	r2,511
   86914:	1140bb36 	bltu	r2,r5,86c04 <_malloc_r+0x4c8>
   86918:	2806d0fa 	srli	r3,r5,3
   8691c:	573ffe04 	addi	fp,r10,-8
   86920:	00800044 	movi	r2,1
   86924:	180890fa 	slli	r4,r3,3
   86928:	1807d0ba 	srai	r3,r3,2
   8692c:	e1c00117 	ldw	r7,4(fp)
   86930:	5909883a 	add	r4,r11,r4
   86934:	21400217 	ldw	r5,8(r4)
   86938:	10c4983a 	sll	r2,r2,r3
   8693c:	81000315 	stw	r4,12(r16)
   86940:	81400215 	stw	r5,8(r16)
   86944:	388eb03a 	or	r7,r7,r2
   86948:	2c000315 	stw	r16,12(r5)
   8694c:	24000215 	stw	r16,8(r4)
   86950:	e1c00115 	stw	r7,4(fp)
   86954:	4807883a 	mov	r3,r9
   86958:	4800cd16 	blt	r9,zero,86c90 <_malloc_r+0x554>
   8695c:	1807d0ba 	srai	r3,r3,2
   86960:	00800044 	movi	r2,1
   86964:	10c8983a 	sll	r4,r2,r3
   86968:	39004436 	bltu	r7,r4,86a7c <_malloc_r+0x340>
   8696c:	21c4703a 	and	r2,r4,r7
   86970:	10000a1e 	bne	r2,zero,8699c <_malloc_r+0x260>
   86974:	2109883a 	add	r4,r4,r4
   86978:	00bfff04 	movi	r2,-4
   8697c:	4884703a 	and	r2,r9,r2
   86980:	3906703a 	and	r3,r7,r4
   86984:	12400104 	addi	r9,r2,4
   86988:	1800041e 	bne	r3,zero,8699c <_malloc_r+0x260>
   8698c:	2109883a 	add	r4,r4,r4
   86990:	3904703a 	and	r2,r7,r4
   86994:	4a400104 	addi	r9,r9,4
   86998:	103ffc26 	beq	r2,zero,8698c <_malloc_r+0x250>
   8699c:	480490fa 	slli	r2,r9,3
   869a0:	4819883a 	mov	r12,r9
   869a4:	023fff04 	movi	r8,-4
   869a8:	589b883a 	add	r13,r11,r2
   869ac:	6807883a 	mov	r3,r13
   869b0:	014003c4 	movi	r5,15
   869b4:	1c000317 	ldw	r16,12(r3)
   869b8:	1c00041e 	bne	r3,r16,869cc <_malloc_r+0x290>
   869bc:	0000a706 	br	86c5c <_malloc_r+0x520>
   869c0:	3000ab0e 	bge	r6,zero,86c70 <_malloc_r+0x534>
   869c4:	84000317 	ldw	r16,12(r16)
   869c8:	1c00a426 	beq	r3,r16,86c5c <_malloc_r+0x520>
   869cc:	80800117 	ldw	r2,4(r16)
   869d0:	1204703a 	and	r2,r2,r8
   869d4:	144dc83a 	sub	r6,r2,r17
   869d8:	29bff90e 	bge	r5,r6,869c0 <_malloc_r+0x284>
   869dc:	81000317 	ldw	r4,12(r16)
   869e0:	80c00217 	ldw	r3,8(r16)
   869e4:	89400054 	ori	r5,r17,1
   869e8:	8445883a 	add	r2,r16,r17
   869ec:	20c00215 	stw	r3,8(r4)
   869f0:	19000315 	stw	r4,12(r3)
   869f4:	81400115 	stw	r5,4(r16)
   869f8:	1187883a 	add	r3,r2,r6
   869fc:	31000054 	ori	r4,r6,1
   86a00:	50800315 	stw	r2,12(r10)
   86a04:	50800215 	stw	r2,8(r10)
   86a08:	19800015 	stw	r6,0(r3)
   86a0c:	11000115 	stw	r4,4(r2)
   86a10:	12800215 	stw	r10,8(r2)
   86a14:	12800315 	stw	r10,12(r2)
   86a18:	9009883a 	mov	r4,r18
   86a1c:	008bd500 	call	8bd50 <__malloc_unlock>
   86a20:	80c00204 	addi	r3,r16,8
   86a24:	003f5906 	br	8678c <_malloc_r+0x50>
   86a28:	8109883a 	add	r4,r16,r4
   86a2c:	20800117 	ldw	r2,4(r4)
   86a30:	80c00217 	ldw	r3,8(r16)
   86a34:	81400317 	ldw	r5,12(r16)
   86a38:	10800054 	ori	r2,r2,1
   86a3c:	20800115 	stw	r2,4(r4)
   86a40:	28c00215 	stw	r3,8(r5)
   86a44:	19400315 	stw	r5,12(r3)
   86a48:	9009883a 	mov	r4,r18
   86a4c:	008bd500 	call	8bd50 <__malloc_unlock>
   86a50:	80c00204 	addi	r3,r16,8
   86a54:	003f4d06 	br	8678c <_malloc_r+0x50>
   86a58:	80800204 	addi	r2,r16,8
   86a5c:	14000317 	ldw	r16,12(r2)
   86a60:	143f911e 	bne	r2,r16,868a8 <_malloc_r+0x16c>
   86a64:	1a400084 	addi	r9,r3,2
   86a68:	003f7306 	br	86838 <_malloc_r+0xfc>
   86a6c:	88c00054 	ori	r3,r17,1
   86a70:	8445883a 	add	r2,r16,r17
   86a74:	80c00115 	stw	r3,4(r16)
   86a78:	003fdf06 	br	869f8 <_malloc_r+0x2bc>
   86a7c:	e4000217 	ldw	r16,8(fp)
   86a80:	00bfff04 	movi	r2,-4
   86a84:	80c00117 	ldw	r3,4(r16)
   86a88:	802d883a 	mov	r22,r16
   86a8c:	18aa703a 	and	r21,r3,r2
   86a90:	ac401636 	bltu	r21,r17,86aec <_malloc_r+0x3b0>
   86a94:	ac49c83a 	sub	r4,r21,r17
   86a98:	008003c4 	movi	r2,15
   86a9c:	1100130e 	bge	r2,r4,86aec <_malloc_r+0x3b0>
   86aa0:	88800054 	ori	r2,r17,1
   86aa4:	8447883a 	add	r3,r16,r17
   86aa8:	80800115 	stw	r2,4(r16)
   86aac:	20800054 	ori	r2,r4,1
   86ab0:	18800115 	stw	r2,4(r3)
   86ab4:	e0c00215 	stw	r3,8(fp)
   86ab8:	9009883a 	mov	r4,r18
   86abc:	008bd500 	call	8bd50 <__malloc_unlock>
   86ac0:	80c00204 	addi	r3,r16,8
   86ac4:	003f3106 	br	8678c <_malloc_r+0x50>
   86ac8:	39c00117 	ldw	r7,4(r7)
   86acc:	573ffe04 	addi	fp,r10,-8
   86ad0:	003fa006 	br	86954 <_malloc_r+0x218>
   86ad4:	00801504 	movi	r2,84
   86ad8:	10c06736 	bltu	r2,r3,86c78 <_malloc_r+0x53c>
   86adc:	8804d33a 	srli	r2,r17,12
   86ae0:	11801b84 	addi	r6,r2,110
   86ae4:	300490fa 	slli	r2,r6,3
   86ae8:	003f4106 	br	867f0 <_malloc_r+0xb4>
   86aec:	d0a6f417 	ldw	r2,-25648(gp)
   86af0:	d0e00917 	ldw	r3,-32732(gp)
   86af4:	053fffc4 	movi	r20,-1
   86af8:	10800404 	addi	r2,r2,16
   86afc:	88a7883a 	add	r19,r17,r2
   86b00:	1d000326 	beq	r3,r20,86b10 <_malloc_r+0x3d4>
   86b04:	98c3ffc4 	addi	r3,r19,4095
   86b08:	00bc0004 	movi	r2,-4096
   86b0c:	18a6703a 	and	r19,r3,r2
   86b10:	9009883a 	mov	r4,r18
   86b14:	980b883a 	mov	r5,r19
   86b18:	00887c80 	call	887c8 <_sbrk_r>
   86b1c:	1009883a 	mov	r4,r2
   86b20:	15000426 	beq	r2,r20,86b34 <_malloc_r+0x3f8>
   86b24:	854b883a 	add	r5,r16,r21
   86b28:	1029883a 	mov	r20,r2
   86b2c:	11405a2e 	bgeu	r2,r5,86c98 <_malloc_r+0x55c>
   86b30:	87000c26 	beq	r16,fp,86b64 <_malloc_r+0x428>
   86b34:	e4000217 	ldw	r16,8(fp)
   86b38:	80c00117 	ldw	r3,4(r16)
   86b3c:	00bfff04 	movi	r2,-4
   86b40:	1884703a 	and	r2,r3,r2
   86b44:	14400336 	bltu	r2,r17,86b54 <_malloc_r+0x418>
   86b48:	1449c83a 	sub	r4,r2,r17
   86b4c:	008003c4 	movi	r2,15
   86b50:	113fd316 	blt	r2,r4,86aa0 <_malloc_r+0x364>
   86b54:	9009883a 	mov	r4,r18
   86b58:	008bd500 	call	8bd50 <__malloc_unlock>
   86b5c:	0007883a 	mov	r3,zero
   86b60:	003f0a06 	br	8678c <_malloc_r+0x50>
   86b64:	05c00274 	movhi	r23,9
   86b68:	bdca3404 	addi	r23,r23,10448
   86b6c:	b8800017 	ldw	r2,0(r23)
   86b70:	988d883a 	add	r6,r19,r2
   86b74:	b9800015 	stw	r6,0(r23)
   86b78:	d0e00917 	ldw	r3,-32732(gp)
   86b7c:	00bfffc4 	movi	r2,-1
   86b80:	18808e26 	beq	r3,r2,86dbc <_malloc_r+0x680>
   86b84:	2145c83a 	sub	r2,r4,r5
   86b88:	3085883a 	add	r2,r6,r2
   86b8c:	b8800015 	stw	r2,0(r23)
   86b90:	20c001cc 	andi	r3,r4,7
   86b94:	18005f1e 	bne	r3,zero,86d14 <_malloc_r+0x5d8>
   86b98:	000b883a 	mov	r5,zero
   86b9c:	a4c5883a 	add	r2,r20,r19
   86ba0:	1083ffcc 	andi	r2,r2,4095
   86ba4:	00c40004 	movi	r3,4096
   86ba8:	1887c83a 	sub	r3,r3,r2
   86bac:	28e7883a 	add	r19,r5,r3
   86bb0:	9009883a 	mov	r4,r18
   86bb4:	980b883a 	mov	r5,r19
   86bb8:	00887c80 	call	887c8 <_sbrk_r>
   86bbc:	1007883a 	mov	r3,r2
   86bc0:	00bfffc4 	movi	r2,-1
   86bc4:	18807a26 	beq	r3,r2,86db0 <_malloc_r+0x674>
   86bc8:	1d05c83a 	sub	r2,r3,r20
   86bcc:	9885883a 	add	r2,r19,r2
   86bd0:	10c00054 	ori	r3,r2,1
   86bd4:	b8800017 	ldw	r2,0(r23)
   86bd8:	a021883a 	mov	r16,r20
   86bdc:	a0c00115 	stw	r3,4(r20)
   86be0:	9885883a 	add	r2,r19,r2
   86be4:	b8800015 	stw	r2,0(r23)
   86be8:	e5000215 	stw	r20,8(fp)
   86bec:	b7003626 	beq	r22,fp,86cc8 <_malloc_r+0x58c>
   86bf0:	018003c4 	movi	r6,15
   86bf4:	35404b36 	bltu	r6,r21,86d24 <_malloc_r+0x5e8>
   86bf8:	00800044 	movi	r2,1
   86bfc:	a0800115 	stw	r2,4(r20)
   86c00:	003fcd06 	br	86b38 <_malloc_r+0x3fc>
   86c04:	2808d27a 	srli	r4,r5,9
   86c08:	2000371e 	bne	r4,zero,86ce8 <_malloc_r+0x5ac>
   86c0c:	2808d0fa 	srli	r4,r5,3
   86c10:	200690fa 	slli	r3,r4,3
   86c14:	1ad1883a 	add	r8,r3,r11
   86c18:	41800217 	ldw	r6,8(r8)
   86c1c:	41805b26 	beq	r8,r6,86d8c <_malloc_r+0x650>
   86c20:	30800117 	ldw	r2,4(r6)
   86c24:	00ffff04 	movi	r3,-4
   86c28:	10c4703a 	and	r2,r2,r3
   86c2c:	2880022e 	bgeu	r5,r2,86c38 <_malloc_r+0x4fc>
   86c30:	31800217 	ldw	r6,8(r6)
   86c34:	41bffa1e 	bne	r8,r6,86c20 <_malloc_r+0x4e4>
   86c38:	32000317 	ldw	r8,12(r6)
   86c3c:	39c00117 	ldw	r7,4(r7)
   86c40:	82000315 	stw	r8,12(r16)
   86c44:	81800215 	stw	r6,8(r16)
   86c48:	07000274 	movhi	fp,9
   86c4c:	e73d8104 	addi	fp,fp,-2556
   86c50:	34000315 	stw	r16,12(r6)
   86c54:	44000215 	stw	r16,8(r8)
   86c58:	003f3e06 	br	86954 <_malloc_r+0x218>
   86c5c:	63000044 	addi	r12,r12,1
   86c60:	608000cc 	andi	r2,r12,3
   86c64:	10005d26 	beq	r2,zero,86ddc <_malloc_r+0x6a0>
   86c68:	18c00204 	addi	r3,r3,8
   86c6c:	003f5106 	br	869b4 <_malloc_r+0x278>
   86c70:	8089883a 	add	r4,r16,r2
   86c74:	003f6d06 	br	86a2c <_malloc_r+0x2f0>
   86c78:	00805504 	movi	r2,340
   86c7c:	10c02036 	bltu	r2,r3,86d00 <_malloc_r+0x5c4>
   86c80:	8804d3fa 	srli	r2,r17,15
   86c84:	11801dc4 	addi	r6,r2,119
   86c88:	300490fa 	slli	r2,r6,3
   86c8c:	003ed806 	br	867f0 <_malloc_r+0xb4>
   86c90:	48c000c4 	addi	r3,r9,3
   86c94:	003f3106 	br	8695c <_malloc_r+0x220>
   86c98:	05c00274 	movhi	r23,9
   86c9c:	bdca3404 	addi	r23,r23,10448
   86ca0:	b8800017 	ldw	r2,0(r23)
   86ca4:	988d883a 	add	r6,r19,r2
   86ca8:	b9800015 	stw	r6,0(r23)
   86cac:	293fb21e 	bne	r5,r4,86b78 <_malloc_r+0x43c>
   86cb0:	2083ffcc 	andi	r2,r4,4095
   86cb4:	103fb01e 	bne	r2,zero,86b78 <_malloc_r+0x43c>
   86cb8:	e4000217 	ldw	r16,8(fp)
   86cbc:	9d45883a 	add	r2,r19,r21
   86cc0:	10800054 	ori	r2,r2,1
   86cc4:	80800115 	stw	r2,4(r16)
   86cc8:	b8c00017 	ldw	r3,0(r23)
   86ccc:	d0a6f517 	ldw	r2,-25644(gp)
   86cd0:	10c0012e 	bgeu	r2,r3,86cd8 <_malloc_r+0x59c>
   86cd4:	d0e6f515 	stw	r3,-25644(gp)
   86cd8:	d0a6f617 	ldw	r2,-25640(gp)
   86cdc:	10ff962e 	bgeu	r2,r3,86b38 <_malloc_r+0x3fc>
   86ce0:	d0e6f615 	stw	r3,-25640(gp)
   86ce4:	003f9406 	br	86b38 <_malloc_r+0x3fc>
   86ce8:	00800104 	movi	r2,4
   86cec:	11001e36 	bltu	r2,r4,86d68 <_malloc_r+0x62c>
   86cf0:	2804d1ba 	srli	r2,r5,6
   86cf4:	11000e04 	addi	r4,r2,56
   86cf8:	200690fa 	slli	r3,r4,3
   86cfc:	003fc506 	br	86c14 <_malloc_r+0x4d8>
   86d00:	00815504 	movi	r2,1364
   86d04:	10c01d2e 	bgeu	r2,r3,86d7c <_malloc_r+0x640>
   86d08:	01801f84 	movi	r6,126
   86d0c:	0080fc04 	movi	r2,1008
   86d10:	003eb706 	br	867f0 <_malloc_r+0xb4>
   86d14:	00800204 	movi	r2,8
   86d18:	10cbc83a 	sub	r5,r2,r3
   86d1c:	2169883a 	add	r20,r4,r5
   86d20:	003f9e06 	br	86b9c <_malloc_r+0x460>
   86d24:	00bffe04 	movi	r2,-8
   86d28:	a93ffd04 	addi	r4,r21,-12
   86d2c:	2088703a 	and	r4,r4,r2
   86d30:	b10b883a 	add	r5,r22,r4
   86d34:	00c00144 	movi	r3,5
   86d38:	28c00215 	stw	r3,8(r5)
   86d3c:	28c00115 	stw	r3,4(r5)
   86d40:	b0800117 	ldw	r2,4(r22)
   86d44:	1080004c 	andi	r2,r2,1
   86d48:	2084b03a 	or	r2,r4,r2
   86d4c:	b0800115 	stw	r2,4(r22)
   86d50:	313fdd2e 	bgeu	r6,r4,86cc8 <_malloc_r+0x58c>
   86d54:	b1400204 	addi	r5,r22,8
   86d58:	9009883a 	mov	r4,r18
   86d5c:	0085bb40 	call	85bb4 <_free_r>
   86d60:	e4000217 	ldw	r16,8(fp)
   86d64:	003fd806 	br	86cc8 <_malloc_r+0x58c>
   86d68:	00800504 	movi	r2,20
   86d6c:	11001536 	bltu	r2,r4,86dc4 <_malloc_r+0x688>
   86d70:	210016c4 	addi	r4,r4,91
   86d74:	200690fa 	slli	r3,r4,3
   86d78:	003fa606 	br	86c14 <_malloc_r+0x4d8>
   86d7c:	8804d4ba 	srli	r2,r17,18
   86d80:	11801f04 	addi	r6,r2,124
   86d84:	300490fa 	slli	r2,r6,3
   86d88:	003e9906 	br	867f0 <_malloc_r+0xb4>
   86d8c:	2009d0ba 	srai	r4,r4,2
   86d90:	01400274 	movhi	r5,9
   86d94:	297d8104 	addi	r5,r5,-2556
   86d98:	00c00044 	movi	r3,1
   86d9c:	28800117 	ldw	r2,4(r5)
   86da0:	1906983a 	sll	r3,r3,r4
   86da4:	10c4b03a 	or	r2,r2,r3
   86da8:	28800115 	stw	r2,4(r5)
   86dac:	003fa306 	br	86c3c <_malloc_r+0x500>
   86db0:	0027883a 	mov	r19,zero
   86db4:	00c00044 	movi	r3,1
   86db8:	003f8606 	br	86bd4 <_malloc_r+0x498>
   86dbc:	d1200915 	stw	r4,-32732(gp)
   86dc0:	003f7306 	br	86b90 <_malloc_r+0x454>
   86dc4:	00801504 	movi	r2,84
   86dc8:	11001936 	bltu	r2,r4,86e30 <_malloc_r+0x6f4>
   86dcc:	2804d33a 	srli	r2,r5,12
   86dd0:	11001b84 	addi	r4,r2,110
   86dd4:	200690fa 	slli	r3,r4,3
   86dd8:	003f8e06 	br	86c14 <_malloc_r+0x4d8>
   86ddc:	480b883a 	mov	r5,r9
   86de0:	6807883a 	mov	r3,r13
   86de4:	288000cc 	andi	r2,r5,3
   86de8:	18fffe04 	addi	r3,r3,-8
   86dec:	297fffc4 	addi	r5,r5,-1
   86df0:	10001526 	beq	r2,zero,86e48 <_malloc_r+0x70c>
   86df4:	18800217 	ldw	r2,8(r3)
   86df8:	10fffa26 	beq	r2,r3,86de4 <_malloc_r+0x6a8>
   86dfc:	2109883a 	add	r4,r4,r4
   86e00:	393f1e36 	bltu	r7,r4,86a7c <_malloc_r+0x340>
   86e04:	203f1d26 	beq	r4,zero,86a7c <_malloc_r+0x340>
   86e08:	21c4703a 	and	r2,r4,r7
   86e0c:	10000226 	beq	r2,zero,86e18 <_malloc_r+0x6dc>
   86e10:	6013883a 	mov	r9,r12
   86e14:	003ee106 	br	8699c <_malloc_r+0x260>
   86e18:	2109883a 	add	r4,r4,r4
   86e1c:	3904703a 	and	r2,r7,r4
   86e20:	63000104 	addi	r12,r12,4
   86e24:	103ffc26 	beq	r2,zero,86e18 <_malloc_r+0x6dc>
   86e28:	6013883a 	mov	r9,r12
   86e2c:	003edb06 	br	8699c <_malloc_r+0x260>
   86e30:	00805504 	movi	r2,340
   86e34:	11000836 	bltu	r2,r4,86e58 <_malloc_r+0x71c>
   86e38:	2804d3fa 	srli	r2,r5,15
   86e3c:	11001dc4 	addi	r4,r2,119
   86e40:	200690fa 	slli	r3,r4,3
   86e44:	003f7306 	br	86c14 <_malloc_r+0x4d8>
   86e48:	0104303a 	nor	r2,zero,r4
   86e4c:	388e703a 	and	r7,r7,r2
   86e50:	e1c00115 	stw	r7,4(fp)
   86e54:	003fe906 	br	86dfc <_malloc_r+0x6c0>
   86e58:	00815504 	movi	r2,1364
   86e5c:	1100032e 	bgeu	r2,r4,86e6c <_malloc_r+0x730>
   86e60:	01001f84 	movi	r4,126
   86e64:	00c0fc04 	movi	r3,1008
   86e68:	003f6a06 	br	86c14 <_malloc_r+0x4d8>
   86e6c:	2804d4ba 	srli	r2,r5,18
   86e70:	11001f04 	addi	r4,r2,124
   86e74:	200690fa 	slli	r3,r4,3
   86e78:	003f6606 	br	86c14 <_malloc_r+0x4d8>

00086e7c <memchr>:
   86e7c:	008000c4 	movi	r2,3
   86e80:	29403fcc 	andi	r5,r5,255
   86e84:	2007883a 	mov	r3,r4
   86e88:	1180022e 	bgeu	r2,r6,86e94 <memchr+0x18>
   86e8c:	2084703a 	and	r2,r4,r2
   86e90:	10000b26 	beq	r2,zero,86ec0 <memchr+0x44>
   86e94:	313fffc4 	addi	r4,r6,-1
   86e98:	3000051e 	bne	r6,zero,86eb0 <memchr+0x34>
   86e9c:	00002c06 	br	86f50 <memchr+0xd4>
   86ea0:	213fffc4 	addi	r4,r4,-1
   86ea4:	00bfffc4 	movi	r2,-1
   86ea8:	18c00044 	addi	r3,r3,1
   86eac:	20802826 	beq	r4,r2,86f50 <memchr+0xd4>
   86eb0:	18800003 	ldbu	r2,0(r3)
   86eb4:	28bffa1e 	bne	r5,r2,86ea0 <memchr+0x24>
   86eb8:	1805883a 	mov	r2,r3
   86ebc:	f800283a 	ret
   86ec0:	0011883a 	mov	r8,zero
   86ec4:	0007883a 	mov	r3,zero
   86ec8:	01c00104 	movi	r7,4
   86ecc:	4004923a 	slli	r2,r8,8
   86ed0:	18c00044 	addi	r3,r3,1
   86ed4:	1151883a 	add	r8,r2,r5
   86ed8:	19fffc1e 	bne	r3,r7,86ecc <memchr+0x50>
   86edc:	02bfbff4 	movhi	r10,65279
   86ee0:	52bfbfc4 	addi	r10,r10,-257
   86ee4:	02602074 	movhi	r9,32897
   86ee8:	4a602004 	addi	r9,r9,-32640
   86eec:	02c000c4 	movi	r11,3
   86ef0:	20800017 	ldw	r2,0(r4)
   86ef4:	31bfff04 	addi	r6,r6,-4
   86ef8:	200f883a 	mov	r7,r4
   86efc:	1204f03a 	xor	r2,r2,r8
   86f00:	1287883a 	add	r3,r2,r10
   86f04:	1a46703a 	and	r3,r3,r9
   86f08:	0084303a 	nor	r2,zero,r2
   86f0c:	10c4703a 	and	r2,r2,r3
   86f10:	10000b26 	beq	r2,zero,86f40 <memchr+0xc4>
   86f14:	20800003 	ldbu	r2,0(r4)
   86f18:	28800f26 	beq	r5,r2,86f58 <memchr+0xdc>
   86f1c:	20800043 	ldbu	r2,1(r4)
   86f20:	21c00044 	addi	r7,r4,1
   86f24:	28800c26 	beq	r5,r2,86f58 <memchr+0xdc>
   86f28:	20800083 	ldbu	r2,2(r4)
   86f2c:	21c00084 	addi	r7,r4,2
   86f30:	28800926 	beq	r5,r2,86f58 <memchr+0xdc>
   86f34:	208000c3 	ldbu	r2,3(r4)
   86f38:	21c000c4 	addi	r7,r4,3
   86f3c:	28800626 	beq	r5,r2,86f58 <memchr+0xdc>
   86f40:	21000104 	addi	r4,r4,4
   86f44:	59bfea36 	bltu	r11,r6,86ef0 <memchr+0x74>
   86f48:	2007883a 	mov	r3,r4
   86f4c:	003fd106 	br	86e94 <memchr+0x18>
   86f50:	0005883a 	mov	r2,zero
   86f54:	f800283a 	ret
   86f58:	3805883a 	mov	r2,r7
   86f5c:	f800283a 	ret

00086f60 <memmove>:
   86f60:	2807883a 	mov	r3,r5
   86f64:	2011883a 	mov	r8,r4
   86f68:	29000c2e 	bgeu	r5,r4,86f9c <memmove+0x3c>
   86f6c:	298f883a 	add	r7,r5,r6
   86f70:	21c00a2e 	bgeu	r4,r7,86f9c <memmove+0x3c>
   86f74:	30000726 	beq	r6,zero,86f94 <memmove+0x34>
   86f78:	2187883a 	add	r3,r4,r6
   86f7c:	198dc83a 	sub	r6,r3,r6
   86f80:	39ffffc4 	addi	r7,r7,-1
   86f84:	38800003 	ldbu	r2,0(r7)
   86f88:	18ffffc4 	addi	r3,r3,-1
   86f8c:	18800005 	stb	r2,0(r3)
   86f90:	19bffb1e 	bne	r3,r6,86f80 <memmove+0x20>
   86f94:	2005883a 	mov	r2,r4
   86f98:	f800283a 	ret
   86f9c:	01c003c4 	movi	r7,15
   86fa0:	39800a36 	bltu	r7,r6,86fcc <memmove+0x6c>
   86fa4:	303ffb26 	beq	r6,zero,86f94 <memmove+0x34>
   86fa8:	400f883a 	mov	r7,r8
   86fac:	320d883a 	add	r6,r6,r8
   86fb0:	28800003 	ldbu	r2,0(r5)
   86fb4:	29400044 	addi	r5,r5,1
   86fb8:	38800005 	stb	r2,0(r7)
   86fbc:	39c00044 	addi	r7,r7,1
   86fc0:	39bffb1e 	bne	r7,r6,86fb0 <memmove+0x50>
   86fc4:	2005883a 	mov	r2,r4
   86fc8:	f800283a 	ret
   86fcc:	1904b03a 	or	r2,r3,r4
   86fd0:	108000cc 	andi	r2,r2,3
   86fd4:	103ff31e 	bne	r2,zero,86fa4 <memmove+0x44>
   86fd8:	3811883a 	mov	r8,r7
   86fdc:	180b883a 	mov	r5,r3
   86fe0:	200f883a 	mov	r7,r4
   86fe4:	28c00017 	ldw	r3,0(r5)
   86fe8:	31bffc04 	addi	r6,r6,-16
   86fec:	38c00015 	stw	r3,0(r7)
   86ff0:	28800117 	ldw	r2,4(r5)
   86ff4:	38800115 	stw	r2,4(r7)
   86ff8:	28c00217 	ldw	r3,8(r5)
   86ffc:	38c00215 	stw	r3,8(r7)
   87000:	28800317 	ldw	r2,12(r5)
   87004:	29400404 	addi	r5,r5,16
   87008:	38800315 	stw	r2,12(r7)
   8700c:	39c00404 	addi	r7,r7,16
   87010:	41bff436 	bltu	r8,r6,86fe4 <memmove+0x84>
   87014:	008000c4 	movi	r2,3
   87018:	1180072e 	bgeu	r2,r6,87038 <memmove+0xd8>
   8701c:	1007883a 	mov	r3,r2
   87020:	28800017 	ldw	r2,0(r5)
   87024:	31bfff04 	addi	r6,r6,-4
   87028:	29400104 	addi	r5,r5,4
   8702c:	38800015 	stw	r2,0(r7)
   87030:	39c00104 	addi	r7,r7,4
   87034:	19bffa36 	bltu	r3,r6,87020 <memmove+0xc0>
   87038:	3811883a 	mov	r8,r7
   8703c:	003fd906 	br	86fa4 <memmove+0x44>

00087040 <memset>:
   87040:	008000c4 	movi	r2,3
   87044:	29403fcc 	andi	r5,r5,255
   87048:	2007883a 	mov	r3,r4
   8704c:	1180022e 	bgeu	r2,r6,87058 <memset+0x18>
   87050:	2084703a 	and	r2,r4,r2
   87054:	10000826 	beq	r2,zero,87078 <memset+0x38>
   87058:	30000526 	beq	r6,zero,87070 <memset+0x30>
   8705c:	2805883a 	mov	r2,r5
   87060:	30cd883a 	add	r6,r6,r3
   87064:	18800005 	stb	r2,0(r3)
   87068:	18c00044 	addi	r3,r3,1
   8706c:	19bffd1e 	bne	r3,r6,87064 <memset+0x24>
   87070:	2005883a 	mov	r2,r4
   87074:	f800283a 	ret
   87078:	2804923a 	slli	r2,r5,8
   8707c:	020003c4 	movi	r8,15
   87080:	200f883a 	mov	r7,r4
   87084:	2884b03a 	or	r2,r5,r2
   87088:	1006943a 	slli	r3,r2,16
   8708c:	10c6b03a 	or	r3,r2,r3
   87090:	41800a2e 	bgeu	r8,r6,870bc <memset+0x7c>
   87094:	4005883a 	mov	r2,r8
   87098:	31bffc04 	addi	r6,r6,-16
   8709c:	38c00015 	stw	r3,0(r7)
   870a0:	38c00115 	stw	r3,4(r7)
   870a4:	38c00215 	stw	r3,8(r7)
   870a8:	38c00315 	stw	r3,12(r7)
   870ac:	39c00404 	addi	r7,r7,16
   870b0:	11bff936 	bltu	r2,r6,87098 <memset+0x58>
   870b4:	008000c4 	movi	r2,3
   870b8:	1180052e 	bgeu	r2,r6,870d0 <memset+0x90>
   870bc:	31bfff04 	addi	r6,r6,-4
   870c0:	008000c4 	movi	r2,3
   870c4:	38c00015 	stw	r3,0(r7)
   870c8:	39c00104 	addi	r7,r7,4
   870cc:	11bffb36 	bltu	r2,r6,870bc <memset+0x7c>
   870d0:	3807883a 	mov	r3,r7
   870d4:	003fe006 	br	87058 <memset+0x18>

000870d8 <_Bfree>:
   870d8:	28000826 	beq	r5,zero,870fc <_Bfree+0x24>
   870dc:	28800117 	ldw	r2,4(r5)
   870e0:	21001317 	ldw	r4,76(r4)
   870e4:	1085883a 	add	r2,r2,r2
   870e8:	1085883a 	add	r2,r2,r2
   870ec:	1105883a 	add	r2,r2,r4
   870f0:	10c00017 	ldw	r3,0(r2)
   870f4:	28c00015 	stw	r3,0(r5)
   870f8:	11400015 	stw	r5,0(r2)
   870fc:	f800283a 	ret

00087100 <__hi0bits>:
   87100:	20bfffec 	andhi	r2,r4,65535
   87104:	10001426 	beq	r2,zero,87158 <__hi0bits+0x58>
   87108:	0007883a 	mov	r3,zero
   8710c:	20bfc02c 	andhi	r2,r4,65280
   87110:	1000021e 	bne	r2,zero,8711c <__hi0bits+0x1c>
   87114:	2008923a 	slli	r4,r4,8
   87118:	18c00204 	addi	r3,r3,8
   8711c:	20bc002c 	andhi	r2,r4,61440
   87120:	1000021e 	bne	r2,zero,8712c <__hi0bits+0x2c>
   87124:	2008913a 	slli	r4,r4,4
   87128:	18c00104 	addi	r3,r3,4
   8712c:	20b0002c 	andhi	r2,r4,49152
   87130:	1000031e 	bne	r2,zero,87140 <__hi0bits+0x40>
   87134:	2105883a 	add	r2,r4,r4
   87138:	18c00084 	addi	r3,r3,2
   8713c:	1089883a 	add	r4,r2,r2
   87140:	20000316 	blt	r4,zero,87150 <__hi0bits+0x50>
   87144:	2090002c 	andhi	r2,r4,16384
   87148:	10000626 	beq	r2,zero,87164 <__hi0bits+0x64>
   8714c:	18c00044 	addi	r3,r3,1
   87150:	1805883a 	mov	r2,r3
   87154:	f800283a 	ret
   87158:	2008943a 	slli	r4,r4,16
   8715c:	00c00404 	movi	r3,16
   87160:	003fea06 	br	8710c <__hi0bits+0xc>
   87164:	00c00804 	movi	r3,32
   87168:	1805883a 	mov	r2,r3
   8716c:	f800283a 	ret

00087170 <__lo0bits>:
   87170:	20c00017 	ldw	r3,0(r4)
   87174:	188001cc 	andi	r2,r3,7
   87178:	10000a26 	beq	r2,zero,871a4 <__lo0bits+0x34>
   8717c:	1880004c 	andi	r2,r3,1
   87180:	1005003a 	cmpeq	r2,r2,zero
   87184:	10002126 	beq	r2,zero,8720c <__lo0bits+0x9c>
   87188:	1880008c 	andi	r2,r3,2
   8718c:	1000251e 	bne	r2,zero,87224 <__lo0bits+0xb4>
   87190:	1804d0ba 	srli	r2,r3,2
   87194:	01400084 	movi	r5,2
   87198:	20800015 	stw	r2,0(r4)
   8719c:	2805883a 	mov	r2,r5
   871a0:	f800283a 	ret
   871a4:	18bfffcc 	andi	r2,r3,65535
   871a8:	10001526 	beq	r2,zero,87200 <__lo0bits+0x90>
   871ac:	000b883a 	mov	r5,zero
   871b0:	18803fcc 	andi	r2,r3,255
   871b4:	1000021e 	bne	r2,zero,871c0 <__lo0bits+0x50>
   871b8:	1806d23a 	srli	r3,r3,8
   871bc:	29400204 	addi	r5,r5,8
   871c0:	188003cc 	andi	r2,r3,15
   871c4:	1000021e 	bne	r2,zero,871d0 <__lo0bits+0x60>
   871c8:	1806d13a 	srli	r3,r3,4
   871cc:	29400104 	addi	r5,r5,4
   871d0:	188000cc 	andi	r2,r3,3
   871d4:	1000021e 	bne	r2,zero,871e0 <__lo0bits+0x70>
   871d8:	1806d0ba 	srli	r3,r3,2
   871dc:	29400084 	addi	r5,r5,2
   871e0:	1880004c 	andi	r2,r3,1
   871e4:	1000031e 	bne	r2,zero,871f4 <__lo0bits+0x84>
   871e8:	1806d07a 	srli	r3,r3,1
   871ec:	18000a26 	beq	r3,zero,87218 <__lo0bits+0xa8>
   871f0:	29400044 	addi	r5,r5,1
   871f4:	2805883a 	mov	r2,r5
   871f8:	20c00015 	stw	r3,0(r4)
   871fc:	f800283a 	ret
   87200:	1806d43a 	srli	r3,r3,16
   87204:	01400404 	movi	r5,16
   87208:	003fe906 	br	871b0 <__lo0bits+0x40>
   8720c:	000b883a 	mov	r5,zero
   87210:	2805883a 	mov	r2,r5
   87214:	f800283a 	ret
   87218:	01400804 	movi	r5,32
   8721c:	2805883a 	mov	r2,r5
   87220:	f800283a 	ret
   87224:	1804d07a 	srli	r2,r3,1
   87228:	01400044 	movi	r5,1
   8722c:	20800015 	stw	r2,0(r4)
   87230:	003fda06 	br	8719c <__lo0bits+0x2c>

00087234 <__mcmp>:
   87234:	20800417 	ldw	r2,16(r4)
   87238:	28c00417 	ldw	r3,16(r5)
   8723c:	10cfc83a 	sub	r7,r2,r3
   87240:	38000c1e 	bne	r7,zero,87274 <__mcmp+0x40>
   87244:	18c5883a 	add	r2,r3,r3
   87248:	1085883a 	add	r2,r2,r2
   8724c:	10c00504 	addi	r3,r2,20
   87250:	21000504 	addi	r4,r4,20
   87254:	28cb883a 	add	r5,r5,r3
   87258:	2085883a 	add	r2,r4,r2
   8725c:	10bfff04 	addi	r2,r2,-4
   87260:	297fff04 	addi	r5,r5,-4
   87264:	11800017 	ldw	r6,0(r2)
   87268:	28c00017 	ldw	r3,0(r5)
   8726c:	30c0031e 	bne	r6,r3,8727c <__mcmp+0x48>
   87270:	20bffa36 	bltu	r4,r2,8725c <__mcmp+0x28>
   87274:	3805883a 	mov	r2,r7
   87278:	f800283a 	ret
   8727c:	30c00336 	bltu	r6,r3,8728c <__mcmp+0x58>
   87280:	01c00044 	movi	r7,1
   87284:	3805883a 	mov	r2,r7
   87288:	f800283a 	ret
   8728c:	01ffffc4 	movi	r7,-1
   87290:	003ff806 	br	87274 <__mcmp+0x40>

00087294 <__ulp>:
   87294:	295ffc2c 	andhi	r5,r5,32752
   87298:	013f3034 	movhi	r4,64704
   8729c:	290b883a 	add	r5,r5,r4
   872a0:	0145c83a 	sub	r2,zero,r5
   872a4:	1007d53a 	srai	r3,r2,20
   872a8:	000d883a 	mov	r6,zero
   872ac:	0140040e 	bge	zero,r5,872c0 <__ulp+0x2c>
   872b0:	280f883a 	mov	r7,r5
   872b4:	3807883a 	mov	r3,r7
   872b8:	3005883a 	mov	r2,r6
   872bc:	f800283a 	ret
   872c0:	008004c4 	movi	r2,19
   872c4:	193ffb04 	addi	r4,r3,-20
   872c8:	10c00c0e 	bge	r2,r3,872fc <__ulp+0x68>
   872cc:	008007c4 	movi	r2,31
   872d0:	1107c83a 	sub	r3,r2,r4
   872d4:	00800784 	movi	r2,30
   872d8:	01400044 	movi	r5,1
   872dc:	11000216 	blt	r2,r4,872e8 <__ulp+0x54>
   872e0:	00800044 	movi	r2,1
   872e4:	10ca983a 	sll	r5,r2,r3
   872e8:	000f883a 	mov	r7,zero
   872ec:	280d883a 	mov	r6,r5
   872f0:	3807883a 	mov	r3,r7
   872f4:	3005883a 	mov	r2,r6
   872f8:	f800283a 	ret
   872fc:	00800234 	movhi	r2,8
   87300:	10cfd83a 	sra	r7,r2,r3
   87304:	000d883a 	mov	r6,zero
   87308:	3005883a 	mov	r2,r6
   8730c:	3807883a 	mov	r3,r7
   87310:	f800283a 	ret

00087314 <__b2d>:
   87314:	20800417 	ldw	r2,16(r4)
   87318:	defff904 	addi	sp,sp,-28
   8731c:	dd000415 	stw	r20,16(sp)
   87320:	1085883a 	add	r2,r2,r2
   87324:	25000504 	addi	r20,r4,20
   87328:	1085883a 	add	r2,r2,r2
   8732c:	dc000015 	stw	r16,0(sp)
   87330:	a0a1883a 	add	r16,r20,r2
   87334:	dd400515 	stw	r21,20(sp)
   87338:	857fff17 	ldw	r21,-4(r16)
   8733c:	dc400115 	stw	r17,4(sp)
   87340:	dfc00615 	stw	ra,24(sp)
   87344:	a809883a 	mov	r4,r21
   87348:	2823883a 	mov	r17,r5
   8734c:	dcc00315 	stw	r19,12(sp)
   87350:	dc800215 	stw	r18,8(sp)
   87354:	00871000 	call	87100 <__hi0bits>
   87358:	100b883a 	mov	r5,r2
   8735c:	00800804 	movi	r2,32
   87360:	1145c83a 	sub	r2,r2,r5
   87364:	88800015 	stw	r2,0(r17)
   87368:	00800284 	movi	r2,10
   8736c:	80ffff04 	addi	r3,r16,-4
   87370:	11401416 	blt	r2,r5,873c4 <__b2d+0xb0>
   87374:	008002c4 	movi	r2,11
   87378:	1149c83a 	sub	r4,r2,r5
   8737c:	a0c02736 	bltu	r20,r3,8741c <__b2d+0x108>
   87380:	000d883a 	mov	r6,zero
   87384:	28800544 	addi	r2,r5,21
   87388:	a906d83a 	srl	r3,r21,r4
   8738c:	a884983a 	sll	r2,r21,r2
   87390:	1ccffc34 	orhi	r19,r3,16368
   87394:	11a4b03a 	or	r18,r2,r6
   87398:	9005883a 	mov	r2,r18
   8739c:	9807883a 	mov	r3,r19
   873a0:	dfc00617 	ldw	ra,24(sp)
   873a4:	dd400517 	ldw	r21,20(sp)
   873a8:	dd000417 	ldw	r20,16(sp)
   873ac:	dcc00317 	ldw	r19,12(sp)
   873b0:	dc800217 	ldw	r18,8(sp)
   873b4:	dc400117 	ldw	r17,4(sp)
   873b8:	dc000017 	ldw	r16,0(sp)
   873bc:	dec00704 	addi	sp,sp,28
   873c0:	f800283a 	ret
   873c4:	a0c00e36 	bltu	r20,r3,87400 <__b2d+0xec>
   873c8:	293ffd44 	addi	r4,r5,-11
   873cc:	000d883a 	mov	r6,zero
   873d0:	20000f26 	beq	r4,zero,87410 <__b2d+0xfc>
   873d4:	00800804 	movi	r2,32
   873d8:	110bc83a 	sub	r5,r2,r4
   873dc:	a0c01236 	bltu	r20,r3,87428 <__b2d+0x114>
   873e0:	000f883a 	mov	r7,zero
   873e4:	a904983a 	sll	r2,r21,r4
   873e8:	3146d83a 	srl	r3,r6,r5
   873ec:	3108983a 	sll	r4,r6,r4
   873f0:	108ffc34 	orhi	r2,r2,16368
   873f4:	18a6b03a 	or	r19,r3,r2
   873f8:	3924b03a 	or	r18,r7,r4
   873fc:	003fe606 	br	87398 <__b2d+0x84>
   87400:	293ffd44 	addi	r4,r5,-11
   87404:	81bffe17 	ldw	r6,-8(r16)
   87408:	80fffe04 	addi	r3,r16,-8
   8740c:	203ff11e 	bne	r4,zero,873d4 <__b2d+0xc0>
   87410:	accffc34 	orhi	r19,r21,16368
   87414:	3025883a 	mov	r18,r6
   87418:	003fdf06 	br	87398 <__b2d+0x84>
   8741c:	18bfff17 	ldw	r2,-4(r3)
   87420:	110cd83a 	srl	r6,r2,r4
   87424:	003fd706 	br	87384 <__b2d+0x70>
   87428:	18bfff17 	ldw	r2,-4(r3)
   8742c:	114ed83a 	srl	r7,r2,r5
   87430:	003fec06 	br	873e4 <__b2d+0xd0>

00087434 <__ratio>:
   87434:	defff904 	addi	sp,sp,-28
   87438:	dc400215 	stw	r17,8(sp)
   8743c:	2823883a 	mov	r17,r5
   87440:	d80b883a 	mov	r5,sp
   87444:	dfc00615 	stw	ra,24(sp)
   87448:	dd000515 	stw	r20,20(sp)
   8744c:	dcc00415 	stw	r19,16(sp)
   87450:	dc800315 	stw	r18,12(sp)
   87454:	2025883a 	mov	r18,r4
   87458:	00873140 	call	87314 <__b2d>
   8745c:	8809883a 	mov	r4,r17
   87460:	d9400104 	addi	r5,sp,4
   87464:	1027883a 	mov	r19,r2
   87468:	1829883a 	mov	r20,r3
   8746c:	00873140 	call	87314 <__b2d>
   87470:	89000417 	ldw	r4,16(r17)
   87474:	91c00417 	ldw	r7,16(r18)
   87478:	d9800117 	ldw	r6,4(sp)
   8747c:	180b883a 	mov	r5,r3
   87480:	390fc83a 	sub	r7,r7,r4
   87484:	1009883a 	mov	r4,r2
   87488:	d8800017 	ldw	r2,0(sp)
   8748c:	380e917a 	slli	r7,r7,5
   87490:	2011883a 	mov	r8,r4
   87494:	1185c83a 	sub	r2,r2,r6
   87498:	11c5883a 	add	r2,r2,r7
   8749c:	1006953a 	slli	r3,r2,20
   874a0:	2813883a 	mov	r9,r5
   874a4:	00800d0e 	bge	zero,r2,874dc <__ratio+0xa8>
   874a8:	1d29883a 	add	r20,r3,r20
   874ac:	a00b883a 	mov	r5,r20
   874b0:	480f883a 	mov	r7,r9
   874b4:	9809883a 	mov	r4,r19
   874b8:	400d883a 	mov	r6,r8
   874bc:	008a47c0 	call	8a47c <__divdf3>
   874c0:	dfc00617 	ldw	ra,24(sp)
   874c4:	dd000517 	ldw	r20,20(sp)
   874c8:	dcc00417 	ldw	r19,16(sp)
   874cc:	dc800317 	ldw	r18,12(sp)
   874d0:	dc400217 	ldw	r17,8(sp)
   874d4:	dec00704 	addi	sp,sp,28
   874d8:	f800283a 	ret
   874dc:	28d3c83a 	sub	r9,r5,r3
   874e0:	003ff206 	br	874ac <__ratio+0x78>

000874e4 <_mprec_log10>:
   874e4:	defffe04 	addi	sp,sp,-8
   874e8:	008005c4 	movi	r2,23
   874ec:	dc000015 	stw	r16,0(sp)
   874f0:	dfc00115 	stw	ra,4(sp)
   874f4:	2021883a 	mov	r16,r4
   874f8:	11000c16 	blt	r2,r4,8752c <_mprec_log10+0x48>
   874fc:	200490fa 	slli	r2,r4,3
   87500:	00c00274 	movhi	r3,9
   87504:	18fbe004 	addi	r3,r3,-4224
   87508:	10c5883a 	add	r2,r2,r3
   8750c:	12400117 	ldw	r9,4(r2)
   87510:	12000017 	ldw	r8,0(r2)
   87514:	4807883a 	mov	r3,r9
   87518:	4005883a 	mov	r2,r8
   8751c:	dfc00117 	ldw	ra,4(sp)
   87520:	dc000017 	ldw	r16,0(sp)
   87524:	dec00204 	addi	sp,sp,8
   87528:	f800283a 	ret
   8752c:	0011883a 	mov	r8,zero
   87530:	024ffc34 	movhi	r9,16368
   87534:	0005883a 	mov	r2,zero
   87538:	00d00934 	movhi	r3,16420
   8753c:	480b883a 	mov	r5,r9
   87540:	4009883a 	mov	r4,r8
   87544:	180f883a 	mov	r7,r3
   87548:	100d883a 	mov	r6,r2
   8754c:	008a0b80 	call	8a0b8 <__muldf3>
   87550:	843fffc4 	addi	r16,r16,-1
   87554:	1011883a 	mov	r8,r2
   87558:	1813883a 	mov	r9,r3
   8755c:	803ff51e 	bne	r16,zero,87534 <_mprec_log10+0x50>
   87560:	4005883a 	mov	r2,r8
   87564:	4807883a 	mov	r3,r9
   87568:	dfc00117 	ldw	ra,4(sp)
   8756c:	dc000017 	ldw	r16,0(sp)
   87570:	dec00204 	addi	sp,sp,8
   87574:	f800283a 	ret

00087578 <__copybits>:
   87578:	297fffc4 	addi	r5,r5,-1
   8757c:	30800417 	ldw	r2,16(r6)
   87580:	280bd17a 	srai	r5,r5,5
   87584:	31800504 	addi	r6,r6,20
   87588:	1085883a 	add	r2,r2,r2
   8758c:	294b883a 	add	r5,r5,r5
   87590:	294b883a 	add	r5,r5,r5
   87594:	1085883a 	add	r2,r2,r2
   87598:	290b883a 	add	r5,r5,r4
   8759c:	3087883a 	add	r3,r6,r2
   875a0:	29400104 	addi	r5,r5,4
   875a4:	30c0052e 	bgeu	r6,r3,875bc <__copybits+0x44>
   875a8:	30800017 	ldw	r2,0(r6)
   875ac:	31800104 	addi	r6,r6,4
   875b0:	20800015 	stw	r2,0(r4)
   875b4:	21000104 	addi	r4,r4,4
   875b8:	30fffb36 	bltu	r6,r3,875a8 <__copybits+0x30>
   875bc:	2140032e 	bgeu	r4,r5,875cc <__copybits+0x54>
   875c0:	20000015 	stw	zero,0(r4)
   875c4:	21000104 	addi	r4,r4,4
   875c8:	217ffd36 	bltu	r4,r5,875c0 <__copybits+0x48>
   875cc:	f800283a 	ret

000875d0 <__any_on>:
   875d0:	20800417 	ldw	r2,16(r4)
   875d4:	2807d17a 	srai	r3,r5,5
   875d8:	21000504 	addi	r4,r4,20
   875dc:	10c00d0e 	bge	r2,r3,87614 <__any_on+0x44>
   875e0:	1085883a 	add	r2,r2,r2
   875e4:	1085883a 	add	r2,r2,r2
   875e8:	208d883a 	add	r6,r4,r2
   875ec:	2180182e 	bgeu	r4,r6,87650 <__any_on+0x80>
   875f0:	30bfff17 	ldw	r2,-4(r6)
   875f4:	30ffff04 	addi	r3,r6,-4
   875f8:	1000041e 	bne	r2,zero,8760c <__any_on+0x3c>
   875fc:	20c0142e 	bgeu	r4,r3,87650 <__any_on+0x80>
   87600:	18ffff04 	addi	r3,r3,-4
   87604:	18800017 	ldw	r2,0(r3)
   87608:	103ffc26 	beq	r2,zero,875fc <__any_on+0x2c>
   8760c:	00800044 	movi	r2,1
   87610:	f800283a 	ret
   87614:	18800a0e 	bge	r3,r2,87640 <__any_on+0x70>
   87618:	294007cc 	andi	r5,r5,31
   8761c:	28000826 	beq	r5,zero,87640 <__any_on+0x70>
   87620:	18c5883a 	add	r2,r3,r3
   87624:	1085883a 	add	r2,r2,r2
   87628:	208d883a 	add	r6,r4,r2
   8762c:	30c00017 	ldw	r3,0(r6)
   87630:	1944d83a 	srl	r2,r3,r5
   87634:	1144983a 	sll	r2,r2,r5
   87638:	18bff41e 	bne	r3,r2,8760c <__any_on+0x3c>
   8763c:	003feb06 	br	875ec <__any_on+0x1c>
   87640:	18c5883a 	add	r2,r3,r3
   87644:	1085883a 	add	r2,r2,r2
   87648:	208d883a 	add	r6,r4,r2
   8764c:	003fe706 	br	875ec <__any_on+0x1c>
   87650:	0005883a 	mov	r2,zero
   87654:	f800283a 	ret

00087658 <_Balloc>:
   87658:	20c01317 	ldw	r3,76(r4)
   8765c:	defffb04 	addi	sp,sp,-20
   87660:	dcc00315 	stw	r19,12(sp)
   87664:	dc800215 	stw	r18,8(sp)
   87668:	dfc00415 	stw	ra,16(sp)
   8766c:	2825883a 	mov	r18,r5
   87670:	dc400115 	stw	r17,4(sp)
   87674:	dc000015 	stw	r16,0(sp)
   87678:	2027883a 	mov	r19,r4
   8767c:	01800404 	movi	r6,16
   87680:	01400104 	movi	r5,4
   87684:	18001726 	beq	r3,zero,876e4 <_Balloc+0x8c>
   87688:	01400044 	movi	r5,1
   8768c:	9485883a 	add	r2,r18,r18
   87690:	2ca2983a 	sll	r17,r5,r18
   87694:	1085883a 	add	r2,r2,r2
   87698:	10c7883a 	add	r3,r2,r3
   8769c:	1c000017 	ldw	r16,0(r3)
   876a0:	8c4d883a 	add	r6,r17,r17
   876a4:	318d883a 	add	r6,r6,r6
   876a8:	9809883a 	mov	r4,r19
   876ac:	31800504 	addi	r6,r6,20
   876b0:	80001226 	beq	r16,zero,876fc <_Balloc+0xa4>
   876b4:	80800017 	ldw	r2,0(r16)
   876b8:	18800015 	stw	r2,0(r3)
   876bc:	80000415 	stw	zero,16(r16)
   876c0:	80000315 	stw	zero,12(r16)
   876c4:	8005883a 	mov	r2,r16
   876c8:	dfc00417 	ldw	ra,16(sp)
   876cc:	dcc00317 	ldw	r19,12(sp)
   876d0:	dc800217 	ldw	r18,8(sp)
   876d4:	dc400117 	ldw	r17,4(sp)
   876d8:	dc000017 	ldw	r16,0(sp)
   876dc:	dec00504 	addi	sp,sp,20
   876e0:	f800283a 	ret
   876e4:	0088ab80 	call	88ab8 <_calloc_r>
   876e8:	1007883a 	mov	r3,r2
   876ec:	0021883a 	mov	r16,zero
   876f0:	98801315 	stw	r2,76(r19)
   876f4:	103fe41e 	bne	r2,zero,87688 <_Balloc+0x30>
   876f8:	003ff206 	br	876c4 <_Balloc+0x6c>
   876fc:	0088ab80 	call	88ab8 <_calloc_r>
   87700:	103ff026 	beq	r2,zero,876c4 <_Balloc+0x6c>
   87704:	1021883a 	mov	r16,r2
   87708:	14800115 	stw	r18,4(r2)
   8770c:	14400215 	stw	r17,8(r2)
   87710:	003fea06 	br	876bc <_Balloc+0x64>

00087714 <__d2b>:
   87714:	defff504 	addi	sp,sp,-44
   87718:	dcc00515 	stw	r19,20(sp)
   8771c:	04c00044 	movi	r19,1
   87720:	dc000215 	stw	r16,8(sp)
   87724:	2821883a 	mov	r16,r5
   87728:	980b883a 	mov	r5,r19
   8772c:	ddc00915 	stw	r23,36(sp)
   87730:	dd800815 	stw	r22,32(sp)
   87734:	dd400715 	stw	r21,28(sp)
   87738:	dd000615 	stw	r20,24(sp)
   8773c:	dc800415 	stw	r18,16(sp)
   87740:	dc400315 	stw	r17,12(sp)
   87744:	dfc00a15 	stw	ra,40(sp)
   87748:	3023883a 	mov	r17,r6
   8774c:	382d883a 	mov	r22,r7
   87750:	ddc00b17 	ldw	r23,44(sp)
   87754:	00876580 	call	87658 <_Balloc>
   87758:	1025883a 	mov	r18,r2
   8775c:	00a00034 	movhi	r2,32768
   87760:	10bfffc4 	addi	r2,r2,-1
   87764:	8888703a 	and	r4,r17,r2
   87768:	202ad53a 	srli	r21,r4,20
   8776c:	00800434 	movhi	r2,16
   87770:	10bfffc4 	addi	r2,r2,-1
   87774:	8886703a 	and	r3,r17,r2
   87778:	a829003a 	cmpeq	r20,r21,zero
   8777c:	800b883a 	mov	r5,r16
   87780:	d8c00115 	stw	r3,4(sp)
   87784:	94000504 	addi	r16,r18,20
   87788:	a000021e 	bne	r20,zero,87794 <__d2b+0x80>
   8778c:	18c00434 	orhi	r3,r3,16
   87790:	d8c00115 	stw	r3,4(sp)
   87794:	28002726 	beq	r5,zero,87834 <__d2b+0x120>
   87798:	d809883a 	mov	r4,sp
   8779c:	d9400015 	stw	r5,0(sp)
   877a0:	00871700 	call	87170 <__lo0bits>
   877a4:	100d883a 	mov	r6,r2
   877a8:	10003526 	beq	r2,zero,87880 <__d2b+0x16c>
   877ac:	d8c00117 	ldw	r3,4(sp)
   877b0:	00800804 	movi	r2,32
   877b4:	1185c83a 	sub	r2,r2,r6
   877b8:	d9000017 	ldw	r4,0(sp)
   877bc:	1886983a 	sll	r3,r3,r2
   877c0:	1906b03a 	or	r3,r3,r4
   877c4:	90c00515 	stw	r3,20(r18)
   877c8:	d8c00117 	ldw	r3,4(sp)
   877cc:	1986d83a 	srl	r3,r3,r6
   877d0:	d8c00115 	stw	r3,4(sp)
   877d4:	180b003a 	cmpeq	r5,r3,zero
   877d8:	00800084 	movi	r2,2
   877dc:	114bc83a 	sub	r5,r2,r5
   877e0:	80c00115 	stw	r3,4(r16)
   877e4:	91400415 	stw	r5,16(r18)
   877e8:	a0001a1e 	bne	r20,zero,87854 <__d2b+0x140>
   877ec:	3545883a 	add	r2,r6,r21
   877f0:	10bef344 	addi	r2,r2,-1075
   877f4:	00c00d44 	movi	r3,53
   877f8:	b0800015 	stw	r2,0(r22)
   877fc:	1987c83a 	sub	r3,r3,r6
   87800:	b8c00015 	stw	r3,0(r23)
   87804:	9005883a 	mov	r2,r18
   87808:	dfc00a17 	ldw	ra,40(sp)
   8780c:	ddc00917 	ldw	r23,36(sp)
   87810:	dd800817 	ldw	r22,32(sp)
   87814:	dd400717 	ldw	r21,28(sp)
   87818:	dd000617 	ldw	r20,24(sp)
   8781c:	dcc00517 	ldw	r19,20(sp)
   87820:	dc800417 	ldw	r18,16(sp)
   87824:	dc400317 	ldw	r17,12(sp)
   87828:	dc000217 	ldw	r16,8(sp)
   8782c:	dec00b04 	addi	sp,sp,44
   87830:	f800283a 	ret
   87834:	d9000104 	addi	r4,sp,4
   87838:	00871700 	call	87170 <__lo0bits>
   8783c:	11800804 	addi	r6,r2,32
   87840:	d8800117 	ldw	r2,4(sp)
   87844:	94c00415 	stw	r19,16(r18)
   87848:	980b883a 	mov	r5,r19
   8784c:	90800515 	stw	r2,20(r18)
   87850:	a03fe626 	beq	r20,zero,877ec <__d2b+0xd8>
   87854:	2945883a 	add	r2,r5,r5
   87858:	1085883a 	add	r2,r2,r2
   8785c:	1405883a 	add	r2,r2,r16
   87860:	113fff17 	ldw	r4,-4(r2)
   87864:	30fef384 	addi	r3,r6,-1074
   87868:	2820917a 	slli	r16,r5,5
   8786c:	b0c00015 	stw	r3,0(r22)
   87870:	00871000 	call	87100 <__hi0bits>
   87874:	80a1c83a 	sub	r16,r16,r2
   87878:	bc000015 	stw	r16,0(r23)
   8787c:	003fe106 	br	87804 <__d2b+0xf0>
   87880:	d8800017 	ldw	r2,0(sp)
   87884:	90800515 	stw	r2,20(r18)
   87888:	d8c00117 	ldw	r3,4(sp)
   8788c:	003fd106 	br	877d4 <__d2b+0xc0>

00087890 <__mdiff>:
   87890:	defffb04 	addi	sp,sp,-20
   87894:	dc000015 	stw	r16,0(sp)
   87898:	2821883a 	mov	r16,r5
   8789c:	dc800215 	stw	r18,8(sp)
   878a0:	300b883a 	mov	r5,r6
   878a4:	2025883a 	mov	r18,r4
   878a8:	8009883a 	mov	r4,r16
   878ac:	dc400115 	stw	r17,4(sp)
   878b0:	dfc00415 	stw	ra,16(sp)
   878b4:	dcc00315 	stw	r19,12(sp)
   878b8:	3023883a 	mov	r17,r6
   878bc:	00872340 	call	87234 <__mcmp>
   878c0:	10004226 	beq	r2,zero,879cc <__mdiff+0x13c>
   878c4:	10005016 	blt	r2,zero,87a08 <__mdiff+0x178>
   878c8:	0027883a 	mov	r19,zero
   878cc:	81400117 	ldw	r5,4(r16)
   878d0:	9009883a 	mov	r4,r18
   878d4:	00876580 	call	87658 <_Balloc>
   878d8:	1019883a 	mov	r12,r2
   878dc:	82800417 	ldw	r10,16(r16)
   878e0:	88800417 	ldw	r2,16(r17)
   878e4:	81800504 	addi	r6,r16,20
   878e8:	5287883a 	add	r3,r10,r10
   878ec:	1085883a 	add	r2,r2,r2
   878f0:	18c7883a 	add	r3,r3,r3
   878f4:	1085883a 	add	r2,r2,r2
   878f8:	8a000504 	addi	r8,r17,20
   878fc:	64c00315 	stw	r19,12(r12)
   87900:	30db883a 	add	r13,r6,r3
   87904:	4097883a 	add	r11,r8,r2
   87908:	61c00504 	addi	r7,r12,20
   8790c:	0013883a 	mov	r9,zero
   87910:	31000017 	ldw	r4,0(r6)
   87914:	41400017 	ldw	r5,0(r8)
   87918:	42000104 	addi	r8,r8,4
   8791c:	20bfffcc 	andi	r2,r4,65535
   87920:	28ffffcc 	andi	r3,r5,65535
   87924:	10c5c83a 	sub	r2,r2,r3
   87928:	1245883a 	add	r2,r2,r9
   8792c:	2008d43a 	srli	r4,r4,16
   87930:	280ad43a 	srli	r5,r5,16
   87934:	1007d43a 	srai	r3,r2,16
   87938:	3880000d 	sth	r2,0(r7)
   8793c:	2149c83a 	sub	r4,r4,r5
   87940:	20c9883a 	add	r4,r4,r3
   87944:	3900008d 	sth	r4,2(r7)
   87948:	31800104 	addi	r6,r6,4
   8794c:	39c00104 	addi	r7,r7,4
   87950:	2013d43a 	srai	r9,r4,16
   87954:	42ffee36 	bltu	r8,r11,87910 <__mdiff+0x80>
   87958:	33400c2e 	bgeu	r6,r13,8798c <__mdiff+0xfc>
   8795c:	30800017 	ldw	r2,0(r6)
   87960:	31800104 	addi	r6,r6,4
   87964:	10ffffcc 	andi	r3,r2,65535
   87968:	1a47883a 	add	r3,r3,r9
   8796c:	1004d43a 	srli	r2,r2,16
   87970:	1809d43a 	srai	r4,r3,16
   87974:	38c0000d 	sth	r3,0(r7)
   87978:	1105883a 	add	r2,r2,r4
   8797c:	3880008d 	sth	r2,2(r7)
   87980:	1013d43a 	srai	r9,r2,16
   87984:	39c00104 	addi	r7,r7,4
   87988:	337ff436 	bltu	r6,r13,8795c <__mdiff+0xcc>
   8798c:	38bfff17 	ldw	r2,-4(r7)
   87990:	38ffff04 	addi	r3,r7,-4
   87994:	1000041e 	bne	r2,zero,879a8 <__mdiff+0x118>
   87998:	18ffff04 	addi	r3,r3,-4
   8799c:	18800017 	ldw	r2,0(r3)
   879a0:	52bfffc4 	addi	r10,r10,-1
   879a4:	103ffc26 	beq	r2,zero,87998 <__mdiff+0x108>
   879a8:	6005883a 	mov	r2,r12
   879ac:	62800415 	stw	r10,16(r12)
   879b0:	dfc00417 	ldw	ra,16(sp)
   879b4:	dcc00317 	ldw	r19,12(sp)
   879b8:	dc800217 	ldw	r18,8(sp)
   879bc:	dc400117 	ldw	r17,4(sp)
   879c0:	dc000017 	ldw	r16,0(sp)
   879c4:	dec00504 	addi	sp,sp,20
   879c8:	f800283a 	ret
   879cc:	9009883a 	mov	r4,r18
   879d0:	000b883a 	mov	r5,zero
   879d4:	00876580 	call	87658 <_Balloc>
   879d8:	1019883a 	mov	r12,r2
   879dc:	00800044 	movi	r2,1
   879e0:	60800415 	stw	r2,16(r12)
   879e4:	6005883a 	mov	r2,r12
   879e8:	60000515 	stw	zero,20(r12)
   879ec:	dfc00417 	ldw	ra,16(sp)
   879f0:	dcc00317 	ldw	r19,12(sp)
   879f4:	dc800217 	ldw	r18,8(sp)
   879f8:	dc400117 	ldw	r17,4(sp)
   879fc:	dc000017 	ldw	r16,0(sp)
   87a00:	dec00504 	addi	sp,sp,20
   87a04:	f800283a 	ret
   87a08:	880d883a 	mov	r6,r17
   87a0c:	04c00044 	movi	r19,1
   87a10:	8023883a 	mov	r17,r16
   87a14:	3021883a 	mov	r16,r6
   87a18:	003fac06 	br	878cc <__mdiff+0x3c>

00087a1c <__lshift>:
   87a1c:	defff904 	addi	sp,sp,-28
   87a20:	28800417 	ldw	r2,16(r5)
   87a24:	dc000015 	stw	r16,0(sp)
   87a28:	3021d17a 	srai	r16,r6,5
   87a2c:	28c00217 	ldw	r3,8(r5)
   87a30:	10800044 	addi	r2,r2,1
   87a34:	dc400115 	stw	r17,4(sp)
   87a38:	80a3883a 	add	r17,r16,r2
   87a3c:	dd400515 	stw	r21,20(sp)
   87a40:	dd000415 	stw	r20,16(sp)
   87a44:	dc800215 	stw	r18,8(sp)
   87a48:	dfc00615 	stw	ra,24(sp)
   87a4c:	2825883a 	mov	r18,r5
   87a50:	dcc00315 	stw	r19,12(sp)
   87a54:	3029883a 	mov	r20,r6
   87a58:	202b883a 	mov	r21,r4
   87a5c:	29400117 	ldw	r5,4(r5)
   87a60:	1c40030e 	bge	r3,r17,87a70 <__lshift+0x54>
   87a64:	18c7883a 	add	r3,r3,r3
   87a68:	29400044 	addi	r5,r5,1
   87a6c:	1c7ffd16 	blt	r3,r17,87a64 <__lshift+0x48>
   87a70:	a809883a 	mov	r4,r21
   87a74:	00876580 	call	87658 <_Balloc>
   87a78:	1027883a 	mov	r19,r2
   87a7c:	11400504 	addi	r5,r2,20
   87a80:	0400090e 	bge	zero,r16,87aa8 <__lshift+0x8c>
   87a84:	2805883a 	mov	r2,r5
   87a88:	0007883a 	mov	r3,zero
   87a8c:	18c00044 	addi	r3,r3,1
   87a90:	10000015 	stw	zero,0(r2)
   87a94:	10800104 	addi	r2,r2,4
   87a98:	80fffc1e 	bne	r16,r3,87a8c <__lshift+0x70>
   87a9c:	8405883a 	add	r2,r16,r16
   87aa0:	1085883a 	add	r2,r2,r2
   87aa4:	288b883a 	add	r5,r5,r2
   87aa8:	90800417 	ldw	r2,16(r18)
   87aac:	91000504 	addi	r4,r18,20
   87ab0:	a18007cc 	andi	r6,r20,31
   87ab4:	1085883a 	add	r2,r2,r2
   87ab8:	1085883a 	add	r2,r2,r2
   87abc:	208f883a 	add	r7,r4,r2
   87ac0:	30001e26 	beq	r6,zero,87b3c <__lshift+0x120>
   87ac4:	00800804 	movi	r2,32
   87ac8:	1191c83a 	sub	r8,r2,r6
   87acc:	0007883a 	mov	r3,zero
   87ad0:	20800017 	ldw	r2,0(r4)
   87ad4:	1184983a 	sll	r2,r2,r6
   87ad8:	1884b03a 	or	r2,r3,r2
   87adc:	28800015 	stw	r2,0(r5)
   87ae0:	20c00017 	ldw	r3,0(r4)
   87ae4:	21000104 	addi	r4,r4,4
   87ae8:	29400104 	addi	r5,r5,4
   87aec:	1a06d83a 	srl	r3,r3,r8
   87af0:	21fff736 	bltu	r4,r7,87ad0 <__lshift+0xb4>
   87af4:	28c00015 	stw	r3,0(r5)
   87af8:	18000126 	beq	r3,zero,87b00 <__lshift+0xe4>
   87afc:	8c400044 	addi	r17,r17,1
   87b00:	88bfffc4 	addi	r2,r17,-1
   87b04:	98800415 	stw	r2,16(r19)
   87b08:	a809883a 	mov	r4,r21
   87b0c:	900b883a 	mov	r5,r18
   87b10:	00870d80 	call	870d8 <_Bfree>
   87b14:	9805883a 	mov	r2,r19
   87b18:	dfc00617 	ldw	ra,24(sp)
   87b1c:	dd400517 	ldw	r21,20(sp)
   87b20:	dd000417 	ldw	r20,16(sp)
   87b24:	dcc00317 	ldw	r19,12(sp)
   87b28:	dc800217 	ldw	r18,8(sp)
   87b2c:	dc400117 	ldw	r17,4(sp)
   87b30:	dc000017 	ldw	r16,0(sp)
   87b34:	dec00704 	addi	sp,sp,28
   87b38:	f800283a 	ret
   87b3c:	20800017 	ldw	r2,0(r4)
   87b40:	21000104 	addi	r4,r4,4
   87b44:	28800015 	stw	r2,0(r5)
   87b48:	29400104 	addi	r5,r5,4
   87b4c:	21ffec2e 	bgeu	r4,r7,87b00 <__lshift+0xe4>
   87b50:	20800017 	ldw	r2,0(r4)
   87b54:	21000104 	addi	r4,r4,4
   87b58:	28800015 	stw	r2,0(r5)
   87b5c:	29400104 	addi	r5,r5,4
   87b60:	21fff636 	bltu	r4,r7,87b3c <__lshift+0x120>
   87b64:	003fe606 	br	87b00 <__lshift+0xe4>

00087b68 <__multiply>:
   87b68:	defff004 	addi	sp,sp,-64
   87b6c:	dc800815 	stw	r18,32(sp)
   87b70:	dc400715 	stw	r17,28(sp)
   87b74:	2c800417 	ldw	r18,16(r5)
   87b78:	34400417 	ldw	r17,16(r6)
   87b7c:	dcc00915 	stw	r19,36(sp)
   87b80:	dc000615 	stw	r16,24(sp)
   87b84:	dfc00f15 	stw	ra,60(sp)
   87b88:	df000e15 	stw	fp,56(sp)
   87b8c:	ddc00d15 	stw	r23,52(sp)
   87b90:	dd800c15 	stw	r22,48(sp)
   87b94:	dd400b15 	stw	r21,44(sp)
   87b98:	dd000a15 	stw	r20,40(sp)
   87b9c:	2821883a 	mov	r16,r5
   87ba0:	3027883a 	mov	r19,r6
   87ba4:	9440040e 	bge	r18,r17,87bb8 <__multiply+0x50>
   87ba8:	8825883a 	mov	r18,r17
   87bac:	2c400417 	ldw	r17,16(r5)
   87bb0:	2827883a 	mov	r19,r5
   87bb4:	3021883a 	mov	r16,r6
   87bb8:	80800217 	ldw	r2,8(r16)
   87bbc:	9447883a 	add	r3,r18,r17
   87bc0:	d8c00415 	stw	r3,16(sp)
   87bc4:	81400117 	ldw	r5,4(r16)
   87bc8:	10c0010e 	bge	r2,r3,87bd0 <__multiply+0x68>
   87bcc:	29400044 	addi	r5,r5,1
   87bd0:	00876580 	call	87658 <_Balloc>
   87bd4:	d8800515 	stw	r2,20(sp)
   87bd8:	d9000417 	ldw	r4,16(sp)
   87bdc:	d8c00517 	ldw	r3,20(sp)
   87be0:	2105883a 	add	r2,r4,r4
   87be4:	1085883a 	add	r2,r2,r2
   87be8:	19000504 	addi	r4,r3,20
   87bec:	2085883a 	add	r2,r4,r2
   87bf0:	d8800315 	stw	r2,12(sp)
   87bf4:	2080052e 	bgeu	r4,r2,87c0c <__multiply+0xa4>
   87bf8:	2005883a 	mov	r2,r4
   87bfc:	d8c00317 	ldw	r3,12(sp)
   87c00:	10000015 	stw	zero,0(r2)
   87c04:	10800104 	addi	r2,r2,4
   87c08:	10fffc36 	bltu	r2,r3,87bfc <__multiply+0x94>
   87c0c:	8c45883a 	add	r2,r17,r17
   87c10:	9487883a 	add	r3,r18,r18
   87c14:	9dc00504 	addi	r23,r19,20
   87c18:	1085883a 	add	r2,r2,r2
   87c1c:	84000504 	addi	r16,r16,20
   87c20:	18c7883a 	add	r3,r3,r3
   87c24:	b885883a 	add	r2,r23,r2
   87c28:	dc000015 	stw	r16,0(sp)
   87c2c:	d8800215 	stw	r2,8(sp)
   87c30:	80f9883a 	add	fp,r16,r3
   87c34:	b880432e 	bgeu	r23,r2,87d44 <__multiply+0x1dc>
   87c38:	d9000115 	stw	r4,4(sp)
   87c3c:	b9000017 	ldw	r4,0(r23)
   87c40:	253fffcc 	andi	r20,r4,65535
   87c44:	a0001a26 	beq	r20,zero,87cb0 <__multiply+0x148>
   87c48:	dcc00017 	ldw	r19,0(sp)
   87c4c:	dc800117 	ldw	r18,4(sp)
   87c50:	002b883a 	mov	r21,zero
   87c54:	9c400017 	ldw	r17,0(r19)
   87c58:	94000017 	ldw	r16,0(r18)
   87c5c:	a009883a 	mov	r4,r20
   87c60:	897fffcc 	andi	r5,r17,65535
   87c64:	008ace00 	call	8ace0 <__mulsi3>
   87c68:	880ad43a 	srli	r5,r17,16
   87c6c:	80ffffcc 	andi	r3,r16,65535
   87c70:	a8c7883a 	add	r3,r21,r3
   87c74:	a009883a 	mov	r4,r20
   87c78:	10e3883a 	add	r17,r2,r3
   87c7c:	8020d43a 	srli	r16,r16,16
   87c80:	008ace00 	call	8ace0 <__mulsi3>
   87c84:	8806d43a 	srli	r3,r17,16
   87c88:	1405883a 	add	r2,r2,r16
   87c8c:	9cc00104 	addi	r19,r19,4
   87c90:	1887883a 	add	r3,r3,r2
   87c94:	90c0008d 	sth	r3,2(r18)
   87c98:	9440000d 	sth	r17,0(r18)
   87c9c:	182ad43a 	srli	r21,r3,16
   87ca0:	94800104 	addi	r18,r18,4
   87ca4:	9f3feb36 	bltu	r19,fp,87c54 <__multiply+0xec>
   87ca8:	95400015 	stw	r21,0(r18)
   87cac:	b9000017 	ldw	r4,0(r23)
   87cb0:	202ad43a 	srli	r21,r4,16
   87cb4:	a8001c26 	beq	r21,zero,87d28 <__multiply+0x1c0>
   87cb8:	d9000117 	ldw	r4,4(sp)
   87cbc:	dd000017 	ldw	r20,0(sp)
   87cc0:	002d883a 	mov	r22,zero
   87cc4:	24c00017 	ldw	r19,0(r4)
   87cc8:	2025883a 	mov	r18,r4
   87ccc:	9823883a 	mov	r17,r19
   87cd0:	a4000017 	ldw	r16,0(r20)
   87cd4:	a809883a 	mov	r4,r21
   87cd8:	a5000104 	addi	r20,r20,4
   87cdc:	817fffcc 	andi	r5,r16,65535
   87ce0:	008ace00 	call	8ace0 <__mulsi3>
   87ce4:	8806d43a 	srli	r3,r17,16
   87ce8:	800ad43a 	srli	r5,r16,16
   87cec:	94c0000d 	sth	r19,0(r18)
   87cf0:	b0c7883a 	add	r3,r22,r3
   87cf4:	10e1883a 	add	r16,r2,r3
   87cf8:	9400008d 	sth	r16,2(r18)
   87cfc:	a809883a 	mov	r4,r21
   87d00:	94800104 	addi	r18,r18,4
   87d04:	008ace00 	call	8ace0 <__mulsi3>
   87d08:	94400017 	ldw	r17,0(r18)
   87d0c:	8020d43a 	srli	r16,r16,16
   87d10:	88ffffcc 	andi	r3,r17,65535
   87d14:	10c5883a 	add	r2,r2,r3
   87d18:	80a7883a 	add	r19,r16,r2
   87d1c:	982cd43a 	srli	r22,r19,16
   87d20:	a73feb36 	bltu	r20,fp,87cd0 <__multiply+0x168>
   87d24:	94c00015 	stw	r19,0(r18)
   87d28:	d8800217 	ldw	r2,8(sp)
   87d2c:	bdc00104 	addi	r23,r23,4
   87d30:	b880042e 	bgeu	r23,r2,87d44 <__multiply+0x1dc>
   87d34:	d8c00117 	ldw	r3,4(sp)
   87d38:	18c00104 	addi	r3,r3,4
   87d3c:	d8c00115 	stw	r3,4(sp)
   87d40:	003fbe06 	br	87c3c <__multiply+0xd4>
   87d44:	d9000417 	ldw	r4,16(sp)
   87d48:	01000c0e 	bge	zero,r4,87d7c <__multiply+0x214>
   87d4c:	d8c00317 	ldw	r3,12(sp)
   87d50:	18bfff17 	ldw	r2,-4(r3)
   87d54:	18ffff04 	addi	r3,r3,-4
   87d58:	10000326 	beq	r2,zero,87d68 <__multiply+0x200>
   87d5c:	00000706 	br	87d7c <__multiply+0x214>
   87d60:	18800017 	ldw	r2,0(r3)
   87d64:	1000051e 	bne	r2,zero,87d7c <__multiply+0x214>
   87d68:	d9000417 	ldw	r4,16(sp)
   87d6c:	18ffff04 	addi	r3,r3,-4
   87d70:	213fffc4 	addi	r4,r4,-1
   87d74:	d9000415 	stw	r4,16(sp)
   87d78:	203ff91e 	bne	r4,zero,87d60 <__multiply+0x1f8>
   87d7c:	d8800417 	ldw	r2,16(sp)
   87d80:	d8c00517 	ldw	r3,20(sp)
   87d84:	18800415 	stw	r2,16(r3)
   87d88:	1805883a 	mov	r2,r3
   87d8c:	dfc00f17 	ldw	ra,60(sp)
   87d90:	df000e17 	ldw	fp,56(sp)
   87d94:	ddc00d17 	ldw	r23,52(sp)
   87d98:	dd800c17 	ldw	r22,48(sp)
   87d9c:	dd400b17 	ldw	r21,44(sp)
   87da0:	dd000a17 	ldw	r20,40(sp)
   87da4:	dcc00917 	ldw	r19,36(sp)
   87da8:	dc800817 	ldw	r18,32(sp)
   87dac:	dc400717 	ldw	r17,28(sp)
   87db0:	dc000617 	ldw	r16,24(sp)
   87db4:	dec01004 	addi	sp,sp,64
   87db8:	f800283a 	ret

00087dbc <__i2b>:
   87dbc:	defffd04 	addi	sp,sp,-12
   87dc0:	dc000015 	stw	r16,0(sp)
   87dc4:	04000044 	movi	r16,1
   87dc8:	dc800115 	stw	r18,4(sp)
   87dcc:	2825883a 	mov	r18,r5
   87dd0:	800b883a 	mov	r5,r16
   87dd4:	dfc00215 	stw	ra,8(sp)
   87dd8:	00876580 	call	87658 <_Balloc>
   87ddc:	14000415 	stw	r16,16(r2)
   87de0:	14800515 	stw	r18,20(r2)
   87de4:	dfc00217 	ldw	ra,8(sp)
   87de8:	dc800117 	ldw	r18,4(sp)
   87dec:	dc000017 	ldw	r16,0(sp)
   87df0:	dec00304 	addi	sp,sp,12
   87df4:	f800283a 	ret

00087df8 <__multadd>:
   87df8:	defff604 	addi	sp,sp,-40
   87dfc:	dd800615 	stw	r22,24(sp)
   87e00:	2d800417 	ldw	r22,16(r5)
   87e04:	df000815 	stw	fp,32(sp)
   87e08:	ddc00715 	stw	r23,28(sp)
   87e0c:	dd400515 	stw	r21,20(sp)
   87e10:	dd000415 	stw	r20,16(sp)
   87e14:	dcc00315 	stw	r19,12(sp)
   87e18:	dc800215 	stw	r18,8(sp)
   87e1c:	dfc00915 	stw	ra,36(sp)
   87e20:	dc400115 	stw	r17,4(sp)
   87e24:	dc000015 	stw	r16,0(sp)
   87e28:	282f883a 	mov	r23,r5
   87e2c:	2039883a 	mov	fp,r4
   87e30:	302b883a 	mov	r21,r6
   87e34:	3829883a 	mov	r20,r7
   87e38:	2c800504 	addi	r18,r5,20
   87e3c:	0027883a 	mov	r19,zero
   87e40:	94400017 	ldw	r17,0(r18)
   87e44:	a80b883a 	mov	r5,r21
   87e48:	9cc00044 	addi	r19,r19,1
   87e4c:	893fffcc 	andi	r4,r17,65535
   87e50:	008ace00 	call	8ace0 <__mulsi3>
   87e54:	8808d43a 	srli	r4,r17,16
   87e58:	1521883a 	add	r16,r2,r20
   87e5c:	a80b883a 	mov	r5,r21
   87e60:	008ace00 	call	8ace0 <__mulsi3>
   87e64:	8008d43a 	srli	r4,r16,16
   87e68:	843fffcc 	andi	r16,r16,65535
   87e6c:	1105883a 	add	r2,r2,r4
   87e70:	1006943a 	slli	r3,r2,16
   87e74:	1028d43a 	srli	r20,r2,16
   87e78:	1c07883a 	add	r3,r3,r16
   87e7c:	90c00015 	stw	r3,0(r18)
   87e80:	94800104 	addi	r18,r18,4
   87e84:	9dbfee16 	blt	r19,r22,87e40 <__multadd+0x48>
   87e88:	a0000826 	beq	r20,zero,87eac <__multadd+0xb4>
   87e8c:	b8800217 	ldw	r2,8(r23)
   87e90:	b080130e 	bge	r22,r2,87ee0 <__multadd+0xe8>
   87e94:	b585883a 	add	r2,r22,r22
   87e98:	1085883a 	add	r2,r2,r2
   87e9c:	15c5883a 	add	r2,r2,r23
   87ea0:	b0c00044 	addi	r3,r22,1
   87ea4:	15000515 	stw	r20,20(r2)
   87ea8:	b8c00415 	stw	r3,16(r23)
   87eac:	b805883a 	mov	r2,r23
   87eb0:	dfc00917 	ldw	ra,36(sp)
   87eb4:	df000817 	ldw	fp,32(sp)
   87eb8:	ddc00717 	ldw	r23,28(sp)
   87ebc:	dd800617 	ldw	r22,24(sp)
   87ec0:	dd400517 	ldw	r21,20(sp)
   87ec4:	dd000417 	ldw	r20,16(sp)
   87ec8:	dcc00317 	ldw	r19,12(sp)
   87ecc:	dc800217 	ldw	r18,8(sp)
   87ed0:	dc400117 	ldw	r17,4(sp)
   87ed4:	dc000017 	ldw	r16,0(sp)
   87ed8:	dec00a04 	addi	sp,sp,40
   87edc:	f800283a 	ret
   87ee0:	b9400117 	ldw	r5,4(r23)
   87ee4:	e009883a 	mov	r4,fp
   87ee8:	29400044 	addi	r5,r5,1
   87eec:	00876580 	call	87658 <_Balloc>
   87ef0:	b9800417 	ldw	r6,16(r23)
   87ef4:	b9400304 	addi	r5,r23,12
   87ef8:	11000304 	addi	r4,r2,12
   87efc:	318d883a 	add	r6,r6,r6
   87f00:	318d883a 	add	r6,r6,r6
   87f04:	31800204 	addi	r6,r6,8
   87f08:	1023883a 	mov	r17,r2
   87f0c:	00818940 	call	81894 <memcpy>
   87f10:	b80b883a 	mov	r5,r23
   87f14:	e009883a 	mov	r4,fp
   87f18:	00870d80 	call	870d8 <_Bfree>
   87f1c:	882f883a 	mov	r23,r17
   87f20:	003fdc06 	br	87e94 <__multadd+0x9c>

00087f24 <__pow5mult>:
   87f24:	defffa04 	addi	sp,sp,-24
   87f28:	308000cc 	andi	r2,r6,3
   87f2c:	dd000415 	stw	r20,16(sp)
   87f30:	dcc00315 	stw	r19,12(sp)
   87f34:	dc000015 	stw	r16,0(sp)
   87f38:	dfc00515 	stw	ra,20(sp)
   87f3c:	dc800215 	stw	r18,8(sp)
   87f40:	dc400115 	stw	r17,4(sp)
   87f44:	3021883a 	mov	r16,r6
   87f48:	2027883a 	mov	r19,r4
   87f4c:	2829883a 	mov	r20,r5
   87f50:	10002b1e 	bne	r2,zero,88000 <__pow5mult+0xdc>
   87f54:	8025d0ba 	srai	r18,r16,2
   87f58:	90001b26 	beq	r18,zero,87fc8 <__pow5mult+0xa4>
   87f5c:	9c001217 	ldw	r16,72(r19)
   87f60:	8000081e 	bne	r16,zero,87f84 <__pow5mult+0x60>
   87f64:	00003006 	br	88028 <__pow5mult+0x104>
   87f68:	800b883a 	mov	r5,r16
   87f6c:	800d883a 	mov	r6,r16
   87f70:	9809883a 	mov	r4,r19
   87f74:	90001426 	beq	r18,zero,87fc8 <__pow5mult+0xa4>
   87f78:	80800017 	ldw	r2,0(r16)
   87f7c:	10001b26 	beq	r2,zero,87fec <__pow5mult+0xc8>
   87f80:	1021883a 	mov	r16,r2
   87f84:	9080004c 	andi	r2,r18,1
   87f88:	1005003a 	cmpeq	r2,r2,zero
   87f8c:	9025d07a 	srai	r18,r18,1
   87f90:	800d883a 	mov	r6,r16
   87f94:	9809883a 	mov	r4,r19
   87f98:	a00b883a 	mov	r5,r20
   87f9c:	103ff21e 	bne	r2,zero,87f68 <__pow5mult+0x44>
   87fa0:	0087b680 	call	87b68 <__multiply>
   87fa4:	a00b883a 	mov	r5,r20
   87fa8:	9809883a 	mov	r4,r19
   87fac:	1023883a 	mov	r17,r2
   87fb0:	00870d80 	call	870d8 <_Bfree>
   87fb4:	8829883a 	mov	r20,r17
   87fb8:	800b883a 	mov	r5,r16
   87fbc:	800d883a 	mov	r6,r16
   87fc0:	9809883a 	mov	r4,r19
   87fc4:	903fec1e 	bne	r18,zero,87f78 <__pow5mult+0x54>
   87fc8:	a005883a 	mov	r2,r20
   87fcc:	dfc00517 	ldw	ra,20(sp)
   87fd0:	dd000417 	ldw	r20,16(sp)
   87fd4:	dcc00317 	ldw	r19,12(sp)
   87fd8:	dc800217 	ldw	r18,8(sp)
   87fdc:	dc400117 	ldw	r17,4(sp)
   87fe0:	dc000017 	ldw	r16,0(sp)
   87fe4:	dec00604 	addi	sp,sp,24
   87fe8:	f800283a 	ret
   87fec:	0087b680 	call	87b68 <__multiply>
   87ff0:	80800015 	stw	r2,0(r16)
   87ff4:	1021883a 	mov	r16,r2
   87ff8:	10000015 	stw	zero,0(r2)
   87ffc:	003fe106 	br	87f84 <__pow5mult+0x60>
   88000:	1085883a 	add	r2,r2,r2
   88004:	00c00274 	movhi	r3,9
   88008:	18fc2604 	addi	r3,r3,-3944
   8800c:	1085883a 	add	r2,r2,r2
   88010:	10c5883a 	add	r2,r2,r3
   88014:	11bfff17 	ldw	r6,-4(r2)
   88018:	000f883a 	mov	r7,zero
   8801c:	0087df80 	call	87df8 <__multadd>
   88020:	1029883a 	mov	r20,r2
   88024:	003fcb06 	br	87f54 <__pow5mult+0x30>
   88028:	9809883a 	mov	r4,r19
   8802c:	01409c44 	movi	r5,625
   88030:	0087dbc0 	call	87dbc <__i2b>
   88034:	98801215 	stw	r2,72(r19)
   88038:	1021883a 	mov	r16,r2
   8803c:	10000015 	stw	zero,0(r2)
   88040:	003fd006 	br	87f84 <__pow5mult+0x60>

00088044 <__s2b>:
   88044:	defff904 	addi	sp,sp,-28
   88048:	dcc00315 	stw	r19,12(sp)
   8804c:	dc800215 	stw	r18,8(sp)
   88050:	2827883a 	mov	r19,r5
   88054:	2025883a 	mov	r18,r4
   88058:	01400244 	movi	r5,9
   8805c:	39000204 	addi	r4,r7,8
   88060:	dd000415 	stw	r20,16(sp)
   88064:	dc400115 	stw	r17,4(sp)
   88068:	dfc00615 	stw	ra,24(sp)
   8806c:	dd400515 	stw	r21,20(sp)
   88070:	dc000015 	stw	r16,0(sp)
   88074:	3829883a 	mov	r20,r7
   88078:	3023883a 	mov	r17,r6
   8807c:	00817ac0 	call	817ac <__divsi3>
   88080:	00c00044 	movi	r3,1
   88084:	1880350e 	bge	r3,r2,8815c <__s2b+0x118>
   88088:	000b883a 	mov	r5,zero
   8808c:	18c7883a 	add	r3,r3,r3
   88090:	29400044 	addi	r5,r5,1
   88094:	18bffd16 	blt	r3,r2,8808c <__s2b+0x48>
   88098:	9009883a 	mov	r4,r18
   8809c:	00876580 	call	87658 <_Balloc>
   880a0:	1011883a 	mov	r8,r2
   880a4:	d8800717 	ldw	r2,28(sp)
   880a8:	00c00044 	movi	r3,1
   880ac:	01800244 	movi	r6,9
   880b0:	40800515 	stw	r2,20(r8)
   880b4:	40c00415 	stw	r3,16(r8)
   880b8:	3440260e 	bge	r6,r17,88154 <__s2b+0x110>
   880bc:	3021883a 	mov	r16,r6
   880c0:	99ab883a 	add	r21,r19,r6
   880c4:	9c05883a 	add	r2,r19,r16
   880c8:	11c00007 	ldb	r7,0(r2)
   880cc:	400b883a 	mov	r5,r8
   880d0:	9009883a 	mov	r4,r18
   880d4:	39fff404 	addi	r7,r7,-48
   880d8:	01800284 	movi	r6,10
   880dc:	0087df80 	call	87df8 <__multadd>
   880e0:	84000044 	addi	r16,r16,1
   880e4:	1011883a 	mov	r8,r2
   880e8:	8c3ff61e 	bne	r17,r16,880c4 <__s2b+0x80>
   880ec:	ac45883a 	add	r2,r21,r17
   880f0:	117ffe04 	addi	r5,r2,-8
   880f4:	880d883a 	mov	r6,r17
   880f8:	35000c0e 	bge	r6,r20,8812c <__s2b+0xe8>
   880fc:	a185c83a 	sub	r2,r20,r6
   88100:	2821883a 	mov	r16,r5
   88104:	28a3883a 	add	r17,r5,r2
   88108:	81c00007 	ldb	r7,0(r16)
   8810c:	400b883a 	mov	r5,r8
   88110:	9009883a 	mov	r4,r18
   88114:	39fff404 	addi	r7,r7,-48
   88118:	01800284 	movi	r6,10
   8811c:	0087df80 	call	87df8 <__multadd>
   88120:	84000044 	addi	r16,r16,1
   88124:	1011883a 	mov	r8,r2
   88128:	847ff71e 	bne	r16,r17,88108 <__s2b+0xc4>
   8812c:	4005883a 	mov	r2,r8
   88130:	dfc00617 	ldw	ra,24(sp)
   88134:	dd400517 	ldw	r21,20(sp)
   88138:	dd000417 	ldw	r20,16(sp)
   8813c:	dcc00317 	ldw	r19,12(sp)
   88140:	dc800217 	ldw	r18,8(sp)
   88144:	dc400117 	ldw	r17,4(sp)
   88148:	dc000017 	ldw	r16,0(sp)
   8814c:	dec00704 	addi	sp,sp,28
   88150:	f800283a 	ret
   88154:	99400284 	addi	r5,r19,10
   88158:	003fe706 	br	880f8 <__s2b+0xb4>
   8815c:	000b883a 	mov	r5,zero
   88160:	003fcd06 	br	88098 <__s2b+0x54>

00088164 <_realloc_r>:
   88164:	defff404 	addi	sp,sp,-48
   88168:	dd800815 	stw	r22,32(sp)
   8816c:	dc800415 	stw	r18,16(sp)
   88170:	dc400315 	stw	r17,12(sp)
   88174:	dfc00b15 	stw	ra,44(sp)
   88178:	df000a15 	stw	fp,40(sp)
   8817c:	ddc00915 	stw	r23,36(sp)
   88180:	dd400715 	stw	r21,28(sp)
   88184:	dd000615 	stw	r20,24(sp)
   88188:	dcc00515 	stw	r19,20(sp)
   8818c:	dc000215 	stw	r16,8(sp)
   88190:	2825883a 	mov	r18,r5
   88194:	3023883a 	mov	r17,r6
   88198:	202d883a 	mov	r22,r4
   8819c:	2800c926 	beq	r5,zero,884c4 <_realloc_r+0x360>
   881a0:	008bd300 	call	8bd30 <__malloc_lock>
   881a4:	943ffe04 	addi	r16,r18,-8
   881a8:	88c002c4 	addi	r3,r17,11
   881ac:	00800584 	movi	r2,22
   881b0:	82000117 	ldw	r8,4(r16)
   881b4:	10c01b2e 	bgeu	r2,r3,88224 <_realloc_r+0xc0>
   881b8:	00bffe04 	movi	r2,-8
   881bc:	188e703a 	and	r7,r3,r2
   881c0:	3839883a 	mov	fp,r7
   881c4:	38001a16 	blt	r7,zero,88230 <_realloc_r+0xcc>
   881c8:	e4401936 	bltu	fp,r17,88230 <_realloc_r+0xcc>
   881cc:	013fff04 	movi	r4,-4
   881d0:	4126703a 	and	r19,r8,r4
   881d4:	99c02616 	blt	r19,r7,88270 <_realloc_r+0x10c>
   881d8:	802b883a 	mov	r21,r16
   881dc:	9829883a 	mov	r20,r19
   881e0:	84000204 	addi	r16,r16,8
   881e4:	a80f883a 	mov	r7,r21
   881e8:	a70dc83a 	sub	r6,r20,fp
   881ec:	008003c4 	movi	r2,15
   881f0:	1180c136 	bltu	r2,r6,884f8 <_realloc_r+0x394>
   881f4:	38800117 	ldw	r2,4(r7)
   881f8:	a549883a 	add	r4,r20,r21
   881fc:	1080004c 	andi	r2,r2,1
   88200:	a084b03a 	or	r2,r20,r2
   88204:	38800115 	stw	r2,4(r7)
   88208:	20c00117 	ldw	r3,4(r4)
   8820c:	18c00054 	ori	r3,r3,1
   88210:	20c00115 	stw	r3,4(r4)
   88214:	b009883a 	mov	r4,r22
   88218:	008bd500 	call	8bd50 <__malloc_unlock>
   8821c:	8023883a 	mov	r17,r16
   88220:	00000606 	br	8823c <_realloc_r+0xd8>
   88224:	01c00404 	movi	r7,16
   88228:	3839883a 	mov	fp,r7
   8822c:	e47fe72e 	bgeu	fp,r17,881cc <_realloc_r+0x68>
   88230:	00800304 	movi	r2,12
   88234:	0023883a 	mov	r17,zero
   88238:	b0800015 	stw	r2,0(r22)
   8823c:	8805883a 	mov	r2,r17
   88240:	dfc00b17 	ldw	ra,44(sp)
   88244:	df000a17 	ldw	fp,40(sp)
   88248:	ddc00917 	ldw	r23,36(sp)
   8824c:	dd800817 	ldw	r22,32(sp)
   88250:	dd400717 	ldw	r21,28(sp)
   88254:	dd000617 	ldw	r20,24(sp)
   88258:	dcc00517 	ldw	r19,20(sp)
   8825c:	dc800417 	ldw	r18,16(sp)
   88260:	dc400317 	ldw	r17,12(sp)
   88264:	dc000217 	ldw	r16,8(sp)
   88268:	dec00c04 	addi	sp,sp,48
   8826c:	f800283a 	ret
   88270:	00800274 	movhi	r2,9
   88274:	10bd8104 	addi	r2,r2,-2556
   88278:	12400217 	ldw	r9,8(r2)
   8827c:	84cd883a 	add	r6,r16,r19
   88280:	802b883a 	mov	r21,r16
   88284:	3240b926 	beq	r6,r9,8856c <_realloc_r+0x408>
   88288:	31400117 	ldw	r5,4(r6)
   8828c:	00bfff84 	movi	r2,-2
   88290:	2884703a 	and	r2,r5,r2
   88294:	1185883a 	add	r2,r2,r6
   88298:	10c00117 	ldw	r3,4(r2)
   8829c:	18c0004c 	andi	r3,r3,1
   882a0:	1807003a 	cmpeq	r3,r3,zero
   882a4:	1800a326 	beq	r3,zero,88534 <_realloc_r+0x3d0>
   882a8:	2908703a 	and	r4,r5,r4
   882ac:	9929883a 	add	r20,r19,r4
   882b0:	a1c0a30e 	bge	r20,r7,88540 <_realloc_r+0x3dc>
   882b4:	4080004c 	andi	r2,r8,1
   882b8:	1000551e 	bne	r2,zero,88410 <_realloc_r+0x2ac>
   882bc:	80800017 	ldw	r2,0(r16)
   882c0:	80afc83a 	sub	r23,r16,r2
   882c4:	b8c00117 	ldw	r3,4(r23)
   882c8:	00bfff04 	movi	r2,-4
   882cc:	1884703a 	and	r2,r3,r2
   882d0:	30002e26 	beq	r6,zero,8838c <_realloc_r+0x228>
   882d4:	3240b926 	beq	r6,r9,885bc <_realloc_r+0x458>
   882d8:	98a9883a 	add	r20,r19,r2
   882dc:	2509883a 	add	r4,r4,r20
   882e0:	d9000015 	stw	r4,0(sp)
   882e4:	21c02a16 	blt	r4,r7,88390 <_realloc_r+0x22c>
   882e8:	30800317 	ldw	r2,12(r6)
   882ec:	30c00217 	ldw	r3,8(r6)
   882f0:	01400904 	movi	r5,36
   882f4:	99bfff04 	addi	r6,r19,-4
   882f8:	18800315 	stw	r2,12(r3)
   882fc:	10c00215 	stw	r3,8(r2)
   88300:	b9000317 	ldw	r4,12(r23)
   88304:	b8800217 	ldw	r2,8(r23)
   88308:	b82b883a 	mov	r21,r23
   8830c:	bc000204 	addi	r16,r23,8
   88310:	20800215 	stw	r2,8(r4)
   88314:	11000315 	stw	r4,12(r2)
   88318:	2980e436 	bltu	r5,r6,886ac <_realloc_r+0x548>
   8831c:	008004c4 	movi	r2,19
   88320:	9009883a 	mov	r4,r18
   88324:	8011883a 	mov	r8,r16
   88328:	11800f2e 	bgeu	r2,r6,88368 <_realloc_r+0x204>
   8832c:	90800017 	ldw	r2,0(r18)
   88330:	ba000404 	addi	r8,r23,16
   88334:	91000204 	addi	r4,r18,8
   88338:	b8800215 	stw	r2,8(r23)
   8833c:	90c00117 	ldw	r3,4(r18)
   88340:	008006c4 	movi	r2,27
   88344:	b8c00315 	stw	r3,12(r23)
   88348:	1180072e 	bgeu	r2,r6,88368 <_realloc_r+0x204>
   8834c:	90c00217 	ldw	r3,8(r18)
   88350:	ba000604 	addi	r8,r23,24
   88354:	91000404 	addi	r4,r18,16
   88358:	b8c00415 	stw	r3,16(r23)
   8835c:	90800317 	ldw	r2,12(r18)
   88360:	b8800515 	stw	r2,20(r23)
   88364:	3140e726 	beq	r6,r5,88704 <_realloc_r+0x5a0>
   88368:	20800017 	ldw	r2,0(r4)
   8836c:	dd000017 	ldw	r20,0(sp)
   88370:	b80f883a 	mov	r7,r23
   88374:	40800015 	stw	r2,0(r8)
   88378:	20c00117 	ldw	r3,4(r4)
   8837c:	40c00115 	stw	r3,4(r8)
   88380:	20800217 	ldw	r2,8(r4)
   88384:	40800215 	stw	r2,8(r8)
   88388:	003f9706 	br	881e8 <_realloc_r+0x84>
   8838c:	98a9883a 	add	r20,r19,r2
   88390:	a1c01f16 	blt	r20,r7,88410 <_realloc_r+0x2ac>
   88394:	b8c00317 	ldw	r3,12(r23)
   88398:	b8800217 	ldw	r2,8(r23)
   8839c:	99bfff04 	addi	r6,r19,-4
   883a0:	01400904 	movi	r5,36
   883a4:	b82b883a 	mov	r21,r23
   883a8:	18800215 	stw	r2,8(r3)
   883ac:	10c00315 	stw	r3,12(r2)
   883b0:	bc000204 	addi	r16,r23,8
   883b4:	2980c336 	bltu	r5,r6,886c4 <_realloc_r+0x560>
   883b8:	008004c4 	movi	r2,19
   883bc:	9009883a 	mov	r4,r18
   883c0:	8011883a 	mov	r8,r16
   883c4:	11800f2e 	bgeu	r2,r6,88404 <_realloc_r+0x2a0>
   883c8:	90800017 	ldw	r2,0(r18)
   883cc:	ba000404 	addi	r8,r23,16
   883d0:	91000204 	addi	r4,r18,8
   883d4:	b8800215 	stw	r2,8(r23)
   883d8:	90c00117 	ldw	r3,4(r18)
   883dc:	008006c4 	movi	r2,27
   883e0:	b8c00315 	stw	r3,12(r23)
   883e4:	1180072e 	bgeu	r2,r6,88404 <_realloc_r+0x2a0>
   883e8:	90c00217 	ldw	r3,8(r18)
   883ec:	ba000604 	addi	r8,r23,24
   883f0:	91000404 	addi	r4,r18,16
   883f4:	b8c00415 	stw	r3,16(r23)
   883f8:	90800317 	ldw	r2,12(r18)
   883fc:	b8800515 	stw	r2,20(r23)
   88400:	3140c726 	beq	r6,r5,88720 <_realloc_r+0x5bc>
   88404:	20800017 	ldw	r2,0(r4)
   88408:	b80f883a 	mov	r7,r23
   8840c:	003fd906 	br	88374 <_realloc_r+0x210>
   88410:	880b883a 	mov	r5,r17
   88414:	b009883a 	mov	r4,r22
   88418:	008673c0 	call	8673c <_malloc_r>
   8841c:	1023883a 	mov	r17,r2
   88420:	10002526 	beq	r2,zero,884b8 <_realloc_r+0x354>
   88424:	80800117 	ldw	r2,4(r16)
   88428:	00ffff84 	movi	r3,-2
   8842c:	893ffe04 	addi	r4,r17,-8
   88430:	10c4703a 	and	r2,r2,r3
   88434:	8085883a 	add	r2,r16,r2
   88438:	20809526 	beq	r4,r2,88690 <_realloc_r+0x52c>
   8843c:	99bfff04 	addi	r6,r19,-4
   88440:	01c00904 	movi	r7,36
   88444:	39804536 	bltu	r7,r6,8855c <_realloc_r+0x3f8>
   88448:	008004c4 	movi	r2,19
   8844c:	9009883a 	mov	r4,r18
   88450:	880b883a 	mov	r5,r17
   88454:	11800f2e 	bgeu	r2,r6,88494 <_realloc_r+0x330>
   88458:	90800017 	ldw	r2,0(r18)
   8845c:	89400204 	addi	r5,r17,8
   88460:	91000204 	addi	r4,r18,8
   88464:	88800015 	stw	r2,0(r17)
   88468:	90c00117 	ldw	r3,4(r18)
   8846c:	008006c4 	movi	r2,27
   88470:	88c00115 	stw	r3,4(r17)
   88474:	1180072e 	bgeu	r2,r6,88494 <_realloc_r+0x330>
   88478:	90c00217 	ldw	r3,8(r18)
   8847c:	89400404 	addi	r5,r17,16
   88480:	91000404 	addi	r4,r18,16
   88484:	88c00215 	stw	r3,8(r17)
   88488:	90800317 	ldw	r2,12(r18)
   8848c:	88800315 	stw	r2,12(r17)
   88490:	31c09126 	beq	r6,r7,886d8 <_realloc_r+0x574>
   88494:	20800017 	ldw	r2,0(r4)
   88498:	28800015 	stw	r2,0(r5)
   8849c:	20c00117 	ldw	r3,4(r4)
   884a0:	28c00115 	stw	r3,4(r5)
   884a4:	20800217 	ldw	r2,8(r4)
   884a8:	28800215 	stw	r2,8(r5)
   884ac:	900b883a 	mov	r5,r18
   884b0:	b009883a 	mov	r4,r22
   884b4:	0085bb40 	call	85bb4 <_free_r>
   884b8:	b009883a 	mov	r4,r22
   884bc:	008bd500 	call	8bd50 <__malloc_unlock>
   884c0:	003f5e06 	br	8823c <_realloc_r+0xd8>
   884c4:	300b883a 	mov	r5,r6
   884c8:	dfc00b17 	ldw	ra,44(sp)
   884cc:	df000a17 	ldw	fp,40(sp)
   884d0:	ddc00917 	ldw	r23,36(sp)
   884d4:	dd800817 	ldw	r22,32(sp)
   884d8:	dd400717 	ldw	r21,28(sp)
   884dc:	dd000617 	ldw	r20,24(sp)
   884e0:	dcc00517 	ldw	r19,20(sp)
   884e4:	dc800417 	ldw	r18,16(sp)
   884e8:	dc400317 	ldw	r17,12(sp)
   884ec:	dc000217 	ldw	r16,8(sp)
   884f0:	dec00c04 	addi	sp,sp,48
   884f4:	008673c1 	jmpi	8673c <_malloc_r>
   884f8:	38800117 	ldw	r2,4(r7)
   884fc:	e54b883a 	add	r5,fp,r21
   88500:	31000054 	ori	r4,r6,1
   88504:	1080004c 	andi	r2,r2,1
   88508:	1704b03a 	or	r2,r2,fp
   8850c:	38800115 	stw	r2,4(r7)
   88510:	29000115 	stw	r4,4(r5)
   88514:	2987883a 	add	r3,r5,r6
   88518:	18800117 	ldw	r2,4(r3)
   8851c:	29400204 	addi	r5,r5,8
   88520:	b009883a 	mov	r4,r22
   88524:	10800054 	ori	r2,r2,1
   88528:	18800115 	stw	r2,4(r3)
   8852c:	0085bb40 	call	85bb4 <_free_r>
   88530:	003f3806 	br	88214 <_realloc_r+0xb0>
   88534:	000d883a 	mov	r6,zero
   88538:	0009883a 	mov	r4,zero
   8853c:	003f5d06 	br	882b4 <_realloc_r+0x150>
   88540:	30c00217 	ldw	r3,8(r6)
   88544:	30800317 	ldw	r2,12(r6)
   88548:	800f883a 	mov	r7,r16
   8854c:	84000204 	addi	r16,r16,8
   88550:	10c00215 	stw	r3,8(r2)
   88554:	18800315 	stw	r2,12(r3)
   88558:	003f2306 	br	881e8 <_realloc_r+0x84>
   8855c:	8809883a 	mov	r4,r17
   88560:	900b883a 	mov	r5,r18
   88564:	0086f600 	call	86f60 <memmove>
   88568:	003fd006 	br	884ac <_realloc_r+0x348>
   8856c:	30800117 	ldw	r2,4(r6)
   88570:	e0c00404 	addi	r3,fp,16
   88574:	1108703a 	and	r4,r2,r4
   88578:	9905883a 	add	r2,r19,r4
   8857c:	10ff4d16 	blt	r2,r3,882b4 <_realloc_r+0x150>
   88580:	1705c83a 	sub	r2,r2,fp
   88584:	870b883a 	add	r5,r16,fp
   88588:	10800054 	ori	r2,r2,1
   8858c:	28800115 	stw	r2,4(r5)
   88590:	80c00117 	ldw	r3,4(r16)
   88594:	00800274 	movhi	r2,9
   88598:	10bd8104 	addi	r2,r2,-2556
   8859c:	b009883a 	mov	r4,r22
   885a0:	18c0004c 	andi	r3,r3,1
   885a4:	e0c6b03a 	or	r3,fp,r3
   885a8:	11400215 	stw	r5,8(r2)
   885ac:	80c00115 	stw	r3,4(r16)
   885b0:	008bd500 	call	8bd50 <__malloc_unlock>
   885b4:	84400204 	addi	r17,r16,8
   885b8:	003f2006 	br	8823c <_realloc_r+0xd8>
   885bc:	98a9883a 	add	r20,r19,r2
   885c0:	2509883a 	add	r4,r4,r20
   885c4:	e0800404 	addi	r2,fp,16
   885c8:	d9000115 	stw	r4,4(sp)
   885cc:	20bf7016 	blt	r4,r2,88390 <_realloc_r+0x22c>
   885d0:	b8c00317 	ldw	r3,12(r23)
   885d4:	b8800217 	ldw	r2,8(r23)
   885d8:	99bfff04 	addi	r6,r19,-4
   885dc:	01400904 	movi	r5,36
   885e0:	18800215 	stw	r2,8(r3)
   885e4:	10c00315 	stw	r3,12(r2)
   885e8:	bc400204 	addi	r17,r23,8
   885ec:	29804136 	bltu	r5,r6,886f4 <_realloc_r+0x590>
   885f0:	008004c4 	movi	r2,19
   885f4:	9009883a 	mov	r4,r18
   885f8:	880f883a 	mov	r7,r17
   885fc:	11800f2e 	bgeu	r2,r6,8863c <_realloc_r+0x4d8>
   88600:	90800017 	ldw	r2,0(r18)
   88604:	b9c00404 	addi	r7,r23,16
   88608:	91000204 	addi	r4,r18,8
   8860c:	b8800215 	stw	r2,8(r23)
   88610:	90c00117 	ldw	r3,4(r18)
   88614:	008006c4 	movi	r2,27
   88618:	b8c00315 	stw	r3,12(r23)
   8861c:	1180072e 	bgeu	r2,r6,8863c <_realloc_r+0x4d8>
   88620:	90c00217 	ldw	r3,8(r18)
   88624:	b9c00604 	addi	r7,r23,24
   88628:	91000404 	addi	r4,r18,16
   8862c:	b8c00415 	stw	r3,16(r23)
   88630:	90800317 	ldw	r2,12(r18)
   88634:	b8800515 	stw	r2,20(r23)
   88638:	31404026 	beq	r6,r5,8873c <_realloc_r+0x5d8>
   8863c:	20800017 	ldw	r2,0(r4)
   88640:	38800015 	stw	r2,0(r7)
   88644:	20c00117 	ldw	r3,4(r4)
   88648:	38c00115 	stw	r3,4(r7)
   8864c:	20800217 	ldw	r2,8(r4)
   88650:	38800215 	stw	r2,8(r7)
   88654:	d8c00117 	ldw	r3,4(sp)
   88658:	bf0b883a 	add	r5,r23,fp
   8865c:	b009883a 	mov	r4,r22
   88660:	1f05c83a 	sub	r2,r3,fp
   88664:	10800054 	ori	r2,r2,1
   88668:	28800115 	stw	r2,4(r5)
   8866c:	b8c00117 	ldw	r3,4(r23)
   88670:	00800274 	movhi	r2,9
   88674:	10bd8104 	addi	r2,r2,-2556
   88678:	11400215 	stw	r5,8(r2)
   8867c:	18c0004c 	andi	r3,r3,1
   88680:	e0c6b03a 	or	r3,fp,r3
   88684:	b8c00115 	stw	r3,4(r23)
   88688:	008bd500 	call	8bd50 <__malloc_unlock>
   8868c:	003eeb06 	br	8823c <_realloc_r+0xd8>
   88690:	20800117 	ldw	r2,4(r4)
   88694:	00ffff04 	movi	r3,-4
   88698:	800f883a 	mov	r7,r16
   8869c:	10c4703a 	and	r2,r2,r3
   886a0:	98a9883a 	add	r20,r19,r2
   886a4:	84000204 	addi	r16,r16,8
   886a8:	003ecf06 	br	881e8 <_realloc_r+0x84>
   886ac:	900b883a 	mov	r5,r18
   886b0:	8009883a 	mov	r4,r16
   886b4:	0086f600 	call	86f60 <memmove>
   886b8:	dd000017 	ldw	r20,0(sp)
   886bc:	b80f883a 	mov	r7,r23
   886c0:	003ec906 	br	881e8 <_realloc_r+0x84>
   886c4:	900b883a 	mov	r5,r18
   886c8:	8009883a 	mov	r4,r16
   886cc:	0086f600 	call	86f60 <memmove>
   886d0:	b80f883a 	mov	r7,r23
   886d4:	003ec406 	br	881e8 <_realloc_r+0x84>
   886d8:	90c00417 	ldw	r3,16(r18)
   886dc:	89400604 	addi	r5,r17,24
   886e0:	91000604 	addi	r4,r18,24
   886e4:	88c00415 	stw	r3,16(r17)
   886e8:	90800517 	ldw	r2,20(r18)
   886ec:	88800515 	stw	r2,20(r17)
   886f0:	003f6806 	br	88494 <_realloc_r+0x330>
   886f4:	900b883a 	mov	r5,r18
   886f8:	8809883a 	mov	r4,r17
   886fc:	0086f600 	call	86f60 <memmove>
   88700:	003fd406 	br	88654 <_realloc_r+0x4f0>
   88704:	90c00417 	ldw	r3,16(r18)
   88708:	91000604 	addi	r4,r18,24
   8870c:	ba000804 	addi	r8,r23,32
   88710:	b8c00615 	stw	r3,24(r23)
   88714:	90800517 	ldw	r2,20(r18)
   88718:	b8800715 	stw	r2,28(r23)
   8871c:	003f1206 	br	88368 <_realloc_r+0x204>
   88720:	90c00417 	ldw	r3,16(r18)
   88724:	91000604 	addi	r4,r18,24
   88728:	ba000804 	addi	r8,r23,32
   8872c:	b8c00615 	stw	r3,24(r23)
   88730:	90800517 	ldw	r2,20(r18)
   88734:	b8800715 	stw	r2,28(r23)
   88738:	003f3206 	br	88404 <_realloc_r+0x2a0>
   8873c:	90c00417 	ldw	r3,16(r18)
   88740:	91000604 	addi	r4,r18,24
   88744:	b9c00804 	addi	r7,r23,32
   88748:	b8c00615 	stw	r3,24(r23)
   8874c:	90800517 	ldw	r2,20(r18)
   88750:	b8800715 	stw	r2,28(r23)
   88754:	003fb906 	br	8863c <_realloc_r+0x4d8>

00088758 <__isinfd>:
   88758:	200d883a 	mov	r6,r4
   8875c:	0109c83a 	sub	r4,zero,r4
   88760:	2188b03a 	or	r4,r4,r6
   88764:	2008d7fa 	srli	r4,r4,31
   88768:	00a00034 	movhi	r2,32768
   8876c:	10bfffc4 	addi	r2,r2,-1
   88770:	1144703a 	and	r2,r2,r5
   88774:	2088b03a 	or	r4,r4,r2
   88778:	009ffc34 	movhi	r2,32752
   8877c:	1105c83a 	sub	r2,r2,r4
   88780:	0087c83a 	sub	r3,zero,r2
   88784:	10c4b03a 	or	r2,r2,r3
   88788:	1004d7fa 	srli	r2,r2,31
   8878c:	00c00044 	movi	r3,1
   88790:	1885c83a 	sub	r2,r3,r2
   88794:	f800283a 	ret

00088798 <__isnand>:
   88798:	200d883a 	mov	r6,r4
   8879c:	0109c83a 	sub	r4,zero,r4
   887a0:	2188b03a 	or	r4,r4,r6
   887a4:	2008d7fa 	srli	r4,r4,31
   887a8:	00a00034 	movhi	r2,32768
   887ac:	10bfffc4 	addi	r2,r2,-1
   887b0:	1144703a 	and	r2,r2,r5
   887b4:	2088b03a 	or	r4,r4,r2
   887b8:	009ffc34 	movhi	r2,32752
   887bc:	1105c83a 	sub	r2,r2,r4
   887c0:	1004d7fa 	srli	r2,r2,31
   887c4:	f800283a 	ret

000887c8 <_sbrk_r>:
   887c8:	defffd04 	addi	sp,sp,-12
   887cc:	dc000015 	stw	r16,0(sp)
   887d0:	04000274 	movhi	r16,9
   887d4:	840a2d04 	addi	r16,r16,10420
   887d8:	dc400115 	stw	r17,4(sp)
   887dc:	80000015 	stw	zero,0(r16)
   887e0:	2023883a 	mov	r17,r4
   887e4:	2809883a 	mov	r4,r5
   887e8:	dfc00215 	stw	ra,8(sp)
   887ec:	008bfac0 	call	8bfac <sbrk>
   887f0:	1007883a 	mov	r3,r2
   887f4:	00bfffc4 	movi	r2,-1
   887f8:	18800626 	beq	r3,r2,88814 <_sbrk_r+0x4c>
   887fc:	1805883a 	mov	r2,r3
   88800:	dfc00217 	ldw	ra,8(sp)
   88804:	dc400117 	ldw	r17,4(sp)
   88808:	dc000017 	ldw	r16,0(sp)
   8880c:	dec00304 	addi	sp,sp,12
   88810:	f800283a 	ret
   88814:	80800017 	ldw	r2,0(r16)
   88818:	103ff826 	beq	r2,zero,887fc <_sbrk_r+0x34>
   8881c:	88800015 	stw	r2,0(r17)
   88820:	1805883a 	mov	r2,r3
   88824:	dfc00217 	ldw	ra,8(sp)
   88828:	dc400117 	ldw	r17,4(sp)
   8882c:	dc000017 	ldw	r16,0(sp)
   88830:	dec00304 	addi	sp,sp,12
   88834:	f800283a 	ret

00088838 <__sclose>:
   88838:	2940038f 	ldh	r5,14(r5)
   8883c:	0088b801 	jmpi	88b80 <_close_r>

00088840 <__sseek>:
   88840:	defffe04 	addi	sp,sp,-8
   88844:	dc000015 	stw	r16,0(sp)
   88848:	2821883a 	mov	r16,r5
   8884c:	2940038f 	ldh	r5,14(r5)
   88850:	dfc00115 	stw	ra,4(sp)
   88854:	0088df80 	call	88df8 <_lseek_r>
   88858:	1007883a 	mov	r3,r2
   8885c:	00bfffc4 	movi	r2,-1
   88860:	18800926 	beq	r3,r2,88888 <__sseek+0x48>
   88864:	8080030b 	ldhu	r2,12(r16)
   88868:	80c01415 	stw	r3,80(r16)
   8886c:	10840014 	ori	r2,r2,4096
   88870:	8080030d 	sth	r2,12(r16)
   88874:	1805883a 	mov	r2,r3
   88878:	dfc00117 	ldw	ra,4(sp)
   8887c:	dc000017 	ldw	r16,0(sp)
   88880:	dec00204 	addi	sp,sp,8
   88884:	f800283a 	ret
   88888:	8080030b 	ldhu	r2,12(r16)
   8888c:	10bbffcc 	andi	r2,r2,61439
   88890:	8080030d 	sth	r2,12(r16)
   88894:	1805883a 	mov	r2,r3
   88898:	dfc00117 	ldw	ra,4(sp)
   8889c:	dc000017 	ldw	r16,0(sp)
   888a0:	dec00204 	addi	sp,sp,8
   888a4:	f800283a 	ret

000888a8 <__swrite>:
   888a8:	2880030b 	ldhu	r2,12(r5)
   888ac:	defffb04 	addi	sp,sp,-20
   888b0:	dcc00315 	stw	r19,12(sp)
   888b4:	1080400c 	andi	r2,r2,256
   888b8:	dc800215 	stw	r18,8(sp)
   888bc:	dc400115 	stw	r17,4(sp)
   888c0:	dc000015 	stw	r16,0(sp)
   888c4:	3027883a 	mov	r19,r6
   888c8:	3825883a 	mov	r18,r7
   888cc:	dfc00415 	stw	ra,16(sp)
   888d0:	2821883a 	mov	r16,r5
   888d4:	000d883a 	mov	r6,zero
   888d8:	01c00084 	movi	r7,2
   888dc:	2023883a 	mov	r17,r4
   888e0:	10000226 	beq	r2,zero,888ec <__swrite+0x44>
   888e4:	2940038f 	ldh	r5,14(r5)
   888e8:	0088df80 	call	88df8 <_lseek_r>
   888ec:	8080030b 	ldhu	r2,12(r16)
   888f0:	8140038f 	ldh	r5,14(r16)
   888f4:	8809883a 	mov	r4,r17
   888f8:	10bbffcc 	andi	r2,r2,61439
   888fc:	980d883a 	mov	r6,r19
   88900:	900f883a 	mov	r7,r18
   88904:	8080030d 	sth	r2,12(r16)
   88908:	dfc00417 	ldw	ra,16(sp)
   8890c:	dcc00317 	ldw	r19,12(sp)
   88910:	dc800217 	ldw	r18,8(sp)
   88914:	dc400117 	ldw	r17,4(sp)
   88918:	dc000017 	ldw	r16,0(sp)
   8891c:	dec00504 	addi	sp,sp,20
   88920:	0088a401 	jmpi	88a40 <_write_r>

00088924 <__sread>:
   88924:	defffe04 	addi	sp,sp,-8
   88928:	dc000015 	stw	r16,0(sp)
   8892c:	2821883a 	mov	r16,r5
   88930:	2940038f 	ldh	r5,14(r5)
   88934:	dfc00115 	stw	ra,4(sp)
   88938:	0088e700 	call	88e70 <_read_r>
   8893c:	1007883a 	mov	r3,r2
   88940:	10000816 	blt	r2,zero,88964 <__sread+0x40>
   88944:	80801417 	ldw	r2,80(r16)
   88948:	10c5883a 	add	r2,r2,r3
   8894c:	80801415 	stw	r2,80(r16)
   88950:	1805883a 	mov	r2,r3
   88954:	dfc00117 	ldw	ra,4(sp)
   88958:	dc000017 	ldw	r16,0(sp)
   8895c:	dec00204 	addi	sp,sp,8
   88960:	f800283a 	ret
   88964:	8080030b 	ldhu	r2,12(r16)
   88968:	10bbffcc 	andi	r2,r2,61439
   8896c:	8080030d 	sth	r2,12(r16)
   88970:	1805883a 	mov	r2,r3
   88974:	dfc00117 	ldw	ra,4(sp)
   88978:	dc000017 	ldw	r16,0(sp)
   8897c:	dec00204 	addi	sp,sp,8
   88980:	f800283a 	ret

00088984 <strcmp>:
   88984:	2144b03a 	or	r2,r4,r5
   88988:	108000cc 	andi	r2,r2,3
   8898c:	10001d1e 	bne	r2,zero,88a04 <strcmp+0x80>
   88990:	200f883a 	mov	r7,r4
   88994:	28800017 	ldw	r2,0(r5)
   88998:	21000017 	ldw	r4,0(r4)
   8899c:	280d883a 	mov	r6,r5
   889a0:	2080161e 	bne	r4,r2,889fc <strcmp+0x78>
   889a4:	023fbff4 	movhi	r8,65279
   889a8:	423fbfc4 	addi	r8,r8,-257
   889ac:	2207883a 	add	r3,r4,r8
   889b0:	01602074 	movhi	r5,32897
   889b4:	29602004 	addi	r5,r5,-32640
   889b8:	1946703a 	and	r3,r3,r5
   889bc:	0104303a 	nor	r2,zero,r4
   889c0:	10c4703a 	and	r2,r2,r3
   889c4:	10001c1e 	bne	r2,zero,88a38 <strcmp+0xb4>
   889c8:	4013883a 	mov	r9,r8
   889cc:	2811883a 	mov	r8,r5
   889d0:	00000106 	br	889d8 <strcmp+0x54>
   889d4:	1800181e 	bne	r3,zero,88a38 <strcmp+0xb4>
   889d8:	39c00104 	addi	r7,r7,4
   889dc:	39000017 	ldw	r4,0(r7)
   889e0:	31800104 	addi	r6,r6,4
   889e4:	31400017 	ldw	r5,0(r6)
   889e8:	2245883a 	add	r2,r4,r9
   889ec:	1204703a 	and	r2,r2,r8
   889f0:	0106303a 	nor	r3,zero,r4
   889f4:	1886703a 	and	r3,r3,r2
   889f8:	217ff626 	beq	r4,r5,889d4 <strcmp+0x50>
   889fc:	3809883a 	mov	r4,r7
   88a00:	300b883a 	mov	r5,r6
   88a04:	20c00007 	ldb	r3,0(r4)
   88a08:	1800051e 	bne	r3,zero,88a20 <strcmp+0x9c>
   88a0c:	00000606 	br	88a28 <strcmp+0xa4>
   88a10:	21000044 	addi	r4,r4,1
   88a14:	20c00007 	ldb	r3,0(r4)
   88a18:	29400044 	addi	r5,r5,1
   88a1c:	18000226 	beq	r3,zero,88a28 <strcmp+0xa4>
   88a20:	28800007 	ldb	r2,0(r5)
   88a24:	18bffa26 	beq	r3,r2,88a10 <strcmp+0x8c>
   88a28:	20c00003 	ldbu	r3,0(r4)
   88a2c:	28800003 	ldbu	r2,0(r5)
   88a30:	1885c83a 	sub	r2,r3,r2
   88a34:	f800283a 	ret
   88a38:	0005883a 	mov	r2,zero
   88a3c:	f800283a 	ret

00088a40 <_write_r>:
   88a40:	defffd04 	addi	sp,sp,-12
   88a44:	dc000015 	stw	r16,0(sp)
   88a48:	04000274 	movhi	r16,9
   88a4c:	840a2d04 	addi	r16,r16,10420
   88a50:	dc400115 	stw	r17,4(sp)
   88a54:	80000015 	stw	zero,0(r16)
   88a58:	2023883a 	mov	r17,r4
   88a5c:	2809883a 	mov	r4,r5
   88a60:	300b883a 	mov	r5,r6
   88a64:	380d883a 	mov	r6,r7
   88a68:	dfc00215 	stw	ra,8(sp)
   88a6c:	008c0980 	call	8c098 <write>
   88a70:	1007883a 	mov	r3,r2
   88a74:	00bfffc4 	movi	r2,-1
   88a78:	18800626 	beq	r3,r2,88a94 <_write_r+0x54>
   88a7c:	1805883a 	mov	r2,r3
   88a80:	dfc00217 	ldw	ra,8(sp)
   88a84:	dc400117 	ldw	r17,4(sp)
   88a88:	dc000017 	ldw	r16,0(sp)
   88a8c:	dec00304 	addi	sp,sp,12
   88a90:	f800283a 	ret
   88a94:	80800017 	ldw	r2,0(r16)
   88a98:	103ff826 	beq	r2,zero,88a7c <_write_r+0x3c>
   88a9c:	88800015 	stw	r2,0(r17)
   88aa0:	1805883a 	mov	r2,r3
   88aa4:	dfc00217 	ldw	ra,8(sp)
   88aa8:	dc400117 	ldw	r17,4(sp)
   88aac:	dc000017 	ldw	r16,0(sp)
   88ab0:	dec00304 	addi	sp,sp,12
   88ab4:	f800283a 	ret

00088ab8 <_calloc_r>:
   88ab8:	defffe04 	addi	sp,sp,-8
   88abc:	dc400015 	stw	r17,0(sp)
   88ac0:	2023883a 	mov	r17,r4
   88ac4:	2809883a 	mov	r4,r5
   88ac8:	300b883a 	mov	r5,r6
   88acc:	dfc00115 	stw	ra,4(sp)
   88ad0:	008ace00 	call	8ace0 <__mulsi3>
   88ad4:	100b883a 	mov	r5,r2
   88ad8:	8809883a 	mov	r4,r17
   88adc:	008673c0 	call	8673c <_malloc_r>
   88ae0:	1023883a 	mov	r17,r2
   88ae4:	01c00904 	movi	r7,36
   88ae8:	10000d26 	beq	r2,zero,88b20 <_calloc_r+0x68>
   88aec:	10ffff17 	ldw	r3,-4(r2)
   88af0:	1009883a 	mov	r4,r2
   88af4:	00bfff04 	movi	r2,-4
   88af8:	1886703a 	and	r3,r3,r2
   88afc:	1887883a 	add	r3,r3,r2
   88b00:	180d883a 	mov	r6,r3
   88b04:	000b883a 	mov	r5,zero
   88b08:	38c01736 	bltu	r7,r3,88b68 <_calloc_r+0xb0>
   88b0c:	008004c4 	movi	r2,19
   88b10:	10c00836 	bltu	r2,r3,88b34 <_calloc_r+0x7c>
   88b14:	20000215 	stw	zero,8(r4)
   88b18:	20000015 	stw	zero,0(r4)
   88b1c:	20000115 	stw	zero,4(r4)
   88b20:	8805883a 	mov	r2,r17
   88b24:	dfc00117 	ldw	ra,4(sp)
   88b28:	dc400017 	ldw	r17,0(sp)
   88b2c:	dec00204 	addi	sp,sp,8
   88b30:	f800283a 	ret
   88b34:	008006c4 	movi	r2,27
   88b38:	88000015 	stw	zero,0(r17)
   88b3c:	88000115 	stw	zero,4(r17)
   88b40:	89000204 	addi	r4,r17,8
   88b44:	10fff32e 	bgeu	r2,r3,88b14 <_calloc_r+0x5c>
   88b48:	88000215 	stw	zero,8(r17)
   88b4c:	88000315 	stw	zero,12(r17)
   88b50:	89000404 	addi	r4,r17,16
   88b54:	19ffef1e 	bne	r3,r7,88b14 <_calloc_r+0x5c>
   88b58:	89000604 	addi	r4,r17,24
   88b5c:	88000415 	stw	zero,16(r17)
   88b60:	88000515 	stw	zero,20(r17)
   88b64:	003feb06 	br	88b14 <_calloc_r+0x5c>
   88b68:	00870400 	call	87040 <memset>
   88b6c:	8805883a 	mov	r2,r17
   88b70:	dfc00117 	ldw	ra,4(sp)
   88b74:	dc400017 	ldw	r17,0(sp)
   88b78:	dec00204 	addi	sp,sp,8
   88b7c:	f800283a 	ret

00088b80 <_close_r>:
   88b80:	defffd04 	addi	sp,sp,-12
   88b84:	dc000015 	stw	r16,0(sp)
   88b88:	04000274 	movhi	r16,9
   88b8c:	840a2d04 	addi	r16,r16,10420
   88b90:	dc400115 	stw	r17,4(sp)
   88b94:	80000015 	stw	zero,0(r16)
   88b98:	2023883a 	mov	r17,r4
   88b9c:	2809883a 	mov	r4,r5
   88ba0:	dfc00215 	stw	ra,8(sp)
   88ba4:	008b3d00 	call	8b3d0 <close>
   88ba8:	1007883a 	mov	r3,r2
   88bac:	00bfffc4 	movi	r2,-1
   88bb0:	18800626 	beq	r3,r2,88bcc <_close_r+0x4c>
   88bb4:	1805883a 	mov	r2,r3
   88bb8:	dfc00217 	ldw	ra,8(sp)
   88bbc:	dc400117 	ldw	r17,4(sp)
   88bc0:	dc000017 	ldw	r16,0(sp)
   88bc4:	dec00304 	addi	sp,sp,12
   88bc8:	f800283a 	ret
   88bcc:	80800017 	ldw	r2,0(r16)
   88bd0:	103ff826 	beq	r2,zero,88bb4 <_close_r+0x34>
   88bd4:	88800015 	stw	r2,0(r17)
   88bd8:	1805883a 	mov	r2,r3
   88bdc:	dfc00217 	ldw	ra,8(sp)
   88be0:	dc400117 	ldw	r17,4(sp)
   88be4:	dc000017 	ldw	r16,0(sp)
   88be8:	dec00304 	addi	sp,sp,12
   88bec:	f800283a 	ret

00088bf0 <_fclose_r>:
   88bf0:	defffc04 	addi	sp,sp,-16
   88bf4:	dc400115 	stw	r17,4(sp)
   88bf8:	dc000015 	stw	r16,0(sp)
   88bfc:	dfc00315 	stw	ra,12(sp)
   88c00:	dc800215 	stw	r18,8(sp)
   88c04:	2821883a 	mov	r16,r5
   88c08:	2023883a 	mov	r17,r4
   88c0c:	28002926 	beq	r5,zero,88cb4 <_fclose_r+0xc4>
   88c10:	00857ec0 	call	857ec <__sfp_lock_acquire>
   88c14:	88000226 	beq	r17,zero,88c20 <_fclose_r+0x30>
   88c18:	88800e17 	ldw	r2,56(r17)
   88c1c:	10002d26 	beq	r2,zero,88cd4 <_fclose_r+0xe4>
   88c20:	8080030f 	ldh	r2,12(r16)
   88c24:	10002226 	beq	r2,zero,88cb0 <_fclose_r+0xc0>
   88c28:	8809883a 	mov	r4,r17
   88c2c:	800b883a 	mov	r5,r16
   88c30:	00855640 	call	85564 <_fflush_r>
   88c34:	1025883a 	mov	r18,r2
   88c38:	80800b17 	ldw	r2,44(r16)
   88c3c:	10000426 	beq	r2,zero,88c50 <_fclose_r+0x60>
   88c40:	81400717 	ldw	r5,28(r16)
   88c44:	8809883a 	mov	r4,r17
   88c48:	103ee83a 	callr	r2
   88c4c:	10002a16 	blt	r2,zero,88cf8 <_fclose_r+0x108>
   88c50:	8080030b 	ldhu	r2,12(r16)
   88c54:	1080200c 	andi	r2,r2,128
   88c58:	1000231e 	bne	r2,zero,88ce8 <_fclose_r+0xf8>
   88c5c:	81400c17 	ldw	r5,48(r16)
   88c60:	28000526 	beq	r5,zero,88c78 <_fclose_r+0x88>
   88c64:	80801004 	addi	r2,r16,64
   88c68:	28800226 	beq	r5,r2,88c74 <_fclose_r+0x84>
   88c6c:	8809883a 	mov	r4,r17
   88c70:	0085bb40 	call	85bb4 <_free_r>
   88c74:	80000c15 	stw	zero,48(r16)
   88c78:	81401117 	ldw	r5,68(r16)
   88c7c:	28000326 	beq	r5,zero,88c8c <_fclose_r+0x9c>
   88c80:	8809883a 	mov	r4,r17
   88c84:	0085bb40 	call	85bb4 <_free_r>
   88c88:	80001115 	stw	zero,68(r16)
   88c8c:	8000030d 	sth	zero,12(r16)
   88c90:	00857f00 	call	857f0 <__sfp_lock_release>
   88c94:	9005883a 	mov	r2,r18
   88c98:	dfc00317 	ldw	ra,12(sp)
   88c9c:	dc800217 	ldw	r18,8(sp)
   88ca0:	dc400117 	ldw	r17,4(sp)
   88ca4:	dc000017 	ldw	r16,0(sp)
   88ca8:	dec00404 	addi	sp,sp,16
   88cac:	f800283a 	ret
   88cb0:	00857f00 	call	857f0 <__sfp_lock_release>
   88cb4:	0025883a 	mov	r18,zero
   88cb8:	9005883a 	mov	r2,r18
   88cbc:	dfc00317 	ldw	ra,12(sp)
   88cc0:	dc800217 	ldw	r18,8(sp)
   88cc4:	dc400117 	ldw	r17,4(sp)
   88cc8:	dc000017 	ldw	r16,0(sp)
   88ccc:	dec00404 	addi	sp,sp,16
   88cd0:	f800283a 	ret
   88cd4:	8809883a 	mov	r4,r17
   88cd8:	00857fc0 	call	857fc <__sinit>
   88cdc:	8080030f 	ldh	r2,12(r16)
   88ce0:	103fd11e 	bne	r2,zero,88c28 <_fclose_r+0x38>
   88ce4:	003ff206 	br	88cb0 <_fclose_r+0xc0>
   88ce8:	81400417 	ldw	r5,16(r16)
   88cec:	8809883a 	mov	r4,r17
   88cf0:	0085bb40 	call	85bb4 <_free_r>
   88cf4:	003fd906 	br	88c5c <_fclose_r+0x6c>
   88cf8:	04bfffc4 	movi	r18,-1
   88cfc:	003fd406 	br	88c50 <_fclose_r+0x60>

00088d00 <fclose>:
   88d00:	00800274 	movhi	r2,9
   88d04:	10833a04 	addi	r2,r2,3304
   88d08:	200b883a 	mov	r5,r4
   88d0c:	11000017 	ldw	r4,0(r2)
   88d10:	0088bf01 	jmpi	88bf0 <_fclose_r>

00088d14 <_fstat_r>:
   88d14:	defffd04 	addi	sp,sp,-12
   88d18:	dc000015 	stw	r16,0(sp)
   88d1c:	04000274 	movhi	r16,9
   88d20:	840a2d04 	addi	r16,r16,10420
   88d24:	dc400115 	stw	r17,4(sp)
   88d28:	80000015 	stw	zero,0(r16)
   88d2c:	2023883a 	mov	r17,r4
   88d30:	2809883a 	mov	r4,r5
   88d34:	300b883a 	mov	r5,r6
   88d38:	dfc00215 	stw	ra,8(sp)
   88d3c:	008b55c0 	call	8b55c <fstat>
   88d40:	1007883a 	mov	r3,r2
   88d44:	00bfffc4 	movi	r2,-1
   88d48:	18800626 	beq	r3,r2,88d64 <_fstat_r+0x50>
   88d4c:	1805883a 	mov	r2,r3
   88d50:	dfc00217 	ldw	ra,8(sp)
   88d54:	dc400117 	ldw	r17,4(sp)
   88d58:	dc000017 	ldw	r16,0(sp)
   88d5c:	dec00304 	addi	sp,sp,12
   88d60:	f800283a 	ret
   88d64:	80800017 	ldw	r2,0(r16)
   88d68:	103ff826 	beq	r2,zero,88d4c <_fstat_r+0x38>
   88d6c:	88800015 	stw	r2,0(r17)
   88d70:	1805883a 	mov	r2,r3
   88d74:	dfc00217 	ldw	ra,8(sp)
   88d78:	dc400117 	ldw	r17,4(sp)
   88d7c:	dc000017 	ldw	r16,0(sp)
   88d80:	dec00304 	addi	sp,sp,12
   88d84:	f800283a 	ret

00088d88 <_isatty_r>:
   88d88:	defffd04 	addi	sp,sp,-12
   88d8c:	dc000015 	stw	r16,0(sp)
   88d90:	04000274 	movhi	r16,9
   88d94:	840a2d04 	addi	r16,r16,10420
   88d98:	dc400115 	stw	r17,4(sp)
   88d9c:	80000015 	stw	zero,0(r16)
   88da0:	2023883a 	mov	r17,r4
   88da4:	2809883a 	mov	r4,r5
   88da8:	dfc00215 	stw	ra,8(sp)
   88dac:	008b9600 	call	8b960 <isatty>
   88db0:	1007883a 	mov	r3,r2
   88db4:	00bfffc4 	movi	r2,-1
   88db8:	18800626 	beq	r3,r2,88dd4 <_isatty_r+0x4c>
   88dbc:	1805883a 	mov	r2,r3
   88dc0:	dfc00217 	ldw	ra,8(sp)
   88dc4:	dc400117 	ldw	r17,4(sp)
   88dc8:	dc000017 	ldw	r16,0(sp)
   88dcc:	dec00304 	addi	sp,sp,12
   88dd0:	f800283a 	ret
   88dd4:	80800017 	ldw	r2,0(r16)
   88dd8:	103ff826 	beq	r2,zero,88dbc <_isatty_r+0x34>
   88ddc:	88800015 	stw	r2,0(r17)
   88de0:	1805883a 	mov	r2,r3
   88de4:	dfc00217 	ldw	ra,8(sp)
   88de8:	dc400117 	ldw	r17,4(sp)
   88dec:	dc000017 	ldw	r16,0(sp)
   88df0:	dec00304 	addi	sp,sp,12
   88df4:	f800283a 	ret

00088df8 <_lseek_r>:
   88df8:	defffd04 	addi	sp,sp,-12
   88dfc:	dc000015 	stw	r16,0(sp)
   88e00:	04000274 	movhi	r16,9
   88e04:	840a2d04 	addi	r16,r16,10420
   88e08:	dc400115 	stw	r17,4(sp)
   88e0c:	80000015 	stw	zero,0(r16)
   88e10:	2023883a 	mov	r17,r4
   88e14:	2809883a 	mov	r4,r5
   88e18:	300b883a 	mov	r5,r6
   88e1c:	380d883a 	mov	r6,r7
   88e20:	dfc00215 	stw	ra,8(sp)
   88e24:	008bb700 	call	8bb70 <lseek>
   88e28:	1007883a 	mov	r3,r2
   88e2c:	00bfffc4 	movi	r2,-1
   88e30:	18800626 	beq	r3,r2,88e4c <_lseek_r+0x54>
   88e34:	1805883a 	mov	r2,r3
   88e38:	dfc00217 	ldw	ra,8(sp)
   88e3c:	dc400117 	ldw	r17,4(sp)
   88e40:	dc000017 	ldw	r16,0(sp)
   88e44:	dec00304 	addi	sp,sp,12
   88e48:	f800283a 	ret
   88e4c:	80800017 	ldw	r2,0(r16)
   88e50:	103ff826 	beq	r2,zero,88e34 <_lseek_r+0x3c>
   88e54:	88800015 	stw	r2,0(r17)
   88e58:	1805883a 	mov	r2,r3
   88e5c:	dfc00217 	ldw	ra,8(sp)
   88e60:	dc400117 	ldw	r17,4(sp)
   88e64:	dc000017 	ldw	r16,0(sp)
   88e68:	dec00304 	addi	sp,sp,12
   88e6c:	f800283a 	ret

00088e70 <_read_r>:
   88e70:	defffd04 	addi	sp,sp,-12
   88e74:	dc000015 	stw	r16,0(sp)
   88e78:	04000274 	movhi	r16,9
   88e7c:	840a2d04 	addi	r16,r16,10420
   88e80:	dc400115 	stw	r17,4(sp)
   88e84:	80000015 	stw	zero,0(r16)
   88e88:	2023883a 	mov	r17,r4
   88e8c:	2809883a 	mov	r4,r5
   88e90:	300b883a 	mov	r5,r6
   88e94:	380d883a 	mov	r6,r7
   88e98:	dfc00215 	stw	ra,8(sp)
   88e9c:	008bdb00 	call	8bdb0 <read>
   88ea0:	1007883a 	mov	r3,r2
   88ea4:	00bfffc4 	movi	r2,-1
   88ea8:	18800626 	beq	r3,r2,88ec4 <_read_r+0x54>
   88eac:	1805883a 	mov	r2,r3
   88eb0:	dfc00217 	ldw	ra,8(sp)
   88eb4:	dc400117 	ldw	r17,4(sp)
   88eb8:	dc000017 	ldw	r16,0(sp)
   88ebc:	dec00304 	addi	sp,sp,12
   88ec0:	f800283a 	ret
   88ec4:	80800017 	ldw	r2,0(r16)
   88ec8:	103ff826 	beq	r2,zero,88eac <_read_r+0x3c>
   88ecc:	88800015 	stw	r2,0(r17)
   88ed0:	1805883a 	mov	r2,r3
   88ed4:	dfc00217 	ldw	ra,8(sp)
   88ed8:	dc400117 	ldw	r17,4(sp)
   88edc:	dc000017 	ldw	r16,0(sp)
   88ee0:	dec00304 	addi	sp,sp,12
   88ee4:	f800283a 	ret

00088ee8 <__udivdi3>:
   88ee8:	defff104 	addi	sp,sp,-60
   88eec:	0015883a 	mov	r10,zero
   88ef0:	2005883a 	mov	r2,r4
   88ef4:	3011883a 	mov	r8,r6
   88ef8:	df000d15 	stw	fp,52(sp)
   88efc:	dd400a15 	stw	r21,40(sp)
   88f00:	dcc00815 	stw	r19,32(sp)
   88f04:	dfc00e15 	stw	ra,56(sp)
   88f08:	ddc00c15 	stw	r23,48(sp)
   88f0c:	dd800b15 	stw	r22,44(sp)
   88f10:	dd000915 	stw	r20,36(sp)
   88f14:	dc800715 	stw	r18,28(sp)
   88f18:	dc400615 	stw	r17,24(sp)
   88f1c:	dc000515 	stw	r16,20(sp)
   88f20:	da800315 	stw	r10,12(sp)
   88f24:	4027883a 	mov	r19,r8
   88f28:	1039883a 	mov	fp,r2
   88f2c:	282b883a 	mov	r21,r5
   88f30:	da800415 	stw	r10,16(sp)
   88f34:	3800401e 	bne	r7,zero,89038 <__udivdi3+0x150>
   88f38:	2a006536 	bltu	r5,r8,890d0 <__udivdi3+0x1e8>
   88f3c:	4000b526 	beq	r8,zero,89214 <__udivdi3+0x32c>
   88f40:	00bfffd4 	movui	r2,65535
   88f44:	14c0ad36 	bltu	r2,r19,891fc <__udivdi3+0x314>
   88f48:	00803fc4 	movi	r2,255
   88f4c:	14c15e36 	bltu	r2,r19,894c8 <__udivdi3+0x5e0>
   88f50:	000b883a 	mov	r5,zero
   88f54:	0005883a 	mov	r2,zero
   88f58:	9884d83a 	srl	r2,r19,r2
   88f5c:	01000274 	movhi	r4,9
   88f60:	213c2e04 	addi	r4,r4,-3912
   88f64:	01800804 	movi	r6,32
   88f68:	1105883a 	add	r2,r2,r4
   88f6c:	10c00003 	ldbu	r3,0(r2)
   88f70:	28c7883a 	add	r3,r5,r3
   88f74:	30e9c83a 	sub	r20,r6,r3
   88f78:	a0010a1e 	bne	r20,zero,893a4 <__udivdi3+0x4bc>
   88f7c:	982ed43a 	srli	r23,r19,16
   88f80:	acebc83a 	sub	r21,r21,r19
   88f84:	9dbfffcc 	andi	r22,r19,65535
   88f88:	05000044 	movi	r20,1
   88f8c:	a809883a 	mov	r4,r21
   88f90:	b80b883a 	mov	r5,r23
   88f94:	008186c0 	call	8186c <__udivsi3>
   88f98:	100b883a 	mov	r5,r2
   88f9c:	b009883a 	mov	r4,r22
   88fa0:	1021883a 	mov	r16,r2
   88fa4:	008ace00 	call	8ace0 <__mulsi3>
   88fa8:	a809883a 	mov	r4,r21
   88fac:	b80b883a 	mov	r5,r23
   88fb0:	1023883a 	mov	r17,r2
   88fb4:	00818740 	call	81874 <__umodsi3>
   88fb8:	1004943a 	slli	r2,r2,16
   88fbc:	e006d43a 	srli	r3,fp,16
   88fc0:	10c4b03a 	or	r2,r2,r3
   88fc4:	1440042e 	bgeu	r2,r17,88fd8 <__udivdi3+0xf0>
   88fc8:	14c5883a 	add	r2,r2,r19
   88fcc:	843fffc4 	addi	r16,r16,-1
   88fd0:	14c00136 	bltu	r2,r19,88fd8 <__udivdi3+0xf0>
   88fd4:	14415c36 	bltu	r2,r17,89548 <__udivdi3+0x660>
   88fd8:	1463c83a 	sub	r17,r2,r17
   88fdc:	8809883a 	mov	r4,r17
   88fe0:	b80b883a 	mov	r5,r23
   88fe4:	008186c0 	call	8186c <__udivsi3>
   88fe8:	100b883a 	mov	r5,r2
   88fec:	b009883a 	mov	r4,r22
   88ff0:	102b883a 	mov	r21,r2
   88ff4:	008ace00 	call	8ace0 <__mulsi3>
   88ff8:	8809883a 	mov	r4,r17
   88ffc:	b80b883a 	mov	r5,r23
   89000:	1025883a 	mov	r18,r2
   89004:	00818740 	call	81874 <__umodsi3>
   89008:	1004943a 	slli	r2,r2,16
   8900c:	e0ffffcc 	andi	r3,fp,65535
   89010:	10c4b03a 	or	r2,r2,r3
   89014:	1480042e 	bgeu	r2,r18,89028 <__udivdi3+0x140>
   89018:	9885883a 	add	r2,r19,r2
   8901c:	ad7fffc4 	addi	r21,r21,-1
   89020:	14c00136 	bltu	r2,r19,89028 <__udivdi3+0x140>
   89024:	14813c36 	bltu	r2,r18,89518 <__udivdi3+0x630>
   89028:	8004943a 	slli	r2,r16,16
   8902c:	a009883a 	mov	r4,r20
   89030:	a884b03a 	or	r2,r21,r2
   89034:	00001506 	br	8908c <__udivdi3+0x1a4>
   89038:	380d883a 	mov	r6,r7
   8903c:	29c06c36 	bltu	r5,r7,891f0 <__udivdi3+0x308>
   89040:	00bfffd4 	movui	r2,65535
   89044:	11c06436 	bltu	r2,r7,891d8 <__udivdi3+0x2f0>
   89048:	00803fc4 	movi	r2,255
   8904c:	11c11836 	bltu	r2,r7,894b0 <__udivdi3+0x5c8>
   89050:	000b883a 	mov	r5,zero
   89054:	0005883a 	mov	r2,zero
   89058:	3084d83a 	srl	r2,r6,r2
   8905c:	01000274 	movhi	r4,9
   89060:	213c2e04 	addi	r4,r4,-3912
   89064:	01c00804 	movi	r7,32
   89068:	1105883a 	add	r2,r2,r4
   8906c:	10c00003 	ldbu	r3,0(r2)
   89070:	28c7883a 	add	r3,r5,r3
   89074:	38edc83a 	sub	r22,r7,r3
   89078:	b000731e 	bne	r22,zero,89248 <__udivdi3+0x360>
   8907c:	35400136 	bltu	r6,r21,89084 <__udivdi3+0x19c>
   89080:	e4c05b36 	bltu	fp,r19,891f0 <__udivdi3+0x308>
   89084:	00800044 	movi	r2,1
   89088:	0009883a 	mov	r4,zero
   8908c:	d8800315 	stw	r2,12(sp)
   89090:	d9400317 	ldw	r5,12(sp)
   89094:	2007883a 	mov	r3,r4
   89098:	d9000415 	stw	r4,16(sp)
   8909c:	2805883a 	mov	r2,r5
   890a0:	dfc00e17 	ldw	ra,56(sp)
   890a4:	df000d17 	ldw	fp,52(sp)
   890a8:	ddc00c17 	ldw	r23,48(sp)
   890ac:	dd800b17 	ldw	r22,44(sp)
   890b0:	dd400a17 	ldw	r21,40(sp)
   890b4:	dd000917 	ldw	r20,36(sp)
   890b8:	dcc00817 	ldw	r19,32(sp)
   890bc:	dc800717 	ldw	r18,28(sp)
   890c0:	dc400617 	ldw	r17,24(sp)
   890c4:	dc000517 	ldw	r16,20(sp)
   890c8:	dec00f04 	addi	sp,sp,60
   890cc:	f800283a 	ret
   890d0:	00bfffd4 	movui	r2,65535
   890d4:	12005636 	bltu	r2,r8,89230 <__udivdi3+0x348>
   890d8:	00803fc4 	movi	r2,255
   890dc:	12010036 	bltu	r2,r8,894e0 <__udivdi3+0x5f8>
   890e0:	000b883a 	mov	r5,zero
   890e4:	0005883a 	mov	r2,zero
   890e8:	9884d83a 	srl	r2,r19,r2
   890ec:	01000274 	movhi	r4,9
   890f0:	213c2e04 	addi	r4,r4,-3912
   890f4:	01800804 	movi	r6,32
   890f8:	1105883a 	add	r2,r2,r4
   890fc:	10c00003 	ldbu	r3,0(r2)
   89100:	28c7883a 	add	r3,r5,r3
   89104:	30cbc83a 	sub	r5,r6,r3
   89108:	28000626 	beq	r5,zero,89124 <__udivdi3+0x23c>
   8910c:	3145c83a 	sub	r2,r6,r5
   89110:	e084d83a 	srl	r2,fp,r2
   89114:	a946983a 	sll	r3,r21,r5
   89118:	e178983a 	sll	fp,fp,r5
   8911c:	9966983a 	sll	r19,r19,r5
   89120:	18aab03a 	or	r21,r3,r2
   89124:	982ed43a 	srli	r23,r19,16
   89128:	a809883a 	mov	r4,r21
   8912c:	9cbfffcc 	andi	r18,r19,65535
   89130:	b80b883a 	mov	r5,r23
   89134:	008186c0 	call	8186c <__udivsi3>
   89138:	100b883a 	mov	r5,r2
   8913c:	9009883a 	mov	r4,r18
   89140:	1021883a 	mov	r16,r2
   89144:	008ace00 	call	8ace0 <__mulsi3>
   89148:	a809883a 	mov	r4,r21
   8914c:	b80b883a 	mov	r5,r23
   89150:	1023883a 	mov	r17,r2
   89154:	00818740 	call	81874 <__umodsi3>
   89158:	1004943a 	slli	r2,r2,16
   8915c:	e006d43a 	srli	r3,fp,16
   89160:	10c4b03a 	or	r2,r2,r3
   89164:	1440042e 	bgeu	r2,r17,89178 <__udivdi3+0x290>
   89168:	14c5883a 	add	r2,r2,r19
   8916c:	843fffc4 	addi	r16,r16,-1
   89170:	14c00136 	bltu	r2,r19,89178 <__udivdi3+0x290>
   89174:	1440ea36 	bltu	r2,r17,89520 <__udivdi3+0x638>
   89178:	1463c83a 	sub	r17,r2,r17
   8917c:	8809883a 	mov	r4,r17
   89180:	b80b883a 	mov	r5,r23
   89184:	008186c0 	call	8186c <__udivsi3>
   89188:	100b883a 	mov	r5,r2
   8918c:	9009883a 	mov	r4,r18
   89190:	102b883a 	mov	r21,r2
   89194:	008ace00 	call	8ace0 <__mulsi3>
   89198:	8809883a 	mov	r4,r17
   8919c:	b80b883a 	mov	r5,r23
   891a0:	1025883a 	mov	r18,r2
   891a4:	00818740 	call	81874 <__umodsi3>
   891a8:	1004943a 	slli	r2,r2,16
   891ac:	e0ffffcc 	andi	r3,fp,65535
   891b0:	10c4b03a 	or	r2,r2,r3
   891b4:	1480042e 	bgeu	r2,r18,891c8 <__udivdi3+0x2e0>
   891b8:	9885883a 	add	r2,r19,r2
   891bc:	ad7fffc4 	addi	r21,r21,-1
   891c0:	14c00136 	bltu	r2,r19,891c8 <__udivdi3+0x2e0>
   891c4:	1480d936 	bltu	r2,r18,8952c <__udivdi3+0x644>
   891c8:	8004943a 	slli	r2,r16,16
   891cc:	0009883a 	mov	r4,zero
   891d0:	a884b03a 	or	r2,r21,r2
   891d4:	003fad06 	br	8908c <__udivdi3+0x1a4>
   891d8:	00804034 	movhi	r2,256
   891dc:	10bfffc4 	addi	r2,r2,-1
   891e0:	11c0b636 	bltu	r2,r7,894bc <__udivdi3+0x5d4>
   891e4:	01400404 	movi	r5,16
   891e8:	2805883a 	mov	r2,r5
   891ec:	003f9a06 	br	89058 <__udivdi3+0x170>
   891f0:	0005883a 	mov	r2,zero
   891f4:	0009883a 	mov	r4,zero
   891f8:	003fa406 	br	8908c <__udivdi3+0x1a4>
   891fc:	00804034 	movhi	r2,256
   89200:	10bfffc4 	addi	r2,r2,-1
   89204:	14c0b336 	bltu	r2,r19,894d4 <__udivdi3+0x5ec>
   89208:	01400404 	movi	r5,16
   8920c:	2805883a 	mov	r2,r5
   89210:	003f5106 	br	88f58 <__udivdi3+0x70>
   89214:	01000044 	movi	r4,1
   89218:	000b883a 	mov	r5,zero
   8921c:	008186c0 	call	8186c <__udivsi3>
   89220:	1027883a 	mov	r19,r2
   89224:	00bfffd4 	movui	r2,65535
   89228:	14fff436 	bltu	r2,r19,891fc <__udivdi3+0x314>
   8922c:	003f4606 	br	88f48 <__udivdi3+0x60>
   89230:	00804034 	movhi	r2,256
   89234:	10bfffc4 	addi	r2,r2,-1
   89238:	1200ac36 	bltu	r2,r8,894ec <__udivdi3+0x604>
   8923c:	01400404 	movi	r5,16
   89240:	2805883a 	mov	r2,r5
   89244:	003fa806 	br	890e8 <__udivdi3+0x200>
   89248:	3d85c83a 	sub	r2,r7,r22
   8924c:	3588983a 	sll	r4,r6,r22
   89250:	9886d83a 	srl	r3,r19,r2
   89254:	a8a2d83a 	srl	r17,r21,r2
   89258:	e084d83a 	srl	r2,fp,r2
   8925c:	20eeb03a 	or	r23,r4,r3
   89260:	b824d43a 	srli	r18,r23,16
   89264:	ad86983a 	sll	r3,r21,r22
   89268:	8809883a 	mov	r4,r17
   8926c:	900b883a 	mov	r5,r18
   89270:	1886b03a 	or	r3,r3,r2
   89274:	d8c00115 	stw	r3,4(sp)
   89278:	bc3fffcc 	andi	r16,r23,65535
   8927c:	008186c0 	call	8186c <__udivsi3>
   89280:	100b883a 	mov	r5,r2
   89284:	8009883a 	mov	r4,r16
   89288:	1029883a 	mov	r20,r2
   8928c:	008ace00 	call	8ace0 <__mulsi3>
   89290:	900b883a 	mov	r5,r18
   89294:	8809883a 	mov	r4,r17
   89298:	102b883a 	mov	r21,r2
   8929c:	00818740 	call	81874 <__umodsi3>
   892a0:	d9400117 	ldw	r5,4(sp)
   892a4:	1004943a 	slli	r2,r2,16
   892a8:	9da6983a 	sll	r19,r19,r22
   892ac:	2806d43a 	srli	r3,r5,16
   892b0:	10c4b03a 	or	r2,r2,r3
   892b4:	1540032e 	bgeu	r2,r21,892c4 <__udivdi3+0x3dc>
   892b8:	15c5883a 	add	r2,r2,r23
   892bc:	a53fffc4 	addi	r20,r20,-1
   892c0:	15c0912e 	bgeu	r2,r23,89508 <__udivdi3+0x620>
   892c4:	1563c83a 	sub	r17,r2,r21
   892c8:	8809883a 	mov	r4,r17
   892cc:	900b883a 	mov	r5,r18
   892d0:	008186c0 	call	8186c <__udivsi3>
   892d4:	100b883a 	mov	r5,r2
   892d8:	8009883a 	mov	r4,r16
   892dc:	102b883a 	mov	r21,r2
   892e0:	008ace00 	call	8ace0 <__mulsi3>
   892e4:	8809883a 	mov	r4,r17
   892e8:	900b883a 	mov	r5,r18
   892ec:	1021883a 	mov	r16,r2
   892f0:	00818740 	call	81874 <__umodsi3>
   892f4:	da800117 	ldw	r10,4(sp)
   892f8:	1004943a 	slli	r2,r2,16
   892fc:	50ffffcc 	andi	r3,r10,65535
   89300:	10c6b03a 	or	r3,r2,r3
   89304:	1c00032e 	bgeu	r3,r16,89314 <__udivdi3+0x42c>
   89308:	1dc7883a 	add	r3,r3,r23
   8930c:	ad7fffc4 	addi	r21,r21,-1
   89310:	1dc0792e 	bgeu	r3,r23,894f8 <__udivdi3+0x610>
   89314:	a004943a 	slli	r2,r20,16
   89318:	982ed43a 	srli	r23,r19,16
   8931c:	9cffffcc 	andi	r19,r19,65535
   89320:	a8a4b03a 	or	r18,r21,r2
   89324:	947fffcc 	andi	r17,r18,65535
   89328:	902ad43a 	srli	r21,r18,16
   8932c:	8809883a 	mov	r4,r17
   89330:	980b883a 	mov	r5,r19
   89334:	1c21c83a 	sub	r16,r3,r16
   89338:	008ace00 	call	8ace0 <__mulsi3>
   8933c:	8809883a 	mov	r4,r17
   89340:	b80b883a 	mov	r5,r23
   89344:	1029883a 	mov	r20,r2
   89348:	008ace00 	call	8ace0 <__mulsi3>
   8934c:	980b883a 	mov	r5,r19
   89350:	a809883a 	mov	r4,r21
   89354:	1023883a 	mov	r17,r2
   89358:	008ace00 	call	8ace0 <__mulsi3>
   8935c:	a809883a 	mov	r4,r21
   89360:	b80b883a 	mov	r5,r23
   89364:	1027883a 	mov	r19,r2
   89368:	008ace00 	call	8ace0 <__mulsi3>
   8936c:	1009883a 	mov	r4,r2
   89370:	a004d43a 	srli	r2,r20,16
   89374:	8ce3883a 	add	r17,r17,r19
   89378:	1447883a 	add	r3,r2,r17
   8937c:	1cc0022e 	bgeu	r3,r19,89388 <__udivdi3+0x4a0>
   89380:	00800074 	movhi	r2,1
   89384:	2089883a 	add	r4,r4,r2
   89388:	1804d43a 	srli	r2,r3,16
   8938c:	2085883a 	add	r2,r4,r2
   89390:	80804436 	bltu	r16,r2,894a4 <__udivdi3+0x5bc>
   89394:	80803e26 	beq	r16,r2,89490 <__udivdi3+0x5a8>
   89398:	9005883a 	mov	r2,r18
   8939c:	0009883a 	mov	r4,zero
   893a0:	003f3a06 	br	8908c <__udivdi3+0x1a4>
   893a4:	9d26983a 	sll	r19,r19,r20
   893a8:	3505c83a 	sub	r2,r6,r20
   893ac:	a8a2d83a 	srl	r17,r21,r2
   893b0:	982ed43a 	srli	r23,r19,16
   893b4:	e084d83a 	srl	r2,fp,r2
   893b8:	ad06983a 	sll	r3,r21,r20
   893bc:	8809883a 	mov	r4,r17
   893c0:	b80b883a 	mov	r5,r23
   893c4:	1886b03a 	or	r3,r3,r2
   893c8:	d8c00015 	stw	r3,0(sp)
   893cc:	9dbfffcc 	andi	r22,r19,65535
   893d0:	008186c0 	call	8186c <__udivsi3>
   893d4:	100b883a 	mov	r5,r2
   893d8:	b009883a 	mov	r4,r22
   893dc:	d8800215 	stw	r2,8(sp)
   893e0:	008ace00 	call	8ace0 <__mulsi3>
   893e4:	8809883a 	mov	r4,r17
   893e8:	b80b883a 	mov	r5,r23
   893ec:	102b883a 	mov	r21,r2
   893f0:	00818740 	call	81874 <__umodsi3>
   893f4:	d9000017 	ldw	r4,0(sp)
   893f8:	1004943a 	slli	r2,r2,16
   893fc:	2006d43a 	srli	r3,r4,16
   89400:	10c4b03a 	or	r2,r2,r3
   89404:	1540052e 	bgeu	r2,r21,8941c <__udivdi3+0x534>
   89408:	d9400217 	ldw	r5,8(sp)
   8940c:	14c5883a 	add	r2,r2,r19
   89410:	297fffc4 	addi	r5,r5,-1
   89414:	d9400215 	stw	r5,8(sp)
   89418:	14c0462e 	bgeu	r2,r19,89534 <__udivdi3+0x64c>
   8941c:	1563c83a 	sub	r17,r2,r21
   89420:	8809883a 	mov	r4,r17
   89424:	b80b883a 	mov	r5,r23
   89428:	008186c0 	call	8186c <__udivsi3>
   8942c:	100b883a 	mov	r5,r2
   89430:	b009883a 	mov	r4,r22
   89434:	1025883a 	mov	r18,r2
   89438:	008ace00 	call	8ace0 <__mulsi3>
   8943c:	8809883a 	mov	r4,r17
   89440:	b80b883a 	mov	r5,r23
   89444:	1021883a 	mov	r16,r2
   89448:	00818740 	call	81874 <__umodsi3>
   8944c:	da800017 	ldw	r10,0(sp)
   89450:	1004943a 	slli	r2,r2,16
   89454:	50ffffcc 	andi	r3,r10,65535
   89458:	10c6b03a 	or	r3,r2,r3
   8945c:	1c00062e 	bgeu	r3,r16,89478 <__udivdi3+0x590>
   89460:	1cc7883a 	add	r3,r3,r19
   89464:	94bfffc4 	addi	r18,r18,-1
   89468:	1cc00336 	bltu	r3,r19,89478 <__udivdi3+0x590>
   8946c:	1c00022e 	bgeu	r3,r16,89478 <__udivdi3+0x590>
   89470:	94bfffc4 	addi	r18,r18,-1
   89474:	1cc7883a 	add	r3,r3,r19
   89478:	d9000217 	ldw	r4,8(sp)
   8947c:	e538983a 	sll	fp,fp,r20
   89480:	1c2bc83a 	sub	r21,r3,r16
   89484:	2004943a 	slli	r2,r4,16
   89488:	90a8b03a 	or	r20,r18,r2
   8948c:	003ebf06 	br	88f8c <__udivdi3+0xa4>
   89490:	1804943a 	slli	r2,r3,16
   89494:	e588983a 	sll	r4,fp,r22
   89498:	a0ffffcc 	andi	r3,r20,65535
   8949c:	10c5883a 	add	r2,r2,r3
   894a0:	20bfbd2e 	bgeu	r4,r2,89398 <__udivdi3+0x4b0>
   894a4:	90bfffc4 	addi	r2,r18,-1
   894a8:	0009883a 	mov	r4,zero
   894ac:	003ef706 	br	8908c <__udivdi3+0x1a4>
   894b0:	01400204 	movi	r5,8
   894b4:	2805883a 	mov	r2,r5
   894b8:	003ee706 	br	89058 <__udivdi3+0x170>
   894bc:	01400604 	movi	r5,24
   894c0:	2805883a 	mov	r2,r5
   894c4:	003ee406 	br	89058 <__udivdi3+0x170>
   894c8:	01400204 	movi	r5,8
   894cc:	2805883a 	mov	r2,r5
   894d0:	003ea106 	br	88f58 <__udivdi3+0x70>
   894d4:	01400604 	movi	r5,24
   894d8:	2805883a 	mov	r2,r5
   894dc:	003e9e06 	br	88f58 <__udivdi3+0x70>
   894e0:	01400204 	movi	r5,8
   894e4:	2805883a 	mov	r2,r5
   894e8:	003eff06 	br	890e8 <__udivdi3+0x200>
   894ec:	01400604 	movi	r5,24
   894f0:	2805883a 	mov	r2,r5
   894f4:	003efc06 	br	890e8 <__udivdi3+0x200>
   894f8:	1c3f862e 	bgeu	r3,r16,89314 <__udivdi3+0x42c>
   894fc:	1dc7883a 	add	r3,r3,r23
   89500:	ad7fffc4 	addi	r21,r21,-1
   89504:	003f8306 	br	89314 <__udivdi3+0x42c>
   89508:	157f6e2e 	bgeu	r2,r21,892c4 <__udivdi3+0x3dc>
   8950c:	a53fffc4 	addi	r20,r20,-1
   89510:	15c5883a 	add	r2,r2,r23
   89514:	003f6b06 	br	892c4 <__udivdi3+0x3dc>
   89518:	ad7fffc4 	addi	r21,r21,-1
   8951c:	003ec206 	br	89028 <__udivdi3+0x140>
   89520:	843fffc4 	addi	r16,r16,-1
   89524:	14c5883a 	add	r2,r2,r19
   89528:	003f1306 	br	89178 <__udivdi3+0x290>
   8952c:	ad7fffc4 	addi	r21,r21,-1
   89530:	003f2506 	br	891c8 <__udivdi3+0x2e0>
   89534:	157fb92e 	bgeu	r2,r21,8941c <__udivdi3+0x534>
   89538:	297fffc4 	addi	r5,r5,-1
   8953c:	14c5883a 	add	r2,r2,r19
   89540:	d9400215 	stw	r5,8(sp)
   89544:	003fb506 	br	8941c <__udivdi3+0x534>
   89548:	843fffc4 	addi	r16,r16,-1
   8954c:	14c5883a 	add	r2,r2,r19
   89550:	003ea106 	br	88fd8 <__udivdi3+0xf0>

00089554 <__umoddi3>:
   89554:	defff004 	addi	sp,sp,-64
   89558:	3011883a 	mov	r8,r6
   8955c:	000d883a 	mov	r6,zero
   89560:	dd400b15 	stw	r21,44(sp)
   89564:	dcc00915 	stw	r19,36(sp)
   89568:	dc000615 	stw	r16,24(sp)
   8956c:	dfc00f15 	stw	ra,60(sp)
   89570:	df000e15 	stw	fp,56(sp)
   89574:	ddc00d15 	stw	r23,52(sp)
   89578:	dd800c15 	stw	r22,48(sp)
   8957c:	dd000a15 	stw	r20,40(sp)
   89580:	dc800815 	stw	r18,32(sp)
   89584:	dc400715 	stw	r17,28(sp)
   89588:	2817883a 	mov	r11,r5
   8958c:	d9800415 	stw	r6,16(sp)
   89590:	4027883a 	mov	r19,r8
   89594:	d9800515 	stw	r6,20(sp)
   89598:	2021883a 	mov	r16,r4
   8959c:	282b883a 	mov	r21,r5
   895a0:	38002c1e 	bne	r7,zero,89654 <__umoddi3+0x100>
   895a4:	2a005636 	bltu	r5,r8,89700 <__umoddi3+0x1ac>
   895a8:	40009a26 	beq	r8,zero,89814 <__umoddi3+0x2c0>
   895ac:	00bfffd4 	movui	r2,65535
   895b0:	14c09236 	bltu	r2,r19,897fc <__umoddi3+0x2a8>
   895b4:	00803fc4 	movi	r2,255
   895b8:	14c15c36 	bltu	r2,r19,89b2c <__umoddi3+0x5d8>
   895bc:	000b883a 	mov	r5,zero
   895c0:	0005883a 	mov	r2,zero
   895c4:	9884d83a 	srl	r2,r19,r2
   895c8:	01000274 	movhi	r4,9
   895cc:	213c2e04 	addi	r4,r4,-3912
   895d0:	01800804 	movi	r6,32
   895d4:	1105883a 	add	r2,r2,r4
   895d8:	10c00003 	ldbu	r3,0(r2)
   895dc:	28c7883a 	add	r3,r5,r3
   895e0:	30e5c83a 	sub	r18,r6,r3
   895e4:	9000a41e 	bne	r18,zero,89878 <__umoddi3+0x324>
   895e8:	982ed43a 	srli	r23,r19,16
   895ec:	acebc83a 	sub	r21,r21,r19
   895f0:	9d3fffcc 	andi	r20,r19,65535
   895f4:	002d883a 	mov	r22,zero
   895f8:	a809883a 	mov	r4,r21
   895fc:	b80b883a 	mov	r5,r23
   89600:	008186c0 	call	8186c <__udivsi3>
   89604:	100b883a 	mov	r5,r2
   89608:	a009883a 	mov	r4,r20
   8960c:	008ace00 	call	8ace0 <__mulsi3>
   89610:	a809883a 	mov	r4,r21
   89614:	b80b883a 	mov	r5,r23
   89618:	1023883a 	mov	r17,r2
   8961c:	00818740 	call	81874 <__umodsi3>
   89620:	1004943a 	slli	r2,r2,16
   89624:	8006d43a 	srli	r3,r16,16
   89628:	10c4b03a 	or	r2,r2,r3
   8962c:	1440032e 	bgeu	r2,r17,8963c <__umoddi3+0xe8>
   89630:	14c5883a 	add	r2,r2,r19
   89634:	14c00136 	bltu	r2,r19,8963c <__umoddi3+0xe8>
   89638:	14415836 	bltu	r2,r17,89b9c <__umoddi3+0x648>
   8963c:	1463c83a 	sub	r17,r2,r17
   89640:	8809883a 	mov	r4,r17
   89644:	b80b883a 	mov	r5,r23
   89648:	008186c0 	call	8186c <__udivsi3>
   8964c:	a009883a 	mov	r4,r20
   89650:	00005306 	br	897a0 <__umoddi3+0x24c>
   89654:	380d883a 	mov	r6,r7
   89658:	29c0132e 	bgeu	r5,r7,896a8 <__umoddi3+0x154>
   8965c:	d9000415 	stw	r4,16(sp)
   89660:	d9400515 	stw	r5,20(sp)
   89664:	d9400417 	ldw	r5,16(sp)
   89668:	5813883a 	mov	r9,r11
   8966c:	2811883a 	mov	r8,r5
   89670:	4005883a 	mov	r2,r8
   89674:	4807883a 	mov	r3,r9
   89678:	dfc00f17 	ldw	ra,60(sp)
   8967c:	df000e17 	ldw	fp,56(sp)
   89680:	ddc00d17 	ldw	r23,52(sp)
   89684:	dd800c17 	ldw	r22,48(sp)
   89688:	dd400b17 	ldw	r21,44(sp)
   8968c:	dd000a17 	ldw	r20,40(sp)
   89690:	dcc00917 	ldw	r19,36(sp)
   89694:	dc800817 	ldw	r18,32(sp)
   89698:	dc400717 	ldw	r17,28(sp)
   8969c:	dc000617 	ldw	r16,24(sp)
   896a0:	dec01004 	addi	sp,sp,64
   896a4:	f800283a 	ret
   896a8:	00bfffd4 	movui	r2,65535
   896ac:	11c06636 	bltu	r2,r7,89848 <__umoddi3+0x2f4>
   896b0:	00803fc4 	movi	r2,255
   896b4:	11c12036 	bltu	r2,r7,89b38 <__umoddi3+0x5e4>
   896b8:	000b883a 	mov	r5,zero
   896bc:	0005883a 	mov	r2,zero
   896c0:	3084d83a 	srl	r2,r6,r2
   896c4:	01000274 	movhi	r4,9
   896c8:	213c2e04 	addi	r4,r4,-3912
   896cc:	01c00804 	movi	r7,32
   896d0:	1105883a 	add	r2,r2,r4
   896d4:	10c00003 	ldbu	r3,0(r2)
   896d8:	28c7883a 	add	r3,r5,r3
   896dc:	38e5c83a 	sub	r18,r7,r3
   896e0:	9000941e 	bne	r18,zero,89934 <__umoddi3+0x3e0>
   896e4:	35405e36 	bltu	r6,r21,89860 <__umoddi3+0x30c>
   896e8:	84c05d2e 	bgeu	r16,r19,89860 <__umoddi3+0x30c>
   896ec:	8011883a 	mov	r8,r16
   896f0:	a813883a 	mov	r9,r21
   896f4:	dc000415 	stw	r16,16(sp)
   896f8:	dd400515 	stw	r21,20(sp)
   896fc:	003fdc06 	br	89670 <__umoddi3+0x11c>
   89700:	00bfffd4 	movui	r2,65535
   89704:	12004a36 	bltu	r2,r8,89830 <__umoddi3+0x2dc>
   89708:	00803fc4 	movi	r2,255
   8970c:	12010d36 	bltu	r2,r8,89b44 <__umoddi3+0x5f0>
   89710:	000b883a 	mov	r5,zero
   89714:	0005883a 	mov	r2,zero
   89718:	9884d83a 	srl	r2,r19,r2
   8971c:	01000274 	movhi	r4,9
   89720:	213c2e04 	addi	r4,r4,-3912
   89724:	01800804 	movi	r6,32
   89728:	1105883a 	add	r2,r2,r4
   8972c:	10c00003 	ldbu	r3,0(r2)
   89730:	28c7883a 	add	r3,r5,r3
   89734:	30c7c83a 	sub	r3,r6,r3
   89738:	1800dc1e 	bne	r3,zero,89aac <__umoddi3+0x558>
   8973c:	002d883a 	mov	r22,zero
   89740:	982ed43a 	srli	r23,r19,16
   89744:	a809883a 	mov	r4,r21
   89748:	9cbfffcc 	andi	r18,r19,65535
   8974c:	b80b883a 	mov	r5,r23
   89750:	008186c0 	call	8186c <__udivsi3>
   89754:	100b883a 	mov	r5,r2
   89758:	9009883a 	mov	r4,r18
   8975c:	008ace00 	call	8ace0 <__mulsi3>
   89760:	a809883a 	mov	r4,r21
   89764:	b80b883a 	mov	r5,r23
   89768:	1023883a 	mov	r17,r2
   8976c:	00818740 	call	81874 <__umodsi3>
   89770:	1004943a 	slli	r2,r2,16
   89774:	8006d43a 	srli	r3,r16,16
   89778:	10c4b03a 	or	r2,r2,r3
   8977c:	1440032e 	bgeu	r2,r17,8978c <__umoddi3+0x238>
   89780:	14c5883a 	add	r2,r2,r19
   89784:	14c00136 	bltu	r2,r19,8978c <__umoddi3+0x238>
   89788:	14410236 	bltu	r2,r17,89b94 <__umoddi3+0x640>
   8978c:	1463c83a 	sub	r17,r2,r17
   89790:	8809883a 	mov	r4,r17
   89794:	b80b883a 	mov	r5,r23
   89798:	008186c0 	call	8186c <__udivsi3>
   8979c:	9009883a 	mov	r4,r18
   897a0:	100b883a 	mov	r5,r2
   897a4:	008ace00 	call	8ace0 <__mulsi3>
   897a8:	8809883a 	mov	r4,r17
   897ac:	b80b883a 	mov	r5,r23
   897b0:	102b883a 	mov	r21,r2
   897b4:	00818740 	call	81874 <__umodsi3>
   897b8:	1004943a 	slli	r2,r2,16
   897bc:	80ffffcc 	andi	r3,r16,65535
   897c0:	10c4b03a 	or	r2,r2,r3
   897c4:	1540042e 	bgeu	r2,r21,897d8 <__umoddi3+0x284>
   897c8:	14c5883a 	add	r2,r2,r19
   897cc:	14c00236 	bltu	r2,r19,897d8 <__umoddi3+0x284>
   897d0:	1540012e 	bgeu	r2,r21,897d8 <__umoddi3+0x284>
   897d4:	14c5883a 	add	r2,r2,r19
   897d8:	1545c83a 	sub	r2,r2,r21
   897dc:	1584d83a 	srl	r2,r2,r22
   897e0:	0013883a 	mov	r9,zero
   897e4:	d8800415 	stw	r2,16(sp)
   897e8:	d8c00417 	ldw	r3,16(sp)
   897ec:	0005883a 	mov	r2,zero
   897f0:	d8800515 	stw	r2,20(sp)
   897f4:	1811883a 	mov	r8,r3
   897f8:	003f9d06 	br	89670 <__umoddi3+0x11c>
   897fc:	00804034 	movhi	r2,256
   89800:	10bfffc4 	addi	r2,r2,-1
   89804:	14c0c636 	bltu	r2,r19,89b20 <__umoddi3+0x5cc>
   89808:	01400404 	movi	r5,16
   8980c:	2805883a 	mov	r2,r5
   89810:	003f6c06 	br	895c4 <__umoddi3+0x70>
   89814:	01000044 	movi	r4,1
   89818:	000b883a 	mov	r5,zero
   8981c:	008186c0 	call	8186c <__udivsi3>
   89820:	1027883a 	mov	r19,r2
   89824:	00bfffd4 	movui	r2,65535
   89828:	14fff436 	bltu	r2,r19,897fc <__umoddi3+0x2a8>
   8982c:	003f6106 	br	895b4 <__umoddi3+0x60>
   89830:	00804034 	movhi	r2,256
   89834:	10bfffc4 	addi	r2,r2,-1
   89838:	1200c536 	bltu	r2,r8,89b50 <__umoddi3+0x5fc>
   8983c:	01400404 	movi	r5,16
   89840:	2805883a 	mov	r2,r5
   89844:	003fb406 	br	89718 <__umoddi3+0x1c4>
   89848:	00804034 	movhi	r2,256
   8984c:	10bfffc4 	addi	r2,r2,-1
   89850:	11c0c236 	bltu	r2,r7,89b5c <__umoddi3+0x608>
   89854:	01400404 	movi	r5,16
   89858:	2805883a 	mov	r2,r5
   8985c:	003f9806 	br	896c0 <__umoddi3+0x16c>
   89860:	84c9c83a 	sub	r4,r16,r19
   89864:	8105803a 	cmpltu	r2,r16,r4
   89868:	a987c83a 	sub	r3,r21,r6
   8986c:	18abc83a 	sub	r21,r3,r2
   89870:	2021883a 	mov	r16,r4
   89874:	003f9d06 	br	896ec <__umoddi3+0x198>
   89878:	9ca6983a 	sll	r19,r19,r18
   8987c:	3485c83a 	sub	r2,r6,r18
   89880:	a8a2d83a 	srl	r17,r21,r2
   89884:	982ed43a 	srli	r23,r19,16
   89888:	ac86983a 	sll	r3,r21,r18
   8988c:	8084d83a 	srl	r2,r16,r2
   89890:	8809883a 	mov	r4,r17
   89894:	b80b883a 	mov	r5,r23
   89898:	18b8b03a 	or	fp,r3,r2
   8989c:	9d3fffcc 	andi	r20,r19,65535
   898a0:	008186c0 	call	8186c <__udivsi3>
   898a4:	100b883a 	mov	r5,r2
   898a8:	a009883a 	mov	r4,r20
   898ac:	008ace00 	call	8ace0 <__mulsi3>
   898b0:	8809883a 	mov	r4,r17
   898b4:	b80b883a 	mov	r5,r23
   898b8:	102b883a 	mov	r21,r2
   898bc:	00818740 	call	81874 <__umodsi3>
   898c0:	1004943a 	slli	r2,r2,16
   898c4:	e006d43a 	srli	r3,fp,16
   898c8:	902d883a 	mov	r22,r18
   898cc:	10c4b03a 	or	r2,r2,r3
   898d0:	1540022e 	bgeu	r2,r21,898dc <__umoddi3+0x388>
   898d4:	14c5883a 	add	r2,r2,r19
   898d8:	14c0ab2e 	bgeu	r2,r19,89b88 <__umoddi3+0x634>
   898dc:	1563c83a 	sub	r17,r2,r21
   898e0:	8809883a 	mov	r4,r17
   898e4:	b80b883a 	mov	r5,r23
   898e8:	008186c0 	call	8186c <__udivsi3>
   898ec:	100b883a 	mov	r5,r2
   898f0:	a009883a 	mov	r4,r20
   898f4:	008ace00 	call	8ace0 <__mulsi3>
   898f8:	8809883a 	mov	r4,r17
   898fc:	b80b883a 	mov	r5,r23
   89900:	102b883a 	mov	r21,r2
   89904:	00818740 	call	81874 <__umodsi3>
   89908:	1004943a 	slli	r2,r2,16
   8990c:	e0ffffcc 	andi	r3,fp,65535
   89910:	10c4b03a 	or	r2,r2,r3
   89914:	1540042e 	bgeu	r2,r21,89928 <__umoddi3+0x3d4>
   89918:	14c5883a 	add	r2,r2,r19
   8991c:	14c00236 	bltu	r2,r19,89928 <__umoddi3+0x3d4>
   89920:	1540012e 	bgeu	r2,r21,89928 <__umoddi3+0x3d4>
   89924:	14c5883a 	add	r2,r2,r19
   89928:	84a0983a 	sll	r16,r16,r18
   8992c:	156bc83a 	sub	r21,r2,r21
   89930:	003f3106 	br	895f8 <__umoddi3+0xa4>
   89934:	3c8fc83a 	sub	r7,r7,r18
   89938:	3486983a 	sll	r3,r6,r18
   8993c:	99c4d83a 	srl	r2,r19,r7
   89940:	a9e2d83a 	srl	r17,r21,r7
   89944:	ac8c983a 	sll	r6,r21,r18
   89948:	18acb03a 	or	r22,r3,r2
   8994c:	b02ed43a 	srli	r23,r22,16
   89950:	81c4d83a 	srl	r2,r16,r7
   89954:	8809883a 	mov	r4,r17
   89958:	b80b883a 	mov	r5,r23
   8995c:	308cb03a 	or	r6,r6,r2
   89960:	d9c00315 	stw	r7,12(sp)
   89964:	d9800215 	stw	r6,8(sp)
   89968:	b53fffcc 	andi	r20,r22,65535
   8996c:	008186c0 	call	8186c <__udivsi3>
   89970:	100b883a 	mov	r5,r2
   89974:	a009883a 	mov	r4,r20
   89978:	1039883a 	mov	fp,r2
   8997c:	008ace00 	call	8ace0 <__mulsi3>
   89980:	8809883a 	mov	r4,r17
   89984:	b80b883a 	mov	r5,r23
   89988:	102b883a 	mov	r21,r2
   8998c:	00818740 	call	81874 <__umodsi3>
   89990:	d9000217 	ldw	r4,8(sp)
   89994:	1004943a 	slli	r2,r2,16
   89998:	9ca6983a 	sll	r19,r19,r18
   8999c:	2006d43a 	srli	r3,r4,16
   899a0:	84a0983a 	sll	r16,r16,r18
   899a4:	dcc00015 	stw	r19,0(sp)
   899a8:	10c4b03a 	or	r2,r2,r3
   899ac:	dc000115 	stw	r16,4(sp)
   899b0:	1540032e 	bgeu	r2,r21,899c0 <__umoddi3+0x46c>
   899b4:	1585883a 	add	r2,r2,r22
   899b8:	e73fffc4 	addi	fp,fp,-1
   899bc:	15806e2e 	bgeu	r2,r22,89b78 <__umoddi3+0x624>
   899c0:	1563c83a 	sub	r17,r2,r21
   899c4:	8809883a 	mov	r4,r17
   899c8:	b80b883a 	mov	r5,r23
   899cc:	008186c0 	call	8186c <__udivsi3>
   899d0:	100b883a 	mov	r5,r2
   899d4:	a009883a 	mov	r4,r20
   899d8:	1021883a 	mov	r16,r2
   899dc:	008ace00 	call	8ace0 <__mulsi3>
   899e0:	b80b883a 	mov	r5,r23
   899e4:	8809883a 	mov	r4,r17
   899e8:	1029883a 	mov	r20,r2
   899ec:	00818740 	call	81874 <__umodsi3>
   899f0:	d9400217 	ldw	r5,8(sp)
   899f4:	1004943a 	slli	r2,r2,16
   899f8:	28ffffcc 	andi	r3,r5,65535
   899fc:	10c4b03a 	or	r2,r2,r3
   89a00:	1500032e 	bgeu	r2,r20,89a10 <__umoddi3+0x4bc>
   89a04:	1585883a 	add	r2,r2,r22
   89a08:	843fffc4 	addi	r16,r16,-1
   89a0c:	1580562e 	bgeu	r2,r22,89b68 <__umoddi3+0x614>
   89a10:	d9800017 	ldw	r6,0(sp)
   89a14:	e022943a 	slli	r17,fp,16
   89a18:	302ed43a 	srli	r23,r6,16
   89a1c:	8462b03a 	or	r17,r16,r17
   89a20:	34ffffcc 	andi	r19,r6,65535
   89a24:	882ad43a 	srli	r21,r17,16
   89a28:	8c7fffcc 	andi	r17,r17,65535
   89a2c:	8809883a 	mov	r4,r17
   89a30:	980b883a 	mov	r5,r19
   89a34:	1521c83a 	sub	r16,r2,r20
   89a38:	008ace00 	call	8ace0 <__mulsi3>
   89a3c:	8809883a 	mov	r4,r17
   89a40:	b80b883a 	mov	r5,r23
   89a44:	1029883a 	mov	r20,r2
   89a48:	008ace00 	call	8ace0 <__mulsi3>
   89a4c:	980b883a 	mov	r5,r19
   89a50:	a809883a 	mov	r4,r21
   89a54:	1023883a 	mov	r17,r2
   89a58:	008ace00 	call	8ace0 <__mulsi3>
   89a5c:	a809883a 	mov	r4,r21
   89a60:	b80b883a 	mov	r5,r23
   89a64:	1027883a 	mov	r19,r2
   89a68:	008ace00 	call	8ace0 <__mulsi3>
   89a6c:	100b883a 	mov	r5,r2
   89a70:	a004d43a 	srli	r2,r20,16
   89a74:	8ce3883a 	add	r17,r17,r19
   89a78:	1449883a 	add	r4,r2,r17
   89a7c:	24c0022e 	bgeu	r4,r19,89a88 <__umoddi3+0x534>
   89a80:	00800074 	movhi	r2,1
   89a84:	288b883a 	add	r5,r5,r2
   89a88:	2004d43a 	srli	r2,r4,16
   89a8c:	2008943a 	slli	r4,r4,16
   89a90:	a0ffffcc 	andi	r3,r20,65535
   89a94:	288d883a 	add	r6,r5,r2
   89a98:	20c9883a 	add	r4,r4,r3
   89a9c:	81800b36 	bltu	r16,r6,89acc <__umoddi3+0x578>
   89aa0:	81804026 	beq	r16,r6,89ba4 <__umoddi3+0x650>
   89aa4:	818dc83a 	sub	r6,r16,r6
   89aa8:	00000f06 	br	89ae8 <__umoddi3+0x594>
   89aac:	30c5c83a 	sub	r2,r6,r3
   89ab0:	182d883a 	mov	r22,r3
   89ab4:	8084d83a 	srl	r2,r16,r2
   89ab8:	a8c6983a 	sll	r3,r21,r3
   89abc:	9da6983a 	sll	r19,r19,r22
   89ac0:	85a0983a 	sll	r16,r16,r22
   89ac4:	18aab03a 	or	r21,r3,r2
   89ac8:	003f1d06 	br	89740 <__umoddi3+0x1ec>
   89acc:	d8c00017 	ldw	r3,0(sp)
   89ad0:	20c5c83a 	sub	r2,r4,r3
   89ad4:	2089803a 	cmpltu	r4,r4,r2
   89ad8:	3587c83a 	sub	r3,r6,r22
   89adc:	1907c83a 	sub	r3,r3,r4
   89ae0:	80cdc83a 	sub	r6,r16,r3
   89ae4:	1009883a 	mov	r4,r2
   89ae8:	d9400117 	ldw	r5,4(sp)
   89aec:	2905c83a 	sub	r2,r5,r4
   89af0:	2887803a 	cmpltu	r3,r5,r2
   89af4:	30c7c83a 	sub	r3,r6,r3
   89af8:	d9800317 	ldw	r6,12(sp)
   89afc:	1484d83a 	srl	r2,r2,r18
   89b00:	1988983a 	sll	r4,r3,r6
   89b04:	1c86d83a 	srl	r3,r3,r18
   89b08:	2088b03a 	or	r4,r4,r2
   89b0c:	2011883a 	mov	r8,r4
   89b10:	1813883a 	mov	r9,r3
   89b14:	d9000415 	stw	r4,16(sp)
   89b18:	d8c00515 	stw	r3,20(sp)
   89b1c:	003ed406 	br	89670 <__umoddi3+0x11c>
   89b20:	01400604 	movi	r5,24
   89b24:	2805883a 	mov	r2,r5
   89b28:	003ea606 	br	895c4 <__umoddi3+0x70>
   89b2c:	01400204 	movi	r5,8
   89b30:	2805883a 	mov	r2,r5
   89b34:	003ea306 	br	895c4 <__umoddi3+0x70>
   89b38:	01400204 	movi	r5,8
   89b3c:	2805883a 	mov	r2,r5
   89b40:	003edf06 	br	896c0 <__umoddi3+0x16c>
   89b44:	01400204 	movi	r5,8
   89b48:	2805883a 	mov	r2,r5
   89b4c:	003ef206 	br	89718 <__umoddi3+0x1c4>
   89b50:	01400604 	movi	r5,24
   89b54:	2805883a 	mov	r2,r5
   89b58:	003eef06 	br	89718 <__umoddi3+0x1c4>
   89b5c:	01400604 	movi	r5,24
   89b60:	2805883a 	mov	r2,r5
   89b64:	003ed606 	br	896c0 <__umoddi3+0x16c>
   89b68:	153fa92e 	bgeu	r2,r20,89a10 <__umoddi3+0x4bc>
   89b6c:	843fffc4 	addi	r16,r16,-1
   89b70:	1585883a 	add	r2,r2,r22
   89b74:	003fa606 	br	89a10 <__umoddi3+0x4bc>
   89b78:	157f912e 	bgeu	r2,r21,899c0 <__umoddi3+0x46c>
   89b7c:	e73fffc4 	addi	fp,fp,-1
   89b80:	1585883a 	add	r2,r2,r22
   89b84:	003f8e06 	br	899c0 <__umoddi3+0x46c>
   89b88:	157f542e 	bgeu	r2,r21,898dc <__umoddi3+0x388>
   89b8c:	14c5883a 	add	r2,r2,r19
   89b90:	003f5206 	br	898dc <__umoddi3+0x388>
   89b94:	14c5883a 	add	r2,r2,r19
   89b98:	003efc06 	br	8978c <__umoddi3+0x238>
   89b9c:	14c5883a 	add	r2,r2,r19
   89ba0:	003ea606 	br	8963c <__umoddi3+0xe8>
   89ba4:	d8800117 	ldw	r2,4(sp)
   89ba8:	113fc836 	bltu	r2,r4,89acc <__umoddi3+0x578>
   89bac:	000d883a 	mov	r6,zero
   89bb0:	003fcd06 	br	89ae8 <__umoddi3+0x594>

00089bb4 <_fpadd_parts>:
   89bb4:	defff804 	addi	sp,sp,-32
   89bb8:	dcc00315 	stw	r19,12(sp)
   89bbc:	2027883a 	mov	r19,r4
   89bc0:	21000017 	ldw	r4,0(r4)
   89bc4:	00c00044 	movi	r3,1
   89bc8:	dd400515 	stw	r21,20(sp)
   89bcc:	dd000415 	stw	r20,16(sp)
   89bd0:	ddc00715 	stw	r23,28(sp)
   89bd4:	dd800615 	stw	r22,24(sp)
   89bd8:	dc800215 	stw	r18,8(sp)
   89bdc:	dc400115 	stw	r17,4(sp)
   89be0:	dc000015 	stw	r16,0(sp)
   89be4:	282b883a 	mov	r21,r5
   89be8:	3029883a 	mov	r20,r6
   89bec:	1900632e 	bgeu	r3,r4,89d7c <_fpadd_parts+0x1c8>
   89bf0:	28800017 	ldw	r2,0(r5)
   89bf4:	1880812e 	bgeu	r3,r2,89dfc <_fpadd_parts+0x248>
   89bf8:	00c00104 	movi	r3,4
   89bfc:	20c0dc26 	beq	r4,r3,89f70 <_fpadd_parts+0x3bc>
   89c00:	10c07e26 	beq	r2,r3,89dfc <_fpadd_parts+0x248>
   89c04:	00c00084 	movi	r3,2
   89c08:	10c06726 	beq	r2,r3,89da8 <_fpadd_parts+0x1f4>
   89c0c:	20c07b26 	beq	r4,r3,89dfc <_fpadd_parts+0x248>
   89c10:	9dc00217 	ldw	r23,8(r19)
   89c14:	28c00217 	ldw	r3,8(r5)
   89c18:	9c400317 	ldw	r17,12(r19)
   89c1c:	2bc00317 	ldw	r15,12(r5)
   89c20:	b8cdc83a 	sub	r6,r23,r3
   89c24:	9c800417 	ldw	r18,16(r19)
   89c28:	2c000417 	ldw	r16,16(r5)
   89c2c:	3009883a 	mov	r4,r6
   89c30:	30009716 	blt	r6,zero,89e90 <_fpadd_parts+0x2dc>
   89c34:	00800fc4 	movi	r2,63
   89c38:	11806b16 	blt	r2,r6,89de8 <_fpadd_parts+0x234>
   89c3c:	0100a40e 	bge	zero,r4,89ed0 <_fpadd_parts+0x31c>
   89c40:	35bff804 	addi	r22,r6,-32
   89c44:	b000bc16 	blt	r22,zero,89f38 <_fpadd_parts+0x384>
   89c48:	8596d83a 	srl	r11,r16,r22
   89c4c:	0019883a 	mov	r12,zero
   89c50:	0013883a 	mov	r9,zero
   89c54:	01000044 	movi	r4,1
   89c58:	0015883a 	mov	r10,zero
   89c5c:	b000be16 	blt	r22,zero,89f58 <_fpadd_parts+0x3a4>
   89c60:	2590983a 	sll	r8,r4,r22
   89c64:	000f883a 	mov	r7,zero
   89c68:	00bfffc4 	movi	r2,-1
   89c6c:	3889883a 	add	r4,r7,r2
   89c70:	408b883a 	add	r5,r8,r2
   89c74:	21cd803a 	cmpltu	r6,r4,r7
   89c78:	314b883a 	add	r5,r6,r5
   89c7c:	7904703a 	and	r2,r15,r4
   89c80:	8146703a 	and	r3,r16,r5
   89c84:	10c4b03a 	or	r2,r2,r3
   89c88:	10000226 	beq	r2,zero,89c94 <_fpadd_parts+0xe0>
   89c8c:	02400044 	movi	r9,1
   89c90:	0015883a 	mov	r10,zero
   89c94:	5a5eb03a 	or	r15,r11,r9
   89c98:	62a0b03a 	or	r16,r12,r10
   89c9c:	99400117 	ldw	r5,4(r19)
   89ca0:	a8800117 	ldw	r2,4(r21)
   89ca4:	28806e26 	beq	r5,r2,89e60 <_fpadd_parts+0x2ac>
   89ca8:	28006626 	beq	r5,zero,89e44 <_fpadd_parts+0x290>
   89cac:	7c45c83a 	sub	r2,r15,r17
   89cb0:	7889803a 	cmpltu	r4,r15,r2
   89cb4:	8487c83a 	sub	r3,r16,r18
   89cb8:	1909c83a 	sub	r4,r3,r4
   89cbc:	100d883a 	mov	r6,r2
   89cc0:	200f883a 	mov	r7,r4
   89cc4:	38007716 	blt	r7,zero,89ea4 <_fpadd_parts+0x2f0>
   89cc8:	a5c00215 	stw	r23,8(r20)
   89ccc:	a1c00415 	stw	r7,16(r20)
   89cd0:	a0000115 	stw	zero,4(r20)
   89cd4:	a1800315 	stw	r6,12(r20)
   89cd8:	a2000317 	ldw	r8,12(r20)
   89cdc:	a2400417 	ldw	r9,16(r20)
   89ce0:	00bfffc4 	movi	r2,-1
   89ce4:	408b883a 	add	r5,r8,r2
   89ce8:	2a09803a 	cmpltu	r4,r5,r8
   89cec:	488d883a 	add	r6,r9,r2
   89cf0:	01c40034 	movhi	r7,4096
   89cf4:	39ffffc4 	addi	r7,r7,-1
   89cf8:	218d883a 	add	r6,r4,r6
   89cfc:	39801736 	bltu	r7,r6,89d5c <_fpadd_parts+0x1a8>
   89d00:	31c06526 	beq	r6,r7,89e98 <_fpadd_parts+0x2e4>
   89d04:	a3000217 	ldw	r12,8(r20)
   89d08:	4209883a 	add	r4,r8,r8
   89d0c:	00bfffc4 	movi	r2,-1
   89d10:	220f803a 	cmpltu	r7,r4,r8
   89d14:	4a4b883a 	add	r5,r9,r9
   89d18:	394f883a 	add	r7,r7,r5
   89d1c:	2095883a 	add	r10,r4,r2
   89d20:	3897883a 	add	r11,r7,r2
   89d24:	510d803a 	cmpltu	r6,r10,r4
   89d28:	6099883a 	add	r12,r12,r2
   89d2c:	32d7883a 	add	r11,r6,r11
   89d30:	00840034 	movhi	r2,4096
   89d34:	10bfffc4 	addi	r2,r2,-1
   89d38:	2011883a 	mov	r8,r4
   89d3c:	3813883a 	mov	r9,r7
   89d40:	a1000315 	stw	r4,12(r20)
   89d44:	a1c00415 	stw	r7,16(r20)
   89d48:	a3000215 	stw	r12,8(r20)
   89d4c:	12c00336 	bltu	r2,r11,89d5c <_fpadd_parts+0x1a8>
   89d50:	58bfed1e 	bne	r11,r2,89d08 <_fpadd_parts+0x154>
   89d54:	00bfff84 	movi	r2,-2
   89d58:	12bfeb2e 	bgeu	r2,r10,89d08 <_fpadd_parts+0x154>
   89d5c:	a2800417 	ldw	r10,16(r20)
   89d60:	008000c4 	movi	r2,3
   89d64:	00c80034 	movhi	r3,8192
   89d68:	18ffffc4 	addi	r3,r3,-1
   89d6c:	a2400317 	ldw	r9,12(r20)
   89d70:	a0800015 	stw	r2,0(r20)
   89d74:	1a802336 	bltu	r3,r10,89e04 <_fpadd_parts+0x250>
   89d78:	a027883a 	mov	r19,r20
   89d7c:	9805883a 	mov	r2,r19
   89d80:	ddc00717 	ldw	r23,28(sp)
   89d84:	dd800617 	ldw	r22,24(sp)
   89d88:	dd400517 	ldw	r21,20(sp)
   89d8c:	dd000417 	ldw	r20,16(sp)
   89d90:	dcc00317 	ldw	r19,12(sp)
   89d94:	dc800217 	ldw	r18,8(sp)
   89d98:	dc400117 	ldw	r17,4(sp)
   89d9c:	dc000017 	ldw	r16,0(sp)
   89da0:	dec00804 	addi	sp,sp,32
   89da4:	f800283a 	ret
   89da8:	20fff41e 	bne	r4,r3,89d7c <_fpadd_parts+0x1c8>
   89dac:	31000015 	stw	r4,0(r6)
   89db0:	98800117 	ldw	r2,4(r19)
   89db4:	30800115 	stw	r2,4(r6)
   89db8:	98c00217 	ldw	r3,8(r19)
   89dbc:	30c00215 	stw	r3,8(r6)
   89dc0:	98800317 	ldw	r2,12(r19)
   89dc4:	30800315 	stw	r2,12(r6)
   89dc8:	98c00417 	ldw	r3,16(r19)
   89dcc:	30c00415 	stw	r3,16(r6)
   89dd0:	98800117 	ldw	r2,4(r19)
   89dd4:	28c00117 	ldw	r3,4(r5)
   89dd8:	3027883a 	mov	r19,r6
   89ddc:	10c4703a 	and	r2,r2,r3
   89de0:	30800115 	stw	r2,4(r6)
   89de4:	003fe506 	br	89d7c <_fpadd_parts+0x1c8>
   89de8:	1dc02616 	blt	r3,r23,89e84 <_fpadd_parts+0x2d0>
   89dec:	0023883a 	mov	r17,zero
   89df0:	182f883a 	mov	r23,r3
   89df4:	0025883a 	mov	r18,zero
   89df8:	003fa806 	br	89c9c <_fpadd_parts+0xe8>
   89dfc:	a827883a 	mov	r19,r21
   89e00:	003fde06 	br	89d7c <_fpadd_parts+0x1c8>
   89e04:	01800044 	movi	r6,1
   89e08:	500497fa 	slli	r2,r10,31
   89e0c:	4808d07a 	srli	r4,r9,1
   89e10:	518ad83a 	srl	r5,r10,r6
   89e14:	a2000217 	ldw	r8,8(r20)
   89e18:	1108b03a 	or	r4,r2,r4
   89e1c:	0007883a 	mov	r3,zero
   89e20:	4984703a 	and	r2,r9,r6
   89e24:	208cb03a 	or	r6,r4,r2
   89e28:	28ceb03a 	or	r7,r5,r3
   89e2c:	42000044 	addi	r8,r8,1
   89e30:	a027883a 	mov	r19,r20
   89e34:	a1c00415 	stw	r7,16(r20)
   89e38:	a2000215 	stw	r8,8(r20)
   89e3c:	a1800315 	stw	r6,12(r20)
   89e40:	003fce06 	br	89d7c <_fpadd_parts+0x1c8>
   89e44:	8bc5c83a 	sub	r2,r17,r15
   89e48:	8889803a 	cmpltu	r4,r17,r2
   89e4c:	9407c83a 	sub	r3,r18,r16
   89e50:	1909c83a 	sub	r4,r3,r4
   89e54:	100d883a 	mov	r6,r2
   89e58:	200f883a 	mov	r7,r4
   89e5c:	003f9906 	br	89cc4 <_fpadd_parts+0x110>
   89e60:	7c45883a 	add	r2,r15,r17
   89e64:	13c9803a 	cmpltu	r4,r2,r15
   89e68:	8487883a 	add	r3,r16,r18
   89e6c:	20c9883a 	add	r4,r4,r3
   89e70:	a1400115 	stw	r5,4(r20)
   89e74:	a5c00215 	stw	r23,8(r20)
   89e78:	a0800315 	stw	r2,12(r20)
   89e7c:	a1000415 	stw	r4,16(r20)
   89e80:	003fb606 	br	89d5c <_fpadd_parts+0x1a8>
   89e84:	001f883a 	mov	r15,zero
   89e88:	0021883a 	mov	r16,zero
   89e8c:	003f8306 	br	89c9c <_fpadd_parts+0xe8>
   89e90:	018dc83a 	sub	r6,zero,r6
   89e94:	003f6706 	br	89c34 <_fpadd_parts+0x80>
   89e98:	00bfff84 	movi	r2,-2
   89e9c:	117faf36 	bltu	r2,r5,89d5c <_fpadd_parts+0x1a8>
   89ea0:	003f9806 	br	89d04 <_fpadd_parts+0x150>
   89ea4:	0005883a 	mov	r2,zero
   89ea8:	1189c83a 	sub	r4,r2,r6
   89eac:	1105803a 	cmpltu	r2,r2,r4
   89eb0:	01cbc83a 	sub	r5,zero,r7
   89eb4:	2885c83a 	sub	r2,r5,r2
   89eb8:	01800044 	movi	r6,1
   89ebc:	a1800115 	stw	r6,4(r20)
   89ec0:	a5c00215 	stw	r23,8(r20)
   89ec4:	a1000315 	stw	r4,12(r20)
   89ec8:	a0800415 	stw	r2,16(r20)
   89ecc:	003f8206 	br	89cd8 <_fpadd_parts+0x124>
   89ed0:	203f7226 	beq	r4,zero,89c9c <_fpadd_parts+0xe8>
   89ed4:	35bff804 	addi	r22,r6,-32
   89ed8:	b9af883a 	add	r23,r23,r6
   89edc:	b0003116 	blt	r22,zero,89fa4 <_fpadd_parts+0x3f0>
   89ee0:	959ad83a 	srl	r13,r18,r22
   89ee4:	001d883a 	mov	r14,zero
   89ee8:	000f883a 	mov	r7,zero
   89eec:	01000044 	movi	r4,1
   89ef0:	0011883a 	mov	r8,zero
   89ef4:	b0002516 	blt	r22,zero,89f8c <_fpadd_parts+0x3d8>
   89ef8:	2594983a 	sll	r10,r4,r22
   89efc:	0013883a 	mov	r9,zero
   89f00:	00bfffc4 	movi	r2,-1
   89f04:	4889883a 	add	r4,r9,r2
   89f08:	508b883a 	add	r5,r10,r2
   89f0c:	224d803a 	cmpltu	r6,r4,r9
   89f10:	314b883a 	add	r5,r6,r5
   89f14:	8904703a 	and	r2,r17,r4
   89f18:	9146703a 	and	r3,r18,r5
   89f1c:	10c4b03a 	or	r2,r2,r3
   89f20:	10000226 	beq	r2,zero,89f2c <_fpadd_parts+0x378>
   89f24:	01c00044 	movi	r7,1
   89f28:	0011883a 	mov	r8,zero
   89f2c:	69e2b03a 	or	r17,r13,r7
   89f30:	7224b03a 	or	r18,r14,r8
   89f34:	003f5906 	br	89c9c <_fpadd_parts+0xe8>
   89f38:	8407883a 	add	r3,r16,r16
   89f3c:	008007c4 	movi	r2,31
   89f40:	1185c83a 	sub	r2,r2,r6
   89f44:	1886983a 	sll	r3,r3,r2
   89f48:	7996d83a 	srl	r11,r15,r6
   89f4c:	8198d83a 	srl	r12,r16,r6
   89f50:	1ad6b03a 	or	r11,r3,r11
   89f54:	003f3e06 	br	89c50 <_fpadd_parts+0x9c>
   89f58:	2006d07a 	srli	r3,r4,1
   89f5c:	008007c4 	movi	r2,31
   89f60:	1185c83a 	sub	r2,r2,r6
   89f64:	1890d83a 	srl	r8,r3,r2
   89f68:	218e983a 	sll	r7,r4,r6
   89f6c:	003f3e06 	br	89c68 <_fpadd_parts+0xb4>
   89f70:	113f821e 	bne	r2,r4,89d7c <_fpadd_parts+0x1c8>
   89f74:	28c00117 	ldw	r3,4(r5)
   89f78:	98800117 	ldw	r2,4(r19)
   89f7c:	10ff7f26 	beq	r2,r3,89d7c <_fpadd_parts+0x1c8>
   89f80:	04c00274 	movhi	r19,9
   89f84:	9cfc2904 	addi	r19,r19,-3932
   89f88:	003f7c06 	br	89d7c <_fpadd_parts+0x1c8>
   89f8c:	2006d07a 	srli	r3,r4,1
   89f90:	008007c4 	movi	r2,31
   89f94:	1185c83a 	sub	r2,r2,r6
   89f98:	1894d83a 	srl	r10,r3,r2
   89f9c:	2192983a 	sll	r9,r4,r6
   89fa0:	003fd706 	br	89f00 <_fpadd_parts+0x34c>
   89fa4:	9487883a 	add	r3,r18,r18
   89fa8:	008007c4 	movi	r2,31
   89fac:	1185c83a 	sub	r2,r2,r6
   89fb0:	1886983a 	sll	r3,r3,r2
   89fb4:	899ad83a 	srl	r13,r17,r6
   89fb8:	919cd83a 	srl	r14,r18,r6
   89fbc:	1b5ab03a 	or	r13,r3,r13
   89fc0:	003fc906 	br	89ee8 <_fpadd_parts+0x334>

00089fc4 <__subdf3>:
   89fc4:	deffea04 	addi	sp,sp,-88
   89fc8:	dcc01415 	stw	r19,80(sp)
   89fcc:	dcc00404 	addi	r19,sp,16
   89fd0:	2011883a 	mov	r8,r4
   89fd4:	2813883a 	mov	r9,r5
   89fd8:	dc401315 	stw	r17,76(sp)
   89fdc:	d809883a 	mov	r4,sp
   89fe0:	980b883a 	mov	r5,r19
   89fe4:	dc400904 	addi	r17,sp,36
   89fe8:	dfc01515 	stw	ra,84(sp)
   89fec:	da400115 	stw	r9,4(sp)
   89ff0:	d9c00315 	stw	r7,12(sp)
   89ff4:	da000015 	stw	r8,0(sp)
   89ff8:	d9800215 	stw	r6,8(sp)
   89ffc:	008b1d00 	call	8b1d0 <__unpack_d>
   8a000:	d9000204 	addi	r4,sp,8
   8a004:	880b883a 	mov	r5,r17
   8a008:	008b1d00 	call	8b1d0 <__unpack_d>
   8a00c:	d8800a17 	ldw	r2,40(sp)
   8a010:	880b883a 	mov	r5,r17
   8a014:	9809883a 	mov	r4,r19
   8a018:	d9800e04 	addi	r6,sp,56
   8a01c:	1080005c 	xori	r2,r2,1
   8a020:	d8800a15 	stw	r2,40(sp)
   8a024:	0089bb40 	call	89bb4 <_fpadd_parts>
   8a028:	1009883a 	mov	r4,r2
   8a02c:	008aebc0 	call	8aebc <__pack_d>
   8a030:	dfc01517 	ldw	ra,84(sp)
   8a034:	dcc01417 	ldw	r19,80(sp)
   8a038:	dc401317 	ldw	r17,76(sp)
   8a03c:	dec01604 	addi	sp,sp,88
   8a040:	f800283a 	ret

0008a044 <__adddf3>:
   8a044:	deffea04 	addi	sp,sp,-88
   8a048:	dcc01415 	stw	r19,80(sp)
   8a04c:	dcc00404 	addi	r19,sp,16
   8a050:	2011883a 	mov	r8,r4
   8a054:	2813883a 	mov	r9,r5
   8a058:	dc401315 	stw	r17,76(sp)
   8a05c:	d809883a 	mov	r4,sp
   8a060:	980b883a 	mov	r5,r19
   8a064:	dc400904 	addi	r17,sp,36
   8a068:	dfc01515 	stw	ra,84(sp)
   8a06c:	da400115 	stw	r9,4(sp)
   8a070:	d9c00315 	stw	r7,12(sp)
   8a074:	da000015 	stw	r8,0(sp)
   8a078:	d9800215 	stw	r6,8(sp)
   8a07c:	008b1d00 	call	8b1d0 <__unpack_d>
   8a080:	d9000204 	addi	r4,sp,8
   8a084:	880b883a 	mov	r5,r17
   8a088:	008b1d00 	call	8b1d0 <__unpack_d>
   8a08c:	d9800e04 	addi	r6,sp,56
   8a090:	9809883a 	mov	r4,r19
   8a094:	880b883a 	mov	r5,r17
   8a098:	0089bb40 	call	89bb4 <_fpadd_parts>
   8a09c:	1009883a 	mov	r4,r2
   8a0a0:	008aebc0 	call	8aebc <__pack_d>
   8a0a4:	dfc01517 	ldw	ra,84(sp)
   8a0a8:	dcc01417 	ldw	r19,80(sp)
   8a0ac:	dc401317 	ldw	r17,76(sp)
   8a0b0:	dec01604 	addi	sp,sp,88
   8a0b4:	f800283a 	ret

0008a0b8 <__muldf3>:
   8a0b8:	deffe004 	addi	sp,sp,-128
   8a0bc:	dc401815 	stw	r17,96(sp)
   8a0c0:	dc400404 	addi	r17,sp,16
   8a0c4:	2011883a 	mov	r8,r4
   8a0c8:	2813883a 	mov	r9,r5
   8a0cc:	dc001715 	stw	r16,92(sp)
   8a0d0:	d809883a 	mov	r4,sp
   8a0d4:	880b883a 	mov	r5,r17
   8a0d8:	dc000904 	addi	r16,sp,36
   8a0dc:	dfc01f15 	stw	ra,124(sp)
   8a0e0:	da400115 	stw	r9,4(sp)
   8a0e4:	d9c00315 	stw	r7,12(sp)
   8a0e8:	da000015 	stw	r8,0(sp)
   8a0ec:	d9800215 	stw	r6,8(sp)
   8a0f0:	ddc01e15 	stw	r23,120(sp)
   8a0f4:	dd801d15 	stw	r22,116(sp)
   8a0f8:	dd401c15 	stw	r21,112(sp)
   8a0fc:	dd001b15 	stw	r20,108(sp)
   8a100:	dcc01a15 	stw	r19,104(sp)
   8a104:	dc801915 	stw	r18,100(sp)
   8a108:	008b1d00 	call	8b1d0 <__unpack_d>
   8a10c:	d9000204 	addi	r4,sp,8
   8a110:	800b883a 	mov	r5,r16
   8a114:	008b1d00 	call	8b1d0 <__unpack_d>
   8a118:	d9000417 	ldw	r4,16(sp)
   8a11c:	00800044 	movi	r2,1
   8a120:	1100102e 	bgeu	r2,r4,8a164 <__muldf3+0xac>
   8a124:	d8c00917 	ldw	r3,36(sp)
   8a128:	10c0062e 	bgeu	r2,r3,8a144 <__muldf3+0x8c>
   8a12c:	00800104 	movi	r2,4
   8a130:	20800a26 	beq	r4,r2,8a15c <__muldf3+0xa4>
   8a134:	1880cc26 	beq	r3,r2,8a468 <__muldf3+0x3b0>
   8a138:	00800084 	movi	r2,2
   8a13c:	20800926 	beq	r4,r2,8a164 <__muldf3+0xac>
   8a140:	1880191e 	bne	r3,r2,8a1a8 <__muldf3+0xf0>
   8a144:	d8c00a17 	ldw	r3,40(sp)
   8a148:	d8800517 	ldw	r2,20(sp)
   8a14c:	8009883a 	mov	r4,r16
   8a150:	10c4c03a 	cmpne	r2,r2,r3
   8a154:	d8800a15 	stw	r2,40(sp)
   8a158:	00000706 	br	8a178 <__muldf3+0xc0>
   8a15c:	00800084 	movi	r2,2
   8a160:	1880c326 	beq	r3,r2,8a470 <__muldf3+0x3b8>
   8a164:	d8800517 	ldw	r2,20(sp)
   8a168:	d8c00a17 	ldw	r3,40(sp)
   8a16c:	8809883a 	mov	r4,r17
   8a170:	10c4c03a 	cmpne	r2,r2,r3
   8a174:	d8800515 	stw	r2,20(sp)
   8a178:	008aebc0 	call	8aebc <__pack_d>
   8a17c:	dfc01f17 	ldw	ra,124(sp)
   8a180:	ddc01e17 	ldw	r23,120(sp)
   8a184:	dd801d17 	ldw	r22,116(sp)
   8a188:	dd401c17 	ldw	r21,112(sp)
   8a18c:	dd001b17 	ldw	r20,108(sp)
   8a190:	dcc01a17 	ldw	r19,104(sp)
   8a194:	dc801917 	ldw	r18,100(sp)
   8a198:	dc401817 	ldw	r17,96(sp)
   8a19c:	dc001717 	ldw	r16,92(sp)
   8a1a0:	dec02004 	addi	sp,sp,128
   8a1a4:	f800283a 	ret
   8a1a8:	dd800717 	ldw	r22,28(sp)
   8a1ac:	dc800c17 	ldw	r18,48(sp)
   8a1b0:	002b883a 	mov	r21,zero
   8a1b4:	0023883a 	mov	r17,zero
   8a1b8:	a80b883a 	mov	r5,r21
   8a1bc:	b00d883a 	mov	r6,r22
   8a1c0:	880f883a 	mov	r7,r17
   8a1c4:	ddc00817 	ldw	r23,32(sp)
   8a1c8:	dcc00d17 	ldw	r19,52(sp)
   8a1cc:	9009883a 	mov	r4,r18
   8a1d0:	008ad180 	call	8ad18 <__muldi3>
   8a1d4:	001b883a 	mov	r13,zero
   8a1d8:	680f883a 	mov	r7,r13
   8a1dc:	b009883a 	mov	r4,r22
   8a1e0:	000b883a 	mov	r5,zero
   8a1e4:	980d883a 	mov	r6,r19
   8a1e8:	b82d883a 	mov	r22,r23
   8a1ec:	002f883a 	mov	r23,zero
   8a1f0:	db401615 	stw	r13,88(sp)
   8a1f4:	d8801315 	stw	r2,76(sp)
   8a1f8:	d8c01415 	stw	r3,80(sp)
   8a1fc:	dcc01515 	stw	r19,84(sp)
   8a200:	008ad180 	call	8ad18 <__muldi3>
   8a204:	b00d883a 	mov	r6,r22
   8a208:	000b883a 	mov	r5,zero
   8a20c:	9009883a 	mov	r4,r18
   8a210:	b80f883a 	mov	r7,r23
   8a214:	1021883a 	mov	r16,r2
   8a218:	1823883a 	mov	r17,r3
   8a21c:	008ad180 	call	8ad18 <__muldi3>
   8a220:	8085883a 	add	r2,r16,r2
   8a224:	140d803a 	cmpltu	r6,r2,r16
   8a228:	88c7883a 	add	r3,r17,r3
   8a22c:	30cd883a 	add	r6,r6,r3
   8a230:	1029883a 	mov	r20,r2
   8a234:	302b883a 	mov	r21,r6
   8a238:	da801317 	ldw	r10,76(sp)
   8a23c:	dac01417 	ldw	r11,80(sp)
   8a240:	db001517 	ldw	r12,84(sp)
   8a244:	db401617 	ldw	r13,88(sp)
   8a248:	3440612e 	bgeu	r6,r17,8a3d0 <__muldf3+0x318>
   8a24c:	0009883a 	mov	r4,zero
   8a250:	5105883a 	add	r2,r10,r4
   8a254:	128d803a 	cmpltu	r6,r2,r10
   8a258:	5d07883a 	add	r3,r11,r20
   8a25c:	30cd883a 	add	r6,r6,r3
   8a260:	0021883a 	mov	r16,zero
   8a264:	04400044 	movi	r17,1
   8a268:	1025883a 	mov	r18,r2
   8a26c:	3027883a 	mov	r19,r6
   8a270:	32c06236 	bltu	r6,r11,8a3fc <__muldf3+0x344>
   8a274:	59807a26 	beq	r11,r6,8a460 <__muldf3+0x3a8>
   8a278:	680b883a 	mov	r5,r13
   8a27c:	b80f883a 	mov	r7,r23
   8a280:	6009883a 	mov	r4,r12
   8a284:	b00d883a 	mov	r6,r22
   8a288:	008ad180 	call	8ad18 <__muldi3>
   8a28c:	1009883a 	mov	r4,r2
   8a290:	000f883a 	mov	r7,zero
   8a294:	1545883a 	add	r2,r2,r21
   8a298:	1111803a 	cmpltu	r8,r2,r4
   8a29c:	19c7883a 	add	r3,r3,r7
   8a2a0:	40c7883a 	add	r3,r8,r3
   8a2a4:	88cb883a 	add	r5,r17,r3
   8a2a8:	d8c00617 	ldw	r3,24(sp)
   8a2ac:	8089883a 	add	r4,r16,r2
   8a2b0:	d8800b17 	ldw	r2,44(sp)
   8a2b4:	18c00104 	addi	r3,r3,4
   8a2b8:	240d803a 	cmpltu	r6,r4,r16
   8a2bc:	10c7883a 	add	r3,r2,r3
   8a2c0:	2013883a 	mov	r9,r4
   8a2c4:	d8800a17 	ldw	r2,40(sp)
   8a2c8:	d9000517 	ldw	r4,20(sp)
   8a2cc:	314d883a 	add	r6,r6,r5
   8a2d0:	3015883a 	mov	r10,r6
   8a2d4:	2088c03a 	cmpne	r4,r4,r2
   8a2d8:	00880034 	movhi	r2,8192
   8a2dc:	10bfffc4 	addi	r2,r2,-1
   8a2e0:	d9000f15 	stw	r4,60(sp)
   8a2e4:	d8c01015 	stw	r3,64(sp)
   8a2e8:	1180162e 	bgeu	r2,r6,8a344 <__muldf3+0x28c>
   8a2ec:	1811883a 	mov	r8,r3
   8a2f0:	101f883a 	mov	r15,r2
   8a2f4:	980497fa 	slli	r2,r19,31
   8a2f8:	9016d07a 	srli	r11,r18,1
   8a2fc:	500697fa 	slli	r3,r10,31
   8a300:	480cd07a 	srli	r6,r9,1
   8a304:	500ed07a 	srli	r7,r10,1
   8a308:	12d6b03a 	or	r11,r2,r11
   8a30c:	00800044 	movi	r2,1
   8a310:	198cb03a 	or	r6,r3,r6
   8a314:	4888703a 	and	r4,r9,r2
   8a318:	9818d07a 	srli	r12,r19,1
   8a31c:	001b883a 	mov	r13,zero
   8a320:	03a00034 	movhi	r14,32768
   8a324:	3013883a 	mov	r9,r6
   8a328:	3815883a 	mov	r10,r7
   8a32c:	4091883a 	add	r8,r8,r2
   8a330:	20000226 	beq	r4,zero,8a33c <__muldf3+0x284>
   8a334:	5b64b03a 	or	r18,r11,r13
   8a338:	63a6b03a 	or	r19,r12,r14
   8a33c:	7abfed36 	bltu	r15,r10,8a2f4 <__muldf3+0x23c>
   8a340:	da001015 	stw	r8,64(sp)
   8a344:	00840034 	movhi	r2,4096
   8a348:	10bfffc4 	addi	r2,r2,-1
   8a34c:	12801436 	bltu	r2,r10,8a3a0 <__muldf3+0x2e8>
   8a350:	da001017 	ldw	r8,64(sp)
   8a354:	101f883a 	mov	r15,r2
   8a358:	4a45883a 	add	r2,r9,r9
   8a35c:	124d803a 	cmpltu	r6,r2,r9
   8a360:	5287883a 	add	r3,r10,r10
   8a364:	9497883a 	add	r11,r18,r18
   8a368:	5c8f803a 	cmpltu	r7,r11,r18
   8a36c:	9cd9883a 	add	r12,r19,r19
   8a370:	01000044 	movi	r4,1
   8a374:	30cd883a 	add	r6,r6,r3
   8a378:	3b0f883a 	add	r7,r7,r12
   8a37c:	423fffc4 	addi	r8,r8,-1
   8a380:	1013883a 	mov	r9,r2
   8a384:	3015883a 	mov	r10,r6
   8a388:	111ab03a 	or	r13,r2,r4
   8a38c:	98003016 	blt	r19,zero,8a450 <__muldf3+0x398>
   8a390:	5825883a 	mov	r18,r11
   8a394:	3827883a 	mov	r19,r7
   8a398:	7abfef2e 	bgeu	r15,r10,8a358 <__muldf3+0x2a0>
   8a39c:	da001015 	stw	r8,64(sp)
   8a3a0:	00803fc4 	movi	r2,255
   8a3a4:	488e703a 	and	r7,r9,r2
   8a3a8:	00802004 	movi	r2,128
   8a3ac:	0007883a 	mov	r3,zero
   8a3b0:	0011883a 	mov	r8,zero
   8a3b4:	38801826 	beq	r7,r2,8a418 <__muldf3+0x360>
   8a3b8:	008000c4 	movi	r2,3
   8a3bc:	d9000e04 	addi	r4,sp,56
   8a3c0:	da801215 	stw	r10,72(sp)
   8a3c4:	d8800e15 	stw	r2,56(sp)
   8a3c8:	da401115 	stw	r9,68(sp)
   8a3cc:	003f6a06 	br	8a178 <__muldf3+0xc0>
   8a3d0:	89802126 	beq	r17,r6,8a458 <__muldf3+0x3a0>
   8a3d4:	0009883a 	mov	r4,zero
   8a3d8:	5105883a 	add	r2,r10,r4
   8a3dc:	128d803a 	cmpltu	r6,r2,r10
   8a3e0:	5d07883a 	add	r3,r11,r20
   8a3e4:	30cd883a 	add	r6,r6,r3
   8a3e8:	0021883a 	mov	r16,zero
   8a3ec:	0023883a 	mov	r17,zero
   8a3f0:	1025883a 	mov	r18,r2
   8a3f4:	3027883a 	mov	r19,r6
   8a3f8:	32ff9e2e 	bgeu	r6,r11,8a274 <__muldf3+0x1bc>
   8a3fc:	00800044 	movi	r2,1
   8a400:	8089883a 	add	r4,r16,r2
   8a404:	240d803a 	cmpltu	r6,r4,r16
   8a408:	344d883a 	add	r6,r6,r17
   8a40c:	2021883a 	mov	r16,r4
   8a410:	3023883a 	mov	r17,r6
   8a414:	003f9806 	br	8a278 <__muldf3+0x1c0>
   8a418:	403fe71e 	bne	r8,zero,8a3b8 <__muldf3+0x300>
   8a41c:	01004004 	movi	r4,256
   8a420:	4904703a 	and	r2,r9,r4
   8a424:	10c4b03a 	or	r2,r2,r3
   8a428:	103fe31e 	bne	r2,zero,8a3b8 <__muldf3+0x300>
   8a42c:	94c4b03a 	or	r2,r18,r19
   8a430:	103fe126 	beq	r2,zero,8a3b8 <__muldf3+0x300>
   8a434:	49c5883a 	add	r2,r9,r7
   8a438:	1251803a 	cmpltu	r8,r2,r9
   8a43c:	4291883a 	add	r8,r8,r10
   8a440:	013fc004 	movi	r4,-256
   8a444:	1112703a 	and	r9,r2,r4
   8a448:	4015883a 	mov	r10,r8
   8a44c:	003fda06 	br	8a3b8 <__muldf3+0x300>
   8a450:	6813883a 	mov	r9,r13
   8a454:	003fce06 	br	8a390 <__muldf3+0x2d8>
   8a458:	143f7c36 	bltu	r2,r16,8a24c <__muldf3+0x194>
   8a45c:	003fdd06 	br	8a3d4 <__muldf3+0x31c>
   8a460:	12bf852e 	bgeu	r2,r10,8a278 <__muldf3+0x1c0>
   8a464:	003fe506 	br	8a3fc <__muldf3+0x344>
   8a468:	00800084 	movi	r2,2
   8a46c:	20bf351e 	bne	r4,r2,8a144 <__muldf3+0x8c>
   8a470:	01000274 	movhi	r4,9
   8a474:	213c2904 	addi	r4,r4,-3932
   8a478:	003f3f06 	br	8a178 <__muldf3+0xc0>

0008a47c <__divdf3>:
   8a47c:	deffed04 	addi	sp,sp,-76
   8a480:	dcc01115 	stw	r19,68(sp)
   8a484:	dcc00404 	addi	r19,sp,16
   8a488:	2011883a 	mov	r8,r4
   8a48c:	2813883a 	mov	r9,r5
   8a490:	dc000e15 	stw	r16,56(sp)
   8a494:	d809883a 	mov	r4,sp
   8a498:	980b883a 	mov	r5,r19
   8a49c:	dc000904 	addi	r16,sp,36
   8a4a0:	dfc01215 	stw	ra,72(sp)
   8a4a4:	da400115 	stw	r9,4(sp)
   8a4a8:	d9c00315 	stw	r7,12(sp)
   8a4ac:	da000015 	stw	r8,0(sp)
   8a4b0:	d9800215 	stw	r6,8(sp)
   8a4b4:	dc801015 	stw	r18,64(sp)
   8a4b8:	dc400f15 	stw	r17,60(sp)
   8a4bc:	008b1d00 	call	8b1d0 <__unpack_d>
   8a4c0:	d9000204 	addi	r4,sp,8
   8a4c4:	800b883a 	mov	r5,r16
   8a4c8:	008b1d00 	call	8b1d0 <__unpack_d>
   8a4cc:	d9000417 	ldw	r4,16(sp)
   8a4d0:	00800044 	movi	r2,1
   8a4d4:	11000b2e 	bgeu	r2,r4,8a504 <__divdf3+0x88>
   8a4d8:	d9400917 	ldw	r5,36(sp)
   8a4dc:	1140762e 	bgeu	r2,r5,8a6b8 <__divdf3+0x23c>
   8a4e0:	d8800517 	ldw	r2,20(sp)
   8a4e4:	d8c00a17 	ldw	r3,40(sp)
   8a4e8:	01800104 	movi	r6,4
   8a4ec:	10c4f03a 	xor	r2,r2,r3
   8a4f0:	d8800515 	stw	r2,20(sp)
   8a4f4:	21800226 	beq	r4,r6,8a500 <__divdf3+0x84>
   8a4f8:	00800084 	movi	r2,2
   8a4fc:	2080141e 	bne	r4,r2,8a550 <__divdf3+0xd4>
   8a500:	29000926 	beq	r5,r4,8a528 <__divdf3+0xac>
   8a504:	9809883a 	mov	r4,r19
   8a508:	008aebc0 	call	8aebc <__pack_d>
   8a50c:	dfc01217 	ldw	ra,72(sp)
   8a510:	dcc01117 	ldw	r19,68(sp)
   8a514:	dc801017 	ldw	r18,64(sp)
   8a518:	dc400f17 	ldw	r17,60(sp)
   8a51c:	dc000e17 	ldw	r16,56(sp)
   8a520:	dec01304 	addi	sp,sp,76
   8a524:	f800283a 	ret
   8a528:	01000274 	movhi	r4,9
   8a52c:	213c2904 	addi	r4,r4,-3932
   8a530:	008aebc0 	call	8aebc <__pack_d>
   8a534:	dfc01217 	ldw	ra,72(sp)
   8a538:	dcc01117 	ldw	r19,68(sp)
   8a53c:	dc801017 	ldw	r18,64(sp)
   8a540:	dc400f17 	ldw	r17,60(sp)
   8a544:	dc000e17 	ldw	r16,56(sp)
   8a548:	dec01304 	addi	sp,sp,76
   8a54c:	f800283a 	ret
   8a550:	29805b26 	beq	r5,r6,8a6c0 <__divdf3+0x244>
   8a554:	28802d26 	beq	r5,r2,8a60c <__divdf3+0x190>
   8a558:	d8c00617 	ldw	r3,24(sp)
   8a55c:	d8800b17 	ldw	r2,44(sp)
   8a560:	d9c00817 	ldw	r7,32(sp)
   8a564:	dc400d17 	ldw	r17,52(sp)
   8a568:	188bc83a 	sub	r5,r3,r2
   8a56c:	d9800717 	ldw	r6,28(sp)
   8a570:	dc000c17 	ldw	r16,48(sp)
   8a574:	d9400615 	stw	r5,24(sp)
   8a578:	3c403836 	bltu	r7,r17,8a65c <__divdf3+0x1e0>
   8a57c:	89c03626 	beq	r17,r7,8a658 <__divdf3+0x1dc>
   8a580:	0015883a 	mov	r10,zero
   8a584:	001d883a 	mov	r14,zero
   8a588:	02c40034 	movhi	r11,4096
   8a58c:	001f883a 	mov	r15,zero
   8a590:	003f883a 	mov	ra,zero
   8a594:	04800f44 	movi	r18,61
   8a598:	00000f06 	br	8a5d8 <__divdf3+0x15c>
   8a59c:	601d883a 	mov	r14,r12
   8a5a0:	681f883a 	mov	r15,r13
   8a5a4:	400d883a 	mov	r6,r8
   8a5a8:	100f883a 	mov	r7,r2
   8a5ac:	3191883a 	add	r8,r6,r6
   8a5b0:	5808d07a 	srli	r4,r11,1
   8a5b4:	4185803a 	cmpltu	r2,r8,r6
   8a5b8:	39d3883a 	add	r9,r7,r7
   8a5bc:	28c6b03a 	or	r3,r5,r3
   8a5c0:	1245883a 	add	r2,r2,r9
   8a5c4:	1815883a 	mov	r10,r3
   8a5c8:	2017883a 	mov	r11,r4
   8a5cc:	400d883a 	mov	r6,r8
   8a5d0:	100f883a 	mov	r7,r2
   8a5d4:	fc801726 	beq	ra,r18,8a634 <__divdf3+0x1b8>
   8a5d8:	580a97fa 	slli	r5,r11,31
   8a5dc:	5006d07a 	srli	r3,r10,1
   8a5e0:	ffc00044 	addi	ra,ra,1
   8a5e4:	3c7ff136 	bltu	r7,r17,8a5ac <__divdf3+0x130>
   8a5e8:	3411c83a 	sub	r8,r6,r16
   8a5ec:	3205803a 	cmpltu	r2,r6,r8
   8a5f0:	3c53c83a 	sub	r9,r7,r17
   8a5f4:	7298b03a 	or	r12,r14,r10
   8a5f8:	7adab03a 	or	r13,r15,r11
   8a5fc:	4885c83a 	sub	r2,r9,r2
   8a600:	89ffe61e 	bne	r17,r7,8a59c <__divdf3+0x120>
   8a604:	343fe936 	bltu	r6,r16,8a5ac <__divdf3+0x130>
   8a608:	003fe406 	br	8a59c <__divdf3+0x120>
   8a60c:	9809883a 	mov	r4,r19
   8a610:	d9800415 	stw	r6,16(sp)
   8a614:	008aebc0 	call	8aebc <__pack_d>
   8a618:	dfc01217 	ldw	ra,72(sp)
   8a61c:	dcc01117 	ldw	r19,68(sp)
   8a620:	dc801017 	ldw	r18,64(sp)
   8a624:	dc400f17 	ldw	r17,60(sp)
   8a628:	dc000e17 	ldw	r16,56(sp)
   8a62c:	dec01304 	addi	sp,sp,76
   8a630:	f800283a 	ret
   8a634:	00803fc4 	movi	r2,255
   8a638:	7090703a 	and	r8,r14,r2
   8a63c:	00802004 	movi	r2,128
   8a640:	0007883a 	mov	r3,zero
   8a644:	0013883a 	mov	r9,zero
   8a648:	40800d26 	beq	r8,r2,8a680 <__divdf3+0x204>
   8a64c:	dbc00815 	stw	r15,32(sp)
   8a650:	db800715 	stw	r14,28(sp)
   8a654:	003fab06 	br	8a504 <__divdf3+0x88>
   8a658:	343fc92e 	bgeu	r6,r16,8a580 <__divdf3+0x104>
   8a65c:	3185883a 	add	r2,r6,r6
   8a660:	1189803a 	cmpltu	r4,r2,r6
   8a664:	39c7883a 	add	r3,r7,r7
   8a668:	20c9883a 	add	r4,r4,r3
   8a66c:	297fffc4 	addi	r5,r5,-1
   8a670:	100d883a 	mov	r6,r2
   8a674:	200f883a 	mov	r7,r4
   8a678:	d9400615 	stw	r5,24(sp)
   8a67c:	003fc006 	br	8a580 <__divdf3+0x104>
   8a680:	483ff21e 	bne	r9,zero,8a64c <__divdf3+0x1d0>
   8a684:	01004004 	movi	r4,256
   8a688:	7104703a 	and	r2,r14,r4
   8a68c:	10c4b03a 	or	r2,r2,r3
   8a690:	103fee1e 	bne	r2,zero,8a64c <__divdf3+0x1d0>
   8a694:	31c4b03a 	or	r2,r6,r7
   8a698:	103fec26 	beq	r2,zero,8a64c <__divdf3+0x1d0>
   8a69c:	7205883a 	add	r2,r14,r8
   8a6a0:	1391803a 	cmpltu	r8,r2,r14
   8a6a4:	43d1883a 	add	r8,r8,r15
   8a6a8:	013fc004 	movi	r4,-256
   8a6ac:	111c703a 	and	r14,r2,r4
   8a6b0:	401f883a 	mov	r15,r8
   8a6b4:	003fe506 	br	8a64c <__divdf3+0x1d0>
   8a6b8:	8009883a 	mov	r4,r16
   8a6bc:	003f9206 	br	8a508 <__divdf3+0x8c>
   8a6c0:	9809883a 	mov	r4,r19
   8a6c4:	d8000715 	stw	zero,28(sp)
   8a6c8:	d8000815 	stw	zero,32(sp)
   8a6cc:	d8000615 	stw	zero,24(sp)
   8a6d0:	003f8d06 	br	8a508 <__divdf3+0x8c>

0008a6d4 <__eqdf2>:
   8a6d4:	deffef04 	addi	sp,sp,-68
   8a6d8:	dc400f15 	stw	r17,60(sp)
   8a6dc:	dc400404 	addi	r17,sp,16
   8a6e0:	2005883a 	mov	r2,r4
   8a6e4:	2807883a 	mov	r3,r5
   8a6e8:	dc000e15 	stw	r16,56(sp)
   8a6ec:	d809883a 	mov	r4,sp
   8a6f0:	880b883a 	mov	r5,r17
   8a6f4:	dc000904 	addi	r16,sp,36
   8a6f8:	d8c00115 	stw	r3,4(sp)
   8a6fc:	d8800015 	stw	r2,0(sp)
   8a700:	d9800215 	stw	r6,8(sp)
   8a704:	dfc01015 	stw	ra,64(sp)
   8a708:	d9c00315 	stw	r7,12(sp)
   8a70c:	008b1d00 	call	8b1d0 <__unpack_d>
   8a710:	d9000204 	addi	r4,sp,8
   8a714:	800b883a 	mov	r5,r16
   8a718:	008b1d00 	call	8b1d0 <__unpack_d>
   8a71c:	d8800417 	ldw	r2,16(sp)
   8a720:	00c00044 	movi	r3,1
   8a724:	180d883a 	mov	r6,r3
   8a728:	1880062e 	bgeu	r3,r2,8a744 <__eqdf2+0x70>
   8a72c:	d8800917 	ldw	r2,36(sp)
   8a730:	8809883a 	mov	r4,r17
   8a734:	800b883a 	mov	r5,r16
   8a738:	1880022e 	bgeu	r3,r2,8a744 <__eqdf2+0x70>
   8a73c:	008b3080 	call	8b308 <__fpcmp_parts_d>
   8a740:	100d883a 	mov	r6,r2
   8a744:	3005883a 	mov	r2,r6
   8a748:	dfc01017 	ldw	ra,64(sp)
   8a74c:	dc400f17 	ldw	r17,60(sp)
   8a750:	dc000e17 	ldw	r16,56(sp)
   8a754:	dec01104 	addi	sp,sp,68
   8a758:	f800283a 	ret

0008a75c <__nedf2>:
   8a75c:	deffef04 	addi	sp,sp,-68
   8a760:	dc400f15 	stw	r17,60(sp)
   8a764:	dc400404 	addi	r17,sp,16
   8a768:	2005883a 	mov	r2,r4
   8a76c:	2807883a 	mov	r3,r5
   8a770:	dc000e15 	stw	r16,56(sp)
   8a774:	d809883a 	mov	r4,sp
   8a778:	880b883a 	mov	r5,r17
   8a77c:	dc000904 	addi	r16,sp,36
   8a780:	d8c00115 	stw	r3,4(sp)
   8a784:	d8800015 	stw	r2,0(sp)
   8a788:	d9800215 	stw	r6,8(sp)
   8a78c:	dfc01015 	stw	ra,64(sp)
   8a790:	d9c00315 	stw	r7,12(sp)
   8a794:	008b1d00 	call	8b1d0 <__unpack_d>
   8a798:	d9000204 	addi	r4,sp,8
   8a79c:	800b883a 	mov	r5,r16
   8a7a0:	008b1d00 	call	8b1d0 <__unpack_d>
   8a7a4:	d8800417 	ldw	r2,16(sp)
   8a7a8:	00c00044 	movi	r3,1
   8a7ac:	180d883a 	mov	r6,r3
   8a7b0:	1880062e 	bgeu	r3,r2,8a7cc <__nedf2+0x70>
   8a7b4:	d8800917 	ldw	r2,36(sp)
   8a7b8:	8809883a 	mov	r4,r17
   8a7bc:	800b883a 	mov	r5,r16
   8a7c0:	1880022e 	bgeu	r3,r2,8a7cc <__nedf2+0x70>
   8a7c4:	008b3080 	call	8b308 <__fpcmp_parts_d>
   8a7c8:	100d883a 	mov	r6,r2
   8a7cc:	3005883a 	mov	r2,r6
   8a7d0:	dfc01017 	ldw	ra,64(sp)
   8a7d4:	dc400f17 	ldw	r17,60(sp)
   8a7d8:	dc000e17 	ldw	r16,56(sp)
   8a7dc:	dec01104 	addi	sp,sp,68
   8a7e0:	f800283a 	ret

0008a7e4 <__gtdf2>:
   8a7e4:	deffef04 	addi	sp,sp,-68
   8a7e8:	dc400f15 	stw	r17,60(sp)
   8a7ec:	dc400404 	addi	r17,sp,16
   8a7f0:	2005883a 	mov	r2,r4
   8a7f4:	2807883a 	mov	r3,r5
   8a7f8:	dc000e15 	stw	r16,56(sp)
   8a7fc:	d809883a 	mov	r4,sp
   8a800:	880b883a 	mov	r5,r17
   8a804:	dc000904 	addi	r16,sp,36
   8a808:	d8c00115 	stw	r3,4(sp)
   8a80c:	d8800015 	stw	r2,0(sp)
   8a810:	d9800215 	stw	r6,8(sp)
   8a814:	dfc01015 	stw	ra,64(sp)
   8a818:	d9c00315 	stw	r7,12(sp)
   8a81c:	008b1d00 	call	8b1d0 <__unpack_d>
   8a820:	d9000204 	addi	r4,sp,8
   8a824:	800b883a 	mov	r5,r16
   8a828:	008b1d00 	call	8b1d0 <__unpack_d>
   8a82c:	d8800417 	ldw	r2,16(sp)
   8a830:	00c00044 	movi	r3,1
   8a834:	01bfffc4 	movi	r6,-1
   8a838:	1880062e 	bgeu	r3,r2,8a854 <__gtdf2+0x70>
   8a83c:	d8800917 	ldw	r2,36(sp)
   8a840:	8809883a 	mov	r4,r17
   8a844:	800b883a 	mov	r5,r16
   8a848:	1880022e 	bgeu	r3,r2,8a854 <__gtdf2+0x70>
   8a84c:	008b3080 	call	8b308 <__fpcmp_parts_d>
   8a850:	100d883a 	mov	r6,r2
   8a854:	3005883a 	mov	r2,r6
   8a858:	dfc01017 	ldw	ra,64(sp)
   8a85c:	dc400f17 	ldw	r17,60(sp)
   8a860:	dc000e17 	ldw	r16,56(sp)
   8a864:	dec01104 	addi	sp,sp,68
   8a868:	f800283a 	ret

0008a86c <__gedf2>:
   8a86c:	deffef04 	addi	sp,sp,-68
   8a870:	dc400f15 	stw	r17,60(sp)
   8a874:	dc400404 	addi	r17,sp,16
   8a878:	2005883a 	mov	r2,r4
   8a87c:	2807883a 	mov	r3,r5
   8a880:	dc000e15 	stw	r16,56(sp)
   8a884:	d809883a 	mov	r4,sp
   8a888:	880b883a 	mov	r5,r17
   8a88c:	dc000904 	addi	r16,sp,36
   8a890:	d8c00115 	stw	r3,4(sp)
   8a894:	d8800015 	stw	r2,0(sp)
   8a898:	d9800215 	stw	r6,8(sp)
   8a89c:	dfc01015 	stw	ra,64(sp)
   8a8a0:	d9c00315 	stw	r7,12(sp)
   8a8a4:	008b1d00 	call	8b1d0 <__unpack_d>
   8a8a8:	d9000204 	addi	r4,sp,8
   8a8ac:	800b883a 	mov	r5,r16
   8a8b0:	008b1d00 	call	8b1d0 <__unpack_d>
   8a8b4:	d8800417 	ldw	r2,16(sp)
   8a8b8:	00c00044 	movi	r3,1
   8a8bc:	01bfffc4 	movi	r6,-1
   8a8c0:	1880062e 	bgeu	r3,r2,8a8dc <__gedf2+0x70>
   8a8c4:	d8800917 	ldw	r2,36(sp)
   8a8c8:	8809883a 	mov	r4,r17
   8a8cc:	800b883a 	mov	r5,r16
   8a8d0:	1880022e 	bgeu	r3,r2,8a8dc <__gedf2+0x70>
   8a8d4:	008b3080 	call	8b308 <__fpcmp_parts_d>
   8a8d8:	100d883a 	mov	r6,r2
   8a8dc:	3005883a 	mov	r2,r6
   8a8e0:	dfc01017 	ldw	ra,64(sp)
   8a8e4:	dc400f17 	ldw	r17,60(sp)
   8a8e8:	dc000e17 	ldw	r16,56(sp)
   8a8ec:	dec01104 	addi	sp,sp,68
   8a8f0:	f800283a 	ret

0008a8f4 <__ltdf2>:
   8a8f4:	deffef04 	addi	sp,sp,-68
   8a8f8:	dc400f15 	stw	r17,60(sp)
   8a8fc:	dc400404 	addi	r17,sp,16
   8a900:	2005883a 	mov	r2,r4
   8a904:	2807883a 	mov	r3,r5
   8a908:	dc000e15 	stw	r16,56(sp)
   8a90c:	d809883a 	mov	r4,sp
   8a910:	880b883a 	mov	r5,r17
   8a914:	dc000904 	addi	r16,sp,36
   8a918:	d8c00115 	stw	r3,4(sp)
   8a91c:	d8800015 	stw	r2,0(sp)
   8a920:	d9800215 	stw	r6,8(sp)
   8a924:	dfc01015 	stw	ra,64(sp)
   8a928:	d9c00315 	stw	r7,12(sp)
   8a92c:	008b1d00 	call	8b1d0 <__unpack_d>
   8a930:	d9000204 	addi	r4,sp,8
   8a934:	800b883a 	mov	r5,r16
   8a938:	008b1d00 	call	8b1d0 <__unpack_d>
   8a93c:	d8800417 	ldw	r2,16(sp)
   8a940:	00c00044 	movi	r3,1
   8a944:	180d883a 	mov	r6,r3
   8a948:	1880062e 	bgeu	r3,r2,8a964 <__ltdf2+0x70>
   8a94c:	d8800917 	ldw	r2,36(sp)
   8a950:	8809883a 	mov	r4,r17
   8a954:	800b883a 	mov	r5,r16
   8a958:	1880022e 	bgeu	r3,r2,8a964 <__ltdf2+0x70>
   8a95c:	008b3080 	call	8b308 <__fpcmp_parts_d>
   8a960:	100d883a 	mov	r6,r2
   8a964:	3005883a 	mov	r2,r6
   8a968:	dfc01017 	ldw	ra,64(sp)
   8a96c:	dc400f17 	ldw	r17,60(sp)
   8a970:	dc000e17 	ldw	r16,56(sp)
   8a974:	dec01104 	addi	sp,sp,68
   8a978:	f800283a 	ret

0008a97c <__floatsidf>:
   8a97c:	2006d7fa 	srli	r3,r4,31
   8a980:	defff604 	addi	sp,sp,-40
   8a984:	008000c4 	movi	r2,3
   8a988:	dfc00915 	stw	ra,36(sp)
   8a98c:	dcc00815 	stw	r19,32(sp)
   8a990:	dc800715 	stw	r18,28(sp)
   8a994:	dc400615 	stw	r17,24(sp)
   8a998:	dc000515 	stw	r16,20(sp)
   8a99c:	d8800015 	stw	r2,0(sp)
   8a9a0:	d8c00115 	stw	r3,4(sp)
   8a9a4:	20000f1e 	bne	r4,zero,8a9e4 <__floatsidf+0x68>
   8a9a8:	00800084 	movi	r2,2
   8a9ac:	d8800015 	stw	r2,0(sp)
   8a9b0:	d809883a 	mov	r4,sp
   8a9b4:	008aebc0 	call	8aebc <__pack_d>
   8a9b8:	1009883a 	mov	r4,r2
   8a9bc:	180b883a 	mov	r5,r3
   8a9c0:	2005883a 	mov	r2,r4
   8a9c4:	2807883a 	mov	r3,r5
   8a9c8:	dfc00917 	ldw	ra,36(sp)
   8a9cc:	dcc00817 	ldw	r19,32(sp)
   8a9d0:	dc800717 	ldw	r18,28(sp)
   8a9d4:	dc400617 	ldw	r17,24(sp)
   8a9d8:	dc000517 	ldw	r16,20(sp)
   8a9dc:	dec00a04 	addi	sp,sp,40
   8a9e0:	f800283a 	ret
   8a9e4:	00800f04 	movi	r2,60
   8a9e8:	1807003a 	cmpeq	r3,r3,zero
   8a9ec:	d8800215 	stw	r2,8(sp)
   8a9f0:	18001126 	beq	r3,zero,8aa38 <__floatsidf+0xbc>
   8a9f4:	0027883a 	mov	r19,zero
   8a9f8:	2025883a 	mov	r18,r4
   8a9fc:	d9000315 	stw	r4,12(sp)
   8aa00:	dcc00415 	stw	r19,16(sp)
   8aa04:	008ae3c0 	call	8ae3c <__clzsi2>
   8aa08:	11000744 	addi	r4,r2,29
   8aa0c:	013fe80e 	bge	zero,r4,8a9b0 <__floatsidf+0x34>
   8aa10:	10bfff44 	addi	r2,r2,-3
   8aa14:	10000c16 	blt	r2,zero,8aa48 <__floatsidf+0xcc>
   8aa18:	90a2983a 	sll	r17,r18,r2
   8aa1c:	0021883a 	mov	r16,zero
   8aa20:	d8800217 	ldw	r2,8(sp)
   8aa24:	dc400415 	stw	r17,16(sp)
   8aa28:	dc000315 	stw	r16,12(sp)
   8aa2c:	1105c83a 	sub	r2,r2,r4
   8aa30:	d8800215 	stw	r2,8(sp)
   8aa34:	003fde06 	br	8a9b0 <__floatsidf+0x34>
   8aa38:	00a00034 	movhi	r2,32768
   8aa3c:	20800a26 	beq	r4,r2,8aa68 <__floatsidf+0xec>
   8aa40:	0109c83a 	sub	r4,zero,r4
   8aa44:	003feb06 	br	8a9f4 <__floatsidf+0x78>
   8aa48:	9006d07a 	srli	r3,r18,1
   8aa4c:	008007c4 	movi	r2,31
   8aa50:	1105c83a 	sub	r2,r2,r4
   8aa54:	1886d83a 	srl	r3,r3,r2
   8aa58:	9922983a 	sll	r17,r19,r4
   8aa5c:	9120983a 	sll	r16,r18,r4
   8aa60:	1c62b03a 	or	r17,r3,r17
   8aa64:	003fee06 	br	8aa20 <__floatsidf+0xa4>
   8aa68:	0009883a 	mov	r4,zero
   8aa6c:	01707834 	movhi	r5,49632
   8aa70:	003fd306 	br	8a9c0 <__floatsidf+0x44>

0008aa74 <__fixdfsi>:
   8aa74:	defff804 	addi	sp,sp,-32
   8aa78:	2005883a 	mov	r2,r4
   8aa7c:	2807883a 	mov	r3,r5
   8aa80:	d809883a 	mov	r4,sp
   8aa84:	d9400204 	addi	r5,sp,8
   8aa88:	d8c00115 	stw	r3,4(sp)
   8aa8c:	d8800015 	stw	r2,0(sp)
   8aa90:	dfc00715 	stw	ra,28(sp)
   8aa94:	008b1d00 	call	8b1d0 <__unpack_d>
   8aa98:	d8c00217 	ldw	r3,8(sp)
   8aa9c:	00800084 	movi	r2,2
   8aaa0:	1880051e 	bne	r3,r2,8aab8 <__fixdfsi+0x44>
   8aaa4:	0007883a 	mov	r3,zero
   8aaa8:	1805883a 	mov	r2,r3
   8aaac:	dfc00717 	ldw	ra,28(sp)
   8aab0:	dec00804 	addi	sp,sp,32
   8aab4:	f800283a 	ret
   8aab8:	00800044 	movi	r2,1
   8aabc:	10fff92e 	bgeu	r2,r3,8aaa4 <__fixdfsi+0x30>
   8aac0:	00800104 	movi	r2,4
   8aac4:	18800426 	beq	r3,r2,8aad8 <__fixdfsi+0x64>
   8aac8:	d8c00417 	ldw	r3,16(sp)
   8aacc:	183ff516 	blt	r3,zero,8aaa4 <__fixdfsi+0x30>
   8aad0:	00800784 	movi	r2,30
   8aad4:	10c0080e 	bge	r2,r3,8aaf8 <__fixdfsi+0x84>
   8aad8:	d8800317 	ldw	r2,12(sp)
   8aadc:	1000121e 	bne	r2,zero,8ab28 <__fixdfsi+0xb4>
   8aae0:	00e00034 	movhi	r3,32768
   8aae4:	18ffffc4 	addi	r3,r3,-1
   8aae8:	1805883a 	mov	r2,r3
   8aaec:	dfc00717 	ldw	ra,28(sp)
   8aaf0:	dec00804 	addi	sp,sp,32
   8aaf4:	f800283a 	ret
   8aaf8:	00800f04 	movi	r2,60
   8aafc:	10d1c83a 	sub	r8,r2,r3
   8ab00:	40bff804 	addi	r2,r8,-32
   8ab04:	d9800517 	ldw	r6,20(sp)
   8ab08:	d9c00617 	ldw	r7,24(sp)
   8ab0c:	10000816 	blt	r2,zero,8ab30 <__fixdfsi+0xbc>
   8ab10:	3888d83a 	srl	r4,r7,r2
   8ab14:	d8800317 	ldw	r2,12(sp)
   8ab18:	2007883a 	mov	r3,r4
   8ab1c:	103fe226 	beq	r2,zero,8aaa8 <__fixdfsi+0x34>
   8ab20:	0107c83a 	sub	r3,zero,r4
   8ab24:	003fe006 	br	8aaa8 <__fixdfsi+0x34>
   8ab28:	00e00034 	movhi	r3,32768
   8ab2c:	003fde06 	br	8aaa8 <__fixdfsi+0x34>
   8ab30:	39c7883a 	add	r3,r7,r7
   8ab34:	008007c4 	movi	r2,31
   8ab38:	1205c83a 	sub	r2,r2,r8
   8ab3c:	1886983a 	sll	r3,r3,r2
   8ab40:	3208d83a 	srl	r4,r6,r8
   8ab44:	1908b03a 	or	r4,r3,r4
   8ab48:	003ff206 	br	8ab14 <__fixdfsi+0xa0>

0008ab4c <__floatunsidf>:
   8ab4c:	defff204 	addi	sp,sp,-56
   8ab50:	dfc00d15 	stw	ra,52(sp)
   8ab54:	ddc00c15 	stw	r23,48(sp)
   8ab58:	dd800b15 	stw	r22,44(sp)
   8ab5c:	dd400a15 	stw	r21,40(sp)
   8ab60:	dd000915 	stw	r20,36(sp)
   8ab64:	dcc00815 	stw	r19,32(sp)
   8ab68:	dc800715 	stw	r18,28(sp)
   8ab6c:	dc400615 	stw	r17,24(sp)
   8ab70:	dc000515 	stw	r16,20(sp)
   8ab74:	d8000115 	stw	zero,4(sp)
   8ab78:	20000f1e 	bne	r4,zero,8abb8 <__floatunsidf+0x6c>
   8ab7c:	00800084 	movi	r2,2
   8ab80:	d8800015 	stw	r2,0(sp)
   8ab84:	d809883a 	mov	r4,sp
   8ab88:	008aebc0 	call	8aebc <__pack_d>
   8ab8c:	dfc00d17 	ldw	ra,52(sp)
   8ab90:	ddc00c17 	ldw	r23,48(sp)
   8ab94:	dd800b17 	ldw	r22,44(sp)
   8ab98:	dd400a17 	ldw	r21,40(sp)
   8ab9c:	dd000917 	ldw	r20,36(sp)
   8aba0:	dcc00817 	ldw	r19,32(sp)
   8aba4:	dc800717 	ldw	r18,28(sp)
   8aba8:	dc400617 	ldw	r17,24(sp)
   8abac:	dc000517 	ldw	r16,20(sp)
   8abb0:	dec00e04 	addi	sp,sp,56
   8abb4:	f800283a 	ret
   8abb8:	008000c4 	movi	r2,3
   8abbc:	00c00f04 	movi	r3,60
   8abc0:	002f883a 	mov	r23,zero
   8abc4:	202d883a 	mov	r22,r4
   8abc8:	d8800015 	stw	r2,0(sp)
   8abcc:	d8c00215 	stw	r3,8(sp)
   8abd0:	d9000315 	stw	r4,12(sp)
   8abd4:	ddc00415 	stw	r23,16(sp)
   8abd8:	008ae3c0 	call	8ae3c <__clzsi2>
   8abdc:	12400744 	addi	r9,r2,29
   8abe0:	48000b16 	blt	r9,zero,8ac10 <__floatunsidf+0xc4>
   8abe4:	483fe726 	beq	r9,zero,8ab84 <__floatunsidf+0x38>
   8abe8:	10bfff44 	addi	r2,r2,-3
   8abec:	10002e16 	blt	r2,zero,8aca8 <__floatunsidf+0x15c>
   8abf0:	b0a2983a 	sll	r17,r22,r2
   8abf4:	0021883a 	mov	r16,zero
   8abf8:	d8800217 	ldw	r2,8(sp)
   8abfc:	dc400415 	stw	r17,16(sp)
   8ac00:	dc000315 	stw	r16,12(sp)
   8ac04:	1245c83a 	sub	r2,r2,r9
   8ac08:	d8800215 	stw	r2,8(sp)
   8ac0c:	003fdd06 	br	8ab84 <__floatunsidf+0x38>
   8ac10:	0255c83a 	sub	r10,zero,r9
   8ac14:	51bff804 	addi	r6,r10,-32
   8ac18:	30001b16 	blt	r6,zero,8ac88 <__floatunsidf+0x13c>
   8ac1c:	b9a8d83a 	srl	r20,r23,r6
   8ac20:	002b883a 	mov	r21,zero
   8ac24:	000f883a 	mov	r7,zero
   8ac28:	01000044 	movi	r4,1
   8ac2c:	0011883a 	mov	r8,zero
   8ac30:	30002516 	blt	r6,zero,8acc8 <__floatunsidf+0x17c>
   8ac34:	21a6983a 	sll	r19,r4,r6
   8ac38:	0025883a 	mov	r18,zero
   8ac3c:	00bfffc4 	movi	r2,-1
   8ac40:	9089883a 	add	r4,r18,r2
   8ac44:	988b883a 	add	r5,r19,r2
   8ac48:	248d803a 	cmpltu	r6,r4,r18
   8ac4c:	314b883a 	add	r5,r6,r5
   8ac50:	b104703a 	and	r2,r22,r4
   8ac54:	b946703a 	and	r3,r23,r5
   8ac58:	10c4b03a 	or	r2,r2,r3
   8ac5c:	10000226 	beq	r2,zero,8ac68 <__floatunsidf+0x11c>
   8ac60:	01c00044 	movi	r7,1
   8ac64:	0011883a 	mov	r8,zero
   8ac68:	d9000217 	ldw	r4,8(sp)
   8ac6c:	a1c4b03a 	or	r2,r20,r7
   8ac70:	aa06b03a 	or	r3,r21,r8
   8ac74:	2249c83a 	sub	r4,r4,r9
   8ac78:	d8c00415 	stw	r3,16(sp)
   8ac7c:	d9000215 	stw	r4,8(sp)
   8ac80:	d8800315 	stw	r2,12(sp)
   8ac84:	003fbf06 	br	8ab84 <__floatunsidf+0x38>
   8ac88:	bdc7883a 	add	r3,r23,r23
   8ac8c:	008007c4 	movi	r2,31
   8ac90:	1285c83a 	sub	r2,r2,r10
   8ac94:	1886983a 	sll	r3,r3,r2
   8ac98:	b2a8d83a 	srl	r20,r22,r10
   8ac9c:	baaad83a 	srl	r21,r23,r10
   8aca0:	1d28b03a 	or	r20,r3,r20
   8aca4:	003fdf06 	br	8ac24 <__floatunsidf+0xd8>
   8aca8:	b006d07a 	srli	r3,r22,1
   8acac:	008007c4 	movi	r2,31
   8acb0:	1245c83a 	sub	r2,r2,r9
   8acb4:	1886d83a 	srl	r3,r3,r2
   8acb8:	ba62983a 	sll	r17,r23,r9
   8acbc:	b260983a 	sll	r16,r22,r9
   8acc0:	1c62b03a 	or	r17,r3,r17
   8acc4:	003fcc06 	br	8abf8 <__floatunsidf+0xac>
   8acc8:	2006d07a 	srli	r3,r4,1
   8accc:	008007c4 	movi	r2,31
   8acd0:	1285c83a 	sub	r2,r2,r10
   8acd4:	18a6d83a 	srl	r19,r3,r2
   8acd8:	22a4983a 	sll	r18,r4,r10
   8acdc:	003fd706 	br	8ac3c <__floatunsidf+0xf0>

0008ace0 <__mulsi3>:
   8ace0:	20000a26 	beq	r4,zero,8ad0c <__mulsi3+0x2c>
   8ace4:	0007883a 	mov	r3,zero
   8ace8:	2080004c 	andi	r2,r4,1
   8acec:	1005003a 	cmpeq	r2,r2,zero
   8acf0:	2008d07a 	srli	r4,r4,1
   8acf4:	1000011e 	bne	r2,zero,8acfc <__mulsi3+0x1c>
   8acf8:	1947883a 	add	r3,r3,r5
   8acfc:	294b883a 	add	r5,r5,r5
   8ad00:	203ff91e 	bne	r4,zero,8ace8 <__mulsi3+0x8>
   8ad04:	1805883a 	mov	r2,r3
   8ad08:	f800283a 	ret
   8ad0c:	0007883a 	mov	r3,zero
   8ad10:	1805883a 	mov	r2,r3
   8ad14:	f800283a 	ret

0008ad18 <__muldi3>:
   8ad18:	defff204 	addi	sp,sp,-56
   8ad1c:	df000c15 	stw	fp,48(sp)
   8ad20:	3038d43a 	srli	fp,r6,16
   8ad24:	dd000815 	stw	r20,32(sp)
   8ad28:	dc400515 	stw	r17,20(sp)
   8ad2c:	2028d43a 	srli	r20,r4,16
   8ad30:	247fffcc 	andi	r17,r4,65535
   8ad34:	dc000415 	stw	r16,16(sp)
   8ad38:	343fffcc 	andi	r16,r6,65535
   8ad3c:	dcc00715 	stw	r19,28(sp)
   8ad40:	d9000015 	stw	r4,0(sp)
   8ad44:	2827883a 	mov	r19,r5
   8ad48:	8809883a 	mov	r4,r17
   8ad4c:	d9400115 	stw	r5,4(sp)
   8ad50:	800b883a 	mov	r5,r16
   8ad54:	d9800215 	stw	r6,8(sp)
   8ad58:	dfc00d15 	stw	ra,52(sp)
   8ad5c:	d9c00315 	stw	r7,12(sp)
   8ad60:	dd800a15 	stw	r22,40(sp)
   8ad64:	dd400915 	stw	r21,36(sp)
   8ad68:	302d883a 	mov	r22,r6
   8ad6c:	ddc00b15 	stw	r23,44(sp)
   8ad70:	dc800615 	stw	r18,24(sp)
   8ad74:	008ace00 	call	8ace0 <__mulsi3>
   8ad78:	8809883a 	mov	r4,r17
   8ad7c:	e00b883a 	mov	r5,fp
   8ad80:	102b883a 	mov	r21,r2
   8ad84:	008ace00 	call	8ace0 <__mulsi3>
   8ad88:	800b883a 	mov	r5,r16
   8ad8c:	a009883a 	mov	r4,r20
   8ad90:	1023883a 	mov	r17,r2
   8ad94:	008ace00 	call	8ace0 <__mulsi3>
   8ad98:	a009883a 	mov	r4,r20
   8ad9c:	e00b883a 	mov	r5,fp
   8ada0:	1021883a 	mov	r16,r2
   8ada4:	008ace00 	call	8ace0 <__mulsi3>
   8ada8:	a8ffffcc 	andi	r3,r21,65535
   8adac:	a82ad43a 	srli	r21,r21,16
   8adb0:	8c23883a 	add	r17,r17,r16
   8adb4:	1011883a 	mov	r8,r2
   8adb8:	ac6b883a 	add	r21,r21,r17
   8adbc:	a804943a 	slli	r2,r21,16
   8adc0:	b009883a 	mov	r4,r22
   8adc4:	980b883a 	mov	r5,r19
   8adc8:	10c7883a 	add	r3,r2,r3
   8adcc:	a812d43a 	srli	r9,r21,16
   8add0:	180d883a 	mov	r6,r3
   8add4:	ac00022e 	bgeu	r21,r16,8ade0 <__muldi3+0xc8>
   8add8:	00800074 	movhi	r2,1
   8addc:	4091883a 	add	r8,r8,r2
   8ade0:	4267883a 	add	r19,r8,r9
   8ade4:	302d883a 	mov	r22,r6
   8ade8:	008ace00 	call	8ace0 <__mulsi3>
   8adec:	d9400317 	ldw	r5,12(sp)
   8adf0:	d9000017 	ldw	r4,0(sp)
   8adf4:	1023883a 	mov	r17,r2
   8adf8:	008ace00 	call	8ace0 <__mulsi3>
   8adfc:	14cb883a 	add	r5,r2,r19
   8ae00:	894b883a 	add	r5,r17,r5
   8ae04:	b005883a 	mov	r2,r22
   8ae08:	2807883a 	mov	r3,r5
   8ae0c:	dfc00d17 	ldw	ra,52(sp)
   8ae10:	df000c17 	ldw	fp,48(sp)
   8ae14:	ddc00b17 	ldw	r23,44(sp)
   8ae18:	dd800a17 	ldw	r22,40(sp)
   8ae1c:	dd400917 	ldw	r21,36(sp)
   8ae20:	dd000817 	ldw	r20,32(sp)
   8ae24:	dcc00717 	ldw	r19,28(sp)
   8ae28:	dc800617 	ldw	r18,24(sp)
   8ae2c:	dc400517 	ldw	r17,20(sp)
   8ae30:	dc000417 	ldw	r16,16(sp)
   8ae34:	dec00e04 	addi	sp,sp,56
   8ae38:	f800283a 	ret

0008ae3c <__clzsi2>:
   8ae3c:	00bfffd4 	movui	r2,65535
   8ae40:	11000e36 	bltu	r2,r4,8ae7c <__clzsi2+0x40>
   8ae44:	00803fc4 	movi	r2,255
   8ae48:	01400204 	movi	r5,8
   8ae4c:	0007883a 	mov	r3,zero
   8ae50:	11001036 	bltu	r2,r4,8ae94 <__clzsi2+0x58>
   8ae54:	000b883a 	mov	r5,zero
   8ae58:	20c6d83a 	srl	r3,r4,r3
   8ae5c:	00800274 	movhi	r2,9
   8ae60:	10bc2e04 	addi	r2,r2,-3912
   8ae64:	1887883a 	add	r3,r3,r2
   8ae68:	18800003 	ldbu	r2,0(r3)
   8ae6c:	00c00804 	movi	r3,32
   8ae70:	2885883a 	add	r2,r5,r2
   8ae74:	1885c83a 	sub	r2,r3,r2
   8ae78:	f800283a 	ret
   8ae7c:	01400404 	movi	r5,16
   8ae80:	00804034 	movhi	r2,256
   8ae84:	10bfffc4 	addi	r2,r2,-1
   8ae88:	2807883a 	mov	r3,r5
   8ae8c:	113ff22e 	bgeu	r2,r4,8ae58 <__clzsi2+0x1c>
   8ae90:	01400604 	movi	r5,24
   8ae94:	2807883a 	mov	r3,r5
   8ae98:	20c6d83a 	srl	r3,r4,r3
   8ae9c:	00800274 	movhi	r2,9
   8aea0:	10bc2e04 	addi	r2,r2,-3912
   8aea4:	1887883a 	add	r3,r3,r2
   8aea8:	18800003 	ldbu	r2,0(r3)
   8aeac:	00c00804 	movi	r3,32
   8aeb0:	2885883a 	add	r2,r5,r2
   8aeb4:	1885c83a 	sub	r2,r3,r2
   8aeb8:	f800283a 	ret

0008aebc <__pack_d>:
   8aebc:	20c00017 	ldw	r3,0(r4)
   8aec0:	defffd04 	addi	sp,sp,-12
   8aec4:	dc000015 	stw	r16,0(sp)
   8aec8:	dc800215 	stw	r18,8(sp)
   8aecc:	dc400115 	stw	r17,4(sp)
   8aed0:	00800044 	movi	r2,1
   8aed4:	22000317 	ldw	r8,12(r4)
   8aed8:	001f883a 	mov	r15,zero
   8aedc:	22400417 	ldw	r9,16(r4)
   8aee0:	24000117 	ldw	r16,4(r4)
   8aee4:	10c0552e 	bgeu	r2,r3,8b03c <__pack_d+0x180>
   8aee8:	00800104 	movi	r2,4
   8aeec:	18804f26 	beq	r3,r2,8b02c <__pack_d+0x170>
   8aef0:	00800084 	movi	r2,2
   8aef4:	18800226 	beq	r3,r2,8af00 <__pack_d+0x44>
   8aef8:	4244b03a 	or	r2,r8,r9
   8aefc:	10001a1e 	bne	r2,zero,8af68 <__pack_d+0xac>
   8af00:	000d883a 	mov	r6,zero
   8af04:	000f883a 	mov	r7,zero
   8af08:	0011883a 	mov	r8,zero
   8af0c:	00800434 	movhi	r2,16
   8af10:	10bfffc4 	addi	r2,r2,-1
   8af14:	301d883a 	mov	r14,r6
   8af18:	3884703a 	and	r2,r7,r2
   8af1c:	400a953a 	slli	r5,r8,20
   8af20:	79bffc2c 	andhi	r6,r15,65520
   8af24:	308cb03a 	or	r6,r6,r2
   8af28:	00e00434 	movhi	r3,32784
   8af2c:	18ffffc4 	addi	r3,r3,-1
   8af30:	800497fa 	slli	r2,r16,31
   8af34:	30c6703a 	and	r3,r6,r3
   8af38:	1946b03a 	or	r3,r3,r5
   8af3c:	01600034 	movhi	r5,32768
   8af40:	297fffc4 	addi	r5,r5,-1
   8af44:	194a703a 	and	r5,r3,r5
   8af48:	288ab03a 	or	r5,r5,r2
   8af4c:	2807883a 	mov	r3,r5
   8af50:	7005883a 	mov	r2,r14
   8af54:	dc800217 	ldw	r18,8(sp)
   8af58:	dc400117 	ldw	r17,4(sp)
   8af5c:	dc000017 	ldw	r16,0(sp)
   8af60:	dec00304 	addi	sp,sp,12
   8af64:	f800283a 	ret
   8af68:	21000217 	ldw	r4,8(r4)
   8af6c:	00bf0084 	movi	r2,-1022
   8af70:	20803f16 	blt	r4,r2,8b070 <__pack_d+0x1b4>
   8af74:	0080ffc4 	movi	r2,1023
   8af78:	11002c16 	blt	r2,r4,8b02c <__pack_d+0x170>
   8af7c:	00803fc4 	movi	r2,255
   8af80:	408c703a 	and	r6,r8,r2
   8af84:	00802004 	movi	r2,128
   8af88:	0007883a 	mov	r3,zero
   8af8c:	000f883a 	mov	r7,zero
   8af90:	2280ffc4 	addi	r10,r4,1023
   8af94:	30801e26 	beq	r6,r2,8b010 <__pack_d+0x154>
   8af98:	00801fc4 	movi	r2,127
   8af9c:	4089883a 	add	r4,r8,r2
   8afa0:	220d803a 	cmpltu	r6,r4,r8
   8afa4:	324d883a 	add	r6,r6,r9
   8afa8:	2011883a 	mov	r8,r4
   8afac:	3013883a 	mov	r9,r6
   8afb0:	00880034 	movhi	r2,8192
   8afb4:	10bfffc4 	addi	r2,r2,-1
   8afb8:	12400d36 	bltu	r2,r9,8aff0 <__pack_d+0x134>
   8afbc:	4804963a 	slli	r2,r9,24
   8afc0:	400cd23a 	srli	r6,r8,8
   8afc4:	480ed23a 	srli	r7,r9,8
   8afc8:	013fffc4 	movi	r4,-1
   8afcc:	118cb03a 	or	r6,r2,r6
   8afd0:	01400434 	movhi	r5,16
   8afd4:	297fffc4 	addi	r5,r5,-1
   8afd8:	3104703a 	and	r2,r6,r4
   8afdc:	3946703a 	and	r3,r7,r5
   8afe0:	5201ffcc 	andi	r8,r10,2047
   8afe4:	100d883a 	mov	r6,r2
   8afe8:	180f883a 	mov	r7,r3
   8afec:	003fc706 	br	8af0c <__pack_d+0x50>
   8aff0:	480897fa 	slli	r4,r9,31
   8aff4:	4004d07a 	srli	r2,r8,1
   8aff8:	4806d07a 	srli	r3,r9,1
   8affc:	52800044 	addi	r10,r10,1
   8b000:	2084b03a 	or	r2,r4,r2
   8b004:	1011883a 	mov	r8,r2
   8b008:	1813883a 	mov	r9,r3
   8b00c:	003feb06 	br	8afbc <__pack_d+0x100>
   8b010:	383fe11e 	bne	r7,zero,8af98 <__pack_d+0xdc>
   8b014:	01004004 	movi	r4,256
   8b018:	4104703a 	and	r2,r8,r4
   8b01c:	10c4b03a 	or	r2,r2,r3
   8b020:	103fe326 	beq	r2,zero,8afb0 <__pack_d+0xf4>
   8b024:	3005883a 	mov	r2,r6
   8b028:	003fdc06 	br	8af9c <__pack_d+0xe0>
   8b02c:	000d883a 	mov	r6,zero
   8b030:	000f883a 	mov	r7,zero
   8b034:	0201ffc4 	movi	r8,2047
   8b038:	003fb406 	br	8af0c <__pack_d+0x50>
   8b03c:	0005883a 	mov	r2,zero
   8b040:	00c00234 	movhi	r3,8
   8b044:	408cb03a 	or	r6,r8,r2
   8b048:	48ceb03a 	or	r7,r9,r3
   8b04c:	013fffc4 	movi	r4,-1
   8b050:	01400434 	movhi	r5,16
   8b054:	297fffc4 	addi	r5,r5,-1
   8b058:	3104703a 	and	r2,r6,r4
   8b05c:	3946703a 	and	r3,r7,r5
   8b060:	100d883a 	mov	r6,r2
   8b064:	180f883a 	mov	r7,r3
   8b068:	0201ffc4 	movi	r8,2047
   8b06c:	003fa706 	br	8af0c <__pack_d+0x50>
   8b070:	1109c83a 	sub	r4,r2,r4
   8b074:	00800e04 	movi	r2,56
   8b078:	11004316 	blt	r2,r4,8b188 <__pack_d+0x2cc>
   8b07c:	21fff804 	addi	r7,r4,-32
   8b080:	38004516 	blt	r7,zero,8b198 <__pack_d+0x2dc>
   8b084:	49d8d83a 	srl	r12,r9,r7
   8b088:	001b883a 	mov	r13,zero
   8b08c:	0023883a 	mov	r17,zero
   8b090:	01400044 	movi	r5,1
   8b094:	0025883a 	mov	r18,zero
   8b098:	38004716 	blt	r7,zero,8b1b8 <__pack_d+0x2fc>
   8b09c:	29d6983a 	sll	r11,r5,r7
   8b0a0:	0015883a 	mov	r10,zero
   8b0a4:	00bfffc4 	movi	r2,-1
   8b0a8:	5089883a 	add	r4,r10,r2
   8b0ac:	588b883a 	add	r5,r11,r2
   8b0b0:	228d803a 	cmpltu	r6,r4,r10
   8b0b4:	314b883a 	add	r5,r6,r5
   8b0b8:	4104703a 	and	r2,r8,r4
   8b0bc:	4946703a 	and	r3,r9,r5
   8b0c0:	10c4b03a 	or	r2,r2,r3
   8b0c4:	10000226 	beq	r2,zero,8b0d0 <__pack_d+0x214>
   8b0c8:	04400044 	movi	r17,1
   8b0cc:	0025883a 	mov	r18,zero
   8b0d0:	00803fc4 	movi	r2,255
   8b0d4:	644eb03a 	or	r7,r12,r17
   8b0d8:	3892703a 	and	r9,r7,r2
   8b0dc:	00802004 	movi	r2,128
   8b0e0:	6c90b03a 	or	r8,r13,r18
   8b0e4:	0015883a 	mov	r10,zero
   8b0e8:	48801626 	beq	r9,r2,8b144 <__pack_d+0x288>
   8b0ec:	01001fc4 	movi	r4,127
   8b0f0:	3905883a 	add	r2,r7,r4
   8b0f4:	11cd803a 	cmpltu	r6,r2,r7
   8b0f8:	320d883a 	add	r6,r6,r8
   8b0fc:	100f883a 	mov	r7,r2
   8b100:	00840034 	movhi	r2,4096
   8b104:	10bfffc4 	addi	r2,r2,-1
   8b108:	3011883a 	mov	r8,r6
   8b10c:	0007883a 	mov	r3,zero
   8b110:	11801b36 	bltu	r2,r6,8b180 <__pack_d+0x2c4>
   8b114:	4004963a 	slli	r2,r8,24
   8b118:	3808d23a 	srli	r4,r7,8
   8b11c:	400ad23a 	srli	r5,r8,8
   8b120:	1813883a 	mov	r9,r3
   8b124:	1108b03a 	or	r4,r2,r4
   8b128:	00bfffc4 	movi	r2,-1
   8b12c:	00c00434 	movhi	r3,16
   8b130:	18ffffc4 	addi	r3,r3,-1
   8b134:	208c703a 	and	r6,r4,r2
   8b138:	28ce703a 	and	r7,r5,r3
   8b13c:	4a01ffcc 	andi	r8,r9,2047
   8b140:	003f7206 	br	8af0c <__pack_d+0x50>
   8b144:	503fe91e 	bne	r10,zero,8b0ec <__pack_d+0x230>
   8b148:	01004004 	movi	r4,256
   8b14c:	3904703a 	and	r2,r7,r4
   8b150:	0007883a 	mov	r3,zero
   8b154:	10c4b03a 	or	r2,r2,r3
   8b158:	10000626 	beq	r2,zero,8b174 <__pack_d+0x2b8>
   8b15c:	3a45883a 	add	r2,r7,r9
   8b160:	11cd803a 	cmpltu	r6,r2,r7
   8b164:	320d883a 	add	r6,r6,r8
   8b168:	100f883a 	mov	r7,r2
   8b16c:	3011883a 	mov	r8,r6
   8b170:	0007883a 	mov	r3,zero
   8b174:	00840034 	movhi	r2,4096
   8b178:	10bfffc4 	addi	r2,r2,-1
   8b17c:	123fe52e 	bgeu	r2,r8,8b114 <__pack_d+0x258>
   8b180:	00c00044 	movi	r3,1
   8b184:	003fe306 	br	8b114 <__pack_d+0x258>
   8b188:	0009883a 	mov	r4,zero
   8b18c:	0013883a 	mov	r9,zero
   8b190:	000b883a 	mov	r5,zero
   8b194:	003fe406 	br	8b128 <__pack_d+0x26c>
   8b198:	4a47883a 	add	r3,r9,r9
   8b19c:	008007c4 	movi	r2,31
   8b1a0:	1105c83a 	sub	r2,r2,r4
   8b1a4:	1886983a 	sll	r3,r3,r2
   8b1a8:	4118d83a 	srl	r12,r8,r4
   8b1ac:	491ad83a 	srl	r13,r9,r4
   8b1b0:	1b18b03a 	or	r12,r3,r12
   8b1b4:	003fb506 	br	8b08c <__pack_d+0x1d0>
   8b1b8:	2806d07a 	srli	r3,r5,1
   8b1bc:	008007c4 	movi	r2,31
   8b1c0:	1105c83a 	sub	r2,r2,r4
   8b1c4:	1896d83a 	srl	r11,r3,r2
   8b1c8:	2914983a 	sll	r10,r5,r4
   8b1cc:	003fb506 	br	8b0a4 <__pack_d+0x1e8>

0008b1d0 <__unpack_d>:
   8b1d0:	20c00117 	ldw	r3,4(r4)
   8b1d4:	22400017 	ldw	r9,0(r4)
   8b1d8:	00800434 	movhi	r2,16
   8b1dc:	10bfffc4 	addi	r2,r2,-1
   8b1e0:	1808d53a 	srli	r4,r3,20
   8b1e4:	180cd7fa 	srli	r6,r3,31
   8b1e8:	1894703a 	and	r10,r3,r2
   8b1ec:	2201ffcc 	andi	r8,r4,2047
   8b1f0:	281b883a 	mov	r13,r5
   8b1f4:	4817883a 	mov	r11,r9
   8b1f8:	29800115 	stw	r6,4(r5)
   8b1fc:	5019883a 	mov	r12,r10
   8b200:	40001e1e 	bne	r8,zero,8b27c <__unpack_d+0xac>
   8b204:	4a84b03a 	or	r2,r9,r10
   8b208:	10001926 	beq	r2,zero,8b270 <__unpack_d+0xa0>
   8b20c:	4804d63a 	srli	r2,r9,24
   8b210:	500c923a 	slli	r6,r10,8
   8b214:	013f0084 	movi	r4,-1022
   8b218:	00c40034 	movhi	r3,4096
   8b21c:	18ffffc4 	addi	r3,r3,-1
   8b220:	118cb03a 	or	r6,r2,r6
   8b224:	008000c4 	movi	r2,3
   8b228:	480a923a 	slli	r5,r9,8
   8b22c:	68800015 	stw	r2,0(r13)
   8b230:	69000215 	stw	r4,8(r13)
   8b234:	19800b36 	bltu	r3,r6,8b264 <__unpack_d+0x94>
   8b238:	200f883a 	mov	r7,r4
   8b23c:	1811883a 	mov	r8,r3
   8b240:	2945883a 	add	r2,r5,r5
   8b244:	1149803a 	cmpltu	r4,r2,r5
   8b248:	3187883a 	add	r3,r6,r6
   8b24c:	20c9883a 	add	r4,r4,r3
   8b250:	100b883a 	mov	r5,r2
   8b254:	200d883a 	mov	r6,r4
   8b258:	39ffffc4 	addi	r7,r7,-1
   8b25c:	413ff82e 	bgeu	r8,r4,8b240 <__unpack_d+0x70>
   8b260:	69c00215 	stw	r7,8(r13)
   8b264:	69800415 	stw	r6,16(r13)
   8b268:	69400315 	stw	r5,12(r13)
   8b26c:	f800283a 	ret
   8b270:	00800084 	movi	r2,2
   8b274:	28800015 	stw	r2,0(r5)
   8b278:	f800283a 	ret
   8b27c:	0081ffc4 	movi	r2,2047
   8b280:	40800f26 	beq	r8,r2,8b2c0 <__unpack_d+0xf0>
   8b284:	480cd63a 	srli	r6,r9,24
   8b288:	5006923a 	slli	r3,r10,8
   8b28c:	4804923a 	slli	r2,r9,8
   8b290:	0009883a 	mov	r4,zero
   8b294:	30c6b03a 	or	r3,r6,r3
   8b298:	01440034 	movhi	r5,4096
   8b29c:	110cb03a 	or	r6,r2,r4
   8b2a0:	423f0044 	addi	r8,r8,-1023
   8b2a4:	194eb03a 	or	r7,r3,r5
   8b2a8:	008000c4 	movi	r2,3
   8b2ac:	69c00415 	stw	r7,16(r13)
   8b2b0:	6a000215 	stw	r8,8(r13)
   8b2b4:	68800015 	stw	r2,0(r13)
   8b2b8:	69800315 	stw	r6,12(r13)
   8b2bc:	f800283a 	ret
   8b2c0:	4a84b03a 	or	r2,r9,r10
   8b2c4:	1000031e 	bne	r2,zero,8b2d4 <__unpack_d+0x104>
   8b2c8:	00800104 	movi	r2,4
   8b2cc:	28800015 	stw	r2,0(r5)
   8b2d0:	f800283a 	ret
   8b2d4:	0009883a 	mov	r4,zero
   8b2d8:	01400234 	movhi	r5,8
   8b2dc:	4904703a 	and	r2,r9,r4
   8b2e0:	5146703a 	and	r3,r10,r5
   8b2e4:	10c4b03a 	or	r2,r2,r3
   8b2e8:	10000526 	beq	r2,zero,8b300 <__unpack_d+0x130>
   8b2ec:	00800044 	movi	r2,1
   8b2f0:	68800015 	stw	r2,0(r13)
   8b2f4:	6b000415 	stw	r12,16(r13)
   8b2f8:	6ac00315 	stw	r11,12(r13)
   8b2fc:	f800283a 	ret
   8b300:	68000015 	stw	zero,0(r13)
   8b304:	003ffb06 	br	8b2f4 <__unpack_d+0x124>

0008b308 <__fpcmp_parts_d>:
   8b308:	21800017 	ldw	r6,0(r4)
   8b30c:	00c00044 	movi	r3,1
   8b310:	19800a2e 	bgeu	r3,r6,8b33c <__fpcmp_parts_d+0x34>
   8b314:	28800017 	ldw	r2,0(r5)
   8b318:	1880082e 	bgeu	r3,r2,8b33c <__fpcmp_parts_d+0x34>
   8b31c:	00c00104 	movi	r3,4
   8b320:	30c02626 	beq	r6,r3,8b3bc <__fpcmp_parts_d+0xb4>
   8b324:	10c02226 	beq	r2,r3,8b3b0 <__fpcmp_parts_d+0xa8>
   8b328:	00c00084 	movi	r3,2
   8b32c:	30c00526 	beq	r6,r3,8b344 <__fpcmp_parts_d+0x3c>
   8b330:	10c0071e 	bne	r2,r3,8b350 <__fpcmp_parts_d+0x48>
   8b334:	20800117 	ldw	r2,4(r4)
   8b338:	1000091e 	bne	r2,zero,8b360 <__fpcmp_parts_d+0x58>
   8b33c:	00800044 	movi	r2,1
   8b340:	f800283a 	ret
   8b344:	10c01a1e 	bne	r2,r3,8b3b0 <__fpcmp_parts_d+0xa8>
   8b348:	0005883a 	mov	r2,zero
   8b34c:	f800283a 	ret
   8b350:	22000117 	ldw	r8,4(r4)
   8b354:	28800117 	ldw	r2,4(r5)
   8b358:	40800326 	beq	r8,r2,8b368 <__fpcmp_parts_d+0x60>
   8b35c:	403ff726 	beq	r8,zero,8b33c <__fpcmp_parts_d+0x34>
   8b360:	00bfffc4 	movi	r2,-1
   8b364:	f800283a 	ret
   8b368:	20c00217 	ldw	r3,8(r4)
   8b36c:	28800217 	ldw	r2,8(r5)
   8b370:	10fffa16 	blt	r2,r3,8b35c <__fpcmp_parts_d+0x54>
   8b374:	18800916 	blt	r3,r2,8b39c <__fpcmp_parts_d+0x94>
   8b378:	21c00417 	ldw	r7,16(r4)
   8b37c:	28c00417 	ldw	r3,16(r5)
   8b380:	21800317 	ldw	r6,12(r4)
   8b384:	28800317 	ldw	r2,12(r5)
   8b388:	19fff436 	bltu	r3,r7,8b35c <__fpcmp_parts_d+0x54>
   8b38c:	38c00526 	beq	r7,r3,8b3a4 <__fpcmp_parts_d+0x9c>
   8b390:	38c00236 	bltu	r7,r3,8b39c <__fpcmp_parts_d+0x94>
   8b394:	19ffec1e 	bne	r3,r7,8b348 <__fpcmp_parts_d+0x40>
   8b398:	30bfeb2e 	bgeu	r6,r2,8b348 <__fpcmp_parts_d+0x40>
   8b39c:	403fe71e 	bne	r8,zero,8b33c <__fpcmp_parts_d+0x34>
   8b3a0:	003fef06 	br	8b360 <__fpcmp_parts_d+0x58>
   8b3a4:	11bffa2e 	bgeu	r2,r6,8b390 <__fpcmp_parts_d+0x88>
   8b3a8:	403fe426 	beq	r8,zero,8b33c <__fpcmp_parts_d+0x34>
   8b3ac:	003fec06 	br	8b360 <__fpcmp_parts_d+0x58>
   8b3b0:	28800117 	ldw	r2,4(r5)
   8b3b4:	103fe11e 	bne	r2,zero,8b33c <__fpcmp_parts_d+0x34>
   8b3b8:	003fe906 	br	8b360 <__fpcmp_parts_d+0x58>
   8b3bc:	11bfdd1e 	bne	r2,r6,8b334 <__fpcmp_parts_d+0x2c>
   8b3c0:	28c00117 	ldw	r3,4(r5)
   8b3c4:	20800117 	ldw	r2,4(r4)
   8b3c8:	1885c83a 	sub	r2,r3,r2
   8b3cc:	f800283a 	ret

0008b3d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8b3d0:	defff804 	addi	sp,sp,-32
   8b3d4:	dfc00715 	stw	ra,28(sp)
   8b3d8:	df000615 	stw	fp,24(sp)
   8b3dc:	df000604 	addi	fp,sp,24
   8b3e0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8b3e4:	e0bffc17 	ldw	r2,-16(fp)
   8b3e8:	1004803a 	cmplt	r2,r2,zero
   8b3ec:	1000091e 	bne	r2,zero,8b414 <close+0x44>
   8b3f0:	e13ffc17 	ldw	r4,-16(fp)
   8b3f4:	01400304 	movi	r5,12
   8b3f8:	008ace00 	call	8ace0 <__mulsi3>
   8b3fc:	1007883a 	mov	r3,r2
   8b400:	00800274 	movhi	r2,9
   8b404:	10be8d04 	addi	r2,r2,-1484
   8b408:	1887883a 	add	r3,r3,r2
   8b40c:	e0ffff15 	stw	r3,-4(fp)
   8b410:	00000106 	br	8b418 <close+0x48>
   8b414:	e03fff15 	stw	zero,-4(fp)
   8b418:	e0bfff17 	ldw	r2,-4(fp)
   8b41c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8b420:	e0bffb17 	ldw	r2,-20(fp)
   8b424:	1005003a 	cmpeq	r2,r2,zero
   8b428:	10001d1e 	bne	r2,zero,8b4a0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8b42c:	e0bffb17 	ldw	r2,-20(fp)
   8b430:	10800017 	ldw	r2,0(r2)
   8b434:	10800417 	ldw	r2,16(r2)
   8b438:	1005003a 	cmpeq	r2,r2,zero
   8b43c:	1000071e 	bne	r2,zero,8b45c <close+0x8c>
   8b440:	e0bffb17 	ldw	r2,-20(fp)
   8b444:	10800017 	ldw	r2,0(r2)
   8b448:	10800417 	ldw	r2,16(r2)
   8b44c:	e13ffb17 	ldw	r4,-20(fp)
   8b450:	103ee83a 	callr	r2
   8b454:	e0bffe15 	stw	r2,-8(fp)
   8b458:	00000106 	br	8b460 <close+0x90>
   8b45c:	e03ffe15 	stw	zero,-8(fp)
   8b460:	e0bffe17 	ldw	r2,-8(fp)
   8b464:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8b468:	e13ffc17 	ldw	r4,-16(fp)
   8b46c:	008bf340 	call	8bf34 <alt_release_fd>
    if (rval < 0)
   8b470:	e0bffa17 	ldw	r2,-24(fp)
   8b474:	1004403a 	cmpge	r2,r2,zero
   8b478:	1000071e 	bne	r2,zero,8b498 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8b47c:	008b4d00 	call	8b4d0 <alt_get_errno>
   8b480:	e0fffa17 	ldw	r3,-24(fp)
   8b484:	00c7c83a 	sub	r3,zero,r3
   8b488:	10c00015 	stw	r3,0(r2)
      return -1;
   8b48c:	00bfffc4 	movi	r2,-1
   8b490:	e0bffd15 	stw	r2,-12(fp)
   8b494:	00000806 	br	8b4b8 <close+0xe8>
    }
    return 0;
   8b498:	e03ffd15 	stw	zero,-12(fp)
   8b49c:	00000606 	br	8b4b8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b4a0:	008b4d00 	call	8b4d0 <alt_get_errno>
   8b4a4:	1007883a 	mov	r3,r2
   8b4a8:	00801444 	movi	r2,81
   8b4ac:	18800015 	stw	r2,0(r3)
    return -1;
   8b4b0:	00bfffc4 	movi	r2,-1
   8b4b4:	e0bffd15 	stw	r2,-12(fp)
   8b4b8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8b4bc:	e037883a 	mov	sp,fp
   8b4c0:	dfc00117 	ldw	ra,4(sp)
   8b4c4:	df000017 	ldw	fp,0(sp)
   8b4c8:	dec00204 	addi	sp,sp,8
   8b4cc:	f800283a 	ret

0008b4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b4d0:	defffd04 	addi	sp,sp,-12
   8b4d4:	dfc00215 	stw	ra,8(sp)
   8b4d8:	df000115 	stw	fp,4(sp)
   8b4dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b4e0:	00800274 	movhi	r2,9
   8b4e4:	10834504 	addi	r2,r2,3348
   8b4e8:	10800017 	ldw	r2,0(r2)
   8b4ec:	1005003a 	cmpeq	r2,r2,zero
   8b4f0:	1000061e 	bne	r2,zero,8b50c <alt_get_errno+0x3c>
   8b4f4:	00800274 	movhi	r2,9
   8b4f8:	10834504 	addi	r2,r2,3348
   8b4fc:	10800017 	ldw	r2,0(r2)
   8b500:	103ee83a 	callr	r2
   8b504:	e0bfff15 	stw	r2,-4(fp)
   8b508:	00000306 	br	8b518 <alt_get_errno+0x48>
   8b50c:	00800274 	movhi	r2,9
   8b510:	108a2d04 	addi	r2,r2,10420
   8b514:	e0bfff15 	stw	r2,-4(fp)
   8b518:	e0bfff17 	ldw	r2,-4(fp)
}
   8b51c:	e037883a 	mov	sp,fp
   8b520:	dfc00117 	ldw	ra,4(sp)
   8b524:	df000017 	ldw	fp,0(sp)
   8b528:	dec00204 	addi	sp,sp,8
   8b52c:	f800283a 	ret

0008b530 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8b530:	defffc04 	addi	sp,sp,-16
   8b534:	df000315 	stw	fp,12(sp)
   8b538:	df000304 	addi	fp,sp,12
   8b53c:	e13ffd15 	stw	r4,-12(fp)
   8b540:	e17ffe15 	stw	r5,-8(fp)
   8b544:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8b548:	e0bfff17 	ldw	r2,-4(fp)
}
   8b54c:	e037883a 	mov	sp,fp
   8b550:	df000017 	ldw	fp,0(sp)
   8b554:	dec00104 	addi	sp,sp,4
   8b558:	f800283a 	ret

0008b55c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8b55c:	defff904 	addi	sp,sp,-28
   8b560:	dfc00615 	stw	ra,24(sp)
   8b564:	df000515 	stw	fp,20(sp)
   8b568:	df000504 	addi	fp,sp,20
   8b56c:	e13ffc15 	stw	r4,-16(fp)
   8b570:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b574:	e0bffc17 	ldw	r2,-16(fp)
   8b578:	1004803a 	cmplt	r2,r2,zero
   8b57c:	1000091e 	bne	r2,zero,8b5a4 <fstat+0x48>
   8b580:	e13ffc17 	ldw	r4,-16(fp)
   8b584:	01400304 	movi	r5,12
   8b588:	008ace00 	call	8ace0 <__mulsi3>
   8b58c:	1007883a 	mov	r3,r2
   8b590:	00800274 	movhi	r2,9
   8b594:	10be8d04 	addi	r2,r2,-1484
   8b598:	1887883a 	add	r3,r3,r2
   8b59c:	e0ffff15 	stw	r3,-4(fp)
   8b5a0:	00000106 	br	8b5a8 <fstat+0x4c>
   8b5a4:	e03fff15 	stw	zero,-4(fp)
   8b5a8:	e0bfff17 	ldw	r2,-4(fp)
   8b5ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8b5b0:	e0bffb17 	ldw	r2,-20(fp)
   8b5b4:	1005003a 	cmpeq	r2,r2,zero
   8b5b8:	1000121e 	bne	r2,zero,8b604 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8b5bc:	e0bffb17 	ldw	r2,-20(fp)
   8b5c0:	10800017 	ldw	r2,0(r2)
   8b5c4:	10800817 	ldw	r2,32(r2)
   8b5c8:	1005003a 	cmpeq	r2,r2,zero
   8b5cc:	1000081e 	bne	r2,zero,8b5f0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8b5d0:	e0bffb17 	ldw	r2,-20(fp)
   8b5d4:	10800017 	ldw	r2,0(r2)
   8b5d8:	10800817 	ldw	r2,32(r2)
   8b5dc:	e13ffb17 	ldw	r4,-20(fp)
   8b5e0:	e17ffd17 	ldw	r5,-12(fp)
   8b5e4:	103ee83a 	callr	r2
   8b5e8:	e0bffe15 	stw	r2,-8(fp)
   8b5ec:	00000b06 	br	8b61c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8b5f0:	e0fffd17 	ldw	r3,-12(fp)
   8b5f4:	00880004 	movi	r2,8192
   8b5f8:	18800115 	stw	r2,4(r3)
      return 0;
   8b5fc:	e03ffe15 	stw	zero,-8(fp)
   8b600:	00000606 	br	8b61c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b604:	008b6340 	call	8b634 <alt_get_errno>
   8b608:	1007883a 	mov	r3,r2
   8b60c:	00801444 	movi	r2,81
   8b610:	18800015 	stw	r2,0(r3)
    return -1;
   8b614:	00bfffc4 	movi	r2,-1
   8b618:	e0bffe15 	stw	r2,-8(fp)
   8b61c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b620:	e037883a 	mov	sp,fp
   8b624:	dfc00117 	ldw	ra,4(sp)
   8b628:	df000017 	ldw	fp,0(sp)
   8b62c:	dec00204 	addi	sp,sp,8
   8b630:	f800283a 	ret

0008b634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b634:	defffd04 	addi	sp,sp,-12
   8b638:	dfc00215 	stw	ra,8(sp)
   8b63c:	df000115 	stw	fp,4(sp)
   8b640:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b644:	00800274 	movhi	r2,9
   8b648:	10834504 	addi	r2,r2,3348
   8b64c:	10800017 	ldw	r2,0(r2)
   8b650:	1005003a 	cmpeq	r2,r2,zero
   8b654:	1000061e 	bne	r2,zero,8b670 <alt_get_errno+0x3c>
   8b658:	00800274 	movhi	r2,9
   8b65c:	10834504 	addi	r2,r2,3348
   8b660:	10800017 	ldw	r2,0(r2)
   8b664:	103ee83a 	callr	r2
   8b668:	e0bfff15 	stw	r2,-4(fp)
   8b66c:	00000306 	br	8b67c <alt_get_errno+0x48>
   8b670:	00800274 	movhi	r2,9
   8b674:	108a2d04 	addi	r2,r2,10420
   8b678:	e0bfff15 	stw	r2,-4(fp)
   8b67c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b680:	e037883a 	mov	sp,fp
   8b684:	dfc00117 	ldw	ra,4(sp)
   8b688:	df000017 	ldw	fp,0(sp)
   8b68c:	dec00204 	addi	sp,sp,8
   8b690:	f800283a 	ret

0008b694 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8b694:	defff904 	addi	sp,sp,-28
   8b698:	dfc00615 	stw	ra,24(sp)
   8b69c:	df000515 	stw	fp,20(sp)
   8b6a0:	df000504 	addi	fp,sp,20
   8b6a4:	e13ffc15 	stw	r4,-16(fp)
   8b6a8:	e17ffd15 	stw	r5,-12(fp)
   8b6ac:	e1bffe15 	stw	r6,-8(fp)
   8b6b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8b6b4:	e0800217 	ldw	r2,8(fp)
   8b6b8:	d8800015 	stw	r2,0(sp)
   8b6bc:	e13ffc17 	ldw	r4,-16(fp)
   8b6c0:	e17ffd17 	ldw	r5,-12(fp)
   8b6c4:	e1bffe17 	ldw	r6,-8(fp)
   8b6c8:	e1ffff17 	ldw	r7,-4(fp)
   8b6cc:	008b8680 	call	8b868 <alt_iic_isr_register>
}  
   8b6d0:	e037883a 	mov	sp,fp
   8b6d4:	dfc00117 	ldw	ra,4(sp)
   8b6d8:	df000017 	ldw	fp,0(sp)
   8b6dc:	dec00204 	addi	sp,sp,8
   8b6e0:	f800283a 	ret

0008b6e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8b6e4:	defff904 	addi	sp,sp,-28
   8b6e8:	df000615 	stw	fp,24(sp)
   8b6ec:	df000604 	addi	fp,sp,24
   8b6f0:	e13ffe15 	stw	r4,-8(fp)
   8b6f4:	e17fff15 	stw	r5,-4(fp)
   8b6f8:	e0bfff17 	ldw	r2,-4(fp)
   8b6fc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b700:	0005303a 	rdctl	r2,status
   8b704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b708:	e0fffb17 	ldw	r3,-20(fp)
   8b70c:	00bfff84 	movi	r2,-2
   8b710:	1884703a 	and	r2,r3,r2
   8b714:	1001703a 	wrctl	status,r2
  
  return context;
   8b718:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b71c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8b720:	e0fffc17 	ldw	r3,-16(fp)
   8b724:	00800044 	movi	r2,1
   8b728:	10c4983a 	sll	r2,r2,r3
   8b72c:	1007883a 	mov	r3,r2
   8b730:	00800274 	movhi	r2,9
   8b734:	108a2e04 	addi	r2,r2,10424
   8b738:	10800017 	ldw	r2,0(r2)
   8b73c:	1886b03a 	or	r3,r3,r2
   8b740:	00800274 	movhi	r2,9
   8b744:	108a2e04 	addi	r2,r2,10424
   8b748:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b74c:	00800274 	movhi	r2,9
   8b750:	108a2e04 	addi	r2,r2,10424
   8b754:	10800017 	ldw	r2,0(r2)
   8b758:	100170fa 	wrctl	ienable,r2
   8b75c:	e0bffd17 	ldw	r2,-12(fp)
   8b760:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b764:	e0bffa17 	ldw	r2,-24(fp)
   8b768:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b76c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8b770:	e037883a 	mov	sp,fp
   8b774:	df000017 	ldw	fp,0(sp)
   8b778:	dec00104 	addi	sp,sp,4
   8b77c:	f800283a 	ret

0008b780 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8b780:	defff904 	addi	sp,sp,-28
   8b784:	df000615 	stw	fp,24(sp)
   8b788:	df000604 	addi	fp,sp,24
   8b78c:	e13ffe15 	stw	r4,-8(fp)
   8b790:	e17fff15 	stw	r5,-4(fp)
   8b794:	e0bfff17 	ldw	r2,-4(fp)
   8b798:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b79c:	0005303a 	rdctl	r2,status
   8b7a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b7a4:	e0fffb17 	ldw	r3,-20(fp)
   8b7a8:	00bfff84 	movi	r2,-2
   8b7ac:	1884703a 	and	r2,r3,r2
   8b7b0:	1001703a 	wrctl	status,r2
  
  return context;
   8b7b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b7b8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8b7bc:	e0fffc17 	ldw	r3,-16(fp)
   8b7c0:	00800044 	movi	r2,1
   8b7c4:	10c4983a 	sll	r2,r2,r3
   8b7c8:	0084303a 	nor	r2,zero,r2
   8b7cc:	1007883a 	mov	r3,r2
   8b7d0:	00800274 	movhi	r2,9
   8b7d4:	108a2e04 	addi	r2,r2,10424
   8b7d8:	10800017 	ldw	r2,0(r2)
   8b7dc:	1886703a 	and	r3,r3,r2
   8b7e0:	00800274 	movhi	r2,9
   8b7e4:	108a2e04 	addi	r2,r2,10424
   8b7e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b7ec:	00800274 	movhi	r2,9
   8b7f0:	108a2e04 	addi	r2,r2,10424
   8b7f4:	10800017 	ldw	r2,0(r2)
   8b7f8:	100170fa 	wrctl	ienable,r2
   8b7fc:	e0bffd17 	ldw	r2,-12(fp)
   8b800:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b804:	e0bffa17 	ldw	r2,-24(fp)
   8b808:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b80c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8b810:	e037883a 	mov	sp,fp
   8b814:	df000017 	ldw	fp,0(sp)
   8b818:	dec00104 	addi	sp,sp,4
   8b81c:	f800283a 	ret

0008b820 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8b820:	defffc04 	addi	sp,sp,-16
   8b824:	df000315 	stw	fp,12(sp)
   8b828:	df000304 	addi	fp,sp,12
   8b82c:	e13ffe15 	stw	r4,-8(fp)
   8b830:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8b834:	000530fa 	rdctl	r2,ienable
   8b838:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8b83c:	e0ffff17 	ldw	r3,-4(fp)
   8b840:	00800044 	movi	r2,1
   8b844:	10c4983a 	sll	r2,r2,r3
   8b848:	1007883a 	mov	r3,r2
   8b84c:	e0bffd17 	ldw	r2,-12(fp)
   8b850:	1884703a 	and	r2,r3,r2
   8b854:	1004c03a 	cmpne	r2,r2,zero
}
   8b858:	e037883a 	mov	sp,fp
   8b85c:	df000017 	ldw	fp,0(sp)
   8b860:	dec00104 	addi	sp,sp,4
   8b864:	f800283a 	ret

0008b868 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8b868:	defff404 	addi	sp,sp,-48
   8b86c:	dfc00b15 	stw	ra,44(sp)
   8b870:	df000a15 	stw	fp,40(sp)
   8b874:	df000a04 	addi	fp,sp,40
   8b878:	e13ffb15 	stw	r4,-20(fp)
   8b87c:	e17ffc15 	stw	r5,-16(fp)
   8b880:	e1bffd15 	stw	r6,-12(fp)
   8b884:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8b888:	00bffa84 	movi	r2,-22
   8b88c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8b890:	e0bffc17 	ldw	r2,-16(fp)
   8b894:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8b898:	e0bff917 	ldw	r2,-28(fp)
   8b89c:	10800808 	cmpgei	r2,r2,32
   8b8a0:	1000291e 	bne	r2,zero,8b948 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b8a4:	0005303a 	rdctl	r2,status
   8b8a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b8ac:	e0fff717 	ldw	r3,-36(fp)
   8b8b0:	00bfff84 	movi	r2,-2
   8b8b4:	1884703a 	and	r2,r3,r2
   8b8b8:	1001703a 	wrctl	status,r2
  
  return context;
   8b8bc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8b8c0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8b8c4:	e0bff917 	ldw	r2,-28(fp)
   8b8c8:	00c00274 	movhi	r3,9
   8b8cc:	18ca4b04 	addi	r3,r3,10540
   8b8d0:	100490fa 	slli	r2,r2,3
   8b8d4:	10c7883a 	add	r3,r2,r3
   8b8d8:	e0bffd17 	ldw	r2,-12(fp)
   8b8dc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8b8e0:	e0bff917 	ldw	r2,-28(fp)
   8b8e4:	00c00274 	movhi	r3,9
   8b8e8:	18ca4b04 	addi	r3,r3,10540
   8b8ec:	100490fa 	slli	r2,r2,3
   8b8f0:	10c5883a 	add	r2,r2,r3
   8b8f4:	10c00104 	addi	r3,r2,4
   8b8f8:	e0bffe17 	ldw	r2,-8(fp)
   8b8fc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8b900:	e0bffd17 	ldw	r2,-12(fp)
   8b904:	1005003a 	cmpeq	r2,r2,zero
   8b908:	1000051e 	bne	r2,zero,8b920 <alt_iic_isr_register+0xb8>
   8b90c:	e17ff917 	ldw	r5,-28(fp)
   8b910:	e13ffb17 	ldw	r4,-20(fp)
   8b914:	008b6e40 	call	8b6e4 <alt_ic_irq_enable>
   8b918:	e0bfff15 	stw	r2,-4(fp)
   8b91c:	00000406 	br	8b930 <alt_iic_isr_register+0xc8>
   8b920:	e17ff917 	ldw	r5,-28(fp)
   8b924:	e13ffb17 	ldw	r4,-20(fp)
   8b928:	008b7800 	call	8b780 <alt_ic_irq_disable>
   8b92c:	e0bfff15 	stw	r2,-4(fp)
   8b930:	e0bfff17 	ldw	r2,-4(fp)
   8b934:	e0bffa15 	stw	r2,-24(fp)
   8b938:	e0bff817 	ldw	r2,-32(fp)
   8b93c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b940:	e0bff617 	ldw	r2,-40(fp)
   8b944:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8b948:	e0bffa17 	ldw	r2,-24(fp)
}
   8b94c:	e037883a 	mov	sp,fp
   8b950:	dfc00117 	ldw	ra,4(sp)
   8b954:	df000017 	ldw	fp,0(sp)
   8b958:	dec00204 	addi	sp,sp,8
   8b95c:	f800283a 	ret

0008b960 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b960:	deffeb04 	addi	sp,sp,-84
   8b964:	dfc01415 	stw	ra,80(sp)
   8b968:	df001315 	stw	fp,76(sp)
   8b96c:	df001304 	addi	fp,sp,76
   8b970:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b974:	e0bffd17 	ldw	r2,-12(fp)
   8b978:	1004803a 	cmplt	r2,r2,zero
   8b97c:	1000091e 	bne	r2,zero,8b9a4 <isatty+0x44>
   8b980:	e13ffd17 	ldw	r4,-12(fp)
   8b984:	01400304 	movi	r5,12
   8b988:	008ace00 	call	8ace0 <__mulsi3>
   8b98c:	1007883a 	mov	r3,r2
   8b990:	00800274 	movhi	r2,9
   8b994:	10be8d04 	addi	r2,r2,-1484
   8b998:	1887883a 	add	r3,r3,r2
   8b99c:	e0ffff15 	stw	r3,-4(fp)
   8b9a0:	00000106 	br	8b9a8 <isatty+0x48>
   8b9a4:	e03fff15 	stw	zero,-4(fp)
   8b9a8:	e0bfff17 	ldw	r2,-4(fp)
   8b9ac:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8b9b0:	e0bfed17 	ldw	r2,-76(fp)
   8b9b4:	1005003a 	cmpeq	r2,r2,zero
   8b9b8:	10000f1e 	bne	r2,zero,8b9f8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b9bc:	e0bfed17 	ldw	r2,-76(fp)
   8b9c0:	10800017 	ldw	r2,0(r2)
   8b9c4:	10800817 	ldw	r2,32(r2)
   8b9c8:	1004c03a 	cmpne	r2,r2,zero
   8b9cc:	1000031e 	bne	r2,zero,8b9dc <isatty+0x7c>
    {
      return 1;
   8b9d0:	00800044 	movi	r2,1
   8b9d4:	e0bffe15 	stw	r2,-8(fp)
   8b9d8:	00000c06 	br	8ba0c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b9dc:	e17fee04 	addi	r5,fp,-72
   8b9e0:	e13ffd17 	ldw	r4,-12(fp)
   8b9e4:	008b55c0 	call	8b55c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b9e8:	e0bfef17 	ldw	r2,-68(fp)
   8b9ec:	10880020 	cmpeqi	r2,r2,8192
   8b9f0:	e0bffe15 	stw	r2,-8(fp)
   8b9f4:	00000506 	br	8ba0c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b9f8:	008ba240 	call	8ba24 <alt_get_errno>
   8b9fc:	1007883a 	mov	r3,r2
   8ba00:	00801444 	movi	r2,81
   8ba04:	18800015 	stw	r2,0(r3)
    return 0;
   8ba08:	e03ffe15 	stw	zero,-8(fp)
   8ba0c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8ba10:	e037883a 	mov	sp,fp
   8ba14:	dfc00117 	ldw	ra,4(sp)
   8ba18:	df000017 	ldw	fp,0(sp)
   8ba1c:	dec00204 	addi	sp,sp,8
   8ba20:	f800283a 	ret

0008ba24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ba24:	defffd04 	addi	sp,sp,-12
   8ba28:	dfc00215 	stw	ra,8(sp)
   8ba2c:	df000115 	stw	fp,4(sp)
   8ba30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ba34:	00800274 	movhi	r2,9
   8ba38:	10834504 	addi	r2,r2,3348
   8ba3c:	10800017 	ldw	r2,0(r2)
   8ba40:	1005003a 	cmpeq	r2,r2,zero
   8ba44:	1000061e 	bne	r2,zero,8ba60 <alt_get_errno+0x3c>
   8ba48:	00800274 	movhi	r2,9
   8ba4c:	10834504 	addi	r2,r2,3348
   8ba50:	10800017 	ldw	r2,0(r2)
   8ba54:	103ee83a 	callr	r2
   8ba58:	e0bfff15 	stw	r2,-4(fp)
   8ba5c:	00000306 	br	8ba6c <alt_get_errno+0x48>
   8ba60:	00800274 	movhi	r2,9
   8ba64:	108a2d04 	addi	r2,r2,10420
   8ba68:	e0bfff15 	stw	r2,-4(fp)
   8ba6c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ba70:	e037883a 	mov	sp,fp
   8ba74:	dfc00117 	ldw	ra,4(sp)
   8ba78:	df000017 	ldw	fp,0(sp)
   8ba7c:	dec00204 	addi	sp,sp,8
   8ba80:	f800283a 	ret

0008ba84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8ba84:	defffe04 	addi	sp,sp,-8
   8ba88:	dfc00115 	stw	ra,4(sp)
   8ba8c:	df000015 	stw	fp,0(sp)
   8ba90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8ba94:	01000274 	movhi	r4,9
   8ba98:	21034a04 	addi	r4,r4,3368
   8ba9c:	01400274 	movhi	r5,9
   8baa0:	297c7e04 	addi	r5,r5,-3592
   8baa4:	01800274 	movhi	r6,9
   8baa8:	31834a04 	addi	r6,r6,3368
   8baac:	008bb040 	call	8bb04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8bab0:	01000234 	movhi	r4,8
   8bab4:	21000804 	addi	r4,r4,32
   8bab8:	01400234 	movhi	r5,8
   8babc:	29400804 	addi	r5,r5,32
   8bac0:	01800234 	movhi	r6,8
   8bac4:	31806d04 	addi	r6,r6,436
   8bac8:	008bb040 	call	8bb04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8bacc:	01000274 	movhi	r4,9
   8bad0:	213a8f04 	addi	r4,r4,-5572
   8bad4:	01400274 	movhi	r5,9
   8bad8:	297a8f04 	addi	r5,r5,-5572
   8badc:	01800274 	movhi	r6,9
   8bae0:	31bc7e04 	addi	r6,r6,-3592
   8bae4:	008bb040 	call	8bb04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8bae8:	008db100 	call	8db10 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8baec:	008dd080 	call	8dd08 <alt_icache_flush_all>
}
   8baf0:	e037883a 	mov	sp,fp
   8baf4:	dfc00117 	ldw	ra,4(sp)
   8baf8:	df000017 	ldw	fp,0(sp)
   8bafc:	dec00204 	addi	sp,sp,8
   8bb00:	f800283a 	ret

0008bb04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8bb04:	defffc04 	addi	sp,sp,-16
   8bb08:	df000315 	stw	fp,12(sp)
   8bb0c:	df000304 	addi	fp,sp,12
   8bb10:	e13ffd15 	stw	r4,-12(fp)
   8bb14:	e17ffe15 	stw	r5,-8(fp)
   8bb18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8bb1c:	e0fffe17 	ldw	r3,-8(fp)
   8bb20:	e0bffd17 	ldw	r2,-12(fp)
   8bb24:	18800e26 	beq	r3,r2,8bb60 <alt_load_section+0x5c>
  {
    while( to != end )
   8bb28:	00000a06 	br	8bb54 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8bb2c:	e0bffd17 	ldw	r2,-12(fp)
   8bb30:	10c00017 	ldw	r3,0(r2)
   8bb34:	e0bffe17 	ldw	r2,-8(fp)
   8bb38:	10c00015 	stw	r3,0(r2)
   8bb3c:	e0bffe17 	ldw	r2,-8(fp)
   8bb40:	10800104 	addi	r2,r2,4
   8bb44:	e0bffe15 	stw	r2,-8(fp)
   8bb48:	e0bffd17 	ldw	r2,-12(fp)
   8bb4c:	10800104 	addi	r2,r2,4
   8bb50:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8bb54:	e0fffe17 	ldw	r3,-8(fp)
   8bb58:	e0bfff17 	ldw	r2,-4(fp)
   8bb5c:	18bff31e 	bne	r3,r2,8bb2c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8bb60:	e037883a 	mov	sp,fp
   8bb64:	df000017 	ldw	fp,0(sp)
   8bb68:	dec00104 	addi	sp,sp,4
   8bb6c:	f800283a 	ret

0008bb70 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8bb70:	defff804 	addi	sp,sp,-32
   8bb74:	dfc00715 	stw	ra,28(sp)
   8bb78:	df000615 	stw	fp,24(sp)
   8bb7c:	df000604 	addi	fp,sp,24
   8bb80:	e13ffc15 	stw	r4,-16(fp)
   8bb84:	e17ffd15 	stw	r5,-12(fp)
   8bb88:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8bb8c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8bb90:	e0bffc17 	ldw	r2,-16(fp)
   8bb94:	1004803a 	cmplt	r2,r2,zero
   8bb98:	1000091e 	bne	r2,zero,8bbc0 <lseek+0x50>
   8bb9c:	e13ffc17 	ldw	r4,-16(fp)
   8bba0:	01400304 	movi	r5,12
   8bba4:	008ace00 	call	8ace0 <__mulsi3>
   8bba8:	1007883a 	mov	r3,r2
   8bbac:	00800274 	movhi	r2,9
   8bbb0:	10be8d04 	addi	r2,r2,-1484
   8bbb4:	1887883a 	add	r3,r3,r2
   8bbb8:	e0ffff15 	stw	r3,-4(fp)
   8bbbc:	00000106 	br	8bbc4 <lseek+0x54>
   8bbc0:	e03fff15 	stw	zero,-4(fp)
   8bbc4:	e0bfff17 	ldw	r2,-4(fp)
   8bbc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8bbcc:	e0bffb17 	ldw	r2,-20(fp)
   8bbd0:	1005003a 	cmpeq	r2,r2,zero
   8bbd4:	1000111e 	bne	r2,zero,8bc1c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8bbd8:	e0bffb17 	ldw	r2,-20(fp)
   8bbdc:	10800017 	ldw	r2,0(r2)
   8bbe0:	10800717 	ldw	r2,28(r2)
   8bbe4:	1005003a 	cmpeq	r2,r2,zero
   8bbe8:	1000091e 	bne	r2,zero,8bc10 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8bbec:	e0bffb17 	ldw	r2,-20(fp)
   8bbf0:	10800017 	ldw	r2,0(r2)
   8bbf4:	10800717 	ldw	r2,28(r2)
   8bbf8:	e13ffb17 	ldw	r4,-20(fp)
   8bbfc:	e17ffd17 	ldw	r5,-12(fp)
   8bc00:	e1bffe17 	ldw	r6,-8(fp)
   8bc04:	103ee83a 	callr	r2
   8bc08:	e0bffa15 	stw	r2,-24(fp)
   8bc0c:	00000506 	br	8bc24 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8bc10:	00bfde84 	movi	r2,-134
   8bc14:	e0bffa15 	stw	r2,-24(fp)
   8bc18:	00000206 	br	8bc24 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8bc1c:	00bfebc4 	movi	r2,-81
   8bc20:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8bc24:	e0bffa17 	ldw	r2,-24(fp)
   8bc28:	1004403a 	cmpge	r2,r2,zero
   8bc2c:	1000071e 	bne	r2,zero,8bc4c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8bc30:	008bc640 	call	8bc64 <alt_get_errno>
   8bc34:	1007883a 	mov	r3,r2
   8bc38:	e0bffa17 	ldw	r2,-24(fp)
   8bc3c:	0085c83a 	sub	r2,zero,r2
   8bc40:	18800015 	stw	r2,0(r3)
    rc = -1;
   8bc44:	00bfffc4 	movi	r2,-1
   8bc48:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8bc4c:	e0bffa17 	ldw	r2,-24(fp)
}
   8bc50:	e037883a 	mov	sp,fp
   8bc54:	dfc00117 	ldw	ra,4(sp)
   8bc58:	df000017 	ldw	fp,0(sp)
   8bc5c:	dec00204 	addi	sp,sp,8
   8bc60:	f800283a 	ret

0008bc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bc64:	defffd04 	addi	sp,sp,-12
   8bc68:	dfc00215 	stw	ra,8(sp)
   8bc6c:	df000115 	stw	fp,4(sp)
   8bc70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bc74:	00800274 	movhi	r2,9
   8bc78:	10834504 	addi	r2,r2,3348
   8bc7c:	10800017 	ldw	r2,0(r2)
   8bc80:	1005003a 	cmpeq	r2,r2,zero
   8bc84:	1000061e 	bne	r2,zero,8bca0 <alt_get_errno+0x3c>
   8bc88:	00800274 	movhi	r2,9
   8bc8c:	10834504 	addi	r2,r2,3348
   8bc90:	10800017 	ldw	r2,0(r2)
   8bc94:	103ee83a 	callr	r2
   8bc98:	e0bfff15 	stw	r2,-4(fp)
   8bc9c:	00000306 	br	8bcac <alt_get_errno+0x48>
   8bca0:	00800274 	movhi	r2,9
   8bca4:	108a2d04 	addi	r2,r2,10420
   8bca8:	e0bfff15 	stw	r2,-4(fp)
   8bcac:	e0bfff17 	ldw	r2,-4(fp)
}
   8bcb0:	e037883a 	mov	sp,fp
   8bcb4:	dfc00117 	ldw	ra,4(sp)
   8bcb8:	df000017 	ldw	fp,0(sp)
   8bcbc:	dec00204 	addi	sp,sp,8
   8bcc0:	f800283a 	ret

0008bcc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8bcc4:	defffd04 	addi	sp,sp,-12
   8bcc8:	dfc00215 	stw	ra,8(sp)
   8bccc:	df000115 	stw	fp,4(sp)
   8bcd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8bcd4:	0009883a 	mov	r4,zero
   8bcd8:	008c21c0 	call	8c21c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8bcdc:	008c2500 	call	8c250 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8bce0:	01000274 	movhi	r4,9
   8bce4:	213c7104 	addi	r4,r4,-3644
   8bce8:	01400274 	movhi	r5,9
   8bcec:	297c7104 	addi	r5,r5,-3644
   8bcf0:	01800274 	movhi	r6,9
   8bcf4:	31bc7104 	addi	r6,r6,-3644
   8bcf8:	008ddfc0 	call	8ddfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8bcfc:	008dc400 	call	8dc40 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8bd00:	01000274 	movhi	r4,9
   8bd04:	21372904 	addi	r4,r4,-9052
   8bd08:	008e5a00 	call	8e5a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8bd0c:	d126f917 	ldw	r4,-25628(gp)
   8bd10:	d166fa17 	ldw	r5,-25624(gp)
   8bd14:	d1a6fb17 	ldw	r6,-25620(gp)
   8bd18:	00816480 	call	81648 <main>
   8bd1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8bd20:	01000044 	movi	r4,1
   8bd24:	008b3d00 	call	8b3d0 <close>
  exit (result);
   8bd28:	e13fff17 	ldw	r4,-4(fp)
   8bd2c:	008e5b40 	call	8e5b4 <exit>

0008bd30 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8bd30:	defffe04 	addi	sp,sp,-8
   8bd34:	df000115 	stw	fp,4(sp)
   8bd38:	df000104 	addi	fp,sp,4
   8bd3c:	e13fff15 	stw	r4,-4(fp)
}
   8bd40:	e037883a 	mov	sp,fp
   8bd44:	df000017 	ldw	fp,0(sp)
   8bd48:	dec00104 	addi	sp,sp,4
   8bd4c:	f800283a 	ret

0008bd50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8bd50:	defffe04 	addi	sp,sp,-8
   8bd54:	df000115 	stw	fp,4(sp)
   8bd58:	df000104 	addi	fp,sp,4
   8bd5c:	e13fff15 	stw	r4,-4(fp)
}
   8bd60:	e037883a 	mov	sp,fp
   8bd64:	df000017 	ldw	fp,0(sp)
   8bd68:	dec00104 	addi	sp,sp,4
   8bd6c:	f800283a 	ret

0008bd70 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   8bd70:	defffd04 	addi	sp,sp,-12
   8bd74:	dfc00215 	stw	ra,8(sp)
   8bd78:	df000115 	stw	fp,4(sp)
   8bd7c:	df000104 	addi	fp,sp,4
   8bd80:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   8bd84:	00800274 	movhi	r2,9
   8bd88:	10833a04 	addi	r2,r2,3304
   8bd8c:	10800017 	ldw	r2,0(r2)
   8bd90:	11400217 	ldw	r5,8(r2)
   8bd94:	e13fff17 	ldw	r4,-4(fp)
   8bd98:	008e6600 	call	8e660 <fputs>
#endif
}
   8bd9c:	e037883a 	mov	sp,fp
   8bda0:	dfc00117 	ldw	ra,4(sp)
   8bda4:	df000017 	ldw	fp,0(sp)
   8bda8:	dec00204 	addi	sp,sp,8
   8bdac:	f800283a 	ret

0008bdb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8bdb0:	defff704 	addi	sp,sp,-36
   8bdb4:	dfc00815 	stw	ra,32(sp)
   8bdb8:	df000715 	stw	fp,28(sp)
   8bdbc:	df000704 	addi	fp,sp,28
   8bdc0:	e13ffb15 	stw	r4,-20(fp)
   8bdc4:	e17ffc15 	stw	r5,-16(fp)
   8bdc8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8bdcc:	e0bffb17 	ldw	r2,-20(fp)
   8bdd0:	1004803a 	cmplt	r2,r2,zero
   8bdd4:	1000091e 	bne	r2,zero,8bdfc <read+0x4c>
   8bdd8:	e13ffb17 	ldw	r4,-20(fp)
   8bddc:	01400304 	movi	r5,12
   8bde0:	008ace00 	call	8ace0 <__mulsi3>
   8bde4:	1007883a 	mov	r3,r2
   8bde8:	00800274 	movhi	r2,9
   8bdec:	10be8d04 	addi	r2,r2,-1484
   8bdf0:	1887883a 	add	r3,r3,r2
   8bdf4:	e0ffff15 	stw	r3,-4(fp)
   8bdf8:	00000106 	br	8be00 <read+0x50>
   8bdfc:	e03fff15 	stw	zero,-4(fp)
   8be00:	e0bfff17 	ldw	r2,-4(fp)
   8be04:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8be08:	e0bffa17 	ldw	r2,-24(fp)
   8be0c:	1005003a 	cmpeq	r2,r2,zero
   8be10:	1000241e 	bne	r2,zero,8bea4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8be14:	e0bffa17 	ldw	r2,-24(fp)
   8be18:	10800217 	ldw	r2,8(r2)
   8be1c:	108000cc 	andi	r2,r2,3
   8be20:	10800060 	cmpeqi	r2,r2,1
   8be24:	10001a1e 	bne	r2,zero,8be90 <read+0xe0>
   8be28:	e0bffa17 	ldw	r2,-24(fp)
   8be2c:	10800017 	ldw	r2,0(r2)
   8be30:	10800517 	ldw	r2,20(r2)
   8be34:	1005003a 	cmpeq	r2,r2,zero
   8be38:	1000151e 	bne	r2,zero,8be90 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8be3c:	e0bffa17 	ldw	r2,-24(fp)
   8be40:	10800017 	ldw	r2,0(r2)
   8be44:	10800517 	ldw	r2,20(r2)
   8be48:	e17ffc17 	ldw	r5,-16(fp)
   8be4c:	e1bffd17 	ldw	r6,-12(fp)
   8be50:	e13ffa17 	ldw	r4,-24(fp)
   8be54:	103ee83a 	callr	r2
   8be58:	e0bff915 	stw	r2,-28(fp)
   8be5c:	e0bff917 	ldw	r2,-28(fp)
   8be60:	1004403a 	cmpge	r2,r2,zero
   8be64:	1000071e 	bne	r2,zero,8be84 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8be68:	008bed40 	call	8bed4 <alt_get_errno>
   8be6c:	e0fff917 	ldw	r3,-28(fp)
   8be70:	00c7c83a 	sub	r3,zero,r3
   8be74:	10c00015 	stw	r3,0(r2)
          return -1;
   8be78:	00bfffc4 	movi	r2,-1
   8be7c:	e0bffe15 	stw	r2,-8(fp)
   8be80:	00000e06 	br	8bebc <read+0x10c>
        }
        return rval;
   8be84:	e0bff917 	ldw	r2,-28(fp)
   8be88:	e0bffe15 	stw	r2,-8(fp)
   8be8c:	00000b06 	br	8bebc <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8be90:	008bed40 	call	8bed4 <alt_get_errno>
   8be94:	1007883a 	mov	r3,r2
   8be98:	00800344 	movi	r2,13
   8be9c:	18800015 	stw	r2,0(r3)
   8bea0:	00000406 	br	8beb4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8bea4:	008bed40 	call	8bed4 <alt_get_errno>
   8bea8:	1007883a 	mov	r3,r2
   8beac:	00801444 	movi	r2,81
   8beb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8beb4:	00bfffc4 	movi	r2,-1
   8beb8:	e0bffe15 	stw	r2,-8(fp)
   8bebc:	e0bffe17 	ldw	r2,-8(fp)
}
   8bec0:	e037883a 	mov	sp,fp
   8bec4:	dfc00117 	ldw	ra,4(sp)
   8bec8:	df000017 	ldw	fp,0(sp)
   8becc:	dec00204 	addi	sp,sp,8
   8bed0:	f800283a 	ret

0008bed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bed4:	defffd04 	addi	sp,sp,-12
   8bed8:	dfc00215 	stw	ra,8(sp)
   8bedc:	df000115 	stw	fp,4(sp)
   8bee0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bee4:	00800274 	movhi	r2,9
   8bee8:	10834504 	addi	r2,r2,3348
   8beec:	10800017 	ldw	r2,0(r2)
   8bef0:	1005003a 	cmpeq	r2,r2,zero
   8bef4:	1000061e 	bne	r2,zero,8bf10 <alt_get_errno+0x3c>
   8bef8:	00800274 	movhi	r2,9
   8befc:	10834504 	addi	r2,r2,3348
   8bf00:	10800017 	ldw	r2,0(r2)
   8bf04:	103ee83a 	callr	r2
   8bf08:	e0bfff15 	stw	r2,-4(fp)
   8bf0c:	00000306 	br	8bf1c <alt_get_errno+0x48>
   8bf10:	00800274 	movhi	r2,9
   8bf14:	108a2d04 	addi	r2,r2,10420
   8bf18:	e0bfff15 	stw	r2,-4(fp)
   8bf1c:	e0bfff17 	ldw	r2,-4(fp)
}
   8bf20:	e037883a 	mov	sp,fp
   8bf24:	dfc00117 	ldw	ra,4(sp)
   8bf28:	df000017 	ldw	fp,0(sp)
   8bf2c:	dec00204 	addi	sp,sp,8
   8bf30:	f800283a 	ret

0008bf34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8bf34:	defffc04 	addi	sp,sp,-16
   8bf38:	dfc00315 	stw	ra,12(sp)
   8bf3c:	df000215 	stw	fp,8(sp)
   8bf40:	dc000115 	stw	r16,4(sp)
   8bf44:	df000104 	addi	fp,sp,4
   8bf48:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8bf4c:	e0bfff17 	ldw	r2,-4(fp)
   8bf50:	108000d0 	cmplti	r2,r2,3
   8bf54:	10000f1e 	bne	r2,zero,8bf94 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8bf58:	e13fff17 	ldw	r4,-4(fp)
   8bf5c:	04000274 	movhi	r16,9
   8bf60:	843e8d04 	addi	r16,r16,-1484
   8bf64:	01400304 	movi	r5,12
   8bf68:	008ace00 	call	8ace0 <__mulsi3>
   8bf6c:	1405883a 	add	r2,r2,r16
   8bf70:	10800204 	addi	r2,r2,8
   8bf74:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8bf78:	e13fff17 	ldw	r4,-4(fp)
   8bf7c:	04000274 	movhi	r16,9
   8bf80:	843e8d04 	addi	r16,r16,-1484
   8bf84:	01400304 	movi	r5,12
   8bf88:	008ace00 	call	8ace0 <__mulsi3>
   8bf8c:	1405883a 	add	r2,r2,r16
   8bf90:	10000015 	stw	zero,0(r2)
  }
}
   8bf94:	e037883a 	mov	sp,fp
   8bf98:	dfc00217 	ldw	ra,8(sp)
   8bf9c:	df000117 	ldw	fp,4(sp)
   8bfa0:	dc000017 	ldw	r16,0(sp)
   8bfa4:	dec00304 	addi	sp,sp,12
   8bfa8:	f800283a 	ret

0008bfac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8bfac:	defff804 	addi	sp,sp,-32
   8bfb0:	df000715 	stw	fp,28(sp)
   8bfb4:	df000704 	addi	fp,sp,28
   8bfb8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bfbc:	0005303a 	rdctl	r2,status
   8bfc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bfc4:	e0fffb17 	ldw	r3,-20(fp)
   8bfc8:	00bfff84 	movi	r2,-2
   8bfcc:	1884703a 	and	r2,r3,r2
   8bfd0:	1001703a 	wrctl	status,r2
  
  return context;
   8bfd4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8bfd8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8bfdc:	d0a01117 	ldw	r2,-32700(gp)
   8bfe0:	10c000c4 	addi	r3,r2,3
   8bfe4:	00bfff04 	movi	r2,-4
   8bfe8:	1884703a 	and	r2,r3,r2
   8bfec:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8bff0:	d0e01117 	ldw	r3,-32700(gp)
   8bff4:	e0bffe17 	ldw	r2,-8(fp)
   8bff8:	1887883a 	add	r3,r3,r2
   8bffc:	008003b4 	movhi	r2,14
   8c000:	1086a004 	addi	r2,r2,6784
   8c004:	10c0072e 	bgeu	r2,r3,8c024 <sbrk+0x78>
   8c008:	e0bffd17 	ldw	r2,-12(fp)
   8c00c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c010:	e0bffa17 	ldw	r2,-24(fp)
   8c014:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8c018:	00bfffc4 	movi	r2,-1
   8c01c:	e0bfff15 	stw	r2,-4(fp)
   8c020:	00000c06 	br	8c054 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8c024:	d0a01117 	ldw	r2,-32700(gp)
   8c028:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8c02c:	d0e01117 	ldw	r3,-32700(gp)
   8c030:	e0bffe17 	ldw	r2,-8(fp)
   8c034:	1885883a 	add	r2,r3,r2
   8c038:	d0a01115 	stw	r2,-32700(gp)
   8c03c:	e0bffd17 	ldw	r2,-12(fp)
   8c040:	e0bff915 	stw	r2,-28(fp)
   8c044:	e0bff917 	ldw	r2,-28(fp)
   8c048:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8c04c:	e0bffc17 	ldw	r2,-16(fp)
   8c050:	e0bfff15 	stw	r2,-4(fp)
   8c054:	e0bfff17 	ldw	r2,-4(fp)
} 
   8c058:	e037883a 	mov	sp,fp
   8c05c:	df000017 	ldw	fp,0(sp)
   8c060:	dec00104 	addi	sp,sp,4
   8c064:	f800283a 	ret

0008c068 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8c068:	defffd04 	addi	sp,sp,-12
   8c06c:	dfc00215 	stw	ra,8(sp)
   8c070:	df000115 	stw	fp,4(sp)
   8c074:	df000104 	addi	fp,sp,4
   8c078:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8c07c:	e13fff17 	ldw	r4,-4(fp)
   8c080:	008d9b40 	call	8d9b4 <alt_busy_sleep>
}
   8c084:	e037883a 	mov	sp,fp
   8c088:	dfc00117 	ldw	ra,4(sp)
   8c08c:	df000017 	ldw	fp,0(sp)
   8c090:	dec00204 	addi	sp,sp,8
   8c094:	f800283a 	ret

0008c098 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8c098:	defff704 	addi	sp,sp,-36
   8c09c:	dfc00815 	stw	ra,32(sp)
   8c0a0:	df000715 	stw	fp,28(sp)
   8c0a4:	df000704 	addi	fp,sp,28
   8c0a8:	e13ffb15 	stw	r4,-20(fp)
   8c0ac:	e17ffc15 	stw	r5,-16(fp)
   8c0b0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8c0b4:	e0bffb17 	ldw	r2,-20(fp)
   8c0b8:	1004803a 	cmplt	r2,r2,zero
   8c0bc:	1000091e 	bne	r2,zero,8c0e4 <write+0x4c>
   8c0c0:	e13ffb17 	ldw	r4,-20(fp)
   8c0c4:	01400304 	movi	r5,12
   8c0c8:	008ace00 	call	8ace0 <__mulsi3>
   8c0cc:	1007883a 	mov	r3,r2
   8c0d0:	00800274 	movhi	r2,9
   8c0d4:	10be8d04 	addi	r2,r2,-1484
   8c0d8:	1887883a 	add	r3,r3,r2
   8c0dc:	e0ffff15 	stw	r3,-4(fp)
   8c0e0:	00000106 	br	8c0e8 <write+0x50>
   8c0e4:	e03fff15 	stw	zero,-4(fp)
   8c0e8:	e0bfff17 	ldw	r2,-4(fp)
   8c0ec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8c0f0:	e0bffa17 	ldw	r2,-24(fp)
   8c0f4:	1005003a 	cmpeq	r2,r2,zero
   8c0f8:	1000241e 	bne	r2,zero,8c18c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8c0fc:	e0bffa17 	ldw	r2,-24(fp)
   8c100:	10800217 	ldw	r2,8(r2)
   8c104:	108000cc 	andi	r2,r2,3
   8c108:	1005003a 	cmpeq	r2,r2,zero
   8c10c:	10001a1e 	bne	r2,zero,8c178 <write+0xe0>
   8c110:	e0bffa17 	ldw	r2,-24(fp)
   8c114:	10800017 	ldw	r2,0(r2)
   8c118:	10800617 	ldw	r2,24(r2)
   8c11c:	1005003a 	cmpeq	r2,r2,zero
   8c120:	1000151e 	bne	r2,zero,8c178 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8c124:	e0bffa17 	ldw	r2,-24(fp)
   8c128:	10800017 	ldw	r2,0(r2)
   8c12c:	10800617 	ldw	r2,24(r2)
   8c130:	e17ffc17 	ldw	r5,-16(fp)
   8c134:	e1bffd17 	ldw	r6,-12(fp)
   8c138:	e13ffa17 	ldw	r4,-24(fp)
   8c13c:	103ee83a 	callr	r2
   8c140:	e0bff915 	stw	r2,-28(fp)
   8c144:	e0bff917 	ldw	r2,-28(fp)
   8c148:	1004403a 	cmpge	r2,r2,zero
   8c14c:	1000071e 	bne	r2,zero,8c16c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8c150:	008c1bc0 	call	8c1bc <alt_get_errno>
   8c154:	e0fff917 	ldw	r3,-28(fp)
   8c158:	00c7c83a 	sub	r3,zero,r3
   8c15c:	10c00015 	stw	r3,0(r2)
        return -1;
   8c160:	00bfffc4 	movi	r2,-1
   8c164:	e0bffe15 	stw	r2,-8(fp)
   8c168:	00000e06 	br	8c1a4 <write+0x10c>
      }
      return rval;
   8c16c:	e0bff917 	ldw	r2,-28(fp)
   8c170:	e0bffe15 	stw	r2,-8(fp)
   8c174:	00000b06 	br	8c1a4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8c178:	008c1bc0 	call	8c1bc <alt_get_errno>
   8c17c:	1007883a 	mov	r3,r2
   8c180:	00800344 	movi	r2,13
   8c184:	18800015 	stw	r2,0(r3)
   8c188:	00000406 	br	8c19c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8c18c:	008c1bc0 	call	8c1bc <alt_get_errno>
   8c190:	1007883a 	mov	r3,r2
   8c194:	00801444 	movi	r2,81
   8c198:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8c19c:	00bfffc4 	movi	r2,-1
   8c1a0:	e0bffe15 	stw	r2,-8(fp)
   8c1a4:	e0bffe17 	ldw	r2,-8(fp)
}
   8c1a8:	e037883a 	mov	sp,fp
   8c1ac:	dfc00117 	ldw	ra,4(sp)
   8c1b0:	df000017 	ldw	fp,0(sp)
   8c1b4:	dec00204 	addi	sp,sp,8
   8c1b8:	f800283a 	ret

0008c1bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c1bc:	defffd04 	addi	sp,sp,-12
   8c1c0:	dfc00215 	stw	ra,8(sp)
   8c1c4:	df000115 	stw	fp,4(sp)
   8c1c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c1cc:	00800274 	movhi	r2,9
   8c1d0:	10834504 	addi	r2,r2,3348
   8c1d4:	10800017 	ldw	r2,0(r2)
   8c1d8:	1005003a 	cmpeq	r2,r2,zero
   8c1dc:	1000061e 	bne	r2,zero,8c1f8 <alt_get_errno+0x3c>
   8c1e0:	00800274 	movhi	r2,9
   8c1e4:	10834504 	addi	r2,r2,3348
   8c1e8:	10800017 	ldw	r2,0(r2)
   8c1ec:	103ee83a 	callr	r2
   8c1f0:	e0bfff15 	stw	r2,-4(fp)
   8c1f4:	00000306 	br	8c204 <alt_get_errno+0x48>
   8c1f8:	00800274 	movhi	r2,9
   8c1fc:	108a2d04 	addi	r2,r2,10420
   8c200:	e0bfff15 	stw	r2,-4(fp)
   8c204:	e0bfff17 	ldw	r2,-4(fp)
}
   8c208:	e037883a 	mov	sp,fp
   8c20c:	dfc00117 	ldw	ra,4(sp)
   8c210:	df000017 	ldw	fp,0(sp)
   8c214:	dec00204 	addi	sp,sp,8
   8c218:	f800283a 	ret

0008c21c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8c21c:	defffd04 	addi	sp,sp,-12
   8c220:	dfc00215 	stw	ra,8(sp)
   8c224:	df000115 	stw	fp,4(sp)
   8c228:	df000104 	addi	fp,sp,4
   8c22c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8c230:	008e2fc0 	call	8e2fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8c234:	00800044 	movi	r2,1
   8c238:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8c23c:	e037883a 	mov	sp,fp
   8c240:	dfc00117 	ldw	ra,4(sp)
   8c244:	df000017 	ldw	fp,0(sp)
   8c248:	dec00204 	addi	sp,sp,8
   8c24c:	f800283a 	ret

0008c250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8c250:	defffe04 	addi	sp,sp,-8
   8c254:	dfc00115 	stw	ra,4(sp)
   8c258:	df000015 	stw	fp,0(sp)
   8c25c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   8c260:	01000434 	movhi	r4,16
   8c264:	21041004 	addi	r4,r4,4160
   8c268:	000b883a 	mov	r5,zero
   8c26c:	018000c4 	movi	r6,3
   8c270:	01c0fa04 	movi	r7,1000
   8c274:	008ce200 	call	8ce20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8c278:	01000274 	movhi	r4,9
   8c27c:	213ef704 	addi	r4,r4,-1060
   8c280:	000b883a 	mov	r5,zero
   8c284:	000d883a 	mov	r6,zero
   8c288:	008c44c0 	call	8c44c <altera_avalon_jtag_uart_init>
   8c28c:	01000274 	movhi	r4,9
   8c290:	213eed04 	addi	r4,r4,-1100
   8c294:	008c2cc0 	call	8c2cc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   8c298:	01000274 	movhi	r4,9
   8c29c:	21030f04 	addi	r4,r4,3132
   8c2a0:	000b883a 	mov	r5,zero
   8c2a4:	01800044 	movi	r6,1
   8c2a8:	008cfa80 	call	8cfa8 <altera_avalon_uart_init>
   8c2ac:	01000274 	movhi	r4,9
   8c2b0:	21030504 	addi	r4,r4,3092
   8c2b4:	008c2cc0 	call	8c2cc <alt_dev_reg>
}
   8c2b8:	e037883a 	mov	sp,fp
   8c2bc:	dfc00117 	ldw	ra,4(sp)
   8c2c0:	df000017 	ldw	fp,0(sp)
   8c2c4:	dec00204 	addi	sp,sp,8
   8c2c8:	f800283a 	ret

0008c2cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8c2cc:	defffd04 	addi	sp,sp,-12
   8c2d0:	dfc00215 	stw	ra,8(sp)
   8c2d4:	df000115 	stw	fp,4(sp)
   8c2d8:	df000104 	addi	fp,sp,4
   8c2dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8c2e0:	e13fff17 	ldw	r4,-4(fp)
   8c2e4:	01400274 	movhi	r5,9
   8c2e8:	29434204 	addi	r5,r5,3336
   8c2ec:	008db2c0 	call	8db2c <alt_dev_llist_insert>
}
   8c2f0:	e037883a 	mov	sp,fp
   8c2f4:	dfc00117 	ldw	ra,4(sp)
   8c2f8:	df000017 	ldw	fp,0(sp)
   8c2fc:	dec00204 	addi	sp,sp,8
   8c300:	f800283a 	ret

0008c304 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8c304:	defffa04 	addi	sp,sp,-24
   8c308:	dfc00515 	stw	ra,20(sp)
   8c30c:	df000415 	stw	fp,16(sp)
   8c310:	df000404 	addi	fp,sp,16
   8c314:	e13ffd15 	stw	r4,-12(fp)
   8c318:	e17ffe15 	stw	r5,-8(fp)
   8c31c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c320:	e0bffd17 	ldw	r2,-12(fp)
   8c324:	10800017 	ldw	r2,0(r2)
   8c328:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8c32c:	e0bffc17 	ldw	r2,-16(fp)
   8c330:	11000a04 	addi	r4,r2,40
   8c334:	e0bffd17 	ldw	r2,-12(fp)
   8c338:	11c00217 	ldw	r7,8(r2)
   8c33c:	e17ffe17 	ldw	r5,-8(fp)
   8c340:	e1bfff17 	ldw	r6,-4(fp)
   8c344:	008c94c0 	call	8c94c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8c348:	e037883a 	mov	sp,fp
   8c34c:	dfc00117 	ldw	ra,4(sp)
   8c350:	df000017 	ldw	fp,0(sp)
   8c354:	dec00204 	addi	sp,sp,8
   8c358:	f800283a 	ret

0008c35c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8c35c:	defffa04 	addi	sp,sp,-24
   8c360:	dfc00515 	stw	ra,20(sp)
   8c364:	df000415 	stw	fp,16(sp)
   8c368:	df000404 	addi	fp,sp,16
   8c36c:	e13ffd15 	stw	r4,-12(fp)
   8c370:	e17ffe15 	stw	r5,-8(fp)
   8c374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c378:	e0bffd17 	ldw	r2,-12(fp)
   8c37c:	10800017 	ldw	r2,0(r2)
   8c380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8c384:	e0bffc17 	ldw	r2,-16(fp)
   8c388:	11000a04 	addi	r4,r2,40
   8c38c:	e0bffd17 	ldw	r2,-12(fp)
   8c390:	11c00217 	ldw	r7,8(r2)
   8c394:	e17ffe17 	ldw	r5,-8(fp)
   8c398:	e1bfff17 	ldw	r6,-4(fp)
   8c39c:	008cb700 	call	8cb70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8c3a0:	e037883a 	mov	sp,fp
   8c3a4:	dfc00117 	ldw	ra,4(sp)
   8c3a8:	df000017 	ldw	fp,0(sp)
   8c3ac:	dec00204 	addi	sp,sp,8
   8c3b0:	f800283a 	ret

0008c3b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8c3b4:	defffc04 	addi	sp,sp,-16
   8c3b8:	dfc00315 	stw	ra,12(sp)
   8c3bc:	df000215 	stw	fp,8(sp)
   8c3c0:	df000204 	addi	fp,sp,8
   8c3c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c3c8:	e0bfff17 	ldw	r2,-4(fp)
   8c3cc:	10800017 	ldw	r2,0(r2)
   8c3d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8c3d4:	e0bffe17 	ldw	r2,-8(fp)
   8c3d8:	11000a04 	addi	r4,r2,40
   8c3dc:	e0bfff17 	ldw	r2,-4(fp)
   8c3e0:	11400217 	ldw	r5,8(r2)
   8c3e4:	008c7e40 	call	8c7e4 <altera_avalon_jtag_uart_close>
}
   8c3e8:	e037883a 	mov	sp,fp
   8c3ec:	dfc00117 	ldw	ra,4(sp)
   8c3f0:	df000017 	ldw	fp,0(sp)
   8c3f4:	dec00204 	addi	sp,sp,8
   8c3f8:	f800283a 	ret

0008c3fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8c3fc:	defffa04 	addi	sp,sp,-24
   8c400:	dfc00515 	stw	ra,20(sp)
   8c404:	df000415 	stw	fp,16(sp)
   8c408:	df000404 	addi	fp,sp,16
   8c40c:	e13ffd15 	stw	r4,-12(fp)
   8c410:	e17ffe15 	stw	r5,-8(fp)
   8c414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8c418:	e0bffd17 	ldw	r2,-12(fp)
   8c41c:	10800017 	ldw	r2,0(r2)
   8c420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8c424:	e0bffc17 	ldw	r2,-16(fp)
   8c428:	11000a04 	addi	r4,r2,40
   8c42c:	e17ffe17 	ldw	r5,-8(fp)
   8c430:	e1bfff17 	ldw	r6,-4(fp)
   8c434:	008c8580 	call	8c858 <altera_avalon_jtag_uart_ioctl>
}
   8c438:	e037883a 	mov	sp,fp
   8c43c:	dfc00117 	ldw	ra,4(sp)
   8c440:	df000017 	ldw	fp,0(sp)
   8c444:	dec00204 	addi	sp,sp,8
   8c448:	f800283a 	ret

0008c44c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8c44c:	defffa04 	addi	sp,sp,-24
   8c450:	dfc00515 	stw	ra,20(sp)
   8c454:	df000415 	stw	fp,16(sp)
   8c458:	df000404 	addi	fp,sp,16
   8c45c:	e13ffd15 	stw	r4,-12(fp)
   8c460:	e17ffe15 	stw	r5,-8(fp)
   8c464:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c468:	e0fffd17 	ldw	r3,-12(fp)
   8c46c:	00800044 	movi	r2,1
   8c470:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8c474:	e0bffd17 	ldw	r2,-12(fp)
   8c478:	10800017 	ldw	r2,0(r2)
   8c47c:	11000104 	addi	r4,r2,4
   8c480:	e0bffd17 	ldw	r2,-12(fp)
   8c484:	10800817 	ldw	r2,32(r2)
   8c488:	1007883a 	mov	r3,r2
   8c48c:	2005883a 	mov	r2,r4
   8c490:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8c494:	e13ffe17 	ldw	r4,-8(fp)
   8c498:	e17fff17 	ldw	r5,-4(fp)
   8c49c:	d8000015 	stw	zero,0(sp)
   8c4a0:	01800274 	movhi	r6,9
   8c4a4:	31b14304 	addi	r6,r6,-15092
   8c4a8:	e1fffd17 	ldw	r7,-12(fp)
   8c4ac:	008b6940 	call	8b694 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8c4b0:	e0bffd17 	ldw	r2,-12(fp)
   8c4b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8c4b8:	e0bffd17 	ldw	r2,-12(fp)
   8c4bc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8c4c0:	00800274 	movhi	r2,9
   8c4c4:	108a3204 	addi	r2,r2,10440
   8c4c8:	10800017 	ldw	r2,0(r2)
   8c4cc:	100b883a 	mov	r5,r2
   8c4d0:	01800274 	movhi	r6,9
   8c4d4:	31b1cd04 	addi	r6,r6,-14540
   8c4d8:	e1fffd17 	ldw	r7,-12(fp)
   8c4dc:	008d8600 	call	8d860 <alt_alarm_start>
   8c4e0:	1004403a 	cmpge	r2,r2,zero
   8c4e4:	1000041e 	bne	r2,zero,8c4f8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8c4e8:	e0fffd17 	ldw	r3,-12(fp)
   8c4ec:	00a00034 	movhi	r2,32768
   8c4f0:	10bfffc4 	addi	r2,r2,-1
   8c4f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8c4f8:	e037883a 	mov	sp,fp
   8c4fc:	dfc00117 	ldw	ra,4(sp)
   8c500:	df000017 	ldw	fp,0(sp)
   8c504:	dec00204 	addi	sp,sp,8
   8c508:	f800283a 	ret

0008c50c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8c50c:	defff804 	addi	sp,sp,-32
   8c510:	df000715 	stw	fp,28(sp)
   8c514:	df000704 	addi	fp,sp,28
   8c518:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8c51c:	e0bfff17 	ldw	r2,-4(fp)
   8c520:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8c524:	e0bffe17 	ldw	r2,-8(fp)
   8c528:	10800017 	ldw	r2,0(r2)
   8c52c:	e0bffd15 	stw	r2,-12(fp)
   8c530:	00000006 	br	8c534 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c534:	e0bffd17 	ldw	r2,-12(fp)
   8c538:	10800104 	addi	r2,r2,4
   8c53c:	10800037 	ldwio	r2,0(r2)
   8c540:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8c544:	e0bffc17 	ldw	r2,-16(fp)
   8c548:	1080c00c 	andi	r2,r2,768
   8c54c:	1005003a 	cmpeq	r2,r2,zero
   8c550:	1000741e 	bne	r2,zero,8c724 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8c554:	e0bffc17 	ldw	r2,-16(fp)
   8c558:	1080400c 	andi	r2,r2,256
   8c55c:	1005003a 	cmpeq	r2,r2,zero
   8c560:	1000351e 	bne	r2,zero,8c638 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8c564:	00800074 	movhi	r2,1
   8c568:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c56c:	e0bffe17 	ldw	r2,-8(fp)
   8c570:	10800a17 	ldw	r2,40(r2)
   8c574:	10800044 	addi	r2,r2,1
   8c578:	1081ffcc 	andi	r2,r2,2047
   8c57c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8c580:	e0bffe17 	ldw	r2,-8(fp)
   8c584:	10c00b17 	ldw	r3,44(r2)
   8c588:	e0bffa17 	ldw	r2,-24(fp)
   8c58c:	18801626 	beq	r3,r2,8c5e8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8c590:	e0bffd17 	ldw	r2,-12(fp)
   8c594:	10800037 	ldwio	r2,0(r2)
   8c598:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8c59c:	e0bffb17 	ldw	r2,-20(fp)
   8c5a0:	10a0000c 	andi	r2,r2,32768
   8c5a4:	1005003a 	cmpeq	r2,r2,zero
   8c5a8:	10000f1e 	bne	r2,zero,8c5e8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c5ac:	e0bffe17 	ldw	r2,-8(fp)
   8c5b0:	10c00a17 	ldw	r3,40(r2)
   8c5b4:	e0bffb17 	ldw	r2,-20(fp)
   8c5b8:	1009883a 	mov	r4,r2
   8c5bc:	e0bffe17 	ldw	r2,-8(fp)
   8c5c0:	1885883a 	add	r2,r3,r2
   8c5c4:	10800e04 	addi	r2,r2,56
   8c5c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c5cc:	e0bffe17 	ldw	r2,-8(fp)
   8c5d0:	10800a17 	ldw	r2,40(r2)
   8c5d4:	10800044 	addi	r2,r2,1
   8c5d8:	10c1ffcc 	andi	r3,r2,2047
   8c5dc:	e0bffe17 	ldw	r2,-8(fp)
   8c5e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8c5e4:	003fe106 	br	8c56c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c5e8:	e0bffb17 	ldw	r2,-20(fp)
   8c5ec:	10bfffec 	andhi	r2,r2,65535
   8c5f0:	1005003a 	cmpeq	r2,r2,zero
   8c5f4:	1000101e 	bne	r2,zero,8c638 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c5f8:	e0bffe17 	ldw	r2,-8(fp)
   8c5fc:	10c00817 	ldw	r3,32(r2)
   8c600:	00bfff84 	movi	r2,-2
   8c604:	1886703a 	and	r3,r3,r2
   8c608:	e0bffe17 	ldw	r2,-8(fp)
   8c60c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c610:	e0bffd17 	ldw	r2,-12(fp)
   8c614:	11000104 	addi	r4,r2,4
   8c618:	e0bffe17 	ldw	r2,-8(fp)
   8c61c:	10800817 	ldw	r2,32(r2)
   8c620:	1007883a 	mov	r3,r2
   8c624:	2005883a 	mov	r2,r4
   8c628:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c62c:	e0bffd17 	ldw	r2,-12(fp)
   8c630:	10800104 	addi	r2,r2,4
   8c634:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c638:	e0bffc17 	ldw	r2,-16(fp)
   8c63c:	1080800c 	andi	r2,r2,512
   8c640:	1005003a 	cmpeq	r2,r2,zero
   8c644:	103fbb1e 	bne	r2,zero,8c534 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c648:	e0bffc17 	ldw	r2,-16(fp)
   8c64c:	10bfffec 	andhi	r2,r2,65535
   8c650:	1004d43a 	srli	r2,r2,16
   8c654:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c658:	00001506 	br	8c6b0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c65c:	e13ffd17 	ldw	r4,-12(fp)
   8c660:	e0bffe17 	ldw	r2,-8(fp)
   8c664:	10c00d17 	ldw	r3,52(r2)
   8c668:	e0bffe17 	ldw	r2,-8(fp)
   8c66c:	1885883a 	add	r2,r3,r2
   8c670:	10820e04 	addi	r2,r2,2104
   8c674:	10800003 	ldbu	r2,0(r2)
   8c678:	10c03fcc 	andi	r3,r2,255
   8c67c:	18c0201c 	xori	r3,r3,128
   8c680:	18ffe004 	addi	r3,r3,-128
   8c684:	2005883a 	mov	r2,r4
   8c688:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c68c:	e0bffe17 	ldw	r2,-8(fp)
   8c690:	10800d17 	ldw	r2,52(r2)
   8c694:	10800044 	addi	r2,r2,1
   8c698:	10c1ffcc 	andi	r3,r2,2047
   8c69c:	e0bffe17 	ldw	r2,-8(fp)
   8c6a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8c6a4:	e0bff917 	ldw	r2,-28(fp)
   8c6a8:	10bfffc4 	addi	r2,r2,-1
   8c6ac:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c6b0:	e0bff917 	ldw	r2,-28(fp)
   8c6b4:	1005003a 	cmpeq	r2,r2,zero
   8c6b8:	1000051e 	bne	r2,zero,8c6d0 <altera_avalon_jtag_uart_irq+0x1c4>
   8c6bc:	e0bffe17 	ldw	r2,-8(fp)
   8c6c0:	10c00d17 	ldw	r3,52(r2)
   8c6c4:	e0bffe17 	ldw	r2,-8(fp)
   8c6c8:	10800c17 	ldw	r2,48(r2)
   8c6cc:	18bfe31e 	bne	r3,r2,8c65c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c6d0:	e0bff917 	ldw	r2,-28(fp)
   8c6d4:	1005003a 	cmpeq	r2,r2,zero
   8c6d8:	103f961e 	bne	r2,zero,8c534 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c6dc:	e0bffe17 	ldw	r2,-8(fp)
   8c6e0:	10c00817 	ldw	r3,32(r2)
   8c6e4:	00bfff44 	movi	r2,-3
   8c6e8:	1886703a 	and	r3,r3,r2
   8c6ec:	e0bffe17 	ldw	r2,-8(fp)
   8c6f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c6f4:	e0bffe17 	ldw	r2,-8(fp)
   8c6f8:	10800017 	ldw	r2,0(r2)
   8c6fc:	11000104 	addi	r4,r2,4
   8c700:	e0bffe17 	ldw	r2,-8(fp)
   8c704:	10800817 	ldw	r2,32(r2)
   8c708:	1007883a 	mov	r3,r2
   8c70c:	2005883a 	mov	r2,r4
   8c710:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c714:	e0bffd17 	ldw	r2,-12(fp)
   8c718:	10800104 	addi	r2,r2,4
   8c71c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c720:	003f8406 	br	8c534 <altera_avalon_jtag_uart_irq+0x28>
}
   8c724:	e037883a 	mov	sp,fp
   8c728:	df000017 	ldw	fp,0(sp)
   8c72c:	dec00104 	addi	sp,sp,4
   8c730:	f800283a 	ret

0008c734 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c734:	defffc04 	addi	sp,sp,-16
   8c738:	df000315 	stw	fp,12(sp)
   8c73c:	df000304 	addi	fp,sp,12
   8c740:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c744:	e0bfff17 	ldw	r2,-4(fp)
   8c748:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c74c:	e0bffe17 	ldw	r2,-8(fp)
   8c750:	10800017 	ldw	r2,0(r2)
   8c754:	10800104 	addi	r2,r2,4
   8c758:	10800037 	ldwio	r2,0(r2)
   8c75c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c760:	e0bffd17 	ldw	r2,-12(fp)
   8c764:	1081000c 	andi	r2,r2,1024
   8c768:	1005003a 	cmpeq	r2,r2,zero
   8c76c:	10000c1e 	bne	r2,zero,8c7a0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c770:	e0bffe17 	ldw	r2,-8(fp)
   8c774:	10800017 	ldw	r2,0(r2)
   8c778:	11000104 	addi	r4,r2,4
   8c77c:	e0bffe17 	ldw	r2,-8(fp)
   8c780:	10800817 	ldw	r2,32(r2)
   8c784:	10810014 	ori	r2,r2,1024
   8c788:	1007883a 	mov	r3,r2
   8c78c:	2005883a 	mov	r2,r4
   8c790:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c794:	e0bffe17 	ldw	r2,-8(fp)
   8c798:	10000915 	stw	zero,36(r2)
   8c79c:	00000a06 	br	8c7c8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c7a0:	e0bffe17 	ldw	r2,-8(fp)
   8c7a4:	10c00917 	ldw	r3,36(r2)
   8c7a8:	00a00034 	movhi	r2,32768
   8c7ac:	10bfff04 	addi	r2,r2,-4
   8c7b0:	10c00536 	bltu	r2,r3,8c7c8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8c7b4:	e0bffe17 	ldw	r2,-8(fp)
   8c7b8:	10800917 	ldw	r2,36(r2)
   8c7bc:	10c00044 	addi	r3,r2,1
   8c7c0:	e0bffe17 	ldw	r2,-8(fp)
   8c7c4:	10c00915 	stw	r3,36(r2)
   8c7c8:	00800274 	movhi	r2,9
   8c7cc:	108a3204 	addi	r2,r2,10440
   8c7d0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8c7d4:	e037883a 	mov	sp,fp
   8c7d8:	df000017 	ldw	fp,0(sp)
   8c7dc:	dec00104 	addi	sp,sp,4
   8c7e0:	f800283a 	ret

0008c7e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c7e4:	defffc04 	addi	sp,sp,-16
   8c7e8:	df000315 	stw	fp,12(sp)
   8c7ec:	df000304 	addi	fp,sp,12
   8c7f0:	e13ffd15 	stw	r4,-12(fp)
   8c7f4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c7f8:	00000706 	br	8c818 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8c7fc:	e0bffe17 	ldw	r2,-8(fp)
   8c800:	1090000c 	andi	r2,r2,16384
   8c804:	1005003a 	cmpeq	r2,r2,zero
   8c808:	1000031e 	bne	r2,zero,8c818 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8c80c:	00bffd44 	movi	r2,-11
   8c810:	e0bfff15 	stw	r2,-4(fp)
   8c814:	00000b06 	br	8c844 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c818:	e0bffd17 	ldw	r2,-12(fp)
   8c81c:	10c00d17 	ldw	r3,52(r2)
   8c820:	e0bffd17 	ldw	r2,-12(fp)
   8c824:	10800c17 	ldw	r2,48(r2)
   8c828:	18800526 	beq	r3,r2,8c840 <altera_avalon_jtag_uart_close+0x5c>
   8c82c:	e0bffd17 	ldw	r2,-12(fp)
   8c830:	10c00917 	ldw	r3,36(r2)
   8c834:	e0bffd17 	ldw	r2,-12(fp)
   8c838:	10800117 	ldw	r2,4(r2)
   8c83c:	18bfef36 	bltu	r3,r2,8c7fc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c840:	e03fff15 	stw	zero,-4(fp)
   8c844:	e0bfff17 	ldw	r2,-4(fp)
}
   8c848:	e037883a 	mov	sp,fp
   8c84c:	df000017 	ldw	fp,0(sp)
   8c850:	dec00104 	addi	sp,sp,4
   8c854:	f800283a 	ret

0008c858 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c858:	defff804 	addi	sp,sp,-32
   8c85c:	df000715 	stw	fp,28(sp)
   8c860:	df000704 	addi	fp,sp,28
   8c864:	e13ffb15 	stw	r4,-20(fp)
   8c868:	e17ffc15 	stw	r5,-16(fp)
   8c86c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8c870:	00bff9c4 	movi	r2,-25
   8c874:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8c878:	e0bffc17 	ldw	r2,-16(fp)
   8c87c:	e0bfff15 	stw	r2,-4(fp)
   8c880:	e0ffff17 	ldw	r3,-4(fp)
   8c884:	189a8060 	cmpeqi	r2,r3,27137
   8c888:	1000041e 	bne	r2,zero,8c89c <altera_avalon_jtag_uart_ioctl+0x44>
   8c88c:	e0ffff17 	ldw	r3,-4(fp)
   8c890:	189a80a0 	cmpeqi	r2,r3,27138
   8c894:	10001b1e 	bne	r2,zero,8c904 <altera_avalon_jtag_uart_ioctl+0xac>
   8c898:	00002706 	br	8c938 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c89c:	e0bffb17 	ldw	r2,-20(fp)
   8c8a0:	10c00117 	ldw	r3,4(r2)
   8c8a4:	00a00034 	movhi	r2,32768
   8c8a8:	10bfffc4 	addi	r2,r2,-1
   8c8ac:	18802226 	beq	r3,r2,8c938 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8c8b0:	e0bffd17 	ldw	r2,-12(fp)
   8c8b4:	10800017 	ldw	r2,0(r2)
   8c8b8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c8bc:	e0bff917 	ldw	r2,-28(fp)
   8c8c0:	10800090 	cmplti	r2,r2,2
   8c8c4:	1000071e 	bne	r2,zero,8c8e4 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c8c8:	e0fff917 	ldw	r3,-28(fp)
   8c8cc:	00a00034 	movhi	r2,32768
   8c8d0:	10bfffc4 	addi	r2,r2,-1
   8c8d4:	18800326 	beq	r3,r2,8c8e4 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c8d8:	e0bff917 	ldw	r2,-28(fp)
   8c8dc:	e0bffe15 	stw	r2,-8(fp)
   8c8e0:	00000306 	br	8c8f0 <altera_avalon_jtag_uart_ioctl+0x98>
   8c8e4:	00e00034 	movhi	r3,32768
   8c8e8:	18ffff84 	addi	r3,r3,-2
   8c8ec:	e0fffe15 	stw	r3,-8(fp)
   8c8f0:	e0bffb17 	ldw	r2,-20(fp)
   8c8f4:	e0fffe17 	ldw	r3,-8(fp)
   8c8f8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8c8fc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8c900:	00000d06 	br	8c938 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c904:	e0bffb17 	ldw	r2,-20(fp)
   8c908:	10c00117 	ldw	r3,4(r2)
   8c90c:	00a00034 	movhi	r2,32768
   8c910:	10bfffc4 	addi	r2,r2,-1
   8c914:	18800826 	beq	r3,r2,8c938 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c918:	e13ffd17 	ldw	r4,-12(fp)
   8c91c:	e0bffb17 	ldw	r2,-20(fp)
   8c920:	10c00917 	ldw	r3,36(r2)
   8c924:	e0bffb17 	ldw	r2,-20(fp)
   8c928:	10800117 	ldw	r2,4(r2)
   8c92c:	1885803a 	cmpltu	r2,r3,r2
   8c930:	20800015 	stw	r2,0(r4)
      rc = 0;
   8c934:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8c938:	e0bffa17 	ldw	r2,-24(fp)
}
   8c93c:	e037883a 	mov	sp,fp
   8c940:	df000017 	ldw	fp,0(sp)
   8c944:	dec00104 	addi	sp,sp,4
   8c948:	f800283a 	ret

0008c94c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c94c:	defff204 	addi	sp,sp,-56
   8c950:	dfc00d15 	stw	ra,52(sp)
   8c954:	df000c15 	stw	fp,48(sp)
   8c958:	df000c04 	addi	fp,sp,48
   8c95c:	e13ffb15 	stw	r4,-20(fp)
   8c960:	e17ffc15 	stw	r5,-16(fp)
   8c964:	e1bffd15 	stw	r6,-12(fp)
   8c968:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8c96c:	e0bffc17 	ldw	r2,-16(fp)
   8c970:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c974:	00004806 	br	8ca98 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c978:	e0bffb17 	ldw	r2,-20(fp)
   8c97c:	10800a17 	ldw	r2,40(r2)
   8c980:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c984:	e0bffb17 	ldw	r2,-20(fp)
   8c988:	10800b17 	ldw	r2,44(r2)
   8c98c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8c990:	e0fff717 	ldw	r3,-36(fp)
   8c994:	e0bff617 	ldw	r2,-40(fp)
   8c998:	18800536 	bltu	r3,r2,8c9b0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c99c:	e0bff717 	ldw	r2,-36(fp)
   8c9a0:	e0fff617 	ldw	r3,-40(fp)
   8c9a4:	10c5c83a 	sub	r2,r2,r3
   8c9a8:	e0bff815 	stw	r2,-32(fp)
   8c9ac:	00000406 	br	8c9c0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c9b0:	00820004 	movi	r2,2048
   8c9b4:	e0fff617 	ldw	r3,-40(fp)
   8c9b8:	10c5c83a 	sub	r2,r2,r3
   8c9bc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c9c0:	e0bff817 	ldw	r2,-32(fp)
   8c9c4:	1005003a 	cmpeq	r2,r2,zero
   8c9c8:	10001f1e 	bne	r2,zero,8ca48 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8c9cc:	e0fffd17 	ldw	r3,-12(fp)
   8c9d0:	e0bff817 	ldw	r2,-32(fp)
   8c9d4:	1880022e 	bgeu	r3,r2,8c9e0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8c9d8:	e0bffd17 	ldw	r2,-12(fp)
   8c9dc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c9e0:	e0bffb17 	ldw	r2,-20(fp)
   8c9e4:	10c00e04 	addi	r3,r2,56
   8c9e8:	e0bff617 	ldw	r2,-40(fp)
   8c9ec:	1887883a 	add	r3,r3,r2
   8c9f0:	e0bffa17 	ldw	r2,-24(fp)
   8c9f4:	1009883a 	mov	r4,r2
   8c9f8:	180b883a 	mov	r5,r3
   8c9fc:	e1bff817 	ldw	r6,-32(fp)
   8ca00:	00818940 	call	81894 <memcpy>
      ptr   += n;
   8ca04:	e0fff817 	ldw	r3,-32(fp)
   8ca08:	e0bffa17 	ldw	r2,-24(fp)
   8ca0c:	10c5883a 	add	r2,r2,r3
   8ca10:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8ca14:	e0fffd17 	ldw	r3,-12(fp)
   8ca18:	e0bff817 	ldw	r2,-32(fp)
   8ca1c:	1885c83a 	sub	r2,r3,r2
   8ca20:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ca24:	e0fff617 	ldw	r3,-40(fp)
   8ca28:	e0bff817 	ldw	r2,-32(fp)
   8ca2c:	1885883a 	add	r2,r3,r2
   8ca30:	10c1ffcc 	andi	r3,r2,2047
   8ca34:	e0bffb17 	ldw	r2,-20(fp)
   8ca38:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8ca3c:	e0bffd17 	ldw	r2,-12(fp)
   8ca40:	10800048 	cmpgei	r2,r2,1
   8ca44:	103fcc1e 	bne	r2,zero,8c978 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8ca48:	e0fffa17 	ldw	r3,-24(fp)
   8ca4c:	e0bffc17 	ldw	r2,-16(fp)
   8ca50:	1880141e 	bne	r3,r2,8caa4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8ca54:	e0bffe17 	ldw	r2,-8(fp)
   8ca58:	1090000c 	andi	r2,r2,16384
   8ca5c:	1004c03a 	cmpne	r2,r2,zero
   8ca60:	1000101e 	bne	r2,zero,8caa4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8ca64:	e0bffb17 	ldw	r2,-20(fp)
   8ca68:	10c00a17 	ldw	r3,40(r2)
   8ca6c:	e0bff717 	ldw	r2,-36(fp)
   8ca70:	1880051e 	bne	r3,r2,8ca88 <altera_avalon_jtag_uart_read+0x13c>
   8ca74:	e0bffb17 	ldw	r2,-20(fp)
   8ca78:	10c00917 	ldw	r3,36(r2)
   8ca7c:	e0bffb17 	ldw	r2,-20(fp)
   8ca80:	10800117 	ldw	r2,4(r2)
   8ca84:	18bff736 	bltu	r3,r2,8ca64 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8ca88:	e0bffb17 	ldw	r2,-20(fp)
   8ca8c:	10c00a17 	ldw	r3,40(r2)
   8ca90:	e0bff717 	ldw	r2,-36(fp)
   8ca94:	18800326 	beq	r3,r2,8caa4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8ca98:	e0bffd17 	ldw	r2,-12(fp)
   8ca9c:	10800048 	cmpgei	r2,r2,1
   8caa0:	103fb51e 	bne	r2,zero,8c978 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8caa4:	e0fffa17 	ldw	r3,-24(fp)
   8caa8:	e0bffc17 	ldw	r2,-16(fp)
   8caac:	18801926 	beq	r3,r2,8cb14 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cab0:	0005303a 	rdctl	r2,status
   8cab4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cab8:	e0fff517 	ldw	r3,-44(fp)
   8cabc:	00bfff84 	movi	r2,-2
   8cac0:	1884703a 	and	r2,r3,r2
   8cac4:	1001703a 	wrctl	status,r2
  
  return context;
   8cac8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8cacc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8cad0:	e0bffb17 	ldw	r2,-20(fp)
   8cad4:	10800817 	ldw	r2,32(r2)
   8cad8:	10c00054 	ori	r3,r2,1
   8cadc:	e0bffb17 	ldw	r2,-20(fp)
   8cae0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8cae4:	e0bffb17 	ldw	r2,-20(fp)
   8cae8:	10800017 	ldw	r2,0(r2)
   8caec:	11000104 	addi	r4,r2,4
   8caf0:	e0bffb17 	ldw	r2,-20(fp)
   8caf4:	10800817 	ldw	r2,32(r2)
   8caf8:	1007883a 	mov	r3,r2
   8cafc:	2005883a 	mov	r2,r4
   8cb00:	10c00035 	stwio	r3,0(r2)
   8cb04:	e0bff917 	ldw	r2,-28(fp)
   8cb08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cb0c:	e0bff417 	ldw	r2,-48(fp)
   8cb10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8cb14:	e0fffa17 	ldw	r3,-24(fp)
   8cb18:	e0bffc17 	ldw	r2,-16(fp)
   8cb1c:	18800526 	beq	r3,r2,8cb34 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8cb20:	e0fffa17 	ldw	r3,-24(fp)
   8cb24:	e0bffc17 	ldw	r2,-16(fp)
   8cb28:	1887c83a 	sub	r3,r3,r2
   8cb2c:	e0ffff15 	stw	r3,-4(fp)
   8cb30:	00000906 	br	8cb58 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8cb34:	e0bffe17 	ldw	r2,-8(fp)
   8cb38:	1090000c 	andi	r2,r2,16384
   8cb3c:	1005003a 	cmpeq	r2,r2,zero
   8cb40:	1000031e 	bne	r2,zero,8cb50 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8cb44:	00bffd44 	movi	r2,-11
   8cb48:	e0bfff15 	stw	r2,-4(fp)
   8cb4c:	00000206 	br	8cb58 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8cb50:	00bffec4 	movi	r2,-5
   8cb54:	e0bfff15 	stw	r2,-4(fp)
   8cb58:	e0bfff17 	ldw	r2,-4(fp)
}
   8cb5c:	e037883a 	mov	sp,fp
   8cb60:	dfc00117 	ldw	ra,4(sp)
   8cb64:	df000017 	ldw	fp,0(sp)
   8cb68:	dec00204 	addi	sp,sp,8
   8cb6c:	f800283a 	ret

0008cb70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8cb70:	defff204 	addi	sp,sp,-56
   8cb74:	dfc00d15 	stw	ra,52(sp)
   8cb78:	df000c15 	stw	fp,48(sp)
   8cb7c:	df000c04 	addi	fp,sp,48
   8cb80:	e13ffb15 	stw	r4,-20(fp)
   8cb84:	e17ffc15 	stw	r5,-16(fp)
   8cb88:	e1bffd15 	stw	r6,-12(fp)
   8cb8c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8cb90:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8cb94:	e0bffc17 	ldw	r2,-16(fp)
   8cb98:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8cb9c:	00003a06 	br	8cc88 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8cba0:	e0bffb17 	ldw	r2,-20(fp)
   8cba4:	10800c17 	ldw	r2,48(r2)
   8cba8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8cbac:	e0bffb17 	ldw	r2,-20(fp)
   8cbb0:	10800d17 	ldw	r2,52(r2)
   8cbb4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8cbb8:	e0fffa17 	ldw	r3,-24(fp)
   8cbbc:	e0bff917 	ldw	r2,-28(fp)
   8cbc0:	1880062e 	bgeu	r3,r2,8cbdc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8cbc4:	e0fff917 	ldw	r3,-28(fp)
   8cbc8:	e0bffa17 	ldw	r2,-24(fp)
   8cbcc:	1885c83a 	sub	r2,r3,r2
   8cbd0:	10bfffc4 	addi	r2,r2,-1
   8cbd4:	e0bff815 	stw	r2,-32(fp)
   8cbd8:	00000c06 	br	8cc0c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8cbdc:	e0bff917 	ldw	r2,-28(fp)
   8cbe0:	1005003a 	cmpeq	r2,r2,zero
   8cbe4:	1000051e 	bne	r2,zero,8cbfc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8cbe8:	00820004 	movi	r2,2048
   8cbec:	e0fffa17 	ldw	r3,-24(fp)
   8cbf0:	10c5c83a 	sub	r2,r2,r3
   8cbf4:	e0bff815 	stw	r2,-32(fp)
   8cbf8:	00000406 	br	8cc0c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8cbfc:	0081ffc4 	movi	r2,2047
   8cc00:	e0fffa17 	ldw	r3,-24(fp)
   8cc04:	10c5c83a 	sub	r2,r2,r3
   8cc08:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8cc0c:	e0bff817 	ldw	r2,-32(fp)
   8cc10:	1005003a 	cmpeq	r2,r2,zero
   8cc14:	10001f1e 	bne	r2,zero,8cc94 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8cc18:	e0fffd17 	ldw	r3,-12(fp)
   8cc1c:	e0bff817 	ldw	r2,-32(fp)
   8cc20:	1880022e 	bgeu	r3,r2,8cc2c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8cc24:	e0bffd17 	ldw	r2,-12(fp)
   8cc28:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8cc2c:	e0bffb17 	ldw	r2,-20(fp)
   8cc30:	10c20e04 	addi	r3,r2,2104
   8cc34:	e0bffa17 	ldw	r2,-24(fp)
   8cc38:	1885883a 	add	r2,r3,r2
   8cc3c:	e0fffc17 	ldw	r3,-16(fp)
   8cc40:	1009883a 	mov	r4,r2
   8cc44:	180b883a 	mov	r5,r3
   8cc48:	e1bff817 	ldw	r6,-32(fp)
   8cc4c:	00818940 	call	81894 <memcpy>
      ptr   += n;
   8cc50:	e0fff817 	ldw	r3,-32(fp)
   8cc54:	e0bffc17 	ldw	r2,-16(fp)
   8cc58:	10c5883a 	add	r2,r2,r3
   8cc5c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8cc60:	e0fffd17 	ldw	r3,-12(fp)
   8cc64:	e0bff817 	ldw	r2,-32(fp)
   8cc68:	1885c83a 	sub	r2,r3,r2
   8cc6c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8cc70:	e0fffa17 	ldw	r3,-24(fp)
   8cc74:	e0bff817 	ldw	r2,-32(fp)
   8cc78:	1885883a 	add	r2,r3,r2
   8cc7c:	10c1ffcc 	andi	r3,r2,2047
   8cc80:	e0bffb17 	ldw	r2,-20(fp)
   8cc84:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8cc88:	e0bffd17 	ldw	r2,-12(fp)
   8cc8c:	10800048 	cmpgei	r2,r2,1
   8cc90:	103fc31e 	bne	r2,zero,8cba0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cc94:	0005303a 	rdctl	r2,status
   8cc98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cc9c:	e0fff517 	ldw	r3,-44(fp)
   8cca0:	00bfff84 	movi	r2,-2
   8cca4:	1884703a 	and	r2,r3,r2
   8cca8:	1001703a 	wrctl	status,r2
  
  return context;
   8ccac:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8ccb0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ccb4:	e0bffb17 	ldw	r2,-20(fp)
   8ccb8:	10800817 	ldw	r2,32(r2)
   8ccbc:	10c00094 	ori	r3,r2,2
   8ccc0:	e0bffb17 	ldw	r2,-20(fp)
   8ccc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ccc8:	e0bffb17 	ldw	r2,-20(fp)
   8cccc:	10800017 	ldw	r2,0(r2)
   8ccd0:	11000104 	addi	r4,r2,4
   8ccd4:	e0bffb17 	ldw	r2,-20(fp)
   8ccd8:	10800817 	ldw	r2,32(r2)
   8ccdc:	1007883a 	mov	r3,r2
   8cce0:	2005883a 	mov	r2,r4
   8cce4:	10c00035 	stwio	r3,0(r2)
   8cce8:	e0bff717 	ldw	r2,-36(fp)
   8ccec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ccf0:	e0bff417 	ldw	r2,-48(fp)
   8ccf4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8ccf8:	e0bffd17 	ldw	r2,-12(fp)
   8ccfc:	10800050 	cmplti	r2,r2,1
   8cd00:	1000111e 	bne	r2,zero,8cd48 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8cd04:	e0bffe17 	ldw	r2,-8(fp)
   8cd08:	1090000c 	andi	r2,r2,16384
   8cd0c:	1004c03a 	cmpne	r2,r2,zero
   8cd10:	1000101e 	bne	r2,zero,8cd54 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8cd14:	e0bffb17 	ldw	r2,-20(fp)
   8cd18:	10c00d17 	ldw	r3,52(r2)
   8cd1c:	e0bff917 	ldw	r2,-28(fp)
   8cd20:	1880051e 	bne	r3,r2,8cd38 <altera_avalon_jtag_uart_write+0x1c8>
   8cd24:	e0bffb17 	ldw	r2,-20(fp)
   8cd28:	10c00917 	ldw	r3,36(r2)
   8cd2c:	e0bffb17 	ldw	r2,-20(fp)
   8cd30:	10800117 	ldw	r2,4(r2)
   8cd34:	18bff736 	bltu	r3,r2,8cd14 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8cd38:	e0bffb17 	ldw	r2,-20(fp)
   8cd3c:	10c00d17 	ldw	r3,52(r2)
   8cd40:	e0bff917 	ldw	r2,-28(fp)
   8cd44:	18800326 	beq	r3,r2,8cd54 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   8cd48:	e0bffd17 	ldw	r2,-12(fp)
   8cd4c:	10800048 	cmpgei	r2,r2,1
   8cd50:	103fcd1e 	bne	r2,zero,8cc88 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8cd54:	e0fffc17 	ldw	r3,-16(fp)
   8cd58:	e0bff617 	ldw	r2,-40(fp)
   8cd5c:	18800526 	beq	r3,r2,8cd74 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8cd60:	e0fffc17 	ldw	r3,-16(fp)
   8cd64:	e0bff617 	ldw	r2,-40(fp)
   8cd68:	1887c83a 	sub	r3,r3,r2
   8cd6c:	e0ffff15 	stw	r3,-4(fp)
   8cd70:	00000906 	br	8cd98 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8cd74:	e0bffe17 	ldw	r2,-8(fp)
   8cd78:	1090000c 	andi	r2,r2,16384
   8cd7c:	1005003a 	cmpeq	r2,r2,zero
   8cd80:	1000031e 	bne	r2,zero,8cd90 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8cd84:	00bffd44 	movi	r2,-11
   8cd88:	e0bfff15 	stw	r2,-4(fp)
   8cd8c:	00000206 	br	8cd98 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8cd90:	00bffec4 	movi	r2,-5
   8cd94:	e0bfff15 	stw	r2,-4(fp)
   8cd98:	e0bfff17 	ldw	r2,-4(fp)
}
   8cd9c:	e037883a 	mov	sp,fp
   8cda0:	dfc00117 	ldw	ra,4(sp)
   8cda4:	df000017 	ldw	fp,0(sp)
   8cda8:	dec00204 	addi	sp,sp,8
   8cdac:	f800283a 	ret

0008cdb0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8cdb0:	defffa04 	addi	sp,sp,-24
   8cdb4:	dfc00515 	stw	ra,20(sp)
   8cdb8:	df000415 	stw	fp,16(sp)
   8cdbc:	df000404 	addi	fp,sp,16
   8cdc0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8cdc4:	e0bfff17 	ldw	r2,-4(fp)
   8cdc8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8cdcc:	e0bfff17 	ldw	r2,-4(fp)
   8cdd0:	10800104 	addi	r2,r2,4
   8cdd4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cdd8:	0005303a 	rdctl	r2,status
   8cddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cde0:	e0fffd17 	ldw	r3,-12(fp)
   8cde4:	00bfff84 	movi	r2,-2
   8cde8:	1884703a 	and	r2,r3,r2
   8cdec:	1001703a 	wrctl	status,r2
  
  return context;
   8cdf0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8cdf4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   8cdf8:	008e1f00 	call	8e1f0 <alt_tick>
   8cdfc:	e0bffe17 	ldw	r2,-8(fp)
   8ce00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ce04:	e0bffc17 	ldw	r2,-16(fp)
   8ce08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8ce0c:	e037883a 	mov	sp,fp
   8ce10:	dfc00117 	ldw	ra,4(sp)
   8ce14:	df000017 	ldw	fp,0(sp)
   8ce18:	dec00204 	addi	sp,sp,8
   8ce1c:	f800283a 	ret

0008ce20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8ce20:	defff804 	addi	sp,sp,-32
   8ce24:	dfc00715 	stw	ra,28(sp)
   8ce28:	df000615 	stw	fp,24(sp)
   8ce2c:	df000604 	addi	fp,sp,24
   8ce30:	e13ffc15 	stw	r4,-16(fp)
   8ce34:	e17ffd15 	stw	r5,-12(fp)
   8ce38:	e1bffe15 	stw	r6,-8(fp)
   8ce3c:	e1ffff15 	stw	r7,-4(fp)
   8ce40:	e0bfff17 	ldw	r2,-4(fp)
   8ce44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8ce48:	00800274 	movhi	r2,9
   8ce4c:	108a3204 	addi	r2,r2,10440
   8ce50:	10800017 	ldw	r2,0(r2)
   8ce54:	1004c03a 	cmpne	r2,r2,zero
   8ce58:	1000041e 	bne	r2,zero,8ce6c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   8ce5c:	00c00274 	movhi	r3,9
   8ce60:	18ca3204 	addi	r3,r3,10440
   8ce64:	e0bffb17 	ldw	r2,-20(fp)
   8ce68:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8ce6c:	e0bffc17 	ldw	r2,-16(fp)
   8ce70:	10800104 	addi	r2,r2,4
   8ce74:	1007883a 	mov	r3,r2
   8ce78:	008001c4 	movi	r2,7
   8ce7c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8ce80:	d8000015 	stw	zero,0(sp)
   8ce84:	e13ffd17 	ldw	r4,-12(fp)
   8ce88:	e17ffe17 	ldw	r5,-8(fp)
   8ce8c:	01800274 	movhi	r6,9
   8ce90:	31b36c04 	addi	r6,r6,-12880
   8ce94:	e1fffc17 	ldw	r7,-16(fp)
   8ce98:	008b6940 	call	8b694 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8ce9c:	e037883a 	mov	sp,fp
   8cea0:	dfc00117 	ldw	ra,4(sp)
   8cea4:	df000017 	ldw	fp,0(sp)
   8cea8:	dec00204 	addi	sp,sp,8
   8ceac:	f800283a 	ret

0008ceb0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8ceb0:	defffa04 	addi	sp,sp,-24
   8ceb4:	dfc00515 	stw	ra,20(sp)
   8ceb8:	df000415 	stw	fp,16(sp)
   8cebc:	df000404 	addi	fp,sp,16
   8cec0:	e13ffd15 	stw	r4,-12(fp)
   8cec4:	e17ffe15 	stw	r5,-8(fp)
   8cec8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8cecc:	e0bffd17 	ldw	r2,-12(fp)
   8ced0:	10800017 	ldw	r2,0(r2)
   8ced4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   8ced8:	e0bffc17 	ldw	r2,-16(fp)
   8cedc:	11000a04 	addi	r4,r2,40
   8cee0:	e0bffd17 	ldw	r2,-12(fp)
   8cee4:	11c00217 	ldw	r7,8(r2)
   8cee8:	e17ffe17 	ldw	r5,-8(fp)
   8ceec:	e1bfff17 	ldw	r6,-4(fp)
   8cef0:	008d3a80 	call	8d3a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   8cef4:	e037883a 	mov	sp,fp
   8cef8:	dfc00117 	ldw	ra,4(sp)
   8cefc:	df000017 	ldw	fp,0(sp)
   8cf00:	dec00204 	addi	sp,sp,8
   8cf04:	f800283a 	ret

0008cf08 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8cf08:	defffa04 	addi	sp,sp,-24
   8cf0c:	dfc00515 	stw	ra,20(sp)
   8cf10:	df000415 	stw	fp,16(sp)
   8cf14:	df000404 	addi	fp,sp,16
   8cf18:	e13ffd15 	stw	r4,-12(fp)
   8cf1c:	e17ffe15 	stw	r5,-8(fp)
   8cf20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8cf24:	e0bffd17 	ldw	r2,-12(fp)
   8cf28:	10800017 	ldw	r2,0(r2)
   8cf2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8cf30:	e0bffc17 	ldw	r2,-16(fp)
   8cf34:	11000a04 	addi	r4,r2,40
   8cf38:	e0bffd17 	ldw	r2,-12(fp)
   8cf3c:	11c00217 	ldw	r7,8(r2)
   8cf40:	e17ffe17 	ldw	r5,-8(fp)
   8cf44:	e1bfff17 	ldw	r6,-4(fp)
   8cf48:	008d6380 	call	8d638 <altera_avalon_uart_write>
      fd->fd_flags);
}
   8cf4c:	e037883a 	mov	sp,fp
   8cf50:	dfc00117 	ldw	ra,4(sp)
   8cf54:	df000017 	ldw	fp,0(sp)
   8cf58:	dec00204 	addi	sp,sp,8
   8cf5c:	f800283a 	ret

0008cf60 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   8cf60:	defffc04 	addi	sp,sp,-16
   8cf64:	dfc00315 	stw	ra,12(sp)
   8cf68:	df000215 	stw	fp,8(sp)
   8cf6c:	df000204 	addi	fp,sp,8
   8cf70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8cf74:	e0bfff17 	ldw	r2,-4(fp)
   8cf78:	10800017 	ldw	r2,0(r2)
   8cf7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   8cf80:	e0bffe17 	ldw	r2,-8(fp)
   8cf84:	11000a04 	addi	r4,r2,40
   8cf88:	e0bfff17 	ldw	r2,-4(fp)
   8cf8c:	11400217 	ldw	r5,8(r2)
   8cf90:	008d3480 	call	8d348 <altera_avalon_uart_close>
}
   8cf94:	e037883a 	mov	sp,fp
   8cf98:	dfc00117 	ldw	ra,4(sp)
   8cf9c:	df000017 	ldw	fp,0(sp)
   8cfa0:	dec00204 	addi	sp,sp,8
   8cfa4:	f800283a 	ret

0008cfa8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   8cfa8:	defff704 	addi	sp,sp,-36
   8cfac:	dfc00815 	stw	ra,32(sp)
   8cfb0:	df000715 	stw	fp,28(sp)
   8cfb4:	df000704 	addi	fp,sp,28
   8cfb8:	e13ffc15 	stw	r4,-16(fp)
   8cfbc:	e17ffd15 	stw	r5,-12(fp)
   8cfc0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
   8cfc4:	e0bffc17 	ldw	r2,-16(fp)
   8cfc8:	10800017 	ldw	r2,0(r2)
   8cfcc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   8cfd0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   8cfd4:	1004c03a 	cmpne	r2,r2,zero
   8cfd8:	1000061e 	bne	r2,zero,8cff4 <altera_avalon_uart_init+0x4c>
   8cfdc:	0005883a 	mov	r2,zero
   8cfe0:	1004c03a 	cmpne	r2,r2,zero
   8cfe4:	1000031e 	bne	r2,zero,8cff4 <altera_avalon_uart_init+0x4c>
   8cfe8:	0005883a 	mov	r2,zero
   8cfec:	1005003a 	cmpeq	r2,r2,zero
   8cff0:	1000031e 	bne	r2,zero,8d000 <altera_avalon_uart_init+0x58>
   8cff4:	00800044 	movi	r2,1
   8cff8:	e0bfff15 	stw	r2,-4(fp)
   8cffc:	00000106 	br	8d004 <altera_avalon_uart_init+0x5c>
   8d000:	e03fff15 	stw	zero,-4(fp)
   8d004:	e0bfff17 	ldw	r2,-4(fp)
   8d008:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   8d00c:	e0bffa17 	ldw	r2,-24(fp)
   8d010:	1004c03a 	cmpne	r2,r2,zero
   8d014:	1000111e 	bne	r2,zero,8d05c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   8d018:	e0fffc17 	ldw	r3,-16(fp)
   8d01c:	00832004 	movi	r2,3200
   8d020:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   8d024:	e0bffb17 	ldw	r2,-20(fp)
   8d028:	11000304 	addi	r4,r2,12
   8d02c:	e0bffc17 	ldw	r2,-16(fp)
   8d030:	10800117 	ldw	r2,4(r2)
   8d034:	1007883a 	mov	r3,r2
   8d038:	2005883a 	mov	r2,r4
   8d03c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   8d040:	d8000015 	stw	zero,0(sp)
   8d044:	e13ffd17 	ldw	r4,-12(fp)
   8d048:	e17ffe17 	ldw	r5,-8(fp)
   8d04c:	01800274 	movhi	r6,9
   8d050:	31b41c04 	addi	r6,r6,-12176
   8d054:	e1fffc17 	ldw	r7,-16(fp)
   8d058:	008b6940 	call	8b694 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   8d05c:	e037883a 	mov	sp,fp
   8d060:	dfc00117 	ldw	ra,4(sp)
   8d064:	df000017 	ldw	fp,0(sp)
   8d068:	dec00204 	addi	sp,sp,8
   8d06c:	f800283a 	ret

0008d070 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   8d070:	defffa04 	addi	sp,sp,-24
   8d074:	dfc00515 	stw	ra,20(sp)
   8d078:	df000415 	stw	fp,16(sp)
   8d07c:	df000404 	addi	fp,sp,16
   8d080:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   8d084:	e0bfff17 	ldw	r2,-4(fp)
   8d088:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
   8d08c:	e0bffd17 	ldw	r2,-12(fp)
   8d090:	10800017 	ldw	r2,0(r2)
   8d094:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   8d098:	e0bffc17 	ldw	r2,-16(fp)
   8d09c:	10800204 	addi	r2,r2,8
   8d0a0:	10800037 	ldwio	r2,0(r2)
   8d0a4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   8d0a8:	e0bffc17 	ldw	r2,-16(fp)
   8d0ac:	10800204 	addi	r2,r2,8
   8d0b0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   8d0b4:	e0bffc17 	ldw	r2,-16(fp)
   8d0b8:	10800204 	addi	r2,r2,8
   8d0bc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   8d0c0:	e0bffe17 	ldw	r2,-8(fp)
   8d0c4:	1080200c 	andi	r2,r2,128
   8d0c8:	1005003a 	cmpeq	r2,r2,zero
   8d0cc:	1000031e 	bne	r2,zero,8d0dc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   8d0d0:	e13ffd17 	ldw	r4,-12(fp)
   8d0d4:	e17ffe17 	ldw	r5,-8(fp)
   8d0d8:	008d10c0 	call	8d10c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   8d0dc:	e0bffe17 	ldw	r2,-8(fp)
   8d0e0:	1081100c 	andi	r2,r2,1088
   8d0e4:	1005003a 	cmpeq	r2,r2,zero
   8d0e8:	1000031e 	bne	r2,zero,8d0f8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   8d0ec:	e13ffd17 	ldw	r4,-12(fp)
   8d0f0:	e17ffe17 	ldw	r5,-8(fp)
   8d0f4:	008d1ec0 	call	8d1ec <altera_avalon_uart_txirq>
  }
  

}
   8d0f8:	e037883a 	mov	sp,fp
   8d0fc:	dfc00117 	ldw	ra,4(sp)
   8d100:	df000017 	ldw	fp,0(sp)
   8d104:	dec00204 	addi	sp,sp,8
   8d108:	f800283a 	ret

0008d10c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8d10c:	defffc04 	addi	sp,sp,-16
   8d110:	df000315 	stw	fp,12(sp)
   8d114:	df000304 	addi	fp,sp,12
   8d118:	e13ffe15 	stw	r4,-8(fp)
   8d11c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   8d120:	e0bfff17 	ldw	r2,-4(fp)
   8d124:	108000cc 	andi	r2,r2,3
   8d128:	1004c03a 	cmpne	r2,r2,zero
   8d12c:	10002b1e 	bne	r2,zero,8d1dc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   8d130:	e0bffe17 	ldw	r2,-8(fp)
   8d134:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8d138:	e0bffe17 	ldw	r2,-8(fp)
   8d13c:	10800317 	ldw	r2,12(r2)
   8d140:	10800044 	addi	r2,r2,1
   8d144:	10800fcc 	andi	r2,r2,63
   8d148:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   8d14c:	e0bffe17 	ldw	r2,-8(fp)
   8d150:	11000317 	ldw	r4,12(r2)
   8d154:	e0bffe17 	ldw	r2,-8(fp)
   8d158:	10800017 	ldw	r2,0(r2)
   8d15c:	10800037 	ldwio	r2,0(r2)
   8d160:	1007883a 	mov	r3,r2
   8d164:	e0bffe17 	ldw	r2,-8(fp)
   8d168:	2085883a 	add	r2,r4,r2
   8d16c:	10800704 	addi	r2,r2,28
   8d170:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   8d174:	e0fffe17 	ldw	r3,-8(fp)
   8d178:	e0bffd17 	ldw	r2,-12(fp)
   8d17c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8d180:	e0bffe17 	ldw	r2,-8(fp)
   8d184:	10800317 	ldw	r2,12(r2)
   8d188:	10800044 	addi	r2,r2,1
   8d18c:	10800fcc 	andi	r2,r2,63
   8d190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   8d194:	e0bffe17 	ldw	r2,-8(fp)
   8d198:	10c00217 	ldw	r3,8(r2)
   8d19c:	e0bffd17 	ldw	r2,-12(fp)
   8d1a0:	18800e1e 	bne	r3,r2,8d1dc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8d1a4:	e0bffe17 	ldw	r2,-8(fp)
   8d1a8:	10c00117 	ldw	r3,4(r2)
   8d1ac:	00bfdfc4 	movi	r2,-129
   8d1b0:	1886703a 	and	r3,r3,r2
   8d1b4:	e0bffe17 	ldw	r2,-8(fp)
   8d1b8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   8d1bc:	e0bffe17 	ldw	r2,-8(fp)
   8d1c0:	10800017 	ldw	r2,0(r2)
   8d1c4:	11000304 	addi	r4,r2,12
   8d1c8:	e0bffe17 	ldw	r2,-8(fp)
   8d1cc:	10800117 	ldw	r2,4(r2)
   8d1d0:	1007883a 	mov	r3,r2
   8d1d4:	2005883a 	mov	r2,r4
   8d1d8:	10c00035 	stwio	r3,0(r2)
  }   
}
   8d1dc:	e037883a 	mov	sp,fp
   8d1e0:	df000017 	ldw	fp,0(sp)
   8d1e4:	dec00104 	addi	sp,sp,4
   8d1e8:	f800283a 	ret

0008d1ec <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8d1ec:	defffd04 	addi	sp,sp,-12
   8d1f0:	df000215 	stw	fp,8(sp)
   8d1f4:	df000204 	addi	fp,sp,8
   8d1f8:	e13ffe15 	stw	r4,-8(fp)
   8d1fc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   8d200:	e0bffe17 	ldw	r2,-8(fp)
   8d204:	10c00417 	ldw	r3,16(r2)
   8d208:	e0bffe17 	ldw	r2,-8(fp)
   8d20c:	10800517 	ldw	r2,20(r2)
   8d210:	18803626 	beq	r3,r2,8d2ec <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8d214:	e0bffe17 	ldw	r2,-8(fp)
   8d218:	10800617 	ldw	r2,24(r2)
   8d21c:	1080008c 	andi	r2,r2,2
   8d220:	1005003a 	cmpeq	r2,r2,zero
   8d224:	1000041e 	bne	r2,zero,8d238 <altera_avalon_uart_txirq+0x4c>
   8d228:	e0bfff17 	ldw	r2,-4(fp)
   8d22c:	1082000c 	andi	r2,r2,2048
   8d230:	1005003a 	cmpeq	r2,r2,zero
   8d234:	10001e1e 	bne	r2,zero,8d2b0 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   8d238:	e0bffe17 	ldw	r2,-8(fp)
   8d23c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   8d240:	e0bffe17 	ldw	r2,-8(fp)
   8d244:	10800017 	ldw	r2,0(r2)
   8d248:	11000104 	addi	r4,r2,4
   8d24c:	e0bffe17 	ldw	r2,-8(fp)
   8d250:	10c00417 	ldw	r3,16(r2)
   8d254:	e0bffe17 	ldw	r2,-8(fp)
   8d258:	1885883a 	add	r2,r3,r2
   8d25c:	10801704 	addi	r2,r2,92
   8d260:	10800003 	ldbu	r2,0(r2)
   8d264:	10c03fcc 	andi	r3,r2,255
   8d268:	2005883a 	mov	r2,r4
   8d26c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   8d270:	e0bffe17 	ldw	r2,-8(fp)
   8d274:	10800417 	ldw	r2,16(r2)
   8d278:	10c00044 	addi	r3,r2,1
   8d27c:	e0bffe17 	ldw	r2,-8(fp)
   8d280:	10c00415 	stw	r3,16(r2)
   8d284:	e0bffe17 	ldw	r2,-8(fp)
   8d288:	10800417 	ldw	r2,16(r2)
   8d28c:	10c00fcc 	andi	r3,r2,63
   8d290:	e0bffe17 	ldw	r2,-8(fp)
   8d294:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8d298:	e0bffe17 	ldw	r2,-8(fp)
   8d29c:	10800117 	ldw	r2,4(r2)
   8d2a0:	10c01014 	ori	r3,r2,64
   8d2a4:	e0bffe17 	ldw	r2,-8(fp)
   8d2a8:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8d2ac:	00000f06 	br	8d2ec <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   8d2b0:	e0bffe17 	ldw	r2,-8(fp)
   8d2b4:	10800017 	ldw	r2,0(r2)
   8d2b8:	10800204 	addi	r2,r2,8
   8d2bc:	10800037 	ldwio	r2,0(r2)
   8d2c0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   8d2c4:	e0bfff17 	ldw	r2,-4(fp)
   8d2c8:	1082000c 	andi	r2,r2,2048
   8d2cc:	1004c03a 	cmpne	r2,r2,zero
   8d2d0:	1000061e 	bne	r2,zero,8d2ec <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8d2d4:	e0bffe17 	ldw	r2,-8(fp)
   8d2d8:	10c00117 	ldw	r3,4(r2)
   8d2dc:	00bfefc4 	movi	r2,-65
   8d2e0:	1886703a 	and	r3,r3,r2
   8d2e4:	e0bffe17 	ldw	r2,-8(fp)
   8d2e8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   8d2ec:	e0bffe17 	ldw	r2,-8(fp)
   8d2f0:	10c00417 	ldw	r3,16(r2)
   8d2f4:	e0bffe17 	ldw	r2,-8(fp)
   8d2f8:	10800517 	ldw	r2,20(r2)
   8d2fc:	1880061e 	bne	r3,r2,8d318 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8d300:	e0bffe17 	ldw	r2,-8(fp)
   8d304:	10c00117 	ldw	r3,4(r2)
   8d308:	00beefc4 	movi	r2,-1089
   8d30c:	1886703a 	and	r3,r3,r2
   8d310:	e0bffe17 	ldw	r2,-8(fp)
   8d314:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8d318:	e0bffe17 	ldw	r2,-8(fp)
   8d31c:	10800017 	ldw	r2,0(r2)
   8d320:	11000304 	addi	r4,r2,12
   8d324:	e0bffe17 	ldw	r2,-8(fp)
   8d328:	10800117 	ldw	r2,4(r2)
   8d32c:	1007883a 	mov	r3,r2
   8d330:	2005883a 	mov	r2,r4
   8d334:	10c00035 	stwio	r3,0(r2)
}
   8d338:	e037883a 	mov	sp,fp
   8d33c:	df000017 	ldw	fp,0(sp)
   8d340:	dec00104 	addi	sp,sp,4
   8d344:	f800283a 	ret

0008d348 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   8d348:	defffc04 	addi	sp,sp,-16
   8d34c:	df000315 	stw	fp,12(sp)
   8d350:	df000304 	addi	fp,sp,12
   8d354:	e13ffd15 	stw	r4,-12(fp)
   8d358:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8d35c:	00000706 	br	8d37c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8d360:	e0bffe17 	ldw	r2,-8(fp)
   8d364:	1090000c 	andi	r2,r2,16384
   8d368:	1005003a 	cmpeq	r2,r2,zero
   8d36c:	1000031e 	bne	r2,zero,8d37c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
   8d370:	00bffd44 	movi	r2,-11
   8d374:	e0bfff15 	stw	r2,-4(fp)
   8d378:	00000606 	br	8d394 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8d37c:	e0bffd17 	ldw	r2,-12(fp)
   8d380:	10c00417 	ldw	r3,16(r2)
   8d384:	e0bffd17 	ldw	r2,-12(fp)
   8d388:	10800517 	ldw	r2,20(r2)
   8d38c:	18bff41e 	bne	r3,r2,8d360 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8d390:	e03fff15 	stw	zero,-4(fp)
   8d394:	e0bfff17 	ldw	r2,-4(fp)
}
   8d398:	e037883a 	mov	sp,fp
   8d39c:	df000017 	ldw	fp,0(sp)
   8d3a0:	dec00104 	addi	sp,sp,4
   8d3a4:	f800283a 	ret

0008d3a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   8d3a8:	defff004 	addi	sp,sp,-64
   8d3ac:	dfc00f15 	stw	ra,60(sp)
   8d3b0:	df000e15 	stw	fp,56(sp)
   8d3b4:	df000e04 	addi	fp,sp,56
   8d3b8:	e13ffb15 	stw	r4,-20(fp)
   8d3bc:	e17ffc15 	stw	r5,-16(fp)
   8d3c0:	e1bffd15 	stw	r6,-12(fp)
   8d3c4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   8d3c8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
   8d3cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   8d3d0:	e0bffe17 	ldw	r2,-8(fp)
   8d3d4:	1090000c 	andi	r2,r2,16384
   8d3d8:	1005003a 	cmpeq	r2,r2,zero
   8d3dc:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   8d3e0:	e0bffb17 	ldw	r2,-20(fp)
   8d3e4:	10800217 	ldw	r2,8(r2)
   8d3e8:	10800044 	addi	r2,r2,1
   8d3ec:	10800fcc 	andi	r2,r2,63
   8d3f0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8d3f4:	00001906 	br	8d45c <altera_avalon_uart_read+0xb4>
    {
      count++;
   8d3f8:	e0bff617 	ldw	r2,-40(fp)
   8d3fc:	10800044 	addi	r2,r2,1
   8d400:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   8d404:	e0bffb17 	ldw	r2,-20(fp)
   8d408:	10c00217 	ldw	r3,8(r2)
   8d40c:	e0bffb17 	ldw	r2,-20(fp)
   8d410:	1885883a 	add	r2,r3,r2
   8d414:	10800704 	addi	r2,r2,28
   8d418:	10800003 	ldbu	r2,0(r2)
   8d41c:	1007883a 	mov	r3,r2
   8d420:	e0bffc17 	ldw	r2,-16(fp)
   8d424:	10c00005 	stb	r3,0(r2)
   8d428:	e0bffc17 	ldw	r2,-16(fp)
   8d42c:	10800044 	addi	r2,r2,1
   8d430:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   8d434:	e0bffb17 	ldw	r2,-20(fp)
   8d438:	10800217 	ldw	r2,8(r2)
   8d43c:	10c00044 	addi	r3,r2,1
   8d440:	e0bffb17 	ldw	r2,-20(fp)
   8d444:	10c00215 	stw	r3,8(r2)
   8d448:	e0bffb17 	ldw	r2,-20(fp)
   8d44c:	10800217 	ldw	r2,8(r2)
   8d450:	10c00fcc 	andi	r3,r2,63
   8d454:	e0bffb17 	ldw	r2,-20(fp)
   8d458:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8d45c:	e0fff617 	ldw	r3,-40(fp)
   8d460:	e0bffd17 	ldw	r2,-12(fp)
   8d464:	1880050e 	bge	r3,r2,8d47c <altera_avalon_uart_read+0xd4>
   8d468:	e0bffb17 	ldw	r2,-20(fp)
   8d46c:	10c00217 	ldw	r3,8(r2)
   8d470:	e0bffb17 	ldw	r2,-20(fp)
   8d474:	10800317 	ldw	r2,12(r2)
   8d478:	18bfdf1e 	bne	r3,r2,8d3f8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   8d47c:	e0bff617 	ldw	r2,-40(fp)
   8d480:	1004c03a 	cmpne	r2,r2,zero
   8d484:	1000271e 	bne	r2,zero,8d524 <altera_avalon_uart_read+0x17c>
   8d488:	e0bffb17 	ldw	r2,-20(fp)
   8d48c:	10c00217 	ldw	r3,8(r2)
   8d490:	e0bffb17 	ldw	r2,-20(fp)
   8d494:	10800317 	ldw	r2,12(r2)
   8d498:	1880221e 	bne	r3,r2,8d524 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
   8d49c:	e0bff917 	ldw	r2,-28(fp)
   8d4a0:	1004c03a 	cmpne	r2,r2,zero
   8d4a4:	1000061e 	bne	r2,zero,8d4c0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   8d4a8:	008d5d80 	call	8d5d8 <alt_get_errno>
   8d4ac:	00c002c4 	movi	r3,11
   8d4b0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   8d4b4:	00800044 	movi	r2,1
   8d4b8:	e0bff705 	stb	r2,-36(fp)
        break;
   8d4bc:	00001f06 	br	8d53c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d4c0:	0005303a 	rdctl	r2,status
   8d4c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d4c8:	e0fff517 	ldw	r3,-44(fp)
   8d4cc:	00bfff84 	movi	r2,-2
   8d4d0:	1884703a 	and	r2,r3,r2
   8d4d4:	1001703a 	wrctl	status,r2
  
  return context;
   8d4d8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   8d4dc:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8d4e0:	e0bffb17 	ldw	r2,-20(fp)
   8d4e4:	10800117 	ldw	r2,4(r2)
   8d4e8:	10c02014 	ori	r3,r2,128
   8d4ec:	e0bffb17 	ldw	r2,-20(fp)
   8d4f0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8d4f4:	e0bffb17 	ldw	r2,-20(fp)
   8d4f8:	10800017 	ldw	r2,0(r2)
   8d4fc:	11000304 	addi	r4,r2,12
   8d500:	e0bffb17 	ldw	r2,-20(fp)
   8d504:	10800117 	ldw	r2,4(r2)
   8d508:	1007883a 	mov	r3,r2
   8d50c:	2005883a 	mov	r2,r4
   8d510:	10c00035 	stwio	r3,0(r2)
   8d514:	e0bffa17 	ldw	r2,-24(fp)
   8d518:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d51c:	e0bff417 	ldw	r2,-48(fp)
   8d520:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   8d524:	e0bff617 	ldw	r2,-40(fp)
   8d528:	1004c03a 	cmpne	r2,r2,zero
   8d52c:	1000031e 	bne	r2,zero,8d53c <altera_avalon_uart_read+0x194>
   8d530:	e0bffd17 	ldw	r2,-12(fp)
   8d534:	1004c03a 	cmpne	r2,r2,zero
   8d538:	103fc81e 	bne	r2,zero,8d45c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d53c:	0005303a 	rdctl	r2,status
   8d540:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d544:	e0fff317 	ldw	r3,-52(fp)
   8d548:	00bfff84 	movi	r2,-2
   8d54c:	1884703a 	and	r2,r3,r2
   8d550:	1001703a 	wrctl	status,r2
  
  return context;
   8d554:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   8d558:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8d55c:	e0bffb17 	ldw	r2,-20(fp)
   8d560:	10800117 	ldw	r2,4(r2)
   8d564:	10c02014 	ori	r3,r2,128
   8d568:	e0bffb17 	ldw	r2,-20(fp)
   8d56c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8d570:	e0bffb17 	ldw	r2,-20(fp)
   8d574:	10800017 	ldw	r2,0(r2)
   8d578:	11000304 	addi	r4,r2,12
   8d57c:	e0bffb17 	ldw	r2,-20(fp)
   8d580:	10800117 	ldw	r2,4(r2)
   8d584:	1007883a 	mov	r3,r2
   8d588:	2005883a 	mov	r2,r4
   8d58c:	10c00035 	stwio	r3,0(r2)
   8d590:	e0bffa17 	ldw	r2,-24(fp)
   8d594:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d598:	e0bff217 	ldw	r2,-56(fp)
   8d59c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   8d5a0:	e0bff703 	ldbu	r2,-36(fp)
   8d5a4:	1005003a 	cmpeq	r2,r2,zero
   8d5a8:	1000031e 	bne	r2,zero,8d5b8 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
   8d5ac:	00bffd04 	movi	r2,-12
   8d5b0:	e0bfff15 	stw	r2,-4(fp)
   8d5b4:	00000206 	br	8d5c0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
   8d5b8:	e0bff617 	ldw	r2,-40(fp)
   8d5bc:	e0bfff15 	stw	r2,-4(fp)
   8d5c0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8d5c4:	e037883a 	mov	sp,fp
   8d5c8:	dfc00117 	ldw	ra,4(sp)
   8d5cc:	df000017 	ldw	fp,0(sp)
   8d5d0:	dec00204 	addi	sp,sp,8
   8d5d4:	f800283a 	ret

0008d5d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d5d8:	defffd04 	addi	sp,sp,-12
   8d5dc:	dfc00215 	stw	ra,8(sp)
   8d5e0:	df000115 	stw	fp,4(sp)
   8d5e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d5e8:	00800274 	movhi	r2,9
   8d5ec:	10834504 	addi	r2,r2,3348
   8d5f0:	10800017 	ldw	r2,0(r2)
   8d5f4:	1005003a 	cmpeq	r2,r2,zero
   8d5f8:	1000061e 	bne	r2,zero,8d614 <alt_get_errno+0x3c>
   8d5fc:	00800274 	movhi	r2,9
   8d600:	10834504 	addi	r2,r2,3348
   8d604:	10800017 	ldw	r2,0(r2)
   8d608:	103ee83a 	callr	r2
   8d60c:	e0bfff15 	stw	r2,-4(fp)
   8d610:	00000306 	br	8d620 <alt_get_errno+0x48>
   8d614:	00800274 	movhi	r2,9
   8d618:	108a2d04 	addi	r2,r2,10420
   8d61c:	e0bfff15 	stw	r2,-4(fp)
   8d620:	e0bfff17 	ldw	r2,-4(fp)
}
   8d624:	e037883a 	mov	sp,fp
   8d628:	dfc00117 	ldw	ra,4(sp)
   8d62c:	df000017 	ldw	fp,0(sp)
   8d630:	dec00204 	addi	sp,sp,8
   8d634:	f800283a 	ret

0008d638 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   8d638:	defff204 	addi	sp,sp,-56
   8d63c:	dfc00d15 	stw	ra,52(sp)
   8d640:	df000c15 	stw	fp,48(sp)
   8d644:	df000c04 	addi	fp,sp,48
   8d648:	e13ffc15 	stw	r4,-16(fp)
   8d64c:	e17ffd15 	stw	r5,-12(fp)
   8d650:	e1bffe15 	stw	r6,-8(fp)
   8d654:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   8d658:	e0bffe17 	ldw	r2,-8(fp)
   8d65c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   8d660:	e0bfff17 	ldw	r2,-4(fp)
   8d664:	1090000c 	andi	r2,r2,16384
   8d668:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8d66c:	00004006 	br	8d770 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8d670:	e0bffc17 	ldw	r2,-16(fp)
   8d674:	10800517 	ldw	r2,20(r2)
   8d678:	10800044 	addi	r2,r2,1
   8d67c:	10800fcc 	andi	r2,r2,63
   8d680:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   8d684:	e0bffc17 	ldw	r2,-16(fp)
   8d688:	10c00417 	ldw	r3,16(r2)
   8d68c:	e0bff917 	ldw	r2,-28(fp)
   8d690:	1880251e 	bne	r3,r2,8d728 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
   8d694:	e0bffa17 	ldw	r2,-24(fp)
   8d698:	1005003a 	cmpeq	r2,r2,zero
   8d69c:	1000051e 	bne	r2,zero,8d6b4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   8d6a0:	008d8000 	call	8d800 <alt_get_errno>
   8d6a4:	1007883a 	mov	r3,r2
   8d6a8:	008002c4 	movi	r2,11
   8d6ac:	18800015 	stw	r2,0(r3)
        break;
   8d6b0:	00003206 	br	8d77c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d6b4:	0005303a 	rdctl	r2,status
   8d6b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d6bc:	e0fff717 	ldw	r3,-36(fp)
   8d6c0:	00bfff84 	movi	r2,-2
   8d6c4:	1884703a 	and	r2,r3,r2
   8d6c8:	1001703a 	wrctl	status,r2
  
  return context;
   8d6cc:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   8d6d0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8d6d4:	e0bffc17 	ldw	r2,-16(fp)
   8d6d8:	10800117 	ldw	r2,4(r2)
   8d6dc:	10c11014 	ori	r3,r2,1088
   8d6e0:	e0bffc17 	ldw	r2,-16(fp)
   8d6e4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8d6e8:	e0bffc17 	ldw	r2,-16(fp)
   8d6ec:	10800017 	ldw	r2,0(r2)
   8d6f0:	11000304 	addi	r4,r2,12
   8d6f4:	e0bffc17 	ldw	r2,-16(fp)
   8d6f8:	10800117 	ldw	r2,4(r2)
   8d6fc:	1007883a 	mov	r3,r2
   8d700:	2005883a 	mov	r2,r4
   8d704:	10c00035 	stwio	r3,0(r2)
   8d708:	e0bffb17 	ldw	r2,-20(fp)
   8d70c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d710:	e0bff617 	ldw	r2,-40(fp)
   8d714:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   8d718:	e0bffc17 	ldw	r2,-16(fp)
   8d71c:	10c00417 	ldw	r3,16(r2)
   8d720:	e0bff917 	ldw	r2,-28(fp)
   8d724:	18bffc26 	beq	r3,r2,8d718 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
   8d728:	e0bff817 	ldw	r2,-32(fp)
   8d72c:	10bfffc4 	addi	r2,r2,-1
   8d730:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   8d734:	e0bffc17 	ldw	r2,-16(fp)
   8d738:	10c00517 	ldw	r3,20(r2)
   8d73c:	e0bffd17 	ldw	r2,-12(fp)
   8d740:	10800003 	ldbu	r2,0(r2)
   8d744:	1009883a 	mov	r4,r2
   8d748:	e0bffc17 	ldw	r2,-16(fp)
   8d74c:	1885883a 	add	r2,r3,r2
   8d750:	10801704 	addi	r2,r2,92
   8d754:	11000005 	stb	r4,0(r2)
   8d758:	e0bffd17 	ldw	r2,-12(fp)
   8d75c:	10800044 	addi	r2,r2,1
   8d760:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   8d764:	e0fffc17 	ldw	r3,-16(fp)
   8d768:	e0bff917 	ldw	r2,-28(fp)
   8d76c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8d770:	e0bff817 	ldw	r2,-32(fp)
   8d774:	1004c03a 	cmpne	r2,r2,zero
   8d778:	103fbd1e 	bne	r2,zero,8d670 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d77c:	0005303a 	rdctl	r2,status
   8d780:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d784:	e0fff517 	ldw	r3,-44(fp)
   8d788:	00bfff84 	movi	r2,-2
   8d78c:	1884703a 	and	r2,r3,r2
   8d790:	1001703a 	wrctl	status,r2
  
  return context;
   8d794:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   8d798:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8d79c:	e0bffc17 	ldw	r2,-16(fp)
   8d7a0:	10800117 	ldw	r2,4(r2)
   8d7a4:	10c11014 	ori	r3,r2,1088
   8d7a8:	e0bffc17 	ldw	r2,-16(fp)
   8d7ac:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8d7b0:	e0bffc17 	ldw	r2,-16(fp)
   8d7b4:	10800017 	ldw	r2,0(r2)
   8d7b8:	11000304 	addi	r4,r2,12
   8d7bc:	e0bffc17 	ldw	r2,-16(fp)
   8d7c0:	10800117 	ldw	r2,4(r2)
   8d7c4:	1007883a 	mov	r3,r2
   8d7c8:	2005883a 	mov	r2,r4
   8d7cc:	10c00035 	stwio	r3,0(r2)
   8d7d0:	e0bffb17 	ldw	r2,-20(fp)
   8d7d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d7d8:	e0bff417 	ldw	r2,-48(fp)
   8d7dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   8d7e0:	e0fffe17 	ldw	r3,-8(fp)
   8d7e4:	e0bff817 	ldw	r2,-32(fp)
   8d7e8:	1885c83a 	sub	r2,r3,r2
}
   8d7ec:	e037883a 	mov	sp,fp
   8d7f0:	dfc00117 	ldw	ra,4(sp)
   8d7f4:	df000017 	ldw	fp,0(sp)
   8d7f8:	dec00204 	addi	sp,sp,8
   8d7fc:	f800283a 	ret

0008d800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d800:	defffd04 	addi	sp,sp,-12
   8d804:	dfc00215 	stw	ra,8(sp)
   8d808:	df000115 	stw	fp,4(sp)
   8d80c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d810:	00800274 	movhi	r2,9
   8d814:	10834504 	addi	r2,r2,3348
   8d818:	10800017 	ldw	r2,0(r2)
   8d81c:	1005003a 	cmpeq	r2,r2,zero
   8d820:	1000061e 	bne	r2,zero,8d83c <alt_get_errno+0x3c>
   8d824:	00800274 	movhi	r2,9
   8d828:	10834504 	addi	r2,r2,3348
   8d82c:	10800017 	ldw	r2,0(r2)
   8d830:	103ee83a 	callr	r2
   8d834:	e0bfff15 	stw	r2,-4(fp)
   8d838:	00000306 	br	8d848 <alt_get_errno+0x48>
   8d83c:	00800274 	movhi	r2,9
   8d840:	108a2d04 	addi	r2,r2,10420
   8d844:	e0bfff15 	stw	r2,-4(fp)
   8d848:	e0bfff17 	ldw	r2,-4(fp)
}
   8d84c:	e037883a 	mov	sp,fp
   8d850:	dfc00117 	ldw	ra,4(sp)
   8d854:	df000017 	ldw	fp,0(sp)
   8d858:	dec00204 	addi	sp,sp,8
   8d85c:	f800283a 	ret

0008d860 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8d860:	defff404 	addi	sp,sp,-48
   8d864:	df000b15 	stw	fp,44(sp)
   8d868:	df000b04 	addi	fp,sp,44
   8d86c:	e13ffb15 	stw	r4,-20(fp)
   8d870:	e17ffc15 	stw	r5,-16(fp)
   8d874:	e1bffd15 	stw	r6,-12(fp)
   8d878:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8d87c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8d880:	00800274 	movhi	r2,9
   8d884:	108a3204 	addi	r2,r2,10440
   8d888:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8d88c:	1005003a 	cmpeq	r2,r2,zero
   8d890:	1000411e 	bne	r2,zero,8d998 <alt_alarm_start+0x138>
  {
    if (alarm)
   8d894:	e0bffb17 	ldw	r2,-20(fp)
   8d898:	1005003a 	cmpeq	r2,r2,zero
   8d89c:	10003b1e 	bne	r2,zero,8d98c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8d8a0:	e0fffb17 	ldw	r3,-20(fp)
   8d8a4:	e0bffd17 	ldw	r2,-12(fp)
   8d8a8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8d8ac:	e0fffb17 	ldw	r3,-20(fp)
   8d8b0:	e0bffe17 	ldw	r2,-8(fp)
   8d8b4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d8b8:	0005303a 	rdctl	r2,status
   8d8bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d8c0:	e0fff817 	ldw	r3,-32(fp)
   8d8c4:	00bfff84 	movi	r2,-2
   8d8c8:	1884703a 	and	r2,r3,r2
   8d8cc:	1001703a 	wrctl	status,r2
  
  return context;
   8d8d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8d8d4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8d8d8:	00800274 	movhi	r2,9
   8d8dc:	108a3304 	addi	r2,r2,10444
   8d8e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8d8e4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8d8e8:	e0fffc17 	ldw	r3,-16(fp)
   8d8ec:	e0bff917 	ldw	r2,-28(fp)
   8d8f0:	1885883a 	add	r2,r3,r2
   8d8f4:	10c00044 	addi	r3,r2,1
   8d8f8:	e0bffb17 	ldw	r2,-20(fp)
   8d8fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8d900:	e0bffb17 	ldw	r2,-20(fp)
   8d904:	10c00217 	ldw	r3,8(r2)
   8d908:	e0bff917 	ldw	r2,-28(fp)
   8d90c:	1880042e 	bgeu	r3,r2,8d920 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8d910:	e0fffb17 	ldw	r3,-20(fp)
   8d914:	00800044 	movi	r2,1
   8d918:	18800405 	stb	r2,16(r3)
   8d91c:	00000206 	br	8d928 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8d920:	e0bffb17 	ldw	r2,-20(fp)
   8d924:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8d928:	e0fffb17 	ldw	r3,-20(fp)
   8d92c:	00800274 	movhi	r2,9
   8d930:	10834804 	addi	r2,r2,3360
   8d934:	e0bff615 	stw	r2,-40(fp)
   8d938:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d93c:	e0fff717 	ldw	r3,-36(fp)
   8d940:	e0bff617 	ldw	r2,-40(fp)
   8d944:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8d948:	e0bff617 	ldw	r2,-40(fp)
   8d94c:	10c00017 	ldw	r3,0(r2)
   8d950:	e0bff717 	ldw	r2,-36(fp)
   8d954:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d958:	e0bff617 	ldw	r2,-40(fp)
   8d95c:	10c00017 	ldw	r3,0(r2)
   8d960:	e0bff717 	ldw	r2,-36(fp)
   8d964:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8d968:	e0fff617 	ldw	r3,-40(fp)
   8d96c:	e0bff717 	ldw	r2,-36(fp)
   8d970:	18800015 	stw	r2,0(r3)
   8d974:	e0bffa17 	ldw	r2,-24(fp)
   8d978:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d97c:	e0bff517 	ldw	r2,-44(fp)
   8d980:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8d984:	e03fff15 	stw	zero,-4(fp)
   8d988:	00000506 	br	8d9a0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8d98c:	00bffa84 	movi	r2,-22
   8d990:	e0bfff15 	stw	r2,-4(fp)
   8d994:	00000206 	br	8d9a0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8d998:	00bfde84 	movi	r2,-134
   8d99c:	e0bfff15 	stw	r2,-4(fp)
   8d9a0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8d9a4:	e037883a 	mov	sp,fp
   8d9a8:	df000017 	ldw	fp,0(sp)
   8d9ac:	dec00104 	addi	sp,sp,4
   8d9b0:	f800283a 	ret

0008d9b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8d9b4:	defffa04 	addi	sp,sp,-24
   8d9b8:	dfc00515 	stw	ra,20(sp)
   8d9bc:	df000415 	stw	fp,16(sp)
   8d9c0:	df000404 	addi	fp,sp,16
   8d9c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8d9c8:	00800244 	movi	r2,9
   8d9cc:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8d9d0:	e13ffc17 	ldw	r4,-16(fp)
   8d9d4:	014003f4 	movhi	r5,15
   8d9d8:	29509004 	addi	r5,r5,16960
   8d9dc:	008ace00 	call	8ace0 <__mulsi3>
   8d9e0:	100b883a 	mov	r5,r2
   8d9e4:	0100bef4 	movhi	r4,763
   8d9e8:	213c2004 	addi	r4,r4,-3968
   8d9ec:	008186c0 	call	8186c <__udivsi3>
   8d9f0:	100b883a 	mov	r5,r2
   8d9f4:	01200034 	movhi	r4,32768
   8d9f8:	213fffc4 	addi	r4,r4,-1
   8d9fc:	008186c0 	call	8186c <__udivsi3>
   8da00:	100b883a 	mov	r5,r2
   8da04:	e13fff17 	ldw	r4,-4(fp)
   8da08:	008186c0 	call	8186c <__udivsi3>
   8da0c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8da10:	e0bffd17 	ldw	r2,-12(fp)
   8da14:	1005003a 	cmpeq	r2,r2,zero
   8da18:	10002a1e 	bne	r2,zero,8dac4 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   8da1c:	e03ffe15 	stw	zero,-8(fp)
   8da20:	00001706 	br	8da80 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8da24:	00a00034 	movhi	r2,32768
   8da28:	10bfffc4 	addi	r2,r2,-1
   8da2c:	10bfffc4 	addi	r2,r2,-1
   8da30:	103ffe1e 	bne	r2,zero,8da2c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8da34:	e13ffc17 	ldw	r4,-16(fp)
   8da38:	014003f4 	movhi	r5,15
   8da3c:	29509004 	addi	r5,r5,16960
   8da40:	008ace00 	call	8ace0 <__mulsi3>
   8da44:	100b883a 	mov	r5,r2
   8da48:	0100bef4 	movhi	r4,763
   8da4c:	213c2004 	addi	r4,r4,-3968
   8da50:	008186c0 	call	8186c <__udivsi3>
   8da54:	100b883a 	mov	r5,r2
   8da58:	01200034 	movhi	r4,32768
   8da5c:	213fffc4 	addi	r4,r4,-1
   8da60:	008186c0 	call	8186c <__udivsi3>
   8da64:	1007883a 	mov	r3,r2
   8da68:	e0bfff17 	ldw	r2,-4(fp)
   8da6c:	10c5c83a 	sub	r2,r2,r3
   8da70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8da74:	e0bffe17 	ldw	r2,-8(fp)
   8da78:	10800044 	addi	r2,r2,1
   8da7c:	e0bffe15 	stw	r2,-8(fp)
   8da80:	e0fffe17 	ldw	r3,-8(fp)
   8da84:	e0bffd17 	ldw	r2,-12(fp)
   8da88:	18bfe616 	blt	r3,r2,8da24 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8da8c:	e13ffc17 	ldw	r4,-16(fp)
   8da90:	014003f4 	movhi	r5,15
   8da94:	29509004 	addi	r5,r5,16960
   8da98:	008ace00 	call	8ace0 <__mulsi3>
   8da9c:	100b883a 	mov	r5,r2
   8daa0:	0100bef4 	movhi	r4,763
   8daa4:	213c2004 	addi	r4,r4,-3968
   8daa8:	008186c0 	call	8186c <__udivsi3>
   8daac:	1009883a 	mov	r4,r2
   8dab0:	e17fff17 	ldw	r5,-4(fp)
   8dab4:	008ace00 	call	8ace0 <__mulsi3>
   8dab8:	10bfffc4 	addi	r2,r2,-1
   8dabc:	103ffe1e 	bne	r2,zero,8dab8 <alt_busy_sleep+0x104>
   8dac0:	00000d06 	br	8daf8 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8dac4:	e13ffc17 	ldw	r4,-16(fp)
   8dac8:	014003f4 	movhi	r5,15
   8dacc:	29509004 	addi	r5,r5,16960
   8dad0:	008ace00 	call	8ace0 <__mulsi3>
   8dad4:	100b883a 	mov	r5,r2
   8dad8:	0100bef4 	movhi	r4,763
   8dadc:	213c2004 	addi	r4,r4,-3968
   8dae0:	008186c0 	call	8186c <__udivsi3>
   8dae4:	1009883a 	mov	r4,r2
   8dae8:	e17fff17 	ldw	r5,-4(fp)
   8daec:	008ace00 	call	8ace0 <__mulsi3>
   8daf0:	10bfffc4 	addi	r2,r2,-1
   8daf4:	00bffe16 	blt	zero,r2,8daf0 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8daf8:	0005883a 	mov	r2,zero
}
   8dafc:	e037883a 	mov	sp,fp
   8db00:	dfc00117 	ldw	ra,4(sp)
   8db04:	df000017 	ldw	fp,0(sp)
   8db08:	dec00204 	addi	sp,sp,8
   8db0c:	f800283a 	ret

0008db10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8db10:	deffff04 	addi	sp,sp,-4
   8db14:	df000015 	stw	fp,0(sp)
   8db18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8db1c:	e037883a 	mov	sp,fp
   8db20:	df000017 	ldw	fp,0(sp)
   8db24:	dec00104 	addi	sp,sp,4
   8db28:	f800283a 	ret

0008db2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8db2c:	defff904 	addi	sp,sp,-28
   8db30:	dfc00615 	stw	ra,24(sp)
   8db34:	df000515 	stw	fp,20(sp)
   8db38:	df000504 	addi	fp,sp,20
   8db3c:	e13ffd15 	stw	r4,-12(fp)
   8db40:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8db44:	e0bffd17 	ldw	r2,-12(fp)
   8db48:	1005003a 	cmpeq	r2,r2,zero
   8db4c:	1000041e 	bne	r2,zero,8db60 <alt_dev_llist_insert+0x34>
   8db50:	e0bffd17 	ldw	r2,-12(fp)
   8db54:	10800217 	ldw	r2,8(r2)
   8db58:	1004c03a 	cmpne	r2,r2,zero
   8db5c:	1000071e 	bne	r2,zero,8db7c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8db60:	008dbe00 	call	8dbe0 <alt_get_errno>
   8db64:	1007883a 	mov	r3,r2
   8db68:	00800584 	movi	r2,22
   8db6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8db70:	00bffa84 	movi	r2,-22
   8db74:	e0bfff15 	stw	r2,-4(fp)
   8db78:	00001306 	br	8dbc8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8db7c:	e0fffd17 	ldw	r3,-12(fp)
   8db80:	e0bffe17 	ldw	r2,-8(fp)
   8db84:	e0bffb15 	stw	r2,-20(fp)
   8db88:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8db8c:	e0fffc17 	ldw	r3,-16(fp)
   8db90:	e0bffb17 	ldw	r2,-20(fp)
   8db94:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8db98:	e0bffb17 	ldw	r2,-20(fp)
   8db9c:	10c00017 	ldw	r3,0(r2)
   8dba0:	e0bffc17 	ldw	r2,-16(fp)
   8dba4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8dba8:	e0bffb17 	ldw	r2,-20(fp)
   8dbac:	10c00017 	ldw	r3,0(r2)
   8dbb0:	e0bffc17 	ldw	r2,-16(fp)
   8dbb4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8dbb8:	e0fffb17 	ldw	r3,-20(fp)
   8dbbc:	e0bffc17 	ldw	r2,-16(fp)
   8dbc0:	18800015 	stw	r2,0(r3)

  return 0;  
   8dbc4:	e03fff15 	stw	zero,-4(fp)
   8dbc8:	e0bfff17 	ldw	r2,-4(fp)
}
   8dbcc:	e037883a 	mov	sp,fp
   8dbd0:	dfc00117 	ldw	ra,4(sp)
   8dbd4:	df000017 	ldw	fp,0(sp)
   8dbd8:	dec00204 	addi	sp,sp,8
   8dbdc:	f800283a 	ret

0008dbe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dbe0:	defffd04 	addi	sp,sp,-12
   8dbe4:	dfc00215 	stw	ra,8(sp)
   8dbe8:	df000115 	stw	fp,4(sp)
   8dbec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8dbf0:	00800274 	movhi	r2,9
   8dbf4:	10834504 	addi	r2,r2,3348
   8dbf8:	10800017 	ldw	r2,0(r2)
   8dbfc:	1005003a 	cmpeq	r2,r2,zero
   8dc00:	1000061e 	bne	r2,zero,8dc1c <alt_get_errno+0x3c>
   8dc04:	00800274 	movhi	r2,9
   8dc08:	10834504 	addi	r2,r2,3348
   8dc0c:	10800017 	ldw	r2,0(r2)
   8dc10:	103ee83a 	callr	r2
   8dc14:	e0bfff15 	stw	r2,-4(fp)
   8dc18:	00000306 	br	8dc28 <alt_get_errno+0x48>
   8dc1c:	00800274 	movhi	r2,9
   8dc20:	108a2d04 	addi	r2,r2,10420
   8dc24:	e0bfff15 	stw	r2,-4(fp)
   8dc28:	e0bfff17 	ldw	r2,-4(fp)
}
   8dc2c:	e037883a 	mov	sp,fp
   8dc30:	dfc00117 	ldw	ra,4(sp)
   8dc34:	df000017 	ldw	fp,0(sp)
   8dc38:	dec00204 	addi	sp,sp,8
   8dc3c:	f800283a 	ret

0008dc40 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8dc40:	defffd04 	addi	sp,sp,-12
   8dc44:	dfc00215 	stw	ra,8(sp)
   8dc48:	df000115 	stw	fp,4(sp)
   8dc4c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8dc50:	00bfff04 	movi	r2,-4
   8dc54:	00c00274 	movhi	r3,9
   8dc58:	18fa8f04 	addi	r3,r3,-5572
   8dc5c:	1885883a 	add	r2,r3,r2
   8dc60:	e0bfff15 	stw	r2,-4(fp)
   8dc64:	00000606 	br	8dc80 <_do_ctors+0x40>
        (*ctor) (); 
   8dc68:	e0bfff17 	ldw	r2,-4(fp)
   8dc6c:	10800017 	ldw	r2,0(r2)
   8dc70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8dc74:	e0bfff17 	ldw	r2,-4(fp)
   8dc78:	10bfff04 	addi	r2,r2,-4
   8dc7c:	e0bfff15 	stw	r2,-4(fp)
   8dc80:	e0ffff17 	ldw	r3,-4(fp)
   8dc84:	00800274 	movhi	r2,9
   8dc88:	10ba8e04 	addi	r2,r2,-5576
   8dc8c:	18bff62e 	bgeu	r3,r2,8dc68 <_do_ctors+0x28>
        (*ctor) (); 
}
   8dc90:	e037883a 	mov	sp,fp
   8dc94:	dfc00117 	ldw	ra,4(sp)
   8dc98:	df000017 	ldw	fp,0(sp)
   8dc9c:	dec00204 	addi	sp,sp,8
   8dca0:	f800283a 	ret

0008dca4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8dca4:	defffd04 	addi	sp,sp,-12
   8dca8:	dfc00215 	stw	ra,8(sp)
   8dcac:	df000115 	stw	fp,4(sp)
   8dcb0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8dcb4:	00bfff04 	movi	r2,-4
   8dcb8:	00c00274 	movhi	r3,9
   8dcbc:	18fa8f04 	addi	r3,r3,-5572
   8dcc0:	1885883a 	add	r2,r3,r2
   8dcc4:	e0bfff15 	stw	r2,-4(fp)
   8dcc8:	00000606 	br	8dce4 <_do_dtors+0x40>
        (*dtor) (); 
   8dccc:	e0bfff17 	ldw	r2,-4(fp)
   8dcd0:	10800017 	ldw	r2,0(r2)
   8dcd4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8dcd8:	e0bfff17 	ldw	r2,-4(fp)
   8dcdc:	10bfff04 	addi	r2,r2,-4
   8dce0:	e0bfff15 	stw	r2,-4(fp)
   8dce4:	e0ffff17 	ldw	r3,-4(fp)
   8dce8:	00800274 	movhi	r2,9
   8dcec:	10ba8f04 	addi	r2,r2,-5572
   8dcf0:	18bff62e 	bgeu	r3,r2,8dccc <_do_dtors+0x28>
        (*dtor) (); 
}
   8dcf4:	e037883a 	mov	sp,fp
   8dcf8:	dfc00117 	ldw	ra,4(sp)
   8dcfc:	df000017 	ldw	fp,0(sp)
   8dd00:	dec00204 	addi	sp,sp,8
   8dd04:	f800283a 	ret

0008dd08 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8dd08:	deffff04 	addi	sp,sp,-4
   8dd0c:	df000015 	stw	fp,0(sp)
   8dd10:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8dd14:	e037883a 	mov	sp,fp
   8dd18:	df000017 	ldw	fp,0(sp)
   8dd1c:	dec00104 	addi	sp,sp,4
   8dd20:	f800283a 	ret

0008dd24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8dd24:	defff804 	addi	sp,sp,-32
   8dd28:	dfc00715 	stw	ra,28(sp)
   8dd2c:	df000615 	stw	fp,24(sp)
   8dd30:	dc000515 	stw	r16,20(sp)
   8dd34:	df000504 	addi	fp,sp,20
   8dd38:	e13ffc15 	stw	r4,-16(fp)
   8dd3c:	e17ffd15 	stw	r5,-12(fp)
   8dd40:	e1bffe15 	stw	r6,-8(fp)
   8dd44:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8dd48:	e13ffd17 	ldw	r4,-12(fp)
   8dd4c:	e17ffe17 	ldw	r5,-8(fp)
   8dd50:	e1bfff17 	ldw	r6,-4(fp)
   8dd54:	008df6c0 	call	8df6c <open>
   8dd58:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8dd5c:	e0bffb17 	ldw	r2,-20(fp)
   8dd60:	1004803a 	cmplt	r2,r2,zero
   8dd64:	10001f1e 	bne	r2,zero,8dde4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8dd68:	e13ffb17 	ldw	r4,-20(fp)
   8dd6c:	04000274 	movhi	r16,9
   8dd70:	843e8d04 	addi	r16,r16,-1484
   8dd74:	01400304 	movi	r5,12
   8dd78:	008ace00 	call	8ace0 <__mulsi3>
   8dd7c:	1405883a 	add	r2,r2,r16
   8dd80:	10c00017 	ldw	r3,0(r2)
   8dd84:	e0bffc17 	ldw	r2,-16(fp)
   8dd88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8dd8c:	e13ffb17 	ldw	r4,-20(fp)
   8dd90:	04000274 	movhi	r16,9
   8dd94:	843e8d04 	addi	r16,r16,-1484
   8dd98:	01400304 	movi	r5,12
   8dd9c:	008ace00 	call	8ace0 <__mulsi3>
   8dda0:	1405883a 	add	r2,r2,r16
   8dda4:	10800104 	addi	r2,r2,4
   8dda8:	10c00017 	ldw	r3,0(r2)
   8ddac:	e0bffc17 	ldw	r2,-16(fp)
   8ddb0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8ddb4:	e13ffb17 	ldw	r4,-20(fp)
   8ddb8:	04000274 	movhi	r16,9
   8ddbc:	843e8d04 	addi	r16,r16,-1484
   8ddc0:	01400304 	movi	r5,12
   8ddc4:	008ace00 	call	8ace0 <__mulsi3>
   8ddc8:	1405883a 	add	r2,r2,r16
   8ddcc:	10800204 	addi	r2,r2,8
   8ddd0:	10c00017 	ldw	r3,0(r2)
   8ddd4:	e0bffc17 	ldw	r2,-16(fp)
   8ddd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8dddc:	e13ffb17 	ldw	r4,-20(fp)
   8dde0:	008bf340 	call	8bf34 <alt_release_fd>
  }
} 
   8dde4:	e037883a 	mov	sp,fp
   8dde8:	dfc00217 	ldw	ra,8(sp)
   8ddec:	df000117 	ldw	fp,4(sp)
   8ddf0:	dc000017 	ldw	r16,0(sp)
   8ddf4:	dec00304 	addi	sp,sp,12
   8ddf8:	f800283a 	ret

0008ddfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8ddfc:	defffb04 	addi	sp,sp,-20
   8de00:	dfc00415 	stw	ra,16(sp)
   8de04:	df000315 	stw	fp,12(sp)
   8de08:	df000304 	addi	fp,sp,12
   8de0c:	e13ffd15 	stw	r4,-12(fp)
   8de10:	e17ffe15 	stw	r5,-8(fp)
   8de14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8de18:	01000274 	movhi	r4,9
   8de1c:	213e9004 	addi	r4,r4,-1472
   8de20:	e17ffd17 	ldw	r5,-12(fp)
   8de24:	01800044 	movi	r6,1
   8de28:	01c07fc4 	movi	r7,511
   8de2c:	008dd240 	call	8dd24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8de30:	01000274 	movhi	r4,9
   8de34:	213e8d04 	addi	r4,r4,-1484
   8de38:	e17ffe17 	ldw	r5,-8(fp)
   8de3c:	000d883a 	mov	r6,zero
   8de40:	01c07fc4 	movi	r7,511
   8de44:	008dd240 	call	8dd24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8de48:	01000274 	movhi	r4,9
   8de4c:	213e9304 	addi	r4,r4,-1460
   8de50:	e17fff17 	ldw	r5,-4(fp)
   8de54:	01800044 	movi	r6,1
   8de58:	01c07fc4 	movi	r7,511
   8de5c:	008dd240 	call	8dd24 <alt_open_fd>
}  
   8de60:	e037883a 	mov	sp,fp
   8de64:	dfc00117 	ldw	ra,4(sp)
   8de68:	df000017 	ldw	fp,0(sp)
   8de6c:	dec00204 	addi	sp,sp,8
   8de70:	f800283a 	ret

0008de74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8de74:	defffa04 	addi	sp,sp,-24
   8de78:	dfc00515 	stw	ra,20(sp)
   8de7c:	df000415 	stw	fp,16(sp)
   8de80:	dc000315 	stw	r16,12(sp)
   8de84:	df000304 	addi	fp,sp,12
   8de88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8de8c:	e0bffe17 	ldw	r2,-8(fp)
   8de90:	10800217 	ldw	r2,8(r2)
   8de94:	10d00034 	orhi	r3,r2,16384
   8de98:	e0bffe17 	ldw	r2,-8(fp)
   8de9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8dea0:	e03ffd15 	stw	zero,-12(fp)
   8dea4:	00002306 	br	8df34 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8dea8:	e13ffd17 	ldw	r4,-12(fp)
   8deac:	04000274 	movhi	r16,9
   8deb0:	843e8d04 	addi	r16,r16,-1484
   8deb4:	01400304 	movi	r5,12
   8deb8:	008ace00 	call	8ace0 <__mulsi3>
   8debc:	1405883a 	add	r2,r2,r16
   8dec0:	10c00017 	ldw	r3,0(r2)
   8dec4:	e0bffe17 	ldw	r2,-8(fp)
   8dec8:	10800017 	ldw	r2,0(r2)
   8decc:	1880161e 	bne	r3,r2,8df28 <alt_file_locked+0xb4>
   8ded0:	e13ffd17 	ldw	r4,-12(fp)
   8ded4:	04000274 	movhi	r16,9
   8ded8:	843e8d04 	addi	r16,r16,-1484
   8dedc:	01400304 	movi	r5,12
   8dee0:	008ace00 	call	8ace0 <__mulsi3>
   8dee4:	1405883a 	add	r2,r2,r16
   8dee8:	10800204 	addi	r2,r2,8
   8deec:	10800017 	ldw	r2,0(r2)
   8def0:	1004403a 	cmpge	r2,r2,zero
   8def4:	10000c1e 	bne	r2,zero,8df28 <alt_file_locked+0xb4>
   8def8:	e13ffd17 	ldw	r4,-12(fp)
   8defc:	01400304 	movi	r5,12
   8df00:	008ace00 	call	8ace0 <__mulsi3>
   8df04:	1007883a 	mov	r3,r2
   8df08:	00800274 	movhi	r2,9
   8df0c:	10be8d04 	addi	r2,r2,-1484
   8df10:	1887883a 	add	r3,r3,r2
   8df14:	e0bffe17 	ldw	r2,-8(fp)
   8df18:	18800326 	beq	r3,r2,8df28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8df1c:	00bffcc4 	movi	r2,-13
   8df20:	e0bfff15 	stw	r2,-4(fp)
   8df24:	00000a06 	br	8df50 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8df28:	e0bffd17 	ldw	r2,-12(fp)
   8df2c:	10800044 	addi	r2,r2,1
   8df30:	e0bffd15 	stw	r2,-12(fp)
   8df34:	00800274 	movhi	r2,9
   8df38:	10834404 	addi	r2,r2,3344
   8df3c:	10800017 	ldw	r2,0(r2)
   8df40:	1007883a 	mov	r3,r2
   8df44:	e0bffd17 	ldw	r2,-12(fp)
   8df48:	18bfd72e 	bgeu	r3,r2,8dea8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8df4c:	e03fff15 	stw	zero,-4(fp)
   8df50:	e0bfff17 	ldw	r2,-4(fp)
}
   8df54:	e037883a 	mov	sp,fp
   8df58:	dfc00217 	ldw	ra,8(sp)
   8df5c:	df000117 	ldw	fp,4(sp)
   8df60:	dc000017 	ldw	r16,0(sp)
   8df64:	dec00304 	addi	sp,sp,12
   8df68:	f800283a 	ret

0008df6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8df6c:	defff404 	addi	sp,sp,-48
   8df70:	dfc00b15 	stw	ra,44(sp)
   8df74:	df000a15 	stw	fp,40(sp)
   8df78:	df000a04 	addi	fp,sp,40
   8df7c:	e13ffb15 	stw	r4,-20(fp)
   8df80:	e17ffc15 	stw	r5,-16(fp)
   8df84:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8df88:	00bfffc4 	movi	r2,-1
   8df8c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8df90:	00bffb44 	movi	r2,-19
   8df94:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8df98:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8df9c:	e13ffb17 	ldw	r4,-20(fp)
   8dfa0:	01400274 	movhi	r5,9
   8dfa4:	29434204 	addi	r5,r5,3336
   8dfa8:	008e31c0 	call	8e31c <alt_find_dev>
   8dfac:	e0bffa15 	stw	r2,-24(fp)
   8dfb0:	e0bffa17 	ldw	r2,-24(fp)
   8dfb4:	1004c03a 	cmpne	r2,r2,zero
   8dfb8:	1000051e 	bne	r2,zero,8dfd0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8dfbc:	e13ffb17 	ldw	r4,-20(fp)
   8dfc0:	008e3b00 	call	8e3b0 <alt_find_file>
   8dfc4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8dfc8:	00800044 	movi	r2,1
   8dfcc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8dfd0:	e0bffa17 	ldw	r2,-24(fp)
   8dfd4:	1005003a 	cmpeq	r2,r2,zero
   8dfd8:	1000311e 	bne	r2,zero,8e0a0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8dfdc:	e13ffa17 	ldw	r4,-24(fp)
   8dfe0:	008e4d00 	call	8e4d0 <alt_get_fd>
   8dfe4:	e0bff815 	stw	r2,-32(fp)
   8dfe8:	e0bff817 	ldw	r2,-32(fp)
   8dfec:	1004403a 	cmpge	r2,r2,zero
   8dff0:	1000031e 	bne	r2,zero,8e000 <open+0x94>
    {
      status = index;
   8dff4:	e0bff817 	ldw	r2,-32(fp)
   8dff8:	e0bff715 	stw	r2,-36(fp)
   8dffc:	00002a06 	br	8e0a8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8e000:	e13ff817 	ldw	r4,-32(fp)
   8e004:	01400304 	movi	r5,12
   8e008:	008ace00 	call	8ace0 <__mulsi3>
   8e00c:	1007883a 	mov	r3,r2
   8e010:	00800274 	movhi	r2,9
   8e014:	10be8d04 	addi	r2,r2,-1484
   8e018:	1885883a 	add	r2,r3,r2
   8e01c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8e020:	e0fffc17 	ldw	r3,-16(fp)
   8e024:	00900034 	movhi	r2,16384
   8e028:	10bfffc4 	addi	r2,r2,-1
   8e02c:	1886703a 	and	r3,r3,r2
   8e030:	e0bff917 	ldw	r2,-28(fp)
   8e034:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8e038:	e0bff617 	ldw	r2,-40(fp)
   8e03c:	1004c03a 	cmpne	r2,r2,zero
   8e040:	1000061e 	bne	r2,zero,8e05c <open+0xf0>
   8e044:	e13ff917 	ldw	r4,-28(fp)
   8e048:	008de740 	call	8de74 <alt_file_locked>
   8e04c:	e0bff715 	stw	r2,-36(fp)
   8e050:	e0bff717 	ldw	r2,-36(fp)
   8e054:	1004803a 	cmplt	r2,r2,zero
   8e058:	1000131e 	bne	r2,zero,8e0a8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8e05c:	e0bffa17 	ldw	r2,-24(fp)
   8e060:	10800317 	ldw	r2,12(r2)
   8e064:	1005003a 	cmpeq	r2,r2,zero
   8e068:	1000091e 	bne	r2,zero,8e090 <open+0x124>
   8e06c:	e0bffa17 	ldw	r2,-24(fp)
   8e070:	10800317 	ldw	r2,12(r2)
   8e074:	e13ff917 	ldw	r4,-28(fp)
   8e078:	e17ffb17 	ldw	r5,-20(fp)
   8e07c:	e1bffc17 	ldw	r6,-16(fp)
   8e080:	e1fffd17 	ldw	r7,-12(fp)
   8e084:	103ee83a 	callr	r2
   8e088:	e0bfff15 	stw	r2,-4(fp)
   8e08c:	00000106 	br	8e094 <open+0x128>
   8e090:	e03fff15 	stw	zero,-4(fp)
   8e094:	e0bfff17 	ldw	r2,-4(fp)
   8e098:	e0bff715 	stw	r2,-36(fp)
   8e09c:	00000206 	br	8e0a8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8e0a0:	00bffb44 	movi	r2,-19
   8e0a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8e0a8:	e0bff717 	ldw	r2,-36(fp)
   8e0ac:	1004403a 	cmpge	r2,r2,zero
   8e0b0:	1000091e 	bne	r2,zero,8e0d8 <open+0x16c>
  {
    alt_release_fd (index);  
   8e0b4:	e13ff817 	ldw	r4,-32(fp)
   8e0b8:	008bf340 	call	8bf34 <alt_release_fd>
    ALT_ERRNO = -status;
   8e0bc:	008e0f80 	call	8e0f8 <alt_get_errno>
   8e0c0:	e0fff717 	ldw	r3,-36(fp)
   8e0c4:	00c7c83a 	sub	r3,zero,r3
   8e0c8:	10c00015 	stw	r3,0(r2)
    return -1;
   8e0cc:	00bfffc4 	movi	r2,-1
   8e0d0:	e0bffe15 	stw	r2,-8(fp)
   8e0d4:	00000206 	br	8e0e0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8e0d8:	e0bff817 	ldw	r2,-32(fp)
   8e0dc:	e0bffe15 	stw	r2,-8(fp)
   8e0e0:	e0bffe17 	ldw	r2,-8(fp)
}
   8e0e4:	e037883a 	mov	sp,fp
   8e0e8:	dfc00117 	ldw	ra,4(sp)
   8e0ec:	df000017 	ldw	fp,0(sp)
   8e0f0:	dec00204 	addi	sp,sp,8
   8e0f4:	f800283a 	ret

0008e0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e0f8:	defffd04 	addi	sp,sp,-12
   8e0fc:	dfc00215 	stw	ra,8(sp)
   8e100:	df000115 	stw	fp,4(sp)
   8e104:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8e108:	00800274 	movhi	r2,9
   8e10c:	10834504 	addi	r2,r2,3348
   8e110:	10800017 	ldw	r2,0(r2)
   8e114:	1005003a 	cmpeq	r2,r2,zero
   8e118:	1000061e 	bne	r2,zero,8e134 <alt_get_errno+0x3c>
   8e11c:	00800274 	movhi	r2,9
   8e120:	10834504 	addi	r2,r2,3348
   8e124:	10800017 	ldw	r2,0(r2)
   8e128:	103ee83a 	callr	r2
   8e12c:	e0bfff15 	stw	r2,-4(fp)
   8e130:	00000306 	br	8e140 <alt_get_errno+0x48>
   8e134:	00800274 	movhi	r2,9
   8e138:	108a2d04 	addi	r2,r2,10420
   8e13c:	e0bfff15 	stw	r2,-4(fp)
   8e140:	e0bfff17 	ldw	r2,-4(fp)
}
   8e144:	e037883a 	mov	sp,fp
   8e148:	dfc00117 	ldw	ra,4(sp)
   8e14c:	df000017 	ldw	fp,0(sp)
   8e150:	dec00204 	addi	sp,sp,8
   8e154:	f800283a 	ret

0008e158 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8e158:	defffa04 	addi	sp,sp,-24
   8e15c:	df000515 	stw	fp,20(sp)
   8e160:	df000504 	addi	fp,sp,20
   8e164:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e168:	0005303a 	rdctl	r2,status
   8e16c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e170:	e0fffd17 	ldw	r3,-12(fp)
   8e174:	00bfff84 	movi	r2,-2
   8e178:	1884703a 	and	r2,r3,r2
   8e17c:	1001703a 	wrctl	status,r2
  
  return context;
   8e180:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8e184:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8e188:	e0bfff17 	ldw	r2,-4(fp)
   8e18c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8e190:	e0bffc17 	ldw	r2,-16(fp)
   8e194:	10c00017 	ldw	r3,0(r2)
   8e198:	e0bffc17 	ldw	r2,-16(fp)
   8e19c:	10800117 	ldw	r2,4(r2)
   8e1a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8e1a4:	e0bffc17 	ldw	r2,-16(fp)
   8e1a8:	10c00117 	ldw	r3,4(r2)
   8e1ac:	e0bffc17 	ldw	r2,-16(fp)
   8e1b0:	10800017 	ldw	r2,0(r2)
   8e1b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8e1b8:	e0fffc17 	ldw	r3,-16(fp)
   8e1bc:	e0bffc17 	ldw	r2,-16(fp)
   8e1c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8e1c4:	e0fffc17 	ldw	r3,-16(fp)
   8e1c8:	e0bffc17 	ldw	r2,-16(fp)
   8e1cc:	18800015 	stw	r2,0(r3)
   8e1d0:	e0bffe17 	ldw	r2,-8(fp)
   8e1d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e1d8:	e0bffb17 	ldw	r2,-20(fp)
   8e1dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8e1e0:	e037883a 	mov	sp,fp
   8e1e4:	df000017 	ldw	fp,0(sp)
   8e1e8:	dec00104 	addi	sp,sp,4
   8e1ec:	f800283a 	ret

0008e1f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8e1f0:	defffb04 	addi	sp,sp,-20
   8e1f4:	dfc00415 	stw	ra,16(sp)
   8e1f8:	df000315 	stw	fp,12(sp)
   8e1fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8e200:	d0a01217 	ldw	r2,-32696(gp)
   8e204:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8e208:	d0a6fd17 	ldw	r2,-25612(gp)
   8e20c:	10800044 	addi	r2,r2,1
   8e210:	d0a6fd15 	stw	r2,-25612(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e214:	00003106 	br	8e2dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8e218:	e0bffe17 	ldw	r2,-8(fp)
   8e21c:	10800017 	ldw	r2,0(r2)
   8e220:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8e224:	e0bffe17 	ldw	r2,-8(fp)
   8e228:	10800403 	ldbu	r2,16(r2)
   8e22c:	10803fcc 	andi	r2,r2,255
   8e230:	1005003a 	cmpeq	r2,r2,zero
   8e234:	1000051e 	bne	r2,zero,8e24c <alt_tick+0x5c>
   8e238:	d0a6fd17 	ldw	r2,-25612(gp)
   8e23c:	1004c03a 	cmpne	r2,r2,zero
   8e240:	1000021e 	bne	r2,zero,8e24c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8e244:	e0bffe17 	ldw	r2,-8(fp)
   8e248:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8e24c:	e0bffe17 	ldw	r2,-8(fp)
   8e250:	10c00217 	ldw	r3,8(r2)
   8e254:	d0a6fd17 	ldw	r2,-25612(gp)
   8e258:	10c01e36 	bltu	r2,r3,8e2d4 <alt_tick+0xe4>
   8e25c:	e0bffe17 	ldw	r2,-8(fp)
   8e260:	10800403 	ldbu	r2,16(r2)
   8e264:	10803fcc 	andi	r2,r2,255
   8e268:	1004c03a 	cmpne	r2,r2,zero
   8e26c:	1000191e 	bne	r2,zero,8e2d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8e270:	e0bffe17 	ldw	r2,-8(fp)
   8e274:	10c00317 	ldw	r3,12(r2)
   8e278:	e0bffe17 	ldw	r2,-8(fp)
   8e27c:	11000517 	ldw	r4,20(r2)
   8e280:	183ee83a 	callr	r3
   8e284:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8e288:	e0bffd17 	ldw	r2,-12(fp)
   8e28c:	1004c03a 	cmpne	r2,r2,zero
   8e290:	1000031e 	bne	r2,zero,8e2a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8e294:	e13ffe17 	ldw	r4,-8(fp)
   8e298:	008e1580 	call	8e158 <alt_alarm_stop>
   8e29c:	00000d06 	br	8e2d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8e2a0:	e0bffe17 	ldw	r2,-8(fp)
   8e2a4:	10c00217 	ldw	r3,8(r2)
   8e2a8:	e0bffd17 	ldw	r2,-12(fp)
   8e2ac:	1887883a 	add	r3,r3,r2
   8e2b0:	e0bffe17 	ldw	r2,-8(fp)
   8e2b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8e2b8:	e0bffe17 	ldw	r2,-8(fp)
   8e2bc:	10c00217 	ldw	r3,8(r2)
   8e2c0:	d0a6fd17 	ldw	r2,-25612(gp)
   8e2c4:	1880032e 	bgeu	r3,r2,8e2d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8e2c8:	e0fffe17 	ldw	r3,-8(fp)
   8e2cc:	00800044 	movi	r2,1
   8e2d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8e2d4:	e0bfff17 	ldw	r2,-4(fp)
   8e2d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e2dc:	d0e01204 	addi	r3,gp,-32696
   8e2e0:	e0bffe17 	ldw	r2,-8(fp)
   8e2e4:	10ffcc1e 	bne	r2,r3,8e218 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8e2e8:	e037883a 	mov	sp,fp
   8e2ec:	dfc00117 	ldw	ra,4(sp)
   8e2f0:	df000017 	ldw	fp,0(sp)
   8e2f4:	dec00204 	addi	sp,sp,8
   8e2f8:	f800283a 	ret

0008e2fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8e2fc:	deffff04 	addi	sp,sp,-4
   8e300:	df000015 	stw	fp,0(sp)
   8e304:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8e308:	000170fa 	wrctl	ienable,zero
}
   8e30c:	e037883a 	mov	sp,fp
   8e310:	df000017 	ldw	fp,0(sp)
   8e314:	dec00104 	addi	sp,sp,4
   8e318:	f800283a 	ret

0008e31c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8e31c:	defff904 	addi	sp,sp,-28
   8e320:	dfc00615 	stw	ra,24(sp)
   8e324:	df000515 	stw	fp,20(sp)
   8e328:	df000504 	addi	fp,sp,20
   8e32c:	e13ffd15 	stw	r4,-12(fp)
   8e330:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8e334:	e0bffe17 	ldw	r2,-8(fp)
   8e338:	10800017 	ldw	r2,0(r2)
   8e33c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8e340:	e13ffd17 	ldw	r4,-12(fp)
   8e344:	0081a080 	call	81a08 <strlen>
   8e348:	10800044 	addi	r2,r2,1
   8e34c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8e350:	00000d06 	br	8e388 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8e354:	e0bffc17 	ldw	r2,-16(fp)
   8e358:	11000217 	ldw	r4,8(r2)
   8e35c:	e1bffb17 	ldw	r6,-20(fp)
   8e360:	e17ffd17 	ldw	r5,-12(fp)
   8e364:	008e67c0 	call	8e67c <memcmp>
   8e368:	1004c03a 	cmpne	r2,r2,zero
   8e36c:	1000031e 	bne	r2,zero,8e37c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8e370:	e0bffc17 	ldw	r2,-16(fp)
   8e374:	e0bfff15 	stw	r2,-4(fp)
   8e378:	00000706 	br	8e398 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8e37c:	e0bffc17 	ldw	r2,-16(fp)
   8e380:	10800017 	ldw	r2,0(r2)
   8e384:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8e388:	e0fffe17 	ldw	r3,-8(fp)
   8e38c:	e0bffc17 	ldw	r2,-16(fp)
   8e390:	10fff01e 	bne	r2,r3,8e354 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8e394:	e03fff15 	stw	zero,-4(fp)
   8e398:	e0bfff17 	ldw	r2,-4(fp)
}
   8e39c:	e037883a 	mov	sp,fp
   8e3a0:	dfc00117 	ldw	ra,4(sp)
   8e3a4:	df000017 	ldw	fp,0(sp)
   8e3a8:	dec00204 	addi	sp,sp,8
   8e3ac:	f800283a 	ret

0008e3b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8e3b0:	defffa04 	addi	sp,sp,-24
   8e3b4:	dfc00515 	stw	ra,20(sp)
   8e3b8:	df000415 	stw	fp,16(sp)
   8e3bc:	df000404 	addi	fp,sp,16
   8e3c0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8e3c4:	00800274 	movhi	r2,9
   8e3c8:	10834004 	addi	r2,r2,3328
   8e3cc:	10800017 	ldw	r2,0(r2)
   8e3d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8e3d4:	00003306 	br	8e4a4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8e3d8:	e0bffd17 	ldw	r2,-12(fp)
   8e3dc:	11000217 	ldw	r4,8(r2)
   8e3e0:	0081a080 	call	81a08 <strlen>
   8e3e4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8e3e8:	e0bffd17 	ldw	r2,-12(fp)
   8e3ec:	10c00217 	ldw	r3,8(r2)
   8e3f0:	e0bffc17 	ldw	r2,-16(fp)
   8e3f4:	1885883a 	add	r2,r3,r2
   8e3f8:	10bfffc4 	addi	r2,r2,-1
   8e3fc:	10800003 	ldbu	r2,0(r2)
   8e400:	10803fcc 	andi	r2,r2,255
   8e404:	1080201c 	xori	r2,r2,128
   8e408:	10bfe004 	addi	r2,r2,-128
   8e40c:	10800bd8 	cmpnei	r2,r2,47
   8e410:	1000031e 	bne	r2,zero,8e420 <alt_find_file+0x70>
    {
      len -= 1;
   8e414:	e0bffc17 	ldw	r2,-16(fp)
   8e418:	10bfffc4 	addi	r2,r2,-1
   8e41c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8e420:	e0bffc17 	ldw	r2,-16(fp)
   8e424:	1007883a 	mov	r3,r2
   8e428:	e0bffe17 	ldw	r2,-8(fp)
   8e42c:	1885883a 	add	r2,r3,r2
   8e430:	10800003 	ldbu	r2,0(r2)
   8e434:	10803fcc 	andi	r2,r2,255
   8e438:	1080201c 	xori	r2,r2,128
   8e43c:	10bfe004 	addi	r2,r2,-128
   8e440:	10800be0 	cmpeqi	r2,r2,47
   8e444:	10000a1e 	bne	r2,zero,8e470 <alt_find_file+0xc0>
   8e448:	e0bffc17 	ldw	r2,-16(fp)
   8e44c:	1007883a 	mov	r3,r2
   8e450:	e0bffe17 	ldw	r2,-8(fp)
   8e454:	1885883a 	add	r2,r3,r2
   8e458:	10800003 	ldbu	r2,0(r2)
   8e45c:	10803fcc 	andi	r2,r2,255
   8e460:	1080201c 	xori	r2,r2,128
   8e464:	10bfe004 	addi	r2,r2,-128
   8e468:	1004c03a 	cmpne	r2,r2,zero
   8e46c:	10000a1e 	bne	r2,zero,8e498 <alt_find_file+0xe8>
   8e470:	e0bffd17 	ldw	r2,-12(fp)
   8e474:	11000217 	ldw	r4,8(r2)
   8e478:	e1bffc17 	ldw	r6,-16(fp)
   8e47c:	e17ffe17 	ldw	r5,-8(fp)
   8e480:	008e67c0 	call	8e67c <memcmp>
   8e484:	1004c03a 	cmpne	r2,r2,zero
   8e488:	1000031e 	bne	r2,zero,8e498 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8e48c:	e0bffd17 	ldw	r2,-12(fp)
   8e490:	e0bfff15 	stw	r2,-4(fp)
   8e494:	00000806 	br	8e4b8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8e498:	e0bffd17 	ldw	r2,-12(fp)
   8e49c:	10800017 	ldw	r2,0(r2)
   8e4a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8e4a4:	00c00274 	movhi	r3,9
   8e4a8:	18c34004 	addi	r3,r3,3328
   8e4ac:	e0bffd17 	ldw	r2,-12(fp)
   8e4b0:	10ffc91e 	bne	r2,r3,8e3d8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8e4b4:	e03fff15 	stw	zero,-4(fp)
   8e4b8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e4bc:	e037883a 	mov	sp,fp
   8e4c0:	dfc00117 	ldw	ra,4(sp)
   8e4c4:	df000017 	ldw	fp,0(sp)
   8e4c8:	dec00204 	addi	sp,sp,8
   8e4cc:	f800283a 	ret

0008e4d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8e4d0:	defffa04 	addi	sp,sp,-24
   8e4d4:	dfc00515 	stw	ra,20(sp)
   8e4d8:	df000415 	stw	fp,16(sp)
   8e4dc:	dc000315 	stw	r16,12(sp)
   8e4e0:	df000304 	addi	fp,sp,12
   8e4e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8e4e8:	00bffa04 	movi	r2,-24
   8e4ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8e4f0:	e03ffe15 	stw	zero,-8(fp)
   8e4f4:	00002006 	br	8e578 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8e4f8:	e13ffe17 	ldw	r4,-8(fp)
   8e4fc:	04000274 	movhi	r16,9
   8e500:	843e8d04 	addi	r16,r16,-1484
   8e504:	01400304 	movi	r5,12
   8e508:	008ace00 	call	8ace0 <__mulsi3>
   8e50c:	1405883a 	add	r2,r2,r16
   8e510:	10800017 	ldw	r2,0(r2)
   8e514:	1004c03a 	cmpne	r2,r2,zero
   8e518:	1000141e 	bne	r2,zero,8e56c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8e51c:	e13ffe17 	ldw	r4,-8(fp)
   8e520:	04000274 	movhi	r16,9
   8e524:	843e8d04 	addi	r16,r16,-1484
   8e528:	01400304 	movi	r5,12
   8e52c:	008ace00 	call	8ace0 <__mulsi3>
   8e530:	1407883a 	add	r3,r2,r16
   8e534:	e0bfff17 	ldw	r2,-4(fp)
   8e538:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8e53c:	00800274 	movhi	r2,9
   8e540:	10834404 	addi	r2,r2,3344
   8e544:	10c00017 	ldw	r3,0(r2)
   8e548:	e0bffe17 	ldw	r2,-8(fp)
   8e54c:	1880040e 	bge	r3,r2,8e560 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8e550:	00c00274 	movhi	r3,9
   8e554:	18c34404 	addi	r3,r3,3344
   8e558:	e0bffe17 	ldw	r2,-8(fp)
   8e55c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8e560:	e0bffe17 	ldw	r2,-8(fp)
   8e564:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8e568:	00000606 	br	8e584 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8e56c:	e0bffe17 	ldw	r2,-8(fp)
   8e570:	10800044 	addi	r2,r2,1
   8e574:	e0bffe15 	stw	r2,-8(fp)
   8e578:	e0bffe17 	ldw	r2,-8(fp)
   8e57c:	10800810 	cmplti	r2,r2,32
   8e580:	103fdd1e 	bne	r2,zero,8e4f8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8e584:	e0bffd17 	ldw	r2,-12(fp)
}
   8e588:	e037883a 	mov	sp,fp
   8e58c:	dfc00217 	ldw	ra,8(sp)
   8e590:	df000117 	ldw	fp,4(sp)
   8e594:	dc000017 	ldw	r16,0(sp)
   8e598:	dec00304 	addi	sp,sp,12
   8e59c:	f800283a 	ret

0008e5a0 <atexit>:
   8e5a0:	200b883a 	mov	r5,r4
   8e5a4:	000d883a 	mov	r6,zero
   8e5a8:	0009883a 	mov	r4,zero
   8e5ac:	000f883a 	mov	r7,zero
   8e5b0:	008e6f01 	jmpi	8e6f0 <__register_exitproc>

0008e5b4 <exit>:
   8e5b4:	defffe04 	addi	sp,sp,-8
   8e5b8:	000b883a 	mov	r5,zero
   8e5bc:	dc000015 	stw	r16,0(sp)
   8e5c0:	dfc00115 	stw	ra,4(sp)
   8e5c4:	2021883a 	mov	r16,r4
   8e5c8:	008e8280 	call	8e828 <__call_exitprocs>
   8e5cc:	00800274 	movhi	r2,9
   8e5d0:	10833b04 	addi	r2,r2,3308
   8e5d4:	11000017 	ldw	r4,0(r2)
   8e5d8:	20800f17 	ldw	r2,60(r4)
   8e5dc:	10000126 	beq	r2,zero,8e5e4 <exit+0x30>
   8e5e0:	103ee83a 	callr	r2
   8e5e4:	8009883a 	mov	r4,r16
   8e5e8:	008ea180 	call	8ea18 <_exit>

0008e5ec <_fputs_r>:
   8e5ec:	defff804 	addi	sp,sp,-32
   8e5f0:	dc000515 	stw	r16,20(sp)
   8e5f4:	2021883a 	mov	r16,r4
   8e5f8:	2809883a 	mov	r4,r5
   8e5fc:	dc400615 	stw	r17,24(sp)
   8e600:	dfc00715 	stw	ra,28(sp)
   8e604:	3023883a 	mov	r17,r6
   8e608:	d9400015 	stw	r5,0(sp)
   8e60c:	0081a080 	call	81a08 <strlen>
   8e610:	00c00044 	movi	r3,1
   8e614:	d8800115 	stw	r2,4(sp)
   8e618:	d8c00315 	stw	r3,12(sp)
   8e61c:	d8800415 	stw	r2,16(sp)
   8e620:	dec00215 	stw	sp,8(sp)
   8e624:	80000326 	beq	r16,zero,8e634 <_fputs_r+0x48>
   8e628:	80800e17 	ldw	r2,56(r16)
   8e62c:	8009883a 	mov	r4,r16
   8e630:	10000926 	beq	r2,zero,8e658 <_fputs_r+0x6c>
   8e634:	8009883a 	mov	r4,r16
   8e638:	880b883a 	mov	r5,r17
   8e63c:	d9800204 	addi	r6,sp,8
   8e640:	0085ec80 	call	85ec8 <__sfvwrite_r>
   8e644:	dfc00717 	ldw	ra,28(sp)
   8e648:	dc400617 	ldw	r17,24(sp)
   8e64c:	dc000517 	ldw	r16,20(sp)
   8e650:	dec00804 	addi	sp,sp,32
   8e654:	f800283a 	ret
   8e658:	00857fc0 	call	857fc <__sinit>
   8e65c:	003ff506 	br	8e634 <_fputs_r+0x48>

0008e660 <fputs>:
   8e660:	01800274 	movhi	r6,9
   8e664:	31833a04 	addi	r6,r6,3304
   8e668:	2007883a 	mov	r3,r4
   8e66c:	31000017 	ldw	r4,0(r6)
   8e670:	280d883a 	mov	r6,r5
   8e674:	180b883a 	mov	r5,r3
   8e678:	008e5ec1 	jmpi	8e5ec <_fputs_r>

0008e67c <memcmp>:
   8e67c:	00c000c4 	movi	r3,3
   8e680:	1980032e 	bgeu	r3,r6,8e690 <memcmp+0x14>
   8e684:	2144b03a 	or	r2,r4,r5
   8e688:	10c4703a 	and	r2,r2,r3
   8e68c:	10000f26 	beq	r2,zero,8e6cc <memcmp+0x50>
   8e690:	31ffffc4 	addi	r7,r6,-1
   8e694:	3000061e 	bne	r6,zero,8e6b0 <memcmp+0x34>
   8e698:	00000a06 	br	8e6c4 <memcmp+0x48>
   8e69c:	39ffffc4 	addi	r7,r7,-1
   8e6a0:	00bfffc4 	movi	r2,-1
   8e6a4:	21000044 	addi	r4,r4,1
   8e6a8:	29400044 	addi	r5,r5,1
   8e6ac:	38800526 	beq	r7,r2,8e6c4 <memcmp+0x48>
   8e6b0:	20c00003 	ldbu	r3,0(r4)
   8e6b4:	28800003 	ldbu	r2,0(r5)
   8e6b8:	18bff826 	beq	r3,r2,8e69c <memcmp+0x20>
   8e6bc:	1885c83a 	sub	r2,r3,r2
   8e6c0:	f800283a 	ret
   8e6c4:	0005883a 	mov	r2,zero
   8e6c8:	f800283a 	ret
   8e6cc:	180f883a 	mov	r7,r3
   8e6d0:	20c00017 	ldw	r3,0(r4)
   8e6d4:	28800017 	ldw	r2,0(r5)
   8e6d8:	18bfed1e 	bne	r3,r2,8e690 <memcmp+0x14>
   8e6dc:	31bfff04 	addi	r6,r6,-4
   8e6e0:	21000104 	addi	r4,r4,4
   8e6e4:	29400104 	addi	r5,r5,4
   8e6e8:	39bff936 	bltu	r7,r6,8e6d0 <memcmp+0x54>
   8e6ec:	003fe806 	br	8e690 <memcmp+0x14>

0008e6f0 <__register_exitproc>:
   8e6f0:	defffa04 	addi	sp,sp,-24
   8e6f4:	00800274 	movhi	r2,9
   8e6f8:	10833b04 	addi	r2,r2,3308
   8e6fc:	dc000015 	stw	r16,0(sp)
   8e700:	14000017 	ldw	r16,0(r2)
   8e704:	dd000415 	stw	r20,16(sp)
   8e708:	2829883a 	mov	r20,r5
   8e70c:	81405217 	ldw	r5,328(r16)
   8e710:	dcc00315 	stw	r19,12(sp)
   8e714:	dc800215 	stw	r18,8(sp)
   8e718:	dc400115 	stw	r17,4(sp)
   8e71c:	dfc00515 	stw	ra,20(sp)
   8e720:	2023883a 	mov	r17,r4
   8e724:	3027883a 	mov	r19,r6
   8e728:	3825883a 	mov	r18,r7
   8e72c:	28002526 	beq	r5,zero,8e7c4 <__register_exitproc+0xd4>
   8e730:	29000117 	ldw	r4,4(r5)
   8e734:	008007c4 	movi	r2,31
   8e738:	11002716 	blt	r2,r4,8e7d8 <__register_exitproc+0xe8>
   8e73c:	8800101e 	bne	r17,zero,8e780 <__register_exitproc+0x90>
   8e740:	2105883a 	add	r2,r4,r4
   8e744:	1085883a 	add	r2,r2,r2
   8e748:	20c00044 	addi	r3,r4,1
   8e74c:	1145883a 	add	r2,r2,r5
   8e750:	0009883a 	mov	r4,zero
   8e754:	15000215 	stw	r20,8(r2)
   8e758:	28c00115 	stw	r3,4(r5)
   8e75c:	2005883a 	mov	r2,r4
   8e760:	dfc00517 	ldw	ra,20(sp)
   8e764:	dd000417 	ldw	r20,16(sp)
   8e768:	dcc00317 	ldw	r19,12(sp)
   8e76c:	dc800217 	ldw	r18,8(sp)
   8e770:	dc400117 	ldw	r17,4(sp)
   8e774:	dc000017 	ldw	r16,0(sp)
   8e778:	dec00604 	addi	sp,sp,24
   8e77c:	f800283a 	ret
   8e780:	29802204 	addi	r6,r5,136
   8e784:	00800044 	movi	r2,1
   8e788:	110e983a 	sll	r7,r2,r4
   8e78c:	30c04017 	ldw	r3,256(r6)
   8e790:	2105883a 	add	r2,r4,r4
   8e794:	1085883a 	add	r2,r2,r2
   8e798:	1185883a 	add	r2,r2,r6
   8e79c:	19c6b03a 	or	r3,r3,r7
   8e7a0:	14802015 	stw	r18,128(r2)
   8e7a4:	14c00015 	stw	r19,0(r2)
   8e7a8:	00800084 	movi	r2,2
   8e7ac:	30c04015 	stw	r3,256(r6)
   8e7b0:	88bfe31e 	bne	r17,r2,8e740 <__register_exitproc+0x50>
   8e7b4:	30804117 	ldw	r2,260(r6)
   8e7b8:	11c4b03a 	or	r2,r2,r7
   8e7bc:	30804115 	stw	r2,260(r6)
   8e7c0:	003fdf06 	br	8e740 <__register_exitproc+0x50>
   8e7c4:	00800274 	movhi	r2,9
   8e7c8:	108a8b04 	addi	r2,r2,10796
   8e7cc:	100b883a 	mov	r5,r2
   8e7d0:	80805215 	stw	r2,328(r16)
   8e7d4:	003fd606 	br	8e730 <__register_exitproc+0x40>
   8e7d8:	00800034 	movhi	r2,0
   8e7dc:	10800004 	addi	r2,r2,0
   8e7e0:	1000021e 	bne	r2,zero,8e7ec <__register_exitproc+0xfc>
   8e7e4:	013fffc4 	movi	r4,-1
   8e7e8:	003fdc06 	br	8e75c <__register_exitproc+0x6c>
   8e7ec:	01006404 	movi	r4,400
   8e7f0:	103ee83a 	callr	r2
   8e7f4:	1007883a 	mov	r3,r2
   8e7f8:	103ffa26 	beq	r2,zero,8e7e4 <__register_exitproc+0xf4>
   8e7fc:	80805217 	ldw	r2,328(r16)
   8e800:	180b883a 	mov	r5,r3
   8e804:	18000115 	stw	zero,4(r3)
   8e808:	18800015 	stw	r2,0(r3)
   8e80c:	80c05215 	stw	r3,328(r16)
   8e810:	18006215 	stw	zero,392(r3)
   8e814:	18006315 	stw	zero,396(r3)
   8e818:	0009883a 	mov	r4,zero
   8e81c:	883fc826 	beq	r17,zero,8e740 <__register_exitproc+0x50>
   8e820:	003fd706 	br	8e780 <__register_exitproc+0x90>

0008e824 <register_fini>:
   8e824:	f800283a 	ret

0008e828 <__call_exitprocs>:
   8e828:	00800274 	movhi	r2,9
   8e82c:	10833b04 	addi	r2,r2,3308
   8e830:	10800017 	ldw	r2,0(r2)
   8e834:	defff304 	addi	sp,sp,-52
   8e838:	df000b15 	stw	fp,44(sp)
   8e83c:	d8800115 	stw	r2,4(sp)
   8e840:	00800034 	movhi	r2,0
   8e844:	10800004 	addi	r2,r2,0
   8e848:	1005003a 	cmpeq	r2,r2,zero
   8e84c:	d8800215 	stw	r2,8(sp)
   8e850:	d8800117 	ldw	r2,4(sp)
   8e854:	dd400815 	stw	r21,32(sp)
   8e858:	dd000715 	stw	r20,28(sp)
   8e85c:	10805204 	addi	r2,r2,328
   8e860:	dfc00c15 	stw	ra,48(sp)
   8e864:	ddc00a15 	stw	r23,40(sp)
   8e868:	dd800915 	stw	r22,36(sp)
   8e86c:	dcc00615 	stw	r19,24(sp)
   8e870:	dc800515 	stw	r18,20(sp)
   8e874:	dc400415 	stw	r17,16(sp)
   8e878:	dc000315 	stw	r16,12(sp)
   8e87c:	282b883a 	mov	r21,r5
   8e880:	2039883a 	mov	fp,r4
   8e884:	d8800015 	stw	r2,0(sp)
   8e888:	2829003a 	cmpeq	r20,r5,zero
   8e88c:	d8800117 	ldw	r2,4(sp)
   8e890:	14405217 	ldw	r17,328(r2)
   8e894:	88001026 	beq	r17,zero,8e8d8 <__call_exitprocs+0xb0>
   8e898:	ddc00017 	ldw	r23,0(sp)
   8e89c:	88800117 	ldw	r2,4(r17)
   8e8a0:	8c802204 	addi	r18,r17,136
   8e8a4:	143fffc4 	addi	r16,r2,-1
   8e8a8:	80000916 	blt	r16,zero,8e8d0 <__call_exitprocs+0xa8>
   8e8ac:	05bfffc4 	movi	r22,-1
   8e8b0:	a000151e 	bne	r20,zero,8e908 <__call_exitprocs+0xe0>
   8e8b4:	8409883a 	add	r4,r16,r16
   8e8b8:	2105883a 	add	r2,r4,r4
   8e8bc:	1485883a 	add	r2,r2,r18
   8e8c0:	10c02017 	ldw	r3,128(r2)
   8e8c4:	a8c01126 	beq	r21,r3,8e90c <__call_exitprocs+0xe4>
   8e8c8:	843fffc4 	addi	r16,r16,-1
   8e8cc:	85bff81e 	bne	r16,r22,8e8b0 <__call_exitprocs+0x88>
   8e8d0:	d8800217 	ldw	r2,8(sp)
   8e8d4:	10003126 	beq	r2,zero,8e99c <__call_exitprocs+0x174>
   8e8d8:	dfc00c17 	ldw	ra,48(sp)
   8e8dc:	df000b17 	ldw	fp,44(sp)
   8e8e0:	ddc00a17 	ldw	r23,40(sp)
   8e8e4:	dd800917 	ldw	r22,36(sp)
   8e8e8:	dd400817 	ldw	r21,32(sp)
   8e8ec:	dd000717 	ldw	r20,28(sp)
   8e8f0:	dcc00617 	ldw	r19,24(sp)
   8e8f4:	dc800517 	ldw	r18,20(sp)
   8e8f8:	dc400417 	ldw	r17,16(sp)
   8e8fc:	dc000317 	ldw	r16,12(sp)
   8e900:	dec00d04 	addi	sp,sp,52
   8e904:	f800283a 	ret
   8e908:	8409883a 	add	r4,r16,r16
   8e90c:	88c00117 	ldw	r3,4(r17)
   8e910:	2105883a 	add	r2,r4,r4
   8e914:	1445883a 	add	r2,r2,r17
   8e918:	18ffffc4 	addi	r3,r3,-1
   8e91c:	11800217 	ldw	r6,8(r2)
   8e920:	1c001526 	beq	r3,r16,8e978 <__call_exitprocs+0x150>
   8e924:	10000215 	stw	zero,8(r2)
   8e928:	303fe726 	beq	r6,zero,8e8c8 <__call_exitprocs+0xa0>
   8e92c:	00c00044 	movi	r3,1
   8e930:	1c06983a 	sll	r3,r3,r16
   8e934:	90804017 	ldw	r2,256(r18)
   8e938:	8cc00117 	ldw	r19,4(r17)
   8e93c:	1884703a 	and	r2,r3,r2
   8e940:	10001426 	beq	r2,zero,8e994 <__call_exitprocs+0x16c>
   8e944:	90804117 	ldw	r2,260(r18)
   8e948:	1884703a 	and	r2,r3,r2
   8e94c:	10000c1e 	bne	r2,zero,8e980 <__call_exitprocs+0x158>
   8e950:	2105883a 	add	r2,r4,r4
   8e954:	1485883a 	add	r2,r2,r18
   8e958:	11400017 	ldw	r5,0(r2)
   8e95c:	e009883a 	mov	r4,fp
   8e960:	303ee83a 	callr	r6
   8e964:	88800117 	ldw	r2,4(r17)
   8e968:	98bfc81e 	bne	r19,r2,8e88c <__call_exitprocs+0x64>
   8e96c:	b8800017 	ldw	r2,0(r23)
   8e970:	147fd526 	beq	r2,r17,8e8c8 <__call_exitprocs+0xa0>
   8e974:	003fc506 	br	8e88c <__call_exitprocs+0x64>
   8e978:	8c000115 	stw	r16,4(r17)
   8e97c:	003fea06 	br	8e928 <__call_exitprocs+0x100>
   8e980:	2105883a 	add	r2,r4,r4
   8e984:	1485883a 	add	r2,r2,r18
   8e988:	11000017 	ldw	r4,0(r2)
   8e98c:	303ee83a 	callr	r6
   8e990:	003ff406 	br	8e964 <__call_exitprocs+0x13c>
   8e994:	303ee83a 	callr	r6
   8e998:	003ff206 	br	8e964 <__call_exitprocs+0x13c>
   8e99c:	88800117 	ldw	r2,4(r17)
   8e9a0:	1000081e 	bne	r2,zero,8e9c4 <__call_exitprocs+0x19c>
   8e9a4:	89000017 	ldw	r4,0(r17)
   8e9a8:	20000726 	beq	r4,zero,8e9c8 <__call_exitprocs+0x1a0>
   8e9ac:	b9000015 	stw	r4,0(r23)
   8e9b0:	8809883a 	mov	r4,r17
   8e9b4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8e9b8:	bc400017 	ldw	r17,0(r23)
   8e9bc:	883fb71e 	bne	r17,zero,8e89c <__call_exitprocs+0x74>
   8e9c0:	003fc506 	br	8e8d8 <__call_exitprocs+0xb0>
   8e9c4:	89000017 	ldw	r4,0(r17)
   8e9c8:	882f883a 	mov	r23,r17
   8e9cc:	2023883a 	mov	r17,r4
   8e9d0:	883fb21e 	bne	r17,zero,8e89c <__call_exitprocs+0x74>
   8e9d4:	003fc006 	br	8e8d8 <__call_exitprocs+0xb0>

0008e9d8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8e9d8:	defffd04 	addi	sp,sp,-12
   8e9dc:	df000215 	stw	fp,8(sp)
   8e9e0:	df000204 	addi	fp,sp,8
   8e9e4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8e9e8:	e0bfff17 	ldw	r2,-4(fp)
   8e9ec:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8e9f0:	e0bffe17 	ldw	r2,-8(fp)
   8e9f4:	1005003a 	cmpeq	r2,r2,zero
   8e9f8:	1000021e 	bne	r2,zero,8ea04 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8e9fc:	002af070 	cmpltui	zero,zero,43969
   8ea00:	00000106 	br	8ea08 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8ea04:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8ea08:	e037883a 	mov	sp,fp
   8ea0c:	df000017 	ldw	fp,0(sp)
   8ea10:	dec00104 	addi	sp,sp,4
   8ea14:	f800283a 	ret

0008ea18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8ea18:	defffd04 	addi	sp,sp,-12
   8ea1c:	dfc00215 	stw	ra,8(sp)
   8ea20:	df000115 	stw	fp,4(sp)
   8ea24:	df000104 	addi	fp,sp,4
   8ea28:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8ea2c:	e13fff17 	ldw	r4,-4(fp)
   8ea30:	008e9d80 	call	8e9d8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8ea34:	003fff06 	br	8ea34 <_exit+0x1c>
   8ea38:	0008e824 	muli	zero,zero,9120
