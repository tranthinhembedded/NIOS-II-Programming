
bai2.elf:     file format elf32-littlenios2
bai2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000c7c0 memsz 0x0000c7c0 flags r-x
    LOAD off    0x0000d7e0 vaddr 0x0008c7e0 paddr 0x0008e238 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000fc90 vaddr 0x0008fc90 paddr 0x0008fc90 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c2e0  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  0008c498  0008c498  0000d498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0008c7e0  0008e238  0000d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0008fc90  0008fc90  0000fc90  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000f260  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000230e8  00000000  00000000  0000ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008fa5  00000000  00000000  000330c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a215  00000000  00000000  0003c06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001888  00000000  00000000  00046284  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002d4e  00000000  00000000  00047b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010d44  00000000  00000000  0004a85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0005b5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005ef2e  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0005ef31  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005ef3d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005ef3e  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0005ef3f  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0005ef4a  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0005ef55  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  0005ef60  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001b  00000000  00000000  0005ef68  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0004ae78  00000000  00000000  0005ef83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
0008c498 l    d  .rodata	00000000 .rodata
0008c7e0 l    d  .rwdata	00000000 .rwdata
0008fc90 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bai2_bsp//obj/HAL/src/crt0.o
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080598 l     F .text	00000034 __sprint_r
0008c4fe l     O .rodata	00000010 blanks.3515
0008c50e l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000825e0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084050 l     F .text	00000008 __fp_lock
00084058 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008c7e0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008c544 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008c68c l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000886c0 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00089400 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00089b94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00089cb0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00089cdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00089ddc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00089ed0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00089fbc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0008a1dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008e228 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008a480 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008a5c0 l     F .text	00000038 alt_dev_reg
0008d19c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008a894 l     F .text	00000204 altera_avalon_jtag_uart_irq
0008aa98 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008b384 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008b810 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008b968 l     F .text	00000050 alt_get_errno
0008b9b8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00086b10 g     F .text	00000074 _mprec_log10
00086c00 g     F .text	00000084 __any_on
0008790c g     F .text	00000064 _isatty_r
0008c574 g     O .rodata	00000028 __mprec_tinytens
0008a0e0 g     F .text	00000078 alt_main
00089b50 g     F .text	00000044 __ashldi3
0008fcec g     O .bss	00000100 alt_irq
00087970 g     F .text	0000006c _lseek_r
0008e238 g       *ABS*	00000000 __flash_rwdata_start
00088f60 g     F .text	0000005c __eqdf2
00080280 g     F .text	0000008c lcd_data
0008ff7c g       *ABS*	00000000 __alt_heap_start
00087424 g     F .text	0000005c __sseek
000840f4 g     F .text	0000010c __sinit
00084d8c g     F .text	0000009c _setlocale_r
0008406c g     F .text	00000078 __sfmoreglue
0008a178 g     F .text	00000020 __malloc_unlock
000859cc g     F .text	0000018c memmove
000840e4 g     F .text	00000010 _cleanup
00085c34 g     F .text	000000a8 _Balloc
0008a198 g     F .text	00000044 alt_putstr
00089018 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000878a4 g     F .text	00000068 _fstat_r
0008fca8 g     O .bss	00000004 errno
0008fcb0 g     O .bss	00000004 alt_argv
000961fc g       *ABS*	00000000 _gp
0008a450 g     F .text	00000030 usleep
0008d01c g     O .rwdata	00000180 alt_fd_list
0008bdbc g     F .text	00000090 alt_find_dev
0008588c g     F .text	00000140 memcpy
00084060 g     F .text	0000000c _cleanup_r
0008913c g     F .text	000000d4 __floatsidf
0008b8f0 g     F .text	00000078 alt_io_redirect
000890e0 g     F .text	0000005c __ltdf2
0008c498 g       *ABS*	00000000 __DTOR_END__
00086a6c g     F .text	000000a4 __ratio
0008ac98 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00089520 g     F .text	00000008 __udivsi3
00089e2c g     F .text	000000a4 isatty
0008c5c4 g     O .rodata	000000c8 __mprec_tens
00084e28 g     F .text	0000000c __locale_charset
0008fca4 g     O .bss	00000004 __malloc_top_pad
0008e204 g     O .rwdata	00000004 __mb_cur_max
00084e34 g     F .text	0000000c _localeconv_r
00086064 g     F .text	0000003c __i2b
00084748 g     F .text	000004e4 __sfvwrite_r
000872e4 g     F .text	00000064 _sbrk_r
000879dc g     F .text	0000006c _read_r
0008cbe0 g     O .rwdata	0000000c __lc_ctype
0008e220 g     O .rwdata	00000004 alt_max_fd
00089938 g     F .text	00000104 __unpack_d
00087754 g     F .text	0000013c _fclose_r
00084020 g     F .text	00000030 fflush
0008fca0 g     O .bss	00000004 __malloc_max_sbrked_mem
00088a14 g     F .text	00000054 __adddf3
000867e0 g     F .text	00000148 __b2d
00088098 g     F .text	00000628 __umoddi3
0008a00c g     F .text	000000d4 lseek
0008e1fc g     O .rwdata	00000004 _global_impure_ptr
00086c84 g     F .text	000005fc _realloc_r
0008ff7c g       *ABS*	00000000 __bss_end
0008b720 g     F .text	000000f0 alt_iic_isr_register
0008bc98 g     F .text	00000104 alt_tick
00087a48 g     F .text	00000650 __udivdi3
0008c59c g     O .rodata	00000028 __mprec_bigtens
00085e48 g     F .text	00000104 __s2b
000892e4 g     F .text	0000011c __floatunsidf
00086580 g     F .text	00000058 __mcmp
0008430c g     F .text	00000018 __fp_lock_all
0008b6d4 g     F .text	0000004c alt_ic_irq_enabled
0008bc00 g     F .text	00000098 alt_alarm_stop
0008fcb8 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
0008cff4 g     O .rwdata	00000028 alt_dev_null
0008b368 g     F .text	0000001c alt_dcache_flush_all
00085f4c g     F .text	00000068 __hi0bits
00089210 g     F .text	000000d4 __fixdfsi
0008e238 g       *ABS*	00000000 __ram_rwdata_end
0008e218 g     O .rwdata	00000008 alt_dev_list
0008a4d0 g     F .text	000000f0 write
0008c7e0 g       *ABS*	00000000 __ram_rodata_end
00089d2c g     F .text	000000b0 fstat
00089b0c g     F .text	00000044 __lshrdi3
000862f8 g     F .text	0000012c __pow5mult
0008fc98 g     O .bss	00000004 __nlocale_changed
00089528 g     F .text	00000008 __umodsi3
0008ff7c g       *ABS*	00000000 end
0008a7d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008c498 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
00089668 g     F .text	000000ac __clzsi2
0008aeb0 g     F .text	00000224 altera_avalon_jtag_uart_write
000842fc g     F .text	00000004 __sfp_lock_acquire
00085794 g     F .text	000000f8 memchr
000805cc g     F .text	00001e7c ___vfprintf_internal_r
000804d4 g     F .text	00000058 _sprintf_r
00084478 g     F .text	000002d0 _free_r
0008030c g     F .text	00000080 lcd_string
0008c2bc g     F .text	000001a0 __call_exitprocs
0008fc94 g     O .bss	00000004 __mlocale_changed
0008e208 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000003c _start
0008fcbc g     O .bss	00000004 _alt_tick_rate
00086424 g     F .text	0000015c __lshift
0008fcc0 g     O .bss	00000004 _alt_nticks
0008a22c g     F .text	000000f4 read
0008a62c g     F .text	00000044 alt_sys_init
0008c18c g     F .text	00000130 __register_exitproc
000860a0 g     F .text	00000258 __multiply
0008ab3c g     F .text	00000068 altera_avalon_jtag_uart_close
00089530 g     F .text	00000028 __mulsi3
0008c7e0 g       *ABS*	00000000 __ram_rwdata_start
0008c498 g       *ABS*	00000000 __ram_rodata_start
0008fcc4 g     O .bss	00000028 __malloc_current_mallinfo
00086928 g     F .text	00000144 __d2b
0008a670 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008bf60 g     F .text	000000d4 alt_get_fd
0008b214 g     F .text	00000154 alt_busy_sleep
00089a3c g     F .text	000000d0 __fpcmp_parts_d
000876f0 g     F .text	00000064 _close_r
0008c110 g     F .text	0000007c memcmp
0008a730 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008ff7c g       *ABS*	00000000 __alt_stack_base
0008a780 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008246c g     F .text	00000174 __swsetup_r
00088dac g     F .text	000001b4 __divdf3
00084200 g     F .text	000000fc __sfp
00086b84 g     F .text	0000007c __copybits
0008cbec g     O .rwdata	00000408 __malloc_av_
00084308 g     F .text	00000004 __sinit_lock_release
00088ac8 g     F .text	000002e4 __muldf3
00087348 g     F .text	00000054 __sread
0008be4c g     F .text	00000114 alt_find_file
0008b3d4 g     F .text	000000a0 alt_dev_llist_insert
0008a158 g     F .text	00000020 __malloc_lock
0008a3a0 g     F .text	000000b0 sbrk
00083e38 g     F .text	000001e8 _fflush_r
00087624 g     F .text	000000cc _calloc_r
0008fc90 g       *ABS*	00000000 __bss_start
00085b58 g     F .text	000000dc memset
0008038c g     F .text	0000008c lcd_init
00080418 g     F .text	000000bc main
0008fcb4 g     O .bss	00000004 alt_envp
0008fc9c g     O .bss	00000004 __malloc_max_total_mem
0008a6d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00087480 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
00087890 g     F .text	00000014 fclose
0008fdec g     O .bss	00000190 _atexit0
0008281c g     F .text	0000161c _dtoa_r
00085010 g     F .text	00000784 _malloc_r
0008e224 g     O .rwdata	00000004 alt_errno
00084c2c g     F .text	000000a8 _fwalk
00089474 g     F .text	00000050 __divsi3
0008c698 g     O .rodata	00000014 __thenan_df
0008433c g     F .text	0000013c _malloc_trim_r
0008c498 g       *ABS*	00000000 __CTOR_END__
00087488 g     F .text	000000a4 strcmp
0008c498 g       *ABS*	00000000 __flash_rodata_start
0008c498 g       *ABS*	00000000 __DTOR_LIST__
00088fbc g     F .text	0000005c __nedf2
0008a5f8 g     F .text	00000034 alt_irq_init
0008a320 g     F .text	00000080 alt_release_fd
0008052c g     F .text	0000006c sprintf
0008c6ac g     O .rodata	00000100 __clz_tab
0008fc90 g     O .bss	00000004 _PathLocale
0008c034 g     F .text	00000014 atexit
000875b8 g     F .text	0000006c _write_r
00084e40 g     F .text	0000001c setlocale
0008e200 g     O .rwdata	00000004 _impure_ptr
0008fcac g     O .bss	00000004 alt_argc
0008b4d0 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00086780 g     F .text	00000060 __ulp
00087280 g     F .text	00000038 __isinfd
00084324 g     F .text	00000018 __fp_unlock_all
0008e210 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084e5c g     F .text	0000000c localeconv
0008b548 g     F .text	00000050 alt_ic_isr_register
0008e238 g       *ABS*	00000000 _edata
0008ff7c g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
0008aba4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008c080 g     F .text	00000074 _fputs_r
0008b634 g     F .text	000000a0 alt_ic_irq_disable
0008739c g     F .text	00000088 __swrite
0008e20c g     O .rwdata	00000004 __malloc_trim_threshold
0008bd9c g     F .text	00000020 altera_nios2_qsys_irq_init
0008c048 g     F .text	00000038 exit
00084cd4 g     F .text	000000b8 _fwalk_reent
000865d8 g     F .text	000001a8 __mdiff
000894c4 g     F .text	0000005c __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084300 g     F .text	00000004 __sfp_lock_release
0008c45c g     F .text	0000003c _exit
000872b8 g     F .text	0000002c __isnand
0008b0d4 g     F .text	00000140 alt_alarm_start
00089558 g     F .text	00000110 __muldi3
00084e68 g     F .text	000001a8 __smakebuf_r
0008752c g     F .text	0000008c strlen
0008baa8 g     F .text	00000158 open
0008907c g     F .text	00000064 __gedf2
0008b52c g     F .text	0000001c alt_icache_flush_all
000801f4 g     F .text	0000008c lcd_command
0008c0f4 g     F .text	0000001c fputs
0008e22c g     O .rwdata	00000004 alt_priority_mask
0008b598 g     F .text	0000009c alt_ic_irq_enable
00082448 g     F .text	00000024 __vfprintf_internal
00088a68 g     F .text	00000060 __subdf3
00085fb4 g     F .text	000000b0 __lo0bits
0008e230 g     O .rwdata	00000008 alt_alarm_list
0008b474 g     F .text	0000005c _do_ctors
00089be4 g     F .text	000000cc close
00089f3c g     F .text	00000080 alt_load
00089714 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00084304 g     F .text	00000004 __sinit_lock_acquire
00085d04 g     F .text	00000144 __multadd
00085cdc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406e14 	ori	at,at,440
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00274 	movhi	r3,9
   80130:	18ff3b04 	addi	r3,r3,-788
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000274 	movhi	r4,9
   80148:	213f3b04 	addi	r4,r4,-788
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   801c0:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c4:	d6987f14 	ori	gp,gp,25084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801cc:	10bf2414 	ori	r2,r2,64656

    movhi r3, %hi(__bss_end)
   801d0:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d4:	18ffdf14 	ori	r3,r3,65404

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	0089f3c0 	call	89f3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	008a0e00 	call	8a0e0 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <lcd_command>:
#include "sys/alt_stdio.h"
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

void lcd_command(char data) {
   801f4:	defffd04 	addi	sp,sp,-12
   801f8:	dfc00215 	stw	ra,8(sp)
   801fc:	df000115 	stw	fp,4(sp)
   80200:	df000104 	addi	fp,sp,4
   80204:	2005883a 	mov	r2,r4
   80208:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LCD_RS_BASE, 0, 0x00);
   8020c:	0007883a 	mov	r3,zero
   80210:	00800434 	movhi	r2,16
   80214:	10841004 	addi	r2,r2,4160
   80218:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_RW_BASE, 0, 0x00);
   8021c:	0007883a 	mov	r3,zero
   80220:	00800434 	movhi	r2,16
   80224:	10841404 	addi	r2,r2,4176
   80228:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_DATA_BASE, 0, data);
   8022c:	e0ffff07 	ldb	r3,-4(fp)
   80230:	00800434 	movhi	r2,16
   80234:	10841804 	addi	r2,r2,4192
   80238:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_EN_BASE, 0, 0x01);
   8023c:	00c00044 	movi	r3,1
   80240:	00800434 	movhi	r2,16
   80244:	10840c04 	addi	r2,r2,4144
   80248:	10c00035 	stwio	r3,0(r2)
    usleep(5);
   8024c:	01000144 	movi	r4,5
   80250:	008a4500 	call	8a450 <usleep>
    IOWR(LCD_EN_BASE, 0, 0x00);
   80254:	0007883a 	mov	r3,zero
   80258:	00800434 	movhi	r2,16
   8025c:	10840c04 	addi	r2,r2,4144
   80260:	10c00035 	stwio	r3,0(r2)
    usleep(5);
   80264:	01000144 	movi	r4,5
   80268:	008a4500 	call	8a450 <usleep>
}
   8026c:	e037883a 	mov	sp,fp
   80270:	dfc00117 	ldw	ra,4(sp)
   80274:	df000017 	ldw	fp,0(sp)
   80278:	dec00204 	addi	sp,sp,8
   8027c:	f800283a 	ret

00080280 <lcd_data>:

void lcd_data(char data) {
   80280:	defffd04 	addi	sp,sp,-12
   80284:	dfc00215 	stw	ra,8(sp)
   80288:	df000115 	stw	fp,4(sp)
   8028c:	df000104 	addi	fp,sp,4
   80290:	2005883a 	mov	r2,r4
   80294:	e0bfff05 	stb	r2,-4(fp)
	 IOWR(LCD_RS_BASE, 0, 0x01);
   80298:	00c00044 	movi	r3,1
   8029c:	00800434 	movhi	r2,16
   802a0:	10841004 	addi	r2,r2,4160
   802a4:	10c00035 	stwio	r3,0(r2)
	 IOWR(LCD_RW_BASE, 0, 0x00);
   802a8:	0007883a 	mov	r3,zero
   802ac:	00800434 	movhi	r2,16
   802b0:	10841404 	addi	r2,r2,4176
   802b4:	10c00035 	stwio	r3,0(r2)
	 IOWR(LCD_DATA_BASE, 0, data);
   802b8:	e0ffff07 	ldb	r3,-4(fp)
   802bc:	00800434 	movhi	r2,16
   802c0:	10841804 	addi	r2,r2,4192
   802c4:	10c00035 	stwio	r3,0(r2)
	 IOWR(LCD_EN_BASE, 0, 0x01);
   802c8:	00c00044 	movi	r3,1
   802cc:	00800434 	movhi	r2,16
   802d0:	10840c04 	addi	r2,r2,4144
   802d4:	10c00035 	stwio	r3,0(r2)
	 usleep(5);
   802d8:	01000144 	movi	r4,5
   802dc:	008a4500 	call	8a450 <usleep>
	 IOWR(LCD_EN_BASE, 0, 0x00);
   802e0:	0007883a 	mov	r3,zero
   802e4:	00800434 	movhi	r2,16
   802e8:	10840c04 	addi	r2,r2,4144
   802ec:	10c00035 	stwio	r3,0(r2)
	 usleep(5);
   802f0:	01000144 	movi	r4,5
   802f4:	008a4500 	call	8a450 <usleep>
}
   802f8:	e037883a 	mov	sp,fp
   802fc:	dfc00117 	ldw	ra,4(sp)
   80300:	df000017 	ldw	fp,0(sp)
   80304:	dec00204 	addi	sp,sp,8
   80308:	f800283a 	ret

0008030c <lcd_string>:

void lcd_string(char *str) {
   8030c:	defffc04 	addi	sp,sp,-16
   80310:	dfc00315 	stw	ra,12(sp)
   80314:	df000215 	stw	fp,8(sp)
   80318:	df000204 	addi	fp,sp,8
   8031c:	e13fff15 	stw	r4,-4(fp)
    char i = 0;
   80320:	e03ffe05 	stb	zero,-8(fp)
    while (str[i] != 0) {
   80324:	00000c06 	br	80358 <lcd_string+0x4c>
        lcd_data(str[i]);
   80328:	e0bffe07 	ldb	r2,-8(fp)
   8032c:	e0ffff17 	ldw	r3,-4(fp)
   80330:	1885883a 	add	r2,r3,r2
   80334:	10800003 	ldbu	r2,0(r2)
   80338:	10803fcc 	andi	r2,r2,255
   8033c:	1080201c 	xori	r2,r2,128
   80340:	10bfe004 	addi	r2,r2,-128
   80344:	1009883a 	mov	r4,r2
   80348:	00802800 	call	80280 <lcd_data>
        i++;
   8034c:	e0bffe03 	ldbu	r2,-8(fp)
   80350:	10800044 	addi	r2,r2,1
   80354:	e0bffe05 	stb	r2,-8(fp)
	 usleep(5);
}

void lcd_string(char *str) {
    char i = 0;
    while (str[i] != 0) {
   80358:	e0bffe07 	ldb	r2,-8(fp)
   8035c:	e0ffff17 	ldw	r3,-4(fp)
   80360:	1885883a 	add	r2,r3,r2
   80364:	10800003 	ldbu	r2,0(r2)
   80368:	10803fcc 	andi	r2,r2,255
   8036c:	1080201c 	xori	r2,r2,128
   80370:	10bfe004 	addi	r2,r2,-128
   80374:	103fec1e 	bne	r2,zero,80328 <lcd_string+0x1c>
        lcd_data(str[i]);
        i++;
    }
}
   80378:	e037883a 	mov	sp,fp
   8037c:	dfc00117 	ldw	ra,4(sp)
   80380:	df000017 	ldw	fp,0(sp)
   80384:	dec00204 	addi	sp,sp,8
   80388:	f800283a 	ret

0008038c <lcd_init>:

void lcd_init(void) {
   8038c:	defffe04 	addi	sp,sp,-8
   80390:	dfc00115 	stw	ra,4(sp)
   80394:	df000015 	stw	fp,0(sp)
   80398:	d839883a 	mov	fp,sp
    usleep(15000);
   8039c:	010ea604 	movi	r4,15000
   803a0:	008a4500 	call	8a450 <usleep>
    lcd_command(0x38);
   803a4:	01000e04 	movi	r4,56
   803a8:	00801f40 	call	801f4 <lcd_command>
    usleep(4100);
   803ac:	01040104 	movi	r4,4100
   803b0:	008a4500 	call	8a450 <usleep>
    lcd_command(0x38);
   803b4:	01000e04 	movi	r4,56
   803b8:	00801f40 	call	801f4 <lcd_command>
    usleep(100);
   803bc:	01001904 	movi	r4,100
   803c0:	008a4500 	call	8a450 <usleep>
    lcd_command(0x38);
   803c4:	01000e04 	movi	r4,56
   803c8:	00801f40 	call	801f4 <lcd_command>
    usleep(2000);
   803cc:	0101f404 	movi	r4,2000
   803d0:	008a4500 	call	8a450 <usleep>
    lcd_command(0x0C);
   803d4:	01000304 	movi	r4,12
   803d8:	00801f40 	call	801f4 <lcd_command>
    usleep(2000);
   803dc:	0101f404 	movi	r4,2000
   803e0:	008a4500 	call	8a450 <usleep>
    lcd_command(0x01);
   803e4:	01000044 	movi	r4,1
   803e8:	00801f40 	call	801f4 <lcd_command>
    usleep(2000);
   803ec:	0101f404 	movi	r4,2000
   803f0:	008a4500 	call	8a450 <usleep>
    lcd_command(0x06);
   803f4:	01000184 	movi	r4,6
   803f8:	00801f40 	call	801f4 <lcd_command>
    usleep(2000);
   803fc:	0101f404 	movi	r4,2000
   80400:	008a4500 	call	8a450 <usleep>
}
   80404:	e037883a 	mov	sp,fp
   80408:	dfc00117 	ldw	ra,4(sp)
   8040c:	df000017 	ldw	fp,0(sp)
   80410:	dec00204 	addi	sp,sp,8
   80414:	f800283a 	ret

00080418 <main>:

int main() {
   80418:	defff704 	addi	sp,sp,-36
   8041c:	dfc00815 	stw	ra,32(sp)
   80420:	df000715 	stw	fp,28(sp)
   80424:	df000704 	addi	fp,sp,28
    int count = 0;
   80428:	e03ff915 	stw	zero,-28(fp)
    char lcd_buffer[16];
    int prev_key_state = 1;
   8042c:	00800044 	movi	r2,1
   80430:	e0bffa15 	stw	r2,-24(fp)

    alt_putstr("Hello from Nios II!\n");
   80434:	01000274 	movhi	r4,9
   80438:	21312604 	addi	r4,r4,-15208
   8043c:	008a1980 	call	8a198 <alt_putstr>

    IOWR(LCD_ON_BASE,0, 0x01);
   80440:	00c00044 	movi	r3,1
   80444:	00800434 	movhi	r2,16
   80448:	10840804 	addi	r2,r2,4128
   8044c:	10c00035 	stwio	r3,0(r2)
    usleep(50000);
   80450:	0130d414 	movui	r4,50000
   80454:	008a4500 	call	8a450 <usleep>

    lcd_init();
   80458:	008038c0 	call	8038c <lcd_init>

    while (1) {
        int key_state = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) & 0x01;
   8045c:	00800434 	movhi	r2,16
   80460:	10840404 	addi	r2,r2,4112
   80464:	10800037 	ldwio	r2,0(r2)
   80468:	1080004c 	andi	r2,r2,1
   8046c:	e0bffb15 	stw	r2,-20(fp)

        if (prev_key_state == 1 && key_state == 0) {
   80470:	e0bffa17 	ldw	r2,-24(fp)
   80474:	10800058 	cmpnei	r2,r2,1
   80478:	1000051e 	bne	r2,zero,80490 <main+0x78>
   8047c:	e0bffb17 	ldw	r2,-20(fp)
   80480:	1000031e 	bne	r2,zero,80490 <main+0x78>
            count++;
   80484:	e0bff917 	ldw	r2,-28(fp)
   80488:	10800044 	addi	r2,r2,1
   8048c:	e0bff915 	stw	r2,-28(fp)
        }

        prev_key_state = key_state;
   80490:	e0bffb17 	ldw	r2,-20(fp)
   80494:	e0bffa15 	stw	r2,-24(fp)

        lcd_command(0x80);
   80498:	013fe004 	movi	r4,-128
   8049c:	00801f40 	call	801f4 <lcd_command>
        sprintf(lcd_buffer, "Count: %d", count);
   804a0:	e0bffc04 	addi	r2,fp,-16
   804a4:	1009883a 	mov	r4,r2
   804a8:	01400274 	movhi	r5,9
   804ac:	29712c04 	addi	r5,r5,-15184
   804b0:	e1bff917 	ldw	r6,-28(fp)
   804b4:	008052c0 	call	8052c <sprintf>
        lcd_string(lcd_buffer);
   804b8:	e0bffc04 	addi	r2,fp,-16
   804bc:	1009883a 	mov	r4,r2
   804c0:	008030c0 	call	8030c <lcd_string>

        usleep(100000);
   804c4:	010000b4 	movhi	r4,2
   804c8:	2121a804 	addi	r4,r4,-31072
   804cc:	008a4500 	call	8a450 <usleep>
    }
   804d0:	003fe206 	br	8045c <main+0x44>

000804d4 <_sprintf_r>:
   804d4:	deffe704 	addi	sp,sp,-100
   804d8:	2807883a 	mov	r3,r5
   804dc:	dfc01715 	stw	ra,92(sp)
   804e0:	d9c01815 	stw	r7,96(sp)
   804e4:	00a00034 	movhi	r2,32768
   804e8:	10bfffc4 	addi	r2,r2,-1
   804ec:	02008204 	movi	r8,520
   804f0:	d8800215 	stw	r2,8(sp)
   804f4:	d8800515 	stw	r2,20(sp)
   804f8:	d80b883a 	mov	r5,sp
   804fc:	d9c01804 	addi	r7,sp,96
   80500:	00bfffc4 	movi	r2,-1
   80504:	d8c00015 	stw	r3,0(sp)
   80508:	d8c00415 	stw	r3,16(sp)
   8050c:	da00030d 	sth	r8,12(sp)
   80510:	d880038d 	sth	r2,14(sp)
   80514:	00805cc0 	call	805cc <___vfprintf_internal_r>
   80518:	d8c00017 	ldw	r3,0(sp)
   8051c:	18000005 	stb	zero,0(r3)
   80520:	dfc01717 	ldw	ra,92(sp)
   80524:	dec01904 	addi	sp,sp,100
   80528:	f800283a 	ret

0008052c <sprintf>:
   8052c:	deffe604 	addi	sp,sp,-104
   80530:	2007883a 	mov	r3,r4
   80534:	dfc01715 	stw	ra,92(sp)
   80538:	d9801815 	stw	r6,96(sp)
   8053c:	d9c01915 	stw	r7,100(sp)
   80540:	00800274 	movhi	r2,9
   80544:	10b88004 	addi	r2,r2,-7680
   80548:	11000017 	ldw	r4,0(r2)
   8054c:	00a00034 	movhi	r2,32768
   80550:	10bfffc4 	addi	r2,r2,-1
   80554:	280d883a 	mov	r6,r5
   80558:	02008204 	movi	r8,520
   8055c:	d8800215 	stw	r2,8(sp)
   80560:	d8800515 	stw	r2,20(sp)
   80564:	d80b883a 	mov	r5,sp
   80568:	d9c01804 	addi	r7,sp,96
   8056c:	00bfffc4 	movi	r2,-1
   80570:	d8c00015 	stw	r3,0(sp)
   80574:	d8c00415 	stw	r3,16(sp)
   80578:	da00030d 	sth	r8,12(sp)
   8057c:	d880038d 	sth	r2,14(sp)
   80580:	00805cc0 	call	805cc <___vfprintf_internal_r>
   80584:	d8c00017 	ldw	r3,0(sp)
   80588:	18000005 	stb	zero,0(r3)
   8058c:	dfc01717 	ldw	ra,92(sp)
   80590:	dec01a04 	addi	sp,sp,104
   80594:	f800283a 	ret

00080598 <__sprint_r>:
   80598:	30800217 	ldw	r2,8(r6)
   8059c:	defffe04 	addi	sp,sp,-8
   805a0:	dc000015 	stw	r16,0(sp)
   805a4:	dfc00115 	stw	ra,4(sp)
   805a8:	3021883a 	mov	r16,r6
   805ac:	10000226 	beq	r2,zero,805b8 <__sprint_r+0x20>
   805b0:	00847480 	call	84748 <__sfvwrite_r>
   805b4:	80000215 	stw	zero,8(r16)
   805b8:	80000115 	stw	zero,4(r16)
   805bc:	dfc00117 	ldw	ra,4(sp)
   805c0:	dc000017 	ldw	r16,0(sp)
   805c4:	dec00204 	addi	sp,sp,8
   805c8:	f800283a 	ret

000805cc <___vfprintf_internal_r>:
   805cc:	defeb904 	addi	sp,sp,-1308
   805d0:	dc013d15 	stw	r16,1268(sp)
   805d4:	d9013015 	stw	r4,1216(sp)
   805d8:	dfc14615 	stw	ra,1304(sp)
   805dc:	df014515 	stw	fp,1300(sp)
   805e0:	ddc14415 	stw	r23,1296(sp)
   805e4:	dd814315 	stw	r22,1292(sp)
   805e8:	dd414215 	stw	r21,1288(sp)
   805ec:	dd014115 	stw	r20,1284(sp)
   805f0:	dcc14015 	stw	r19,1280(sp)
   805f4:	dc813f15 	stw	r18,1276(sp)
   805f8:	dc413e15 	stw	r17,1272(sp)
   805fc:	d9412915 	stw	r5,1188(sp)
   80600:	3021883a 	mov	r16,r6
   80604:	d9c12d15 	stw	r7,1204(sp)
   80608:	0084e340 	call	84e34 <_localeconv_r>
   8060c:	10800017 	ldw	r2,0(r2)
   80610:	d9013017 	ldw	r4,1216(sp)
   80614:	d8013315 	stw	zero,1228(sp)
   80618:	d8813715 	stw	r2,1244(sp)
   8061c:	d8013415 	stw	zero,1232(sp)
   80620:	20000226 	beq	r4,zero,8062c <___vfprintf_internal_r+0x60>
   80624:	20800e17 	ldw	r2,56(r4)
   80628:	10014b26 	beq	r2,zero,80b58 <___vfprintf_internal_r+0x58c>
   8062c:	d8c12917 	ldw	r3,1188(sp)
   80630:	1880030b 	ldhu	r2,12(r3)
   80634:	10c0020c 	andi	r3,r2,8
   80638:	18ffffcc 	andi	r3,r3,65535
   8063c:	18e0001c 	xori	r3,r3,32768
   80640:	18e00004 	addi	r3,r3,-32768
   80644:	1800ed26 	beq	r3,zero,809fc <___vfprintf_internal_r+0x430>
   80648:	d9012917 	ldw	r4,1188(sp)
   8064c:	20c00417 	ldw	r3,16(r4)
   80650:	1800ea26 	beq	r3,zero,809fc <___vfprintf_internal_r+0x430>
   80654:	1100068c 	andi	r4,r2,26
   80658:	00c00284 	movi	r3,10
   8065c:	20c0f026 	beq	r4,r3,80a20 <___vfprintf_internal_r+0x454>
   80660:	d9010dc4 	addi	r4,sp,1079
   80664:	d8810e04 	addi	r2,sp,1080
   80668:	dc413017 	ldw	r17,1216(sp)
   8066c:	d8c00404 	addi	r3,sp,16
   80670:	d9012615 	stw	r4,1176(sp)
   80674:	1109c83a 	sub	r4,r2,r4
   80678:	d8812715 	stw	r2,1180(sp)
   8067c:	d8c11b15 	stw	r3,1132(sp)
   80680:	d8011d15 	stw	zero,1140(sp)
   80684:	d8011c15 	stw	zero,1136(sp)
   80688:	802b883a 	mov	r21,r16
   8068c:	d8013215 	stw	zero,1224(sp)
   80690:	d8013615 	stw	zero,1240(sp)
   80694:	d8013515 	stw	zero,1236(sp)
   80698:	d8012c15 	stw	zero,1200(sp)
   8069c:	1813883a 	mov	r9,r3
   806a0:	d9013915 	stw	r4,1252(sp)
   806a4:	a8800007 	ldb	r2,0(r21)
   806a8:	1002f326 	beq	r2,zero,81278 <___vfprintf_internal_r+0xcac>
   806ac:	00c00944 	movi	r3,37
   806b0:	a825883a 	mov	r18,r21
   806b4:	10c0021e 	bne	r2,r3,806c0 <___vfprintf_internal_r+0xf4>
   806b8:	00001406 	br	8070c <___vfprintf_internal_r+0x140>
   806bc:	10c00326 	beq	r2,r3,806cc <___vfprintf_internal_r+0x100>
   806c0:	94800044 	addi	r18,r18,1
   806c4:	90800007 	ldb	r2,0(r18)
   806c8:	103ffc1e 	bne	r2,zero,806bc <___vfprintf_internal_r+0xf0>
   806cc:	9561c83a 	sub	r16,r18,r21
   806d0:	80000e26 	beq	r16,zero,8070c <___vfprintf_internal_r+0x140>
   806d4:	da011d17 	ldw	r8,1140(sp)
   806d8:	d8c11c17 	ldw	r3,1136(sp)
   806dc:	4d400015 	stw	r21,0(r9)
   806e0:	4c000115 	stw	r16,4(r9)
   806e4:	4411883a 	add	r8,r8,r16
   806e8:	18c00044 	addi	r3,r3,1
   806ec:	da011d15 	stw	r8,1140(sp)
   806f0:	d8c11c15 	stw	r3,1136(sp)
   806f4:	008001c4 	movi	r2,7
   806f8:	10c11016 	blt	r2,r3,80b3c <___vfprintf_internal_r+0x570>
   806fc:	4a400204 	addi	r9,r9,8
   80700:	d8812c17 	ldw	r2,1200(sp)
   80704:	1405883a 	add	r2,r2,r16
   80708:	d8812c15 	stw	r2,1200(sp)
   8070c:	90800007 	ldb	r2,0(r18)
   80710:	1000ee26 	beq	r2,zero,80acc <___vfprintf_internal_r+0x500>
   80714:	95400044 	addi	r21,r18,1
   80718:	94800047 	ldb	r18,1(r18)
   8071c:	073fffc4 	movi	fp,-1
   80720:	e007883a 	mov	r3,fp
   80724:	d8012585 	stb	zero,1174(sp)
   80728:	d8012e15 	stw	zero,1208(sp)
   8072c:	0021883a 	mov	r16,zero
   80730:	05001604 	movi	r20,88
   80734:	04c00244 	movi	r19,9
   80738:	4839883a 	mov	fp,r9
   8073c:	ad400044 	addi	r21,r21,1
   80740:	90bff804 	addi	r2,r18,-32
   80744:	a080462e 	bgeu	r20,r2,80860 <___vfprintf_internal_r+0x294>
   80748:	e013883a 	mov	r9,fp
   8074c:	9000df26 	beq	r18,zero,80acc <___vfprintf_internal_r+0x500>
   80750:	00c00044 	movi	r3,1
   80754:	d8c12815 	stw	r3,1184(sp)
   80758:	dc810405 	stb	r18,1040(sp)
   8075c:	d8012585 	stb	zero,1174(sp)
   80760:	d8c12b15 	stw	r3,1196(sp)
   80764:	dcc10404 	addi	r19,sp,1040
   80768:	d8013115 	stw	zero,1220(sp)
   8076c:	80c0008c 	andi	r3,r16,2
   80770:	d8c12a15 	stw	r3,1192(sp)
   80774:	18000326 	beq	r3,zero,80784 <___vfprintf_internal_r+0x1b8>
   80778:	d8c12817 	ldw	r3,1184(sp)
   8077c:	18c00084 	addi	r3,r3,2
   80780:	d8c12815 	stw	r3,1184(sp)
   80784:	80c0210c 	andi	r3,r16,132
   80788:	d8c12f15 	stw	r3,1212(sp)
   8078c:	1802251e 	bne	r3,zero,81024 <___vfprintf_internal_r+0xa58>
   80790:	d9012e17 	ldw	r4,1208(sp)
   80794:	d8c12817 	ldw	r3,1184(sp)
   80798:	20edc83a 	sub	r22,r4,r3
   8079c:	0582210e 	bge	zero,r22,81024 <___vfprintf_internal_r+0xa58>
   807a0:	02800404 	movi	r10,16
   807a4:	da011d17 	ldw	r8,1140(sp)
   807a8:	d8c11c17 	ldw	r3,1136(sp)
   807ac:	05c00274 	movhi	r23,9
   807b0:	bdf13f84 	addi	r23,r23,-15106
   807b4:	5580200e 	bge	r10,r22,80838 <___vfprintf_internal_r+0x26c>
   807b8:	dc813815 	stw	r18,1248(sp)
   807bc:	5039883a 	mov	fp,r10
   807c0:	b825883a 	mov	r18,r23
   807c4:	050001c4 	movi	r20,7
   807c8:	b02f883a 	mov	r23,r22
   807cc:	802d883a 	mov	r22,r16
   807d0:	dc012917 	ldw	r16,1188(sp)
   807d4:	00000306 	br	807e4 <___vfprintf_internal_r+0x218>
   807d8:	bdfffc04 	addi	r23,r23,-16
   807dc:	4a400204 	addi	r9,r9,8
   807e0:	e5c0110e 	bge	fp,r23,80828 <___vfprintf_internal_r+0x25c>
   807e4:	4c800015 	stw	r18,0(r9)
   807e8:	4f000115 	stw	fp,4(r9)
   807ec:	42000404 	addi	r8,r8,16
   807f0:	18c00044 	addi	r3,r3,1
   807f4:	da011d15 	stw	r8,1140(sp)
   807f8:	d8c11c15 	stw	r3,1136(sp)
   807fc:	a0fff60e 	bge	r20,r3,807d8 <___vfprintf_internal_r+0x20c>
   80800:	8809883a 	mov	r4,r17
   80804:	800b883a 	mov	r5,r16
   80808:	d9811b04 	addi	r6,sp,1132
   8080c:	00805980 	call	80598 <__sprint_r>
   80810:	1000b41e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   80814:	bdfffc04 	addi	r23,r23,-16
   80818:	da011d17 	ldw	r8,1140(sp)
   8081c:	d8c11c17 	ldw	r3,1136(sp)
   80820:	da400404 	addi	r9,sp,16
   80824:	e5ffef16 	blt	fp,r23,807e4 <___vfprintf_internal_r+0x218>
   80828:	b021883a 	mov	r16,r22
   8082c:	b82d883a 	mov	r22,r23
   80830:	902f883a 	mov	r23,r18
   80834:	dc813817 	ldw	r18,1248(sp)
   80838:	4dc00015 	stw	r23,0(r9)
   8083c:	4d800115 	stw	r22,4(r9)
   80840:	4591883a 	add	r8,r8,r22
   80844:	18c00044 	addi	r3,r3,1
   80848:	da011d15 	stw	r8,1140(sp)
   8084c:	d8c11c15 	stw	r3,1136(sp)
   80850:	008001c4 	movi	r2,7
   80854:	10c3fe16 	blt	r2,r3,81850 <___vfprintf_internal_r+0x1284>
   80858:	4a400204 	addi	r9,r9,8
   8085c:	0001f306 	br	8102c <___vfprintf_internal_r+0xa60>
   80860:	1085883a 	add	r2,r2,r2
   80864:	1085883a 	add	r2,r2,r2
   80868:	01000234 	movhi	r4,8
   8086c:	21021f04 	addi	r4,r4,2172
   80870:	1105883a 	add	r2,r2,r4
   80874:	10800017 	ldw	r2,0(r2)
   80878:	1000683a 	jmp	r2
   8087c:	00080f58 	cmpnei	zero,zero,8253
   80880:	00080748 	cmpgei	zero,zero,8221
   80884:	00080748 	cmpgei	zero,zero,8221
   80888:	00080f70 	cmpltui	zero,zero,8253
   8088c:	00080748 	cmpgei	zero,zero,8221
   80890:	00080748 	cmpgei	zero,zero,8221
   80894:	00080748 	cmpgei	zero,zero,8221
   80898:	00080748 	cmpgei	zero,zero,8221
   8089c:	00080748 	cmpgei	zero,zero,8221
   808a0:	00080748 	cmpgei	zero,zero,8221
   808a4:	00080e28 	cmpgeui	zero,zero,8248
   808a8:	00080fbc 	xorhi	zero,zero,8254
   808ac:	00080748 	cmpgei	zero,zero,8221
   808b0:	000809f0 	cmpltui	zero,zero,8231
   808b4:	00080d90 	cmplti	zero,zero,8246
   808b8:	00080748 	cmpgei	zero,zero,8221
   808bc:	00080f7c 	xorhi	zero,zero,8253
   808c0:	00080f88 	cmpgei	zero,zero,8254
   808c4:	00080f88 	cmpgei	zero,zero,8254
   808c8:	00080f88 	cmpgei	zero,zero,8254
   808cc:	00080f88 	cmpgei	zero,zero,8254
   808d0:	00080f88 	cmpgei	zero,zero,8254
   808d4:	00080f88 	cmpgei	zero,zero,8254
   808d8:	00080f88 	cmpgei	zero,zero,8254
   808dc:	00080f88 	cmpgei	zero,zero,8254
   808e0:	00080f88 	cmpgei	zero,zero,8254
   808e4:	00080748 	cmpgei	zero,zero,8221
   808e8:	00080748 	cmpgei	zero,zero,8221
   808ec:	00080748 	cmpgei	zero,zero,8221
   808f0:	00080748 	cmpgei	zero,zero,8221
   808f4:	00080748 	cmpgei	zero,zero,8221
   808f8:	00080748 	cmpgei	zero,zero,8221
   808fc:	00080748 	cmpgei	zero,zero,8221
   80900:	00080748 	cmpgei	zero,zero,8221
   80904:	00080748 	cmpgei	zero,zero,8221
   80908:	00080748 	cmpgei	zero,zero,8221
   8090c:	00080b60 	cmpeqi	zero,zero,8237
   80910:	00080c20 	cmpeqi	zero,zero,8240
   80914:	00080748 	cmpgei	zero,zero,8221
   80918:	00080c20 	cmpeqi	zero,zero,8240
   8091c:	00080748 	cmpgei	zero,zero,8221
   80920:	00080748 	cmpgei	zero,zero,8221
   80924:	00080748 	cmpgei	zero,zero,8221
   80928:	00080748 	cmpgei	zero,zero,8221
   8092c:	00080cb4 	movhi	zero,8242
   80930:	00080748 	cmpgei	zero,zero,8221
   80934:	00080748 	cmpgei	zero,zero,8221
   80938:	00080cc0 	call	80cc <__alt_mem_onchip_memory2_0-0x77f34>
   8093c:	00080748 	cmpgei	zero,zero,8221
   80940:	00080748 	cmpgei	zero,zero,8221
   80944:	00080748 	cmpgei	zero,zero,8221
   80948:	00080748 	cmpgei	zero,zero,8221
   8094c:	00080748 	cmpgei	zero,zero,8221
   80950:	00080cf8 	rdprs	zero,zero,8243
   80954:	00080748 	cmpgei	zero,zero,8221
   80958:	00080748 	cmpgei	zero,zero,8221
   8095c:	00080d34 	movhi	zero,8244
   80960:	00080748 	cmpgei	zero,zero,8221
   80964:	00080748 	cmpgei	zero,zero,8221
   80968:	00080748 	cmpgei	zero,zero,8221
   8096c:	00080748 	cmpgei	zero,zero,8221
   80970:	00080748 	cmpgei	zero,zero,8221
   80974:	00080748 	cmpgei	zero,zero,8221
   80978:	00080748 	cmpgei	zero,zero,8221
   8097c:	00080748 	cmpgei	zero,zero,8221
   80980:	00080748 	cmpgei	zero,zero,8221
   80984:	00080748 	cmpgei	zero,zero,8221
   80988:	00080fcc 	andi	zero,zero,8255
   8098c:	00081000 	call	8100 <__alt_mem_onchip_memory2_0-0x77f00>
   80990:	00080c20 	cmpeqi	zero,zero,8240
   80994:	00080c20 	cmpeqi	zero,zero,8240
   80998:	00080c20 	cmpeqi	zero,zero,8240
   8099c:	00080f4c 	andi	zero,zero,8253
   809a0:	00081000 	call	8100 <__alt_mem_onchip_memory2_0-0x77f00>
   809a4:	00080748 	cmpgei	zero,zero,8221
   809a8:	00080748 	cmpgei	zero,zero,8221
   809ac:	00080dd8 	cmpnei	zero,zero,8247
   809b0:	00080748 	cmpgei	zero,zero,8221
   809b4:	00080df0 	cmpltui	zero,zero,8247
   809b8:	0008100c 	andi	zero,zero,8256
   809bc:	00080e50 	cmplti	zero,zero,8249
   809c0:	00080ea0 	cmpeqi	zero,zero,8250
   809c4:	00080748 	cmpgei	zero,zero,8221
   809c8:	00080eac 	andhi	zero,zero,8250
   809cc:	00080748 	cmpgei	zero,zero,8221
   809d0:	00081018 	cmpnei	zero,zero,8256
   809d4:	00080748 	cmpgei	zero,zero,8221
   809d8:	00080748 	cmpgei	zero,zero,8221
   809dc:	00080f10 	cmplti	zero,zero,8252
   809e0:	d9012e17 	ldw	r4,1208(sp)
   809e4:	d8812d15 	stw	r2,1204(sp)
   809e8:	0109c83a 	sub	r4,zero,r4
   809ec:	d9012e15 	stw	r4,1208(sp)
   809f0:	84000114 	ori	r16,r16,4
   809f4:	ac800007 	ldb	r18,0(r21)
   809f8:	003f5006 	br	8073c <___vfprintf_internal_r+0x170>
   809fc:	d9013017 	ldw	r4,1216(sp)
   80a00:	d9412917 	ldw	r5,1188(sp)
   80a04:	008246c0 	call	8246c <__swsetup_r>
   80a08:	10003d1e 	bne	r2,zero,80b00 <___vfprintf_internal_r+0x534>
   80a0c:	d8c12917 	ldw	r3,1188(sp)
   80a10:	1880030b 	ldhu	r2,12(r3)
   80a14:	00c00284 	movi	r3,10
   80a18:	1100068c 	andi	r4,r2,26
   80a1c:	20ff101e 	bne	r4,r3,80660 <___vfprintf_internal_r+0x94>
   80a20:	d9012917 	ldw	r4,1188(sp)
   80a24:	20c0038b 	ldhu	r3,14(r4)
   80a28:	193fffcc 	andi	r4,r3,65535
   80a2c:	2120001c 	xori	r4,r4,32768
   80a30:	21200004 	addi	r4,r4,-32768
   80a34:	203f0a16 	blt	r4,zero,80660 <___vfprintf_internal_r+0x94>
   80a38:	d9012917 	ldw	r4,1188(sp)
   80a3c:	d9c12d17 	ldw	r7,1204(sp)
   80a40:	10bfff4c 	andi	r2,r2,65533
   80a44:	22800717 	ldw	r10,28(r4)
   80a48:	22400917 	ldw	r9,36(r4)
   80a4c:	d9013017 	ldw	r4,1216(sp)
   80a50:	02010004 	movi	r8,1024
   80a54:	d881070d 	sth	r2,1052(sp)
   80a58:	d9410404 	addi	r5,sp,1040
   80a5c:	d8800404 	addi	r2,sp,16
   80a60:	800d883a 	mov	r6,r16
   80a64:	d8c1078d 	sth	r3,1054(sp)
   80a68:	da810b15 	stw	r10,1068(sp)
   80a6c:	da410d15 	stw	r9,1076(sp)
   80a70:	d8810415 	stw	r2,1040(sp)
   80a74:	d8810815 	stw	r2,1056(sp)
   80a78:	da010615 	stw	r8,1048(sp)
   80a7c:	da010915 	stw	r8,1060(sp)
   80a80:	d8010a15 	stw	zero,1064(sp)
   80a84:	00805cc0 	call	805cc <___vfprintf_internal_r>
   80a88:	d8812c15 	stw	r2,1200(sp)
   80a8c:	10000416 	blt	r2,zero,80aa0 <___vfprintf_internal_r+0x4d4>
   80a90:	d9013017 	ldw	r4,1216(sp)
   80a94:	d9410404 	addi	r5,sp,1040
   80a98:	0083e380 	call	83e38 <_fflush_r>
   80a9c:	1006501e 	bne	r2,zero,823e0 <___vfprintf_internal_r+0x1e14>
   80aa0:	d881070b 	ldhu	r2,1052(sp)
   80aa4:	1080100c 	andi	r2,r2,64
   80aa8:	10bfffcc 	andi	r2,r2,65535
   80aac:	10a0001c 	xori	r2,r2,32768
   80ab0:	10a00004 	addi	r2,r2,-32768
   80ab4:	10001426 	beq	r2,zero,80b08 <___vfprintf_internal_r+0x53c>
   80ab8:	d8c12917 	ldw	r3,1188(sp)
   80abc:	1880030b 	ldhu	r2,12(r3)
   80ac0:	10801014 	ori	r2,r2,64
   80ac4:	1880030d 	sth	r2,12(r3)
   80ac8:	00000f06 	br	80b08 <___vfprintf_internal_r+0x53c>
   80acc:	d8811d17 	ldw	r2,1140(sp)
   80ad0:	10000426 	beq	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   80ad4:	d9013017 	ldw	r4,1216(sp)
   80ad8:	d9412917 	ldw	r5,1188(sp)
   80adc:	d9811b04 	addi	r6,sp,1132
   80ae0:	00805980 	call	80598 <__sprint_r>
   80ae4:	d8c12917 	ldw	r3,1188(sp)
   80ae8:	1880030b 	ldhu	r2,12(r3)
   80aec:	1080100c 	andi	r2,r2,64
   80af0:	10bfffcc 	andi	r2,r2,65535
   80af4:	10a0001c 	xori	r2,r2,32768
   80af8:	10a00004 	addi	r2,r2,-32768
   80afc:	10000226 	beq	r2,zero,80b08 <___vfprintf_internal_r+0x53c>
   80b00:	00bfffc4 	movi	r2,-1
   80b04:	d8812c15 	stw	r2,1200(sp)
   80b08:	d8812c17 	ldw	r2,1200(sp)
   80b0c:	dfc14617 	ldw	ra,1304(sp)
   80b10:	df014517 	ldw	fp,1300(sp)
   80b14:	ddc14417 	ldw	r23,1296(sp)
   80b18:	dd814317 	ldw	r22,1292(sp)
   80b1c:	dd414217 	ldw	r21,1288(sp)
   80b20:	dd014117 	ldw	r20,1284(sp)
   80b24:	dcc14017 	ldw	r19,1280(sp)
   80b28:	dc813f17 	ldw	r18,1276(sp)
   80b2c:	dc413e17 	ldw	r17,1272(sp)
   80b30:	dc013d17 	ldw	r16,1268(sp)
   80b34:	dec14704 	addi	sp,sp,1308
   80b38:	f800283a 	ret
   80b3c:	d9412917 	ldw	r5,1188(sp)
   80b40:	8809883a 	mov	r4,r17
   80b44:	d9811b04 	addi	r6,sp,1132
   80b48:	00805980 	call	80598 <__sprint_r>
   80b4c:	103fe51e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   80b50:	da400404 	addi	r9,sp,16
   80b54:	003eea06 	br	80700 <___vfprintf_internal_r+0x134>
   80b58:	00840f40 	call	840f4 <__sinit>
   80b5c:	003eb306 	br	8062c <___vfprintf_internal_r+0x60>
   80b60:	e013883a 	mov	r9,fp
   80b64:	84000414 	ori	r16,r16,16
   80b68:	1839883a 	mov	fp,r3
   80b6c:	8080080c 	andi	r2,r16,32
   80b70:	10034426 	beq	r2,zero,81884 <___vfprintf_internal_r+0x12b8>
   80b74:	d8c12d17 	ldw	r3,1204(sp)
   80b78:	18800117 	ldw	r2,4(r3)
   80b7c:	1dc00017 	ldw	r23,0(r3)
   80b80:	18c00204 	addi	r3,r3,8
   80b84:	d8c12d15 	stw	r3,1204(sp)
   80b88:	102d883a 	mov	r22,r2
   80b8c:	1003020e 	bge	r2,zero,81798 <___vfprintf_internal_r+0x11cc>
   80b90:	05efc83a 	sub	r23,zero,r23
   80b94:	b804c03a 	cmpne	r2,r23,zero
   80b98:	05adc83a 	sub	r22,zero,r22
   80b9c:	b0adc83a 	sub	r22,r22,r2
   80ba0:	00800b44 	movi	r2,45
   80ba4:	d8812585 	stb	r2,1174(sp)
   80ba8:	00c00044 	movi	r3,1
   80bac:	bd84b03a 	or	r2,r23,r22
   80bb0:	e0000216 	blt	fp,zero,80bbc <___vfprintf_internal_r+0x5f0>
   80bb4:	013fdfc4 	movi	r4,-129
   80bb8:	8120703a 	and	r16,r16,r4
   80bbc:	1001cc1e 	bne	r2,zero,812f0 <___vfprintf_internal_r+0xd24>
   80bc0:	e001cb1e 	bne	fp,zero,812f0 <___vfprintf_internal_r+0xd24>
   80bc4:	18c03fcc 	andi	r3,r3,255
   80bc8:	1802ca1e 	bne	r3,zero,816f4 <___vfprintf_internal_r+0x1128>
   80bcc:	8080004c 	andi	r2,r16,1
   80bd0:	1002c826 	beq	r2,zero,816f4 <___vfprintf_internal_r+0x1128>
   80bd4:	d8c13917 	ldw	r3,1252(sp)
   80bd8:	00800c04 	movi	r2,48
   80bdc:	d8810dc5 	stb	r2,1079(sp)
   80be0:	d8c12b15 	stw	r3,1196(sp)
   80be4:	dcc10dc4 	addi	r19,sp,1079
   80be8:	d8812b17 	ldw	r2,1196(sp)
   80bec:	d8812815 	stw	r2,1184(sp)
   80bf0:	1700010e 	bge	r2,fp,80bf8 <___vfprintf_internal_r+0x62c>
   80bf4:	df012815 	stw	fp,1184(sp)
   80bf8:	d8812583 	ldbu	r2,1174(sp)
   80bfc:	df013115 	stw	fp,1220(sp)
   80c00:	10803fcc 	andi	r2,r2,255
   80c04:	1080201c 	xori	r2,r2,128
   80c08:	10bfe004 	addi	r2,r2,-128
   80c0c:	103ed726 	beq	r2,zero,8076c <___vfprintf_internal_r+0x1a0>
   80c10:	d8c12817 	ldw	r3,1184(sp)
   80c14:	18c00044 	addi	r3,r3,1
   80c18:	d8c12815 	stw	r3,1184(sp)
   80c1c:	003ed306 	br	8076c <___vfprintf_internal_r+0x1a0>
   80c20:	8080020c 	andi	r2,r16,8
   80c24:	e013883a 	mov	r9,fp
   80c28:	1839883a 	mov	fp,r3
   80c2c:	1003a626 	beq	r2,zero,81ac8 <___vfprintf_internal_r+0x14fc>
   80c30:	d9012d17 	ldw	r4,1204(sp)
   80c34:	25800017 	ldw	r22,0(r4)
   80c38:	25000117 	ldw	r20,4(r4)
   80c3c:	21000204 	addi	r4,r4,8
   80c40:	d9012d15 	stw	r4,1204(sp)
   80c44:	dd813315 	stw	r22,1228(sp)
   80c48:	dd013415 	stw	r20,1232(sp)
   80c4c:	b009883a 	mov	r4,r22
   80c50:	a00b883a 	mov	r5,r20
   80c54:	da413c15 	stw	r9,1264(sp)
   80c58:	00872800 	call	87280 <__isinfd>
   80c5c:	da413c17 	ldw	r9,1264(sp)
   80c60:	b009883a 	mov	r4,r22
   80c64:	a00b883a 	mov	r5,r20
   80c68:	10041d26 	beq	r2,zero,81ce0 <___vfprintf_internal_r+0x1714>
   80c6c:	000d883a 	mov	r6,zero
   80c70:	000f883a 	mov	r7,zero
   80c74:	00890e00 	call	890e0 <__ltdf2>
   80c78:	da413c17 	ldw	r9,1264(sp)
   80c7c:	1004da16 	blt	r2,zero,81fe8 <___vfprintf_internal_r+0x1a1c>
   80c80:	d8812583 	ldbu	r2,1174(sp)
   80c84:	00c011c4 	movi	r3,71
   80c88:	1c83d116 	blt	r3,r18,81bd0 <___vfprintf_internal_r+0x1604>
   80c8c:	04c00274 	movhi	r19,9
   80c90:	9cf12f04 	addi	r19,r19,-15172
   80c94:	00c000c4 	movi	r3,3
   80c98:	d8c12815 	stw	r3,1184(sp)
   80c9c:	00ffdfc4 	movi	r3,-129
   80ca0:	80e0703a 	and	r16,r16,r3
   80ca4:	d8c12817 	ldw	r3,1184(sp)
   80ca8:	d8013115 	stw	zero,1220(sp)
   80cac:	d8c12b15 	stw	r3,1196(sp)
   80cb0:	003fd306 	br	80c00 <___vfprintf_internal_r+0x634>
   80cb4:	84000214 	ori	r16,r16,8
   80cb8:	ac800007 	ldb	r18,0(r21)
   80cbc:	003e9f06 	br	8073c <___vfprintf_internal_r+0x170>
   80cc0:	e013883a 	mov	r9,fp
   80cc4:	84000414 	ori	r16,r16,16
   80cc8:	1839883a 	mov	fp,r3
   80ccc:	8080080c 	andi	r2,r16,32
   80cd0:	10031d26 	beq	r2,zero,81948 <___vfprintf_internal_r+0x137c>
   80cd4:	d8812d17 	ldw	r2,1204(sp)
   80cd8:	0007883a 	mov	r3,zero
   80cdc:	15c00017 	ldw	r23,0(r2)
   80ce0:	15800117 	ldw	r22,4(r2)
   80ce4:	10800204 	addi	r2,r2,8
   80ce8:	d8812d15 	stw	r2,1204(sp)
   80cec:	d8012585 	stb	zero,1174(sp)
   80cf0:	bd84b03a 	or	r2,r23,r22
   80cf4:	003fae06 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   80cf8:	e013883a 	mov	r9,fp
   80cfc:	84000414 	ori	r16,r16,16
   80d00:	1839883a 	mov	fp,r3
   80d04:	8080080c 	andi	r2,r16,32
   80d08:	1002e726 	beq	r2,zero,818a8 <___vfprintf_internal_r+0x12dc>
   80d0c:	d8c12d17 	ldw	r3,1204(sp)
   80d10:	d9012d17 	ldw	r4,1204(sp)
   80d14:	1dc00017 	ldw	r23,0(r3)
   80d18:	1d800117 	ldw	r22,4(r3)
   80d1c:	21000204 	addi	r4,r4,8
   80d20:	00c00044 	movi	r3,1
   80d24:	d9012d15 	stw	r4,1204(sp)
   80d28:	bd84b03a 	or	r2,r23,r22
   80d2c:	d8012585 	stb	zero,1174(sp)
   80d30:	003f9f06 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   80d34:	e013883a 	mov	r9,fp
   80d38:	1839883a 	mov	fp,r3
   80d3c:	00c00274 	movhi	r3,9
   80d40:	18f13304 	addi	r3,r3,-15156
   80d44:	d8c13615 	stw	r3,1240(sp)
   80d48:	8080080c 	andi	r2,r16,32
   80d4c:	10007726 	beq	r2,zero,80f2c <___vfprintf_internal_r+0x960>
   80d50:	d9012d17 	ldw	r4,1204(sp)
   80d54:	25c00017 	ldw	r23,0(r4)
   80d58:	25800117 	ldw	r22,4(r4)
   80d5c:	21000204 	addi	r4,r4,8
   80d60:	d9012d15 	stw	r4,1204(sp)
   80d64:	8080004c 	andi	r2,r16,1
   80d68:	1002c226 	beq	r2,zero,81874 <___vfprintf_internal_r+0x12a8>
   80d6c:	bd84b03a 	or	r2,r23,r22
   80d70:	10035d26 	beq	r2,zero,81ae8 <___vfprintf_internal_r+0x151c>
   80d74:	00c00c04 	movi	r3,48
   80d78:	d8c12505 	stb	r3,1172(sp)
   80d7c:	dc812545 	stb	r18,1173(sp)
   80d80:	84000094 	ori	r16,r16,2
   80d84:	00c00084 	movi	r3,2
   80d88:	d8012585 	stb	zero,1174(sp)
   80d8c:	003f8806 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   80d90:	ac800007 	ldb	r18,0(r21)
   80d94:	00c00a84 	movi	r3,42
   80d98:	adc00044 	addi	r23,r21,1
   80d9c:	90c57526 	beq	r18,r3,82374 <___vfprintf_internal_r+0x1da8>
   80da0:	95bff404 	addi	r22,r18,-48
   80da4:	0009883a 	mov	r4,zero
   80da8:	9d84ff36 	bltu	r19,r22,821a8 <___vfprintf_internal_r+0x1bdc>
   80dac:	01400284 	movi	r5,10
   80db0:	00895300 	call	89530 <__mulsi3>
   80db4:	bc800007 	ldb	r18,0(r23)
   80db8:	b089883a 	add	r4,r22,r2
   80dbc:	bdc00044 	addi	r23,r23,1
   80dc0:	95bff404 	addi	r22,r18,-48
   80dc4:	9dbff92e 	bgeu	r19,r22,80dac <___vfprintf_internal_r+0x7e0>
   80dc8:	2007883a 	mov	r3,r4
   80dcc:	20044316 	blt	r4,zero,81edc <___vfprintf_internal_r+0x1910>
   80dd0:	b82b883a 	mov	r21,r23
   80dd4:	003e5a06 	br	80740 <___vfprintf_internal_r+0x174>
   80dd8:	ac800007 	ldb	r18,0(r21)
   80ddc:	01001b04 	movi	r4,108
   80de0:	a805883a 	mov	r2,r21
   80de4:	91045526 	beq	r18,r4,81f3c <___vfprintf_internal_r+0x1970>
   80de8:	84000414 	ori	r16,r16,16
   80dec:	003e5306 	br	8073c <___vfprintf_internal_r+0x170>
   80df0:	8080080c 	andi	r2,r16,32
   80df4:	e013883a 	mov	r9,fp
   80df8:	10034026 	beq	r2,zero,81afc <___vfprintf_internal_r+0x1530>
   80dfc:	d9012d17 	ldw	r4,1204(sp)
   80e00:	20800017 	ldw	r2,0(r4)
   80e04:	d9012c17 	ldw	r4,1200(sp)
   80e08:	2007d7fa 	srai	r3,r4,31
   80e0c:	d9012d17 	ldw	r4,1204(sp)
   80e10:	10c00115 	stw	r3,4(r2)
   80e14:	21000104 	addi	r4,r4,4
   80e18:	d9012d15 	stw	r4,1204(sp)
   80e1c:	d9012c17 	ldw	r4,1200(sp)
   80e20:	11000015 	stw	r4,0(r2)
   80e24:	003e1f06 	br	806a4 <___vfprintf_internal_r+0xd8>
   80e28:	d9012d17 	ldw	r4,1204(sp)
   80e2c:	21000017 	ldw	r4,0(r4)
   80e30:	d9012e15 	stw	r4,1208(sp)
   80e34:	d9012d17 	ldw	r4,1204(sp)
   80e38:	20800104 	addi	r2,r4,4
   80e3c:	d9012e17 	ldw	r4,1208(sp)
   80e40:	203ee716 	blt	r4,zero,809e0 <___vfprintf_internal_r+0x414>
   80e44:	d8812d15 	stw	r2,1204(sp)
   80e48:	ac800007 	ldb	r18,0(r21)
   80e4c:	003e3b06 	br	8073c <___vfprintf_internal_r+0x170>
   80e50:	e013883a 	mov	r9,fp
   80e54:	1839883a 	mov	fp,r3
   80e58:	d8c12d17 	ldw	r3,1204(sp)
   80e5c:	00800c04 	movi	r2,48
   80e60:	01000274 	movhi	r4,9
   80e64:	21313804 	addi	r4,r4,-15136
   80e68:	1dc00017 	ldw	r23,0(r3)
   80e6c:	18c00104 	addi	r3,r3,4
   80e70:	d8812505 	stb	r2,1172(sp)
   80e74:	00801e04 	movi	r2,120
   80e78:	d8812545 	stb	r2,1173(sp)
   80e7c:	d8c12d15 	stw	r3,1204(sp)
   80e80:	002d883a 	mov	r22,zero
   80e84:	84000094 	ori	r16,r16,2
   80e88:	d9013615 	stw	r4,1240(sp)
   80e8c:	00c00084 	movi	r3,2
   80e90:	04801e04 	movi	r18,120
   80e94:	b805883a 	mov	r2,r23
   80e98:	d8012585 	stb	zero,1174(sp)
   80e9c:	003f4406 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   80ea0:	84000814 	ori	r16,r16,32
   80ea4:	ac800007 	ldb	r18,0(r21)
   80ea8:	003e2406 	br	8073c <___vfprintf_internal_r+0x170>
   80eac:	d8812d17 	ldw	r2,1204(sp)
   80eb0:	d8012585 	stb	zero,1174(sp)
   80eb4:	e013883a 	mov	r9,fp
   80eb8:	14c00017 	ldw	r19,0(r2)
   80ebc:	1839883a 	mov	fp,r3
   80ec0:	15c00104 	addi	r23,r2,4
   80ec4:	98045526 	beq	r19,zero,8201c <___vfprintf_internal_r+0x1a50>
   80ec8:	9809883a 	mov	r4,r19
   80ecc:	18043116 	blt	r3,zero,81f94 <___vfprintf_internal_r+0x19c8>
   80ed0:	000b883a 	mov	r5,zero
   80ed4:	180d883a 	mov	r6,r3
   80ed8:	da413c15 	stw	r9,1264(sp)
   80edc:	00857940 	call	85794 <memchr>
   80ee0:	da413c17 	ldw	r9,1264(sp)
   80ee4:	10047a26 	beq	r2,zero,820d0 <___vfprintf_internal_r+0x1b04>
   80ee8:	14c5c83a 	sub	r2,r2,r19
   80eec:	d8812b15 	stw	r2,1196(sp)
   80ef0:	e083d40e 	bge	fp,r2,81e44 <___vfprintf_internal_r+0x1878>
   80ef4:	df012815 	stw	fp,1184(sp)
   80ef8:	e004e416 	blt	fp,zero,8228c <___vfprintf_internal_r+0x1cc0>
   80efc:	d8812583 	ldbu	r2,1174(sp)
   80f00:	df012b15 	stw	fp,1196(sp)
   80f04:	ddc12d15 	stw	r23,1204(sp)
   80f08:	d8013115 	stw	zero,1220(sp)
   80f0c:	003f3c06 	br	80c00 <___vfprintf_internal_r+0x634>
   80f10:	00800274 	movhi	r2,9
   80f14:	10b13804 	addi	r2,r2,-15136
   80f18:	d8813615 	stw	r2,1240(sp)
   80f1c:	8080080c 	andi	r2,r16,32
   80f20:	e013883a 	mov	r9,fp
   80f24:	1839883a 	mov	fp,r3
   80f28:	103f891e 	bne	r2,zero,80d50 <___vfprintf_internal_r+0x784>
   80f2c:	8080040c 	andi	r2,r16,16
   80f30:	1002c326 	beq	r2,zero,81a40 <___vfprintf_internal_r+0x1474>
   80f34:	d8812d17 	ldw	r2,1204(sp)
   80f38:	002d883a 	mov	r22,zero
   80f3c:	15c00017 	ldw	r23,0(r2)
   80f40:	10800104 	addi	r2,r2,4
   80f44:	d8812d15 	stw	r2,1204(sp)
   80f48:	003f8606 	br	80d64 <___vfprintf_internal_r+0x798>
   80f4c:	84001014 	ori	r16,r16,64
   80f50:	ac800007 	ldb	r18,0(r21)
   80f54:	003df906 	br	8073c <___vfprintf_internal_r+0x170>
   80f58:	d8812587 	ldb	r2,1174(sp)
   80f5c:	1002e51e 	bne	r2,zero,81af4 <___vfprintf_internal_r+0x1528>
   80f60:	00800804 	movi	r2,32
   80f64:	d8812585 	stb	r2,1174(sp)
   80f68:	ac800007 	ldb	r18,0(r21)
   80f6c:	003df306 	br	8073c <___vfprintf_internal_r+0x170>
   80f70:	84000054 	ori	r16,r16,1
   80f74:	ac800007 	ldb	r18,0(r21)
   80f78:	003df006 	br	8073c <___vfprintf_internal_r+0x170>
   80f7c:	84002014 	ori	r16,r16,128
   80f80:	ac800007 	ldb	r18,0(r21)
   80f84:	003ded06 	br	8073c <___vfprintf_internal_r+0x170>
   80f88:	0009883a 	mov	r4,zero
   80f8c:	95bff404 	addi	r22,r18,-48
   80f90:	182f883a 	mov	r23,r3
   80f94:	01400284 	movi	r5,10
   80f98:	00895300 	call	89530 <__mulsi3>
   80f9c:	ac800007 	ldb	r18,0(r21)
   80fa0:	1589883a 	add	r4,r2,r22
   80fa4:	ad400044 	addi	r21,r21,1
   80fa8:	95bff404 	addi	r22,r18,-48
   80fac:	9dbff92e 	bgeu	r19,r22,80f94 <___vfprintf_internal_r+0x9c8>
   80fb0:	b807883a 	mov	r3,r23
   80fb4:	d9012e15 	stw	r4,1208(sp)
   80fb8:	003de106 	br	80740 <___vfprintf_internal_r+0x174>
   80fbc:	00800ac4 	movi	r2,43
   80fc0:	d8812585 	stb	r2,1174(sp)
   80fc4:	ac800007 	ldb	r18,0(r21)
   80fc8:	003ddc06 	br	8073c <___vfprintf_internal_r+0x170>
   80fcc:	d8c12d17 	ldw	r3,1204(sp)
   80fd0:	d9012d17 	ldw	r4,1204(sp)
   80fd4:	e013883a 	mov	r9,fp
   80fd8:	18800017 	ldw	r2,0(r3)
   80fdc:	21000104 	addi	r4,r4,4
   80fe0:	00c00044 	movi	r3,1
   80fe4:	d8c12815 	stw	r3,1184(sp)
   80fe8:	d8012585 	stb	zero,1174(sp)
   80fec:	d8810405 	stb	r2,1040(sp)
   80ff0:	d9012d15 	stw	r4,1204(sp)
   80ff4:	d8c12b15 	stw	r3,1196(sp)
   80ff8:	dcc10404 	addi	r19,sp,1040
   80ffc:	003dda06 	br	80768 <___vfprintf_internal_r+0x19c>
   81000:	e013883a 	mov	r9,fp
   81004:	1839883a 	mov	fp,r3
   81008:	003ed806 	br	80b6c <___vfprintf_internal_r+0x5a0>
   8100c:	e013883a 	mov	r9,fp
   81010:	1839883a 	mov	fp,r3
   81014:	003f2d06 	br	80ccc <___vfprintf_internal_r+0x700>
   81018:	e013883a 	mov	r9,fp
   8101c:	1839883a 	mov	fp,r3
   81020:	003f3806 	br	80d04 <___vfprintf_internal_r+0x738>
   81024:	da011d17 	ldw	r8,1140(sp)
   81028:	d8c11c17 	ldw	r3,1136(sp)
   8102c:	d8812587 	ldb	r2,1174(sp)
   81030:	10000b26 	beq	r2,zero,81060 <___vfprintf_internal_r+0xa94>
   81034:	d8812584 	addi	r2,sp,1174
   81038:	48800015 	stw	r2,0(r9)
   8103c:	00800044 	movi	r2,1
   81040:	48800115 	stw	r2,4(r9)
   81044:	4091883a 	add	r8,r8,r2
   81048:	1887883a 	add	r3,r3,r2
   8104c:	da011d15 	stw	r8,1140(sp)
   81050:	d8c11c15 	stw	r3,1136(sp)
   81054:	008001c4 	movi	r2,7
   81058:	10c18e16 	blt	r2,r3,81694 <___vfprintf_internal_r+0x10c8>
   8105c:	4a400204 	addi	r9,r9,8
   81060:	d9012a17 	ldw	r4,1192(sp)
   81064:	20000b26 	beq	r4,zero,81094 <___vfprintf_internal_r+0xac8>
   81068:	d8812504 	addi	r2,sp,1172
   8106c:	48800015 	stw	r2,0(r9)
   81070:	00800084 	movi	r2,2
   81074:	48800115 	stw	r2,4(r9)
   81078:	4091883a 	add	r8,r8,r2
   8107c:	18c00044 	addi	r3,r3,1
   81080:	da011d15 	stw	r8,1140(sp)
   81084:	d8c11c15 	stw	r3,1136(sp)
   81088:	008001c4 	movi	r2,7
   8108c:	10c17816 	blt	r2,r3,81670 <___vfprintf_internal_r+0x10a4>
   81090:	4a400204 	addi	r9,r9,8
   81094:	d9012f17 	ldw	r4,1212(sp)
   81098:	00802004 	movi	r2,128
   8109c:	2080fc26 	beq	r4,r2,81490 <___vfprintf_internal_r+0xec4>
   810a0:	d8813117 	ldw	r2,1220(sp)
   810a4:	d9012b17 	ldw	r4,1196(sp)
   810a8:	112fc83a 	sub	r23,r2,r4
   810ac:	05c02a0e 	bge	zero,r23,81158 <___vfprintf_internal_r+0xb8c>
   810b0:	07000404 	movi	fp,16
   810b4:	05000274 	movhi	r20,9
   810b8:	a5314384 	addi	r20,r20,-15090
   810bc:	e5c01d0e 	bge	fp,r23,81134 <___vfprintf_internal_r+0xb68>
   810c0:	dc812a15 	stw	r18,1192(sp)
   810c4:	058001c4 	movi	r22,7
   810c8:	a025883a 	mov	r18,r20
   810cc:	8029883a 	mov	r20,r16
   810d0:	dc012917 	ldw	r16,1188(sp)
   810d4:	00000306 	br	810e4 <___vfprintf_internal_r+0xb18>
   810d8:	bdfffc04 	addi	r23,r23,-16
   810dc:	4a400204 	addi	r9,r9,8
   810e0:	e5c0110e 	bge	fp,r23,81128 <___vfprintf_internal_r+0xb5c>
   810e4:	4c800015 	stw	r18,0(r9)
   810e8:	4f000115 	stw	fp,4(r9)
   810ec:	42000404 	addi	r8,r8,16
   810f0:	18c00044 	addi	r3,r3,1
   810f4:	da011d15 	stw	r8,1140(sp)
   810f8:	d8c11c15 	stw	r3,1136(sp)
   810fc:	b0fff60e 	bge	r22,r3,810d8 <___vfprintf_internal_r+0xb0c>
   81100:	8809883a 	mov	r4,r17
   81104:	800b883a 	mov	r5,r16
   81108:	d9811b04 	addi	r6,sp,1132
   8110c:	00805980 	call	80598 <__sprint_r>
   81110:	103e741e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81114:	bdfffc04 	addi	r23,r23,-16
   81118:	da011d17 	ldw	r8,1140(sp)
   8111c:	d8c11c17 	ldw	r3,1136(sp)
   81120:	da400404 	addi	r9,sp,16
   81124:	e5ffef16 	blt	fp,r23,810e4 <___vfprintf_internal_r+0xb18>
   81128:	a021883a 	mov	r16,r20
   8112c:	9029883a 	mov	r20,r18
   81130:	dc812a17 	ldw	r18,1192(sp)
   81134:	4d000015 	stw	r20,0(r9)
   81138:	4dc00115 	stw	r23,4(r9)
   8113c:	45d1883a 	add	r8,r8,r23
   81140:	18c00044 	addi	r3,r3,1
   81144:	da011d15 	stw	r8,1140(sp)
   81148:	d8c11c15 	stw	r3,1136(sp)
   8114c:	008001c4 	movi	r2,7
   81150:	10c13e16 	blt	r2,r3,8164c <___vfprintf_internal_r+0x1080>
   81154:	4a400204 	addi	r9,r9,8
   81158:	8080400c 	andi	r2,r16,256
   8115c:	1000831e 	bne	r2,zero,8136c <___vfprintf_internal_r+0xda0>
   81160:	d8812b17 	ldw	r2,1196(sp)
   81164:	4cc00015 	stw	r19,0(r9)
   81168:	48800115 	stw	r2,4(r9)
   8116c:	4091883a 	add	r8,r8,r2
   81170:	18c00044 	addi	r3,r3,1
   81174:	da011d15 	stw	r8,1140(sp)
   81178:	d8c11c15 	stw	r3,1136(sp)
   8117c:	008001c4 	movi	r2,7
   81180:	10c05316 	blt	r2,r3,812d0 <___vfprintf_internal_r+0xd04>
   81184:	4a400204 	addi	r9,r9,8
   81188:	8400010c 	andi	r16,r16,4
   8118c:	80002e26 	beq	r16,zero,81248 <___vfprintf_internal_r+0xc7c>
   81190:	d8812e17 	ldw	r2,1208(sp)
   81194:	d8c12817 	ldw	r3,1184(sp)
   81198:	10e1c83a 	sub	r16,r2,r3
   8119c:	04002a0e 	bge	zero,r16,81248 <___vfprintf_internal_r+0xc7c>
   811a0:	04800404 	movi	r18,16
   811a4:	d8c11c17 	ldw	r3,1136(sp)
   811a8:	05c00274 	movhi	r23,9
   811ac:	bdf13f84 	addi	r23,r23,-15106
   811b0:	9400170e 	bge	r18,r16,81210 <___vfprintf_internal_r+0xc44>
   811b4:	04c001c4 	movi	r19,7
   811b8:	dd012917 	ldw	r20,1188(sp)
   811bc:	00000306 	br	811cc <___vfprintf_internal_r+0xc00>
   811c0:	843ffc04 	addi	r16,r16,-16
   811c4:	4a400204 	addi	r9,r9,8
   811c8:	9400110e 	bge	r18,r16,81210 <___vfprintf_internal_r+0xc44>
   811cc:	4dc00015 	stw	r23,0(r9)
   811d0:	4c800115 	stw	r18,4(r9)
   811d4:	42000404 	addi	r8,r8,16
   811d8:	18c00044 	addi	r3,r3,1
   811dc:	da011d15 	stw	r8,1140(sp)
   811e0:	d8c11c15 	stw	r3,1136(sp)
   811e4:	98fff60e 	bge	r19,r3,811c0 <___vfprintf_internal_r+0xbf4>
   811e8:	8809883a 	mov	r4,r17
   811ec:	a00b883a 	mov	r5,r20
   811f0:	d9811b04 	addi	r6,sp,1132
   811f4:	00805980 	call	80598 <__sprint_r>
   811f8:	103e3a1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   811fc:	843ffc04 	addi	r16,r16,-16
   81200:	da011d17 	ldw	r8,1140(sp)
   81204:	d8c11c17 	ldw	r3,1136(sp)
   81208:	da400404 	addi	r9,sp,16
   8120c:	943fef16 	blt	r18,r16,811cc <___vfprintf_internal_r+0xc00>
   81210:	4dc00015 	stw	r23,0(r9)
   81214:	4c000115 	stw	r16,4(r9)
   81218:	8211883a 	add	r8,r16,r8
   8121c:	18c00044 	addi	r3,r3,1
   81220:	da011d15 	stw	r8,1140(sp)
   81224:	d8c11c15 	stw	r3,1136(sp)
   81228:	008001c4 	movi	r2,7
   8122c:	10c0060e 	bge	r2,r3,81248 <___vfprintf_internal_r+0xc7c>
   81230:	d9412917 	ldw	r5,1188(sp)
   81234:	8809883a 	mov	r4,r17
   81238:	d9811b04 	addi	r6,sp,1132
   8123c:	00805980 	call	80598 <__sprint_r>
   81240:	103e281e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81244:	da011d17 	ldw	r8,1140(sp)
   81248:	dd012817 	ldw	r20,1184(sp)
   8124c:	d9012e17 	ldw	r4,1208(sp)
   81250:	a100010e 	bge	r20,r4,81258 <___vfprintf_internal_r+0xc8c>
   81254:	2029883a 	mov	r20,r4
   81258:	d8812c17 	ldw	r2,1200(sp)
   8125c:	1505883a 	add	r2,r2,r20
   81260:	d8812c15 	stw	r2,1200(sp)
   81264:	4000b91e 	bne	r8,zero,8154c <___vfprintf_internal_r+0xf80>
   81268:	d8011c15 	stw	zero,1136(sp)
   8126c:	a8800007 	ldb	r2,0(r21)
   81270:	da400404 	addi	r9,sp,16
   81274:	103d0d1e 	bne	r2,zero,806ac <___vfprintf_internal_r+0xe0>
   81278:	a825883a 	mov	r18,r21
   8127c:	003d2306 	br	8070c <___vfprintf_internal_r+0x140>
   81280:	d9412917 	ldw	r5,1188(sp)
   81284:	8809883a 	mov	r4,r17
   81288:	d9811b04 	addi	r6,sp,1132
   8128c:	00805980 	call	80598 <__sprint_r>
   81290:	103e141e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81294:	da011d17 	ldw	r8,1140(sp)
   81298:	da400404 	addi	r9,sp,16
   8129c:	8080004c 	andi	r2,r16,1
   812a0:	103fb926 	beq	r2,zero,81188 <___vfprintf_internal_r+0xbbc>
   812a4:	d8c11c17 	ldw	r3,1136(sp)
   812a8:	d9013717 	ldw	r4,1244(sp)
   812ac:	00800044 	movi	r2,1
   812b0:	48800115 	stw	r2,4(r9)
   812b4:	49000015 	stw	r4,0(r9)
   812b8:	4091883a 	add	r8,r8,r2
   812bc:	1887883a 	add	r3,r3,r2
   812c0:	da011d15 	stw	r8,1140(sp)
   812c4:	d8c11c15 	stw	r3,1136(sp)
   812c8:	008001c4 	movi	r2,7
   812cc:	10ffad0e 	bge	r2,r3,81184 <___vfprintf_internal_r+0xbb8>
   812d0:	d9412917 	ldw	r5,1188(sp)
   812d4:	8809883a 	mov	r4,r17
   812d8:	d9811b04 	addi	r6,sp,1132
   812dc:	00805980 	call	80598 <__sprint_r>
   812e0:	103e001e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   812e4:	da400404 	addi	r9,sp,16
   812e8:	da011d17 	ldw	r8,1140(sp)
   812ec:	003fa606 	br	81188 <___vfprintf_internal_r+0xbbc>
   812f0:	18803fcc 	andi	r2,r3,255
   812f4:	00c00044 	movi	r3,1
   812f8:	10c10126 	beq	r2,r3,81700 <___vfprintf_internal_r+0x1134>
   812fc:	00c00084 	movi	r3,2
   81300:	10c0ed26 	beq	r2,r3,816b8 <___vfprintf_internal_r+0x10ec>
   81304:	d8c10dc4 	addi	r3,sp,1079
   81308:	b808d0fa 	srli	r4,r23,3
   8130c:	b00a977a 	slli	r5,r22,29
   81310:	b02cd0fa 	srli	r22,r22,3
   81314:	bdc001cc 	andi	r23,r23,7
   81318:	b8800c04 	addi	r2,r23,48
   8131c:	292eb03a 	or	r23,r5,r4
   81320:	18800005 	stb	r2,0(r3)
   81324:	bd88b03a 	or	r4,r23,r22
   81328:	1827883a 	mov	r19,r3
   8132c:	18ffffc4 	addi	r3,r3,-1
   81330:	203ff51e 	bne	r4,zero,81308 <___vfprintf_internal_r+0xd3c>
   81334:	8100004c 	andi	r4,r16,1
   81338:	980b883a 	mov	r5,r19
   8133c:	20000726 	beq	r4,zero,8135c <___vfprintf_internal_r+0xd90>
   81340:	10803fcc 	andi	r2,r2,255
   81344:	1080201c 	xori	r2,r2,128
   81348:	10bfe004 	addi	r2,r2,-128
   8134c:	01000c04 	movi	r4,48
   81350:	11000226 	beq	r2,r4,8135c <___vfprintf_internal_r+0xd90>
   81354:	1827883a 	mov	r19,r3
   81358:	293fffc5 	stb	r4,-1(r5)
   8135c:	d8812717 	ldw	r2,1180(sp)
   81360:	14c5c83a 	sub	r2,r2,r19
   81364:	d8812b15 	stw	r2,1196(sp)
   81368:	003e1f06 	br	80be8 <___vfprintf_internal_r+0x61c>
   8136c:	00801944 	movi	r2,101
   81370:	14807c0e 	bge	r2,r18,81564 <___vfprintf_internal_r+0xf98>
   81374:	d9013317 	ldw	r4,1228(sp)
   81378:	d9413417 	ldw	r5,1232(sp)
   8137c:	000d883a 	mov	r6,zero
   81380:	000f883a 	mov	r7,zero
   81384:	d8c13b15 	stw	r3,1260(sp)
   81388:	da013a15 	stw	r8,1256(sp)
   8138c:	da413c15 	stw	r9,1264(sp)
   81390:	0088f600 	call	88f60 <__eqdf2>
   81394:	d8c13b17 	ldw	r3,1260(sp)
   81398:	da013a17 	ldw	r8,1256(sp)
   8139c:	da413c17 	ldw	r9,1264(sp)
   813a0:	1001001e 	bne	r2,zero,817a4 <___vfprintf_internal_r+0x11d8>
   813a4:	00800274 	movhi	r2,9
   813a8:	10b13f04 	addi	r2,r2,-15108
   813ac:	48800015 	stw	r2,0(r9)
   813b0:	00800044 	movi	r2,1
   813b4:	48800115 	stw	r2,4(r9)
   813b8:	4091883a 	add	r8,r8,r2
   813bc:	1887883a 	add	r3,r3,r2
   813c0:	da011d15 	stw	r8,1140(sp)
   813c4:	d8c11c15 	stw	r3,1136(sp)
   813c8:	008001c4 	movi	r2,7
   813cc:	10c20316 	blt	r2,r3,81bdc <___vfprintf_internal_r+0x1610>
   813d0:	4a400204 	addi	r9,r9,8
   813d4:	d8812417 	ldw	r2,1168(sp)
   813d8:	d8c13217 	ldw	r3,1224(sp)
   813dc:	10c00216 	blt	r2,r3,813e8 <___vfprintf_internal_r+0xe1c>
   813e0:	8080004c 	andi	r2,r16,1
   813e4:	103f6826 	beq	r2,zero,81188 <___vfprintf_internal_r+0xbbc>
   813e8:	d8c11c17 	ldw	r3,1136(sp)
   813ec:	d9013717 	ldw	r4,1244(sp)
   813f0:	00800044 	movi	r2,1
   813f4:	48800115 	stw	r2,4(r9)
   813f8:	49000015 	stw	r4,0(r9)
   813fc:	4091883a 	add	r8,r8,r2
   81400:	1887883a 	add	r3,r3,r2
   81404:	da011d15 	stw	r8,1140(sp)
   81408:	d8c11c15 	stw	r3,1136(sp)
   8140c:	008001c4 	movi	r2,7
   81410:	10c2ce16 	blt	r2,r3,81f4c <___vfprintf_internal_r+0x1980>
   81414:	4a400204 	addi	r9,r9,8
   81418:	d8813217 	ldw	r2,1224(sp)
   8141c:	14bfffc4 	addi	r18,r2,-1
   81420:	04bf590e 	bge	zero,r18,81188 <___vfprintf_internal_r+0xbbc>
   81424:	04c00404 	movi	r19,16
   81428:	d8c11c17 	ldw	r3,1136(sp)
   8142c:	05000274 	movhi	r20,9
   81430:	a5314384 	addi	r20,r20,-15090
   81434:	9c818a0e 	bge	r19,r18,81a60 <___vfprintf_internal_r+0x1494>
   81438:	058001c4 	movi	r22,7
   8143c:	ddc12917 	ldw	r23,1188(sp)
   81440:	00000306 	br	81450 <___vfprintf_internal_r+0xe84>
   81444:	4a400204 	addi	r9,r9,8
   81448:	94bffc04 	addi	r18,r18,-16
   8144c:	9c81840e 	bge	r19,r18,81a60 <___vfprintf_internal_r+0x1494>
   81450:	4d000015 	stw	r20,0(r9)
   81454:	4cc00115 	stw	r19,4(r9)
   81458:	42000404 	addi	r8,r8,16
   8145c:	18c00044 	addi	r3,r3,1
   81460:	da011d15 	stw	r8,1140(sp)
   81464:	d8c11c15 	stw	r3,1136(sp)
   81468:	b0fff60e 	bge	r22,r3,81444 <___vfprintf_internal_r+0xe78>
   8146c:	8809883a 	mov	r4,r17
   81470:	b80b883a 	mov	r5,r23
   81474:	d9811b04 	addi	r6,sp,1132
   81478:	00805980 	call	80598 <__sprint_r>
   8147c:	103d991e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81480:	da011d17 	ldw	r8,1140(sp)
   81484:	d8c11c17 	ldw	r3,1136(sp)
   81488:	da400404 	addi	r9,sp,16
   8148c:	003fee06 	br	81448 <___vfprintf_internal_r+0xe7c>
   81490:	d8812e17 	ldw	r2,1208(sp)
   81494:	d9012817 	ldw	r4,1184(sp)
   81498:	112fc83a 	sub	r23,r2,r4
   8149c:	05ff000e 	bge	zero,r23,810a0 <___vfprintf_internal_r+0xad4>
   814a0:	07000404 	movi	fp,16
   814a4:	05000274 	movhi	r20,9
   814a8:	a5314384 	addi	r20,r20,-15090
   814ac:	e5c01d0e 	bge	fp,r23,81524 <___vfprintf_internal_r+0xf58>
   814b0:	dc812a15 	stw	r18,1192(sp)
   814b4:	058001c4 	movi	r22,7
   814b8:	a025883a 	mov	r18,r20
   814bc:	8029883a 	mov	r20,r16
   814c0:	dc012917 	ldw	r16,1188(sp)
   814c4:	00000306 	br	814d4 <___vfprintf_internal_r+0xf08>
   814c8:	bdfffc04 	addi	r23,r23,-16
   814cc:	4a400204 	addi	r9,r9,8
   814d0:	e5c0110e 	bge	fp,r23,81518 <___vfprintf_internal_r+0xf4c>
   814d4:	4c800015 	stw	r18,0(r9)
   814d8:	4f000115 	stw	fp,4(r9)
   814dc:	42000404 	addi	r8,r8,16
   814e0:	18c00044 	addi	r3,r3,1
   814e4:	da011d15 	stw	r8,1140(sp)
   814e8:	d8c11c15 	stw	r3,1136(sp)
   814ec:	b0fff60e 	bge	r22,r3,814c8 <___vfprintf_internal_r+0xefc>
   814f0:	8809883a 	mov	r4,r17
   814f4:	800b883a 	mov	r5,r16
   814f8:	d9811b04 	addi	r6,sp,1132
   814fc:	00805980 	call	80598 <__sprint_r>
   81500:	103d781e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81504:	bdfffc04 	addi	r23,r23,-16
   81508:	da011d17 	ldw	r8,1140(sp)
   8150c:	d8c11c17 	ldw	r3,1136(sp)
   81510:	da400404 	addi	r9,sp,16
   81514:	e5ffef16 	blt	fp,r23,814d4 <___vfprintf_internal_r+0xf08>
   81518:	a021883a 	mov	r16,r20
   8151c:	9029883a 	mov	r20,r18
   81520:	dc812a17 	ldw	r18,1192(sp)
   81524:	4d000015 	stw	r20,0(r9)
   81528:	4dc00115 	stw	r23,4(r9)
   8152c:	45d1883a 	add	r8,r8,r23
   81530:	18c00044 	addi	r3,r3,1
   81534:	da011d15 	stw	r8,1140(sp)
   81538:	d8c11c15 	stw	r3,1136(sp)
   8153c:	008001c4 	movi	r2,7
   81540:	10c13616 	blt	r2,r3,81a1c <___vfprintf_internal_r+0x1450>
   81544:	4a400204 	addi	r9,r9,8
   81548:	003ed506 	br	810a0 <___vfprintf_internal_r+0xad4>
   8154c:	d9412917 	ldw	r5,1188(sp)
   81550:	8809883a 	mov	r4,r17
   81554:	d9811b04 	addi	r6,sp,1132
   81558:	00805980 	call	80598 <__sprint_r>
   8155c:	103f4226 	beq	r2,zero,81268 <___vfprintf_internal_r+0xc9c>
   81560:	003d6006 	br	80ae4 <___vfprintf_internal_r+0x518>
   81564:	d9013217 	ldw	r4,1224(sp)
   81568:	00800044 	movi	r2,1
   8156c:	4cc00015 	stw	r19,0(r9)
   81570:	1101000e 	bge	r2,r4,81974 <___vfprintf_internal_r+0x13a8>
   81574:	00800044 	movi	r2,1
   81578:	48800115 	stw	r2,4(r9)
   8157c:	4091883a 	add	r8,r8,r2
   81580:	1887883a 	add	r3,r3,r2
   81584:	da011d15 	stw	r8,1140(sp)
   81588:	d8c11c15 	stw	r3,1136(sp)
   8158c:	008001c4 	movi	r2,7
   81590:	10c10c16 	blt	r2,r3,819c4 <___vfprintf_internal_r+0x13f8>
   81594:	4a400204 	addi	r9,r9,8
   81598:	d8813717 	ldw	r2,1244(sp)
   8159c:	48800015 	stw	r2,0(r9)
   815a0:	00800044 	movi	r2,1
   815a4:	48800115 	stw	r2,4(r9)
   815a8:	4091883a 	add	r8,r8,r2
   815ac:	1887883a 	add	r3,r3,r2
   815b0:	da011d15 	stw	r8,1140(sp)
   815b4:	d8c11c15 	stw	r3,1136(sp)
   815b8:	008001c4 	movi	r2,7
   815bc:	10c10a16 	blt	r2,r3,819e8 <___vfprintf_internal_r+0x141c>
   815c0:	4c800204 	addi	r18,r9,8
   815c4:	d9013317 	ldw	r4,1228(sp)
   815c8:	d9413417 	ldw	r5,1232(sp)
   815cc:	000d883a 	mov	r6,zero
   815d0:	000f883a 	mov	r7,zero
   815d4:	d8c13b15 	stw	r3,1260(sp)
   815d8:	da013a15 	stw	r8,1256(sp)
   815dc:	0088fbc0 	call	88fbc <__nedf2>
   815e0:	d8c13b17 	ldw	r3,1260(sp)
   815e4:	da013a17 	ldw	r8,1256(sp)
   815e8:	1000ba26 	beq	r2,zero,818d4 <___vfprintf_internal_r+0x1308>
   815ec:	d9013217 	ldw	r4,1224(sp)
   815f0:	9cc00044 	addi	r19,r19,1
   815f4:	94c00015 	stw	r19,0(r18)
   815f8:	20bfffc4 	addi	r2,r4,-1
   815fc:	90800115 	stw	r2,4(r18)
   81600:	4091883a 	add	r8,r8,r2
   81604:	18c00044 	addi	r3,r3,1
   81608:	da011d15 	stw	r8,1140(sp)
   8160c:	d8c11c15 	stw	r3,1136(sp)
   81610:	008001c4 	movi	r2,7
   81614:	10c0e216 	blt	r2,r3,819a0 <___vfprintf_internal_r+0x13d4>
   81618:	94800204 	addi	r18,r18,8
   8161c:	d9013517 	ldw	r4,1236(sp)
   81620:	d8811fc4 	addi	r2,sp,1151
   81624:	90800015 	stw	r2,0(r18)
   81628:	91000115 	stw	r4,4(r18)
   8162c:	4111883a 	add	r8,r8,r4
   81630:	18c00044 	addi	r3,r3,1
   81634:	da011d15 	stw	r8,1140(sp)
   81638:	d8c11c15 	stw	r3,1136(sp)
   8163c:	008001c4 	movi	r2,7
   81640:	10ff2316 	blt	r2,r3,812d0 <___vfprintf_internal_r+0xd04>
   81644:	92400204 	addi	r9,r18,8
   81648:	003ecf06 	br	81188 <___vfprintf_internal_r+0xbbc>
   8164c:	d9412917 	ldw	r5,1188(sp)
   81650:	8809883a 	mov	r4,r17
   81654:	d9811b04 	addi	r6,sp,1132
   81658:	00805980 	call	80598 <__sprint_r>
   8165c:	103d211e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81660:	da011d17 	ldw	r8,1140(sp)
   81664:	d8c11c17 	ldw	r3,1136(sp)
   81668:	da400404 	addi	r9,sp,16
   8166c:	003eba06 	br	81158 <___vfprintf_internal_r+0xb8c>
   81670:	d9412917 	ldw	r5,1188(sp)
   81674:	8809883a 	mov	r4,r17
   81678:	d9811b04 	addi	r6,sp,1132
   8167c:	00805980 	call	80598 <__sprint_r>
   81680:	103d181e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81684:	da011d17 	ldw	r8,1140(sp)
   81688:	d8c11c17 	ldw	r3,1136(sp)
   8168c:	da400404 	addi	r9,sp,16
   81690:	003e8006 	br	81094 <___vfprintf_internal_r+0xac8>
   81694:	d9412917 	ldw	r5,1188(sp)
   81698:	8809883a 	mov	r4,r17
   8169c:	d9811b04 	addi	r6,sp,1132
   816a0:	00805980 	call	80598 <__sprint_r>
   816a4:	103d0f1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   816a8:	da011d17 	ldw	r8,1140(sp)
   816ac:	d8c11c17 	ldw	r3,1136(sp)
   816b0:	da400404 	addi	r9,sp,16
   816b4:	003e6a06 	br	81060 <___vfprintf_internal_r+0xa94>
   816b8:	d9413617 	ldw	r5,1240(sp)
   816bc:	d8810dc4 	addi	r2,sp,1079
   816c0:	b8c003cc 	andi	r3,r23,15
   816c4:	b008973a 	slli	r4,r22,28
   816c8:	28c7883a 	add	r3,r5,r3
   816cc:	b82ed13a 	srli	r23,r23,4
   816d0:	18c00003 	ldbu	r3,0(r3)
   816d4:	b02cd13a 	srli	r22,r22,4
   816d8:	25eeb03a 	or	r23,r4,r23
   816dc:	10c00005 	stb	r3,0(r2)
   816e0:	bd86b03a 	or	r3,r23,r22
   816e4:	1027883a 	mov	r19,r2
   816e8:	10bfffc4 	addi	r2,r2,-1
   816ec:	183ff41e 	bne	r3,zero,816c0 <___vfprintf_internal_r+0x10f4>
   816f0:	003f1a06 	br	8135c <___vfprintf_internal_r+0xd90>
   816f4:	d8012b15 	stw	zero,1196(sp)
   816f8:	dcc10e04 	addi	r19,sp,1080
   816fc:	003d3a06 	br	80be8 <___vfprintf_internal_r+0x61c>
   81700:	b0025426 	beq	r22,zero,82054 <___vfprintf_internal_r+0x1a88>
   81704:	b807883a 	mov	r3,r23
   81708:	d8810dc4 	addi	r2,sp,1079
   8170c:	882f883a 	mov	r23,r17
   81710:	04c00244 	movi	r19,9
   81714:	8023883a 	mov	r17,r16
   81718:	da412815 	stw	r9,1184(sp)
   8171c:	1821883a 	mov	r16,r3
   81720:	8009883a 	mov	r4,r16
   81724:	b00b883a 	mov	r5,r22
   81728:	01800284 	movi	r6,10
   8172c:	000f883a 	mov	r7,zero
   81730:	1029883a 	mov	r20,r2
   81734:	00880980 	call	88098 <__umoddi3>
   81738:	10800c04 	addi	r2,r2,48
   8173c:	8009883a 	mov	r4,r16
   81740:	b00b883a 	mov	r5,r22
   81744:	a0800005 	stb	r2,0(r20)
   81748:	01800284 	movi	r6,10
   8174c:	000f883a 	mov	r7,zero
   81750:	0087a480 	call	87a48 <__udivdi3>
   81754:	1021883a 	mov	r16,r2
   81758:	182d883a 	mov	r22,r3
   8175c:	a0bfffc4 	addi	r2,r20,-1
   81760:	183fef1e 	bne	r3,zero,81720 <___vfprintf_internal_r+0x1154>
   81764:	9c3fee36 	bltu	r19,r16,81720 <___vfprintf_internal_r+0x1154>
   81768:	da412817 	ldw	r9,1184(sp)
   8176c:	8005883a 	mov	r2,r16
   81770:	8821883a 	mov	r16,r17
   81774:	b823883a 	mov	r17,r23
   81778:	102f883a 	mov	r23,r2
   8177c:	d8812717 	ldw	r2,1180(sp)
   81780:	a4ffffc4 	addi	r19,r20,-1
   81784:	bdc00c04 	addi	r23,r23,48
   81788:	14c5c83a 	sub	r2,r2,r19
   8178c:	a5ffffc5 	stb	r23,-1(r20)
   81790:	d8812b15 	stw	r2,1196(sp)
   81794:	003d1406 	br	80be8 <___vfprintf_internal_r+0x61c>
   81798:	00c00044 	movi	r3,1
   8179c:	bd84b03a 	or	r2,r23,r22
   817a0:	003d0306 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   817a4:	dc812417 	ldw	r18,1168(sp)
   817a8:	0481140e 	bge	zero,r18,81bfc <___vfprintf_internal_r+0x1630>
   817ac:	d9013217 	ldw	r4,1224(sp)
   817b0:	4cc00015 	stw	r19,0(r9)
   817b4:	9100ec16 	blt	r18,r4,81b68 <___vfprintf_internal_r+0x159c>
   817b8:	49000115 	stw	r4,4(r9)
   817bc:	4111883a 	add	r8,r8,r4
   817c0:	18c00044 	addi	r3,r3,1
   817c4:	da011d15 	stw	r8,1140(sp)
   817c8:	d8c11c15 	stw	r3,1136(sp)
   817cc:	008001c4 	movi	r2,7
   817d0:	10c23616 	blt	r2,r3,820ac <___vfprintf_internal_r+0x1ae0>
   817d4:	4a400204 	addi	r9,r9,8
   817d8:	d8813217 	ldw	r2,1224(sp)
   817dc:	90a5c83a 	sub	r18,r18,r2
   817e0:	04beae0e 	bge	zero,r18,8129c <___vfprintf_internal_r+0xcd0>
   817e4:	04c00404 	movi	r19,16
   817e8:	d8c11c17 	ldw	r3,1136(sp)
   817ec:	05000274 	movhi	r20,9
   817f0:	a5314384 	addi	r20,r20,-15090
   817f4:	9c81dd0e 	bge	r19,r18,81f6c <___vfprintf_internal_r+0x19a0>
   817f8:	058001c4 	movi	r22,7
   817fc:	ddc12917 	ldw	r23,1188(sp)
   81800:	00000306 	br	81810 <___vfprintf_internal_r+0x1244>
   81804:	4a400204 	addi	r9,r9,8
   81808:	94bffc04 	addi	r18,r18,-16
   8180c:	9c81d70e 	bge	r19,r18,81f6c <___vfprintf_internal_r+0x19a0>
   81810:	4d000015 	stw	r20,0(r9)
   81814:	4cc00115 	stw	r19,4(r9)
   81818:	42000404 	addi	r8,r8,16
   8181c:	18c00044 	addi	r3,r3,1
   81820:	da011d15 	stw	r8,1140(sp)
   81824:	d8c11c15 	stw	r3,1136(sp)
   81828:	b0fff60e 	bge	r22,r3,81804 <___vfprintf_internal_r+0x1238>
   8182c:	8809883a 	mov	r4,r17
   81830:	b80b883a 	mov	r5,r23
   81834:	d9811b04 	addi	r6,sp,1132
   81838:	00805980 	call	80598 <__sprint_r>
   8183c:	103ca91e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81840:	da011d17 	ldw	r8,1140(sp)
   81844:	d8c11c17 	ldw	r3,1136(sp)
   81848:	da400404 	addi	r9,sp,16
   8184c:	003fee06 	br	81808 <___vfprintf_internal_r+0x123c>
   81850:	d9412917 	ldw	r5,1188(sp)
   81854:	8809883a 	mov	r4,r17
   81858:	d9811b04 	addi	r6,sp,1132
   8185c:	00805980 	call	80598 <__sprint_r>
   81860:	103ca01e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81864:	da011d17 	ldw	r8,1140(sp)
   81868:	d8c11c17 	ldw	r3,1136(sp)
   8186c:	da400404 	addi	r9,sp,16
   81870:	003dee06 	br	8102c <___vfprintf_internal_r+0xa60>
   81874:	00c00084 	movi	r3,2
   81878:	bd84b03a 	or	r2,r23,r22
   8187c:	d8012585 	stb	zero,1174(sp)
   81880:	003ccb06 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81884:	8080040c 	andi	r2,r16,16
   81888:	1000ae26 	beq	r2,zero,81b44 <___vfprintf_internal_r+0x1578>
   8188c:	d9012d17 	ldw	r4,1204(sp)
   81890:	25c00017 	ldw	r23,0(r4)
   81894:	21000104 	addi	r4,r4,4
   81898:	d9012d15 	stw	r4,1204(sp)
   8189c:	b82dd7fa 	srai	r22,r23,31
   818a0:	b005883a 	mov	r2,r22
   818a4:	003cb906 	br	80b8c <___vfprintf_internal_r+0x5c0>
   818a8:	8080040c 	andi	r2,r16,16
   818ac:	10007026 	beq	r2,zero,81a70 <___vfprintf_internal_r+0x14a4>
   818b0:	d8812d17 	ldw	r2,1204(sp)
   818b4:	002d883a 	mov	r22,zero
   818b8:	00c00044 	movi	r3,1
   818bc:	15c00017 	ldw	r23,0(r2)
   818c0:	10800104 	addi	r2,r2,4
   818c4:	d8812d15 	stw	r2,1204(sp)
   818c8:	d8012585 	stb	zero,1174(sp)
   818cc:	b805883a 	mov	r2,r23
   818d0:	003cb706 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   818d4:	d8813217 	ldw	r2,1224(sp)
   818d8:	14ffffc4 	addi	r19,r2,-1
   818dc:	04ff4f0e 	bge	zero,r19,8161c <___vfprintf_internal_r+0x1050>
   818e0:	05800404 	movi	r22,16
   818e4:	05000274 	movhi	r20,9
   818e8:	a5314384 	addi	r20,r20,-15090
   818ec:	b4c0470e 	bge	r22,r19,81a0c <___vfprintf_internal_r+0x1440>
   818f0:	05c001c4 	movi	r23,7
   818f4:	df012917 	ldw	fp,1188(sp)
   818f8:	00000306 	br	81908 <___vfprintf_internal_r+0x133c>
   818fc:	94800204 	addi	r18,r18,8
   81900:	9cfffc04 	addi	r19,r19,-16
   81904:	b4c0410e 	bge	r22,r19,81a0c <___vfprintf_internal_r+0x1440>
   81908:	95000015 	stw	r20,0(r18)
   8190c:	95800115 	stw	r22,4(r18)
   81910:	42000404 	addi	r8,r8,16
   81914:	18c00044 	addi	r3,r3,1
   81918:	da011d15 	stw	r8,1140(sp)
   8191c:	d8c11c15 	stw	r3,1136(sp)
   81920:	b8fff60e 	bge	r23,r3,818fc <___vfprintf_internal_r+0x1330>
   81924:	8809883a 	mov	r4,r17
   81928:	e00b883a 	mov	r5,fp
   8192c:	d9811b04 	addi	r6,sp,1132
   81930:	00805980 	call	80598 <__sprint_r>
   81934:	103c6b1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81938:	da011d17 	ldw	r8,1140(sp)
   8193c:	d8c11c17 	ldw	r3,1136(sp)
   81940:	dc800404 	addi	r18,sp,16
   81944:	003fee06 	br	81900 <___vfprintf_internal_r+0x1334>
   81948:	8080040c 	andi	r2,r16,16
   8194c:	10005326 	beq	r2,zero,81a9c <___vfprintf_internal_r+0x14d0>
   81950:	d8c12d17 	ldw	r3,1204(sp)
   81954:	002d883a 	mov	r22,zero
   81958:	1dc00017 	ldw	r23,0(r3)
   8195c:	18c00104 	addi	r3,r3,4
   81960:	d8c12d15 	stw	r3,1204(sp)
   81964:	b805883a 	mov	r2,r23
   81968:	0007883a 	mov	r3,zero
   8196c:	d8012585 	stb	zero,1174(sp)
   81970:	003c8f06 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81974:	8088703a 	and	r4,r16,r2
   81978:	203efe1e 	bne	r4,zero,81574 <___vfprintf_internal_r+0xfa8>
   8197c:	48800115 	stw	r2,4(r9)
   81980:	42000044 	addi	r8,r8,1
   81984:	18c00044 	addi	r3,r3,1
   81988:	da011d15 	stw	r8,1140(sp)
   8198c:	d8c11c15 	stw	r3,1136(sp)
   81990:	008001c4 	movi	r2,7
   81994:	10c00216 	blt	r2,r3,819a0 <___vfprintf_internal_r+0x13d4>
   81998:	4c800204 	addi	r18,r9,8
   8199c:	003f1f06 	br	8161c <___vfprintf_internal_r+0x1050>
   819a0:	d9412917 	ldw	r5,1188(sp)
   819a4:	8809883a 	mov	r4,r17
   819a8:	d9811b04 	addi	r6,sp,1132
   819ac:	00805980 	call	80598 <__sprint_r>
   819b0:	103c4c1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   819b4:	dc800404 	addi	r18,sp,16
   819b8:	da011d17 	ldw	r8,1140(sp)
   819bc:	d8c11c17 	ldw	r3,1136(sp)
   819c0:	003f1606 	br	8161c <___vfprintf_internal_r+0x1050>
   819c4:	d9412917 	ldw	r5,1188(sp)
   819c8:	8809883a 	mov	r4,r17
   819cc:	d9811b04 	addi	r6,sp,1132
   819d0:	00805980 	call	80598 <__sprint_r>
   819d4:	103c431e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   819d8:	da011d17 	ldw	r8,1140(sp)
   819dc:	d8c11c17 	ldw	r3,1136(sp)
   819e0:	da400404 	addi	r9,sp,16
   819e4:	003eec06 	br	81598 <___vfprintf_internal_r+0xfcc>
   819e8:	d9412917 	ldw	r5,1188(sp)
   819ec:	8809883a 	mov	r4,r17
   819f0:	d9811b04 	addi	r6,sp,1132
   819f4:	00805980 	call	80598 <__sprint_r>
   819f8:	103c3a1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   819fc:	da011d17 	ldw	r8,1140(sp)
   81a00:	d8c11c17 	ldw	r3,1136(sp)
   81a04:	dc800404 	addi	r18,sp,16
   81a08:	003eee06 	br	815c4 <___vfprintf_internal_r+0xff8>
   81a0c:	95000015 	stw	r20,0(r18)
   81a10:	94c00115 	stw	r19,4(r18)
   81a14:	44d1883a 	add	r8,r8,r19
   81a18:	003efa06 	br	81604 <___vfprintf_internal_r+0x1038>
   81a1c:	d9412917 	ldw	r5,1188(sp)
   81a20:	8809883a 	mov	r4,r17
   81a24:	d9811b04 	addi	r6,sp,1132
   81a28:	00805980 	call	80598 <__sprint_r>
   81a2c:	103c2d1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81a30:	da011d17 	ldw	r8,1140(sp)
   81a34:	d8c11c17 	ldw	r3,1136(sp)
   81a38:	da400404 	addi	r9,sp,16
   81a3c:	003d9806 	br	810a0 <___vfprintf_internal_r+0xad4>
   81a40:	8080100c 	andi	r2,r16,64
   81a44:	10011626 	beq	r2,zero,81ea0 <___vfprintf_internal_r+0x18d4>
   81a48:	d8c12d17 	ldw	r3,1204(sp)
   81a4c:	002d883a 	mov	r22,zero
   81a50:	1dc0000b 	ldhu	r23,0(r3)
   81a54:	18c00104 	addi	r3,r3,4
   81a58:	d8c12d15 	stw	r3,1204(sp)
   81a5c:	003cc106 	br	80d64 <___vfprintf_internal_r+0x798>
   81a60:	4d000015 	stw	r20,0(r9)
   81a64:	4c800115 	stw	r18,4(r9)
   81a68:	4491883a 	add	r8,r8,r18
   81a6c:	003dc006 	br	81170 <___vfprintf_internal_r+0xba4>
   81a70:	8080100c 	andi	r2,r16,64
   81a74:	10010126 	beq	r2,zero,81e7c <___vfprintf_internal_r+0x18b0>
   81a78:	d8c12d17 	ldw	r3,1204(sp)
   81a7c:	002d883a 	mov	r22,zero
   81a80:	1dc0000b 	ldhu	r23,0(r3)
   81a84:	18c00104 	addi	r3,r3,4
   81a88:	d8c12d15 	stw	r3,1204(sp)
   81a8c:	b805883a 	mov	r2,r23
   81a90:	00c00044 	movi	r3,1
   81a94:	d8012585 	stb	zero,1174(sp)
   81a98:	003c4506 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81a9c:	8080100c 	andi	r2,r16,64
   81aa0:	10010526 	beq	r2,zero,81eb8 <___vfprintf_internal_r+0x18ec>
   81aa4:	d9012d17 	ldw	r4,1204(sp)
   81aa8:	002d883a 	mov	r22,zero
   81aac:	0007883a 	mov	r3,zero
   81ab0:	25c0000b 	ldhu	r23,0(r4)
   81ab4:	21000104 	addi	r4,r4,4
   81ab8:	d9012d15 	stw	r4,1204(sp)
   81abc:	b805883a 	mov	r2,r23
   81ac0:	d8012585 	stb	zero,1174(sp)
   81ac4:	003c3a06 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81ac8:	d8812d17 	ldw	r2,1204(sp)
   81acc:	15800017 	ldw	r22,0(r2)
   81ad0:	15000117 	ldw	r20,4(r2)
   81ad4:	10800204 	addi	r2,r2,8
   81ad8:	d8812d15 	stw	r2,1204(sp)
   81adc:	dd813315 	stw	r22,1228(sp)
   81ae0:	dd013415 	stw	r20,1232(sp)
   81ae4:	003c5906 	br	80c4c <___vfprintf_internal_r+0x680>
   81ae8:	00c00084 	movi	r3,2
   81aec:	d8012585 	stb	zero,1174(sp)
   81af0:	003c2f06 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81af4:	ac800007 	ldb	r18,0(r21)
   81af8:	003b1006 	br	8073c <___vfprintf_internal_r+0x170>
   81afc:	8080040c 	andi	r2,r16,16
   81b00:	1000091e 	bne	r2,zero,81b28 <___vfprintf_internal_r+0x155c>
   81b04:	8400100c 	andi	r16,r16,64
   81b08:	80000726 	beq	r16,zero,81b28 <___vfprintf_internal_r+0x155c>
   81b0c:	d8c12d17 	ldw	r3,1204(sp)
   81b10:	d9012c17 	ldw	r4,1200(sp)
   81b14:	18800017 	ldw	r2,0(r3)
   81b18:	18c00104 	addi	r3,r3,4
   81b1c:	d8c12d15 	stw	r3,1204(sp)
   81b20:	1100000d 	sth	r4,0(r2)
   81b24:	003adf06 	br	806a4 <___vfprintf_internal_r+0xd8>
   81b28:	d8c12d17 	ldw	r3,1204(sp)
   81b2c:	d9012c17 	ldw	r4,1200(sp)
   81b30:	18800017 	ldw	r2,0(r3)
   81b34:	18c00104 	addi	r3,r3,4
   81b38:	d8c12d15 	stw	r3,1204(sp)
   81b3c:	11000015 	stw	r4,0(r2)
   81b40:	003ad806 	br	806a4 <___vfprintf_internal_r+0xd8>
   81b44:	8080100c 	andi	r2,r16,64
   81b48:	1000c526 	beq	r2,zero,81e60 <___vfprintf_internal_r+0x1894>
   81b4c:	d8812d17 	ldw	r2,1204(sp)
   81b50:	15c0000f 	ldh	r23,0(r2)
   81b54:	10800104 	addi	r2,r2,4
   81b58:	d8812d15 	stw	r2,1204(sp)
   81b5c:	b82dd7fa 	srai	r22,r23,31
   81b60:	b005883a 	mov	r2,r22
   81b64:	003c0906 	br	80b8c <___vfprintf_internal_r+0x5c0>
   81b68:	4c800115 	stw	r18,4(r9)
   81b6c:	9211883a 	add	r8,r18,r8
   81b70:	18c00044 	addi	r3,r3,1
   81b74:	da011d15 	stw	r8,1140(sp)
   81b78:	d8c11c15 	stw	r3,1136(sp)
   81b7c:	008001c4 	movi	r2,7
   81b80:	10c14016 	blt	r2,r3,82084 <___vfprintf_internal_r+0x1ab8>
   81b84:	4a400204 	addi	r9,r9,8
   81b88:	d8813717 	ldw	r2,1244(sp)
   81b8c:	9ca7883a 	add	r19,r19,r18
   81b90:	48800015 	stw	r2,0(r9)
   81b94:	00800044 	movi	r2,1
   81b98:	48800115 	stw	r2,4(r9)
   81b9c:	4091883a 	add	r8,r8,r2
   81ba0:	1887883a 	add	r3,r3,r2
   81ba4:	da011d15 	stw	r8,1140(sp)
   81ba8:	d8c11c15 	stw	r3,1136(sp)
   81bac:	008001c4 	movi	r2,7
   81bb0:	10c12c16 	blt	r2,r3,82064 <___vfprintf_internal_r+0x1a98>
   81bb4:	4a400204 	addi	r9,r9,8
   81bb8:	d9013217 	ldw	r4,1224(sp)
   81bbc:	da011d17 	ldw	r8,1140(sp)
   81bc0:	d8c11c17 	ldw	r3,1136(sp)
   81bc4:	24a5c83a 	sub	r18,r4,r18
   81bc8:	4cc00015 	stw	r19,0(r9)
   81bcc:	003fa506 	br	81a64 <___vfprintf_internal_r+0x1498>
   81bd0:	04c00274 	movhi	r19,9
   81bd4:	9cf13004 	addi	r19,r19,-15168
   81bd8:	003c2e06 	br	80c94 <___vfprintf_internal_r+0x6c8>
   81bdc:	d9412917 	ldw	r5,1188(sp)
   81be0:	8809883a 	mov	r4,r17
   81be4:	d9811b04 	addi	r6,sp,1132
   81be8:	00805980 	call	80598 <__sprint_r>
   81bec:	103bbd1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81bf0:	da011d17 	ldw	r8,1140(sp)
   81bf4:	da400404 	addi	r9,sp,16
   81bf8:	003df606 	br	813d4 <___vfprintf_internal_r+0xe08>
   81bfc:	00800274 	movhi	r2,9
   81c00:	10b13f04 	addi	r2,r2,-15108
   81c04:	48800015 	stw	r2,0(r9)
   81c08:	00800044 	movi	r2,1
   81c0c:	48800115 	stw	r2,4(r9)
   81c10:	4091883a 	add	r8,r8,r2
   81c14:	1887883a 	add	r3,r3,r2
   81c18:	da011d15 	stw	r8,1140(sp)
   81c1c:	d8c11c15 	stw	r3,1136(sp)
   81c20:	008001c4 	movi	r2,7
   81c24:	10c0bc16 	blt	r2,r3,81f18 <___vfprintf_internal_r+0x194c>
   81c28:	4a400204 	addi	r9,r9,8
   81c2c:	9000041e 	bne	r18,zero,81c40 <___vfprintf_internal_r+0x1674>
   81c30:	d8c13217 	ldw	r3,1224(sp)
   81c34:	1800021e 	bne	r3,zero,81c40 <___vfprintf_internal_r+0x1674>
   81c38:	8080004c 	andi	r2,r16,1
   81c3c:	103d5226 	beq	r2,zero,81188 <___vfprintf_internal_r+0xbbc>
   81c40:	d8c11c17 	ldw	r3,1136(sp)
   81c44:	d9013717 	ldw	r4,1244(sp)
   81c48:	00800044 	movi	r2,1
   81c4c:	48800115 	stw	r2,4(r9)
   81c50:	49000015 	stw	r4,0(r9)
   81c54:	4091883a 	add	r8,r8,r2
   81c58:	1887883a 	add	r3,r3,r2
   81c5c:	da011d15 	stw	r8,1140(sp)
   81c60:	d8c11c15 	stw	r3,1136(sp)
   81c64:	008001c4 	movi	r2,7
   81c68:	10c14516 	blt	r2,r3,82180 <___vfprintf_internal_r+0x1bb4>
   81c6c:	4a400204 	addi	r9,r9,8
   81c70:	04a5c83a 	sub	r18,zero,r18
   81c74:	0480d70e 	bge	zero,r18,81fd4 <___vfprintf_internal_r+0x1a08>
   81c78:	05800404 	movi	r22,16
   81c7c:	05000274 	movhi	r20,9
   81c80:	a5314384 	addi	r20,r20,-15090
   81c84:	b480db0e 	bge	r22,r18,81ff4 <___vfprintf_internal_r+0x1a28>
   81c88:	05c001c4 	movi	r23,7
   81c8c:	df012917 	ldw	fp,1188(sp)
   81c90:	00000306 	br	81ca0 <___vfprintf_internal_r+0x16d4>
   81c94:	4a400204 	addi	r9,r9,8
   81c98:	94bffc04 	addi	r18,r18,-16
   81c9c:	b480d50e 	bge	r22,r18,81ff4 <___vfprintf_internal_r+0x1a28>
   81ca0:	4d000015 	stw	r20,0(r9)
   81ca4:	4d800115 	stw	r22,4(r9)
   81ca8:	42000404 	addi	r8,r8,16
   81cac:	18c00044 	addi	r3,r3,1
   81cb0:	da011d15 	stw	r8,1140(sp)
   81cb4:	d8c11c15 	stw	r3,1136(sp)
   81cb8:	b8fff60e 	bge	r23,r3,81c94 <___vfprintf_internal_r+0x16c8>
   81cbc:	8809883a 	mov	r4,r17
   81cc0:	e00b883a 	mov	r5,fp
   81cc4:	d9811b04 	addi	r6,sp,1132
   81cc8:	00805980 	call	80598 <__sprint_r>
   81ccc:	103b851e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81cd0:	da011d17 	ldw	r8,1140(sp)
   81cd4:	d8c11c17 	ldw	r3,1136(sp)
   81cd8:	da400404 	addi	r9,sp,16
   81cdc:	003fee06 	br	81c98 <___vfprintf_internal_r+0x16cc>
   81ce0:	da413c15 	stw	r9,1264(sp)
   81ce4:	00872b80 	call	872b8 <__isnand>
   81ce8:	da413c17 	ldw	r9,1264(sp)
   81cec:	10007e1e 	bne	r2,zero,81ee8 <___vfprintf_internal_r+0x191c>
   81cf0:	00bfffc4 	movi	r2,-1
   81cf4:	e0816a26 	beq	fp,r2,822a0 <___vfprintf_internal_r+0x1cd4>
   81cf8:	008019c4 	movi	r2,103
   81cfc:	90816526 	beq	r18,r2,82294 <___vfprintf_internal_r+0x1cc8>
   81d00:	008011c4 	movi	r2,71
   81d04:	90816326 	beq	r18,r2,82294 <___vfprintf_internal_r+0x1cc8>
   81d08:	80c04014 	ori	r3,r16,256
   81d0c:	d8c12a15 	stw	r3,1192(sp)
   81d10:	a0016516 	blt	r20,zero,822a8 <___vfprintf_internal_r+0x1cdc>
   81d14:	d8012f05 	stb	zero,1212(sp)
   81d18:	00801984 	movi	r2,102
   81d1c:	9080f226 	beq	r18,r2,820e8 <___vfprintf_internal_r+0x1b1c>
   81d20:	00801184 	movi	r2,70
   81d24:	9080f026 	beq	r18,r2,820e8 <___vfprintf_internal_r+0x1b1c>
   81d28:	00801944 	movi	r2,101
   81d2c:	90818d26 	beq	r18,r2,82364 <___vfprintf_internal_r+0x1d98>
   81d30:	00801144 	movi	r2,69
   81d34:	90818b26 	beq	r18,r2,82364 <___vfprintf_internal_r+0x1d98>
   81d38:	e02f883a 	mov	r23,fp
   81d3c:	d8812404 	addi	r2,sp,1168
   81d40:	d8800115 	stw	r2,4(sp)
   81d44:	d8812304 	addi	r2,sp,1164
   81d48:	d8800215 	stw	r2,8(sp)
   81d4c:	d8812204 	addi	r2,sp,1160
   81d50:	ddc00015 	stw	r23,0(sp)
   81d54:	d8800315 	stw	r2,12(sp)
   81d58:	8809883a 	mov	r4,r17
   81d5c:	b00b883a 	mov	r5,r22
   81d60:	a00d883a 	mov	r6,r20
   81d64:	01c00084 	movi	r7,2
   81d68:	da413c15 	stw	r9,1264(sp)
   81d6c:	008281c0 	call	8281c <_dtoa_r>
   81d70:	1027883a 	mov	r19,r2
   81d74:	008019c4 	movi	r2,103
   81d78:	da413c17 	ldw	r9,1264(sp)
   81d7c:	9081951e 	bne	r18,r2,823d4 <___vfprintf_internal_r+0x1e08>
   81d80:	8080004c 	andi	r2,r16,1
   81d84:	10017926 	beq	r2,zero,8236c <___vfprintf_internal_r+0x1da0>
   81d88:	00801184 	movi	r2,70
   81d8c:	9dc7883a 	add	r3,r19,r23
   81d90:	9080e626 	beq	r18,r2,8212c <___vfprintf_internal_r+0x1b60>
   81d94:	b009883a 	mov	r4,r22
   81d98:	a00b883a 	mov	r5,r20
   81d9c:	000d883a 	mov	r6,zero
   81da0:	000f883a 	mov	r7,zero
   81da4:	d8c13b15 	stw	r3,1260(sp)
   81da8:	da413c15 	stw	r9,1264(sp)
   81dac:	0088f600 	call	88f60 <__eqdf2>
   81db0:	d8c13b17 	ldw	r3,1260(sp)
   81db4:	da413c17 	ldw	r9,1264(sp)
   81db8:	10000726 	beq	r2,zero,81dd8 <___vfprintf_internal_r+0x180c>
   81dbc:	d8812217 	ldw	r2,1160(sp)
   81dc0:	10c18a2e 	bgeu	r2,r3,823ec <___vfprintf_internal_r+0x1e20>
   81dc4:	01000c04 	movi	r4,48
   81dc8:	11000005 	stb	r4,0(r2)
   81dcc:	10800044 	addi	r2,r2,1
   81dd0:	d8812215 	stw	r2,1160(sp)
   81dd4:	10fffc1e 	bne	r2,r3,81dc8 <___vfprintf_internal_r+0x17fc>
   81dd8:	1cc7c83a 	sub	r3,r3,r19
   81ddc:	d8c13215 	stw	r3,1224(sp)
   81de0:	008019c4 	movi	r2,103
   81de4:	9080fa26 	beq	r18,r2,821d0 <___vfprintf_internal_r+0x1c04>
   81de8:	008011c4 	movi	r2,71
   81dec:	9080f826 	beq	r18,r2,821d0 <___vfprintf_internal_r+0x1c04>
   81df0:	00801984 	movi	r2,102
   81df4:	90818e1e 	bne	r18,r2,82430 <___vfprintf_internal_r+0x1e64>
   81df8:	d8812417 	ldw	r2,1168(sp)
   81dfc:	d8812b15 	stw	r2,1196(sp)
   81e00:	00817c0e 	bge	zero,r2,823f4 <___vfprintf_internal_r+0x1e28>
   81e04:	e000021e 	bne	fp,zero,81e10 <___vfprintf_internal_r+0x1844>
   81e08:	8400004c 	andi	r16,r16,1
   81e0c:	80000426 	beq	r16,zero,81e20 <___vfprintf_internal_r+0x1854>
   81e10:	d8812b17 	ldw	r2,1196(sp)
   81e14:	e2000044 	addi	r8,fp,1
   81e18:	1205883a 	add	r2,r2,r8
   81e1c:	d8812b15 	stw	r2,1196(sp)
   81e20:	d8812815 	stw	r2,1184(sp)
   81e24:	10010b16 	blt	r2,zero,82254 <___vfprintf_internal_r+0x1c88>
   81e28:	ddc12f07 	ldb	r23,1212(sp)
   81e2c:	b800e426 	beq	r23,zero,821c0 <___vfprintf_internal_r+0x1bf4>
   81e30:	00800b44 	movi	r2,45
   81e34:	d8812585 	stb	r2,1174(sp)
   81e38:	dc012a17 	ldw	r16,1192(sp)
   81e3c:	d8013115 	stw	zero,1220(sp)
   81e40:	003b7306 	br	80c10 <___vfprintf_internal_r+0x644>
   81e44:	d8812b17 	ldw	r2,1196(sp)
   81e48:	d8812815 	stw	r2,1184(sp)
   81e4c:	10005716 	blt	r2,zero,81fac <___vfprintf_internal_r+0x19e0>
   81e50:	d8812583 	ldbu	r2,1174(sp)
   81e54:	ddc12d15 	stw	r23,1204(sp)
   81e58:	d8013115 	stw	zero,1220(sp)
   81e5c:	003b6806 	br	80c00 <___vfprintf_internal_r+0x634>
   81e60:	d8c12d17 	ldw	r3,1204(sp)
   81e64:	1dc00017 	ldw	r23,0(r3)
   81e68:	18c00104 	addi	r3,r3,4
   81e6c:	d8c12d15 	stw	r3,1204(sp)
   81e70:	b82dd7fa 	srai	r22,r23,31
   81e74:	b005883a 	mov	r2,r22
   81e78:	003b4406 	br	80b8c <___vfprintf_internal_r+0x5c0>
   81e7c:	d9012d17 	ldw	r4,1204(sp)
   81e80:	002d883a 	mov	r22,zero
   81e84:	00c00044 	movi	r3,1
   81e88:	25c00017 	ldw	r23,0(r4)
   81e8c:	21000104 	addi	r4,r4,4
   81e90:	d9012d15 	stw	r4,1204(sp)
   81e94:	b805883a 	mov	r2,r23
   81e98:	d8012585 	stb	zero,1174(sp)
   81e9c:	003b4406 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81ea0:	d9012d17 	ldw	r4,1204(sp)
   81ea4:	002d883a 	mov	r22,zero
   81ea8:	25c00017 	ldw	r23,0(r4)
   81eac:	21000104 	addi	r4,r4,4
   81eb0:	d9012d15 	stw	r4,1204(sp)
   81eb4:	003bab06 	br	80d64 <___vfprintf_internal_r+0x798>
   81eb8:	d8812d17 	ldw	r2,1204(sp)
   81ebc:	002d883a 	mov	r22,zero
   81ec0:	0007883a 	mov	r3,zero
   81ec4:	15c00017 	ldw	r23,0(r2)
   81ec8:	10800104 	addi	r2,r2,4
   81ecc:	d8812d15 	stw	r2,1204(sp)
   81ed0:	d8012585 	stb	zero,1174(sp)
   81ed4:	b805883a 	mov	r2,r23
   81ed8:	003b3506 	br	80bb0 <___vfprintf_internal_r+0x5e4>
   81edc:	00ffffc4 	movi	r3,-1
   81ee0:	b82b883a 	mov	r21,r23
   81ee4:	003a1606 	br	80740 <___vfprintf_internal_r+0x174>
   81ee8:	008011c4 	movi	r2,71
   81eec:	1480b116 	blt	r2,r18,821b4 <___vfprintf_internal_r+0x1be8>
   81ef0:	04c00274 	movhi	r19,9
   81ef4:	9cf13104 	addi	r19,r19,-15164
   81ef8:	00c000c4 	movi	r3,3
   81efc:	00bfdfc4 	movi	r2,-129
   81f00:	80a0703a 	and	r16,r16,r2
   81f04:	d8c12815 	stw	r3,1184(sp)
   81f08:	d8812583 	ldbu	r2,1174(sp)
   81f0c:	d8c12b15 	stw	r3,1196(sp)
   81f10:	d8013115 	stw	zero,1220(sp)
   81f14:	003b3a06 	br	80c00 <___vfprintf_internal_r+0x634>
   81f18:	d9412917 	ldw	r5,1188(sp)
   81f1c:	8809883a 	mov	r4,r17
   81f20:	d9811b04 	addi	r6,sp,1132
   81f24:	00805980 	call	80598 <__sprint_r>
   81f28:	103aee1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81f2c:	dc812417 	ldw	r18,1168(sp)
   81f30:	da011d17 	ldw	r8,1140(sp)
   81f34:	da400404 	addi	r9,sp,16
   81f38:	003f3c06 	br	81c2c <___vfprintf_internal_r+0x1660>
   81f3c:	ad400044 	addi	r21,r21,1
   81f40:	84000814 	ori	r16,r16,32
   81f44:	14800047 	ldb	r18,1(r2)
   81f48:	0039fc06 	br	8073c <___vfprintf_internal_r+0x170>
   81f4c:	d9412917 	ldw	r5,1188(sp)
   81f50:	8809883a 	mov	r4,r17
   81f54:	d9811b04 	addi	r6,sp,1132
   81f58:	00805980 	call	80598 <__sprint_r>
   81f5c:	103ae11e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81f60:	da011d17 	ldw	r8,1140(sp)
   81f64:	da400404 	addi	r9,sp,16
   81f68:	003d2b06 	br	81418 <___vfprintf_internal_r+0xe4c>
   81f6c:	4d000015 	stw	r20,0(r9)
   81f70:	4c800115 	stw	r18,4(r9)
   81f74:	4491883a 	add	r8,r8,r18
   81f78:	18c00044 	addi	r3,r3,1
   81f7c:	da011d15 	stw	r8,1140(sp)
   81f80:	d8c11c15 	stw	r3,1136(sp)
   81f84:	008001c4 	movi	r2,7
   81f88:	10fcbd16 	blt	r2,r3,81280 <___vfprintf_internal_r+0xcb4>
   81f8c:	4a400204 	addi	r9,r9,8
   81f90:	003cc206 	br	8129c <___vfprintf_internal_r+0xcd0>
   81f94:	da413c15 	stw	r9,1264(sp)
   81f98:	008752c0 	call	8752c <strlen>
   81f9c:	d8812b15 	stw	r2,1196(sp)
   81fa0:	d8812815 	stw	r2,1184(sp)
   81fa4:	da413c17 	ldw	r9,1264(sp)
   81fa8:	103fa90e 	bge	r2,zero,81e50 <___vfprintf_internal_r+0x1884>
   81fac:	d8012815 	stw	zero,1184(sp)
   81fb0:	003fa706 	br	81e50 <___vfprintf_internal_r+0x1884>
   81fb4:	d9412917 	ldw	r5,1188(sp)
   81fb8:	8809883a 	mov	r4,r17
   81fbc:	d9811b04 	addi	r6,sp,1132
   81fc0:	00805980 	call	80598 <__sprint_r>
   81fc4:	103ac71e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   81fc8:	da011d17 	ldw	r8,1140(sp)
   81fcc:	d8c11c17 	ldw	r3,1136(sp)
   81fd0:	da400404 	addi	r9,sp,16
   81fd4:	d8813217 	ldw	r2,1224(sp)
   81fd8:	4cc00015 	stw	r19,0(r9)
   81fdc:	48800115 	stw	r2,4(r9)
   81fe0:	4091883a 	add	r8,r8,r2
   81fe4:	003c6206 	br	81170 <___vfprintf_internal_r+0xba4>
   81fe8:	00800b44 	movi	r2,45
   81fec:	d8812585 	stb	r2,1174(sp)
   81ff0:	003b2406 	br	80c84 <___vfprintf_internal_r+0x6b8>
   81ff4:	4d000015 	stw	r20,0(r9)
   81ff8:	4c800115 	stw	r18,4(r9)
   81ffc:	4491883a 	add	r8,r8,r18
   82000:	18c00044 	addi	r3,r3,1
   82004:	da011d15 	stw	r8,1140(sp)
   82008:	d8c11c15 	stw	r3,1136(sp)
   8200c:	008001c4 	movi	r2,7
   82010:	10ffe816 	blt	r2,r3,81fb4 <___vfprintf_internal_r+0x19e8>
   82014:	4a400204 	addi	r9,r9,8
   82018:	003fee06 	br	81fd4 <___vfprintf_internal_r+0x1a08>
   8201c:	d8c12b15 	stw	r3,1196(sp)
   82020:	00800184 	movi	r2,6
   82024:	10c0062e 	bgeu	r2,r3,82040 <___vfprintf_internal_r+0x1a74>
   82028:	d8812b15 	stw	r2,1196(sp)
   8202c:	d8812815 	stw	r2,1184(sp)
   82030:	ddc12d15 	stw	r23,1204(sp)
   82034:	04c00274 	movhi	r19,9
   82038:	9cf13d04 	addi	r19,r19,-15116
   8203c:	0039ca06 	br	80768 <___vfprintf_internal_r+0x19c>
   82040:	d8812b17 	ldw	r2,1196(sp)
   82044:	d8812815 	stw	r2,1184(sp)
   82048:	103ff90e 	bge	r2,zero,82030 <___vfprintf_internal_r+0x1a64>
   8204c:	d8012815 	stw	zero,1184(sp)
   82050:	003ff706 	br	82030 <___vfprintf_internal_r+0x1a64>
   82054:	00800244 	movi	r2,9
   82058:	15fdaa36 	bltu	r2,r23,81704 <___vfprintf_internal_r+0x1138>
   8205c:	dd010e04 	addi	r20,sp,1080
   82060:	003dc606 	br	8177c <___vfprintf_internal_r+0x11b0>
   82064:	d9412917 	ldw	r5,1188(sp)
   82068:	8809883a 	mov	r4,r17
   8206c:	d9811b04 	addi	r6,sp,1132
   82070:	00805980 	call	80598 <__sprint_r>
   82074:	103a9b1e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   82078:	dc812417 	ldw	r18,1168(sp)
   8207c:	da400404 	addi	r9,sp,16
   82080:	003ecd06 	br	81bb8 <___vfprintf_internal_r+0x15ec>
   82084:	d9412917 	ldw	r5,1188(sp)
   82088:	8809883a 	mov	r4,r17
   8208c:	d9811b04 	addi	r6,sp,1132
   82090:	00805980 	call	80598 <__sprint_r>
   82094:	103a931e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   82098:	dc812417 	ldw	r18,1168(sp)
   8209c:	da011d17 	ldw	r8,1140(sp)
   820a0:	d8c11c17 	ldw	r3,1136(sp)
   820a4:	da400404 	addi	r9,sp,16
   820a8:	003eb706 	br	81b88 <___vfprintf_internal_r+0x15bc>
   820ac:	d9412917 	ldw	r5,1188(sp)
   820b0:	8809883a 	mov	r4,r17
   820b4:	d9811b04 	addi	r6,sp,1132
   820b8:	00805980 	call	80598 <__sprint_r>
   820bc:	103a891e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   820c0:	dc812417 	ldw	r18,1168(sp)
   820c4:	da011d17 	ldw	r8,1140(sp)
   820c8:	da400404 	addi	r9,sp,16
   820cc:	003dc206 	br	817d8 <___vfprintf_internal_r+0x120c>
   820d0:	df012815 	stw	fp,1184(sp)
   820d4:	d8812583 	ldbu	r2,1174(sp)
   820d8:	df012b15 	stw	fp,1196(sp)
   820dc:	ddc12d15 	stw	r23,1204(sp)
   820e0:	d8013115 	stw	zero,1220(sp)
   820e4:	003ac606 	br	80c00 <___vfprintf_internal_r+0x634>
   820e8:	d8812404 	addi	r2,sp,1168
   820ec:	d8800115 	stw	r2,4(sp)
   820f0:	d8812304 	addi	r2,sp,1164
   820f4:	d8800215 	stw	r2,8(sp)
   820f8:	d8812204 	addi	r2,sp,1160
   820fc:	df000015 	stw	fp,0(sp)
   82100:	d8800315 	stw	r2,12(sp)
   82104:	8809883a 	mov	r4,r17
   82108:	b00b883a 	mov	r5,r22
   8210c:	a00d883a 	mov	r6,r20
   82110:	01c000c4 	movi	r7,3
   82114:	da413c15 	stw	r9,1264(sp)
   82118:	008281c0 	call	8281c <_dtoa_r>
   8211c:	da413c17 	ldw	r9,1264(sp)
   82120:	1027883a 	mov	r19,r2
   82124:	1707883a 	add	r3,r2,fp
   82128:	e02f883a 	mov	r23,fp
   8212c:	99000007 	ldb	r4,0(r19)
   82130:	00800c04 	movi	r2,48
   82134:	20800326 	beq	r4,r2,82144 <___vfprintf_internal_r+0x1b78>
   82138:	da812417 	ldw	r10,1168(sp)
   8213c:	1a87883a 	add	r3,r3,r10
   82140:	003f1406 	br	81d94 <___vfprintf_internal_r+0x17c8>
   82144:	b009883a 	mov	r4,r22
   82148:	a00b883a 	mov	r5,r20
   8214c:	000d883a 	mov	r6,zero
   82150:	000f883a 	mov	r7,zero
   82154:	d8c13b15 	stw	r3,1260(sp)
   82158:	da413c15 	stw	r9,1264(sp)
   8215c:	0088fbc0 	call	88fbc <__nedf2>
   82160:	d8c13b17 	ldw	r3,1260(sp)
   82164:	da413c17 	ldw	r9,1264(sp)
   82168:	103ff326 	beq	r2,zero,82138 <___vfprintf_internal_r+0x1b6c>
   8216c:	00800044 	movi	r2,1
   82170:	15d5c83a 	sub	r10,r2,r23
   82174:	da812415 	stw	r10,1168(sp)
   82178:	1a87883a 	add	r3,r3,r10
   8217c:	003f0506 	br	81d94 <___vfprintf_internal_r+0x17c8>
   82180:	d9412917 	ldw	r5,1188(sp)
   82184:	8809883a 	mov	r4,r17
   82188:	d9811b04 	addi	r6,sp,1132
   8218c:	00805980 	call	80598 <__sprint_r>
   82190:	103a541e 	bne	r2,zero,80ae4 <___vfprintf_internal_r+0x518>
   82194:	dc812417 	ldw	r18,1168(sp)
   82198:	da011d17 	ldw	r8,1140(sp)
   8219c:	d8c11c17 	ldw	r3,1136(sp)
   821a0:	da400404 	addi	r9,sp,16
   821a4:	003eb206 	br	81c70 <___vfprintf_internal_r+0x16a4>
   821a8:	b82b883a 	mov	r21,r23
   821ac:	0007883a 	mov	r3,zero
   821b0:	00396306 	br	80740 <___vfprintf_internal_r+0x174>
   821b4:	04c00274 	movhi	r19,9
   821b8:	9cf13204 	addi	r19,r19,-15160
   821bc:	003f4e06 	br	81ef8 <___vfprintf_internal_r+0x192c>
   821c0:	d8812583 	ldbu	r2,1174(sp)
   821c4:	dc012a17 	ldw	r16,1192(sp)
   821c8:	d8013115 	stw	zero,1220(sp)
   821cc:	003a8c06 	br	80c00 <___vfprintf_internal_r+0x634>
   821d0:	d8812417 	ldw	r2,1168(sp)
   821d4:	d8812b15 	stw	r2,1196(sp)
   821d8:	1029883a 	mov	r20,r2
   821dc:	00bfff44 	movi	r2,-3
   821e0:	a0800116 	blt	r20,r2,821e8 <___vfprintf_internal_r+0x1c1c>
   821e4:	e5001d0e 	bge	fp,r20,8225c <___vfprintf_internal_r+0x1c90>
   821e8:	94bfff84 	addi	r18,r18,-2
   821ec:	a53fffc4 	addi	r20,r20,-1
   821f0:	dd012415 	stw	r20,1168(sp)
   821f4:	dc811fc5 	stb	r18,1151(sp)
   821f8:	a0007216 	blt	r20,zero,823c4 <___vfprintf_internal_r+0x1df8>
   821fc:	00800ac4 	movi	r2,43
   82200:	d8812005 	stb	r2,1152(sp)
   82204:	00800244 	movi	r2,9
   82208:	15003516 	blt	r2,r20,822e0 <___vfprintf_internal_r+0x1d14>
   8220c:	00800c04 	movi	r2,48
   82210:	a5000c04 	addi	r20,r20,48
   82214:	d8812045 	stb	r2,1153(sp)
   82218:	dd012085 	stb	r20,1154(sp)
   8221c:	d8c120c4 	addi	r3,sp,1155
   82220:	d8811fc4 	addi	r2,sp,1151
   82224:	1885c83a 	sub	r2,r3,r2
   82228:	d8c13217 	ldw	r3,1224(sp)
   8222c:	d8813515 	stw	r2,1236(sp)
   82230:	1885883a 	add	r2,r3,r2
   82234:	d8812b15 	stw	r2,1196(sp)
   82238:	00800044 	movi	r2,1
   8223c:	10c0580e 	bge	r2,r3,823a0 <___vfprintf_internal_r+0x1dd4>
   82240:	d8812b17 	ldw	r2,1196(sp)
   82244:	10800044 	addi	r2,r2,1
   82248:	d8812b15 	stw	r2,1196(sp)
   8224c:	d8812815 	stw	r2,1184(sp)
   82250:	103ef50e 	bge	r2,zero,81e28 <___vfprintf_internal_r+0x185c>
   82254:	d8012815 	stw	zero,1184(sp)
   82258:	003ef306 	br	81e28 <___vfprintf_internal_r+0x185c>
   8225c:	d8812b17 	ldw	r2,1196(sp)
   82260:	d8c13217 	ldw	r3,1224(sp)
   82264:	10c01416 	blt	r2,r3,822b8 <___vfprintf_internal_r+0x1cec>
   82268:	8400004c 	andi	r16,r16,1
   8226c:	80000326 	beq	r16,zero,8227c <___vfprintf_internal_r+0x1cb0>
   82270:	d8812b17 	ldw	r2,1196(sp)
   82274:	10800044 	addi	r2,r2,1
   82278:	d8812b15 	stw	r2,1196(sp)
   8227c:	d8812815 	stw	r2,1184(sp)
   82280:	10001416 	blt	r2,zero,822d4 <___vfprintf_internal_r+0x1d08>
   82284:	048019c4 	movi	r18,103
   82288:	003ee706 	br	81e28 <___vfprintf_internal_r+0x185c>
   8228c:	d8012815 	stw	zero,1184(sp)
   82290:	003b1a06 	br	80efc <___vfprintf_internal_r+0x930>
   82294:	e03e9c1e 	bne	fp,zero,81d08 <___vfprintf_internal_r+0x173c>
   82298:	07000044 	movi	fp,1
   8229c:	003e9a06 	br	81d08 <___vfprintf_internal_r+0x173c>
   822a0:	07000184 	movi	fp,6
   822a4:	003e9806 	br	81d08 <___vfprintf_internal_r+0x173c>
   822a8:	00c00b44 	movi	r3,45
   822ac:	a520003c 	xorhi	r20,r20,32768
   822b0:	d8c12f05 	stb	r3,1212(sp)
   822b4:	003e9806 	br	81d18 <___vfprintf_internal_r+0x174c>
   822b8:	05003f0e 	bge	zero,r20,823b8 <___vfprintf_internal_r+0x1dec>
   822bc:	05000044 	movi	r20,1
   822c0:	d8c13217 	ldw	r3,1224(sp)
   822c4:	a0e9883a 	add	r20,r20,r3
   822c8:	dd012b15 	stw	r20,1196(sp)
   822cc:	dd012815 	stw	r20,1184(sp)
   822d0:	a03fec0e 	bge	r20,zero,82284 <___vfprintf_internal_r+0x1cb8>
   822d4:	d8012815 	stw	zero,1184(sp)
   822d8:	048019c4 	movi	r18,103
   822dc:	003ed206 	br	81e28 <___vfprintf_internal_r+0x185c>
   822e0:	d8c11f84 	addi	r3,sp,1150
   822e4:	102f883a 	mov	r23,r2
   822e8:	4839883a 	mov	fp,r9
   822ec:	a009883a 	mov	r4,r20
   822f0:	01400284 	movi	r5,10
   822f4:	182d883a 	mov	r22,r3
   822f8:	00894c40 	call	894c4 <__modsi3>
   822fc:	10800c04 	addi	r2,r2,48
   82300:	a009883a 	mov	r4,r20
   82304:	b0800005 	stb	r2,0(r22)
   82308:	01400284 	movi	r5,10
   8230c:	00894740 	call	89474 <__divsi3>
   82310:	1029883a 	mov	r20,r2
   82314:	b0ffffc4 	addi	r3,r22,-1
   82318:	b8bff416 	blt	r23,r2,822ec <___vfprintf_internal_r+0x1d20>
   8231c:	11400c04 	addi	r5,r2,48
   82320:	b17fffc5 	stb	r5,-1(r22)
   82324:	d8811fc4 	addi	r2,sp,1151
   82328:	e013883a 	mov	r9,fp
   8232c:	18803e2e 	bgeu	r3,r2,82428 <___vfprintf_internal_r+0x1e5c>
   82330:	b007883a 	mov	r3,r22
   82334:	d9012044 	addi	r4,sp,1153
   82338:	00000206 	br	82344 <___vfprintf_internal_r+0x1d78>
   8233c:	19400003 	ldbu	r5,0(r3)
   82340:	18c00044 	addi	r3,r3,1
   82344:	21400005 	stb	r5,0(r4)
   82348:	21000044 	addi	r4,r4,1
   8234c:	10fffb1e 	bne	r2,r3,8233c <___vfprintf_internal_r+0x1d70>
   82350:	d8c12004 	addi	r3,sp,1152
   82354:	1d87c83a 	sub	r3,r3,r22
   82358:	d9012044 	addi	r4,sp,1153
   8235c:	20c7883a 	add	r3,r4,r3
   82360:	003fb006 	br	82224 <___vfprintf_internal_r+0x1c58>
   82364:	e5c00044 	addi	r23,fp,1
   82368:	003e7406 	br	81d3c <___vfprintf_internal_r+0x1770>
   8236c:	d8c12217 	ldw	r3,1160(sp)
   82370:	003e9906 	br	81dd8 <___vfprintf_internal_r+0x180c>
   82374:	d9012d17 	ldw	r4,1204(sp)
   82378:	ac800043 	ldbu	r18,1(r21)
   8237c:	b82b883a 	mov	r21,r23
   82380:	20c00017 	ldw	r3,0(r4)
   82384:	20800104 	addi	r2,r4,4
   82388:	d8812d15 	stw	r2,1204(sp)
   8238c:	18002116 	blt	r3,zero,82414 <___vfprintf_internal_r+0x1e48>
   82390:	94803fcc 	andi	r18,r18,255
   82394:	9480201c 	xori	r18,r18,128
   82398:	94bfe004 	addi	r18,r18,-128
   8239c:	0038e706 	br	8073c <___vfprintf_internal_r+0x170>
   823a0:	80a0703a 	and	r16,r16,r2
   823a4:	803fa61e 	bne	r16,zero,82240 <___vfprintf_internal_r+0x1c74>
   823a8:	d8812b17 	ldw	r2,1196(sp)
   823ac:	d8812815 	stw	r2,1184(sp)
   823b0:	103e9d0e 	bge	r2,zero,81e28 <___vfprintf_internal_r+0x185c>
   823b4:	003fa706 	br	82254 <___vfprintf_internal_r+0x1c88>
   823b8:	00800084 	movi	r2,2
   823bc:	1529c83a 	sub	r20,r2,r20
   823c0:	003fbf06 	br	822c0 <___vfprintf_internal_r+0x1cf4>
   823c4:	00800b44 	movi	r2,45
   823c8:	0529c83a 	sub	r20,zero,r20
   823cc:	d8812005 	stb	r2,1152(sp)
   823d0:	003f8c06 	br	82204 <___vfprintf_internal_r+0x1c38>
   823d4:	008011c4 	movi	r2,71
   823d8:	90be6926 	beq	r18,r2,81d80 <___vfprintf_internal_r+0x17b4>
   823dc:	003e6a06 	br	81d88 <___vfprintf_internal_r+0x17bc>
   823e0:	00bfffc4 	movi	r2,-1
   823e4:	d8812c15 	stw	r2,1200(sp)
   823e8:	0039ad06 	br	80aa0 <___vfprintf_internal_r+0x4d4>
   823ec:	1007883a 	mov	r3,r2
   823f0:	003e7906 	br	81dd8 <___vfprintf_internal_r+0x180c>
   823f4:	e000021e 	bne	fp,zero,82400 <___vfprintf_internal_r+0x1e34>
   823f8:	8400004c 	andi	r16,r16,1
   823fc:	80000e26 	beq	r16,zero,82438 <___vfprintf_internal_r+0x1e6c>
   82400:	e7000084 	addi	fp,fp,2
   82404:	df012b15 	stw	fp,1196(sp)
   82408:	df012815 	stw	fp,1184(sp)
   8240c:	e03e860e 	bge	fp,zero,81e28 <___vfprintf_internal_r+0x185c>
   82410:	003f9006 	br	82254 <___vfprintf_internal_r+0x1c88>
   82414:	94803fcc 	andi	r18,r18,255
   82418:	9480201c 	xori	r18,r18,128
   8241c:	00ffffc4 	movi	r3,-1
   82420:	94bfe004 	addi	r18,r18,-128
   82424:	0038c506 	br	8073c <___vfprintf_internal_r+0x170>
   82428:	d8c12044 	addi	r3,sp,1153
   8242c:	003f7d06 	br	82224 <___vfprintf_internal_r+0x1c58>
   82430:	dd012417 	ldw	r20,1168(sp)
   82434:	003f6d06 	br	821ec <___vfprintf_internal_r+0x1c20>
   82438:	00c00044 	movi	r3,1
   8243c:	d8c12815 	stw	r3,1184(sp)
   82440:	d8c12b15 	stw	r3,1196(sp)
   82444:	003e7806 	br	81e28 <___vfprintf_internal_r+0x185c>

00082448 <__vfprintf_internal>:
   82448:	00800274 	movhi	r2,9
   8244c:	10b88004 	addi	r2,r2,-7680
   82450:	2007883a 	mov	r3,r4
   82454:	11000017 	ldw	r4,0(r2)
   82458:	2805883a 	mov	r2,r5
   8245c:	300f883a 	mov	r7,r6
   82460:	180b883a 	mov	r5,r3
   82464:	100d883a 	mov	r6,r2
   82468:	00805cc1 	jmpi	805cc <___vfprintf_internal_r>

0008246c <__swsetup_r>:
   8246c:	00800274 	movhi	r2,9
   82470:	10b88004 	addi	r2,r2,-7680
   82474:	10800017 	ldw	r2,0(r2)
   82478:	defffd04 	addi	sp,sp,-12
   8247c:	dc400115 	stw	r17,4(sp)
   82480:	dc000015 	stw	r16,0(sp)
   82484:	dfc00215 	stw	ra,8(sp)
   82488:	2023883a 	mov	r17,r4
   8248c:	2821883a 	mov	r16,r5
   82490:	10000226 	beq	r2,zero,8249c <__swsetup_r+0x30>
   82494:	10c00e17 	ldw	r3,56(r2)
   82498:	18003d26 	beq	r3,zero,82590 <__swsetup_r+0x124>
   8249c:	8080030b 	ldhu	r2,12(r16)
   824a0:	10c0020c 	andi	r3,r2,8
   824a4:	18ffffcc 	andi	r3,r3,65535
   824a8:	18e0001c 	xori	r3,r3,32768
   824ac:	18e00004 	addi	r3,r3,-32768
   824b0:	18001226 	beq	r3,zero,824fc <__swsetup_r+0x90>
   824b4:	80c00417 	ldw	r3,16(r16)
   824b8:	18001f26 	beq	r3,zero,82538 <__swsetup_r+0xcc>
   824bc:	1100004c 	andi	r4,r2,1
   824c0:	2000261e 	bne	r4,zero,8255c <__swsetup_r+0xf0>
   824c4:	1080008c 	andi	r2,r2,2
   824c8:	10bfffcc 	andi	r2,r2,65535
   824cc:	10a0001c 	xori	r2,r2,32768
   824d0:	10a00004 	addi	r2,r2,-32768
   824d4:	1000311e 	bne	r2,zero,8259c <__swsetup_r+0x130>
   824d8:	80800517 	ldw	r2,20(r16)
   824dc:	80800215 	stw	r2,8(r16)
   824e0:	18002326 	beq	r3,zero,82570 <__swsetup_r+0x104>
   824e4:	0005883a 	mov	r2,zero
   824e8:	dfc00217 	ldw	ra,8(sp)
   824ec:	dc400117 	ldw	r17,4(sp)
   824f0:	dc000017 	ldw	r16,0(sp)
   824f4:	dec00304 	addi	sp,sp,12
   824f8:	f800283a 	ret
   824fc:	10c0040c 	andi	r3,r2,16
   82500:	18ffffcc 	andi	r3,r3,65535
   82504:	18e0001c 	xori	r3,r3,32768
   82508:	18e00004 	addi	r3,r3,-32768
   8250c:	18001e26 	beq	r3,zero,82588 <__swsetup_r+0x11c>
   82510:	10c0010c 	andi	r3,r2,4
   82514:	18ffffcc 	andi	r3,r3,65535
   82518:	18e0001c 	xori	r3,r3,32768
   8251c:	18e00004 	addi	r3,r3,-32768
   82520:	1800211e 	bne	r3,zero,825a8 <__swsetup_r+0x13c>
   82524:	80c00417 	ldw	r3,16(r16)
   82528:	11400214 	ori	r5,r2,8
   8252c:	8140030d 	sth	r5,12(r16)
   82530:	2805883a 	mov	r2,r5
   82534:	183fe11e 	bne	r3,zero,824bc <__swsetup_r+0x50>
   82538:	1140a00c 	andi	r5,r2,640
   8253c:	01008004 	movi	r4,512
   82540:	293fde26 	beq	r5,r4,824bc <__swsetup_r+0x50>
   82544:	8809883a 	mov	r4,r17
   82548:	800b883a 	mov	r5,r16
   8254c:	0084e680 	call	84e68 <__smakebuf_r>
   82550:	8080030b 	ldhu	r2,12(r16)
   82554:	80c00417 	ldw	r3,16(r16)
   82558:	003fd806 	br	824bc <__swsetup_r+0x50>
   8255c:	80800517 	ldw	r2,20(r16)
   82560:	80000215 	stw	zero,8(r16)
   82564:	0085c83a 	sub	r2,zero,r2
   82568:	80800615 	stw	r2,24(r16)
   8256c:	183fdd1e 	bne	r3,zero,824e4 <__swsetup_r+0x78>
   82570:	8080030b 	ldhu	r2,12(r16)
   82574:	1080200c 	andi	r2,r2,128
   82578:	10bfffcc 	andi	r2,r2,65535
   8257c:	10a0001c 	xori	r2,r2,32768
   82580:	10a00004 	addi	r2,r2,-32768
   82584:	103fd826 	beq	r2,zero,824e8 <__swsetup_r+0x7c>
   82588:	00bfffc4 	movi	r2,-1
   8258c:	003fd606 	br	824e8 <__swsetup_r+0x7c>
   82590:	1009883a 	mov	r4,r2
   82594:	00840f40 	call	840f4 <__sinit>
   82598:	003fc006 	br	8249c <__swsetup_r+0x30>
   8259c:	0005883a 	mov	r2,zero
   825a0:	80800215 	stw	r2,8(r16)
   825a4:	003fce06 	br	824e0 <__swsetup_r+0x74>
   825a8:	81400c17 	ldw	r5,48(r16)
   825ac:	28000626 	beq	r5,zero,825c8 <__swsetup_r+0x15c>
   825b0:	80c01004 	addi	r3,r16,64
   825b4:	28c00326 	beq	r5,r3,825c4 <__swsetup_r+0x158>
   825b8:	8809883a 	mov	r4,r17
   825bc:	00844780 	call	84478 <_free_r>
   825c0:	8080030b 	ldhu	r2,12(r16)
   825c4:	80000c15 	stw	zero,48(r16)
   825c8:	80c00417 	ldw	r3,16(r16)
   825cc:	013ff6c4 	movi	r4,-37
   825d0:	2084703a 	and	r2,r4,r2
   825d4:	80000115 	stw	zero,4(r16)
   825d8:	80c00015 	stw	r3,0(r16)
   825dc:	003fd206 	br	82528 <__swsetup_r+0xbc>

000825e0 <quorem>:
   825e0:	defff204 	addi	sp,sp,-56
   825e4:	dd000815 	stw	r20,32(sp)
   825e8:	20800417 	ldw	r2,16(r4)
   825ec:	2d000417 	ldw	r20,16(r5)
   825f0:	dcc00715 	stw	r19,28(sp)
   825f4:	dfc00d15 	stw	ra,52(sp)
   825f8:	df000c15 	stw	fp,48(sp)
   825fc:	ddc00b15 	stw	r23,44(sp)
   82600:	dd800a15 	stw	r22,40(sp)
   82604:	dd400915 	stw	r21,36(sp)
   82608:	dc800615 	stw	r18,24(sp)
   8260c:	dc400515 	stw	r17,20(sp)
   82610:	dc000415 	stw	r16,16(sp)
   82614:	d9400015 	stw	r5,0(sp)
   82618:	2027883a 	mov	r19,r4
   8261c:	15007d16 	blt	r2,r20,82814 <quorem+0x234>
   82620:	a0800104 	addi	r2,r20,4
   82624:	1085883a 	add	r2,r2,r2
   82628:	1085883a 	add	r2,r2,r2
   8262c:	28ad883a 	add	r22,r5,r2
   82630:	2085883a 	add	r2,r4,r2
   82634:	10800017 	ldw	r2,0(r2)
   82638:	b1400017 	ldw	r5,0(r22)
   8263c:	a53fffc4 	addi	r20,r20,-1
   82640:	1009883a 	mov	r4,r2
   82644:	29400044 	addi	r5,r5,1
   82648:	d8800115 	stw	r2,4(sp)
   8264c:	00895200 	call	89520 <__udivsi3>
   82650:	1025883a 	mov	r18,r2
   82654:	d8800017 	ldw	r2,0(sp)
   82658:	9f000504 	addi	fp,r19,20
   8265c:	14000504 	addi	r16,r2,20
   82660:	90003626 	beq	r18,zero,8273c <quorem+0x15c>
   82664:	802b883a 	mov	r21,r16
   82668:	e023883a 	mov	r17,fp
   8266c:	0007883a 	mov	r3,zero
   82670:	002f883a 	mov	r23,zero
   82674:	a9800017 	ldw	r6,0(r21)
   82678:	900b883a 	mov	r5,r18
   8267c:	d8c00315 	stw	r3,12(sp)
   82680:	313fffcc 	andi	r4,r6,65535
   82684:	d9800215 	stw	r6,8(sp)
   82688:	00895300 	call	89530 <__mulsi3>
   8268c:	d9800217 	ldw	r6,8(sp)
   82690:	d8c00317 	ldw	r3,12(sp)
   82694:	900b883a 	mov	r5,r18
   82698:	3008d43a 	srli	r4,r6,16
   8269c:	1887883a 	add	r3,r3,r2
   826a0:	d8c00315 	stw	r3,12(sp)
   826a4:	00895300 	call	89530 <__mulsi3>
   826a8:	89400017 	ldw	r5,0(r17)
   826ac:	d8c00317 	ldw	r3,12(sp)
   826b0:	ad400104 	addi	r21,r21,4
   826b4:	293fffcc 	andi	r4,r5,65535
   826b8:	1810d43a 	srli	r8,r3,16
   826bc:	25c9883a 	add	r4,r4,r23
   826c0:	18ffffcc 	andi	r3,r3,65535
   826c4:	20c9c83a 	sub	r4,r4,r3
   826c8:	280cd43a 	srli	r6,r5,16
   826cc:	4085883a 	add	r2,r8,r2
   826d0:	2007d43a 	srai	r3,r4,16
   826d4:	117fffcc 	andi	r5,r2,65535
   826d8:	314bc83a 	sub	r5,r6,r5
   826dc:	28cb883a 	add	r5,r5,r3
   826e0:	8940008d 	sth	r5,2(r17)
   826e4:	8900000d 	sth	r4,0(r17)
   826e8:	1006d43a 	srli	r3,r2,16
   826ec:	282fd43a 	srai	r23,r5,16
   826f0:	8c400104 	addi	r17,r17,4
   826f4:	b57fdf2e 	bgeu	r22,r21,82674 <quorem+0x94>
   826f8:	d8c00117 	ldw	r3,4(sp)
   826fc:	18000f1e 	bne	r3,zero,8273c <quorem+0x15c>
   82700:	a0800144 	addi	r2,r20,5
   82704:	1085883a 	add	r2,r2,r2
   82708:	1085883a 	add	r2,r2,r2
   8270c:	9887883a 	add	r3,r19,r2
   82710:	18bfff04 	addi	r2,r3,-4
   82714:	e080082e 	bgeu	fp,r2,82738 <quorem+0x158>
   82718:	18ffff17 	ldw	r3,-4(r3)
   8271c:	18000326 	beq	r3,zero,8272c <quorem+0x14c>
   82720:	00000506 	br	82738 <quorem+0x158>
   82724:	10c00017 	ldw	r3,0(r2)
   82728:	1800031e 	bne	r3,zero,82738 <quorem+0x158>
   8272c:	10bfff04 	addi	r2,r2,-4
   82730:	a53fffc4 	addi	r20,r20,-1
   82734:	e0bffb36 	bltu	fp,r2,82724 <quorem+0x144>
   82738:	9d000415 	stw	r20,16(r19)
   8273c:	d9400017 	ldw	r5,0(sp)
   82740:	9809883a 	mov	r4,r19
   82744:	00865800 	call	86580 <__mcmp>
   82748:	10002516 	blt	r2,zero,827e0 <quorem+0x200>
   8274c:	94800044 	addi	r18,r18,1
   82750:	e007883a 	mov	r3,fp
   82754:	000d883a 	mov	r6,zero
   82758:	18800017 	ldw	r2,0(r3)
   8275c:	82000017 	ldw	r8,0(r16)
   82760:	84000104 	addi	r16,r16,4
   82764:	11ffffcc 	andi	r7,r2,65535
   82768:	413fffcc 	andi	r4,r8,65535
   8276c:	398d883a 	add	r6,r7,r6
   82770:	310fc83a 	sub	r7,r6,r4
   82774:	4010d43a 	srli	r8,r8,16
   82778:	100cd43a 	srli	r6,r2,16
   8277c:	3809d43a 	srai	r4,r7,16
   82780:	19c0000d 	sth	r7,0(r3)
   82784:	320dc83a 	sub	r6,r6,r8
   82788:	310d883a 	add	r6,r6,r4
   8278c:	1980008d 	sth	r6,2(r3)
   82790:	300dd43a 	srai	r6,r6,16
   82794:	18c00104 	addi	r3,r3,4
   82798:	b43fef2e 	bgeu	r22,r16,82758 <quorem+0x178>
   8279c:	a0800144 	addi	r2,r20,5
   827a0:	1085883a 	add	r2,r2,r2
   827a4:	1085883a 	add	r2,r2,r2
   827a8:	9885883a 	add	r2,r19,r2
   827ac:	10c00017 	ldw	r3,0(r2)
   827b0:	18000b1e 	bne	r3,zero,827e0 <quorem+0x200>
   827b4:	10ffff04 	addi	r3,r2,-4
   827b8:	e0c0082e 	bgeu	fp,r3,827dc <quorem+0x1fc>
   827bc:	10bfff17 	ldw	r2,-4(r2)
   827c0:	10000326 	beq	r2,zero,827d0 <quorem+0x1f0>
   827c4:	00000506 	br	827dc <quorem+0x1fc>
   827c8:	18800017 	ldw	r2,0(r3)
   827cc:	1000031e 	bne	r2,zero,827dc <quorem+0x1fc>
   827d0:	18ffff04 	addi	r3,r3,-4
   827d4:	a53fffc4 	addi	r20,r20,-1
   827d8:	e0fffb36 	bltu	fp,r3,827c8 <quorem+0x1e8>
   827dc:	9d000415 	stw	r20,16(r19)
   827e0:	9005883a 	mov	r2,r18
   827e4:	dfc00d17 	ldw	ra,52(sp)
   827e8:	df000c17 	ldw	fp,48(sp)
   827ec:	ddc00b17 	ldw	r23,44(sp)
   827f0:	dd800a17 	ldw	r22,40(sp)
   827f4:	dd400917 	ldw	r21,36(sp)
   827f8:	dd000817 	ldw	r20,32(sp)
   827fc:	dcc00717 	ldw	r19,28(sp)
   82800:	dc800617 	ldw	r18,24(sp)
   82804:	dc400517 	ldw	r17,20(sp)
   82808:	dc000417 	ldw	r16,16(sp)
   8280c:	dec00e04 	addi	sp,sp,56
   82810:	f800283a 	ret
   82814:	0005883a 	mov	r2,zero
   82818:	003ff206 	br	827e4 <quorem+0x204>

0008281c <_dtoa_r>:
   8281c:	20801017 	ldw	r2,64(r4)
   82820:	deffdf04 	addi	sp,sp,-132
   82824:	dcc01a15 	stw	r19,104(sp)
   82828:	dc801915 	stw	r18,100(sp)
   8282c:	dc401815 	stw	r17,96(sp)
   82830:	dc001715 	stw	r16,92(sp)
   82834:	dfc02015 	stw	ra,128(sp)
   82838:	df001f15 	stw	fp,124(sp)
   8283c:	ddc01e15 	stw	r23,120(sp)
   82840:	dd801d15 	stw	r22,116(sp)
   82844:	dd401c15 	stw	r21,112(sp)
   82848:	dd001b15 	stw	r20,108(sp)
   8284c:	d9400315 	stw	r5,12(sp)
   82850:	d9c00415 	stw	r7,16(sp)
   82854:	2021883a 	mov	r16,r4
   82858:	3025883a 	mov	r18,r6
   8285c:	dcc02317 	ldw	r19,140(sp)
   82860:	3023883a 	mov	r17,r6
   82864:	10000826 	beq	r2,zero,82888 <_dtoa_r+0x6c>
   82868:	20c01117 	ldw	r3,68(r4)
   8286c:	01800044 	movi	r6,1
   82870:	100b883a 	mov	r5,r2
   82874:	30cc983a 	sll	r6,r6,r3
   82878:	10c00115 	stw	r3,4(r2)
   8287c:	11800215 	stw	r6,8(r2)
   82880:	0085cdc0 	call	85cdc <_Bfree>
   82884:	80001015 	stw	zero,64(r16)
   82888:	90002f16 	blt	r18,zero,82948 <_dtoa_r+0x12c>
   8288c:	98000015 	stw	zero,0(r19)
   82890:	90dffc2c 	andhi	r3,r18,32752
   82894:	009ffc34 	movhi	r2,32752
   82898:	18801c26 	beq	r3,r2,8290c <_dtoa_r+0xf0>
   8289c:	d9000317 	ldw	r4,12(sp)
   828a0:	880b883a 	mov	r5,r17
   828a4:	000d883a 	mov	r6,zero
   828a8:	000f883a 	mov	r7,zero
   828ac:	0088f600 	call	88f60 <__eqdf2>
   828b0:	10002c1e 	bne	r2,zero,82964 <_dtoa_r+0x148>
   828b4:	d9002217 	ldw	r4,136(sp)
   828b8:	d9c02417 	ldw	r7,144(sp)
   828bc:	00800044 	movi	r2,1
   828c0:	20800015 	stw	r2,0(r4)
   828c4:	38019426 	beq	r7,zero,82f18 <_dtoa_r+0x6fc>
   828c8:	00800274 	movhi	r2,9
   828cc:	10b13f44 	addi	r2,r2,-15107
   828d0:	38800015 	stw	r2,0(r7)
   828d4:	15ffffc4 	addi	r23,r2,-1
   828d8:	b805883a 	mov	r2,r23
   828dc:	dfc02017 	ldw	ra,128(sp)
   828e0:	df001f17 	ldw	fp,124(sp)
   828e4:	ddc01e17 	ldw	r23,120(sp)
   828e8:	dd801d17 	ldw	r22,116(sp)
   828ec:	dd401c17 	ldw	r21,112(sp)
   828f0:	dd001b17 	ldw	r20,108(sp)
   828f4:	dcc01a17 	ldw	r19,104(sp)
   828f8:	dc801917 	ldw	r18,100(sp)
   828fc:	dc401817 	ldw	r17,96(sp)
   82900:	dc001717 	ldw	r16,92(sp)
   82904:	dec02104 	addi	sp,sp,132
   82908:	f800283a 	ret
   8290c:	d8c02217 	ldw	r3,136(sp)
   82910:	d9000317 	ldw	r4,12(sp)
   82914:	0089c3c4 	movi	r2,9999
   82918:	18800015 	stw	r2,0(r3)
   8291c:	20016c26 	beq	r4,zero,82ed0 <_dtoa_r+0x6b4>
   82920:	05c00274 	movhi	r23,9
   82924:	bdf14b04 	addi	r23,r23,-15060
   82928:	d9c02417 	ldw	r7,144(sp)
   8292c:	383fea26 	beq	r7,zero,828d8 <_dtoa_r+0xbc>
   82930:	b88000c7 	ldb	r2,3(r23)
   82934:	10016d1e 	bne	r2,zero,82eec <_dtoa_r+0x6d0>
   82938:	b88000c4 	addi	r2,r23,3
   8293c:	d8c02417 	ldw	r3,144(sp)
   82940:	18800015 	stw	r2,0(r3)
   82944:	003fe406 	br	828d8 <_dtoa_r+0xbc>
   82948:	04600034 	movhi	r17,32768
   8294c:	8c7fffc4 	addi	r17,r17,-1
   82950:	9462703a 	and	r17,r18,r17
   82954:	00800044 	movi	r2,1
   82958:	98800015 	stw	r2,0(r19)
   8295c:	8825883a 	mov	r18,r17
   82960:	003fcb06 	br	82890 <_dtoa_r+0x74>
   82964:	d9400317 	ldw	r5,12(sp)
   82968:	9028d53a 	srli	r20,r18,20
   8296c:	d8800204 	addi	r2,sp,8
   82970:	d8800015 	stw	r2,0(sp)
   82974:	8009883a 	mov	r4,r16
   82978:	880d883a 	mov	r6,r17
   8297c:	d9c00104 	addi	r7,sp,4
   82980:	00869280 	call	86928 <__d2b>
   82984:	a501ffcc 	andi	r20,r20,2047
   82988:	1039883a 	mov	fp,r2
   8298c:	a001591e 	bne	r20,zero,82ef4 <_dtoa_r+0x6d8>
   82990:	dd400217 	ldw	r21,8(sp)
   82994:	dd000117 	ldw	r20,4(sp)
   82998:	00befbc4 	movi	r2,-1041
   8299c:	ad29883a 	add	r20,r21,r20
   829a0:	a082d216 	blt	r20,r2,834ec <_dtoa_r+0xcd0>
   829a4:	d8c00317 	ldw	r3,12(sp)
   829a8:	013f0384 	movi	r4,-1010
   829ac:	2509c83a 	sub	r4,r4,r20
   829b0:	a0810484 	addi	r2,r20,1042
   829b4:	9124983a 	sll	r18,r18,r4
   829b8:	1884d83a 	srl	r2,r3,r2
   829bc:	9088b03a 	or	r4,r18,r2
   829c0:	00892e40 	call	892e4 <__floatunsidf>
   829c4:	1009883a 	mov	r4,r2
   829c8:	017f8434 	movhi	r5,65040
   829cc:	00800044 	movi	r2,1
   829d0:	194b883a 	add	r5,r3,r5
   829d4:	a53fffc4 	addi	r20,r20,-1
   829d8:	d8800f15 	stw	r2,60(sp)
   829dc:	000d883a 	mov	r6,zero
   829e0:	01cffe34 	movhi	r7,16376
   829e4:	0088a680 	call	88a68 <__subdf3>
   829e8:	1009883a 	mov	r4,r2
   829ec:	180b883a 	mov	r5,r3
   829f0:	0198dbf4 	movhi	r6,25455
   829f4:	3190d844 	addi	r6,r6,17249
   829f8:	01cff4f4 	movhi	r7,16339
   829fc:	39e1e9c4 	addi	r7,r7,-30809
   82a00:	0088ac80 	call	88ac8 <__muldf3>
   82a04:	180b883a 	mov	r5,r3
   82a08:	01a2d874 	movhi	r6,35681
   82a0c:	31b22cc4 	addi	r6,r6,-14157
   82a10:	01cff1f4 	movhi	r7,16327
   82a14:	39e28a04 	addi	r7,r7,-30168
   82a18:	1009883a 	mov	r4,r2
   82a1c:	0088a140 	call	88a14 <__adddf3>
   82a20:	a009883a 	mov	r4,r20
   82a24:	1027883a 	mov	r19,r2
   82a28:	1825883a 	mov	r18,r3
   82a2c:	008913c0 	call	8913c <__floatsidf>
   82a30:	1009883a 	mov	r4,r2
   82a34:	180b883a 	mov	r5,r3
   82a38:	019427f4 	movhi	r6,20639
   82a3c:	319e7ec4 	addi	r6,r6,31227
   82a40:	01cff4f4 	movhi	r7,16339
   82a44:	39d104c4 	addi	r7,r7,17427
   82a48:	0088ac80 	call	88ac8 <__muldf3>
   82a4c:	9809883a 	mov	r4,r19
   82a50:	900b883a 	mov	r5,r18
   82a54:	100d883a 	mov	r6,r2
   82a58:	180f883a 	mov	r7,r3
   82a5c:	0088a140 	call	88a14 <__adddf3>
   82a60:	1009883a 	mov	r4,r2
   82a64:	180b883a 	mov	r5,r3
   82a68:	1027883a 	mov	r19,r2
   82a6c:	1825883a 	mov	r18,r3
   82a70:	00892100 	call	89210 <__fixdfsi>
   82a74:	9809883a 	mov	r4,r19
   82a78:	900b883a 	mov	r5,r18
   82a7c:	000d883a 	mov	r6,zero
   82a80:	000f883a 	mov	r7,zero
   82a84:	d8800615 	stw	r2,24(sp)
   82a88:	00890e00 	call	890e0 <__ltdf2>
   82a8c:	10027e16 	blt	r2,zero,83488 <_dtoa_r+0xc6c>
   82a90:	d8c00617 	ldw	r3,24(sp)
   82a94:	00800584 	movi	r2,22
   82a98:	10c26c36 	bltu	r2,r3,8344c <_dtoa_r+0xc30>
   82a9c:	180490fa 	slli	r2,r3,3
   82aa0:	00c00274 	movhi	r3,9
   82aa4:	18f17104 	addi	r3,r3,-14908
   82aa8:	d9800317 	ldw	r6,12(sp)
   82aac:	1885883a 	add	r2,r3,r2
   82ab0:	11000017 	ldw	r4,0(r2)
   82ab4:	11400117 	ldw	r5,4(r2)
   82ab8:	880f883a 	mov	r7,r17
   82abc:	00890180 	call	89018 <__gtdf2>
   82ac0:	00828f0e 	bge	zero,r2,83500 <_dtoa_r+0xce4>
   82ac4:	d8800617 	ldw	r2,24(sp)
   82ac8:	d8000d15 	stw	zero,52(sp)
   82acc:	10bfffc4 	addi	r2,r2,-1
   82ad0:	d8800615 	stw	r2,24(sp)
   82ad4:	ad29c83a 	sub	r20,r21,r20
   82ad8:	a53fffc4 	addi	r20,r20,-1
   82adc:	a0026616 	blt	r20,zero,83478 <_dtoa_r+0xc5c>
   82ae0:	dd000715 	stw	r20,28(sp)
   82ae4:	d8000815 	stw	zero,32(sp)
   82ae8:	d8800617 	ldw	r2,24(sp)
   82aec:	10025a16 	blt	r2,zero,83458 <_dtoa_r+0xc3c>
   82af0:	d8c00717 	ldw	r3,28(sp)
   82af4:	d8800b15 	stw	r2,44(sp)
   82af8:	d8000a15 	stw	zero,40(sp)
   82afc:	1887883a 	add	r3,r3,r2
   82b00:	d8c00715 	stw	r3,28(sp)
   82b04:	d9c00417 	ldw	r7,16(sp)
   82b08:	00800244 	movi	r2,9
   82b0c:	11c10536 	bltu	r2,r7,82f24 <_dtoa_r+0x708>
   82b10:	00800144 	movi	r2,5
   82b14:	11c4c60e 	bge	r2,r7,83e30 <_dtoa_r+0x1614>
   82b18:	39ffff04 	addi	r7,r7,-4
   82b1c:	d9c00415 	stw	r7,16(sp)
   82b20:	0027883a 	mov	r19,zero
   82b24:	d9c00417 	ldw	r7,16(sp)
   82b28:	008000c4 	movi	r2,3
   82b2c:	3883a226 	beq	r7,r2,839b8 <_dtoa_r+0x119c>
   82b30:	11c2bc16 	blt	r2,r7,83624 <_dtoa_r+0xe08>
   82b34:	00800084 	movi	r2,2
   82b38:	3880fb1e 	bne	r7,r2,82f28 <_dtoa_r+0x70c>
   82b3c:	d8000c15 	stw	zero,48(sp)
   82b40:	d9002117 	ldw	r4,132(sp)
   82b44:	0103ae0e 	bge	zero,r4,83a00 <_dtoa_r+0x11e4>
   82b48:	2025883a 	mov	r18,r4
   82b4c:	d9000e15 	stw	r4,56(sp)
   82b50:	d9000915 	stw	r4,36(sp)
   82b54:	80001115 	stw	zero,68(r16)
   82b58:	008005c4 	movi	r2,23
   82b5c:	1484b22e 	bgeu	r2,r18,83e28 <_dtoa_r+0x160c>
   82b60:	00c00044 	movi	r3,1
   82b64:	00800104 	movi	r2,4
   82b68:	1085883a 	add	r2,r2,r2
   82b6c:	11000504 	addi	r4,r2,20
   82b70:	180b883a 	mov	r5,r3
   82b74:	18c00044 	addi	r3,r3,1
   82b78:	913ffb2e 	bgeu	r18,r4,82b68 <_dtoa_r+0x34c>
   82b7c:	81401115 	stw	r5,68(r16)
   82b80:	8009883a 	mov	r4,r16
   82b84:	0085c340 	call	85c34 <_Balloc>
   82b88:	102f883a 	mov	r23,r2
   82b8c:	80801015 	stw	r2,64(r16)
   82b90:	00800384 	movi	r2,14
   82b94:	1480f036 	bltu	r2,r18,82f58 <_dtoa_r+0x73c>
   82b98:	9800ef26 	beq	r19,zero,82f58 <_dtoa_r+0x73c>
   82b9c:	d8800617 	ldw	r2,24(sp)
   82ba0:	00839c0e 	bge	zero,r2,83a14 <_dtoa_r+0x11f8>
   82ba4:	d8c00617 	ldw	r3,24(sp)
   82ba8:	108003cc 	andi	r2,r2,15
   82bac:	100490fa 	slli	r2,r2,3
   82bb0:	182bd13a 	srai	r21,r3,4
   82bb4:	00c00274 	movhi	r3,9
   82bb8:	18f17104 	addi	r3,r3,-14908
   82bbc:	1885883a 	add	r2,r3,r2
   82bc0:	a8c0040c 	andi	r3,r21,16
   82bc4:	12800017 	ldw	r10,0(r2)
   82bc8:	15800117 	ldw	r22,4(r2)
   82bcc:	18038726 	beq	r3,zero,839ec <_dtoa_r+0x11d0>
   82bd0:	00800274 	movhi	r2,9
   82bd4:	10b16704 	addi	r2,r2,-14948
   82bd8:	11800817 	ldw	r6,32(r2)
   82bdc:	11c00917 	ldw	r7,36(r2)
   82be0:	d9000317 	ldw	r4,12(sp)
   82be4:	880b883a 	mov	r5,r17
   82be8:	da801515 	stw	r10,84(sp)
   82bec:	0088dac0 	call	88dac <__divdf3>
   82bf0:	da801517 	ldw	r10,84(sp)
   82bf4:	d8801015 	stw	r2,64(sp)
   82bf8:	1829883a 	mov	r20,r3
   82bfc:	ad4003cc 	andi	r21,r21,15
   82c00:	048000c4 	movi	r18,3
   82c04:	a8001126 	beq	r21,zero,82c4c <_dtoa_r+0x430>
   82c08:	04c00274 	movhi	r19,9
   82c0c:	9cf16704 	addi	r19,r19,-14948
   82c10:	5005883a 	mov	r2,r10
   82c14:	b007883a 	mov	r3,r22
   82c18:	a980004c 	andi	r6,r21,1
   82c1c:	1009883a 	mov	r4,r2
   82c20:	a82bd07a 	srai	r21,r21,1
   82c24:	180b883a 	mov	r5,r3
   82c28:	30000426 	beq	r6,zero,82c3c <_dtoa_r+0x420>
   82c2c:	99800017 	ldw	r6,0(r19)
   82c30:	99c00117 	ldw	r7,4(r19)
   82c34:	94800044 	addi	r18,r18,1
   82c38:	0088ac80 	call	88ac8 <__muldf3>
   82c3c:	9cc00204 	addi	r19,r19,8
   82c40:	a83ff51e 	bne	r21,zero,82c18 <_dtoa_r+0x3fc>
   82c44:	1015883a 	mov	r10,r2
   82c48:	182d883a 	mov	r22,r3
   82c4c:	d9001017 	ldw	r4,64(sp)
   82c50:	a00b883a 	mov	r5,r20
   82c54:	500d883a 	mov	r6,r10
   82c58:	b00f883a 	mov	r7,r22
   82c5c:	0088dac0 	call	88dac <__divdf3>
   82c60:	1027883a 	mov	r19,r2
   82c64:	1829883a 	mov	r20,r3
   82c68:	d8c00d17 	ldw	r3,52(sp)
   82c6c:	18000626 	beq	r3,zero,82c88 <_dtoa_r+0x46c>
   82c70:	9809883a 	mov	r4,r19
   82c74:	a00b883a 	mov	r5,r20
   82c78:	000d883a 	mov	r6,zero
   82c7c:	01cffc34 	movhi	r7,16368
   82c80:	00890e00 	call	890e0 <__ltdf2>
   82c84:	10040e16 	blt	r2,zero,83cc0 <_dtoa_r+0x14a4>
   82c88:	9009883a 	mov	r4,r18
   82c8c:	008913c0 	call	8913c <__floatsidf>
   82c90:	1009883a 	mov	r4,r2
   82c94:	180b883a 	mov	r5,r3
   82c98:	980d883a 	mov	r6,r19
   82c9c:	a00f883a 	mov	r7,r20
   82ca0:	0088ac80 	call	88ac8 <__muldf3>
   82ca4:	1009883a 	mov	r4,r2
   82ca8:	180b883a 	mov	r5,r3
   82cac:	000d883a 	mov	r6,zero
   82cb0:	01d00734 	movhi	r7,16412
   82cb4:	0088a140 	call	88a14 <__adddf3>
   82cb8:	057f3034 	movhi	r21,64704
   82cbc:	1d6b883a 	add	r21,r3,r21
   82cc0:	d8c00917 	ldw	r3,36(sp)
   82cc4:	1025883a 	mov	r18,r2
   82cc8:	18031f26 	beq	r3,zero,83948 <_dtoa_r+0x112c>
   82ccc:	d8800617 	ldw	r2,24(sp)
   82cd0:	dac00917 	ldw	r11,36(sp)
   82cd4:	d8801315 	stw	r2,76(sp)
   82cd8:	d8c00c17 	ldw	r3,48(sp)
   82cdc:	18039026 	beq	r3,zero,83b20 <_dtoa_r+0x1304>
   82ce0:	58bfffc4 	addi	r2,r11,-1
   82ce4:	100490fa 	slli	r2,r2,3
   82ce8:	00c00274 	movhi	r3,9
   82cec:	18f17104 	addi	r3,r3,-14908
   82cf0:	0009883a 	mov	r4,zero
   82cf4:	1885883a 	add	r2,r3,r2
   82cf8:	11800017 	ldw	r6,0(r2)
   82cfc:	11c00117 	ldw	r7,4(r2)
   82d00:	014ff834 	movhi	r5,16352
   82d04:	dac01615 	stw	r11,88(sp)
   82d08:	0088dac0 	call	88dac <__divdf3>
   82d0c:	900d883a 	mov	r6,r18
   82d10:	a80f883a 	mov	r7,r21
   82d14:	1009883a 	mov	r4,r2
   82d18:	180b883a 	mov	r5,r3
   82d1c:	0088a680 	call	88a68 <__subdf3>
   82d20:	a00b883a 	mov	r5,r20
   82d24:	9809883a 	mov	r4,r19
   82d28:	182b883a 	mov	r21,r3
   82d2c:	d8801015 	stw	r2,64(sp)
   82d30:	00892100 	call	89210 <__fixdfsi>
   82d34:	1009883a 	mov	r4,r2
   82d38:	d8801515 	stw	r2,84(sp)
   82d3c:	008913c0 	call	8913c <__floatsidf>
   82d40:	9809883a 	mov	r4,r19
   82d44:	a00b883a 	mov	r5,r20
   82d48:	100d883a 	mov	r6,r2
   82d4c:	180f883a 	mov	r7,r3
   82d50:	0088a680 	call	88a68 <__subdf3>
   82d54:	da401517 	ldw	r9,84(sp)
   82d58:	d9001017 	ldw	r4,64(sp)
   82d5c:	a80b883a 	mov	r5,r21
   82d60:	4d000c04 	addi	r20,r9,48
   82d64:	bd000005 	stb	r20,0(r23)
   82d68:	100d883a 	mov	r6,r2
   82d6c:	180f883a 	mov	r7,r3
   82d70:	bd800044 	addi	r22,r23,1
   82d74:	1025883a 	mov	r18,r2
   82d78:	1827883a 	mov	r19,r3
   82d7c:	00890180 	call	89018 <__gtdf2>
   82d80:	00842216 	blt	zero,r2,83e0c <_dtoa_r+0x15f0>
   82d84:	0009883a 	mov	r4,zero
   82d88:	014ffc34 	movhi	r5,16368
   82d8c:	900d883a 	mov	r6,r18
   82d90:	980f883a 	mov	r7,r19
   82d94:	0088a680 	call	88a68 <__subdf3>
   82d98:	d9001017 	ldw	r4,64(sp)
   82d9c:	a80b883a 	mov	r5,r21
   82da0:	100d883a 	mov	r6,r2
   82da4:	180f883a 	mov	r7,r3
   82da8:	00890180 	call	89018 <__gtdf2>
   82dac:	dac01617 	ldw	r11,88(sp)
   82db0:	00841316 	blt	zero,r2,83e00 <_dtoa_r+0x15e4>
   82db4:	00800044 	movi	r2,1
   82db8:	12c0670e 	bge	r2,r11,82f58 <_dtoa_r+0x73c>
   82dbc:	bad7883a 	add	r11,r23,r11
   82dc0:	df001115 	stw	fp,68(sp)
   82dc4:	dc401215 	stw	r17,72(sp)
   82dc8:	5839883a 	mov	fp,r11
   82dcc:	dc401017 	ldw	r17,64(sp)
   82dd0:	00000806 	br	82df4 <_dtoa_r+0x5d8>
   82dd4:	0088a680 	call	88a68 <__subdf3>
   82dd8:	1009883a 	mov	r4,r2
   82ddc:	180b883a 	mov	r5,r3
   82de0:	880d883a 	mov	r6,r17
   82de4:	a80f883a 	mov	r7,r21
   82de8:	00890e00 	call	890e0 <__ltdf2>
   82dec:	1003ee16 	blt	r2,zero,83da8 <_dtoa_r+0x158c>
   82df0:	b703f126 	beq	r22,fp,83db8 <_dtoa_r+0x159c>
   82df4:	8809883a 	mov	r4,r17
   82df8:	a80b883a 	mov	r5,r21
   82dfc:	000d883a 	mov	r6,zero
   82e00:	01d00934 	movhi	r7,16420
   82e04:	0088ac80 	call	88ac8 <__muldf3>
   82e08:	000d883a 	mov	r6,zero
   82e0c:	01d00934 	movhi	r7,16420
   82e10:	9009883a 	mov	r4,r18
   82e14:	980b883a 	mov	r5,r19
   82e18:	1023883a 	mov	r17,r2
   82e1c:	182b883a 	mov	r21,r3
   82e20:	0088ac80 	call	88ac8 <__muldf3>
   82e24:	180b883a 	mov	r5,r3
   82e28:	1009883a 	mov	r4,r2
   82e2c:	1825883a 	mov	r18,r3
   82e30:	1027883a 	mov	r19,r2
   82e34:	00892100 	call	89210 <__fixdfsi>
   82e38:	1009883a 	mov	r4,r2
   82e3c:	1029883a 	mov	r20,r2
   82e40:	008913c0 	call	8913c <__floatsidf>
   82e44:	9809883a 	mov	r4,r19
   82e48:	900b883a 	mov	r5,r18
   82e4c:	100d883a 	mov	r6,r2
   82e50:	180f883a 	mov	r7,r3
   82e54:	0088a680 	call	88a68 <__subdf3>
   82e58:	a5000c04 	addi	r20,r20,48
   82e5c:	b5000005 	stb	r20,0(r22)
   82e60:	1009883a 	mov	r4,r2
   82e64:	180b883a 	mov	r5,r3
   82e68:	880d883a 	mov	r6,r17
   82e6c:	a80f883a 	mov	r7,r21
   82e70:	1025883a 	mov	r18,r2
   82e74:	1827883a 	mov	r19,r3
   82e78:	00890e00 	call	890e0 <__ltdf2>
   82e7c:	b5800044 	addi	r22,r22,1
   82e80:	0009883a 	mov	r4,zero
   82e84:	014ffc34 	movhi	r5,16368
   82e88:	900d883a 	mov	r6,r18
   82e8c:	980f883a 	mov	r7,r19
   82e90:	103fd00e 	bge	r2,zero,82dd4 <_dtoa_r+0x5b8>
   82e94:	d9001317 	ldw	r4,76(sp)
   82e98:	df001117 	ldw	fp,68(sp)
   82e9c:	d9000615 	stw	r4,24(sp)
   82ea0:	8009883a 	mov	r4,r16
   82ea4:	e00b883a 	mov	r5,fp
   82ea8:	0085cdc0 	call	85cdc <_Bfree>
   82eac:	d9c00617 	ldw	r7,24(sp)
   82eb0:	d8c02217 	ldw	r3,136(sp)
   82eb4:	d9002417 	ldw	r4,144(sp)
   82eb8:	b0000005 	stb	zero,0(r22)
   82ebc:	38800044 	addi	r2,r7,1
   82ec0:	18800015 	stw	r2,0(r3)
   82ec4:	203e8426 	beq	r4,zero,828d8 <_dtoa_r+0xbc>
   82ec8:	25800015 	stw	r22,0(r4)
   82ecc:	003e8206 	br	828d8 <_dtoa_r+0xbc>
   82ed0:	00800434 	movhi	r2,16
   82ed4:	10bfffc4 	addi	r2,r2,-1
   82ed8:	90a4703a 	and	r18,r18,r2
   82edc:	903e901e 	bne	r18,zero,82920 <_dtoa_r+0x104>
   82ee0:	05c00274 	movhi	r23,9
   82ee4:	bdf14804 	addi	r23,r23,-15072
   82ee8:	003e8f06 	br	82928 <_dtoa_r+0x10c>
   82eec:	b8800204 	addi	r2,r23,8
   82ef0:	003e9206 	br	8293c <_dtoa_r+0x120>
   82ef4:	01400434 	movhi	r5,16
   82ef8:	297fffc4 	addi	r5,r5,-1
   82efc:	894a703a 	and	r5,r17,r5
   82f00:	d9000317 	ldw	r4,12(sp)
   82f04:	294ffc34 	orhi	r5,r5,16368
   82f08:	a53f0044 	addi	r20,r20,-1023
   82f0c:	dd400217 	ldw	r21,8(sp)
   82f10:	d8000f15 	stw	zero,60(sp)
   82f14:	003eb106 	br	829dc <_dtoa_r+0x1c0>
   82f18:	05c00274 	movhi	r23,9
   82f1c:	bdf13f04 	addi	r23,r23,-15108
   82f20:	003e6d06 	br	828d8 <_dtoa_r+0xbc>
   82f24:	d8000415 	stw	zero,16(sp)
   82f28:	80001115 	stw	zero,68(r16)
   82f2c:	8009883a 	mov	r4,r16
   82f30:	000b883a 	mov	r5,zero
   82f34:	0085c340 	call	85c34 <_Balloc>
   82f38:	01ffffc4 	movi	r7,-1
   82f3c:	102f883a 	mov	r23,r2
   82f40:	80801015 	stw	r2,64(r16)
   82f44:	00800044 	movi	r2,1
   82f48:	d9c00915 	stw	r7,36(sp)
   82f4c:	d8002115 	stw	zero,132(sp)
   82f50:	d9c00e15 	stw	r7,56(sp)
   82f54:	d8800c15 	stw	r2,48(sp)
   82f58:	d8800117 	ldw	r2,4(sp)
   82f5c:	10008b16 	blt	r2,zero,8318c <_dtoa_r+0x970>
   82f60:	d9000617 	ldw	r4,24(sp)
   82f64:	00c00384 	movi	r3,14
   82f68:	19008816 	blt	r3,r4,8318c <_dtoa_r+0x970>
   82f6c:	200490fa 	slli	r2,r4,3
   82f70:	d9c02117 	ldw	r7,132(sp)
   82f74:	00c00274 	movhi	r3,9
   82f78:	18f17104 	addi	r3,r3,-14908
   82f7c:	1885883a 	add	r2,r3,r2
   82f80:	14800017 	ldw	r18,0(r2)
   82f84:	14c00117 	ldw	r19,4(r2)
   82f88:	3801c916 	blt	r7,zero,836b0 <_dtoa_r+0xe94>
   82f8c:	d9000317 	ldw	r4,12(sp)
   82f90:	900d883a 	mov	r6,r18
   82f94:	980f883a 	mov	r7,r19
   82f98:	880b883a 	mov	r5,r17
   82f9c:	0088dac0 	call	88dac <__divdf3>
   82fa0:	180b883a 	mov	r5,r3
   82fa4:	1009883a 	mov	r4,r2
   82fa8:	00892100 	call	89210 <__fixdfsi>
   82fac:	1009883a 	mov	r4,r2
   82fb0:	102b883a 	mov	r21,r2
   82fb4:	008913c0 	call	8913c <__floatsidf>
   82fb8:	1009883a 	mov	r4,r2
   82fbc:	180b883a 	mov	r5,r3
   82fc0:	900d883a 	mov	r6,r18
   82fc4:	980f883a 	mov	r7,r19
   82fc8:	0088ac80 	call	88ac8 <__muldf3>
   82fcc:	d9000317 	ldw	r4,12(sp)
   82fd0:	880b883a 	mov	r5,r17
   82fd4:	100d883a 	mov	r6,r2
   82fd8:	180f883a 	mov	r7,r3
   82fdc:	0088a680 	call	88a68 <__subdf3>
   82fe0:	d9c00917 	ldw	r7,36(sp)
   82fe4:	1009883a 	mov	r4,r2
   82fe8:	a8800c04 	addi	r2,r21,48
   82fec:	b8800005 	stb	r2,0(r23)
   82ff0:	01800044 	movi	r6,1
   82ff4:	180b883a 	mov	r5,r3
   82ff8:	2005883a 	mov	r2,r4
   82ffc:	bd800044 	addi	r22,r23,1
   83000:	39803726 	beq	r7,r6,830e0 <_dtoa_r+0x8c4>
   83004:	000d883a 	mov	r6,zero
   83008:	01d00934 	movhi	r7,16420
   8300c:	0088ac80 	call	88ac8 <__muldf3>
   83010:	1009883a 	mov	r4,r2
   83014:	180b883a 	mov	r5,r3
   83018:	000d883a 	mov	r6,zero
   8301c:	000f883a 	mov	r7,zero
   83020:	1029883a 	mov	r20,r2
   83024:	1823883a 	mov	r17,r3
   83028:	0088f600 	call	88f60 <__eqdf2>
   8302c:	103f9c26 	beq	r2,zero,82ea0 <_dtoa_r+0x684>
   83030:	dd400917 	ldw	r21,36(sp)
   83034:	dc000415 	stw	r16,16(sp)
   83038:	00000906 	br	83060 <_dtoa_r+0x844>
   8303c:	0088ac80 	call	88ac8 <__muldf3>
   83040:	1009883a 	mov	r4,r2
   83044:	180b883a 	mov	r5,r3
   83048:	000d883a 	mov	r6,zero
   8304c:	000f883a 	mov	r7,zero
   83050:	1029883a 	mov	r20,r2
   83054:	1823883a 	mov	r17,r3
   83058:	0088f600 	call	88f60 <__eqdf2>
   8305c:	10022926 	beq	r2,zero,83904 <_dtoa_r+0x10e8>
   83060:	900d883a 	mov	r6,r18
   83064:	980f883a 	mov	r7,r19
   83068:	a009883a 	mov	r4,r20
   8306c:	880b883a 	mov	r5,r17
   83070:	0088dac0 	call	88dac <__divdf3>
   83074:	180b883a 	mov	r5,r3
   83078:	1009883a 	mov	r4,r2
   8307c:	00892100 	call	89210 <__fixdfsi>
   83080:	1009883a 	mov	r4,r2
   83084:	1021883a 	mov	r16,r2
   83088:	008913c0 	call	8913c <__floatsidf>
   8308c:	1009883a 	mov	r4,r2
   83090:	180b883a 	mov	r5,r3
   83094:	900d883a 	mov	r6,r18
   83098:	980f883a 	mov	r7,r19
   8309c:	0088ac80 	call	88ac8 <__muldf3>
   830a0:	a009883a 	mov	r4,r20
   830a4:	880b883a 	mov	r5,r17
   830a8:	100d883a 	mov	r6,r2
   830ac:	180f883a 	mov	r7,r3
   830b0:	0088a680 	call	88a68 <__subdf3>
   830b4:	82400c04 	addi	r9,r16,48
   830b8:	b2400005 	stb	r9,0(r22)
   830bc:	b5800044 	addi	r22,r22,1
   830c0:	b5d3c83a 	sub	r9,r22,r23
   830c4:	000d883a 	mov	r6,zero
   830c8:	01d00934 	movhi	r7,16420
   830cc:	1009883a 	mov	r4,r2
   830d0:	180b883a 	mov	r5,r3
   830d4:	aa7fd91e 	bne	r21,r9,8303c <_dtoa_r+0x820>
   830d8:	802b883a 	mov	r21,r16
   830dc:	dc000417 	ldw	r16,16(sp)
   830e0:	1009883a 	mov	r4,r2
   830e4:	180b883a 	mov	r5,r3
   830e8:	100d883a 	mov	r6,r2
   830ec:	180f883a 	mov	r7,r3
   830f0:	0088a140 	call	88a14 <__adddf3>
   830f4:	9009883a 	mov	r4,r18
   830f8:	980b883a 	mov	r5,r19
   830fc:	100d883a 	mov	r6,r2
   83100:	180f883a 	mov	r7,r3
   83104:	1023883a 	mov	r17,r2
   83108:	1829883a 	mov	r20,r3
   8310c:	00890e00 	call	890e0 <__ltdf2>
   83110:	10000816 	blt	r2,zero,83134 <_dtoa_r+0x918>
   83114:	9009883a 	mov	r4,r18
   83118:	980b883a 	mov	r5,r19
   8311c:	880d883a 	mov	r6,r17
   83120:	a00f883a 	mov	r7,r20
   83124:	0088f600 	call	88f60 <__eqdf2>
   83128:	103f5d1e 	bne	r2,zero,82ea0 <_dtoa_r+0x684>
   8312c:	ad40004c 	andi	r21,r21,1
   83130:	a83f5b26 	beq	r21,zero,82ea0 <_dtoa_r+0x684>
   83134:	b53fffc3 	ldbu	r20,-1(r22)
   83138:	b0ffff84 	addi	r3,r22,-2
   8313c:	01400e44 	movi	r5,57
   83140:	00000306 	br	83150 <_dtoa_r+0x934>
   83144:	1d000003 	ldbu	r20,0(r3)
   83148:	102d883a 	mov	r22,r2
   8314c:	18ffffc4 	addi	r3,r3,-1
   83150:	a1003fcc 	andi	r4,r20,255
   83154:	2100201c 	xori	r4,r4,128
   83158:	213fe004 	addi	r4,r4,-128
   8315c:	b0bfffc4 	addi	r2,r22,-1
   83160:	2142ca1e 	bne	r4,r5,83c8c <_dtoa_r+0x1470>
   83164:	b8bff71e 	bne	r23,r2,83144 <_dtoa_r+0x928>
   83168:	d8800617 	ldw	r2,24(sp)
   8316c:	05000c44 	movi	r20,49
   83170:	10800044 	addi	r2,r2,1
   83174:	d8800615 	stw	r2,24(sp)
   83178:	00800c04 	movi	r2,48
   8317c:	b8800005 	stb	r2,0(r23)
   83180:	b805883a 	mov	r2,r23
   83184:	15000005 	stb	r20,0(r2)
   83188:	003f4506 	br	82ea0 <_dtoa_r+0x684>
   8318c:	d9c00c17 	ldw	r7,48(sp)
   83190:	3800c926 	beq	r7,zero,834b8 <_dtoa_r+0xc9c>
   83194:	d9c00417 	ldw	r7,16(sp)
   83198:	00c00044 	movi	r3,1
   8319c:	19c16c0e 	bge	r3,r7,83750 <_dtoa_r+0xf34>
   831a0:	d9000917 	ldw	r4,36(sp)
   831a4:	d9c00a17 	ldw	r7,40(sp)
   831a8:	24ffffc4 	addi	r19,r4,-1
   831ac:	3cc20716 	blt	r7,r19,839cc <_dtoa_r+0x11b0>
   831b0:	3ce7c83a 	sub	r19,r7,r19
   831b4:	d9c00917 	ldw	r7,36(sp)
   831b8:	3802ae16 	blt	r7,zero,83c74 <_dtoa_r+0x1458>
   831bc:	dc800817 	ldw	r18,32(sp)
   831c0:	d8800917 	ldw	r2,36(sp)
   831c4:	d8c00817 	ldw	r3,32(sp)
   831c8:	d9c00717 	ldw	r7,28(sp)
   831cc:	8009883a 	mov	r4,r16
   831d0:	1887883a 	add	r3,r3,r2
   831d4:	388f883a 	add	r7,r7,r2
   831d8:	01400044 	movi	r5,1
   831dc:	d8c00815 	stw	r3,32(sp)
   831e0:	d9c00715 	stw	r7,28(sp)
   831e4:	00860640 	call	86064 <__i2b>
   831e8:	102b883a 	mov	r21,r2
   831ec:	90000a26 	beq	r18,zero,83218 <_dtoa_r+0x9fc>
   831f0:	d8800717 	ldw	r2,28(sp)
   831f4:	0080080e 	bge	zero,r2,83218 <_dtoa_r+0x9fc>
   831f8:	90812b16 	blt	r18,r2,836a8 <_dtoa_r+0xe8c>
   831fc:	d8c00817 	ldw	r3,32(sp)
   83200:	d9000717 	ldw	r4,28(sp)
   83204:	90a5c83a 	sub	r18,r18,r2
   83208:	1887c83a 	sub	r3,r3,r2
   8320c:	2089c83a 	sub	r4,r4,r2
   83210:	d8c00815 	stw	r3,32(sp)
   83214:	d9000715 	stw	r4,28(sp)
   83218:	d9c00a17 	ldw	r7,40(sp)
   8321c:	01c0140e 	bge	zero,r7,83270 <_dtoa_r+0xa54>
   83220:	d8800c17 	ldw	r2,48(sp)
   83224:	1001de26 	beq	r2,zero,839a0 <_dtoa_r+0x1184>
   83228:	04c00e0e 	bge	zero,r19,83264 <_dtoa_r+0xa48>
   8322c:	a80b883a 	mov	r5,r21
   83230:	8009883a 	mov	r4,r16
   83234:	980d883a 	mov	r6,r19
   83238:	00862f80 	call	862f8 <__pow5mult>
   8323c:	e00d883a 	mov	r6,fp
   83240:	8009883a 	mov	r4,r16
   83244:	100b883a 	mov	r5,r2
   83248:	102b883a 	mov	r21,r2
   8324c:	00860a00 	call	860a0 <__multiply>
   83250:	1029883a 	mov	r20,r2
   83254:	e00b883a 	mov	r5,fp
   83258:	8009883a 	mov	r4,r16
   8325c:	0085cdc0 	call	85cdc <_Bfree>
   83260:	a039883a 	mov	fp,r20
   83264:	d8c00a17 	ldw	r3,40(sp)
   83268:	1ccdc83a 	sub	r6,r3,r19
   8326c:	3001291e 	bne	r6,zero,83714 <_dtoa_r+0xef8>
   83270:	8009883a 	mov	r4,r16
   83274:	01400044 	movi	r5,1
   83278:	00860640 	call	86064 <__i2b>
   8327c:	d9000b17 	ldw	r4,44(sp)
   83280:	1029883a 	mov	r20,r2
   83284:	0100050e 	bge	zero,r4,8329c <_dtoa_r+0xa80>
   83288:	d9800b17 	ldw	r6,44(sp)
   8328c:	8009883a 	mov	r4,r16
   83290:	100b883a 	mov	r5,r2
   83294:	00862f80 	call	862f8 <__pow5mult>
   83298:	1029883a 	mov	r20,r2
   8329c:	d9c00417 	ldw	r7,16(sp)
   832a0:	00800044 	movi	r2,1
   832a4:	11c0f00e 	bge	r2,r7,83668 <_dtoa_r+0xe4c>
   832a8:	0023883a 	mov	r17,zero
   832ac:	d8800b17 	ldw	r2,44(sp)
   832b0:	1001741e 	bne	r2,zero,83884 <_dtoa_r+0x1068>
   832b4:	00800044 	movi	r2,1
   832b8:	d8c00717 	ldw	r3,28(sp)
   832bc:	10c5883a 	add	r2,r2,r3
   832c0:	108007cc 	andi	r2,r2,31
   832c4:	10008026 	beq	r2,zero,834c8 <_dtoa_r+0xcac>
   832c8:	01000804 	movi	r4,32
   832cc:	2089c83a 	sub	r4,r4,r2
   832d0:	00c00104 	movi	r3,4
   832d4:	1902d00e 	bge	r3,r4,83e18 <_dtoa_r+0x15fc>
   832d8:	d9000817 	ldw	r4,32(sp)
   832dc:	d9c00717 	ldw	r7,28(sp)
   832e0:	00c00704 	movi	r3,28
   832e4:	1885c83a 	sub	r2,r3,r2
   832e8:	2089883a 	add	r4,r4,r2
   832ec:	388f883a 	add	r7,r7,r2
   832f0:	d9000815 	stw	r4,32(sp)
   832f4:	90a5883a 	add	r18,r18,r2
   832f8:	d9c00715 	stw	r7,28(sp)
   832fc:	d9c00817 	ldw	r7,32(sp)
   83300:	01c0050e 	bge	zero,r7,83318 <_dtoa_r+0xafc>
   83304:	e00b883a 	mov	r5,fp
   83308:	8009883a 	mov	r4,r16
   8330c:	380d883a 	mov	r6,r7
   83310:	00864240 	call	86424 <__lshift>
   83314:	1039883a 	mov	fp,r2
   83318:	d8800717 	ldw	r2,28(sp)
   8331c:	0080050e 	bge	zero,r2,83334 <_dtoa_r+0xb18>
   83320:	a00b883a 	mov	r5,r20
   83324:	8009883a 	mov	r4,r16
   83328:	100d883a 	mov	r6,r2
   8332c:	00864240 	call	86424 <__lshift>
   83330:	1029883a 	mov	r20,r2
   83334:	d8c00d17 	ldw	r3,52(sp)
   83338:	1801401e 	bne	r3,zero,8383c <_dtoa_r+0x1020>
   8333c:	d8800917 	ldw	r2,36(sp)
   83340:	00815a0e 	bge	zero,r2,838ac <_dtoa_r+0x1090>
   83344:	d8c00c17 	ldw	r3,48(sp)
   83348:	18006f1e 	bne	r3,zero,83508 <_dtoa_r+0xcec>
   8334c:	b823883a 	mov	r17,r23
   83350:	dc800917 	ldw	r18,36(sp)
   83354:	00000206 	br	83360 <_dtoa_r+0xb44>
   83358:	0085d040 	call	85d04 <__multadd>
   8335c:	1039883a 	mov	fp,r2
   83360:	e009883a 	mov	r4,fp
   83364:	a00b883a 	mov	r5,r20
   83368:	00825e00 	call	825e0 <quorem>
   8336c:	10800c04 	addi	r2,r2,48
   83370:	88800005 	stb	r2,0(r17)
   83374:	8c400044 	addi	r17,r17,1
   83378:	8dc7c83a 	sub	r3,r17,r23
   8337c:	8009883a 	mov	r4,r16
   83380:	e00b883a 	mov	r5,fp
   83384:	01800284 	movi	r6,10
   83388:	000f883a 	mov	r7,zero
   8338c:	1cbff216 	blt	r3,r18,83358 <_dtoa_r+0xb3c>
   83390:	dd800917 	ldw	r22,36(sp)
   83394:	1007883a 	mov	r3,r2
   83398:	05823a0e 	bge	zero,r22,83c84 <_dtoa_r+0x1468>
   8339c:	bdad883a 	add	r22,r23,r22
   833a0:	0023883a 	mov	r17,zero
   833a4:	e00b883a 	mov	r5,fp
   833a8:	01800044 	movi	r6,1
   833ac:	8009883a 	mov	r4,r16
   833b0:	d8c01515 	stw	r3,84(sp)
   833b4:	00864240 	call	86424 <__lshift>
   833b8:	1009883a 	mov	r4,r2
   833bc:	a00b883a 	mov	r5,r20
   833c0:	1039883a 	mov	fp,r2
   833c4:	00865800 	call	86580 <__mcmp>
   833c8:	d8c01517 	ldw	r3,84(sp)
   833cc:	0080d60e 	bge	zero,r2,83728 <_dtoa_r+0xf0c>
   833d0:	b13fffc3 	ldbu	r4,-1(r22)
   833d4:	b0ffff84 	addi	r3,r22,-2
   833d8:	01800e44 	movi	r6,57
   833dc:	00000306 	br	833ec <_dtoa_r+0xbd0>
   833e0:	19000003 	ldbu	r4,0(r3)
   833e4:	102d883a 	mov	r22,r2
   833e8:	18ffffc4 	addi	r3,r3,-1
   833ec:	21403fcc 	andi	r5,r4,255
   833f0:	2940201c 	xori	r5,r5,128
   833f4:	297fe004 	addi	r5,r5,-128
   833f8:	b0bfffc4 	addi	r2,r22,-1
   833fc:	2981a71e 	bne	r5,r6,83a9c <_dtoa_r+0x1280>
   83400:	b8bff71e 	bne	r23,r2,833e0 <_dtoa_r+0xbc4>
   83404:	d8800617 	ldw	r2,24(sp)
   83408:	10800044 	addi	r2,r2,1
   8340c:	d8800615 	stw	r2,24(sp)
   83410:	00800c44 	movi	r2,49
   83414:	b8800005 	stb	r2,0(r23)
   83418:	8009883a 	mov	r4,r16
   8341c:	a00b883a 	mov	r5,r20
   83420:	0085cdc0 	call	85cdc <_Bfree>
   83424:	a83e9e26 	beq	r21,zero,82ea0 <_dtoa_r+0x684>
   83428:	88000426 	beq	r17,zero,8343c <_dtoa_r+0xc20>
   8342c:	8d400326 	beq	r17,r21,8343c <_dtoa_r+0xc20>
   83430:	8009883a 	mov	r4,r16
   83434:	880b883a 	mov	r5,r17
   83438:	0085cdc0 	call	85cdc <_Bfree>
   8343c:	8009883a 	mov	r4,r16
   83440:	a80b883a 	mov	r5,r21
   83444:	0085cdc0 	call	85cdc <_Bfree>
   83448:	003e9506 	br	82ea0 <_dtoa_r+0x684>
   8344c:	00c00044 	movi	r3,1
   83450:	d8c00d15 	stw	r3,52(sp)
   83454:	003d9f06 	br	82ad4 <_dtoa_r+0x2b8>
   83458:	d9000817 	ldw	r4,32(sp)
   8345c:	d8800617 	ldw	r2,24(sp)
   83460:	d8000b15 	stw	zero,44(sp)
   83464:	2089c83a 	sub	r4,r4,r2
   83468:	0087c83a 	sub	r3,zero,r2
   8346c:	d9000815 	stw	r4,32(sp)
   83470:	d8c00a15 	stw	r3,40(sp)
   83474:	003da306 	br	82b04 <_dtoa_r+0x2e8>
   83478:	0529c83a 	sub	r20,zero,r20
   8347c:	dd000815 	stw	r20,32(sp)
   83480:	d8000715 	stw	zero,28(sp)
   83484:	003d9806 	br	82ae8 <_dtoa_r+0x2cc>
   83488:	d9000617 	ldw	r4,24(sp)
   8348c:	008913c0 	call	8913c <__floatsidf>
   83490:	1009883a 	mov	r4,r2
   83494:	180b883a 	mov	r5,r3
   83498:	980d883a 	mov	r6,r19
   8349c:	900f883a 	mov	r7,r18
   834a0:	0088fbc0 	call	88fbc <__nedf2>
   834a4:	103d7a26 	beq	r2,zero,82a90 <_dtoa_r+0x274>
   834a8:	d8800617 	ldw	r2,24(sp)
   834ac:	10bfffc4 	addi	r2,r2,-1
   834b0:	d8800615 	stw	r2,24(sp)
   834b4:	003d7606 	br	82a90 <_dtoa_r+0x274>
   834b8:	dcc00a17 	ldw	r19,40(sp)
   834bc:	dc800817 	ldw	r18,32(sp)
   834c0:	002b883a 	mov	r21,zero
   834c4:	003f4906 	br	831ec <_dtoa_r+0x9d0>
   834c8:	00800704 	movi	r2,28
   834cc:	d8c00817 	ldw	r3,32(sp)
   834d0:	d9000717 	ldw	r4,28(sp)
   834d4:	90a5883a 	add	r18,r18,r2
   834d8:	1887883a 	add	r3,r3,r2
   834dc:	2089883a 	add	r4,r4,r2
   834e0:	d8c00815 	stw	r3,32(sp)
   834e4:	d9000715 	stw	r4,28(sp)
   834e8:	003f8406 	br	832fc <_dtoa_r+0xae0>
   834ec:	d9c00317 	ldw	r7,12(sp)
   834f0:	013efb84 	movi	r4,-1042
   834f4:	2509c83a 	sub	r4,r4,r20
   834f8:	3908983a 	sll	r4,r7,r4
   834fc:	003d3006 	br	829c0 <_dtoa_r+0x1a4>
   83500:	d8000d15 	stw	zero,52(sp)
   83504:	003d7306 	br	82ad4 <_dtoa_r+0x2b8>
   83508:	0480050e 	bge	zero,r18,83520 <_dtoa_r+0xd04>
   8350c:	a80b883a 	mov	r5,r21
   83510:	8009883a 	mov	r4,r16
   83514:	900d883a 	mov	r6,r18
   83518:	00864240 	call	86424 <__lshift>
   8351c:	102b883a 	mov	r21,r2
   83520:	8801611e 	bne	r17,zero,83aa8 <_dtoa_r+0x128c>
   83524:	a827883a 	mov	r19,r21
   83528:	d8c00317 	ldw	r3,12(sp)
   8352c:	d9000917 	ldw	r4,36(sp)
   83530:	b8bfffc4 	addi	r2,r23,-1
   83534:	18c0004c 	andi	r3,r3,1
   83538:	1105883a 	add	r2,r2,r4
   8353c:	b825883a 	mov	r18,r23
   83540:	d8800515 	stw	r2,20(sp)
   83544:	a823883a 	mov	r17,r21
   83548:	d8c00315 	stw	r3,12(sp)
   8354c:	ddc00715 	stw	r23,28(sp)
   83550:	e009883a 	mov	r4,fp
   83554:	a00b883a 	mov	r5,r20
   83558:	00825e00 	call	825e0 <quorem>
   8355c:	e009883a 	mov	r4,fp
   83560:	880b883a 	mov	r5,r17
   83564:	102d883a 	mov	r22,r2
   83568:	00865800 	call	86580 <__mcmp>
   8356c:	980d883a 	mov	r6,r19
   83570:	8009883a 	mov	r4,r16
   83574:	a00b883a 	mov	r5,r20
   83578:	102b883a 	mov	r21,r2
   8357c:	00865d80 	call	865d8 <__mdiff>
   83580:	100d883a 	mov	r6,r2
   83584:	10800317 	ldw	r2,12(r2)
   83588:	b5c00c04 	addi	r23,r22,48
   8358c:	10008c26 	beq	r2,zero,837c0 <_dtoa_r+0xfa4>
   83590:	8009883a 	mov	r4,r16
   83594:	300b883a 	mov	r5,r6
   83598:	0085cdc0 	call	85cdc <_Bfree>
   8359c:	00800044 	movi	r2,1
   835a0:	a8007116 	blt	r21,zero,83768 <_dtoa_r+0xf4c>
   835a4:	a800041e 	bne	r21,zero,835b8 <_dtoa_r+0xd9c>
   835a8:	d9c00417 	ldw	r7,16(sp)
   835ac:	3800021e 	bne	r7,zero,835b8 <_dtoa_r+0xd9c>
   835b0:	d8c00317 	ldw	r3,12(sp)
   835b4:	18006c26 	beq	r3,zero,83768 <_dtoa_r+0xf4c>
   835b8:	00814c16 	blt	zero,r2,83aec <_dtoa_r+0x12d0>
   835bc:	d8c00517 	ldw	r3,20(sp)
   835c0:	95400044 	addi	r21,r18,1
   835c4:	95c00005 	stb	r23,0(r18)
   835c8:	a82d883a 	mov	r22,r21
   835cc:	90c14d26 	beq	r18,r3,83b04 <_dtoa_r+0x12e8>
   835d0:	e00b883a 	mov	r5,fp
   835d4:	8009883a 	mov	r4,r16
   835d8:	01800284 	movi	r6,10
   835dc:	000f883a 	mov	r7,zero
   835e0:	0085d040 	call	85d04 <__multadd>
   835e4:	1039883a 	mov	fp,r2
   835e8:	8cc08b26 	beq	r17,r19,83818 <_dtoa_r+0xffc>
   835ec:	880b883a 	mov	r5,r17
   835f0:	01800284 	movi	r6,10
   835f4:	000f883a 	mov	r7,zero
   835f8:	8009883a 	mov	r4,r16
   835fc:	0085d040 	call	85d04 <__multadd>
   83600:	980b883a 	mov	r5,r19
   83604:	8009883a 	mov	r4,r16
   83608:	01800284 	movi	r6,10
   8360c:	000f883a 	mov	r7,zero
   83610:	1023883a 	mov	r17,r2
   83614:	0085d040 	call	85d04 <__multadd>
   83618:	1027883a 	mov	r19,r2
   8361c:	a825883a 	mov	r18,r21
   83620:	003fcb06 	br	83550 <_dtoa_r+0xd34>
   83624:	d9c00417 	ldw	r7,16(sp)
   83628:	00800104 	movi	r2,4
   8362c:	3880e426 	beq	r7,r2,839c0 <_dtoa_r+0x11a4>
   83630:	00800144 	movi	r2,5
   83634:	38be3c1e 	bne	r7,r2,82f28 <_dtoa_r+0x70c>
   83638:	00c00044 	movi	r3,1
   8363c:	d8c00c15 	stw	r3,48(sp)
   83640:	d9c02117 	ldw	r7,132(sp)
   83644:	d8800617 	ldw	r2,24(sp)
   83648:	388f883a 	add	r7,r7,r2
   8364c:	3c800044 	addi	r18,r7,1
   83650:	d9c00e15 	stw	r7,56(sp)
   83654:	dc800915 	stw	r18,36(sp)
   83658:	04bd3e16 	blt	zero,r18,82b54 <_dtoa_r+0x338>
   8365c:	80001115 	stw	zero,68(r16)
   83660:	000b883a 	mov	r5,zero
   83664:	003d4606 	br	82b80 <_dtoa_r+0x364>
   83668:	d8c00317 	ldw	r3,12(sp)
   8366c:	183f0e1e 	bne	r3,zero,832a8 <_dtoa_r+0xa8c>
   83670:	00c00434 	movhi	r3,16
   83674:	18ffffc4 	addi	r3,r3,-1
   83678:	88c6703a 	and	r3,r17,r3
   8367c:	183f0a1e 	bne	r3,zero,832a8 <_dtoa_r+0xa8c>
   83680:	8c5ffc2c 	andhi	r17,r17,32752
   83684:	883f0826 	beq	r17,zero,832a8 <_dtoa_r+0xa8c>
   83688:	d9000817 	ldw	r4,32(sp)
   8368c:	d9c00717 	ldw	r7,28(sp)
   83690:	1023883a 	mov	r17,r2
   83694:	2089883a 	add	r4,r4,r2
   83698:	388f883a 	add	r7,r7,r2
   8369c:	d9000815 	stw	r4,32(sp)
   836a0:	d9c00715 	stw	r7,28(sp)
   836a4:	003f0106 	br	832ac <_dtoa_r+0xa90>
   836a8:	9005883a 	mov	r2,r18
   836ac:	003ed306 	br	831fc <_dtoa_r+0x9e0>
   836b0:	d8800917 	ldw	r2,36(sp)
   836b4:	00be3516 	blt	zero,r2,82f8c <_dtoa_r+0x770>
   836b8:	1000b61e 	bne	r2,zero,83994 <_dtoa_r+0x1178>
   836bc:	9009883a 	mov	r4,r18
   836c0:	980b883a 	mov	r5,r19
   836c4:	000d883a 	mov	r6,zero
   836c8:	01d00534 	movhi	r7,16404
   836cc:	0088ac80 	call	88ac8 <__muldf3>
   836d0:	d9800317 	ldw	r6,12(sp)
   836d4:	1009883a 	mov	r4,r2
   836d8:	180b883a 	mov	r5,r3
   836dc:	880f883a 	mov	r7,r17
   836e0:	008907c0 	call	8907c <__gedf2>
   836e4:	0029883a 	mov	r20,zero
   836e8:	002b883a 	mov	r21,zero
   836ec:	10007e16 	blt	r2,zero,838e8 <_dtoa_r+0x10cc>
   836f0:	d8802117 	ldw	r2,132(sp)
   836f4:	b82d883a 	mov	r22,r23
   836f8:	0084303a 	nor	r2,zero,r2
   836fc:	d8800615 	stw	r2,24(sp)
   83700:	8009883a 	mov	r4,r16
   83704:	a00b883a 	mov	r5,r20
   83708:	0085cdc0 	call	85cdc <_Bfree>
   8370c:	a83f4b1e 	bne	r21,zero,8343c <_dtoa_r+0xc20>
   83710:	003de306 	br	82ea0 <_dtoa_r+0x684>
   83714:	e00b883a 	mov	r5,fp
   83718:	8009883a 	mov	r4,r16
   8371c:	00862f80 	call	862f8 <__pow5mult>
   83720:	1039883a 	mov	fp,r2
   83724:	003ed206 	br	83270 <_dtoa_r+0xa54>
   83728:	1000021e 	bne	r2,zero,83734 <_dtoa_r+0xf18>
   8372c:	18c0004c 	andi	r3,r3,1
   83730:	183f271e 	bne	r3,zero,833d0 <_dtoa_r+0xbb4>
   83734:	01000c04 	movi	r4,48
   83738:	00000106 	br	83740 <_dtoa_r+0xf24>
   8373c:	102d883a 	mov	r22,r2
   83740:	b0bfffc4 	addi	r2,r22,-1
   83744:	10c00007 	ldb	r3,0(r2)
   83748:	193ffc26 	beq	r3,r4,8373c <_dtoa_r+0xf20>
   8374c:	003f3206 	br	83418 <_dtoa_r+0xbfc>
   83750:	d8c00f17 	ldw	r3,60(sp)
   83754:	18015026 	beq	r3,zero,83c98 <_dtoa_r+0x147c>
   83758:	10810cc4 	addi	r2,r2,1075
   8375c:	dcc00a17 	ldw	r19,40(sp)
   83760:	dc800817 	ldw	r18,32(sp)
   83764:	003e9706 	br	831c4 <_dtoa_r+0x9a8>
   83768:	b807883a 	mov	r3,r23
   8376c:	182b883a 	mov	r21,r3
   83770:	ddc00717 	ldw	r23,28(sp)
   83774:	00800e0e 	bge	zero,r2,837b0 <_dtoa_r+0xf94>
   83778:	e00b883a 	mov	r5,fp
   8377c:	01800044 	movi	r6,1
   83780:	8009883a 	mov	r4,r16
   83784:	d8c01515 	stw	r3,84(sp)
   83788:	00864240 	call	86424 <__lshift>
   8378c:	1009883a 	mov	r4,r2
   83790:	a00b883a 	mov	r5,r20
   83794:	1039883a 	mov	fp,r2
   83798:	00865800 	call	86580 <__mcmp>
   8379c:	d8c01517 	ldw	r3,84(sp)
   837a0:	0081880e 	bge	zero,r2,83dc4 <_dtoa_r+0x15a8>
   837a4:	00800e44 	movi	r2,57
   837a8:	b0c00c44 	addi	r3,r22,49
   837ac:	a8816326 	beq	r21,r2,83d3c <_dtoa_r+0x1520>
   837b0:	90c00005 	stb	r3,0(r18)
   837b4:	95800044 	addi	r22,r18,1
   837b8:	982b883a 	mov	r21,r19
   837bc:	003f1606 	br	83418 <_dtoa_r+0xbfc>
   837c0:	300b883a 	mov	r5,r6
   837c4:	e009883a 	mov	r4,fp
   837c8:	d9801515 	stw	r6,84(sp)
   837cc:	00865800 	call	86580 <__mcmp>
   837d0:	d9801517 	ldw	r6,84(sp)
   837d4:	8009883a 	mov	r4,r16
   837d8:	d8801515 	stw	r2,84(sp)
   837dc:	300b883a 	mov	r5,r6
   837e0:	0085cdc0 	call	85cdc <_Bfree>
   837e4:	d8801517 	ldw	r2,84(sp)
   837e8:	103f6d1e 	bne	r2,zero,835a0 <_dtoa_r+0xd84>
   837ec:	d9c00417 	ldw	r7,16(sp)
   837f0:	383f6b1e 	bne	r7,zero,835a0 <_dtoa_r+0xd84>
   837f4:	d8c00317 	ldw	r3,12(sp)
   837f8:	183f691e 	bne	r3,zero,835a0 <_dtoa_r+0xd84>
   837fc:	b807883a 	mov	r3,r23
   83800:	00800e44 	movi	r2,57
   83804:	ddc00717 	ldw	r23,28(sp)
   83808:	18814c26 	beq	r3,r2,83d3c <_dtoa_r+0x1520>
   8380c:	057fe80e 	bge	zero,r21,837b0 <_dtoa_r+0xf94>
   83810:	b0c00c44 	addi	r3,r22,49
   83814:	003fe606 	br	837b0 <_dtoa_r+0xf94>
   83818:	880b883a 	mov	r5,r17
   8381c:	8009883a 	mov	r4,r16
   83820:	01800284 	movi	r6,10
   83824:	000f883a 	mov	r7,zero
   83828:	0085d040 	call	85d04 <__multadd>
   8382c:	1023883a 	mov	r17,r2
   83830:	1027883a 	mov	r19,r2
   83834:	a825883a 	mov	r18,r21
   83838:	003f4506 	br	83550 <_dtoa_r+0xd34>
   8383c:	e009883a 	mov	r4,fp
   83840:	a00b883a 	mov	r5,r20
   83844:	00865800 	call	86580 <__mcmp>
   83848:	103ebc0e 	bge	r2,zero,8333c <_dtoa_r+0xb20>
   8384c:	e00b883a 	mov	r5,fp
   83850:	8009883a 	mov	r4,r16
   83854:	01800284 	movi	r6,10
   83858:	000f883a 	mov	r7,zero
   8385c:	0085d040 	call	85d04 <__multadd>
   83860:	1039883a 	mov	fp,r2
   83864:	d8800617 	ldw	r2,24(sp)
   83868:	d8c00c17 	ldw	r3,48(sp)
   8386c:	10bfffc4 	addi	r2,r2,-1
   83870:	d8800615 	stw	r2,24(sp)
   83874:	1801571e 	bne	r3,zero,83dd4 <_dtoa_r+0x15b8>
   83878:	d9c00e17 	ldw	r7,56(sp)
   8387c:	d9c00915 	stw	r7,36(sp)
   83880:	003eae06 	br	8333c <_dtoa_r+0xb20>
   83884:	a0800417 	ldw	r2,16(r20)
   83888:	10800104 	addi	r2,r2,4
   8388c:	1085883a 	add	r2,r2,r2
   83890:	1085883a 	add	r2,r2,r2
   83894:	a085883a 	add	r2,r20,r2
   83898:	11000017 	ldw	r4,0(r2)
   8389c:	0085f4c0 	call	85f4c <__hi0bits>
   838a0:	00c00804 	movi	r3,32
   838a4:	1885c83a 	sub	r2,r3,r2
   838a8:	003e8306 	br	832b8 <_dtoa_r+0xa9c>
   838ac:	d9c00417 	ldw	r7,16(sp)
   838b0:	00800084 	movi	r2,2
   838b4:	11fea30e 	bge	r2,r7,83344 <_dtoa_r+0xb28>
   838b8:	d8800917 	ldw	r2,36(sp)
   838bc:	103f8c1e 	bne	r2,zero,836f0 <_dtoa_r+0xed4>
   838c0:	a00b883a 	mov	r5,r20
   838c4:	8009883a 	mov	r4,r16
   838c8:	01800144 	movi	r6,5
   838cc:	000f883a 	mov	r7,zero
   838d0:	0085d040 	call	85d04 <__multadd>
   838d4:	e009883a 	mov	r4,fp
   838d8:	100b883a 	mov	r5,r2
   838dc:	1029883a 	mov	r20,r2
   838e0:	00865800 	call	86580 <__mcmp>
   838e4:	00bf820e 	bge	zero,r2,836f0 <_dtoa_r+0xed4>
   838e8:	00800c44 	movi	r2,49
   838ec:	b8800005 	stb	r2,0(r23)
   838f0:	d8800617 	ldw	r2,24(sp)
   838f4:	bd800044 	addi	r22,r23,1
   838f8:	10800044 	addi	r2,r2,1
   838fc:	d8800615 	stw	r2,24(sp)
   83900:	003f7f06 	br	83700 <_dtoa_r+0xee4>
   83904:	dc000417 	ldw	r16,16(sp)
   83908:	003d6506 	br	82ea0 <_dtoa_r+0x684>
   8390c:	9009883a 	mov	r4,r18
   83910:	008913c0 	call	8913c <__floatsidf>
   83914:	1009883a 	mov	r4,r2
   83918:	180b883a 	mov	r5,r3
   8391c:	980d883a 	mov	r6,r19
   83920:	a00f883a 	mov	r7,r20
   83924:	0088ac80 	call	88ac8 <__muldf3>
   83928:	1009883a 	mov	r4,r2
   8392c:	180b883a 	mov	r5,r3
   83930:	000d883a 	mov	r6,zero
   83934:	01d00734 	movhi	r7,16412
   83938:	0088a140 	call	88a14 <__adddf3>
   8393c:	057f3034 	movhi	r21,64704
   83940:	1025883a 	mov	r18,r2
   83944:	1d6b883a 	add	r21,r3,r21
   83948:	9809883a 	mov	r4,r19
   8394c:	a00b883a 	mov	r5,r20
   83950:	000d883a 	mov	r6,zero
   83954:	01d00534 	movhi	r7,16404
   83958:	0088a680 	call	88a68 <__subdf3>
   8395c:	1009883a 	mov	r4,r2
   83960:	180b883a 	mov	r5,r3
   83964:	900d883a 	mov	r6,r18
   83968:	a80f883a 	mov	r7,r21
   8396c:	1027883a 	mov	r19,r2
   83970:	1829883a 	mov	r20,r3
   83974:	00890180 	call	89018 <__gtdf2>
   83978:	00806616 	blt	zero,r2,83b14 <_dtoa_r+0x12f8>
   8397c:	a9e0003c 	xorhi	r7,r21,32768
   83980:	9809883a 	mov	r4,r19
   83984:	a00b883a 	mov	r5,r20
   83988:	900d883a 	mov	r6,r18
   8398c:	00890e00 	call	890e0 <__ltdf2>
   83990:	103d710e 	bge	r2,zero,82f58 <_dtoa_r+0x73c>
   83994:	0029883a 	mov	r20,zero
   83998:	002b883a 	mov	r21,zero
   8399c:	003f5406 	br	836f0 <_dtoa_r+0xed4>
   839a0:	d9800a17 	ldw	r6,40(sp)
   839a4:	e00b883a 	mov	r5,fp
   839a8:	8009883a 	mov	r4,r16
   839ac:	00862f80 	call	862f8 <__pow5mult>
   839b0:	1039883a 	mov	fp,r2
   839b4:	003e2e06 	br	83270 <_dtoa_r+0xa54>
   839b8:	d8000c15 	stw	zero,48(sp)
   839bc:	003f2006 	br	83640 <_dtoa_r+0xe24>
   839c0:	00800044 	movi	r2,1
   839c4:	d8800c15 	stw	r2,48(sp)
   839c8:	003c5d06 	br	82b40 <_dtoa_r+0x324>
   839cc:	d8c00a17 	ldw	r3,40(sp)
   839d0:	d9000b17 	ldw	r4,44(sp)
   839d4:	dcc00a15 	stw	r19,40(sp)
   839d8:	98c5c83a 	sub	r2,r19,r3
   839dc:	2089883a 	add	r4,r4,r2
   839e0:	d9000b15 	stw	r4,44(sp)
   839e4:	0027883a 	mov	r19,zero
   839e8:	003df206 	br	831b4 <_dtoa_r+0x998>
   839ec:	d9000317 	ldw	r4,12(sp)
   839f0:	8829883a 	mov	r20,r17
   839f4:	04800084 	movi	r18,2
   839f8:	d9001015 	stw	r4,64(sp)
   839fc:	003c8106 	br	82c04 <_dtoa_r+0x3e8>
   83a00:	04800044 	movi	r18,1
   83a04:	dc800e15 	stw	r18,56(sp)
   83a08:	dc800915 	stw	r18,36(sp)
   83a0c:	dc802115 	stw	r18,132(sp)
   83a10:	003f1206 	br	8365c <_dtoa_r+0xe40>
   83a14:	d8800617 	ldw	r2,24(sp)
   83a18:	00abc83a 	sub	r21,zero,r2
   83a1c:	a800a426 	beq	r21,zero,83cb0 <_dtoa_r+0x1494>
   83a20:	a88003cc 	andi	r2,r21,15
   83a24:	100490fa 	slli	r2,r2,3
   83a28:	00c00274 	movhi	r3,9
   83a2c:	18f17104 	addi	r3,r3,-14908
   83a30:	d9000317 	ldw	r4,12(sp)
   83a34:	1885883a 	add	r2,r3,r2
   83a38:	11800017 	ldw	r6,0(r2)
   83a3c:	11c00117 	ldw	r7,4(r2)
   83a40:	a82bd13a 	srai	r21,r21,4
   83a44:	880b883a 	mov	r5,r17
   83a48:	0088ac80 	call	88ac8 <__muldf3>
   83a4c:	1027883a 	mov	r19,r2
   83a50:	1829883a 	mov	r20,r3
   83a54:	a800e826 	beq	r21,zero,83df8 <_dtoa_r+0x15dc>
   83a58:	05800274 	movhi	r22,9
   83a5c:	b5b16704 	addi	r22,r22,-14948
   83a60:	04800084 	movi	r18,2
   83a64:	a980004c 	andi	r6,r21,1
   83a68:	1009883a 	mov	r4,r2
   83a6c:	a82bd07a 	srai	r21,r21,1
   83a70:	180b883a 	mov	r5,r3
   83a74:	30000426 	beq	r6,zero,83a88 <_dtoa_r+0x126c>
   83a78:	b1800017 	ldw	r6,0(r22)
   83a7c:	b1c00117 	ldw	r7,4(r22)
   83a80:	94800044 	addi	r18,r18,1
   83a84:	0088ac80 	call	88ac8 <__muldf3>
   83a88:	b5800204 	addi	r22,r22,8
   83a8c:	a83ff51e 	bne	r21,zero,83a64 <_dtoa_r+0x1248>
   83a90:	1027883a 	mov	r19,r2
   83a94:	1829883a 	mov	r20,r3
   83a98:	003c7306 	br	82c68 <_dtoa_r+0x44c>
   83a9c:	21000044 	addi	r4,r4,1
   83aa0:	11000005 	stb	r4,0(r2)
   83aa4:	003e5c06 	br	83418 <_dtoa_r+0xbfc>
   83aa8:	a9400117 	ldw	r5,4(r21)
   83aac:	8009883a 	mov	r4,r16
   83ab0:	0085c340 	call	85c34 <_Balloc>
   83ab4:	a9800417 	ldw	r6,16(r21)
   83ab8:	11000304 	addi	r4,r2,12
   83abc:	a9400304 	addi	r5,r21,12
   83ac0:	31800084 	addi	r6,r6,2
   83ac4:	318d883a 	add	r6,r6,r6
   83ac8:	318d883a 	add	r6,r6,r6
   83acc:	1023883a 	mov	r17,r2
   83ad0:	008588c0 	call	8588c <memcpy>
   83ad4:	8009883a 	mov	r4,r16
   83ad8:	880b883a 	mov	r5,r17
   83adc:	01800044 	movi	r6,1
   83ae0:	00864240 	call	86424 <__lshift>
   83ae4:	1027883a 	mov	r19,r2
   83ae8:	003e8f06 	br	83528 <_dtoa_r+0xd0c>
   83aec:	b807883a 	mov	r3,r23
   83af0:	00800e44 	movi	r2,57
   83af4:	ddc00717 	ldw	r23,28(sp)
   83af8:	18809026 	beq	r3,r2,83d3c <_dtoa_r+0x1520>
   83afc:	18c00044 	addi	r3,r3,1
   83b00:	003f2b06 	br	837b0 <_dtoa_r+0xf94>
   83b04:	b807883a 	mov	r3,r23
   83b08:	982b883a 	mov	r21,r19
   83b0c:	ddc00717 	ldw	r23,28(sp)
   83b10:	003e2406 	br	833a4 <_dtoa_r+0xb88>
   83b14:	0029883a 	mov	r20,zero
   83b18:	002b883a 	mov	r21,zero
   83b1c:	003f7206 	br	838e8 <_dtoa_r+0x10cc>
   83b20:	593fffc4 	addi	r4,r11,-1
   83b24:	200490fa 	slli	r2,r4,3
   83b28:	00c00274 	movhi	r3,9
   83b2c:	18f17104 	addi	r3,r3,-14908
   83b30:	d9001015 	stw	r4,64(sp)
   83b34:	1885883a 	add	r2,r3,r2
   83b38:	11000017 	ldw	r4,0(r2)
   83b3c:	11400117 	ldw	r5,4(r2)
   83b40:	900d883a 	mov	r6,r18
   83b44:	a80f883a 	mov	r7,r21
   83b48:	dac01615 	stw	r11,88(sp)
   83b4c:	0088ac80 	call	88ac8 <__muldf3>
   83b50:	a00b883a 	mov	r5,r20
   83b54:	9809883a 	mov	r4,r19
   83b58:	d8c01215 	stw	r3,72(sp)
   83b5c:	d8801115 	stw	r2,68(sp)
   83b60:	00892100 	call	89210 <__fixdfsi>
   83b64:	1009883a 	mov	r4,r2
   83b68:	1025883a 	mov	r18,r2
   83b6c:	008913c0 	call	8913c <__floatsidf>
   83b70:	9809883a 	mov	r4,r19
   83b74:	a00b883a 	mov	r5,r20
   83b78:	100d883a 	mov	r6,r2
   83b7c:	180f883a 	mov	r7,r3
   83b80:	94800c04 	addi	r18,r18,48
   83b84:	0088a680 	call	88a68 <__subdf3>
   83b88:	bc800005 	stb	r18,0(r23)
   83b8c:	dac01617 	ldw	r11,88(sp)
   83b90:	102b883a 	mov	r21,r2
   83b94:	00800044 	movi	r2,1
   83b98:	bd800044 	addi	r22,r23,1
   83b9c:	1815883a 	mov	r10,r3
   83ba0:	58802226 	beq	r11,r2,83c2c <_dtoa_r+0x1410>
   83ba4:	bad7883a 	add	r11,r23,r11
   83ba8:	dc001415 	stw	r16,80(sp)
   83bac:	a805883a 	mov	r2,r21
   83bb0:	b027883a 	mov	r19,r22
   83bb4:	5821883a 	mov	r16,r11
   83bb8:	882b883a 	mov	r21,r17
   83bbc:	000d883a 	mov	r6,zero
   83bc0:	01d00934 	movhi	r7,16420
   83bc4:	1009883a 	mov	r4,r2
   83bc8:	180b883a 	mov	r5,r3
   83bcc:	0088ac80 	call	88ac8 <__muldf3>
   83bd0:	180b883a 	mov	r5,r3
   83bd4:	1009883a 	mov	r4,r2
   83bd8:	1829883a 	mov	r20,r3
   83bdc:	1023883a 	mov	r17,r2
   83be0:	00892100 	call	89210 <__fixdfsi>
   83be4:	1009883a 	mov	r4,r2
   83be8:	1025883a 	mov	r18,r2
   83bec:	008913c0 	call	8913c <__floatsidf>
   83bf0:	8809883a 	mov	r4,r17
   83bf4:	a00b883a 	mov	r5,r20
   83bf8:	100d883a 	mov	r6,r2
   83bfc:	180f883a 	mov	r7,r3
   83c00:	94800c04 	addi	r18,r18,48
   83c04:	0088a680 	call	88a68 <__subdf3>
   83c08:	9cc00044 	addi	r19,r19,1
   83c0c:	9cbfffc5 	stb	r18,-1(r19)
   83c10:	9c3fea1e 	bne	r19,r16,83bbc <_dtoa_r+0x13a0>
   83c14:	1815883a 	mov	r10,r3
   83c18:	d8c01017 	ldw	r3,64(sp)
   83c1c:	dc001417 	ldw	r16,80(sp)
   83c20:	a823883a 	mov	r17,r21
   83c24:	b0ed883a 	add	r22,r22,r3
   83c28:	102b883a 	mov	r21,r2
   83c2c:	d9001117 	ldw	r4,68(sp)
   83c30:	d9401217 	ldw	r5,72(sp)
   83c34:	000d883a 	mov	r6,zero
   83c38:	01cff834 	movhi	r7,16352
   83c3c:	da801515 	stw	r10,84(sp)
   83c40:	0088a140 	call	88a14 <__adddf3>
   83c44:	da801517 	ldw	r10,84(sp)
   83c48:	1009883a 	mov	r4,r2
   83c4c:	180b883a 	mov	r5,r3
   83c50:	500f883a 	mov	r7,r10
   83c54:	a80d883a 	mov	r6,r21
   83c58:	00890e00 	call	890e0 <__ltdf2>
   83c5c:	da801517 	ldw	r10,84(sp)
   83c60:	10003b0e 	bge	r2,zero,83d50 <_dtoa_r+0x1534>
   83c64:	d9c01317 	ldw	r7,76(sp)
   83c68:	b53fffc3 	ldbu	r20,-1(r22)
   83c6c:	d9c00615 	stw	r7,24(sp)
   83c70:	003d3106 	br	83138 <_dtoa_r+0x91c>
   83c74:	d8800817 	ldw	r2,32(sp)
   83c78:	11e5c83a 	sub	r18,r2,r7
   83c7c:	0005883a 	mov	r2,zero
   83c80:	003d5006 	br	831c4 <_dtoa_r+0x9a8>
   83c84:	05800044 	movi	r22,1
   83c88:	003dc406 	br	8339c <_dtoa_r+0xb80>
   83c8c:	a5000044 	addi	r20,r20,1
   83c90:	15000005 	stb	r20,0(r2)
   83c94:	003c8206 	br	82ea0 <_dtoa_r+0x684>
   83c98:	d8800217 	ldw	r2,8(sp)
   83c9c:	00c00d84 	movi	r3,54
   83ca0:	dcc00a17 	ldw	r19,40(sp)
   83ca4:	1885c83a 	sub	r2,r3,r2
   83ca8:	dc800817 	ldw	r18,32(sp)
   83cac:	003d4506 	br	831c4 <_dtoa_r+0x9a8>
   83cb0:	dcc00317 	ldw	r19,12(sp)
   83cb4:	8829883a 	mov	r20,r17
   83cb8:	04800084 	movi	r18,2
   83cbc:	003bea06 	br	82c68 <_dtoa_r+0x44c>
   83cc0:	d9000917 	ldw	r4,36(sp)
   83cc4:	203f1126 	beq	r4,zero,8390c <_dtoa_r+0x10f0>
   83cc8:	d9c00e17 	ldw	r7,56(sp)
   83ccc:	01fca20e 	bge	zero,r7,82f58 <_dtoa_r+0x73c>
   83cd0:	a00b883a 	mov	r5,r20
   83cd4:	9809883a 	mov	r4,r19
   83cd8:	000d883a 	mov	r6,zero
   83cdc:	01d00934 	movhi	r7,16420
   83ce0:	0088ac80 	call	88ac8 <__muldf3>
   83ce4:	91000044 	addi	r4,r18,1
   83ce8:	1027883a 	mov	r19,r2
   83cec:	1829883a 	mov	r20,r3
   83cf0:	008913c0 	call	8913c <__floatsidf>
   83cf4:	9809883a 	mov	r4,r19
   83cf8:	a00b883a 	mov	r5,r20
   83cfc:	100d883a 	mov	r6,r2
   83d00:	180f883a 	mov	r7,r3
   83d04:	0088ac80 	call	88ac8 <__muldf3>
   83d08:	1009883a 	mov	r4,r2
   83d0c:	180b883a 	mov	r5,r3
   83d10:	000d883a 	mov	r6,zero
   83d14:	01d00734 	movhi	r7,16412
   83d18:	0088a140 	call	88a14 <__adddf3>
   83d1c:	1025883a 	mov	r18,r2
   83d20:	d8800617 	ldw	r2,24(sp)
   83d24:	057f3034 	movhi	r21,64704
   83d28:	1d6b883a 	add	r21,r3,r21
   83d2c:	10bfffc4 	addi	r2,r2,-1
   83d30:	d8801315 	stw	r2,76(sp)
   83d34:	dac00e17 	ldw	r11,56(sp)
   83d38:	003be706 	br	82cd8 <_dtoa_r+0x4bc>
   83d3c:	01000e44 	movi	r4,57
   83d40:	91000005 	stb	r4,0(r18)
   83d44:	95800044 	addi	r22,r18,1
   83d48:	982b883a 	mov	r21,r19
   83d4c:	003da106 	br	833d4 <_dtoa_r+0xbb8>
   83d50:	d9801117 	ldw	r6,68(sp)
   83d54:	d9c01217 	ldw	r7,72(sp)
   83d58:	0009883a 	mov	r4,zero
   83d5c:	014ff834 	movhi	r5,16352
   83d60:	da801515 	stw	r10,84(sp)
   83d64:	0088a680 	call	88a68 <__subdf3>
   83d68:	da801517 	ldw	r10,84(sp)
   83d6c:	1009883a 	mov	r4,r2
   83d70:	180b883a 	mov	r5,r3
   83d74:	a80d883a 	mov	r6,r21
   83d78:	500f883a 	mov	r7,r10
   83d7c:	00890180 	call	89018 <__gtdf2>
   83d80:	00bc750e 	bge	zero,r2,82f58 <_dtoa_r+0x73c>
   83d84:	01000c04 	movi	r4,48
   83d88:	00000106 	br	83d90 <_dtoa_r+0x1574>
   83d8c:	102d883a 	mov	r22,r2
   83d90:	b0bfffc4 	addi	r2,r22,-1
   83d94:	10c00007 	ldb	r3,0(r2)
   83d98:	193ffc26 	beq	r3,r4,83d8c <_dtoa_r+0x1570>
   83d9c:	d8801317 	ldw	r2,76(sp)
   83da0:	d8800615 	stw	r2,24(sp)
   83da4:	003c3e06 	br	82ea0 <_dtoa_r+0x684>
   83da8:	d9001317 	ldw	r4,76(sp)
   83dac:	df001117 	ldw	fp,68(sp)
   83db0:	d9000615 	stw	r4,24(sp)
   83db4:	003ce006 	br	83138 <_dtoa_r+0x91c>
   83db8:	df001117 	ldw	fp,68(sp)
   83dbc:	dc401217 	ldw	r17,72(sp)
   83dc0:	003c6506 	br	82f58 <_dtoa_r+0x73c>
   83dc4:	103e7a1e 	bne	r2,zero,837b0 <_dtoa_r+0xf94>
   83dc8:	1880004c 	andi	r2,r3,1
   83dcc:	103e7826 	beq	r2,zero,837b0 <_dtoa_r+0xf94>
   83dd0:	003e7406 	br	837a4 <_dtoa_r+0xf88>
   83dd4:	8009883a 	mov	r4,r16
   83dd8:	a80b883a 	mov	r5,r21
   83ddc:	01800284 	movi	r6,10
   83de0:	000f883a 	mov	r7,zero
   83de4:	0085d040 	call	85d04 <__multadd>
   83de8:	d9000e17 	ldw	r4,56(sp)
   83dec:	102b883a 	mov	r21,r2
   83df0:	d9000915 	stw	r4,36(sp)
   83df4:	003d5106 	br	8333c <_dtoa_r+0xb20>
   83df8:	04800084 	movi	r18,2
   83dfc:	003b9a06 	br	82c68 <_dtoa_r+0x44c>
   83e00:	d8c01317 	ldw	r3,76(sp)
   83e04:	d8c00615 	stw	r3,24(sp)
   83e08:	003ccb06 	br	83138 <_dtoa_r+0x91c>
   83e0c:	d8c01317 	ldw	r3,76(sp)
   83e10:	d8c00615 	stw	r3,24(sp)
   83e14:	003c2206 	br	82ea0 <_dtoa_r+0x684>
   83e18:	20fd3826 	beq	r4,r3,832fc <_dtoa_r+0xae0>
   83e1c:	00c00f04 	movi	r3,60
   83e20:	1885c83a 	sub	r2,r3,r2
   83e24:	003da906 	br	834cc <_dtoa_r+0xcb0>
   83e28:	000b883a 	mov	r5,zero
   83e2c:	003b5406 	br	82b80 <_dtoa_r+0x364>
   83e30:	04c00044 	movi	r19,1
   83e34:	003b3b06 	br	82b24 <_dtoa_r+0x308>

00083e38 <_fflush_r>:
   83e38:	defffb04 	addi	sp,sp,-20
   83e3c:	dcc00315 	stw	r19,12(sp)
   83e40:	dc400115 	stw	r17,4(sp)
   83e44:	dfc00415 	stw	ra,16(sp)
   83e48:	dc800215 	stw	r18,8(sp)
   83e4c:	dc000015 	stw	r16,0(sp)
   83e50:	2027883a 	mov	r19,r4
   83e54:	2823883a 	mov	r17,r5
   83e58:	20000226 	beq	r4,zero,83e64 <_fflush_r+0x2c>
   83e5c:	20800e17 	ldw	r2,56(r4)
   83e60:	10005726 	beq	r2,zero,83fc0 <_fflush_r+0x188>
   83e64:	8880030b 	ldhu	r2,12(r17)
   83e68:	10c0020c 	andi	r3,r2,8
   83e6c:	18ffffcc 	andi	r3,r3,65535
   83e70:	18e0001c 	xori	r3,r3,32768
   83e74:	18e00004 	addi	r3,r3,-32768
   83e78:	1800311e 	bne	r3,zero,83f40 <_fflush_r+0x108>
   83e7c:	89000117 	ldw	r4,4(r17)
   83e80:	10c20014 	ori	r3,r2,2048
   83e84:	88c0030d 	sth	r3,12(r17)
   83e88:	180b883a 	mov	r5,r3
   83e8c:	0100520e 	bge	zero,r4,83fd8 <_fflush_r+0x1a0>
   83e90:	88c00a17 	ldw	r3,40(r17)
   83e94:	18002226 	beq	r3,zero,83f20 <_fflush_r+0xe8>
   83e98:	1084000c 	andi	r2,r2,4096
   83e9c:	10bfffcc 	andi	r2,r2,65535
   83ea0:	10a0001c 	xori	r2,r2,32768
   83ea4:	10a00004 	addi	r2,r2,-32768
   83ea8:	10004e26 	beq	r2,zero,83fe4 <_fflush_r+0x1ac>
   83eac:	8c001417 	ldw	r16,80(r17)
   83eb0:	2940010c 	andi	r5,r5,4
   83eb4:	297fffcc 	andi	r5,r5,65535
   83eb8:	2960001c 	xori	r5,r5,32768
   83ebc:	29600004 	addi	r5,r5,-32768
   83ec0:	28000626 	beq	r5,zero,83edc <_fflush_r+0xa4>
   83ec4:	89000117 	ldw	r4,4(r17)
   83ec8:	88800c17 	ldw	r2,48(r17)
   83ecc:	8121c83a 	sub	r16,r16,r4
   83ed0:	10000226 	beq	r2,zero,83edc <_fflush_r+0xa4>
   83ed4:	88800f17 	ldw	r2,60(r17)
   83ed8:	80a1c83a 	sub	r16,r16,r2
   83edc:	89400717 	ldw	r5,28(r17)
   83ee0:	9809883a 	mov	r4,r19
   83ee4:	800d883a 	mov	r6,r16
   83ee8:	000f883a 	mov	r7,zero
   83eec:	183ee83a 	callr	r3
   83ef0:	8080281e 	bne	r16,r2,83f94 <_fflush_r+0x15c>
   83ef4:	8880030b 	ldhu	r2,12(r17)
   83ef8:	88c00417 	ldw	r3,16(r17)
   83efc:	88000115 	stw	zero,4(r17)
   83f00:	113dffcc 	andi	r4,r2,63487
   83f04:	1084000c 	andi	r2,r2,4096
   83f08:	10bfffcc 	andi	r2,r2,65535
   83f0c:	10a0001c 	xori	r2,r2,32768
   83f10:	8900030d 	sth	r4,12(r17)
   83f14:	88c00015 	stw	r3,0(r17)
   83f18:	10a00004 	addi	r2,r2,-32768
   83f1c:	10002c1e 	bne	r2,zero,83fd0 <_fflush_r+0x198>
   83f20:	0005883a 	mov	r2,zero
   83f24:	dfc00417 	ldw	ra,16(sp)
   83f28:	dcc00317 	ldw	r19,12(sp)
   83f2c:	dc800217 	ldw	r18,8(sp)
   83f30:	dc400117 	ldw	r17,4(sp)
   83f34:	dc000017 	ldw	r16,0(sp)
   83f38:	dec00504 	addi	sp,sp,20
   83f3c:	f800283a 	ret
   83f40:	8c800417 	ldw	r18,16(r17)
   83f44:	903ff626 	beq	r18,zero,83f20 <_fflush_r+0xe8>
   83f48:	8c000017 	ldw	r16,0(r17)
   83f4c:	108000cc 	andi	r2,r2,3
   83f50:	8c800015 	stw	r18,0(r17)
   83f54:	84a1c83a 	sub	r16,r16,r18
   83f58:	10001b1e 	bne	r2,zero,83fc8 <_fflush_r+0x190>
   83f5c:	88800517 	ldw	r2,20(r17)
   83f60:	88800215 	stw	r2,8(r17)
   83f64:	04000316 	blt	zero,r16,83f74 <_fflush_r+0x13c>
   83f68:	003fed06 	br	83f20 <_fflush_r+0xe8>
   83f6c:	90a5883a 	add	r18,r18,r2
   83f70:	043feb0e 	bge	zero,r16,83f20 <_fflush_r+0xe8>
   83f74:	88800917 	ldw	r2,36(r17)
   83f78:	89400717 	ldw	r5,28(r17)
   83f7c:	800f883a 	mov	r7,r16
   83f80:	900d883a 	mov	r6,r18
   83f84:	9809883a 	mov	r4,r19
   83f88:	103ee83a 	callr	r2
   83f8c:	80a1c83a 	sub	r16,r16,r2
   83f90:	00bff616 	blt	zero,r2,83f6c <_fflush_r+0x134>
   83f94:	88c0030b 	ldhu	r3,12(r17)
   83f98:	00bfffc4 	movi	r2,-1
   83f9c:	18c01014 	ori	r3,r3,64
   83fa0:	88c0030d 	sth	r3,12(r17)
   83fa4:	dfc00417 	ldw	ra,16(sp)
   83fa8:	dcc00317 	ldw	r19,12(sp)
   83fac:	dc800217 	ldw	r18,8(sp)
   83fb0:	dc400117 	ldw	r17,4(sp)
   83fb4:	dc000017 	ldw	r16,0(sp)
   83fb8:	dec00504 	addi	sp,sp,20
   83fbc:	f800283a 	ret
   83fc0:	00840f40 	call	840f4 <__sinit>
   83fc4:	003fa706 	br	83e64 <_fflush_r+0x2c>
   83fc8:	0005883a 	mov	r2,zero
   83fcc:	003fe406 	br	83f60 <_fflush_r+0x128>
   83fd0:	8c001415 	stw	r16,80(r17)
   83fd4:	003fd206 	br	83f20 <_fflush_r+0xe8>
   83fd8:	88c00f17 	ldw	r3,60(r17)
   83fdc:	00ffac16 	blt	zero,r3,83e90 <_fflush_r+0x58>
   83fe0:	003fcf06 	br	83f20 <_fflush_r+0xe8>
   83fe4:	89400717 	ldw	r5,28(r17)
   83fe8:	9809883a 	mov	r4,r19
   83fec:	000d883a 	mov	r6,zero
   83ff0:	01c00044 	movi	r7,1
   83ff4:	183ee83a 	callr	r3
   83ff8:	1021883a 	mov	r16,r2
   83ffc:	00bfffc4 	movi	r2,-1
   84000:	80800326 	beq	r16,r2,84010 <_fflush_r+0x1d8>
   84004:	8940030b 	ldhu	r5,12(r17)
   84008:	88c00a17 	ldw	r3,40(r17)
   8400c:	003fa806 	br	83eb0 <_fflush_r+0x78>
   84010:	98c00017 	ldw	r3,0(r19)
   84014:	00800744 	movi	r2,29
   84018:	18bfde1e 	bne	r3,r2,83f94 <_fflush_r+0x15c>
   8401c:	003fc006 	br	83f20 <_fflush_r+0xe8>

00084020 <fflush>:
   84020:	200b883a 	mov	r5,r4
   84024:	20000426 	beq	r4,zero,84038 <fflush+0x18>
   84028:	00800274 	movhi	r2,9
   8402c:	10b88004 	addi	r2,r2,-7680
   84030:	11000017 	ldw	r4,0(r2)
   84034:	0083e381 	jmpi	83e38 <_fflush_r>
   84038:	00800274 	movhi	r2,9
   8403c:	10b87f04 	addi	r2,r2,-7684
   84040:	11000017 	ldw	r4,0(r2)
   84044:	01400234 	movhi	r5,8
   84048:	294f8e04 	addi	r5,r5,15928
   8404c:	0084cd41 	jmpi	84cd4 <_fwalk_reent>

00084050 <__fp_lock>:
   84050:	0005883a 	mov	r2,zero
   84054:	f800283a 	ret

00084058 <__fp_unlock>:
   84058:	0005883a 	mov	r2,zero
   8405c:	f800283a 	ret

00084060 <_cleanup_r>:
   84060:	01400234 	movhi	r5,8
   84064:	295e2404 	addi	r5,r5,30864
   84068:	0084c2c1 	jmpi	84c2c <_fwalk>

0008406c <__sfmoreglue>:
   8406c:	defffc04 	addi	sp,sp,-16
   84070:	dc800215 	stw	r18,8(sp)
   84074:	2825883a 	mov	r18,r5
   84078:	dc000015 	stw	r16,0(sp)
   8407c:	01401704 	movi	r5,92
   84080:	2021883a 	mov	r16,r4
   84084:	9009883a 	mov	r4,r18
   84088:	dfc00315 	stw	ra,12(sp)
   8408c:	dc400115 	stw	r17,4(sp)
   84090:	00895300 	call	89530 <__mulsi3>
   84094:	8009883a 	mov	r4,r16
   84098:	11400304 	addi	r5,r2,12
   8409c:	1023883a 	mov	r17,r2
   840a0:	00850100 	call	85010 <_malloc_r>
   840a4:	1021883a 	mov	r16,r2
   840a8:	10000726 	beq	r2,zero,840c8 <__sfmoreglue+0x5c>
   840ac:	11000304 	addi	r4,r2,12
   840b0:	10000015 	stw	zero,0(r2)
   840b4:	14800115 	stw	r18,4(r2)
   840b8:	11000215 	stw	r4,8(r2)
   840bc:	000b883a 	mov	r5,zero
   840c0:	880d883a 	mov	r6,r17
   840c4:	0085b580 	call	85b58 <memset>
   840c8:	8005883a 	mov	r2,r16
   840cc:	dfc00317 	ldw	ra,12(sp)
   840d0:	dc800217 	ldw	r18,8(sp)
   840d4:	dc400117 	ldw	r17,4(sp)
   840d8:	dc000017 	ldw	r16,0(sp)
   840dc:	dec00404 	addi	sp,sp,16
   840e0:	f800283a 	ret

000840e4 <_cleanup>:
   840e4:	00800274 	movhi	r2,9
   840e8:	10b87f04 	addi	r2,r2,-7684
   840ec:	11000017 	ldw	r4,0(r2)
   840f0:	00840601 	jmpi	84060 <_cleanup_r>

000840f4 <__sinit>:
   840f4:	20800e17 	ldw	r2,56(r4)
   840f8:	1000401e 	bne	r2,zero,841fc <__sinit+0x108>
   840fc:	21400117 	ldw	r5,4(r4)
   84100:	01800234 	movhi	r6,8
   84104:	31901804 	addi	r6,r6,16480
   84108:	20c00217 	ldw	r3,8(r4)
   8410c:	21800f15 	stw	r6,60(r4)
   84110:	2080bb04 	addi	r2,r4,748
   84114:	02400044 	movi	r9,1
   84118:	018000c4 	movi	r6,3
   8411c:	2180b915 	stw	r6,740(r4)
   84120:	2080ba15 	stw	r2,744(r4)
   84124:	22400e15 	stw	r9,56(r4)
   84128:	20800317 	ldw	r2,12(r4)
   8412c:	2000b815 	stw	zero,736(r4)
   84130:	02000234 	movhi	r8,8
   84134:	421cd204 	addi	r8,r8,29512
   84138:	01c00234 	movhi	r7,8
   8413c:	39dce704 	addi	r7,r7,29596
   84140:	01800234 	movhi	r6,8
   84144:	319d0904 	addi	r6,r6,29732
   84148:	01000234 	movhi	r4,8
   8414c:	211d2004 	addi	r4,r4,29824
   84150:	02800104 	movi	r10,4
   84154:	28000015 	stw	zero,0(r5)
   84158:	28000115 	stw	zero,4(r5)
   8415c:	28000215 	stw	zero,8(r5)
   84160:	2a80030d 	sth	r10,12(r5)
   84164:	2800038d 	sth	zero,14(r5)
   84168:	28000415 	stw	zero,16(r5)
   8416c:	28000515 	stw	zero,20(r5)
   84170:	28000615 	stw	zero,24(r5)
   84174:	29400715 	stw	r5,28(r5)
   84178:	2a000815 	stw	r8,32(r5)
   8417c:	29c00915 	stw	r7,36(r5)
   84180:	29800a15 	stw	r6,40(r5)
   84184:	29000b15 	stw	r4,44(r5)
   84188:	01400284 	movi	r5,10
   8418c:	18000015 	stw	zero,0(r3)
   84190:	18000115 	stw	zero,4(r3)
   84194:	18000215 	stw	zero,8(r3)
   84198:	1940030d 	sth	r5,12(r3)
   8419c:	1a40038d 	sth	r9,14(r3)
   841a0:	18000415 	stw	zero,16(r3)
   841a4:	18000515 	stw	zero,20(r3)
   841a8:	18000615 	stw	zero,24(r3)
   841ac:	18c00715 	stw	r3,28(r3)
   841b0:	1a000815 	stw	r8,32(r3)
   841b4:	19c00915 	stw	r7,36(r3)
   841b8:	19800a15 	stw	r6,40(r3)
   841bc:	19000b15 	stw	r4,44(r3)
   841c0:	00c00484 	movi	r3,18
   841c4:	10c0030d 	sth	r3,12(r2)
   841c8:	00c00084 	movi	r3,2
   841cc:	10000015 	stw	zero,0(r2)
   841d0:	10000115 	stw	zero,4(r2)
   841d4:	10000215 	stw	zero,8(r2)
   841d8:	10c0038d 	sth	r3,14(r2)
   841dc:	10000415 	stw	zero,16(r2)
   841e0:	10000515 	stw	zero,20(r2)
   841e4:	10000615 	stw	zero,24(r2)
   841e8:	10800715 	stw	r2,28(r2)
   841ec:	12000815 	stw	r8,32(r2)
   841f0:	11c00915 	stw	r7,36(r2)
   841f4:	11800a15 	stw	r6,40(r2)
   841f8:	11000b15 	stw	r4,44(r2)
   841fc:	f800283a 	ret

00084200 <__sfp>:
   84200:	defffc04 	addi	sp,sp,-16
   84204:	00800274 	movhi	r2,9
   84208:	10b87f04 	addi	r2,r2,-7684
   8420c:	dc400115 	stw	r17,4(sp)
   84210:	14400017 	ldw	r17,0(r2)
   84214:	dc800215 	stw	r18,8(sp)
   84218:	dfc00315 	stw	ra,12(sp)
   8421c:	88800e17 	ldw	r2,56(r17)
   84220:	dc000015 	stw	r16,0(sp)
   84224:	2025883a 	mov	r18,r4
   84228:	10002826 	beq	r2,zero,842cc <__sfp+0xcc>
   8422c:	8c40b804 	addi	r17,r17,736
   84230:	043fffc4 	movi	r16,-1
   84234:	89400117 	ldw	r5,4(r17)
   84238:	88800217 	ldw	r2,8(r17)
   8423c:	297fffc4 	addi	r5,r5,-1
   84240:	28000a16 	blt	r5,zero,8426c <__sfp+0x6c>
   84244:	10c0030f 	ldh	r3,12(r2)
   84248:	18000c26 	beq	r3,zero,8427c <__sfp+0x7c>
   8424c:	10c01a04 	addi	r3,r2,104
   84250:	00000206 	br	8425c <__sfp+0x5c>
   84254:	19bfe90f 	ldh	r6,-92(r3)
   84258:	30000826 	beq	r6,zero,8427c <__sfp+0x7c>
   8425c:	297fffc4 	addi	r5,r5,-1
   84260:	18bffd04 	addi	r2,r3,-12
   84264:	18c01704 	addi	r3,r3,92
   84268:	2c3ffa1e 	bne	r5,r16,84254 <__sfp+0x54>
   8426c:	88800017 	ldw	r2,0(r17)
   84270:	10001926 	beq	r2,zero,842d8 <__sfp+0xd8>
   84274:	1023883a 	mov	r17,r2
   84278:	003fee06 	br	84234 <__sfp+0x34>
   8427c:	00ffffc4 	movi	r3,-1
   84280:	10c0038d 	sth	r3,14(r2)
   84284:	00c00044 	movi	r3,1
   84288:	10c0030d 	sth	r3,12(r2)
   8428c:	10000015 	stw	zero,0(r2)
   84290:	10000215 	stw	zero,8(r2)
   84294:	10000115 	stw	zero,4(r2)
   84298:	10000415 	stw	zero,16(r2)
   8429c:	10000515 	stw	zero,20(r2)
   842a0:	10000615 	stw	zero,24(r2)
   842a4:	10000c15 	stw	zero,48(r2)
   842a8:	10000d15 	stw	zero,52(r2)
   842ac:	10001115 	stw	zero,68(r2)
   842b0:	10001215 	stw	zero,72(r2)
   842b4:	dfc00317 	ldw	ra,12(sp)
   842b8:	dc800217 	ldw	r18,8(sp)
   842bc:	dc400117 	ldw	r17,4(sp)
   842c0:	dc000017 	ldw	r16,0(sp)
   842c4:	dec00404 	addi	sp,sp,16
   842c8:	f800283a 	ret
   842cc:	8809883a 	mov	r4,r17
   842d0:	00840f40 	call	840f4 <__sinit>
   842d4:	003fd506 	br	8422c <__sfp+0x2c>
   842d8:	9009883a 	mov	r4,r18
   842dc:	01400104 	movi	r5,4
   842e0:	008406c0 	call	8406c <__sfmoreglue>
   842e4:	88800015 	stw	r2,0(r17)
   842e8:	103fe21e 	bne	r2,zero,84274 <__sfp+0x74>
   842ec:	00800304 	movi	r2,12
   842f0:	90800015 	stw	r2,0(r18)
   842f4:	0005883a 	mov	r2,zero
   842f8:	003fee06 	br	842b4 <__sfp+0xb4>

000842fc <__sfp_lock_acquire>:
   842fc:	f800283a 	ret

00084300 <__sfp_lock_release>:
   84300:	f800283a 	ret

00084304 <__sinit_lock_acquire>:
   84304:	f800283a 	ret

00084308 <__sinit_lock_release>:
   84308:	f800283a 	ret

0008430c <__fp_lock_all>:
   8430c:	00800274 	movhi	r2,9
   84310:	10b88004 	addi	r2,r2,-7680
   84314:	11000017 	ldw	r4,0(r2)
   84318:	01400234 	movhi	r5,8
   8431c:	29501404 	addi	r5,r5,16464
   84320:	0084c2c1 	jmpi	84c2c <_fwalk>

00084324 <__fp_unlock_all>:
   84324:	00800274 	movhi	r2,9
   84328:	10b88004 	addi	r2,r2,-7680
   8432c:	11000017 	ldw	r4,0(r2)
   84330:	01400234 	movhi	r5,8
   84334:	29501604 	addi	r5,r5,16472
   84338:	0084c2c1 	jmpi	84c2c <_fwalk>

0008433c <_malloc_trim_r>:
   8433c:	defffb04 	addi	sp,sp,-20
   84340:	dcc00315 	stw	r19,12(sp)
   84344:	dc800215 	stw	r18,8(sp)
   84348:	dc400115 	stw	r17,4(sp)
   8434c:	dc000015 	stw	r16,0(sp)
   84350:	2827883a 	mov	r19,r5
   84354:	dfc00415 	stw	ra,16(sp)
   84358:	04400274 	movhi	r17,9
   8435c:	8c72fb04 	addi	r17,r17,-13332
   84360:	2021883a 	mov	r16,r4
   84364:	008a1580 	call	8a158 <__malloc_lock>
   84368:	88800217 	ldw	r2,8(r17)
   8436c:	14800117 	ldw	r18,4(r2)
   84370:	00bfff04 	movi	r2,-4
   84374:	90a4703a 	and	r18,r18,r2
   84378:	9083fbc4 	addi	r2,r18,4079
   8437c:	14e7c83a 	sub	r19,r2,r19
   84380:	9826d33a 	srli	r19,r19,12
   84384:	0083ffc4 	movi	r2,4095
   84388:	9cffffc4 	addi	r19,r19,-1
   8438c:	9826933a 	slli	r19,r19,12
   84390:	14c0060e 	bge	r2,r19,843ac <_malloc_trim_r+0x70>
   84394:	8009883a 	mov	r4,r16
   84398:	000b883a 	mov	r5,zero
   8439c:	00872e40 	call	872e4 <_sbrk_r>
   843a0:	88c00217 	ldw	r3,8(r17)
   843a4:	1c87883a 	add	r3,r3,r18
   843a8:	10c00a26 	beq	r2,r3,843d4 <_malloc_trim_r+0x98>
   843ac:	8009883a 	mov	r4,r16
   843b0:	008a1780 	call	8a178 <__malloc_unlock>
   843b4:	0005883a 	mov	r2,zero
   843b8:	dfc00417 	ldw	ra,16(sp)
   843bc:	dcc00317 	ldw	r19,12(sp)
   843c0:	dc800217 	ldw	r18,8(sp)
   843c4:	dc400117 	ldw	r17,4(sp)
   843c8:	dc000017 	ldw	r16,0(sp)
   843cc:	dec00504 	addi	sp,sp,20
   843d0:	f800283a 	ret
   843d4:	8009883a 	mov	r4,r16
   843d8:	04cbc83a 	sub	r5,zero,r19
   843dc:	00872e40 	call	872e4 <_sbrk_r>
   843e0:	00ffffc4 	movi	r3,-1
   843e4:	10c01326 	beq	r2,r3,84434 <_malloc_trim_r+0xf8>
   843e8:	00800274 	movhi	r2,9
   843ec:	10bf3104 	addi	r2,r2,-828
   843f0:	11000017 	ldw	r4,0(r2)
   843f4:	88c00217 	ldw	r3,8(r17)
   843f8:	94e5c83a 	sub	r18,r18,r19
   843fc:	94800054 	ori	r18,r18,1
   84400:	24e7c83a 	sub	r19,r4,r19
   84404:	1c800115 	stw	r18,4(r3)
   84408:	8009883a 	mov	r4,r16
   8440c:	14c00015 	stw	r19,0(r2)
   84410:	008a1780 	call	8a178 <__malloc_unlock>
   84414:	00800044 	movi	r2,1
   84418:	dfc00417 	ldw	ra,16(sp)
   8441c:	dcc00317 	ldw	r19,12(sp)
   84420:	dc800217 	ldw	r18,8(sp)
   84424:	dc400117 	ldw	r17,4(sp)
   84428:	dc000017 	ldw	r16,0(sp)
   8442c:	dec00504 	addi	sp,sp,20
   84430:	f800283a 	ret
   84434:	8009883a 	mov	r4,r16
   84438:	000b883a 	mov	r5,zero
   8443c:	00872e40 	call	872e4 <_sbrk_r>
   84440:	88c00217 	ldw	r3,8(r17)
   84444:	014003c4 	movi	r5,15
   84448:	10c9c83a 	sub	r4,r2,r3
   8444c:	293fd70e 	bge	r5,r4,843ac <_malloc_trim_r+0x70>
   84450:	01400274 	movhi	r5,9
   84454:	29788204 	addi	r5,r5,-7672
   84458:	29400017 	ldw	r5,0(r5)
   8445c:	21000054 	ori	r4,r4,1
   84460:	19000115 	stw	r4,4(r3)
   84464:	1145c83a 	sub	r2,r2,r5
   84468:	01400274 	movhi	r5,9
   8446c:	297f3104 	addi	r5,r5,-828
   84470:	28800015 	stw	r2,0(r5)
   84474:	003fcd06 	br	843ac <_malloc_trim_r+0x70>

00084478 <_free_r>:
   84478:	defffd04 	addi	sp,sp,-12
   8447c:	dc400115 	stw	r17,4(sp)
   84480:	dc000015 	stw	r16,0(sp)
   84484:	dfc00215 	stw	ra,8(sp)
   84488:	2821883a 	mov	r16,r5
   8448c:	2023883a 	mov	r17,r4
   84490:	28004b26 	beq	r5,zero,845c0 <_free_r+0x148>
   84494:	008a1580 	call	8a158 <__malloc_lock>
   84498:	823fff17 	ldw	r8,-4(r16)
   8449c:	00bfff84 	movi	r2,-2
   844a0:	81bffe04 	addi	r6,r16,-8
   844a4:	4084703a 	and	r2,r8,r2
   844a8:	3087883a 	add	r3,r6,r2
   844ac:	01400274 	movhi	r5,9
   844b0:	2972fb04 	addi	r5,r5,-13332
   844b4:	1a400117 	ldw	r9,4(r3)
   844b8:	29000217 	ldw	r4,8(r5)
   844bc:	01ffff04 	movi	r7,-4
   844c0:	49ce703a 	and	r7,r9,r7
   844c4:	20c06526 	beq	r4,r3,8465c <_free_r+0x1e4>
   844c8:	19c00115 	stw	r7,4(r3)
   844cc:	4200004c 	andi	r8,r8,1
   844d0:	40003026 	beq	r8,zero,84594 <_free_r+0x11c>
   844d4:	0009883a 	mov	r4,zero
   844d8:	19d1883a 	add	r8,r3,r7
   844dc:	42000117 	ldw	r8,4(r8)
   844e0:	4200004c 	andi	r8,r8,1
   844e4:	4000061e 	bne	r8,zero,84500 <_free_r+0x88>
   844e8:	11c5883a 	add	r2,r2,r7
   844ec:	19c00217 	ldw	r7,8(r3)
   844f0:	20004e26 	beq	r4,zero,8462c <_free_r+0x1b4>
   844f4:	18c00317 	ldw	r3,12(r3)
   844f8:	38c00315 	stw	r3,12(r7)
   844fc:	19c00215 	stw	r7,8(r3)
   84500:	11c00054 	ori	r7,r2,1
   84504:	3087883a 	add	r3,r6,r2
   84508:	31c00115 	stw	r7,4(r6)
   8450c:	18800015 	stw	r2,0(r3)
   84510:	20001a1e 	bne	r4,zero,8457c <_free_r+0x104>
   84514:	00c07fc4 	movi	r3,511
   84518:	18802e2e 	bgeu	r3,r2,845d4 <_free_r+0x15c>
   8451c:	1006d27a 	srli	r3,r2,9
   84520:	01000104 	movi	r4,4
   84524:	20c06636 	bltu	r4,r3,846c0 <_free_r+0x248>
   84528:	1008d1ba 	srli	r4,r2,6
   8452c:	21000e04 	addi	r4,r4,56
   84530:	210f883a 	add	r7,r4,r4
   84534:	39cf883a 	add	r7,r7,r7
   84538:	39cf883a 	add	r7,r7,r7
   8453c:	29cf883a 	add	r7,r5,r7
   84540:	38c00217 	ldw	r3,8(r7)
   84544:	01400274 	movhi	r5,9
   84548:	2972fb04 	addi	r5,r5,-13332
   8454c:	19c06126 	beq	r3,r7,846d4 <_free_r+0x25c>
   84550:	013fff04 	movi	r4,-4
   84554:	19400117 	ldw	r5,4(r3)
   84558:	290a703a 	and	r5,r5,r4
   8455c:	1140022e 	bgeu	r2,r5,84568 <_free_r+0xf0>
   84560:	18c00217 	ldw	r3,8(r3)
   84564:	38fffb1e 	bne	r7,r3,84554 <_free_r+0xdc>
   84568:	18800317 	ldw	r2,12(r3)
   8456c:	30800315 	stw	r2,12(r6)
   84570:	30c00215 	stw	r3,8(r6)
   84574:	11800215 	stw	r6,8(r2)
   84578:	19800315 	stw	r6,12(r3)
   8457c:	8809883a 	mov	r4,r17
   84580:	dfc00217 	ldw	ra,8(sp)
   84584:	dc400117 	ldw	r17,4(sp)
   84588:	dc000017 	ldw	r16,0(sp)
   8458c:	dec00304 	addi	sp,sp,12
   84590:	008a1781 	jmpi	8a178 <__malloc_unlock>
   84594:	813ffe17 	ldw	r4,-8(r16)
   84598:	2a400204 	addi	r9,r5,8
   8459c:	310dc83a 	sub	r6,r6,r4
   845a0:	32000217 	ldw	r8,8(r6)
   845a4:	1105883a 	add	r2,r2,r4
   845a8:	42404326 	beq	r8,r9,846b8 <_free_r+0x240>
   845ac:	32400317 	ldw	r9,12(r6)
   845b0:	0009883a 	mov	r4,zero
   845b4:	42400315 	stw	r9,12(r8)
   845b8:	4a000215 	stw	r8,8(r9)
   845bc:	003fc606 	br	844d8 <_free_r+0x60>
   845c0:	dfc00217 	ldw	ra,8(sp)
   845c4:	dc400117 	ldw	r17,4(sp)
   845c8:	dc000017 	ldw	r16,0(sp)
   845cc:	dec00304 	addi	sp,sp,12
   845d0:	f800283a 	ret
   845d4:	1004d0fa 	srli	r2,r2,3
   845d8:	02000044 	movi	r8,1
   845dc:	29c00117 	ldw	r7,4(r5)
   845e0:	1087883a 	add	r3,r2,r2
   845e4:	18c7883a 	add	r3,r3,r3
   845e8:	1005d0ba 	srai	r2,r2,2
   845ec:	18c7883a 	add	r3,r3,r3
   845f0:	28c7883a 	add	r3,r5,r3
   845f4:	19000217 	ldw	r4,8(r3)
   845f8:	4084983a 	sll	r2,r8,r2
   845fc:	30c00315 	stw	r3,12(r6)
   84600:	31000215 	stw	r4,8(r6)
   84604:	11c4b03a 	or	r2,r2,r7
   84608:	21800315 	stw	r6,12(r4)
   8460c:	8809883a 	mov	r4,r17
   84610:	28800115 	stw	r2,4(r5)
   84614:	19800215 	stw	r6,8(r3)
   84618:	dfc00217 	ldw	ra,8(sp)
   8461c:	dc400117 	ldw	r17,4(sp)
   84620:	dc000017 	ldw	r16,0(sp)
   84624:	dec00304 	addi	sp,sp,12
   84628:	008a1781 	jmpi	8a178 <__malloc_unlock>
   8462c:	02000274 	movhi	r8,9
   84630:	4232fd04 	addi	r8,r8,-13324
   84634:	3a3faf1e 	bne	r7,r8,844f4 <_free_r+0x7c>
   84638:	29800515 	stw	r6,20(r5)
   8463c:	29800415 	stw	r6,16(r5)
   84640:	11000054 	ori	r4,r2,1
   84644:	3087883a 	add	r3,r6,r2
   84648:	31c00315 	stw	r7,12(r6)
   8464c:	31c00215 	stw	r7,8(r6)
   84650:	31000115 	stw	r4,4(r6)
   84654:	18800015 	stw	r2,0(r3)
   84658:	003fc806 	br	8457c <_free_r+0x104>
   8465c:	4200004c 	andi	r8,r8,1
   84660:	3885883a 	add	r2,r7,r2
   84664:	4000071e 	bne	r8,zero,84684 <_free_r+0x20c>
   84668:	81fffe17 	ldw	r7,-8(r16)
   8466c:	31cdc83a 	sub	r6,r6,r7
   84670:	30c00317 	ldw	r3,12(r6)
   84674:	31000217 	ldw	r4,8(r6)
   84678:	11c5883a 	add	r2,r2,r7
   8467c:	20c00315 	stw	r3,12(r4)
   84680:	19000215 	stw	r4,8(r3)
   84684:	00c00274 	movhi	r3,9
   84688:	18f88304 	addi	r3,r3,-7668
   8468c:	18c00017 	ldw	r3,0(r3)
   84690:	11000054 	ori	r4,r2,1
   84694:	31000115 	stw	r4,4(r6)
   84698:	29800215 	stw	r6,8(r5)
   8469c:	10ffb736 	bltu	r2,r3,8457c <_free_r+0x104>
   846a0:	00800274 	movhi	r2,9
   846a4:	10bf2904 	addi	r2,r2,-860
   846a8:	11400017 	ldw	r5,0(r2)
   846ac:	8809883a 	mov	r4,r17
   846b0:	008433c0 	call	8433c <_malloc_trim_r>
   846b4:	003fb106 	br	8457c <_free_r+0x104>
   846b8:	01000044 	movi	r4,1
   846bc:	003f8606 	br	844d8 <_free_r+0x60>
   846c0:	01000504 	movi	r4,20
   846c4:	20c00b36 	bltu	r4,r3,846f4 <_free_r+0x27c>
   846c8:	190016c4 	addi	r4,r3,91
   846cc:	210f883a 	add	r7,r4,r4
   846d0:	003f9806 	br	84534 <_free_r+0xbc>
   846d4:	2009d0ba 	srai	r4,r4,2
   846d8:	00800044 	movi	r2,1
   846dc:	29c00117 	ldw	r7,4(r5)
   846e0:	1108983a 	sll	r4,r2,r4
   846e4:	1805883a 	mov	r2,r3
   846e8:	21c8b03a 	or	r4,r4,r7
   846ec:	29000115 	stw	r4,4(r5)
   846f0:	003f9e06 	br	8456c <_free_r+0xf4>
   846f4:	01001504 	movi	r4,84
   846f8:	20c00436 	bltu	r4,r3,8470c <_free_r+0x294>
   846fc:	1008d33a 	srli	r4,r2,12
   84700:	21001b84 	addi	r4,r4,110
   84704:	210f883a 	add	r7,r4,r4
   84708:	003f8a06 	br	84534 <_free_r+0xbc>
   8470c:	01005504 	movi	r4,340
   84710:	20c00436 	bltu	r4,r3,84724 <_free_r+0x2ac>
   84714:	1008d3fa 	srli	r4,r2,15
   84718:	21001dc4 	addi	r4,r4,119
   8471c:	210f883a 	add	r7,r4,r4
   84720:	003f8406 	br	84534 <_free_r+0xbc>
   84724:	01015504 	movi	r4,1364
   84728:	20c00436 	bltu	r4,r3,8473c <_free_r+0x2c4>
   8472c:	1008d4ba 	srli	r4,r2,18
   84730:	21001f04 	addi	r4,r4,124
   84734:	210f883a 	add	r7,r4,r4
   84738:	003f7e06 	br	84534 <_free_r+0xbc>
   8473c:	01c03f04 	movi	r7,252
   84740:	01001f84 	movi	r4,126
   84744:	003f7b06 	br	84534 <_free_r+0xbc>

00084748 <__sfvwrite_r>:
   84748:	30800217 	ldw	r2,8(r6)
   8474c:	defff504 	addi	sp,sp,-44
   84750:	dd400615 	stw	r21,24(sp)
   84754:	dd000515 	stw	r20,20(sp)
   84758:	dc000115 	stw	r16,4(sp)
   8475c:	dfc00a15 	stw	ra,40(sp)
   84760:	df000915 	stw	fp,36(sp)
   84764:	ddc00815 	stw	r23,32(sp)
   84768:	dd800715 	stw	r22,28(sp)
   8476c:	dcc00415 	stw	r19,16(sp)
   84770:	dc800315 	stw	r18,12(sp)
   84774:	dc400215 	stw	r17,8(sp)
   84778:	3029883a 	mov	r20,r6
   8477c:	202b883a 	mov	r21,r4
   84780:	2821883a 	mov	r16,r5
   84784:	10002126 	beq	r2,zero,8480c <__sfvwrite_r+0xc4>
   84788:	2880030b 	ldhu	r2,12(r5)
   8478c:	10c0020c 	andi	r3,r2,8
   84790:	18ffffcc 	andi	r3,r3,65535
   84794:	18e0001c 	xori	r3,r3,32768
   84798:	18e00004 	addi	r3,r3,-32768
   8479c:	18002826 	beq	r3,zero,84840 <__sfvwrite_r+0xf8>
   847a0:	28c00417 	ldw	r3,16(r5)
   847a4:	18002626 	beq	r3,zero,84840 <__sfvwrite_r+0xf8>
   847a8:	10c0008c 	andi	r3,r2,2
   847ac:	18ffffcc 	andi	r3,r3,65535
   847b0:	18e0001c 	xori	r3,r3,32768
   847b4:	18e00004 	addi	r3,r3,-32768
   847b8:	a4400017 	ldw	r17,0(r20)
   847bc:	18002b26 	beq	r3,zero,8486c <__sfvwrite_r+0x124>
   847c0:	0027883a 	mov	r19,zero
   847c4:	0025883a 	mov	r18,zero
   847c8:	05810004 	movi	r22,1024
   847cc:	980d883a 	mov	r6,r19
   847d0:	a809883a 	mov	r4,r21
   847d4:	90004f26 	beq	r18,zero,84914 <__sfvwrite_r+0x1cc>
   847d8:	900f883a 	mov	r7,r18
   847dc:	81400717 	ldw	r5,28(r16)
   847e0:	b480012e 	bgeu	r22,r18,847e8 <__sfvwrite_r+0xa0>
   847e4:	01c10004 	movi	r7,1024
   847e8:	80800917 	ldw	r2,36(r16)
   847ec:	103ee83a 	callr	r2
   847f0:	0080540e 	bge	zero,r2,84944 <__sfvwrite_r+0x1fc>
   847f4:	a0c00217 	ldw	r3,8(r20)
   847f8:	98a7883a 	add	r19,r19,r2
   847fc:	90a5c83a 	sub	r18,r18,r2
   84800:	1885c83a 	sub	r2,r3,r2
   84804:	a0800215 	stw	r2,8(r20)
   84808:	103ff01e 	bne	r2,zero,847cc <__sfvwrite_r+0x84>
   8480c:	0005883a 	mov	r2,zero
   84810:	dfc00a17 	ldw	ra,40(sp)
   84814:	df000917 	ldw	fp,36(sp)
   84818:	ddc00817 	ldw	r23,32(sp)
   8481c:	dd800717 	ldw	r22,28(sp)
   84820:	dd400617 	ldw	r21,24(sp)
   84824:	dd000517 	ldw	r20,20(sp)
   84828:	dcc00417 	ldw	r19,16(sp)
   8482c:	dc800317 	ldw	r18,12(sp)
   84830:	dc400217 	ldw	r17,8(sp)
   84834:	dc000117 	ldw	r16,4(sp)
   84838:	dec00b04 	addi	sp,sp,44
   8483c:	f800283a 	ret
   84840:	a809883a 	mov	r4,r21
   84844:	800b883a 	mov	r5,r16
   84848:	008246c0 	call	8246c <__swsetup_r>
   8484c:	1000f01e 	bne	r2,zero,84c10 <__sfvwrite_r+0x4c8>
   84850:	8080030b 	ldhu	r2,12(r16)
   84854:	a4400017 	ldw	r17,0(r20)
   84858:	10c0008c 	andi	r3,r2,2
   8485c:	18ffffcc 	andi	r3,r3,65535
   84860:	18e0001c 	xori	r3,r3,32768
   84864:	18e00004 	addi	r3,r3,-32768
   84868:	183fd51e 	bne	r3,zero,847c0 <__sfvwrite_r+0x78>
   8486c:	10c0004c 	andi	r3,r2,1
   84870:	002d883a 	mov	r22,zero
   84874:	1800381e 	bne	r3,zero,84958 <__sfvwrite_r+0x210>
   84878:	0025883a 	mov	r18,zero
   8487c:	90002126 	beq	r18,zero,84904 <__sfvwrite_r+0x1bc>
   84880:	10c0800c 	andi	r3,r2,512
   84884:	18ffffcc 	andi	r3,r3,65535
   84888:	18e0001c 	xori	r3,r3,32768
   8488c:	18e00004 	addi	r3,r3,-32768
   84890:	84c00217 	ldw	r19,8(r16)
   84894:	18006b26 	beq	r3,zero,84a44 <__sfvwrite_r+0x2fc>
   84898:	980f883a 	mov	r7,r19
   8489c:	94c08636 	bltu	r18,r19,84ab8 <__sfvwrite_r+0x370>
   848a0:	10c1200c 	andi	r3,r2,1152
   848a4:	18009f1e 	bne	r3,zero,84b24 <__sfvwrite_r+0x3dc>
   848a8:	81000017 	ldw	r4,0(r16)
   848ac:	982f883a 	mov	r23,r19
   848b0:	9039883a 	mov	fp,r18
   848b4:	9027883a 	mov	r19,r18
   848b8:	380d883a 	mov	r6,r7
   848bc:	b00b883a 	mov	r5,r22
   848c0:	d9c00015 	stw	r7,0(sp)
   848c4:	00859cc0 	call	859cc <memmove>
   848c8:	d9c00017 	ldw	r7,0(sp)
   848cc:	81000217 	ldw	r4,8(r16)
   848d0:	80800017 	ldw	r2,0(r16)
   848d4:	25efc83a 	sub	r23,r4,r23
   848d8:	11cf883a 	add	r7,r2,r7
   848dc:	85c00215 	stw	r23,8(r16)
   848e0:	81c00015 	stw	r7,0(r16)
   848e4:	a0800217 	ldw	r2,8(r20)
   848e8:	b72d883a 	add	r22,r22,fp
   848ec:	9725c83a 	sub	r18,r18,fp
   848f0:	14e7c83a 	sub	r19,r2,r19
   848f4:	a4c00215 	stw	r19,8(r20)
   848f8:	983fc426 	beq	r19,zero,8480c <__sfvwrite_r+0xc4>
   848fc:	8080030b 	ldhu	r2,12(r16)
   84900:	903fdf1e 	bne	r18,zero,84880 <__sfvwrite_r+0x138>
   84904:	8d800017 	ldw	r22,0(r17)
   84908:	8c800117 	ldw	r18,4(r17)
   8490c:	8c400204 	addi	r17,r17,8
   84910:	003fda06 	br	8487c <__sfvwrite_r+0x134>
   84914:	8cc00017 	ldw	r19,0(r17)
   84918:	8c800117 	ldw	r18,4(r17)
   8491c:	8c400204 	addi	r17,r17,8
   84920:	003faa06 	br	847cc <__sfvwrite_r+0x84>
   84924:	0086c840 	call	86c84 <_realloc_r>
   84928:	102f883a 	mov	r23,r2
   8492c:	10009f1e 	bne	r2,zero,84bac <__sfvwrite_r+0x464>
   84930:	81400417 	ldw	r5,16(r16)
   84934:	a809883a 	mov	r4,r21
   84938:	00844780 	call	84478 <_free_r>
   8493c:	00800304 	movi	r2,12
   84940:	a8800015 	stw	r2,0(r21)
   84944:	80c0030b 	ldhu	r3,12(r16)
   84948:	00bfffc4 	movi	r2,-1
   8494c:	18c01014 	ori	r3,r3,64
   84950:	80c0030d 	sth	r3,12(r16)
   84954:	003fae06 	br	84810 <__sfvwrite_r+0xc8>
   84958:	0007883a 	mov	r3,zero
   8495c:	0039883a 	mov	fp,zero
   84960:	0025883a 	mov	r18,zero
   84964:	90001e26 	beq	r18,zero,849e0 <__sfvwrite_r+0x298>
   84968:	18006526 	beq	r3,zero,84b00 <__sfvwrite_r+0x3b8>
   8496c:	b02f883a 	mov	r23,r22
   84970:	9580012e 	bgeu	r18,r22,84978 <__sfvwrite_r+0x230>
   84974:	902f883a 	mov	r23,r18
   84978:	81000017 	ldw	r4,0(r16)
   8497c:	80800417 	ldw	r2,16(r16)
   84980:	84c00217 	ldw	r19,8(r16)
   84984:	81c00517 	ldw	r7,20(r16)
   84988:	1100022e 	bgeu	r2,r4,84994 <__sfvwrite_r+0x24c>
   8498c:	99e7883a 	add	r19,r19,r7
   84990:	9dc01816 	blt	r19,r23,849f4 <__sfvwrite_r+0x2ac>
   84994:	b9c03b16 	blt	r23,r7,84a84 <__sfvwrite_r+0x33c>
   84998:	80800917 	ldw	r2,36(r16)
   8499c:	81400717 	ldw	r5,28(r16)
   849a0:	a809883a 	mov	r4,r21
   849a4:	d8c00015 	stw	r3,0(sp)
   849a8:	e00d883a 	mov	r6,fp
   849ac:	103ee83a 	callr	r2
   849b0:	1027883a 	mov	r19,r2
   849b4:	d8c00017 	ldw	r3,0(sp)
   849b8:	00bfe20e 	bge	zero,r2,84944 <__sfvwrite_r+0x1fc>
   849bc:	b4edc83a 	sub	r22,r22,r19
   849c0:	b0001a26 	beq	r22,zero,84a2c <__sfvwrite_r+0x2e4>
   849c4:	a0800217 	ldw	r2,8(r20)
   849c8:	e4f9883a 	add	fp,fp,r19
   849cc:	94e5c83a 	sub	r18,r18,r19
   849d0:	14e7c83a 	sub	r19,r2,r19
   849d4:	a4c00215 	stw	r19,8(r20)
   849d8:	983f8c26 	beq	r19,zero,8480c <__sfvwrite_r+0xc4>
   849dc:	903fe21e 	bne	r18,zero,84968 <__sfvwrite_r+0x220>
   849e0:	8f000017 	ldw	fp,0(r17)
   849e4:	8c800117 	ldw	r18,4(r17)
   849e8:	0007883a 	mov	r3,zero
   849ec:	8c400204 	addi	r17,r17,8
   849f0:	003fdc06 	br	84964 <__sfvwrite_r+0x21c>
   849f4:	e00b883a 	mov	r5,fp
   849f8:	980d883a 	mov	r6,r19
   849fc:	d8c00015 	stw	r3,0(sp)
   84a00:	00859cc0 	call	859cc <memmove>
   84a04:	80800017 	ldw	r2,0(r16)
   84a08:	a809883a 	mov	r4,r21
   84a0c:	800b883a 	mov	r5,r16
   84a10:	14c5883a 	add	r2,r2,r19
   84a14:	80800015 	stw	r2,0(r16)
   84a18:	0083e380 	call	83e38 <_fflush_r>
   84a1c:	d8c00017 	ldw	r3,0(sp)
   84a20:	103fc81e 	bne	r2,zero,84944 <__sfvwrite_r+0x1fc>
   84a24:	b4edc83a 	sub	r22,r22,r19
   84a28:	b03fe61e 	bne	r22,zero,849c4 <__sfvwrite_r+0x27c>
   84a2c:	a809883a 	mov	r4,r21
   84a30:	800b883a 	mov	r5,r16
   84a34:	0083e380 	call	83e38 <_fflush_r>
   84a38:	103fc21e 	bne	r2,zero,84944 <__sfvwrite_r+0x1fc>
   84a3c:	0007883a 	mov	r3,zero
   84a40:	003fe006 	br	849c4 <__sfvwrite_r+0x27c>
   84a44:	81000017 	ldw	r4,0(r16)
   84a48:	80800417 	ldw	r2,16(r16)
   84a4c:	1100022e 	bgeu	r2,r4,84a58 <__sfvwrite_r+0x310>
   84a50:	9839883a 	mov	fp,r19
   84a54:	9c806036 	bltu	r19,r18,84bd8 <__sfvwrite_r+0x490>
   84a58:	81c00517 	ldw	r7,20(r16)
   84a5c:	91c01c36 	bltu	r18,r7,84ad0 <__sfvwrite_r+0x388>
   84a60:	80800917 	ldw	r2,36(r16)
   84a64:	81400717 	ldw	r5,28(r16)
   84a68:	a809883a 	mov	r4,r21
   84a6c:	b00d883a 	mov	r6,r22
   84a70:	103ee83a 	callr	r2
   84a74:	1027883a 	mov	r19,r2
   84a78:	00bfb20e 	bge	zero,r2,84944 <__sfvwrite_r+0x1fc>
   84a7c:	1039883a 	mov	fp,r2
   84a80:	003f9806 	br	848e4 <__sfvwrite_r+0x19c>
   84a84:	b80d883a 	mov	r6,r23
   84a88:	e00b883a 	mov	r5,fp
   84a8c:	d8c00015 	stw	r3,0(sp)
   84a90:	00859cc0 	call	859cc <memmove>
   84a94:	80800217 	ldw	r2,8(r16)
   84a98:	81000017 	ldw	r4,0(r16)
   84a9c:	b827883a 	mov	r19,r23
   84aa0:	15c5c83a 	sub	r2,r2,r23
   84aa4:	25ef883a 	add	r23,r4,r23
   84aa8:	80800215 	stw	r2,8(r16)
   84aac:	85c00015 	stw	r23,0(r16)
   84ab0:	d8c00017 	ldw	r3,0(sp)
   84ab4:	003fc106 	br	849bc <__sfvwrite_r+0x274>
   84ab8:	81000017 	ldw	r4,0(r16)
   84abc:	902f883a 	mov	r23,r18
   84ac0:	9039883a 	mov	fp,r18
   84ac4:	9027883a 	mov	r19,r18
   84ac8:	900f883a 	mov	r7,r18
   84acc:	003f7a06 	br	848b8 <__sfvwrite_r+0x170>
   84ad0:	b00b883a 	mov	r5,r22
   84ad4:	900d883a 	mov	r6,r18
   84ad8:	00859cc0 	call	859cc <memmove>
   84adc:	80c00217 	ldw	r3,8(r16)
   84ae0:	80800017 	ldw	r2,0(r16)
   84ae4:	9027883a 	mov	r19,r18
   84ae8:	1c87c83a 	sub	r3,r3,r18
   84aec:	1485883a 	add	r2,r2,r18
   84af0:	80c00215 	stw	r3,8(r16)
   84af4:	80800015 	stw	r2,0(r16)
   84af8:	9039883a 	mov	fp,r18
   84afc:	003f7906 	br	848e4 <__sfvwrite_r+0x19c>
   84b00:	e009883a 	mov	r4,fp
   84b04:	01400284 	movi	r5,10
   84b08:	900d883a 	mov	r6,r18
   84b0c:	00857940 	call	85794 <memchr>
   84b10:	10003c26 	beq	r2,zero,84c04 <__sfvwrite_r+0x4bc>
   84b14:	15800044 	addi	r22,r2,1
   84b18:	b72dc83a 	sub	r22,r22,fp
   84b1c:	00c00044 	movi	r3,1
   84b20:	003f9206 	br	8496c <__sfvwrite_r+0x224>
   84b24:	81000517 	ldw	r4,20(r16)
   84b28:	81400417 	ldw	r5,16(r16)
   84b2c:	80c00017 	ldw	r3,0(r16)
   84b30:	210d883a 	add	r6,r4,r4
   84b34:	3109883a 	add	r4,r6,r4
   84b38:	2026d7fa 	srli	r19,r4,31
   84b3c:	1979c83a 	sub	fp,r3,r5
   84b40:	e1800044 	addi	r6,fp,1
   84b44:	9909883a 	add	r4,r19,r4
   84b48:	2027d07a 	srai	r19,r4,1
   84b4c:	3489883a 	add	r4,r6,r18
   84b50:	980d883a 	mov	r6,r19
   84b54:	9900022e 	bgeu	r19,r4,84b60 <__sfvwrite_r+0x418>
   84b58:	2027883a 	mov	r19,r4
   84b5c:	200d883a 	mov	r6,r4
   84b60:	1081000c 	andi	r2,r2,1024
   84b64:	10bfffcc 	andi	r2,r2,65535
   84b68:	10a0001c 	xori	r2,r2,32768
   84b6c:	10a00004 	addi	r2,r2,-32768
   84b70:	a809883a 	mov	r4,r21
   84b74:	103f6b26 	beq	r2,zero,84924 <__sfvwrite_r+0x1dc>
   84b78:	300b883a 	mov	r5,r6
   84b7c:	00850100 	call	85010 <_malloc_r>
   84b80:	102f883a 	mov	r23,r2
   84b84:	103f6d26 	beq	r2,zero,8493c <__sfvwrite_r+0x1f4>
   84b88:	81400417 	ldw	r5,16(r16)
   84b8c:	1009883a 	mov	r4,r2
   84b90:	e00d883a 	mov	r6,fp
   84b94:	008588c0 	call	8588c <memcpy>
   84b98:	8080030b 	ldhu	r2,12(r16)
   84b9c:	00fedfc4 	movi	r3,-1153
   84ba0:	10c4703a 	and	r2,r2,r3
   84ba4:	10802014 	ori	r2,r2,128
   84ba8:	8080030d 	sth	r2,12(r16)
   84bac:	bf09883a 	add	r4,r23,fp
   84bb0:	9f07c83a 	sub	r3,r19,fp
   84bb4:	85c00415 	stw	r23,16(r16)
   84bb8:	84c00515 	stw	r19,20(r16)
   84bbc:	81000015 	stw	r4,0(r16)
   84bc0:	902f883a 	mov	r23,r18
   84bc4:	80c00215 	stw	r3,8(r16)
   84bc8:	9039883a 	mov	fp,r18
   84bcc:	9027883a 	mov	r19,r18
   84bd0:	900f883a 	mov	r7,r18
   84bd4:	003f3806 	br	848b8 <__sfvwrite_r+0x170>
   84bd8:	b00b883a 	mov	r5,r22
   84bdc:	980d883a 	mov	r6,r19
   84be0:	00859cc0 	call	859cc <memmove>
   84be4:	80800017 	ldw	r2,0(r16)
   84be8:	a809883a 	mov	r4,r21
   84bec:	800b883a 	mov	r5,r16
   84bf0:	14c5883a 	add	r2,r2,r19
   84bf4:	80800015 	stw	r2,0(r16)
   84bf8:	0083e380 	call	83e38 <_fflush_r>
   84bfc:	103f3926 	beq	r2,zero,848e4 <__sfvwrite_r+0x19c>
   84c00:	003f5006 	br	84944 <__sfvwrite_r+0x1fc>
   84c04:	95800044 	addi	r22,r18,1
   84c08:	00c00044 	movi	r3,1
   84c0c:	003f5706 	br	8496c <__sfvwrite_r+0x224>
   84c10:	80c0030b 	ldhu	r3,12(r16)
   84c14:	00bfffc4 	movi	r2,-1
   84c18:	18c01014 	ori	r3,r3,64
   84c1c:	80c0030d 	sth	r3,12(r16)
   84c20:	00c00244 	movi	r3,9
   84c24:	a8c00015 	stw	r3,0(r21)
   84c28:	003ef906 	br	84810 <__sfvwrite_r+0xc8>

00084c2c <_fwalk>:
   84c2c:	defff904 	addi	sp,sp,-28
   84c30:	dcc00315 	stw	r19,12(sp)
   84c34:	24c0b804 	addi	r19,r4,736
   84c38:	dd400515 	stw	r21,20(sp)
   84c3c:	dd000415 	stw	r20,16(sp)
   84c40:	dfc00615 	stw	ra,24(sp)
   84c44:	dc800215 	stw	r18,8(sp)
   84c48:	dc400115 	stw	r17,4(sp)
   84c4c:	dc000015 	stw	r16,0(sp)
   84c50:	282b883a 	mov	r21,r5
   84c54:	0029883a 	mov	r20,zero
   84c58:	00842fc0 	call	842fc <__sfp_lock_acquire>
   84c5c:	98001226 	beq	r19,zero,84ca8 <_fwalk+0x7c>
   84c60:	04bfffc4 	movi	r18,-1
   84c64:	9c400117 	ldw	r17,4(r19)
   84c68:	9c000217 	ldw	r16,8(r19)
   84c6c:	8c7fffc4 	addi	r17,r17,-1
   84c70:	88000b16 	blt	r17,zero,84ca0 <_fwalk+0x74>
   84c74:	84000304 	addi	r16,r16,12
   84c78:	80c0000f 	ldh	r3,0(r16)
   84c7c:	8c7fffc4 	addi	r17,r17,-1
   84c80:	813ffd04 	addi	r4,r16,-12
   84c84:	18000426 	beq	r3,zero,84c98 <_fwalk+0x6c>
   84c88:	80c0008f 	ldh	r3,2(r16)
   84c8c:	1c800226 	beq	r3,r18,84c98 <_fwalk+0x6c>
   84c90:	a83ee83a 	callr	r21
   84c94:	a0a8b03a 	or	r20,r20,r2
   84c98:	84001704 	addi	r16,r16,92
   84c9c:	8cbff61e 	bne	r17,r18,84c78 <_fwalk+0x4c>
   84ca0:	9cc00017 	ldw	r19,0(r19)
   84ca4:	983fef1e 	bne	r19,zero,84c64 <_fwalk+0x38>
   84ca8:	00843000 	call	84300 <__sfp_lock_release>
   84cac:	a005883a 	mov	r2,r20
   84cb0:	dfc00617 	ldw	ra,24(sp)
   84cb4:	dd400517 	ldw	r21,20(sp)
   84cb8:	dd000417 	ldw	r20,16(sp)
   84cbc:	dcc00317 	ldw	r19,12(sp)
   84cc0:	dc800217 	ldw	r18,8(sp)
   84cc4:	dc400117 	ldw	r17,4(sp)
   84cc8:	dc000017 	ldw	r16,0(sp)
   84ccc:	dec00704 	addi	sp,sp,28
   84cd0:	f800283a 	ret

00084cd4 <_fwalk_reent>:
   84cd4:	defff804 	addi	sp,sp,-32
   84cd8:	dcc00315 	stw	r19,12(sp)
   84cdc:	24c0b804 	addi	r19,r4,736
   84ce0:	dd800615 	stw	r22,24(sp)
   84ce4:	dd400515 	stw	r21,20(sp)
   84ce8:	dd000415 	stw	r20,16(sp)
   84cec:	dfc00715 	stw	ra,28(sp)
   84cf0:	dc800215 	stw	r18,8(sp)
   84cf4:	dc400115 	stw	r17,4(sp)
   84cf8:	dc000015 	stw	r16,0(sp)
   84cfc:	2029883a 	mov	r20,r4
   84d00:	282b883a 	mov	r21,r5
   84d04:	002d883a 	mov	r22,zero
   84d08:	00842fc0 	call	842fc <__sfp_lock_acquire>
   84d0c:	98001326 	beq	r19,zero,84d5c <_fwalk_reent+0x88>
   84d10:	04bfffc4 	movi	r18,-1
   84d14:	9c400117 	ldw	r17,4(r19)
   84d18:	9c000217 	ldw	r16,8(r19)
   84d1c:	8c7fffc4 	addi	r17,r17,-1
   84d20:	88000c16 	blt	r17,zero,84d54 <_fwalk_reent+0x80>
   84d24:	84000304 	addi	r16,r16,12
   84d28:	80c0000f 	ldh	r3,0(r16)
   84d2c:	8c7fffc4 	addi	r17,r17,-1
   84d30:	817ffd04 	addi	r5,r16,-12
   84d34:	18000526 	beq	r3,zero,84d4c <_fwalk_reent+0x78>
   84d38:	80c0008f 	ldh	r3,2(r16)
   84d3c:	a009883a 	mov	r4,r20
   84d40:	1c800226 	beq	r3,r18,84d4c <_fwalk_reent+0x78>
   84d44:	a83ee83a 	callr	r21
   84d48:	b0acb03a 	or	r22,r22,r2
   84d4c:	84001704 	addi	r16,r16,92
   84d50:	8cbff51e 	bne	r17,r18,84d28 <_fwalk_reent+0x54>
   84d54:	9cc00017 	ldw	r19,0(r19)
   84d58:	983fee1e 	bne	r19,zero,84d14 <_fwalk_reent+0x40>
   84d5c:	00843000 	call	84300 <__sfp_lock_release>
   84d60:	b005883a 	mov	r2,r22
   84d64:	dfc00717 	ldw	ra,28(sp)
   84d68:	dd800617 	ldw	r22,24(sp)
   84d6c:	dd400517 	ldw	r21,20(sp)
   84d70:	dd000417 	ldw	r20,16(sp)
   84d74:	dcc00317 	ldw	r19,12(sp)
   84d78:	dc800217 	ldw	r18,8(sp)
   84d7c:	dc400117 	ldw	r17,4(sp)
   84d80:	dc000017 	ldw	r16,0(sp)
   84d84:	dec00804 	addi	sp,sp,32
   84d88:	f800283a 	ret

00084d8c <_setlocale_r>:
   84d8c:	defffc04 	addi	sp,sp,-16
   84d90:	dc800215 	stw	r18,8(sp)
   84d94:	dc400115 	stw	r17,4(sp)
   84d98:	dc000015 	stw	r16,0(sp)
   84d9c:	dfc00315 	stw	ra,12(sp)
   84da0:	3021883a 	mov	r16,r6
   84da4:	2023883a 	mov	r17,r4
   84da8:	2825883a 	mov	r18,r5
   84dac:	30001626 	beq	r6,zero,84e08 <_setlocale_r+0x7c>
   84db0:	3009883a 	mov	r4,r6
   84db4:	01400274 	movhi	r5,9
   84db8:	29714c04 	addi	r5,r5,-15056
   84dbc:	00874880 	call	87488 <strcmp>
   84dc0:	10000a1e 	bne	r2,zero,84dec <_setlocale_r+0x60>
   84dc4:	8c800c15 	stw	r18,48(r17)
   84dc8:	8c000d15 	stw	r16,52(r17)
   84dcc:	00800274 	movhi	r2,9
   84dd0:	10b14c04 	addi	r2,r2,-15056
   84dd4:	dfc00317 	ldw	ra,12(sp)
   84dd8:	dc800217 	ldw	r18,8(sp)
   84ddc:	dc400117 	ldw	r17,4(sp)
   84de0:	dc000017 	ldw	r16,0(sp)
   84de4:	dec00404 	addi	sp,sp,16
   84de8:	f800283a 	ret
   84dec:	8009883a 	mov	r4,r16
   84df0:	01400274 	movhi	r5,9
   84df4:	29713704 	addi	r5,r5,-15140
   84df8:	00874880 	call	87488 <strcmp>
   84dfc:	103ff126 	beq	r2,zero,84dc4 <_setlocale_r+0x38>
   84e00:	0005883a 	mov	r2,zero
   84e04:	003ff306 	br	84dd4 <_setlocale_r+0x48>
   84e08:	00800274 	movhi	r2,9
   84e0c:	10b14c04 	addi	r2,r2,-15056
   84e10:	dfc00317 	ldw	ra,12(sp)
   84e14:	dc800217 	ldw	r18,8(sp)
   84e18:	dc400117 	ldw	r17,4(sp)
   84e1c:	dc000017 	ldw	r16,0(sp)
   84e20:	dec00404 	addi	sp,sp,16
   84e24:	f800283a 	ret

00084e28 <__locale_charset>:
   84e28:	00800274 	movhi	r2,9
   84e2c:	10b14d04 	addi	r2,r2,-15052
   84e30:	f800283a 	ret

00084e34 <_localeconv_r>:
   84e34:	00800274 	movhi	r2,9
   84e38:	10b15104 	addi	r2,r2,-15036
   84e3c:	f800283a 	ret

00084e40 <setlocale>:
   84e40:	00c00274 	movhi	r3,9
   84e44:	18f88004 	addi	r3,r3,-7680
   84e48:	2005883a 	mov	r2,r4
   84e4c:	19000017 	ldw	r4,0(r3)
   84e50:	280d883a 	mov	r6,r5
   84e54:	100b883a 	mov	r5,r2
   84e58:	0084d8c1 	jmpi	84d8c <_setlocale_r>

00084e5c <localeconv>:
   84e5c:	00800274 	movhi	r2,9
   84e60:	10b15104 	addi	r2,r2,-15036
   84e64:	f800283a 	ret

00084e68 <__smakebuf_r>:
   84e68:	2880030b 	ldhu	r2,12(r5)
   84e6c:	deffed04 	addi	sp,sp,-76
   84e70:	dc401015 	stw	r17,64(sp)
   84e74:	10c0008c 	andi	r3,r2,2
   84e78:	18ffffcc 	andi	r3,r3,65535
   84e7c:	18e0001c 	xori	r3,r3,32768
   84e80:	dc000f15 	stw	r16,60(sp)
   84e84:	dfc01215 	stw	ra,72(sp)
   84e88:	dc801115 	stw	r18,68(sp)
   84e8c:	18e00004 	addi	r3,r3,-32768
   84e90:	2821883a 	mov	r16,r5
   84e94:	2023883a 	mov	r17,r4
   84e98:	1800381e 	bne	r3,zero,84f7c <__smakebuf_r+0x114>
   84e9c:	2940038f 	ldh	r5,14(r5)
   84ea0:	28002d16 	blt	r5,zero,84f58 <__smakebuf_r+0xf0>
   84ea4:	d80d883a 	mov	r6,sp
   84ea8:	00878a40 	call	878a4 <_fstat_r>
   84eac:	10002916 	blt	r2,zero,84f54 <__smakebuf_r+0xec>
   84eb0:	d8800117 	ldw	r2,4(sp)
   84eb4:	00e00014 	movui	r3,32768
   84eb8:	10bc000c 	andi	r2,r2,61440
   84ebc:	10c03c26 	beq	r2,r3,84fb0 <__smakebuf_r+0x148>
   84ec0:	80c0030b 	ldhu	r3,12(r16)
   84ec4:	18c20014 	ori	r3,r3,2048
   84ec8:	80c0030d 	sth	r3,12(r16)
   84ecc:	00c80004 	movi	r3,8192
   84ed0:	10c00c1e 	bne	r2,r3,84f04 <__smakebuf_r+0x9c>
   84ed4:	8140038f 	ldh	r5,14(r16)
   84ed8:	8809883a 	mov	r4,r17
   84edc:	008790c0 	call	8790c <_isatty_r>
   84ee0:	10000826 	beq	r2,zero,84f04 <__smakebuf_r+0x9c>
   84ee4:	80c0030b 	ldhu	r3,12(r16)
   84ee8:	808010c4 	addi	r2,r16,67
   84eec:	80800015 	stw	r2,0(r16)
   84ef0:	18c00054 	ori	r3,r3,1
   84ef4:	80800415 	stw	r2,16(r16)
   84ef8:	00800044 	movi	r2,1
   84efc:	80c0030d 	sth	r3,12(r16)
   84f00:	80800515 	stw	r2,20(r16)
   84f04:	04810004 	movi	r18,1024
   84f08:	8809883a 	mov	r4,r17
   84f0c:	900b883a 	mov	r5,r18
   84f10:	00850100 	call	85010 <_malloc_r>
   84f14:	10003026 	beq	r2,zero,84fd8 <__smakebuf_r+0x170>
   84f18:	80c0030b 	ldhu	r3,12(r16)
   84f1c:	01000234 	movhi	r4,8
   84f20:	21101804 	addi	r4,r4,16480
   84f24:	89000f15 	stw	r4,60(r17)
   84f28:	18c02014 	ori	r3,r3,128
   84f2c:	80c0030d 	sth	r3,12(r16)
   84f30:	80800015 	stw	r2,0(r16)
   84f34:	80800415 	stw	r2,16(r16)
   84f38:	84800515 	stw	r18,20(r16)
   84f3c:	dfc01217 	ldw	ra,72(sp)
   84f40:	dc801117 	ldw	r18,68(sp)
   84f44:	dc401017 	ldw	r17,64(sp)
   84f48:	dc000f17 	ldw	r16,60(sp)
   84f4c:	dec01304 	addi	sp,sp,76
   84f50:	f800283a 	ret
   84f54:	8080030b 	ldhu	r2,12(r16)
   84f58:	10c0200c 	andi	r3,r2,128
   84f5c:	18ffffcc 	andi	r3,r3,65535
   84f60:	18e0001c 	xori	r3,r3,32768
   84f64:	18e00004 	addi	r3,r3,-32768
   84f68:	18000f1e 	bne	r3,zero,84fa8 <__smakebuf_r+0x140>
   84f6c:	04810004 	movi	r18,1024
   84f70:	10820014 	ori	r2,r2,2048
   84f74:	8080030d 	sth	r2,12(r16)
   84f78:	003fe306 	br	84f08 <__smakebuf_r+0xa0>
   84f7c:	288010c4 	addi	r2,r5,67
   84f80:	28800015 	stw	r2,0(r5)
   84f84:	28800415 	stw	r2,16(r5)
   84f88:	00800044 	movi	r2,1
   84f8c:	28800515 	stw	r2,20(r5)
   84f90:	dfc01217 	ldw	ra,72(sp)
   84f94:	dc801117 	ldw	r18,68(sp)
   84f98:	dc401017 	ldw	r17,64(sp)
   84f9c:	dc000f17 	ldw	r16,60(sp)
   84fa0:	dec01304 	addi	sp,sp,76
   84fa4:	f800283a 	ret
   84fa8:	04801004 	movi	r18,64
   84fac:	003ff006 	br	84f70 <__smakebuf_r+0x108>
   84fb0:	81000a17 	ldw	r4,40(r16)
   84fb4:	00c00234 	movhi	r3,8
   84fb8:	18dd0904 	addi	r3,r3,29732
   84fbc:	20ffc01e 	bne	r4,r3,84ec0 <__smakebuf_r+0x58>
   84fc0:	8080030b 	ldhu	r2,12(r16)
   84fc4:	00c10004 	movi	r3,1024
   84fc8:	80c01315 	stw	r3,76(r16)
   84fcc:	10c4b03a 	or	r2,r2,r3
   84fd0:	8080030d 	sth	r2,12(r16)
   84fd4:	003fcb06 	br	84f04 <__smakebuf_r+0x9c>
   84fd8:	8080030b 	ldhu	r2,12(r16)
   84fdc:	10c0800c 	andi	r3,r2,512
   84fe0:	18ffffcc 	andi	r3,r3,65535
   84fe4:	18e0001c 	xori	r3,r3,32768
   84fe8:	18e00004 	addi	r3,r3,-32768
   84fec:	183fd31e 	bne	r3,zero,84f3c <__smakebuf_r+0xd4>
   84ff0:	10800094 	ori	r2,r2,2
   84ff4:	80c010c4 	addi	r3,r16,67
   84ff8:	8080030d 	sth	r2,12(r16)
   84ffc:	00800044 	movi	r2,1
   85000:	80c00015 	stw	r3,0(r16)
   85004:	80c00415 	stw	r3,16(r16)
   85008:	80800515 	stw	r2,20(r16)
   8500c:	003fcb06 	br	84f3c <__smakebuf_r+0xd4>

00085010 <_malloc_r>:
   85010:	defff604 	addi	sp,sp,-40
   85014:	dc800215 	stw	r18,8(sp)
   85018:	dfc00915 	stw	ra,36(sp)
   8501c:	df000815 	stw	fp,32(sp)
   85020:	ddc00715 	stw	r23,28(sp)
   85024:	dd800615 	stw	r22,24(sp)
   85028:	dd400515 	stw	r21,20(sp)
   8502c:	dd000415 	stw	r20,16(sp)
   85030:	dcc00315 	stw	r19,12(sp)
   85034:	dc400115 	stw	r17,4(sp)
   85038:	dc000015 	stw	r16,0(sp)
   8503c:	288002c4 	addi	r2,r5,11
   85040:	00c00584 	movi	r3,22
   85044:	2025883a 	mov	r18,r4
   85048:	18802b2e 	bgeu	r3,r2,850f8 <_malloc_r+0xe8>
   8504c:	047ffe04 	movi	r17,-8
   85050:	1462703a 	and	r17,r2,r17
   85054:	88002a16 	blt	r17,zero,85100 <_malloc_r+0xf0>
   85058:	89402936 	bltu	r17,r5,85100 <_malloc_r+0xf0>
   8505c:	9009883a 	mov	r4,r18
   85060:	008a1580 	call	8a158 <__malloc_lock>
   85064:	00807dc4 	movi	r2,503
   85068:	14402936 	bltu	r2,r17,85110 <_malloc_r+0x100>
   8506c:	8808d0fa 	srli	r4,r17,3
   85070:	04c00274 	movhi	r19,9
   85074:	9cf2fb04 	addi	r19,r19,-13332
   85078:	2105883a 	add	r2,r4,r4
   8507c:	1085883a 	add	r2,r2,r2
   85080:	1085883a 	add	r2,r2,r2
   85084:	9885883a 	add	r2,r19,r2
   85088:	14000317 	ldw	r16,12(r2)
   8508c:	80815526 	beq	r16,r2,855e4 <_malloc_r+0x5d4>
   85090:	81000117 	ldw	r4,4(r16)
   85094:	00bfff04 	movi	r2,-4
   85098:	80c00317 	ldw	r3,12(r16)
   8509c:	2084703a 	and	r2,r4,r2
   850a0:	8085883a 	add	r2,r16,r2
   850a4:	11800117 	ldw	r6,4(r2)
   850a8:	81400217 	ldw	r5,8(r16)
   850ac:	9009883a 	mov	r4,r18
   850b0:	31800054 	ori	r6,r6,1
   850b4:	11800115 	stw	r6,4(r2)
   850b8:	28c00315 	stw	r3,12(r5)
   850bc:	19400215 	stw	r5,8(r3)
   850c0:	008a1780 	call	8a178 <__malloc_unlock>
   850c4:	80800204 	addi	r2,r16,8
   850c8:	dfc00917 	ldw	ra,36(sp)
   850cc:	df000817 	ldw	fp,32(sp)
   850d0:	ddc00717 	ldw	r23,28(sp)
   850d4:	dd800617 	ldw	r22,24(sp)
   850d8:	dd400517 	ldw	r21,20(sp)
   850dc:	dd000417 	ldw	r20,16(sp)
   850e0:	dcc00317 	ldw	r19,12(sp)
   850e4:	dc800217 	ldw	r18,8(sp)
   850e8:	dc400117 	ldw	r17,4(sp)
   850ec:	dc000017 	ldw	r16,0(sp)
   850f0:	dec00a04 	addi	sp,sp,40
   850f4:	f800283a 	ret
   850f8:	04400404 	movi	r17,16
   850fc:	897fd72e 	bgeu	r17,r5,8505c <_malloc_r+0x4c>
   85100:	00800304 	movi	r2,12
   85104:	90800015 	stw	r2,0(r18)
   85108:	0005883a 	mov	r2,zero
   8510c:	003fee06 	br	850c8 <_malloc_r+0xb8>
   85110:	8808d27a 	srli	r4,r17,9
   85114:	20007126 	beq	r4,zero,852dc <_malloc_r+0x2cc>
   85118:	00800104 	movi	r2,4
   8511c:	1100eb36 	bltu	r2,r4,854cc <_malloc_r+0x4bc>
   85120:	8808d1ba 	srli	r4,r17,6
   85124:	21000e04 	addi	r4,r4,56
   85128:	210b883a 	add	r5,r4,r4
   8512c:	294b883a 	add	r5,r5,r5
   85130:	294b883a 	add	r5,r5,r5
   85134:	04c00274 	movhi	r19,9
   85138:	9cf2fb04 	addi	r19,r19,-13332
   8513c:	994b883a 	add	r5,r19,r5
   85140:	2c000317 	ldw	r16,12(r5)
   85144:	2c000e26 	beq	r5,r16,85180 <_malloc_r+0x170>
   85148:	80c00117 	ldw	r3,4(r16)
   8514c:	01ffff04 	movi	r7,-4
   85150:	018003c4 	movi	r6,15
   85154:	19c6703a 	and	r3,r3,r7
   85158:	1c45c83a 	sub	r2,r3,r17
   8515c:	30800716 	blt	r6,r2,8517c <_malloc_r+0x16c>
   85160:	1000610e 	bge	r2,zero,852e8 <_malloc_r+0x2d8>
   85164:	84000317 	ldw	r16,12(r16)
   85168:	2c000526 	beq	r5,r16,85180 <_malloc_r+0x170>
   8516c:	80c00117 	ldw	r3,4(r16)
   85170:	19c6703a 	and	r3,r3,r7
   85174:	1c45c83a 	sub	r2,r3,r17
   85178:	30bff90e 	bge	r6,r2,85160 <_malloc_r+0x150>
   8517c:	213fffc4 	addi	r4,r4,-1
   85180:	21000044 	addi	r4,r4,1
   85184:	9c000417 	ldw	r16,16(r19)
   85188:	00c00274 	movhi	r3,9
   8518c:	18f2fb04 	addi	r3,r3,-13332
   85190:	1a400204 	addi	r9,r3,8
   85194:	8240ff26 	beq	r16,r9,85594 <_malloc_r+0x584>
   85198:	81400117 	ldw	r5,4(r16)
   8519c:	00bfff04 	movi	r2,-4
   851a0:	018003c4 	movi	r6,15
   851a4:	2884703a 	and	r2,r5,r2
   851a8:	144bc83a 	sub	r5,r2,r17
   851ac:	3140ea16 	blt	r6,r5,85558 <_malloc_r+0x548>
   851b0:	1a400515 	stw	r9,20(r3)
   851b4:	1a400415 	stw	r9,16(r3)
   851b8:	2800570e 	bge	r5,zero,85318 <_malloc_r+0x308>
   851bc:	01407fc4 	movi	r5,511
   851c0:	2880ca36 	bltu	r5,r2,854ec <_malloc_r+0x4dc>
   851c4:	1004d0fa 	srli	r2,r2,3
   851c8:	02000044 	movi	r8,1
   851cc:	19c00117 	ldw	r7,4(r3)
   851d0:	108b883a 	add	r5,r2,r2
   851d4:	294b883a 	add	r5,r5,r5
   851d8:	1005d0ba 	srai	r2,r2,2
   851dc:	294b883a 	add	r5,r5,r5
   851e0:	28cb883a 	add	r5,r5,r3
   851e4:	29800217 	ldw	r6,8(r5)
   851e8:	4084983a 	sll	r2,r8,r2
   851ec:	81400315 	stw	r5,12(r16)
   851f0:	81800215 	stw	r6,8(r16)
   851f4:	11c4b03a 	or	r2,r2,r7
   851f8:	18800115 	stw	r2,4(r3)
   851fc:	2c000215 	stw	r16,8(r5)
   85200:	34000315 	stw	r16,12(r6)
   85204:	200bd0ba 	srai	r5,r4,2
   85208:	00c00044 	movi	r3,1
   8520c:	194a983a 	sll	r5,r3,r5
   85210:	11404936 	bltu	r2,r5,85338 <_malloc_r+0x328>
   85214:	1146703a 	and	r3,r2,r5
   85218:	18000a1e 	bne	r3,zero,85244 <_malloc_r+0x234>
   8521c:	00ffff04 	movi	r3,-4
   85220:	294b883a 	add	r5,r5,r5
   85224:	20c8703a 	and	r4,r4,r3
   85228:	1146703a 	and	r3,r2,r5
   8522c:	21000104 	addi	r4,r4,4
   85230:	1800041e 	bne	r3,zero,85244 <_malloc_r+0x234>
   85234:	294b883a 	add	r5,r5,r5
   85238:	1146703a 	and	r3,r2,r5
   8523c:	21000104 	addi	r4,r4,4
   85240:	183ffc26 	beq	r3,zero,85234 <_malloc_r+0x224>
   85244:	023fff04 	movi	r8,-4
   85248:	01c003c4 	movi	r7,15
   8524c:	2105883a 	add	r2,r4,r4
   85250:	1085883a 	add	r2,r2,r2
   85254:	1085883a 	add	r2,r2,r2
   85258:	9899883a 	add	r12,r19,r2
   8525c:	62800304 	addi	r10,r12,12
   85260:	2017883a 	mov	r11,r4
   85264:	54000017 	ldw	r16,0(r10)
   85268:	51bffd04 	addi	r6,r10,-12
   8526c:	8180041e 	bne	r16,r6,85280 <_malloc_r+0x270>
   85270:	0000ca06 	br	8559c <_malloc_r+0x58c>
   85274:	10001c0e 	bge	r2,zero,852e8 <_malloc_r+0x2d8>
   85278:	84000317 	ldw	r16,12(r16)
   8527c:	8180c726 	beq	r16,r6,8559c <_malloc_r+0x58c>
   85280:	80c00117 	ldw	r3,4(r16)
   85284:	1a06703a 	and	r3,r3,r8
   85288:	1c45c83a 	sub	r2,r3,r17
   8528c:	38bff90e 	bge	r7,r2,85274 <_malloc_r+0x264>
   85290:	81000317 	ldw	r4,12(r16)
   85294:	81400217 	ldw	r5,8(r16)
   85298:	8447883a 	add	r3,r16,r17
   8529c:	8c400054 	ori	r17,r17,1
   852a0:	29000315 	stw	r4,12(r5)
   852a4:	21400215 	stw	r5,8(r4)
   852a8:	84400115 	stw	r17,4(r16)
   852ac:	1889883a 	add	r4,r3,r2
   852b0:	11400054 	ori	r5,r2,1
   852b4:	98c00515 	stw	r3,20(r19)
   852b8:	98c00415 	stw	r3,16(r19)
   852bc:	20800015 	stw	r2,0(r4)
   852c0:	1a400315 	stw	r9,12(r3)
   852c4:	1a400215 	stw	r9,8(r3)
   852c8:	19400115 	stw	r5,4(r3)
   852cc:	9009883a 	mov	r4,r18
   852d0:	008a1780 	call	8a178 <__malloc_unlock>
   852d4:	80800204 	addi	r2,r16,8
   852d8:	003f7b06 	br	850c8 <_malloc_r+0xb8>
   852dc:	8808d0fa 	srli	r4,r17,3
   852e0:	210b883a 	add	r5,r4,r4
   852e4:	003f9106 	br	8512c <_malloc_r+0x11c>
   852e8:	80c7883a 	add	r3,r16,r3
   852ec:	19400117 	ldw	r5,4(r3)
   852f0:	80800317 	ldw	r2,12(r16)
   852f4:	81000217 	ldw	r4,8(r16)
   852f8:	29400054 	ori	r5,r5,1
   852fc:	19400115 	stw	r5,4(r3)
   85300:	20800315 	stw	r2,12(r4)
   85304:	11000215 	stw	r4,8(r2)
   85308:	9009883a 	mov	r4,r18
   8530c:	008a1780 	call	8a178 <__malloc_unlock>
   85310:	80800204 	addi	r2,r16,8
   85314:	003f6c06 	br	850c8 <_malloc_r+0xb8>
   85318:	8085883a 	add	r2,r16,r2
   8531c:	10c00117 	ldw	r3,4(r2)
   85320:	9009883a 	mov	r4,r18
   85324:	18c00054 	ori	r3,r3,1
   85328:	10c00115 	stw	r3,4(r2)
   8532c:	008a1780 	call	8a178 <__malloc_unlock>
   85330:	80800204 	addi	r2,r16,8
   85334:	003f6406 	br	850c8 <_malloc_r+0xb8>
   85338:	9c000217 	ldw	r16,8(r19)
   8533c:	00bfff04 	movi	r2,-4
   85340:	85400117 	ldw	r21,4(r16)
   85344:	a8aa703a 	and	r21,r21,r2
   85348:	ac400336 	bltu	r21,r17,85358 <_malloc_r+0x348>
   8534c:	ac45c83a 	sub	r2,r21,r17
   85350:	00c003c4 	movi	r3,15
   85354:	18805316 	blt	r3,r2,854a4 <_malloc_r+0x494>
   85358:	d5e6aa17 	ldw	r23,-25944(gp)
   8535c:	d0e00317 	ldw	r3,-32756(gp)
   85360:	00bfffc4 	movi	r2,-1
   85364:	8579883a 	add	fp,r16,r21
   85368:	8def883a 	add	r23,r17,r23
   8536c:	1880d226 	beq	r3,r2,856b8 <_malloc_r+0x6a8>
   85370:	bdc403c4 	addi	r23,r23,4111
   85374:	00bc0004 	movi	r2,-4096
   85378:	b8ae703a 	and	r23,r23,r2
   8537c:	9009883a 	mov	r4,r18
   85380:	b80b883a 	mov	r5,r23
   85384:	00872e40 	call	872e4 <_sbrk_r>
   85388:	1029883a 	mov	r20,r2
   8538c:	00bfffc4 	movi	r2,-1
   85390:	a080d126 	beq	r20,r2,856d8 <_malloc_r+0x6c8>
   85394:	a7009f36 	bltu	r20,fp,85614 <_malloc_r+0x604>
   85398:	05800274 	movhi	r22,9
   8539c:	b5bf3104 	addi	r22,r22,-828
   853a0:	b0800017 	ldw	r2,0(r22)
   853a4:	b885883a 	add	r2,r23,r2
   853a8:	b0800015 	stw	r2,0(r22)
   853ac:	e500cf26 	beq	fp,r20,856ec <_malloc_r+0x6dc>
   853b0:	d1200317 	ldw	r4,-32756(gp)
   853b4:	00ffffc4 	movi	r3,-1
   853b8:	20c0e026 	beq	r4,r3,8573c <_malloc_r+0x72c>
   853bc:	a739c83a 	sub	fp,r20,fp
   853c0:	1705883a 	add	r2,r2,fp
   853c4:	b0800015 	stw	r2,0(r22)
   853c8:	a08001cc 	andi	r2,r20,7
   853cc:	1000a526 	beq	r2,zero,85664 <_malloc_r+0x654>
   853d0:	a0a9c83a 	sub	r20,r20,r2
   853d4:	00c40204 	movi	r3,4104
   853d8:	a5000204 	addi	r20,r20,8
   853dc:	1885c83a 	sub	r2,r3,r2
   853e0:	a5c7883a 	add	r3,r20,r23
   853e4:	18c3ffcc 	andi	r3,r3,4095
   853e8:	10efc83a 	sub	r23,r2,r3
   853ec:	9009883a 	mov	r4,r18
   853f0:	b80b883a 	mov	r5,r23
   853f4:	00872e40 	call	872e4 <_sbrk_r>
   853f8:	00ffffc4 	movi	r3,-1
   853fc:	10c0cc26 	beq	r2,r3,85730 <_malloc_r+0x720>
   85400:	1505c83a 	sub	r2,r2,r20
   85404:	b887883a 	add	r3,r23,r2
   85408:	18c00054 	ori	r3,r3,1
   8540c:	b0800017 	ldw	r2,0(r22)
   85410:	9d000215 	stw	r20,8(r19)
   85414:	a0c00115 	stw	r3,4(r20)
   85418:	b885883a 	add	r2,r23,r2
   8541c:	b0800015 	stw	r2,0(r22)
   85420:	84c00e26 	beq	r16,r19,8545c <_malloc_r+0x44c>
   85424:	00c003c4 	movi	r3,15
   85428:	1d40902e 	bgeu	r3,r21,8566c <_malloc_r+0x65c>
   8542c:	ad7ffd04 	addi	r21,r21,-12
   85430:	013ffe04 	movi	r4,-8
   85434:	a908703a 	and	r4,r21,r4
   85438:	810b883a 	add	r5,r16,r4
   8543c:	01800144 	movi	r6,5
   85440:	29800115 	stw	r6,4(r5)
   85444:	29800215 	stw	r6,8(r5)
   85448:	81400117 	ldw	r5,4(r16)
   8544c:	2940004c 	andi	r5,r5,1
   85450:	214ab03a 	or	r5,r4,r5
   85454:	81400115 	stw	r5,4(r16)
   85458:	1900ae36 	bltu	r3,r4,85714 <_malloc_r+0x704>
   8545c:	d0e6a917 	ldw	r3,-25948(gp)
   85460:	1880012e 	bgeu	r3,r2,85468 <_malloc_r+0x458>
   85464:	d0a6a915 	stw	r2,-25948(gp)
   85468:	d0e6a817 	ldw	r3,-25952(gp)
   8546c:	9c000217 	ldw	r16,8(r19)
   85470:	1880012e 	bgeu	r3,r2,85478 <_malloc_r+0x468>
   85474:	d0a6a815 	stw	r2,-25952(gp)
   85478:	80c00117 	ldw	r3,4(r16)
   8547c:	00bfff04 	movi	r2,-4
   85480:	1886703a 	and	r3,r3,r2
   85484:	1c45c83a 	sub	r2,r3,r17
   85488:	1c400236 	bltu	r3,r17,85494 <_malloc_r+0x484>
   8548c:	00c003c4 	movi	r3,15
   85490:	18800416 	blt	r3,r2,854a4 <_malloc_r+0x494>
   85494:	9009883a 	mov	r4,r18
   85498:	008a1780 	call	8a178 <__malloc_unlock>
   8549c:	0005883a 	mov	r2,zero
   854a0:	003f0906 	br	850c8 <_malloc_r+0xb8>
   854a4:	88c00054 	ori	r3,r17,1
   854a8:	10800054 	ori	r2,r2,1
   854ac:	80c00115 	stw	r3,4(r16)
   854b0:	8463883a 	add	r17,r16,r17
   854b4:	88800115 	stw	r2,4(r17)
   854b8:	9009883a 	mov	r4,r18
   854bc:	9c400215 	stw	r17,8(r19)
   854c0:	008a1780 	call	8a178 <__malloc_unlock>
   854c4:	80800204 	addi	r2,r16,8
   854c8:	003eff06 	br	850c8 <_malloc_r+0xb8>
   854cc:	00800504 	movi	r2,20
   854d0:	1100492e 	bgeu	r2,r4,855f8 <_malloc_r+0x5e8>
   854d4:	00801504 	movi	r2,84
   854d8:	11005c36 	bltu	r2,r4,8564c <_malloc_r+0x63c>
   854dc:	8808d33a 	srli	r4,r17,12
   854e0:	21001b84 	addi	r4,r4,110
   854e4:	210b883a 	add	r5,r4,r4
   854e8:	003f1006 	br	8512c <_malloc_r+0x11c>
   854ec:	1006d27a 	srli	r3,r2,9
   854f0:	01400104 	movi	r5,4
   854f4:	28c0432e 	bgeu	r5,r3,85604 <_malloc_r+0x5f4>
   854f8:	01400504 	movi	r5,20
   854fc:	28c07036 	bltu	r5,r3,856c0 <_malloc_r+0x6b0>
   85500:	194016c4 	addi	r5,r3,91
   85504:	294d883a 	add	r6,r5,r5
   85508:	318d883a 	add	r6,r6,r6
   8550c:	318d883a 	add	r6,r6,r6
   85510:	998d883a 	add	r6,r19,r6
   85514:	30c00217 	ldw	r3,8(r6)
   85518:	01c00274 	movhi	r7,9
   8551c:	39f2fb04 	addi	r7,r7,-13332
   85520:	19805726 	beq	r3,r6,85680 <_malloc_r+0x670>
   85524:	01ffff04 	movi	r7,-4
   85528:	19400117 	ldw	r5,4(r3)
   8552c:	29ca703a 	and	r5,r5,r7
   85530:	1140022e 	bgeu	r2,r5,8553c <_malloc_r+0x52c>
   85534:	18c00217 	ldw	r3,8(r3)
   85538:	30fffb1e 	bne	r6,r3,85528 <_malloc_r+0x518>
   8553c:	19400317 	ldw	r5,12(r3)
   85540:	98800117 	ldw	r2,4(r19)
   85544:	81400315 	stw	r5,12(r16)
   85548:	80c00215 	stw	r3,8(r16)
   8554c:	2c000215 	stw	r16,8(r5)
   85550:	1c000315 	stw	r16,12(r3)
   85554:	003f2b06 	br	85204 <_malloc_r+0x1f4>
   85558:	8445883a 	add	r2,r16,r17
   8555c:	8c400054 	ori	r17,r17,1
   85560:	18800515 	stw	r2,20(r3)
   85564:	18800415 	stw	r2,16(r3)
   85568:	29000054 	ori	r4,r5,1
   8556c:	1147883a 	add	r3,r2,r5
   85570:	84400115 	stw	r17,4(r16)
   85574:	11000115 	stw	r4,4(r2)
   85578:	12400315 	stw	r9,12(r2)
   8557c:	12400215 	stw	r9,8(r2)
   85580:	19400015 	stw	r5,0(r3)
   85584:	9009883a 	mov	r4,r18
   85588:	008a1780 	call	8a178 <__malloc_unlock>
   8558c:	80800204 	addi	r2,r16,8
   85590:	003ecd06 	br	850c8 <_malloc_r+0xb8>
   85594:	18800117 	ldw	r2,4(r3)
   85598:	003f1a06 	br	85204 <_malloc_r+0x1f4>
   8559c:	5ac00044 	addi	r11,r11,1
   855a0:	588000cc 	andi	r2,r11,3
   855a4:	52800204 	addi	r10,r10,8
   855a8:	103f2e1e 	bne	r2,zero,85264 <_malloc_r+0x254>
   855ac:	20c000cc 	andi	r3,r4,3
   855b0:	60bffe04 	addi	r2,r12,-8
   855b4:	18006f26 	beq	r3,zero,85774 <_malloc_r+0x764>
   855b8:	63000017 	ldw	r12,0(r12)
   855bc:	213fffc4 	addi	r4,r4,-1
   855c0:	60bffa26 	beq	r12,r2,855ac <_malloc_r+0x59c>
   855c4:	98800117 	ldw	r2,4(r19)
   855c8:	294b883a 	add	r5,r5,r5
   855cc:	117f5a36 	bltu	r2,r5,85338 <_malloc_r+0x328>
   855d0:	283f5926 	beq	r5,zero,85338 <_malloc_r+0x328>
   855d4:	1146703a 	and	r3,r2,r5
   855d8:	18001626 	beq	r3,zero,85634 <_malloc_r+0x624>
   855dc:	5809883a 	mov	r4,r11
   855e0:	003f1a06 	br	8524c <_malloc_r+0x23c>
   855e4:	80800204 	addi	r2,r16,8
   855e8:	84000517 	ldw	r16,20(r16)
   855ec:	143ea81e 	bne	r2,r16,85090 <_malloc_r+0x80>
   855f0:	21000084 	addi	r4,r4,2
   855f4:	003ee306 	br	85184 <_malloc_r+0x174>
   855f8:	210016c4 	addi	r4,r4,91
   855fc:	210b883a 	add	r5,r4,r4
   85600:	003eca06 	br	8512c <_malloc_r+0x11c>
   85604:	100ad1ba 	srli	r5,r2,6
   85608:	29400e04 	addi	r5,r5,56
   8560c:	294d883a 	add	r6,r5,r5
   85610:	003fbd06 	br	85508 <_malloc_r+0x4f8>
   85614:	84ff6026 	beq	r16,r19,85398 <_malloc_r+0x388>
   85618:	00800274 	movhi	r2,9
   8561c:	10b2fb04 	addi	r2,r2,-13332
   85620:	14000217 	ldw	r16,8(r2)
   85624:	00bfff04 	movi	r2,-4
   85628:	80c00117 	ldw	r3,4(r16)
   8562c:	1886703a 	and	r3,r3,r2
   85630:	003f9406 	br	85484 <_malloc_r+0x474>
   85634:	294b883a 	add	r5,r5,r5
   85638:	1146703a 	and	r3,r2,r5
   8563c:	5ac00104 	addi	r11,r11,4
   85640:	183ffc26 	beq	r3,zero,85634 <_malloc_r+0x624>
   85644:	5809883a 	mov	r4,r11
   85648:	003f0006 	br	8524c <_malloc_r+0x23c>
   8564c:	00805504 	movi	r2,340
   85650:	11001336 	bltu	r2,r4,856a0 <_malloc_r+0x690>
   85654:	8808d3fa 	srli	r4,r17,15
   85658:	21001dc4 	addi	r4,r4,119
   8565c:	210b883a 	add	r5,r4,r4
   85660:	003eb206 	br	8512c <_malloc_r+0x11c>
   85664:	00840004 	movi	r2,4096
   85668:	003f5d06 	br	853e0 <_malloc_r+0x3d0>
   8566c:	00800044 	movi	r2,1
   85670:	a0800115 	stw	r2,4(r20)
   85674:	a021883a 	mov	r16,r20
   85678:	0007883a 	mov	r3,zero
   8567c:	003f8106 	br	85484 <_malloc_r+0x474>
   85680:	280bd0ba 	srai	r5,r5,2
   85684:	01800044 	movi	r6,1
   85688:	38800117 	ldw	r2,4(r7)
   8568c:	314c983a 	sll	r6,r6,r5
   85690:	180b883a 	mov	r5,r3
   85694:	3084b03a 	or	r2,r6,r2
   85698:	38800115 	stw	r2,4(r7)
   8569c:	003fa906 	br	85544 <_malloc_r+0x534>
   856a0:	00815504 	movi	r2,1364
   856a4:	11001836 	bltu	r2,r4,85708 <_malloc_r+0x6f8>
   856a8:	8808d4ba 	srli	r4,r17,18
   856ac:	21001f04 	addi	r4,r4,124
   856b0:	210b883a 	add	r5,r4,r4
   856b4:	003e9d06 	br	8512c <_malloc_r+0x11c>
   856b8:	bdc00404 	addi	r23,r23,16
   856bc:	003f2f06 	br	8537c <_malloc_r+0x36c>
   856c0:	01401504 	movi	r5,84
   856c4:	28c01f36 	bltu	r5,r3,85744 <_malloc_r+0x734>
   856c8:	100ad33a 	srli	r5,r2,12
   856cc:	29401b84 	addi	r5,r5,110
   856d0:	294d883a 	add	r6,r5,r5
   856d4:	003f8c06 	br	85508 <_malloc_r+0x4f8>
   856d8:	9c000217 	ldw	r16,8(r19)
   856dc:	00bfff04 	movi	r2,-4
   856e0:	80c00117 	ldw	r3,4(r16)
   856e4:	1886703a 	and	r3,r3,r2
   856e8:	003f6606 	br	85484 <_malloc_r+0x474>
   856ec:	e0c3ffcc 	andi	r3,fp,4095
   856f0:	183f2f1e 	bne	r3,zero,853b0 <_malloc_r+0x3a0>
   856f4:	98c00217 	ldw	r3,8(r19)
   856f8:	bd49883a 	add	r4,r23,r21
   856fc:	21000054 	ori	r4,r4,1
   85700:	19000115 	stw	r4,4(r3)
   85704:	003f5506 	br	8545c <_malloc_r+0x44c>
   85708:	01403f04 	movi	r5,252
   8570c:	01001f84 	movi	r4,126
   85710:	003e8606 	br	8512c <_malloc_r+0x11c>
   85714:	9009883a 	mov	r4,r18
   85718:	81400204 	addi	r5,r16,8
   8571c:	00844780 	call	84478 <_free_r>
   85720:	00800274 	movhi	r2,9
   85724:	10bf3104 	addi	r2,r2,-828
   85728:	10800017 	ldw	r2,0(r2)
   8572c:	003f4b06 	br	8545c <_malloc_r+0x44c>
   85730:	00c00044 	movi	r3,1
   85734:	002f883a 	mov	r23,zero
   85738:	003f3406 	br	8540c <_malloc_r+0x3fc>
   8573c:	d5200315 	stw	r20,-32756(gp)
   85740:	003f2106 	br	853c8 <_malloc_r+0x3b8>
   85744:	01405504 	movi	r5,340
   85748:	28c00436 	bltu	r5,r3,8575c <_malloc_r+0x74c>
   8574c:	100ad3fa 	srli	r5,r2,15
   85750:	29401dc4 	addi	r5,r5,119
   85754:	294d883a 	add	r6,r5,r5
   85758:	003f6b06 	br	85508 <_malloc_r+0x4f8>
   8575c:	01415504 	movi	r5,1364
   85760:	28c00936 	bltu	r5,r3,85788 <_malloc_r+0x778>
   85764:	100ad4ba 	srli	r5,r2,18
   85768:	29401f04 	addi	r5,r5,124
   8576c:	294d883a 	add	r6,r5,r5
   85770:	003f6506 	br	85508 <_malloc_r+0x4f8>
   85774:	98800117 	ldw	r2,4(r19)
   85778:	0146303a 	nor	r3,zero,r5
   8577c:	1884703a 	and	r2,r3,r2
   85780:	98800115 	stw	r2,4(r19)
   85784:	003f9006 	br	855c8 <_malloc_r+0x5b8>
   85788:	01803f04 	movi	r6,252
   8578c:	01401f84 	movi	r5,126
   85790:	003f5d06 	br	85508 <_malloc_r+0x4f8>

00085794 <memchr>:
   85794:	008000c4 	movi	r2,3
   85798:	29403fcc 	andi	r5,r5,255
   8579c:	1180282e 	bgeu	r2,r6,85840 <memchr+0xac>
   857a0:	2086703a 	and	r3,r4,r2
   857a4:	1800351e 	bne	r3,zero,8587c <memchr+0xe8>
   857a8:	2816923a 	slli	r11,r5,8
   857ac:	2093883a 	add	r9,r4,r2
   857b0:	22000084 	addi	r8,r4,2
   857b4:	5957883a 	add	r11,r11,r5
   857b8:	5816923a 	slli	r11,r11,8
   857bc:	20c00044 	addi	r3,r4,1
   857c0:	037fbff4 	movhi	r13,65279
   857c4:	6b7fbfc4 	addi	r13,r13,-257
   857c8:	5957883a 	add	r11,r11,r5
   857cc:	5816923a 	slli	r11,r11,8
   857d0:	03202074 	movhi	r12,32897
   857d4:	63202004 	addi	r12,r12,-32640
   857d8:	101d883a 	mov	r14,r2
   857dc:	5957883a 	add	r11,r11,r5
   857e0:	21c00017 	ldw	r7,0(r4)
   857e4:	31bfff04 	addi	r6,r6,-4
   857e8:	1805883a 	mov	r2,r3
   857ec:	3acef03a 	xor	r7,r7,r11
   857f0:	3b55883a 	add	r10,r7,r13
   857f4:	01ce303a 	nor	r7,zero,r7
   857f8:	51ce703a 	and	r7,r10,r7
   857fc:	3b0e703a 	and	r7,r7,r12
   85800:	38000a26 	beq	r7,zero,8582c <memchr+0x98>
   85804:	21c00003 	ldbu	r7,0(r4)
   85808:	39401e26 	beq	r7,r5,85884 <memchr+0xf0>
   8580c:	19c00003 	ldbu	r7,0(r3)
   85810:	39401926 	beq	r7,r5,85878 <memchr+0xe4>
   85814:	41c00003 	ldbu	r7,0(r8)
   85818:	4005883a 	mov	r2,r8
   8581c:	39401626 	beq	r7,r5,85878 <memchr+0xe4>
   85820:	49c00003 	ldbu	r7,0(r9)
   85824:	4805883a 	mov	r2,r9
   85828:	39401326 	beq	r7,r5,85878 <memchr+0xe4>
   8582c:	21000104 	addi	r4,r4,4
   85830:	4a400104 	addi	r9,r9,4
   85834:	42000104 	addi	r8,r8,4
   85838:	18c00104 	addi	r3,r3,4
   8583c:	71bfe836 	bltu	r14,r6,857e0 <memchr+0x4c>
   85840:	2005883a 	mov	r2,r4
   85844:	30000a26 	beq	r6,zero,85870 <memchr+0xdc>
   85848:	10c00003 	ldbu	r3,0(r2)
   8584c:	19400a26 	beq	r3,r5,85878 <memchr+0xe4>
   85850:	10c00044 	addi	r3,r2,1
   85854:	118d883a 	add	r6,r2,r6
   85858:	00000306 	br	85868 <memchr+0xd4>
   8585c:	11000003 	ldbu	r4,0(r2)
   85860:	18c00044 	addi	r3,r3,1
   85864:	21400426 	beq	r4,r5,85878 <memchr+0xe4>
   85868:	1805883a 	mov	r2,r3
   8586c:	19bffb1e 	bne	r3,r6,8585c <memchr+0xc8>
   85870:	0005883a 	mov	r2,zero
   85874:	f800283a 	ret
   85878:	f800283a 	ret
   8587c:	2005883a 	mov	r2,r4
   85880:	003ff106 	br	85848 <memchr+0xb4>
   85884:	2005883a 	mov	r2,r4
   85888:	f800283a 	ret

0008588c <memcpy>:
   8588c:	defffb04 	addi	sp,sp,-20
   85890:	dc000015 	stw	r16,0(sp)
   85894:	dfc00415 	stw	ra,16(sp)
   85898:	dcc00315 	stw	r19,12(sp)
   8589c:	dc800215 	stw	r18,8(sp)
   858a0:	dc400115 	stw	r17,4(sp)
   858a4:	00c003c4 	movi	r3,15
   858a8:	2021883a 	mov	r16,r4
   858ac:	3005883a 	mov	r2,r6
   858b0:	1980032e 	bgeu	r3,r6,858c0 <memcpy+0x34>
   858b4:	2906b03a 	or	r3,r5,r4
   858b8:	18c000cc 	andi	r3,r3,3
   858bc:	18001026 	beq	r3,zero,85900 <memcpy+0x74>
   858c0:	8007883a 	mov	r3,r16
   858c4:	288f883a 	add	r7,r5,r2
   858c8:	10000526 	beq	r2,zero,858e0 <memcpy+0x54>
   858cc:	29800003 	ldbu	r6,0(r5)
   858d0:	18c00044 	addi	r3,r3,1
   858d4:	29400044 	addi	r5,r5,1
   858d8:	19bfffc5 	stb	r6,-1(r3)
   858dc:	29fffb1e 	bne	r5,r7,858cc <memcpy+0x40>
   858e0:	8005883a 	mov	r2,r16
   858e4:	dfc00417 	ldw	ra,16(sp)
   858e8:	dcc00317 	ldw	r19,12(sp)
   858ec:	dc800217 	ldw	r18,8(sp)
   858f0:	dc400117 	ldw	r17,4(sp)
   858f4:	dc000017 	ldw	r16,0(sp)
   858f8:	dec00504 	addi	sp,sp,20
   858fc:	f800283a 	ret
   85900:	32bffc04 	addi	r10,r6,-16
   85904:	5014d13a 	srli	r10,r10,4
   85908:	20800404 	addi	r2,r4,16
   8590c:	2007883a 	mov	r3,r4
   85910:	5008913a 	slli	r4,r10,4
   85914:	280f883a 	mov	r7,r5
   85918:	1105883a 	add	r2,r2,r4
   8591c:	3a000017 	ldw	r8,0(r7)
   85920:	18c00404 	addi	r3,r3,16
   85924:	39c00404 	addi	r7,r7,16
   85928:	1a3ffc15 	stw	r8,-16(r3)
   8592c:	3a3ffd17 	ldw	r8,-12(r7)
   85930:	1a3ffd15 	stw	r8,-12(r3)
   85934:	3a3ffe17 	ldw	r8,-8(r7)
   85938:	1a3ffe15 	stw	r8,-8(r3)
   8593c:	3a3fff17 	ldw	r8,-4(r7)
   85940:	1a3fff15 	stw	r8,-4(r3)
   85944:	18bff51e 	bne	r3,r2,8591c <memcpy+0x90>
   85948:	52800044 	addi	r10,r10,1
   8594c:	5014913a 	slli	r10,r10,4
   85950:	308003cc 	andi	r2,r6,15
   85954:	010000c4 	movi	r4,3
   85958:	8287883a 	add	r3,r16,r10
   8595c:	2a95883a 	add	r10,r5,r10
   85960:	2080182e 	bgeu	r4,r2,859c4 <memcpy+0x138>
   85964:	147fff04 	addi	r17,r2,-4
   85968:	8808d0ba 	srli	r4,r17,2
   8596c:	1a400104 	addi	r9,r3,4
   85970:	180d883a 	mov	r6,r3
   85974:	2105883a 	add	r2,r4,r4
   85978:	1085883a 	add	r2,r2,r2
   8597c:	4893883a 	add	r9,r9,r2
   85980:	500f883a 	mov	r7,r10
   85984:	3a000017 	ldw	r8,0(r7)
   85988:	31800104 	addi	r6,r6,4
   8598c:	39c00104 	addi	r7,r7,4
   85990:	323fff15 	stw	r8,-4(r6)
   85994:	327ffb1e 	bne	r6,r9,85984 <memcpy+0xf8>
   85998:	20800044 	addi	r2,r4,1
   8599c:	1085883a 	add	r2,r2,r2
   859a0:	1085883a 	add	r2,r2,r2
   859a4:	017fff04 	movi	r5,-4
   859a8:	18a5883a 	add	r18,r3,r2
   859ac:	50a7883a 	add	r19,r10,r2
   859b0:	00895300 	call	89530 <__mulsi3>
   859b4:	1445883a 	add	r2,r2,r17
   859b8:	980b883a 	mov	r5,r19
   859bc:	9007883a 	mov	r3,r18
   859c0:	003fc006 	br	858c4 <memcpy+0x38>
   859c4:	500b883a 	mov	r5,r10
   859c8:	003fbe06 	br	858c4 <memcpy+0x38>

000859cc <memmove>:
   859cc:	defffb04 	addi	sp,sp,-20
   859d0:	dc000015 	stw	r16,0(sp)
   859d4:	dfc00415 	stw	ra,16(sp)
   859d8:	dcc00315 	stw	r19,12(sp)
   859dc:	dc800215 	stw	r18,8(sp)
   859e0:	dc400115 	stw	r17,4(sp)
   859e4:	2021883a 	mov	r16,r4
   859e8:	300f883a 	mov	r7,r6
   859ec:	2900122e 	bgeu	r5,r4,85a38 <memmove+0x6c>
   859f0:	2987883a 	add	r3,r5,r6
   859f4:	20c0102e 	bgeu	r4,r3,85a38 <memmove+0x6c>
   859f8:	218b883a 	add	r5,r4,r6
   859fc:	1989c83a 	sub	r4,r3,r6
   85a00:	30000526 	beq	r6,zero,85a18 <memmove+0x4c>
   85a04:	18ffffc4 	addi	r3,r3,-1
   85a08:	18800003 	ldbu	r2,0(r3)
   85a0c:	297fffc4 	addi	r5,r5,-1
   85a10:	28800005 	stb	r2,0(r5)
   85a14:	193ffb1e 	bne	r3,r4,85a04 <memmove+0x38>
   85a18:	8005883a 	mov	r2,r16
   85a1c:	dfc00417 	ldw	ra,16(sp)
   85a20:	dcc00317 	ldw	r19,12(sp)
   85a24:	dc800217 	ldw	r18,8(sp)
   85a28:	dc400117 	ldw	r17,4(sp)
   85a2c:	dc000017 	ldw	r16,0(sp)
   85a30:	dec00504 	addi	sp,sp,20
   85a34:	f800283a 	ret
   85a38:	008003c4 	movi	r2,15
   85a3c:	1180422e 	bgeu	r2,r6,85b48 <memmove+0x17c>
   85a40:	2c04b03a 	or	r2,r5,r16
   85a44:	108000cc 	andi	r2,r2,3
   85a48:	10003f1e 	bne	r2,zero,85b48 <memmove+0x17c>
   85a4c:	32bffc04 	addi	r10,r6,-16
   85a50:	5014d13a 	srli	r10,r10,4
   85a54:	81000404 	addi	r4,r16,16
   85a58:	8007883a 	mov	r3,r16
   85a5c:	5004913a 	slli	r2,r10,4
   85a60:	280f883a 	mov	r7,r5
   85a64:	2089883a 	add	r4,r4,r2
   85a68:	38800017 	ldw	r2,0(r7)
   85a6c:	18c00404 	addi	r3,r3,16
   85a70:	39c00404 	addi	r7,r7,16
   85a74:	18bffc15 	stw	r2,-16(r3)
   85a78:	38bffd17 	ldw	r2,-12(r7)
   85a7c:	18bffd15 	stw	r2,-12(r3)
   85a80:	38bffe17 	ldw	r2,-8(r7)
   85a84:	18bffe15 	stw	r2,-8(r3)
   85a88:	38bfff17 	ldw	r2,-4(r7)
   85a8c:	18bfff15 	stw	r2,-4(r3)
   85a90:	193ff51e 	bne	r3,r4,85a68 <memmove+0x9c>
   85a94:	52800044 	addi	r10,r10,1
   85a98:	5014913a 	slli	r10,r10,4
   85a9c:	31c003cc 	andi	r7,r6,15
   85aa0:	008000c4 	movi	r2,3
   85aa4:	8287883a 	add	r3,r16,r10
   85aa8:	2a95883a 	add	r10,r5,r10
   85aac:	11c0282e 	bgeu	r2,r7,85b50 <memmove+0x184>
   85ab0:	3c7fff04 	addi	r17,r7,-4
   85ab4:	8808d0ba 	srli	r4,r17,2
   85ab8:	1a400104 	addi	r9,r3,4
   85abc:	180d883a 	mov	r6,r3
   85ac0:	2105883a 	add	r2,r4,r4
   85ac4:	1085883a 	add	r2,r2,r2
   85ac8:	4893883a 	add	r9,r9,r2
   85acc:	5005883a 	mov	r2,r10
   85ad0:	12000017 	ldw	r8,0(r2)
   85ad4:	31800104 	addi	r6,r6,4
   85ad8:	10800104 	addi	r2,r2,4
   85adc:	323fff15 	stw	r8,-4(r6)
   85ae0:	327ffb1e 	bne	r6,r9,85ad0 <memmove+0x104>
   85ae4:	20800044 	addi	r2,r4,1
   85ae8:	1085883a 	add	r2,r2,r2
   85aec:	1085883a 	add	r2,r2,r2
   85af0:	017fff04 	movi	r5,-4
   85af4:	18a5883a 	add	r18,r3,r2
   85af8:	50a7883a 	add	r19,r10,r2
   85afc:	00895300 	call	89530 <__mulsi3>
   85b00:	144f883a 	add	r7,r2,r17
   85b04:	980b883a 	mov	r5,r19
   85b08:	9007883a 	mov	r3,r18
   85b0c:	383fc226 	beq	r7,zero,85a18 <memmove+0x4c>
   85b10:	19cf883a 	add	r7,r3,r7
   85b14:	29800003 	ldbu	r6,0(r5)
   85b18:	18c00044 	addi	r3,r3,1
   85b1c:	29400044 	addi	r5,r5,1
   85b20:	19bfffc5 	stb	r6,-1(r3)
   85b24:	19fffb1e 	bne	r3,r7,85b14 <memmove+0x148>
   85b28:	8005883a 	mov	r2,r16
   85b2c:	dfc00417 	ldw	ra,16(sp)
   85b30:	dcc00317 	ldw	r19,12(sp)
   85b34:	dc800217 	ldw	r18,8(sp)
   85b38:	dc400117 	ldw	r17,4(sp)
   85b3c:	dc000017 	ldw	r16,0(sp)
   85b40:	dec00504 	addi	sp,sp,20
   85b44:	f800283a 	ret
   85b48:	8007883a 	mov	r3,r16
   85b4c:	003fef06 	br	85b0c <memmove+0x140>
   85b50:	500b883a 	mov	r5,r10
   85b54:	003fed06 	br	85b0c <memmove+0x140>

00085b58 <memset>:
   85b58:	00c000c4 	movi	r3,3
   85b5c:	2005883a 	mov	r2,r4
   85b60:	29403fcc 	andi	r5,r5,255
   85b64:	19802d2e 	bgeu	r3,r6,85c1c <memset+0xc4>
   85b68:	20c6703a 	and	r3,r4,r3
   85b6c:	18002e1e 	bne	r3,zero,85c28 <memset+0xd0>
   85b70:	2806923a 	slli	r3,r5,8
   85b74:	010003c4 	movi	r4,15
   85b78:	3011883a 	mov	r8,r6
   85b7c:	1946b03a 	or	r3,r3,r5
   85b80:	180e943a 	slli	r7,r3,16
   85b84:	38ceb03a 	or	r7,r7,r3
   85b88:	1007883a 	mov	r3,r2
   85b8c:	21800f2e 	bgeu	r4,r6,85bcc <memset+0x74>
   85b90:	19c00015 	stw	r7,0(r3)
   85b94:	19c00115 	stw	r7,4(r3)
   85b98:	19c00215 	stw	r7,8(r3)
   85b9c:	19c00315 	stw	r7,12(r3)
   85ba0:	423ffc04 	addi	r8,r8,-16
   85ba4:	18c00404 	addi	r3,r3,16
   85ba8:	223ff936 	bltu	r4,r8,85b90 <memset+0x38>
   85bac:	30fffc04 	addi	r3,r6,-16
   85bb0:	1806d13a 	srli	r3,r3,4
   85bb4:	318003cc 	andi	r6,r6,15
   85bb8:	010000c4 	movi	r4,3
   85bbc:	18c00044 	addi	r3,r3,1
   85bc0:	1806913a 	slli	r3,r3,4
   85bc4:	10c7883a 	add	r3,r2,r3
   85bc8:	21800e2e 	bgeu	r4,r6,85c04 <memset+0xac>
   85bcc:	1813883a 	mov	r9,r3
   85bd0:	3011883a 	mov	r8,r6
   85bd4:	010000c4 	movi	r4,3
   85bd8:	49c00015 	stw	r7,0(r9)
   85bdc:	423fff04 	addi	r8,r8,-4
   85be0:	4a400104 	addi	r9,r9,4
   85be4:	223ffc36 	bltu	r4,r8,85bd8 <memset+0x80>
   85be8:	313fff04 	addi	r4,r6,-4
   85bec:	2008d0ba 	srli	r4,r4,2
   85bf0:	318000cc 	andi	r6,r6,3
   85bf4:	21000044 	addi	r4,r4,1
   85bf8:	2109883a 	add	r4,r4,r4
   85bfc:	2109883a 	add	r4,r4,r4
   85c00:	1907883a 	add	r3,r3,r4
   85c04:	30000a26 	beq	r6,zero,85c30 <memset+0xd8>
   85c08:	198d883a 	add	r6,r3,r6
   85c0c:	19400005 	stb	r5,0(r3)
   85c10:	18c00044 	addi	r3,r3,1
   85c14:	19bffd1e 	bne	r3,r6,85c0c <memset+0xb4>
   85c18:	f800283a 	ret
   85c1c:	2007883a 	mov	r3,r4
   85c20:	303ff91e 	bne	r6,zero,85c08 <memset+0xb0>
   85c24:	00000206 	br	85c30 <memset+0xd8>
   85c28:	2007883a 	mov	r3,r4
   85c2c:	003ff606 	br	85c08 <memset+0xb0>
   85c30:	f800283a 	ret

00085c34 <_Balloc>:
   85c34:	20801317 	ldw	r2,76(r4)
   85c38:	defffc04 	addi	sp,sp,-16
   85c3c:	dc400115 	stw	r17,4(sp)
   85c40:	dc000015 	stw	r16,0(sp)
   85c44:	dfc00315 	stw	ra,12(sp)
   85c48:	dc800215 	stw	r18,8(sp)
   85c4c:	2023883a 	mov	r17,r4
   85c50:	2821883a 	mov	r16,r5
   85c54:	10000f26 	beq	r2,zero,85c94 <_Balloc+0x60>
   85c58:	8407883a 	add	r3,r16,r16
   85c5c:	18c7883a 	add	r3,r3,r3
   85c60:	10c7883a 	add	r3,r2,r3
   85c64:	18800017 	ldw	r2,0(r3)
   85c68:	10001126 	beq	r2,zero,85cb0 <_Balloc+0x7c>
   85c6c:	11000017 	ldw	r4,0(r2)
   85c70:	19000015 	stw	r4,0(r3)
   85c74:	10000415 	stw	zero,16(r2)
   85c78:	10000315 	stw	zero,12(r2)
   85c7c:	dfc00317 	ldw	ra,12(sp)
   85c80:	dc800217 	ldw	r18,8(sp)
   85c84:	dc400117 	ldw	r17,4(sp)
   85c88:	dc000017 	ldw	r16,0(sp)
   85c8c:	dec00404 	addi	sp,sp,16
   85c90:	f800283a 	ret
   85c94:	01400104 	movi	r5,4
   85c98:	01800404 	movi	r6,16
   85c9c:	00876240 	call	87624 <_calloc_r>
   85ca0:	88801315 	stw	r2,76(r17)
   85ca4:	103fec1e 	bne	r2,zero,85c58 <_Balloc+0x24>
   85ca8:	0005883a 	mov	r2,zero
   85cac:	003ff306 	br	85c7c <_Balloc+0x48>
   85cb0:	01400044 	movi	r5,1
   85cb4:	2c24983a 	sll	r18,r5,r16
   85cb8:	8809883a 	mov	r4,r17
   85cbc:	91800144 	addi	r6,r18,5
   85cc0:	318d883a 	add	r6,r6,r6
   85cc4:	318d883a 	add	r6,r6,r6
   85cc8:	00876240 	call	87624 <_calloc_r>
   85ccc:	103ff626 	beq	r2,zero,85ca8 <_Balloc+0x74>
   85cd0:	14000115 	stw	r16,4(r2)
   85cd4:	14800215 	stw	r18,8(r2)
   85cd8:	003fe606 	br	85c74 <_Balloc+0x40>

00085cdc <_Bfree>:
   85cdc:	28000826 	beq	r5,zero,85d00 <_Bfree+0x24>
   85ce0:	28c00117 	ldw	r3,4(r5)
   85ce4:	20801317 	ldw	r2,76(r4)
   85ce8:	18c7883a 	add	r3,r3,r3
   85cec:	18c7883a 	add	r3,r3,r3
   85cf0:	10c5883a 	add	r2,r2,r3
   85cf4:	10c00017 	ldw	r3,0(r2)
   85cf8:	28c00015 	stw	r3,0(r5)
   85cfc:	11400015 	stw	r5,0(r2)
   85d00:	f800283a 	ret

00085d04 <__multadd>:
   85d04:	defff604 	addi	sp,sp,-40
   85d08:	dd400515 	stw	r21,20(sp)
   85d0c:	2d400417 	ldw	r21,16(r5)
   85d10:	df000815 	stw	fp,32(sp)
   85d14:	ddc00715 	stw	r23,28(sp)
   85d18:	dd800615 	stw	r22,24(sp)
   85d1c:	dd000415 	stw	r20,16(sp)
   85d20:	dc400115 	stw	r17,4(sp)
   85d24:	dc000015 	stw	r16,0(sp)
   85d28:	dfc00915 	stw	ra,36(sp)
   85d2c:	dcc00315 	stw	r19,12(sp)
   85d30:	dc800215 	stw	r18,8(sp)
   85d34:	282d883a 	mov	r22,r5
   85d38:	202f883a 	mov	r23,r4
   85d3c:	3029883a 	mov	r20,r6
   85d40:	3839883a 	mov	fp,r7
   85d44:	2c000504 	addi	r16,r5,20
   85d48:	0023883a 	mov	r17,zero
   85d4c:	84c00017 	ldw	r19,0(r16)
   85d50:	a00b883a 	mov	r5,r20
   85d54:	8c400044 	addi	r17,r17,1
   85d58:	993fffcc 	andi	r4,r19,65535
   85d5c:	00895300 	call	89530 <__mulsi3>
   85d60:	1725883a 	add	r18,r2,fp
   85d64:	9808d43a 	srli	r4,r19,16
   85d68:	9026d43a 	srli	r19,r18,16
   85d6c:	a00b883a 	mov	r5,r20
   85d70:	00895300 	call	89530 <__mulsi3>
   85d74:	988f883a 	add	r7,r19,r2
   85d78:	3804943a 	slli	r2,r7,16
   85d7c:	94bfffcc 	andi	r18,r18,65535
   85d80:	3838d43a 	srli	fp,r7,16
   85d84:	14a5883a 	add	r18,r2,r18
   85d88:	84800015 	stw	r18,0(r16)
   85d8c:	84000104 	addi	r16,r16,4
   85d90:	8d7fee16 	blt	r17,r21,85d4c <__multadd+0x48>
   85d94:	e0000926 	beq	fp,zero,85dbc <__multadd+0xb8>
   85d98:	b0800217 	ldw	r2,8(r22)
   85d9c:	a880140e 	bge	r21,r2,85df0 <__multadd+0xec>
   85da0:	a8800144 	addi	r2,r21,5
   85da4:	1085883a 	add	r2,r2,r2
   85da8:	1085883a 	add	r2,r2,r2
   85dac:	b085883a 	add	r2,r22,r2
   85db0:	ad400044 	addi	r21,r21,1
   85db4:	17000015 	stw	fp,0(r2)
   85db8:	b5400415 	stw	r21,16(r22)
   85dbc:	b005883a 	mov	r2,r22
   85dc0:	dfc00917 	ldw	ra,36(sp)
   85dc4:	df000817 	ldw	fp,32(sp)
   85dc8:	ddc00717 	ldw	r23,28(sp)
   85dcc:	dd800617 	ldw	r22,24(sp)
   85dd0:	dd400517 	ldw	r21,20(sp)
   85dd4:	dd000417 	ldw	r20,16(sp)
   85dd8:	dcc00317 	ldw	r19,12(sp)
   85ddc:	dc800217 	ldw	r18,8(sp)
   85de0:	dc400117 	ldw	r17,4(sp)
   85de4:	dc000017 	ldw	r16,0(sp)
   85de8:	dec00a04 	addi	sp,sp,40
   85dec:	f800283a 	ret
   85df0:	b1400117 	ldw	r5,4(r22)
   85df4:	b809883a 	mov	r4,r23
   85df8:	29400044 	addi	r5,r5,1
   85dfc:	0085c340 	call	85c34 <_Balloc>
   85e00:	b1800417 	ldw	r6,16(r22)
   85e04:	b1400304 	addi	r5,r22,12
   85e08:	11000304 	addi	r4,r2,12
   85e0c:	31800084 	addi	r6,r6,2
   85e10:	318d883a 	add	r6,r6,r6
   85e14:	318d883a 	add	r6,r6,r6
   85e18:	1021883a 	mov	r16,r2
   85e1c:	008588c0 	call	8588c <memcpy>
   85e20:	b0c00117 	ldw	r3,4(r22)
   85e24:	b8801317 	ldw	r2,76(r23)
   85e28:	18c7883a 	add	r3,r3,r3
   85e2c:	18c7883a 	add	r3,r3,r3
   85e30:	10c5883a 	add	r2,r2,r3
   85e34:	10c00017 	ldw	r3,0(r2)
   85e38:	b0c00015 	stw	r3,0(r22)
   85e3c:	15800015 	stw	r22,0(r2)
   85e40:	802d883a 	mov	r22,r16
   85e44:	003fd606 	br	85da0 <__multadd+0x9c>

00085e48 <__s2b>:
   85e48:	defff904 	addi	sp,sp,-28
   85e4c:	dd000415 	stw	r20,16(sp)
   85e50:	dc400115 	stw	r17,4(sp)
   85e54:	2829883a 	mov	r20,r5
   85e58:	2023883a 	mov	r17,r4
   85e5c:	01400244 	movi	r5,9
   85e60:	39000204 	addi	r4,r7,8
   85e64:	dcc00315 	stw	r19,12(sp)
   85e68:	dc800215 	stw	r18,8(sp)
   85e6c:	dfc00615 	stw	ra,24(sp)
   85e70:	dd400515 	stw	r21,20(sp)
   85e74:	dc000015 	stw	r16,0(sp)
   85e78:	3825883a 	mov	r18,r7
   85e7c:	3027883a 	mov	r19,r6
   85e80:	00894740 	call	89474 <__divsi3>
   85e84:	00c00044 	movi	r3,1
   85e88:	000b883a 	mov	r5,zero
   85e8c:	1880030e 	bge	r3,r2,85e9c <__s2b+0x54>
   85e90:	18c7883a 	add	r3,r3,r3
   85e94:	29400044 	addi	r5,r5,1
   85e98:	18bffd16 	blt	r3,r2,85e90 <__s2b+0x48>
   85e9c:	8809883a 	mov	r4,r17
   85ea0:	0085c340 	call	85c34 <_Balloc>
   85ea4:	d8c00717 	ldw	r3,28(sp)
   85ea8:	10c00515 	stw	r3,20(r2)
   85eac:	00c00044 	movi	r3,1
   85eb0:	10c00415 	stw	r3,16(r2)
   85eb4:	00c00244 	movi	r3,9
   85eb8:	1cc0210e 	bge	r3,r19,85f40 <__s2b+0xf8>
   85ebc:	a0eb883a 	add	r21,r20,r3
   85ec0:	a821883a 	mov	r16,r21
   85ec4:	a4e9883a 	add	r20,r20,r19
   85ec8:	81c00007 	ldb	r7,0(r16)
   85ecc:	8809883a 	mov	r4,r17
   85ed0:	84000044 	addi	r16,r16,1
   85ed4:	100b883a 	mov	r5,r2
   85ed8:	01800284 	movi	r6,10
   85edc:	39fff404 	addi	r7,r7,-48
   85ee0:	0085d040 	call	85d04 <__multadd>
   85ee4:	853ff81e 	bne	r16,r20,85ec8 <__s2b+0x80>
   85ee8:	ace1883a 	add	r16,r21,r19
   85eec:	843ffe04 	addi	r16,r16,-8
   85ef0:	9c800a0e 	bge	r19,r18,85f1c <__s2b+0xd4>
   85ef4:	94e5c83a 	sub	r18,r18,r19
   85ef8:	84a5883a 	add	r18,r16,r18
   85efc:	81c00007 	ldb	r7,0(r16)
   85f00:	8809883a 	mov	r4,r17
   85f04:	84000044 	addi	r16,r16,1
   85f08:	100b883a 	mov	r5,r2
   85f0c:	01800284 	movi	r6,10
   85f10:	39fff404 	addi	r7,r7,-48
   85f14:	0085d040 	call	85d04 <__multadd>
   85f18:	84bff81e 	bne	r16,r18,85efc <__s2b+0xb4>
   85f1c:	dfc00617 	ldw	ra,24(sp)
   85f20:	dd400517 	ldw	r21,20(sp)
   85f24:	dd000417 	ldw	r20,16(sp)
   85f28:	dcc00317 	ldw	r19,12(sp)
   85f2c:	dc800217 	ldw	r18,8(sp)
   85f30:	dc400117 	ldw	r17,4(sp)
   85f34:	dc000017 	ldw	r16,0(sp)
   85f38:	dec00704 	addi	sp,sp,28
   85f3c:	f800283a 	ret
   85f40:	a4000284 	addi	r16,r20,10
   85f44:	1827883a 	mov	r19,r3
   85f48:	003fe906 	br	85ef0 <__s2b+0xa8>

00085f4c <__hi0bits>:
   85f4c:	20bfffec 	andhi	r2,r4,65535
   85f50:	1000141e 	bne	r2,zero,85fa4 <__hi0bits+0x58>
   85f54:	2008943a 	slli	r4,r4,16
   85f58:	00800404 	movi	r2,16
   85f5c:	20ffc02c 	andhi	r3,r4,65280
   85f60:	1800021e 	bne	r3,zero,85f6c <__hi0bits+0x20>
   85f64:	2008923a 	slli	r4,r4,8
   85f68:	10800204 	addi	r2,r2,8
   85f6c:	20fc002c 	andhi	r3,r4,61440
   85f70:	1800021e 	bne	r3,zero,85f7c <__hi0bits+0x30>
   85f74:	2008913a 	slli	r4,r4,4
   85f78:	10800104 	addi	r2,r2,4
   85f7c:	20f0002c 	andhi	r3,r4,49152
   85f80:	1800031e 	bne	r3,zero,85f90 <__hi0bits+0x44>
   85f84:	2109883a 	add	r4,r4,r4
   85f88:	10800084 	addi	r2,r2,2
   85f8c:	2109883a 	add	r4,r4,r4
   85f90:	20000316 	blt	r4,zero,85fa0 <__hi0bits+0x54>
   85f94:	2110002c 	andhi	r4,r4,16384
   85f98:	2000041e 	bne	r4,zero,85fac <__hi0bits+0x60>
   85f9c:	00800804 	movi	r2,32
   85fa0:	f800283a 	ret
   85fa4:	0005883a 	mov	r2,zero
   85fa8:	003fec06 	br	85f5c <__hi0bits+0x10>
   85fac:	10800044 	addi	r2,r2,1
   85fb0:	f800283a 	ret

00085fb4 <__lo0bits>:
   85fb4:	20c00017 	ldw	r3,0(r4)
   85fb8:	188001cc 	andi	r2,r3,7
   85fbc:	10000826 	beq	r2,zero,85fe0 <__lo0bits+0x2c>
   85fc0:	1880004c 	andi	r2,r3,1
   85fc4:	1000211e 	bne	r2,zero,8604c <__lo0bits+0x98>
   85fc8:	1880008c 	andi	r2,r3,2
   85fcc:	1000211e 	bne	r2,zero,86054 <__lo0bits+0xa0>
   85fd0:	1806d0ba 	srli	r3,r3,2
   85fd4:	00800084 	movi	r2,2
   85fd8:	20c00015 	stw	r3,0(r4)
   85fdc:	f800283a 	ret
   85fe0:	18bfffcc 	andi	r2,r3,65535
   85fe4:	10001326 	beq	r2,zero,86034 <__lo0bits+0x80>
   85fe8:	0005883a 	mov	r2,zero
   85fec:	19403fcc 	andi	r5,r3,255
   85ff0:	2800021e 	bne	r5,zero,85ffc <__lo0bits+0x48>
   85ff4:	1806d23a 	srli	r3,r3,8
   85ff8:	10800204 	addi	r2,r2,8
   85ffc:	194003cc 	andi	r5,r3,15
   86000:	2800021e 	bne	r5,zero,8600c <__lo0bits+0x58>
   86004:	1806d13a 	srli	r3,r3,4
   86008:	10800104 	addi	r2,r2,4
   8600c:	194000cc 	andi	r5,r3,3
   86010:	2800021e 	bne	r5,zero,8601c <__lo0bits+0x68>
   86014:	1806d0ba 	srli	r3,r3,2
   86018:	10800084 	addi	r2,r2,2
   8601c:	1940004c 	andi	r5,r3,1
   86020:	2800081e 	bne	r5,zero,86044 <__lo0bits+0x90>
   86024:	1806d07a 	srli	r3,r3,1
   86028:	1800051e 	bne	r3,zero,86040 <__lo0bits+0x8c>
   8602c:	00800804 	movi	r2,32
   86030:	f800283a 	ret
   86034:	1806d43a 	srli	r3,r3,16
   86038:	00800404 	movi	r2,16
   8603c:	003feb06 	br	85fec <__lo0bits+0x38>
   86040:	10800044 	addi	r2,r2,1
   86044:	20c00015 	stw	r3,0(r4)
   86048:	f800283a 	ret
   8604c:	0005883a 	mov	r2,zero
   86050:	f800283a 	ret
   86054:	1806d07a 	srli	r3,r3,1
   86058:	00800044 	movi	r2,1
   8605c:	20c00015 	stw	r3,0(r4)
   86060:	f800283a 	ret

00086064 <__i2b>:
   86064:	defffd04 	addi	sp,sp,-12
   86068:	dc000015 	stw	r16,0(sp)
   8606c:	04000044 	movi	r16,1
   86070:	dc400115 	stw	r17,4(sp)
   86074:	2823883a 	mov	r17,r5
   86078:	800b883a 	mov	r5,r16
   8607c:	dfc00215 	stw	ra,8(sp)
   86080:	0085c340 	call	85c34 <_Balloc>
   86084:	14400515 	stw	r17,20(r2)
   86088:	14000415 	stw	r16,16(r2)
   8608c:	dfc00217 	ldw	ra,8(sp)
   86090:	dc400117 	ldw	r17,4(sp)
   86094:	dc000017 	ldw	r16,0(sp)
   86098:	dec00304 	addi	sp,sp,12
   8609c:	f800283a 	ret

000860a0 <__multiply>:
   860a0:	defff004 	addi	sp,sp,-64
   860a4:	dc800815 	stw	r18,32(sp)
   860a8:	dc400715 	stw	r17,28(sp)
   860ac:	34800417 	ldw	r18,16(r6)
   860b0:	2c400417 	ldw	r17,16(r5)
   860b4:	ddc00d15 	stw	r23,52(sp)
   860b8:	dc000615 	stw	r16,24(sp)
   860bc:	dfc00f15 	stw	ra,60(sp)
   860c0:	df000e15 	stw	fp,56(sp)
   860c4:	dd800c15 	stw	r22,48(sp)
   860c8:	dd400b15 	stw	r21,44(sp)
   860cc:	dd000a15 	stw	r20,40(sp)
   860d0:	dcc00915 	stw	r19,36(sp)
   860d4:	2821883a 	mov	r16,r5
   860d8:	302f883a 	mov	r23,r6
   860dc:	8c80050e 	bge	r17,r18,860f4 <__multiply+0x54>
   860e0:	8807883a 	mov	r3,r17
   860e4:	3021883a 	mov	r16,r6
   860e8:	9023883a 	mov	r17,r18
   860ec:	282f883a 	mov	r23,r5
   860f0:	1825883a 	mov	r18,r3
   860f4:	80800217 	ldw	r2,8(r16)
   860f8:	8c87883a 	add	r3,r17,r18
   860fc:	d8c00115 	stw	r3,4(sp)
   86100:	81400117 	ldw	r5,4(r16)
   86104:	10c0010e 	bge	r2,r3,8610c <__multiply+0x6c>
   86108:	29400044 	addi	r5,r5,1
   8610c:	0085c340 	call	85c34 <_Balloc>
   86110:	d8c00117 	ldw	r3,4(sp)
   86114:	d8800515 	stw	r2,20(sp)
   86118:	14c00504 	addi	r19,r2,20
   8611c:	1d400144 	addi	r21,r3,5
   86120:	ad6b883a 	add	r21,r21,r21
   86124:	ad6b883a 	add	r21,r21,r21
   86128:	156b883a 	add	r21,r2,r21
   8612c:	dd400215 	stw	r21,8(sp)
   86130:	9805883a 	mov	r2,r19
   86134:	9d40042e 	bgeu	r19,r21,86148 <__multiply+0xa8>
   86138:	d8c00217 	ldw	r3,8(sp)
   8613c:	10000015 	stw	zero,0(r2)
   86140:	10800104 	addi	r2,r2,4
   86144:	10fffc36 	bltu	r2,r3,86138 <__multiply+0x98>
   86148:	94800144 	addi	r18,r18,5
   8614c:	94a5883a 	add	r18,r18,r18
   86150:	94ad883a 	add	r22,r18,r18
   86154:	8c400144 	addi	r17,r17,5
   86158:	8c63883a 	add	r17,r17,r17
   8615c:	bdad883a 	add	r22,r23,r22
   86160:	80c00504 	addi	r3,r16,20
   86164:	8c63883a 	add	r17,r17,r17
   86168:	bc800504 	addi	r18,r23,20
   8616c:	dd800315 	stw	r22,12(sp)
   86170:	d8c00415 	stw	r3,16(sp)
   86174:	dcc00015 	stw	r19,0(sp)
   86178:	8463883a 	add	r17,r16,r17
   8617c:	9580412e 	bgeu	r18,r22,86284 <__multiply+0x1e4>
   86180:	90800017 	ldw	r2,0(r18)
   86184:	173fffcc 	andi	fp,r2,65535
   86188:	e0001a26 	beq	fp,zero,861f4 <__multiply+0x154>
   8618c:	dd000017 	ldw	r20,0(sp)
   86190:	dd800417 	ldw	r22,16(sp)
   86194:	002b883a 	mov	r21,zero
   86198:	b4c00017 	ldw	r19,0(r22)
   8619c:	a4000017 	ldw	r16,0(r20)
   861a0:	e00b883a 	mov	r5,fp
   861a4:	993fffcc 	andi	r4,r19,65535
   861a8:	00895300 	call	89530 <__mulsi3>
   861ac:	9808d43a 	srli	r4,r19,16
   861b0:	817fffcc 	andi	r5,r16,65535
   861b4:	1145883a 	add	r2,r2,r5
   861b8:	e00b883a 	mov	r5,fp
   861bc:	1567883a 	add	r19,r2,r21
   861c0:	8020d43a 	srli	r16,r16,16
   861c4:	00895300 	call	89530 <__mulsi3>
   861c8:	9808d43a 	srli	r4,r19,16
   861cc:	1405883a 	add	r2,r2,r16
   861d0:	a4c0000d 	sth	r19,0(r20)
   861d4:	110f883a 	add	r7,r2,r4
   861d8:	a1c0008d 	sth	r7,2(r20)
   861dc:	b5800104 	addi	r22,r22,4
   861e0:	382ad43a 	srli	r21,r7,16
   861e4:	a5000104 	addi	r20,r20,4
   861e8:	b47feb36 	bltu	r22,r17,86198 <__multiply+0xf8>
   861ec:	a5400015 	stw	r21,0(r20)
   861f0:	90800017 	ldw	r2,0(r18)
   861f4:	1038d43a 	srli	fp,r2,16
   861f8:	e0001c26 	beq	fp,zero,8626c <__multiply+0x1cc>
   861fc:	d8c00017 	ldw	r3,0(sp)
   86200:	dd000417 	ldw	r20,16(sp)
   86204:	002b883a 	mov	r21,zero
   86208:	1d800017 	ldw	r22,0(r3)
   8620c:	182f883a 	mov	r23,r3
   86210:	b021883a 	mov	r16,r22
   86214:	a4c00017 	ldw	r19,0(r20)
   86218:	8020d43a 	srli	r16,r16,16
   8621c:	e00b883a 	mov	r5,fp
   86220:	993fffcc 	andi	r4,r19,65535
   86224:	00895300 	call	89530 <__mulsi3>
   86228:	1405883a 	add	r2,r2,r16
   8622c:	9808d43a 	srli	r4,r19,16
   86230:	156b883a 	add	r21,r2,r21
   86234:	bdc00104 	addi	r23,r23,4
   86238:	bdbfff0d 	sth	r22,-4(r23)
   8623c:	bd7fff8d 	sth	r21,-2(r23)
   86240:	bc000017 	ldw	r16,0(r23)
   86244:	e00b883a 	mov	r5,fp
   86248:	00895300 	call	89530 <__mulsi3>
   8624c:	a80ed43a 	srli	r7,r21,16
   86250:	813fffcc 	andi	r4,r16,65535
   86254:	2085883a 	add	r2,r4,r2
   86258:	11ed883a 	add	r22,r2,r7
   8625c:	a5000104 	addi	r20,r20,4
   86260:	b02ad43a 	srli	r21,r22,16
   86264:	a47feb36 	bltu	r20,r17,86214 <__multiply+0x174>
   86268:	bd800015 	stw	r22,0(r23)
   8626c:	d8c00017 	ldw	r3,0(sp)
   86270:	94800104 	addi	r18,r18,4
   86274:	18c00104 	addi	r3,r3,4
   86278:	d8c00015 	stw	r3,0(sp)
   8627c:	d8c00317 	ldw	r3,12(sp)
   86280:	90ffbf36 	bltu	r18,r3,86180 <__multiply+0xe0>
   86284:	d8c00117 	ldw	r3,4(sp)
   86288:	00c00c0e 	bge	zero,r3,862bc <__multiply+0x21c>
   8628c:	d8c00217 	ldw	r3,8(sp)
   86290:	18bfff17 	ldw	r2,-4(r3)
   86294:	1d7fff04 	addi	r21,r3,-4
   86298:	10000326 	beq	r2,zero,862a8 <__multiply+0x208>
   8629c:	00000706 	br	862bc <__multiply+0x21c>
   862a0:	a8800017 	ldw	r2,0(r21)
   862a4:	1000051e 	bne	r2,zero,862bc <__multiply+0x21c>
   862a8:	d8c00117 	ldw	r3,4(sp)
   862ac:	ad7fff04 	addi	r21,r21,-4
   862b0:	18ffffc4 	addi	r3,r3,-1
   862b4:	d8c00115 	stw	r3,4(sp)
   862b8:	183ff91e 	bne	r3,zero,862a0 <__multiply+0x200>
   862bc:	d8800517 	ldw	r2,20(sp)
   862c0:	d8c00117 	ldw	r3,4(sp)
   862c4:	10c00415 	stw	r3,16(r2)
   862c8:	dfc00f17 	ldw	ra,60(sp)
   862cc:	df000e17 	ldw	fp,56(sp)
   862d0:	ddc00d17 	ldw	r23,52(sp)
   862d4:	dd800c17 	ldw	r22,48(sp)
   862d8:	dd400b17 	ldw	r21,44(sp)
   862dc:	dd000a17 	ldw	r20,40(sp)
   862e0:	dcc00917 	ldw	r19,36(sp)
   862e4:	dc800817 	ldw	r18,32(sp)
   862e8:	dc400717 	ldw	r17,28(sp)
   862ec:	dc000617 	ldw	r16,24(sp)
   862f0:	dec01004 	addi	sp,sp,64
   862f4:	f800283a 	ret

000862f8 <__pow5mult>:
   862f8:	defffb04 	addi	sp,sp,-20
   862fc:	dcc00315 	stw	r19,12(sp)
   86300:	dc800215 	stw	r18,8(sp)
   86304:	dc000015 	stw	r16,0(sp)
   86308:	dfc00415 	stw	ra,16(sp)
   8630c:	dc400115 	stw	r17,4(sp)
   86310:	308000cc 	andi	r2,r6,3
   86314:	3021883a 	mov	r16,r6
   86318:	2027883a 	mov	r19,r4
   8631c:	2825883a 	mov	r18,r5
   86320:	10002e1e 	bne	r2,zero,863dc <__pow5mult+0xe4>
   86324:	8021d0ba 	srai	r16,r16,2
   86328:	80001a26 	beq	r16,zero,86394 <__pow5mult+0x9c>
   8632c:	9c401217 	ldw	r17,72(r19)
   86330:	8800061e 	bne	r17,zero,8634c <__pow5mult+0x54>
   86334:	00003406 	br	86408 <__pow5mult+0x110>
   86338:	8021d07a 	srai	r16,r16,1
   8633c:	80001526 	beq	r16,zero,86394 <__pow5mult+0x9c>
   86340:	88c00017 	ldw	r3,0(r17)
   86344:	18001b26 	beq	r3,zero,863b4 <__pow5mult+0xbc>
   86348:	1823883a 	mov	r17,r3
   8634c:	80c0004c 	andi	r3,r16,1
   86350:	183ff926 	beq	r3,zero,86338 <__pow5mult+0x40>
   86354:	900b883a 	mov	r5,r18
   86358:	880d883a 	mov	r6,r17
   8635c:	9809883a 	mov	r4,r19
   86360:	00860a00 	call	860a0 <__multiply>
   86364:	90001b26 	beq	r18,zero,863d4 <__pow5mult+0xdc>
   86368:	91000117 	ldw	r4,4(r18)
   8636c:	98c01317 	ldw	r3,76(r19)
   86370:	8021d07a 	srai	r16,r16,1
   86374:	2109883a 	add	r4,r4,r4
   86378:	2109883a 	add	r4,r4,r4
   8637c:	1907883a 	add	r3,r3,r4
   86380:	19000017 	ldw	r4,0(r3)
   86384:	91000015 	stw	r4,0(r18)
   86388:	1c800015 	stw	r18,0(r3)
   8638c:	1025883a 	mov	r18,r2
   86390:	803feb1e 	bne	r16,zero,86340 <__pow5mult+0x48>
   86394:	9005883a 	mov	r2,r18
   86398:	dfc00417 	ldw	ra,16(sp)
   8639c:	dcc00317 	ldw	r19,12(sp)
   863a0:	dc800217 	ldw	r18,8(sp)
   863a4:	dc400117 	ldw	r17,4(sp)
   863a8:	dc000017 	ldw	r16,0(sp)
   863ac:	dec00504 	addi	sp,sp,20
   863b0:	f800283a 	ret
   863b4:	880b883a 	mov	r5,r17
   863b8:	880d883a 	mov	r6,r17
   863bc:	9809883a 	mov	r4,r19
   863c0:	00860a00 	call	860a0 <__multiply>
   863c4:	88800015 	stw	r2,0(r17)
   863c8:	10000015 	stw	zero,0(r2)
   863cc:	1023883a 	mov	r17,r2
   863d0:	003fde06 	br	8634c <__pow5mult+0x54>
   863d4:	1025883a 	mov	r18,r2
   863d8:	003fd706 	br	86338 <__pow5mult+0x40>
   863dc:	10bfffc4 	addi	r2,r2,-1
   863e0:	1085883a 	add	r2,r2,r2
   863e4:	00c00274 	movhi	r3,9
   863e8:	18f1a304 	addi	r3,r3,-14708
   863ec:	1085883a 	add	r2,r2,r2
   863f0:	1885883a 	add	r2,r3,r2
   863f4:	11800017 	ldw	r6,0(r2)
   863f8:	000f883a 	mov	r7,zero
   863fc:	0085d040 	call	85d04 <__multadd>
   86400:	1025883a 	mov	r18,r2
   86404:	003fc706 	br	86324 <__pow5mult+0x2c>
   86408:	9809883a 	mov	r4,r19
   8640c:	01409c44 	movi	r5,625
   86410:	00860640 	call	86064 <__i2b>
   86414:	98801215 	stw	r2,72(r19)
   86418:	1023883a 	mov	r17,r2
   8641c:	10000015 	stw	zero,0(r2)
   86420:	003fca06 	br	8634c <__pow5mult+0x54>

00086424 <__lshift>:
   86424:	defff904 	addi	sp,sp,-28
   86428:	dd400515 	stw	r21,20(sp)
   8642c:	dc400115 	stw	r17,4(sp)
   86430:	2d400417 	ldw	r21,16(r5)
   86434:	3023d17a 	srai	r17,r6,5
   86438:	28800217 	ldw	r2,8(r5)
   8643c:	dd000415 	stw	r20,16(sp)
   86440:	8d6b883a 	add	r21,r17,r21
   86444:	dcc00315 	stw	r19,12(sp)
   86448:	dc800215 	stw	r18,8(sp)
   8644c:	dc000015 	stw	r16,0(sp)
   86450:	dfc00615 	stw	ra,24(sp)
   86454:	ac000044 	addi	r16,r21,1
   86458:	2825883a 	mov	r18,r5
   8645c:	3029883a 	mov	r20,r6
   86460:	2027883a 	mov	r19,r4
   86464:	29400117 	ldw	r5,4(r5)
   86468:	1400030e 	bge	r2,r16,86478 <__lshift+0x54>
   8646c:	1085883a 	add	r2,r2,r2
   86470:	29400044 	addi	r5,r5,1
   86474:	143ffd16 	blt	r2,r16,8646c <__lshift+0x48>
   86478:	9809883a 	mov	r4,r19
   8647c:	0085c340 	call	85c34 <_Balloc>
   86480:	10c00504 	addi	r3,r2,20
   86484:	0440090e 	bge	zero,r17,864ac <__lshift+0x88>
   86488:	000f883a 	mov	r7,zero
   8648c:	18000015 	stw	zero,0(r3)
   86490:	39c00044 	addi	r7,r7,1
   86494:	18c00104 	addi	r3,r3,4
   86498:	3c7ffc1e 	bne	r7,r17,8648c <__lshift+0x68>
   8649c:	38c00144 	addi	r3,r7,5
   864a0:	18c7883a 	add	r3,r3,r3
   864a4:	18c7883a 	add	r3,r3,r3
   864a8:	10c7883a 	add	r3,r2,r3
   864ac:	92000417 	ldw	r8,16(r18)
   864b0:	a18007cc 	andi	r6,r20,31
   864b4:	91c00504 	addi	r7,r18,20
   864b8:	42000144 	addi	r8,r8,5
   864bc:	4211883a 	add	r8,r8,r8
   864c0:	4211883a 	add	r8,r8,r8
   864c4:	9211883a 	add	r8,r18,r8
   864c8:	30002226 	beq	r6,zero,86554 <__lshift+0x130>
   864cc:	02800804 	movi	r10,32
   864d0:	5195c83a 	sub	r10,r10,r6
   864d4:	000b883a 	mov	r5,zero
   864d8:	3a400017 	ldw	r9,0(r7)
   864dc:	18c00104 	addi	r3,r3,4
   864e0:	39c00104 	addi	r7,r7,4
   864e4:	4992983a 	sll	r9,r9,r6
   864e8:	2a4ab03a 	or	r5,r5,r9
   864ec:	197fff15 	stw	r5,-4(r3)
   864f0:	397fff17 	ldw	r5,-4(r7)
   864f4:	2a8ad83a 	srl	r5,r5,r10
   864f8:	3a3ff736 	bltu	r7,r8,864d8 <__lshift+0xb4>
   864fc:	19400015 	stw	r5,0(r3)
   86500:	28000126 	beq	r5,zero,86508 <__lshift+0xe4>
   86504:	ac000084 	addi	r16,r21,2
   86508:	91000117 	ldw	r4,4(r18)
   8650c:	98c01317 	ldw	r3,76(r19)
   86510:	843fffc4 	addi	r16,r16,-1
   86514:	2109883a 	add	r4,r4,r4
   86518:	2109883a 	add	r4,r4,r4
   8651c:	1907883a 	add	r3,r3,r4
   86520:	19000017 	ldw	r4,0(r3)
   86524:	14000415 	stw	r16,16(r2)
   86528:	91000015 	stw	r4,0(r18)
   8652c:	1c800015 	stw	r18,0(r3)
   86530:	dfc00617 	ldw	ra,24(sp)
   86534:	dd400517 	ldw	r21,20(sp)
   86538:	dd000417 	ldw	r20,16(sp)
   8653c:	dcc00317 	ldw	r19,12(sp)
   86540:	dc800217 	ldw	r18,8(sp)
   86544:	dc400117 	ldw	r17,4(sp)
   86548:	dc000017 	ldw	r16,0(sp)
   8654c:	dec00704 	addi	sp,sp,28
   86550:	f800283a 	ret
   86554:	39400017 	ldw	r5,0(r7)
   86558:	18c00104 	addi	r3,r3,4
   8655c:	39c00104 	addi	r7,r7,4
   86560:	197fff15 	stw	r5,-4(r3)
   86564:	3a3fe82e 	bgeu	r7,r8,86508 <__lshift+0xe4>
   86568:	39400017 	ldw	r5,0(r7)
   8656c:	18c00104 	addi	r3,r3,4
   86570:	39c00104 	addi	r7,r7,4
   86574:	197fff15 	stw	r5,-4(r3)
   86578:	3a3ff636 	bltu	r7,r8,86554 <__lshift+0x130>
   8657c:	003fe206 	br	86508 <__lshift+0xe4>

00086580 <__mcmp>:
   86580:	20800417 	ldw	r2,16(r4)
   86584:	28c00417 	ldw	r3,16(r5)
   86588:	10c5c83a 	sub	r2,r2,r3
   8658c:	10000f1e 	bne	r2,zero,865cc <__mcmp+0x4c>
   86590:	18c00144 	addi	r3,r3,5
   86594:	18c7883a 	add	r3,r3,r3
   86598:	18c7883a 	add	r3,r3,r3
   8659c:	21c00504 	addi	r7,r4,20
   865a0:	28cb883a 	add	r5,r5,r3
   865a4:	20c9883a 	add	r4,r4,r3
   865a8:	213fff04 	addi	r4,r4,-4
   865ac:	297fff04 	addi	r5,r5,-4
   865b0:	21800017 	ldw	r6,0(r4)
   865b4:	28c00017 	ldw	r3,0(r5)
   865b8:	30c0021e 	bne	r6,r3,865c4 <__mcmp+0x44>
   865bc:	393ffa36 	bltu	r7,r4,865a8 <__mcmp+0x28>
   865c0:	f800283a 	ret
   865c4:	30c00236 	bltu	r6,r3,865d0 <__mcmp+0x50>
   865c8:	00800044 	movi	r2,1
   865cc:	f800283a 	ret
   865d0:	00bfffc4 	movi	r2,-1
   865d4:	f800283a 	ret

000865d8 <__mdiff>:
   865d8:	defffb04 	addi	sp,sp,-20
   865dc:	dc000015 	stw	r16,0(sp)
   865e0:	2821883a 	mov	r16,r5
   865e4:	dc800215 	stw	r18,8(sp)
   865e8:	300b883a 	mov	r5,r6
   865ec:	2025883a 	mov	r18,r4
   865f0:	8009883a 	mov	r4,r16
   865f4:	dc400115 	stw	r17,4(sp)
   865f8:	dfc00415 	stw	ra,16(sp)
   865fc:	dcc00315 	stw	r19,12(sp)
   86600:	3023883a 	mov	r17,r6
   86604:	00865800 	call	86580 <__mcmp>
   86608:	10005026 	beq	r2,zero,8674c <__mdiff+0x174>
   8660c:	10004a16 	blt	r2,zero,86738 <__mdiff+0x160>
   86610:	0027883a 	mov	r19,zero
   86614:	81400117 	ldw	r5,4(r16)
   86618:	9009883a 	mov	r4,r18
   8661c:	0085c340 	call	85c34 <_Balloc>
   86620:	82400417 	ldw	r9,16(r16)
   86624:	89800417 	ldw	r6,16(r17)
   86628:	14c00315 	stw	r19,12(r2)
   8662c:	4b800144 	addi	r14,r9,5
   86630:	31800144 	addi	r6,r6,5
   86634:	739d883a 	add	r14,r14,r14
   86638:	318d883a 	add	r6,r6,r6
   8663c:	739d883a 	add	r14,r14,r14
   86640:	318d883a 	add	r6,r6,r6
   86644:	81c00504 	addi	r7,r16,20
   86648:	839d883a 	add	r14,r16,r14
   8664c:	8a000504 	addi	r8,r17,20
   86650:	898d883a 	add	r6,r17,r6
   86654:	10c00504 	addi	r3,r2,20
   86658:	0009883a 	mov	r4,zero
   8665c:	3b000017 	ldw	r12,0(r7)
   86660:	42c00017 	ldw	r11,0(r8)
   86664:	42000104 	addi	r8,r8,4
   86668:	62bfffcc 	andi	r10,r12,65535
   8666c:	5b7fffcc 	andi	r13,r11,65535
   86670:	5109883a 	add	r4,r10,r4
   86674:	2355c83a 	sub	r10,r4,r13
   86678:	5816d43a 	srli	r11,r11,16
   8667c:	6008d43a 	srli	r4,r12,16
   86680:	501bd43a 	srai	r13,r10,16
   86684:	1a80000d 	sth	r10,0(r3)
   86688:	22c9c83a 	sub	r4,r4,r11
   8668c:	2349883a 	add	r4,r4,r13
   86690:	1900008d 	sth	r4,2(r3)
   86694:	39c00104 	addi	r7,r7,4
   86698:	2009d43a 	srai	r4,r4,16
   8669c:	18c00104 	addi	r3,r3,4
   866a0:	41bfee36 	bltu	r8,r6,8665c <__mdiff+0x84>
   866a4:	180b883a 	mov	r5,r3
   866a8:	3815883a 	mov	r10,r7
   866ac:	3b80132e 	bgeu	r7,r14,866fc <__mdiff+0x124>
   866b0:	3a000017 	ldw	r8,0(r7)
   866b4:	18c00104 	addi	r3,r3,4
   866b8:	39c00104 	addi	r7,r7,4
   866bc:	41bfffcc 	andi	r6,r8,65535
   866c0:	310d883a 	add	r6,r6,r4
   866c4:	3009d43a 	srai	r4,r6,16
   866c8:	4010d43a 	srli	r8,r8,16
   866cc:	19bfff0d 	sth	r6,-4(r3)
   866d0:	2209883a 	add	r4,r4,r8
   866d4:	193fff8d 	sth	r4,-2(r3)
   866d8:	2009d43a 	srai	r4,r4,16
   866dc:	3bbff436 	bltu	r7,r14,866b0 <__mdiff+0xd8>
   866e0:	0286303a 	nor	r3,zero,r10
   866e4:	1b87883a 	add	r3,r3,r14
   866e8:	1806d0ba 	srli	r3,r3,2
   866ec:	18c00044 	addi	r3,r3,1
   866f0:	18c7883a 	add	r3,r3,r3
   866f4:	18c7883a 	add	r3,r3,r3
   866f8:	28c7883a 	add	r3,r5,r3
   866fc:	193fff17 	ldw	r4,-4(r3)
   86700:	18ffff04 	addi	r3,r3,-4
   86704:	2000041e 	bne	r4,zero,86718 <__mdiff+0x140>
   86708:	18ffff04 	addi	r3,r3,-4
   8670c:	19000017 	ldw	r4,0(r3)
   86710:	4a7fffc4 	addi	r9,r9,-1
   86714:	203ffc26 	beq	r4,zero,86708 <__mdiff+0x130>
   86718:	12400415 	stw	r9,16(r2)
   8671c:	dfc00417 	ldw	ra,16(sp)
   86720:	dcc00317 	ldw	r19,12(sp)
   86724:	dc800217 	ldw	r18,8(sp)
   86728:	dc400117 	ldw	r17,4(sp)
   8672c:	dc000017 	ldw	r16,0(sp)
   86730:	dec00504 	addi	sp,sp,20
   86734:	f800283a 	ret
   86738:	8005883a 	mov	r2,r16
   8673c:	04c00044 	movi	r19,1
   86740:	8821883a 	mov	r16,r17
   86744:	1023883a 	mov	r17,r2
   86748:	003fb206 	br	86614 <__mdiff+0x3c>
   8674c:	9009883a 	mov	r4,r18
   86750:	000b883a 	mov	r5,zero
   86754:	0085c340 	call	85c34 <_Balloc>
   86758:	00c00044 	movi	r3,1
   8675c:	10c00415 	stw	r3,16(r2)
   86760:	10000515 	stw	zero,20(r2)
   86764:	dfc00417 	ldw	ra,16(sp)
   86768:	dcc00317 	ldw	r19,12(sp)
   8676c:	dc800217 	ldw	r18,8(sp)
   86770:	dc400117 	ldw	r17,4(sp)
   86774:	dc000017 	ldw	r16,0(sp)
   86778:	dec00504 	addi	sp,sp,20
   8677c:	f800283a 	ret

00086780 <__ulp>:
   86780:	295ffc2c 	andhi	r5,r5,32752
   86784:	00bf3034 	movhi	r2,64704
   86788:	2887883a 	add	r3,r5,r2
   8678c:	00c0020e 	bge	zero,r3,86798 <__ulp+0x18>
   86790:	0005883a 	mov	r2,zero
   86794:	f800283a 	ret
   86798:	00c7c83a 	sub	r3,zero,r3
   8679c:	1805d53a 	srai	r2,r3,20
   867a0:	00c004c4 	movi	r3,19
   867a4:	18800a0e 	bge	r3,r2,867d0 <__ulp+0x50>
   867a8:	01000c84 	movi	r4,50
   867ac:	0007883a 	mov	r3,zero
   867b0:	20800516 	blt	r4,r2,867c8 <__ulp+0x48>
   867b4:	01000cc4 	movi	r4,51
   867b8:	2085c83a 	sub	r2,r4,r2
   867bc:	01000044 	movi	r4,1
   867c0:	2084983a 	sll	r2,r4,r2
   867c4:	f800283a 	ret
   867c8:	00800044 	movi	r2,1
   867cc:	f800283a 	ret
   867d0:	00c00234 	movhi	r3,8
   867d4:	1887d83a 	sra	r3,r3,r2
   867d8:	0005883a 	mov	r2,zero
   867dc:	f800283a 	ret

000867e0 <__b2d>:
   867e0:	defffa04 	addi	sp,sp,-24
   867e4:	dc000015 	stw	r16,0(sp)
   867e8:	24000417 	ldw	r16,16(r4)
   867ec:	dc400115 	stw	r17,4(sp)
   867f0:	dcc00315 	stw	r19,12(sp)
   867f4:	84000144 	addi	r16,r16,5
   867f8:	8421883a 	add	r16,r16,r16
   867fc:	8421883a 	add	r16,r16,r16
   86800:	2421883a 	add	r16,r4,r16
   86804:	847fff17 	ldw	r17,-4(r16)
   86808:	24c00504 	addi	r19,r4,20
   8680c:	dd000415 	stw	r20,16(sp)
   86810:	8809883a 	mov	r4,r17
   86814:	dc800215 	stw	r18,8(sp)
   86818:	2829883a 	mov	r20,r5
   8681c:	dfc00515 	stw	ra,20(sp)
   86820:	0085f4c0 	call	85f4c <__hi0bits>
   86824:	00c00804 	movi	r3,32
   86828:	1887c83a 	sub	r3,r3,r2
   8682c:	a0c00015 	stw	r3,0(r20)
   86830:	00c00284 	movi	r3,10
   86834:	84bfff04 	addi	r18,r16,-4
   86838:	18801216 	blt	r3,r2,86884 <__b2d+0xa4>
   8683c:	010002c4 	movi	r4,11
   86840:	2089c83a 	sub	r4,r4,r2
   86844:	8906d83a 	srl	r3,r17,r4
   86848:	18cffc34 	orhi	r3,r3,16368
   8684c:	9c80322e 	bgeu	r19,r18,86918 <__b2d+0x138>
   86850:	817ffe17 	ldw	r5,-8(r16)
   86854:	2908d83a 	srl	r4,r5,r4
   86858:	10800544 	addi	r2,r2,21
   8685c:	88a2983a 	sll	r17,r17,r2
   86860:	2444b03a 	or	r2,r4,r17
   86864:	dfc00517 	ldw	ra,20(sp)
   86868:	dd000417 	ldw	r20,16(sp)
   8686c:	dcc00317 	ldw	r19,12(sp)
   86870:	dc800217 	ldw	r18,8(sp)
   86874:	dc400117 	ldw	r17,4(sp)
   86878:	dc000017 	ldw	r16,0(sp)
   8687c:	dec00604 	addi	sp,sp,24
   86880:	f800283a 	ret
   86884:	9c801636 	bltu	r19,r18,868e0 <__b2d+0x100>
   86888:	113ffd44 	addi	r4,r2,-11
   8688c:	000b883a 	mov	r5,zero
   86890:	20001726 	beq	r4,zero,868f0 <__b2d+0x110>
   86894:	00c00ac4 	movi	r3,43
   86898:	1885c83a 	sub	r2,r3,r2
   8689c:	8906983a 	sll	r3,r17,r4
   868a0:	288cd83a 	srl	r6,r5,r2
   868a4:	18cffc34 	orhi	r3,r3,16368
   868a8:	1986b03a 	or	r3,r3,r6
   868ac:	9c801c2e 	bgeu	r19,r18,86920 <__b2d+0x140>
   868b0:	91bfff17 	ldw	r6,-4(r18)
   868b4:	3084d83a 	srl	r2,r6,r2
   868b8:	2908983a 	sll	r4,r5,r4
   868bc:	1104b03a 	or	r2,r2,r4
   868c0:	dfc00517 	ldw	ra,20(sp)
   868c4:	dd000417 	ldw	r20,16(sp)
   868c8:	dcc00317 	ldw	r19,12(sp)
   868cc:	dc800217 	ldw	r18,8(sp)
   868d0:	dc400117 	ldw	r17,4(sp)
   868d4:	dc000017 	ldw	r16,0(sp)
   868d8:	dec00604 	addi	sp,sp,24
   868dc:	f800283a 	ret
   868e0:	113ffd44 	addi	r4,r2,-11
   868e4:	84bffe04 	addi	r18,r16,-8
   868e8:	817ffe17 	ldw	r5,-8(r16)
   868ec:	203fe91e 	bne	r4,zero,86894 <__b2d+0xb4>
   868f0:	88cffc34 	orhi	r3,r17,16368
   868f4:	2805883a 	mov	r2,r5
   868f8:	dfc00517 	ldw	ra,20(sp)
   868fc:	dd000417 	ldw	r20,16(sp)
   86900:	dcc00317 	ldw	r19,12(sp)
   86904:	dc800217 	ldw	r18,8(sp)
   86908:	dc400117 	ldw	r17,4(sp)
   8690c:	dc000017 	ldw	r16,0(sp)
   86910:	dec00604 	addi	sp,sp,24
   86914:	f800283a 	ret
   86918:	0009883a 	mov	r4,zero
   8691c:	003fce06 	br	86858 <__b2d+0x78>
   86920:	0005883a 	mov	r2,zero
   86924:	003fe406 	br	868b8 <__b2d+0xd8>

00086928 <__d2b>:
   86928:	defff804 	addi	sp,sp,-32
   8692c:	dc400315 	stw	r17,12(sp)
   86930:	3023883a 	mov	r17,r6
   86934:	dc800415 	stw	r18,16(sp)
   86938:	8824907a 	slli	r18,r17,1
   8693c:	dcc00515 	stw	r19,20(sp)
   86940:	2827883a 	mov	r19,r5
   86944:	9024d57a 	srli	r18,r18,21
   86948:	01400044 	movi	r5,1
   8694c:	dd000615 	stw	r20,24(sp)
   86950:	dc000215 	stw	r16,8(sp)
   86954:	dfc00715 	stw	ra,28(sp)
   86958:	3829883a 	mov	r20,r7
   8695c:	0085c340 	call	85c34 <_Balloc>
   86960:	1021883a 	mov	r16,r2
   86964:	00800434 	movhi	r2,16
   86968:	10bfffc4 	addi	r2,r2,-1
   8696c:	88a2703a 	and	r17,r17,r2
   86970:	90000126 	beq	r18,zero,86978 <__d2b+0x50>
   86974:	8c400434 	orhi	r17,r17,16
   86978:	dc400015 	stw	r17,0(sp)
   8697c:	98002226 	beq	r19,zero,86a08 <__d2b+0xe0>
   86980:	d9000104 	addi	r4,sp,4
   86984:	dcc00115 	stw	r19,4(sp)
   86988:	0085fb40 	call	85fb4 <__lo0bits>
   8698c:	d8c00017 	ldw	r3,0(sp)
   86990:	10002d1e 	bne	r2,zero,86a48 <__d2b+0x120>
   86994:	d9000117 	ldw	r4,4(sp)
   86998:	81000515 	stw	r4,20(r16)
   8699c:	1823003a 	cmpeq	r17,r3,zero
   869a0:	01000084 	movi	r4,2
   869a4:	2463c83a 	sub	r17,r4,r17
   869a8:	80c00615 	stw	r3,24(r16)
   869ac:	84400415 	stw	r17,16(r16)
   869b0:	90001d1e 	bne	r18,zero,86a28 <__d2b+0x100>
   869b4:	88c00104 	addi	r3,r17,4
   869b8:	18c7883a 	add	r3,r3,r3
   869bc:	18c7883a 	add	r3,r3,r3
   869c0:	80c7883a 	add	r3,r16,r3
   869c4:	19000017 	ldw	r4,0(r3)
   869c8:	10bef384 	addi	r2,r2,-1074
   869cc:	a0800015 	stw	r2,0(r20)
   869d0:	0085f4c0 	call	85f4c <__hi0bits>
   869d4:	8822917a 	slli	r17,r17,5
   869d8:	d8c00817 	ldw	r3,32(sp)
   869dc:	8885c83a 	sub	r2,r17,r2
   869e0:	18800015 	stw	r2,0(r3)
   869e4:	8005883a 	mov	r2,r16
   869e8:	dfc00717 	ldw	ra,28(sp)
   869ec:	dd000617 	ldw	r20,24(sp)
   869f0:	dcc00517 	ldw	r19,20(sp)
   869f4:	dc800417 	ldw	r18,16(sp)
   869f8:	dc400317 	ldw	r17,12(sp)
   869fc:	dc000217 	ldw	r16,8(sp)
   86a00:	dec00804 	addi	sp,sp,32
   86a04:	f800283a 	ret
   86a08:	d809883a 	mov	r4,sp
   86a0c:	0085fb40 	call	85fb4 <__lo0bits>
   86a10:	d8c00017 	ldw	r3,0(sp)
   86a14:	04400044 	movi	r17,1
   86a18:	84400415 	stw	r17,16(r16)
   86a1c:	80c00515 	stw	r3,20(r16)
   86a20:	10800804 	addi	r2,r2,32
   86a24:	903fe326 	beq	r18,zero,869b4 <__d2b+0x8c>
   86a28:	00c00d44 	movi	r3,53
   86a2c:	94bef344 	addi	r18,r18,-1075
   86a30:	90a5883a 	add	r18,r18,r2
   86a34:	1885c83a 	sub	r2,r3,r2
   86a38:	d8c00817 	ldw	r3,32(sp)
   86a3c:	a4800015 	stw	r18,0(r20)
   86a40:	18800015 	stw	r2,0(r3)
   86a44:	003fe706 	br	869e4 <__d2b+0xbc>
   86a48:	01000804 	movi	r4,32
   86a4c:	2089c83a 	sub	r4,r4,r2
   86a50:	1908983a 	sll	r4,r3,r4
   86a54:	d9400117 	ldw	r5,4(sp)
   86a58:	1886d83a 	srl	r3,r3,r2
   86a5c:	2148b03a 	or	r4,r4,r5
   86a60:	81000515 	stw	r4,20(r16)
   86a64:	d8c00015 	stw	r3,0(sp)
   86a68:	003fcc06 	br	8699c <__d2b+0x74>

00086a6c <__ratio>:
   86a6c:	defff904 	addi	sp,sp,-28
   86a70:	dc400315 	stw	r17,12(sp)
   86a74:	2823883a 	mov	r17,r5
   86a78:	d9400104 	addi	r5,sp,4
   86a7c:	dfc00615 	stw	ra,24(sp)
   86a80:	dcc00515 	stw	r19,20(sp)
   86a84:	dc800415 	stw	r18,16(sp)
   86a88:	2027883a 	mov	r19,r4
   86a8c:	dc000215 	stw	r16,8(sp)
   86a90:	00867e00 	call	867e0 <__b2d>
   86a94:	8809883a 	mov	r4,r17
   86a98:	d80b883a 	mov	r5,sp
   86a9c:	1025883a 	mov	r18,r2
   86aa0:	1821883a 	mov	r16,r3
   86aa4:	00867e00 	call	867e0 <__b2d>
   86aa8:	99400417 	ldw	r5,16(r19)
   86aac:	89000417 	ldw	r4,16(r17)
   86ab0:	d9800117 	ldw	r6,4(sp)
   86ab4:	2909c83a 	sub	r4,r5,r4
   86ab8:	d9400017 	ldw	r5,0(sp)
   86abc:	2008917a 	slli	r4,r4,5
   86ac0:	314bc83a 	sub	r5,r6,r5
   86ac4:	290b883a 	add	r5,r5,r4
   86ac8:	01400e0e 	bge	zero,r5,86b04 <__ratio+0x98>
   86acc:	280a953a 	slli	r5,r5,20
   86ad0:	2c21883a 	add	r16,r5,r16
   86ad4:	9009883a 	mov	r4,r18
   86ad8:	800b883a 	mov	r5,r16
   86adc:	100d883a 	mov	r6,r2
   86ae0:	180f883a 	mov	r7,r3
   86ae4:	0088dac0 	call	88dac <__divdf3>
   86ae8:	dfc00617 	ldw	ra,24(sp)
   86aec:	dcc00517 	ldw	r19,20(sp)
   86af0:	dc800417 	ldw	r18,16(sp)
   86af4:	dc400317 	ldw	r17,12(sp)
   86af8:	dc000217 	ldw	r16,8(sp)
   86afc:	dec00704 	addi	sp,sp,28
   86b00:	f800283a 	ret
   86b04:	280a953a 	slli	r5,r5,20
   86b08:	1947c83a 	sub	r3,r3,r5
   86b0c:	003ff106 	br	86ad4 <__ratio+0x68>

00086b10 <_mprec_log10>:
   86b10:	defffe04 	addi	sp,sp,-8
   86b14:	dc000015 	stw	r16,0(sp)
   86b18:	dfc00115 	stw	ra,4(sp)
   86b1c:	008005c4 	movi	r2,23
   86b20:	2021883a 	mov	r16,r4
   86b24:	11000d0e 	bge	r2,r4,86b5c <_mprec_log10+0x4c>
   86b28:	0005883a 	mov	r2,zero
   86b2c:	00cffc34 	movhi	r3,16368
   86b30:	843fffc4 	addi	r16,r16,-1
   86b34:	1009883a 	mov	r4,r2
   86b38:	180b883a 	mov	r5,r3
   86b3c:	000d883a 	mov	r6,zero
   86b40:	01d00934 	movhi	r7,16420
   86b44:	0088ac80 	call	88ac8 <__muldf3>
   86b48:	803ff91e 	bne	r16,zero,86b30 <_mprec_log10+0x20>
   86b4c:	dfc00117 	ldw	ra,4(sp)
   86b50:	dc000017 	ldw	r16,0(sp)
   86b54:	dec00204 	addi	sp,sp,8
   86b58:	f800283a 	ret
   86b5c:	202090fa 	slli	r16,r4,3
   86b60:	00800274 	movhi	r2,9
   86b64:	10b17104 	addi	r2,r2,-14908
   86b68:	1421883a 	add	r16,r2,r16
   86b6c:	80800017 	ldw	r2,0(r16)
   86b70:	80c00117 	ldw	r3,4(r16)
   86b74:	dfc00117 	ldw	ra,4(sp)
   86b78:	dc000017 	ldw	r16,0(sp)
   86b7c:	dec00204 	addi	sp,sp,8
   86b80:	f800283a 	ret

00086b84 <__copybits>:
   86b84:	297fffc4 	addi	r5,r5,-1
   86b88:	31c00417 	ldw	r7,16(r6)
   86b8c:	2811d17a 	srai	r8,r5,5
   86b90:	30800504 	addi	r2,r6,20
   86b94:	39c00144 	addi	r7,r7,5
   86b98:	42000044 	addi	r8,r8,1
   86b9c:	39cf883a 	add	r7,r7,r7
   86ba0:	4211883a 	add	r8,r8,r8
   86ba4:	39cf883a 	add	r7,r7,r7
   86ba8:	4211883a 	add	r8,r8,r8
   86bac:	31cf883a 	add	r7,r6,r7
   86bb0:	2211883a 	add	r8,r4,r8
   86bb4:	11c00d2e 	bgeu	r2,r7,86bec <__copybits+0x68>
   86bb8:	2007883a 	mov	r3,r4
   86bbc:	11400017 	ldw	r5,0(r2)
   86bc0:	18c00104 	addi	r3,r3,4
   86bc4:	10800104 	addi	r2,r2,4
   86bc8:	197fff15 	stw	r5,-4(r3)
   86bcc:	11fffb36 	bltu	r2,r7,86bbc <__copybits+0x38>
   86bd0:	3985c83a 	sub	r2,r7,r6
   86bd4:	10bffac4 	addi	r2,r2,-21
   86bd8:	1004d0ba 	srli	r2,r2,2
   86bdc:	10800044 	addi	r2,r2,1
   86be0:	1085883a 	add	r2,r2,r2
   86be4:	1085883a 	add	r2,r2,r2
   86be8:	2089883a 	add	r4,r4,r2
   86bec:	2200032e 	bgeu	r4,r8,86bfc <__copybits+0x78>
   86bf0:	20000015 	stw	zero,0(r4)
   86bf4:	21000104 	addi	r4,r4,4
   86bf8:	223ffd36 	bltu	r4,r8,86bf0 <__copybits+0x6c>
   86bfc:	f800283a 	ret

00086c00 <__any_on>:
   86c00:	21800417 	ldw	r6,16(r4)
   86c04:	2805d17a 	srai	r2,r5,5
   86c08:	20c00504 	addi	r3,r4,20
   86c0c:	30800f0e 	bge	r6,r2,86c4c <__any_on+0x4c>
   86c10:	3005883a 	mov	r2,r6
   86c14:	10800144 	addi	r2,r2,5
   86c18:	1085883a 	add	r2,r2,r2
   86c1c:	1085883a 	add	r2,r2,r2
   86c20:	2089883a 	add	r4,r4,r2
   86c24:	1900152e 	bgeu	r3,r4,86c7c <__any_on+0x7c>
   86c28:	20bfff17 	ldw	r2,-4(r4)
   86c2c:	213fff04 	addi	r4,r4,-4
   86c30:	1000041e 	bne	r2,zero,86c44 <__any_on+0x44>
   86c34:	1900112e 	bgeu	r3,r4,86c7c <__any_on+0x7c>
   86c38:	213fff04 	addi	r4,r4,-4
   86c3c:	20800017 	ldw	r2,0(r4)
   86c40:	103ffc26 	beq	r2,zero,86c34 <__any_on+0x34>
   86c44:	00800044 	movi	r2,1
   86c48:	f800283a 	ret
   86c4c:	11bff10e 	bge	r2,r6,86c14 <__any_on+0x14>
   86c50:	294007cc 	andi	r5,r5,31
   86c54:	283fef26 	beq	r5,zero,86c14 <__any_on+0x14>
   86c58:	11800144 	addi	r6,r2,5
   86c5c:	318d883a 	add	r6,r6,r6
   86c60:	318d883a 	add	r6,r6,r6
   86c64:	218d883a 	add	r6,r4,r6
   86c68:	31800017 	ldw	r6,0(r6)
   86c6c:	314ed83a 	srl	r7,r6,r5
   86c70:	394a983a 	sll	r5,r7,r5
   86c74:	29bff31e 	bne	r5,r6,86c44 <__any_on+0x44>
   86c78:	003fe606 	br	86c14 <__any_on+0x14>
   86c7c:	0005883a 	mov	r2,zero
   86c80:	f800283a 	ret

00086c84 <_realloc_r>:
   86c84:	defff504 	addi	sp,sp,-44
   86c88:	dd400615 	stw	r21,24(sp)
   86c8c:	dc800315 	stw	r18,12(sp)
   86c90:	dc000115 	stw	r16,4(sp)
   86c94:	dfc00a15 	stw	ra,40(sp)
   86c98:	df000915 	stw	fp,36(sp)
   86c9c:	ddc00815 	stw	r23,32(sp)
   86ca0:	dd800715 	stw	r22,28(sp)
   86ca4:	dd000515 	stw	r20,20(sp)
   86ca8:	dcc00415 	stw	r19,16(sp)
   86cac:	dc400215 	stw	r17,8(sp)
   86cb0:	2821883a 	mov	r16,r5
   86cb4:	202b883a 	mov	r21,r4
   86cb8:	3025883a 	mov	r18,r6
   86cbc:	28009626 	beq	r5,zero,86f18 <_realloc_r+0x294>
   86cc0:	008a1580 	call	8a158 <__malloc_lock>
   86cc4:	80bfff17 	ldw	r2,-4(r16)
   86cc8:	04ffff04 	movi	r19,-4
   86ccc:	90c002c4 	addi	r3,r18,11
   86cd0:	01000584 	movi	r4,22
   86cd4:	85bffe04 	addi	r22,r16,-8
   86cd8:	14e6703a 	and	r19,r2,r19
   86cdc:	20c0372e 	bgeu	r4,r3,86dbc <_realloc_r+0x138>
   86ce0:	047ffe04 	movi	r17,-8
   86ce4:	1c62703a 	and	r17,r3,r17
   86ce8:	8807883a 	mov	r3,r17
   86cec:	88005a16 	blt	r17,zero,86e58 <_realloc_r+0x1d4>
   86cf0:	8c805936 	bltu	r17,r18,86e58 <_realloc_r+0x1d4>
   86cf4:	98c0340e 	bge	r19,r3,86dc8 <_realloc_r+0x144>
   86cf8:	07000274 	movhi	fp,9
   86cfc:	e732fb04 	addi	fp,fp,-13332
   86d00:	e1400217 	ldw	r5,8(fp)
   86d04:	b4c9883a 	add	r4,r22,r19
   86d08:	29009026 	beq	r5,r4,86f4c <_realloc_r+0x2c8>
   86d0c:	21800117 	ldw	r6,4(r4)
   86d10:	01ffff84 	movi	r7,-2
   86d14:	31ce703a 	and	r7,r6,r7
   86d18:	21cf883a 	add	r7,r4,r7
   86d1c:	39c00117 	ldw	r7,4(r7)
   86d20:	39c0004c 	andi	r7,r7,1
   86d24:	38004326 	beq	r7,zero,86e34 <_realloc_r+0x1b0>
   86d28:	000d883a 	mov	r6,zero
   86d2c:	0009883a 	mov	r4,zero
   86d30:	1080004c 	andi	r2,r2,1
   86d34:	10005a1e 	bne	r2,zero,86ea0 <_realloc_r+0x21c>
   86d38:	85fffe17 	ldw	r23,-8(r16)
   86d3c:	00bfff04 	movi	r2,-4
   86d40:	b5efc83a 	sub	r23,r22,r23
   86d44:	b9c00117 	ldw	r7,4(r23)
   86d48:	388e703a 	and	r7,r7,r2
   86d4c:	3ccf883a 	add	r7,r7,r19
   86d50:	20005226 	beq	r4,zero,86e9c <_realloc_r+0x218>
   86d54:	31e9883a 	add	r20,r6,r7
   86d58:	2140c726 	beq	r4,r5,87078 <_realloc_r+0x3f4>
   86d5c:	a0c04f16 	blt	r20,r3,86e9c <_realloc_r+0x218>
   86d60:	20800317 	ldw	r2,12(r4)
   86d64:	20c00217 	ldw	r3,8(r4)
   86d68:	99bfff04 	addi	r6,r19,-4
   86d6c:	01000904 	movi	r4,36
   86d70:	18800315 	stw	r2,12(r3)
   86d74:	10c00215 	stw	r3,8(r2)
   86d78:	b8c00217 	ldw	r3,8(r23)
   86d7c:	b8800317 	ldw	r2,12(r23)
   86d80:	bc800204 	addi	r18,r23,8
   86d84:	18800315 	stw	r2,12(r3)
   86d88:	10c00215 	stw	r3,8(r2)
   86d8c:	2180ed36 	bltu	r4,r6,87144 <_realloc_r+0x4c0>
   86d90:	008004c4 	movi	r2,19
   86d94:	11809b2e 	bgeu	r2,r6,87004 <_realloc_r+0x380>
   86d98:	80800017 	ldw	r2,0(r16)
   86d9c:	b8800215 	stw	r2,8(r23)
   86da0:	80800117 	ldw	r2,4(r16)
   86da4:	b8800315 	stw	r2,12(r23)
   86da8:	008006c4 	movi	r2,27
   86dac:	1180f936 	bltu	r2,r6,87194 <_realloc_r+0x510>
   86db0:	b8800404 	addi	r2,r23,16
   86db4:	80c00204 	addi	r3,r16,8
   86db8:	00009406 	br	8700c <_realloc_r+0x388>
   86dbc:	00c00404 	movi	r3,16
   86dc0:	1823883a 	mov	r17,r3
   86dc4:	003fca06 	br	86cf0 <_realloc_r+0x6c>
   86dc8:	9829883a 	mov	r20,r19
   86dcc:	a447c83a 	sub	r3,r20,r17
   86dd0:	010003c4 	movi	r4,15
   86dd4:	1080004c 	andi	r2,r2,1
   86dd8:	20c02336 	bltu	r4,r3,86e68 <_realloc_r+0x1e4>
   86ddc:	1504b03a 	or	r2,r2,r20
   86de0:	b0800115 	stw	r2,4(r22)
   86de4:	b52d883a 	add	r22,r22,r20
   86de8:	b0800117 	ldw	r2,4(r22)
   86dec:	10800054 	ori	r2,r2,1
   86df0:	b0800115 	stw	r2,4(r22)
   86df4:	a809883a 	mov	r4,r21
   86df8:	008a1780 	call	8a178 <__malloc_unlock>
   86dfc:	8025883a 	mov	r18,r16
   86e00:	9005883a 	mov	r2,r18
   86e04:	dfc00a17 	ldw	ra,40(sp)
   86e08:	df000917 	ldw	fp,36(sp)
   86e0c:	ddc00817 	ldw	r23,32(sp)
   86e10:	dd800717 	ldw	r22,28(sp)
   86e14:	dd400617 	ldw	r21,24(sp)
   86e18:	dd000517 	ldw	r20,20(sp)
   86e1c:	dcc00417 	ldw	r19,16(sp)
   86e20:	dc800317 	ldw	r18,12(sp)
   86e24:	dc400217 	ldw	r17,8(sp)
   86e28:	dc000117 	ldw	r16,4(sp)
   86e2c:	dec00b04 	addi	sp,sp,44
   86e30:	f800283a 	ret
   86e34:	01ffff04 	movi	r7,-4
   86e38:	31cc703a 	and	r6,r6,r7
   86e3c:	34e9883a 	add	r20,r6,r19
   86e40:	a0ffbb16 	blt	r20,r3,86d30 <_realloc_r+0xac>
   86e44:	20c00317 	ldw	r3,12(r4)
   86e48:	21000217 	ldw	r4,8(r4)
   86e4c:	20c00315 	stw	r3,12(r4)
   86e50:	19000215 	stw	r4,8(r3)
   86e54:	003fdd06 	br	86dcc <_realloc_r+0x148>
   86e58:	00800304 	movi	r2,12
   86e5c:	a8800015 	stw	r2,0(r21)
   86e60:	0025883a 	mov	r18,zero
   86e64:	003fe606 	br	86e00 <_realloc_r+0x17c>
   86e68:	1444b03a 	or	r2,r2,r17
   86e6c:	b0800115 	stw	r2,4(r22)
   86e70:	b44b883a 	add	r5,r22,r17
   86e74:	18800054 	ori	r2,r3,1
   86e78:	28800115 	stw	r2,4(r5)
   86e7c:	28c7883a 	add	r3,r5,r3
   86e80:	18800117 	ldw	r2,4(r3)
   86e84:	a809883a 	mov	r4,r21
   86e88:	29400204 	addi	r5,r5,8
   86e8c:	10800054 	ori	r2,r2,1
   86e90:	18800115 	stw	r2,4(r3)
   86e94:	00844780 	call	84478 <_free_r>
   86e98:	003fd606 	br	86df4 <_realloc_r+0x170>
   86e9c:	38c0330e 	bge	r7,r3,86f6c <_realloc_r+0x2e8>
   86ea0:	900b883a 	mov	r5,r18
   86ea4:	a809883a 	mov	r4,r21
   86ea8:	00850100 	call	85010 <_malloc_r>
   86eac:	1025883a 	mov	r18,r2
   86eb0:	10001626 	beq	r2,zero,86f0c <_realloc_r+0x288>
   86eb4:	80bfff17 	ldw	r2,-4(r16)
   86eb8:	00ffff84 	movi	r3,-2
   86ebc:	913ffe04 	addi	r4,r18,-8
   86ec0:	10c6703a 	and	r3,r2,r3
   86ec4:	b0c7883a 	add	r3,r22,r3
   86ec8:	20c09926 	beq	r4,r3,87130 <_realloc_r+0x4ac>
   86ecc:	99bfff04 	addi	r6,r19,-4
   86ed0:	00800904 	movi	r2,36
   86ed4:	11806436 	bltu	r2,r6,87068 <_realloc_r+0x3e4>
   86ed8:	00c004c4 	movi	r3,19
   86edc:	19804036 	bltu	r3,r6,86fe0 <_realloc_r+0x35c>
   86ee0:	9005883a 	mov	r2,r18
   86ee4:	8007883a 	mov	r3,r16
   86ee8:	19000017 	ldw	r4,0(r3)
   86eec:	11000015 	stw	r4,0(r2)
   86ef0:	19000117 	ldw	r4,4(r3)
   86ef4:	11000115 	stw	r4,4(r2)
   86ef8:	18c00217 	ldw	r3,8(r3)
   86efc:	10c00215 	stw	r3,8(r2)
   86f00:	a809883a 	mov	r4,r21
   86f04:	800b883a 	mov	r5,r16
   86f08:	00844780 	call	84478 <_free_r>
   86f0c:	a809883a 	mov	r4,r21
   86f10:	008a1780 	call	8a178 <__malloc_unlock>
   86f14:	003fba06 	br	86e00 <_realloc_r+0x17c>
   86f18:	300b883a 	mov	r5,r6
   86f1c:	dfc00a17 	ldw	ra,40(sp)
   86f20:	df000917 	ldw	fp,36(sp)
   86f24:	ddc00817 	ldw	r23,32(sp)
   86f28:	dd800717 	ldw	r22,28(sp)
   86f2c:	dd400617 	ldw	r21,24(sp)
   86f30:	dd000517 	ldw	r20,20(sp)
   86f34:	dcc00417 	ldw	r19,16(sp)
   86f38:	dc800317 	ldw	r18,12(sp)
   86f3c:	dc400217 	ldw	r17,8(sp)
   86f40:	dc000117 	ldw	r16,4(sp)
   86f44:	dec00b04 	addi	sp,sp,44
   86f48:	00850101 	jmpi	85010 <_malloc_r>
   86f4c:	29800117 	ldw	r6,4(r5)
   86f50:	013fff04 	movi	r4,-4
   86f54:	89c00404 	addi	r7,r17,16
   86f58:	310c703a 	and	r6,r6,r4
   86f5c:	34c9883a 	add	r4,r6,r19
   86f60:	21c0340e 	bge	r4,r7,87034 <_realloc_r+0x3b0>
   86f64:	2809883a 	mov	r4,r5
   86f68:	003f7106 	br	86d30 <_realloc_r+0xac>
   86f6c:	b8800317 	ldw	r2,12(r23)
   86f70:	b8c00217 	ldw	r3,8(r23)
   86f74:	99bfff04 	addi	r6,r19,-4
   86f78:	01000904 	movi	r4,36
   86f7c:	18800315 	stw	r2,12(r3)
   86f80:	10c00215 	stw	r3,8(r2)
   86f84:	bc800204 	addi	r18,r23,8
   86f88:	21807836 	bltu	r4,r6,8716c <_realloc_r+0x4e8>
   86f8c:	008004c4 	movi	r2,19
   86f90:	1180732e 	bgeu	r2,r6,87160 <_realloc_r+0x4dc>
   86f94:	80800017 	ldw	r2,0(r16)
   86f98:	b8800215 	stw	r2,8(r23)
   86f9c:	80800117 	ldw	r2,4(r16)
   86fa0:	b8800315 	stw	r2,12(r23)
   86fa4:	008006c4 	movi	r2,27
   86fa8:	11808936 	bltu	r2,r6,871d0 <_realloc_r+0x54c>
   86fac:	b8800404 	addi	r2,r23,16
   86fb0:	80c00204 	addi	r3,r16,8
   86fb4:	19000017 	ldw	r4,0(r3)
   86fb8:	9021883a 	mov	r16,r18
   86fbc:	3829883a 	mov	r20,r7
   86fc0:	11000015 	stw	r4,0(r2)
   86fc4:	19000117 	ldw	r4,4(r3)
   86fc8:	b82d883a 	mov	r22,r23
   86fcc:	11000115 	stw	r4,4(r2)
   86fd0:	18c00217 	ldw	r3,8(r3)
   86fd4:	10c00215 	stw	r3,8(r2)
   86fd8:	b8800117 	ldw	r2,4(r23)
   86fdc:	003f7b06 	br	86dcc <_realloc_r+0x148>
   86fe0:	80c00017 	ldw	r3,0(r16)
   86fe4:	90c00015 	stw	r3,0(r18)
   86fe8:	80c00117 	ldw	r3,4(r16)
   86fec:	90c00115 	stw	r3,4(r18)
   86ff0:	00c006c4 	movi	r3,27
   86ff4:	19804636 	bltu	r3,r6,87110 <_realloc_r+0x48c>
   86ff8:	90800204 	addi	r2,r18,8
   86ffc:	80c00204 	addi	r3,r16,8
   87000:	003fb906 	br	86ee8 <_realloc_r+0x264>
   87004:	9005883a 	mov	r2,r18
   87008:	8007883a 	mov	r3,r16
   8700c:	19000017 	ldw	r4,0(r3)
   87010:	9021883a 	mov	r16,r18
   87014:	b82d883a 	mov	r22,r23
   87018:	11000015 	stw	r4,0(r2)
   8701c:	19000117 	ldw	r4,4(r3)
   87020:	11000115 	stw	r4,4(r2)
   87024:	18c00217 	ldw	r3,8(r3)
   87028:	10c00215 	stw	r3,8(r2)
   8702c:	b8800117 	ldw	r2,4(r23)
   87030:	003f6606 	br	86dcc <_realloc_r+0x148>
   87034:	2445c83a 	sub	r2,r4,r17
   87038:	b46d883a 	add	r22,r22,r17
   8703c:	10800054 	ori	r2,r2,1
   87040:	b0800115 	stw	r2,4(r22)
   87044:	80bfff17 	ldw	r2,-4(r16)
   87048:	a809883a 	mov	r4,r21
   8704c:	e5800215 	stw	r22,8(fp)
   87050:	1080004c 	andi	r2,r2,1
   87054:	88a2b03a 	or	r17,r17,r2
   87058:	847fff15 	stw	r17,-4(r16)
   8705c:	008a1780 	call	8a178 <__malloc_unlock>
   87060:	8025883a 	mov	r18,r16
   87064:	003f6606 	br	86e00 <_realloc_r+0x17c>
   87068:	9009883a 	mov	r4,r18
   8706c:	800b883a 	mov	r5,r16
   87070:	00859cc0 	call	859cc <memmove>
   87074:	003fa206 	br	86f00 <_realloc_r+0x27c>
   87078:	88800404 	addi	r2,r17,16
   8707c:	a0bf8716 	blt	r20,r2,86e9c <_realloc_r+0x218>
   87080:	b8800317 	ldw	r2,12(r23)
   87084:	b8c00217 	ldw	r3,8(r23)
   87088:	99bfff04 	addi	r6,r19,-4
   8708c:	01000904 	movi	r4,36
   87090:	18800315 	stw	r2,12(r3)
   87094:	10c00215 	stw	r3,8(r2)
   87098:	bc800204 	addi	r18,r23,8
   8709c:	21806536 	bltu	r4,r6,87234 <_realloc_r+0x5b0>
   870a0:	008004c4 	movi	r2,19
   870a4:	1180592e 	bgeu	r2,r6,8720c <_realloc_r+0x588>
   870a8:	80800017 	ldw	r2,0(r16)
   870ac:	b8800215 	stw	r2,8(r23)
   870b0:	80800117 	ldw	r2,4(r16)
   870b4:	b8800315 	stw	r2,12(r23)
   870b8:	008006c4 	movi	r2,27
   870bc:	11806136 	bltu	r2,r6,87244 <_realloc_r+0x5c0>
   870c0:	b8800404 	addi	r2,r23,16
   870c4:	80c00204 	addi	r3,r16,8
   870c8:	19000017 	ldw	r4,0(r3)
   870cc:	11000015 	stw	r4,0(r2)
   870d0:	19000117 	ldw	r4,4(r3)
   870d4:	11000115 	stw	r4,4(r2)
   870d8:	18c00217 	ldw	r3,8(r3)
   870dc:	10c00215 	stw	r3,8(r2)
   870e0:	a447c83a 	sub	r3,r20,r17
   870e4:	bc45883a 	add	r2,r23,r17
   870e8:	18c00054 	ori	r3,r3,1
   870ec:	10c00115 	stw	r3,4(r2)
   870f0:	b8c00117 	ldw	r3,4(r23)
   870f4:	e0800215 	stw	r2,8(fp)
   870f8:	a809883a 	mov	r4,r21
   870fc:	1880004c 	andi	r2,r3,1
   87100:	88a2b03a 	or	r17,r17,r2
   87104:	bc400115 	stw	r17,4(r23)
   87108:	008a1780 	call	8a178 <__malloc_unlock>
   8710c:	003f3c06 	br	86e00 <_realloc_r+0x17c>
   87110:	80c00217 	ldw	r3,8(r16)
   87114:	90c00215 	stw	r3,8(r18)
   87118:	80c00317 	ldw	r3,12(r16)
   8711c:	90c00315 	stw	r3,12(r18)
   87120:	30802426 	beq	r6,r2,871b4 <_realloc_r+0x530>
   87124:	90800404 	addi	r2,r18,16
   87128:	80c00404 	addi	r3,r16,16
   8712c:	003f6e06 	br	86ee8 <_realloc_r+0x264>
   87130:	953fff17 	ldw	r20,-4(r18)
   87134:	00ffff04 	movi	r3,-4
   87138:	a0e8703a 	and	r20,r20,r3
   8713c:	a4e9883a 	add	r20,r20,r19
   87140:	003f2206 	br	86dcc <_realloc_r+0x148>
   87144:	800b883a 	mov	r5,r16
   87148:	9009883a 	mov	r4,r18
   8714c:	00859cc0 	call	859cc <memmove>
   87150:	9021883a 	mov	r16,r18
   87154:	b8800117 	ldw	r2,4(r23)
   87158:	b82d883a 	mov	r22,r23
   8715c:	003f1b06 	br	86dcc <_realloc_r+0x148>
   87160:	9005883a 	mov	r2,r18
   87164:	8007883a 	mov	r3,r16
   87168:	003f9206 	br	86fb4 <_realloc_r+0x330>
   8716c:	800b883a 	mov	r5,r16
   87170:	9009883a 	mov	r4,r18
   87174:	d9c00015 	stw	r7,0(sp)
   87178:	00859cc0 	call	859cc <memmove>
   8717c:	d9c00017 	ldw	r7,0(sp)
   87180:	9021883a 	mov	r16,r18
   87184:	b8800117 	ldw	r2,4(r23)
   87188:	3829883a 	mov	r20,r7
   8718c:	b82d883a 	mov	r22,r23
   87190:	003f0e06 	br	86dcc <_realloc_r+0x148>
   87194:	80800217 	ldw	r2,8(r16)
   87198:	b8800415 	stw	r2,16(r23)
   8719c:	80800317 	ldw	r2,12(r16)
   871a0:	b8800515 	stw	r2,20(r23)
   871a4:	31001226 	beq	r6,r4,871f0 <_realloc_r+0x56c>
   871a8:	b8800604 	addi	r2,r23,24
   871ac:	80c00404 	addi	r3,r16,16
   871b0:	003f9606 	br	8700c <_realloc_r+0x388>
   871b4:	81000417 	ldw	r4,16(r16)
   871b8:	90800604 	addi	r2,r18,24
   871bc:	80c00604 	addi	r3,r16,24
   871c0:	91000415 	stw	r4,16(r18)
   871c4:	81000517 	ldw	r4,20(r16)
   871c8:	91000515 	stw	r4,20(r18)
   871cc:	003f4606 	br	86ee8 <_realloc_r+0x264>
   871d0:	80800217 	ldw	r2,8(r16)
   871d4:	b8800415 	stw	r2,16(r23)
   871d8:	80800317 	ldw	r2,12(r16)
   871dc:	b8800515 	stw	r2,20(r23)
   871e0:	31000d26 	beq	r6,r4,87218 <_realloc_r+0x594>
   871e4:	b8800604 	addi	r2,r23,24
   871e8:	80c00404 	addi	r3,r16,16
   871ec:	003f7106 	br	86fb4 <_realloc_r+0x330>
   871f0:	81000417 	ldw	r4,16(r16)
   871f4:	b8800804 	addi	r2,r23,32
   871f8:	80c00604 	addi	r3,r16,24
   871fc:	b9000615 	stw	r4,24(r23)
   87200:	81000517 	ldw	r4,20(r16)
   87204:	b9000715 	stw	r4,28(r23)
   87208:	003f8006 	br	8700c <_realloc_r+0x388>
   8720c:	9005883a 	mov	r2,r18
   87210:	8007883a 	mov	r3,r16
   87214:	003fac06 	br	870c8 <_realloc_r+0x444>
   87218:	81000417 	ldw	r4,16(r16)
   8721c:	b8800804 	addi	r2,r23,32
   87220:	80c00604 	addi	r3,r16,24
   87224:	b9000615 	stw	r4,24(r23)
   87228:	81000517 	ldw	r4,20(r16)
   8722c:	b9000715 	stw	r4,28(r23)
   87230:	003f6006 	br	86fb4 <_realloc_r+0x330>
   87234:	9009883a 	mov	r4,r18
   87238:	800b883a 	mov	r5,r16
   8723c:	00859cc0 	call	859cc <memmove>
   87240:	003fa706 	br	870e0 <_realloc_r+0x45c>
   87244:	80800217 	ldw	r2,8(r16)
   87248:	b8800415 	stw	r2,16(r23)
   8724c:	80800317 	ldw	r2,12(r16)
   87250:	b8800515 	stw	r2,20(r23)
   87254:	31000326 	beq	r6,r4,87264 <_realloc_r+0x5e0>
   87258:	b8800604 	addi	r2,r23,24
   8725c:	80c00404 	addi	r3,r16,16
   87260:	003f9906 	br	870c8 <_realloc_r+0x444>
   87264:	81000417 	ldw	r4,16(r16)
   87268:	b8800804 	addi	r2,r23,32
   8726c:	80c00604 	addi	r3,r16,24
   87270:	b9000615 	stw	r4,24(r23)
   87274:	81000517 	ldw	r4,20(r16)
   87278:	b9000715 	stw	r4,28(r23)
   8727c:	003f9206 	br	870c8 <_realloc_r+0x444>

00087280 <__isinfd>:
   87280:	0105c83a 	sub	r2,zero,r4
   87284:	1108b03a 	or	r4,r2,r4
   87288:	2004d7fa 	srli	r2,r4,31
   8728c:	00e00034 	movhi	r3,32768
   87290:	18ffffc4 	addi	r3,r3,-1
   87294:	28ca703a 	and	r5,r5,r3
   87298:	1144b03a 	or	r2,r2,r5
   8729c:	00dffc34 	movhi	r3,32752
   872a0:	1885c83a 	sub	r2,r3,r2
   872a4:	0087c83a 	sub	r3,zero,r2
   872a8:	1884b03a 	or	r2,r3,r2
   872ac:	1005d7fa 	srai	r2,r2,31
   872b0:	10800044 	addi	r2,r2,1
   872b4:	f800283a 	ret

000872b8 <__isnand>:
   872b8:	0105c83a 	sub	r2,zero,r4
   872bc:	1108b03a 	or	r4,r2,r4
   872c0:	2004d7fa 	srli	r2,r4,31
   872c4:	00e00034 	movhi	r3,32768
   872c8:	18ffffc4 	addi	r3,r3,-1
   872cc:	28ca703a 	and	r5,r5,r3
   872d0:	1144b03a 	or	r2,r2,r5
   872d4:	00dffc34 	movhi	r3,32752
   872d8:	1885c83a 	sub	r2,r3,r2
   872dc:	1004d7fa 	srli	r2,r2,31
   872e0:	f800283a 	ret

000872e4 <_sbrk_r>:
   872e4:	defffd04 	addi	sp,sp,-12
   872e8:	dc400115 	stw	r17,4(sp)
   872ec:	dc000015 	stw	r16,0(sp)
   872f0:	2023883a 	mov	r17,r4
   872f4:	04000274 	movhi	r16,9
   872f8:	843f2a04 	addi	r16,r16,-856
   872fc:	2809883a 	mov	r4,r5
   87300:	dfc00215 	stw	ra,8(sp)
   87304:	80000015 	stw	zero,0(r16)
   87308:	008a3a00 	call	8a3a0 <sbrk>
   8730c:	00ffffc4 	movi	r3,-1
   87310:	10c00526 	beq	r2,r3,87328 <_sbrk_r+0x44>
   87314:	dfc00217 	ldw	ra,8(sp)
   87318:	dc400117 	ldw	r17,4(sp)
   8731c:	dc000017 	ldw	r16,0(sp)
   87320:	dec00304 	addi	sp,sp,12
   87324:	f800283a 	ret
   87328:	80c00017 	ldw	r3,0(r16)
   8732c:	183ff926 	beq	r3,zero,87314 <_sbrk_r+0x30>
   87330:	88c00015 	stw	r3,0(r17)
   87334:	dfc00217 	ldw	ra,8(sp)
   87338:	dc400117 	ldw	r17,4(sp)
   8733c:	dc000017 	ldw	r16,0(sp)
   87340:	dec00304 	addi	sp,sp,12
   87344:	f800283a 	ret

00087348 <__sread>:
   87348:	defffe04 	addi	sp,sp,-8
   8734c:	dc000015 	stw	r16,0(sp)
   87350:	2821883a 	mov	r16,r5
   87354:	2940038f 	ldh	r5,14(r5)
   87358:	dfc00115 	stw	ra,4(sp)
   8735c:	00879dc0 	call	879dc <_read_r>
   87360:	10000716 	blt	r2,zero,87380 <__sread+0x38>
   87364:	80c01417 	ldw	r3,80(r16)
   87368:	1887883a 	add	r3,r3,r2
   8736c:	80c01415 	stw	r3,80(r16)
   87370:	dfc00117 	ldw	ra,4(sp)
   87374:	dc000017 	ldw	r16,0(sp)
   87378:	dec00204 	addi	sp,sp,8
   8737c:	f800283a 	ret
   87380:	80c0030b 	ldhu	r3,12(r16)
   87384:	18fbffcc 	andi	r3,r3,61439
   87388:	80c0030d 	sth	r3,12(r16)
   8738c:	dfc00117 	ldw	ra,4(sp)
   87390:	dc000017 	ldw	r16,0(sp)
   87394:	dec00204 	addi	sp,sp,8
   87398:	f800283a 	ret

0008739c <__swrite>:
   8739c:	2880030b 	ldhu	r2,12(r5)
   873a0:	defffb04 	addi	sp,sp,-20
   873a4:	dcc00315 	stw	r19,12(sp)
   873a8:	10c0400c 	andi	r3,r2,256
   873ac:	18ffffcc 	andi	r3,r3,65535
   873b0:	18e0001c 	xori	r3,r3,32768
   873b4:	dc800215 	stw	r18,8(sp)
   873b8:	dc400115 	stw	r17,4(sp)
   873bc:	dc000015 	stw	r16,0(sp)
   873c0:	dfc00415 	stw	ra,16(sp)
   873c4:	18e00004 	addi	r3,r3,-32768
   873c8:	2821883a 	mov	r16,r5
   873cc:	2027883a 	mov	r19,r4
   873d0:	3025883a 	mov	r18,r6
   873d4:	3823883a 	mov	r17,r7
   873d8:	18000526 	beq	r3,zero,873f0 <__swrite+0x54>
   873dc:	2940038f 	ldh	r5,14(r5)
   873e0:	000d883a 	mov	r6,zero
   873e4:	01c00084 	movi	r7,2
   873e8:	00879700 	call	87970 <_lseek_r>
   873ec:	8080030b 	ldhu	r2,12(r16)
   873f0:	8140038f 	ldh	r5,14(r16)
   873f4:	10bbffcc 	andi	r2,r2,61439
   873f8:	9809883a 	mov	r4,r19
   873fc:	900d883a 	mov	r6,r18
   87400:	880f883a 	mov	r7,r17
   87404:	8080030d 	sth	r2,12(r16)
   87408:	dfc00417 	ldw	ra,16(sp)
   8740c:	dcc00317 	ldw	r19,12(sp)
   87410:	dc800217 	ldw	r18,8(sp)
   87414:	dc400117 	ldw	r17,4(sp)
   87418:	dc000017 	ldw	r16,0(sp)
   8741c:	dec00504 	addi	sp,sp,20
   87420:	00875b81 	jmpi	875b8 <_write_r>

00087424 <__sseek>:
   87424:	defffe04 	addi	sp,sp,-8
   87428:	dc000015 	stw	r16,0(sp)
   8742c:	2821883a 	mov	r16,r5
   87430:	2940038f 	ldh	r5,14(r5)
   87434:	dfc00115 	stw	ra,4(sp)
   87438:	00879700 	call	87970 <_lseek_r>
   8743c:	00ffffc4 	movi	r3,-1
   87440:	10c00826 	beq	r2,r3,87464 <__sseek+0x40>
   87444:	80c0030b 	ldhu	r3,12(r16)
   87448:	80801415 	stw	r2,80(r16)
   8744c:	18c40014 	ori	r3,r3,4096
   87450:	80c0030d 	sth	r3,12(r16)
   87454:	dfc00117 	ldw	ra,4(sp)
   87458:	dc000017 	ldw	r16,0(sp)
   8745c:	dec00204 	addi	sp,sp,8
   87460:	f800283a 	ret
   87464:	80c0030b 	ldhu	r3,12(r16)
   87468:	18fbffcc 	andi	r3,r3,61439
   8746c:	80c0030d 	sth	r3,12(r16)
   87470:	dfc00117 	ldw	ra,4(sp)
   87474:	dc000017 	ldw	r16,0(sp)
   87478:	dec00204 	addi	sp,sp,8
   8747c:	f800283a 	ret

00087480 <__sclose>:
   87480:	2940038f 	ldh	r5,14(r5)
   87484:	00876f01 	jmpi	876f0 <_close_r>

00087488 <strcmp>:
   87488:	2904b03a 	or	r2,r5,r4
   8748c:	108000cc 	andi	r2,r2,3
   87490:	1000171e 	bne	r2,zero,874f0 <strcmp+0x68>
   87494:	20800017 	ldw	r2,0(r4)
   87498:	28c00017 	ldw	r3,0(r5)
   8749c:	10c0141e 	bne	r2,r3,874f0 <strcmp+0x68>
   874a0:	027fbff4 	movhi	r9,65279
   874a4:	4a7fbfc4 	addi	r9,r9,-257
   874a8:	1247883a 	add	r3,r2,r9
   874ac:	0084303a 	nor	r2,zero,r2
   874b0:	1884703a 	and	r2,r3,r2
   874b4:	02202074 	movhi	r8,32897
   874b8:	42202004 	addi	r8,r8,-32640
   874bc:	1204703a 	and	r2,r2,r8
   874c0:	10000226 	beq	r2,zero,874cc <strcmp+0x44>
   874c4:	00001706 	br	87524 <strcmp+0x9c>
   874c8:	3000161e 	bne	r6,zero,87524 <strcmp+0x9c>
   874cc:	21000104 	addi	r4,r4,4
   874d0:	20800017 	ldw	r2,0(r4)
   874d4:	29400104 	addi	r5,r5,4
   874d8:	28c00017 	ldw	r3,0(r5)
   874dc:	124f883a 	add	r7,r2,r9
   874e0:	008c303a 	nor	r6,zero,r2
   874e4:	398c703a 	and	r6,r7,r6
   874e8:	320c703a 	and	r6,r6,r8
   874ec:	10fff626 	beq	r2,r3,874c8 <strcmp+0x40>
   874f0:	20800007 	ldb	r2,0(r4)
   874f4:	1000051e 	bne	r2,zero,8750c <strcmp+0x84>
   874f8:	00000606 	br	87514 <strcmp+0x8c>
   874fc:	21000044 	addi	r4,r4,1
   87500:	20800007 	ldb	r2,0(r4)
   87504:	29400044 	addi	r5,r5,1
   87508:	10000226 	beq	r2,zero,87514 <strcmp+0x8c>
   8750c:	28c00007 	ldb	r3,0(r5)
   87510:	10fffa26 	beq	r2,r3,874fc <strcmp+0x74>
   87514:	20c00003 	ldbu	r3,0(r4)
   87518:	28800003 	ldbu	r2,0(r5)
   8751c:	1885c83a 	sub	r2,r3,r2
   87520:	f800283a 	ret
   87524:	0005883a 	mov	r2,zero
   87528:	f800283a 	ret

0008752c <strlen>:
   8752c:	208000cc 	andi	r2,r4,3
   87530:	10001f1e 	bne	r2,zero,875b0 <strlen+0x84>
   87534:	20800017 	ldw	r2,0(r4)
   87538:	01ffbff4 	movhi	r7,65279
   8753c:	39ffbfc4 	addi	r7,r7,-257
   87540:	01a02074 	movhi	r6,32897
   87544:	31a02004 	addi	r6,r6,-32640
   87548:	11c7883a 	add	r3,r2,r7
   8754c:	0084303a 	nor	r2,zero,r2
   87550:	1886703a 	and	r3,r3,r2
   87554:	1986703a 	and	r3,r3,r6
   87558:	2005883a 	mov	r2,r4
   8755c:	1800101e 	bne	r3,zero,875a0 <strlen+0x74>
   87560:	10800104 	addi	r2,r2,4
   87564:	10c00017 	ldw	r3,0(r2)
   87568:	19cb883a 	add	r5,r3,r7
   8756c:	00c6303a 	nor	r3,zero,r3
   87570:	28c6703a 	and	r3,r5,r3
   87574:	1986703a 	and	r3,r3,r6
   87578:	1800091e 	bne	r3,zero,875a0 <strlen+0x74>
   8757c:	10800104 	addi	r2,r2,4
   87580:	10c00017 	ldw	r3,0(r2)
   87584:	19cb883a 	add	r5,r3,r7
   87588:	00c6303a 	nor	r3,zero,r3
   8758c:	28c6703a 	and	r3,r5,r3
   87590:	1986703a 	and	r3,r3,r6
   87594:	183ff226 	beq	r3,zero,87560 <strlen+0x34>
   87598:	00000106 	br	875a0 <strlen+0x74>
   8759c:	10800044 	addi	r2,r2,1
   875a0:	10c00007 	ldb	r3,0(r2)
   875a4:	183ffd1e 	bne	r3,zero,8759c <strlen+0x70>
   875a8:	1105c83a 	sub	r2,r2,r4
   875ac:	f800283a 	ret
   875b0:	2005883a 	mov	r2,r4
   875b4:	003ffa06 	br	875a0 <strlen+0x74>

000875b8 <_write_r>:
   875b8:	defffd04 	addi	sp,sp,-12
   875bc:	dc400115 	stw	r17,4(sp)
   875c0:	dc000015 	stw	r16,0(sp)
   875c4:	2023883a 	mov	r17,r4
   875c8:	04000274 	movhi	r16,9
   875cc:	843f2a04 	addi	r16,r16,-856
   875d0:	2809883a 	mov	r4,r5
   875d4:	300b883a 	mov	r5,r6
   875d8:	380d883a 	mov	r6,r7
   875dc:	dfc00215 	stw	ra,8(sp)
   875e0:	80000015 	stw	zero,0(r16)
   875e4:	008a4d00 	call	8a4d0 <write>
   875e8:	00ffffc4 	movi	r3,-1
   875ec:	10c00526 	beq	r2,r3,87604 <_write_r+0x4c>
   875f0:	dfc00217 	ldw	ra,8(sp)
   875f4:	dc400117 	ldw	r17,4(sp)
   875f8:	dc000017 	ldw	r16,0(sp)
   875fc:	dec00304 	addi	sp,sp,12
   87600:	f800283a 	ret
   87604:	80c00017 	ldw	r3,0(r16)
   87608:	183ff926 	beq	r3,zero,875f0 <_write_r+0x38>
   8760c:	88c00015 	stw	r3,0(r17)
   87610:	dfc00217 	ldw	ra,8(sp)
   87614:	dc400117 	ldw	r17,4(sp)
   87618:	dc000017 	ldw	r16,0(sp)
   8761c:	dec00304 	addi	sp,sp,12
   87620:	f800283a 	ret

00087624 <_calloc_r>:
   87624:	defffe04 	addi	sp,sp,-8
   87628:	dc000015 	stw	r16,0(sp)
   8762c:	2021883a 	mov	r16,r4
   87630:	3009883a 	mov	r4,r6
   87634:	dfc00115 	stw	ra,4(sp)
   87638:	00895300 	call	89530 <__mulsi3>
   8763c:	8009883a 	mov	r4,r16
   87640:	100b883a 	mov	r5,r2
   87644:	00850100 	call	85010 <_malloc_r>
   87648:	1021883a 	mov	r16,r2
   8764c:	10000c26 	beq	r2,zero,87680 <_calloc_r+0x5c>
   87650:	11bfff17 	ldw	r6,-4(r2)
   87654:	00ffff04 	movi	r3,-4
   87658:	00800904 	movi	r2,36
   8765c:	30cc703a 	and	r6,r6,r3
   87660:	30cd883a 	add	r6,r6,r3
   87664:	11801436 	bltu	r2,r6,876b8 <_calloc_r+0x94>
   87668:	00c004c4 	movi	r3,19
   8766c:	19800936 	bltu	r3,r6,87694 <_calloc_r+0x70>
   87670:	8005883a 	mov	r2,r16
   87674:	10000015 	stw	zero,0(r2)
   87678:	10000115 	stw	zero,4(r2)
   8767c:	10000215 	stw	zero,8(r2)
   87680:	8005883a 	mov	r2,r16
   87684:	dfc00117 	ldw	ra,4(sp)
   87688:	dc000017 	ldw	r16,0(sp)
   8768c:	dec00204 	addi	sp,sp,8
   87690:	f800283a 	ret
   87694:	80000015 	stw	zero,0(r16)
   87698:	80000115 	stw	zero,4(r16)
   8769c:	00c006c4 	movi	r3,27
   876a0:	19800d2e 	bgeu	r3,r6,876d8 <_calloc_r+0xb4>
   876a4:	80000215 	stw	zero,8(r16)
   876a8:	80000315 	stw	zero,12(r16)
   876ac:	30800c26 	beq	r6,r2,876e0 <_calloc_r+0xbc>
   876b0:	80800404 	addi	r2,r16,16
   876b4:	003fef06 	br	87674 <_calloc_r+0x50>
   876b8:	8009883a 	mov	r4,r16
   876bc:	000b883a 	mov	r5,zero
   876c0:	0085b580 	call	85b58 <memset>
   876c4:	8005883a 	mov	r2,r16
   876c8:	dfc00117 	ldw	ra,4(sp)
   876cc:	dc000017 	ldw	r16,0(sp)
   876d0:	dec00204 	addi	sp,sp,8
   876d4:	f800283a 	ret
   876d8:	80800204 	addi	r2,r16,8
   876dc:	003fe506 	br	87674 <_calloc_r+0x50>
   876e0:	80000415 	stw	zero,16(r16)
   876e4:	80000515 	stw	zero,20(r16)
   876e8:	80800604 	addi	r2,r16,24
   876ec:	003fe106 	br	87674 <_calloc_r+0x50>

000876f0 <_close_r>:
   876f0:	defffd04 	addi	sp,sp,-12
   876f4:	dc400115 	stw	r17,4(sp)
   876f8:	dc000015 	stw	r16,0(sp)
   876fc:	2023883a 	mov	r17,r4
   87700:	04000274 	movhi	r16,9
   87704:	843f2a04 	addi	r16,r16,-856
   87708:	2809883a 	mov	r4,r5
   8770c:	dfc00215 	stw	ra,8(sp)
   87710:	80000015 	stw	zero,0(r16)
   87714:	0089be40 	call	89be4 <close>
   87718:	00ffffc4 	movi	r3,-1
   8771c:	10c00526 	beq	r2,r3,87734 <_close_r+0x44>
   87720:	dfc00217 	ldw	ra,8(sp)
   87724:	dc400117 	ldw	r17,4(sp)
   87728:	dc000017 	ldw	r16,0(sp)
   8772c:	dec00304 	addi	sp,sp,12
   87730:	f800283a 	ret
   87734:	80c00017 	ldw	r3,0(r16)
   87738:	183ff926 	beq	r3,zero,87720 <_close_r+0x30>
   8773c:	88c00015 	stw	r3,0(r17)
   87740:	dfc00217 	ldw	ra,8(sp)
   87744:	dc400117 	ldw	r17,4(sp)
   87748:	dc000017 	ldw	r16,0(sp)
   8774c:	dec00304 	addi	sp,sp,12
   87750:	f800283a 	ret

00087754 <_fclose_r>:
   87754:	defffc04 	addi	sp,sp,-16
   87758:	dc400115 	stw	r17,4(sp)
   8775c:	dc000015 	stw	r16,0(sp)
   87760:	dfc00315 	stw	ra,12(sp)
   87764:	dc800215 	stw	r18,8(sp)
   87768:	2821883a 	mov	r16,r5
   8776c:	2023883a 	mov	r17,r4
   87770:	28003426 	beq	r5,zero,87844 <_fclose_r+0xf0>
   87774:	00842fc0 	call	842fc <__sfp_lock_acquire>
   87778:	88000226 	beq	r17,zero,87784 <_fclose_r+0x30>
   8777c:	88800e17 	ldw	r2,56(r17)
   87780:	10003826 	beq	r2,zero,87864 <_fclose_r+0x110>
   87784:	8080030f 	ldh	r2,12(r16)
   87788:	10002526 	beq	r2,zero,87820 <_fclose_r+0xcc>
   8778c:	8809883a 	mov	r4,r17
   87790:	800b883a 	mov	r5,r16
   87794:	0083e380 	call	83e38 <_fflush_r>
   87798:	1025883a 	mov	r18,r2
   8779c:	80800b17 	ldw	r2,44(r16)
   877a0:	10000426 	beq	r2,zero,877b4 <_fclose_r+0x60>
   877a4:	81400717 	ldw	r5,28(r16)
   877a8:	8809883a 	mov	r4,r17
   877ac:	103ee83a 	callr	r2
   877b0:	10003516 	blt	r2,zero,87888 <_fclose_r+0x134>
   877b4:	8080030b 	ldhu	r2,12(r16)
   877b8:	1080200c 	andi	r2,r2,128
   877bc:	10bfffcc 	andi	r2,r2,65535
   877c0:	10a0001c 	xori	r2,r2,32768
   877c4:	10a00004 	addi	r2,r2,-32768
   877c8:	10002b1e 	bne	r2,zero,87878 <_fclose_r+0x124>
   877cc:	81400c17 	ldw	r5,48(r16)
   877d0:	28000526 	beq	r5,zero,877e8 <_fclose_r+0x94>
   877d4:	80801004 	addi	r2,r16,64
   877d8:	28800226 	beq	r5,r2,877e4 <_fclose_r+0x90>
   877dc:	8809883a 	mov	r4,r17
   877e0:	00844780 	call	84478 <_free_r>
   877e4:	80000c15 	stw	zero,48(r16)
   877e8:	81401117 	ldw	r5,68(r16)
   877ec:	28000326 	beq	r5,zero,877fc <_fclose_r+0xa8>
   877f0:	8809883a 	mov	r4,r17
   877f4:	00844780 	call	84478 <_free_r>
   877f8:	80001115 	stw	zero,68(r16)
   877fc:	8000030d 	sth	zero,12(r16)
   87800:	00843000 	call	84300 <__sfp_lock_release>
   87804:	9005883a 	mov	r2,r18
   87808:	dfc00317 	ldw	ra,12(sp)
   8780c:	dc800217 	ldw	r18,8(sp)
   87810:	dc400117 	ldw	r17,4(sp)
   87814:	dc000017 	ldw	r16,0(sp)
   87818:	dec00404 	addi	sp,sp,16
   8781c:	f800283a 	ret
   87820:	00843000 	call	84300 <__sfp_lock_release>
   87824:	0025883a 	mov	r18,zero
   87828:	9005883a 	mov	r2,r18
   8782c:	dfc00317 	ldw	ra,12(sp)
   87830:	dc800217 	ldw	r18,8(sp)
   87834:	dc400117 	ldw	r17,4(sp)
   87838:	dc000017 	ldw	r16,0(sp)
   8783c:	dec00404 	addi	sp,sp,16
   87840:	f800283a 	ret
   87844:	0025883a 	mov	r18,zero
   87848:	9005883a 	mov	r2,r18
   8784c:	dfc00317 	ldw	ra,12(sp)
   87850:	dc800217 	ldw	r18,8(sp)
   87854:	dc400117 	ldw	r17,4(sp)
   87858:	dc000017 	ldw	r16,0(sp)
   8785c:	dec00404 	addi	sp,sp,16
   87860:	f800283a 	ret
   87864:	8809883a 	mov	r4,r17
   87868:	00840f40 	call	840f4 <__sinit>
   8786c:	8080030f 	ldh	r2,12(r16)
   87870:	103fc61e 	bne	r2,zero,8778c <_fclose_r+0x38>
   87874:	003fea06 	br	87820 <_fclose_r+0xcc>
   87878:	81400417 	ldw	r5,16(r16)
   8787c:	8809883a 	mov	r4,r17
   87880:	00844780 	call	84478 <_free_r>
   87884:	003fd106 	br	877cc <_fclose_r+0x78>
   87888:	04bfffc4 	movi	r18,-1
   8788c:	003fc906 	br	877b4 <_fclose_r+0x60>

00087890 <fclose>:
   87890:	00800274 	movhi	r2,9
   87894:	10b88004 	addi	r2,r2,-7680
   87898:	200b883a 	mov	r5,r4
   8789c:	11000017 	ldw	r4,0(r2)
   878a0:	00877541 	jmpi	87754 <_fclose_r>

000878a4 <_fstat_r>:
   878a4:	defffd04 	addi	sp,sp,-12
   878a8:	dc400115 	stw	r17,4(sp)
   878ac:	dc000015 	stw	r16,0(sp)
   878b0:	2023883a 	mov	r17,r4
   878b4:	04000274 	movhi	r16,9
   878b8:	843f2a04 	addi	r16,r16,-856
   878bc:	2809883a 	mov	r4,r5
   878c0:	300b883a 	mov	r5,r6
   878c4:	dfc00215 	stw	ra,8(sp)
   878c8:	80000015 	stw	zero,0(r16)
   878cc:	0089d2c0 	call	89d2c <fstat>
   878d0:	00ffffc4 	movi	r3,-1
   878d4:	10c00526 	beq	r2,r3,878ec <_fstat_r+0x48>
   878d8:	dfc00217 	ldw	ra,8(sp)
   878dc:	dc400117 	ldw	r17,4(sp)
   878e0:	dc000017 	ldw	r16,0(sp)
   878e4:	dec00304 	addi	sp,sp,12
   878e8:	f800283a 	ret
   878ec:	80c00017 	ldw	r3,0(r16)
   878f0:	183ff926 	beq	r3,zero,878d8 <_fstat_r+0x34>
   878f4:	88c00015 	stw	r3,0(r17)
   878f8:	dfc00217 	ldw	ra,8(sp)
   878fc:	dc400117 	ldw	r17,4(sp)
   87900:	dc000017 	ldw	r16,0(sp)
   87904:	dec00304 	addi	sp,sp,12
   87908:	f800283a 	ret

0008790c <_isatty_r>:
   8790c:	defffd04 	addi	sp,sp,-12
   87910:	dc400115 	stw	r17,4(sp)
   87914:	dc000015 	stw	r16,0(sp)
   87918:	2023883a 	mov	r17,r4
   8791c:	04000274 	movhi	r16,9
   87920:	843f2a04 	addi	r16,r16,-856
   87924:	2809883a 	mov	r4,r5
   87928:	dfc00215 	stw	ra,8(sp)
   8792c:	80000015 	stw	zero,0(r16)
   87930:	0089e2c0 	call	89e2c <isatty>
   87934:	00ffffc4 	movi	r3,-1
   87938:	10c00526 	beq	r2,r3,87950 <_isatty_r+0x44>
   8793c:	dfc00217 	ldw	ra,8(sp)
   87940:	dc400117 	ldw	r17,4(sp)
   87944:	dc000017 	ldw	r16,0(sp)
   87948:	dec00304 	addi	sp,sp,12
   8794c:	f800283a 	ret
   87950:	80c00017 	ldw	r3,0(r16)
   87954:	183ff926 	beq	r3,zero,8793c <_isatty_r+0x30>
   87958:	88c00015 	stw	r3,0(r17)
   8795c:	dfc00217 	ldw	ra,8(sp)
   87960:	dc400117 	ldw	r17,4(sp)
   87964:	dc000017 	ldw	r16,0(sp)
   87968:	dec00304 	addi	sp,sp,12
   8796c:	f800283a 	ret

00087970 <_lseek_r>:
   87970:	defffd04 	addi	sp,sp,-12
   87974:	dc400115 	stw	r17,4(sp)
   87978:	dc000015 	stw	r16,0(sp)
   8797c:	2023883a 	mov	r17,r4
   87980:	04000274 	movhi	r16,9
   87984:	843f2a04 	addi	r16,r16,-856
   87988:	2809883a 	mov	r4,r5
   8798c:	300b883a 	mov	r5,r6
   87990:	380d883a 	mov	r6,r7
   87994:	dfc00215 	stw	ra,8(sp)
   87998:	80000015 	stw	zero,0(r16)
   8799c:	008a00c0 	call	8a00c <lseek>
   879a0:	00ffffc4 	movi	r3,-1
   879a4:	10c00526 	beq	r2,r3,879bc <_lseek_r+0x4c>
   879a8:	dfc00217 	ldw	ra,8(sp)
   879ac:	dc400117 	ldw	r17,4(sp)
   879b0:	dc000017 	ldw	r16,0(sp)
   879b4:	dec00304 	addi	sp,sp,12
   879b8:	f800283a 	ret
   879bc:	80c00017 	ldw	r3,0(r16)
   879c0:	183ff926 	beq	r3,zero,879a8 <_lseek_r+0x38>
   879c4:	88c00015 	stw	r3,0(r17)
   879c8:	dfc00217 	ldw	ra,8(sp)
   879cc:	dc400117 	ldw	r17,4(sp)
   879d0:	dc000017 	ldw	r16,0(sp)
   879d4:	dec00304 	addi	sp,sp,12
   879d8:	f800283a 	ret

000879dc <_read_r>:
   879dc:	defffd04 	addi	sp,sp,-12
   879e0:	dc400115 	stw	r17,4(sp)
   879e4:	dc000015 	stw	r16,0(sp)
   879e8:	2023883a 	mov	r17,r4
   879ec:	04000274 	movhi	r16,9
   879f0:	843f2a04 	addi	r16,r16,-856
   879f4:	2809883a 	mov	r4,r5
   879f8:	300b883a 	mov	r5,r6
   879fc:	380d883a 	mov	r6,r7
   87a00:	dfc00215 	stw	ra,8(sp)
   87a04:	80000015 	stw	zero,0(r16)
   87a08:	008a22c0 	call	8a22c <read>
   87a0c:	00ffffc4 	movi	r3,-1
   87a10:	10c00526 	beq	r2,r3,87a28 <_read_r+0x4c>
   87a14:	dfc00217 	ldw	ra,8(sp)
   87a18:	dc400117 	ldw	r17,4(sp)
   87a1c:	dc000017 	ldw	r16,0(sp)
   87a20:	dec00304 	addi	sp,sp,12
   87a24:	f800283a 	ret
   87a28:	80c00017 	ldw	r3,0(r16)
   87a2c:	183ff926 	beq	r3,zero,87a14 <_read_r+0x38>
   87a30:	88c00015 	stw	r3,0(r17)
   87a34:	dfc00217 	ldw	ra,8(sp)
   87a38:	dc400117 	ldw	r17,4(sp)
   87a3c:	dc000017 	ldw	r16,0(sp)
   87a40:	dec00304 	addi	sp,sp,12
   87a44:	f800283a 	ret

00087a48 <__udivdi3>:
   87a48:	defff504 	addi	sp,sp,-44
   87a4c:	dd000515 	stw	r20,20(sp)
   87a50:	dcc00415 	stw	r19,16(sp)
   87a54:	dc800315 	stw	r18,12(sp)
   87a58:	dc400215 	stw	r17,8(sp)
   87a5c:	dc000115 	stw	r16,4(sp)
   87a60:	dfc00a15 	stw	ra,40(sp)
   87a64:	df000915 	stw	fp,36(sp)
   87a68:	ddc00815 	stw	r23,32(sp)
   87a6c:	dd800715 	stw	r22,28(sp)
   87a70:	dd400615 	stw	r21,24(sp)
   87a74:	2025883a 	mov	r18,r4
   87a78:	2823883a 	mov	r17,r5
   87a7c:	3021883a 	mov	r16,r6
   87a80:	2027883a 	mov	r19,r4
   87a84:	2829883a 	mov	r20,r5
   87a88:	3800451e 	bne	r7,zero,87ba0 <__udivdi3+0x158>
   87a8c:	2980652e 	bgeu	r5,r6,87c24 <__udivdi3+0x1dc>
   87a90:	00bfffd4 	movui	r2,65535
   87a94:	1180b436 	bltu	r2,r6,87d68 <__udivdi3+0x320>
   87a98:	00803fc4 	movi	r2,255
   87a9c:	11816636 	bltu	r2,r6,88038 <__udivdi3+0x5f0>
   87aa0:	0005883a 	mov	r2,zero
   87aa4:	0007883a 	mov	r3,zero
   87aa8:	3084d83a 	srl	r2,r6,r2
   87aac:	01000274 	movhi	r4,9
   87ab0:	2131ab04 	addi	r4,r4,-14676
   87ab4:	2085883a 	add	r2,r4,r2
   87ab8:	10800003 	ldbu	r2,0(r2)
   87abc:	10c7883a 	add	r3,r2,r3
   87ac0:	00800804 	movi	r2,32
   87ac4:	10c5c83a 	sub	r2,r2,r3
   87ac8:	10000526 	beq	r2,zero,87ae0 <__udivdi3+0x98>
   87acc:	88a2983a 	sll	r17,r17,r2
   87ad0:	90c6d83a 	srl	r3,r18,r3
   87ad4:	30a0983a 	sll	r16,r6,r2
   87ad8:	90a6983a 	sll	r19,r18,r2
   87adc:	88e8b03a 	or	r20,r17,r3
   87ae0:	8022d43a 	srli	r17,r16,16
   87ae4:	a009883a 	mov	r4,r20
   87ae8:	857fffcc 	andi	r21,r16,65535
   87aec:	880b883a 	mov	r5,r17
   87af0:	00895280 	call	89528 <__umodsi3>
   87af4:	a009883a 	mov	r4,r20
   87af8:	880b883a 	mov	r5,r17
   87afc:	102d883a 	mov	r22,r2
   87b00:	00895200 	call	89520 <__udivsi3>
   87b04:	1009883a 	mov	r4,r2
   87b08:	a80b883a 	mov	r5,r21
   87b0c:	1025883a 	mov	r18,r2
   87b10:	00895300 	call	89530 <__mulsi3>
   87b14:	1009883a 	mov	r4,r2
   87b18:	b006943a 	slli	r3,r22,16
   87b1c:	9804d43a 	srli	r2,r19,16
   87b20:	1886b03a 	or	r3,r3,r2
   87b24:	1900052e 	bgeu	r3,r4,87b3c <__udivdi3+0xf4>
   87b28:	1c07883a 	add	r3,r3,r16
   87b2c:	90bfffc4 	addi	r2,r18,-1
   87b30:	1c000136 	bltu	r3,r16,87b38 <__udivdi3+0xf0>
   87b34:	19015536 	bltu	r3,r4,8808c <__udivdi3+0x644>
   87b38:	1025883a 	mov	r18,r2
   87b3c:	1929c83a 	sub	r20,r3,r4
   87b40:	880b883a 	mov	r5,r17
   87b44:	a009883a 	mov	r4,r20
   87b48:	00895280 	call	89528 <__umodsi3>
   87b4c:	102d883a 	mov	r22,r2
   87b50:	880b883a 	mov	r5,r17
   87b54:	a009883a 	mov	r4,r20
   87b58:	b02c943a 	slli	r22,r22,16
   87b5c:	00895200 	call	89520 <__udivsi3>
   87b60:	1009883a 	mov	r4,r2
   87b64:	a80b883a 	mov	r5,r21
   87b68:	9cffffcc 	andi	r19,r19,65535
   87b6c:	1023883a 	mov	r17,r2
   87b70:	b4e6b03a 	or	r19,r22,r19
   87b74:	00895300 	call	89530 <__mulsi3>
   87b78:	9880052e 	bgeu	r19,r2,87b90 <__udivdi3+0x148>
   87b7c:	9c27883a 	add	r19,r19,r16
   87b80:	88ffffc4 	addi	r3,r17,-1
   87b84:	9c011436 	bltu	r19,r16,87fd8 <__udivdi3+0x590>
   87b88:	9881132e 	bgeu	r19,r2,87fd8 <__udivdi3+0x590>
   87b8c:	8c7fff84 	addi	r17,r17,-2
   87b90:	9004943a 	slli	r2,r18,16
   87b94:	0007883a 	mov	r3,zero
   87b98:	8884b03a 	or	r2,r17,r2
   87b9c:	00001506 	br	87bf4 <__udivdi3+0x1ac>
   87ba0:	29c06a36 	bltu	r5,r7,87d4c <__udivdi3+0x304>
   87ba4:	00bfffd4 	movui	r2,65535
   87ba8:	11c06a2e 	bgeu	r2,r7,87d54 <__udivdi3+0x30c>
   87bac:	00804034 	movhi	r2,256
   87bb0:	10bfffc4 	addi	r2,r2,-1
   87bb4:	11c11436 	bltu	r2,r7,88008 <__udivdi3+0x5c0>
   87bb8:	00c00404 	movi	r3,16
   87bbc:	180b883a 	mov	r5,r3
   87bc0:	38c6d83a 	srl	r3,r7,r3
   87bc4:	01000274 	movhi	r4,9
   87bc8:	2131ab04 	addi	r4,r4,-14676
   87bcc:	04000804 	movi	r16,32
   87bd0:	20c7883a 	add	r3,r4,r3
   87bd4:	18800003 	ldbu	r2,0(r3)
   87bd8:	1145883a 	add	r2,r2,r5
   87bdc:	80a1c83a 	sub	r16,r16,r2
   87be0:	80006e1e 	bne	r16,zero,87d9c <__udivdi3+0x354>
   87be4:	0007883a 	mov	r3,zero
   87be8:	3c406a36 	bltu	r7,r17,87d94 <__udivdi3+0x34c>
   87bec:	9180692e 	bgeu	r18,r6,87d94 <__udivdi3+0x34c>
   87bf0:	0005883a 	mov	r2,zero
   87bf4:	dfc00a17 	ldw	ra,40(sp)
   87bf8:	df000917 	ldw	fp,36(sp)
   87bfc:	ddc00817 	ldw	r23,32(sp)
   87c00:	dd800717 	ldw	r22,28(sp)
   87c04:	dd400617 	ldw	r21,24(sp)
   87c08:	dd000517 	ldw	r20,20(sp)
   87c0c:	dcc00417 	ldw	r19,16(sp)
   87c10:	dc800317 	ldw	r18,12(sp)
   87c14:	dc400217 	ldw	r17,8(sp)
   87c18:	dc000117 	ldw	r16,4(sp)
   87c1c:	dec00b04 	addi	sp,sp,44
   87c20:	f800283a 	ret
   87c24:	3000041e 	bne	r6,zero,87c38 <__udivdi3+0x1f0>
   87c28:	01000044 	movi	r4,1
   87c2c:	000b883a 	mov	r5,zero
   87c30:	00895200 	call	89520 <__udivsi3>
   87c34:	1021883a 	mov	r16,r2
   87c38:	00bfffd4 	movui	r2,65535
   87c3c:	1400502e 	bgeu	r2,r16,87d80 <__udivdi3+0x338>
   87c40:	00804034 	movhi	r2,256
   87c44:	10bfffc4 	addi	r2,r2,-1
   87c48:	1400f536 	bltu	r2,r16,88020 <__udivdi3+0x5d8>
   87c4c:	00800404 	movi	r2,16
   87c50:	1007883a 	mov	r3,r2
   87c54:	8084d83a 	srl	r2,r16,r2
   87c58:	01000274 	movhi	r4,9
   87c5c:	2131ab04 	addi	r4,r4,-14676
   87c60:	2085883a 	add	r2,r4,r2
   87c64:	10800003 	ldbu	r2,0(r2)
   87c68:	10c7883a 	add	r3,r2,r3
   87c6c:	00800804 	movi	r2,32
   87c70:	10c5c83a 	sub	r2,r2,r3
   87c74:	1000a01e 	bne	r2,zero,87ef8 <__udivdi3+0x4b0>
   87c78:	8028d43a 	srli	r20,r16,16
   87c7c:	8c23c83a 	sub	r17,r17,r16
   87c80:	857fffcc 	andi	r21,r16,65535
   87c84:	00c00044 	movi	r3,1
   87c88:	8809883a 	mov	r4,r17
   87c8c:	a00b883a 	mov	r5,r20
   87c90:	d8c00015 	stw	r3,0(sp)
   87c94:	00895280 	call	89528 <__umodsi3>
   87c98:	8809883a 	mov	r4,r17
   87c9c:	a00b883a 	mov	r5,r20
   87ca0:	102d883a 	mov	r22,r2
   87ca4:	00895200 	call	89520 <__udivsi3>
   87ca8:	1009883a 	mov	r4,r2
   87cac:	a80b883a 	mov	r5,r21
   87cb0:	1025883a 	mov	r18,r2
   87cb4:	00895300 	call	89530 <__mulsi3>
   87cb8:	1009883a 	mov	r4,r2
   87cbc:	b00c943a 	slli	r6,r22,16
   87cc0:	9804d43a 	srli	r2,r19,16
   87cc4:	d8c00017 	ldw	r3,0(sp)
   87cc8:	308cb03a 	or	r6,r6,r2
   87ccc:	3100052e 	bgeu	r6,r4,87ce4 <__udivdi3+0x29c>
   87cd0:	340d883a 	add	r6,r6,r16
   87cd4:	90bfffc4 	addi	r2,r18,-1
   87cd8:	34000136 	bltu	r6,r16,87ce0 <__udivdi3+0x298>
   87cdc:	3100e836 	bltu	r6,r4,88080 <__udivdi3+0x638>
   87ce0:	1025883a 	mov	r18,r2
   87ce4:	3123c83a 	sub	r17,r6,r4
   87ce8:	8809883a 	mov	r4,r17
   87cec:	a00b883a 	mov	r5,r20
   87cf0:	d8c00015 	stw	r3,0(sp)
   87cf4:	00895280 	call	89528 <__umodsi3>
   87cf8:	102d883a 	mov	r22,r2
   87cfc:	8809883a 	mov	r4,r17
   87d00:	a00b883a 	mov	r5,r20
   87d04:	b02c943a 	slli	r22,r22,16
   87d08:	00895200 	call	89520 <__udivsi3>
   87d0c:	1009883a 	mov	r4,r2
   87d10:	a80b883a 	mov	r5,r21
   87d14:	9cffffcc 	andi	r19,r19,65535
   87d18:	1023883a 	mov	r17,r2
   87d1c:	b4e6b03a 	or	r19,r22,r19
   87d20:	00895300 	call	89530 <__mulsi3>
   87d24:	d8c00017 	ldw	r3,0(sp)
   87d28:	9880052e 	bgeu	r19,r2,87d40 <__udivdi3+0x2f8>
   87d2c:	9c27883a 	add	r19,r19,r16
   87d30:	893fffc4 	addi	r4,r17,-1
   87d34:	9c00aa36 	bltu	r19,r16,87fe0 <__udivdi3+0x598>
   87d38:	9880a92e 	bgeu	r19,r2,87fe0 <__udivdi3+0x598>
   87d3c:	8c7fff84 	addi	r17,r17,-2
   87d40:	9004943a 	slli	r2,r18,16
   87d44:	8884b03a 	or	r2,r17,r2
   87d48:	003faa06 	br	87bf4 <__udivdi3+0x1ac>
   87d4c:	0007883a 	mov	r3,zero
   87d50:	003fa706 	br	87bf0 <__udivdi3+0x1a8>
   87d54:	00803fc4 	movi	r2,255
   87d58:	11c0ae36 	bltu	r2,r7,88014 <__udivdi3+0x5cc>
   87d5c:	0007883a 	mov	r3,zero
   87d60:	000b883a 	mov	r5,zero
   87d64:	003f9606 	br	87bc0 <__udivdi3+0x178>
   87d68:	00804034 	movhi	r2,256
   87d6c:	10bfffc4 	addi	r2,r2,-1
   87d70:	1180ae36 	bltu	r2,r6,8802c <__udivdi3+0x5e4>
   87d74:	00800404 	movi	r2,16
   87d78:	1007883a 	mov	r3,r2
   87d7c:	003f4a06 	br	87aa8 <__udivdi3+0x60>
   87d80:	00803fc4 	movi	r2,255
   87d84:	1400af36 	bltu	r2,r16,88044 <__udivdi3+0x5fc>
   87d88:	0005883a 	mov	r2,zero
   87d8c:	0007883a 	mov	r3,zero
   87d90:	003fb006 	br	87c54 <__udivdi3+0x20c>
   87d94:	00800044 	movi	r2,1
   87d98:	003f9606 	br	87bf4 <__udivdi3+0x1ac>
   87d9c:	3c0e983a 	sll	r7,r7,r16
   87da0:	3086d83a 	srl	r3,r6,r2
   87da4:	88aed83a 	srl	r23,r17,r2
   87da8:	9084d83a 	srl	r2,r18,r2
   87dac:	38e6b03a 	or	r19,r7,r3
   87db0:	9828d43a 	srli	r20,r19,16
   87db4:	8c22983a 	sll	r17,r17,r16
   87db8:	b809883a 	mov	r4,r23
   87dbc:	a00b883a 	mov	r5,r20
   87dc0:	342a983a 	sll	r21,r6,r16
   87dc4:	88a2b03a 	or	r17,r17,r2
   87dc8:	00895280 	call	89528 <__umodsi3>
   87dcc:	b809883a 	mov	r4,r23
   87dd0:	a00b883a 	mov	r5,r20
   87dd4:	1039883a 	mov	fp,r2
   87dd8:	9dbfffcc 	andi	r22,r19,65535
   87ddc:	00895200 	call	89520 <__udivsi3>
   87de0:	1009883a 	mov	r4,r2
   87de4:	b00b883a 	mov	r5,r22
   87de8:	102f883a 	mov	r23,r2
   87dec:	00895300 	call	89530 <__mulsi3>
   87df0:	1009883a 	mov	r4,r2
   87df4:	e00e943a 	slli	r7,fp,16
   87df8:	8804d43a 	srli	r2,r17,16
   87dfc:	388eb03a 	or	r7,r7,r2
   87e00:	3900042e 	bgeu	r7,r4,87e14 <__udivdi3+0x3cc>
   87e04:	3ccf883a 	add	r7,r7,r19
   87e08:	b8bfffc4 	addi	r2,r23,-1
   87e0c:	3cc0942e 	bgeu	r7,r19,88060 <__udivdi3+0x618>
   87e10:	102f883a 	mov	r23,r2
   87e14:	3939c83a 	sub	fp,r7,r4
   87e18:	a00b883a 	mov	r5,r20
   87e1c:	e009883a 	mov	r4,fp
   87e20:	00895280 	call	89528 <__umodsi3>
   87e24:	a00b883a 	mov	r5,r20
   87e28:	e009883a 	mov	r4,fp
   87e2c:	d8800015 	stw	r2,0(sp)
   87e30:	00895200 	call	89520 <__udivsi3>
   87e34:	1009883a 	mov	r4,r2
   87e38:	b00b883a 	mov	r5,r22
   87e3c:	1029883a 	mov	r20,r2
   87e40:	00895300 	call	89530 <__mulsi3>
   87e44:	d8c00017 	ldw	r3,0(sp)
   87e48:	8c7fffcc 	andi	r17,r17,65535
   87e4c:	1806943a 	slli	r3,r3,16
   87e50:	1c46b03a 	or	r3,r3,r17
   87e54:	1880042e 	bgeu	r3,r2,87e68 <__udivdi3+0x420>
   87e58:	1cc7883a 	add	r3,r3,r19
   87e5c:	a13fffc4 	addi	r4,r20,-1
   87e60:	1cc07b2e 	bgeu	r3,r19,88050 <__udivdi3+0x608>
   87e64:	2029883a 	mov	r20,r4
   87e68:	b82e943a 	slli	r23,r23,16
   87e6c:	a822d43a 	srli	r17,r21,16
   87e70:	ad7fffcc 	andi	r21,r21,65535
   87e74:	a5e8b03a 	or	r20,r20,r23
   87e78:	a5bfffcc 	andi	r22,r20,65535
   87e7c:	b009883a 	mov	r4,r22
   87e80:	a80b883a 	mov	r5,r21
   87e84:	18afc83a 	sub	r23,r3,r2
   87e88:	a026d43a 	srli	r19,r20,16
   87e8c:	00895300 	call	89530 <__mulsi3>
   87e90:	b009883a 	mov	r4,r22
   87e94:	880b883a 	mov	r5,r17
   87e98:	1039883a 	mov	fp,r2
   87e9c:	00895300 	call	89530 <__mulsi3>
   87ea0:	a80b883a 	mov	r5,r21
   87ea4:	9809883a 	mov	r4,r19
   87ea8:	102d883a 	mov	r22,r2
   87eac:	00895300 	call	89530 <__mulsi3>
   87eb0:	9809883a 	mov	r4,r19
   87eb4:	880b883a 	mov	r5,r17
   87eb8:	102b883a 	mov	r21,r2
   87ebc:	00895300 	call	89530 <__mulsi3>
   87ec0:	100b883a 	mov	r5,r2
   87ec4:	e004d43a 	srli	r2,fp,16
   87ec8:	ad89883a 	add	r4,r21,r22
   87ecc:	2089883a 	add	r4,r4,r2
   87ed0:	2540022e 	bgeu	r4,r21,87edc <__udivdi3+0x494>
   87ed4:	00800074 	movhi	r2,1
   87ed8:	288b883a 	add	r5,r5,r2
   87edc:	2004d43a 	srli	r2,r4,16
   87ee0:	288b883a 	add	r5,r5,r2
   87ee4:	b9404536 	bltu	r23,r5,87ffc <__udivdi3+0x5b4>
   87ee8:	b9403f26 	beq	r23,r5,87fe8 <__udivdi3+0x5a0>
   87eec:	a005883a 	mov	r2,r20
   87ef0:	0007883a 	mov	r3,zero
   87ef4:	003f3f06 	br	87bf4 <__udivdi3+0x1ac>
   87ef8:	80a0983a 	sll	r16,r16,r2
   87efc:	88eed83a 	srl	r23,r17,r3
   87f00:	90c6d83a 	srl	r3,r18,r3
   87f04:	8028d43a 	srli	r20,r16,16
   87f08:	88a2983a 	sll	r17,r17,r2
   87f0c:	b809883a 	mov	r4,r23
   87f10:	a00b883a 	mov	r5,r20
   87f14:	88ecb03a 	or	r22,r17,r3
   87f18:	90a6983a 	sll	r19,r18,r2
   87f1c:	00895280 	call	89528 <__umodsi3>
   87f20:	b809883a 	mov	r4,r23
   87f24:	a00b883a 	mov	r5,r20
   87f28:	1023883a 	mov	r17,r2
   87f2c:	857fffcc 	andi	r21,r16,65535
   87f30:	00895200 	call	89520 <__udivsi3>
   87f34:	1009883a 	mov	r4,r2
   87f38:	a80b883a 	mov	r5,r21
   87f3c:	102f883a 	mov	r23,r2
   87f40:	00895300 	call	89530 <__mulsi3>
   87f44:	1009883a 	mov	r4,r2
   87f48:	880a943a 	slli	r5,r17,16
   87f4c:	b004d43a 	srli	r2,r22,16
   87f50:	288ab03a 	or	r5,r5,r2
   87f54:	2900062e 	bgeu	r5,r4,87f70 <__udivdi3+0x528>
   87f58:	2c0b883a 	add	r5,r5,r16
   87f5c:	b8bfffc4 	addi	r2,r23,-1
   87f60:	2c004536 	bltu	r5,r16,88078 <__udivdi3+0x630>
   87f64:	2900442e 	bgeu	r5,r4,88078 <__udivdi3+0x630>
   87f68:	bdffff84 	addi	r23,r23,-2
   87f6c:	2c0b883a 	add	r5,r5,r16
   87f70:	2925c83a 	sub	r18,r5,r4
   87f74:	9009883a 	mov	r4,r18
   87f78:	a00b883a 	mov	r5,r20
   87f7c:	00895280 	call	89528 <__umodsi3>
   87f80:	1023883a 	mov	r17,r2
   87f84:	9009883a 	mov	r4,r18
   87f88:	a00b883a 	mov	r5,r20
   87f8c:	8822943a 	slli	r17,r17,16
   87f90:	00895200 	call	89520 <__udivsi3>
   87f94:	1009883a 	mov	r4,r2
   87f98:	a80b883a 	mov	r5,r21
   87f9c:	b5bfffcc 	andi	r22,r22,65535
   87fa0:	1025883a 	mov	r18,r2
   87fa4:	8da2b03a 	or	r17,r17,r22
   87fa8:	00895300 	call	89530 <__mulsi3>
   87fac:	8880062e 	bgeu	r17,r2,87fc8 <__udivdi3+0x580>
   87fb0:	8c23883a 	add	r17,r17,r16
   87fb4:	90ffffc4 	addi	r3,r18,-1
   87fb8:	8c002d36 	bltu	r17,r16,88070 <__udivdi3+0x628>
   87fbc:	88802c2e 	bgeu	r17,r2,88070 <__udivdi3+0x628>
   87fc0:	94bfff84 	addi	r18,r18,-2
   87fc4:	8c23883a 	add	r17,r17,r16
   87fc8:	b806943a 	slli	r3,r23,16
   87fcc:	88a3c83a 	sub	r17,r17,r2
   87fd0:	90c6b03a 	or	r3,r18,r3
   87fd4:	003f2c06 	br	87c88 <__udivdi3+0x240>
   87fd8:	1823883a 	mov	r17,r3
   87fdc:	003eec06 	br	87b90 <__udivdi3+0x148>
   87fe0:	2023883a 	mov	r17,r4
   87fe4:	003f5606 	br	87d40 <__udivdi3+0x2f8>
   87fe8:	2008943a 	slli	r4,r4,16
   87fec:	9420983a 	sll	r16,r18,r16
   87ff0:	e73fffcc 	andi	fp,fp,65535
   87ff4:	2709883a 	add	r4,r4,fp
   87ff8:	813fbc2e 	bgeu	r16,r4,87eec <__udivdi3+0x4a4>
   87ffc:	a0bfffc4 	addi	r2,r20,-1
   88000:	0007883a 	mov	r3,zero
   88004:	003efb06 	br	87bf4 <__udivdi3+0x1ac>
   88008:	00c00604 	movi	r3,24
   8800c:	180b883a 	mov	r5,r3
   88010:	003eeb06 	br	87bc0 <__udivdi3+0x178>
   88014:	00c00204 	movi	r3,8
   88018:	180b883a 	mov	r5,r3
   8801c:	003ee806 	br	87bc0 <__udivdi3+0x178>
   88020:	00800604 	movi	r2,24
   88024:	1007883a 	mov	r3,r2
   88028:	003f0a06 	br	87c54 <__udivdi3+0x20c>
   8802c:	00800604 	movi	r2,24
   88030:	1007883a 	mov	r3,r2
   88034:	003e9c06 	br	87aa8 <__udivdi3+0x60>
   88038:	00800204 	movi	r2,8
   8803c:	1007883a 	mov	r3,r2
   88040:	003e9906 	br	87aa8 <__udivdi3+0x60>
   88044:	00800204 	movi	r2,8
   88048:	1007883a 	mov	r3,r2
   8804c:	003f0106 	br	87c54 <__udivdi3+0x20c>
   88050:	18bf842e 	bgeu	r3,r2,87e64 <__udivdi3+0x41c>
   88054:	a53fff84 	addi	r20,r20,-2
   88058:	1cc7883a 	add	r3,r3,r19
   8805c:	003f8206 	br	87e68 <__udivdi3+0x420>
   88060:	393f6b2e 	bgeu	r7,r4,87e10 <__udivdi3+0x3c8>
   88064:	bdffff84 	addi	r23,r23,-2
   88068:	3ccf883a 	add	r7,r7,r19
   8806c:	003f6906 	br	87e14 <__udivdi3+0x3cc>
   88070:	1825883a 	mov	r18,r3
   88074:	003fd406 	br	87fc8 <__udivdi3+0x580>
   88078:	102f883a 	mov	r23,r2
   8807c:	003fbc06 	br	87f70 <__udivdi3+0x528>
   88080:	94bfff84 	addi	r18,r18,-2
   88084:	340d883a 	add	r6,r6,r16
   88088:	003f1606 	br	87ce4 <__udivdi3+0x29c>
   8808c:	94bfff84 	addi	r18,r18,-2
   88090:	1c07883a 	add	r3,r3,r16
   88094:	003ea906 	br	87b3c <__udivdi3+0xf4>

00088098 <__umoddi3>:
   88098:	defff304 	addi	sp,sp,-52
   8809c:	dd000715 	stw	r20,28(sp)
   880a0:	dcc00615 	stw	r19,24(sp)
   880a4:	dc800515 	stw	r18,20(sp)
   880a8:	dc400415 	stw	r17,16(sp)
   880ac:	dc000315 	stw	r16,12(sp)
   880b0:	dfc00c15 	stw	ra,48(sp)
   880b4:	df000b15 	stw	fp,44(sp)
   880b8:	ddc00a15 	stw	r23,40(sp)
   880bc:	dd800915 	stw	r22,36(sp)
   880c0:	dd400815 	stw	r21,32(sp)
   880c4:	2025883a 	mov	r18,r4
   880c8:	2823883a 	mov	r17,r5
   880cc:	3021883a 	mov	r16,r6
   880d0:	2027883a 	mov	r19,r4
   880d4:	2829883a 	mov	r20,r5
   880d8:	38003a1e 	bne	r7,zero,881c4 <__umoddi3+0x12c>
   880dc:	2980522e 	bgeu	r5,r6,88228 <__umoddi3+0x190>
   880e0:	00bfffd4 	movui	r2,65535
   880e4:	1180a436 	bltu	r2,r6,88378 <__umoddi3+0x2e0>
   880e8:	00803fc4 	movi	r2,255
   880ec:	11816036 	bltu	r2,r6,88670 <__umoddi3+0x5d8>
   880f0:	0005883a 	mov	r2,zero
   880f4:	0009883a 	mov	r4,zero
   880f8:	3084d83a 	srl	r2,r6,r2
   880fc:	00c00274 	movhi	r3,9
   88100:	18f1ab04 	addi	r3,r3,-14676
   88104:	05400804 	movi	r21,32
   88108:	1885883a 	add	r2,r3,r2
   8810c:	10800003 	ldbu	r2,0(r2)
   88110:	1109883a 	add	r4,r2,r4
   88114:	a92bc83a 	sub	r21,r21,r4
   88118:	a8010e26 	beq	r21,zero,88554 <__umoddi3+0x4bc>
   8811c:	8d62983a 	sll	r17,r17,r21
   88120:	9108d83a 	srl	r4,r18,r4
   88124:	3560983a 	sll	r16,r6,r21
   88128:	9566983a 	sll	r19,r18,r21
   8812c:	8928b03a 	or	r20,r17,r4
   88130:	8022d43a 	srli	r17,r16,16
   88134:	a009883a 	mov	r4,r20
   88138:	84bfffcc 	andi	r18,r16,65535
   8813c:	880b883a 	mov	r5,r17
   88140:	00895280 	call	89528 <__umodsi3>
   88144:	a009883a 	mov	r4,r20
   88148:	880b883a 	mov	r5,r17
   8814c:	102d883a 	mov	r22,r2
   88150:	00895200 	call	89520 <__udivsi3>
   88154:	1009883a 	mov	r4,r2
   88158:	900b883a 	mov	r5,r18
   8815c:	00895300 	call	89530 <__mulsi3>
   88160:	1009883a 	mov	r4,r2
   88164:	b006943a 	slli	r3,r22,16
   88168:	9804d43a 	srli	r2,r19,16
   8816c:	1886b03a 	or	r3,r3,r2
   88170:	1900042e 	bgeu	r3,r4,88184 <__umoddi3+0xec>
   88174:	1c07883a 	add	r3,r3,r16
   88178:	1c000236 	bltu	r3,r16,88184 <__umoddi3+0xec>
   8817c:	1900012e 	bgeu	r3,r4,88184 <__umoddi3+0xec>
   88180:	1c07883a 	add	r3,r3,r16
   88184:	1929c83a 	sub	r20,r3,r4
   88188:	a009883a 	mov	r4,r20
   8818c:	880b883a 	mov	r5,r17
   88190:	00895280 	call	89528 <__umodsi3>
   88194:	102d883a 	mov	r22,r2
   88198:	a009883a 	mov	r4,r20
   8819c:	880b883a 	mov	r5,r17
   881a0:	b02c943a 	slli	r22,r22,16
   881a4:	00895200 	call	89520 <__udivsi3>
   881a8:	1009883a 	mov	r4,r2
   881ac:	900b883a 	mov	r5,r18
   881b0:	9cffffcc 	andi	r19,r19,65535
   881b4:	00895300 	call	89530 <__mulsi3>
   881b8:	b4e6b03a 	or	r19,r22,r19
   881bc:	9880572e 	bgeu	r19,r2,8831c <__umoddi3+0x284>
   881c0:	00005206 	br	8830c <__umoddi3+0x274>
   881c4:	29c05936 	bltu	r5,r7,8832c <__umoddi3+0x294>
   881c8:	00bfffd4 	movui	r2,65535
   881cc:	11c0652e 	bgeu	r2,r7,88364 <__umoddi3+0x2cc>
   881d0:	00804034 	movhi	r2,256
   881d4:	10bfffc4 	addi	r2,r2,-1
   881d8:	11c11936 	bltu	r2,r7,88640 <__umoddi3+0x5a8>
   881dc:	00c00404 	movi	r3,16
   881e0:	1827883a 	mov	r19,r3
   881e4:	38c6d83a 	srl	r3,r7,r3
   881e8:	01000274 	movhi	r4,9
   881ec:	2131ab04 	addi	r4,r4,-14676
   881f0:	04000804 	movi	r16,32
   881f4:	20c7883a 	add	r3,r4,r3
   881f8:	18800003 	ldbu	r2,0(r3)
   881fc:	14e7883a 	add	r19,r2,r19
   88200:	84e1c83a 	sub	r16,r16,r19
   88204:	8000671e 	bne	r16,zero,883a4 <__umoddi3+0x30c>
   88208:	3c400136 	bltu	r7,r17,88210 <__umoddi3+0x178>
   8820c:	91812536 	bltu	r18,r6,886a4 <__umoddi3+0x60c>
   88210:	9185c83a 	sub	r2,r18,r6
   88214:	89e3c83a 	sub	r17,r17,r7
   88218:	90a5803a 	cmpltu	r18,r18,r2
   8821c:	8ca9c83a 	sub	r20,r17,r18
   88220:	a007883a 	mov	r3,r20
   88224:	00004306 	br	88334 <__umoddi3+0x29c>
   88228:	3000041e 	bne	r6,zero,8823c <__umoddi3+0x1a4>
   8822c:	01000044 	movi	r4,1
   88230:	000b883a 	mov	r5,zero
   88234:	00895200 	call	89520 <__udivsi3>
   88238:	1021883a 	mov	r16,r2
   8823c:	00bfffd4 	movui	r2,65535
   88240:	1400532e 	bgeu	r2,r16,88390 <__umoddi3+0x2f8>
   88244:	00804034 	movhi	r2,256
   88248:	10bfffc4 	addi	r2,r2,-1
   8824c:	14010536 	bltu	r2,r16,88664 <__umoddi3+0x5cc>
   88250:	00800404 	movi	r2,16
   88254:	1007883a 	mov	r3,r2
   88258:	8084d83a 	srl	r2,r16,r2
   8825c:	01000274 	movhi	r4,9
   88260:	2131ab04 	addi	r4,r4,-14676
   88264:	05400804 	movi	r21,32
   88268:	2085883a 	add	r2,r4,r2
   8826c:	10800003 	ldbu	r2,0(r2)
   88270:	10c7883a 	add	r3,r2,r3
   88274:	a8ebc83a 	sub	r21,r21,r3
   88278:	a800b81e 	bne	r21,zero,8855c <__umoddi3+0x4c4>
   8827c:	8028d43a 	srli	r20,r16,16
   88280:	8c23c83a 	sub	r17,r17,r16
   88284:	85bfffcc 	andi	r22,r16,65535
   88288:	8809883a 	mov	r4,r17
   8828c:	a00b883a 	mov	r5,r20
   88290:	00895280 	call	89528 <__umodsi3>
   88294:	8809883a 	mov	r4,r17
   88298:	a00b883a 	mov	r5,r20
   8829c:	1025883a 	mov	r18,r2
   882a0:	00895200 	call	89520 <__udivsi3>
   882a4:	1009883a 	mov	r4,r2
   882a8:	b00b883a 	mov	r5,r22
   882ac:	00895300 	call	89530 <__mulsi3>
   882b0:	1009883a 	mov	r4,r2
   882b4:	9006943a 	slli	r3,r18,16
   882b8:	9804d43a 	srli	r2,r19,16
   882bc:	1886b03a 	or	r3,r3,r2
   882c0:	1900032e 	bgeu	r3,r4,882d0 <__umoddi3+0x238>
   882c4:	1c07883a 	add	r3,r3,r16
   882c8:	1c000136 	bltu	r3,r16,882d0 <__umoddi3+0x238>
   882cc:	1900f336 	bltu	r3,r4,8869c <__umoddi3+0x604>
   882d0:	1923c83a 	sub	r17,r3,r4
   882d4:	8809883a 	mov	r4,r17
   882d8:	a00b883a 	mov	r5,r20
   882dc:	00895280 	call	89528 <__umodsi3>
   882e0:	102f883a 	mov	r23,r2
   882e4:	8809883a 	mov	r4,r17
   882e8:	a00b883a 	mov	r5,r20
   882ec:	b82e943a 	slli	r23,r23,16
   882f0:	00895200 	call	89520 <__udivsi3>
   882f4:	1009883a 	mov	r4,r2
   882f8:	b00b883a 	mov	r5,r22
   882fc:	9cffffcc 	andi	r19,r19,65535
   88300:	00895300 	call	89530 <__mulsi3>
   88304:	bce6b03a 	or	r19,r23,r19
   88308:	9880042e 	bgeu	r19,r2,8831c <__umoddi3+0x284>
   8830c:	9c27883a 	add	r19,r19,r16
   88310:	9c000236 	bltu	r19,r16,8831c <__umoddi3+0x284>
   88314:	9880012e 	bgeu	r19,r2,8831c <__umoddi3+0x284>
   88318:	9c27883a 	add	r19,r19,r16
   8831c:	9885c83a 	sub	r2,r19,r2
   88320:	1544d83a 	srl	r2,r2,r21
   88324:	0007883a 	mov	r3,zero
   88328:	00000206 	br	88334 <__umoddi3+0x29c>
   8832c:	2005883a 	mov	r2,r4
   88330:	2807883a 	mov	r3,r5
   88334:	dfc00c17 	ldw	ra,48(sp)
   88338:	df000b17 	ldw	fp,44(sp)
   8833c:	ddc00a17 	ldw	r23,40(sp)
   88340:	dd800917 	ldw	r22,36(sp)
   88344:	dd400817 	ldw	r21,32(sp)
   88348:	dd000717 	ldw	r20,28(sp)
   8834c:	dcc00617 	ldw	r19,24(sp)
   88350:	dc800517 	ldw	r18,20(sp)
   88354:	dc400417 	ldw	r17,16(sp)
   88358:	dc000317 	ldw	r16,12(sp)
   8835c:	dec00d04 	addi	sp,sp,52
   88360:	f800283a 	ret
   88364:	00803fc4 	movi	r2,255
   88368:	11c0b236 	bltu	r2,r7,88634 <__umoddi3+0x59c>
   8836c:	0007883a 	mov	r3,zero
   88370:	0027883a 	mov	r19,zero
   88374:	003f9b06 	br	881e4 <__umoddi3+0x14c>
   88378:	00804034 	movhi	r2,256
   8837c:	10bfffc4 	addi	r2,r2,-1
   88380:	1180b236 	bltu	r2,r6,8864c <__umoddi3+0x5b4>
   88384:	00800404 	movi	r2,16
   88388:	1009883a 	mov	r4,r2
   8838c:	003f5a06 	br	880f8 <__umoddi3+0x60>
   88390:	00803fc4 	movi	r2,255
   88394:	1400b036 	bltu	r2,r16,88658 <__umoddi3+0x5c0>
   88398:	0005883a 	mov	r2,zero
   8839c:	0007883a 	mov	r3,zero
   883a0:	003fad06 	br	88258 <__umoddi3+0x1c0>
   883a4:	34c4d83a 	srl	r2,r6,r19
   883a8:	3c0e983a 	sll	r7,r7,r16
   883ac:	8cf8d83a 	srl	fp,r17,r19
   883b0:	8c22983a 	sll	r17,r17,r16
   883b4:	38a8b03a 	or	r20,r7,r2
   883b8:	a02ad43a 	srli	r21,r20,16
   883bc:	94c4d83a 	srl	r2,r18,r19
   883c0:	e009883a 	mov	r4,fp
   883c4:	a80b883a 	mov	r5,r21
   883c8:	342c983a 	sll	r22,r6,r16
   883cc:	88a2b03a 	or	r17,r17,r2
   883d0:	00895280 	call	89528 <__umodsi3>
   883d4:	e009883a 	mov	r4,fp
   883d8:	a80b883a 	mov	r5,r21
   883dc:	a5ffffcc 	andi	r23,r20,65535
   883e0:	d8800215 	stw	r2,8(sp)
   883e4:	00895200 	call	89520 <__udivsi3>
   883e8:	1009883a 	mov	r4,r2
   883ec:	b80b883a 	mov	r5,r23
   883f0:	1039883a 	mov	fp,r2
   883f4:	00895300 	call	89530 <__mulsi3>
   883f8:	d8c00217 	ldw	r3,8(sp)
   883fc:	1009883a 	mov	r4,r2
   88400:	8804d43a 	srli	r2,r17,16
   88404:	1806943a 	slli	r3,r3,16
   88408:	9424983a 	sll	r18,r18,r16
   8840c:	1886b03a 	or	r3,r3,r2
   88410:	1900042e 	bgeu	r3,r4,88424 <__umoddi3+0x38c>
   88414:	1d07883a 	add	r3,r3,r20
   88418:	e0bfffc4 	addi	r2,fp,-1
   8841c:	1d009b2e 	bgeu	r3,r20,8868c <__umoddi3+0x5f4>
   88420:	1039883a 	mov	fp,r2
   88424:	1907c83a 	sub	r3,r3,r4
   88428:	1809883a 	mov	r4,r3
   8842c:	a80b883a 	mov	r5,r21
   88430:	d8c00215 	stw	r3,8(sp)
   88434:	00895280 	call	89528 <__umodsi3>
   88438:	d8c00217 	ldw	r3,8(sp)
   8843c:	a80b883a 	mov	r5,r21
   88440:	d8800015 	stw	r2,0(sp)
   88444:	1809883a 	mov	r4,r3
   88448:	00895200 	call	89520 <__udivsi3>
   8844c:	1009883a 	mov	r4,r2
   88450:	b80b883a 	mov	r5,r23
   88454:	102b883a 	mov	r21,r2
   88458:	00895300 	call	89530 <__mulsi3>
   8845c:	d9c00017 	ldw	r7,0(sp)
   88460:	8c7fffcc 	andi	r17,r17,65535
   88464:	380e943a 	slli	r7,r7,16
   88468:	3c4eb03a 	or	r7,r7,r17
   8846c:	3880042e 	bgeu	r7,r2,88480 <__umoddi3+0x3e8>
   88470:	3d0f883a 	add	r7,r7,r20
   88474:	a8ffffc4 	addi	r3,r21,-1
   88478:	3d00802e 	bgeu	r7,r20,8867c <__umoddi3+0x5e4>
   8847c:	182b883a 	mov	r21,r3
   88480:	e038943a 	slli	fp,fp,16
   88484:	b010d43a 	srli	r8,r22,16
   88488:	b1bfffcc 	andi	r6,r22,65535
   8848c:	af2ab03a 	or	r21,r21,fp
   88490:	a82ed43a 	srli	r23,r21,16
   88494:	ad7fffcc 	andi	r21,r21,65535
   88498:	300b883a 	mov	r5,r6
   8849c:	a809883a 	mov	r4,r21
   884a0:	38a3c83a 	sub	r17,r7,r2
   884a4:	d9800115 	stw	r6,4(sp)
   884a8:	da000015 	stw	r8,0(sp)
   884ac:	00895300 	call	89530 <__mulsi3>
   884b0:	da000017 	ldw	r8,0(sp)
   884b4:	a809883a 	mov	r4,r21
   884b8:	1039883a 	mov	fp,r2
   884bc:	400b883a 	mov	r5,r8
   884c0:	da000215 	stw	r8,8(sp)
   884c4:	00895300 	call	89530 <__mulsi3>
   884c8:	d9800117 	ldw	r6,4(sp)
   884cc:	b809883a 	mov	r4,r23
   884d0:	d8800015 	stw	r2,0(sp)
   884d4:	300b883a 	mov	r5,r6
   884d8:	00895300 	call	89530 <__mulsi3>
   884dc:	d8c00217 	ldw	r3,8(sp)
   884e0:	b809883a 	mov	r4,r23
   884e4:	102b883a 	mov	r21,r2
   884e8:	180b883a 	mov	r5,r3
   884ec:	00895300 	call	89530 <__mulsi3>
   884f0:	d9c00017 	ldw	r7,0(sp)
   884f4:	1007883a 	mov	r3,r2
   884f8:	e004d43a 	srli	r2,fp,16
   884fc:	a9c9883a 	add	r4,r21,r7
   88500:	2089883a 	add	r4,r4,r2
   88504:	2540022e 	bgeu	r4,r21,88510 <__umoddi3+0x478>
   88508:	00800074 	movhi	r2,1
   8850c:	1887883a 	add	r3,r3,r2
   88510:	2004d43a 	srli	r2,r4,16
   88514:	2008943a 	slli	r4,r4,16
   88518:	e73fffcc 	andi	fp,fp,65535
   8851c:	1887883a 	add	r3,r3,r2
   88520:	2709883a 	add	r4,r4,fp
   88524:	88c03d36 	bltu	r17,r3,8861c <__umoddi3+0x584>
   88528:	88c06126 	beq	r17,r3,886b0 <__umoddi3+0x618>
   8852c:	88c7c83a 	sub	r3,r17,r3
   88530:	202d883a 	mov	r22,r4
   88534:	95adc83a 	sub	r22,r18,r22
   88538:	95a5803a 	cmpltu	r18,r18,r22
   8853c:	1c87c83a 	sub	r3,r3,r18
   88540:	1cc4983a 	sll	r2,r3,r19
   88544:	b42cd83a 	srl	r22,r22,r16
   88548:	1c06d83a 	srl	r3,r3,r16
   8854c:	1584b03a 	or	r2,r2,r22
   88550:	003f7806 	br	88334 <__umoddi3+0x29c>
   88554:	002b883a 	mov	r21,zero
   88558:	003ef506 	br	88130 <__umoddi3+0x98>
   8855c:	8560983a 	sll	r16,r16,r21
   88560:	88e6d83a 	srl	r19,r17,r3
   88564:	90c6d83a 	srl	r3,r18,r3
   88568:	8028d43a 	srli	r20,r16,16
   8856c:	8d62983a 	sll	r17,r17,r21
   88570:	9809883a 	mov	r4,r19
   88574:	a00b883a 	mov	r5,r20
   88578:	88eeb03a 	or	r23,r17,r3
   8857c:	00895280 	call	89528 <__umodsi3>
   88580:	9809883a 	mov	r4,r19
   88584:	a00b883a 	mov	r5,r20
   88588:	1023883a 	mov	r17,r2
   8858c:	85bfffcc 	andi	r22,r16,65535
   88590:	00895200 	call	89520 <__udivsi3>
   88594:	1009883a 	mov	r4,r2
   88598:	b00b883a 	mov	r5,r22
   8859c:	00895300 	call	89530 <__mulsi3>
   885a0:	1007883a 	mov	r3,r2
   885a4:	8808943a 	slli	r4,r17,16
   885a8:	b804d43a 	srli	r2,r23,16
   885ac:	9566983a 	sll	r19,r18,r21
   885b0:	2088b03a 	or	r4,r4,r2
   885b4:	20c0042e 	bgeu	r4,r3,885c8 <__umoddi3+0x530>
   885b8:	2409883a 	add	r4,r4,r16
   885bc:	24000236 	bltu	r4,r16,885c8 <__umoddi3+0x530>
   885c0:	20c0012e 	bgeu	r4,r3,885c8 <__umoddi3+0x530>
   885c4:	2409883a 	add	r4,r4,r16
   885c8:	20e5c83a 	sub	r18,r4,r3
   885cc:	9009883a 	mov	r4,r18
   885d0:	a00b883a 	mov	r5,r20
   885d4:	00895280 	call	89528 <__umodsi3>
   885d8:	1023883a 	mov	r17,r2
   885dc:	9009883a 	mov	r4,r18
   885e0:	a00b883a 	mov	r5,r20
   885e4:	8822943a 	slli	r17,r17,16
   885e8:	00895200 	call	89520 <__udivsi3>
   885ec:	1009883a 	mov	r4,r2
   885f0:	b00b883a 	mov	r5,r22
   885f4:	bdffffcc 	andi	r23,r23,65535
   885f8:	00895300 	call	89530 <__mulsi3>
   885fc:	8de2b03a 	or	r17,r17,r23
   88600:	8880042e 	bgeu	r17,r2,88614 <__umoddi3+0x57c>
   88604:	8c23883a 	add	r17,r17,r16
   88608:	8c000236 	bltu	r17,r16,88614 <__umoddi3+0x57c>
   8860c:	8880012e 	bgeu	r17,r2,88614 <__umoddi3+0x57c>
   88610:	8c23883a 	add	r17,r17,r16
   88614:	88a3c83a 	sub	r17,r17,r2
   88618:	003f1b06 	br	88288 <__umoddi3+0x1f0>
   8861c:	25adc83a 	sub	r22,r4,r22
   88620:	1d07c83a 	sub	r3,r3,r20
   88624:	2589803a 	cmpltu	r4,r4,r22
   88628:	1907c83a 	sub	r3,r3,r4
   8862c:	88c7c83a 	sub	r3,r17,r3
   88630:	003fc006 	br	88534 <__umoddi3+0x49c>
   88634:	00c00204 	movi	r3,8
   88638:	1827883a 	mov	r19,r3
   8863c:	003ee906 	br	881e4 <__umoddi3+0x14c>
   88640:	00c00604 	movi	r3,24
   88644:	1827883a 	mov	r19,r3
   88648:	003ee606 	br	881e4 <__umoddi3+0x14c>
   8864c:	00800604 	movi	r2,24
   88650:	1009883a 	mov	r4,r2
   88654:	003ea806 	br	880f8 <__umoddi3+0x60>
   88658:	00800204 	movi	r2,8
   8865c:	1007883a 	mov	r3,r2
   88660:	003efd06 	br	88258 <__umoddi3+0x1c0>
   88664:	00800604 	movi	r2,24
   88668:	1007883a 	mov	r3,r2
   8866c:	003efa06 	br	88258 <__umoddi3+0x1c0>
   88670:	00800204 	movi	r2,8
   88674:	1009883a 	mov	r4,r2
   88678:	003e9f06 	br	880f8 <__umoddi3+0x60>
   8867c:	38bf7f2e 	bgeu	r7,r2,8847c <__umoddi3+0x3e4>
   88680:	ad7fff84 	addi	r21,r21,-2
   88684:	3d0f883a 	add	r7,r7,r20
   88688:	003f7d06 	br	88480 <__umoddi3+0x3e8>
   8868c:	193f642e 	bgeu	r3,r4,88420 <__umoddi3+0x388>
   88690:	e73fff84 	addi	fp,fp,-2
   88694:	1d07883a 	add	r3,r3,r20
   88698:	003f6206 	br	88424 <__umoddi3+0x38c>
   8869c:	1c07883a 	add	r3,r3,r16
   886a0:	003f0b06 	br	882d0 <__umoddi3+0x238>
   886a4:	9005883a 	mov	r2,r18
   886a8:	a007883a 	mov	r3,r20
   886ac:	003f2106 	br	88334 <__umoddi3+0x29c>
   886b0:	913fda36 	bltu	r18,r4,8861c <__umoddi3+0x584>
   886b4:	202d883a 	mov	r22,r4
   886b8:	0007883a 	mov	r3,zero
   886bc:	003f9d06 	br	88534 <__umoddi3+0x49c>

000886c0 <_fpadd_parts>:
   886c0:	2005883a 	mov	r2,r4
   886c4:	21000017 	ldw	r4,0(r4)
   886c8:	01c00044 	movi	r7,1
   886cc:	3900622e 	bgeu	r7,r4,88858 <_fpadd_parts+0x198>
   886d0:	28c00017 	ldw	r3,0(r5)
   886d4:	38c05f2e 	bgeu	r7,r3,88854 <_fpadd_parts+0x194>
   886d8:	01c00104 	movi	r7,4
   886dc:	21c0c626 	beq	r4,r7,889f8 <_fpadd_parts+0x338>
   886e0:	19c05c26 	beq	r3,r7,88854 <_fpadd_parts+0x194>
   886e4:	01c00084 	movi	r7,2
   886e8:	19c06b26 	beq	r3,r7,88898 <_fpadd_parts+0x1d8>
   886ec:	21c05926 	beq	r4,r7,88854 <_fpadd_parts+0x194>
   886f0:	11c00217 	ldw	r7,8(r2)
   886f4:	2ac00217 	ldw	r11,8(r5)
   886f8:	13000317 	ldw	r12,12(r2)
   886fc:	13400417 	ldw	r13,16(r2)
   88700:	3ac9c83a 	sub	r4,r7,r11
   88704:	2a000317 	ldw	r8,12(r5)
   88708:	2a400417 	ldw	r9,16(r5)
   8870c:	2015883a 	mov	r10,r4
   88710:	20007516 	blt	r4,zero,888e8 <_fpadd_parts+0x228>
   88714:	00c00fc4 	movi	r3,63
   88718:	1a805016 	blt	r3,r10,8885c <_fpadd_parts+0x19c>
   8871c:	0100870e 	bge	zero,r4,8893c <_fpadd_parts+0x27c>
   88720:	50fff804 	addi	r3,r10,-32
   88724:	18009916 	blt	r3,zero,8898c <_fpadd_parts+0x2cc>
   88728:	48d6d83a 	srl	r11,r9,r3
   8872c:	001d883a 	mov	r14,zero
   88730:	18009e16 	blt	r3,zero,889ac <_fpadd_parts+0x2ec>
   88734:	01000044 	movi	r4,1
   88738:	20c6983a 	sll	r3,r4,r3
   8873c:	0015883a 	mov	r10,zero
   88740:	513fffc4 	addi	r4,r10,-1
   88744:	2295403a 	cmpgeu	r10,r4,r10
   88748:	1a87c83a 	sub	r3,r3,r10
   8874c:	1a52703a 	and	r9,r3,r9
   88750:	2210703a 	and	r8,r4,r8
   88754:	4250b03a 	or	r8,r8,r9
   88758:	4010c03a 	cmpne	r8,r8,zero
   8875c:	42d0b03a 	or	r8,r8,r11
   88760:	7013883a 	mov	r9,r14
   88764:	11000117 	ldw	r4,4(r2)
   88768:	28800117 	ldw	r2,4(r5)
   8876c:	20804126 	beq	r4,r2,88874 <_fpadd_parts+0x1b4>
   88770:	20006326 	beq	r4,zero,88900 <_fpadd_parts+0x240>
   88774:	4305c83a 	sub	r2,r8,r12
   88778:	4091803a 	cmpltu	r8,r8,r2
   8877c:	4b47c83a 	sub	r3,r9,r13
   88780:	1a07c83a 	sub	r3,r3,r8
   88784:	18006316 	blt	r3,zero,88914 <_fpadd_parts+0x254>
   88788:	30000115 	stw	zero,4(r6)
   8878c:	31c00215 	stw	r7,8(r6)
   88790:	30800315 	stw	r2,12(r6)
   88794:	30c00415 	stw	r3,16(r6)
   88798:	11ffffc4 	addi	r7,r2,-1
   8879c:	388b403a 	cmpgeu	r5,r7,r2
   887a0:	194bc83a 	sub	r5,r3,r5
   887a4:	01040034 	movhi	r4,4096
   887a8:	213fffc4 	addi	r4,r4,-1
   887ac:	21401736 	bltu	r4,r5,8880c <_fpadd_parts+0x14c>
   887b0:	29008226 	beq	r5,r4,889bc <_fpadd_parts+0x2fc>
   887b4:	31400217 	ldw	r5,8(r6)
   887b8:	02840034 	movhi	r10,4096
   887bc:	52bfffc4 	addi	r10,r10,-1
   887c0:	033fff84 	movi	r12,-2
   887c4:	297fffc4 	addi	r5,r5,-1
   887c8:	00000106 	br	887d0 <_fpadd_parts+0x110>
   887cc:	3a804a26 	beq	r7,r10,888f8 <_fpadd_parts+0x238>
   887d0:	1089883a 	add	r4,r2,r2
   887d4:	2091803a 	cmpltu	r8,r4,r2
   887d8:	18c7883a 	add	r3,r3,r3
   887dc:	227fffc4 	addi	r9,r4,-1
   887e0:	40d1883a 	add	r8,r8,r3
   887e4:	490f403a 	cmpgeu	r7,r9,r4
   887e8:	41cfc83a 	sub	r7,r8,r7
   887ec:	2817883a 	mov	r11,r5
   887f0:	2005883a 	mov	r2,r4
   887f4:	4007883a 	mov	r3,r8
   887f8:	297fffc4 	addi	r5,r5,-1
   887fc:	51fff32e 	bgeu	r10,r7,887cc <_fpadd_parts+0x10c>
   88800:	31000315 	stw	r4,12(r6)
   88804:	32000415 	stw	r8,16(r6)
   88808:	32c00215 	stw	r11,8(r6)
   8880c:	010000c4 	movi	r4,3
   88810:	31000015 	stw	r4,0(r6)
   88814:	01080034 	movhi	r4,8192
   88818:	213fffc4 	addi	r4,r4,-1
   8881c:	20c00b2e 	bgeu	r4,r3,8884c <_fpadd_parts+0x18c>
   88820:	180e97fa 	slli	r7,r3,31
   88824:	1008d07a 	srli	r4,r2,1
   88828:	31400217 	ldw	r5,8(r6)
   8882c:	1806d07a 	srli	r3,r3,1
   88830:	1080004c 	andi	r2,r2,1
   88834:	3908b03a 	or	r4,r7,r4
   88838:	1108b03a 	or	r4,r2,r4
   8883c:	29400044 	addi	r5,r5,1
   88840:	31000315 	stw	r4,12(r6)
   88844:	30c00415 	stw	r3,16(r6)
   88848:	31400215 	stw	r5,8(r6)
   8884c:	3005883a 	mov	r2,r6
   88850:	f800283a 	ret
   88854:	2805883a 	mov	r2,r5
   88858:	f800283a 	ret
   8885c:	59c01e0e 	bge	r11,r7,888d8 <_fpadd_parts+0x218>
   88860:	11000117 	ldw	r4,4(r2)
   88864:	28800117 	ldw	r2,4(r5)
   88868:	0011883a 	mov	r8,zero
   8886c:	0013883a 	mov	r9,zero
   88870:	20bfbf1e 	bne	r4,r2,88770 <_fpadd_parts+0xb0>
   88874:	4305883a 	add	r2,r8,r12
   88878:	1207803a 	cmpltu	r3,r2,r8
   8887c:	4b53883a 	add	r9,r9,r13
   88880:	1a47883a 	add	r3,r3,r9
   88884:	31000115 	stw	r4,4(r6)
   88888:	31c00215 	stw	r7,8(r6)
   8888c:	30800315 	stw	r2,12(r6)
   88890:	30c00415 	stw	r3,16(r6)
   88894:	003fdd06 	br	8880c <_fpadd_parts+0x14c>
   88898:	20ffef1e 	bne	r4,r3,88858 <_fpadd_parts+0x198>
   8889c:	31000015 	stw	r4,0(r6)
   888a0:	10c00117 	ldw	r3,4(r2)
   888a4:	30c00115 	stw	r3,4(r6)
   888a8:	10c00217 	ldw	r3,8(r2)
   888ac:	11000117 	ldw	r4,4(r2)
   888b0:	29400117 	ldw	r5,4(r5)
   888b4:	30c00215 	stw	r3,8(r6)
   888b8:	10c00317 	ldw	r3,12(r2)
   888bc:	2908703a 	and	r4,r5,r4
   888c0:	30c00315 	stw	r3,12(r6)
   888c4:	10c00417 	ldw	r3,16(r2)
   888c8:	31000115 	stw	r4,4(r6)
   888cc:	3005883a 	mov	r2,r6
   888d0:	30c00415 	stw	r3,16(r6)
   888d4:	f800283a 	ret
   888d8:	580f883a 	mov	r7,r11
   888dc:	0019883a 	mov	r12,zero
   888e0:	001b883a 	mov	r13,zero
   888e4:	003f9f06 	br	88764 <_fpadd_parts+0xa4>
   888e8:	0115c83a 	sub	r10,zero,r4
   888ec:	00c00fc4 	movi	r3,63
   888f0:	1abfda16 	blt	r3,r10,8885c <_fpadd_parts+0x19c>
   888f4:	003f8906 	br	8871c <_fpadd_parts+0x5c>
   888f8:	627fb52e 	bgeu	r12,r9,887d0 <_fpadd_parts+0x110>
   888fc:	003fc006 	br	88800 <_fpadd_parts+0x140>
   88900:	6205c83a 	sub	r2,r12,r8
   88904:	6099803a 	cmpltu	r12,r12,r2
   88908:	6a47c83a 	sub	r3,r13,r9
   8890c:	1b07c83a 	sub	r3,r3,r12
   88910:	183f9d0e 	bge	r3,zero,88788 <_fpadd_parts+0xc8>
   88914:	0085c83a 	sub	r2,zero,r2
   88918:	1008c03a 	cmpne	r4,r2,zero
   8891c:	00c7c83a 	sub	r3,zero,r3
   88920:	1907c83a 	sub	r3,r3,r4
   88924:	01000044 	movi	r4,1
   88928:	31000115 	stw	r4,4(r6)
   8892c:	31c00215 	stw	r7,8(r6)
   88930:	30800315 	stw	r2,12(r6)
   88934:	30c00415 	stw	r3,16(r6)
   88938:	003f9706 	br	88798 <_fpadd_parts+0xd8>
   8893c:	203f8926 	beq	r4,zero,88764 <_fpadd_parts+0xa4>
   88940:	50fff804 	addi	r3,r10,-32
   88944:	3a8f883a 	add	r7,r7,r10
   88948:	18002316 	blt	r3,zero,889d8 <_fpadd_parts+0x318>
   8894c:	68d6d83a 	srl	r11,r13,r3
   88950:	001d883a 	mov	r14,zero
   88954:	18001c16 	blt	r3,zero,889c8 <_fpadd_parts+0x308>
   88958:	01000044 	movi	r4,1
   8895c:	20c6983a 	sll	r3,r4,r3
   88960:	0015883a 	mov	r10,zero
   88964:	513fffc4 	addi	r4,r10,-1
   88968:	2295403a 	cmpgeu	r10,r4,r10
   8896c:	1a87c83a 	sub	r3,r3,r10
   88970:	1b5a703a 	and	r13,r3,r13
   88974:	2318703a 	and	r12,r4,r12
   88978:	6358b03a 	or	r12,r12,r13
   8897c:	6018c03a 	cmpne	r12,r12,zero
   88980:	62d8b03a 	or	r12,r12,r11
   88984:	701b883a 	mov	r13,r14
   88988:	003f7606 	br	88764 <_fpadd_parts+0xa4>
   8898c:	4808907a 	slli	r4,r9,1
   88990:	02c007c4 	movi	r11,31
   88994:	5a97c83a 	sub	r11,r11,r10
   88998:	22c8983a 	sll	r4,r4,r11
   8899c:	4296d83a 	srl	r11,r8,r10
   889a0:	4a9cd83a 	srl	r14,r9,r10
   889a4:	22d6b03a 	or	r11,r4,r11
   889a8:	003f6106 	br	88730 <_fpadd_parts+0x70>
   889ac:	00c00044 	movi	r3,1
   889b0:	1a94983a 	sll	r10,r3,r10
   889b4:	0007883a 	mov	r3,zero
   889b8:	003f6106 	br	88740 <_fpadd_parts+0x80>
   889bc:	013fff84 	movi	r4,-2
   889c0:	21ff7c2e 	bgeu	r4,r7,887b4 <_fpadd_parts+0xf4>
   889c4:	003f9106 	br	8880c <_fpadd_parts+0x14c>
   889c8:	00c00044 	movi	r3,1
   889cc:	1a94983a 	sll	r10,r3,r10
   889d0:	0007883a 	mov	r3,zero
   889d4:	003fe306 	br	88964 <_fpadd_parts+0x2a4>
   889d8:	6816907a 	slli	r11,r13,1
   889dc:	010007c4 	movi	r4,31
   889e0:	2289c83a 	sub	r4,r4,r10
   889e4:	5908983a 	sll	r4,r11,r4
   889e8:	6296d83a 	srl	r11,r12,r10
   889ec:	6a9cd83a 	srl	r14,r13,r10
   889f0:	22d6b03a 	or	r11,r4,r11
   889f4:	003fd706 	br	88954 <_fpadd_parts+0x294>
   889f8:	193f971e 	bne	r3,r4,88858 <_fpadd_parts+0x198>
   889fc:	11000117 	ldw	r4,4(r2)
   88a00:	28c00117 	ldw	r3,4(r5)
   88a04:	20ff9426 	beq	r4,r3,88858 <_fpadd_parts+0x198>
   88a08:	00800274 	movhi	r2,9
   88a0c:	10b1a604 	addi	r2,r2,-14696
   88a10:	f800283a 	ret

00088a14 <__adddf3>:
   88a14:	deffec04 	addi	sp,sp,-80
   88a18:	d9001115 	stw	r4,68(sp)
   88a1c:	d9401215 	stw	r5,72(sp)
   88a20:	d9001104 	addi	r4,sp,68
   88a24:	d9400a04 	addi	r5,sp,40
   88a28:	dfc01315 	stw	ra,76(sp)
   88a2c:	d9c01015 	stw	r7,64(sp)
   88a30:	d9800f15 	stw	r6,60(sp)
   88a34:	00899380 	call	89938 <__unpack_d>
   88a38:	d9000f04 	addi	r4,sp,60
   88a3c:	d9400504 	addi	r5,sp,20
   88a40:	00899380 	call	89938 <__unpack_d>
   88a44:	d9000a04 	addi	r4,sp,40
   88a48:	d9400504 	addi	r5,sp,20
   88a4c:	d80d883a 	mov	r6,sp
   88a50:	00886c00 	call	886c0 <_fpadd_parts>
   88a54:	1009883a 	mov	r4,r2
   88a58:	00897140 	call	89714 <__pack_d>
   88a5c:	dfc01317 	ldw	ra,76(sp)
   88a60:	dec01404 	addi	sp,sp,80
   88a64:	f800283a 	ret

00088a68 <__subdf3>:
   88a68:	deffec04 	addi	sp,sp,-80
   88a6c:	d9001115 	stw	r4,68(sp)
   88a70:	d9401215 	stw	r5,72(sp)
   88a74:	d9001104 	addi	r4,sp,68
   88a78:	d9400a04 	addi	r5,sp,40
   88a7c:	dfc01315 	stw	ra,76(sp)
   88a80:	d9c01015 	stw	r7,64(sp)
   88a84:	d9800f15 	stw	r6,60(sp)
   88a88:	00899380 	call	89938 <__unpack_d>
   88a8c:	d9000f04 	addi	r4,sp,60
   88a90:	d9400504 	addi	r5,sp,20
   88a94:	00899380 	call	89938 <__unpack_d>
   88a98:	d8800617 	ldw	r2,24(sp)
   88a9c:	d9000a04 	addi	r4,sp,40
   88aa0:	d9400504 	addi	r5,sp,20
   88aa4:	d80d883a 	mov	r6,sp
   88aa8:	1080005c 	xori	r2,r2,1
   88aac:	d8800615 	stw	r2,24(sp)
   88ab0:	00886c00 	call	886c0 <_fpadd_parts>
   88ab4:	1009883a 	mov	r4,r2
   88ab8:	00897140 	call	89714 <__pack_d>
   88abc:	dfc01317 	ldw	ra,76(sp)
   88ac0:	dec01404 	addi	sp,sp,80
   88ac4:	f800283a 	ret

00088ac8 <__muldf3>:
   88ac8:	deffe404 	addi	sp,sp,-112
   88acc:	d9001115 	stw	r4,68(sp)
   88ad0:	d9401215 	stw	r5,72(sp)
   88ad4:	d9001104 	addi	r4,sp,68
   88ad8:	d9400a04 	addi	r5,sp,40
   88adc:	dfc01b15 	stw	ra,108(sp)
   88ae0:	d9800f15 	stw	r6,60(sp)
   88ae4:	d9c01015 	stw	r7,64(sp)
   88ae8:	ddc01a15 	stw	r23,104(sp)
   88aec:	dd801915 	stw	r22,100(sp)
   88af0:	dd401815 	stw	r21,96(sp)
   88af4:	dd001715 	stw	r20,92(sp)
   88af8:	dcc01615 	stw	r19,88(sp)
   88afc:	dc801515 	stw	r18,84(sp)
   88b00:	dc401415 	stw	r17,80(sp)
   88b04:	dc001315 	stw	r16,76(sp)
   88b08:	00899380 	call	89938 <__unpack_d>
   88b0c:	d9000f04 	addi	r4,sp,60
   88b10:	d9400504 	addi	r5,sp,20
   88b14:	00899380 	call	89938 <__unpack_d>
   88b18:	d8c00a17 	ldw	r3,40(sp)
   88b1c:	00800044 	movi	r2,1
   88b20:	10c01136 	bltu	r2,r3,88b68 <__muldf3+0xa0>
   88b24:	d8c00b17 	ldw	r3,44(sp)
   88b28:	d8800617 	ldw	r2,24(sp)
   88b2c:	d9000a04 	addi	r4,sp,40
   88b30:	1884c03a 	cmpne	r2,r3,r2
   88b34:	d8800b15 	stw	r2,44(sp)
   88b38:	00897140 	call	89714 <__pack_d>
   88b3c:	dfc01b17 	ldw	ra,108(sp)
   88b40:	ddc01a17 	ldw	r23,104(sp)
   88b44:	dd801917 	ldw	r22,100(sp)
   88b48:	dd401817 	ldw	r21,96(sp)
   88b4c:	dd001717 	ldw	r20,92(sp)
   88b50:	dcc01617 	ldw	r19,88(sp)
   88b54:	dc801517 	ldw	r18,84(sp)
   88b58:	dc401417 	ldw	r17,80(sp)
   88b5c:	dc001317 	ldw	r16,76(sp)
   88b60:	dec01c04 	addi	sp,sp,112
   88b64:	f800283a 	ret
   88b68:	d9000517 	ldw	r4,20(sp)
   88b6c:	11000636 	bltu	r2,r4,88b88 <__muldf3+0xc0>
   88b70:	d8800617 	ldw	r2,24(sp)
   88b74:	d8c00b17 	ldw	r3,44(sp)
   88b78:	d9000504 	addi	r4,sp,20
   88b7c:	1884c03a 	cmpne	r2,r3,r2
   88b80:	d8800615 	stw	r2,24(sp)
   88b84:	003fec06 	br	88b38 <__muldf3+0x70>
   88b88:	00800104 	movi	r2,4
   88b8c:	1880051e 	bne	r3,r2,88ba4 <__muldf3+0xdc>
   88b90:	00800084 	movi	r2,2
   88b94:	20bfe31e 	bne	r4,r2,88b24 <__muldf3+0x5c>
   88b98:	01000274 	movhi	r4,9
   88b9c:	2131a604 	addi	r4,r4,-14696
   88ba0:	003fe506 	br	88b38 <__muldf3+0x70>
   88ba4:	2080031e 	bne	r4,r2,88bb4 <__muldf3+0xec>
   88ba8:	00800084 	movi	r2,2
   88bac:	18bffa26 	beq	r3,r2,88b98 <__muldf3+0xd0>
   88bb0:	003fef06 	br	88b70 <__muldf3+0xa8>
   88bb4:	00800084 	movi	r2,2
   88bb8:	18bfda26 	beq	r3,r2,88b24 <__muldf3+0x5c>
   88bbc:	20bfec26 	beq	r4,r2,88b70 <__muldf3+0xa8>
   88bc0:	dc000d17 	ldw	r16,52(sp)
   88bc4:	dd000817 	ldw	r20,32(sp)
   88bc8:	dc800917 	ldw	r18,36(sp)
   88bcc:	8009883a 	mov	r4,r16
   88bd0:	000b883a 	mov	r5,zero
   88bd4:	a00d883a 	mov	r6,r20
   88bd8:	000f883a 	mov	r7,zero
   88bdc:	00895580 	call	89558 <__muldi3>
   88be0:	dc400e17 	ldw	r17,56(sp)
   88be4:	9009883a 	mov	r4,r18
   88be8:	800d883a 	mov	r6,r16
   88bec:	000b883a 	mov	r5,zero
   88bf0:	000f883a 	mov	r7,zero
   88bf4:	102f883a 	mov	r23,r2
   88bf8:	1827883a 	mov	r19,r3
   88bfc:	00895580 	call	89558 <__muldi3>
   88c00:	900d883a 	mov	r6,r18
   88c04:	8809883a 	mov	r4,r17
   88c08:	000b883a 	mov	r5,zero
   88c0c:	000f883a 	mov	r7,zero
   88c10:	102b883a 	mov	r21,r2
   88c14:	1821883a 	mov	r16,r3
   88c18:	00895580 	call	89558 <__muldi3>
   88c1c:	8809883a 	mov	r4,r17
   88c20:	000b883a 	mov	r5,zero
   88c24:	a00d883a 	mov	r6,r20
   88c28:	000f883a 	mov	r7,zero
   88c2c:	102d883a 	mov	r22,r2
   88c30:	1825883a 	mov	r18,r3
   88c34:	00895580 	call	89558 <__muldi3>
   88c38:	154b883a 	add	r5,r2,r21
   88c3c:	2889803a 	cmpltu	r4,r5,r2
   88c40:	1c07883a 	add	r3,r3,r16
   88c44:	20c9883a 	add	r4,r4,r3
   88c48:	24004b36 	bltu	r4,r16,88d78 <__muldf3+0x2b0>
   88c4c:	8100011e 	bne	r16,r4,88c54 <__muldf3+0x18c>
   88c50:	2d404936 	bltu	r5,r21,88d78 <__muldf3+0x2b0>
   88c54:	0011883a 	mov	r8,zero
   88c58:	0007883a 	mov	r3,zero
   88c5c:	2ccb883a 	add	r5,r5,r19
   88c60:	b80d883a 	mov	r6,r23
   88c64:	2cc0012e 	bgeu	r5,r19,88c6c <__muldf3+0x1a4>
   88c68:	02000044 	movi	r8,1
   88c6c:	258f883a 	add	r7,r4,r22
   88c70:	3909803a 	cmpltu	r4,r7,r4
   88c74:	da400c17 	ldw	r9,48(sp)
   88c78:	2489883a 	add	r4,r4,r18
   88c7c:	d8800717 	ldw	r2,28(sp)
   88c80:	20c9883a 	add	r4,r4,r3
   88c84:	da800b17 	ldw	r10,44(sp)
   88c88:	d8c00617 	ldw	r3,24(sp)
   88c8c:	3a11883a 	add	r8,r7,r8
   88c90:	4885883a 	add	r2,r9,r2
   88c94:	50c6c03a 	cmpne	r3,r10,r3
   88c98:	41cf803a 	cmpltu	r7,r8,r7
   88c9c:	12400104 	addi	r9,r2,4
   88ca0:	d8c00115 	stw	r3,4(sp)
   88ca4:	3909883a 	add	r4,r7,r4
   88ca8:	da400215 	stw	r9,8(sp)
   88cac:	03480034 	movhi	r13,8192
   88cb0:	6b7fffc4 	addi	r13,r13,-1
   88cb4:	4007883a 	mov	r3,r8
   88cb8:	6900102e 	bgeu	r13,r4,88cfc <__muldf3+0x234>
   88cbc:	10800144 	addi	r2,r2,5
   88cc0:	180ed07a 	srli	r7,r3,1
   88cc4:	18c0004c 	andi	r3,r3,1
   88cc8:	201097fa 	slli	r8,r4,31
   88ccc:	281697fa 	slli	r11,r5,31
   88cd0:	2008d07a 	srli	r4,r4,1
   88cd4:	3014d07a 	srli	r10,r6,1
   88cd8:	2812d07a 	srli	r9,r5,1
   88cdc:	1019883a 	mov	r12,r2
   88ce0:	18000226 	beq	r3,zero,88cec <__muldf3+0x224>
   88ce4:	5a8cb03a 	or	r6,r11,r10
   88ce8:	49600034 	orhi	r5,r9,32768
   88cec:	41c6b03a 	or	r3,r8,r7
   88cf0:	10800044 	addi	r2,r2,1
   88cf4:	693ff236 	bltu	r13,r4,88cc0 <__muldf3+0x1f8>
   88cf8:	db000215 	stw	r12,8(sp)
   88cfc:	03440034 	movhi	r13,4096
   88d00:	6b7fffc4 	addi	r13,r13,-1
   88d04:	69001336 	bltu	r13,r4,88d54 <__muldf3+0x28c>
   88d08:	d8800217 	ldw	r2,8(sp)
   88d0c:	10bfffc4 	addi	r2,r2,-1
   88d10:	18d3883a 	add	r9,r3,r3
   88d14:	48c7803a 	cmpltu	r3,r9,r3
   88d18:	2109883a 	add	r4,r4,r4
   88d1c:	190f883a 	add	r7,r3,r4
   88d20:	3191883a 	add	r8,r6,r6
   88d24:	4197803a 	cmpltu	r11,r8,r6
   88d28:	2955883a 	add	r10,r5,r5
   88d2c:	1019883a 	mov	r12,r2
   88d30:	4807883a 	mov	r3,r9
   88d34:	3809883a 	mov	r4,r7
   88d38:	2800010e 	bge	r5,zero,88d40 <__muldf3+0x278>
   88d3c:	48c00054 	ori	r3,r9,1
   88d40:	400d883a 	mov	r6,r8
   88d44:	5a8b883a 	add	r5,r11,r10
   88d48:	10bfffc4 	addi	r2,r2,-1
   88d4c:	69fff02e 	bgeu	r13,r7,88d10 <__muldf3+0x248>
   88d50:	db000215 	stw	r12,8(sp)
   88d54:	18803fcc 	andi	r2,r3,255
   88d58:	01c02004 	movi	r7,128
   88d5c:	11c00926 	beq	r2,r7,88d84 <__muldf3+0x2bc>
   88d60:	008000c4 	movi	r2,3
   88d64:	d9000415 	stw	r4,16(sp)
   88d68:	d8c00315 	stw	r3,12(sp)
   88d6c:	d8800015 	stw	r2,0(sp)
   88d70:	d809883a 	mov	r4,sp
   88d74:	003f7006 	br	88b38 <__muldf3+0x70>
   88d78:	0011883a 	mov	r8,zero
   88d7c:	00c00044 	movi	r3,1
   88d80:	003fb606 	br	88c5c <__muldf3+0x194>
   88d84:	19c0400c 	andi	r7,r3,256
   88d88:	383ff51e 	bne	r7,zero,88d60 <__muldf3+0x298>
   88d8c:	314ab03a 	or	r5,r6,r5
   88d90:	283ff326 	beq	r5,zero,88d60 <__muldf3+0x298>
   88d94:	1885883a 	add	r2,r3,r2
   88d98:	10cb803a 	cmpltu	r5,r2,r3
   88d9c:	00ffc004 	movi	r3,-256
   88da0:	10c6703a 	and	r3,r2,r3
   88da4:	2909883a 	add	r4,r5,r4
   88da8:	003fed06 	br	88d60 <__muldf3+0x298>

00088dac <__divdf3>:
   88dac:	defff104 	addi	sp,sp,-60
   88db0:	d9000c15 	stw	r4,48(sp)
   88db4:	d9400d15 	stw	r5,52(sp)
   88db8:	d9000c04 	addi	r4,sp,48
   88dbc:	d9400504 	addi	r5,sp,20
   88dc0:	dfc00e15 	stw	ra,56(sp)
   88dc4:	d9800a15 	stw	r6,40(sp)
   88dc8:	d9c00b15 	stw	r7,44(sp)
   88dcc:	00899380 	call	89938 <__unpack_d>
   88dd0:	d9000a04 	addi	r4,sp,40
   88dd4:	d80b883a 	mov	r5,sp
   88dd8:	00899380 	call	89938 <__unpack_d>
   88ddc:	d8c00517 	ldw	r3,20(sp)
   88de0:	00800044 	movi	r2,1
   88de4:	10c00536 	bltu	r2,r3,88dfc <__divdf3+0x50>
   88de8:	d9000504 	addi	r4,sp,20
   88dec:	00897140 	call	89714 <__pack_d>
   88df0:	dfc00e17 	ldw	ra,56(sp)
   88df4:	dec00f04 	addi	sp,sp,60
   88df8:	f800283a 	ret
   88dfc:	d9000017 	ldw	r4,0(sp)
   88e00:	11000536 	bltu	r2,r4,88e18 <__divdf3+0x6c>
   88e04:	d809883a 	mov	r4,sp
   88e08:	00897140 	call	89714 <__pack_d>
   88e0c:	dfc00e17 	ldw	ra,56(sp)
   88e10:	dec00f04 	addi	sp,sp,60
   88e14:	f800283a 	ret
   88e18:	d9800617 	ldw	r6,24(sp)
   88e1c:	d9400117 	ldw	r5,4(sp)
   88e20:	00800104 	movi	r2,4
   88e24:	314af03a 	xor	r5,r6,r5
   88e28:	d9400615 	stw	r5,24(sp)
   88e2c:	18800226 	beq	r3,r2,88e38 <__divdf3+0x8c>
   88e30:	01400084 	movi	r5,2
   88e34:	1940041e 	bne	r3,r5,88e48 <__divdf3+0x9c>
   88e38:	193feb1e 	bne	r3,r4,88de8 <__divdf3+0x3c>
   88e3c:	01000274 	movhi	r4,9
   88e40:	2131a604 	addi	r4,r4,-14696
   88e44:	003fe906 	br	88dec <__divdf3+0x40>
   88e48:	20803326 	beq	r4,r2,88f18 <__divdf3+0x16c>
   88e4c:	21403726 	beq	r4,r5,88f2c <__divdf3+0x180>
   88e50:	d8800217 	ldw	r2,8(sp)
   88e54:	d9000717 	ldw	r4,28(sp)
   88e58:	d8c00917 	ldw	r3,36(sp)
   88e5c:	da000417 	ldw	r8,16(sp)
   88e60:	2089c83a 	sub	r4,r4,r2
   88e64:	d9000715 	stw	r4,28(sp)
   88e68:	d8800817 	ldw	r2,32(sp)
   88e6c:	dbc00317 	ldw	r15,12(sp)
   88e70:	1a000236 	bltu	r3,r8,88e7c <__divdf3+0xd0>
   88e74:	40c0081e 	bne	r8,r3,88e98 <__divdf3+0xec>
   88e78:	13c0072e 	bgeu	r2,r15,88e98 <__divdf3+0xec>
   88e7c:	108b883a 	add	r5,r2,r2
   88e80:	288d803a 	cmpltu	r6,r5,r2
   88e84:	18c7883a 	add	r3,r3,r3
   88e88:	213fffc4 	addi	r4,r4,-1
   88e8c:	2805883a 	mov	r2,r5
   88e90:	30c7883a 	add	r3,r6,r3
   88e94:	d9000715 	stw	r4,28(sp)
   88e98:	01400f44 	movi	r5,61
   88e9c:	000f883a 	mov	r7,zero
   88ea0:	01040034 	movhi	r4,4096
   88ea4:	0019883a 	mov	r12,zero
   88ea8:	001b883a 	mov	r13,zero
   88eac:	201697fa 	slli	r11,r4,31
   88eb0:	3814d07a 	srli	r10,r7,1
   88eb4:	297fffc4 	addi	r5,r5,-1
   88eb8:	1a000936 	bltu	r3,r8,88ee0 <__divdf3+0x134>
   88ebc:	13cdc83a 	sub	r6,r2,r15
   88ec0:	1193803a 	cmpltu	r9,r2,r6
   88ec4:	1a1dc83a 	sub	r14,r3,r8
   88ec8:	40c0011e 	bne	r8,r3,88ed0 <__divdf3+0x124>
   88ecc:	13c00436 	bltu	r2,r15,88ee0 <__divdf3+0x134>
   88ed0:	3005883a 	mov	r2,r6
   88ed4:	7247c83a 	sub	r3,r14,r9
   88ed8:	61d8b03a 	or	r12,r12,r7
   88edc:	691ab03a 	or	r13,r13,r4
   88ee0:	108d883a 	add	r6,r2,r2
   88ee4:	3093803a 	cmpltu	r9,r6,r2
   88ee8:	18c7883a 	add	r3,r3,r3
   88eec:	5a8eb03a 	or	r7,r11,r10
   88ef0:	2008d07a 	srli	r4,r4,1
   88ef4:	3005883a 	mov	r2,r6
   88ef8:	48c7883a 	add	r3,r9,r3
   88efc:	283feb1e 	bne	r5,zero,88eac <__divdf3+0x100>
   88f00:	61003fcc 	andi	r4,r12,255
   88f04:	01402004 	movi	r5,128
   88f08:	21400b26 	beq	r4,r5,88f38 <__divdf3+0x18c>
   88f0c:	db000815 	stw	r12,32(sp)
   88f10:	db400915 	stw	r13,36(sp)
   88f14:	003fb406 	br	88de8 <__divdf3+0x3c>
   88f18:	d8000815 	stw	zero,32(sp)
   88f1c:	d8000915 	stw	zero,36(sp)
   88f20:	d8000715 	stw	zero,28(sp)
   88f24:	d9000504 	addi	r4,sp,20
   88f28:	003fb006 	br	88dec <__divdf3+0x40>
   88f2c:	d8800515 	stw	r2,20(sp)
   88f30:	d9000504 	addi	r4,sp,20
   88f34:	003fad06 	br	88dec <__divdf3+0x40>
   88f38:	6140400c 	andi	r5,r12,256
   88f3c:	283ff31e 	bne	r5,zero,88f0c <__divdf3+0x160>
   88f40:	30c4b03a 	or	r2,r6,r3
   88f44:	103ff126 	beq	r2,zero,88f0c <__divdf3+0x160>
   88f48:	6109883a 	add	r4,r12,r4
   88f4c:	2305803a 	cmpltu	r2,r4,r12
   88f50:	033fc004 	movi	r12,-256
   88f54:	2318703a 	and	r12,r4,r12
   88f58:	135b883a 	add	r13,r2,r13
   88f5c:	003feb06 	br	88f0c <__divdf3+0x160>

00088f60 <__eqdf2>:
   88f60:	defff104 	addi	sp,sp,-60
   88f64:	d9000c15 	stw	r4,48(sp)
   88f68:	d9400d15 	stw	r5,52(sp)
   88f6c:	d9000c04 	addi	r4,sp,48
   88f70:	d9400504 	addi	r5,sp,20
   88f74:	dfc00e15 	stw	ra,56(sp)
   88f78:	d9800a15 	stw	r6,40(sp)
   88f7c:	d9c00b15 	stw	r7,44(sp)
   88f80:	00899380 	call	89938 <__unpack_d>
   88f84:	d9000a04 	addi	r4,sp,40
   88f88:	d80b883a 	mov	r5,sp
   88f8c:	00899380 	call	89938 <__unpack_d>
   88f90:	d8c00517 	ldw	r3,20(sp)
   88f94:	00800044 	movi	r2,1
   88f98:	10c0052e 	bgeu	r2,r3,88fb0 <__eqdf2+0x50>
   88f9c:	d8c00017 	ldw	r3,0(sp)
   88fa0:	10c0032e 	bgeu	r2,r3,88fb0 <__eqdf2+0x50>
   88fa4:	d9000504 	addi	r4,sp,20
   88fa8:	d80b883a 	mov	r5,sp
   88fac:	0089a3c0 	call	89a3c <__fpcmp_parts_d>
   88fb0:	dfc00e17 	ldw	ra,56(sp)
   88fb4:	dec00f04 	addi	sp,sp,60
   88fb8:	f800283a 	ret

00088fbc <__nedf2>:
   88fbc:	defff104 	addi	sp,sp,-60
   88fc0:	d9000c15 	stw	r4,48(sp)
   88fc4:	d9400d15 	stw	r5,52(sp)
   88fc8:	d9000c04 	addi	r4,sp,48
   88fcc:	d9400504 	addi	r5,sp,20
   88fd0:	dfc00e15 	stw	ra,56(sp)
   88fd4:	d9800a15 	stw	r6,40(sp)
   88fd8:	d9c00b15 	stw	r7,44(sp)
   88fdc:	00899380 	call	89938 <__unpack_d>
   88fe0:	d9000a04 	addi	r4,sp,40
   88fe4:	d80b883a 	mov	r5,sp
   88fe8:	00899380 	call	89938 <__unpack_d>
   88fec:	d8c00517 	ldw	r3,20(sp)
   88ff0:	00800044 	movi	r2,1
   88ff4:	10c0052e 	bgeu	r2,r3,8900c <__nedf2+0x50>
   88ff8:	d8c00017 	ldw	r3,0(sp)
   88ffc:	10c0032e 	bgeu	r2,r3,8900c <__nedf2+0x50>
   89000:	d9000504 	addi	r4,sp,20
   89004:	d80b883a 	mov	r5,sp
   89008:	0089a3c0 	call	89a3c <__fpcmp_parts_d>
   8900c:	dfc00e17 	ldw	ra,56(sp)
   89010:	dec00f04 	addi	sp,sp,60
   89014:	f800283a 	ret

00089018 <__gtdf2>:
   89018:	defff104 	addi	sp,sp,-60
   8901c:	d9000c15 	stw	r4,48(sp)
   89020:	d9400d15 	stw	r5,52(sp)
   89024:	d9000c04 	addi	r4,sp,48
   89028:	d9400504 	addi	r5,sp,20
   8902c:	dfc00e15 	stw	ra,56(sp)
   89030:	d9800a15 	stw	r6,40(sp)
   89034:	d9c00b15 	stw	r7,44(sp)
   89038:	00899380 	call	89938 <__unpack_d>
   8903c:	d9000a04 	addi	r4,sp,40
   89040:	d80b883a 	mov	r5,sp
   89044:	00899380 	call	89938 <__unpack_d>
   89048:	d8c00517 	ldw	r3,20(sp)
   8904c:	00800044 	movi	r2,1
   89050:	10c0082e 	bgeu	r2,r3,89074 <__gtdf2+0x5c>
   89054:	d8c00017 	ldw	r3,0(sp)
   89058:	10c0062e 	bgeu	r2,r3,89074 <__gtdf2+0x5c>
   8905c:	d9000504 	addi	r4,sp,20
   89060:	d80b883a 	mov	r5,sp
   89064:	0089a3c0 	call	89a3c <__fpcmp_parts_d>
   89068:	dfc00e17 	ldw	ra,56(sp)
   8906c:	dec00f04 	addi	sp,sp,60
   89070:	f800283a 	ret
   89074:	00bfffc4 	movi	r2,-1
   89078:	003ffb06 	br	89068 <__gtdf2+0x50>

0008907c <__gedf2>:
   8907c:	defff104 	addi	sp,sp,-60
   89080:	d9000c15 	stw	r4,48(sp)
   89084:	d9400d15 	stw	r5,52(sp)
   89088:	d9000c04 	addi	r4,sp,48
   8908c:	d9400504 	addi	r5,sp,20
   89090:	dfc00e15 	stw	ra,56(sp)
   89094:	d9800a15 	stw	r6,40(sp)
   89098:	d9c00b15 	stw	r7,44(sp)
   8909c:	00899380 	call	89938 <__unpack_d>
   890a0:	d9000a04 	addi	r4,sp,40
   890a4:	d80b883a 	mov	r5,sp
   890a8:	00899380 	call	89938 <__unpack_d>
   890ac:	d8c00517 	ldw	r3,20(sp)
   890b0:	00800044 	movi	r2,1
   890b4:	10c0082e 	bgeu	r2,r3,890d8 <__gedf2+0x5c>
   890b8:	d8c00017 	ldw	r3,0(sp)
   890bc:	10c0062e 	bgeu	r2,r3,890d8 <__gedf2+0x5c>
   890c0:	d9000504 	addi	r4,sp,20
   890c4:	d80b883a 	mov	r5,sp
   890c8:	0089a3c0 	call	89a3c <__fpcmp_parts_d>
   890cc:	dfc00e17 	ldw	ra,56(sp)
   890d0:	dec00f04 	addi	sp,sp,60
   890d4:	f800283a 	ret
   890d8:	00bfffc4 	movi	r2,-1
   890dc:	003ffb06 	br	890cc <__gedf2+0x50>

000890e0 <__ltdf2>:
   890e0:	defff104 	addi	sp,sp,-60
   890e4:	d9000c15 	stw	r4,48(sp)
   890e8:	d9400d15 	stw	r5,52(sp)
   890ec:	d9000c04 	addi	r4,sp,48
   890f0:	d9400504 	addi	r5,sp,20
   890f4:	dfc00e15 	stw	ra,56(sp)
   890f8:	d9800a15 	stw	r6,40(sp)
   890fc:	d9c00b15 	stw	r7,44(sp)
   89100:	00899380 	call	89938 <__unpack_d>
   89104:	d9000a04 	addi	r4,sp,40
   89108:	d80b883a 	mov	r5,sp
   8910c:	00899380 	call	89938 <__unpack_d>
   89110:	d8c00517 	ldw	r3,20(sp)
   89114:	00800044 	movi	r2,1
   89118:	10c0052e 	bgeu	r2,r3,89130 <__ltdf2+0x50>
   8911c:	d8c00017 	ldw	r3,0(sp)
   89120:	10c0032e 	bgeu	r2,r3,89130 <__ltdf2+0x50>
   89124:	d9000504 	addi	r4,sp,20
   89128:	d80b883a 	mov	r5,sp
   8912c:	0089a3c0 	call	89a3c <__fpcmp_parts_d>
   89130:	dfc00e17 	ldw	ra,56(sp)
   89134:	dec00f04 	addi	sp,sp,60
   89138:	f800283a 	ret

0008913c <__floatsidf>:
   8913c:	2004d7fa 	srli	r2,r4,31
   89140:	defff904 	addi	sp,sp,-28
   89144:	00c000c4 	movi	r3,3
   89148:	dfc00615 	stw	ra,24(sp)
   8914c:	dc000515 	stw	r16,20(sp)
   89150:	d8c00015 	stw	r3,0(sp)
   89154:	d8800115 	stw	r2,4(sp)
   89158:	2000081e 	bne	r4,zero,8917c <__floatsidf+0x40>
   8915c:	00800084 	movi	r2,2
   89160:	d8800015 	stw	r2,0(sp)
   89164:	d809883a 	mov	r4,sp
   89168:	00897140 	call	89714 <__pack_d>
   8916c:	dfc00617 	ldw	ra,24(sp)
   89170:	dc000517 	ldw	r16,20(sp)
   89174:	dec00704 	addi	sp,sp,28
   89178:	f800283a 	ret
   8917c:	00c00f04 	movi	r3,60
   89180:	d8c00215 	stw	r3,8(sp)
   89184:	10000f1e 	bne	r2,zero,891c4 <__floatsidf+0x88>
   89188:	2021883a 	mov	r16,r4
   8918c:	8009883a 	mov	r4,r16
   89190:	00896680 	call	89668 <__clzsi2>
   89194:	11000744 	addi	r4,r2,29
   89198:	0100110e 	bge	zero,r4,891e0 <__floatsidf+0xa4>
   8919c:	10ffff44 	addi	r3,r2,-3
   891a0:	18001216 	blt	r3,zero,891ec <__floatsidf+0xb0>
   891a4:	80c6983a 	sll	r3,r16,r3
   891a8:	0009883a 	mov	r4,zero
   891ac:	014007c4 	movi	r5,31
   891b0:	2885c83a 	sub	r2,r5,r2
   891b4:	d9000315 	stw	r4,12(sp)
   891b8:	d8c00415 	stw	r3,16(sp)
   891bc:	d8800215 	stw	r2,8(sp)
   891c0:	003fe806 	br	89164 <__floatsidf+0x28>
   891c4:	00a00034 	movhi	r2,32768
   891c8:	20800e26 	beq	r4,r2,89204 <__floatsidf+0xc8>
   891cc:	0121c83a 	sub	r16,zero,r4
   891d0:	8009883a 	mov	r4,r16
   891d4:	00896680 	call	89668 <__clzsi2>
   891d8:	11000744 	addi	r4,r2,29
   891dc:	013fef16 	blt	zero,r4,8919c <__floatsidf+0x60>
   891e0:	dc000315 	stw	r16,12(sp)
   891e4:	d8000415 	stw	zero,16(sp)
   891e8:	003fde06 	br	89164 <__floatsidf+0x28>
   891ec:	800ad07a 	srli	r5,r16,1
   891f0:	00c007c4 	movi	r3,31
   891f4:	1907c83a 	sub	r3,r3,r4
   891f8:	28c6d83a 	srl	r3,r5,r3
   891fc:	8108983a 	sll	r4,r16,r4
   89200:	003fea06 	br	891ac <__floatsidf+0x70>
   89204:	0005883a 	mov	r2,zero
   89208:	00f07834 	movhi	r3,49632
   8920c:	003fd706 	br	8916c <__floatsidf+0x30>

00089210 <__fixdfsi>:
   89210:	defff804 	addi	sp,sp,-32
   89214:	d9000515 	stw	r4,20(sp)
   89218:	d9400615 	stw	r5,24(sp)
   8921c:	d9000504 	addi	r4,sp,20
   89220:	d80b883a 	mov	r5,sp
   89224:	dfc00715 	stw	ra,28(sp)
   89228:	00899380 	call	89938 <__unpack_d>
   8922c:	d8800017 	ldw	r2,0(sp)
   89230:	00c00084 	movi	r3,2
   89234:	10c01c26 	beq	r2,r3,892a8 <__fixdfsi+0x98>
   89238:	00c00044 	movi	r3,1
   8923c:	18801a2e 	bgeu	r3,r2,892a8 <__fixdfsi+0x98>
   89240:	00c00104 	movi	r3,4
   89244:	10c01126 	beq	r2,r3,8928c <__fixdfsi+0x7c>
   89248:	d8800217 	ldw	r2,8(sp)
   8924c:	10001616 	blt	r2,zero,892a8 <__fixdfsi+0x98>
   89250:	00c00784 	movi	r3,30
   89254:	18800d16 	blt	r3,r2,8928c <__fixdfsi+0x7c>
   89258:	00c00f04 	movi	r3,60
   8925c:	1885c83a 	sub	r2,r3,r2
   89260:	10fff804 	addi	r3,r2,-32
   89264:	d9400317 	ldw	r5,12(sp)
   89268:	d9000417 	ldw	r4,16(sp)
   8926c:	18001616 	blt	r3,zero,892c8 <__fixdfsi+0xb8>
   89270:	20c4d83a 	srl	r2,r4,r3
   89274:	d8c00117 	ldw	r3,4(sp)
   89278:	18000126 	beq	r3,zero,89280 <__fixdfsi+0x70>
   8927c:	0085c83a 	sub	r2,zero,r2
   89280:	dfc00717 	ldw	ra,28(sp)
   89284:	dec00804 	addi	sp,sp,32
   89288:	f800283a 	ret
   8928c:	d8800117 	ldw	r2,4(sp)
   89290:	1000091e 	bne	r2,zero,892b8 <__fixdfsi+0xa8>
   89294:	00a00034 	movhi	r2,32768
   89298:	10bfffc4 	addi	r2,r2,-1
   8929c:	dfc00717 	ldw	ra,28(sp)
   892a0:	dec00804 	addi	sp,sp,32
   892a4:	f800283a 	ret
   892a8:	0005883a 	mov	r2,zero
   892ac:	dfc00717 	ldw	ra,28(sp)
   892b0:	dec00804 	addi	sp,sp,32
   892b4:	f800283a 	ret
   892b8:	00a00034 	movhi	r2,32768
   892bc:	dfc00717 	ldw	ra,28(sp)
   892c0:	dec00804 	addi	sp,sp,32
   892c4:	f800283a 	ret
   892c8:	2008907a 	slli	r4,r4,1
   892cc:	018007c4 	movi	r6,31
   892d0:	308dc83a 	sub	r6,r6,r2
   892d4:	2188983a 	sll	r4,r4,r6
   892d8:	2884d83a 	srl	r2,r5,r2
   892dc:	2084b03a 	or	r2,r4,r2
   892e0:	003fe406 	br	89274 <__fixdfsi+0x64>

000892e4 <__floatunsidf>:
   892e4:	defff904 	addi	sp,sp,-28
   892e8:	dc000515 	stw	r16,20(sp)
   892ec:	dfc00615 	stw	ra,24(sp)
   892f0:	d8000115 	stw	zero,4(sp)
   892f4:	2021883a 	mov	r16,r4
   892f8:	20001726 	beq	r4,zero,89358 <__floatunsidf+0x74>
   892fc:	008000c4 	movi	r2,3
   89300:	d8800015 	stw	r2,0(sp)
   89304:	00800f04 	movi	r2,60
   89308:	d8800215 	stw	r2,8(sp)
   8930c:	00896680 	call	89668 <__clzsi2>
   89310:	10c00744 	addi	r3,r2,29
   89314:	18001816 	blt	r3,zero,89378 <__floatunsidf+0x94>
   89318:	18002d26 	beq	r3,zero,893d0 <__floatunsidf+0xec>
   8931c:	113fff44 	addi	r4,r2,-3
   89320:	20002e16 	blt	r4,zero,893dc <__floatunsidf+0xf8>
   89324:	8108983a 	sll	r4,r16,r4
   89328:	0021883a 	mov	r16,zero
   8932c:	014007c4 	movi	r5,31
   89330:	2885c83a 	sub	r2,r5,r2
   89334:	dc000315 	stw	r16,12(sp)
   89338:	d9000415 	stw	r4,16(sp)
   8933c:	d8800215 	stw	r2,8(sp)
   89340:	d809883a 	mov	r4,sp
   89344:	00897140 	call	89714 <__pack_d>
   89348:	dfc00617 	ldw	ra,24(sp)
   8934c:	dc000517 	ldw	r16,20(sp)
   89350:	dec00704 	addi	sp,sp,28
   89354:	f800283a 	ret
   89358:	00800084 	movi	r2,2
   8935c:	d809883a 	mov	r4,sp
   89360:	d8800015 	stw	r2,0(sp)
   89364:	00897140 	call	89714 <__pack_d>
   89368:	dfc00617 	ldw	ra,24(sp)
   8936c:	dc000517 	ldw	r16,20(sp)
   89370:	dec00704 	addi	sp,sp,28
   89374:	f800283a 	ret
   89378:	00c7c83a 	sub	r3,zero,r3
   8937c:	193ff804 	addi	r4,r3,-32
   89380:	20001c16 	blt	r4,zero,893f4 <__floatunsidf+0x110>
   89384:	000b883a 	mov	r5,zero
   89388:	2009d7fa 	srai	r4,r4,31
   8938c:	80c6d83a 	srl	r3,r16,r3
   89390:	297fffc4 	addi	r5,r5,-1
   89394:	2c20703a 	and	r16,r5,r16
   89398:	8020c03a 	cmpne	r16,r16,zero
   8939c:	1906703a 	and	r3,r3,r4
   893a0:	010007c4 	movi	r4,31
   893a4:	80c6b03a 	or	r3,r16,r3
   893a8:	2085c83a 	sub	r2,r4,r2
   893ac:	d809883a 	mov	r4,sp
   893b0:	d8c00315 	stw	r3,12(sp)
   893b4:	d8000415 	stw	zero,16(sp)
   893b8:	d8800215 	stw	r2,8(sp)
   893bc:	00897140 	call	89714 <__pack_d>
   893c0:	dfc00617 	ldw	ra,24(sp)
   893c4:	dc000517 	ldw	r16,20(sp)
   893c8:	dec00704 	addi	sp,sp,28
   893cc:	f800283a 	ret
   893d0:	dc000315 	stw	r16,12(sp)
   893d4:	d8000415 	stw	zero,16(sp)
   893d8:	003fd906 	br	89340 <__floatunsidf+0x5c>
   893dc:	800ad07a 	srli	r5,r16,1
   893e0:	010007c4 	movi	r4,31
   893e4:	20c9c83a 	sub	r4,r4,r3
   893e8:	2908d83a 	srl	r4,r5,r4
   893ec:	80e0983a 	sll	r16,r16,r3
   893f0:	003fce06 	br	8932c <__floatunsidf+0x48>
   893f4:	01400044 	movi	r5,1
   893f8:	28ca983a 	sll	r5,r5,r3
   893fc:	003fe206 	br	89388 <__floatunsidf+0xa4>

00089400 <udivmodsi4>:
   89400:	2005883a 	mov	r2,r4
   89404:	2900182e 	bgeu	r5,r4,89468 <udivmodsi4+0x68>
   89408:	28001716 	blt	r5,zero,89468 <udivmodsi4+0x68>
   8940c:	01000804 	movi	r4,32
   89410:	00c00044 	movi	r3,1
   89414:	00000206 	br	89420 <udivmodsi4+0x20>
   89418:	20001126 	beq	r4,zero,89460 <udivmodsi4+0x60>
   8941c:	28000516 	blt	r5,zero,89434 <udivmodsi4+0x34>
   89420:	294b883a 	add	r5,r5,r5
   89424:	213fffc4 	addi	r4,r4,-1
   89428:	18c7883a 	add	r3,r3,r3
   8942c:	28bffa36 	bltu	r5,r2,89418 <udivmodsi4+0x18>
   89430:	18000b26 	beq	r3,zero,89460 <udivmodsi4+0x60>
   89434:	0009883a 	mov	r4,zero
   89438:	11400236 	bltu	r2,r5,89444 <udivmodsi4+0x44>
   8943c:	1145c83a 	sub	r2,r2,r5
   89440:	20c8b03a 	or	r4,r4,r3
   89444:	1806d07a 	srli	r3,r3,1
   89448:	280ad07a 	srli	r5,r5,1
   8944c:	183ffa1e 	bne	r3,zero,89438 <udivmodsi4+0x38>
   89450:	3000021e 	bne	r6,zero,8945c <udivmodsi4+0x5c>
   89454:	2005883a 	mov	r2,r4
   89458:	f800283a 	ret
   8945c:	f800283a 	ret
   89460:	0009883a 	mov	r4,zero
   89464:	003ffa06 	br	89450 <udivmodsi4+0x50>
   89468:	00c00044 	movi	r3,1
   8946c:	0009883a 	mov	r4,zero
   89470:	003ff106 	br	89438 <udivmodsi4+0x38>

00089474 <__divsi3>:
   89474:	defffe04 	addi	sp,sp,-8
   89478:	dfc00115 	stw	ra,4(sp)
   8947c:	dc000015 	stw	r16,0(sp)
   89480:	20000a16 	blt	r4,zero,894ac <__divsi3+0x38>
   89484:	0021883a 	mov	r16,zero
   89488:	28000b16 	blt	r5,zero,894b8 <__divsi3+0x44>
   8948c:	000d883a 	mov	r6,zero
   89490:	00894000 	call	89400 <udivmodsi4>
   89494:	80000126 	beq	r16,zero,8949c <__divsi3+0x28>
   89498:	0085c83a 	sub	r2,zero,r2
   8949c:	dfc00117 	ldw	ra,4(sp)
   894a0:	dc000017 	ldw	r16,0(sp)
   894a4:	dec00204 	addi	sp,sp,8
   894a8:	f800283a 	ret
   894ac:	0109c83a 	sub	r4,zero,r4
   894b0:	04000044 	movi	r16,1
   894b4:	283ff50e 	bge	r5,zero,8948c <__divsi3+0x18>
   894b8:	014bc83a 	sub	r5,zero,r5
   894bc:	8400005c 	xori	r16,r16,1
   894c0:	003ff206 	br	8948c <__divsi3+0x18>

000894c4 <__modsi3>:
   894c4:	deffff04 	addi	sp,sp,-4
   894c8:	dfc00015 	stw	ra,0(sp)
   894cc:	20000516 	blt	r4,zero,894e4 <__modsi3+0x20>
   894d0:	28000c16 	blt	r5,zero,89504 <__modsi3+0x40>
   894d4:	01800044 	movi	r6,1
   894d8:	dfc00017 	ldw	ra,0(sp)
   894dc:	dec00104 	addi	sp,sp,4
   894e0:	00894001 	jmpi	89400 <udivmodsi4>
   894e4:	0109c83a 	sub	r4,zero,r4
   894e8:	28000b16 	blt	r5,zero,89518 <__modsi3+0x54>
   894ec:	01800044 	movi	r6,1
   894f0:	00894000 	call	89400 <udivmodsi4>
   894f4:	0085c83a 	sub	r2,zero,r2
   894f8:	dfc00017 	ldw	ra,0(sp)
   894fc:	dec00104 	addi	sp,sp,4
   89500:	f800283a 	ret
   89504:	014bc83a 	sub	r5,zero,r5
   89508:	01800044 	movi	r6,1
   8950c:	dfc00017 	ldw	ra,0(sp)
   89510:	dec00104 	addi	sp,sp,4
   89514:	00894001 	jmpi	89400 <udivmodsi4>
   89518:	014bc83a 	sub	r5,zero,r5
   8951c:	003ff306 	br	894ec <__modsi3+0x28>

00089520 <__udivsi3>:
   89520:	000d883a 	mov	r6,zero
   89524:	00894001 	jmpi	89400 <udivmodsi4>

00089528 <__umodsi3>:
   89528:	01800044 	movi	r6,1
   8952c:	00894001 	jmpi	89400 <udivmodsi4>

00089530 <__mulsi3>:
   89530:	0005883a 	mov	r2,zero
   89534:	20000726 	beq	r4,zero,89554 <__mulsi3+0x24>
   89538:	20c0004c 	andi	r3,r4,1
   8953c:	2008d07a 	srli	r4,r4,1
   89540:	18000126 	beq	r3,zero,89548 <__mulsi3+0x18>
   89544:	1145883a 	add	r2,r2,r5
   89548:	294b883a 	add	r5,r5,r5
   8954c:	203ffa1e 	bne	r4,zero,89538 <__mulsi3+0x8>
   89550:	f800283a 	ret
   89554:	f800283a 	ret

00089558 <__muldi3>:
   89558:	defff604 	addi	sp,sp,-40
   8955c:	dd400515 	stw	r21,20(sp)
   89560:	dd000415 	stw	r20,16(sp)
   89564:	257fffcc 	andi	r21,r4,65535
   89568:	353fffcc 	andi	r20,r6,65535
   8956c:	dcc00315 	stw	r19,12(sp)
   89570:	3026d43a 	srli	r19,r6,16
   89574:	dd800615 	stw	r22,24(sp)
   89578:	dc800215 	stw	r18,8(sp)
   8957c:	dc400115 	stw	r17,4(sp)
   89580:	2024d43a 	srli	r18,r4,16
   89584:	2023883a 	mov	r17,r4
   89588:	282d883a 	mov	r22,r5
   8958c:	a009883a 	mov	r4,r20
   89590:	a80b883a 	mov	r5,r21
   89594:	dfc00915 	stw	ra,36(sp)
   89598:	df000815 	stw	fp,32(sp)
   8959c:	ddc00715 	stw	r23,28(sp)
   895a0:	3839883a 	mov	fp,r7
   895a4:	dc000015 	stw	r16,0(sp)
   895a8:	3021883a 	mov	r16,r6
   895ac:	00895300 	call	89530 <__mulsi3>
   895b0:	a80b883a 	mov	r5,r21
   895b4:	9809883a 	mov	r4,r19
   895b8:	102f883a 	mov	r23,r2
   895bc:	00895300 	call	89530 <__mulsi3>
   895c0:	a009883a 	mov	r4,r20
   895c4:	900b883a 	mov	r5,r18
   895c8:	102b883a 	mov	r21,r2
   895cc:	00895300 	call	89530 <__mulsi3>
   895d0:	9809883a 	mov	r4,r19
   895d4:	900b883a 	mov	r5,r18
   895d8:	1029883a 	mov	r20,r2
   895dc:	00895300 	call	89530 <__mulsi3>
   895e0:	1007883a 	mov	r3,r2
   895e4:	b804d43a 	srli	r2,r23,16
   895e8:	a549883a 	add	r4,r20,r21
   895ec:	2089883a 	add	r4,r4,r2
   895f0:	2500022e 	bgeu	r4,r20,895fc <__muldi3+0xa4>
   895f4:	00800074 	movhi	r2,1
   895f8:	1887883a 	add	r3,r3,r2
   895fc:	200cd43a 	srli	r6,r4,16
   89600:	2004943a 	slli	r2,r4,16
   89604:	e00b883a 	mov	r5,fp
   89608:	8809883a 	mov	r4,r17
   8960c:	bdffffcc 	andi	r23,r23,65535
   89610:	19a3883a 	add	r17,r3,r6
   89614:	15ef883a 	add	r23,r2,r23
   89618:	00895300 	call	89530 <__mulsi3>
   8961c:	8009883a 	mov	r4,r16
   89620:	b00b883a 	mov	r5,r22
   89624:	1025883a 	mov	r18,r2
   89628:	00895300 	call	89530 <__mulsi3>
   8962c:	9085883a 	add	r2,r18,r2
   89630:	1447883a 	add	r3,r2,r17
   89634:	b805883a 	mov	r2,r23
   89638:	dfc00917 	ldw	ra,36(sp)
   8963c:	df000817 	ldw	fp,32(sp)
   89640:	ddc00717 	ldw	r23,28(sp)
   89644:	dd800617 	ldw	r22,24(sp)
   89648:	dd400517 	ldw	r21,20(sp)
   8964c:	dd000417 	ldw	r20,16(sp)
   89650:	dcc00317 	ldw	r19,12(sp)
   89654:	dc800217 	ldw	r18,8(sp)
   89658:	dc400117 	ldw	r17,4(sp)
   8965c:	dc000017 	ldw	r16,0(sp)
   89660:	dec00a04 	addi	sp,sp,40
   89664:	f800283a 	ret

00089668 <__clzsi2>:
   89668:	00bfffd4 	movui	r2,65535
   8966c:	11000b36 	bltu	r2,r4,8969c <__clzsi2+0x34>
   89670:	00803fc4 	movi	r2,255
   89674:	11001e2e 	bgeu	r2,r4,896f0 <__clzsi2+0x88>
   89678:	00c00204 	movi	r3,8
   8967c:	20c8d83a 	srl	r4,r4,r3
   89680:	00c00274 	movhi	r3,9
   89684:	18f1ab04 	addi	r3,r3,-14676
   89688:	00800604 	movi	r2,24
   8968c:	1909883a 	add	r4,r3,r4
   89690:	20c00003 	ldbu	r3,0(r4)
   89694:	10c5c83a 	sub	r2,r2,r3
   89698:	f800283a 	ret
   8969c:	00804034 	movhi	r2,256
   896a0:	10bfffc4 	addi	r2,r2,-1
   896a4:	11000936 	bltu	r2,r4,896cc <__clzsi2+0x64>
   896a8:	00800404 	movi	r2,16
   896ac:	1007883a 	mov	r3,r2
   896b0:	20c8d83a 	srl	r4,r4,r3
   896b4:	00c00274 	movhi	r3,9
   896b8:	18f1ab04 	addi	r3,r3,-14676
   896bc:	1909883a 	add	r4,r3,r4
   896c0:	20c00003 	ldbu	r3,0(r4)
   896c4:	10c5c83a 	sub	r2,r2,r3
   896c8:	f800283a 	ret
   896cc:	00c00604 	movi	r3,24
   896d0:	20c8d83a 	srl	r4,r4,r3
   896d4:	00c00274 	movhi	r3,9
   896d8:	18f1ab04 	addi	r3,r3,-14676
   896dc:	00800204 	movi	r2,8
   896e0:	1909883a 	add	r4,r3,r4
   896e4:	20c00003 	ldbu	r3,0(r4)
   896e8:	10c5c83a 	sub	r2,r2,r3
   896ec:	f800283a 	ret
   896f0:	0007883a 	mov	r3,zero
   896f4:	20c8d83a 	srl	r4,r4,r3
   896f8:	00c00274 	movhi	r3,9
   896fc:	18f1ab04 	addi	r3,r3,-14676
   89700:	00800804 	movi	r2,32
   89704:	1909883a 	add	r4,r3,r4
   89708:	20c00003 	ldbu	r3,0(r4)
   8970c:	10c5c83a 	sub	r2,r2,r3
   89710:	f800283a 	ret

00089714 <__pack_d>:
   89714:	20800017 	ldw	r2,0(r4)
   89718:	defff804 	addi	sp,sp,-32
   8971c:	dcc00315 	stw	r19,12(sp)
   89720:	dc800215 	stw	r18,8(sp)
   89724:	dfc00715 	stw	ra,28(sp)
   89728:	dd800615 	stw	r22,24(sp)
   8972c:	dd400515 	stw	r21,20(sp)
   89730:	dd000415 	stw	r20,16(sp)
   89734:	dc400115 	stw	r17,4(sp)
   89738:	dc000015 	stw	r16,0(sp)
   8973c:	04800044 	movi	r18,1
   89740:	24400317 	ldw	r17,12(r4)
   89744:	24000417 	ldw	r16,16(r4)
   89748:	24c00117 	ldw	r19,4(r4)
   8974c:	9080422e 	bgeu	r18,r2,89858 <__pack_d+0x144>
   89750:	00c00104 	movi	r3,4
   89754:	10c03c26 	beq	r2,r3,89848 <__pack_d+0x134>
   89758:	00c00084 	movi	r3,2
   8975c:	10c01926 	beq	r2,r3,897c4 <__pack_d+0xb0>
   89760:	8c04b03a 	or	r2,r17,r16
   89764:	10001726 	beq	r2,zero,897c4 <__pack_d+0xb0>
   89768:	21000217 	ldw	r4,8(r4)
   8976c:	00bf0084 	movi	r2,-1022
   89770:	20804016 	blt	r4,r2,89874 <__pack_d+0x160>
   89774:	0080ffc4 	movi	r2,1023
   89778:	11003316 	blt	r2,r4,89848 <__pack_d+0x134>
   8977c:	88803fcc 	andi	r2,r17,255
   89780:	00c02004 	movi	r3,128
   89784:	10c02926 	beq	r2,r3,8982c <__pack_d+0x118>
   89788:	88801fc4 	addi	r2,r17,127
   8978c:	1463803a 	cmpltu	r17,r2,r17
   89790:	8c21883a 	add	r16,r17,r16
   89794:	1023883a 	mov	r17,r2
   89798:	00880034 	movhi	r2,8192
   8979c:	10bfffc4 	addi	r2,r2,-1
   897a0:	14001c36 	bltu	r2,r16,89814 <__pack_d+0x100>
   897a4:	2100ffc4 	addi	r4,r4,1023
   897a8:	8006963a 	slli	r3,r16,24
   897ac:	8804d23a 	srli	r2,r17,8
   897b0:	8020913a 	slli	r16,r16,4
   897b4:	2101ffcc 	andi	r4,r4,2047
   897b8:	1884b03a 	or	r2,r3,r2
   897bc:	8020d33a 	srli	r16,r16,12
   897c0:	00000306 	br	897d0 <__pack_d+0xbc>
   897c4:	0009883a 	mov	r4,zero
   897c8:	0005883a 	mov	r2,zero
   897cc:	0021883a 	mov	r16,zero
   897d0:	2008953a 	slli	r4,r4,20
   897d4:	982697fa 	slli	r19,r19,31
   897d8:	00c00434 	movhi	r3,16
   897dc:	18ffffc4 	addi	r3,r3,-1
   897e0:	80e0703a 	and	r16,r16,r3
   897e4:	8106b03a 	or	r3,r16,r4
   897e8:	1cc6b03a 	or	r3,r3,r19
   897ec:	dfc00717 	ldw	ra,28(sp)
   897f0:	dd800617 	ldw	r22,24(sp)
   897f4:	dd400517 	ldw	r21,20(sp)
   897f8:	dd000417 	ldw	r20,16(sp)
   897fc:	dcc00317 	ldw	r19,12(sp)
   89800:	dc800217 	ldw	r18,8(sp)
   89804:	dc400117 	ldw	r17,4(sp)
   89808:	dc000017 	ldw	r16,0(sp)
   8980c:	dec00804 	addi	sp,sp,32
   89810:	f800283a 	ret
   89814:	800697fa 	slli	r3,r16,31
   89818:	8804d07a 	srli	r2,r17,1
   8981c:	21010004 	addi	r4,r4,1024
   89820:	8020d07a 	srli	r16,r16,1
   89824:	18a2b03a 	or	r17,r3,r2
   89828:	003fdf06 	br	897a8 <__pack_d+0x94>
   8982c:	88c0400c 	andi	r3,r17,256
   89830:	183fd926 	beq	r3,zero,89798 <__pack_d+0x84>
   89834:	8885883a 	add	r2,r17,r2
   89838:	1463803a 	cmpltu	r17,r2,r17
   8983c:	8c21883a 	add	r16,r17,r16
   89840:	1023883a 	mov	r17,r2
   89844:	003fd406 	br	89798 <__pack_d+0x84>
   89848:	0101ffc4 	movi	r4,2047
   8984c:	0005883a 	mov	r2,zero
   89850:	0021883a 	mov	r16,zero
   89854:	003fde06 	br	897d0 <__pack_d+0xbc>
   89858:	84000234 	orhi	r16,r16,8
   8985c:	00c00434 	movhi	r3,16
   89860:	18ffffc4 	addi	r3,r3,-1
   89864:	8805883a 	mov	r2,r17
   89868:	80e0703a 	and	r16,r16,r3
   8986c:	0101ffc4 	movi	r4,2047
   89870:	003fd706 	br	897d0 <__pack_d+0xbc>
   89874:	1129c83a 	sub	r20,r2,r4
   89878:	00800e04 	movi	r2,56
   8987c:	15002716 	blt	r2,r20,8991c <__pack_d+0x208>
   89880:	800b883a 	mov	r5,r16
   89884:	a00d883a 	mov	r6,r20
   89888:	8809883a 	mov	r4,r17
   8988c:	0089b0c0 	call	89b0c <__lshrdi3>
   89890:	9009883a 	mov	r4,r18
   89894:	000b883a 	mov	r5,zero
   89898:	a00d883a 	mov	r6,r20
   8989c:	102d883a 	mov	r22,r2
   898a0:	182b883a 	mov	r21,r3
   898a4:	0089b500 	call	89b50 <__ashldi3>
   898a8:	1009003a 	cmpeq	r4,r2,zero
   898ac:	1907c83a 	sub	r3,r3,r4
   898b0:	10bfffc4 	addi	r2,r2,-1
   898b4:	1c20703a 	and	r16,r3,r16
   898b8:	1444703a 	and	r2,r2,r17
   898bc:	1404b03a 	or	r2,r2,r16
   898c0:	1004c03a 	cmpne	r2,r2,zero
   898c4:	1584b03a 	or	r2,r2,r22
   898c8:	11003fcc 	andi	r4,r2,255
   898cc:	01402004 	movi	r5,128
   898d0:	a807883a 	mov	r3,r21
   898d4:	2140131e 	bne	r4,r5,89924 <__pack_d+0x210>
   898d8:	1140400c 	andi	r5,r2,256
   898dc:	28000426 	beq	r5,zero,898f0 <__pack_d+0x1dc>
   898e0:	1109883a 	add	r4,r2,r4
   898e4:	2085803a 	cmpltu	r2,r4,r2
   898e8:	1547883a 	add	r3,r2,r21
   898ec:	2005883a 	mov	r2,r4
   898f0:	1808963a 	slli	r4,r3,24
   898f4:	1004d23a 	srli	r2,r2,8
   898f8:	1820913a 	slli	r16,r3,4
   898fc:	01440034 	movhi	r5,4096
   89900:	297fffc4 	addi	r5,r5,-1
   89904:	2084b03a 	or	r2,r4,r2
   89908:	8020d33a 	srli	r16,r16,12
   8990c:	01000044 	movi	r4,1
   89910:	28ffaf36 	bltu	r5,r3,897d0 <__pack_d+0xbc>
   89914:	0009883a 	mov	r4,zero
   89918:	003fad06 	br	897d0 <__pack_d+0xbc>
   8991c:	0005883a 	mov	r2,zero
   89920:	0007883a 	mov	r3,zero
   89924:	11001fc4 	addi	r4,r2,127
   89928:	2085803a 	cmpltu	r2,r4,r2
   8992c:	10c7883a 	add	r3,r2,r3
   89930:	2005883a 	mov	r2,r4
   89934:	003fee06 	br	898f0 <__pack_d+0x1dc>

00089938 <__unpack_d>:
   89938:	21800117 	ldw	r6,4(r4)
   8993c:	20c00017 	ldw	r3,0(r4)
   89940:	3004d7fa 	srli	r2,r6,31
   89944:	3008d53a 	srli	r4,r6,20
   89948:	28800115 	stw	r2,4(r5)
   8994c:	2101ffcc 	andi	r4,r4,2047
   89950:	00800434 	movhi	r2,16
   89954:	10bfffc4 	addi	r2,r2,-1
   89958:	3084703a 	and	r2,r6,r2
   8995c:	20001a1e 	bne	r4,zero,899c8 <__unpack_d+0x90>
   89960:	1888b03a 	or	r4,r3,r2
   89964:	20002626 	beq	r4,zero,89a00 <__unpack_d+0xc8>
   89968:	1808d63a 	srli	r4,r3,24
   8996c:	1004923a 	slli	r2,r2,8
   89970:	01bf0084 	movi	r6,-1022
   89974:	29800215 	stw	r6,8(r5)
   89978:	2084b03a 	or	r2,r4,r2
   8997c:	010000c4 	movi	r4,3
   89980:	29000015 	stw	r4,0(r5)
   89984:	02040034 	movhi	r8,4096
   89988:	423fffc4 	addi	r8,r8,-1
   8998c:	1806923a 	slli	r3,r3,8
   89990:	40801836 	bltu	r8,r2,899f4 <__unpack_d+0xbc>
   89994:	013f0044 	movi	r4,-1023
   89998:	18cd883a 	add	r6,r3,r3
   8999c:	30c7803a 	cmpltu	r3,r6,r3
   899a0:	1085883a 	add	r2,r2,r2
   899a4:	1885883a 	add	r2,r3,r2
   899a8:	200f883a 	mov	r7,r4
   899ac:	3007883a 	mov	r3,r6
   899b0:	213fffc4 	addi	r4,r4,-1
   899b4:	40bff82e 	bgeu	r8,r2,89998 <__unpack_d+0x60>
   899b8:	29c00215 	stw	r7,8(r5)
   899bc:	28c00315 	stw	r3,12(r5)
   899c0:	28800415 	stw	r2,16(r5)
   899c4:	f800283a 	ret
   899c8:	01c1ffc4 	movi	r7,2047
   899cc:	21c00f26 	beq	r4,r7,89a0c <__unpack_d+0xd4>
   899d0:	180cd63a 	srli	r6,r3,24
   899d4:	1004923a 	slli	r2,r2,8
   899d8:	213f0044 	addi	r4,r4,-1023
   899dc:	1806923a 	slli	r3,r3,8
   899e0:	3084b03a 	or	r2,r6,r2
   899e4:	29000215 	stw	r4,8(r5)
   899e8:	010000c4 	movi	r4,3
   899ec:	10840034 	orhi	r2,r2,4096
   899f0:	29000015 	stw	r4,0(r5)
   899f4:	28c00315 	stw	r3,12(r5)
   899f8:	28800415 	stw	r2,16(r5)
   899fc:	f800283a 	ret
   89a00:	00800084 	movi	r2,2
   89a04:	28800015 	stw	r2,0(r5)
   89a08:	f800283a 	ret
   89a0c:	1888b03a 	or	r4,r3,r2
   89a10:	20000526 	beq	r4,zero,89a28 <__unpack_d+0xf0>
   89a14:	3180022c 	andhi	r6,r6,8
   89a18:	30000626 	beq	r6,zero,89a34 <__unpack_d+0xfc>
   89a1c:	01000044 	movi	r4,1
   89a20:	29000015 	stw	r4,0(r5)
   89a24:	003ff306 	br	899f4 <__unpack_d+0xbc>
   89a28:	00800104 	movi	r2,4
   89a2c:	28800015 	stw	r2,0(r5)
   89a30:	f800283a 	ret
   89a34:	28000015 	stw	zero,0(r5)
   89a38:	003fee06 	br	899f4 <__unpack_d+0xbc>

00089a3c <__fpcmp_parts_d>:
   89a3c:	20c00017 	ldw	r3,0(r4)
   89a40:	00800044 	movi	r2,1
   89a44:	10c0142e 	bgeu	r2,r3,89a98 <__fpcmp_parts_d+0x5c>
   89a48:	29800017 	ldw	r6,0(r5)
   89a4c:	1180122e 	bgeu	r2,r6,89a98 <__fpcmp_parts_d+0x5c>
   89a50:	01c00104 	movi	r7,4
   89a54:	19c02826 	beq	r3,r7,89af8 <__fpcmp_parts_d+0xbc>
   89a58:	31c00926 	beq	r6,r7,89a80 <__fpcmp_parts_d+0x44>
   89a5c:	01c00084 	movi	r7,2
   89a60:	19c00626 	beq	r3,r7,89a7c <__fpcmp_parts_d+0x40>
   89a64:	31c00a26 	beq	r6,r7,89a90 <__fpcmp_parts_d+0x54>
   89a68:	20c00117 	ldw	r3,4(r4)
   89a6c:	29800117 	ldw	r6,4(r5)
   89a70:	19800b26 	beq	r3,r6,89aa0 <__fpcmp_parts_d+0x64>
   89a74:	1800041e 	bne	r3,zero,89a88 <__fpcmp_parts_d+0x4c>
   89a78:	f800283a 	ret
   89a7c:	30c01a26 	beq	r6,r3,89ae8 <__fpcmp_parts_d+0xac>
   89a80:	28800117 	ldw	r2,4(r5)
   89a84:	1000041e 	bne	r2,zero,89a98 <__fpcmp_parts_d+0x5c>
   89a88:	00bfffc4 	movi	r2,-1
   89a8c:	f800283a 	ret
   89a90:	20800117 	ldw	r2,4(r4)
   89a94:	103ffc1e 	bne	r2,zero,89a88 <__fpcmp_parts_d+0x4c>
   89a98:	00800044 	movi	r2,1
   89a9c:	f800283a 	ret
   89aa0:	21c00217 	ldw	r7,8(r4)
   89aa4:	29800217 	ldw	r6,8(r5)
   89aa8:	31c0020e 	bge	r6,r7,89ab4 <__fpcmp_parts_d+0x78>
   89aac:	183ff61e 	bne	r3,zero,89a88 <__fpcmp_parts_d+0x4c>
   89ab0:	f800283a 	ret
   89ab4:	39800a16 	blt	r7,r6,89ae0 <__fpcmp_parts_d+0xa4>
   89ab8:	20800417 	ldw	r2,16(r4)
   89abc:	29800417 	ldw	r6,16(r5)
   89ac0:	21c00317 	ldw	r7,12(r4)
   89ac4:	29000317 	ldw	r4,12(r5)
   89ac8:	30800936 	bltu	r6,r2,89af0 <__fpcmp_parts_d+0xb4>
   89acc:	1180011e 	bne	r2,r6,89ad4 <__fpcmp_parts_d+0x98>
   89ad0:	21c00736 	bltu	r4,r7,89af0 <__fpcmp_parts_d+0xb4>
   89ad4:	11800236 	bltu	r2,r6,89ae0 <__fpcmp_parts_d+0xa4>
   89ad8:	3080031e 	bne	r6,r2,89ae8 <__fpcmp_parts_d+0xac>
   89adc:	3900022e 	bgeu	r7,r4,89ae8 <__fpcmp_parts_d+0xac>
   89ae0:	183fe926 	beq	r3,zero,89a88 <__fpcmp_parts_d+0x4c>
   89ae4:	003fec06 	br	89a98 <__fpcmp_parts_d+0x5c>
   89ae8:	0005883a 	mov	r2,zero
   89aec:	f800283a 	ret
   89af0:	183fe926 	beq	r3,zero,89a98 <__fpcmp_parts_d+0x5c>
   89af4:	003fe406 	br	89a88 <__fpcmp_parts_d+0x4c>
   89af8:	30ffe51e 	bne	r6,r3,89a90 <__fpcmp_parts_d+0x54>
   89afc:	28c00117 	ldw	r3,4(r5)
   89b00:	20800117 	ldw	r2,4(r4)
   89b04:	1885c83a 	sub	r2,r3,r2
   89b08:	f800283a 	ret

00089b0c <__lshrdi3>:
   89b0c:	2005883a 	mov	r2,r4
   89b10:	2807883a 	mov	r3,r5
   89b14:	30000826 	beq	r6,zero,89b38 <__lshrdi3+0x2c>
   89b18:	01000804 	movi	r4,32
   89b1c:	2189c83a 	sub	r4,r4,r6
   89b20:	0100060e 	bge	zero,r4,89b3c <__lshrdi3+0x30>
   89b24:	1184d83a 	srl	r2,r2,r6
   89b28:	2908983a 	sll	r4,r5,r4
   89b2c:	298cd83a 	srl	r6,r5,r6
   89b30:	2084b03a 	or	r2,r4,r2
   89b34:	3007883a 	mov	r3,r6
   89b38:	f800283a 	ret
   89b3c:	0105c83a 	sub	r2,zero,r4
   89b40:	000d883a 	mov	r6,zero
   89b44:	2884d83a 	srl	r2,r5,r2
   89b48:	3007883a 	mov	r3,r6
   89b4c:	003ffa06 	br	89b38 <__lshrdi3+0x2c>

00089b50 <__ashldi3>:
   89b50:	2005883a 	mov	r2,r4
   89b54:	2807883a 	mov	r3,r5
   89b58:	30000826 	beq	r6,zero,89b7c <__ashldi3+0x2c>
   89b5c:	01000804 	movi	r4,32
   89b60:	2189c83a 	sub	r4,r4,r6
   89b64:	0100060e 	bge	zero,r4,89b80 <__ashldi3+0x30>
   89b68:	1108d83a 	srl	r4,r2,r4
   89b6c:	2986983a 	sll	r3,r5,r6
   89b70:	118c983a 	sll	r6,r2,r6
   89b74:	20c6b03a 	or	r3,r4,r3
   89b78:	3005883a 	mov	r2,r6
   89b7c:	f800283a 	ret
   89b80:	0107c83a 	sub	r3,zero,r4
   89b84:	000d883a 	mov	r6,zero
   89b88:	10c6983a 	sll	r3,r2,r3
   89b8c:	3005883a 	mov	r2,r6
   89b90:	003ffa06 	br	89b7c <__ashldi3+0x2c>

00089b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89b94:	defffe04 	addi	sp,sp,-8
   89b98:	dfc00115 	stw	ra,4(sp)
   89b9c:	df000015 	stw	fp,0(sp)
   89ba0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89ba4:	00800274 	movhi	r2,9
   89ba8:	10b88904 	addi	r2,r2,-7644
   89bac:	10800017 	ldw	r2,0(r2)
   89bb0:	10000526 	beq	r2,zero,89bc8 <alt_get_errno+0x34>
   89bb4:	00800274 	movhi	r2,9
   89bb8:	10b88904 	addi	r2,r2,-7644
   89bbc:	10800017 	ldw	r2,0(r2)
   89bc0:	103ee83a 	callr	r2
   89bc4:	00000206 	br	89bd0 <alt_get_errno+0x3c>
   89bc8:	00800274 	movhi	r2,9
   89bcc:	10bf2a04 	addi	r2,r2,-856
}
   89bd0:	e037883a 	mov	sp,fp
   89bd4:	dfc00117 	ldw	ra,4(sp)
   89bd8:	df000017 	ldw	fp,0(sp)
   89bdc:	dec00204 	addi	sp,sp,8
   89be0:	f800283a 	ret

00089be4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   89be4:	defffb04 	addi	sp,sp,-20
   89be8:	dfc00415 	stw	ra,16(sp)
   89bec:	df000315 	stw	fp,12(sp)
   89bf0:	df000304 	addi	fp,sp,12
   89bf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   89bf8:	e0bfff17 	ldw	r2,-4(fp)
   89bfc:	10000716 	blt	r2,zero,89c1c <close+0x38>
   89c00:	e13fff17 	ldw	r4,-4(fp)
   89c04:	01400304 	movi	r5,12
   89c08:	00895300 	call	89530 <__mulsi3>
   89c0c:	00c00274 	movhi	r3,9
   89c10:	18f40704 	addi	r3,r3,-12260
   89c14:	10c5883a 	add	r2,r2,r3
   89c18:	00000106 	br	89c20 <close+0x3c>
   89c1c:	0005883a 	mov	r2,zero
   89c20:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   89c24:	e0bffd17 	ldw	r2,-12(fp)
   89c28:	10001826 	beq	r2,zero,89c8c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   89c2c:	e0bffd17 	ldw	r2,-12(fp)
   89c30:	10800017 	ldw	r2,0(r2)
   89c34:	10800417 	ldw	r2,16(r2)
   89c38:	10000626 	beq	r2,zero,89c54 <close+0x70>
   89c3c:	e0bffd17 	ldw	r2,-12(fp)
   89c40:	10800017 	ldw	r2,0(r2)
   89c44:	10800417 	ldw	r2,16(r2)
   89c48:	e13ffd17 	ldw	r4,-12(fp)
   89c4c:	103ee83a 	callr	r2
   89c50:	00000106 	br	89c58 <close+0x74>
   89c54:	0005883a 	mov	r2,zero
   89c58:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   89c5c:	e13fff17 	ldw	r4,-4(fp)
   89c60:	008a3200 	call	8a320 <alt_release_fd>
    if (rval < 0)
   89c64:	e0bffe17 	ldw	r2,-8(fp)
   89c68:	1000060e 	bge	r2,zero,89c84 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   89c6c:	0089b940 	call	89b94 <alt_get_errno>
   89c70:	e0fffe17 	ldw	r3,-8(fp)
   89c74:	00c7c83a 	sub	r3,zero,r3
   89c78:	10c00015 	stw	r3,0(r2)
      return -1;
   89c7c:	00bfffc4 	movi	r2,-1
   89c80:	00000606 	br	89c9c <close+0xb8>
    }
    return 0;
   89c84:	0005883a 	mov	r2,zero
   89c88:	00000406 	br	89c9c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89c8c:	0089b940 	call	89b94 <alt_get_errno>
   89c90:	00c01444 	movi	r3,81
   89c94:	10c00015 	stw	r3,0(r2)
    return -1;
   89c98:	00bfffc4 	movi	r2,-1
  }
}
   89c9c:	e037883a 	mov	sp,fp
   89ca0:	dfc00117 	ldw	ra,4(sp)
   89ca4:	df000017 	ldw	fp,0(sp)
   89ca8:	dec00204 	addi	sp,sp,8
   89cac:	f800283a 	ret

00089cb0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   89cb0:	defffc04 	addi	sp,sp,-16
   89cb4:	df000315 	stw	fp,12(sp)
   89cb8:	df000304 	addi	fp,sp,12
   89cbc:	e13ffd15 	stw	r4,-12(fp)
   89cc0:	e17ffe15 	stw	r5,-8(fp)
   89cc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   89cc8:	e0bfff17 	ldw	r2,-4(fp)
}
   89ccc:	e037883a 	mov	sp,fp
   89cd0:	df000017 	ldw	fp,0(sp)
   89cd4:	dec00104 	addi	sp,sp,4
   89cd8:	f800283a 	ret

00089cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89cdc:	defffe04 	addi	sp,sp,-8
   89ce0:	dfc00115 	stw	ra,4(sp)
   89ce4:	df000015 	stw	fp,0(sp)
   89ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89cec:	00800274 	movhi	r2,9
   89cf0:	10b88904 	addi	r2,r2,-7644
   89cf4:	10800017 	ldw	r2,0(r2)
   89cf8:	10000526 	beq	r2,zero,89d10 <alt_get_errno+0x34>
   89cfc:	00800274 	movhi	r2,9
   89d00:	10b88904 	addi	r2,r2,-7644
   89d04:	10800017 	ldw	r2,0(r2)
   89d08:	103ee83a 	callr	r2
   89d0c:	00000206 	br	89d18 <alt_get_errno+0x3c>
   89d10:	00800274 	movhi	r2,9
   89d14:	10bf2a04 	addi	r2,r2,-856
}
   89d18:	e037883a 	mov	sp,fp
   89d1c:	dfc00117 	ldw	ra,4(sp)
   89d20:	df000017 	ldw	fp,0(sp)
   89d24:	dec00204 	addi	sp,sp,8
   89d28:	f800283a 	ret

00089d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   89d2c:	defffb04 	addi	sp,sp,-20
   89d30:	dfc00415 	stw	ra,16(sp)
   89d34:	df000315 	stw	fp,12(sp)
   89d38:	df000304 	addi	fp,sp,12
   89d3c:	e13ffe15 	stw	r4,-8(fp)
   89d40:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   89d44:	e0bffe17 	ldw	r2,-8(fp)
   89d48:	10000716 	blt	r2,zero,89d68 <fstat+0x3c>
   89d4c:	e13ffe17 	ldw	r4,-8(fp)
   89d50:	01400304 	movi	r5,12
   89d54:	00895300 	call	89530 <__mulsi3>
   89d58:	00c00274 	movhi	r3,9
   89d5c:	18f40704 	addi	r3,r3,-12260
   89d60:	10c5883a 	add	r2,r2,r3
   89d64:	00000106 	br	89d6c <fstat+0x40>
   89d68:	0005883a 	mov	r2,zero
   89d6c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   89d70:	e0bffd17 	ldw	r2,-12(fp)
   89d74:	10001026 	beq	r2,zero,89db8 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   89d78:	e0bffd17 	ldw	r2,-12(fp)
   89d7c:	10800017 	ldw	r2,0(r2)
   89d80:	10800817 	ldw	r2,32(r2)
   89d84:	10000726 	beq	r2,zero,89da4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   89d88:	e0bffd17 	ldw	r2,-12(fp)
   89d8c:	10800017 	ldw	r2,0(r2)
   89d90:	10800817 	ldw	r2,32(r2)
   89d94:	e13ffd17 	ldw	r4,-12(fp)
   89d98:	e17fff17 	ldw	r5,-4(fp)
   89d9c:	103ee83a 	callr	r2
   89da0:	00000906 	br	89dc8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   89da4:	e0bfff17 	ldw	r2,-4(fp)
   89da8:	00c80004 	movi	r3,8192
   89dac:	10c00115 	stw	r3,4(r2)
      return 0;
   89db0:	0005883a 	mov	r2,zero
   89db4:	00000406 	br	89dc8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89db8:	0089cdc0 	call	89cdc <alt_get_errno>
   89dbc:	00c01444 	movi	r3,81
   89dc0:	10c00015 	stw	r3,0(r2)
    return -1;
   89dc4:	00bfffc4 	movi	r2,-1
  }
}
   89dc8:	e037883a 	mov	sp,fp
   89dcc:	dfc00117 	ldw	ra,4(sp)
   89dd0:	df000017 	ldw	fp,0(sp)
   89dd4:	dec00204 	addi	sp,sp,8
   89dd8:	f800283a 	ret

00089ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89ddc:	defffe04 	addi	sp,sp,-8
   89de0:	dfc00115 	stw	ra,4(sp)
   89de4:	df000015 	stw	fp,0(sp)
   89de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89dec:	00800274 	movhi	r2,9
   89df0:	10b88904 	addi	r2,r2,-7644
   89df4:	10800017 	ldw	r2,0(r2)
   89df8:	10000526 	beq	r2,zero,89e10 <alt_get_errno+0x34>
   89dfc:	00800274 	movhi	r2,9
   89e00:	10b88904 	addi	r2,r2,-7644
   89e04:	10800017 	ldw	r2,0(r2)
   89e08:	103ee83a 	callr	r2
   89e0c:	00000206 	br	89e18 <alt_get_errno+0x3c>
   89e10:	00800274 	movhi	r2,9
   89e14:	10bf2a04 	addi	r2,r2,-856
}
   89e18:	e037883a 	mov	sp,fp
   89e1c:	dfc00117 	ldw	ra,4(sp)
   89e20:	df000017 	ldw	fp,0(sp)
   89e24:	dec00204 	addi	sp,sp,8
   89e28:	f800283a 	ret

00089e2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   89e2c:	deffed04 	addi	sp,sp,-76
   89e30:	dfc01215 	stw	ra,72(sp)
   89e34:	df001115 	stw	fp,68(sp)
   89e38:	df001104 	addi	fp,sp,68
   89e3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   89e40:	e0bfff17 	ldw	r2,-4(fp)
   89e44:	10000716 	blt	r2,zero,89e64 <isatty+0x38>
   89e48:	e13fff17 	ldw	r4,-4(fp)
   89e4c:	01400304 	movi	r5,12
   89e50:	00895300 	call	89530 <__mulsi3>
   89e54:	00c00274 	movhi	r3,9
   89e58:	18f40704 	addi	r3,r3,-12260
   89e5c:	10c5883a 	add	r2,r2,r3
   89e60:	00000106 	br	89e68 <isatty+0x3c>
   89e64:	0005883a 	mov	r2,zero
   89e68:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   89e6c:	e0bfef17 	ldw	r2,-68(fp)
   89e70:	10000e26 	beq	r2,zero,89eac <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   89e74:	e0bfef17 	ldw	r2,-68(fp)
   89e78:	10800017 	ldw	r2,0(r2)
   89e7c:	10800817 	ldw	r2,32(r2)
   89e80:	1000021e 	bne	r2,zero,89e8c <isatty+0x60>
    {
      return 1;
   89e84:	00800044 	movi	r2,1
   89e88:	00000c06 	br	89ebc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   89e8c:	e0bff004 	addi	r2,fp,-64
   89e90:	e13fff17 	ldw	r4,-4(fp)
   89e94:	100b883a 	mov	r5,r2
   89e98:	0089d2c0 	call	89d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   89e9c:	e0bff117 	ldw	r2,-60(fp)
   89ea0:	10880020 	cmpeqi	r2,r2,8192
   89ea4:	10803fcc 	andi	r2,r2,255
   89ea8:	00000406 	br	89ebc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89eac:	0089ddc0 	call	89ddc <alt_get_errno>
   89eb0:	00c01444 	movi	r3,81
   89eb4:	10c00015 	stw	r3,0(r2)
    return 0;
   89eb8:	0005883a 	mov	r2,zero
  }
}
   89ebc:	e037883a 	mov	sp,fp
   89ec0:	dfc00117 	ldw	ra,4(sp)
   89ec4:	df000017 	ldw	fp,0(sp)
   89ec8:	dec00204 	addi	sp,sp,8
   89ecc:	f800283a 	ret

00089ed0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   89ed0:	defffc04 	addi	sp,sp,-16
   89ed4:	df000315 	stw	fp,12(sp)
   89ed8:	df000304 	addi	fp,sp,12
   89edc:	e13ffd15 	stw	r4,-12(fp)
   89ee0:	e17ffe15 	stw	r5,-8(fp)
   89ee4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   89ee8:	e0fffe17 	ldw	r3,-8(fp)
   89eec:	e0bffd17 	ldw	r2,-12(fp)
   89ef0:	18800e26 	beq	r3,r2,89f2c <alt_load_section+0x5c>
  {
    while( to != end )
   89ef4:	00000a06 	br	89f20 <alt_load_section+0x50>
    {
      *to++ = *from++;
   89ef8:	e0bffd17 	ldw	r2,-12(fp)
   89efc:	10c00017 	ldw	r3,0(r2)
   89f00:	e0bffe17 	ldw	r2,-8(fp)
   89f04:	10c00015 	stw	r3,0(r2)
   89f08:	e0bffe17 	ldw	r2,-8(fp)
   89f0c:	10800104 	addi	r2,r2,4
   89f10:	e0bffe15 	stw	r2,-8(fp)
   89f14:	e0bffd17 	ldw	r2,-12(fp)
   89f18:	10800104 	addi	r2,r2,4
   89f1c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   89f20:	e0fffe17 	ldw	r3,-8(fp)
   89f24:	e0bfff17 	ldw	r2,-4(fp)
   89f28:	18bff31e 	bne	r3,r2,89ef8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   89f2c:	e037883a 	mov	sp,fp
   89f30:	df000017 	ldw	fp,0(sp)
   89f34:	dec00104 	addi	sp,sp,4
   89f38:	f800283a 	ret

00089f3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   89f3c:	defffe04 	addi	sp,sp,-8
   89f40:	dfc00115 	stw	ra,4(sp)
   89f44:	df000015 	stw	fp,0(sp)
   89f48:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   89f4c:	01000274 	movhi	r4,9
   89f50:	21388e04 	addi	r4,r4,-7624
   89f54:	01400274 	movhi	r5,9
   89f58:	2971f804 	addi	r5,r5,-14368
   89f5c:	01800274 	movhi	r6,9
   89f60:	31b88e04 	addi	r6,r6,-7624
   89f64:	0089ed00 	call	89ed0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   89f68:	01000234 	movhi	r4,8
   89f6c:	21000804 	addi	r4,r4,32
   89f70:	01400234 	movhi	r5,8
   89f74:	29400804 	addi	r5,r5,32
   89f78:	01800234 	movhi	r6,8
   89f7c:	31806e04 	addi	r6,r6,440
   89f80:	0089ed00 	call	89ed0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   89f84:	01000274 	movhi	r4,9
   89f88:	21312604 	addi	r4,r4,-15208
   89f8c:	01400274 	movhi	r5,9
   89f90:	29712604 	addi	r5,r5,-15208
   89f94:	01800274 	movhi	r6,9
   89f98:	31b1f804 	addi	r6,r6,-14368
   89f9c:	0089ed00 	call	89ed0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   89fa0:	008b3680 	call	8b368 <alt_dcache_flush_all>
  alt_icache_flush_all();
   89fa4:	008b52c0 	call	8b52c <alt_icache_flush_all>
}
   89fa8:	e037883a 	mov	sp,fp
   89fac:	dfc00117 	ldw	ra,4(sp)
   89fb0:	df000017 	ldw	fp,0(sp)
   89fb4:	dec00204 	addi	sp,sp,8
   89fb8:	f800283a 	ret

00089fbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89fbc:	defffe04 	addi	sp,sp,-8
   89fc0:	dfc00115 	stw	ra,4(sp)
   89fc4:	df000015 	stw	fp,0(sp)
   89fc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89fcc:	00800274 	movhi	r2,9
   89fd0:	10b88904 	addi	r2,r2,-7644
   89fd4:	10800017 	ldw	r2,0(r2)
   89fd8:	10000526 	beq	r2,zero,89ff0 <alt_get_errno+0x34>
   89fdc:	00800274 	movhi	r2,9
   89fe0:	10b88904 	addi	r2,r2,-7644
   89fe4:	10800017 	ldw	r2,0(r2)
   89fe8:	103ee83a 	callr	r2
   89fec:	00000206 	br	89ff8 <alt_get_errno+0x3c>
   89ff0:	00800274 	movhi	r2,9
   89ff4:	10bf2a04 	addi	r2,r2,-856
}
   89ff8:	e037883a 	mov	sp,fp
   89ffc:	dfc00117 	ldw	ra,4(sp)
   8a000:	df000017 	ldw	fp,0(sp)
   8a004:	dec00204 	addi	sp,sp,8
   8a008:	f800283a 	ret

0008a00c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8a00c:	defff904 	addi	sp,sp,-28
   8a010:	dfc00615 	stw	ra,24(sp)
   8a014:	df000515 	stw	fp,20(sp)
   8a018:	df000504 	addi	fp,sp,20
   8a01c:	e13ffd15 	stw	r4,-12(fp)
   8a020:	e17ffe15 	stw	r5,-8(fp)
   8a024:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8a028:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a02c:	e0bffd17 	ldw	r2,-12(fp)
   8a030:	10000716 	blt	r2,zero,8a050 <lseek+0x44>
   8a034:	e13ffd17 	ldw	r4,-12(fp)
   8a038:	01400304 	movi	r5,12
   8a03c:	00895300 	call	89530 <__mulsi3>
   8a040:	00c00274 	movhi	r3,9
   8a044:	18f40704 	addi	r3,r3,-12260
   8a048:	10c5883a 	add	r2,r2,r3
   8a04c:	00000106 	br	8a054 <lseek+0x48>
   8a050:	0005883a 	mov	r2,zero
   8a054:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8a058:	e0bffc17 	ldw	r2,-16(fp)
   8a05c:	10001026 	beq	r2,zero,8a0a0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8a060:	e0bffc17 	ldw	r2,-16(fp)
   8a064:	10800017 	ldw	r2,0(r2)
   8a068:	10800717 	ldw	r2,28(r2)
   8a06c:	10000926 	beq	r2,zero,8a094 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8a070:	e0bffc17 	ldw	r2,-16(fp)
   8a074:	10800017 	ldw	r2,0(r2)
   8a078:	10800717 	ldw	r2,28(r2)
   8a07c:	e13ffc17 	ldw	r4,-16(fp)
   8a080:	e17ffe17 	ldw	r5,-8(fp)
   8a084:	e1bfff17 	ldw	r6,-4(fp)
   8a088:	103ee83a 	callr	r2
   8a08c:	e0bffb15 	stw	r2,-20(fp)
   8a090:	00000506 	br	8a0a8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8a094:	00bfde84 	movi	r2,-134
   8a098:	e0bffb15 	stw	r2,-20(fp)
   8a09c:	00000206 	br	8a0a8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   8a0a0:	00bfebc4 	movi	r2,-81
   8a0a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8a0a8:	e0bffb17 	ldw	r2,-20(fp)
   8a0ac:	1000060e 	bge	r2,zero,8a0c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8a0b0:	0089fbc0 	call	89fbc <alt_get_errno>
   8a0b4:	e0fffb17 	ldw	r3,-20(fp)
   8a0b8:	00c7c83a 	sub	r3,zero,r3
   8a0bc:	10c00015 	stw	r3,0(r2)
    rc = -1;
   8a0c0:	00bfffc4 	movi	r2,-1
   8a0c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8a0c8:	e0bffb17 	ldw	r2,-20(fp)
}
   8a0cc:	e037883a 	mov	sp,fp
   8a0d0:	dfc00117 	ldw	ra,4(sp)
   8a0d4:	df000017 	ldw	fp,0(sp)
   8a0d8:	dec00204 	addi	sp,sp,8
   8a0dc:	f800283a 	ret

0008a0e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8a0e0:	defffd04 	addi	sp,sp,-12
   8a0e4:	dfc00215 	stw	ra,8(sp)
   8a0e8:	df000115 	stw	fp,4(sp)
   8a0ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8a0f0:	0009883a 	mov	r4,zero
   8a0f4:	008a5f80 	call	8a5f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8a0f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8a0fc:	008a62c0 	call	8a62c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8a100:	01000274 	movhi	r4,9
   8a104:	2131ee04 	addi	r4,r4,-14408
   8a108:	01400274 	movhi	r5,9
   8a10c:	2971ee04 	addi	r5,r5,-14408
   8a110:	01800274 	movhi	r6,9
   8a114:	31b1ee04 	addi	r6,r6,-14408
   8a118:	008b8f00 	call	8b8f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8a11c:	008b4740 	call	8b474 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8a120:	01000274 	movhi	r4,9
   8a124:	212d3404 	addi	r4,r4,-19248
   8a128:	008c0340 	call	8c034 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8a12c:	d126ac17 	ldw	r4,-25936(gp)
   8a130:	d0e6ad17 	ldw	r3,-25932(gp)
   8a134:	d0a6ae17 	ldw	r2,-25928(gp)
   8a138:	180b883a 	mov	r5,r3
   8a13c:	100d883a 	mov	r6,r2
   8a140:	00804180 	call	80418 <main>
   8a144:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8a148:	01000044 	movi	r4,1
   8a14c:	0089be40 	call	89be4 <close>
  exit (result);
   8a150:	e13fff17 	ldw	r4,-4(fp)
   8a154:	008c0480 	call	8c048 <exit>

0008a158 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8a158:	defffe04 	addi	sp,sp,-8
   8a15c:	df000115 	stw	fp,4(sp)
   8a160:	df000104 	addi	fp,sp,4
   8a164:	e13fff15 	stw	r4,-4(fp)
}
   8a168:	e037883a 	mov	sp,fp
   8a16c:	df000017 	ldw	fp,0(sp)
   8a170:	dec00104 	addi	sp,sp,4
   8a174:	f800283a 	ret

0008a178 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8a178:	defffe04 	addi	sp,sp,-8
   8a17c:	df000115 	stw	fp,4(sp)
   8a180:	df000104 	addi	fp,sp,4
   8a184:	e13fff15 	stw	r4,-4(fp)
}
   8a188:	e037883a 	mov	sp,fp
   8a18c:	df000017 	ldw	fp,0(sp)
   8a190:	dec00104 	addi	sp,sp,4
   8a194:	f800283a 	ret

0008a198 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   8a198:	defffd04 	addi	sp,sp,-12
   8a19c:	dfc00215 	stw	ra,8(sp)
   8a1a0:	df000115 	stw	fp,4(sp)
   8a1a4:	df000104 	addi	fp,sp,4
   8a1a8:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   8a1ac:	00800274 	movhi	r2,9
   8a1b0:	10b88004 	addi	r2,r2,-7680
   8a1b4:	10800017 	ldw	r2,0(r2)
   8a1b8:	10800217 	ldw	r2,8(r2)
   8a1bc:	e13fff17 	ldw	r4,-4(fp)
   8a1c0:	100b883a 	mov	r5,r2
   8a1c4:	008c0f40 	call	8c0f4 <fputs>
#endif
}
   8a1c8:	e037883a 	mov	sp,fp
   8a1cc:	dfc00117 	ldw	ra,4(sp)
   8a1d0:	df000017 	ldw	fp,0(sp)
   8a1d4:	dec00204 	addi	sp,sp,8
   8a1d8:	f800283a 	ret

0008a1dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a1dc:	defffe04 	addi	sp,sp,-8
   8a1e0:	dfc00115 	stw	ra,4(sp)
   8a1e4:	df000015 	stw	fp,0(sp)
   8a1e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8a1ec:	00800274 	movhi	r2,9
   8a1f0:	10b88904 	addi	r2,r2,-7644
   8a1f4:	10800017 	ldw	r2,0(r2)
   8a1f8:	10000526 	beq	r2,zero,8a210 <alt_get_errno+0x34>
   8a1fc:	00800274 	movhi	r2,9
   8a200:	10b88904 	addi	r2,r2,-7644
   8a204:	10800017 	ldw	r2,0(r2)
   8a208:	103ee83a 	callr	r2
   8a20c:	00000206 	br	8a218 <alt_get_errno+0x3c>
   8a210:	00800274 	movhi	r2,9
   8a214:	10bf2a04 	addi	r2,r2,-856
}
   8a218:	e037883a 	mov	sp,fp
   8a21c:	dfc00117 	ldw	ra,4(sp)
   8a220:	df000017 	ldw	fp,0(sp)
   8a224:	dec00204 	addi	sp,sp,8
   8a228:	f800283a 	ret

0008a22c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8a22c:	defff904 	addi	sp,sp,-28
   8a230:	dfc00615 	stw	ra,24(sp)
   8a234:	df000515 	stw	fp,20(sp)
   8a238:	df000504 	addi	fp,sp,20
   8a23c:	e13ffd15 	stw	r4,-12(fp)
   8a240:	e17ffe15 	stw	r5,-8(fp)
   8a244:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a248:	e0bffd17 	ldw	r2,-12(fp)
   8a24c:	10000716 	blt	r2,zero,8a26c <read+0x40>
   8a250:	e13ffd17 	ldw	r4,-12(fp)
   8a254:	01400304 	movi	r5,12
   8a258:	00895300 	call	89530 <__mulsi3>
   8a25c:	00c00274 	movhi	r3,9
   8a260:	18f40704 	addi	r3,r3,-12260
   8a264:	10c5883a 	add	r2,r2,r3
   8a268:	00000106 	br	8a270 <read+0x44>
   8a26c:	0005883a 	mov	r2,zero
   8a270:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a274:	e0bffb17 	ldw	r2,-20(fp)
   8a278:	10002026 	beq	r2,zero,8a2fc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a27c:	e0bffb17 	ldw	r2,-20(fp)
   8a280:	10800217 	ldw	r2,8(r2)
   8a284:	108000cc 	andi	r2,r2,3
   8a288:	10800060 	cmpeqi	r2,r2,1
   8a28c:	1000171e 	bne	r2,zero,8a2ec <read+0xc0>
        (fd->dev->read))
   8a290:	e0bffb17 	ldw	r2,-20(fp)
   8a294:	10800017 	ldw	r2,0(r2)
   8a298:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a29c:	10001326 	beq	r2,zero,8a2ec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8a2a0:	e0bffb17 	ldw	r2,-20(fp)
   8a2a4:	10800017 	ldw	r2,0(r2)
   8a2a8:	10c00517 	ldw	r3,20(r2)
   8a2ac:	e0bfff17 	ldw	r2,-4(fp)
   8a2b0:	e13ffb17 	ldw	r4,-20(fp)
   8a2b4:	e17ffe17 	ldw	r5,-8(fp)
   8a2b8:	100d883a 	mov	r6,r2
   8a2bc:	183ee83a 	callr	r3
   8a2c0:	e0bffc15 	stw	r2,-16(fp)
   8a2c4:	e0bffc17 	ldw	r2,-16(fp)
   8a2c8:	1000060e 	bge	r2,zero,8a2e4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8a2cc:	008a1dc0 	call	8a1dc <alt_get_errno>
   8a2d0:	e0fffc17 	ldw	r3,-16(fp)
   8a2d4:	00c7c83a 	sub	r3,zero,r3
   8a2d8:	10c00015 	stw	r3,0(r2)
          return -1;
   8a2dc:	00bfffc4 	movi	r2,-1
   8a2e0:	00000a06 	br	8a30c <read+0xe0>
        }
        return rval;
   8a2e4:	e0bffc17 	ldw	r2,-16(fp)
   8a2e8:	00000806 	br	8a30c <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8a2ec:	008a1dc0 	call	8a1dc <alt_get_errno>
   8a2f0:	00c00344 	movi	r3,13
   8a2f4:	10c00015 	stw	r3,0(r2)
   8a2f8:	00000306 	br	8a308 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8a2fc:	008a1dc0 	call	8a1dc <alt_get_errno>
   8a300:	00c01444 	movi	r3,81
   8a304:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8a308:	00bfffc4 	movi	r2,-1
}
   8a30c:	e037883a 	mov	sp,fp
   8a310:	dfc00117 	ldw	ra,4(sp)
   8a314:	df000017 	ldw	fp,0(sp)
   8a318:	dec00204 	addi	sp,sp,8
   8a31c:	f800283a 	ret

0008a320 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8a320:	defffc04 	addi	sp,sp,-16
   8a324:	dfc00315 	stw	ra,12(sp)
   8a328:	df000215 	stw	fp,8(sp)
   8a32c:	dc000115 	stw	r16,4(sp)
   8a330:	df000104 	addi	fp,sp,4
   8a334:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8a338:	e0bfff17 	ldw	r2,-4(fp)
   8a33c:	108000d0 	cmplti	r2,r2,3
   8a340:	1000111e 	bne	r2,zero,8a388 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8a344:	04000274 	movhi	r16,9
   8a348:	84340704 	addi	r16,r16,-12260
   8a34c:	e0bfff17 	ldw	r2,-4(fp)
   8a350:	1009883a 	mov	r4,r2
   8a354:	01400304 	movi	r5,12
   8a358:	00895300 	call	89530 <__mulsi3>
   8a35c:	8085883a 	add	r2,r16,r2
   8a360:	10800204 	addi	r2,r2,8
   8a364:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8a368:	04000274 	movhi	r16,9
   8a36c:	84340704 	addi	r16,r16,-12260
   8a370:	e0bfff17 	ldw	r2,-4(fp)
   8a374:	1009883a 	mov	r4,r2
   8a378:	01400304 	movi	r5,12
   8a37c:	00895300 	call	89530 <__mulsi3>
   8a380:	8085883a 	add	r2,r16,r2
   8a384:	10000015 	stw	zero,0(r2)
  }
}
   8a388:	e037883a 	mov	sp,fp
   8a38c:	dfc00217 	ldw	ra,8(sp)
   8a390:	df000117 	ldw	fp,4(sp)
   8a394:	dc000017 	ldw	r16,0(sp)
   8a398:	dec00304 	addi	sp,sp,12
   8a39c:	f800283a 	ret

0008a3a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8a3a0:	defff904 	addi	sp,sp,-28
   8a3a4:	df000615 	stw	fp,24(sp)
   8a3a8:	df000604 	addi	fp,sp,24
   8a3ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a3b0:	0005303a 	rdctl	r2,status
   8a3b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a3b8:	e0fffc17 	ldw	r3,-16(fp)
   8a3bc:	00bfff84 	movi	r2,-2
   8a3c0:	1884703a 	and	r2,r3,r2
   8a3c4:	1001703a 	wrctl	status,r2
  
  return context;
   8a3c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8a3cc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8a3d0:	d0a00b17 	ldw	r2,-32724(gp)
   8a3d4:	10c000c4 	addi	r3,r2,3
   8a3d8:	00bfff04 	movi	r2,-4
   8a3dc:	1884703a 	and	r2,r3,r2
   8a3e0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8a3e4:	d0e00b17 	ldw	r3,-32724(gp)
   8a3e8:	e0bfff17 	ldw	r2,-4(fp)
   8a3ec:	1885883a 	add	r2,r3,r2
   8a3f0:	00c003b4 	movhi	r3,14
   8a3f4:	18c6a004 	addi	r3,r3,6784
   8a3f8:	1880062e 	bgeu	r3,r2,8a414 <sbrk+0x74>
   8a3fc:	e0bffa17 	ldw	r2,-24(fp)
   8a400:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a404:	e0bffd17 	ldw	r2,-12(fp)
   8a408:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8a40c:	00bfffc4 	movi	r2,-1
   8a410:	00000b06 	br	8a440 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8a414:	d0a00b17 	ldw	r2,-32724(gp)
   8a418:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8a41c:	d0e00b17 	ldw	r3,-32724(gp)
   8a420:	e0bfff17 	ldw	r2,-4(fp)
   8a424:	1885883a 	add	r2,r3,r2
   8a428:	d0a00b15 	stw	r2,-32724(gp)
   8a42c:	e0bffa17 	ldw	r2,-24(fp)
   8a430:	e0bffe15 	stw	r2,-8(fp)
   8a434:	e0bffe17 	ldw	r2,-8(fp)
   8a438:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8a43c:	e0bffb17 	ldw	r2,-20(fp)
} 
   8a440:	e037883a 	mov	sp,fp
   8a444:	df000017 	ldw	fp,0(sp)
   8a448:	dec00104 	addi	sp,sp,4
   8a44c:	f800283a 	ret

0008a450 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8a450:	defffd04 	addi	sp,sp,-12
   8a454:	dfc00215 	stw	ra,8(sp)
   8a458:	df000115 	stw	fp,4(sp)
   8a45c:	df000104 	addi	fp,sp,4
   8a460:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8a464:	e13fff17 	ldw	r4,-4(fp)
   8a468:	008b2140 	call	8b214 <alt_busy_sleep>
}
   8a46c:	e037883a 	mov	sp,fp
   8a470:	dfc00117 	ldw	ra,4(sp)
   8a474:	df000017 	ldw	fp,0(sp)
   8a478:	dec00204 	addi	sp,sp,8
   8a47c:	f800283a 	ret

0008a480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a480:	defffe04 	addi	sp,sp,-8
   8a484:	dfc00115 	stw	ra,4(sp)
   8a488:	df000015 	stw	fp,0(sp)
   8a48c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8a490:	00800274 	movhi	r2,9
   8a494:	10b88904 	addi	r2,r2,-7644
   8a498:	10800017 	ldw	r2,0(r2)
   8a49c:	10000526 	beq	r2,zero,8a4b4 <alt_get_errno+0x34>
   8a4a0:	00800274 	movhi	r2,9
   8a4a4:	10b88904 	addi	r2,r2,-7644
   8a4a8:	10800017 	ldw	r2,0(r2)
   8a4ac:	103ee83a 	callr	r2
   8a4b0:	00000206 	br	8a4bc <alt_get_errno+0x3c>
   8a4b4:	00800274 	movhi	r2,9
   8a4b8:	10bf2a04 	addi	r2,r2,-856
}
   8a4bc:	e037883a 	mov	sp,fp
   8a4c0:	dfc00117 	ldw	ra,4(sp)
   8a4c4:	df000017 	ldw	fp,0(sp)
   8a4c8:	dec00204 	addi	sp,sp,8
   8a4cc:	f800283a 	ret

0008a4d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8a4d0:	defff904 	addi	sp,sp,-28
   8a4d4:	dfc00615 	stw	ra,24(sp)
   8a4d8:	df000515 	stw	fp,20(sp)
   8a4dc:	df000504 	addi	fp,sp,20
   8a4e0:	e13ffd15 	stw	r4,-12(fp)
   8a4e4:	e17ffe15 	stw	r5,-8(fp)
   8a4e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a4ec:	e0bffd17 	ldw	r2,-12(fp)
   8a4f0:	10000716 	blt	r2,zero,8a510 <write+0x40>
   8a4f4:	e13ffd17 	ldw	r4,-12(fp)
   8a4f8:	01400304 	movi	r5,12
   8a4fc:	00895300 	call	89530 <__mulsi3>
   8a500:	00c00274 	movhi	r3,9
   8a504:	18f40704 	addi	r3,r3,-12260
   8a508:	10c5883a 	add	r2,r2,r3
   8a50c:	00000106 	br	8a514 <write+0x44>
   8a510:	0005883a 	mov	r2,zero
   8a514:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a518:	e0bffb17 	ldw	r2,-20(fp)
   8a51c:	10001f26 	beq	r2,zero,8a59c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8a520:	e0bffb17 	ldw	r2,-20(fp)
   8a524:	10800217 	ldw	r2,8(r2)
   8a528:	108000cc 	andi	r2,r2,3
   8a52c:	10001726 	beq	r2,zero,8a58c <write+0xbc>
   8a530:	e0bffb17 	ldw	r2,-20(fp)
   8a534:	10800017 	ldw	r2,0(r2)
   8a538:	10800617 	ldw	r2,24(r2)
   8a53c:	10001326 	beq	r2,zero,8a58c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8a540:	e0bffb17 	ldw	r2,-20(fp)
   8a544:	10800017 	ldw	r2,0(r2)
   8a548:	10c00617 	ldw	r3,24(r2)
   8a54c:	e0bfff17 	ldw	r2,-4(fp)
   8a550:	e13ffb17 	ldw	r4,-20(fp)
   8a554:	e17ffe17 	ldw	r5,-8(fp)
   8a558:	100d883a 	mov	r6,r2
   8a55c:	183ee83a 	callr	r3
   8a560:	e0bffc15 	stw	r2,-16(fp)
   8a564:	e0bffc17 	ldw	r2,-16(fp)
   8a568:	1000060e 	bge	r2,zero,8a584 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8a56c:	008a4800 	call	8a480 <alt_get_errno>
   8a570:	e0fffc17 	ldw	r3,-16(fp)
   8a574:	00c7c83a 	sub	r3,zero,r3
   8a578:	10c00015 	stw	r3,0(r2)
        return -1;
   8a57c:	00bfffc4 	movi	r2,-1
   8a580:	00000a06 	br	8a5ac <write+0xdc>
      }
      return rval;
   8a584:	e0bffc17 	ldw	r2,-16(fp)
   8a588:	00000806 	br	8a5ac <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8a58c:	008a4800 	call	8a480 <alt_get_errno>
   8a590:	00c00344 	movi	r3,13
   8a594:	10c00015 	stw	r3,0(r2)
   8a598:	00000306 	br	8a5a8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8a59c:	008a4800 	call	8a480 <alt_get_errno>
   8a5a0:	00c01444 	movi	r3,81
   8a5a4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8a5a8:	00bfffc4 	movi	r2,-1
}
   8a5ac:	e037883a 	mov	sp,fp
   8a5b0:	dfc00117 	ldw	ra,4(sp)
   8a5b4:	df000017 	ldw	fp,0(sp)
   8a5b8:	dec00204 	addi	sp,sp,8
   8a5bc:	f800283a 	ret

0008a5c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8a5c0:	defffd04 	addi	sp,sp,-12
   8a5c4:	dfc00215 	stw	ra,8(sp)
   8a5c8:	df000115 	stw	fp,4(sp)
   8a5cc:	df000104 	addi	fp,sp,4
   8a5d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8a5d4:	e13fff17 	ldw	r4,-4(fp)
   8a5d8:	01400274 	movhi	r5,9
   8a5dc:	29788604 	addi	r5,r5,-7656
   8a5e0:	008b3d40 	call	8b3d4 <alt_dev_llist_insert>
}
   8a5e4:	e037883a 	mov	sp,fp
   8a5e8:	dfc00117 	ldw	ra,4(sp)
   8a5ec:	df000017 	ldw	fp,0(sp)
   8a5f0:	dec00204 	addi	sp,sp,8
   8a5f4:	f800283a 	ret

0008a5f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8a5f8:	defffd04 	addi	sp,sp,-12
   8a5fc:	dfc00215 	stw	ra,8(sp)
   8a600:	df000115 	stw	fp,4(sp)
   8a604:	df000104 	addi	fp,sp,4
   8a608:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8a60c:	008bd9c0 	call	8bd9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8a610:	00800044 	movi	r2,1
   8a614:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8a618:	e037883a 	mov	sp,fp
   8a61c:	dfc00117 	ldw	ra,4(sp)
   8a620:	df000017 	ldw	fp,0(sp)
   8a624:	dec00204 	addi	sp,sp,8
   8a628:	f800283a 	ret

0008a62c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8a62c:	defffe04 	addi	sp,sp,-8
   8a630:	dfc00115 	stw	ra,4(sp)
   8a634:	df000015 	stw	fp,0(sp)
   8a638:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8a63c:	01000274 	movhi	r4,9
   8a640:	21347104 	addi	r4,r4,-11836
   8a644:	000b883a 	mov	r5,zero
   8a648:	000d883a 	mov	r6,zero
   8a64c:	008a7d40 	call	8a7d4 <altera_avalon_jtag_uart_init>
   8a650:	01000274 	movhi	r4,9
   8a654:	21346704 	addi	r4,r4,-11876
   8a658:	008a5c00 	call	8a5c0 <alt_dev_reg>
}
   8a65c:	e037883a 	mov	sp,fp
   8a660:	dfc00117 	ldw	ra,4(sp)
   8a664:	df000017 	ldw	fp,0(sp)
   8a668:	dec00204 	addi	sp,sp,8
   8a66c:	f800283a 	ret

0008a670 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8a670:	defffa04 	addi	sp,sp,-24
   8a674:	dfc00515 	stw	ra,20(sp)
   8a678:	df000415 	stw	fp,16(sp)
   8a67c:	df000404 	addi	fp,sp,16
   8a680:	e13ffd15 	stw	r4,-12(fp)
   8a684:	e17ffe15 	stw	r5,-8(fp)
   8a688:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8a68c:	e0bffd17 	ldw	r2,-12(fp)
   8a690:	10800017 	ldw	r2,0(r2)
   8a694:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8a698:	e0bffc17 	ldw	r2,-16(fp)
   8a69c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8a6a0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8a6a4:	10800217 	ldw	r2,8(r2)
   8a6a8:	1809883a 	mov	r4,r3
   8a6ac:	e17ffe17 	ldw	r5,-8(fp)
   8a6b0:	e1bfff17 	ldw	r6,-4(fp)
   8a6b4:	100f883a 	mov	r7,r2
   8a6b8:	008ac980 	call	8ac98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8a6bc:	e037883a 	mov	sp,fp
   8a6c0:	dfc00117 	ldw	ra,4(sp)
   8a6c4:	df000017 	ldw	fp,0(sp)
   8a6c8:	dec00204 	addi	sp,sp,8
   8a6cc:	f800283a 	ret

0008a6d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8a6d0:	defffa04 	addi	sp,sp,-24
   8a6d4:	dfc00515 	stw	ra,20(sp)
   8a6d8:	df000415 	stw	fp,16(sp)
   8a6dc:	df000404 	addi	fp,sp,16
   8a6e0:	e13ffd15 	stw	r4,-12(fp)
   8a6e4:	e17ffe15 	stw	r5,-8(fp)
   8a6e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8a6ec:	e0bffd17 	ldw	r2,-12(fp)
   8a6f0:	10800017 	ldw	r2,0(r2)
   8a6f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8a6f8:	e0bffc17 	ldw	r2,-16(fp)
   8a6fc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8a700:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8a704:	10800217 	ldw	r2,8(r2)
   8a708:	1809883a 	mov	r4,r3
   8a70c:	e17ffe17 	ldw	r5,-8(fp)
   8a710:	e1bfff17 	ldw	r6,-4(fp)
   8a714:	100f883a 	mov	r7,r2
   8a718:	008aeb00 	call	8aeb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8a71c:	e037883a 	mov	sp,fp
   8a720:	dfc00117 	ldw	ra,4(sp)
   8a724:	df000017 	ldw	fp,0(sp)
   8a728:	dec00204 	addi	sp,sp,8
   8a72c:	f800283a 	ret

0008a730 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8a730:	defffc04 	addi	sp,sp,-16
   8a734:	dfc00315 	stw	ra,12(sp)
   8a738:	df000215 	stw	fp,8(sp)
   8a73c:	df000204 	addi	fp,sp,8
   8a740:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8a744:	e0bfff17 	ldw	r2,-4(fp)
   8a748:	10800017 	ldw	r2,0(r2)
   8a74c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8a750:	e0bffe17 	ldw	r2,-8(fp)
   8a754:	10c00a04 	addi	r3,r2,40
   8a758:	e0bfff17 	ldw	r2,-4(fp)
   8a75c:	10800217 	ldw	r2,8(r2)
   8a760:	1809883a 	mov	r4,r3
   8a764:	100b883a 	mov	r5,r2
   8a768:	008ab3c0 	call	8ab3c <altera_avalon_jtag_uart_close>
}
   8a76c:	e037883a 	mov	sp,fp
   8a770:	dfc00117 	ldw	ra,4(sp)
   8a774:	df000017 	ldw	fp,0(sp)
   8a778:	dec00204 	addi	sp,sp,8
   8a77c:	f800283a 	ret

0008a780 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8a780:	defffa04 	addi	sp,sp,-24
   8a784:	dfc00515 	stw	ra,20(sp)
   8a788:	df000415 	stw	fp,16(sp)
   8a78c:	df000404 	addi	fp,sp,16
   8a790:	e13ffd15 	stw	r4,-12(fp)
   8a794:	e17ffe15 	stw	r5,-8(fp)
   8a798:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8a79c:	e0bffd17 	ldw	r2,-12(fp)
   8a7a0:	10800017 	ldw	r2,0(r2)
   8a7a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8a7a8:	e0bffc17 	ldw	r2,-16(fp)
   8a7ac:	10800a04 	addi	r2,r2,40
   8a7b0:	1009883a 	mov	r4,r2
   8a7b4:	e17ffe17 	ldw	r5,-8(fp)
   8a7b8:	e1bfff17 	ldw	r6,-4(fp)
   8a7bc:	008aba40 	call	8aba4 <altera_avalon_jtag_uart_ioctl>
}
   8a7c0:	e037883a 	mov	sp,fp
   8a7c4:	dfc00117 	ldw	ra,4(sp)
   8a7c8:	df000017 	ldw	fp,0(sp)
   8a7cc:	dec00204 	addi	sp,sp,8
   8a7d0:	f800283a 	ret

0008a7d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8a7d4:	defffa04 	addi	sp,sp,-24
   8a7d8:	dfc00515 	stw	ra,20(sp)
   8a7dc:	df000415 	stw	fp,16(sp)
   8a7e0:	df000404 	addi	fp,sp,16
   8a7e4:	e13ffd15 	stw	r4,-12(fp)
   8a7e8:	e17ffe15 	stw	r5,-8(fp)
   8a7ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8a7f0:	e0bffd17 	ldw	r2,-12(fp)
   8a7f4:	00c00044 	movi	r3,1
   8a7f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8a7fc:	e0bffd17 	ldw	r2,-12(fp)
   8a800:	10800017 	ldw	r2,0(r2)
   8a804:	10800104 	addi	r2,r2,4
   8a808:	e0fffd17 	ldw	r3,-12(fp)
   8a80c:	18c00817 	ldw	r3,32(r3)
   8a810:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8a814:	e0fffe17 	ldw	r3,-8(fp)
   8a818:	e0bfff17 	ldw	r2,-4(fp)
   8a81c:	d8000015 	stw	zero,0(sp)
   8a820:	1809883a 	mov	r4,r3
   8a824:	100b883a 	mov	r5,r2
   8a828:	01800274 	movhi	r6,9
   8a82c:	31aa2504 	addi	r6,r6,-22380
   8a830:	e1fffd17 	ldw	r7,-12(fp)
   8a834:	008b5480 	call	8b548 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8a838:	e0bffd17 	ldw	r2,-12(fp)
   8a83c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8a840:	e0bffd17 	ldw	r2,-12(fp)
   8a844:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8a848:	00800274 	movhi	r2,9
   8a84c:	10bf2f04 	addi	r2,r2,-836
   8a850:	10800017 	ldw	r2,0(r2)
   8a854:	1809883a 	mov	r4,r3
   8a858:	100b883a 	mov	r5,r2
   8a85c:	01800274 	movhi	r6,9
   8a860:	31aaa604 	addi	r6,r6,-21864
   8a864:	e1fffd17 	ldw	r7,-12(fp)
   8a868:	008b0d40 	call	8b0d4 <alt_alarm_start>
   8a86c:	1000040e 	bge	r2,zero,8a880 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8a870:	e0bffd17 	ldw	r2,-12(fp)
   8a874:	00e00034 	movhi	r3,32768
   8a878:	18ffffc4 	addi	r3,r3,-1
   8a87c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8a880:	e037883a 	mov	sp,fp
   8a884:	dfc00117 	ldw	ra,4(sp)
   8a888:	df000017 	ldw	fp,0(sp)
   8a88c:	dec00204 	addi	sp,sp,8
   8a890:	f800283a 	ret

0008a894 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8a894:	defff804 	addi	sp,sp,-32
   8a898:	df000715 	stw	fp,28(sp)
   8a89c:	df000704 	addi	fp,sp,28
   8a8a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8a8a4:	e0bfff17 	ldw	r2,-4(fp)
   8a8a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8a8ac:	e0bffb17 	ldw	r2,-20(fp)
   8a8b0:	10800017 	ldw	r2,0(r2)
   8a8b4:	e0bffc15 	stw	r2,-16(fp)
   8a8b8:	00000106 	br	8a8c0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   8a8bc:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8a8c0:	e0bffc17 	ldw	r2,-16(fp)
   8a8c4:	10800104 	addi	r2,r2,4
   8a8c8:	10800037 	ldwio	r2,0(r2)
   8a8cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8a8d0:	e0bffd17 	ldw	r2,-12(fp)
   8a8d4:	1080c00c 	andi	r2,r2,768
   8a8d8:	10006a26 	beq	r2,zero,8aa84 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8a8dc:	e0bffd17 	ldw	r2,-12(fp)
   8a8e0:	1080400c 	andi	r2,r2,256
   8a8e4:	10003326 	beq	r2,zero,8a9b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8a8e8:	00800074 	movhi	r2,1
   8a8ec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8a8f0:	e0bffb17 	ldw	r2,-20(fp)
   8a8f4:	10800a17 	ldw	r2,40(r2)
   8a8f8:	10800044 	addi	r2,r2,1
   8a8fc:	1081ffcc 	andi	r2,r2,2047
   8a900:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8a904:	e0bffb17 	ldw	r2,-20(fp)
   8a908:	10c00b17 	ldw	r3,44(r2)
   8a90c:	e0bffe17 	ldw	r2,-8(fp)
   8a910:	18801426 	beq	r3,r2,8a964 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8a914:	e0bffc17 	ldw	r2,-16(fp)
   8a918:	10800037 	ldwio	r2,0(r2)
   8a91c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8a920:	e0bff917 	ldw	r2,-28(fp)
   8a924:	10a0000c 	andi	r2,r2,32768
   8a928:	10001026 	beq	r2,zero,8a96c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8a92c:	e0bffb17 	ldw	r2,-20(fp)
   8a930:	10800a17 	ldw	r2,40(r2)
   8a934:	e0fff917 	ldw	r3,-28(fp)
   8a938:	e13ffb17 	ldw	r4,-20(fp)
   8a93c:	2085883a 	add	r2,r4,r2
   8a940:	10800e04 	addi	r2,r2,56
   8a944:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8a948:	e0bffb17 	ldw	r2,-20(fp)
   8a94c:	10800a17 	ldw	r2,40(r2)
   8a950:	10800044 	addi	r2,r2,1
   8a954:	10c1ffcc 	andi	r3,r2,2047
   8a958:	e0bffb17 	ldw	r2,-20(fp)
   8a95c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8a960:	003fe306 	br	8a8f0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8a964:	0001883a 	nop
   8a968:	00000106 	br	8a970 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8a96c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8a970:	e0bff917 	ldw	r2,-28(fp)
   8a974:	10bfffec 	andhi	r2,r2,65535
   8a978:	10000e26 	beq	r2,zero,8a9b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8a97c:	e0bffb17 	ldw	r2,-20(fp)
   8a980:	10c00817 	ldw	r3,32(r2)
   8a984:	00bfff84 	movi	r2,-2
   8a988:	1886703a 	and	r3,r3,r2
   8a98c:	e0bffb17 	ldw	r2,-20(fp)
   8a990:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8a994:	e0bffc17 	ldw	r2,-16(fp)
   8a998:	10800104 	addi	r2,r2,4
   8a99c:	e0fffb17 	ldw	r3,-20(fp)
   8a9a0:	18c00817 	ldw	r3,32(r3)
   8a9a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8a9a8:	e0bffc17 	ldw	r2,-16(fp)
   8a9ac:	10800104 	addi	r2,r2,4
   8a9b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8a9b4:	e0bffd17 	ldw	r2,-12(fp)
   8a9b8:	1080800c 	andi	r2,r2,512
   8a9bc:	103fbf26 	beq	r2,zero,8a8bc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8a9c0:	e0bffd17 	ldw	r2,-12(fp)
   8a9c4:	1004d43a 	srli	r2,r2,16
   8a9c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8a9cc:	00001406 	br	8aa20 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8a9d0:	e0bffc17 	ldw	r2,-16(fp)
   8a9d4:	e0fffb17 	ldw	r3,-20(fp)
   8a9d8:	18c00d17 	ldw	r3,52(r3)
   8a9dc:	e13ffb17 	ldw	r4,-20(fp)
   8a9e0:	20c7883a 	add	r3,r4,r3
   8a9e4:	18c20e04 	addi	r3,r3,2104
   8a9e8:	18c00003 	ldbu	r3,0(r3)
   8a9ec:	18c03fcc 	andi	r3,r3,255
   8a9f0:	18c0201c 	xori	r3,r3,128
   8a9f4:	18ffe004 	addi	r3,r3,-128
   8a9f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8a9fc:	e0bffb17 	ldw	r2,-20(fp)
   8aa00:	10800d17 	ldw	r2,52(r2)
   8aa04:	10800044 	addi	r2,r2,1
   8aa08:	10c1ffcc 	andi	r3,r2,2047
   8aa0c:	e0bffb17 	ldw	r2,-20(fp)
   8aa10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8aa14:	e0bffa17 	ldw	r2,-24(fp)
   8aa18:	10bfffc4 	addi	r2,r2,-1
   8aa1c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8aa20:	e0bffa17 	ldw	r2,-24(fp)
   8aa24:	10000526 	beq	r2,zero,8aa3c <altera_avalon_jtag_uart_irq+0x1a8>
   8aa28:	e0bffb17 	ldw	r2,-20(fp)
   8aa2c:	10c00d17 	ldw	r3,52(r2)
   8aa30:	e0bffb17 	ldw	r2,-20(fp)
   8aa34:	10800c17 	ldw	r2,48(r2)
   8aa38:	18bfe51e 	bne	r3,r2,8a9d0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8aa3c:	e0bffa17 	ldw	r2,-24(fp)
   8aa40:	103f9e26 	beq	r2,zero,8a8bc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8aa44:	e0bffb17 	ldw	r2,-20(fp)
   8aa48:	10c00817 	ldw	r3,32(r2)
   8aa4c:	00bfff44 	movi	r2,-3
   8aa50:	1886703a 	and	r3,r3,r2
   8aa54:	e0bffb17 	ldw	r2,-20(fp)
   8aa58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8aa5c:	e0bffb17 	ldw	r2,-20(fp)
   8aa60:	10800017 	ldw	r2,0(r2)
   8aa64:	10800104 	addi	r2,r2,4
   8aa68:	e0fffb17 	ldw	r3,-20(fp)
   8aa6c:	18c00817 	ldw	r3,32(r3)
   8aa70:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8aa74:	e0bffc17 	ldw	r2,-16(fp)
   8aa78:	10800104 	addi	r2,r2,4
   8aa7c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8aa80:	003f8e06 	br	8a8bc <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8aa84:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8aa88:	e037883a 	mov	sp,fp
   8aa8c:	df000017 	ldw	fp,0(sp)
   8aa90:	dec00104 	addi	sp,sp,4
   8aa94:	f800283a 	ret

0008aa98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8aa98:	defffc04 	addi	sp,sp,-16
   8aa9c:	df000315 	stw	fp,12(sp)
   8aaa0:	df000304 	addi	fp,sp,12
   8aaa4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8aaa8:	e0bfff17 	ldw	r2,-4(fp)
   8aaac:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8aab0:	e0bffd17 	ldw	r2,-12(fp)
   8aab4:	10800017 	ldw	r2,0(r2)
   8aab8:	10800104 	addi	r2,r2,4
   8aabc:	10800037 	ldwio	r2,0(r2)
   8aac0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8aac4:	e0bffe17 	ldw	r2,-8(fp)
   8aac8:	1081000c 	andi	r2,r2,1024
   8aacc:	10000a26 	beq	r2,zero,8aaf8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8aad0:	e0bffd17 	ldw	r2,-12(fp)
   8aad4:	10800017 	ldw	r2,0(r2)
   8aad8:	10800104 	addi	r2,r2,4
   8aadc:	e0fffd17 	ldw	r3,-12(fp)
   8aae0:	18c00817 	ldw	r3,32(r3)
   8aae4:	18c10014 	ori	r3,r3,1024
   8aae8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8aaec:	e0bffd17 	ldw	r2,-12(fp)
   8aaf0:	10000915 	stw	zero,36(r2)
   8aaf4:	00000a06 	br	8ab20 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8aaf8:	e0bffd17 	ldw	r2,-12(fp)
   8aafc:	10800917 	ldw	r2,36(r2)
   8ab00:	00e00034 	movhi	r3,32768
   8ab04:	18ffff04 	addi	r3,r3,-4
   8ab08:	18800536 	bltu	r3,r2,8ab20 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   8ab0c:	e0bffd17 	ldw	r2,-12(fp)
   8ab10:	10800917 	ldw	r2,36(r2)
   8ab14:	10c00044 	addi	r3,r2,1
   8ab18:	e0bffd17 	ldw	r2,-12(fp)
   8ab1c:	10c00915 	stw	r3,36(r2)
   8ab20:	00800274 	movhi	r2,9
   8ab24:	10bf2f04 	addi	r2,r2,-836
   8ab28:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8ab2c:	e037883a 	mov	sp,fp
   8ab30:	df000017 	ldw	fp,0(sp)
   8ab34:	dec00104 	addi	sp,sp,4
   8ab38:	f800283a 	ret

0008ab3c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8ab3c:	defffd04 	addi	sp,sp,-12
   8ab40:	df000215 	stw	fp,8(sp)
   8ab44:	df000204 	addi	fp,sp,8
   8ab48:	e13ffe15 	stw	r4,-8(fp)
   8ab4c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8ab50:	00000506 	br	8ab68 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8ab54:	e0bfff17 	ldw	r2,-4(fp)
   8ab58:	1090000c 	andi	r2,r2,16384
   8ab5c:	10000226 	beq	r2,zero,8ab68 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8ab60:	00bffd44 	movi	r2,-11
   8ab64:	00000b06 	br	8ab94 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8ab68:	e0bffe17 	ldw	r2,-8(fp)
   8ab6c:	10c00d17 	ldw	r3,52(r2)
   8ab70:	e0bffe17 	ldw	r2,-8(fp)
   8ab74:	10800c17 	ldw	r2,48(r2)
   8ab78:	18800526 	beq	r3,r2,8ab90 <altera_avalon_jtag_uart_close+0x54>
   8ab7c:	e0bffe17 	ldw	r2,-8(fp)
   8ab80:	10c00917 	ldw	r3,36(r2)
   8ab84:	e0bffe17 	ldw	r2,-8(fp)
   8ab88:	10800117 	ldw	r2,4(r2)
   8ab8c:	18bff136 	bltu	r3,r2,8ab54 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8ab90:	0005883a 	mov	r2,zero
}
   8ab94:	e037883a 	mov	sp,fp
   8ab98:	df000017 	ldw	fp,0(sp)
   8ab9c:	dec00104 	addi	sp,sp,4
   8aba0:	f800283a 	ret

0008aba4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8aba4:	defffa04 	addi	sp,sp,-24
   8aba8:	df000515 	stw	fp,20(sp)
   8abac:	df000504 	addi	fp,sp,20
   8abb0:	e13ffd15 	stw	r4,-12(fp)
   8abb4:	e17ffe15 	stw	r5,-8(fp)
   8abb8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8abbc:	00bff9c4 	movi	r2,-25
   8abc0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8abc4:	e0bffe17 	ldw	r2,-8(fp)
   8abc8:	10da8060 	cmpeqi	r3,r2,27137
   8abcc:	1800031e 	bne	r3,zero,8abdc <altera_avalon_jtag_uart_ioctl+0x38>
   8abd0:	109a80a0 	cmpeqi	r2,r2,27138
   8abd4:	1000181e 	bne	r2,zero,8ac38 <altera_avalon_jtag_uart_ioctl+0x94>
   8abd8:	00002606 	br	8ac74 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8abdc:	e0bffd17 	ldw	r2,-12(fp)
   8abe0:	10c00117 	ldw	r3,4(r2)
   8abe4:	00a00034 	movhi	r2,32768
   8abe8:	10bfffc4 	addi	r2,r2,-1
   8abec:	18802226 	beq	r3,r2,8ac78 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   8abf0:	e0bfff17 	ldw	r2,-4(fp)
   8abf4:	10800017 	ldw	r2,0(r2)
   8abf8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8abfc:	e0bffc17 	ldw	r2,-16(fp)
   8ac00:	10800090 	cmplti	r2,r2,2
   8ac04:	1000061e 	bne	r2,zero,8ac20 <altera_avalon_jtag_uart_ioctl+0x7c>
   8ac08:	e0fffc17 	ldw	r3,-16(fp)
   8ac0c:	00a00034 	movhi	r2,32768
   8ac10:	10bfffc4 	addi	r2,r2,-1
   8ac14:	18800226 	beq	r3,r2,8ac20 <altera_avalon_jtag_uart_ioctl+0x7c>
   8ac18:	e0bffc17 	ldw	r2,-16(fp)
   8ac1c:	00000206 	br	8ac28 <altera_avalon_jtag_uart_ioctl+0x84>
   8ac20:	00a00034 	movhi	r2,32768
   8ac24:	10bfff84 	addi	r2,r2,-2
   8ac28:	e0fffd17 	ldw	r3,-12(fp)
   8ac2c:	18800115 	stw	r2,4(r3)
      rc = 0;
   8ac30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8ac34:	00001006 	br	8ac78 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8ac38:	e0bffd17 	ldw	r2,-12(fp)
   8ac3c:	10c00117 	ldw	r3,4(r2)
   8ac40:	00a00034 	movhi	r2,32768
   8ac44:	10bfffc4 	addi	r2,r2,-1
   8ac48:	18800d26 	beq	r3,r2,8ac80 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ac4c:	e0bffd17 	ldw	r2,-12(fp)
   8ac50:	10c00917 	ldw	r3,36(r2)
   8ac54:	e0bffd17 	ldw	r2,-12(fp)
   8ac58:	10800117 	ldw	r2,4(r2)
   8ac5c:	1885803a 	cmpltu	r2,r3,r2
   8ac60:	10c03fcc 	andi	r3,r2,255
   8ac64:	e0bfff17 	ldw	r2,-4(fp)
   8ac68:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8ac6c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8ac70:	00000306 	br	8ac80 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   8ac74:	00000306 	br	8ac84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8ac78:	0001883a 	nop
   8ac7c:	00000106 	br	8ac84 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8ac80:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8ac84:	e0bffb17 	ldw	r2,-20(fp)
}
   8ac88:	e037883a 	mov	sp,fp
   8ac8c:	df000017 	ldw	fp,0(sp)
   8ac90:	dec00104 	addi	sp,sp,4
   8ac94:	f800283a 	ret

0008ac98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8ac98:	defff304 	addi	sp,sp,-52
   8ac9c:	dfc00c15 	stw	ra,48(sp)
   8aca0:	df000b15 	stw	fp,44(sp)
   8aca4:	df000b04 	addi	fp,sp,44
   8aca8:	e13ffc15 	stw	r4,-16(fp)
   8acac:	e17ffd15 	stw	r5,-12(fp)
   8acb0:	e1bffe15 	stw	r6,-8(fp)
   8acb4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8acb8:	e0bffd17 	ldw	r2,-12(fp)
   8acbc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8acc0:	00004706 	br	8ade0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8acc4:	e0bffc17 	ldw	r2,-16(fp)
   8acc8:	10800a17 	ldw	r2,40(r2)
   8accc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8acd0:	e0bffc17 	ldw	r2,-16(fp)
   8acd4:	10800b17 	ldw	r2,44(r2)
   8acd8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8acdc:	e0fff717 	ldw	r3,-36(fp)
   8ace0:	e0bff817 	ldw	r2,-32(fp)
   8ace4:	18800536 	bltu	r3,r2,8acfc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8ace8:	e0fff717 	ldw	r3,-36(fp)
   8acec:	e0bff817 	ldw	r2,-32(fp)
   8acf0:	1885c83a 	sub	r2,r3,r2
   8acf4:	e0bff615 	stw	r2,-40(fp)
   8acf8:	00000406 	br	8ad0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8acfc:	00c20004 	movi	r3,2048
   8ad00:	e0bff817 	ldw	r2,-32(fp)
   8ad04:	1885c83a 	sub	r2,r3,r2
   8ad08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ad0c:	e0bff617 	ldw	r2,-40(fp)
   8ad10:	10001e26 	beq	r2,zero,8ad8c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8ad14:	e0fffe17 	ldw	r3,-8(fp)
   8ad18:	e0bff617 	ldw	r2,-40(fp)
   8ad1c:	1880022e 	bgeu	r3,r2,8ad28 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8ad20:	e0bffe17 	ldw	r2,-8(fp)
   8ad24:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8ad28:	e0bff817 	ldw	r2,-32(fp)
   8ad2c:	10800e04 	addi	r2,r2,56
   8ad30:	e0fffc17 	ldw	r3,-16(fp)
   8ad34:	1885883a 	add	r2,r3,r2
   8ad38:	e13ff517 	ldw	r4,-44(fp)
   8ad3c:	100b883a 	mov	r5,r2
   8ad40:	e1bff617 	ldw	r6,-40(fp)
   8ad44:	008588c0 	call	8588c <memcpy>
      ptr   += n;
   8ad48:	e0fff517 	ldw	r3,-44(fp)
   8ad4c:	e0bff617 	ldw	r2,-40(fp)
   8ad50:	1885883a 	add	r2,r3,r2
   8ad54:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8ad58:	e0fffe17 	ldw	r3,-8(fp)
   8ad5c:	e0bff617 	ldw	r2,-40(fp)
   8ad60:	1885c83a 	sub	r2,r3,r2
   8ad64:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ad68:	e0fff817 	ldw	r3,-32(fp)
   8ad6c:	e0bff617 	ldw	r2,-40(fp)
   8ad70:	1885883a 	add	r2,r3,r2
   8ad74:	10c1ffcc 	andi	r3,r2,2047
   8ad78:	e0bffc17 	ldw	r2,-16(fp)
   8ad7c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8ad80:	e0bffe17 	ldw	r2,-8(fp)
   8ad84:	00bfcf16 	blt	zero,r2,8acc4 <altera_avalon_jtag_uart_read+0x2c>
   8ad88:	00000106 	br	8ad90 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8ad8c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8ad90:	e0fff517 	ldw	r3,-44(fp)
   8ad94:	e0bffd17 	ldw	r2,-12(fp)
   8ad98:	1880141e 	bne	r3,r2,8adec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8ad9c:	e0bfff17 	ldw	r2,-4(fp)
   8ada0:	1090000c 	andi	r2,r2,16384
   8ada4:	1000131e 	bne	r2,zero,8adf4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8ada8:	0001883a 	nop
   8adac:	e0bffc17 	ldw	r2,-16(fp)
   8adb0:	10c00a17 	ldw	r3,40(r2)
   8adb4:	e0bff717 	ldw	r2,-36(fp)
   8adb8:	1880051e 	bne	r3,r2,8add0 <altera_avalon_jtag_uart_read+0x138>
   8adbc:	e0bffc17 	ldw	r2,-16(fp)
   8adc0:	10c00917 	ldw	r3,36(r2)
   8adc4:	e0bffc17 	ldw	r2,-16(fp)
   8adc8:	10800117 	ldw	r2,4(r2)
   8adcc:	18bff736 	bltu	r3,r2,8adac <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8add0:	e0bffc17 	ldw	r2,-16(fp)
   8add4:	10c00a17 	ldw	r3,40(r2)
   8add8:	e0bff717 	ldw	r2,-36(fp)
   8addc:	18800726 	beq	r3,r2,8adfc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8ade0:	e0bffe17 	ldw	r2,-8(fp)
   8ade4:	00bfb716 	blt	zero,r2,8acc4 <altera_avalon_jtag_uart_read+0x2c>
   8ade8:	00000506 	br	8ae00 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8adec:	0001883a 	nop
   8adf0:	00000306 	br	8ae00 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8adf4:	0001883a 	nop
   8adf8:	00000106 	br	8ae00 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8adfc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8ae00:	e0fff517 	ldw	r3,-44(fp)
   8ae04:	e0bffd17 	ldw	r2,-12(fp)
   8ae08:	18801726 	beq	r3,r2,8ae68 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ae0c:	0005303a 	rdctl	r2,status
   8ae10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ae14:	e0fffa17 	ldw	r3,-24(fp)
   8ae18:	00bfff84 	movi	r2,-2
   8ae1c:	1884703a 	and	r2,r3,r2
   8ae20:	1001703a 	wrctl	status,r2
  
  return context;
   8ae24:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8ae28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ae2c:	e0bffc17 	ldw	r2,-16(fp)
   8ae30:	10800817 	ldw	r2,32(r2)
   8ae34:	10c00054 	ori	r3,r2,1
   8ae38:	e0bffc17 	ldw	r2,-16(fp)
   8ae3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ae40:	e0bffc17 	ldw	r2,-16(fp)
   8ae44:	10800017 	ldw	r2,0(r2)
   8ae48:	10800104 	addi	r2,r2,4
   8ae4c:	e0fffc17 	ldw	r3,-16(fp)
   8ae50:	18c00817 	ldw	r3,32(r3)
   8ae54:	10c00035 	stwio	r3,0(r2)
   8ae58:	e0bff917 	ldw	r2,-28(fp)
   8ae5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ae60:	e0bffb17 	ldw	r2,-20(fp)
   8ae64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8ae68:	e0fff517 	ldw	r3,-44(fp)
   8ae6c:	e0bffd17 	ldw	r2,-12(fp)
   8ae70:	18800426 	beq	r3,r2,8ae84 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   8ae74:	e0fff517 	ldw	r3,-44(fp)
   8ae78:	e0bffd17 	ldw	r2,-12(fp)
   8ae7c:	1885c83a 	sub	r2,r3,r2
   8ae80:	00000606 	br	8ae9c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   8ae84:	e0bfff17 	ldw	r2,-4(fp)
   8ae88:	1090000c 	andi	r2,r2,16384
   8ae8c:	10000226 	beq	r2,zero,8ae98 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   8ae90:	00bffd44 	movi	r2,-11
   8ae94:	00000106 	br	8ae9c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   8ae98:	00bffec4 	movi	r2,-5
}
   8ae9c:	e037883a 	mov	sp,fp
   8aea0:	dfc00117 	ldw	ra,4(sp)
   8aea4:	df000017 	ldw	fp,0(sp)
   8aea8:	dec00204 	addi	sp,sp,8
   8aeac:	f800283a 	ret

0008aeb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8aeb0:	defff304 	addi	sp,sp,-52
   8aeb4:	dfc00c15 	stw	ra,48(sp)
   8aeb8:	df000b15 	stw	fp,44(sp)
   8aebc:	df000b04 	addi	fp,sp,44
   8aec0:	e13ffc15 	stw	r4,-16(fp)
   8aec4:	e17ffd15 	stw	r5,-12(fp)
   8aec8:	e1bffe15 	stw	r6,-8(fp)
   8aecc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8aed0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8aed4:	e0bffd17 	ldw	r2,-12(fp)
   8aed8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8aedc:	00003706 	br	8afbc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8aee0:	e0bffc17 	ldw	r2,-16(fp)
   8aee4:	10800c17 	ldw	r2,48(r2)
   8aee8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   8aeec:	e0bffc17 	ldw	r2,-16(fp)
   8aef0:	10800d17 	ldw	r2,52(r2)
   8aef4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8aef8:	e0fff817 	ldw	r3,-32(fp)
   8aefc:	e0bff517 	ldw	r2,-44(fp)
   8af00:	1880062e 	bgeu	r3,r2,8af1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8af04:	e0fff517 	ldw	r3,-44(fp)
   8af08:	e0bff817 	ldw	r2,-32(fp)
   8af0c:	1885c83a 	sub	r2,r3,r2
   8af10:	10bfffc4 	addi	r2,r2,-1
   8af14:	e0bff615 	stw	r2,-40(fp)
   8af18:	00000b06 	br	8af48 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8af1c:	e0bff517 	ldw	r2,-44(fp)
   8af20:	10000526 	beq	r2,zero,8af38 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8af24:	00c20004 	movi	r3,2048
   8af28:	e0bff817 	ldw	r2,-32(fp)
   8af2c:	1885c83a 	sub	r2,r3,r2
   8af30:	e0bff615 	stw	r2,-40(fp)
   8af34:	00000406 	br	8af48 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8af38:	00c1ffc4 	movi	r3,2047
   8af3c:	e0bff817 	ldw	r2,-32(fp)
   8af40:	1885c83a 	sub	r2,r3,r2
   8af44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8af48:	e0bff617 	ldw	r2,-40(fp)
   8af4c:	10001e26 	beq	r2,zero,8afc8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8af50:	e0fffe17 	ldw	r3,-8(fp)
   8af54:	e0bff617 	ldw	r2,-40(fp)
   8af58:	1880022e 	bgeu	r3,r2,8af64 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8af5c:	e0bffe17 	ldw	r2,-8(fp)
   8af60:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8af64:	e0bff817 	ldw	r2,-32(fp)
   8af68:	10820e04 	addi	r2,r2,2104
   8af6c:	e0fffc17 	ldw	r3,-16(fp)
   8af70:	1885883a 	add	r2,r3,r2
   8af74:	1009883a 	mov	r4,r2
   8af78:	e17ffd17 	ldw	r5,-12(fp)
   8af7c:	e1bff617 	ldw	r6,-40(fp)
   8af80:	008588c0 	call	8588c <memcpy>
      ptr   += n;
   8af84:	e0fffd17 	ldw	r3,-12(fp)
   8af88:	e0bff617 	ldw	r2,-40(fp)
   8af8c:	1885883a 	add	r2,r3,r2
   8af90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8af94:	e0fffe17 	ldw	r3,-8(fp)
   8af98:	e0bff617 	ldw	r2,-40(fp)
   8af9c:	1885c83a 	sub	r2,r3,r2
   8afa0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8afa4:	e0fff817 	ldw	r3,-32(fp)
   8afa8:	e0bff617 	ldw	r2,-40(fp)
   8afac:	1885883a 	add	r2,r3,r2
   8afb0:	10c1ffcc 	andi	r3,r2,2047
   8afb4:	e0bffc17 	ldw	r2,-16(fp)
   8afb8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8afbc:	e0bffe17 	ldw	r2,-8(fp)
   8afc0:	00bfc716 	blt	zero,r2,8aee0 <altera_avalon_jtag_uart_write+0x30>
   8afc4:	00000106 	br	8afcc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8afc8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8afcc:	0005303a 	rdctl	r2,status
   8afd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8afd4:	e0fffa17 	ldw	r3,-24(fp)
   8afd8:	00bfff84 	movi	r2,-2
   8afdc:	1884703a 	and	r2,r3,r2
   8afe0:	1001703a 	wrctl	status,r2
  
  return context;
   8afe4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8afe8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8afec:	e0bffc17 	ldw	r2,-16(fp)
   8aff0:	10800817 	ldw	r2,32(r2)
   8aff4:	10c00094 	ori	r3,r2,2
   8aff8:	e0bffc17 	ldw	r2,-16(fp)
   8affc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b000:	e0bffc17 	ldw	r2,-16(fp)
   8b004:	10800017 	ldw	r2,0(r2)
   8b008:	10800104 	addi	r2,r2,4
   8b00c:	e0fffc17 	ldw	r3,-16(fp)
   8b010:	18c00817 	ldw	r3,32(r3)
   8b014:	10c00035 	stwio	r3,0(r2)
   8b018:	e0bff917 	ldw	r2,-28(fp)
   8b01c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b020:	e0bffb17 	ldw	r2,-20(fp)
   8b024:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8b028:	e0bffe17 	ldw	r2,-8(fp)
   8b02c:	0080110e 	bge	zero,r2,8b074 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8b030:	e0bfff17 	ldw	r2,-4(fp)
   8b034:	1090000c 	andi	r2,r2,16384
   8b038:	1000111e 	bne	r2,zero,8b080 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8b03c:	0001883a 	nop
   8b040:	e0bffc17 	ldw	r2,-16(fp)
   8b044:	10c00d17 	ldw	r3,52(r2)
   8b048:	e0bff517 	ldw	r2,-44(fp)
   8b04c:	1880051e 	bne	r3,r2,8b064 <altera_avalon_jtag_uart_write+0x1b4>
   8b050:	e0bffc17 	ldw	r2,-16(fp)
   8b054:	10c00917 	ldw	r3,36(r2)
   8b058:	e0bffc17 	ldw	r2,-16(fp)
   8b05c:	10800117 	ldw	r2,4(r2)
   8b060:	18bff736 	bltu	r3,r2,8b040 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8b064:	e0bffc17 	ldw	r2,-16(fp)
   8b068:	10c00d17 	ldw	r3,52(r2)
   8b06c:	e0bff517 	ldw	r2,-44(fp)
   8b070:	18800526 	beq	r3,r2,8b088 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8b074:	e0bffe17 	ldw	r2,-8(fp)
   8b078:	00bfd016 	blt	zero,r2,8afbc <altera_avalon_jtag_uart_write+0x10c>
   8b07c:	00000306 	br	8b08c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8b080:	0001883a 	nop
   8b084:	00000106 	br	8b08c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   8b088:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8b08c:	e0fffd17 	ldw	r3,-12(fp)
   8b090:	e0bff717 	ldw	r2,-36(fp)
   8b094:	18800426 	beq	r3,r2,8b0a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8b098:	e0fffd17 	ldw	r3,-12(fp)
   8b09c:	e0bff717 	ldw	r2,-36(fp)
   8b0a0:	1885c83a 	sub	r2,r3,r2
   8b0a4:	00000606 	br	8b0c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8b0a8:	e0bfff17 	ldw	r2,-4(fp)
   8b0ac:	1090000c 	andi	r2,r2,16384
   8b0b0:	10000226 	beq	r2,zero,8b0bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8b0b4:	00bffd44 	movi	r2,-11
   8b0b8:	00000106 	br	8b0c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8b0bc:	00bffec4 	movi	r2,-5
}
   8b0c0:	e037883a 	mov	sp,fp
   8b0c4:	dfc00117 	ldw	ra,4(sp)
   8b0c8:	df000017 	ldw	fp,0(sp)
   8b0cc:	dec00204 	addi	sp,sp,8
   8b0d0:	f800283a 	ret

0008b0d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8b0d4:	defff504 	addi	sp,sp,-44
   8b0d8:	df000a15 	stw	fp,40(sp)
   8b0dc:	df000a04 	addi	fp,sp,40
   8b0e0:	e13ffc15 	stw	r4,-16(fp)
   8b0e4:	e17ffd15 	stw	r5,-12(fp)
   8b0e8:	e1bffe15 	stw	r6,-8(fp)
   8b0ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8b0f0:	e03ff615 	stw	zero,-40(fp)
   8b0f4:	00800274 	movhi	r2,9
   8b0f8:	10bf2f04 	addi	r2,r2,-836
   8b0fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8b100:	10003f26 	beq	r2,zero,8b200 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8b104:	e0bffc17 	ldw	r2,-16(fp)
   8b108:	10003b26 	beq	r2,zero,8b1f8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   8b10c:	e0bffc17 	ldw	r2,-16(fp)
   8b110:	e0fffe17 	ldw	r3,-8(fp)
   8b114:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8b118:	e0bffc17 	ldw	r2,-16(fp)
   8b11c:	e0ffff17 	ldw	r3,-4(fp)
   8b120:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b124:	0005303a 	rdctl	r2,status
   8b128:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b12c:	e0fff817 	ldw	r3,-32(fp)
   8b130:	00bfff84 	movi	r2,-2
   8b134:	1884703a 	and	r2,r3,r2
   8b138:	1001703a 	wrctl	status,r2
  
  return context;
   8b13c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8b140:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8b144:	00800274 	movhi	r2,9
   8b148:	10bf3004 	addi	r2,r2,-832
   8b14c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8b150:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8b154:	e0fffd17 	ldw	r3,-12(fp)
   8b158:	e0bff617 	ldw	r2,-40(fp)
   8b15c:	1885883a 	add	r2,r3,r2
   8b160:	10c00044 	addi	r3,r2,1
   8b164:	e0bffc17 	ldw	r2,-16(fp)
   8b168:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8b16c:	e0bffc17 	ldw	r2,-16(fp)
   8b170:	10c00217 	ldw	r3,8(r2)
   8b174:	e0bff617 	ldw	r2,-40(fp)
   8b178:	1880042e 	bgeu	r3,r2,8b18c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   8b17c:	e0bffc17 	ldw	r2,-16(fp)
   8b180:	00c00044 	movi	r3,1
   8b184:	10c00405 	stb	r3,16(r2)
   8b188:	00000206 	br	8b194 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   8b18c:	e0bffc17 	ldw	r2,-16(fp)
   8b190:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8b194:	e0bffc17 	ldw	r2,-16(fp)
   8b198:	00c00274 	movhi	r3,9
   8b19c:	18f88c04 	addi	r3,r3,-7632
   8b1a0:	e0fff915 	stw	r3,-28(fp)
   8b1a4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b1a8:	e0bffa17 	ldw	r2,-24(fp)
   8b1ac:	e0fff917 	ldw	r3,-28(fp)
   8b1b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8b1b4:	e0bff917 	ldw	r2,-28(fp)
   8b1b8:	10c00017 	ldw	r3,0(r2)
   8b1bc:	e0bffa17 	ldw	r2,-24(fp)
   8b1c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b1c4:	e0bff917 	ldw	r2,-28(fp)
   8b1c8:	10800017 	ldw	r2,0(r2)
   8b1cc:	e0fffa17 	ldw	r3,-24(fp)
   8b1d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8b1d4:	e0bff917 	ldw	r2,-28(fp)
   8b1d8:	e0fffa17 	ldw	r3,-24(fp)
   8b1dc:	10c00015 	stw	r3,0(r2)
   8b1e0:	e0bff717 	ldw	r2,-36(fp)
   8b1e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b1e8:	e0bffb17 	ldw	r2,-20(fp)
   8b1ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8b1f0:	0005883a 	mov	r2,zero
   8b1f4:	00000306 	br	8b204 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8b1f8:	00bffa84 	movi	r2,-22
   8b1fc:	00000106 	br	8b204 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   8b200:	00bfde84 	movi	r2,-134
  }
}
   8b204:	e037883a 	mov	sp,fp
   8b208:	df000017 	ldw	fp,0(sp)
   8b20c:	dec00104 	addi	sp,sp,4
   8b210:	f800283a 	ret

0008b214 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8b214:	defffa04 	addi	sp,sp,-24
   8b218:	dfc00515 	stw	ra,20(sp)
   8b21c:	df000415 	stw	fp,16(sp)
   8b220:	df000404 	addi	fp,sp,16
   8b224:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8b228:	00800244 	movi	r2,9
   8b22c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   8b230:	e13ffd17 	ldw	r4,-12(fp)
   8b234:	014003f4 	movhi	r5,15
   8b238:	29509004 	addi	r5,r5,16960
   8b23c:	00895300 	call	89530 <__mulsi3>
   8b240:	0100bef4 	movhi	r4,763
   8b244:	213c2004 	addi	r4,r4,-3968
   8b248:	100b883a 	mov	r5,r2
   8b24c:	00895200 	call	89520 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8b250:	01200034 	movhi	r4,32768
   8b254:	213fffc4 	addi	r4,r4,-1
   8b258:	100b883a 	mov	r5,r2
   8b25c:	00895200 	call	89520 <__udivsi3>
   8b260:	e13fff17 	ldw	r4,-4(fp)
   8b264:	100b883a 	mov	r5,r2
   8b268:	00895200 	call	89520 <__udivsi3>
   8b26c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8b270:	e0bffe17 	ldw	r2,-8(fp)
   8b274:	10002926 	beq	r2,zero,8b31c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   8b278:	e03ffc15 	stw	zero,-16(fp)
   8b27c:	00001606 	br	8b2d8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8b280:	00a00034 	movhi	r2,32768
   8b284:	10bfffc4 	addi	r2,r2,-1
   8b288:	10bfffc4 	addi	r2,r2,-1
   8b28c:	103ffe1e 	bne	r2,zero,8b288 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   8b290:	e13ffd17 	ldw	r4,-12(fp)
   8b294:	014003f4 	movhi	r5,15
   8b298:	29509004 	addi	r5,r5,16960
   8b29c:	00895300 	call	89530 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8b2a0:	0100bef4 	movhi	r4,763
   8b2a4:	213c2004 	addi	r4,r4,-3968
   8b2a8:	100b883a 	mov	r5,r2
   8b2ac:	00895200 	call	89520 <__udivsi3>
   8b2b0:	01200034 	movhi	r4,32768
   8b2b4:	213fffc4 	addi	r4,r4,-1
   8b2b8:	100b883a 	mov	r5,r2
   8b2bc:	00895200 	call	89520 <__udivsi3>
   8b2c0:	e0ffff17 	ldw	r3,-4(fp)
   8b2c4:	1885c83a 	sub	r2,r3,r2
   8b2c8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8b2cc:	e0bffc17 	ldw	r2,-16(fp)
   8b2d0:	10800044 	addi	r2,r2,1
   8b2d4:	e0bffc15 	stw	r2,-16(fp)
   8b2d8:	e0fffc17 	ldw	r3,-16(fp)
   8b2dc:	e0bffe17 	ldw	r2,-8(fp)
   8b2e0:	18bfe716 	blt	r3,r2,8b280 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8b2e4:	e13ffd17 	ldw	r4,-12(fp)
   8b2e8:	014003f4 	movhi	r5,15
   8b2ec:	29509004 	addi	r5,r5,16960
   8b2f0:	00895300 	call	89530 <__mulsi3>
   8b2f4:	0100bef4 	movhi	r4,763
   8b2f8:	213c2004 	addi	r4,r4,-3968
   8b2fc:	100b883a 	mov	r5,r2
   8b300:	00895200 	call	89520 <__udivsi3>
   8b304:	1009883a 	mov	r4,r2
   8b308:	e17fff17 	ldw	r5,-4(fp)
   8b30c:	00895300 	call	89530 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8b310:	10bfffc4 	addi	r2,r2,-1
   8b314:	103ffe1e 	bne	r2,zero,8b310 <alt_busy_sleep+0xfc>
   8b318:	00000d06 	br	8b350 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8b31c:	e13ffd17 	ldw	r4,-12(fp)
   8b320:	014003f4 	movhi	r5,15
   8b324:	29509004 	addi	r5,r5,16960
   8b328:	00895300 	call	89530 <__mulsi3>
   8b32c:	0100bef4 	movhi	r4,763
   8b330:	213c2004 	addi	r4,r4,-3968
   8b334:	100b883a 	mov	r5,r2
   8b338:	00895200 	call	89520 <__udivsi3>
   8b33c:	1009883a 	mov	r4,r2
   8b340:	e17fff17 	ldw	r5,-4(fp)
   8b344:	00895300 	call	89530 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8b348:	10bfffc4 	addi	r2,r2,-1
   8b34c:	00bffe16 	blt	zero,r2,8b348 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8b350:	0005883a 	mov	r2,zero
}
   8b354:	e037883a 	mov	sp,fp
   8b358:	dfc00117 	ldw	ra,4(sp)
   8b35c:	df000017 	ldw	fp,0(sp)
   8b360:	dec00204 	addi	sp,sp,8
   8b364:	f800283a 	ret

0008b368 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8b368:	deffff04 	addi	sp,sp,-4
   8b36c:	df000015 	stw	fp,0(sp)
   8b370:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8b374:	e037883a 	mov	sp,fp
   8b378:	df000017 	ldw	fp,0(sp)
   8b37c:	dec00104 	addi	sp,sp,4
   8b380:	f800283a 	ret

0008b384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b384:	defffe04 	addi	sp,sp,-8
   8b388:	dfc00115 	stw	ra,4(sp)
   8b38c:	df000015 	stw	fp,0(sp)
   8b390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b394:	00800274 	movhi	r2,9
   8b398:	10b88904 	addi	r2,r2,-7644
   8b39c:	10800017 	ldw	r2,0(r2)
   8b3a0:	10000526 	beq	r2,zero,8b3b8 <alt_get_errno+0x34>
   8b3a4:	00800274 	movhi	r2,9
   8b3a8:	10b88904 	addi	r2,r2,-7644
   8b3ac:	10800017 	ldw	r2,0(r2)
   8b3b0:	103ee83a 	callr	r2
   8b3b4:	00000206 	br	8b3c0 <alt_get_errno+0x3c>
   8b3b8:	00800274 	movhi	r2,9
   8b3bc:	10bf2a04 	addi	r2,r2,-856
}
   8b3c0:	e037883a 	mov	sp,fp
   8b3c4:	dfc00117 	ldw	ra,4(sp)
   8b3c8:	df000017 	ldw	fp,0(sp)
   8b3cc:	dec00204 	addi	sp,sp,8
   8b3d0:	f800283a 	ret

0008b3d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8b3d4:	defffa04 	addi	sp,sp,-24
   8b3d8:	dfc00515 	stw	ra,20(sp)
   8b3dc:	df000415 	stw	fp,16(sp)
   8b3e0:	df000404 	addi	fp,sp,16
   8b3e4:	e13ffe15 	stw	r4,-8(fp)
   8b3e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8b3ec:	e0bffe17 	ldw	r2,-8(fp)
   8b3f0:	10000326 	beq	r2,zero,8b400 <alt_dev_llist_insert+0x2c>
   8b3f4:	e0bffe17 	ldw	r2,-8(fp)
   8b3f8:	10800217 	ldw	r2,8(r2)
   8b3fc:	1000051e 	bne	r2,zero,8b414 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   8b400:	008b3840 	call	8b384 <alt_get_errno>
   8b404:	00c00584 	movi	r3,22
   8b408:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8b40c:	00bffa84 	movi	r2,-22
   8b410:	00001306 	br	8b460 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8b414:	e0bffe17 	ldw	r2,-8(fp)
   8b418:	e0ffff17 	ldw	r3,-4(fp)
   8b41c:	e0fffc15 	stw	r3,-16(fp)
   8b420:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b424:	e0bffd17 	ldw	r2,-12(fp)
   8b428:	e0fffc17 	ldw	r3,-16(fp)
   8b42c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8b430:	e0bffc17 	ldw	r2,-16(fp)
   8b434:	10c00017 	ldw	r3,0(r2)
   8b438:	e0bffd17 	ldw	r2,-12(fp)
   8b43c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b440:	e0bffc17 	ldw	r2,-16(fp)
   8b444:	10800017 	ldw	r2,0(r2)
   8b448:	e0fffd17 	ldw	r3,-12(fp)
   8b44c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8b450:	e0bffc17 	ldw	r2,-16(fp)
   8b454:	e0fffd17 	ldw	r3,-12(fp)
   8b458:	10c00015 	stw	r3,0(r2)

  return 0;  
   8b45c:	0005883a 	mov	r2,zero
}
   8b460:	e037883a 	mov	sp,fp
   8b464:	dfc00117 	ldw	ra,4(sp)
   8b468:	df000017 	ldw	fp,0(sp)
   8b46c:	dec00204 	addi	sp,sp,8
   8b470:	f800283a 	ret

0008b474 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8b474:	defffd04 	addi	sp,sp,-12
   8b478:	dfc00215 	stw	ra,8(sp)
   8b47c:	df000115 	stw	fp,4(sp)
   8b480:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8b484:	00800274 	movhi	r2,9
   8b488:	10b12504 	addi	r2,r2,-15212
   8b48c:	e0bfff15 	stw	r2,-4(fp)
   8b490:	00000606 	br	8b4ac <_do_ctors+0x38>
        (*ctor) (); 
   8b494:	e0bfff17 	ldw	r2,-4(fp)
   8b498:	10800017 	ldw	r2,0(r2)
   8b49c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8b4a0:	e0bfff17 	ldw	r2,-4(fp)
   8b4a4:	10bfff04 	addi	r2,r2,-4
   8b4a8:	e0bfff15 	stw	r2,-4(fp)
   8b4ac:	e0ffff17 	ldw	r3,-4(fp)
   8b4b0:	00800274 	movhi	r2,9
   8b4b4:	10b12604 	addi	r2,r2,-15208
   8b4b8:	18bff62e 	bgeu	r3,r2,8b494 <_do_ctors+0x20>
        (*ctor) (); 
}
   8b4bc:	e037883a 	mov	sp,fp
   8b4c0:	dfc00117 	ldw	ra,4(sp)
   8b4c4:	df000017 	ldw	fp,0(sp)
   8b4c8:	dec00204 	addi	sp,sp,8
   8b4cc:	f800283a 	ret

0008b4d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8b4d0:	defffd04 	addi	sp,sp,-12
   8b4d4:	dfc00215 	stw	ra,8(sp)
   8b4d8:	df000115 	stw	fp,4(sp)
   8b4dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8b4e0:	00800274 	movhi	r2,9
   8b4e4:	10b12504 	addi	r2,r2,-15212
   8b4e8:	e0bfff15 	stw	r2,-4(fp)
   8b4ec:	00000606 	br	8b508 <_do_dtors+0x38>
        (*dtor) (); 
   8b4f0:	e0bfff17 	ldw	r2,-4(fp)
   8b4f4:	10800017 	ldw	r2,0(r2)
   8b4f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8b4fc:	e0bfff17 	ldw	r2,-4(fp)
   8b500:	10bfff04 	addi	r2,r2,-4
   8b504:	e0bfff15 	stw	r2,-4(fp)
   8b508:	e0ffff17 	ldw	r3,-4(fp)
   8b50c:	00800274 	movhi	r2,9
   8b510:	10b12604 	addi	r2,r2,-15208
   8b514:	18bff62e 	bgeu	r3,r2,8b4f0 <_do_dtors+0x20>
        (*dtor) (); 
}
   8b518:	e037883a 	mov	sp,fp
   8b51c:	dfc00117 	ldw	ra,4(sp)
   8b520:	df000017 	ldw	fp,0(sp)
   8b524:	dec00204 	addi	sp,sp,8
   8b528:	f800283a 	ret

0008b52c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8b52c:	deffff04 	addi	sp,sp,-4
   8b530:	df000015 	stw	fp,0(sp)
   8b534:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8b538:	e037883a 	mov	sp,fp
   8b53c:	df000017 	ldw	fp,0(sp)
   8b540:	dec00104 	addi	sp,sp,4
   8b544:	f800283a 	ret

0008b548 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8b548:	defff904 	addi	sp,sp,-28
   8b54c:	dfc00615 	stw	ra,24(sp)
   8b550:	df000515 	stw	fp,20(sp)
   8b554:	df000504 	addi	fp,sp,20
   8b558:	e13ffc15 	stw	r4,-16(fp)
   8b55c:	e17ffd15 	stw	r5,-12(fp)
   8b560:	e1bffe15 	stw	r6,-8(fp)
   8b564:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8b568:	e0800217 	ldw	r2,8(fp)
   8b56c:	d8800015 	stw	r2,0(sp)
   8b570:	e13ffc17 	ldw	r4,-16(fp)
   8b574:	e17ffd17 	ldw	r5,-12(fp)
   8b578:	e1bffe17 	ldw	r6,-8(fp)
   8b57c:	e1ffff17 	ldw	r7,-4(fp)
   8b580:	008b7200 	call	8b720 <alt_iic_isr_register>
}  
   8b584:	e037883a 	mov	sp,fp
   8b588:	dfc00117 	ldw	ra,4(sp)
   8b58c:	df000017 	ldw	fp,0(sp)
   8b590:	dec00204 	addi	sp,sp,8
   8b594:	f800283a 	ret

0008b598 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8b598:	defff904 	addi	sp,sp,-28
   8b59c:	df000615 	stw	fp,24(sp)
   8b5a0:	df000604 	addi	fp,sp,24
   8b5a4:	e13ffe15 	stw	r4,-8(fp)
   8b5a8:	e17fff15 	stw	r5,-4(fp)
   8b5ac:	e0bfff17 	ldw	r2,-4(fp)
   8b5b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b5b4:	0005303a 	rdctl	r2,status
   8b5b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b5bc:	e0fffb17 	ldw	r3,-20(fp)
   8b5c0:	00bfff84 	movi	r2,-2
   8b5c4:	1884703a 	and	r2,r3,r2
   8b5c8:	1001703a 	wrctl	status,r2
  
  return context;
   8b5cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b5d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8b5d4:	e0bffa17 	ldw	r2,-24(fp)
   8b5d8:	00c00044 	movi	r3,1
   8b5dc:	1884983a 	sll	r2,r3,r2
   8b5e0:	1007883a 	mov	r3,r2
   8b5e4:	00800274 	movhi	r2,9
   8b5e8:	10bf2e04 	addi	r2,r2,-840
   8b5ec:	10800017 	ldw	r2,0(r2)
   8b5f0:	1886b03a 	or	r3,r3,r2
   8b5f4:	00800274 	movhi	r2,9
   8b5f8:	10bf2e04 	addi	r2,r2,-840
   8b5fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b600:	00800274 	movhi	r2,9
   8b604:	10bf2e04 	addi	r2,r2,-840
   8b608:	10800017 	ldw	r2,0(r2)
   8b60c:	100170fa 	wrctl	ienable,r2
   8b610:	e0bffc17 	ldw	r2,-16(fp)
   8b614:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b618:	e0bffd17 	ldw	r2,-12(fp)
   8b61c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b620:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8b624:	e037883a 	mov	sp,fp
   8b628:	df000017 	ldw	fp,0(sp)
   8b62c:	dec00104 	addi	sp,sp,4
   8b630:	f800283a 	ret

0008b634 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8b634:	defff904 	addi	sp,sp,-28
   8b638:	df000615 	stw	fp,24(sp)
   8b63c:	df000604 	addi	fp,sp,24
   8b640:	e13ffe15 	stw	r4,-8(fp)
   8b644:	e17fff15 	stw	r5,-4(fp)
   8b648:	e0bfff17 	ldw	r2,-4(fp)
   8b64c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b650:	0005303a 	rdctl	r2,status
   8b654:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b658:	e0fffb17 	ldw	r3,-20(fp)
   8b65c:	00bfff84 	movi	r2,-2
   8b660:	1884703a 	and	r2,r3,r2
   8b664:	1001703a 	wrctl	status,r2
  
  return context;
   8b668:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b66c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8b670:	e0bffa17 	ldw	r2,-24(fp)
   8b674:	00c00044 	movi	r3,1
   8b678:	1884983a 	sll	r2,r3,r2
   8b67c:	0084303a 	nor	r2,zero,r2
   8b680:	1007883a 	mov	r3,r2
   8b684:	00800274 	movhi	r2,9
   8b688:	10bf2e04 	addi	r2,r2,-840
   8b68c:	10800017 	ldw	r2,0(r2)
   8b690:	1886703a 	and	r3,r3,r2
   8b694:	00800274 	movhi	r2,9
   8b698:	10bf2e04 	addi	r2,r2,-840
   8b69c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b6a0:	00800274 	movhi	r2,9
   8b6a4:	10bf2e04 	addi	r2,r2,-840
   8b6a8:	10800017 	ldw	r2,0(r2)
   8b6ac:	100170fa 	wrctl	ienable,r2
   8b6b0:	e0bffc17 	ldw	r2,-16(fp)
   8b6b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b6b8:	e0bffd17 	ldw	r2,-12(fp)
   8b6bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b6c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8b6c4:	e037883a 	mov	sp,fp
   8b6c8:	df000017 	ldw	fp,0(sp)
   8b6cc:	dec00104 	addi	sp,sp,4
   8b6d0:	f800283a 	ret

0008b6d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8b6d4:	defffc04 	addi	sp,sp,-16
   8b6d8:	df000315 	stw	fp,12(sp)
   8b6dc:	df000304 	addi	fp,sp,12
   8b6e0:	e13ffe15 	stw	r4,-8(fp)
   8b6e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8b6e8:	000530fa 	rdctl	r2,ienable
   8b6ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8b6f0:	e0bfff17 	ldw	r2,-4(fp)
   8b6f4:	00c00044 	movi	r3,1
   8b6f8:	1884983a 	sll	r2,r3,r2
   8b6fc:	1007883a 	mov	r3,r2
   8b700:	e0bffd17 	ldw	r2,-12(fp)
   8b704:	1884703a 	and	r2,r3,r2
   8b708:	1004c03a 	cmpne	r2,r2,zero
   8b70c:	10803fcc 	andi	r2,r2,255
}
   8b710:	e037883a 	mov	sp,fp
   8b714:	df000017 	ldw	fp,0(sp)
   8b718:	dec00104 	addi	sp,sp,4
   8b71c:	f800283a 	ret

0008b720 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8b720:	defff504 	addi	sp,sp,-44
   8b724:	dfc00a15 	stw	ra,40(sp)
   8b728:	df000915 	stw	fp,36(sp)
   8b72c:	df000904 	addi	fp,sp,36
   8b730:	e13ffc15 	stw	r4,-16(fp)
   8b734:	e17ffd15 	stw	r5,-12(fp)
   8b738:	e1bffe15 	stw	r6,-8(fp)
   8b73c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8b740:	00bffa84 	movi	r2,-22
   8b744:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8b748:	e0bffd17 	ldw	r2,-12(fp)
   8b74c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8b750:	e0bff817 	ldw	r2,-32(fp)
   8b754:	10800808 	cmpgei	r2,r2,32
   8b758:	1000271e 	bne	r2,zero,8b7f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b75c:	0005303a 	rdctl	r2,status
   8b760:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b764:	e0fffa17 	ldw	r3,-24(fp)
   8b768:	00bfff84 	movi	r2,-2
   8b76c:	1884703a 	and	r2,r3,r2
   8b770:	1001703a 	wrctl	status,r2
  
  return context;
   8b774:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8b778:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   8b77c:	00c00274 	movhi	r3,9
   8b780:	18ff3b04 	addi	r3,r3,-788
   8b784:	e0bff817 	ldw	r2,-32(fp)
   8b788:	100490fa 	slli	r2,r2,3
   8b78c:	1885883a 	add	r2,r3,r2
   8b790:	e0fffe17 	ldw	r3,-8(fp)
   8b794:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8b798:	00c00274 	movhi	r3,9
   8b79c:	18ff3b04 	addi	r3,r3,-788
   8b7a0:	e0bff817 	ldw	r2,-32(fp)
   8b7a4:	100490fa 	slli	r2,r2,3
   8b7a8:	1885883a 	add	r2,r3,r2
   8b7ac:	10800104 	addi	r2,r2,4
   8b7b0:	e0ffff17 	ldw	r3,-4(fp)
   8b7b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8b7b8:	e0bffe17 	ldw	r2,-8(fp)
   8b7bc:	10000526 	beq	r2,zero,8b7d4 <alt_iic_isr_register+0xb4>
   8b7c0:	e0bff817 	ldw	r2,-32(fp)
   8b7c4:	e13ffc17 	ldw	r4,-16(fp)
   8b7c8:	100b883a 	mov	r5,r2
   8b7cc:	008b5980 	call	8b598 <alt_ic_irq_enable>
   8b7d0:	00000406 	br	8b7e4 <alt_iic_isr_register+0xc4>
   8b7d4:	e0bff817 	ldw	r2,-32(fp)
   8b7d8:	e13ffc17 	ldw	r4,-16(fp)
   8b7dc:	100b883a 	mov	r5,r2
   8b7e0:	008b6340 	call	8b634 <alt_ic_irq_disable>
   8b7e4:	e0bff715 	stw	r2,-36(fp)
   8b7e8:	e0bff917 	ldw	r2,-28(fp)
   8b7ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b7f0:	e0bffb17 	ldw	r2,-20(fp)
   8b7f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8b7f8:	e0bff717 	ldw	r2,-36(fp)
}
   8b7fc:	e037883a 	mov	sp,fp
   8b800:	dfc00117 	ldw	ra,4(sp)
   8b804:	df000017 	ldw	fp,0(sp)
   8b808:	dec00204 	addi	sp,sp,8
   8b80c:	f800283a 	ret

0008b810 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8b810:	defff804 	addi	sp,sp,-32
   8b814:	dfc00715 	stw	ra,28(sp)
   8b818:	df000615 	stw	fp,24(sp)
   8b81c:	dc000515 	stw	r16,20(sp)
   8b820:	df000504 	addi	fp,sp,20
   8b824:	e13ffc15 	stw	r4,-16(fp)
   8b828:	e17ffd15 	stw	r5,-12(fp)
   8b82c:	e1bffe15 	stw	r6,-8(fp)
   8b830:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8b834:	e13ffd17 	ldw	r4,-12(fp)
   8b838:	e17ffe17 	ldw	r5,-8(fp)
   8b83c:	e1bfff17 	ldw	r6,-4(fp)
   8b840:	008baa80 	call	8baa8 <open>
   8b844:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8b848:	e0bffb17 	ldw	r2,-20(fp)
   8b84c:	10002216 	blt	r2,zero,8b8d8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   8b850:	04000274 	movhi	r16,9
   8b854:	84340704 	addi	r16,r16,-12260
   8b858:	e0bffb17 	ldw	r2,-20(fp)
   8b85c:	1009883a 	mov	r4,r2
   8b860:	01400304 	movi	r5,12
   8b864:	00895300 	call	89530 <__mulsi3>
   8b868:	8085883a 	add	r2,r16,r2
   8b86c:	10c00017 	ldw	r3,0(r2)
   8b870:	e0bffc17 	ldw	r2,-16(fp)
   8b874:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8b878:	04000274 	movhi	r16,9
   8b87c:	84340704 	addi	r16,r16,-12260
   8b880:	e0bffb17 	ldw	r2,-20(fp)
   8b884:	1009883a 	mov	r4,r2
   8b888:	01400304 	movi	r5,12
   8b88c:	00895300 	call	89530 <__mulsi3>
   8b890:	8085883a 	add	r2,r16,r2
   8b894:	10800104 	addi	r2,r2,4
   8b898:	10c00017 	ldw	r3,0(r2)
   8b89c:	e0bffc17 	ldw	r2,-16(fp)
   8b8a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8b8a4:	04000274 	movhi	r16,9
   8b8a8:	84340704 	addi	r16,r16,-12260
   8b8ac:	e0bffb17 	ldw	r2,-20(fp)
   8b8b0:	1009883a 	mov	r4,r2
   8b8b4:	01400304 	movi	r5,12
   8b8b8:	00895300 	call	89530 <__mulsi3>
   8b8bc:	8085883a 	add	r2,r16,r2
   8b8c0:	10800204 	addi	r2,r2,8
   8b8c4:	10c00017 	ldw	r3,0(r2)
   8b8c8:	e0bffc17 	ldw	r2,-16(fp)
   8b8cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8b8d0:	e13ffb17 	ldw	r4,-20(fp)
   8b8d4:	008a3200 	call	8a320 <alt_release_fd>
  }
} 
   8b8d8:	e037883a 	mov	sp,fp
   8b8dc:	dfc00217 	ldw	ra,8(sp)
   8b8e0:	df000117 	ldw	fp,4(sp)
   8b8e4:	dc000017 	ldw	r16,0(sp)
   8b8e8:	dec00304 	addi	sp,sp,12
   8b8ec:	f800283a 	ret

0008b8f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8b8f0:	defffb04 	addi	sp,sp,-20
   8b8f4:	dfc00415 	stw	ra,16(sp)
   8b8f8:	df000315 	stw	fp,12(sp)
   8b8fc:	df000304 	addi	fp,sp,12
   8b900:	e13ffd15 	stw	r4,-12(fp)
   8b904:	e17ffe15 	stw	r5,-8(fp)
   8b908:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8b90c:	01000274 	movhi	r4,9
   8b910:	21340a04 	addi	r4,r4,-12248
   8b914:	e17ffd17 	ldw	r5,-12(fp)
   8b918:	01800044 	movi	r6,1
   8b91c:	01c07fc4 	movi	r7,511
   8b920:	008b8100 	call	8b810 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8b924:	01000274 	movhi	r4,9
   8b928:	21340704 	addi	r4,r4,-12260
   8b92c:	e17ffe17 	ldw	r5,-8(fp)
   8b930:	000d883a 	mov	r6,zero
   8b934:	01c07fc4 	movi	r7,511
   8b938:	008b8100 	call	8b810 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8b93c:	01000274 	movhi	r4,9
   8b940:	21340d04 	addi	r4,r4,-12236
   8b944:	e17fff17 	ldw	r5,-4(fp)
   8b948:	01800044 	movi	r6,1
   8b94c:	01c07fc4 	movi	r7,511
   8b950:	008b8100 	call	8b810 <alt_open_fd>
}  
   8b954:	e037883a 	mov	sp,fp
   8b958:	dfc00117 	ldw	ra,4(sp)
   8b95c:	df000017 	ldw	fp,0(sp)
   8b960:	dec00204 	addi	sp,sp,8
   8b964:	f800283a 	ret

0008b968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b968:	defffe04 	addi	sp,sp,-8
   8b96c:	dfc00115 	stw	ra,4(sp)
   8b970:	df000015 	stw	fp,0(sp)
   8b974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b978:	00800274 	movhi	r2,9
   8b97c:	10b88904 	addi	r2,r2,-7644
   8b980:	10800017 	ldw	r2,0(r2)
   8b984:	10000526 	beq	r2,zero,8b99c <alt_get_errno+0x34>
   8b988:	00800274 	movhi	r2,9
   8b98c:	10b88904 	addi	r2,r2,-7644
   8b990:	10800017 	ldw	r2,0(r2)
   8b994:	103ee83a 	callr	r2
   8b998:	00000206 	br	8b9a4 <alt_get_errno+0x3c>
   8b99c:	00800274 	movhi	r2,9
   8b9a0:	10bf2a04 	addi	r2,r2,-856
}
   8b9a4:	e037883a 	mov	sp,fp
   8b9a8:	dfc00117 	ldw	ra,4(sp)
   8b9ac:	df000017 	ldw	fp,0(sp)
   8b9b0:	dec00204 	addi	sp,sp,8
   8b9b4:	f800283a 	ret

0008b9b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8b9b8:	defffb04 	addi	sp,sp,-20
   8b9bc:	dfc00415 	stw	ra,16(sp)
   8b9c0:	df000315 	stw	fp,12(sp)
   8b9c4:	dc000215 	stw	r16,8(sp)
   8b9c8:	df000204 	addi	fp,sp,8
   8b9cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8b9d0:	e0bfff17 	ldw	r2,-4(fp)
   8b9d4:	10800217 	ldw	r2,8(r2)
   8b9d8:	10d00034 	orhi	r3,r2,16384
   8b9dc:	e0bfff17 	ldw	r2,-4(fp)
   8b9e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8b9e4:	e03ffe15 	stw	zero,-8(fp)
   8b9e8:	00002206 	br	8ba74 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8b9ec:	04000274 	movhi	r16,9
   8b9f0:	84340704 	addi	r16,r16,-12260
   8b9f4:	e0bffe17 	ldw	r2,-8(fp)
   8b9f8:	1009883a 	mov	r4,r2
   8b9fc:	01400304 	movi	r5,12
   8ba00:	00895300 	call	89530 <__mulsi3>
   8ba04:	8085883a 	add	r2,r16,r2
   8ba08:	10c00017 	ldw	r3,0(r2)
   8ba0c:	e0bfff17 	ldw	r2,-4(fp)
   8ba10:	10800017 	ldw	r2,0(r2)
   8ba14:	1880141e 	bne	r3,r2,8ba68 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8ba18:	04000274 	movhi	r16,9
   8ba1c:	84340704 	addi	r16,r16,-12260
   8ba20:	e0bffe17 	ldw	r2,-8(fp)
   8ba24:	1009883a 	mov	r4,r2
   8ba28:	01400304 	movi	r5,12
   8ba2c:	00895300 	call	89530 <__mulsi3>
   8ba30:	8085883a 	add	r2,r16,r2
   8ba34:	10800204 	addi	r2,r2,8
   8ba38:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8ba3c:	10000a0e 	bge	r2,zero,8ba68 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8ba40:	e13ffe17 	ldw	r4,-8(fp)
   8ba44:	01400304 	movi	r5,12
   8ba48:	00895300 	call	89530 <__mulsi3>
   8ba4c:	00c00274 	movhi	r3,9
   8ba50:	18f40704 	addi	r3,r3,-12260
   8ba54:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8ba58:	e0bfff17 	ldw	r2,-4(fp)
   8ba5c:	18800226 	beq	r3,r2,8ba68 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8ba60:	00bffcc4 	movi	r2,-13
   8ba64:	00000a06 	br	8ba90 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8ba68:	e0bffe17 	ldw	r2,-8(fp)
   8ba6c:	10800044 	addi	r2,r2,1
   8ba70:	e0bffe15 	stw	r2,-8(fp)
   8ba74:	00800274 	movhi	r2,9
   8ba78:	10b88804 	addi	r2,r2,-7648
   8ba7c:	10800017 	ldw	r2,0(r2)
   8ba80:	1007883a 	mov	r3,r2
   8ba84:	e0bffe17 	ldw	r2,-8(fp)
   8ba88:	18bfd82e 	bgeu	r3,r2,8b9ec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8ba8c:	0005883a 	mov	r2,zero
}
   8ba90:	e037883a 	mov	sp,fp
   8ba94:	dfc00217 	ldw	ra,8(sp)
   8ba98:	df000117 	ldw	fp,4(sp)
   8ba9c:	dc000017 	ldw	r16,0(sp)
   8baa0:	dec00304 	addi	sp,sp,12
   8baa4:	f800283a 	ret

0008baa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8baa8:	defff604 	addi	sp,sp,-40
   8baac:	dfc00915 	stw	ra,36(sp)
   8bab0:	df000815 	stw	fp,32(sp)
   8bab4:	df000804 	addi	fp,sp,32
   8bab8:	e13ffd15 	stw	r4,-12(fp)
   8babc:	e17ffe15 	stw	r5,-8(fp)
   8bac0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8bac4:	00bfffc4 	movi	r2,-1
   8bac8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8bacc:	00bffb44 	movi	r2,-19
   8bad0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8bad4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8bad8:	e13ffd17 	ldw	r4,-12(fp)
   8badc:	01400274 	movhi	r5,9
   8bae0:	29788604 	addi	r5,r5,-7656
   8bae4:	008bdbc0 	call	8bdbc <alt_find_dev>
   8bae8:	e0bff815 	stw	r2,-32(fp)
   8baec:	e0bff817 	ldw	r2,-32(fp)
   8baf0:	1000051e 	bne	r2,zero,8bb08 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8baf4:	e13ffd17 	ldw	r4,-12(fp)
   8baf8:	008be4c0 	call	8be4c <alt_find_file>
   8bafc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8bb00:	00800044 	movi	r2,1
   8bb04:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8bb08:	e0bff817 	ldw	r2,-32(fp)
   8bb0c:	10002a26 	beq	r2,zero,8bbb8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8bb10:	e13ff817 	ldw	r4,-32(fp)
   8bb14:	008bf600 	call	8bf60 <alt_get_fd>
   8bb18:	e0bff915 	stw	r2,-28(fp)
   8bb1c:	e0bff917 	ldw	r2,-28(fp)
   8bb20:	1000030e 	bge	r2,zero,8bb30 <open+0x88>
    {
      status = index;
   8bb24:	e0bff917 	ldw	r2,-28(fp)
   8bb28:	e0bffa15 	stw	r2,-24(fp)
   8bb2c:	00002406 	br	8bbc0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   8bb30:	e13ff917 	ldw	r4,-28(fp)
   8bb34:	01400304 	movi	r5,12
   8bb38:	00895300 	call	89530 <__mulsi3>
   8bb3c:	00c00274 	movhi	r3,9
   8bb40:	18f40704 	addi	r3,r3,-12260
   8bb44:	10c5883a 	add	r2,r2,r3
   8bb48:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8bb4c:	e0fffe17 	ldw	r3,-8(fp)
   8bb50:	00900034 	movhi	r2,16384
   8bb54:	10bfffc4 	addi	r2,r2,-1
   8bb58:	1886703a 	and	r3,r3,r2
   8bb5c:	e0bffc17 	ldw	r2,-16(fp)
   8bb60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8bb64:	e0bffb17 	ldw	r2,-20(fp)
   8bb68:	1000051e 	bne	r2,zero,8bb80 <open+0xd8>
   8bb6c:	e13ffc17 	ldw	r4,-16(fp)
   8bb70:	008b9b80 	call	8b9b8 <alt_file_locked>
   8bb74:	e0bffa15 	stw	r2,-24(fp)
   8bb78:	e0bffa17 	ldw	r2,-24(fp)
   8bb7c:	10001016 	blt	r2,zero,8bbc0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8bb80:	e0bff817 	ldw	r2,-32(fp)
   8bb84:	10800317 	ldw	r2,12(r2)
   8bb88:	10000826 	beq	r2,zero,8bbac <open+0x104>
   8bb8c:	e0bff817 	ldw	r2,-32(fp)
   8bb90:	10800317 	ldw	r2,12(r2)
   8bb94:	e13ffc17 	ldw	r4,-16(fp)
   8bb98:	e17ffd17 	ldw	r5,-12(fp)
   8bb9c:	e1bffe17 	ldw	r6,-8(fp)
   8bba0:	e1ffff17 	ldw	r7,-4(fp)
   8bba4:	103ee83a 	callr	r2
   8bba8:	00000106 	br	8bbb0 <open+0x108>
   8bbac:	0005883a 	mov	r2,zero
   8bbb0:	e0bffa15 	stw	r2,-24(fp)
   8bbb4:	00000206 	br	8bbc0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8bbb8:	00bffb44 	movi	r2,-19
   8bbbc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8bbc0:	e0bffa17 	ldw	r2,-24(fp)
   8bbc4:	1000080e 	bge	r2,zero,8bbe8 <open+0x140>
  {
    alt_release_fd (index);  
   8bbc8:	e13ff917 	ldw	r4,-28(fp)
   8bbcc:	008a3200 	call	8a320 <alt_release_fd>
    ALT_ERRNO = -status;
   8bbd0:	008b9680 	call	8b968 <alt_get_errno>
   8bbd4:	e0fffa17 	ldw	r3,-24(fp)
   8bbd8:	00c7c83a 	sub	r3,zero,r3
   8bbdc:	10c00015 	stw	r3,0(r2)
    return -1;
   8bbe0:	00bfffc4 	movi	r2,-1
   8bbe4:	00000106 	br	8bbec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   8bbe8:	e0bff917 	ldw	r2,-28(fp)
}
   8bbec:	e037883a 	mov	sp,fp
   8bbf0:	dfc00117 	ldw	ra,4(sp)
   8bbf4:	df000017 	ldw	fp,0(sp)
   8bbf8:	dec00204 	addi	sp,sp,8
   8bbfc:	f800283a 	ret

0008bc00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8bc00:	defffa04 	addi	sp,sp,-24
   8bc04:	df000515 	stw	fp,20(sp)
   8bc08:	df000504 	addi	fp,sp,20
   8bc0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bc10:	0005303a 	rdctl	r2,status
   8bc14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bc18:	e0fffc17 	ldw	r3,-16(fp)
   8bc1c:	00bfff84 	movi	r2,-2
   8bc20:	1884703a 	and	r2,r3,r2
   8bc24:	1001703a 	wrctl	status,r2
  
  return context;
   8bc28:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8bc2c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8bc30:	e0bfff17 	ldw	r2,-4(fp)
   8bc34:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8bc38:	e0bffd17 	ldw	r2,-12(fp)
   8bc3c:	10800017 	ldw	r2,0(r2)
   8bc40:	e0fffd17 	ldw	r3,-12(fp)
   8bc44:	18c00117 	ldw	r3,4(r3)
   8bc48:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8bc4c:	e0bffd17 	ldw	r2,-12(fp)
   8bc50:	10800117 	ldw	r2,4(r2)
   8bc54:	e0fffd17 	ldw	r3,-12(fp)
   8bc58:	18c00017 	ldw	r3,0(r3)
   8bc5c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8bc60:	e0bffd17 	ldw	r2,-12(fp)
   8bc64:	e0fffd17 	ldw	r3,-12(fp)
   8bc68:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8bc6c:	e0bffd17 	ldw	r2,-12(fp)
   8bc70:	e0fffd17 	ldw	r3,-12(fp)
   8bc74:	10c00015 	stw	r3,0(r2)
   8bc78:	e0bffb17 	ldw	r2,-20(fp)
   8bc7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bc80:	e0bffe17 	ldw	r2,-8(fp)
   8bc84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8bc88:	e037883a 	mov	sp,fp
   8bc8c:	df000017 	ldw	fp,0(sp)
   8bc90:	dec00104 	addi	sp,sp,4
   8bc94:	f800283a 	ret

0008bc98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8bc98:	defffb04 	addi	sp,sp,-20
   8bc9c:	dfc00415 	stw	ra,16(sp)
   8bca0:	df000315 	stw	fp,12(sp)
   8bca4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8bca8:	d0a00d17 	ldw	r2,-32716(gp)
   8bcac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8bcb0:	d0a6b117 	ldw	r2,-25916(gp)
   8bcb4:	10800044 	addi	r2,r2,1
   8bcb8:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8bcbc:	00002e06 	br	8bd78 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8bcc0:	e0bffd17 	ldw	r2,-12(fp)
   8bcc4:	10800017 	ldw	r2,0(r2)
   8bcc8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8bccc:	e0bffd17 	ldw	r2,-12(fp)
   8bcd0:	10800403 	ldbu	r2,16(r2)
   8bcd4:	10803fcc 	andi	r2,r2,255
   8bcd8:	10000426 	beq	r2,zero,8bcec <alt_tick+0x54>
   8bcdc:	d0a6b117 	ldw	r2,-25916(gp)
   8bce0:	1000021e 	bne	r2,zero,8bcec <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8bce4:	e0bffd17 	ldw	r2,-12(fp)
   8bce8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8bcec:	e0bffd17 	ldw	r2,-12(fp)
   8bcf0:	10800217 	ldw	r2,8(r2)
   8bcf4:	d0e6b117 	ldw	r3,-25916(gp)
   8bcf8:	18801d36 	bltu	r3,r2,8bd70 <alt_tick+0xd8>
   8bcfc:	e0bffd17 	ldw	r2,-12(fp)
   8bd00:	10800403 	ldbu	r2,16(r2)
   8bd04:	10803fcc 	andi	r2,r2,255
   8bd08:	1000191e 	bne	r2,zero,8bd70 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8bd0c:	e0bffd17 	ldw	r2,-12(fp)
   8bd10:	10c00317 	ldw	r3,12(r2)
   8bd14:	e0bffd17 	ldw	r2,-12(fp)
   8bd18:	10800517 	ldw	r2,20(r2)
   8bd1c:	1009883a 	mov	r4,r2
   8bd20:	183ee83a 	callr	r3
   8bd24:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8bd28:	e0bfff17 	ldw	r2,-4(fp)
   8bd2c:	1000031e 	bne	r2,zero,8bd3c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8bd30:	e13ffd17 	ldw	r4,-12(fp)
   8bd34:	008bc000 	call	8bc00 <alt_alarm_stop>
   8bd38:	00000d06 	br	8bd70 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8bd3c:	e0bffd17 	ldw	r2,-12(fp)
   8bd40:	10c00217 	ldw	r3,8(r2)
   8bd44:	e0bfff17 	ldw	r2,-4(fp)
   8bd48:	1887883a 	add	r3,r3,r2
   8bd4c:	e0bffd17 	ldw	r2,-12(fp)
   8bd50:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8bd54:	e0bffd17 	ldw	r2,-12(fp)
   8bd58:	10c00217 	ldw	r3,8(r2)
   8bd5c:	d0a6b117 	ldw	r2,-25916(gp)
   8bd60:	1880032e 	bgeu	r3,r2,8bd70 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8bd64:	e0bffd17 	ldw	r2,-12(fp)
   8bd68:	00c00044 	movi	r3,1
   8bd6c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8bd70:	e0bffe17 	ldw	r2,-8(fp)
   8bd74:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8bd78:	e0fffd17 	ldw	r3,-12(fp)
   8bd7c:	d0a00d04 	addi	r2,gp,-32716
   8bd80:	18bfcf1e 	bne	r3,r2,8bcc0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8bd84:	0001883a 	nop
}
   8bd88:	e037883a 	mov	sp,fp
   8bd8c:	dfc00117 	ldw	ra,4(sp)
   8bd90:	df000017 	ldw	fp,0(sp)
   8bd94:	dec00204 	addi	sp,sp,8
   8bd98:	f800283a 	ret

0008bd9c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8bd9c:	deffff04 	addi	sp,sp,-4
   8bda0:	df000015 	stw	fp,0(sp)
   8bda4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8bda8:	000170fa 	wrctl	ienable,zero
}
   8bdac:	e037883a 	mov	sp,fp
   8bdb0:	df000017 	ldw	fp,0(sp)
   8bdb4:	dec00104 	addi	sp,sp,4
   8bdb8:	f800283a 	ret

0008bdbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8bdbc:	defffa04 	addi	sp,sp,-24
   8bdc0:	dfc00515 	stw	ra,20(sp)
   8bdc4:	df000415 	stw	fp,16(sp)
   8bdc8:	df000404 	addi	fp,sp,16
   8bdcc:	e13ffe15 	stw	r4,-8(fp)
   8bdd0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8bdd4:	e0bfff17 	ldw	r2,-4(fp)
   8bdd8:	10800017 	ldw	r2,0(r2)
   8bddc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8bde0:	e13ffe17 	ldw	r4,-8(fp)
   8bde4:	008752c0 	call	8752c <strlen>
   8bde8:	10800044 	addi	r2,r2,1
   8bdec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8bdf0:	00000d06 	br	8be28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8bdf4:	e0bffc17 	ldw	r2,-16(fp)
   8bdf8:	10c00217 	ldw	r3,8(r2)
   8bdfc:	e0bffd17 	ldw	r2,-12(fp)
   8be00:	1809883a 	mov	r4,r3
   8be04:	e17ffe17 	ldw	r5,-8(fp)
   8be08:	100d883a 	mov	r6,r2
   8be0c:	008c1100 	call	8c110 <memcmp>
   8be10:	1000021e 	bne	r2,zero,8be1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8be14:	e0bffc17 	ldw	r2,-16(fp)
   8be18:	00000706 	br	8be38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8be1c:	e0bffc17 	ldw	r2,-16(fp)
   8be20:	10800017 	ldw	r2,0(r2)
   8be24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8be28:	e0fffc17 	ldw	r3,-16(fp)
   8be2c:	e0bfff17 	ldw	r2,-4(fp)
   8be30:	18bff01e 	bne	r3,r2,8bdf4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8be34:	0005883a 	mov	r2,zero
}
   8be38:	e037883a 	mov	sp,fp
   8be3c:	dfc00117 	ldw	ra,4(sp)
   8be40:	df000017 	ldw	fp,0(sp)
   8be44:	dec00204 	addi	sp,sp,8
   8be48:	f800283a 	ret

0008be4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8be4c:	defffb04 	addi	sp,sp,-20
   8be50:	dfc00415 	stw	ra,16(sp)
   8be54:	df000315 	stw	fp,12(sp)
   8be58:	df000304 	addi	fp,sp,12
   8be5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8be60:	00800274 	movhi	r2,9
   8be64:	10b88404 	addi	r2,r2,-7664
   8be68:	10800017 	ldw	r2,0(r2)
   8be6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8be70:	00003106 	br	8bf38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   8be74:	e0bffd17 	ldw	r2,-12(fp)
   8be78:	10800217 	ldw	r2,8(r2)
   8be7c:	1009883a 	mov	r4,r2
   8be80:	008752c0 	call	8752c <strlen>
   8be84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   8be88:	e0bffd17 	ldw	r2,-12(fp)
   8be8c:	10c00217 	ldw	r3,8(r2)
   8be90:	e0bffe17 	ldw	r2,-8(fp)
   8be94:	10bfffc4 	addi	r2,r2,-1
   8be98:	1885883a 	add	r2,r3,r2
   8be9c:	10800003 	ldbu	r2,0(r2)
   8bea0:	10803fcc 	andi	r2,r2,255
   8bea4:	1080201c 	xori	r2,r2,128
   8bea8:	10bfe004 	addi	r2,r2,-128
   8beac:	10800bd8 	cmpnei	r2,r2,47
   8beb0:	1000031e 	bne	r2,zero,8bec0 <alt_find_file+0x74>
    {
      len -= 1;
   8beb4:	e0bffe17 	ldw	r2,-8(fp)
   8beb8:	10bfffc4 	addi	r2,r2,-1
   8bebc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8bec0:	e0bffe17 	ldw	r2,-8(fp)
   8bec4:	e0ffff17 	ldw	r3,-4(fp)
   8bec8:	1885883a 	add	r2,r3,r2
   8becc:	10800003 	ldbu	r2,0(r2)
   8bed0:	10803fcc 	andi	r2,r2,255
   8bed4:	1080201c 	xori	r2,r2,128
   8bed8:	10bfe004 	addi	r2,r2,-128
   8bedc:	10800be0 	cmpeqi	r2,r2,47
   8bee0:	1000081e 	bne	r2,zero,8bf04 <alt_find_file+0xb8>
   8bee4:	e0bffe17 	ldw	r2,-8(fp)
   8bee8:	e0ffff17 	ldw	r3,-4(fp)
   8beec:	1885883a 	add	r2,r3,r2
   8bef0:	10800003 	ldbu	r2,0(r2)
   8bef4:	10803fcc 	andi	r2,r2,255
   8bef8:	1080201c 	xori	r2,r2,128
   8befc:	10bfe004 	addi	r2,r2,-128
   8bf00:	10000a1e 	bne	r2,zero,8bf2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8bf04:	e0bffd17 	ldw	r2,-12(fp)
   8bf08:	10c00217 	ldw	r3,8(r2)
   8bf0c:	e0bffe17 	ldw	r2,-8(fp)
   8bf10:	1809883a 	mov	r4,r3
   8bf14:	e17fff17 	ldw	r5,-4(fp)
   8bf18:	100d883a 	mov	r6,r2
   8bf1c:	008c1100 	call	8c110 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8bf20:	1000021e 	bne	r2,zero,8bf2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8bf24:	e0bffd17 	ldw	r2,-12(fp)
   8bf28:	00000806 	br	8bf4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   8bf2c:	e0bffd17 	ldw	r2,-12(fp)
   8bf30:	10800017 	ldw	r2,0(r2)
   8bf34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8bf38:	e0fffd17 	ldw	r3,-12(fp)
   8bf3c:	00800274 	movhi	r2,9
   8bf40:	10b88404 	addi	r2,r2,-7664
   8bf44:	18bfcb1e 	bne	r3,r2,8be74 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8bf48:	0005883a 	mov	r2,zero
}
   8bf4c:	e037883a 	mov	sp,fp
   8bf50:	dfc00117 	ldw	ra,4(sp)
   8bf54:	df000017 	ldw	fp,0(sp)
   8bf58:	dec00204 	addi	sp,sp,8
   8bf5c:	f800283a 	ret

0008bf60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8bf60:	defffa04 	addi	sp,sp,-24
   8bf64:	dfc00515 	stw	ra,20(sp)
   8bf68:	df000415 	stw	fp,16(sp)
   8bf6c:	dc000315 	stw	r16,12(sp)
   8bf70:	df000304 	addi	fp,sp,12
   8bf74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8bf78:	00bffa04 	movi	r2,-24
   8bf7c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8bf80:	e03ffd15 	stw	zero,-12(fp)
   8bf84:	00002106 	br	8c00c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   8bf88:	04000274 	movhi	r16,9
   8bf8c:	84340704 	addi	r16,r16,-12260
   8bf90:	e0bffd17 	ldw	r2,-12(fp)
   8bf94:	1009883a 	mov	r4,r2
   8bf98:	01400304 	movi	r5,12
   8bf9c:	00895300 	call	89530 <__mulsi3>
   8bfa0:	8085883a 	add	r2,r16,r2
   8bfa4:	10800017 	ldw	r2,0(r2)
   8bfa8:	1000151e 	bne	r2,zero,8c000 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   8bfac:	04000274 	movhi	r16,9
   8bfb0:	84340704 	addi	r16,r16,-12260
   8bfb4:	e0bffd17 	ldw	r2,-12(fp)
   8bfb8:	1009883a 	mov	r4,r2
   8bfbc:	01400304 	movi	r5,12
   8bfc0:	00895300 	call	89530 <__mulsi3>
   8bfc4:	8085883a 	add	r2,r16,r2
   8bfc8:	e0ffff17 	ldw	r3,-4(fp)
   8bfcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8bfd0:	00800274 	movhi	r2,9
   8bfd4:	10b88804 	addi	r2,r2,-7648
   8bfd8:	10c00017 	ldw	r3,0(r2)
   8bfdc:	e0bffd17 	ldw	r2,-12(fp)
   8bfe0:	1880040e 	bge	r3,r2,8bff4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   8bfe4:	00800274 	movhi	r2,9
   8bfe8:	10b88804 	addi	r2,r2,-7648
   8bfec:	e0fffd17 	ldw	r3,-12(fp)
   8bff0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   8bff4:	e0bffd17 	ldw	r2,-12(fp)
   8bff8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8bffc:	00000606 	br	8c018 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c000:	e0bffd17 	ldw	r2,-12(fp)
   8c004:	10800044 	addi	r2,r2,1
   8c008:	e0bffd15 	stw	r2,-12(fp)
   8c00c:	e0bffd17 	ldw	r2,-12(fp)
   8c010:	10800810 	cmplti	r2,r2,32
   8c014:	103fdc1e 	bne	r2,zero,8bf88 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8c018:	e0bffe17 	ldw	r2,-8(fp)
}
   8c01c:	e037883a 	mov	sp,fp
   8c020:	dfc00217 	ldw	ra,8(sp)
   8c024:	df000117 	ldw	fp,4(sp)
   8c028:	dc000017 	ldw	r16,0(sp)
   8c02c:	dec00304 	addi	sp,sp,12
   8c030:	f800283a 	ret

0008c034 <atexit>:
   8c034:	200b883a 	mov	r5,r4
   8c038:	000d883a 	mov	r6,zero
   8c03c:	0009883a 	mov	r4,zero
   8c040:	000f883a 	mov	r7,zero
   8c044:	008c18c1 	jmpi	8c18c <__register_exitproc>

0008c048 <exit>:
   8c048:	defffe04 	addi	sp,sp,-8
   8c04c:	000b883a 	mov	r5,zero
   8c050:	dc000015 	stw	r16,0(sp)
   8c054:	dfc00115 	stw	ra,4(sp)
   8c058:	2021883a 	mov	r16,r4
   8c05c:	008c2bc0 	call	8c2bc <__call_exitprocs>
   8c060:	00800274 	movhi	r2,9
   8c064:	10b87f04 	addi	r2,r2,-7684
   8c068:	11000017 	ldw	r4,0(r2)
   8c06c:	20800f17 	ldw	r2,60(r4)
   8c070:	10000126 	beq	r2,zero,8c078 <exit+0x30>
   8c074:	103ee83a 	callr	r2
   8c078:	8009883a 	mov	r4,r16
   8c07c:	008c45c0 	call	8c45c <_exit>

0008c080 <_fputs_r>:
   8c080:	defff804 	addi	sp,sp,-32
   8c084:	dc000515 	stw	r16,20(sp)
   8c088:	2021883a 	mov	r16,r4
   8c08c:	2809883a 	mov	r4,r5
   8c090:	dc400615 	stw	r17,24(sp)
   8c094:	dfc00715 	stw	ra,28(sp)
   8c098:	3023883a 	mov	r17,r6
   8c09c:	d9400315 	stw	r5,12(sp)
   8c0a0:	008752c0 	call	8752c <strlen>
   8c0a4:	d8800215 	stw	r2,8(sp)
   8c0a8:	d8800415 	stw	r2,16(sp)
   8c0ac:	d8800304 	addi	r2,sp,12
   8c0b0:	d8800015 	stw	r2,0(sp)
   8c0b4:	00800044 	movi	r2,1
   8c0b8:	d8800115 	stw	r2,4(sp)
   8c0bc:	80000426 	beq	r16,zero,8c0d0 <_fputs_r+0x50>
   8c0c0:	80800e17 	ldw	r2,56(r16)
   8c0c4:	1000021e 	bne	r2,zero,8c0d0 <_fputs_r+0x50>
   8c0c8:	8009883a 	mov	r4,r16
   8c0cc:	00840f40 	call	840f4 <__sinit>
   8c0d0:	8009883a 	mov	r4,r16
   8c0d4:	880b883a 	mov	r5,r17
   8c0d8:	d80d883a 	mov	r6,sp
   8c0dc:	00847480 	call	84748 <__sfvwrite_r>
   8c0e0:	dfc00717 	ldw	ra,28(sp)
   8c0e4:	dc400617 	ldw	r17,24(sp)
   8c0e8:	dc000517 	ldw	r16,20(sp)
   8c0ec:	dec00804 	addi	sp,sp,32
   8c0f0:	f800283a 	ret

0008c0f4 <fputs>:
   8c0f4:	00c00274 	movhi	r3,9
   8c0f8:	18f88004 	addi	r3,r3,-7680
   8c0fc:	2005883a 	mov	r2,r4
   8c100:	19000017 	ldw	r4,0(r3)
   8c104:	280d883a 	mov	r6,r5
   8c108:	100b883a 	mov	r5,r2
   8c10c:	008c0801 	jmpi	8c080 <_fputs_r>

0008c110 <memcmp>:
   8c110:	01c000c4 	movi	r7,3
   8c114:	3980192e 	bgeu	r7,r6,8c17c <memcmp+0x6c>
   8c118:	2904b03a 	or	r2,r5,r4
   8c11c:	11c4703a 	and	r2,r2,r7
   8c120:	10000f26 	beq	r2,zero,8c160 <memcmp+0x50>
   8c124:	20c00003 	ldbu	r3,0(r4)
   8c128:	28800003 	ldbu	r2,0(r5)
   8c12c:	1880151e 	bne	r3,r2,8c184 <memcmp+0x74>
   8c130:	31bfff84 	addi	r6,r6,-2
   8c134:	01ffffc4 	movi	r7,-1
   8c138:	00000406 	br	8c14c <memcmp+0x3c>
   8c13c:	20c00003 	ldbu	r3,0(r4)
   8c140:	28800003 	ldbu	r2,0(r5)
   8c144:	31bfffc4 	addi	r6,r6,-1
   8c148:	18800e1e 	bne	r3,r2,8c184 <memcmp+0x74>
   8c14c:	21000044 	addi	r4,r4,1
   8c150:	29400044 	addi	r5,r5,1
   8c154:	31fff91e 	bne	r6,r7,8c13c <memcmp+0x2c>
   8c158:	0005883a 	mov	r2,zero
   8c15c:	f800283a 	ret
   8c160:	20c00017 	ldw	r3,0(r4)
   8c164:	28800017 	ldw	r2,0(r5)
   8c168:	1880041e 	bne	r3,r2,8c17c <memcmp+0x6c>
   8c16c:	31bfff04 	addi	r6,r6,-4
   8c170:	21000104 	addi	r4,r4,4
   8c174:	29400104 	addi	r5,r5,4
   8c178:	39bff936 	bltu	r7,r6,8c160 <memcmp+0x50>
   8c17c:	303fe91e 	bne	r6,zero,8c124 <memcmp+0x14>
   8c180:	003ff506 	br	8c158 <memcmp+0x48>
   8c184:	1885c83a 	sub	r2,r3,r2
   8c188:	f800283a 	ret

0008c18c <__register_exitproc>:
   8c18c:	defffa04 	addi	sp,sp,-24
   8c190:	00800274 	movhi	r2,9
   8c194:	10b87f04 	addi	r2,r2,-7684
   8c198:	dc000315 	stw	r16,12(sp)
   8c19c:	14000017 	ldw	r16,0(r2)
   8c1a0:	dc400415 	stw	r17,16(sp)
   8c1a4:	dfc00515 	stw	ra,20(sp)
   8c1a8:	80805217 	ldw	r2,328(r16)
   8c1ac:	2023883a 	mov	r17,r4
   8c1b0:	10003e26 	beq	r2,zero,8c2ac <__register_exitproc+0x120>
   8c1b4:	10c00117 	ldw	r3,4(r2)
   8c1b8:	020007c4 	movi	r8,31
   8c1bc:	40c0180e 	bge	r8,r3,8c220 <__register_exitproc+0x94>
   8c1c0:	00800034 	movhi	r2,0
   8c1c4:	10800004 	addi	r2,r2,0
   8c1c8:	1000061e 	bne	r2,zero,8c1e4 <__register_exitproc+0x58>
   8c1cc:	00bfffc4 	movi	r2,-1
   8c1d0:	dfc00517 	ldw	ra,20(sp)
   8c1d4:	dc400417 	ldw	r17,16(sp)
   8c1d8:	dc000317 	ldw	r16,12(sp)
   8c1dc:	dec00604 	addi	sp,sp,24
   8c1e0:	f800283a 	ret
   8c1e4:	01006404 	movi	r4,400
   8c1e8:	d9400015 	stw	r5,0(sp)
   8c1ec:	d9800115 	stw	r6,4(sp)
   8c1f0:	d9c00215 	stw	r7,8(sp)
   8c1f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8c1f8:	d9400017 	ldw	r5,0(sp)
   8c1fc:	d9800117 	ldw	r6,4(sp)
   8c200:	d9c00217 	ldw	r7,8(sp)
   8c204:	103ff126 	beq	r2,zero,8c1cc <__register_exitproc+0x40>
   8c208:	80c05217 	ldw	r3,328(r16)
   8c20c:	10000115 	stw	zero,4(r2)
   8c210:	10c00015 	stw	r3,0(r2)
   8c214:	80805215 	stw	r2,328(r16)
   8c218:	10006215 	stw	zero,392(r2)
   8c21c:	10006315 	stw	zero,396(r2)
   8c220:	10c00117 	ldw	r3,4(r2)
   8c224:	88000d1e 	bne	r17,zero,8c25c <__register_exitproc+0xd0>
   8c228:	19000084 	addi	r4,r3,2
   8c22c:	2109883a 	add	r4,r4,r4
   8c230:	18c00044 	addi	r3,r3,1
   8c234:	2109883a 	add	r4,r4,r4
   8c238:	1109883a 	add	r4,r2,r4
   8c23c:	10c00115 	stw	r3,4(r2)
   8c240:	0005883a 	mov	r2,zero
   8c244:	21400015 	stw	r5,0(r4)
   8c248:	dfc00517 	ldw	ra,20(sp)
   8c24c:	dc400417 	ldw	r17,16(sp)
   8c250:	dc000317 	ldw	r16,12(sp)
   8c254:	dec00604 	addi	sp,sp,24
   8c258:	f800283a 	ret
   8c25c:	02400044 	movi	r9,1
   8c260:	12806217 	ldw	r10,392(r2)
   8c264:	48d2983a 	sll	r9,r9,r3
   8c268:	19000804 	addi	r4,r3,32
   8c26c:	18d1883a 	add	r8,r3,r3
   8c270:	2109883a 	add	r4,r4,r4
   8c274:	4211883a 	add	r8,r8,r8
   8c278:	2109883a 	add	r4,r4,r4
   8c27c:	1109883a 	add	r4,r2,r4
   8c280:	1211883a 	add	r8,r2,r8
   8c284:	5254b03a 	or	r10,r10,r9
   8c288:	21c02215 	stw	r7,136(r4)
   8c28c:	41802215 	stw	r6,136(r8)
   8c290:	12806215 	stw	r10,392(r2)
   8c294:	01000084 	movi	r4,2
   8c298:	893fe31e 	bne	r17,r4,8c228 <__register_exitproc+0x9c>
   8c29c:	11006317 	ldw	r4,396(r2)
   8c2a0:	2252b03a 	or	r9,r4,r9
   8c2a4:	12406315 	stw	r9,396(r2)
   8c2a8:	003fdf06 	br	8c228 <__register_exitproc+0x9c>
   8c2ac:	00800274 	movhi	r2,9
   8c2b0:	10bf7b04 	addi	r2,r2,-532
   8c2b4:	80805215 	stw	r2,328(r16)
   8c2b8:	003fbe06 	br	8c1b4 <__register_exitproc+0x28>

0008c2bc <__call_exitprocs>:
   8c2bc:	00800274 	movhi	r2,9
   8c2c0:	10b87f04 	addi	r2,r2,-7684
   8c2c4:	10800017 	ldw	r2,0(r2)
   8c2c8:	defff304 	addi	sp,sp,-52
   8c2cc:	df000b15 	stw	fp,44(sp)
   8c2d0:	d8800015 	stw	r2,0(sp)
   8c2d4:	10805204 	addi	r2,r2,328
   8c2d8:	dd400815 	stw	r21,32(sp)
   8c2dc:	dfc00c15 	stw	ra,48(sp)
   8c2e0:	ddc00a15 	stw	r23,40(sp)
   8c2e4:	dd800915 	stw	r22,36(sp)
   8c2e8:	dd000715 	stw	r20,28(sp)
   8c2ec:	dcc00615 	stw	r19,24(sp)
   8c2f0:	dc800515 	stw	r18,20(sp)
   8c2f4:	dc400415 	stw	r17,16(sp)
   8c2f8:	dc000315 	stw	r16,12(sp)
   8c2fc:	d9000115 	stw	r4,4(sp)
   8c300:	2839883a 	mov	fp,r5
   8c304:	d8800215 	stw	r2,8(sp)
   8c308:	057fffc4 	movi	r21,-1
   8c30c:	d8800017 	ldw	r2,0(sp)
   8c310:	ddc00217 	ldw	r23,8(sp)
   8c314:	14805217 	ldw	r18,328(r2)
   8c318:	90001726 	beq	r18,zero,8c378 <__call_exitprocs+0xbc>
   8c31c:	94400117 	ldw	r17,4(r18)
   8c320:	8c3fffc4 	addi	r16,r17,-1
   8c324:	80001116 	blt	r16,zero,8c36c <__call_exitprocs+0xb0>
   8c328:	8c400044 	addi	r17,r17,1
   8c32c:	8427883a 	add	r19,r16,r16
   8c330:	8c63883a 	add	r17,r17,r17
   8c334:	95802204 	addi	r22,r18,136
   8c338:	9ce7883a 	add	r19,r19,r19
   8c33c:	8c63883a 	add	r17,r17,r17
   8c340:	b4e7883a 	add	r19,r22,r19
   8c344:	9463883a 	add	r17,r18,r17
   8c348:	e0001726 	beq	fp,zero,8c3a8 <__call_exitprocs+0xec>
   8c34c:	8c87c83a 	sub	r3,r17,r18
   8c350:	b0c7883a 	add	r3,r22,r3
   8c354:	18c01e17 	ldw	r3,120(r3)
   8c358:	1f001326 	beq	r3,fp,8c3a8 <__call_exitprocs+0xec>
   8c35c:	843fffc4 	addi	r16,r16,-1
   8c360:	9cffff04 	addi	r19,r19,-4
   8c364:	8c7fff04 	addi	r17,r17,-4
   8c368:	857ff71e 	bne	r16,r21,8c348 <__call_exitprocs+0x8c>
   8c36c:	00800034 	movhi	r2,0
   8c370:	10800004 	addi	r2,r2,0
   8c374:	10002a1e 	bne	r2,zero,8c420 <__call_exitprocs+0x164>
   8c378:	dfc00c17 	ldw	ra,48(sp)
   8c37c:	df000b17 	ldw	fp,44(sp)
   8c380:	ddc00a17 	ldw	r23,40(sp)
   8c384:	dd800917 	ldw	r22,36(sp)
   8c388:	dd400817 	ldw	r21,32(sp)
   8c38c:	dd000717 	ldw	r20,28(sp)
   8c390:	dcc00617 	ldw	r19,24(sp)
   8c394:	dc800517 	ldw	r18,20(sp)
   8c398:	dc400417 	ldw	r17,16(sp)
   8c39c:	dc000317 	ldw	r16,12(sp)
   8c3a0:	dec00d04 	addi	sp,sp,52
   8c3a4:	f800283a 	ret
   8c3a8:	91000117 	ldw	r4,4(r18)
   8c3ac:	88c00017 	ldw	r3,0(r17)
   8c3b0:	213fffc4 	addi	r4,r4,-1
   8c3b4:	24001526 	beq	r4,r16,8c40c <__call_exitprocs+0x150>
   8c3b8:	88000015 	stw	zero,0(r17)
   8c3bc:	183fe726 	beq	r3,zero,8c35c <__call_exitprocs+0xa0>
   8c3c0:	00800044 	movi	r2,1
   8c3c4:	1408983a 	sll	r4,r2,r16
   8c3c8:	91406217 	ldw	r5,392(r18)
   8c3cc:	95000117 	ldw	r20,4(r18)
   8c3d0:	214a703a 	and	r5,r4,r5
   8c3d4:	28000b26 	beq	r5,zero,8c404 <__call_exitprocs+0x148>
   8c3d8:	91406317 	ldw	r5,396(r18)
   8c3dc:	2148703a 	and	r4,r4,r5
   8c3e0:	20000c1e 	bne	r4,zero,8c414 <__call_exitprocs+0x158>
   8c3e4:	99400017 	ldw	r5,0(r19)
   8c3e8:	d9000117 	ldw	r4,4(sp)
   8c3ec:	183ee83a 	callr	r3
   8c3f0:	90c00117 	ldw	r3,4(r18)
   8c3f4:	1d3fc51e 	bne	r3,r20,8c30c <__call_exitprocs+0x50>
   8c3f8:	b8c00017 	ldw	r3,0(r23)
   8c3fc:	1cbfd726 	beq	r3,r18,8c35c <__call_exitprocs+0xa0>
   8c400:	003fc206 	br	8c30c <__call_exitprocs+0x50>
   8c404:	183ee83a 	callr	r3
   8c408:	003ff906 	br	8c3f0 <__call_exitprocs+0x134>
   8c40c:	94000115 	stw	r16,4(r18)
   8c410:	003fea06 	br	8c3bc <__call_exitprocs+0x100>
   8c414:	99000017 	ldw	r4,0(r19)
   8c418:	183ee83a 	callr	r3
   8c41c:	003ff406 	br	8c3f0 <__call_exitprocs+0x134>
   8c420:	90c00117 	ldw	r3,4(r18)
   8c424:	1800071e 	bne	r3,zero,8c444 <__call_exitprocs+0x188>
   8c428:	90c00017 	ldw	r3,0(r18)
   8c42c:	18000926 	beq	r3,zero,8c454 <__call_exitprocs+0x198>
   8c430:	9009883a 	mov	r4,r18
   8c434:	b8c00015 	stw	r3,0(r23)
   8c438:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8c43c:	bc800017 	ldw	r18,0(r23)
   8c440:	003fb506 	br	8c318 <__call_exitprocs+0x5c>
   8c444:	90c00017 	ldw	r3,0(r18)
   8c448:	902f883a 	mov	r23,r18
   8c44c:	1825883a 	mov	r18,r3
   8c450:	003fb106 	br	8c318 <__call_exitprocs+0x5c>
   8c454:	0007883a 	mov	r3,zero
   8c458:	003ffb06 	br	8c448 <__call_exitprocs+0x18c>

0008c45c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8c45c:	defffc04 	addi	sp,sp,-16
   8c460:	df000315 	stw	fp,12(sp)
   8c464:	df000304 	addi	fp,sp,12
   8c468:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8c46c:	0001883a 	nop
   8c470:	e0bfff17 	ldw	r2,-4(fp)
   8c474:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   8c478:	e0bffd17 	ldw	r2,-12(fp)
   8c47c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8c480:	e0bffe17 	ldw	r2,-8(fp)
   8c484:	10000226 	beq	r2,zero,8c490 <_exit+0x34>
    ALT_SIM_FAIL();
   8c488:	002af070 	cmpltui	zero,zero,43969
   8c48c:	00000106 	br	8c494 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   8c490:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8c494:	003fff06 	br	8c494 <_exit+0x38>
