
RUN_ON_HDL_SIMULATOR_ONLY_bai3.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_bai3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002c14 memsz 0x00002c14 flags r-x
    LOAD off    0x00003c34 vaddr 0x00012c34 paddr 0x00012f2c align 2**12
         filesz 0x000002f8 memsz 0x000002f8 flags rw-
    LOAD off    0x00004224 vaddr 0x00013224 paddr 0x00013224 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002a04  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  00012bb8  00012bb8  00003bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002f8  00012c34  00012f2c  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  00013224  00013224  00004224  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00003f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000881  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a4dc  00000000  00000000  00004d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027de  00000000  00000000  0000f26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006d4e  00000000  00000000  00011a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009ac  00000000  00000000  0001879c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d6e  00000000  00000000  00019148  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000183d  00000000  00000000  00019eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  0001b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001d3cc  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001d3cf  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001d3db  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001d3dc  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001d3dd  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001d3e8  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001d3f3  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  0001d3fe  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000024  00000000  00000000  0001d406  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000760c6  00000000  00000000  0001d42a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00012bb8 l    d  .rodata	00000000 .rodata
00012c34 l    d  .rwdata	00000000 .rwdata
00013224 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010688 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010930 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012c34 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00011484 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0001167c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012d14 l     O .rwdata	0000002c jtag_uart_0
00011758 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000119e8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00011be4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011c60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011d40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011e98 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00011fd4 l     F .text	000000dc alt_file_locked
00012238 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012994 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00012b54 l     F .text	00000040 alt_sim_halt
000114f0 g     F .text	0000006c alt_main
0001086c g     F .text	00000090 _puts_r
00013240 g     O .bss	00000100 alt_irq
00012f2c g       *ABS*	00000000 __flash_rwdata_start
000107d4 g     F .text	00000054 printf
000101d0 g     F .text	0000018c Timer_IRQ_Handler
00012eec g     O .rwdata	00000004 mm
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013224 g     O .bss	00000004 errno
00013230 g     O .bss	00000004 alt_argv
0001aee8 g       *ABS*	00000000 _gp
00012d68 g     O .rwdata	00000180 alt_fd_list
000124bc g     F .text	00000094 alt_find_dev
00011f5c g     F .text	00000078 alt_io_redirect
00012bb8 g       *ABS*	00000000 __DTOR_END__
000108fc g     F .text	00000014 puts
00011840 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010828 g     F .text	00000044 _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000107c4 g     F .text	00000008 __udivsi3
00012ef0 g     O .rwdata	00000004 ss
00012728 g     F .text	00000090 alt_icache_flush
00012ef8 g     O .rwdata	00000004 month
00012f1c g     O .rwdata	00000004 alt_max_fd
00012f04 g     O .rwdata	00000004 _global_impure_ptr
000133cc g       *ABS*	00000000 __bss_end
0001130c g     F .text	000000f8 alt_iic_isr_register
00012390 g     F .text	0000010c alt_tick
000112c4 g     F .text	00000048 alt_ic_irq_enabled
000122f8 g     F .text	00000098 alt_alarm_stop
00013228 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00012d40 g     O .rwdata	00000028 alt_dev_null
00011c44 g     F .text	0000001c alt_dcache_flush_all
00012f2c g       *ABS*	00000000 __ram_rwdata_end
00012f14 g     O .rwdata	00000008 alt_dev_list
0001155c g     F .text	00000120 write
00012c34 g       *ABS*	00000000 __ram_rodata_end
000107cc g     F .text	00000008 __umodsi3
000133cc g       *ABS*	00000000 end
00012bb4 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
00011a58 g     F .text	00000090 alt_avalon_timer_sc_init
00011944 g     F .text	000000a4 altera_avalon_jtag_uart_write
000109b0 g     F .text	00000630 ___vfprintf_internal_r
0001035c g     F .text	00000070 Timer_Init
00012998 g     F .text	000001bc __call_exitprocs
000101b4 g     F .text	0000001c _start
00013238 g     O .bss	00000004 _alt_tick_rate
00012ef4 g     O .rwdata	00000004 dd
0001323c g     O .bss	00000004 _alt_nticks
00011710 g     F .text	00000048 alt_sys_init
00012828 g     F .text	0000016c __register_exitproc
00012c34 g       *ABS*	00000000 __ram_rwdata_start
00012bb8 g       *ABS*	00000000 __ram_rodata_start
00011790 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00012670 g     F .text	000000b8 alt_get_fd
000127ec g     F .text	0000003c memcmp
000133cc g       *ABS*	00000000 __alt_stack_base
00012550 g     F .text	00000120 alt_find_file
00011c8c g     F .text	000000b4 alt_dev_llist_insert
00011004 g     F .text	000000bc __sfvwrite_small_dev
00013224 g       *ABS*	00000000 __bss_start
000103cc g     F .text	000002bc main
00013234 g     O .bss	00000004 alt_envp
000117e8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00013340 g     O .bss	0000008c _atexit0
00012f20 g     O .rwdata	00000004 alt_errno
00010704 g     F .text	00000060 __divsi3
00012bb8 g       *ABS*	00000000 __CTOR_END__
00012bb8 g       *ABS*	00000000 __flash_rodata_start
00012bb8 g       *ABS*	00000000 __DTOR_LIST__
000116dc g     F .text	00000034 alt_irq_init
00012298 g     F .text	00000060 alt_release_fd
00012efc g     O .rwdata	00000004 year
000127b8 g     F .text	00000014 atexit
000110c0 g     F .text	00000078 _write_r
00012f00 g     O .rwdata	00000004 _impure_ptr
0001322c g     O .bss	00000004 alt_argc
00011e04 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012f0c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012ee8 g     O .rwdata	00000004 hh
00011138 g     F .text	00000050 alt_ic_isr_register
00012f2c g       *ABS*	00000000 _edata
000133cc g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00011224 g     F .text	000000a0 alt_ic_irq_disable
0001249c g     F .text	00000020 altera_nios2_qsys_irq_init
000127cc g     F .text	00000020 exit
00010764 g     F .text	00000060 __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012b94 g     F .text	00000020 _exit
00010910 g     F .text	00000020 strlen
000120b0 g     F .text	00000188 open
00011e68 g     F .text	00000030 alt_icache_flush_all
00012f08 g     O .rwdata	00000004 alt_priority_mask
00011188 g     F .text	0000009c alt_ic_irq_enable
00010fe0 g     F .text	00000024 __vfprintf_internal
00012f24 g     O .rwdata	00000008 alt_alarm_list
00011da0 g     F .text	00000064 _do_ctors
00011ae8 g     F .text	000000fc close
00011404 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00012bb8 g     O .rodata	00000010 hex_table



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406d14 	ori	at,at,436
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c00074 	movhi	r3,1
   10134:	18cc9004 	addi	r3,r3,12864
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00074 	movhi	r3,1
   1014c:	18cc9004 	addi	r3,r3,12864
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dee71014 	ori	sp,sp,40000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6abba14 	ori	gp,gp,44776
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101c4:	00114040 	call	11404 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101c8:	00114f00 	call	114f0 <alt_main>

000101cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101cc:	003fff06 	br	101cc <alt_after_alt_main>

000101d0 <Timer_IRQ_Handler>:
};

int hh = 23, mm = 59, ss = 30;
int dd = 31, month = 12, year = 2025;

void Timer_IRQ_Handler(void* isr_context) {
   101d0:	defffa04 	addi	sp,sp,-24
   101d4:	dfc00515 	stw	ra,20(sp)
   101d8:	df000415 	stw	fp,16(sp)
   101dc:	df000404 	addi	fp,sp,16
   101e0:	e13fff15 	stw	r4,-4(fp)
    ss++;
   101e4:	d0a00217 	ldw	r2,-32760(gp)
   101e8:	10800044 	addi	r2,r2,1
   101ec:	d0a00215 	stw	r2,-32760(gp)

    printf("%02d:%02d:%02d %02d-%02d-%04d\n", hh, mm, ss, dd, month, year);
   101f0:	d1600017 	ldw	r5,-32768(gp)
   101f4:	d1a00117 	ldw	r6,-32764(gp)
   101f8:	d1e00217 	ldw	r7,-32760(gp)
   101fc:	d0a00317 	ldw	r2,-32756(gp)
   10200:	d0e00417 	ldw	r3,-32752(gp)
   10204:	d1200517 	ldw	r4,-32748(gp)
   10208:	d8800015 	stw	r2,0(sp)
   1020c:	d8c00115 	stw	r3,4(sp)
   10210:	d9000215 	stw	r4,8(sp)
   10214:	01000074 	movhi	r4,1
   10218:	210af204 	addi	r4,r4,11208
   1021c:	00107d40 	call	107d4 <printf>

    if (ss == 60) {
   10220:	d0a00217 	ldw	r2,-32760(gp)
   10224:	10800f18 	cmpnei	r2,r2,60
   10228:	1000041e 	bne	r2,zero,1023c <Timer_IRQ_Handler+0x6c>
        ss = 0;
   1022c:	d0200215 	stw	zero,-32760(gp)
        mm++;
   10230:	d0a00117 	ldw	r2,-32764(gp)
   10234:	10800044 	addi	r2,r2,1
   10238:	d0a00115 	stw	r2,-32764(gp)
    }
    if (mm == 60) {
   1023c:	d0a00117 	ldw	r2,-32764(gp)
   10240:	10800f18 	cmpnei	r2,r2,60
   10244:	1000041e 	bne	r2,zero,10258 <Timer_IRQ_Handler+0x88>
        mm = 0;
   10248:	d0200115 	stw	zero,-32764(gp)
        hh++;
   1024c:	d0a00017 	ldw	r2,-32768(gp)
   10250:	10800044 	addi	r2,r2,1
   10254:	d0a00015 	stw	r2,-32768(gp)
    }
    if (hh == 24) {
   10258:	d0a00017 	ldw	r2,-32768(gp)
   1025c:	10800618 	cmpnei	r2,r2,24
   10260:	1000041e 	bne	r2,zero,10274 <Timer_IRQ_Handler+0xa4>
        hh = 0;
   10264:	d0200015 	stw	zero,-32768(gp)
        dd++;
   10268:	d0a00317 	ldw	r2,-32756(gp)
   1026c:	10800044 	addi	r2,r2,1
   10270:	d0a00315 	stw	r2,-32756(gp)
    }

    if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
   10274:	d0a00417 	ldw	r2,-32752(gp)
   10278:	10800120 	cmpeqi	r2,r2,4
   1027c:	1000091e 	bne	r2,zero,102a4 <Timer_IRQ_Handler+0xd4>
   10280:	d0a00417 	ldw	r2,-32752(gp)
   10284:	108001a0 	cmpeqi	r2,r2,6
   10288:	1000061e 	bne	r2,zero,102a4 <Timer_IRQ_Handler+0xd4>
   1028c:	d0a00417 	ldw	r2,-32752(gp)
   10290:	10800260 	cmpeqi	r2,r2,9
   10294:	1000031e 	bne	r2,zero,102a4 <Timer_IRQ_Handler+0xd4>
   10298:	d0a00417 	ldw	r2,-32752(gp)
   1029c:	108002d8 	cmpnei	r2,r2,11
   102a0:	1000091e 	bne	r2,zero,102c8 <Timer_IRQ_Handler+0xf8>
   102a4:	d0a00317 	ldw	r2,-32756(gp)
   102a8:	108007d0 	cmplti	r2,r2,31
   102ac:	1000061e 	bne	r2,zero,102c8 <Timer_IRQ_Handler+0xf8>
        dd = 1;
   102b0:	00800044 	movi	r2,1
   102b4:	d0a00315 	stw	r2,-32756(gp)
        month++;
   102b8:	d0a00417 	ldw	r2,-32752(gp)
   102bc:	10800044 	addi	r2,r2,1
   102c0:	d0a00415 	stw	r2,-32752(gp)
    if (hh == 24) {
        hh = 0;
        dd++;
    }

    if ((month == 4 || month == 6 || month == 9 || month == 11) && dd > 30) {
   102c4:	00001406 	br	10318 <Timer_IRQ_Handler+0x148>
        dd = 1;
        month++;
    } else if (month == 2) {
   102c8:	d0a00417 	ldw	r2,-32752(gp)
   102cc:	10800098 	cmpnei	r2,r2,2
   102d0:	1000091e 	bne	r2,zero,102f8 <Timer_IRQ_Handler+0x128>
        if (dd > 28) {
   102d4:	d0a00317 	ldw	r2,-32756(gp)
   102d8:	10800750 	cmplti	r2,r2,29
   102dc:	10000e1e 	bne	r2,zero,10318 <Timer_IRQ_Handler+0x148>
            dd = 1;
   102e0:	00800044 	movi	r2,1
   102e4:	d0a00315 	stw	r2,-32756(gp)
            month++;
   102e8:	d0a00417 	ldw	r2,-32752(gp)
   102ec:	10800044 	addi	r2,r2,1
   102f0:	d0a00415 	stw	r2,-32752(gp)
   102f4:	00000806 	br	10318 <Timer_IRQ_Handler+0x148>
        }
    } else if (dd > 31) {
   102f8:	d0a00317 	ldw	r2,-32756(gp)
   102fc:	10800810 	cmplti	r2,r2,32
   10300:	1000051e 	bne	r2,zero,10318 <Timer_IRQ_Handler+0x148>
        dd = 1;
   10304:	00800044 	movi	r2,1
   10308:	d0a00315 	stw	r2,-32756(gp)
        month++;
   1030c:	d0a00417 	ldw	r2,-32752(gp)
   10310:	10800044 	addi	r2,r2,1
   10314:	d0a00415 	stw	r2,-32752(gp)
    }

    if (month > 12) {
   10318:	d0a00417 	ldw	r2,-32752(gp)
   1031c:	10800350 	cmplti	r2,r2,13
   10320:	1000051e 	bne	r2,zero,10338 <Timer_IRQ_Handler+0x168>
        month = 1;
   10324:	00800044 	movi	r2,1
   10328:	d0a00415 	stw	r2,-32752(gp)
        year++;
   1032c:	d0a00517 	ldw	r2,-32748(gp)
   10330:	10800044 	addi	r2,r2,1
   10334:	d0a00515 	stw	r2,-32748(gp)
    }

    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
   10338:	00c000b4 	movhi	r3,2
   1033c:	18c40804 	addi	r3,r3,4128
   10340:	00800044 	movi	r2,1
   10344:	18800035 	stwio	r2,0(r3)
}
   10348:	e037883a 	mov	sp,fp
   1034c:	dfc00117 	ldw	ra,4(sp)
   10350:	df000017 	ldw	fp,0(sp)
   10354:	dec00204 	addi	sp,sp,8
   10358:	f800283a 	ret

0001035c <Timer_Init>:

void Timer_Init(void) {
   1035c:	defffe04 	addi	sp,sp,-8
   10360:	df000115 	stw	fp,4(sp)
   10364:	df000104 	addi	fp,sp,4
    unsigned int period = 50000000 - 1;
   10368:	0080bef4 	movhi	r2,763
   1036c:	10bc1fc4 	addi	r2,r2,-3969
   10370:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   10374:	00c000b4 	movhi	r3,2
   10378:	18c40904 	addi	r3,r3,4132
   1037c:	00800204 	movi	r2,8
   10380:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
   10384:	e0ffff17 	ldw	r3,-4(fp)
   10388:	008000b4 	movhi	r2,2
   1038c:	10840a04 	addi	r2,r2,4136
   10390:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
   10394:	e0bfff17 	ldw	r2,-4(fp)
   10398:	1004d43a 	srli	r2,r2,16
   1039c:	1007883a 	mov	r3,r2
   103a0:	008000b4 	movhi	r2,2
   103a4:	10840b04 	addi	r2,r2,4140
   103a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
   103ac:	00c000b4 	movhi	r3,2
   103b0:	18c40904 	addi	r3,r3,4132
   103b4:	008001c4 	movi	r2,7
   103b8:	18800035 	stwio	r2,0(r3)
                                     ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
                                     ALTERA_AVALON_TIMER_CONTROL_ITO_MSK |
                                     ALTERA_AVALON_TIMER_CONTROL_START_MSK);
}
   103bc:	e037883a 	mov	sp,fp
   103c0:	df000017 	ldw	fp,0(sp)
   103c4:	dec00104 	addi	sp,sp,4
   103c8:	f800283a 	ret

000103cc <main>:

int main(void) {
   103cc:	defff104 	addi	sp,sp,-60
   103d0:	dfc00e15 	stw	ra,56(sp)
   103d4:	df000d15 	stw	fp,52(sp)
   103d8:	df000d04 	addi	fp,sp,52

    Timer_Init();
   103dc:	001035c0 	call	1035c <Timer_Init>
    alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, NULL, NULL);
   103e0:	d8000015 	stw	zero,0(sp)
   103e4:	0009883a 	mov	r4,zero
   103e8:	000b883a 	mov	r5,zero
   103ec:	01800074 	movhi	r6,1
   103f0:	31807404 	addi	r6,r6,464
   103f4:	000f883a 	mov	r7,zero
   103f8:	00111380 	call	11138 <alt_ic_isr_register>

    printf("Hello from Nios II!\n");
   103fc:	01000074 	movhi	r4,1
   10400:	210afa04 	addi	r4,r4,11240
   10404:	00108fc0 	call	108fc <puts>

    while (1) {
        int hh_tens = hh / 10;
   10408:	d1200017 	ldw	r4,-32768(gp)
   1040c:	01400284 	movi	r5,10
   10410:	00107040 	call	10704 <__divsi3>
   10414:	e0bfff15 	stw	r2,-4(fp)
        int hh_units = hh % 10;
   10418:	d1200017 	ldw	r4,-32768(gp)
   1041c:	01400284 	movi	r5,10
   10420:	00107640 	call	10764 <__modsi3>
   10424:	e0bffe15 	stw	r2,-8(fp)
        int mm_tens = mm / 10;
   10428:	d1200117 	ldw	r4,-32764(gp)
   1042c:	01400284 	movi	r5,10
   10430:	00107040 	call	10704 <__divsi3>
   10434:	e0bffd15 	stw	r2,-12(fp)
        int mm_units = mm % 10;
   10438:	d1200117 	ldw	r4,-32764(gp)
   1043c:	01400284 	movi	r5,10
   10440:	00107640 	call	10764 <__modsi3>
   10444:	e0bffc15 	stw	r2,-16(fp)
        int ss_tens = ss / 10;
   10448:	d1200217 	ldw	r4,-32760(gp)
   1044c:	01400284 	movi	r5,10
   10450:	00107040 	call	10704 <__divsi3>
   10454:	e0bffb15 	stw	r2,-20(fp)
        int ss_units = ss % 10;
   10458:	d1200217 	ldw	r4,-32760(gp)
   1045c:	01400284 	movi	r5,10
   10460:	00107640 	call	10764 <__modsi3>
   10464:	e0bffa15 	stw	r2,-24(fp)
        int dd_tens = dd / 10;
   10468:	d1200317 	ldw	r4,-32756(gp)
   1046c:	01400284 	movi	r5,10
   10470:	00107040 	call	10704 <__divsi3>
   10474:	e0bff915 	stw	r2,-28(fp)
        int dd_units = dd % 10;
   10478:	d1200317 	ldw	r4,-32756(gp)
   1047c:	01400284 	movi	r5,10
   10480:	00107640 	call	10764 <__modsi3>
   10484:	e0bff815 	stw	r2,-32(fp)
        int month_tens = month / 10;
   10488:	d1200417 	ldw	r4,-32752(gp)
   1048c:	01400284 	movi	r5,10
   10490:	00107040 	call	10704 <__divsi3>
   10494:	e0bff715 	stw	r2,-36(fp)
        int month_units = month % 10;
   10498:	d1200417 	ldw	r4,-32752(gp)
   1049c:	01400284 	movi	r5,10
   104a0:	00107640 	call	10764 <__modsi3>
   104a4:	e0bff615 	stw	r2,-40(fp)
        int year_tens = (year / 10) % 10;
   104a8:	d1200517 	ldw	r4,-32748(gp)
   104ac:	01400284 	movi	r5,10
   104b0:	00107040 	call	10704 <__divsi3>
   104b4:	1009883a 	mov	r4,r2
   104b8:	01400284 	movi	r5,10
   104bc:	00107640 	call	10764 <__modsi3>
   104c0:	e0bff515 	stw	r2,-44(fp)
        int year_units = year % 10;
   104c4:	d1200517 	ldw	r4,-32748(gp)
   104c8:	01400284 	movi	r5,10
   104cc:	00107640 	call	10764 <__modsi3>
   104d0:	e0bff415 	stw	r2,-48(fp)

        IOWR(LED0_BASE, 0, hex_table[hh_tens]);
   104d4:	e0ffff17 	ldw	r3,-4(fp)
   104d8:	00800074 	movhi	r2,1
   104dc:	108aee04 	addi	r2,r2,11192
   104e0:	10c5883a 	add	r2,r2,r3
   104e4:	10800003 	ldbu	r2,0(r2)
   104e8:	10c03fcc 	andi	r3,r2,255
   104ec:	008000b4 	movhi	r2,2
   104f0:	10846c04 	addi	r2,r2,4528
   104f4:	10c00035 	stwio	r3,0(r2)
        IOWR(LED1_BASE, 0, hex_table[hh_units]);
   104f8:	e0fffe17 	ldw	r3,-8(fp)
   104fc:	00800074 	movhi	r2,1
   10500:	108aee04 	addi	r2,r2,11192
   10504:	10c5883a 	add	r2,r2,r3
   10508:	10800003 	ldbu	r2,0(r2)
   1050c:	10c03fcc 	andi	r3,r2,255
   10510:	008000b4 	movhi	r2,2
   10514:	10846804 	addi	r2,r2,4512
   10518:	10c00035 	stwio	r3,0(r2)
        IOWR(LED2_BASE, 0, hex_table[mm_tens]);
   1051c:	e0fffd17 	ldw	r3,-12(fp)
   10520:	00800074 	movhi	r2,1
   10524:	108aee04 	addi	r2,r2,11192
   10528:	10c5883a 	add	r2,r2,r3
   1052c:	10800003 	ldbu	r2,0(r2)
   10530:	10c03fcc 	andi	r3,r2,255
   10534:	008000b4 	movhi	r2,2
   10538:	10846404 	addi	r2,r2,4496
   1053c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED3_BASE, 0, hex_table[mm_units]);
   10540:	e0fffc17 	ldw	r3,-16(fp)
   10544:	00800074 	movhi	r2,1
   10548:	108aee04 	addi	r2,r2,11192
   1054c:	10c5883a 	add	r2,r2,r3
   10550:	10800003 	ldbu	r2,0(r2)
   10554:	10c03fcc 	andi	r3,r2,255
   10558:	008000b4 	movhi	r2,2
   1055c:	10846004 	addi	r2,r2,4480
   10560:	10c00035 	stwio	r3,0(r2)
        IOWR(LED4_BASE, 0, hex_table[ss_tens]);
   10564:	e0fffb17 	ldw	r3,-20(fp)
   10568:	00800074 	movhi	r2,1
   1056c:	108aee04 	addi	r2,r2,11192
   10570:	10c5883a 	add	r2,r2,r3
   10574:	10800003 	ldbu	r2,0(r2)
   10578:	10c03fcc 	andi	r3,r2,255
   1057c:	008000b4 	movhi	r2,2
   10580:	10845c04 	addi	r2,r2,4464
   10584:	10c00035 	stwio	r3,0(r2)
        IOWR(LED5_BASE, 0, hex_table[ss_units]);
   10588:	e0fffa17 	ldw	r3,-24(fp)
   1058c:	00800074 	movhi	r2,1
   10590:	108aee04 	addi	r2,r2,11192
   10594:	10c5883a 	add	r2,r2,r3
   10598:	10800003 	ldbu	r2,0(r2)
   1059c:	10c03fcc 	andi	r3,r2,255
   105a0:	008000b4 	movhi	r2,2
   105a4:	10845804 	addi	r2,r2,4448
   105a8:	10c00035 	stwio	r3,0(r2)
        IOWR(LED6_BASE, 0, hex_table[dd_tens]);
   105ac:	e0fff917 	ldw	r3,-28(fp)
   105b0:	00800074 	movhi	r2,1
   105b4:	108aee04 	addi	r2,r2,11192
   105b8:	10c5883a 	add	r2,r2,r3
   105bc:	10800003 	ldbu	r2,0(r2)
   105c0:	10c03fcc 	andi	r3,r2,255
   105c4:	008000b4 	movhi	r2,2
   105c8:	10845404 	addi	r2,r2,4432
   105cc:	10c00035 	stwio	r3,0(r2)
        IOWR(LED7_BASE, 0, hex_table[dd_units]);
   105d0:	e0fff817 	ldw	r3,-32(fp)
   105d4:	00800074 	movhi	r2,1
   105d8:	108aee04 	addi	r2,r2,11192
   105dc:	10c5883a 	add	r2,r2,r3
   105e0:	10800003 	ldbu	r2,0(r2)
   105e4:	10c03fcc 	andi	r3,r2,255
   105e8:	008000b4 	movhi	r2,2
   105ec:	10845004 	addi	r2,r2,4416
   105f0:	10c00035 	stwio	r3,0(r2)
        IOWR(LED8_BASE, 0, hex_table[month_tens]);
   105f4:	e0fff717 	ldw	r3,-36(fp)
   105f8:	00800074 	movhi	r2,1
   105fc:	108aee04 	addi	r2,r2,11192
   10600:	10c5883a 	add	r2,r2,r3
   10604:	10800003 	ldbu	r2,0(r2)
   10608:	10c03fcc 	andi	r3,r2,255
   1060c:	008000b4 	movhi	r2,2
   10610:	10844c04 	addi	r2,r2,4400
   10614:	10c00035 	stwio	r3,0(r2)
        IOWR(LED9_BASE, 0, hex_table[month_units]);
   10618:	e0fff617 	ldw	r3,-40(fp)
   1061c:	00800074 	movhi	r2,1
   10620:	108aee04 	addi	r2,r2,11192
   10624:	10c5883a 	add	r2,r2,r3
   10628:	10800003 	ldbu	r2,0(r2)
   1062c:	10c03fcc 	andi	r3,r2,255
   10630:	008000b4 	movhi	r2,2
   10634:	10844804 	addi	r2,r2,4384
   10638:	10c00035 	stwio	r3,0(r2)
        IOWR(LED10_BASE, 0, hex_table[year_tens]);
   1063c:	e0fff517 	ldw	r3,-44(fp)
   10640:	00800074 	movhi	r2,1
   10644:	108aee04 	addi	r2,r2,11192
   10648:	10c5883a 	add	r2,r2,r3
   1064c:	10800003 	ldbu	r2,0(r2)
   10650:	10c03fcc 	andi	r3,r2,255
   10654:	008000b4 	movhi	r2,2
   10658:	10844404 	addi	r2,r2,4368
   1065c:	10c00035 	stwio	r3,0(r2)
        IOWR(LED11_BASE, 0, hex_table[year_units]);
   10660:	e0fff417 	ldw	r3,-48(fp)
   10664:	00800074 	movhi	r2,1
   10668:	108aee04 	addi	r2,r2,11192
   1066c:	10c5883a 	add	r2,r2,r3
   10670:	10800003 	ldbu	r2,0(r2)
   10674:	10c03fcc 	andi	r3,r2,255
   10678:	008000b4 	movhi	r2,2
   1067c:	10844004 	addi	r2,r2,4352
   10680:	10c00035 	stwio	r3,0(r2)
    }
   10684:	003f6006 	br	10408 <main+0x3c>

00010688 <udivmodsi4>:
   10688:	29001b2e 	bgeu	r5,r4,106f8 <udivmodsi4+0x70>
   1068c:	28001a16 	blt	r5,zero,106f8 <udivmodsi4+0x70>
   10690:	00800044 	movi	r2,1
   10694:	0007883a 	mov	r3,zero
   10698:	01c007c4 	movi	r7,31
   1069c:	00000306 	br	106ac <udivmodsi4+0x24>
   106a0:	19c01326 	beq	r3,r7,106f0 <udivmodsi4+0x68>
   106a4:	18c00044 	addi	r3,r3,1
   106a8:	28000416 	blt	r5,zero,106bc <udivmodsi4+0x34>
   106ac:	294b883a 	add	r5,r5,r5
   106b0:	1085883a 	add	r2,r2,r2
   106b4:	293ffa36 	bltu	r5,r4,106a0 <udivmodsi4+0x18>
   106b8:	10000d26 	beq	r2,zero,106f0 <udivmodsi4+0x68>
   106bc:	0007883a 	mov	r3,zero
   106c0:	21400236 	bltu	r4,r5,106cc <udivmodsi4+0x44>
   106c4:	2149c83a 	sub	r4,r4,r5
   106c8:	1886b03a 	or	r3,r3,r2
   106cc:	1004d07a 	srli	r2,r2,1
   106d0:	280ad07a 	srli	r5,r5,1
   106d4:	103ffa1e 	bne	r2,zero,106c0 <udivmodsi4+0x38>
   106d8:	30000226 	beq	r6,zero,106e4 <udivmodsi4+0x5c>
   106dc:	2005883a 	mov	r2,r4
   106e0:	f800283a 	ret
   106e4:	1809883a 	mov	r4,r3
   106e8:	2005883a 	mov	r2,r4
   106ec:	f800283a 	ret
   106f0:	0007883a 	mov	r3,zero
   106f4:	003ff806 	br	106d8 <udivmodsi4+0x50>
   106f8:	00800044 	movi	r2,1
   106fc:	0007883a 	mov	r3,zero
   10700:	003fef06 	br	106c0 <udivmodsi4+0x38>

00010704 <__divsi3>:
   10704:	defffe04 	addi	sp,sp,-8
   10708:	dc000015 	stw	r16,0(sp)
   1070c:	dfc00115 	stw	ra,4(sp)
   10710:	0021883a 	mov	r16,zero
   10714:	20000c16 	blt	r4,zero,10748 <__divsi3+0x44>
   10718:	000d883a 	mov	r6,zero
   1071c:	28000e16 	blt	r5,zero,10758 <__divsi3+0x54>
   10720:	00106880 	call	10688 <udivmodsi4>
   10724:	1007883a 	mov	r3,r2
   10728:	8005003a 	cmpeq	r2,r16,zero
   1072c:	1000011e 	bne	r2,zero,10734 <__divsi3+0x30>
   10730:	00c7c83a 	sub	r3,zero,r3
   10734:	1805883a 	mov	r2,r3
   10738:	dfc00117 	ldw	ra,4(sp)
   1073c:	dc000017 	ldw	r16,0(sp)
   10740:	dec00204 	addi	sp,sp,8
   10744:	f800283a 	ret
   10748:	0109c83a 	sub	r4,zero,r4
   1074c:	04000044 	movi	r16,1
   10750:	000d883a 	mov	r6,zero
   10754:	283ff20e 	bge	r5,zero,10720 <__divsi3+0x1c>
   10758:	014bc83a 	sub	r5,zero,r5
   1075c:	8021003a 	cmpeq	r16,r16,zero
   10760:	003fef06 	br	10720 <__divsi3+0x1c>

00010764 <__modsi3>:
   10764:	deffff04 	addi	sp,sp,-4
   10768:	dfc00015 	stw	ra,0(sp)
   1076c:	01800044 	movi	r6,1
   10770:	2807883a 	mov	r3,r5
   10774:	20000416 	blt	r4,zero,10788 <__modsi3+0x24>
   10778:	28000c16 	blt	r5,zero,107ac <__modsi3+0x48>
   1077c:	dfc00017 	ldw	ra,0(sp)
   10780:	dec00104 	addi	sp,sp,4
   10784:	00106881 	jmpi	10688 <udivmodsi4>
   10788:	0109c83a 	sub	r4,zero,r4
   1078c:	28000b16 	blt	r5,zero,107bc <__modsi3+0x58>
   10790:	180b883a 	mov	r5,r3
   10794:	01800044 	movi	r6,1
   10798:	00106880 	call	10688 <udivmodsi4>
   1079c:	0085c83a 	sub	r2,zero,r2
   107a0:	dfc00017 	ldw	ra,0(sp)
   107a4:	dec00104 	addi	sp,sp,4
   107a8:	f800283a 	ret
   107ac:	014bc83a 	sub	r5,zero,r5
   107b0:	dfc00017 	ldw	ra,0(sp)
   107b4:	dec00104 	addi	sp,sp,4
   107b8:	00106881 	jmpi	10688 <udivmodsi4>
   107bc:	0147c83a 	sub	r3,zero,r5
   107c0:	003ff306 	br	10790 <__modsi3+0x2c>

000107c4 <__udivsi3>:
   107c4:	000d883a 	mov	r6,zero
   107c8:	00106881 	jmpi	10688 <udivmodsi4>

000107cc <__umodsi3>:
   107cc:	01800044 	movi	r6,1
   107d0:	00106881 	jmpi	10688 <udivmodsi4>

000107d4 <printf>:
   107d4:	defffb04 	addi	sp,sp,-20
   107d8:	dfc00115 	stw	ra,4(sp)
   107dc:	d9400215 	stw	r5,8(sp)
   107e0:	d9800315 	stw	r6,12(sp)
   107e4:	d9c00415 	stw	r7,16(sp)
   107e8:	00800074 	movhi	r2,1
   107ec:	108bc004 	addi	r2,r2,12032
   107f0:	11400017 	ldw	r5,0(r2)
   107f4:	d8800204 	addi	r2,sp,8
   107f8:	d8800015 	stw	r2,0(sp)
   107fc:	29c00217 	ldw	r7,8(r5)
   10800:	100d883a 	mov	r6,r2
   10804:	00800074 	movhi	r2,1
   10808:	10840104 	addi	r2,r2,4100
   1080c:	200b883a 	mov	r5,r4
   10810:	38800115 	stw	r2,4(r7)
   10814:	3809883a 	mov	r4,r7
   10818:	0010fe00 	call	10fe0 <__vfprintf_internal>
   1081c:	dfc00117 	ldw	ra,4(sp)
   10820:	dec00504 	addi	sp,sp,20
   10824:	f800283a 	ret

00010828 <_printf_r>:
   10828:	defffc04 	addi	sp,sp,-16
   1082c:	dfc00115 	stw	ra,4(sp)
   10830:	d9800215 	stw	r6,8(sp)
   10834:	d9c00315 	stw	r7,12(sp)
   10838:	22000217 	ldw	r8,8(r4)
   1083c:	d8800204 	addi	r2,sp,8
   10840:	d8800015 	stw	r2,0(sp)
   10844:	100f883a 	mov	r7,r2
   10848:	00800074 	movhi	r2,1
   1084c:	10840104 	addi	r2,r2,4100
   10850:	280d883a 	mov	r6,r5
   10854:	40800115 	stw	r2,4(r8)
   10858:	400b883a 	mov	r5,r8
   1085c:	00109b00 	call	109b0 <___vfprintf_internal_r>
   10860:	dfc00117 	ldw	ra,4(sp)
   10864:	dec00404 	addi	sp,sp,16
   10868:	f800283a 	ret

0001086c <_puts_r>:
   1086c:	defffd04 	addi	sp,sp,-12
   10870:	dc000015 	stw	r16,0(sp)
   10874:	2021883a 	mov	r16,r4
   10878:	2809883a 	mov	r4,r5
   1087c:	dfc00215 	stw	ra,8(sp)
   10880:	dc400115 	stw	r17,4(sp)
   10884:	2823883a 	mov	r17,r5
   10888:	00109100 	call	10910 <strlen>
   1088c:	80c00217 	ldw	r3,8(r16)
   10890:	02000074 	movhi	r8,1
   10894:	42040104 	addi	r8,r8,4100
   10898:	880d883a 	mov	r6,r17
   1089c:	100f883a 	mov	r7,r2
   108a0:	8009883a 	mov	r4,r16
   108a4:	180b883a 	mov	r5,r3
   108a8:	1a000115 	stw	r8,4(r3)
   108ac:	403ee83a 	callr	r8
   108b0:	047fffc4 	movi	r17,-1
   108b4:	8009883a 	mov	r4,r16
   108b8:	01800074 	movhi	r6,1
   108bc:	318aff04 	addi	r6,r6,11260
   108c0:	01c00044 	movi	r7,1
   108c4:	1440071e 	bne	r2,r17,108e4 <_puts_r+0x78>
   108c8:	00ffffc4 	movi	r3,-1
   108cc:	1805883a 	mov	r2,r3
   108d0:	dfc00217 	ldw	ra,8(sp)
   108d4:	dc400117 	ldw	r17,4(sp)
   108d8:	dc000017 	ldw	r16,0(sp)
   108dc:	dec00304 	addi	sp,sp,12
   108e0:	f800283a 	ret
   108e4:	81400217 	ldw	r5,8(r16)
   108e8:	28c00117 	ldw	r3,4(r5)
   108ec:	183ee83a 	callr	r3
   108f0:	0007883a 	mov	r3,zero
   108f4:	147ff51e 	bne	r2,r17,108cc <_puts_r+0x60>
   108f8:	003ff306 	br	108c8 <_puts_r+0x5c>

000108fc <puts>:
   108fc:	00800074 	movhi	r2,1
   10900:	108bc004 	addi	r2,r2,12032
   10904:	200b883a 	mov	r5,r4
   10908:	11000017 	ldw	r4,0(r2)
   1090c:	001086c1 	jmpi	1086c <_puts_r>

00010910 <strlen>:
   10910:	20800007 	ldb	r2,0(r4)
   10914:	10000526 	beq	r2,zero,1092c <strlen+0x1c>
   10918:	2007883a 	mov	r3,r4
   1091c:	18c00044 	addi	r3,r3,1
   10920:	18800007 	ldb	r2,0(r3)
   10924:	103ffd1e 	bne	r2,zero,1091c <strlen+0xc>
   10928:	1905c83a 	sub	r2,r3,r4
   1092c:	f800283a 	ret

00010930 <print_repeat>:
   10930:	defffb04 	addi	sp,sp,-20
   10934:	dc800315 	stw	r18,12(sp)
   10938:	dc400215 	stw	r17,8(sp)
   1093c:	dc000115 	stw	r16,4(sp)
   10940:	dfc00415 	stw	ra,16(sp)
   10944:	2025883a 	mov	r18,r4
   10948:	2823883a 	mov	r17,r5
   1094c:	3821883a 	mov	r16,r7
   10950:	d9800005 	stb	r6,0(sp)
   10954:	9009883a 	mov	r4,r18
   10958:	880b883a 	mov	r5,r17
   1095c:	d80d883a 	mov	r6,sp
   10960:	01c00044 	movi	r7,1
   10964:	04000b0e 	bge	zero,r16,10994 <print_repeat+0x64>
   10968:	88c00117 	ldw	r3,4(r17)
   1096c:	843fffc4 	addi	r16,r16,-1
   10970:	183ee83a 	callr	r3
   10974:	103ff726 	beq	r2,zero,10954 <print_repeat+0x24>
   10978:	00bfffc4 	movi	r2,-1
   1097c:	dfc00417 	ldw	ra,16(sp)
   10980:	dc800317 	ldw	r18,12(sp)
   10984:	dc400217 	ldw	r17,8(sp)
   10988:	dc000117 	ldw	r16,4(sp)
   1098c:	dec00504 	addi	sp,sp,20
   10990:	f800283a 	ret
   10994:	0005883a 	mov	r2,zero
   10998:	dfc00417 	ldw	ra,16(sp)
   1099c:	dc800317 	ldw	r18,12(sp)
   109a0:	dc400217 	ldw	r17,8(sp)
   109a4:	dc000117 	ldw	r16,4(sp)
   109a8:	dec00504 	addi	sp,sp,20
   109ac:	f800283a 	ret

000109b0 <___vfprintf_internal_r>:
   109b0:	deffe404 	addi	sp,sp,-112
   109b4:	ddc01915 	stw	r23,100(sp)
   109b8:	dd801815 	stw	r22,96(sp)
   109bc:	dcc01515 	stw	r19,84(sp)
   109c0:	dc401315 	stw	r17,76(sp)
   109c4:	dc001215 	stw	r16,72(sp)
   109c8:	dfc01b15 	stw	ra,108(sp)
   109cc:	df001a15 	stw	fp,104(sp)
   109d0:	dd401715 	stw	r21,92(sp)
   109d4:	dd001615 	stw	r20,88(sp)
   109d8:	dc801415 	stw	r18,80(sp)
   109dc:	d9001015 	stw	r4,64(sp)
   109e0:	2827883a 	mov	r19,r5
   109e4:	d9c01115 	stw	r7,68(sp)
   109e8:	3023883a 	mov	r17,r6
   109ec:	0021883a 	mov	r16,zero
   109f0:	d8000f15 	stw	zero,60(sp)
   109f4:	d8000e15 	stw	zero,56(sp)
   109f8:	002f883a 	mov	r23,zero
   109fc:	d8000915 	stw	zero,36(sp)
   10a00:	d8000d15 	stw	zero,52(sp)
   10a04:	d8000c15 	stw	zero,48(sp)
   10a08:	d8000b15 	stw	zero,44(sp)
   10a0c:	002d883a 	mov	r22,zero
   10a10:	89400003 	ldbu	r5,0(r17)
   10a14:	01c00044 	movi	r7,1
   10a18:	8c400044 	addi	r17,r17,1
   10a1c:	29003fcc 	andi	r4,r5,255
   10a20:	2100201c 	xori	r4,r4,128
   10a24:	213fe004 	addi	r4,r4,-128
   10a28:	20001526 	beq	r4,zero,10a80 <___vfprintf_internal_r+0xd0>
   10a2c:	81c03326 	beq	r16,r7,10afc <___vfprintf_internal_r+0x14c>
   10a30:	3c002016 	blt	r7,r16,10ab4 <___vfprintf_internal_r+0x104>
   10a34:	803ff61e 	bne	r16,zero,10a10 <___vfprintf_internal_r+0x60>
   10a38:	00800944 	movi	r2,37
   10a3c:	2081311e 	bne	r4,r2,10f04 <___vfprintf_internal_r+0x554>
   10a40:	05ffffc4 	movi	r23,-1
   10a44:	00800284 	movi	r2,10
   10a48:	d9c00c15 	stw	r7,48(sp)
   10a4c:	d8000f15 	stw	zero,60(sp)
   10a50:	d8000e15 	stw	zero,56(sp)
   10a54:	ddc00915 	stw	r23,36(sp)
   10a58:	d8800d15 	stw	r2,52(sp)
   10a5c:	d8000b15 	stw	zero,44(sp)
   10a60:	89400003 	ldbu	r5,0(r17)
   10a64:	3821883a 	mov	r16,r7
   10a68:	8c400044 	addi	r17,r17,1
   10a6c:	29003fcc 	andi	r4,r5,255
   10a70:	2100201c 	xori	r4,r4,128
   10a74:	213fe004 	addi	r4,r4,-128
   10a78:	01c00044 	movi	r7,1
   10a7c:	203feb1e 	bne	r4,zero,10a2c <___vfprintf_internal_r+0x7c>
   10a80:	b005883a 	mov	r2,r22
   10a84:	dfc01b17 	ldw	ra,108(sp)
   10a88:	df001a17 	ldw	fp,104(sp)
   10a8c:	ddc01917 	ldw	r23,100(sp)
   10a90:	dd801817 	ldw	r22,96(sp)
   10a94:	dd401717 	ldw	r21,92(sp)
   10a98:	dd001617 	ldw	r20,88(sp)
   10a9c:	dcc01517 	ldw	r19,84(sp)
   10aa0:	dc801417 	ldw	r18,80(sp)
   10aa4:	dc401317 	ldw	r17,76(sp)
   10aa8:	dc001217 	ldw	r16,72(sp)
   10aac:	dec01c04 	addi	sp,sp,112
   10ab0:	f800283a 	ret
   10ab4:	00800084 	movi	r2,2
   10ab8:	80801526 	beq	r16,r2,10b10 <___vfprintf_internal_r+0x160>
   10abc:	008000c4 	movi	r2,3
   10ac0:	80bfd31e 	bne	r16,r2,10a10 <___vfprintf_internal_r+0x60>
   10ac4:	29bff404 	addi	r6,r5,-48
   10ac8:	30c03fcc 	andi	r3,r6,255
   10acc:	00800244 	movi	r2,9
   10ad0:	10c01c36 	bltu	r2,r3,10b44 <___vfprintf_internal_r+0x194>
   10ad4:	d8c00917 	ldw	r3,36(sp)
   10ad8:	18010816 	blt	r3,zero,10efc <___vfprintf_internal_r+0x54c>
   10adc:	d9000917 	ldw	r4,36(sp)
   10ae0:	20c002a4 	muli	r3,r4,10
   10ae4:	30803fcc 	andi	r2,r6,255
   10ae8:	1080201c 	xori	r2,r2,128
   10aec:	10bfe004 	addi	r2,r2,-128
   10af0:	1887883a 	add	r3,r3,r2
   10af4:	d8c00915 	stw	r3,36(sp)
   10af8:	003fc506 	br	10a10 <___vfprintf_internal_r+0x60>
   10afc:	00800c04 	movi	r2,48
   10b00:	20809526 	beq	r4,r2,10d58 <___vfprintf_internal_r+0x3a8>
   10b04:	00800944 	movi	r2,37
   10b08:	20810e26 	beq	r4,r2,10f44 <___vfprintf_internal_r+0x594>
   10b0c:	04000084 	movi	r16,2
   10b10:	29bff404 	addi	r6,r5,-48
   10b14:	30c03fcc 	andi	r3,r6,255
   10b18:	00800244 	movi	r2,9
   10b1c:	10c00736 	bltu	r2,r3,10b3c <___vfprintf_internal_r+0x18c>
   10b20:	b8009816 	blt	r23,zero,10d84 <___vfprintf_internal_r+0x3d4>
   10b24:	b9c002a4 	muli	r7,r23,10
   10b28:	30803fcc 	andi	r2,r6,255
   10b2c:	1080201c 	xori	r2,r2,128
   10b30:	10bfe004 	addi	r2,r2,-128
   10b34:	38af883a 	add	r23,r7,r2
   10b38:	003fb506 	br	10a10 <___vfprintf_internal_r+0x60>
   10b3c:	00800b84 	movi	r2,46
   10b40:	20808a26 	beq	r4,r2,10d6c <___vfprintf_internal_r+0x3bc>
   10b44:	00801b04 	movi	r2,108
   10b48:	20808a26 	beq	r4,r2,10d74 <___vfprintf_internal_r+0x3c4>
   10b4c:	d8c00917 	ldw	r3,36(sp)
   10b50:	18008e16 	blt	r3,zero,10d8c <___vfprintf_internal_r+0x3dc>
   10b54:	d8000f15 	stw	zero,60(sp)
   10b58:	28bfea04 	addi	r2,r5,-88
   10b5c:	10803fcc 	andi	r2,r2,255
   10b60:	00c00804 	movi	r3,32
   10b64:	18802836 	bltu	r3,r2,10c08 <___vfprintf_internal_r+0x258>
   10b68:	1085883a 	add	r2,r2,r2
   10b6c:	1085883a 	add	r2,r2,r2
   10b70:	00c00074 	movhi	r3,1
   10b74:	18c2e104 	addi	r3,r3,2948
   10b78:	10c5883a 	add	r2,r2,r3
   10b7c:	11000017 	ldw	r4,0(r2)
   10b80:	2000683a 	jmp	r4
   10b84:	00010e00 	call	10e0 <__alt_mem_onchip_memory2_0-0xef20>
   10b88:	00010c08 	cmpgei	zero,zero,1072
   10b8c:	00010c08 	cmpgei	zero,zero,1072
   10b90:	00010c08 	cmpgei	zero,zero,1072
   10b94:	00010c08 	cmpgei	zero,zero,1072
   10b98:	00010c08 	cmpgei	zero,zero,1072
   10b9c:	00010c08 	cmpgei	zero,zero,1072
   10ba0:	00010c08 	cmpgei	zero,zero,1072
   10ba4:	00010c08 	cmpgei	zero,zero,1072
   10ba8:	00010c08 	cmpgei	zero,zero,1072
   10bac:	00010c08 	cmpgei	zero,zero,1072
   10bb0:	00010e18 	cmpnei	zero,zero,1080
   10bb4:	00010c1c 	xori	zero,zero,1072
   10bb8:	00010c08 	cmpgei	zero,zero,1072
   10bbc:	00010c08 	cmpgei	zero,zero,1072
   10bc0:	00010c08 	cmpgei	zero,zero,1072
   10bc4:	00010c08 	cmpgei	zero,zero,1072
   10bc8:	00010c1c 	xori	zero,zero,1072
   10bcc:	00010c08 	cmpgei	zero,zero,1072
   10bd0:	00010c08 	cmpgei	zero,zero,1072
   10bd4:	00010c08 	cmpgei	zero,zero,1072
   10bd8:	00010c08 	cmpgei	zero,zero,1072
   10bdc:	00010c08 	cmpgei	zero,zero,1072
   10be0:	00010e80 	call	10e8 <__alt_mem_onchip_memory2_0-0xef18>
   10be4:	00010c08 	cmpgei	zero,zero,1072
   10be8:	00010c08 	cmpgei	zero,zero,1072
   10bec:	00010c08 	cmpgei	zero,zero,1072
   10bf0:	00010e90 	cmplti	zero,zero,1082
   10bf4:	00010c08 	cmpgei	zero,zero,1072
   10bf8:	00010c18 	cmpnei	zero,zero,1072
   10bfc:	00010c08 	cmpgei	zero,zero,1072
   10c00:	00010c08 	cmpgei	zero,zero,1072
   10c04:	00010c10 	cmplti	zero,zero,1072
   10c08:	0021883a 	mov	r16,zero
   10c0c:	003f8006 	br	10a10 <___vfprintf_internal_r+0x60>
   10c10:	00800404 	movi	r2,16
   10c14:	d8800d15 	stw	r2,52(sp)
   10c18:	d8000c15 	stw	zero,48(sp)
   10c1c:	d8800c17 	ldw	r2,48(sp)
   10c20:	10006c1e 	bne	r2,zero,10dd4 <___vfprintf_internal_r+0x424>
   10c24:	d9001117 	ldw	r4,68(sp)
   10c28:	21c00104 	addi	r7,r4,4
   10c2c:	24000017 	ldw	r16,0(r4)
   10c30:	d9c01115 	stw	r7,68(sp)
   10c34:	d8000a15 	stw	zero,40(sp)
   10c38:	80006d26 	beq	r16,zero,10df0 <___vfprintf_internal_r+0x440>
   10c3c:	d8c00b17 	ldw	r3,44(sp)
   10c40:	dc800044 	addi	r18,sp,1
   10c44:	9039883a 	mov	fp,r18
   10c48:	05400244 	movi	r21,9
   10c4c:	1829003a 	cmpeq	r20,r3,zero
   10c50:	00000506 	br	10c68 <___vfprintf_internal_r+0x2b8>
   10c54:	21000c04 	addi	r4,r4,48
   10c58:	91000005 	stb	r4,0(r18)
   10c5c:	94800044 	addi	r18,r18,1
   10c60:	18000e26 	beq	r3,zero,10c9c <___vfprintf_internal_r+0x2ec>
   10c64:	1821883a 	mov	r16,r3
   10c68:	d9400d17 	ldw	r5,52(sp)
   10c6c:	8009883a 	mov	r4,r16
   10c70:	00107c40 	call	107c4 <__udivsi3>
   10c74:	d9000d17 	ldw	r4,52(sp)
   10c78:	1007883a 	mov	r3,r2
   10c7c:	2085383a 	mul	r2,r4,r2
   10c80:	8089c83a 	sub	r4,r16,r2
   10c84:	a93ff30e 	bge	r21,r4,10c54 <___vfprintf_internal_r+0x2a4>
   10c88:	a000361e 	bne	r20,zero,10d64 <___vfprintf_internal_r+0x3b4>
   10c8c:	21000dc4 	addi	r4,r4,55
   10c90:	91000005 	stb	r4,0(r18)
   10c94:	94800044 	addi	r18,r18,1
   10c98:	183ff21e 	bne	r3,zero,10c64 <___vfprintf_internal_r+0x2b4>
   10c9c:	9729c83a 	sub	r20,r18,fp
   10ca0:	d8800917 	ldw	r2,36(sp)
   10ca4:	150bc83a 	sub	r5,r2,r20
   10ca8:	0140100e 	bge	zero,r5,10cec <___vfprintf_internal_r+0x33c>
   10cac:	e0800804 	addi	r2,fp,32
   10cb0:	90800e2e 	bgeu	r18,r2,10cec <___vfprintf_internal_r+0x33c>
   10cb4:	00800c04 	movi	r2,48
   10cb8:	28ffffc4 	addi	r3,r5,-1
   10cbc:	90800005 	stb	r2,0(r18)
   10cc0:	91000044 	addi	r4,r18,1
   10cc4:	00c0070e 	bge	zero,r3,10ce4 <___vfprintf_internal_r+0x334>
   10cc8:	e0800804 	addi	r2,fp,32
   10ccc:	2080052e 	bgeu	r4,r2,10ce4 <___vfprintf_internal_r+0x334>
   10cd0:	00800c04 	movi	r2,48
   10cd4:	20800005 	stb	r2,0(r4)
   10cd8:	21000044 	addi	r4,r4,1
   10cdc:	9145883a 	add	r2,r18,r5
   10ce0:	20bff91e 	bne	r4,r2,10cc8 <___vfprintf_internal_r+0x318>
   10ce4:	2729c83a 	sub	r20,r4,fp
   10ce8:	2025883a 	mov	r18,r4
   10cec:	d8c00a17 	ldw	r3,40(sp)
   10cf0:	d9000f17 	ldw	r4,60(sp)
   10cf4:	1d05883a 	add	r2,r3,r20
   10cf8:	b8a1c83a 	sub	r16,r23,r2
   10cfc:	20002626 	beq	r4,zero,10d98 <___vfprintf_internal_r+0x3e8>
   10d00:	1805003a 	cmpeq	r2,r3,zero
   10d04:	1000a226 	beq	r2,zero,10f90 <___vfprintf_internal_r+0x5e0>
   10d08:	04009916 	blt	zero,r16,10f70 <___vfprintf_internal_r+0x5c0>
   10d0c:	b005883a 	mov	r2,r22
   10d10:	0500890e 	bge	zero,r20,10f38 <___vfprintf_internal_r+0x588>
   10d14:	102d883a 	mov	r22,r2
   10d18:	1521883a 	add	r16,r2,r20
   10d1c:	00000206 	br	10d28 <___vfprintf_internal_r+0x378>
   10d20:	b5800044 	addi	r22,r22,1
   10d24:	85bfb826 	beq	r16,r22,10c08 <___vfprintf_internal_r+0x258>
   10d28:	94bfffc4 	addi	r18,r18,-1
   10d2c:	90800003 	ldbu	r2,0(r18)
   10d30:	98c00117 	ldw	r3,4(r19)
   10d34:	d9001017 	ldw	r4,64(sp)
   10d38:	d8800005 	stb	r2,0(sp)
   10d3c:	980b883a 	mov	r5,r19
   10d40:	d80d883a 	mov	r6,sp
   10d44:	01c00044 	movi	r7,1
   10d48:	183ee83a 	callr	r3
   10d4c:	103ff426 	beq	r2,zero,10d20 <___vfprintf_internal_r+0x370>
   10d50:	05bfffc4 	movi	r22,-1
   10d54:	003f4a06 	br	10a80 <___vfprintf_internal_r+0xd0>
   10d58:	04000084 	movi	r16,2
   10d5c:	d9c00f15 	stw	r7,60(sp)
   10d60:	003f2b06 	br	10a10 <___vfprintf_internal_r+0x60>
   10d64:	210015c4 	addi	r4,r4,87
   10d68:	003fbb06 	br	10c58 <___vfprintf_internal_r+0x2a8>
   10d6c:	040000c4 	movi	r16,3
   10d70:	003f2706 	br	10a10 <___vfprintf_internal_r+0x60>
   10d74:	00800044 	movi	r2,1
   10d78:	040000c4 	movi	r16,3
   10d7c:	d8800e15 	stw	r2,56(sp)
   10d80:	003f2306 	br	10a10 <___vfprintf_internal_r+0x60>
   10d84:	000f883a 	mov	r7,zero
   10d88:	003f6706 	br	10b28 <___vfprintf_internal_r+0x178>
   10d8c:	01000044 	movi	r4,1
   10d90:	d9000915 	stw	r4,36(sp)
   10d94:	003f7006 	br	10b58 <___vfprintf_internal_r+0x1a8>
   10d98:	04008916 	blt	zero,r16,10fc0 <___vfprintf_internal_r+0x610>
   10d9c:	d8c00a17 	ldw	r3,40(sp)
   10da0:	1805003a 	cmpeq	r2,r3,zero
   10da4:	103fd91e 	bne	r2,zero,10d0c <___vfprintf_internal_r+0x35c>
   10da8:	98c00117 	ldw	r3,4(r19)
   10dac:	d9001017 	ldw	r4,64(sp)
   10db0:	00800b44 	movi	r2,45
   10db4:	d8800005 	stb	r2,0(sp)
   10db8:	980b883a 	mov	r5,r19
   10dbc:	d80d883a 	mov	r6,sp
   10dc0:	01c00044 	movi	r7,1
   10dc4:	183ee83a 	callr	r3
   10dc8:	103fe11e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10dcc:	b0800044 	addi	r2,r22,1
   10dd0:	003fcf06 	br	10d10 <___vfprintf_internal_r+0x360>
   10dd4:	d8c01117 	ldw	r3,68(sp)
   10dd8:	1c000017 	ldw	r16,0(r3)
   10ddc:	18c00104 	addi	r3,r3,4
   10de0:	d8c01115 	stw	r3,68(sp)
   10de4:	80005016 	blt	r16,zero,10f28 <___vfprintf_internal_r+0x578>
   10de8:	d8000a15 	stw	zero,40(sp)
   10dec:	803f931e 	bne	r16,zero,10c3c <___vfprintf_internal_r+0x28c>
   10df0:	dc800044 	addi	r18,sp,1
   10df4:	9039883a 	mov	fp,r18
   10df8:	0029883a 	mov	r20,zero
   10dfc:	003fa806 	br	10ca0 <___vfprintf_internal_r+0x2f0>
   10e00:	00800404 	movi	r2,16
   10e04:	00c00044 	movi	r3,1
   10e08:	d8800d15 	stw	r2,52(sp)
   10e0c:	d8000c15 	stw	zero,48(sp)
   10e10:	d8c00b15 	stw	r3,44(sp)
   10e14:	003f8106 	br	10c1c <___vfprintf_internal_r+0x26c>
   10e18:	04000044 	movi	r16,1
   10e1c:	85c0080e 	bge	r16,r23,10e40 <___vfprintf_internal_r+0x490>
   10e20:	d9001017 	ldw	r4,64(sp)
   10e24:	980b883a 	mov	r5,r19
   10e28:	01800804 	movi	r6,32
   10e2c:	b9ffffc4 	addi	r7,r23,-1
   10e30:	00109300 	call	10930 <print_repeat>
   10e34:	103fc61e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10e38:	bd85883a 	add	r2,r23,r22
   10e3c:	15bfffc4 	addi	r22,r2,-1
   10e40:	d8c01117 	ldw	r3,68(sp)
   10e44:	d9001017 	ldw	r4,64(sp)
   10e48:	800f883a 	mov	r7,r16
   10e4c:	18800017 	ldw	r2,0(r3)
   10e50:	98c00117 	ldw	r3,4(r19)
   10e54:	980b883a 	mov	r5,r19
   10e58:	d8800005 	stb	r2,0(sp)
   10e5c:	d80d883a 	mov	r6,sp
   10e60:	183ee83a 	callr	r3
   10e64:	103fba1e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10e68:	d9001117 	ldw	r4,68(sp)
   10e6c:	b5800044 	addi	r22,r22,1
   10e70:	0021883a 	mov	r16,zero
   10e74:	21000104 	addi	r4,r4,4
   10e78:	d9001115 	stw	r4,68(sp)
   10e7c:	003ee406 	br	10a10 <___vfprintf_internal_r+0x60>
   10e80:	01000204 	movi	r4,8
   10e84:	d9000d15 	stw	r4,52(sp)
   10e88:	d8000c15 	stw	zero,48(sp)
   10e8c:	003f6306 	br	10c1c <___vfprintf_internal_r+0x26c>
   10e90:	d8801117 	ldw	r2,68(sp)
   10e94:	15000017 	ldw	r20,0(r2)
   10e98:	a009883a 	mov	r4,r20
   10e9c:	00109100 	call	10910 <strlen>
   10ea0:	b8a1c83a 	sub	r16,r23,r2
   10ea4:	1025883a 	mov	r18,r2
   10ea8:	0400070e 	bge	zero,r16,10ec8 <___vfprintf_internal_r+0x518>
   10eac:	d9001017 	ldw	r4,64(sp)
   10eb0:	980b883a 	mov	r5,r19
   10eb4:	01800804 	movi	r6,32
   10eb8:	800f883a 	mov	r7,r16
   10ebc:	00109300 	call	10930 <print_repeat>
   10ec0:	103fa31e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10ec4:	b42d883a 	add	r22,r22,r16
   10ec8:	98c00117 	ldw	r3,4(r19)
   10ecc:	d9001017 	ldw	r4,64(sp)
   10ed0:	a00d883a 	mov	r6,r20
   10ed4:	980b883a 	mov	r5,r19
   10ed8:	900f883a 	mov	r7,r18
   10edc:	183ee83a 	callr	r3
   10ee0:	103f9b1e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10ee4:	d8c01117 	ldw	r3,68(sp)
   10ee8:	b4ad883a 	add	r22,r22,r18
   10eec:	0021883a 	mov	r16,zero
   10ef0:	18c00104 	addi	r3,r3,4
   10ef4:	d8c01115 	stw	r3,68(sp)
   10ef8:	003ec506 	br	10a10 <___vfprintf_internal_r+0x60>
   10efc:	0007883a 	mov	r3,zero
   10f00:	003ef806 	br	10ae4 <___vfprintf_internal_r+0x134>
   10f04:	98c00117 	ldw	r3,4(r19)
   10f08:	d9001017 	ldw	r4,64(sp)
   10f0c:	d9400005 	stb	r5,0(sp)
   10f10:	d80d883a 	mov	r6,sp
   10f14:	980b883a 	mov	r5,r19
   10f18:	183ee83a 	callr	r3
   10f1c:	103f8c1e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10f20:	b5800044 	addi	r22,r22,1
   10f24:	003eba06 	br	10a10 <___vfprintf_internal_r+0x60>
   10f28:	00800044 	movi	r2,1
   10f2c:	0421c83a 	sub	r16,zero,r16
   10f30:	d8800a15 	stw	r2,40(sp)
   10f34:	003f4006 	br	10c38 <___vfprintf_internal_r+0x288>
   10f38:	102d883a 	mov	r22,r2
   10f3c:	0021883a 	mov	r16,zero
   10f40:	003eb306 	br	10a10 <___vfprintf_internal_r+0x60>
   10f44:	98c00117 	ldw	r3,4(r19)
   10f48:	d9000005 	stb	r4,0(sp)
   10f4c:	d9001017 	ldw	r4,64(sp)
   10f50:	980b883a 	mov	r5,r19
   10f54:	d80d883a 	mov	r6,sp
   10f58:	800f883a 	mov	r7,r16
   10f5c:	183ee83a 	callr	r3
   10f60:	103f7b1e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10f64:	b42d883a 	add	r22,r22,r16
   10f68:	0021883a 	mov	r16,zero
   10f6c:	003ea806 	br	10a10 <___vfprintf_internal_r+0x60>
   10f70:	d9001017 	ldw	r4,64(sp)
   10f74:	980b883a 	mov	r5,r19
   10f78:	01800c04 	movi	r6,48
   10f7c:	800f883a 	mov	r7,r16
   10f80:	00109300 	call	10930 <print_repeat>
   10f84:	103f721e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10f88:	b405883a 	add	r2,r22,r16
   10f8c:	003f6006 	br	10d10 <___vfprintf_internal_r+0x360>
   10f90:	98c00117 	ldw	r3,4(r19)
   10f94:	d9001017 	ldw	r4,64(sp)
   10f98:	00800b44 	movi	r2,45
   10f9c:	d8800005 	stb	r2,0(sp)
   10fa0:	980b883a 	mov	r5,r19
   10fa4:	d80d883a 	mov	r6,sp
   10fa8:	01c00044 	movi	r7,1
   10fac:	183ee83a 	callr	r3
   10fb0:	103f671e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10fb4:	b5800044 	addi	r22,r22,1
   10fb8:	043f540e 	bge	zero,r16,10d0c <___vfprintf_internal_r+0x35c>
   10fbc:	003fec06 	br	10f70 <___vfprintf_internal_r+0x5c0>
   10fc0:	d9001017 	ldw	r4,64(sp)
   10fc4:	980b883a 	mov	r5,r19
   10fc8:	01800804 	movi	r6,32
   10fcc:	800f883a 	mov	r7,r16
   10fd0:	00109300 	call	10930 <print_repeat>
   10fd4:	103f5e1e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x3a0>
   10fd8:	b42d883a 	add	r22,r22,r16
   10fdc:	003f6f06 	br	10d9c <___vfprintf_internal_r+0x3ec>

00010fe0 <__vfprintf_internal>:
   10fe0:	00800074 	movhi	r2,1
   10fe4:	108bc004 	addi	r2,r2,12032
   10fe8:	2013883a 	mov	r9,r4
   10fec:	11000017 	ldw	r4,0(r2)
   10ff0:	2805883a 	mov	r2,r5
   10ff4:	300f883a 	mov	r7,r6
   10ff8:	480b883a 	mov	r5,r9
   10ffc:	100d883a 	mov	r6,r2
   11000:	00109b01 	jmpi	109b0 <___vfprintf_internal_r>

00011004 <__sfvwrite_small_dev>:
   11004:	2880000b 	ldhu	r2,0(r5)
   11008:	defffa04 	addi	sp,sp,-24
   1100c:	dcc00315 	stw	r19,12(sp)
   11010:	1080020c 	andi	r2,r2,8
   11014:	dc800215 	stw	r18,8(sp)
   11018:	dc400115 	stw	r17,4(sp)
   1101c:	dfc00515 	stw	ra,20(sp)
   11020:	dd000415 	stw	r20,16(sp)
   11024:	dc000015 	stw	r16,0(sp)
   11028:	2825883a 	mov	r18,r5
   1102c:	2027883a 	mov	r19,r4
   11030:	3023883a 	mov	r17,r6
   11034:	10002026 	beq	r2,zero,110b8 <__sfvwrite_small_dev+0xb4>
   11038:	2940008f 	ldh	r5,2(r5)
   1103c:	28000f16 	blt	r5,zero,1107c <__sfvwrite_small_dev+0x78>
   11040:	01c01b0e 	bge	zero,r7,110b0 <__sfvwrite_small_dev+0xac>
   11044:	3821883a 	mov	r16,r7
   11048:	05010004 	movi	r20,1024
   1104c:	00000206 	br	11058 <__sfvwrite_small_dev+0x54>
   11050:	0400170e 	bge	zero,r16,110b0 <__sfvwrite_small_dev+0xac>
   11054:	9140008f 	ldh	r5,2(r18)
   11058:	880d883a 	mov	r6,r17
   1105c:	9809883a 	mov	r4,r19
   11060:	800f883a 	mov	r7,r16
   11064:	a400010e 	bge	r20,r16,1106c <__sfvwrite_small_dev+0x68>
   11068:	01c10004 	movi	r7,1024
   1106c:	00110c00 	call	110c0 <_write_r>
   11070:	88a3883a 	add	r17,r17,r2
   11074:	80a1c83a 	sub	r16,r16,r2
   11078:	00bff516 	blt	zero,r2,11050 <__sfvwrite_small_dev+0x4c>
   1107c:	9080000b 	ldhu	r2,0(r18)
   11080:	00ffffc4 	movi	r3,-1
   11084:	10801014 	ori	r2,r2,64
   11088:	9080000d 	sth	r2,0(r18)
   1108c:	1805883a 	mov	r2,r3
   11090:	dfc00517 	ldw	ra,20(sp)
   11094:	dd000417 	ldw	r20,16(sp)
   11098:	dcc00317 	ldw	r19,12(sp)
   1109c:	dc800217 	ldw	r18,8(sp)
   110a0:	dc400117 	ldw	r17,4(sp)
   110a4:	dc000017 	ldw	r16,0(sp)
   110a8:	dec00604 	addi	sp,sp,24
   110ac:	f800283a 	ret
   110b0:	0007883a 	mov	r3,zero
   110b4:	003ff506 	br	1108c <__sfvwrite_small_dev+0x88>
   110b8:	00ffffc4 	movi	r3,-1
   110bc:	003ff306 	br	1108c <__sfvwrite_small_dev+0x88>

000110c0 <_write_r>:
   110c0:	defffd04 	addi	sp,sp,-12
   110c4:	dc000015 	stw	r16,0(sp)
   110c8:	04000074 	movhi	r16,1
   110cc:	840c8904 	addi	r16,r16,12836
   110d0:	dc400115 	stw	r17,4(sp)
   110d4:	80000015 	stw	zero,0(r16)
   110d8:	2023883a 	mov	r17,r4
   110dc:	2809883a 	mov	r4,r5
   110e0:	300b883a 	mov	r5,r6
   110e4:	380d883a 	mov	r6,r7
   110e8:	dfc00215 	stw	ra,8(sp)
   110ec:	001155c0 	call	1155c <write>
   110f0:	1007883a 	mov	r3,r2
   110f4:	00bfffc4 	movi	r2,-1
   110f8:	18800626 	beq	r3,r2,11114 <_write_r+0x54>
   110fc:	1805883a 	mov	r2,r3
   11100:	dfc00217 	ldw	ra,8(sp)
   11104:	dc400117 	ldw	r17,4(sp)
   11108:	dc000017 	ldw	r16,0(sp)
   1110c:	dec00304 	addi	sp,sp,12
   11110:	f800283a 	ret
   11114:	80800017 	ldw	r2,0(r16)
   11118:	103ff826 	beq	r2,zero,110fc <_write_r+0x3c>
   1111c:	88800015 	stw	r2,0(r17)
   11120:	1805883a 	mov	r2,r3
   11124:	dfc00217 	ldw	ra,8(sp)
   11128:	dc400117 	ldw	r17,4(sp)
   1112c:	dc000017 	ldw	r16,0(sp)
   11130:	dec00304 	addi	sp,sp,12
   11134:	f800283a 	ret

00011138 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11138:	defff904 	addi	sp,sp,-28
   1113c:	dfc00615 	stw	ra,24(sp)
   11140:	df000515 	stw	fp,20(sp)
   11144:	df000504 	addi	fp,sp,20
   11148:	e13ffc15 	stw	r4,-16(fp)
   1114c:	e17ffd15 	stw	r5,-12(fp)
   11150:	e1bffe15 	stw	r6,-8(fp)
   11154:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11158:	e0800217 	ldw	r2,8(fp)
   1115c:	d8800015 	stw	r2,0(sp)
   11160:	e13ffc17 	ldw	r4,-16(fp)
   11164:	e17ffd17 	ldw	r5,-12(fp)
   11168:	e1bffe17 	ldw	r6,-8(fp)
   1116c:	e1ffff17 	ldw	r7,-4(fp)
   11170:	001130c0 	call	1130c <alt_iic_isr_register>
}  
   11174:	e037883a 	mov	sp,fp
   11178:	dfc00117 	ldw	ra,4(sp)
   1117c:	df000017 	ldw	fp,0(sp)
   11180:	dec00204 	addi	sp,sp,8
   11184:	f800283a 	ret

00011188 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11188:	defff904 	addi	sp,sp,-28
   1118c:	df000615 	stw	fp,24(sp)
   11190:	df000604 	addi	fp,sp,24
   11194:	e13ffe15 	stw	r4,-8(fp)
   11198:	e17fff15 	stw	r5,-4(fp)
   1119c:	e0bfff17 	ldw	r2,-4(fp)
   111a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111a4:	0005303a 	rdctl	r2,status
   111a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111ac:	e0fffb17 	ldw	r3,-20(fp)
   111b0:	00bfff84 	movi	r2,-2
   111b4:	1884703a 	and	r2,r3,r2
   111b8:	1001703a 	wrctl	status,r2
  
  return context;
   111bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   111c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   111c4:	e0fffc17 	ldw	r3,-16(fp)
   111c8:	00800044 	movi	r2,1
   111cc:	10c4983a 	sll	r2,r2,r3
   111d0:	1007883a 	mov	r3,r2
   111d4:	00800074 	movhi	r2,1
   111d8:	108c8a04 	addi	r2,r2,12840
   111dc:	10800017 	ldw	r2,0(r2)
   111e0:	1886b03a 	or	r3,r3,r2
   111e4:	00800074 	movhi	r2,1
   111e8:	108c8a04 	addi	r2,r2,12840
   111ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   111f0:	00800074 	movhi	r2,1
   111f4:	108c8a04 	addi	r2,r2,12840
   111f8:	10800017 	ldw	r2,0(r2)
   111fc:	100170fa 	wrctl	ienable,r2
   11200:	e0bffd17 	ldw	r2,-12(fp)
   11204:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11208:	e0bffa17 	ldw	r2,-24(fp)
   1120c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11210:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   11214:	e037883a 	mov	sp,fp
   11218:	df000017 	ldw	fp,0(sp)
   1121c:	dec00104 	addi	sp,sp,4
   11220:	f800283a 	ret

00011224 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11224:	defff904 	addi	sp,sp,-28
   11228:	df000615 	stw	fp,24(sp)
   1122c:	df000604 	addi	fp,sp,24
   11230:	e13ffe15 	stw	r4,-8(fp)
   11234:	e17fff15 	stw	r5,-4(fp)
   11238:	e0bfff17 	ldw	r2,-4(fp)
   1123c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11240:	0005303a 	rdctl	r2,status
   11244:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11248:	e0fffb17 	ldw	r3,-20(fp)
   1124c:	00bfff84 	movi	r2,-2
   11250:	1884703a 	and	r2,r3,r2
   11254:	1001703a 	wrctl	status,r2
  
  return context;
   11258:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1125c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   11260:	e0fffc17 	ldw	r3,-16(fp)
   11264:	00800044 	movi	r2,1
   11268:	10c4983a 	sll	r2,r2,r3
   1126c:	0084303a 	nor	r2,zero,r2
   11270:	1007883a 	mov	r3,r2
   11274:	00800074 	movhi	r2,1
   11278:	108c8a04 	addi	r2,r2,12840
   1127c:	10800017 	ldw	r2,0(r2)
   11280:	1886703a 	and	r3,r3,r2
   11284:	00800074 	movhi	r2,1
   11288:	108c8a04 	addi	r2,r2,12840
   1128c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11290:	00800074 	movhi	r2,1
   11294:	108c8a04 	addi	r2,r2,12840
   11298:	10800017 	ldw	r2,0(r2)
   1129c:	100170fa 	wrctl	ienable,r2
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112a8:	e0bffa17 	ldw	r2,-24(fp)
   112ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   112b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   112b4:	e037883a 	mov	sp,fp
   112b8:	df000017 	ldw	fp,0(sp)
   112bc:	dec00104 	addi	sp,sp,4
   112c0:	f800283a 	ret

000112c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   112c4:	defffc04 	addi	sp,sp,-16
   112c8:	df000315 	stw	fp,12(sp)
   112cc:	df000304 	addi	fp,sp,12
   112d0:	e13ffe15 	stw	r4,-8(fp)
   112d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   112d8:	000530fa 	rdctl	r2,ienable
   112dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   112e0:	e0ffff17 	ldw	r3,-4(fp)
   112e4:	00800044 	movi	r2,1
   112e8:	10c4983a 	sll	r2,r2,r3
   112ec:	1007883a 	mov	r3,r2
   112f0:	e0bffd17 	ldw	r2,-12(fp)
   112f4:	1884703a 	and	r2,r3,r2
   112f8:	1004c03a 	cmpne	r2,r2,zero
}
   112fc:	e037883a 	mov	sp,fp
   11300:	df000017 	ldw	fp,0(sp)
   11304:	dec00104 	addi	sp,sp,4
   11308:	f800283a 	ret

0001130c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1130c:	defff404 	addi	sp,sp,-48
   11310:	dfc00b15 	stw	ra,44(sp)
   11314:	df000a15 	stw	fp,40(sp)
   11318:	df000a04 	addi	fp,sp,40
   1131c:	e13ffb15 	stw	r4,-20(fp)
   11320:	e17ffc15 	stw	r5,-16(fp)
   11324:	e1bffd15 	stw	r6,-12(fp)
   11328:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1132c:	00bffa84 	movi	r2,-22
   11330:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11334:	e0bffc17 	ldw	r2,-16(fp)
   11338:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1133c:	e0bff917 	ldw	r2,-28(fp)
   11340:	10800808 	cmpgei	r2,r2,32
   11344:	1000291e 	bne	r2,zero,113ec <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11348:	0005303a 	rdctl	r2,status
   1134c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11350:	e0fff717 	ldw	r3,-36(fp)
   11354:	00bfff84 	movi	r2,-2
   11358:	1884703a 	and	r2,r3,r2
   1135c:	1001703a 	wrctl	status,r2
  
  return context;
   11360:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11364:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   11368:	e0bff917 	ldw	r2,-28(fp)
   1136c:	00c00074 	movhi	r3,1
   11370:	18cc9004 	addi	r3,r3,12864
   11374:	100490fa 	slli	r2,r2,3
   11378:	10c7883a 	add	r3,r2,r3
   1137c:	e0bffd17 	ldw	r2,-12(fp)
   11380:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   11384:	e0bff917 	ldw	r2,-28(fp)
   11388:	00c00074 	movhi	r3,1
   1138c:	18cc9004 	addi	r3,r3,12864
   11390:	100490fa 	slli	r2,r2,3
   11394:	10c5883a 	add	r2,r2,r3
   11398:	10c00104 	addi	r3,r2,4
   1139c:	e0bffe17 	ldw	r2,-8(fp)
   113a0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   113a4:	e0bffd17 	ldw	r2,-12(fp)
   113a8:	1005003a 	cmpeq	r2,r2,zero
   113ac:	1000051e 	bne	r2,zero,113c4 <alt_iic_isr_register+0xb8>
   113b0:	e17ff917 	ldw	r5,-28(fp)
   113b4:	e13ffb17 	ldw	r4,-20(fp)
   113b8:	00111880 	call	11188 <alt_ic_irq_enable>
   113bc:	e0bfff15 	stw	r2,-4(fp)
   113c0:	00000406 	br	113d4 <alt_iic_isr_register+0xc8>
   113c4:	e17ff917 	ldw	r5,-28(fp)
   113c8:	e13ffb17 	ldw	r4,-20(fp)
   113cc:	00112240 	call	11224 <alt_ic_irq_disable>
   113d0:	e0bfff15 	stw	r2,-4(fp)
   113d4:	e0bfff17 	ldw	r2,-4(fp)
   113d8:	e0bffa15 	stw	r2,-24(fp)
   113dc:	e0bff817 	ldw	r2,-32(fp)
   113e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113e4:	e0bff617 	ldw	r2,-40(fp)
   113e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   113ec:	e0bffa17 	ldw	r2,-24(fp)
}
   113f0:	e037883a 	mov	sp,fp
   113f4:	dfc00117 	ldw	ra,4(sp)
   113f8:	df000017 	ldw	fp,0(sp)
   113fc:	dec00204 	addi	sp,sp,8
   11400:	f800283a 	ret

00011404 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11404:	defffe04 	addi	sp,sp,-8
   11408:	dfc00115 	stw	ra,4(sp)
   1140c:	df000015 	stw	fp,0(sp)
   11410:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11414:	01000074 	movhi	r4,1
   11418:	210bcb04 	addi	r4,r4,12076
   1141c:	01400074 	movhi	r5,1
   11420:	294b0d04 	addi	r5,r5,11316
   11424:	01800074 	movhi	r6,1
   11428:	318bcb04 	addi	r6,r6,12076
   1142c:	00114840 	call	11484 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11430:	01000074 	movhi	r4,1
   11434:	21000804 	addi	r4,r4,32
   11438:	01400074 	movhi	r5,1
   1143c:	29400804 	addi	r5,r5,32
   11440:	01800074 	movhi	r6,1
   11444:	31806d04 	addi	r6,r6,436
   11448:	00114840 	call	11484 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1144c:	01000074 	movhi	r4,1
   11450:	210aee04 	addi	r4,r4,11192
   11454:	01400074 	movhi	r5,1
   11458:	294aee04 	addi	r5,r5,11192
   1145c:	01800074 	movhi	r6,1
   11460:	318b0d04 	addi	r6,r6,11316
   11464:	00114840 	call	11484 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11468:	0011c440 	call	11c44 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1146c:	0011e680 	call	11e68 <alt_icache_flush_all>
}
   11470:	e037883a 	mov	sp,fp
   11474:	dfc00117 	ldw	ra,4(sp)
   11478:	df000017 	ldw	fp,0(sp)
   1147c:	dec00204 	addi	sp,sp,8
   11480:	f800283a 	ret

00011484 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11484:	defffc04 	addi	sp,sp,-16
   11488:	df000315 	stw	fp,12(sp)
   1148c:	df000304 	addi	fp,sp,12
   11490:	e13ffd15 	stw	r4,-12(fp)
   11494:	e17ffe15 	stw	r5,-8(fp)
   11498:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1149c:	e0fffe17 	ldw	r3,-8(fp)
   114a0:	e0bffd17 	ldw	r2,-12(fp)
   114a4:	18800e26 	beq	r3,r2,114e0 <alt_load_section+0x5c>
  {
    while( to != end )
   114a8:	00000a06 	br	114d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   114ac:	e0bffd17 	ldw	r2,-12(fp)
   114b0:	10c00017 	ldw	r3,0(r2)
   114b4:	e0bffe17 	ldw	r2,-8(fp)
   114b8:	10c00015 	stw	r3,0(r2)
   114bc:	e0bffe17 	ldw	r2,-8(fp)
   114c0:	10800104 	addi	r2,r2,4
   114c4:	e0bffe15 	stw	r2,-8(fp)
   114c8:	e0bffd17 	ldw	r2,-12(fp)
   114cc:	10800104 	addi	r2,r2,4
   114d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   114d4:	e0fffe17 	ldw	r3,-8(fp)
   114d8:	e0bfff17 	ldw	r2,-4(fp)
   114dc:	18bff31e 	bne	r3,r2,114ac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   114e0:	e037883a 	mov	sp,fp
   114e4:	df000017 	ldw	fp,0(sp)
   114e8:	dec00104 	addi	sp,sp,4
   114ec:	f800283a 	ret

000114f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   114f0:	defffd04 	addi	sp,sp,-12
   114f4:	dfc00215 	stw	ra,8(sp)
   114f8:	df000115 	stw	fp,4(sp)
   114fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11500:	0009883a 	mov	r4,zero
   11504:	00116dc0 	call	116dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11508:	00117100 	call	11710 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1150c:	01000074 	movhi	r4,1
   11510:	210b0004 	addi	r4,r4,11264
   11514:	01400074 	movhi	r5,1
   11518:	294b0004 	addi	r5,r5,11264
   1151c:	01800074 	movhi	r6,1
   11520:	318b0004 	addi	r6,r6,11264
   11524:	0011f5c0 	call	11f5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   11528:	0011da00 	call	11da0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1152c:	01000074 	movhi	r4,1
   11530:	21078104 	addi	r4,r4,7684
   11534:	00127b80 	call	127b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   11538:	d120d117 	ldw	r4,-31932(gp)
   1153c:	d160d217 	ldw	r5,-31928(gp)
   11540:	d1a0d317 	ldw	r6,-31924(gp)
   11544:	00103cc0 	call	103cc <main>
   11548:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1154c:	01000044 	movi	r4,1
   11550:	0011ae80 	call	11ae8 <close>
  exit (result);
   11554:	e13fff17 	ldw	r4,-4(fp)
   11558:	00127cc0 	call	127cc <exit>

0001155c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1155c:	defff704 	addi	sp,sp,-36
   11560:	dfc00815 	stw	ra,32(sp)
   11564:	df000715 	stw	fp,28(sp)
   11568:	df000704 	addi	fp,sp,28
   1156c:	e13ffb15 	stw	r4,-20(fp)
   11570:	e17ffc15 	stw	r5,-16(fp)
   11574:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11578:	e0bffb17 	ldw	r2,-20(fp)
   1157c:	1004803a 	cmplt	r2,r2,zero
   11580:	1000081e 	bne	r2,zero,115a4 <write+0x48>
   11584:	e0bffb17 	ldw	r2,-20(fp)
   11588:	10800324 	muli	r2,r2,12
   1158c:	1007883a 	mov	r3,r2
   11590:	00800074 	movhi	r2,1
   11594:	108b5a04 	addi	r2,r2,11624
   11598:	1887883a 	add	r3,r3,r2
   1159c:	e0ffff15 	stw	r3,-4(fp)
   115a0:	00000106 	br	115a8 <write+0x4c>
   115a4:	e03fff15 	stw	zero,-4(fp)
   115a8:	e0bfff17 	ldw	r2,-4(fp)
   115ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   115b0:	e0bffa17 	ldw	r2,-24(fp)
   115b4:	1005003a 	cmpeq	r2,r2,zero
   115b8:	1000241e 	bne	r2,zero,1164c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   115bc:	e0bffa17 	ldw	r2,-24(fp)
   115c0:	10800217 	ldw	r2,8(r2)
   115c4:	108000cc 	andi	r2,r2,3
   115c8:	1005003a 	cmpeq	r2,r2,zero
   115cc:	10001a1e 	bne	r2,zero,11638 <write+0xdc>
   115d0:	e0bffa17 	ldw	r2,-24(fp)
   115d4:	10800017 	ldw	r2,0(r2)
   115d8:	10800617 	ldw	r2,24(r2)
   115dc:	1005003a 	cmpeq	r2,r2,zero
   115e0:	1000151e 	bne	r2,zero,11638 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   115e4:	e0bffa17 	ldw	r2,-24(fp)
   115e8:	10800017 	ldw	r2,0(r2)
   115ec:	10800617 	ldw	r2,24(r2)
   115f0:	e17ffc17 	ldw	r5,-16(fp)
   115f4:	e1bffd17 	ldw	r6,-12(fp)
   115f8:	e13ffa17 	ldw	r4,-24(fp)
   115fc:	103ee83a 	callr	r2
   11600:	e0bff915 	stw	r2,-28(fp)
   11604:	e0bff917 	ldw	r2,-28(fp)
   11608:	1004403a 	cmpge	r2,r2,zero
   1160c:	1000071e 	bne	r2,zero,1162c <write+0xd0>
      {
        ALT_ERRNO = -rval;
   11610:	001167c0 	call	1167c <alt_get_errno>
   11614:	e0fff917 	ldw	r3,-28(fp)
   11618:	00c7c83a 	sub	r3,zero,r3
   1161c:	10c00015 	stw	r3,0(r2)
        return -1;
   11620:	00bfffc4 	movi	r2,-1
   11624:	e0bffe15 	stw	r2,-8(fp)
   11628:	00000e06 	br	11664 <write+0x108>
      }
      return rval;
   1162c:	e0bff917 	ldw	r2,-28(fp)
   11630:	e0bffe15 	stw	r2,-8(fp)
   11634:	00000b06 	br	11664 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11638:	001167c0 	call	1167c <alt_get_errno>
   1163c:	1007883a 	mov	r3,r2
   11640:	00800344 	movi	r2,13
   11644:	18800015 	stw	r2,0(r3)
   11648:	00000406 	br	1165c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1164c:	001167c0 	call	1167c <alt_get_errno>
   11650:	1007883a 	mov	r3,r2
   11654:	00801444 	movi	r2,81
   11658:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1165c:	00bfffc4 	movi	r2,-1
   11660:	e0bffe15 	stw	r2,-8(fp)
   11664:	e0bffe17 	ldw	r2,-8(fp)
}
   11668:	e037883a 	mov	sp,fp
   1166c:	dfc00117 	ldw	ra,4(sp)
   11670:	df000017 	ldw	fp,0(sp)
   11674:	dec00204 	addi	sp,sp,8
   11678:	f800283a 	ret

0001167c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1167c:	defffd04 	addi	sp,sp,-12
   11680:	dfc00215 	stw	ra,8(sp)
   11684:	df000115 	stw	fp,4(sp)
   11688:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1168c:	00800074 	movhi	r2,1
   11690:	108bc804 	addi	r2,r2,12064
   11694:	10800017 	ldw	r2,0(r2)
   11698:	1005003a 	cmpeq	r2,r2,zero
   1169c:	1000061e 	bne	r2,zero,116b8 <alt_get_errno+0x3c>
   116a0:	00800074 	movhi	r2,1
   116a4:	108bc804 	addi	r2,r2,12064
   116a8:	10800017 	ldw	r2,0(r2)
   116ac:	103ee83a 	callr	r2
   116b0:	e0bfff15 	stw	r2,-4(fp)
   116b4:	00000306 	br	116c4 <alt_get_errno+0x48>
   116b8:	00800074 	movhi	r2,1
   116bc:	108c8904 	addi	r2,r2,12836
   116c0:	e0bfff15 	stw	r2,-4(fp)
   116c4:	e0bfff17 	ldw	r2,-4(fp)
}
   116c8:	e037883a 	mov	sp,fp
   116cc:	dfc00117 	ldw	ra,4(sp)
   116d0:	df000017 	ldw	fp,0(sp)
   116d4:	dec00204 	addi	sp,sp,8
   116d8:	f800283a 	ret

000116dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   116dc:	defffd04 	addi	sp,sp,-12
   116e0:	dfc00215 	stw	ra,8(sp)
   116e4:	df000115 	stw	fp,4(sp)
   116e8:	df000104 	addi	fp,sp,4
   116ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   116f0:	001249c0 	call	1249c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   116f4:	00800044 	movi	r2,1
   116f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   116fc:	e037883a 	mov	sp,fp
   11700:	dfc00117 	ldw	ra,4(sp)
   11704:	df000017 	ldw	fp,0(sp)
   11708:	dec00204 	addi	sp,sp,8
   1170c:	f800283a 	ret

00011710 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11710:	defffe04 	addi	sp,sp,-8
   11714:	dfc00115 	stw	ra,4(sp)
   11718:	df000015 	stw	fp,0(sp)
   1171c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   11720:	010000b4 	movhi	r4,2
   11724:	21040804 	addi	r4,r4,4128
   11728:	000b883a 	mov	r5,zero
   1172c:	000d883a 	mov	r6,zero
   11730:	01c0fa04 	movi	r7,1000
   11734:	0011a580 	call	11a58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   11738:	01000074 	movhi	r4,1
   1173c:	210b4504 	addi	r4,r4,11540
   11740:	00117580 	call	11758 <alt_dev_reg>
}
   11744:	e037883a 	mov	sp,fp
   11748:	dfc00117 	ldw	ra,4(sp)
   1174c:	df000017 	ldw	fp,0(sp)
   11750:	dec00204 	addi	sp,sp,8
   11754:	f800283a 	ret

00011758 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11758:	defffd04 	addi	sp,sp,-12
   1175c:	dfc00215 	stw	ra,8(sp)
   11760:	df000115 	stw	fp,4(sp)
   11764:	df000104 	addi	fp,sp,4
   11768:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1176c:	e13fff17 	ldw	r4,-4(fp)
   11770:	01400074 	movhi	r5,1
   11774:	294bc504 	addi	r5,r5,12052
   11778:	0011c8c0 	call	11c8c <alt_dev_llist_insert>
}
   1177c:	e037883a 	mov	sp,fp
   11780:	dfc00117 	ldw	ra,4(sp)
   11784:	df000017 	ldw	fp,0(sp)
   11788:	dec00204 	addi	sp,sp,8
   1178c:	f800283a 	ret

00011790 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11790:	defffa04 	addi	sp,sp,-24
   11794:	dfc00515 	stw	ra,20(sp)
   11798:	df000415 	stw	fp,16(sp)
   1179c:	df000404 	addi	fp,sp,16
   117a0:	e13ffd15 	stw	r4,-12(fp)
   117a4:	e17ffe15 	stw	r5,-8(fp)
   117a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   117ac:	e0bffd17 	ldw	r2,-12(fp)
   117b0:	10800017 	ldw	r2,0(r2)
   117b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   117b8:	e0bffc17 	ldw	r2,-16(fp)
   117bc:	11000a04 	addi	r4,r2,40
   117c0:	e0bffd17 	ldw	r2,-12(fp)
   117c4:	11c00217 	ldw	r7,8(r2)
   117c8:	e17ffe17 	ldw	r5,-8(fp)
   117cc:	e1bfff17 	ldw	r6,-4(fp)
   117d0:	00118400 	call	11840 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   117d4:	e037883a 	mov	sp,fp
   117d8:	dfc00117 	ldw	ra,4(sp)
   117dc:	df000017 	ldw	fp,0(sp)
   117e0:	dec00204 	addi	sp,sp,8
   117e4:	f800283a 	ret

000117e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   117e8:	defffa04 	addi	sp,sp,-24
   117ec:	dfc00515 	stw	ra,20(sp)
   117f0:	df000415 	stw	fp,16(sp)
   117f4:	df000404 	addi	fp,sp,16
   117f8:	e13ffd15 	stw	r4,-12(fp)
   117fc:	e17ffe15 	stw	r5,-8(fp)
   11800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11804:	e0bffd17 	ldw	r2,-12(fp)
   11808:	10800017 	ldw	r2,0(r2)
   1180c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11810:	e0bffc17 	ldw	r2,-16(fp)
   11814:	11000a04 	addi	r4,r2,40
   11818:	e0bffd17 	ldw	r2,-12(fp)
   1181c:	11c00217 	ldw	r7,8(r2)
   11820:	e17ffe17 	ldw	r5,-8(fp)
   11824:	e1bfff17 	ldw	r6,-4(fp)
   11828:	00119440 	call	11944 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1182c:	e037883a 	mov	sp,fp
   11830:	dfc00117 	ldw	ra,4(sp)
   11834:	df000017 	ldw	fp,0(sp)
   11838:	dec00204 	addi	sp,sp,8
   1183c:	f800283a 	ret

00011840 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   11840:	defff604 	addi	sp,sp,-40
   11844:	df000915 	stw	fp,36(sp)
   11848:	df000904 	addi	fp,sp,36
   1184c:	e13ffb15 	stw	r4,-20(fp)
   11850:	e17ffc15 	stw	r5,-16(fp)
   11854:	e1bffd15 	stw	r6,-12(fp)
   11858:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   1185c:	e0bffb17 	ldw	r2,-20(fp)
   11860:	10800017 	ldw	r2,0(r2)
   11864:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   11868:	e0bffc17 	ldw	r2,-16(fp)
   1186c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   11870:	e0bffd17 	ldw	r2,-12(fp)
   11874:	1007883a 	mov	r3,r2
   11878:	e0bffc17 	ldw	r2,-16(fp)
   1187c:	10c5883a 	add	r2,r2,r3
   11880:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   11884:	00001606 	br	118e0 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11888:	e0bffa17 	ldw	r2,-24(fp)
   1188c:	10800037 	ldwio	r2,0(r2)
   11890:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11894:	e0bff717 	ldw	r2,-36(fp)
   11898:	10a0000c 	andi	r2,r2,32768
   1189c:	1005003a 	cmpeq	r2,r2,zero
   118a0:	1000081e 	bne	r2,zero,118c4 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   118a4:	e0bff717 	ldw	r2,-36(fp)
   118a8:	1007883a 	mov	r3,r2
   118ac:	e0bff917 	ldw	r2,-28(fp)
   118b0:	10c00005 	stb	r3,0(r2)
   118b4:	e0bff917 	ldw	r2,-28(fp)
   118b8:	10800044 	addi	r2,r2,1
   118bc:	e0bff915 	stw	r2,-28(fp)
   118c0:	00000706 	br	118e0 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   118c4:	e0fff917 	ldw	r3,-28(fp)
   118c8:	e0bffc17 	ldw	r2,-16(fp)
   118cc:	1880071e 	bne	r3,r2,118ec <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	1090000c 	andi	r2,r2,16384
   118d8:	1004c03a 	cmpne	r2,r2,zero
   118dc:	1000031e 	bne	r2,zero,118ec <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   118e0:	e0fff917 	ldw	r3,-28(fp)
   118e4:	e0bff817 	ldw	r2,-32(fp)
   118e8:	18bfe736 	bltu	r3,r2,11888 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   118ec:	e0fff917 	ldw	r3,-28(fp)
   118f0:	e0bffc17 	ldw	r2,-16(fp)
   118f4:	18800526 	beq	r3,r2,1190c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   118f8:	e0fff917 	ldw	r3,-28(fp)
   118fc:	e0bffc17 	ldw	r2,-16(fp)
   11900:	1887c83a 	sub	r3,r3,r2
   11904:	e0ffff15 	stw	r3,-4(fp)
   11908:	00000906 	br	11930 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   1190c:	e0bffe17 	ldw	r2,-8(fp)
   11910:	1090000c 	andi	r2,r2,16384
   11914:	1005003a 	cmpeq	r2,r2,zero
   11918:	1000031e 	bne	r2,zero,11928 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   1191c:	00bffd44 	movi	r2,-11
   11920:	e0bfff15 	stw	r2,-4(fp)
   11924:	00000206 	br	11930 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   11928:	00bffec4 	movi	r2,-5
   1192c:	e0bfff15 	stw	r2,-4(fp)
   11930:	e0bfff17 	ldw	r2,-4(fp)
}
   11934:	e037883a 	mov	sp,fp
   11938:	df000017 	ldw	fp,0(sp)
   1193c:	dec00104 	addi	sp,sp,4
   11940:	f800283a 	ret

00011944 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11944:	defff904 	addi	sp,sp,-28
   11948:	df000615 	stw	fp,24(sp)
   1194c:	df000604 	addi	fp,sp,24
   11950:	e13ffc15 	stw	r4,-16(fp)
   11954:	e17ffd15 	stw	r5,-12(fp)
   11958:	e1bffe15 	stw	r6,-8(fp)
   1195c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   11960:	e0bffc17 	ldw	r2,-16(fp)
   11964:	10800017 	ldw	r2,0(r2)
   11968:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   1196c:	e0bffe17 	ldw	r2,-8(fp)
   11970:	1007883a 	mov	r3,r2
   11974:	e0bffd17 	ldw	r2,-12(fp)
   11978:	10c5883a 	add	r2,r2,r3
   1197c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   11980:	00001106 	br	119c8 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11984:	e0bffb17 	ldw	r2,-20(fp)
   11988:	10800104 	addi	r2,r2,4
   1198c:	10800037 	ldwio	r2,0(r2)
   11990:	10bfffec 	andhi	r2,r2,65535
   11994:	1005003a 	cmpeq	r2,r2,zero
   11998:	10000b1e 	bne	r2,zero,119c8 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1199c:	e13ffb17 	ldw	r4,-20(fp)
   119a0:	e0bffd17 	ldw	r2,-12(fp)
   119a4:	10800003 	ldbu	r2,0(r2)
   119a8:	10c03fcc 	andi	r3,r2,255
   119ac:	18c0201c 	xori	r3,r3,128
   119b0:	18ffe004 	addi	r3,r3,-128
   119b4:	e0bffd17 	ldw	r2,-12(fp)
   119b8:	10800044 	addi	r2,r2,1
   119bc:	e0bffd15 	stw	r2,-12(fp)
   119c0:	2005883a 	mov	r2,r4
   119c4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   119c8:	e0fffd17 	ldw	r3,-12(fp)
   119cc:	e0bffa17 	ldw	r2,-24(fp)
   119d0:	18bfec36 	bltu	r3,r2,11984 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   119d4:	e0bffe17 	ldw	r2,-8(fp)
}
   119d8:	e037883a 	mov	sp,fp
   119dc:	df000017 	ldw	fp,0(sp)
   119e0:	dec00104 	addi	sp,sp,4
   119e4:	f800283a 	ret

000119e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   119e8:	defffa04 	addi	sp,sp,-24
   119ec:	dfc00515 	stw	ra,20(sp)
   119f0:	df000415 	stw	fp,16(sp)
   119f4:	df000404 	addi	fp,sp,16
   119f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   119fc:	e0bfff17 	ldw	r2,-4(fp)
   11a00:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11a04:	e0bfff17 	ldw	r2,-4(fp)
   11a08:	10800104 	addi	r2,r2,4
   11a0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a10:	0005303a 	rdctl	r2,status
   11a14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a18:	e0fffd17 	ldw	r3,-12(fp)
   11a1c:	00bfff84 	movi	r2,-2
   11a20:	1884703a 	and	r2,r3,r2
   11a24:	1001703a 	wrctl	status,r2
  
  return context;
   11a28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11a2c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   11a30:	00123900 	call	12390 <alt_tick>
   11a34:	e0bffe17 	ldw	r2,-8(fp)
   11a38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a3c:	e0bffc17 	ldw	r2,-16(fp)
   11a40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11a44:	e037883a 	mov	sp,fp
   11a48:	dfc00117 	ldw	ra,4(sp)
   11a4c:	df000017 	ldw	fp,0(sp)
   11a50:	dec00204 	addi	sp,sp,8
   11a54:	f800283a 	ret

00011a58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11a58:	defff804 	addi	sp,sp,-32
   11a5c:	dfc00715 	stw	ra,28(sp)
   11a60:	df000615 	stw	fp,24(sp)
   11a64:	df000604 	addi	fp,sp,24
   11a68:	e13ffc15 	stw	r4,-16(fp)
   11a6c:	e17ffd15 	stw	r5,-12(fp)
   11a70:	e1bffe15 	stw	r6,-8(fp)
   11a74:	e1ffff15 	stw	r7,-4(fp)
   11a78:	e0bfff17 	ldw	r2,-4(fp)
   11a7c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11a80:	00800074 	movhi	r2,1
   11a84:	108c8e04 	addi	r2,r2,12856
   11a88:	10800017 	ldw	r2,0(r2)
   11a8c:	1004c03a 	cmpne	r2,r2,zero
   11a90:	1000041e 	bne	r2,zero,11aa4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   11a94:	00c00074 	movhi	r3,1
   11a98:	18cc8e04 	addi	r3,r3,12856
   11a9c:	e0bffb17 	ldw	r2,-20(fp)
   11aa0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11aa4:	e0bffc17 	ldw	r2,-16(fp)
   11aa8:	10800104 	addi	r2,r2,4
   11aac:	1007883a 	mov	r3,r2
   11ab0:	008001c4 	movi	r2,7
   11ab4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11ab8:	d8000015 	stw	zero,0(sp)
   11abc:	e13ffd17 	ldw	r4,-12(fp)
   11ac0:	e17ffe17 	ldw	r5,-8(fp)
   11ac4:	01800074 	movhi	r6,1
   11ac8:	31867a04 	addi	r6,r6,6632
   11acc:	e1fffc17 	ldw	r7,-16(fp)
   11ad0:	00111380 	call	11138 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11ad4:	e037883a 	mov	sp,fp
   11ad8:	dfc00117 	ldw	ra,4(sp)
   11adc:	df000017 	ldw	fp,0(sp)
   11ae0:	dec00204 	addi	sp,sp,8
   11ae4:	f800283a 	ret

00011ae8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11ae8:	defff804 	addi	sp,sp,-32
   11aec:	dfc00715 	stw	ra,28(sp)
   11af0:	df000615 	stw	fp,24(sp)
   11af4:	df000604 	addi	fp,sp,24
   11af8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11afc:	e0bffc17 	ldw	r2,-16(fp)
   11b00:	1004803a 	cmplt	r2,r2,zero
   11b04:	1000081e 	bne	r2,zero,11b28 <close+0x40>
   11b08:	e0bffc17 	ldw	r2,-16(fp)
   11b0c:	10800324 	muli	r2,r2,12
   11b10:	1007883a 	mov	r3,r2
   11b14:	00800074 	movhi	r2,1
   11b18:	108b5a04 	addi	r2,r2,11624
   11b1c:	1887883a 	add	r3,r3,r2
   11b20:	e0ffff15 	stw	r3,-4(fp)
   11b24:	00000106 	br	11b2c <close+0x44>
   11b28:	e03fff15 	stw	zero,-4(fp)
   11b2c:	e0bfff17 	ldw	r2,-4(fp)
   11b30:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   11b34:	e0bffb17 	ldw	r2,-20(fp)
   11b38:	1005003a 	cmpeq	r2,r2,zero
   11b3c:	10001d1e 	bne	r2,zero,11bb4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11b40:	e0bffb17 	ldw	r2,-20(fp)
   11b44:	10800017 	ldw	r2,0(r2)
   11b48:	10800417 	ldw	r2,16(r2)
   11b4c:	1005003a 	cmpeq	r2,r2,zero
   11b50:	1000071e 	bne	r2,zero,11b70 <close+0x88>
   11b54:	e0bffb17 	ldw	r2,-20(fp)
   11b58:	10800017 	ldw	r2,0(r2)
   11b5c:	10800417 	ldw	r2,16(r2)
   11b60:	e13ffb17 	ldw	r4,-20(fp)
   11b64:	103ee83a 	callr	r2
   11b68:	e0bffe15 	stw	r2,-8(fp)
   11b6c:	00000106 	br	11b74 <close+0x8c>
   11b70:	e03ffe15 	stw	zero,-8(fp)
   11b74:	e0bffe17 	ldw	r2,-8(fp)
   11b78:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11b7c:	e13ffc17 	ldw	r4,-16(fp)
   11b80:	00122980 	call	12298 <alt_release_fd>
    if (rval < 0)
   11b84:	e0bffa17 	ldw	r2,-24(fp)
   11b88:	1004403a 	cmpge	r2,r2,zero
   11b8c:	1000071e 	bne	r2,zero,11bac <close+0xc4>
    {
      ALT_ERRNO = -rval;
   11b90:	0011be40 	call	11be4 <alt_get_errno>
   11b94:	e0fffa17 	ldw	r3,-24(fp)
   11b98:	00c7c83a 	sub	r3,zero,r3
   11b9c:	10c00015 	stw	r3,0(r2)
      return -1;
   11ba0:	00bfffc4 	movi	r2,-1
   11ba4:	e0bffd15 	stw	r2,-12(fp)
   11ba8:	00000806 	br	11bcc <close+0xe4>
    }
    return 0;
   11bac:	e03ffd15 	stw	zero,-12(fp)
   11bb0:	00000606 	br	11bcc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11bb4:	0011be40 	call	11be4 <alt_get_errno>
   11bb8:	1007883a 	mov	r3,r2
   11bbc:	00801444 	movi	r2,81
   11bc0:	18800015 	stw	r2,0(r3)
    return -1;
   11bc4:	00bfffc4 	movi	r2,-1
   11bc8:	e0bffd15 	stw	r2,-12(fp)
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   11bd0:	e037883a 	mov	sp,fp
   11bd4:	dfc00117 	ldw	ra,4(sp)
   11bd8:	df000017 	ldw	fp,0(sp)
   11bdc:	dec00204 	addi	sp,sp,8
   11be0:	f800283a 	ret

00011be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11be4:	defffd04 	addi	sp,sp,-12
   11be8:	dfc00215 	stw	ra,8(sp)
   11bec:	df000115 	stw	fp,4(sp)
   11bf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11bf4:	00800074 	movhi	r2,1
   11bf8:	108bc804 	addi	r2,r2,12064
   11bfc:	10800017 	ldw	r2,0(r2)
   11c00:	1005003a 	cmpeq	r2,r2,zero
   11c04:	1000061e 	bne	r2,zero,11c20 <alt_get_errno+0x3c>
   11c08:	00800074 	movhi	r2,1
   11c0c:	108bc804 	addi	r2,r2,12064
   11c10:	10800017 	ldw	r2,0(r2)
   11c14:	103ee83a 	callr	r2
   11c18:	e0bfff15 	stw	r2,-4(fp)
   11c1c:	00000306 	br	11c2c <alt_get_errno+0x48>
   11c20:	00800074 	movhi	r2,1
   11c24:	108c8904 	addi	r2,r2,12836
   11c28:	e0bfff15 	stw	r2,-4(fp)
   11c2c:	e0bfff17 	ldw	r2,-4(fp)
}
   11c30:	e037883a 	mov	sp,fp
   11c34:	dfc00117 	ldw	ra,4(sp)
   11c38:	df000017 	ldw	fp,0(sp)
   11c3c:	dec00204 	addi	sp,sp,8
   11c40:	f800283a 	ret

00011c44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11c44:	deffff04 	addi	sp,sp,-4
   11c48:	df000015 	stw	fp,0(sp)
   11c4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11c50:	e037883a 	mov	sp,fp
   11c54:	df000017 	ldw	fp,0(sp)
   11c58:	dec00104 	addi	sp,sp,4
   11c5c:	f800283a 	ret

00011c60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11c60:	defffc04 	addi	sp,sp,-16
   11c64:	df000315 	stw	fp,12(sp)
   11c68:	df000304 	addi	fp,sp,12
   11c6c:	e13ffd15 	stw	r4,-12(fp)
   11c70:	e17ffe15 	stw	r5,-8(fp)
   11c74:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11c78:	e0bfff17 	ldw	r2,-4(fp)
}
   11c7c:	e037883a 	mov	sp,fp
   11c80:	df000017 	ldw	fp,0(sp)
   11c84:	dec00104 	addi	sp,sp,4
   11c88:	f800283a 	ret

00011c8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11c8c:	defff904 	addi	sp,sp,-28
   11c90:	dfc00615 	stw	ra,24(sp)
   11c94:	df000515 	stw	fp,20(sp)
   11c98:	df000504 	addi	fp,sp,20
   11c9c:	e13ffd15 	stw	r4,-12(fp)
   11ca0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11ca4:	e0bffd17 	ldw	r2,-12(fp)
   11ca8:	1005003a 	cmpeq	r2,r2,zero
   11cac:	1000041e 	bne	r2,zero,11cc0 <alt_dev_llist_insert+0x34>
   11cb0:	e0bffd17 	ldw	r2,-12(fp)
   11cb4:	10800217 	ldw	r2,8(r2)
   11cb8:	1004c03a 	cmpne	r2,r2,zero
   11cbc:	1000071e 	bne	r2,zero,11cdc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   11cc0:	0011d400 	call	11d40 <alt_get_errno>
   11cc4:	1007883a 	mov	r3,r2
   11cc8:	00800584 	movi	r2,22
   11ccc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11cd0:	00bffa84 	movi	r2,-22
   11cd4:	e0bfff15 	stw	r2,-4(fp)
   11cd8:	00001306 	br	11d28 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11cdc:	e0fffd17 	ldw	r3,-12(fp)
   11ce0:	e0bffe17 	ldw	r2,-8(fp)
   11ce4:	e0bffb15 	stw	r2,-20(fp)
   11ce8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11cec:	e0fffc17 	ldw	r3,-16(fp)
   11cf0:	e0bffb17 	ldw	r2,-20(fp)
   11cf4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   11cf8:	e0bffb17 	ldw	r2,-20(fp)
   11cfc:	10c00017 	ldw	r3,0(r2)
   11d00:	e0bffc17 	ldw	r2,-16(fp)
   11d04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11d08:	e0bffb17 	ldw	r2,-20(fp)
   11d0c:	10c00017 	ldw	r3,0(r2)
   11d10:	e0bffc17 	ldw	r2,-16(fp)
   11d14:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   11d18:	e0fffb17 	ldw	r3,-20(fp)
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	18800015 	stw	r2,0(r3)

  return 0;  
   11d24:	e03fff15 	stw	zero,-4(fp)
   11d28:	e0bfff17 	ldw	r2,-4(fp)
}
   11d2c:	e037883a 	mov	sp,fp
   11d30:	dfc00117 	ldw	ra,4(sp)
   11d34:	df000017 	ldw	fp,0(sp)
   11d38:	dec00204 	addi	sp,sp,8
   11d3c:	f800283a 	ret

00011d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11d40:	defffd04 	addi	sp,sp,-12
   11d44:	dfc00215 	stw	ra,8(sp)
   11d48:	df000115 	stw	fp,4(sp)
   11d4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11d50:	00800074 	movhi	r2,1
   11d54:	108bc804 	addi	r2,r2,12064
   11d58:	10800017 	ldw	r2,0(r2)
   11d5c:	1005003a 	cmpeq	r2,r2,zero
   11d60:	1000061e 	bne	r2,zero,11d7c <alt_get_errno+0x3c>
   11d64:	00800074 	movhi	r2,1
   11d68:	108bc804 	addi	r2,r2,12064
   11d6c:	10800017 	ldw	r2,0(r2)
   11d70:	103ee83a 	callr	r2
   11d74:	e0bfff15 	stw	r2,-4(fp)
   11d78:	00000306 	br	11d88 <alt_get_errno+0x48>
   11d7c:	00800074 	movhi	r2,1
   11d80:	108c8904 	addi	r2,r2,12836
   11d84:	e0bfff15 	stw	r2,-4(fp)
   11d88:	e0bfff17 	ldw	r2,-4(fp)
}
   11d8c:	e037883a 	mov	sp,fp
   11d90:	dfc00117 	ldw	ra,4(sp)
   11d94:	df000017 	ldw	fp,0(sp)
   11d98:	dec00204 	addi	sp,sp,8
   11d9c:	f800283a 	ret

00011da0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11da0:	defffd04 	addi	sp,sp,-12
   11da4:	dfc00215 	stw	ra,8(sp)
   11da8:	df000115 	stw	fp,4(sp)
   11dac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11db0:	00bfff04 	movi	r2,-4
   11db4:	00c00074 	movhi	r3,1
   11db8:	18caee04 	addi	r3,r3,11192
   11dbc:	1885883a 	add	r2,r3,r2
   11dc0:	e0bfff15 	stw	r2,-4(fp)
   11dc4:	00000606 	br	11de0 <_do_ctors+0x40>
        (*ctor) (); 
   11dc8:	e0bfff17 	ldw	r2,-4(fp)
   11dcc:	10800017 	ldw	r2,0(r2)
   11dd0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11dd4:	e0bfff17 	ldw	r2,-4(fp)
   11dd8:	10bfff04 	addi	r2,r2,-4
   11ddc:	e0bfff15 	stw	r2,-4(fp)
   11de0:	e0ffff17 	ldw	r3,-4(fp)
   11de4:	00800074 	movhi	r2,1
   11de8:	108aed04 	addi	r2,r2,11188
   11dec:	18bff62e 	bgeu	r3,r2,11dc8 <_do_ctors+0x28>
        (*ctor) (); 
}
   11df0:	e037883a 	mov	sp,fp
   11df4:	dfc00117 	ldw	ra,4(sp)
   11df8:	df000017 	ldw	fp,0(sp)
   11dfc:	dec00204 	addi	sp,sp,8
   11e00:	f800283a 	ret

00011e04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11e04:	defffd04 	addi	sp,sp,-12
   11e08:	dfc00215 	stw	ra,8(sp)
   11e0c:	df000115 	stw	fp,4(sp)
   11e10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11e14:	00bfff04 	movi	r2,-4
   11e18:	00c00074 	movhi	r3,1
   11e1c:	18caee04 	addi	r3,r3,11192
   11e20:	1885883a 	add	r2,r3,r2
   11e24:	e0bfff15 	stw	r2,-4(fp)
   11e28:	00000606 	br	11e44 <_do_dtors+0x40>
        (*dtor) (); 
   11e2c:	e0bfff17 	ldw	r2,-4(fp)
   11e30:	10800017 	ldw	r2,0(r2)
   11e34:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11e38:	e0bfff17 	ldw	r2,-4(fp)
   11e3c:	10bfff04 	addi	r2,r2,-4
   11e40:	e0bfff15 	stw	r2,-4(fp)
   11e44:	e0ffff17 	ldw	r3,-4(fp)
   11e48:	00800074 	movhi	r2,1
   11e4c:	108aee04 	addi	r2,r2,11192
   11e50:	18bff62e 	bgeu	r3,r2,11e2c <_do_dtors+0x28>
        (*dtor) (); 
}
   11e54:	e037883a 	mov	sp,fp
   11e58:	dfc00117 	ldw	ra,4(sp)
   11e5c:	df000017 	ldw	fp,0(sp)
   11e60:	dec00204 	addi	sp,sp,8
   11e64:	f800283a 	ret

00011e68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11e68:	defffe04 	addi	sp,sp,-8
   11e6c:	dfc00115 	stw	ra,4(sp)
   11e70:	df000015 	stw	fp,0(sp)
   11e74:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11e78:	0009883a 	mov	r4,zero
   11e7c:	01440004 	movi	r5,4096
   11e80:	00127280 	call	12728 <alt_icache_flush>
#endif
}
   11e84:	e037883a 	mov	sp,fp
   11e88:	dfc00117 	ldw	ra,4(sp)
   11e8c:	df000017 	ldw	fp,0(sp)
   11e90:	dec00204 	addi	sp,sp,8
   11e94:	f800283a 	ret

00011e98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11e98:	defff904 	addi	sp,sp,-28
   11e9c:	dfc00615 	stw	ra,24(sp)
   11ea0:	df000515 	stw	fp,20(sp)
   11ea4:	df000504 	addi	fp,sp,20
   11ea8:	e13ffc15 	stw	r4,-16(fp)
   11eac:	e17ffd15 	stw	r5,-12(fp)
   11eb0:	e1bffe15 	stw	r6,-8(fp)
   11eb4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11eb8:	e13ffd17 	ldw	r4,-12(fp)
   11ebc:	e17ffe17 	ldw	r5,-8(fp)
   11ec0:	e1bfff17 	ldw	r6,-4(fp)
   11ec4:	00120b00 	call	120b0 <open>
   11ec8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11ecc:	e0bffb17 	ldw	r2,-20(fp)
   11ed0:	1004803a 	cmplt	r2,r2,zero
   11ed4:	10001c1e 	bne	r2,zero,11f48 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   11ed8:	e0bffb17 	ldw	r2,-20(fp)
   11edc:	00c00074 	movhi	r3,1
   11ee0:	18cb5a04 	addi	r3,r3,11624
   11ee4:	10800324 	muli	r2,r2,12
   11ee8:	10c5883a 	add	r2,r2,r3
   11eec:	10c00017 	ldw	r3,0(r2)
   11ef0:	e0bffc17 	ldw	r2,-16(fp)
   11ef4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11ef8:	e0bffb17 	ldw	r2,-20(fp)
   11efc:	00c00074 	movhi	r3,1
   11f00:	18cb5a04 	addi	r3,r3,11624
   11f04:	10800324 	muli	r2,r2,12
   11f08:	10c5883a 	add	r2,r2,r3
   11f0c:	10800104 	addi	r2,r2,4
   11f10:	10c00017 	ldw	r3,0(r2)
   11f14:	e0bffc17 	ldw	r2,-16(fp)
   11f18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11f1c:	e0bffb17 	ldw	r2,-20(fp)
   11f20:	00c00074 	movhi	r3,1
   11f24:	18cb5a04 	addi	r3,r3,11624
   11f28:	10800324 	muli	r2,r2,12
   11f2c:	10c5883a 	add	r2,r2,r3
   11f30:	10800204 	addi	r2,r2,8
   11f34:	10c00017 	ldw	r3,0(r2)
   11f38:	e0bffc17 	ldw	r2,-16(fp)
   11f3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11f40:	e13ffb17 	ldw	r4,-20(fp)
   11f44:	00122980 	call	12298 <alt_release_fd>
  }
} 
   11f48:	e037883a 	mov	sp,fp
   11f4c:	dfc00117 	ldw	ra,4(sp)
   11f50:	df000017 	ldw	fp,0(sp)
   11f54:	dec00204 	addi	sp,sp,8
   11f58:	f800283a 	ret

00011f5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11f5c:	defffb04 	addi	sp,sp,-20
   11f60:	dfc00415 	stw	ra,16(sp)
   11f64:	df000315 	stw	fp,12(sp)
   11f68:	df000304 	addi	fp,sp,12
   11f6c:	e13ffd15 	stw	r4,-12(fp)
   11f70:	e17ffe15 	stw	r5,-8(fp)
   11f74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11f78:	01000074 	movhi	r4,1
   11f7c:	210b5d04 	addi	r4,r4,11636
   11f80:	e17ffd17 	ldw	r5,-12(fp)
   11f84:	01800044 	movi	r6,1
   11f88:	01c07fc4 	movi	r7,511
   11f8c:	0011e980 	call	11e98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11f90:	01000074 	movhi	r4,1
   11f94:	210b5a04 	addi	r4,r4,11624
   11f98:	e17ffe17 	ldw	r5,-8(fp)
   11f9c:	000d883a 	mov	r6,zero
   11fa0:	01c07fc4 	movi	r7,511
   11fa4:	0011e980 	call	11e98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11fa8:	01000074 	movhi	r4,1
   11fac:	210b6004 	addi	r4,r4,11648
   11fb0:	e17fff17 	ldw	r5,-4(fp)
   11fb4:	01800044 	movi	r6,1
   11fb8:	01c07fc4 	movi	r7,511
   11fbc:	0011e980 	call	11e98 <alt_open_fd>
}  
   11fc0:	e037883a 	mov	sp,fp
   11fc4:	dfc00117 	ldw	ra,4(sp)
   11fc8:	df000017 	ldw	fp,0(sp)
   11fcc:	dec00204 	addi	sp,sp,8
   11fd0:	f800283a 	ret

00011fd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11fd4:	defffc04 	addi	sp,sp,-16
   11fd8:	df000315 	stw	fp,12(sp)
   11fdc:	df000304 	addi	fp,sp,12
   11fe0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11fe4:	e0bffe17 	ldw	r2,-8(fp)
   11fe8:	10800217 	ldw	r2,8(r2)
   11fec:	10d00034 	orhi	r3,r2,16384
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
   11ff4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11ff8:	e03ffd15 	stw	zero,-12(fp)
   11ffc:	00002006 	br	12080 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12000:	e0bffd17 	ldw	r2,-12(fp)
   12004:	00c00074 	movhi	r3,1
   12008:	18cb5a04 	addi	r3,r3,11624
   1200c:	10800324 	muli	r2,r2,12
   12010:	10c5883a 	add	r2,r2,r3
   12014:	10c00017 	ldw	r3,0(r2)
   12018:	e0bffe17 	ldw	r2,-8(fp)
   1201c:	10800017 	ldw	r2,0(r2)
   12020:	1880141e 	bne	r3,r2,12074 <alt_file_locked+0xa0>
   12024:	e0bffd17 	ldw	r2,-12(fp)
   12028:	00c00074 	movhi	r3,1
   1202c:	18cb5a04 	addi	r3,r3,11624
   12030:	10800324 	muli	r2,r2,12
   12034:	10c5883a 	add	r2,r2,r3
   12038:	10800204 	addi	r2,r2,8
   1203c:	10800017 	ldw	r2,0(r2)
   12040:	1004403a 	cmpge	r2,r2,zero
   12044:	10000b1e 	bne	r2,zero,12074 <alt_file_locked+0xa0>
   12048:	e0bffd17 	ldw	r2,-12(fp)
   1204c:	10800324 	muli	r2,r2,12
   12050:	1007883a 	mov	r3,r2
   12054:	00800074 	movhi	r2,1
   12058:	108b5a04 	addi	r2,r2,11624
   1205c:	1887883a 	add	r3,r3,r2
   12060:	e0bffe17 	ldw	r2,-8(fp)
   12064:	18800326 	beq	r3,r2,12074 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12068:	00bffcc4 	movi	r2,-13
   1206c:	e0bfff15 	stw	r2,-4(fp)
   12070:	00000a06 	br	1209c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12074:	e0bffd17 	ldw	r2,-12(fp)
   12078:	10800044 	addi	r2,r2,1
   1207c:	e0bffd15 	stw	r2,-12(fp)
   12080:	00800074 	movhi	r2,1
   12084:	108bc704 	addi	r2,r2,12060
   12088:	10800017 	ldw	r2,0(r2)
   1208c:	1007883a 	mov	r3,r2
   12090:	e0bffd17 	ldw	r2,-12(fp)
   12094:	18bfda2e 	bgeu	r3,r2,12000 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12098:	e03fff15 	stw	zero,-4(fp)
   1209c:	e0bfff17 	ldw	r2,-4(fp)
}
   120a0:	e037883a 	mov	sp,fp
   120a4:	df000017 	ldw	fp,0(sp)
   120a8:	dec00104 	addi	sp,sp,4
   120ac:	f800283a 	ret

000120b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   120b0:	defff404 	addi	sp,sp,-48
   120b4:	dfc00b15 	stw	ra,44(sp)
   120b8:	df000a15 	stw	fp,40(sp)
   120bc:	df000a04 	addi	fp,sp,40
   120c0:	e13ffb15 	stw	r4,-20(fp)
   120c4:	e17ffc15 	stw	r5,-16(fp)
   120c8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   120cc:	00bfffc4 	movi	r2,-1
   120d0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   120d4:	00bffb44 	movi	r2,-19
   120d8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   120dc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   120e0:	e13ffb17 	ldw	r4,-20(fp)
   120e4:	01400074 	movhi	r5,1
   120e8:	294bc504 	addi	r5,r5,12052
   120ec:	00124bc0 	call	124bc <alt_find_dev>
   120f0:	e0bffa15 	stw	r2,-24(fp)
   120f4:	e0bffa17 	ldw	r2,-24(fp)
   120f8:	1004c03a 	cmpne	r2,r2,zero
   120fc:	1000051e 	bne	r2,zero,12114 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12100:	e13ffb17 	ldw	r4,-20(fp)
   12104:	00125500 	call	12550 <alt_find_file>
   12108:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1210c:	00800044 	movi	r2,1
   12110:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12114:	e0bffa17 	ldw	r2,-24(fp)
   12118:	1005003a 	cmpeq	r2,r2,zero
   1211c:	1000301e 	bne	r2,zero,121e0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12120:	e13ffa17 	ldw	r4,-24(fp)
   12124:	00126700 	call	12670 <alt_get_fd>
   12128:	e0bff815 	stw	r2,-32(fp)
   1212c:	e0bff817 	ldw	r2,-32(fp)
   12130:	1004403a 	cmpge	r2,r2,zero
   12134:	1000031e 	bne	r2,zero,12144 <open+0x94>
    {
      status = index;
   12138:	e0bff817 	ldw	r2,-32(fp)
   1213c:	e0bff715 	stw	r2,-36(fp)
   12140:	00002906 	br	121e8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   12144:	e0bff817 	ldw	r2,-32(fp)
   12148:	10800324 	muli	r2,r2,12
   1214c:	1007883a 	mov	r3,r2
   12150:	00800074 	movhi	r2,1
   12154:	108b5a04 	addi	r2,r2,11624
   12158:	1885883a 	add	r2,r3,r2
   1215c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12160:	e0fffc17 	ldw	r3,-16(fp)
   12164:	00900034 	movhi	r2,16384
   12168:	10bfffc4 	addi	r2,r2,-1
   1216c:	1886703a 	and	r3,r3,r2
   12170:	e0bff917 	ldw	r2,-28(fp)
   12174:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12178:	e0bff617 	ldw	r2,-40(fp)
   1217c:	1004c03a 	cmpne	r2,r2,zero
   12180:	1000061e 	bne	r2,zero,1219c <open+0xec>
   12184:	e13ff917 	ldw	r4,-28(fp)
   12188:	0011fd40 	call	11fd4 <alt_file_locked>
   1218c:	e0bff715 	stw	r2,-36(fp)
   12190:	e0bff717 	ldw	r2,-36(fp)
   12194:	1004803a 	cmplt	r2,r2,zero
   12198:	1000131e 	bne	r2,zero,121e8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1219c:	e0bffa17 	ldw	r2,-24(fp)
   121a0:	10800317 	ldw	r2,12(r2)
   121a4:	1005003a 	cmpeq	r2,r2,zero
   121a8:	1000091e 	bne	r2,zero,121d0 <open+0x120>
   121ac:	e0bffa17 	ldw	r2,-24(fp)
   121b0:	10800317 	ldw	r2,12(r2)
   121b4:	e13ff917 	ldw	r4,-28(fp)
   121b8:	e17ffb17 	ldw	r5,-20(fp)
   121bc:	e1bffc17 	ldw	r6,-16(fp)
   121c0:	e1fffd17 	ldw	r7,-12(fp)
   121c4:	103ee83a 	callr	r2
   121c8:	e0bfff15 	stw	r2,-4(fp)
   121cc:	00000106 	br	121d4 <open+0x124>
   121d0:	e03fff15 	stw	zero,-4(fp)
   121d4:	e0bfff17 	ldw	r2,-4(fp)
   121d8:	e0bff715 	stw	r2,-36(fp)
   121dc:	00000206 	br	121e8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   121e0:	00bffb44 	movi	r2,-19
   121e4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   121e8:	e0bff717 	ldw	r2,-36(fp)
   121ec:	1004403a 	cmpge	r2,r2,zero
   121f0:	1000091e 	bne	r2,zero,12218 <open+0x168>
  {
    alt_release_fd (index);  
   121f4:	e13ff817 	ldw	r4,-32(fp)
   121f8:	00122980 	call	12298 <alt_release_fd>
    ALT_ERRNO = -status;
   121fc:	00122380 	call	12238 <alt_get_errno>
   12200:	e0fff717 	ldw	r3,-36(fp)
   12204:	00c7c83a 	sub	r3,zero,r3
   12208:	10c00015 	stw	r3,0(r2)
    return -1;
   1220c:	00bfffc4 	movi	r2,-1
   12210:	e0bffe15 	stw	r2,-8(fp)
   12214:	00000206 	br	12220 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   12218:	e0bff817 	ldw	r2,-32(fp)
   1221c:	e0bffe15 	stw	r2,-8(fp)
   12220:	e0bffe17 	ldw	r2,-8(fp)
}
   12224:	e037883a 	mov	sp,fp
   12228:	dfc00117 	ldw	ra,4(sp)
   1222c:	df000017 	ldw	fp,0(sp)
   12230:	dec00204 	addi	sp,sp,8
   12234:	f800283a 	ret

00012238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12238:	defffd04 	addi	sp,sp,-12
   1223c:	dfc00215 	stw	ra,8(sp)
   12240:	df000115 	stw	fp,4(sp)
   12244:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12248:	00800074 	movhi	r2,1
   1224c:	108bc804 	addi	r2,r2,12064
   12250:	10800017 	ldw	r2,0(r2)
   12254:	1005003a 	cmpeq	r2,r2,zero
   12258:	1000061e 	bne	r2,zero,12274 <alt_get_errno+0x3c>
   1225c:	00800074 	movhi	r2,1
   12260:	108bc804 	addi	r2,r2,12064
   12264:	10800017 	ldw	r2,0(r2)
   12268:	103ee83a 	callr	r2
   1226c:	e0bfff15 	stw	r2,-4(fp)
   12270:	00000306 	br	12280 <alt_get_errno+0x48>
   12274:	00800074 	movhi	r2,1
   12278:	108c8904 	addi	r2,r2,12836
   1227c:	e0bfff15 	stw	r2,-4(fp)
   12280:	e0bfff17 	ldw	r2,-4(fp)
}
   12284:	e037883a 	mov	sp,fp
   12288:	dfc00117 	ldw	ra,4(sp)
   1228c:	df000017 	ldw	fp,0(sp)
   12290:	dec00204 	addi	sp,sp,8
   12294:	f800283a 	ret

00012298 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12298:	defffe04 	addi	sp,sp,-8
   1229c:	df000115 	stw	fp,4(sp)
   122a0:	df000104 	addi	fp,sp,4
   122a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   122a8:	e0bfff17 	ldw	r2,-4(fp)
   122ac:	108000d0 	cmplti	r2,r2,3
   122b0:	10000d1e 	bne	r2,zero,122e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   122b4:	e0bfff17 	ldw	r2,-4(fp)
   122b8:	00c00074 	movhi	r3,1
   122bc:	18cb5a04 	addi	r3,r3,11624
   122c0:	10800324 	muli	r2,r2,12
   122c4:	10c5883a 	add	r2,r2,r3
   122c8:	10800204 	addi	r2,r2,8
   122cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   122d0:	e0bfff17 	ldw	r2,-4(fp)
   122d4:	00c00074 	movhi	r3,1
   122d8:	18cb5a04 	addi	r3,r3,11624
   122dc:	10800324 	muli	r2,r2,12
   122e0:	10c5883a 	add	r2,r2,r3
   122e4:	10000015 	stw	zero,0(r2)
  }
}
   122e8:	e037883a 	mov	sp,fp
   122ec:	df000017 	ldw	fp,0(sp)
   122f0:	dec00104 	addi	sp,sp,4
   122f4:	f800283a 	ret

000122f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   122f8:	defffa04 	addi	sp,sp,-24
   122fc:	df000515 	stw	fp,20(sp)
   12300:	df000504 	addi	fp,sp,20
   12304:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12308:	0005303a 	rdctl	r2,status
   1230c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12310:	e0fffd17 	ldw	r3,-12(fp)
   12314:	00bfff84 	movi	r2,-2
   12318:	1884703a 	and	r2,r3,r2
   1231c:	1001703a 	wrctl	status,r2
  
  return context;
   12320:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12324:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12330:	e0bffc17 	ldw	r2,-16(fp)
   12334:	10c00017 	ldw	r3,0(r2)
   12338:	e0bffc17 	ldw	r2,-16(fp)
   1233c:	10800117 	ldw	r2,4(r2)
   12340:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   12344:	e0bffc17 	ldw	r2,-16(fp)
   12348:	10c00117 	ldw	r3,4(r2)
   1234c:	e0bffc17 	ldw	r2,-16(fp)
   12350:	10800017 	ldw	r2,0(r2)
   12354:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12358:	e0fffc17 	ldw	r3,-16(fp)
   1235c:	e0bffc17 	ldw	r2,-16(fp)
   12360:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   12364:	e0fffc17 	ldw	r3,-16(fp)
   12368:	e0bffc17 	ldw	r2,-16(fp)
   1236c:	18800015 	stw	r2,0(r3)
   12370:	e0bffe17 	ldw	r2,-8(fp)
   12374:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12378:	e0bffb17 	ldw	r2,-20(fp)
   1237c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12380:	e037883a 	mov	sp,fp
   12384:	df000017 	ldw	fp,0(sp)
   12388:	dec00104 	addi	sp,sp,4
   1238c:	f800283a 	ret

00012390 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12390:	defffb04 	addi	sp,sp,-20
   12394:	dfc00415 	stw	ra,16(sp)
   12398:	df000315 	stw	fp,12(sp)
   1239c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   123a0:	d0a00f17 	ldw	r2,-32708(gp)
   123a4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   123a8:	d0a0d517 	ldw	r2,-31916(gp)
   123ac:	10800044 	addi	r2,r2,1
   123b0:	d0a0d515 	stw	r2,-31916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   123b4:	00003106 	br	1247c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   123b8:	e0bffe17 	ldw	r2,-8(fp)
   123bc:	10800017 	ldw	r2,0(r2)
   123c0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   123c4:	e0bffe17 	ldw	r2,-8(fp)
   123c8:	10800403 	ldbu	r2,16(r2)
   123cc:	10803fcc 	andi	r2,r2,255
   123d0:	1005003a 	cmpeq	r2,r2,zero
   123d4:	1000051e 	bne	r2,zero,123ec <alt_tick+0x5c>
   123d8:	d0a0d517 	ldw	r2,-31916(gp)
   123dc:	1004c03a 	cmpne	r2,r2,zero
   123e0:	1000021e 	bne	r2,zero,123ec <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   123e4:	e0bffe17 	ldw	r2,-8(fp)
   123e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   123ec:	e0bffe17 	ldw	r2,-8(fp)
   123f0:	10c00217 	ldw	r3,8(r2)
   123f4:	d0a0d517 	ldw	r2,-31916(gp)
   123f8:	10c01e36 	bltu	r2,r3,12474 <alt_tick+0xe4>
   123fc:	e0bffe17 	ldw	r2,-8(fp)
   12400:	10800403 	ldbu	r2,16(r2)
   12404:	10803fcc 	andi	r2,r2,255
   12408:	1004c03a 	cmpne	r2,r2,zero
   1240c:	1000191e 	bne	r2,zero,12474 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   12410:	e0bffe17 	ldw	r2,-8(fp)
   12414:	10c00317 	ldw	r3,12(r2)
   12418:	e0bffe17 	ldw	r2,-8(fp)
   1241c:	11000517 	ldw	r4,20(r2)
   12420:	183ee83a 	callr	r3
   12424:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12428:	e0bffd17 	ldw	r2,-12(fp)
   1242c:	1004c03a 	cmpne	r2,r2,zero
   12430:	1000031e 	bne	r2,zero,12440 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   12434:	e13ffe17 	ldw	r4,-8(fp)
   12438:	00122f80 	call	122f8 <alt_alarm_stop>
   1243c:	00000d06 	br	12474 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   12440:	e0bffe17 	ldw	r2,-8(fp)
   12444:	10c00217 	ldw	r3,8(r2)
   12448:	e0bffd17 	ldw	r2,-12(fp)
   1244c:	1887883a 	add	r3,r3,r2
   12450:	e0bffe17 	ldw	r2,-8(fp)
   12454:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12458:	e0bffe17 	ldw	r2,-8(fp)
   1245c:	10c00217 	ldw	r3,8(r2)
   12460:	d0a0d517 	ldw	r2,-31916(gp)
   12464:	1880032e 	bgeu	r3,r2,12474 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   12468:	e0fffe17 	ldw	r3,-8(fp)
   1246c:	00800044 	movi	r2,1
   12470:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   12474:	e0bfff17 	ldw	r2,-4(fp)
   12478:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1247c:	d0e00f04 	addi	r3,gp,-32708
   12480:	e0bffe17 	ldw	r2,-8(fp)
   12484:	10ffcc1e 	bne	r2,r3,123b8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   12488:	e037883a 	mov	sp,fp
   1248c:	dfc00117 	ldw	ra,4(sp)
   12490:	df000017 	ldw	fp,0(sp)
   12494:	dec00204 	addi	sp,sp,8
   12498:	f800283a 	ret

0001249c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1249c:	deffff04 	addi	sp,sp,-4
   124a0:	df000015 	stw	fp,0(sp)
   124a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   124a8:	000170fa 	wrctl	ienable,zero
}
   124ac:	e037883a 	mov	sp,fp
   124b0:	df000017 	ldw	fp,0(sp)
   124b4:	dec00104 	addi	sp,sp,4
   124b8:	f800283a 	ret

000124bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   124bc:	defff904 	addi	sp,sp,-28
   124c0:	dfc00615 	stw	ra,24(sp)
   124c4:	df000515 	stw	fp,20(sp)
   124c8:	df000504 	addi	fp,sp,20
   124cc:	e13ffd15 	stw	r4,-12(fp)
   124d0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   124d4:	e0bffe17 	ldw	r2,-8(fp)
   124d8:	10800017 	ldw	r2,0(r2)
   124dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   124e0:	e13ffd17 	ldw	r4,-12(fp)
   124e4:	00109100 	call	10910 <strlen>
   124e8:	10800044 	addi	r2,r2,1
   124ec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   124f0:	00000d06 	br	12528 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   124f4:	e0bffc17 	ldw	r2,-16(fp)
   124f8:	11000217 	ldw	r4,8(r2)
   124fc:	e1bffb17 	ldw	r6,-20(fp)
   12500:	e17ffd17 	ldw	r5,-12(fp)
   12504:	00127ec0 	call	127ec <memcmp>
   12508:	1004c03a 	cmpne	r2,r2,zero
   1250c:	1000031e 	bne	r2,zero,1251c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12510:	e0bffc17 	ldw	r2,-16(fp)
   12514:	e0bfff15 	stw	r2,-4(fp)
   12518:	00000706 	br	12538 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1251c:	e0bffc17 	ldw	r2,-16(fp)
   12520:	10800017 	ldw	r2,0(r2)
   12524:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12528:	e0fffe17 	ldw	r3,-8(fp)
   1252c:	e0bffc17 	ldw	r2,-16(fp)
   12530:	10fff01e 	bne	r2,r3,124f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12534:	e03fff15 	stw	zero,-4(fp)
   12538:	e0bfff17 	ldw	r2,-4(fp)
}
   1253c:	e037883a 	mov	sp,fp
   12540:	dfc00117 	ldw	ra,4(sp)
   12544:	df000017 	ldw	fp,0(sp)
   12548:	dec00204 	addi	sp,sp,8
   1254c:	f800283a 	ret

00012550 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12550:	defffa04 	addi	sp,sp,-24
   12554:	dfc00515 	stw	ra,20(sp)
   12558:	df000415 	stw	fp,16(sp)
   1255c:	df000404 	addi	fp,sp,16
   12560:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12564:	00800074 	movhi	r2,1
   12568:	108bc304 	addi	r2,r2,12044
   1256c:	10800017 	ldw	r2,0(r2)
   12570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12574:	00003306 	br	12644 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   12578:	e0bffd17 	ldw	r2,-12(fp)
   1257c:	11000217 	ldw	r4,8(r2)
   12580:	00109100 	call	10910 <strlen>
   12584:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   12588:	e0bffd17 	ldw	r2,-12(fp)
   1258c:	10c00217 	ldw	r3,8(r2)
   12590:	e0bffc17 	ldw	r2,-16(fp)
   12594:	1885883a 	add	r2,r3,r2
   12598:	10bfffc4 	addi	r2,r2,-1
   1259c:	10800003 	ldbu	r2,0(r2)
   125a0:	10803fcc 	andi	r2,r2,255
   125a4:	1080201c 	xori	r2,r2,128
   125a8:	10bfe004 	addi	r2,r2,-128
   125ac:	10800bd8 	cmpnei	r2,r2,47
   125b0:	1000031e 	bne	r2,zero,125c0 <alt_find_file+0x70>
    {
      len -= 1;
   125b4:	e0bffc17 	ldw	r2,-16(fp)
   125b8:	10bfffc4 	addi	r2,r2,-1
   125bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   125c0:	e0bffc17 	ldw	r2,-16(fp)
   125c4:	1007883a 	mov	r3,r2
   125c8:	e0bffe17 	ldw	r2,-8(fp)
   125cc:	1885883a 	add	r2,r3,r2
   125d0:	10800003 	ldbu	r2,0(r2)
   125d4:	10803fcc 	andi	r2,r2,255
   125d8:	1080201c 	xori	r2,r2,128
   125dc:	10bfe004 	addi	r2,r2,-128
   125e0:	10800be0 	cmpeqi	r2,r2,47
   125e4:	10000a1e 	bne	r2,zero,12610 <alt_find_file+0xc0>
   125e8:	e0bffc17 	ldw	r2,-16(fp)
   125ec:	1007883a 	mov	r3,r2
   125f0:	e0bffe17 	ldw	r2,-8(fp)
   125f4:	1885883a 	add	r2,r3,r2
   125f8:	10800003 	ldbu	r2,0(r2)
   125fc:	10803fcc 	andi	r2,r2,255
   12600:	1080201c 	xori	r2,r2,128
   12604:	10bfe004 	addi	r2,r2,-128
   12608:	1004c03a 	cmpne	r2,r2,zero
   1260c:	10000a1e 	bne	r2,zero,12638 <alt_find_file+0xe8>
   12610:	e0bffd17 	ldw	r2,-12(fp)
   12614:	11000217 	ldw	r4,8(r2)
   12618:	e1bffc17 	ldw	r6,-16(fp)
   1261c:	e17ffe17 	ldw	r5,-8(fp)
   12620:	00127ec0 	call	127ec <memcmp>
   12624:	1004c03a 	cmpne	r2,r2,zero
   12628:	1000031e 	bne	r2,zero,12638 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1262c:	e0bffd17 	ldw	r2,-12(fp)
   12630:	e0bfff15 	stw	r2,-4(fp)
   12634:	00000806 	br	12658 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   12638:	e0bffd17 	ldw	r2,-12(fp)
   1263c:	10800017 	ldw	r2,0(r2)
   12640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12644:	00c00074 	movhi	r3,1
   12648:	18cbc304 	addi	r3,r3,12044
   1264c:	e0bffd17 	ldw	r2,-12(fp)
   12650:	10ffc91e 	bne	r2,r3,12578 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12654:	e03fff15 	stw	zero,-4(fp)
   12658:	e0bfff17 	ldw	r2,-4(fp)
}
   1265c:	e037883a 	mov	sp,fp
   12660:	dfc00117 	ldw	ra,4(sp)
   12664:	df000017 	ldw	fp,0(sp)
   12668:	dec00204 	addi	sp,sp,8
   1266c:	f800283a 	ret

00012670 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12670:	defffc04 	addi	sp,sp,-16
   12674:	df000315 	stw	fp,12(sp)
   12678:	df000304 	addi	fp,sp,12
   1267c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12680:	00bffa04 	movi	r2,-24
   12684:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12688:	e03ffe15 	stw	zero,-8(fp)
   1268c:	00001e06 	br	12708 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   12690:	e0bffe17 	ldw	r2,-8(fp)
   12694:	00c00074 	movhi	r3,1
   12698:	18cb5a04 	addi	r3,r3,11624
   1269c:	10800324 	muli	r2,r2,12
   126a0:	10c5883a 	add	r2,r2,r3
   126a4:	10800017 	ldw	r2,0(r2)
   126a8:	1004c03a 	cmpne	r2,r2,zero
   126ac:	1000131e 	bne	r2,zero,126fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   126b0:	e0bffe17 	ldw	r2,-8(fp)
   126b4:	00c00074 	movhi	r3,1
   126b8:	18cb5a04 	addi	r3,r3,11624
   126bc:	10800324 	muli	r2,r2,12
   126c0:	10c7883a 	add	r3,r2,r3
   126c4:	e0bfff17 	ldw	r2,-4(fp)
   126c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   126cc:	00800074 	movhi	r2,1
   126d0:	108bc704 	addi	r2,r2,12060
   126d4:	10c00017 	ldw	r3,0(r2)
   126d8:	e0bffe17 	ldw	r2,-8(fp)
   126dc:	1880040e 	bge	r3,r2,126f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   126e0:	00c00074 	movhi	r3,1
   126e4:	18cbc704 	addi	r3,r3,12060
   126e8:	e0bffe17 	ldw	r2,-8(fp)
   126ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   126f0:	e0bffe17 	ldw	r2,-8(fp)
   126f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   126f8:	00000606 	br	12714 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   126fc:	e0bffe17 	ldw	r2,-8(fp)
   12700:	10800044 	addi	r2,r2,1
   12704:	e0bffe15 	stw	r2,-8(fp)
   12708:	e0bffe17 	ldw	r2,-8(fp)
   1270c:	10800810 	cmplti	r2,r2,32
   12710:	103fdf1e 	bne	r2,zero,12690 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12714:	e0bffd17 	ldw	r2,-12(fp)
}
   12718:	e037883a 	mov	sp,fp
   1271c:	df000017 	ldw	fp,0(sp)
   12720:	dec00104 	addi	sp,sp,4
   12724:	f800283a 	ret

00012728 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12728:	defffb04 	addi	sp,sp,-20
   1272c:	df000415 	stw	fp,16(sp)
   12730:	df000404 	addi	fp,sp,16
   12734:	e13ffe15 	stw	r4,-8(fp)
   12738:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1273c:	e0bfff17 	ldw	r2,-4(fp)
   12740:	10840070 	cmpltui	r2,r2,4097
   12744:	1000021e 	bne	r2,zero,12750 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12748:	00840004 	movi	r2,4096
   1274c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12750:	e0fffe17 	ldw	r3,-8(fp)
   12754:	e0bfff17 	ldw	r2,-4(fp)
   12758:	1885883a 	add	r2,r3,r2
   1275c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12760:	e0bffe17 	ldw	r2,-8(fp)
   12764:	e0bffd15 	stw	r2,-12(fp)
   12768:	00000506 	br	12780 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1276c:	e0bffd17 	ldw	r2,-12(fp)
   12770:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12774:	e0bffd17 	ldw	r2,-12(fp)
   12778:	10800804 	addi	r2,r2,32
   1277c:	e0bffd15 	stw	r2,-12(fp)
   12780:	e0fffd17 	ldw	r3,-12(fp)
   12784:	e0bffc17 	ldw	r2,-16(fp)
   12788:	18bff836 	bltu	r3,r2,1276c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1278c:	e0bffe17 	ldw	r2,-8(fp)
   12790:	108007cc 	andi	r2,r2,31
   12794:	1005003a 	cmpeq	r2,r2,zero
   12798:	1000021e 	bne	r2,zero,127a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1279c:	e0bffd17 	ldw	r2,-12(fp)
   127a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   127a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   127a8:	e037883a 	mov	sp,fp
   127ac:	df000017 	ldw	fp,0(sp)
   127b0:	dec00104 	addi	sp,sp,4
   127b4:	f800283a 	ret

000127b8 <atexit>:
   127b8:	200b883a 	mov	r5,r4
   127bc:	000d883a 	mov	r6,zero
   127c0:	0009883a 	mov	r4,zero
   127c4:	000f883a 	mov	r7,zero
   127c8:	00128281 	jmpi	12828 <__register_exitproc>

000127cc <exit>:
   127cc:	defffe04 	addi	sp,sp,-8
   127d0:	dc400015 	stw	r17,0(sp)
   127d4:	000b883a 	mov	r5,zero
   127d8:	2023883a 	mov	r17,r4
   127dc:	dfc00115 	stw	ra,4(sp)
   127e0:	00129980 	call	12998 <__call_exitprocs>
   127e4:	8809883a 	mov	r4,r17
   127e8:	0012b940 	call	12b94 <_exit>

000127ec <memcmp>:
   127ec:	31ffffc4 	addi	r7,r6,-1
   127f0:	3000061e 	bne	r6,zero,1280c <memcmp+0x20>
   127f4:	00000a06 	br	12820 <memcmp+0x34>
   127f8:	39ffffc4 	addi	r7,r7,-1
   127fc:	00bfffc4 	movi	r2,-1
   12800:	21000044 	addi	r4,r4,1
   12804:	29400044 	addi	r5,r5,1
   12808:	38800526 	beq	r7,r2,12820 <memcmp+0x34>
   1280c:	20c00003 	ldbu	r3,0(r4)
   12810:	28800003 	ldbu	r2,0(r5)
   12814:	18bff826 	beq	r3,r2,127f8 <memcmp+0xc>
   12818:	1885c83a 	sub	r2,r3,r2
   1281c:	f800283a 	ret
   12820:	0005883a 	mov	r2,zero
   12824:	f800283a 	ret

00012828 <__register_exitproc>:
   12828:	defff904 	addi	sp,sp,-28
   1282c:	00800074 	movhi	r2,1
   12830:	108bc104 	addi	r2,r2,12036
   12834:	dc400115 	stw	r17,4(sp)
   12838:	14400017 	ldw	r17,0(r2)
   1283c:	dc000015 	stw	r16,0(sp)
   12840:	dd400515 	stw	r21,20(sp)
   12844:	8c000c17 	ldw	r16,48(r17)
   12848:	dd000415 	stw	r20,16(sp)
   1284c:	dcc00315 	stw	r19,12(sp)
   12850:	dc800215 	stw	r18,8(sp)
   12854:	dfc00615 	stw	ra,24(sp)
   12858:	2025883a 	mov	r18,r4
   1285c:	282b883a 	mov	r21,r5
   12860:	3029883a 	mov	r20,r6
   12864:	3827883a 	mov	r19,r7
   12868:	80002626 	beq	r16,zero,12904 <__register_exitproc+0xdc>
   1286c:	81400117 	ldw	r5,4(r16)
   12870:	008007c4 	movi	r2,31
   12874:	11403716 	blt	r2,r5,12954 <__register_exitproc+0x12c>
   12878:	90002026 	beq	r18,zero,128fc <__register_exitproc+0xd4>
   1287c:	81802217 	ldw	r6,136(r16)
   12880:	30002926 	beq	r6,zero,12928 <__register_exitproc+0x100>
   12884:	81400117 	ldw	r5,4(r16)
   12888:	00c00044 	movi	r3,1
   1288c:	31004017 	ldw	r4,256(r6)
   12890:	1946983a 	sll	r3,r3,r5
   12894:	2945883a 	add	r2,r5,r5
   12898:	1085883a 	add	r2,r2,r2
   1289c:	1185883a 	add	r2,r2,r6
   128a0:	20c8b03a 	or	r4,r4,r3
   128a4:	14c02015 	stw	r19,128(r2)
   128a8:	15000015 	stw	r20,0(r2)
   128ac:	00800084 	movi	r2,2
   128b0:	31004015 	stw	r4,256(r6)
   128b4:	90801826 	beq	r18,r2,12918 <__register_exitproc+0xf0>
   128b8:	2945883a 	add	r2,r5,r5
   128bc:	1085883a 	add	r2,r2,r2
   128c0:	1405883a 	add	r2,r2,r16
   128c4:	28c00044 	addi	r3,r5,1
   128c8:	0009883a 	mov	r4,zero
   128cc:	15400215 	stw	r21,8(r2)
   128d0:	80c00115 	stw	r3,4(r16)
   128d4:	2005883a 	mov	r2,r4
   128d8:	dfc00617 	ldw	ra,24(sp)
   128dc:	dd400517 	ldw	r21,20(sp)
   128e0:	dd000417 	ldw	r20,16(sp)
   128e4:	dcc00317 	ldw	r19,12(sp)
   128e8:	dc800217 	ldw	r18,8(sp)
   128ec:	dc400117 	ldw	r17,4(sp)
   128f0:	dc000017 	ldw	r16,0(sp)
   128f4:	dec00704 	addi	sp,sp,28
   128f8:	f800283a 	ret
   128fc:	81400117 	ldw	r5,4(r16)
   12900:	003fed06 	br	128b8 <__register_exitproc+0x90>
   12904:	00800074 	movhi	r2,1
   12908:	108cd004 	addi	r2,r2,13120
   1290c:	1021883a 	mov	r16,r2
   12910:	88800c15 	stw	r2,48(r17)
   12914:	003fd506 	br	1286c <__register_exitproc+0x44>
   12918:	30804117 	ldw	r2,260(r6)
   1291c:	10c4b03a 	or	r2,r2,r3
   12920:	30804115 	stw	r2,260(r6)
   12924:	003fe406 	br	128b8 <__register_exitproc+0x90>
   12928:	00800034 	movhi	r2,0
   1292c:	10800004 	addi	r2,r2,0
   12930:	10000b26 	beq	r2,zero,12960 <__register_exitproc+0x138>
   12934:	01004204 	movi	r4,264
   12938:	103ee83a 	callr	r2
   1293c:	10000826 	beq	r2,zero,12960 <__register_exitproc+0x138>
   12940:	100d883a 	mov	r6,r2
   12944:	10004015 	stw	zero,256(r2)
   12948:	10004115 	stw	zero,260(r2)
   1294c:	80802215 	stw	r2,136(r16)
   12950:	003fcc06 	br	12884 <__register_exitproc+0x5c>
   12954:	00800034 	movhi	r2,0
   12958:	10800004 	addi	r2,r2,0
   1295c:	1000021e 	bne	r2,zero,12968 <__register_exitproc+0x140>
   12960:	013fffc4 	movi	r4,-1
   12964:	003fdb06 	br	128d4 <__register_exitproc+0xac>
   12968:	01002304 	movi	r4,140
   1296c:	103ee83a 	callr	r2
   12970:	1007883a 	mov	r3,r2
   12974:	103ffa26 	beq	r2,zero,12960 <__register_exitproc+0x138>
   12978:	88800c17 	ldw	r2,48(r17)
   1297c:	1821883a 	mov	r16,r3
   12980:	18000115 	stw	zero,4(r3)
   12984:	18800015 	stw	r2,0(r3)
   12988:	88c00c15 	stw	r3,48(r17)
   1298c:	903fdb26 	beq	r18,zero,128fc <__register_exitproc+0xd4>
   12990:	003fba06 	br	1287c <__register_exitproc+0x54>

00012994 <register_fini>:
   12994:	f800283a 	ret

00012998 <__call_exitprocs>:
   12998:	defff304 	addi	sp,sp,-52
   1299c:	00800074 	movhi	r2,1
   129a0:	108bc104 	addi	r2,r2,12036
   129a4:	df000b15 	stw	fp,44(sp)
   129a8:	17000017 	ldw	fp,0(r2)
   129ac:	00800034 	movhi	r2,0
   129b0:	10800004 	addi	r2,r2,0
   129b4:	1005003a 	cmpeq	r2,r2,zero
   129b8:	d8800215 	stw	r2,8(sp)
   129bc:	e0800c04 	addi	r2,fp,48
   129c0:	dd800915 	stw	r22,36(sp)
   129c4:	dd400815 	stw	r21,32(sp)
   129c8:	dfc00c15 	stw	ra,48(sp)
   129cc:	ddc00a15 	stw	r23,40(sp)
   129d0:	dd000715 	stw	r20,28(sp)
   129d4:	dcc00615 	stw	r19,24(sp)
   129d8:	dc800515 	stw	r18,20(sp)
   129dc:	dc400415 	stw	r17,16(sp)
   129e0:	dc000315 	stw	r16,12(sp)
   129e4:	282d883a 	mov	r22,r5
   129e8:	d9000115 	stw	r4,4(sp)
   129ec:	d8800015 	stw	r2,0(sp)
   129f0:	282b003a 	cmpeq	r21,r5,zero
   129f4:	e4400c17 	ldw	r17,48(fp)
   129f8:	88001226 	beq	r17,zero,12a44 <__call_exitprocs+0xac>
   129fc:	ddc00017 	ldw	r23,0(sp)
   12a00:	88800117 	ldw	r2,4(r17)
   12a04:	8c802217 	ldw	r18,136(r17)
   12a08:	143fffc4 	addi	r16,r2,-1
   12a0c:	80000b16 	blt	r16,zero,12a3c <__call_exitprocs+0xa4>
   12a10:	9027003a 	cmpeq	r19,r18,zero
   12a14:	a800171e 	bne	r21,zero,12a74 <__call_exitprocs+0xdc>
   12a18:	9800051e 	bne	r19,zero,12a30 <__call_exitprocs+0x98>
   12a1c:	8409883a 	add	r4,r16,r16
   12a20:	2105883a 	add	r2,r4,r4
   12a24:	1485883a 	add	r2,r2,r18
   12a28:	10c02017 	ldw	r3,128(r2)
   12a2c:	b0c01226 	beq	r22,r3,12a78 <__call_exitprocs+0xe0>
   12a30:	843fffc4 	addi	r16,r16,-1
   12a34:	00bfffc4 	movi	r2,-1
   12a38:	80bff61e 	bne	r16,r2,12a14 <__call_exitprocs+0x7c>
   12a3c:	d8800217 	ldw	r2,8(sp)
   12a40:	10003226 	beq	r2,zero,12b0c <__call_exitprocs+0x174>
   12a44:	dfc00c17 	ldw	ra,48(sp)
   12a48:	df000b17 	ldw	fp,44(sp)
   12a4c:	ddc00a17 	ldw	r23,40(sp)
   12a50:	dd800917 	ldw	r22,36(sp)
   12a54:	dd400817 	ldw	r21,32(sp)
   12a58:	dd000717 	ldw	r20,28(sp)
   12a5c:	dcc00617 	ldw	r19,24(sp)
   12a60:	dc800517 	ldw	r18,20(sp)
   12a64:	dc400417 	ldw	r17,16(sp)
   12a68:	dc000317 	ldw	r16,12(sp)
   12a6c:	dec00d04 	addi	sp,sp,52
   12a70:	f800283a 	ret
   12a74:	8409883a 	add	r4,r16,r16
   12a78:	88c00117 	ldw	r3,4(r17)
   12a7c:	2105883a 	add	r2,r4,r4
   12a80:	1445883a 	add	r2,r2,r17
   12a84:	18ffffc4 	addi	r3,r3,-1
   12a88:	11800217 	ldw	r6,8(r2)
   12a8c:	1c001826 	beq	r3,r16,12af0 <__call_exitprocs+0x158>
   12a90:	10000215 	stw	zero,8(r2)
   12a94:	303fe626 	beq	r6,zero,12a30 <__call_exitprocs+0x98>
   12a98:	8d000117 	ldw	r20,4(r17)
   12a9c:	9800121e 	bne	r19,zero,12ae8 <__call_exitprocs+0x150>
   12aa0:	00c00044 	movi	r3,1
   12aa4:	1c06983a 	sll	r3,r3,r16
   12aa8:	90804017 	ldw	r2,256(r18)
   12aac:	1884703a 	and	r2,r3,r2
   12ab0:	10000d26 	beq	r2,zero,12ae8 <__call_exitprocs+0x150>
   12ab4:	90804117 	ldw	r2,260(r18)
   12ab8:	1884703a 	and	r2,r3,r2
   12abc:	10000e1e 	bne	r2,zero,12af8 <__call_exitprocs+0x160>
   12ac0:	2105883a 	add	r2,r4,r4
   12ac4:	1485883a 	add	r2,r2,r18
   12ac8:	11400017 	ldw	r5,0(r2)
   12acc:	d9000117 	ldw	r4,4(sp)
   12ad0:	303ee83a 	callr	r6
   12ad4:	88800117 	ldw	r2,4(r17)
   12ad8:	a0bfc61e 	bne	r20,r2,129f4 <__call_exitprocs+0x5c>
   12adc:	b8800017 	ldw	r2,0(r23)
   12ae0:	147fd326 	beq	r2,r17,12a30 <__call_exitprocs+0x98>
   12ae4:	003fc306 	br	129f4 <__call_exitprocs+0x5c>
   12ae8:	303ee83a 	callr	r6
   12aec:	003ff906 	br	12ad4 <__call_exitprocs+0x13c>
   12af0:	8c000115 	stw	r16,4(r17)
   12af4:	003fe706 	br	12a94 <__call_exitprocs+0xfc>
   12af8:	2105883a 	add	r2,r4,r4
   12afc:	1485883a 	add	r2,r2,r18
   12b00:	11000017 	ldw	r4,0(r2)
   12b04:	303ee83a 	callr	r6
   12b08:	003ff206 	br	12ad4 <__call_exitprocs+0x13c>
   12b0c:	88800117 	ldw	r2,4(r17)
   12b10:	10000b1e 	bne	r2,zero,12b40 <__call_exitprocs+0x1a8>
   12b14:	89000017 	ldw	r4,0(r17)
   12b18:	20000a26 	beq	r4,zero,12b44 <__call_exitprocs+0x1ac>
   12b1c:	b9000015 	stw	r4,0(r23)
   12b20:	90000226 	beq	r18,zero,12b2c <__call_exitprocs+0x194>
   12b24:	9009883a 	mov	r4,r18
   12b28:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12b2c:	8809883a 	mov	r4,r17
   12b30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12b34:	bc400017 	ldw	r17,0(r23)
   12b38:	883fb11e 	bne	r17,zero,12a00 <__call_exitprocs+0x68>
   12b3c:	003fc106 	br	12a44 <__call_exitprocs+0xac>
   12b40:	89000017 	ldw	r4,0(r17)
   12b44:	882f883a 	mov	r23,r17
   12b48:	2023883a 	mov	r17,r4
   12b4c:	883fac1e 	bne	r17,zero,12a00 <__call_exitprocs+0x68>
   12b50:	003fbc06 	br	12a44 <__call_exitprocs+0xac>

00012b54 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   12b54:	defffd04 	addi	sp,sp,-12
   12b58:	df000215 	stw	fp,8(sp)
   12b5c:	df000204 	addi	fp,sp,8
   12b60:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   12b64:	e0bfff17 	ldw	r2,-4(fp)
   12b68:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12b6c:	e0bffe17 	ldw	r2,-8(fp)
   12b70:	1005003a 	cmpeq	r2,r2,zero
   12b74:	1000021e 	bne	r2,zero,12b80 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   12b78:	002af070 	cmpltui	zero,zero,43969
   12b7c:	00000106 	br	12b84 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   12b80:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   12b84:	e037883a 	mov	sp,fp
   12b88:	df000017 	ldw	fp,0(sp)
   12b8c:	dec00104 	addi	sp,sp,4
   12b90:	f800283a 	ret

00012b94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12b94:	defffd04 	addi	sp,sp,-12
   12b98:	dfc00215 	stw	ra,8(sp)
   12b9c:	df000115 	stw	fp,4(sp)
   12ba0:	df000104 	addi	fp,sp,4
   12ba4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   12ba8:	e13fff17 	ldw	r4,-4(fp)
   12bac:	0012b540 	call	12b54 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12bb0:	003fff06 	br	12bb0 <_exit+0x1c>
   12bb4:	00012994 	movui	zero,1190
