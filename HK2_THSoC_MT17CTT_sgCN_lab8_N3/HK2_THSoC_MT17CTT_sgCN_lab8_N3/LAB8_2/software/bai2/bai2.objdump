
bai2.elf:     file format elf32-littlenios2
bai2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000cf50 memsz 0x0000cf50 flags r-x
    LOAD off    0x0000df70 vaddr 0x0008cf70 paddr 0x0008ea8c align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x000105a8 vaddr 0x000905a8 paddr 0x000905a8 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ca74  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000344  0008cc2c  0008cc2c  0000dc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  0008cf70  0008ea8c  0000df70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  000905a8  000905a8  000105a8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fa8c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000de0  00000000  00000000  0000fab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000235d1  00000000  00000000  00010890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009321  00000000  00000000  00033e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a699  00000000  00000000  0003d182  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001984  00000000  00000000  0004781c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f2c  00000000  00000000  000491a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001102c  00000000  00000000  0004c0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0005d0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005d138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00060c61  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00060c64  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00060c70  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00060c71  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00060c72  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00060c7d  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00060c88  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  00060c93  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000016  00000000  00000000  00060c97  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00034ca9  00000000  00000000  00060cad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
0008cc2c l    d  .rodata	00000000 .rodata
0008cf70 l    d  .rwdata	00000000 .rwdata
000905a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bai2_bsp//obj/HAL/src/crt0.o
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000802f4 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080698 l     F .text	00000034 __sprint_r
0008cc82 l     O .rodata	00000010 blanks.3515
0008cc92 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000826e0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084150 l     F .text	00000008 __fp_lock
00084158 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008cf70 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008ccc8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008ce10 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00088734 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00089ad8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00089bf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00089c20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00089d20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00089e14 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00089f00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008a0dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008ea7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008a380 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008a4c0 l     F .text	00000038 alt_dev_reg
0008d92c l     O .rwdata	00001060 jtag_uart_0
0008e98c l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008a7b4 l     F .text	00000204 altera_avalon_jtag_uart_irq
0008a9b8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0008b1ac l     F .text	00000098 altera_avalon_uart_irq
0008b244 l     F .text	000000d8 altera_avalon_uart_rxirq
0008b31c l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0008b4ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0008b700 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008bba8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008c034 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008c18c l     F .text	00000050 alt_get_errno
0008c1dc l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00086c10 g     F .text	00000074 _mprec_log10
00086d00 g     F .text	00000084 __any_on
00087980 g     F .text	00000064 _isatty_r
0008ccf8 g     O .rodata	00000028 __mprec_tinytens
0008a024 g     F .text	00000078 alt_main
00089a94 g     F .text	00000044 __ashldi3
00080424 g     F .text	00000084 _puts_r
00090604 g     O .bss	00000100 alt_irq
000879e4 g     F .text	0000006c _lseek_r
0008ea8c g       *ABS*	00000000 __flash_rwdata_start
00088fd4 g     F .text	0000005c __eqdf2
00090894 g       *ABS*	00000000 __alt_heap_start
00087524 g     F .text	0000005c __sseek
000841f4 g     F .text	0000010c __sinit
00084e8c g     F .text	0000009c _setlocale_r
0008416c g     F .text	00000078 __sfmoreglue
0008a0bc g     F .text	00000020 __malloc_unlock
00085acc g     F .text	0000018c memmove
000841e4 g     F .text	00000010 _cleanup
00080560 g     F .text	000000ac snprintf
00085d34 g     F .text	000000a8 _Balloc
0008908c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00087918 g     F .text	00000068 _fstat_r
000905c0 g     O .bss	00000004 errno
000905c8 g     O .bss	00000004 alt_argv
00096a50 g       *ABS*	00000000 _gp
0008a350 g     F .text	00000030 usleep
0008d7ac g     O .rwdata	00000180 alt_fd_list
0008c5e0 g     F .text	00000090 alt_find_dev
0008598c g     F .text	00000140 memcpy
00084160 g     F .text	0000000c _cleanup_r
000891b0 g     F .text	000000d4 __floatsidf
0008c114 g     F .text	00000078 alt_io_redirect
00089154 g     F .text	0000005c __ltdf2
0008cc2c g       *ABS*	00000000 __DTOR_END__
000804a8 g     F .text	00000014 puts
00086b6c g     F .text	000000a4 __ratio
0008abb8 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080414 g     F .text	00000008 __udivsi3
00089d70 g     F .text	000000a4 isatty
0008cd48 g     O .rodata	000000c8 __mprec_tens
00084f28 g     F .text	0000000c __locale_charset
000905bc g     O .bss	00000004 __malloc_top_pad
0008ea58 g     O .rwdata	00000004 __mb_cur_max
00084f34 g     F .text	0000000c _localeconv_r
00086164 g     F .text	0000003c __i2b
00084848 g     F .text	000004e4 __sfvwrite_r
000873e4 g     F .text	00000064 _sbrk_r
00087a50 g     F .text	0000006c _read_r
0008d370 g     O .rwdata	0000000c __lc_ctype
0008ea74 g     O .rwdata	00000004 alt_max_fd
0008987c g     F .text	00000104 __unpack_d
000877c8 g     F .text	0000013c _fclose_r
00084120 g     F .text	00000030 fflush
000905b8 g     O .bss	00000004 __malloc_max_sbrked_mem
00088a88 g     F .text	00000054 __adddf3
000868e0 g     F .text	00000148 __b2d
0008810c g     F .text	00000628 __umoddi3
00089f50 g     F .text	000000d4 lseek
0008ea50 g     O .rwdata	00000004 _global_impure_ptr
00086d84 g     F .text	000005fc _realloc_r
00090894 g       *ABS*	00000000 __bss_end
0008bf44 g     F .text	000000f0 alt_iic_isr_register
0008c4bc g     F .text	00000104 alt_tick
00087abc g     F .text	00000650 __udivdi3
0008cd20 g     O .rodata	00000028 __mprec_bigtens
00085f48 g     F .text	00000104 __s2b
00089358 g     F .text	0000011c __floatunsidf
00086680 g     F .text	00000058 __mcmp
0008b104 g     F .text	000000a8 altera_avalon_uart_init
0008440c g     F .text	00000018 __fp_lock_all
0008bef8 g     F .text	0000004c alt_ic_irq_enabled
0008c424 g     F .text	00000098 alt_alarm_stop
000905d0 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
0008d784 g     O .rwdata	00000028 alt_dev_null
0008bb8c g     F .text	0000001c alt_dcache_flush_all
0008604c g     F .text	00000068 __hi0bits
00089284 g     F .text	000000d4 __fixdfsi
0008ea8c g       *ABS*	00000000 __ram_rwdata_end
0008ea6c g     O .rwdata	00000008 alt_dev_list
0008a3d0 g     F .text	000000f0 write
0008cf70 g       *ABS*	00000000 __ram_rodata_end
00089c70 g     F .text	000000b0 fstat
00089a50 g     F .text	00000044 __lshrdi3
000863f8 g     F .text	0000012c __pow5mult
000905b0 g     O .bss	00000004 __nlocale_changed
0008041c g     F .text	00000008 __umodsi3
00090894 g       *ABS*	00000000 end
0008b750 g     F .text	000001a8 altera_avalon_uart_write
0008a6f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008cc2c g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008b054 g     F .text	00000060 altera_avalon_uart_write_fd
000895ac g     F .text	000000ac __clzsi2
000804bc g     F .text	000000a4 _snprintf_r
0008b0b4 g     F .text	00000050 altera_avalon_uart_close_fd
0008add0 g     F .text	00000224 altera_avalon_jtag_uart_write
000843fc g     F .text	00000004 __sfp_lock_acquire
00085894 g     F .text	000000f8 memchr
000806cc g     F .text	00001e7c ___vfprintf_internal_r
00084578 g     F .text	000002d0 _free_r
0008ca50 g     F .text	000001a0 __call_exitprocs
000905ac g     O .bss	00000004 __mlocale_changed
0008ea5c g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000003c _start
000905d4 g     O .bss	00000004 _alt_tick_rate
00086524 g     F .text	0000015c __lshift
000905d8 g     O .bss	00000004 _alt_nticks
0008a12c g     F .text	000000f4 read
0008a52c g     F .text	00000064 alt_sys_init
0008c920 g     F .text	00000130 __register_exitproc
000861a0 g     F .text	00000258 __multiply
0008aa5c g     F .text	00000068 altera_avalon_jtag_uart_close
00089474 g     F .text	00000028 __mulsi3
0008cf70 g       *ABS*	00000000 __ram_rwdata_start
0008cc2c g       *ABS*	00000000 __ram_rodata_start
000905dc g     O .bss	00000028 __malloc_current_mallinfo
00086a28 g     F .text	00000144 __d2b
0008a590 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008c784 g     F .text	000000d4 alt_get_fd
0008ba38 g     F .text	00000154 alt_busy_sleep
00089980 g     F .text	000000d0 __fpcmp_parts_d
00087764 g     F .text	00000064 _close_r
0008c8a4 g     F .text	0000007c memcmp
0008a650 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00090894 g       *ABS*	00000000 __alt_stack_base
0008a6a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008256c g     F .text	00000174 __swsetup_r
00088e20 g     F .text	000001b4 __divdf3
00084300 g     F .text	000000fc __sfp
00086c84 g     F .text	0000007c __copybits
0008d37c g     O .rwdata	00000408 __malloc_av_
00084408 g     F .text	00000004 __sinit_lock_release
00088b3c g     F .text	000002e4 __muldf3
00087448 g     F .text	00000054 __sread
0008c670 g     F .text	00000114 alt_find_file
0008bbf8 g     F .text	000000a0 alt_dev_llist_insert
0008a09c g     F .text	00000020 __malloc_lock
0008a2a0 g     F .text	000000b0 sbrk
00083f38 g     F .text	000001e8 _fflush_r
00087698 g     F .text	000000cc _calloc_r
000905a8 g       *ABS*	00000000 __bss_start
00085c58 g     F .text	000000dc memset
000801f4 g     F .text	00000100 main
000905cc g     O .bss	00000004 alt_envp
000905b4 g     O .bss	00000004 __malloc_max_total_mem
0008a5f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00087580 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
00087904 g     F .text	00000014 fclose
00090704 g     O .bss	00000190 _atexit0
0008291c g     F .text	0000161c _dtoa_r
00085110 g     F .text	00000784 _malloc_r
0008ea78 g     O .rwdata	00000004 alt_errno
00084d2c g     F .text	000000a8 _fwalk
00080368 g     F .text	00000050 __divsi3
0008ce1c g     O .rodata	00000014 __thenan_df
0008443c g     F .text	0000013c _malloc_trim_r
0008cc2c g       *ABS*	00000000 __CTOR_END__
00087588 g     F .text	000000a4 strcmp
0008cc2c g       *ABS*	00000000 __flash_rodata_start
0008cc2c g       *ABS*	00000000 __DTOR_LIST__
00089030 g     F .text	0000005c __nedf2
0008a4f8 g     F .text	00000034 alt_irq_init
0008a220 g     F .text	00000080 alt_release_fd
0008ce30 g     O .rodata	00000100 __clz_tab
000905a8 g     O .bss	00000004 _PathLocale
0008c858 g     F .text	00000014 atexit
0008762c g     F .text	0000006c _write_r
00084f40 g     F .text	0000001c setlocale
0008ea54 g     O .rwdata	00000004 _impure_ptr
000905c4 g     O .bss	00000004 alt_argc
0008bcf4 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00086880 g     F .text	00000060 __ulp
00087380 g     F .text	00000038 __isinfd
00084424 g     F .text	00000018 __fp_unlock_all
0008ea64 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084f5c g     F .text	0000000c localeconv
0008bd6c g     F .text	00000050 alt_ic_isr_register
0008ea8c g       *ABS*	00000000 _edata
0008aff4 g     F .text	00000060 altera_avalon_uart_read_fd
00090894 g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
0008aac4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008be58 g     F .text	000000a0 alt_ic_irq_disable
0008749c g     F .text	00000088 __swrite
0008ea60 g     O .rwdata	00000004 __malloc_trim_threshold
0008c5c0 g     F .text	00000020 altera_nios2_qsys_irq_init
0008c86c g     F .text	00000038 exit
00084dd4 g     F .text	000000b8 _fwalk_reent
000866d8 g     F .text	000001a8 __mdiff
000803b8 g     F .text	0000005c __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084400 g     F .text	00000004 __sfp_lock_release
0008b458 g     F .text	00000054 altera_avalon_uart_close
0008cbf0 g     F .text	0000003c _exit
000873b8 g     F .text	0000002c __isnand
0008b8f8 g     F .text	00000140 alt_alarm_start
0008949c g     F .text	00000110 __muldi3
00084f68 g     F .text	000001a8 __smakebuf_r
0008060c g     F .text	0000008c strlen
0008c2cc g     F .text	00000158 open
000890f0 g     F .text	00000064 __gedf2
0008bd50 g     F .text	0000001c alt_icache_flush_all
0008ea80 g     O .rwdata	00000004 alt_priority_mask
0008bdbc g     F .text	0000009c alt_ic_irq_enable
00082548 g     F .text	00000024 __vfprintf_internal
0008b4fc g     F .text	00000204 altera_avalon_uart_read
00088adc g     F .text	00000060 __subdf3
000860b4 g     F .text	000000b0 __lo0bits
0008ea84 g     O .rwdata	00000008 alt_alarm_list
0008bc98 g     F .text	0000005c _do_ctors
00089b28 g     F .text	000000cc close
00089e80 g     F .text	00000080 alt_load
00089658 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00084404 g     F .text	00000004 __sinit_lock_acquire
00085e04 g     F .text	00000144 __multadd
00085ddc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406e14 	ori	at,at,440
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00274 	movhi	r3,9
   80130:	18c18104 	addi	r3,r3,1540
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000274 	movhi	r4,9
   80148:	21018104 	addi	r4,r4,1540
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   801c0:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c4:	d69a9414 	ori	gp,gp,27216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801cc:	10816a14 	ori	r2,r2,1448

    movhi r3, %hi(__bss_end)
   801d0:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d4:	18c22514 	ori	r3,r3,2196

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	0089e800 	call	89e80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	008a0240 	call	8a024 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <main>:
#include "stdio.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"

int main()
{
   801f4:	defffa04 	addi	sp,sp,-24
   801f8:	dfc00515 	stw	ra,20(sp)
   801fc:	df000415 	stw	fp,16(sp)
   80200:	df000404 	addi	fp,sp,16
    int count = 0;
   80204:	e03ffc15 	stw	zero,-16(fp)
    int prev_button_state = 1;
   80208:	00800044 	movi	r2,1
   8020c:	e0bffd15 	stw	r2,-12(fp)
    char buffer[3];

    printf("Start\n");
   80210:	01000274 	movhi	r4,9
   80214:	21330b04 	addi	r4,r4,-13268
   80218:	00804a80 	call	804a8 <puts>

    while (1)
    {
        int button_state = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
   8021c:	00800434 	movhi	r2,16
   80220:	10841404 	addi	r2,r2,4176
   80224:	10800037 	ldwio	r2,0(r2)
   80228:	e0bffe15 	stw	r2,-8(fp)


        if (button_state == 0 && prev_button_state == 1)
   8022c:	e0bffe17 	ldw	r2,-8(fp)
   80230:	10002b1e 	bne	r2,zero,802e0 <main+0xec>
   80234:	e0bffd17 	ldw	r2,-12(fp)
   80238:	10800058 	cmpnei	r2,r2,1
   8023c:	1000281e 	bne	r2,zero,802e0 <main+0xec>
        {
            count = (count + 1) % 100;
   80240:	e0bffc17 	ldw	r2,-16(fp)
   80244:	10800044 	addi	r2,r2,1
   80248:	1009883a 	mov	r4,r2
   8024c:	01401904 	movi	r5,100
   80250:	00803b80 	call	803b8 <__modsi3>
   80254:	e0bffc15 	stw	r2,-16(fp)


            snprintf(buffer, sizeof(buffer), "%02d", count);
   80258:	e0bfff04 	addi	r2,fp,-4
   8025c:	1009883a 	mov	r4,r2
   80260:	014000c4 	movi	r5,3
   80264:	01800274 	movhi	r6,9
   80268:	31b30d04 	addi	r6,r6,-13260
   8026c:	e1fffc17 	ldw	r7,-16(fp)
   80270:	00805600 	call	80560 <snprintf>


            printf("%s\n", buffer);
   80274:	e0bfff04 	addi	r2,fp,-4
   80278:	1009883a 	mov	r4,r2
   8027c:	00804a80 	call	804a8 <puts>


            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, buffer[0]);
   80280:	e0bfff03 	ldbu	r2,-4(fp)
   80284:	10c03fcc 	andi	r3,r2,255
   80288:	18c0201c 	xori	r3,r3,128
   8028c:	18ffe004 	addi	r3,r3,-128
   80290:	00800434 	movhi	r2,16
   80294:	10840904 	addi	r2,r2,4132
   80298:	10c00035 	stwio	r3,0(r2)
            usleep(1000);
   8029c:	0100fa04 	movi	r4,1000
   802a0:	008a3500 	call	8a350 <usleep>
            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, buffer[1]);
   802a4:	e0bfff43 	ldbu	r2,-3(fp)
   802a8:	10c03fcc 	andi	r3,r2,255
   802ac:	18c0201c 	xori	r3,r3,128
   802b0:	18ffe004 	addi	r3,r3,-128
   802b4:	00800434 	movhi	r2,16
   802b8:	10840904 	addi	r2,r2,4132
   802bc:	10c00035 	stwio	r3,0(r2)
            usleep(1000);
   802c0:	0100fa04 	movi	r4,1000
   802c4:	008a3500 	call	8a350 <usleep>
            IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, '\n');
   802c8:	00c00284 	movi	r3,10
   802cc:	00800434 	movhi	r2,16
   802d0:	10840904 	addi	r2,r2,4132
   802d4:	10c00035 	stwio	r3,0(r2)
            usleep(1000);
   802d8:	0100fa04 	movi	r4,1000
   802dc:	008a3500 	call	8a350 <usleep>
        }

        prev_button_state = button_state;
   802e0:	e0bffe17 	ldw	r2,-8(fp)
   802e4:	e0bffd15 	stw	r2,-12(fp)
        usleep(50000);
   802e8:	0130d414 	movui	r4,50000
   802ec:	008a3500 	call	8a350 <usleep>
    }
   802f0:	003fca06 	br	8021c <main+0x28>

000802f4 <udivmodsi4>:
   802f4:	2005883a 	mov	r2,r4
   802f8:	2900182e 	bgeu	r5,r4,8035c <udivmodsi4+0x68>
   802fc:	28001716 	blt	r5,zero,8035c <udivmodsi4+0x68>
   80300:	01000804 	movi	r4,32
   80304:	00c00044 	movi	r3,1
   80308:	00000206 	br	80314 <udivmodsi4+0x20>
   8030c:	20001126 	beq	r4,zero,80354 <udivmodsi4+0x60>
   80310:	28000516 	blt	r5,zero,80328 <udivmodsi4+0x34>
   80314:	294b883a 	add	r5,r5,r5
   80318:	213fffc4 	addi	r4,r4,-1
   8031c:	18c7883a 	add	r3,r3,r3
   80320:	28bffa36 	bltu	r5,r2,8030c <udivmodsi4+0x18>
   80324:	18000b26 	beq	r3,zero,80354 <udivmodsi4+0x60>
   80328:	0009883a 	mov	r4,zero
   8032c:	11400236 	bltu	r2,r5,80338 <udivmodsi4+0x44>
   80330:	1145c83a 	sub	r2,r2,r5
   80334:	20c8b03a 	or	r4,r4,r3
   80338:	1806d07a 	srli	r3,r3,1
   8033c:	280ad07a 	srli	r5,r5,1
   80340:	183ffa1e 	bne	r3,zero,8032c <udivmodsi4+0x38>
   80344:	3000021e 	bne	r6,zero,80350 <udivmodsi4+0x5c>
   80348:	2005883a 	mov	r2,r4
   8034c:	f800283a 	ret
   80350:	f800283a 	ret
   80354:	0009883a 	mov	r4,zero
   80358:	003ffa06 	br	80344 <udivmodsi4+0x50>
   8035c:	00c00044 	movi	r3,1
   80360:	0009883a 	mov	r4,zero
   80364:	003ff106 	br	8032c <udivmodsi4+0x38>

00080368 <__divsi3>:
   80368:	defffe04 	addi	sp,sp,-8
   8036c:	dfc00115 	stw	ra,4(sp)
   80370:	dc000015 	stw	r16,0(sp)
   80374:	20000a16 	blt	r4,zero,803a0 <__divsi3+0x38>
   80378:	0021883a 	mov	r16,zero
   8037c:	28000b16 	blt	r5,zero,803ac <__divsi3+0x44>
   80380:	000d883a 	mov	r6,zero
   80384:	00802f40 	call	802f4 <udivmodsi4>
   80388:	80000126 	beq	r16,zero,80390 <__divsi3+0x28>
   8038c:	0085c83a 	sub	r2,zero,r2
   80390:	dfc00117 	ldw	ra,4(sp)
   80394:	dc000017 	ldw	r16,0(sp)
   80398:	dec00204 	addi	sp,sp,8
   8039c:	f800283a 	ret
   803a0:	0109c83a 	sub	r4,zero,r4
   803a4:	04000044 	movi	r16,1
   803a8:	283ff50e 	bge	r5,zero,80380 <__divsi3+0x18>
   803ac:	014bc83a 	sub	r5,zero,r5
   803b0:	8400005c 	xori	r16,r16,1
   803b4:	003ff206 	br	80380 <__divsi3+0x18>

000803b8 <__modsi3>:
   803b8:	deffff04 	addi	sp,sp,-4
   803bc:	dfc00015 	stw	ra,0(sp)
   803c0:	20000516 	blt	r4,zero,803d8 <__modsi3+0x20>
   803c4:	28000c16 	blt	r5,zero,803f8 <__modsi3+0x40>
   803c8:	01800044 	movi	r6,1
   803cc:	dfc00017 	ldw	ra,0(sp)
   803d0:	dec00104 	addi	sp,sp,4
   803d4:	00802f41 	jmpi	802f4 <udivmodsi4>
   803d8:	0109c83a 	sub	r4,zero,r4
   803dc:	28000b16 	blt	r5,zero,8040c <__modsi3+0x54>
   803e0:	01800044 	movi	r6,1
   803e4:	00802f40 	call	802f4 <udivmodsi4>
   803e8:	0085c83a 	sub	r2,zero,r2
   803ec:	dfc00017 	ldw	ra,0(sp)
   803f0:	dec00104 	addi	sp,sp,4
   803f4:	f800283a 	ret
   803f8:	014bc83a 	sub	r5,zero,r5
   803fc:	01800044 	movi	r6,1
   80400:	dfc00017 	ldw	ra,0(sp)
   80404:	dec00104 	addi	sp,sp,4
   80408:	00802f41 	jmpi	802f4 <udivmodsi4>
   8040c:	014bc83a 	sub	r5,zero,r5
   80410:	003ff306 	br	803e0 <__modsi3+0x28>

00080414 <__udivsi3>:
   80414:	000d883a 	mov	r6,zero
   80418:	00802f41 	jmpi	802f4 <udivmodsi4>

0008041c <__umodsi3>:
   8041c:	01800044 	movi	r6,1
   80420:	00802f41 	jmpi	802f4 <udivmodsi4>

00080424 <_puts_r>:
   80424:	defff604 	addi	sp,sp,-40
   80428:	dc400815 	stw	r17,32(sp)
   8042c:	2023883a 	mov	r17,r4
   80430:	2809883a 	mov	r4,r5
   80434:	dc000715 	stw	r16,28(sp)
   80438:	dfc00915 	stw	ra,36(sp)
   8043c:	2821883a 	mov	r16,r5
   80440:	008060c0 	call	8060c <strlen>
   80444:	10c00044 	addi	r3,r2,1
   80448:	d8800115 	stw	r2,4(sp)
   8044c:	89400217 	ldw	r5,8(r17)
   80450:	00800274 	movhi	r2,9
   80454:	10b30f04 	addi	r2,r2,-13252
   80458:	d8800215 	stw	r2,8(sp)
   8045c:	00800044 	movi	r2,1
   80460:	d8800315 	stw	r2,12(sp)
   80464:	8809883a 	mov	r4,r17
   80468:	00800084 	movi	r2,2
   8046c:	d9800404 	addi	r6,sp,16
   80470:	dc000015 	stw	r16,0(sp)
   80474:	d8c00615 	stw	r3,24(sp)
   80478:	dec00415 	stw	sp,16(sp)
   8047c:	d8800515 	stw	r2,20(sp)
   80480:	00848480 	call	84848 <__sfvwrite_r>
   80484:	1000061e 	bne	r2,zero,804a0 <_puts_r+0x7c>
   80488:	00800284 	movi	r2,10
   8048c:	dfc00917 	ldw	ra,36(sp)
   80490:	dc400817 	ldw	r17,32(sp)
   80494:	dc000717 	ldw	r16,28(sp)
   80498:	dec00a04 	addi	sp,sp,40
   8049c:	f800283a 	ret
   804a0:	00bfffc4 	movi	r2,-1
   804a4:	003ff906 	br	8048c <_puts_r+0x68>

000804a8 <puts>:
   804a8:	00800274 	movhi	r2,9
   804ac:	10ba9504 	addi	r2,r2,-5548
   804b0:	200b883a 	mov	r5,r4
   804b4:	11000017 	ldw	r4,0(r2)
   804b8:	00804241 	jmpi	80424 <_puts_r>

000804bc <_snprintf_r>:
   804bc:	deffe604 	addi	sp,sp,-104
   804c0:	dc401815 	stw	r17,96(sp)
   804c4:	dc001715 	stw	r16,92(sp)
   804c8:	dfc01915 	stw	ra,100(sp)
   804cc:	3021883a 	mov	r16,r6
   804d0:	2023883a 	mov	r17,r4
   804d4:	30001e16 	blt	r6,zero,80550 <_snprintf_r+0x94>
   804d8:	00808204 	movi	r2,520
   804dc:	d880030d 	sth	r2,12(sp)
   804e0:	d9400015 	stw	r5,0(sp)
   804e4:	d9400415 	stw	r5,16(sp)
   804e8:	3000141e 	bne	r6,zero,8053c <_snprintf_r+0x80>
   804ec:	0005883a 	mov	r2,zero
   804f0:	380d883a 	mov	r6,r7
   804f4:	d8800215 	stw	r2,8(sp)
   804f8:	d8800515 	stw	r2,20(sp)
   804fc:	8809883a 	mov	r4,r17
   80500:	00bfffc4 	movi	r2,-1
   80504:	d80b883a 	mov	r5,sp
   80508:	d9c01a04 	addi	r7,sp,104
   8050c:	d880038d 	sth	r2,14(sp)
   80510:	00806cc0 	call	806cc <___vfprintf_internal_r>
   80514:	00ffffc4 	movi	r3,-1
   80518:	10c00a16 	blt	r2,r3,80544 <_snprintf_r+0x88>
   8051c:	80000226 	beq	r16,zero,80528 <_snprintf_r+0x6c>
   80520:	d8c00017 	ldw	r3,0(sp)
   80524:	18000005 	stb	zero,0(r3)
   80528:	dfc01917 	ldw	ra,100(sp)
   8052c:	dc401817 	ldw	r17,96(sp)
   80530:	dc001717 	ldw	r16,92(sp)
   80534:	dec01a04 	addi	sp,sp,104
   80538:	f800283a 	ret
   8053c:	30bfffc4 	addi	r2,r6,-1
   80540:	003feb06 	br	804f0 <_snprintf_r+0x34>
   80544:	00c022c4 	movi	r3,139
   80548:	88c00015 	stw	r3,0(r17)
   8054c:	003ff306 	br	8051c <_snprintf_r+0x60>
   80550:	008022c4 	movi	r2,139
   80554:	20800015 	stw	r2,0(r4)
   80558:	00bfffc4 	movi	r2,-1
   8055c:	003ff206 	br	80528 <_snprintf_r+0x6c>

00080560 <snprintf>:
   80560:	deffe504 	addi	sp,sp,-108
   80564:	dc001715 	stw	r16,92(sp)
   80568:	2821883a 	mov	r16,r5
   8056c:	dfc01915 	stw	ra,100(sp)
   80570:	dc401815 	stw	r17,96(sp)
   80574:	d9c01a15 	stw	r7,104(sp)
   80578:	00800274 	movhi	r2,9
   8057c:	10ba9504 	addi	r2,r2,-5548
   80580:	14400017 	ldw	r17,0(r2)
   80584:	28001d16 	blt	r5,zero,805fc <snprintf+0x9c>
   80588:	00c08204 	movi	r3,520
   8058c:	d8c0030d 	sth	r3,12(sp)
   80590:	d9000015 	stw	r4,0(sp)
   80594:	d9000415 	stw	r4,16(sp)
   80598:	2800131e 	bne	r5,zero,805e8 <snprintf+0x88>
   8059c:	0007883a 	mov	r3,zero
   805a0:	11000017 	ldw	r4,0(r2)
   805a4:	d80b883a 	mov	r5,sp
   805a8:	00bfffc4 	movi	r2,-1
   805ac:	d9c01a04 	addi	r7,sp,104
   805b0:	d8c00215 	stw	r3,8(sp)
   805b4:	d8c00515 	stw	r3,20(sp)
   805b8:	d880038d 	sth	r2,14(sp)
   805bc:	00806cc0 	call	806cc <___vfprintf_internal_r>
   805c0:	00ffffc4 	movi	r3,-1
   805c4:	10c00a16 	blt	r2,r3,805f0 <snprintf+0x90>
   805c8:	80000226 	beq	r16,zero,805d4 <snprintf+0x74>
   805cc:	d8c00017 	ldw	r3,0(sp)
   805d0:	18000005 	stb	zero,0(r3)
   805d4:	dfc01917 	ldw	ra,100(sp)
   805d8:	dc401817 	ldw	r17,96(sp)
   805dc:	dc001717 	ldw	r16,92(sp)
   805e0:	dec01b04 	addi	sp,sp,108
   805e4:	f800283a 	ret
   805e8:	28ffffc4 	addi	r3,r5,-1
   805ec:	003fec06 	br	805a0 <snprintf+0x40>
   805f0:	00c022c4 	movi	r3,139
   805f4:	88c00015 	stw	r3,0(r17)
   805f8:	003ff306 	br	805c8 <snprintf+0x68>
   805fc:	008022c4 	movi	r2,139
   80600:	88800015 	stw	r2,0(r17)
   80604:	00bfffc4 	movi	r2,-1
   80608:	003ff206 	br	805d4 <snprintf+0x74>

0008060c <strlen>:
   8060c:	208000cc 	andi	r2,r4,3
   80610:	10001f1e 	bne	r2,zero,80690 <strlen+0x84>
   80614:	20800017 	ldw	r2,0(r4)
   80618:	01ffbff4 	movhi	r7,65279
   8061c:	39ffbfc4 	addi	r7,r7,-257
   80620:	01a02074 	movhi	r6,32897
   80624:	31a02004 	addi	r6,r6,-32640
   80628:	11c7883a 	add	r3,r2,r7
   8062c:	0084303a 	nor	r2,zero,r2
   80630:	1886703a 	and	r3,r3,r2
   80634:	1986703a 	and	r3,r3,r6
   80638:	2005883a 	mov	r2,r4
   8063c:	1800101e 	bne	r3,zero,80680 <strlen+0x74>
   80640:	10800104 	addi	r2,r2,4
   80644:	10c00017 	ldw	r3,0(r2)
   80648:	19cb883a 	add	r5,r3,r7
   8064c:	00c6303a 	nor	r3,zero,r3
   80650:	28c6703a 	and	r3,r5,r3
   80654:	1986703a 	and	r3,r3,r6
   80658:	1800091e 	bne	r3,zero,80680 <strlen+0x74>
   8065c:	10800104 	addi	r2,r2,4
   80660:	10c00017 	ldw	r3,0(r2)
   80664:	19cb883a 	add	r5,r3,r7
   80668:	00c6303a 	nor	r3,zero,r3
   8066c:	28c6703a 	and	r3,r5,r3
   80670:	1986703a 	and	r3,r3,r6
   80674:	183ff226 	beq	r3,zero,80640 <strlen+0x34>
   80678:	00000106 	br	80680 <strlen+0x74>
   8067c:	10800044 	addi	r2,r2,1
   80680:	10c00007 	ldb	r3,0(r2)
   80684:	183ffd1e 	bne	r3,zero,8067c <strlen+0x70>
   80688:	1105c83a 	sub	r2,r2,r4
   8068c:	f800283a 	ret
   80690:	2005883a 	mov	r2,r4
   80694:	003ffa06 	br	80680 <strlen+0x74>

00080698 <__sprint_r>:
   80698:	30800217 	ldw	r2,8(r6)
   8069c:	defffe04 	addi	sp,sp,-8
   806a0:	dc000015 	stw	r16,0(sp)
   806a4:	dfc00115 	stw	ra,4(sp)
   806a8:	3021883a 	mov	r16,r6
   806ac:	10000226 	beq	r2,zero,806b8 <__sprint_r+0x20>
   806b0:	00848480 	call	84848 <__sfvwrite_r>
   806b4:	80000215 	stw	zero,8(r16)
   806b8:	80000115 	stw	zero,4(r16)
   806bc:	dfc00117 	ldw	ra,4(sp)
   806c0:	dc000017 	ldw	r16,0(sp)
   806c4:	dec00204 	addi	sp,sp,8
   806c8:	f800283a 	ret

000806cc <___vfprintf_internal_r>:
   806cc:	defeb904 	addi	sp,sp,-1308
   806d0:	dc013d15 	stw	r16,1268(sp)
   806d4:	d9013015 	stw	r4,1216(sp)
   806d8:	dfc14615 	stw	ra,1304(sp)
   806dc:	df014515 	stw	fp,1300(sp)
   806e0:	ddc14415 	stw	r23,1296(sp)
   806e4:	dd814315 	stw	r22,1292(sp)
   806e8:	dd414215 	stw	r21,1288(sp)
   806ec:	dd014115 	stw	r20,1284(sp)
   806f0:	dcc14015 	stw	r19,1280(sp)
   806f4:	dc813f15 	stw	r18,1276(sp)
   806f8:	dc413e15 	stw	r17,1272(sp)
   806fc:	d9412915 	stw	r5,1188(sp)
   80700:	3021883a 	mov	r16,r6
   80704:	d9c12d15 	stw	r7,1204(sp)
   80708:	0084f340 	call	84f34 <_localeconv_r>
   8070c:	10800017 	ldw	r2,0(r2)
   80710:	d9013017 	ldw	r4,1216(sp)
   80714:	d8013315 	stw	zero,1228(sp)
   80718:	d8813715 	stw	r2,1244(sp)
   8071c:	d8013415 	stw	zero,1232(sp)
   80720:	20000226 	beq	r4,zero,8072c <___vfprintf_internal_r+0x60>
   80724:	20800e17 	ldw	r2,56(r4)
   80728:	10014b26 	beq	r2,zero,80c58 <___vfprintf_internal_r+0x58c>
   8072c:	d8c12917 	ldw	r3,1188(sp)
   80730:	1880030b 	ldhu	r2,12(r3)
   80734:	10c0020c 	andi	r3,r2,8
   80738:	18ffffcc 	andi	r3,r3,65535
   8073c:	18e0001c 	xori	r3,r3,32768
   80740:	18e00004 	addi	r3,r3,-32768
   80744:	1800ed26 	beq	r3,zero,80afc <___vfprintf_internal_r+0x430>
   80748:	d9012917 	ldw	r4,1188(sp)
   8074c:	20c00417 	ldw	r3,16(r4)
   80750:	1800ea26 	beq	r3,zero,80afc <___vfprintf_internal_r+0x430>
   80754:	1100068c 	andi	r4,r2,26
   80758:	00c00284 	movi	r3,10
   8075c:	20c0f026 	beq	r4,r3,80b20 <___vfprintf_internal_r+0x454>
   80760:	d9010dc4 	addi	r4,sp,1079
   80764:	d8810e04 	addi	r2,sp,1080
   80768:	dc413017 	ldw	r17,1216(sp)
   8076c:	d8c00404 	addi	r3,sp,16
   80770:	d9012615 	stw	r4,1176(sp)
   80774:	1109c83a 	sub	r4,r2,r4
   80778:	d8812715 	stw	r2,1180(sp)
   8077c:	d8c11b15 	stw	r3,1132(sp)
   80780:	d8011d15 	stw	zero,1140(sp)
   80784:	d8011c15 	stw	zero,1136(sp)
   80788:	802b883a 	mov	r21,r16
   8078c:	d8013215 	stw	zero,1224(sp)
   80790:	d8013615 	stw	zero,1240(sp)
   80794:	d8013515 	stw	zero,1236(sp)
   80798:	d8012c15 	stw	zero,1200(sp)
   8079c:	1813883a 	mov	r9,r3
   807a0:	d9013915 	stw	r4,1252(sp)
   807a4:	a8800007 	ldb	r2,0(r21)
   807a8:	1002f326 	beq	r2,zero,81378 <___vfprintf_internal_r+0xcac>
   807ac:	00c00944 	movi	r3,37
   807b0:	a825883a 	mov	r18,r21
   807b4:	10c0021e 	bne	r2,r3,807c0 <___vfprintf_internal_r+0xf4>
   807b8:	00001406 	br	8080c <___vfprintf_internal_r+0x140>
   807bc:	10c00326 	beq	r2,r3,807cc <___vfprintf_internal_r+0x100>
   807c0:	94800044 	addi	r18,r18,1
   807c4:	90800007 	ldb	r2,0(r18)
   807c8:	103ffc1e 	bne	r2,zero,807bc <___vfprintf_internal_r+0xf0>
   807cc:	9561c83a 	sub	r16,r18,r21
   807d0:	80000e26 	beq	r16,zero,8080c <___vfprintf_internal_r+0x140>
   807d4:	da011d17 	ldw	r8,1140(sp)
   807d8:	d8c11c17 	ldw	r3,1136(sp)
   807dc:	4d400015 	stw	r21,0(r9)
   807e0:	4c000115 	stw	r16,4(r9)
   807e4:	4411883a 	add	r8,r8,r16
   807e8:	18c00044 	addi	r3,r3,1
   807ec:	da011d15 	stw	r8,1140(sp)
   807f0:	d8c11c15 	stw	r3,1136(sp)
   807f4:	008001c4 	movi	r2,7
   807f8:	10c11016 	blt	r2,r3,80c3c <___vfprintf_internal_r+0x570>
   807fc:	4a400204 	addi	r9,r9,8
   80800:	d8812c17 	ldw	r2,1200(sp)
   80804:	1405883a 	add	r2,r2,r16
   80808:	d8812c15 	stw	r2,1200(sp)
   8080c:	90800007 	ldb	r2,0(r18)
   80810:	1000ee26 	beq	r2,zero,80bcc <___vfprintf_internal_r+0x500>
   80814:	95400044 	addi	r21,r18,1
   80818:	94800047 	ldb	r18,1(r18)
   8081c:	073fffc4 	movi	fp,-1
   80820:	e007883a 	mov	r3,fp
   80824:	d8012585 	stb	zero,1174(sp)
   80828:	d8012e15 	stw	zero,1208(sp)
   8082c:	0021883a 	mov	r16,zero
   80830:	05001604 	movi	r20,88
   80834:	04c00244 	movi	r19,9
   80838:	4839883a 	mov	fp,r9
   8083c:	ad400044 	addi	r21,r21,1
   80840:	90bff804 	addi	r2,r18,-32
   80844:	a080462e 	bgeu	r20,r2,80960 <___vfprintf_internal_r+0x294>
   80848:	e013883a 	mov	r9,fp
   8084c:	9000df26 	beq	r18,zero,80bcc <___vfprintf_internal_r+0x500>
   80850:	00c00044 	movi	r3,1
   80854:	d8c12815 	stw	r3,1184(sp)
   80858:	dc810405 	stb	r18,1040(sp)
   8085c:	d8012585 	stb	zero,1174(sp)
   80860:	d8c12b15 	stw	r3,1196(sp)
   80864:	dcc10404 	addi	r19,sp,1040
   80868:	d8013115 	stw	zero,1220(sp)
   8086c:	80c0008c 	andi	r3,r16,2
   80870:	d8c12a15 	stw	r3,1192(sp)
   80874:	18000326 	beq	r3,zero,80884 <___vfprintf_internal_r+0x1b8>
   80878:	d8c12817 	ldw	r3,1184(sp)
   8087c:	18c00084 	addi	r3,r3,2
   80880:	d8c12815 	stw	r3,1184(sp)
   80884:	80c0210c 	andi	r3,r16,132
   80888:	d8c12f15 	stw	r3,1212(sp)
   8088c:	1802251e 	bne	r3,zero,81124 <___vfprintf_internal_r+0xa58>
   80890:	d9012e17 	ldw	r4,1208(sp)
   80894:	d8c12817 	ldw	r3,1184(sp)
   80898:	20edc83a 	sub	r22,r4,r3
   8089c:	0582210e 	bge	zero,r22,81124 <___vfprintf_internal_r+0xa58>
   808a0:	02800404 	movi	r10,16
   808a4:	da011d17 	ldw	r8,1140(sp)
   808a8:	d8c11c17 	ldw	r3,1136(sp)
   808ac:	05c00274 	movhi	r23,9
   808b0:	bdf32084 	addi	r23,r23,-13182
   808b4:	5580200e 	bge	r10,r22,80938 <___vfprintf_internal_r+0x26c>
   808b8:	dc813815 	stw	r18,1248(sp)
   808bc:	5039883a 	mov	fp,r10
   808c0:	b825883a 	mov	r18,r23
   808c4:	050001c4 	movi	r20,7
   808c8:	b02f883a 	mov	r23,r22
   808cc:	802d883a 	mov	r22,r16
   808d0:	dc012917 	ldw	r16,1188(sp)
   808d4:	00000306 	br	808e4 <___vfprintf_internal_r+0x218>
   808d8:	bdfffc04 	addi	r23,r23,-16
   808dc:	4a400204 	addi	r9,r9,8
   808e0:	e5c0110e 	bge	fp,r23,80928 <___vfprintf_internal_r+0x25c>
   808e4:	4c800015 	stw	r18,0(r9)
   808e8:	4f000115 	stw	fp,4(r9)
   808ec:	42000404 	addi	r8,r8,16
   808f0:	18c00044 	addi	r3,r3,1
   808f4:	da011d15 	stw	r8,1140(sp)
   808f8:	d8c11c15 	stw	r3,1136(sp)
   808fc:	a0fff60e 	bge	r20,r3,808d8 <___vfprintf_internal_r+0x20c>
   80900:	8809883a 	mov	r4,r17
   80904:	800b883a 	mov	r5,r16
   80908:	d9811b04 	addi	r6,sp,1132
   8090c:	00806980 	call	80698 <__sprint_r>
   80910:	1000b41e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   80914:	bdfffc04 	addi	r23,r23,-16
   80918:	da011d17 	ldw	r8,1140(sp)
   8091c:	d8c11c17 	ldw	r3,1136(sp)
   80920:	da400404 	addi	r9,sp,16
   80924:	e5ffef16 	blt	fp,r23,808e4 <___vfprintf_internal_r+0x218>
   80928:	b021883a 	mov	r16,r22
   8092c:	b82d883a 	mov	r22,r23
   80930:	902f883a 	mov	r23,r18
   80934:	dc813817 	ldw	r18,1248(sp)
   80938:	4dc00015 	stw	r23,0(r9)
   8093c:	4d800115 	stw	r22,4(r9)
   80940:	4591883a 	add	r8,r8,r22
   80944:	18c00044 	addi	r3,r3,1
   80948:	da011d15 	stw	r8,1140(sp)
   8094c:	d8c11c15 	stw	r3,1136(sp)
   80950:	008001c4 	movi	r2,7
   80954:	10c3fe16 	blt	r2,r3,81950 <___vfprintf_internal_r+0x1284>
   80958:	4a400204 	addi	r9,r9,8
   8095c:	0001f306 	br	8112c <___vfprintf_internal_r+0xa60>
   80960:	1085883a 	add	r2,r2,r2
   80964:	1085883a 	add	r2,r2,r2
   80968:	01000234 	movhi	r4,8
   8096c:	21025f04 	addi	r4,r4,2428
   80970:	1105883a 	add	r2,r2,r4
   80974:	10800017 	ldw	r2,0(r2)
   80978:	1000683a 	jmp	r2
   8097c:	00081058 	cmpnei	zero,zero,8257
   80980:	00080848 	cmpgei	zero,zero,8225
   80984:	00080848 	cmpgei	zero,zero,8225
   80988:	00081070 	cmpltui	zero,zero,8257
   8098c:	00080848 	cmpgei	zero,zero,8225
   80990:	00080848 	cmpgei	zero,zero,8225
   80994:	00080848 	cmpgei	zero,zero,8225
   80998:	00080848 	cmpgei	zero,zero,8225
   8099c:	00080848 	cmpgei	zero,zero,8225
   809a0:	00080848 	cmpgei	zero,zero,8225
   809a4:	00080f28 	cmpgeui	zero,zero,8252
   809a8:	000810bc 	xorhi	zero,zero,8258
   809ac:	00080848 	cmpgei	zero,zero,8225
   809b0:	00080af0 	cmpltui	zero,zero,8235
   809b4:	00080e90 	cmplti	zero,zero,8250
   809b8:	00080848 	cmpgei	zero,zero,8225
   809bc:	0008107c 	xorhi	zero,zero,8257
   809c0:	00081088 	cmpgei	zero,zero,8258
   809c4:	00081088 	cmpgei	zero,zero,8258
   809c8:	00081088 	cmpgei	zero,zero,8258
   809cc:	00081088 	cmpgei	zero,zero,8258
   809d0:	00081088 	cmpgei	zero,zero,8258
   809d4:	00081088 	cmpgei	zero,zero,8258
   809d8:	00081088 	cmpgei	zero,zero,8258
   809dc:	00081088 	cmpgei	zero,zero,8258
   809e0:	00081088 	cmpgei	zero,zero,8258
   809e4:	00080848 	cmpgei	zero,zero,8225
   809e8:	00080848 	cmpgei	zero,zero,8225
   809ec:	00080848 	cmpgei	zero,zero,8225
   809f0:	00080848 	cmpgei	zero,zero,8225
   809f4:	00080848 	cmpgei	zero,zero,8225
   809f8:	00080848 	cmpgei	zero,zero,8225
   809fc:	00080848 	cmpgei	zero,zero,8225
   80a00:	00080848 	cmpgei	zero,zero,8225
   80a04:	00080848 	cmpgei	zero,zero,8225
   80a08:	00080848 	cmpgei	zero,zero,8225
   80a0c:	00080c60 	cmpeqi	zero,zero,8241
   80a10:	00080d20 	cmpeqi	zero,zero,8244
   80a14:	00080848 	cmpgei	zero,zero,8225
   80a18:	00080d20 	cmpeqi	zero,zero,8244
   80a1c:	00080848 	cmpgei	zero,zero,8225
   80a20:	00080848 	cmpgei	zero,zero,8225
   80a24:	00080848 	cmpgei	zero,zero,8225
   80a28:	00080848 	cmpgei	zero,zero,8225
   80a2c:	00080db4 	movhi	zero,8246
   80a30:	00080848 	cmpgei	zero,zero,8225
   80a34:	00080848 	cmpgei	zero,zero,8225
   80a38:	00080dc0 	call	80dc <__alt_mem_onchip_memory2_0-0x77f24>
   80a3c:	00080848 	cmpgei	zero,zero,8225
   80a40:	00080848 	cmpgei	zero,zero,8225
   80a44:	00080848 	cmpgei	zero,zero,8225
   80a48:	00080848 	cmpgei	zero,zero,8225
   80a4c:	00080848 	cmpgei	zero,zero,8225
   80a50:	00080df8 	rdprs	zero,zero,8247
   80a54:	00080848 	cmpgei	zero,zero,8225
   80a58:	00080848 	cmpgei	zero,zero,8225
   80a5c:	00080e34 	movhi	zero,8248
   80a60:	00080848 	cmpgei	zero,zero,8225
   80a64:	00080848 	cmpgei	zero,zero,8225
   80a68:	00080848 	cmpgei	zero,zero,8225
   80a6c:	00080848 	cmpgei	zero,zero,8225
   80a70:	00080848 	cmpgei	zero,zero,8225
   80a74:	00080848 	cmpgei	zero,zero,8225
   80a78:	00080848 	cmpgei	zero,zero,8225
   80a7c:	00080848 	cmpgei	zero,zero,8225
   80a80:	00080848 	cmpgei	zero,zero,8225
   80a84:	00080848 	cmpgei	zero,zero,8225
   80a88:	000810cc 	andi	zero,zero,8259
   80a8c:	00081100 	call	8110 <__alt_mem_onchip_memory2_0-0x77ef0>
   80a90:	00080d20 	cmpeqi	zero,zero,8244
   80a94:	00080d20 	cmpeqi	zero,zero,8244
   80a98:	00080d20 	cmpeqi	zero,zero,8244
   80a9c:	0008104c 	andi	zero,zero,8257
   80aa0:	00081100 	call	8110 <__alt_mem_onchip_memory2_0-0x77ef0>
   80aa4:	00080848 	cmpgei	zero,zero,8225
   80aa8:	00080848 	cmpgei	zero,zero,8225
   80aac:	00080ed8 	cmpnei	zero,zero,8251
   80ab0:	00080848 	cmpgei	zero,zero,8225
   80ab4:	00080ef0 	cmpltui	zero,zero,8251
   80ab8:	0008110c 	andi	zero,zero,8260
   80abc:	00080f50 	cmplti	zero,zero,8253
   80ac0:	00080fa0 	cmpeqi	zero,zero,8254
   80ac4:	00080848 	cmpgei	zero,zero,8225
   80ac8:	00080fac 	andhi	zero,zero,8254
   80acc:	00080848 	cmpgei	zero,zero,8225
   80ad0:	00081118 	cmpnei	zero,zero,8260
   80ad4:	00080848 	cmpgei	zero,zero,8225
   80ad8:	00080848 	cmpgei	zero,zero,8225
   80adc:	00081010 	cmplti	zero,zero,8256
   80ae0:	d9012e17 	ldw	r4,1208(sp)
   80ae4:	d8812d15 	stw	r2,1204(sp)
   80ae8:	0109c83a 	sub	r4,zero,r4
   80aec:	d9012e15 	stw	r4,1208(sp)
   80af0:	84000114 	ori	r16,r16,4
   80af4:	ac800007 	ldb	r18,0(r21)
   80af8:	003f5006 	br	8083c <___vfprintf_internal_r+0x170>
   80afc:	d9013017 	ldw	r4,1216(sp)
   80b00:	d9412917 	ldw	r5,1188(sp)
   80b04:	008256c0 	call	8256c <__swsetup_r>
   80b08:	10003d1e 	bne	r2,zero,80c00 <___vfprintf_internal_r+0x534>
   80b0c:	d8c12917 	ldw	r3,1188(sp)
   80b10:	1880030b 	ldhu	r2,12(r3)
   80b14:	00c00284 	movi	r3,10
   80b18:	1100068c 	andi	r4,r2,26
   80b1c:	20ff101e 	bne	r4,r3,80760 <___vfprintf_internal_r+0x94>
   80b20:	d9012917 	ldw	r4,1188(sp)
   80b24:	20c0038b 	ldhu	r3,14(r4)
   80b28:	193fffcc 	andi	r4,r3,65535
   80b2c:	2120001c 	xori	r4,r4,32768
   80b30:	21200004 	addi	r4,r4,-32768
   80b34:	203f0a16 	blt	r4,zero,80760 <___vfprintf_internal_r+0x94>
   80b38:	d9012917 	ldw	r4,1188(sp)
   80b3c:	d9c12d17 	ldw	r7,1204(sp)
   80b40:	10bfff4c 	andi	r2,r2,65533
   80b44:	22800717 	ldw	r10,28(r4)
   80b48:	22400917 	ldw	r9,36(r4)
   80b4c:	d9013017 	ldw	r4,1216(sp)
   80b50:	02010004 	movi	r8,1024
   80b54:	d881070d 	sth	r2,1052(sp)
   80b58:	d9410404 	addi	r5,sp,1040
   80b5c:	d8800404 	addi	r2,sp,16
   80b60:	800d883a 	mov	r6,r16
   80b64:	d8c1078d 	sth	r3,1054(sp)
   80b68:	da810b15 	stw	r10,1068(sp)
   80b6c:	da410d15 	stw	r9,1076(sp)
   80b70:	d8810415 	stw	r2,1040(sp)
   80b74:	d8810815 	stw	r2,1056(sp)
   80b78:	da010615 	stw	r8,1048(sp)
   80b7c:	da010915 	stw	r8,1060(sp)
   80b80:	d8010a15 	stw	zero,1064(sp)
   80b84:	00806cc0 	call	806cc <___vfprintf_internal_r>
   80b88:	d8812c15 	stw	r2,1200(sp)
   80b8c:	10000416 	blt	r2,zero,80ba0 <___vfprintf_internal_r+0x4d4>
   80b90:	d9013017 	ldw	r4,1216(sp)
   80b94:	d9410404 	addi	r5,sp,1040
   80b98:	0083f380 	call	83f38 <_fflush_r>
   80b9c:	1006501e 	bne	r2,zero,824e0 <___vfprintf_internal_r+0x1e14>
   80ba0:	d881070b 	ldhu	r2,1052(sp)
   80ba4:	1080100c 	andi	r2,r2,64
   80ba8:	10bfffcc 	andi	r2,r2,65535
   80bac:	10a0001c 	xori	r2,r2,32768
   80bb0:	10a00004 	addi	r2,r2,-32768
   80bb4:	10001426 	beq	r2,zero,80c08 <___vfprintf_internal_r+0x53c>
   80bb8:	d8c12917 	ldw	r3,1188(sp)
   80bbc:	1880030b 	ldhu	r2,12(r3)
   80bc0:	10801014 	ori	r2,r2,64
   80bc4:	1880030d 	sth	r2,12(r3)
   80bc8:	00000f06 	br	80c08 <___vfprintf_internal_r+0x53c>
   80bcc:	d8811d17 	ldw	r2,1140(sp)
   80bd0:	10000426 	beq	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   80bd4:	d9013017 	ldw	r4,1216(sp)
   80bd8:	d9412917 	ldw	r5,1188(sp)
   80bdc:	d9811b04 	addi	r6,sp,1132
   80be0:	00806980 	call	80698 <__sprint_r>
   80be4:	d8c12917 	ldw	r3,1188(sp)
   80be8:	1880030b 	ldhu	r2,12(r3)
   80bec:	1080100c 	andi	r2,r2,64
   80bf0:	10bfffcc 	andi	r2,r2,65535
   80bf4:	10a0001c 	xori	r2,r2,32768
   80bf8:	10a00004 	addi	r2,r2,-32768
   80bfc:	10000226 	beq	r2,zero,80c08 <___vfprintf_internal_r+0x53c>
   80c00:	00bfffc4 	movi	r2,-1
   80c04:	d8812c15 	stw	r2,1200(sp)
   80c08:	d8812c17 	ldw	r2,1200(sp)
   80c0c:	dfc14617 	ldw	ra,1304(sp)
   80c10:	df014517 	ldw	fp,1300(sp)
   80c14:	ddc14417 	ldw	r23,1296(sp)
   80c18:	dd814317 	ldw	r22,1292(sp)
   80c1c:	dd414217 	ldw	r21,1288(sp)
   80c20:	dd014117 	ldw	r20,1284(sp)
   80c24:	dcc14017 	ldw	r19,1280(sp)
   80c28:	dc813f17 	ldw	r18,1276(sp)
   80c2c:	dc413e17 	ldw	r17,1272(sp)
   80c30:	dc013d17 	ldw	r16,1268(sp)
   80c34:	dec14704 	addi	sp,sp,1308
   80c38:	f800283a 	ret
   80c3c:	d9412917 	ldw	r5,1188(sp)
   80c40:	8809883a 	mov	r4,r17
   80c44:	d9811b04 	addi	r6,sp,1132
   80c48:	00806980 	call	80698 <__sprint_r>
   80c4c:	103fe51e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   80c50:	da400404 	addi	r9,sp,16
   80c54:	003eea06 	br	80800 <___vfprintf_internal_r+0x134>
   80c58:	00841f40 	call	841f4 <__sinit>
   80c5c:	003eb306 	br	8072c <___vfprintf_internal_r+0x60>
   80c60:	e013883a 	mov	r9,fp
   80c64:	84000414 	ori	r16,r16,16
   80c68:	1839883a 	mov	fp,r3
   80c6c:	8080080c 	andi	r2,r16,32
   80c70:	10034426 	beq	r2,zero,81984 <___vfprintf_internal_r+0x12b8>
   80c74:	d8c12d17 	ldw	r3,1204(sp)
   80c78:	18800117 	ldw	r2,4(r3)
   80c7c:	1dc00017 	ldw	r23,0(r3)
   80c80:	18c00204 	addi	r3,r3,8
   80c84:	d8c12d15 	stw	r3,1204(sp)
   80c88:	102d883a 	mov	r22,r2
   80c8c:	1003020e 	bge	r2,zero,81898 <___vfprintf_internal_r+0x11cc>
   80c90:	05efc83a 	sub	r23,zero,r23
   80c94:	b804c03a 	cmpne	r2,r23,zero
   80c98:	05adc83a 	sub	r22,zero,r22
   80c9c:	b0adc83a 	sub	r22,r22,r2
   80ca0:	00800b44 	movi	r2,45
   80ca4:	d8812585 	stb	r2,1174(sp)
   80ca8:	00c00044 	movi	r3,1
   80cac:	bd84b03a 	or	r2,r23,r22
   80cb0:	e0000216 	blt	fp,zero,80cbc <___vfprintf_internal_r+0x5f0>
   80cb4:	013fdfc4 	movi	r4,-129
   80cb8:	8120703a 	and	r16,r16,r4
   80cbc:	1001cc1e 	bne	r2,zero,813f0 <___vfprintf_internal_r+0xd24>
   80cc0:	e001cb1e 	bne	fp,zero,813f0 <___vfprintf_internal_r+0xd24>
   80cc4:	18c03fcc 	andi	r3,r3,255
   80cc8:	1802ca1e 	bne	r3,zero,817f4 <___vfprintf_internal_r+0x1128>
   80ccc:	8080004c 	andi	r2,r16,1
   80cd0:	1002c826 	beq	r2,zero,817f4 <___vfprintf_internal_r+0x1128>
   80cd4:	d8c13917 	ldw	r3,1252(sp)
   80cd8:	00800c04 	movi	r2,48
   80cdc:	d8810dc5 	stb	r2,1079(sp)
   80ce0:	d8c12b15 	stw	r3,1196(sp)
   80ce4:	dcc10dc4 	addi	r19,sp,1079
   80ce8:	d8812b17 	ldw	r2,1196(sp)
   80cec:	d8812815 	stw	r2,1184(sp)
   80cf0:	1700010e 	bge	r2,fp,80cf8 <___vfprintf_internal_r+0x62c>
   80cf4:	df012815 	stw	fp,1184(sp)
   80cf8:	d8812583 	ldbu	r2,1174(sp)
   80cfc:	df013115 	stw	fp,1220(sp)
   80d00:	10803fcc 	andi	r2,r2,255
   80d04:	1080201c 	xori	r2,r2,128
   80d08:	10bfe004 	addi	r2,r2,-128
   80d0c:	103ed726 	beq	r2,zero,8086c <___vfprintf_internal_r+0x1a0>
   80d10:	d8c12817 	ldw	r3,1184(sp)
   80d14:	18c00044 	addi	r3,r3,1
   80d18:	d8c12815 	stw	r3,1184(sp)
   80d1c:	003ed306 	br	8086c <___vfprintf_internal_r+0x1a0>
   80d20:	8080020c 	andi	r2,r16,8
   80d24:	e013883a 	mov	r9,fp
   80d28:	1839883a 	mov	fp,r3
   80d2c:	1003a626 	beq	r2,zero,81bc8 <___vfprintf_internal_r+0x14fc>
   80d30:	d9012d17 	ldw	r4,1204(sp)
   80d34:	25800017 	ldw	r22,0(r4)
   80d38:	25000117 	ldw	r20,4(r4)
   80d3c:	21000204 	addi	r4,r4,8
   80d40:	d9012d15 	stw	r4,1204(sp)
   80d44:	dd813315 	stw	r22,1228(sp)
   80d48:	dd013415 	stw	r20,1232(sp)
   80d4c:	b009883a 	mov	r4,r22
   80d50:	a00b883a 	mov	r5,r20
   80d54:	da413c15 	stw	r9,1264(sp)
   80d58:	00873800 	call	87380 <__isinfd>
   80d5c:	da413c17 	ldw	r9,1264(sp)
   80d60:	b009883a 	mov	r4,r22
   80d64:	a00b883a 	mov	r5,r20
   80d68:	10041d26 	beq	r2,zero,81de0 <___vfprintf_internal_r+0x1714>
   80d6c:	000d883a 	mov	r6,zero
   80d70:	000f883a 	mov	r7,zero
   80d74:	00891540 	call	89154 <__ltdf2>
   80d78:	da413c17 	ldw	r9,1264(sp)
   80d7c:	1004da16 	blt	r2,zero,820e8 <___vfprintf_internal_r+0x1a1c>
   80d80:	d8812583 	ldbu	r2,1174(sp)
   80d84:	00c011c4 	movi	r3,71
   80d88:	1c83d116 	blt	r3,r18,81cd0 <___vfprintf_internal_r+0x1604>
   80d8c:	04c00274 	movhi	r19,9
   80d90:	9cf31004 	addi	r19,r19,-13248
   80d94:	00c000c4 	movi	r3,3
   80d98:	d8c12815 	stw	r3,1184(sp)
   80d9c:	00ffdfc4 	movi	r3,-129
   80da0:	80e0703a 	and	r16,r16,r3
   80da4:	d8c12817 	ldw	r3,1184(sp)
   80da8:	d8013115 	stw	zero,1220(sp)
   80dac:	d8c12b15 	stw	r3,1196(sp)
   80db0:	003fd306 	br	80d00 <___vfprintf_internal_r+0x634>
   80db4:	84000214 	ori	r16,r16,8
   80db8:	ac800007 	ldb	r18,0(r21)
   80dbc:	003e9f06 	br	8083c <___vfprintf_internal_r+0x170>
   80dc0:	e013883a 	mov	r9,fp
   80dc4:	84000414 	ori	r16,r16,16
   80dc8:	1839883a 	mov	fp,r3
   80dcc:	8080080c 	andi	r2,r16,32
   80dd0:	10031d26 	beq	r2,zero,81a48 <___vfprintf_internal_r+0x137c>
   80dd4:	d8812d17 	ldw	r2,1204(sp)
   80dd8:	0007883a 	mov	r3,zero
   80ddc:	15c00017 	ldw	r23,0(r2)
   80de0:	15800117 	ldw	r22,4(r2)
   80de4:	10800204 	addi	r2,r2,8
   80de8:	d8812d15 	stw	r2,1204(sp)
   80dec:	d8012585 	stb	zero,1174(sp)
   80df0:	bd84b03a 	or	r2,r23,r22
   80df4:	003fae06 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   80df8:	e013883a 	mov	r9,fp
   80dfc:	84000414 	ori	r16,r16,16
   80e00:	1839883a 	mov	fp,r3
   80e04:	8080080c 	andi	r2,r16,32
   80e08:	1002e726 	beq	r2,zero,819a8 <___vfprintf_internal_r+0x12dc>
   80e0c:	d8c12d17 	ldw	r3,1204(sp)
   80e10:	d9012d17 	ldw	r4,1204(sp)
   80e14:	1dc00017 	ldw	r23,0(r3)
   80e18:	1d800117 	ldw	r22,4(r3)
   80e1c:	21000204 	addi	r4,r4,8
   80e20:	00c00044 	movi	r3,1
   80e24:	d9012d15 	stw	r4,1204(sp)
   80e28:	bd84b03a 	or	r2,r23,r22
   80e2c:	d8012585 	stb	zero,1174(sp)
   80e30:	003f9f06 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   80e34:	e013883a 	mov	r9,fp
   80e38:	1839883a 	mov	fp,r3
   80e3c:	00c00274 	movhi	r3,9
   80e40:	18f31404 	addi	r3,r3,-13232
   80e44:	d8c13615 	stw	r3,1240(sp)
   80e48:	8080080c 	andi	r2,r16,32
   80e4c:	10007726 	beq	r2,zero,8102c <___vfprintf_internal_r+0x960>
   80e50:	d9012d17 	ldw	r4,1204(sp)
   80e54:	25c00017 	ldw	r23,0(r4)
   80e58:	25800117 	ldw	r22,4(r4)
   80e5c:	21000204 	addi	r4,r4,8
   80e60:	d9012d15 	stw	r4,1204(sp)
   80e64:	8080004c 	andi	r2,r16,1
   80e68:	1002c226 	beq	r2,zero,81974 <___vfprintf_internal_r+0x12a8>
   80e6c:	bd84b03a 	or	r2,r23,r22
   80e70:	10035d26 	beq	r2,zero,81be8 <___vfprintf_internal_r+0x151c>
   80e74:	00c00c04 	movi	r3,48
   80e78:	d8c12505 	stb	r3,1172(sp)
   80e7c:	dc812545 	stb	r18,1173(sp)
   80e80:	84000094 	ori	r16,r16,2
   80e84:	00c00084 	movi	r3,2
   80e88:	d8012585 	stb	zero,1174(sp)
   80e8c:	003f8806 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   80e90:	ac800007 	ldb	r18,0(r21)
   80e94:	00c00a84 	movi	r3,42
   80e98:	adc00044 	addi	r23,r21,1
   80e9c:	90c57526 	beq	r18,r3,82474 <___vfprintf_internal_r+0x1da8>
   80ea0:	95bff404 	addi	r22,r18,-48
   80ea4:	0009883a 	mov	r4,zero
   80ea8:	9d84ff36 	bltu	r19,r22,822a8 <___vfprintf_internal_r+0x1bdc>
   80eac:	01400284 	movi	r5,10
   80eb0:	00894740 	call	89474 <__mulsi3>
   80eb4:	bc800007 	ldb	r18,0(r23)
   80eb8:	b089883a 	add	r4,r22,r2
   80ebc:	bdc00044 	addi	r23,r23,1
   80ec0:	95bff404 	addi	r22,r18,-48
   80ec4:	9dbff92e 	bgeu	r19,r22,80eac <___vfprintf_internal_r+0x7e0>
   80ec8:	2007883a 	mov	r3,r4
   80ecc:	20044316 	blt	r4,zero,81fdc <___vfprintf_internal_r+0x1910>
   80ed0:	b82b883a 	mov	r21,r23
   80ed4:	003e5a06 	br	80840 <___vfprintf_internal_r+0x174>
   80ed8:	ac800007 	ldb	r18,0(r21)
   80edc:	01001b04 	movi	r4,108
   80ee0:	a805883a 	mov	r2,r21
   80ee4:	91045526 	beq	r18,r4,8203c <___vfprintf_internal_r+0x1970>
   80ee8:	84000414 	ori	r16,r16,16
   80eec:	003e5306 	br	8083c <___vfprintf_internal_r+0x170>
   80ef0:	8080080c 	andi	r2,r16,32
   80ef4:	e013883a 	mov	r9,fp
   80ef8:	10034026 	beq	r2,zero,81bfc <___vfprintf_internal_r+0x1530>
   80efc:	d9012d17 	ldw	r4,1204(sp)
   80f00:	20800017 	ldw	r2,0(r4)
   80f04:	d9012c17 	ldw	r4,1200(sp)
   80f08:	2007d7fa 	srai	r3,r4,31
   80f0c:	d9012d17 	ldw	r4,1204(sp)
   80f10:	10c00115 	stw	r3,4(r2)
   80f14:	21000104 	addi	r4,r4,4
   80f18:	d9012d15 	stw	r4,1204(sp)
   80f1c:	d9012c17 	ldw	r4,1200(sp)
   80f20:	11000015 	stw	r4,0(r2)
   80f24:	003e1f06 	br	807a4 <___vfprintf_internal_r+0xd8>
   80f28:	d9012d17 	ldw	r4,1204(sp)
   80f2c:	21000017 	ldw	r4,0(r4)
   80f30:	d9012e15 	stw	r4,1208(sp)
   80f34:	d9012d17 	ldw	r4,1204(sp)
   80f38:	20800104 	addi	r2,r4,4
   80f3c:	d9012e17 	ldw	r4,1208(sp)
   80f40:	203ee716 	blt	r4,zero,80ae0 <___vfprintf_internal_r+0x414>
   80f44:	d8812d15 	stw	r2,1204(sp)
   80f48:	ac800007 	ldb	r18,0(r21)
   80f4c:	003e3b06 	br	8083c <___vfprintf_internal_r+0x170>
   80f50:	e013883a 	mov	r9,fp
   80f54:	1839883a 	mov	fp,r3
   80f58:	d8c12d17 	ldw	r3,1204(sp)
   80f5c:	00800c04 	movi	r2,48
   80f60:	01000274 	movhi	r4,9
   80f64:	21331904 	addi	r4,r4,-13212
   80f68:	1dc00017 	ldw	r23,0(r3)
   80f6c:	18c00104 	addi	r3,r3,4
   80f70:	d8812505 	stb	r2,1172(sp)
   80f74:	00801e04 	movi	r2,120
   80f78:	d8812545 	stb	r2,1173(sp)
   80f7c:	d8c12d15 	stw	r3,1204(sp)
   80f80:	002d883a 	mov	r22,zero
   80f84:	84000094 	ori	r16,r16,2
   80f88:	d9013615 	stw	r4,1240(sp)
   80f8c:	00c00084 	movi	r3,2
   80f90:	04801e04 	movi	r18,120
   80f94:	b805883a 	mov	r2,r23
   80f98:	d8012585 	stb	zero,1174(sp)
   80f9c:	003f4406 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   80fa0:	84000814 	ori	r16,r16,32
   80fa4:	ac800007 	ldb	r18,0(r21)
   80fa8:	003e2406 	br	8083c <___vfprintf_internal_r+0x170>
   80fac:	d8812d17 	ldw	r2,1204(sp)
   80fb0:	d8012585 	stb	zero,1174(sp)
   80fb4:	e013883a 	mov	r9,fp
   80fb8:	14c00017 	ldw	r19,0(r2)
   80fbc:	1839883a 	mov	fp,r3
   80fc0:	15c00104 	addi	r23,r2,4
   80fc4:	98045526 	beq	r19,zero,8211c <___vfprintf_internal_r+0x1a50>
   80fc8:	9809883a 	mov	r4,r19
   80fcc:	18043116 	blt	r3,zero,82094 <___vfprintf_internal_r+0x19c8>
   80fd0:	000b883a 	mov	r5,zero
   80fd4:	180d883a 	mov	r6,r3
   80fd8:	da413c15 	stw	r9,1264(sp)
   80fdc:	00858940 	call	85894 <memchr>
   80fe0:	da413c17 	ldw	r9,1264(sp)
   80fe4:	10047a26 	beq	r2,zero,821d0 <___vfprintf_internal_r+0x1b04>
   80fe8:	14c5c83a 	sub	r2,r2,r19
   80fec:	d8812b15 	stw	r2,1196(sp)
   80ff0:	e083d40e 	bge	fp,r2,81f44 <___vfprintf_internal_r+0x1878>
   80ff4:	df012815 	stw	fp,1184(sp)
   80ff8:	e004e416 	blt	fp,zero,8238c <___vfprintf_internal_r+0x1cc0>
   80ffc:	d8812583 	ldbu	r2,1174(sp)
   81000:	df012b15 	stw	fp,1196(sp)
   81004:	ddc12d15 	stw	r23,1204(sp)
   81008:	d8013115 	stw	zero,1220(sp)
   8100c:	003f3c06 	br	80d00 <___vfprintf_internal_r+0x634>
   81010:	00800274 	movhi	r2,9
   81014:	10b31904 	addi	r2,r2,-13212
   81018:	d8813615 	stw	r2,1240(sp)
   8101c:	8080080c 	andi	r2,r16,32
   81020:	e013883a 	mov	r9,fp
   81024:	1839883a 	mov	fp,r3
   81028:	103f891e 	bne	r2,zero,80e50 <___vfprintf_internal_r+0x784>
   8102c:	8080040c 	andi	r2,r16,16
   81030:	1002c326 	beq	r2,zero,81b40 <___vfprintf_internal_r+0x1474>
   81034:	d8812d17 	ldw	r2,1204(sp)
   81038:	002d883a 	mov	r22,zero
   8103c:	15c00017 	ldw	r23,0(r2)
   81040:	10800104 	addi	r2,r2,4
   81044:	d8812d15 	stw	r2,1204(sp)
   81048:	003f8606 	br	80e64 <___vfprintf_internal_r+0x798>
   8104c:	84001014 	ori	r16,r16,64
   81050:	ac800007 	ldb	r18,0(r21)
   81054:	003df906 	br	8083c <___vfprintf_internal_r+0x170>
   81058:	d8812587 	ldb	r2,1174(sp)
   8105c:	1002e51e 	bne	r2,zero,81bf4 <___vfprintf_internal_r+0x1528>
   81060:	00800804 	movi	r2,32
   81064:	d8812585 	stb	r2,1174(sp)
   81068:	ac800007 	ldb	r18,0(r21)
   8106c:	003df306 	br	8083c <___vfprintf_internal_r+0x170>
   81070:	84000054 	ori	r16,r16,1
   81074:	ac800007 	ldb	r18,0(r21)
   81078:	003df006 	br	8083c <___vfprintf_internal_r+0x170>
   8107c:	84002014 	ori	r16,r16,128
   81080:	ac800007 	ldb	r18,0(r21)
   81084:	003ded06 	br	8083c <___vfprintf_internal_r+0x170>
   81088:	0009883a 	mov	r4,zero
   8108c:	95bff404 	addi	r22,r18,-48
   81090:	182f883a 	mov	r23,r3
   81094:	01400284 	movi	r5,10
   81098:	00894740 	call	89474 <__mulsi3>
   8109c:	ac800007 	ldb	r18,0(r21)
   810a0:	1589883a 	add	r4,r2,r22
   810a4:	ad400044 	addi	r21,r21,1
   810a8:	95bff404 	addi	r22,r18,-48
   810ac:	9dbff92e 	bgeu	r19,r22,81094 <___vfprintf_internal_r+0x9c8>
   810b0:	b807883a 	mov	r3,r23
   810b4:	d9012e15 	stw	r4,1208(sp)
   810b8:	003de106 	br	80840 <___vfprintf_internal_r+0x174>
   810bc:	00800ac4 	movi	r2,43
   810c0:	d8812585 	stb	r2,1174(sp)
   810c4:	ac800007 	ldb	r18,0(r21)
   810c8:	003ddc06 	br	8083c <___vfprintf_internal_r+0x170>
   810cc:	d8c12d17 	ldw	r3,1204(sp)
   810d0:	d9012d17 	ldw	r4,1204(sp)
   810d4:	e013883a 	mov	r9,fp
   810d8:	18800017 	ldw	r2,0(r3)
   810dc:	21000104 	addi	r4,r4,4
   810e0:	00c00044 	movi	r3,1
   810e4:	d8c12815 	stw	r3,1184(sp)
   810e8:	d8012585 	stb	zero,1174(sp)
   810ec:	d8810405 	stb	r2,1040(sp)
   810f0:	d9012d15 	stw	r4,1204(sp)
   810f4:	d8c12b15 	stw	r3,1196(sp)
   810f8:	dcc10404 	addi	r19,sp,1040
   810fc:	003dda06 	br	80868 <___vfprintf_internal_r+0x19c>
   81100:	e013883a 	mov	r9,fp
   81104:	1839883a 	mov	fp,r3
   81108:	003ed806 	br	80c6c <___vfprintf_internal_r+0x5a0>
   8110c:	e013883a 	mov	r9,fp
   81110:	1839883a 	mov	fp,r3
   81114:	003f2d06 	br	80dcc <___vfprintf_internal_r+0x700>
   81118:	e013883a 	mov	r9,fp
   8111c:	1839883a 	mov	fp,r3
   81120:	003f3806 	br	80e04 <___vfprintf_internal_r+0x738>
   81124:	da011d17 	ldw	r8,1140(sp)
   81128:	d8c11c17 	ldw	r3,1136(sp)
   8112c:	d8812587 	ldb	r2,1174(sp)
   81130:	10000b26 	beq	r2,zero,81160 <___vfprintf_internal_r+0xa94>
   81134:	d8812584 	addi	r2,sp,1174
   81138:	48800015 	stw	r2,0(r9)
   8113c:	00800044 	movi	r2,1
   81140:	48800115 	stw	r2,4(r9)
   81144:	4091883a 	add	r8,r8,r2
   81148:	1887883a 	add	r3,r3,r2
   8114c:	da011d15 	stw	r8,1140(sp)
   81150:	d8c11c15 	stw	r3,1136(sp)
   81154:	008001c4 	movi	r2,7
   81158:	10c18e16 	blt	r2,r3,81794 <___vfprintf_internal_r+0x10c8>
   8115c:	4a400204 	addi	r9,r9,8
   81160:	d9012a17 	ldw	r4,1192(sp)
   81164:	20000b26 	beq	r4,zero,81194 <___vfprintf_internal_r+0xac8>
   81168:	d8812504 	addi	r2,sp,1172
   8116c:	48800015 	stw	r2,0(r9)
   81170:	00800084 	movi	r2,2
   81174:	48800115 	stw	r2,4(r9)
   81178:	4091883a 	add	r8,r8,r2
   8117c:	18c00044 	addi	r3,r3,1
   81180:	da011d15 	stw	r8,1140(sp)
   81184:	d8c11c15 	stw	r3,1136(sp)
   81188:	008001c4 	movi	r2,7
   8118c:	10c17816 	blt	r2,r3,81770 <___vfprintf_internal_r+0x10a4>
   81190:	4a400204 	addi	r9,r9,8
   81194:	d9012f17 	ldw	r4,1212(sp)
   81198:	00802004 	movi	r2,128
   8119c:	2080fc26 	beq	r4,r2,81590 <___vfprintf_internal_r+0xec4>
   811a0:	d8813117 	ldw	r2,1220(sp)
   811a4:	d9012b17 	ldw	r4,1196(sp)
   811a8:	112fc83a 	sub	r23,r2,r4
   811ac:	05c02a0e 	bge	zero,r23,81258 <___vfprintf_internal_r+0xb8c>
   811b0:	07000404 	movi	fp,16
   811b4:	05000274 	movhi	r20,9
   811b8:	a5332484 	addi	r20,r20,-13166
   811bc:	e5c01d0e 	bge	fp,r23,81234 <___vfprintf_internal_r+0xb68>
   811c0:	dc812a15 	stw	r18,1192(sp)
   811c4:	058001c4 	movi	r22,7
   811c8:	a025883a 	mov	r18,r20
   811cc:	8029883a 	mov	r20,r16
   811d0:	dc012917 	ldw	r16,1188(sp)
   811d4:	00000306 	br	811e4 <___vfprintf_internal_r+0xb18>
   811d8:	bdfffc04 	addi	r23,r23,-16
   811dc:	4a400204 	addi	r9,r9,8
   811e0:	e5c0110e 	bge	fp,r23,81228 <___vfprintf_internal_r+0xb5c>
   811e4:	4c800015 	stw	r18,0(r9)
   811e8:	4f000115 	stw	fp,4(r9)
   811ec:	42000404 	addi	r8,r8,16
   811f0:	18c00044 	addi	r3,r3,1
   811f4:	da011d15 	stw	r8,1140(sp)
   811f8:	d8c11c15 	stw	r3,1136(sp)
   811fc:	b0fff60e 	bge	r22,r3,811d8 <___vfprintf_internal_r+0xb0c>
   81200:	8809883a 	mov	r4,r17
   81204:	800b883a 	mov	r5,r16
   81208:	d9811b04 	addi	r6,sp,1132
   8120c:	00806980 	call	80698 <__sprint_r>
   81210:	103e741e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81214:	bdfffc04 	addi	r23,r23,-16
   81218:	da011d17 	ldw	r8,1140(sp)
   8121c:	d8c11c17 	ldw	r3,1136(sp)
   81220:	da400404 	addi	r9,sp,16
   81224:	e5ffef16 	blt	fp,r23,811e4 <___vfprintf_internal_r+0xb18>
   81228:	a021883a 	mov	r16,r20
   8122c:	9029883a 	mov	r20,r18
   81230:	dc812a17 	ldw	r18,1192(sp)
   81234:	4d000015 	stw	r20,0(r9)
   81238:	4dc00115 	stw	r23,4(r9)
   8123c:	45d1883a 	add	r8,r8,r23
   81240:	18c00044 	addi	r3,r3,1
   81244:	da011d15 	stw	r8,1140(sp)
   81248:	d8c11c15 	stw	r3,1136(sp)
   8124c:	008001c4 	movi	r2,7
   81250:	10c13e16 	blt	r2,r3,8174c <___vfprintf_internal_r+0x1080>
   81254:	4a400204 	addi	r9,r9,8
   81258:	8080400c 	andi	r2,r16,256
   8125c:	1000831e 	bne	r2,zero,8146c <___vfprintf_internal_r+0xda0>
   81260:	d8812b17 	ldw	r2,1196(sp)
   81264:	4cc00015 	stw	r19,0(r9)
   81268:	48800115 	stw	r2,4(r9)
   8126c:	4091883a 	add	r8,r8,r2
   81270:	18c00044 	addi	r3,r3,1
   81274:	da011d15 	stw	r8,1140(sp)
   81278:	d8c11c15 	stw	r3,1136(sp)
   8127c:	008001c4 	movi	r2,7
   81280:	10c05316 	blt	r2,r3,813d0 <___vfprintf_internal_r+0xd04>
   81284:	4a400204 	addi	r9,r9,8
   81288:	8400010c 	andi	r16,r16,4
   8128c:	80002e26 	beq	r16,zero,81348 <___vfprintf_internal_r+0xc7c>
   81290:	d8812e17 	ldw	r2,1208(sp)
   81294:	d8c12817 	ldw	r3,1184(sp)
   81298:	10e1c83a 	sub	r16,r2,r3
   8129c:	04002a0e 	bge	zero,r16,81348 <___vfprintf_internal_r+0xc7c>
   812a0:	04800404 	movi	r18,16
   812a4:	d8c11c17 	ldw	r3,1136(sp)
   812a8:	05c00274 	movhi	r23,9
   812ac:	bdf32084 	addi	r23,r23,-13182
   812b0:	9400170e 	bge	r18,r16,81310 <___vfprintf_internal_r+0xc44>
   812b4:	04c001c4 	movi	r19,7
   812b8:	dd012917 	ldw	r20,1188(sp)
   812bc:	00000306 	br	812cc <___vfprintf_internal_r+0xc00>
   812c0:	843ffc04 	addi	r16,r16,-16
   812c4:	4a400204 	addi	r9,r9,8
   812c8:	9400110e 	bge	r18,r16,81310 <___vfprintf_internal_r+0xc44>
   812cc:	4dc00015 	stw	r23,0(r9)
   812d0:	4c800115 	stw	r18,4(r9)
   812d4:	42000404 	addi	r8,r8,16
   812d8:	18c00044 	addi	r3,r3,1
   812dc:	da011d15 	stw	r8,1140(sp)
   812e0:	d8c11c15 	stw	r3,1136(sp)
   812e4:	98fff60e 	bge	r19,r3,812c0 <___vfprintf_internal_r+0xbf4>
   812e8:	8809883a 	mov	r4,r17
   812ec:	a00b883a 	mov	r5,r20
   812f0:	d9811b04 	addi	r6,sp,1132
   812f4:	00806980 	call	80698 <__sprint_r>
   812f8:	103e3a1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   812fc:	843ffc04 	addi	r16,r16,-16
   81300:	da011d17 	ldw	r8,1140(sp)
   81304:	d8c11c17 	ldw	r3,1136(sp)
   81308:	da400404 	addi	r9,sp,16
   8130c:	943fef16 	blt	r18,r16,812cc <___vfprintf_internal_r+0xc00>
   81310:	4dc00015 	stw	r23,0(r9)
   81314:	4c000115 	stw	r16,4(r9)
   81318:	8211883a 	add	r8,r16,r8
   8131c:	18c00044 	addi	r3,r3,1
   81320:	da011d15 	stw	r8,1140(sp)
   81324:	d8c11c15 	stw	r3,1136(sp)
   81328:	008001c4 	movi	r2,7
   8132c:	10c0060e 	bge	r2,r3,81348 <___vfprintf_internal_r+0xc7c>
   81330:	d9412917 	ldw	r5,1188(sp)
   81334:	8809883a 	mov	r4,r17
   81338:	d9811b04 	addi	r6,sp,1132
   8133c:	00806980 	call	80698 <__sprint_r>
   81340:	103e281e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81344:	da011d17 	ldw	r8,1140(sp)
   81348:	dd012817 	ldw	r20,1184(sp)
   8134c:	d9012e17 	ldw	r4,1208(sp)
   81350:	a100010e 	bge	r20,r4,81358 <___vfprintf_internal_r+0xc8c>
   81354:	2029883a 	mov	r20,r4
   81358:	d8812c17 	ldw	r2,1200(sp)
   8135c:	1505883a 	add	r2,r2,r20
   81360:	d8812c15 	stw	r2,1200(sp)
   81364:	4000b91e 	bne	r8,zero,8164c <___vfprintf_internal_r+0xf80>
   81368:	d8011c15 	stw	zero,1136(sp)
   8136c:	a8800007 	ldb	r2,0(r21)
   81370:	da400404 	addi	r9,sp,16
   81374:	103d0d1e 	bne	r2,zero,807ac <___vfprintf_internal_r+0xe0>
   81378:	a825883a 	mov	r18,r21
   8137c:	003d2306 	br	8080c <___vfprintf_internal_r+0x140>
   81380:	d9412917 	ldw	r5,1188(sp)
   81384:	8809883a 	mov	r4,r17
   81388:	d9811b04 	addi	r6,sp,1132
   8138c:	00806980 	call	80698 <__sprint_r>
   81390:	103e141e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81394:	da011d17 	ldw	r8,1140(sp)
   81398:	da400404 	addi	r9,sp,16
   8139c:	8080004c 	andi	r2,r16,1
   813a0:	103fb926 	beq	r2,zero,81288 <___vfprintf_internal_r+0xbbc>
   813a4:	d8c11c17 	ldw	r3,1136(sp)
   813a8:	d9013717 	ldw	r4,1244(sp)
   813ac:	00800044 	movi	r2,1
   813b0:	48800115 	stw	r2,4(r9)
   813b4:	49000015 	stw	r4,0(r9)
   813b8:	4091883a 	add	r8,r8,r2
   813bc:	1887883a 	add	r3,r3,r2
   813c0:	da011d15 	stw	r8,1140(sp)
   813c4:	d8c11c15 	stw	r3,1136(sp)
   813c8:	008001c4 	movi	r2,7
   813cc:	10ffad0e 	bge	r2,r3,81284 <___vfprintf_internal_r+0xbb8>
   813d0:	d9412917 	ldw	r5,1188(sp)
   813d4:	8809883a 	mov	r4,r17
   813d8:	d9811b04 	addi	r6,sp,1132
   813dc:	00806980 	call	80698 <__sprint_r>
   813e0:	103e001e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   813e4:	da400404 	addi	r9,sp,16
   813e8:	da011d17 	ldw	r8,1140(sp)
   813ec:	003fa606 	br	81288 <___vfprintf_internal_r+0xbbc>
   813f0:	18803fcc 	andi	r2,r3,255
   813f4:	00c00044 	movi	r3,1
   813f8:	10c10126 	beq	r2,r3,81800 <___vfprintf_internal_r+0x1134>
   813fc:	00c00084 	movi	r3,2
   81400:	10c0ed26 	beq	r2,r3,817b8 <___vfprintf_internal_r+0x10ec>
   81404:	d8c10dc4 	addi	r3,sp,1079
   81408:	b808d0fa 	srli	r4,r23,3
   8140c:	b00a977a 	slli	r5,r22,29
   81410:	b02cd0fa 	srli	r22,r22,3
   81414:	bdc001cc 	andi	r23,r23,7
   81418:	b8800c04 	addi	r2,r23,48
   8141c:	292eb03a 	or	r23,r5,r4
   81420:	18800005 	stb	r2,0(r3)
   81424:	bd88b03a 	or	r4,r23,r22
   81428:	1827883a 	mov	r19,r3
   8142c:	18ffffc4 	addi	r3,r3,-1
   81430:	203ff51e 	bne	r4,zero,81408 <___vfprintf_internal_r+0xd3c>
   81434:	8100004c 	andi	r4,r16,1
   81438:	980b883a 	mov	r5,r19
   8143c:	20000726 	beq	r4,zero,8145c <___vfprintf_internal_r+0xd90>
   81440:	10803fcc 	andi	r2,r2,255
   81444:	1080201c 	xori	r2,r2,128
   81448:	10bfe004 	addi	r2,r2,-128
   8144c:	01000c04 	movi	r4,48
   81450:	11000226 	beq	r2,r4,8145c <___vfprintf_internal_r+0xd90>
   81454:	1827883a 	mov	r19,r3
   81458:	293fffc5 	stb	r4,-1(r5)
   8145c:	d8812717 	ldw	r2,1180(sp)
   81460:	14c5c83a 	sub	r2,r2,r19
   81464:	d8812b15 	stw	r2,1196(sp)
   81468:	003e1f06 	br	80ce8 <___vfprintf_internal_r+0x61c>
   8146c:	00801944 	movi	r2,101
   81470:	14807c0e 	bge	r2,r18,81664 <___vfprintf_internal_r+0xf98>
   81474:	d9013317 	ldw	r4,1228(sp)
   81478:	d9413417 	ldw	r5,1232(sp)
   8147c:	000d883a 	mov	r6,zero
   81480:	000f883a 	mov	r7,zero
   81484:	d8c13b15 	stw	r3,1260(sp)
   81488:	da013a15 	stw	r8,1256(sp)
   8148c:	da413c15 	stw	r9,1264(sp)
   81490:	0088fd40 	call	88fd4 <__eqdf2>
   81494:	d8c13b17 	ldw	r3,1260(sp)
   81498:	da013a17 	ldw	r8,1256(sp)
   8149c:	da413c17 	ldw	r9,1264(sp)
   814a0:	1001001e 	bne	r2,zero,818a4 <___vfprintf_internal_r+0x11d8>
   814a4:	00800274 	movhi	r2,9
   814a8:	10b32004 	addi	r2,r2,-13184
   814ac:	48800015 	stw	r2,0(r9)
   814b0:	00800044 	movi	r2,1
   814b4:	48800115 	stw	r2,4(r9)
   814b8:	4091883a 	add	r8,r8,r2
   814bc:	1887883a 	add	r3,r3,r2
   814c0:	da011d15 	stw	r8,1140(sp)
   814c4:	d8c11c15 	stw	r3,1136(sp)
   814c8:	008001c4 	movi	r2,7
   814cc:	10c20316 	blt	r2,r3,81cdc <___vfprintf_internal_r+0x1610>
   814d0:	4a400204 	addi	r9,r9,8
   814d4:	d8812417 	ldw	r2,1168(sp)
   814d8:	d8c13217 	ldw	r3,1224(sp)
   814dc:	10c00216 	blt	r2,r3,814e8 <___vfprintf_internal_r+0xe1c>
   814e0:	8080004c 	andi	r2,r16,1
   814e4:	103f6826 	beq	r2,zero,81288 <___vfprintf_internal_r+0xbbc>
   814e8:	d8c11c17 	ldw	r3,1136(sp)
   814ec:	d9013717 	ldw	r4,1244(sp)
   814f0:	00800044 	movi	r2,1
   814f4:	48800115 	stw	r2,4(r9)
   814f8:	49000015 	stw	r4,0(r9)
   814fc:	4091883a 	add	r8,r8,r2
   81500:	1887883a 	add	r3,r3,r2
   81504:	da011d15 	stw	r8,1140(sp)
   81508:	d8c11c15 	stw	r3,1136(sp)
   8150c:	008001c4 	movi	r2,7
   81510:	10c2ce16 	blt	r2,r3,8204c <___vfprintf_internal_r+0x1980>
   81514:	4a400204 	addi	r9,r9,8
   81518:	d8813217 	ldw	r2,1224(sp)
   8151c:	14bfffc4 	addi	r18,r2,-1
   81520:	04bf590e 	bge	zero,r18,81288 <___vfprintf_internal_r+0xbbc>
   81524:	04c00404 	movi	r19,16
   81528:	d8c11c17 	ldw	r3,1136(sp)
   8152c:	05000274 	movhi	r20,9
   81530:	a5332484 	addi	r20,r20,-13166
   81534:	9c818a0e 	bge	r19,r18,81b60 <___vfprintf_internal_r+0x1494>
   81538:	058001c4 	movi	r22,7
   8153c:	ddc12917 	ldw	r23,1188(sp)
   81540:	00000306 	br	81550 <___vfprintf_internal_r+0xe84>
   81544:	4a400204 	addi	r9,r9,8
   81548:	94bffc04 	addi	r18,r18,-16
   8154c:	9c81840e 	bge	r19,r18,81b60 <___vfprintf_internal_r+0x1494>
   81550:	4d000015 	stw	r20,0(r9)
   81554:	4cc00115 	stw	r19,4(r9)
   81558:	42000404 	addi	r8,r8,16
   8155c:	18c00044 	addi	r3,r3,1
   81560:	da011d15 	stw	r8,1140(sp)
   81564:	d8c11c15 	stw	r3,1136(sp)
   81568:	b0fff60e 	bge	r22,r3,81544 <___vfprintf_internal_r+0xe78>
   8156c:	8809883a 	mov	r4,r17
   81570:	b80b883a 	mov	r5,r23
   81574:	d9811b04 	addi	r6,sp,1132
   81578:	00806980 	call	80698 <__sprint_r>
   8157c:	103d991e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81580:	da011d17 	ldw	r8,1140(sp)
   81584:	d8c11c17 	ldw	r3,1136(sp)
   81588:	da400404 	addi	r9,sp,16
   8158c:	003fee06 	br	81548 <___vfprintf_internal_r+0xe7c>
   81590:	d8812e17 	ldw	r2,1208(sp)
   81594:	d9012817 	ldw	r4,1184(sp)
   81598:	112fc83a 	sub	r23,r2,r4
   8159c:	05ff000e 	bge	zero,r23,811a0 <___vfprintf_internal_r+0xad4>
   815a0:	07000404 	movi	fp,16
   815a4:	05000274 	movhi	r20,9
   815a8:	a5332484 	addi	r20,r20,-13166
   815ac:	e5c01d0e 	bge	fp,r23,81624 <___vfprintf_internal_r+0xf58>
   815b0:	dc812a15 	stw	r18,1192(sp)
   815b4:	058001c4 	movi	r22,7
   815b8:	a025883a 	mov	r18,r20
   815bc:	8029883a 	mov	r20,r16
   815c0:	dc012917 	ldw	r16,1188(sp)
   815c4:	00000306 	br	815d4 <___vfprintf_internal_r+0xf08>
   815c8:	bdfffc04 	addi	r23,r23,-16
   815cc:	4a400204 	addi	r9,r9,8
   815d0:	e5c0110e 	bge	fp,r23,81618 <___vfprintf_internal_r+0xf4c>
   815d4:	4c800015 	stw	r18,0(r9)
   815d8:	4f000115 	stw	fp,4(r9)
   815dc:	42000404 	addi	r8,r8,16
   815e0:	18c00044 	addi	r3,r3,1
   815e4:	da011d15 	stw	r8,1140(sp)
   815e8:	d8c11c15 	stw	r3,1136(sp)
   815ec:	b0fff60e 	bge	r22,r3,815c8 <___vfprintf_internal_r+0xefc>
   815f0:	8809883a 	mov	r4,r17
   815f4:	800b883a 	mov	r5,r16
   815f8:	d9811b04 	addi	r6,sp,1132
   815fc:	00806980 	call	80698 <__sprint_r>
   81600:	103d781e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81604:	bdfffc04 	addi	r23,r23,-16
   81608:	da011d17 	ldw	r8,1140(sp)
   8160c:	d8c11c17 	ldw	r3,1136(sp)
   81610:	da400404 	addi	r9,sp,16
   81614:	e5ffef16 	blt	fp,r23,815d4 <___vfprintf_internal_r+0xf08>
   81618:	a021883a 	mov	r16,r20
   8161c:	9029883a 	mov	r20,r18
   81620:	dc812a17 	ldw	r18,1192(sp)
   81624:	4d000015 	stw	r20,0(r9)
   81628:	4dc00115 	stw	r23,4(r9)
   8162c:	45d1883a 	add	r8,r8,r23
   81630:	18c00044 	addi	r3,r3,1
   81634:	da011d15 	stw	r8,1140(sp)
   81638:	d8c11c15 	stw	r3,1136(sp)
   8163c:	008001c4 	movi	r2,7
   81640:	10c13616 	blt	r2,r3,81b1c <___vfprintf_internal_r+0x1450>
   81644:	4a400204 	addi	r9,r9,8
   81648:	003ed506 	br	811a0 <___vfprintf_internal_r+0xad4>
   8164c:	d9412917 	ldw	r5,1188(sp)
   81650:	8809883a 	mov	r4,r17
   81654:	d9811b04 	addi	r6,sp,1132
   81658:	00806980 	call	80698 <__sprint_r>
   8165c:	103f4226 	beq	r2,zero,81368 <___vfprintf_internal_r+0xc9c>
   81660:	003d6006 	br	80be4 <___vfprintf_internal_r+0x518>
   81664:	d9013217 	ldw	r4,1224(sp)
   81668:	00800044 	movi	r2,1
   8166c:	4cc00015 	stw	r19,0(r9)
   81670:	1101000e 	bge	r2,r4,81a74 <___vfprintf_internal_r+0x13a8>
   81674:	00800044 	movi	r2,1
   81678:	48800115 	stw	r2,4(r9)
   8167c:	4091883a 	add	r8,r8,r2
   81680:	1887883a 	add	r3,r3,r2
   81684:	da011d15 	stw	r8,1140(sp)
   81688:	d8c11c15 	stw	r3,1136(sp)
   8168c:	008001c4 	movi	r2,7
   81690:	10c10c16 	blt	r2,r3,81ac4 <___vfprintf_internal_r+0x13f8>
   81694:	4a400204 	addi	r9,r9,8
   81698:	d8813717 	ldw	r2,1244(sp)
   8169c:	48800015 	stw	r2,0(r9)
   816a0:	00800044 	movi	r2,1
   816a4:	48800115 	stw	r2,4(r9)
   816a8:	4091883a 	add	r8,r8,r2
   816ac:	1887883a 	add	r3,r3,r2
   816b0:	da011d15 	stw	r8,1140(sp)
   816b4:	d8c11c15 	stw	r3,1136(sp)
   816b8:	008001c4 	movi	r2,7
   816bc:	10c10a16 	blt	r2,r3,81ae8 <___vfprintf_internal_r+0x141c>
   816c0:	4c800204 	addi	r18,r9,8
   816c4:	d9013317 	ldw	r4,1228(sp)
   816c8:	d9413417 	ldw	r5,1232(sp)
   816cc:	000d883a 	mov	r6,zero
   816d0:	000f883a 	mov	r7,zero
   816d4:	d8c13b15 	stw	r3,1260(sp)
   816d8:	da013a15 	stw	r8,1256(sp)
   816dc:	00890300 	call	89030 <__nedf2>
   816e0:	d8c13b17 	ldw	r3,1260(sp)
   816e4:	da013a17 	ldw	r8,1256(sp)
   816e8:	1000ba26 	beq	r2,zero,819d4 <___vfprintf_internal_r+0x1308>
   816ec:	d9013217 	ldw	r4,1224(sp)
   816f0:	9cc00044 	addi	r19,r19,1
   816f4:	94c00015 	stw	r19,0(r18)
   816f8:	20bfffc4 	addi	r2,r4,-1
   816fc:	90800115 	stw	r2,4(r18)
   81700:	4091883a 	add	r8,r8,r2
   81704:	18c00044 	addi	r3,r3,1
   81708:	da011d15 	stw	r8,1140(sp)
   8170c:	d8c11c15 	stw	r3,1136(sp)
   81710:	008001c4 	movi	r2,7
   81714:	10c0e216 	blt	r2,r3,81aa0 <___vfprintf_internal_r+0x13d4>
   81718:	94800204 	addi	r18,r18,8
   8171c:	d9013517 	ldw	r4,1236(sp)
   81720:	d8811fc4 	addi	r2,sp,1151
   81724:	90800015 	stw	r2,0(r18)
   81728:	91000115 	stw	r4,4(r18)
   8172c:	4111883a 	add	r8,r8,r4
   81730:	18c00044 	addi	r3,r3,1
   81734:	da011d15 	stw	r8,1140(sp)
   81738:	d8c11c15 	stw	r3,1136(sp)
   8173c:	008001c4 	movi	r2,7
   81740:	10ff2316 	blt	r2,r3,813d0 <___vfprintf_internal_r+0xd04>
   81744:	92400204 	addi	r9,r18,8
   81748:	003ecf06 	br	81288 <___vfprintf_internal_r+0xbbc>
   8174c:	d9412917 	ldw	r5,1188(sp)
   81750:	8809883a 	mov	r4,r17
   81754:	d9811b04 	addi	r6,sp,1132
   81758:	00806980 	call	80698 <__sprint_r>
   8175c:	103d211e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81760:	da011d17 	ldw	r8,1140(sp)
   81764:	d8c11c17 	ldw	r3,1136(sp)
   81768:	da400404 	addi	r9,sp,16
   8176c:	003eba06 	br	81258 <___vfprintf_internal_r+0xb8c>
   81770:	d9412917 	ldw	r5,1188(sp)
   81774:	8809883a 	mov	r4,r17
   81778:	d9811b04 	addi	r6,sp,1132
   8177c:	00806980 	call	80698 <__sprint_r>
   81780:	103d181e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81784:	da011d17 	ldw	r8,1140(sp)
   81788:	d8c11c17 	ldw	r3,1136(sp)
   8178c:	da400404 	addi	r9,sp,16
   81790:	003e8006 	br	81194 <___vfprintf_internal_r+0xac8>
   81794:	d9412917 	ldw	r5,1188(sp)
   81798:	8809883a 	mov	r4,r17
   8179c:	d9811b04 	addi	r6,sp,1132
   817a0:	00806980 	call	80698 <__sprint_r>
   817a4:	103d0f1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   817a8:	da011d17 	ldw	r8,1140(sp)
   817ac:	d8c11c17 	ldw	r3,1136(sp)
   817b0:	da400404 	addi	r9,sp,16
   817b4:	003e6a06 	br	81160 <___vfprintf_internal_r+0xa94>
   817b8:	d9413617 	ldw	r5,1240(sp)
   817bc:	d8810dc4 	addi	r2,sp,1079
   817c0:	b8c003cc 	andi	r3,r23,15
   817c4:	b008973a 	slli	r4,r22,28
   817c8:	28c7883a 	add	r3,r5,r3
   817cc:	b82ed13a 	srli	r23,r23,4
   817d0:	18c00003 	ldbu	r3,0(r3)
   817d4:	b02cd13a 	srli	r22,r22,4
   817d8:	25eeb03a 	or	r23,r4,r23
   817dc:	10c00005 	stb	r3,0(r2)
   817e0:	bd86b03a 	or	r3,r23,r22
   817e4:	1027883a 	mov	r19,r2
   817e8:	10bfffc4 	addi	r2,r2,-1
   817ec:	183ff41e 	bne	r3,zero,817c0 <___vfprintf_internal_r+0x10f4>
   817f0:	003f1a06 	br	8145c <___vfprintf_internal_r+0xd90>
   817f4:	d8012b15 	stw	zero,1196(sp)
   817f8:	dcc10e04 	addi	r19,sp,1080
   817fc:	003d3a06 	br	80ce8 <___vfprintf_internal_r+0x61c>
   81800:	b0025426 	beq	r22,zero,82154 <___vfprintf_internal_r+0x1a88>
   81804:	b807883a 	mov	r3,r23
   81808:	d8810dc4 	addi	r2,sp,1079
   8180c:	882f883a 	mov	r23,r17
   81810:	04c00244 	movi	r19,9
   81814:	8023883a 	mov	r17,r16
   81818:	da412815 	stw	r9,1184(sp)
   8181c:	1821883a 	mov	r16,r3
   81820:	8009883a 	mov	r4,r16
   81824:	b00b883a 	mov	r5,r22
   81828:	01800284 	movi	r6,10
   8182c:	000f883a 	mov	r7,zero
   81830:	1029883a 	mov	r20,r2
   81834:	008810c0 	call	8810c <__umoddi3>
   81838:	10800c04 	addi	r2,r2,48
   8183c:	8009883a 	mov	r4,r16
   81840:	b00b883a 	mov	r5,r22
   81844:	a0800005 	stb	r2,0(r20)
   81848:	01800284 	movi	r6,10
   8184c:	000f883a 	mov	r7,zero
   81850:	0087abc0 	call	87abc <__udivdi3>
   81854:	1021883a 	mov	r16,r2
   81858:	182d883a 	mov	r22,r3
   8185c:	a0bfffc4 	addi	r2,r20,-1
   81860:	183fef1e 	bne	r3,zero,81820 <___vfprintf_internal_r+0x1154>
   81864:	9c3fee36 	bltu	r19,r16,81820 <___vfprintf_internal_r+0x1154>
   81868:	da412817 	ldw	r9,1184(sp)
   8186c:	8005883a 	mov	r2,r16
   81870:	8821883a 	mov	r16,r17
   81874:	b823883a 	mov	r17,r23
   81878:	102f883a 	mov	r23,r2
   8187c:	d8812717 	ldw	r2,1180(sp)
   81880:	a4ffffc4 	addi	r19,r20,-1
   81884:	bdc00c04 	addi	r23,r23,48
   81888:	14c5c83a 	sub	r2,r2,r19
   8188c:	a5ffffc5 	stb	r23,-1(r20)
   81890:	d8812b15 	stw	r2,1196(sp)
   81894:	003d1406 	br	80ce8 <___vfprintf_internal_r+0x61c>
   81898:	00c00044 	movi	r3,1
   8189c:	bd84b03a 	or	r2,r23,r22
   818a0:	003d0306 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   818a4:	dc812417 	ldw	r18,1168(sp)
   818a8:	0481140e 	bge	zero,r18,81cfc <___vfprintf_internal_r+0x1630>
   818ac:	d9013217 	ldw	r4,1224(sp)
   818b0:	4cc00015 	stw	r19,0(r9)
   818b4:	9100ec16 	blt	r18,r4,81c68 <___vfprintf_internal_r+0x159c>
   818b8:	49000115 	stw	r4,4(r9)
   818bc:	4111883a 	add	r8,r8,r4
   818c0:	18c00044 	addi	r3,r3,1
   818c4:	da011d15 	stw	r8,1140(sp)
   818c8:	d8c11c15 	stw	r3,1136(sp)
   818cc:	008001c4 	movi	r2,7
   818d0:	10c23616 	blt	r2,r3,821ac <___vfprintf_internal_r+0x1ae0>
   818d4:	4a400204 	addi	r9,r9,8
   818d8:	d8813217 	ldw	r2,1224(sp)
   818dc:	90a5c83a 	sub	r18,r18,r2
   818e0:	04beae0e 	bge	zero,r18,8139c <___vfprintf_internal_r+0xcd0>
   818e4:	04c00404 	movi	r19,16
   818e8:	d8c11c17 	ldw	r3,1136(sp)
   818ec:	05000274 	movhi	r20,9
   818f0:	a5332484 	addi	r20,r20,-13166
   818f4:	9c81dd0e 	bge	r19,r18,8206c <___vfprintf_internal_r+0x19a0>
   818f8:	058001c4 	movi	r22,7
   818fc:	ddc12917 	ldw	r23,1188(sp)
   81900:	00000306 	br	81910 <___vfprintf_internal_r+0x1244>
   81904:	4a400204 	addi	r9,r9,8
   81908:	94bffc04 	addi	r18,r18,-16
   8190c:	9c81d70e 	bge	r19,r18,8206c <___vfprintf_internal_r+0x19a0>
   81910:	4d000015 	stw	r20,0(r9)
   81914:	4cc00115 	stw	r19,4(r9)
   81918:	42000404 	addi	r8,r8,16
   8191c:	18c00044 	addi	r3,r3,1
   81920:	da011d15 	stw	r8,1140(sp)
   81924:	d8c11c15 	stw	r3,1136(sp)
   81928:	b0fff60e 	bge	r22,r3,81904 <___vfprintf_internal_r+0x1238>
   8192c:	8809883a 	mov	r4,r17
   81930:	b80b883a 	mov	r5,r23
   81934:	d9811b04 	addi	r6,sp,1132
   81938:	00806980 	call	80698 <__sprint_r>
   8193c:	103ca91e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81940:	da011d17 	ldw	r8,1140(sp)
   81944:	d8c11c17 	ldw	r3,1136(sp)
   81948:	da400404 	addi	r9,sp,16
   8194c:	003fee06 	br	81908 <___vfprintf_internal_r+0x123c>
   81950:	d9412917 	ldw	r5,1188(sp)
   81954:	8809883a 	mov	r4,r17
   81958:	d9811b04 	addi	r6,sp,1132
   8195c:	00806980 	call	80698 <__sprint_r>
   81960:	103ca01e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81964:	da011d17 	ldw	r8,1140(sp)
   81968:	d8c11c17 	ldw	r3,1136(sp)
   8196c:	da400404 	addi	r9,sp,16
   81970:	003dee06 	br	8112c <___vfprintf_internal_r+0xa60>
   81974:	00c00084 	movi	r3,2
   81978:	bd84b03a 	or	r2,r23,r22
   8197c:	d8012585 	stb	zero,1174(sp)
   81980:	003ccb06 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81984:	8080040c 	andi	r2,r16,16
   81988:	1000ae26 	beq	r2,zero,81c44 <___vfprintf_internal_r+0x1578>
   8198c:	d9012d17 	ldw	r4,1204(sp)
   81990:	25c00017 	ldw	r23,0(r4)
   81994:	21000104 	addi	r4,r4,4
   81998:	d9012d15 	stw	r4,1204(sp)
   8199c:	b82dd7fa 	srai	r22,r23,31
   819a0:	b005883a 	mov	r2,r22
   819a4:	003cb906 	br	80c8c <___vfprintf_internal_r+0x5c0>
   819a8:	8080040c 	andi	r2,r16,16
   819ac:	10007026 	beq	r2,zero,81b70 <___vfprintf_internal_r+0x14a4>
   819b0:	d8812d17 	ldw	r2,1204(sp)
   819b4:	002d883a 	mov	r22,zero
   819b8:	00c00044 	movi	r3,1
   819bc:	15c00017 	ldw	r23,0(r2)
   819c0:	10800104 	addi	r2,r2,4
   819c4:	d8812d15 	stw	r2,1204(sp)
   819c8:	d8012585 	stb	zero,1174(sp)
   819cc:	b805883a 	mov	r2,r23
   819d0:	003cb706 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   819d4:	d8813217 	ldw	r2,1224(sp)
   819d8:	14ffffc4 	addi	r19,r2,-1
   819dc:	04ff4f0e 	bge	zero,r19,8171c <___vfprintf_internal_r+0x1050>
   819e0:	05800404 	movi	r22,16
   819e4:	05000274 	movhi	r20,9
   819e8:	a5332484 	addi	r20,r20,-13166
   819ec:	b4c0470e 	bge	r22,r19,81b0c <___vfprintf_internal_r+0x1440>
   819f0:	05c001c4 	movi	r23,7
   819f4:	df012917 	ldw	fp,1188(sp)
   819f8:	00000306 	br	81a08 <___vfprintf_internal_r+0x133c>
   819fc:	94800204 	addi	r18,r18,8
   81a00:	9cfffc04 	addi	r19,r19,-16
   81a04:	b4c0410e 	bge	r22,r19,81b0c <___vfprintf_internal_r+0x1440>
   81a08:	95000015 	stw	r20,0(r18)
   81a0c:	95800115 	stw	r22,4(r18)
   81a10:	42000404 	addi	r8,r8,16
   81a14:	18c00044 	addi	r3,r3,1
   81a18:	da011d15 	stw	r8,1140(sp)
   81a1c:	d8c11c15 	stw	r3,1136(sp)
   81a20:	b8fff60e 	bge	r23,r3,819fc <___vfprintf_internal_r+0x1330>
   81a24:	8809883a 	mov	r4,r17
   81a28:	e00b883a 	mov	r5,fp
   81a2c:	d9811b04 	addi	r6,sp,1132
   81a30:	00806980 	call	80698 <__sprint_r>
   81a34:	103c6b1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81a38:	da011d17 	ldw	r8,1140(sp)
   81a3c:	d8c11c17 	ldw	r3,1136(sp)
   81a40:	dc800404 	addi	r18,sp,16
   81a44:	003fee06 	br	81a00 <___vfprintf_internal_r+0x1334>
   81a48:	8080040c 	andi	r2,r16,16
   81a4c:	10005326 	beq	r2,zero,81b9c <___vfprintf_internal_r+0x14d0>
   81a50:	d8c12d17 	ldw	r3,1204(sp)
   81a54:	002d883a 	mov	r22,zero
   81a58:	1dc00017 	ldw	r23,0(r3)
   81a5c:	18c00104 	addi	r3,r3,4
   81a60:	d8c12d15 	stw	r3,1204(sp)
   81a64:	b805883a 	mov	r2,r23
   81a68:	0007883a 	mov	r3,zero
   81a6c:	d8012585 	stb	zero,1174(sp)
   81a70:	003c8f06 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81a74:	8088703a 	and	r4,r16,r2
   81a78:	203efe1e 	bne	r4,zero,81674 <___vfprintf_internal_r+0xfa8>
   81a7c:	48800115 	stw	r2,4(r9)
   81a80:	42000044 	addi	r8,r8,1
   81a84:	18c00044 	addi	r3,r3,1
   81a88:	da011d15 	stw	r8,1140(sp)
   81a8c:	d8c11c15 	stw	r3,1136(sp)
   81a90:	008001c4 	movi	r2,7
   81a94:	10c00216 	blt	r2,r3,81aa0 <___vfprintf_internal_r+0x13d4>
   81a98:	4c800204 	addi	r18,r9,8
   81a9c:	003f1f06 	br	8171c <___vfprintf_internal_r+0x1050>
   81aa0:	d9412917 	ldw	r5,1188(sp)
   81aa4:	8809883a 	mov	r4,r17
   81aa8:	d9811b04 	addi	r6,sp,1132
   81aac:	00806980 	call	80698 <__sprint_r>
   81ab0:	103c4c1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81ab4:	dc800404 	addi	r18,sp,16
   81ab8:	da011d17 	ldw	r8,1140(sp)
   81abc:	d8c11c17 	ldw	r3,1136(sp)
   81ac0:	003f1606 	br	8171c <___vfprintf_internal_r+0x1050>
   81ac4:	d9412917 	ldw	r5,1188(sp)
   81ac8:	8809883a 	mov	r4,r17
   81acc:	d9811b04 	addi	r6,sp,1132
   81ad0:	00806980 	call	80698 <__sprint_r>
   81ad4:	103c431e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81ad8:	da011d17 	ldw	r8,1140(sp)
   81adc:	d8c11c17 	ldw	r3,1136(sp)
   81ae0:	da400404 	addi	r9,sp,16
   81ae4:	003eec06 	br	81698 <___vfprintf_internal_r+0xfcc>
   81ae8:	d9412917 	ldw	r5,1188(sp)
   81aec:	8809883a 	mov	r4,r17
   81af0:	d9811b04 	addi	r6,sp,1132
   81af4:	00806980 	call	80698 <__sprint_r>
   81af8:	103c3a1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81afc:	da011d17 	ldw	r8,1140(sp)
   81b00:	d8c11c17 	ldw	r3,1136(sp)
   81b04:	dc800404 	addi	r18,sp,16
   81b08:	003eee06 	br	816c4 <___vfprintf_internal_r+0xff8>
   81b0c:	95000015 	stw	r20,0(r18)
   81b10:	94c00115 	stw	r19,4(r18)
   81b14:	44d1883a 	add	r8,r8,r19
   81b18:	003efa06 	br	81704 <___vfprintf_internal_r+0x1038>
   81b1c:	d9412917 	ldw	r5,1188(sp)
   81b20:	8809883a 	mov	r4,r17
   81b24:	d9811b04 	addi	r6,sp,1132
   81b28:	00806980 	call	80698 <__sprint_r>
   81b2c:	103c2d1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81b30:	da011d17 	ldw	r8,1140(sp)
   81b34:	d8c11c17 	ldw	r3,1136(sp)
   81b38:	da400404 	addi	r9,sp,16
   81b3c:	003d9806 	br	811a0 <___vfprintf_internal_r+0xad4>
   81b40:	8080100c 	andi	r2,r16,64
   81b44:	10011626 	beq	r2,zero,81fa0 <___vfprintf_internal_r+0x18d4>
   81b48:	d8c12d17 	ldw	r3,1204(sp)
   81b4c:	002d883a 	mov	r22,zero
   81b50:	1dc0000b 	ldhu	r23,0(r3)
   81b54:	18c00104 	addi	r3,r3,4
   81b58:	d8c12d15 	stw	r3,1204(sp)
   81b5c:	003cc106 	br	80e64 <___vfprintf_internal_r+0x798>
   81b60:	4d000015 	stw	r20,0(r9)
   81b64:	4c800115 	stw	r18,4(r9)
   81b68:	4491883a 	add	r8,r8,r18
   81b6c:	003dc006 	br	81270 <___vfprintf_internal_r+0xba4>
   81b70:	8080100c 	andi	r2,r16,64
   81b74:	10010126 	beq	r2,zero,81f7c <___vfprintf_internal_r+0x18b0>
   81b78:	d8c12d17 	ldw	r3,1204(sp)
   81b7c:	002d883a 	mov	r22,zero
   81b80:	1dc0000b 	ldhu	r23,0(r3)
   81b84:	18c00104 	addi	r3,r3,4
   81b88:	d8c12d15 	stw	r3,1204(sp)
   81b8c:	b805883a 	mov	r2,r23
   81b90:	00c00044 	movi	r3,1
   81b94:	d8012585 	stb	zero,1174(sp)
   81b98:	003c4506 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81b9c:	8080100c 	andi	r2,r16,64
   81ba0:	10010526 	beq	r2,zero,81fb8 <___vfprintf_internal_r+0x18ec>
   81ba4:	d9012d17 	ldw	r4,1204(sp)
   81ba8:	002d883a 	mov	r22,zero
   81bac:	0007883a 	mov	r3,zero
   81bb0:	25c0000b 	ldhu	r23,0(r4)
   81bb4:	21000104 	addi	r4,r4,4
   81bb8:	d9012d15 	stw	r4,1204(sp)
   81bbc:	b805883a 	mov	r2,r23
   81bc0:	d8012585 	stb	zero,1174(sp)
   81bc4:	003c3a06 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81bc8:	d8812d17 	ldw	r2,1204(sp)
   81bcc:	15800017 	ldw	r22,0(r2)
   81bd0:	15000117 	ldw	r20,4(r2)
   81bd4:	10800204 	addi	r2,r2,8
   81bd8:	d8812d15 	stw	r2,1204(sp)
   81bdc:	dd813315 	stw	r22,1228(sp)
   81be0:	dd013415 	stw	r20,1232(sp)
   81be4:	003c5906 	br	80d4c <___vfprintf_internal_r+0x680>
   81be8:	00c00084 	movi	r3,2
   81bec:	d8012585 	stb	zero,1174(sp)
   81bf0:	003c2f06 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81bf4:	ac800007 	ldb	r18,0(r21)
   81bf8:	003b1006 	br	8083c <___vfprintf_internal_r+0x170>
   81bfc:	8080040c 	andi	r2,r16,16
   81c00:	1000091e 	bne	r2,zero,81c28 <___vfprintf_internal_r+0x155c>
   81c04:	8400100c 	andi	r16,r16,64
   81c08:	80000726 	beq	r16,zero,81c28 <___vfprintf_internal_r+0x155c>
   81c0c:	d8c12d17 	ldw	r3,1204(sp)
   81c10:	d9012c17 	ldw	r4,1200(sp)
   81c14:	18800017 	ldw	r2,0(r3)
   81c18:	18c00104 	addi	r3,r3,4
   81c1c:	d8c12d15 	stw	r3,1204(sp)
   81c20:	1100000d 	sth	r4,0(r2)
   81c24:	003adf06 	br	807a4 <___vfprintf_internal_r+0xd8>
   81c28:	d8c12d17 	ldw	r3,1204(sp)
   81c2c:	d9012c17 	ldw	r4,1200(sp)
   81c30:	18800017 	ldw	r2,0(r3)
   81c34:	18c00104 	addi	r3,r3,4
   81c38:	d8c12d15 	stw	r3,1204(sp)
   81c3c:	11000015 	stw	r4,0(r2)
   81c40:	003ad806 	br	807a4 <___vfprintf_internal_r+0xd8>
   81c44:	8080100c 	andi	r2,r16,64
   81c48:	1000c526 	beq	r2,zero,81f60 <___vfprintf_internal_r+0x1894>
   81c4c:	d8812d17 	ldw	r2,1204(sp)
   81c50:	15c0000f 	ldh	r23,0(r2)
   81c54:	10800104 	addi	r2,r2,4
   81c58:	d8812d15 	stw	r2,1204(sp)
   81c5c:	b82dd7fa 	srai	r22,r23,31
   81c60:	b005883a 	mov	r2,r22
   81c64:	003c0906 	br	80c8c <___vfprintf_internal_r+0x5c0>
   81c68:	4c800115 	stw	r18,4(r9)
   81c6c:	9211883a 	add	r8,r18,r8
   81c70:	18c00044 	addi	r3,r3,1
   81c74:	da011d15 	stw	r8,1140(sp)
   81c78:	d8c11c15 	stw	r3,1136(sp)
   81c7c:	008001c4 	movi	r2,7
   81c80:	10c14016 	blt	r2,r3,82184 <___vfprintf_internal_r+0x1ab8>
   81c84:	4a400204 	addi	r9,r9,8
   81c88:	d8813717 	ldw	r2,1244(sp)
   81c8c:	9ca7883a 	add	r19,r19,r18
   81c90:	48800015 	stw	r2,0(r9)
   81c94:	00800044 	movi	r2,1
   81c98:	48800115 	stw	r2,4(r9)
   81c9c:	4091883a 	add	r8,r8,r2
   81ca0:	1887883a 	add	r3,r3,r2
   81ca4:	da011d15 	stw	r8,1140(sp)
   81ca8:	d8c11c15 	stw	r3,1136(sp)
   81cac:	008001c4 	movi	r2,7
   81cb0:	10c12c16 	blt	r2,r3,82164 <___vfprintf_internal_r+0x1a98>
   81cb4:	4a400204 	addi	r9,r9,8
   81cb8:	d9013217 	ldw	r4,1224(sp)
   81cbc:	da011d17 	ldw	r8,1140(sp)
   81cc0:	d8c11c17 	ldw	r3,1136(sp)
   81cc4:	24a5c83a 	sub	r18,r4,r18
   81cc8:	4cc00015 	stw	r19,0(r9)
   81ccc:	003fa506 	br	81b64 <___vfprintf_internal_r+0x1498>
   81cd0:	04c00274 	movhi	r19,9
   81cd4:	9cf31104 	addi	r19,r19,-13244
   81cd8:	003c2e06 	br	80d94 <___vfprintf_internal_r+0x6c8>
   81cdc:	d9412917 	ldw	r5,1188(sp)
   81ce0:	8809883a 	mov	r4,r17
   81ce4:	d9811b04 	addi	r6,sp,1132
   81ce8:	00806980 	call	80698 <__sprint_r>
   81cec:	103bbd1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81cf0:	da011d17 	ldw	r8,1140(sp)
   81cf4:	da400404 	addi	r9,sp,16
   81cf8:	003df606 	br	814d4 <___vfprintf_internal_r+0xe08>
   81cfc:	00800274 	movhi	r2,9
   81d00:	10b32004 	addi	r2,r2,-13184
   81d04:	48800015 	stw	r2,0(r9)
   81d08:	00800044 	movi	r2,1
   81d0c:	48800115 	stw	r2,4(r9)
   81d10:	4091883a 	add	r8,r8,r2
   81d14:	1887883a 	add	r3,r3,r2
   81d18:	da011d15 	stw	r8,1140(sp)
   81d1c:	d8c11c15 	stw	r3,1136(sp)
   81d20:	008001c4 	movi	r2,7
   81d24:	10c0bc16 	blt	r2,r3,82018 <___vfprintf_internal_r+0x194c>
   81d28:	4a400204 	addi	r9,r9,8
   81d2c:	9000041e 	bne	r18,zero,81d40 <___vfprintf_internal_r+0x1674>
   81d30:	d8c13217 	ldw	r3,1224(sp)
   81d34:	1800021e 	bne	r3,zero,81d40 <___vfprintf_internal_r+0x1674>
   81d38:	8080004c 	andi	r2,r16,1
   81d3c:	103d5226 	beq	r2,zero,81288 <___vfprintf_internal_r+0xbbc>
   81d40:	d8c11c17 	ldw	r3,1136(sp)
   81d44:	d9013717 	ldw	r4,1244(sp)
   81d48:	00800044 	movi	r2,1
   81d4c:	48800115 	stw	r2,4(r9)
   81d50:	49000015 	stw	r4,0(r9)
   81d54:	4091883a 	add	r8,r8,r2
   81d58:	1887883a 	add	r3,r3,r2
   81d5c:	da011d15 	stw	r8,1140(sp)
   81d60:	d8c11c15 	stw	r3,1136(sp)
   81d64:	008001c4 	movi	r2,7
   81d68:	10c14516 	blt	r2,r3,82280 <___vfprintf_internal_r+0x1bb4>
   81d6c:	4a400204 	addi	r9,r9,8
   81d70:	04a5c83a 	sub	r18,zero,r18
   81d74:	0480d70e 	bge	zero,r18,820d4 <___vfprintf_internal_r+0x1a08>
   81d78:	05800404 	movi	r22,16
   81d7c:	05000274 	movhi	r20,9
   81d80:	a5332484 	addi	r20,r20,-13166
   81d84:	b480db0e 	bge	r22,r18,820f4 <___vfprintf_internal_r+0x1a28>
   81d88:	05c001c4 	movi	r23,7
   81d8c:	df012917 	ldw	fp,1188(sp)
   81d90:	00000306 	br	81da0 <___vfprintf_internal_r+0x16d4>
   81d94:	4a400204 	addi	r9,r9,8
   81d98:	94bffc04 	addi	r18,r18,-16
   81d9c:	b480d50e 	bge	r22,r18,820f4 <___vfprintf_internal_r+0x1a28>
   81da0:	4d000015 	stw	r20,0(r9)
   81da4:	4d800115 	stw	r22,4(r9)
   81da8:	42000404 	addi	r8,r8,16
   81dac:	18c00044 	addi	r3,r3,1
   81db0:	da011d15 	stw	r8,1140(sp)
   81db4:	d8c11c15 	stw	r3,1136(sp)
   81db8:	b8fff60e 	bge	r23,r3,81d94 <___vfprintf_internal_r+0x16c8>
   81dbc:	8809883a 	mov	r4,r17
   81dc0:	e00b883a 	mov	r5,fp
   81dc4:	d9811b04 	addi	r6,sp,1132
   81dc8:	00806980 	call	80698 <__sprint_r>
   81dcc:	103b851e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   81dd0:	da011d17 	ldw	r8,1140(sp)
   81dd4:	d8c11c17 	ldw	r3,1136(sp)
   81dd8:	da400404 	addi	r9,sp,16
   81ddc:	003fee06 	br	81d98 <___vfprintf_internal_r+0x16cc>
   81de0:	da413c15 	stw	r9,1264(sp)
   81de4:	00873b80 	call	873b8 <__isnand>
   81de8:	da413c17 	ldw	r9,1264(sp)
   81dec:	10007e1e 	bne	r2,zero,81fe8 <___vfprintf_internal_r+0x191c>
   81df0:	00bfffc4 	movi	r2,-1
   81df4:	e0816a26 	beq	fp,r2,823a0 <___vfprintf_internal_r+0x1cd4>
   81df8:	008019c4 	movi	r2,103
   81dfc:	90816526 	beq	r18,r2,82394 <___vfprintf_internal_r+0x1cc8>
   81e00:	008011c4 	movi	r2,71
   81e04:	90816326 	beq	r18,r2,82394 <___vfprintf_internal_r+0x1cc8>
   81e08:	80c04014 	ori	r3,r16,256
   81e0c:	d8c12a15 	stw	r3,1192(sp)
   81e10:	a0016516 	blt	r20,zero,823a8 <___vfprintf_internal_r+0x1cdc>
   81e14:	d8012f05 	stb	zero,1212(sp)
   81e18:	00801984 	movi	r2,102
   81e1c:	9080f226 	beq	r18,r2,821e8 <___vfprintf_internal_r+0x1b1c>
   81e20:	00801184 	movi	r2,70
   81e24:	9080f026 	beq	r18,r2,821e8 <___vfprintf_internal_r+0x1b1c>
   81e28:	00801944 	movi	r2,101
   81e2c:	90818d26 	beq	r18,r2,82464 <___vfprintf_internal_r+0x1d98>
   81e30:	00801144 	movi	r2,69
   81e34:	90818b26 	beq	r18,r2,82464 <___vfprintf_internal_r+0x1d98>
   81e38:	e02f883a 	mov	r23,fp
   81e3c:	d8812404 	addi	r2,sp,1168
   81e40:	d8800115 	stw	r2,4(sp)
   81e44:	d8812304 	addi	r2,sp,1164
   81e48:	d8800215 	stw	r2,8(sp)
   81e4c:	d8812204 	addi	r2,sp,1160
   81e50:	ddc00015 	stw	r23,0(sp)
   81e54:	d8800315 	stw	r2,12(sp)
   81e58:	8809883a 	mov	r4,r17
   81e5c:	b00b883a 	mov	r5,r22
   81e60:	a00d883a 	mov	r6,r20
   81e64:	01c00084 	movi	r7,2
   81e68:	da413c15 	stw	r9,1264(sp)
   81e6c:	008291c0 	call	8291c <_dtoa_r>
   81e70:	1027883a 	mov	r19,r2
   81e74:	008019c4 	movi	r2,103
   81e78:	da413c17 	ldw	r9,1264(sp)
   81e7c:	9081951e 	bne	r18,r2,824d4 <___vfprintf_internal_r+0x1e08>
   81e80:	8080004c 	andi	r2,r16,1
   81e84:	10017926 	beq	r2,zero,8246c <___vfprintf_internal_r+0x1da0>
   81e88:	00801184 	movi	r2,70
   81e8c:	9dc7883a 	add	r3,r19,r23
   81e90:	9080e626 	beq	r18,r2,8222c <___vfprintf_internal_r+0x1b60>
   81e94:	b009883a 	mov	r4,r22
   81e98:	a00b883a 	mov	r5,r20
   81e9c:	000d883a 	mov	r6,zero
   81ea0:	000f883a 	mov	r7,zero
   81ea4:	d8c13b15 	stw	r3,1260(sp)
   81ea8:	da413c15 	stw	r9,1264(sp)
   81eac:	0088fd40 	call	88fd4 <__eqdf2>
   81eb0:	d8c13b17 	ldw	r3,1260(sp)
   81eb4:	da413c17 	ldw	r9,1264(sp)
   81eb8:	10000726 	beq	r2,zero,81ed8 <___vfprintf_internal_r+0x180c>
   81ebc:	d8812217 	ldw	r2,1160(sp)
   81ec0:	10c18a2e 	bgeu	r2,r3,824ec <___vfprintf_internal_r+0x1e20>
   81ec4:	01000c04 	movi	r4,48
   81ec8:	11000005 	stb	r4,0(r2)
   81ecc:	10800044 	addi	r2,r2,1
   81ed0:	d8812215 	stw	r2,1160(sp)
   81ed4:	10fffc1e 	bne	r2,r3,81ec8 <___vfprintf_internal_r+0x17fc>
   81ed8:	1cc7c83a 	sub	r3,r3,r19
   81edc:	d8c13215 	stw	r3,1224(sp)
   81ee0:	008019c4 	movi	r2,103
   81ee4:	9080fa26 	beq	r18,r2,822d0 <___vfprintf_internal_r+0x1c04>
   81ee8:	008011c4 	movi	r2,71
   81eec:	9080f826 	beq	r18,r2,822d0 <___vfprintf_internal_r+0x1c04>
   81ef0:	00801984 	movi	r2,102
   81ef4:	90818e1e 	bne	r18,r2,82530 <___vfprintf_internal_r+0x1e64>
   81ef8:	d8812417 	ldw	r2,1168(sp)
   81efc:	d8812b15 	stw	r2,1196(sp)
   81f00:	00817c0e 	bge	zero,r2,824f4 <___vfprintf_internal_r+0x1e28>
   81f04:	e000021e 	bne	fp,zero,81f10 <___vfprintf_internal_r+0x1844>
   81f08:	8400004c 	andi	r16,r16,1
   81f0c:	80000426 	beq	r16,zero,81f20 <___vfprintf_internal_r+0x1854>
   81f10:	d8812b17 	ldw	r2,1196(sp)
   81f14:	e2000044 	addi	r8,fp,1
   81f18:	1205883a 	add	r2,r2,r8
   81f1c:	d8812b15 	stw	r2,1196(sp)
   81f20:	d8812815 	stw	r2,1184(sp)
   81f24:	10010b16 	blt	r2,zero,82354 <___vfprintf_internal_r+0x1c88>
   81f28:	ddc12f07 	ldb	r23,1212(sp)
   81f2c:	b800e426 	beq	r23,zero,822c0 <___vfprintf_internal_r+0x1bf4>
   81f30:	00800b44 	movi	r2,45
   81f34:	d8812585 	stb	r2,1174(sp)
   81f38:	dc012a17 	ldw	r16,1192(sp)
   81f3c:	d8013115 	stw	zero,1220(sp)
   81f40:	003b7306 	br	80d10 <___vfprintf_internal_r+0x644>
   81f44:	d8812b17 	ldw	r2,1196(sp)
   81f48:	d8812815 	stw	r2,1184(sp)
   81f4c:	10005716 	blt	r2,zero,820ac <___vfprintf_internal_r+0x19e0>
   81f50:	d8812583 	ldbu	r2,1174(sp)
   81f54:	ddc12d15 	stw	r23,1204(sp)
   81f58:	d8013115 	stw	zero,1220(sp)
   81f5c:	003b6806 	br	80d00 <___vfprintf_internal_r+0x634>
   81f60:	d8c12d17 	ldw	r3,1204(sp)
   81f64:	1dc00017 	ldw	r23,0(r3)
   81f68:	18c00104 	addi	r3,r3,4
   81f6c:	d8c12d15 	stw	r3,1204(sp)
   81f70:	b82dd7fa 	srai	r22,r23,31
   81f74:	b005883a 	mov	r2,r22
   81f78:	003b4406 	br	80c8c <___vfprintf_internal_r+0x5c0>
   81f7c:	d9012d17 	ldw	r4,1204(sp)
   81f80:	002d883a 	mov	r22,zero
   81f84:	00c00044 	movi	r3,1
   81f88:	25c00017 	ldw	r23,0(r4)
   81f8c:	21000104 	addi	r4,r4,4
   81f90:	d9012d15 	stw	r4,1204(sp)
   81f94:	b805883a 	mov	r2,r23
   81f98:	d8012585 	stb	zero,1174(sp)
   81f9c:	003b4406 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81fa0:	d9012d17 	ldw	r4,1204(sp)
   81fa4:	002d883a 	mov	r22,zero
   81fa8:	25c00017 	ldw	r23,0(r4)
   81fac:	21000104 	addi	r4,r4,4
   81fb0:	d9012d15 	stw	r4,1204(sp)
   81fb4:	003bab06 	br	80e64 <___vfprintf_internal_r+0x798>
   81fb8:	d8812d17 	ldw	r2,1204(sp)
   81fbc:	002d883a 	mov	r22,zero
   81fc0:	0007883a 	mov	r3,zero
   81fc4:	15c00017 	ldw	r23,0(r2)
   81fc8:	10800104 	addi	r2,r2,4
   81fcc:	d8812d15 	stw	r2,1204(sp)
   81fd0:	d8012585 	stb	zero,1174(sp)
   81fd4:	b805883a 	mov	r2,r23
   81fd8:	003b3506 	br	80cb0 <___vfprintf_internal_r+0x5e4>
   81fdc:	00ffffc4 	movi	r3,-1
   81fe0:	b82b883a 	mov	r21,r23
   81fe4:	003a1606 	br	80840 <___vfprintf_internal_r+0x174>
   81fe8:	008011c4 	movi	r2,71
   81fec:	1480b116 	blt	r2,r18,822b4 <___vfprintf_internal_r+0x1be8>
   81ff0:	04c00274 	movhi	r19,9
   81ff4:	9cf31204 	addi	r19,r19,-13240
   81ff8:	00c000c4 	movi	r3,3
   81ffc:	00bfdfc4 	movi	r2,-129
   82000:	80a0703a 	and	r16,r16,r2
   82004:	d8c12815 	stw	r3,1184(sp)
   82008:	d8812583 	ldbu	r2,1174(sp)
   8200c:	d8c12b15 	stw	r3,1196(sp)
   82010:	d8013115 	stw	zero,1220(sp)
   82014:	003b3a06 	br	80d00 <___vfprintf_internal_r+0x634>
   82018:	d9412917 	ldw	r5,1188(sp)
   8201c:	8809883a 	mov	r4,r17
   82020:	d9811b04 	addi	r6,sp,1132
   82024:	00806980 	call	80698 <__sprint_r>
   82028:	103aee1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   8202c:	dc812417 	ldw	r18,1168(sp)
   82030:	da011d17 	ldw	r8,1140(sp)
   82034:	da400404 	addi	r9,sp,16
   82038:	003f3c06 	br	81d2c <___vfprintf_internal_r+0x1660>
   8203c:	ad400044 	addi	r21,r21,1
   82040:	84000814 	ori	r16,r16,32
   82044:	14800047 	ldb	r18,1(r2)
   82048:	0039fc06 	br	8083c <___vfprintf_internal_r+0x170>
   8204c:	d9412917 	ldw	r5,1188(sp)
   82050:	8809883a 	mov	r4,r17
   82054:	d9811b04 	addi	r6,sp,1132
   82058:	00806980 	call	80698 <__sprint_r>
   8205c:	103ae11e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   82060:	da011d17 	ldw	r8,1140(sp)
   82064:	da400404 	addi	r9,sp,16
   82068:	003d2b06 	br	81518 <___vfprintf_internal_r+0xe4c>
   8206c:	4d000015 	stw	r20,0(r9)
   82070:	4c800115 	stw	r18,4(r9)
   82074:	4491883a 	add	r8,r8,r18
   82078:	18c00044 	addi	r3,r3,1
   8207c:	da011d15 	stw	r8,1140(sp)
   82080:	d8c11c15 	stw	r3,1136(sp)
   82084:	008001c4 	movi	r2,7
   82088:	10fcbd16 	blt	r2,r3,81380 <___vfprintf_internal_r+0xcb4>
   8208c:	4a400204 	addi	r9,r9,8
   82090:	003cc206 	br	8139c <___vfprintf_internal_r+0xcd0>
   82094:	da413c15 	stw	r9,1264(sp)
   82098:	008060c0 	call	8060c <strlen>
   8209c:	d8812b15 	stw	r2,1196(sp)
   820a0:	d8812815 	stw	r2,1184(sp)
   820a4:	da413c17 	ldw	r9,1264(sp)
   820a8:	103fa90e 	bge	r2,zero,81f50 <___vfprintf_internal_r+0x1884>
   820ac:	d8012815 	stw	zero,1184(sp)
   820b0:	003fa706 	br	81f50 <___vfprintf_internal_r+0x1884>
   820b4:	d9412917 	ldw	r5,1188(sp)
   820b8:	8809883a 	mov	r4,r17
   820bc:	d9811b04 	addi	r6,sp,1132
   820c0:	00806980 	call	80698 <__sprint_r>
   820c4:	103ac71e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   820c8:	da011d17 	ldw	r8,1140(sp)
   820cc:	d8c11c17 	ldw	r3,1136(sp)
   820d0:	da400404 	addi	r9,sp,16
   820d4:	d8813217 	ldw	r2,1224(sp)
   820d8:	4cc00015 	stw	r19,0(r9)
   820dc:	48800115 	stw	r2,4(r9)
   820e0:	4091883a 	add	r8,r8,r2
   820e4:	003c6206 	br	81270 <___vfprintf_internal_r+0xba4>
   820e8:	00800b44 	movi	r2,45
   820ec:	d8812585 	stb	r2,1174(sp)
   820f0:	003b2406 	br	80d84 <___vfprintf_internal_r+0x6b8>
   820f4:	4d000015 	stw	r20,0(r9)
   820f8:	4c800115 	stw	r18,4(r9)
   820fc:	4491883a 	add	r8,r8,r18
   82100:	18c00044 	addi	r3,r3,1
   82104:	da011d15 	stw	r8,1140(sp)
   82108:	d8c11c15 	stw	r3,1136(sp)
   8210c:	008001c4 	movi	r2,7
   82110:	10ffe816 	blt	r2,r3,820b4 <___vfprintf_internal_r+0x19e8>
   82114:	4a400204 	addi	r9,r9,8
   82118:	003fee06 	br	820d4 <___vfprintf_internal_r+0x1a08>
   8211c:	d8c12b15 	stw	r3,1196(sp)
   82120:	00800184 	movi	r2,6
   82124:	10c0062e 	bgeu	r2,r3,82140 <___vfprintf_internal_r+0x1a74>
   82128:	d8812b15 	stw	r2,1196(sp)
   8212c:	d8812815 	stw	r2,1184(sp)
   82130:	ddc12d15 	stw	r23,1204(sp)
   82134:	04c00274 	movhi	r19,9
   82138:	9cf31e04 	addi	r19,r19,-13192
   8213c:	0039ca06 	br	80868 <___vfprintf_internal_r+0x19c>
   82140:	d8812b17 	ldw	r2,1196(sp)
   82144:	d8812815 	stw	r2,1184(sp)
   82148:	103ff90e 	bge	r2,zero,82130 <___vfprintf_internal_r+0x1a64>
   8214c:	d8012815 	stw	zero,1184(sp)
   82150:	003ff706 	br	82130 <___vfprintf_internal_r+0x1a64>
   82154:	00800244 	movi	r2,9
   82158:	15fdaa36 	bltu	r2,r23,81804 <___vfprintf_internal_r+0x1138>
   8215c:	dd010e04 	addi	r20,sp,1080
   82160:	003dc606 	br	8187c <___vfprintf_internal_r+0x11b0>
   82164:	d9412917 	ldw	r5,1188(sp)
   82168:	8809883a 	mov	r4,r17
   8216c:	d9811b04 	addi	r6,sp,1132
   82170:	00806980 	call	80698 <__sprint_r>
   82174:	103a9b1e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   82178:	dc812417 	ldw	r18,1168(sp)
   8217c:	da400404 	addi	r9,sp,16
   82180:	003ecd06 	br	81cb8 <___vfprintf_internal_r+0x15ec>
   82184:	d9412917 	ldw	r5,1188(sp)
   82188:	8809883a 	mov	r4,r17
   8218c:	d9811b04 	addi	r6,sp,1132
   82190:	00806980 	call	80698 <__sprint_r>
   82194:	103a931e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   82198:	dc812417 	ldw	r18,1168(sp)
   8219c:	da011d17 	ldw	r8,1140(sp)
   821a0:	d8c11c17 	ldw	r3,1136(sp)
   821a4:	da400404 	addi	r9,sp,16
   821a8:	003eb706 	br	81c88 <___vfprintf_internal_r+0x15bc>
   821ac:	d9412917 	ldw	r5,1188(sp)
   821b0:	8809883a 	mov	r4,r17
   821b4:	d9811b04 	addi	r6,sp,1132
   821b8:	00806980 	call	80698 <__sprint_r>
   821bc:	103a891e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   821c0:	dc812417 	ldw	r18,1168(sp)
   821c4:	da011d17 	ldw	r8,1140(sp)
   821c8:	da400404 	addi	r9,sp,16
   821cc:	003dc206 	br	818d8 <___vfprintf_internal_r+0x120c>
   821d0:	df012815 	stw	fp,1184(sp)
   821d4:	d8812583 	ldbu	r2,1174(sp)
   821d8:	df012b15 	stw	fp,1196(sp)
   821dc:	ddc12d15 	stw	r23,1204(sp)
   821e0:	d8013115 	stw	zero,1220(sp)
   821e4:	003ac606 	br	80d00 <___vfprintf_internal_r+0x634>
   821e8:	d8812404 	addi	r2,sp,1168
   821ec:	d8800115 	stw	r2,4(sp)
   821f0:	d8812304 	addi	r2,sp,1164
   821f4:	d8800215 	stw	r2,8(sp)
   821f8:	d8812204 	addi	r2,sp,1160
   821fc:	df000015 	stw	fp,0(sp)
   82200:	d8800315 	stw	r2,12(sp)
   82204:	8809883a 	mov	r4,r17
   82208:	b00b883a 	mov	r5,r22
   8220c:	a00d883a 	mov	r6,r20
   82210:	01c000c4 	movi	r7,3
   82214:	da413c15 	stw	r9,1264(sp)
   82218:	008291c0 	call	8291c <_dtoa_r>
   8221c:	da413c17 	ldw	r9,1264(sp)
   82220:	1027883a 	mov	r19,r2
   82224:	1707883a 	add	r3,r2,fp
   82228:	e02f883a 	mov	r23,fp
   8222c:	99000007 	ldb	r4,0(r19)
   82230:	00800c04 	movi	r2,48
   82234:	20800326 	beq	r4,r2,82244 <___vfprintf_internal_r+0x1b78>
   82238:	da812417 	ldw	r10,1168(sp)
   8223c:	1a87883a 	add	r3,r3,r10
   82240:	003f1406 	br	81e94 <___vfprintf_internal_r+0x17c8>
   82244:	b009883a 	mov	r4,r22
   82248:	a00b883a 	mov	r5,r20
   8224c:	000d883a 	mov	r6,zero
   82250:	000f883a 	mov	r7,zero
   82254:	d8c13b15 	stw	r3,1260(sp)
   82258:	da413c15 	stw	r9,1264(sp)
   8225c:	00890300 	call	89030 <__nedf2>
   82260:	d8c13b17 	ldw	r3,1260(sp)
   82264:	da413c17 	ldw	r9,1264(sp)
   82268:	103ff326 	beq	r2,zero,82238 <___vfprintf_internal_r+0x1b6c>
   8226c:	00800044 	movi	r2,1
   82270:	15d5c83a 	sub	r10,r2,r23
   82274:	da812415 	stw	r10,1168(sp)
   82278:	1a87883a 	add	r3,r3,r10
   8227c:	003f0506 	br	81e94 <___vfprintf_internal_r+0x17c8>
   82280:	d9412917 	ldw	r5,1188(sp)
   82284:	8809883a 	mov	r4,r17
   82288:	d9811b04 	addi	r6,sp,1132
   8228c:	00806980 	call	80698 <__sprint_r>
   82290:	103a541e 	bne	r2,zero,80be4 <___vfprintf_internal_r+0x518>
   82294:	dc812417 	ldw	r18,1168(sp)
   82298:	da011d17 	ldw	r8,1140(sp)
   8229c:	d8c11c17 	ldw	r3,1136(sp)
   822a0:	da400404 	addi	r9,sp,16
   822a4:	003eb206 	br	81d70 <___vfprintf_internal_r+0x16a4>
   822a8:	b82b883a 	mov	r21,r23
   822ac:	0007883a 	mov	r3,zero
   822b0:	00396306 	br	80840 <___vfprintf_internal_r+0x174>
   822b4:	04c00274 	movhi	r19,9
   822b8:	9cf31304 	addi	r19,r19,-13236
   822bc:	003f4e06 	br	81ff8 <___vfprintf_internal_r+0x192c>
   822c0:	d8812583 	ldbu	r2,1174(sp)
   822c4:	dc012a17 	ldw	r16,1192(sp)
   822c8:	d8013115 	stw	zero,1220(sp)
   822cc:	003a8c06 	br	80d00 <___vfprintf_internal_r+0x634>
   822d0:	d8812417 	ldw	r2,1168(sp)
   822d4:	d8812b15 	stw	r2,1196(sp)
   822d8:	1029883a 	mov	r20,r2
   822dc:	00bfff44 	movi	r2,-3
   822e0:	a0800116 	blt	r20,r2,822e8 <___vfprintf_internal_r+0x1c1c>
   822e4:	e5001d0e 	bge	fp,r20,8235c <___vfprintf_internal_r+0x1c90>
   822e8:	94bfff84 	addi	r18,r18,-2
   822ec:	a53fffc4 	addi	r20,r20,-1
   822f0:	dd012415 	stw	r20,1168(sp)
   822f4:	dc811fc5 	stb	r18,1151(sp)
   822f8:	a0007216 	blt	r20,zero,824c4 <___vfprintf_internal_r+0x1df8>
   822fc:	00800ac4 	movi	r2,43
   82300:	d8812005 	stb	r2,1152(sp)
   82304:	00800244 	movi	r2,9
   82308:	15003516 	blt	r2,r20,823e0 <___vfprintf_internal_r+0x1d14>
   8230c:	00800c04 	movi	r2,48
   82310:	a5000c04 	addi	r20,r20,48
   82314:	d8812045 	stb	r2,1153(sp)
   82318:	dd012085 	stb	r20,1154(sp)
   8231c:	d8c120c4 	addi	r3,sp,1155
   82320:	d8811fc4 	addi	r2,sp,1151
   82324:	1885c83a 	sub	r2,r3,r2
   82328:	d8c13217 	ldw	r3,1224(sp)
   8232c:	d8813515 	stw	r2,1236(sp)
   82330:	1885883a 	add	r2,r3,r2
   82334:	d8812b15 	stw	r2,1196(sp)
   82338:	00800044 	movi	r2,1
   8233c:	10c0580e 	bge	r2,r3,824a0 <___vfprintf_internal_r+0x1dd4>
   82340:	d8812b17 	ldw	r2,1196(sp)
   82344:	10800044 	addi	r2,r2,1
   82348:	d8812b15 	stw	r2,1196(sp)
   8234c:	d8812815 	stw	r2,1184(sp)
   82350:	103ef50e 	bge	r2,zero,81f28 <___vfprintf_internal_r+0x185c>
   82354:	d8012815 	stw	zero,1184(sp)
   82358:	003ef306 	br	81f28 <___vfprintf_internal_r+0x185c>
   8235c:	d8812b17 	ldw	r2,1196(sp)
   82360:	d8c13217 	ldw	r3,1224(sp)
   82364:	10c01416 	blt	r2,r3,823b8 <___vfprintf_internal_r+0x1cec>
   82368:	8400004c 	andi	r16,r16,1
   8236c:	80000326 	beq	r16,zero,8237c <___vfprintf_internal_r+0x1cb0>
   82370:	d8812b17 	ldw	r2,1196(sp)
   82374:	10800044 	addi	r2,r2,1
   82378:	d8812b15 	stw	r2,1196(sp)
   8237c:	d8812815 	stw	r2,1184(sp)
   82380:	10001416 	blt	r2,zero,823d4 <___vfprintf_internal_r+0x1d08>
   82384:	048019c4 	movi	r18,103
   82388:	003ee706 	br	81f28 <___vfprintf_internal_r+0x185c>
   8238c:	d8012815 	stw	zero,1184(sp)
   82390:	003b1a06 	br	80ffc <___vfprintf_internal_r+0x930>
   82394:	e03e9c1e 	bne	fp,zero,81e08 <___vfprintf_internal_r+0x173c>
   82398:	07000044 	movi	fp,1
   8239c:	003e9a06 	br	81e08 <___vfprintf_internal_r+0x173c>
   823a0:	07000184 	movi	fp,6
   823a4:	003e9806 	br	81e08 <___vfprintf_internal_r+0x173c>
   823a8:	00c00b44 	movi	r3,45
   823ac:	a520003c 	xorhi	r20,r20,32768
   823b0:	d8c12f05 	stb	r3,1212(sp)
   823b4:	003e9806 	br	81e18 <___vfprintf_internal_r+0x174c>
   823b8:	05003f0e 	bge	zero,r20,824b8 <___vfprintf_internal_r+0x1dec>
   823bc:	05000044 	movi	r20,1
   823c0:	d8c13217 	ldw	r3,1224(sp)
   823c4:	a0e9883a 	add	r20,r20,r3
   823c8:	dd012b15 	stw	r20,1196(sp)
   823cc:	dd012815 	stw	r20,1184(sp)
   823d0:	a03fec0e 	bge	r20,zero,82384 <___vfprintf_internal_r+0x1cb8>
   823d4:	d8012815 	stw	zero,1184(sp)
   823d8:	048019c4 	movi	r18,103
   823dc:	003ed206 	br	81f28 <___vfprintf_internal_r+0x185c>
   823e0:	d8c11f84 	addi	r3,sp,1150
   823e4:	102f883a 	mov	r23,r2
   823e8:	4839883a 	mov	fp,r9
   823ec:	a009883a 	mov	r4,r20
   823f0:	01400284 	movi	r5,10
   823f4:	182d883a 	mov	r22,r3
   823f8:	00803b80 	call	803b8 <__modsi3>
   823fc:	10800c04 	addi	r2,r2,48
   82400:	a009883a 	mov	r4,r20
   82404:	b0800005 	stb	r2,0(r22)
   82408:	01400284 	movi	r5,10
   8240c:	00803680 	call	80368 <__divsi3>
   82410:	1029883a 	mov	r20,r2
   82414:	b0ffffc4 	addi	r3,r22,-1
   82418:	b8bff416 	blt	r23,r2,823ec <___vfprintf_internal_r+0x1d20>
   8241c:	11400c04 	addi	r5,r2,48
   82420:	b17fffc5 	stb	r5,-1(r22)
   82424:	d8811fc4 	addi	r2,sp,1151
   82428:	e013883a 	mov	r9,fp
   8242c:	18803e2e 	bgeu	r3,r2,82528 <___vfprintf_internal_r+0x1e5c>
   82430:	b007883a 	mov	r3,r22
   82434:	d9012044 	addi	r4,sp,1153
   82438:	00000206 	br	82444 <___vfprintf_internal_r+0x1d78>
   8243c:	19400003 	ldbu	r5,0(r3)
   82440:	18c00044 	addi	r3,r3,1
   82444:	21400005 	stb	r5,0(r4)
   82448:	21000044 	addi	r4,r4,1
   8244c:	10fffb1e 	bne	r2,r3,8243c <___vfprintf_internal_r+0x1d70>
   82450:	d8c12004 	addi	r3,sp,1152
   82454:	1d87c83a 	sub	r3,r3,r22
   82458:	d9012044 	addi	r4,sp,1153
   8245c:	20c7883a 	add	r3,r4,r3
   82460:	003fb006 	br	82324 <___vfprintf_internal_r+0x1c58>
   82464:	e5c00044 	addi	r23,fp,1
   82468:	003e7406 	br	81e3c <___vfprintf_internal_r+0x1770>
   8246c:	d8c12217 	ldw	r3,1160(sp)
   82470:	003e9906 	br	81ed8 <___vfprintf_internal_r+0x180c>
   82474:	d9012d17 	ldw	r4,1204(sp)
   82478:	ac800043 	ldbu	r18,1(r21)
   8247c:	b82b883a 	mov	r21,r23
   82480:	20c00017 	ldw	r3,0(r4)
   82484:	20800104 	addi	r2,r4,4
   82488:	d8812d15 	stw	r2,1204(sp)
   8248c:	18002116 	blt	r3,zero,82514 <___vfprintf_internal_r+0x1e48>
   82490:	94803fcc 	andi	r18,r18,255
   82494:	9480201c 	xori	r18,r18,128
   82498:	94bfe004 	addi	r18,r18,-128
   8249c:	0038e706 	br	8083c <___vfprintf_internal_r+0x170>
   824a0:	80a0703a 	and	r16,r16,r2
   824a4:	803fa61e 	bne	r16,zero,82340 <___vfprintf_internal_r+0x1c74>
   824a8:	d8812b17 	ldw	r2,1196(sp)
   824ac:	d8812815 	stw	r2,1184(sp)
   824b0:	103e9d0e 	bge	r2,zero,81f28 <___vfprintf_internal_r+0x185c>
   824b4:	003fa706 	br	82354 <___vfprintf_internal_r+0x1c88>
   824b8:	00800084 	movi	r2,2
   824bc:	1529c83a 	sub	r20,r2,r20
   824c0:	003fbf06 	br	823c0 <___vfprintf_internal_r+0x1cf4>
   824c4:	00800b44 	movi	r2,45
   824c8:	0529c83a 	sub	r20,zero,r20
   824cc:	d8812005 	stb	r2,1152(sp)
   824d0:	003f8c06 	br	82304 <___vfprintf_internal_r+0x1c38>
   824d4:	008011c4 	movi	r2,71
   824d8:	90be6926 	beq	r18,r2,81e80 <___vfprintf_internal_r+0x17b4>
   824dc:	003e6a06 	br	81e88 <___vfprintf_internal_r+0x17bc>
   824e0:	00bfffc4 	movi	r2,-1
   824e4:	d8812c15 	stw	r2,1200(sp)
   824e8:	0039ad06 	br	80ba0 <___vfprintf_internal_r+0x4d4>
   824ec:	1007883a 	mov	r3,r2
   824f0:	003e7906 	br	81ed8 <___vfprintf_internal_r+0x180c>
   824f4:	e000021e 	bne	fp,zero,82500 <___vfprintf_internal_r+0x1e34>
   824f8:	8400004c 	andi	r16,r16,1
   824fc:	80000e26 	beq	r16,zero,82538 <___vfprintf_internal_r+0x1e6c>
   82500:	e7000084 	addi	fp,fp,2
   82504:	df012b15 	stw	fp,1196(sp)
   82508:	df012815 	stw	fp,1184(sp)
   8250c:	e03e860e 	bge	fp,zero,81f28 <___vfprintf_internal_r+0x185c>
   82510:	003f9006 	br	82354 <___vfprintf_internal_r+0x1c88>
   82514:	94803fcc 	andi	r18,r18,255
   82518:	9480201c 	xori	r18,r18,128
   8251c:	00ffffc4 	movi	r3,-1
   82520:	94bfe004 	addi	r18,r18,-128
   82524:	0038c506 	br	8083c <___vfprintf_internal_r+0x170>
   82528:	d8c12044 	addi	r3,sp,1153
   8252c:	003f7d06 	br	82324 <___vfprintf_internal_r+0x1c58>
   82530:	dd012417 	ldw	r20,1168(sp)
   82534:	003f6d06 	br	822ec <___vfprintf_internal_r+0x1c20>
   82538:	00c00044 	movi	r3,1
   8253c:	d8c12815 	stw	r3,1184(sp)
   82540:	d8c12b15 	stw	r3,1196(sp)
   82544:	003e7806 	br	81f28 <___vfprintf_internal_r+0x185c>

00082548 <__vfprintf_internal>:
   82548:	00800274 	movhi	r2,9
   8254c:	10ba9504 	addi	r2,r2,-5548
   82550:	2007883a 	mov	r3,r4
   82554:	11000017 	ldw	r4,0(r2)
   82558:	2805883a 	mov	r2,r5
   8255c:	300f883a 	mov	r7,r6
   82560:	180b883a 	mov	r5,r3
   82564:	100d883a 	mov	r6,r2
   82568:	00806cc1 	jmpi	806cc <___vfprintf_internal_r>

0008256c <__swsetup_r>:
   8256c:	00800274 	movhi	r2,9
   82570:	10ba9504 	addi	r2,r2,-5548
   82574:	10800017 	ldw	r2,0(r2)
   82578:	defffd04 	addi	sp,sp,-12
   8257c:	dc400115 	stw	r17,4(sp)
   82580:	dc000015 	stw	r16,0(sp)
   82584:	dfc00215 	stw	ra,8(sp)
   82588:	2023883a 	mov	r17,r4
   8258c:	2821883a 	mov	r16,r5
   82590:	10000226 	beq	r2,zero,8259c <__swsetup_r+0x30>
   82594:	10c00e17 	ldw	r3,56(r2)
   82598:	18003d26 	beq	r3,zero,82690 <__swsetup_r+0x124>
   8259c:	8080030b 	ldhu	r2,12(r16)
   825a0:	10c0020c 	andi	r3,r2,8
   825a4:	18ffffcc 	andi	r3,r3,65535
   825a8:	18e0001c 	xori	r3,r3,32768
   825ac:	18e00004 	addi	r3,r3,-32768
   825b0:	18001226 	beq	r3,zero,825fc <__swsetup_r+0x90>
   825b4:	80c00417 	ldw	r3,16(r16)
   825b8:	18001f26 	beq	r3,zero,82638 <__swsetup_r+0xcc>
   825bc:	1100004c 	andi	r4,r2,1
   825c0:	2000261e 	bne	r4,zero,8265c <__swsetup_r+0xf0>
   825c4:	1080008c 	andi	r2,r2,2
   825c8:	10bfffcc 	andi	r2,r2,65535
   825cc:	10a0001c 	xori	r2,r2,32768
   825d0:	10a00004 	addi	r2,r2,-32768
   825d4:	1000311e 	bne	r2,zero,8269c <__swsetup_r+0x130>
   825d8:	80800517 	ldw	r2,20(r16)
   825dc:	80800215 	stw	r2,8(r16)
   825e0:	18002326 	beq	r3,zero,82670 <__swsetup_r+0x104>
   825e4:	0005883a 	mov	r2,zero
   825e8:	dfc00217 	ldw	ra,8(sp)
   825ec:	dc400117 	ldw	r17,4(sp)
   825f0:	dc000017 	ldw	r16,0(sp)
   825f4:	dec00304 	addi	sp,sp,12
   825f8:	f800283a 	ret
   825fc:	10c0040c 	andi	r3,r2,16
   82600:	18ffffcc 	andi	r3,r3,65535
   82604:	18e0001c 	xori	r3,r3,32768
   82608:	18e00004 	addi	r3,r3,-32768
   8260c:	18001e26 	beq	r3,zero,82688 <__swsetup_r+0x11c>
   82610:	10c0010c 	andi	r3,r2,4
   82614:	18ffffcc 	andi	r3,r3,65535
   82618:	18e0001c 	xori	r3,r3,32768
   8261c:	18e00004 	addi	r3,r3,-32768
   82620:	1800211e 	bne	r3,zero,826a8 <__swsetup_r+0x13c>
   82624:	80c00417 	ldw	r3,16(r16)
   82628:	11400214 	ori	r5,r2,8
   8262c:	8140030d 	sth	r5,12(r16)
   82630:	2805883a 	mov	r2,r5
   82634:	183fe11e 	bne	r3,zero,825bc <__swsetup_r+0x50>
   82638:	1140a00c 	andi	r5,r2,640
   8263c:	01008004 	movi	r4,512
   82640:	293fde26 	beq	r5,r4,825bc <__swsetup_r+0x50>
   82644:	8809883a 	mov	r4,r17
   82648:	800b883a 	mov	r5,r16
   8264c:	0084f680 	call	84f68 <__smakebuf_r>
   82650:	8080030b 	ldhu	r2,12(r16)
   82654:	80c00417 	ldw	r3,16(r16)
   82658:	003fd806 	br	825bc <__swsetup_r+0x50>
   8265c:	80800517 	ldw	r2,20(r16)
   82660:	80000215 	stw	zero,8(r16)
   82664:	0085c83a 	sub	r2,zero,r2
   82668:	80800615 	stw	r2,24(r16)
   8266c:	183fdd1e 	bne	r3,zero,825e4 <__swsetup_r+0x78>
   82670:	8080030b 	ldhu	r2,12(r16)
   82674:	1080200c 	andi	r2,r2,128
   82678:	10bfffcc 	andi	r2,r2,65535
   8267c:	10a0001c 	xori	r2,r2,32768
   82680:	10a00004 	addi	r2,r2,-32768
   82684:	103fd826 	beq	r2,zero,825e8 <__swsetup_r+0x7c>
   82688:	00bfffc4 	movi	r2,-1
   8268c:	003fd606 	br	825e8 <__swsetup_r+0x7c>
   82690:	1009883a 	mov	r4,r2
   82694:	00841f40 	call	841f4 <__sinit>
   82698:	003fc006 	br	8259c <__swsetup_r+0x30>
   8269c:	0005883a 	mov	r2,zero
   826a0:	80800215 	stw	r2,8(r16)
   826a4:	003fce06 	br	825e0 <__swsetup_r+0x74>
   826a8:	81400c17 	ldw	r5,48(r16)
   826ac:	28000626 	beq	r5,zero,826c8 <__swsetup_r+0x15c>
   826b0:	80c01004 	addi	r3,r16,64
   826b4:	28c00326 	beq	r5,r3,826c4 <__swsetup_r+0x158>
   826b8:	8809883a 	mov	r4,r17
   826bc:	00845780 	call	84578 <_free_r>
   826c0:	8080030b 	ldhu	r2,12(r16)
   826c4:	80000c15 	stw	zero,48(r16)
   826c8:	80c00417 	ldw	r3,16(r16)
   826cc:	013ff6c4 	movi	r4,-37
   826d0:	2084703a 	and	r2,r4,r2
   826d4:	80000115 	stw	zero,4(r16)
   826d8:	80c00015 	stw	r3,0(r16)
   826dc:	003fd206 	br	82628 <__swsetup_r+0xbc>

000826e0 <quorem>:
   826e0:	defff204 	addi	sp,sp,-56
   826e4:	dd000815 	stw	r20,32(sp)
   826e8:	20800417 	ldw	r2,16(r4)
   826ec:	2d000417 	ldw	r20,16(r5)
   826f0:	dcc00715 	stw	r19,28(sp)
   826f4:	dfc00d15 	stw	ra,52(sp)
   826f8:	df000c15 	stw	fp,48(sp)
   826fc:	ddc00b15 	stw	r23,44(sp)
   82700:	dd800a15 	stw	r22,40(sp)
   82704:	dd400915 	stw	r21,36(sp)
   82708:	dc800615 	stw	r18,24(sp)
   8270c:	dc400515 	stw	r17,20(sp)
   82710:	dc000415 	stw	r16,16(sp)
   82714:	d9400015 	stw	r5,0(sp)
   82718:	2027883a 	mov	r19,r4
   8271c:	15007d16 	blt	r2,r20,82914 <quorem+0x234>
   82720:	a0800104 	addi	r2,r20,4
   82724:	1085883a 	add	r2,r2,r2
   82728:	1085883a 	add	r2,r2,r2
   8272c:	28ad883a 	add	r22,r5,r2
   82730:	2085883a 	add	r2,r4,r2
   82734:	10800017 	ldw	r2,0(r2)
   82738:	b1400017 	ldw	r5,0(r22)
   8273c:	a53fffc4 	addi	r20,r20,-1
   82740:	1009883a 	mov	r4,r2
   82744:	29400044 	addi	r5,r5,1
   82748:	d8800115 	stw	r2,4(sp)
   8274c:	00804140 	call	80414 <__udivsi3>
   82750:	1025883a 	mov	r18,r2
   82754:	d8800017 	ldw	r2,0(sp)
   82758:	9f000504 	addi	fp,r19,20
   8275c:	14000504 	addi	r16,r2,20
   82760:	90003626 	beq	r18,zero,8283c <quorem+0x15c>
   82764:	802b883a 	mov	r21,r16
   82768:	e023883a 	mov	r17,fp
   8276c:	0007883a 	mov	r3,zero
   82770:	002f883a 	mov	r23,zero
   82774:	a9800017 	ldw	r6,0(r21)
   82778:	900b883a 	mov	r5,r18
   8277c:	d8c00315 	stw	r3,12(sp)
   82780:	313fffcc 	andi	r4,r6,65535
   82784:	d9800215 	stw	r6,8(sp)
   82788:	00894740 	call	89474 <__mulsi3>
   8278c:	d9800217 	ldw	r6,8(sp)
   82790:	d8c00317 	ldw	r3,12(sp)
   82794:	900b883a 	mov	r5,r18
   82798:	3008d43a 	srli	r4,r6,16
   8279c:	1887883a 	add	r3,r3,r2
   827a0:	d8c00315 	stw	r3,12(sp)
   827a4:	00894740 	call	89474 <__mulsi3>
   827a8:	89400017 	ldw	r5,0(r17)
   827ac:	d8c00317 	ldw	r3,12(sp)
   827b0:	ad400104 	addi	r21,r21,4
   827b4:	293fffcc 	andi	r4,r5,65535
   827b8:	1810d43a 	srli	r8,r3,16
   827bc:	25c9883a 	add	r4,r4,r23
   827c0:	18ffffcc 	andi	r3,r3,65535
   827c4:	20c9c83a 	sub	r4,r4,r3
   827c8:	280cd43a 	srli	r6,r5,16
   827cc:	4085883a 	add	r2,r8,r2
   827d0:	2007d43a 	srai	r3,r4,16
   827d4:	117fffcc 	andi	r5,r2,65535
   827d8:	314bc83a 	sub	r5,r6,r5
   827dc:	28cb883a 	add	r5,r5,r3
   827e0:	8940008d 	sth	r5,2(r17)
   827e4:	8900000d 	sth	r4,0(r17)
   827e8:	1006d43a 	srli	r3,r2,16
   827ec:	282fd43a 	srai	r23,r5,16
   827f0:	8c400104 	addi	r17,r17,4
   827f4:	b57fdf2e 	bgeu	r22,r21,82774 <quorem+0x94>
   827f8:	d8c00117 	ldw	r3,4(sp)
   827fc:	18000f1e 	bne	r3,zero,8283c <quorem+0x15c>
   82800:	a0800144 	addi	r2,r20,5
   82804:	1085883a 	add	r2,r2,r2
   82808:	1085883a 	add	r2,r2,r2
   8280c:	9887883a 	add	r3,r19,r2
   82810:	18bfff04 	addi	r2,r3,-4
   82814:	e080082e 	bgeu	fp,r2,82838 <quorem+0x158>
   82818:	18ffff17 	ldw	r3,-4(r3)
   8281c:	18000326 	beq	r3,zero,8282c <quorem+0x14c>
   82820:	00000506 	br	82838 <quorem+0x158>
   82824:	10c00017 	ldw	r3,0(r2)
   82828:	1800031e 	bne	r3,zero,82838 <quorem+0x158>
   8282c:	10bfff04 	addi	r2,r2,-4
   82830:	a53fffc4 	addi	r20,r20,-1
   82834:	e0bffb36 	bltu	fp,r2,82824 <quorem+0x144>
   82838:	9d000415 	stw	r20,16(r19)
   8283c:	d9400017 	ldw	r5,0(sp)
   82840:	9809883a 	mov	r4,r19
   82844:	00866800 	call	86680 <__mcmp>
   82848:	10002516 	blt	r2,zero,828e0 <quorem+0x200>
   8284c:	94800044 	addi	r18,r18,1
   82850:	e007883a 	mov	r3,fp
   82854:	000d883a 	mov	r6,zero
   82858:	18800017 	ldw	r2,0(r3)
   8285c:	82000017 	ldw	r8,0(r16)
   82860:	84000104 	addi	r16,r16,4
   82864:	11ffffcc 	andi	r7,r2,65535
   82868:	413fffcc 	andi	r4,r8,65535
   8286c:	398d883a 	add	r6,r7,r6
   82870:	310fc83a 	sub	r7,r6,r4
   82874:	4010d43a 	srli	r8,r8,16
   82878:	100cd43a 	srli	r6,r2,16
   8287c:	3809d43a 	srai	r4,r7,16
   82880:	19c0000d 	sth	r7,0(r3)
   82884:	320dc83a 	sub	r6,r6,r8
   82888:	310d883a 	add	r6,r6,r4
   8288c:	1980008d 	sth	r6,2(r3)
   82890:	300dd43a 	srai	r6,r6,16
   82894:	18c00104 	addi	r3,r3,4
   82898:	b43fef2e 	bgeu	r22,r16,82858 <quorem+0x178>
   8289c:	a0800144 	addi	r2,r20,5
   828a0:	1085883a 	add	r2,r2,r2
   828a4:	1085883a 	add	r2,r2,r2
   828a8:	9885883a 	add	r2,r19,r2
   828ac:	10c00017 	ldw	r3,0(r2)
   828b0:	18000b1e 	bne	r3,zero,828e0 <quorem+0x200>
   828b4:	10ffff04 	addi	r3,r2,-4
   828b8:	e0c0082e 	bgeu	fp,r3,828dc <quorem+0x1fc>
   828bc:	10bfff17 	ldw	r2,-4(r2)
   828c0:	10000326 	beq	r2,zero,828d0 <quorem+0x1f0>
   828c4:	00000506 	br	828dc <quorem+0x1fc>
   828c8:	18800017 	ldw	r2,0(r3)
   828cc:	1000031e 	bne	r2,zero,828dc <quorem+0x1fc>
   828d0:	18ffff04 	addi	r3,r3,-4
   828d4:	a53fffc4 	addi	r20,r20,-1
   828d8:	e0fffb36 	bltu	fp,r3,828c8 <quorem+0x1e8>
   828dc:	9d000415 	stw	r20,16(r19)
   828e0:	9005883a 	mov	r2,r18
   828e4:	dfc00d17 	ldw	ra,52(sp)
   828e8:	df000c17 	ldw	fp,48(sp)
   828ec:	ddc00b17 	ldw	r23,44(sp)
   828f0:	dd800a17 	ldw	r22,40(sp)
   828f4:	dd400917 	ldw	r21,36(sp)
   828f8:	dd000817 	ldw	r20,32(sp)
   828fc:	dcc00717 	ldw	r19,28(sp)
   82900:	dc800617 	ldw	r18,24(sp)
   82904:	dc400517 	ldw	r17,20(sp)
   82908:	dc000417 	ldw	r16,16(sp)
   8290c:	dec00e04 	addi	sp,sp,56
   82910:	f800283a 	ret
   82914:	0005883a 	mov	r2,zero
   82918:	003ff206 	br	828e4 <quorem+0x204>

0008291c <_dtoa_r>:
   8291c:	20801017 	ldw	r2,64(r4)
   82920:	deffdf04 	addi	sp,sp,-132
   82924:	dcc01a15 	stw	r19,104(sp)
   82928:	dc801915 	stw	r18,100(sp)
   8292c:	dc401815 	stw	r17,96(sp)
   82930:	dc001715 	stw	r16,92(sp)
   82934:	dfc02015 	stw	ra,128(sp)
   82938:	df001f15 	stw	fp,124(sp)
   8293c:	ddc01e15 	stw	r23,120(sp)
   82940:	dd801d15 	stw	r22,116(sp)
   82944:	dd401c15 	stw	r21,112(sp)
   82948:	dd001b15 	stw	r20,108(sp)
   8294c:	d9400315 	stw	r5,12(sp)
   82950:	d9c00415 	stw	r7,16(sp)
   82954:	2021883a 	mov	r16,r4
   82958:	3025883a 	mov	r18,r6
   8295c:	dcc02317 	ldw	r19,140(sp)
   82960:	3023883a 	mov	r17,r6
   82964:	10000826 	beq	r2,zero,82988 <_dtoa_r+0x6c>
   82968:	20c01117 	ldw	r3,68(r4)
   8296c:	01800044 	movi	r6,1
   82970:	100b883a 	mov	r5,r2
   82974:	30cc983a 	sll	r6,r6,r3
   82978:	10c00115 	stw	r3,4(r2)
   8297c:	11800215 	stw	r6,8(r2)
   82980:	0085ddc0 	call	85ddc <_Bfree>
   82984:	80001015 	stw	zero,64(r16)
   82988:	90002f16 	blt	r18,zero,82a48 <_dtoa_r+0x12c>
   8298c:	98000015 	stw	zero,0(r19)
   82990:	90dffc2c 	andhi	r3,r18,32752
   82994:	009ffc34 	movhi	r2,32752
   82998:	18801c26 	beq	r3,r2,82a0c <_dtoa_r+0xf0>
   8299c:	d9000317 	ldw	r4,12(sp)
   829a0:	880b883a 	mov	r5,r17
   829a4:	000d883a 	mov	r6,zero
   829a8:	000f883a 	mov	r7,zero
   829ac:	0088fd40 	call	88fd4 <__eqdf2>
   829b0:	10002c1e 	bne	r2,zero,82a64 <_dtoa_r+0x148>
   829b4:	d9002217 	ldw	r4,136(sp)
   829b8:	d9c02417 	ldw	r7,144(sp)
   829bc:	00800044 	movi	r2,1
   829c0:	20800015 	stw	r2,0(r4)
   829c4:	38019426 	beq	r7,zero,83018 <_dtoa_r+0x6fc>
   829c8:	00800274 	movhi	r2,9
   829cc:	10b32044 	addi	r2,r2,-13183
   829d0:	38800015 	stw	r2,0(r7)
   829d4:	15ffffc4 	addi	r23,r2,-1
   829d8:	b805883a 	mov	r2,r23
   829dc:	dfc02017 	ldw	ra,128(sp)
   829e0:	df001f17 	ldw	fp,124(sp)
   829e4:	ddc01e17 	ldw	r23,120(sp)
   829e8:	dd801d17 	ldw	r22,116(sp)
   829ec:	dd401c17 	ldw	r21,112(sp)
   829f0:	dd001b17 	ldw	r20,108(sp)
   829f4:	dcc01a17 	ldw	r19,104(sp)
   829f8:	dc801917 	ldw	r18,100(sp)
   829fc:	dc401817 	ldw	r17,96(sp)
   82a00:	dc001717 	ldw	r16,92(sp)
   82a04:	dec02104 	addi	sp,sp,132
   82a08:	f800283a 	ret
   82a0c:	d8c02217 	ldw	r3,136(sp)
   82a10:	d9000317 	ldw	r4,12(sp)
   82a14:	0089c3c4 	movi	r2,9999
   82a18:	18800015 	stw	r2,0(r3)
   82a1c:	20016c26 	beq	r4,zero,82fd0 <_dtoa_r+0x6b4>
   82a20:	05c00274 	movhi	r23,9
   82a24:	bdf32c04 	addi	r23,r23,-13136
   82a28:	d9c02417 	ldw	r7,144(sp)
   82a2c:	383fea26 	beq	r7,zero,829d8 <_dtoa_r+0xbc>
   82a30:	b88000c7 	ldb	r2,3(r23)
   82a34:	10016d1e 	bne	r2,zero,82fec <_dtoa_r+0x6d0>
   82a38:	b88000c4 	addi	r2,r23,3
   82a3c:	d8c02417 	ldw	r3,144(sp)
   82a40:	18800015 	stw	r2,0(r3)
   82a44:	003fe406 	br	829d8 <_dtoa_r+0xbc>
   82a48:	04600034 	movhi	r17,32768
   82a4c:	8c7fffc4 	addi	r17,r17,-1
   82a50:	9462703a 	and	r17,r18,r17
   82a54:	00800044 	movi	r2,1
   82a58:	98800015 	stw	r2,0(r19)
   82a5c:	8825883a 	mov	r18,r17
   82a60:	003fcb06 	br	82990 <_dtoa_r+0x74>
   82a64:	d9400317 	ldw	r5,12(sp)
   82a68:	9028d53a 	srli	r20,r18,20
   82a6c:	d8800204 	addi	r2,sp,8
   82a70:	d8800015 	stw	r2,0(sp)
   82a74:	8009883a 	mov	r4,r16
   82a78:	880d883a 	mov	r6,r17
   82a7c:	d9c00104 	addi	r7,sp,4
   82a80:	0086a280 	call	86a28 <__d2b>
   82a84:	a501ffcc 	andi	r20,r20,2047
   82a88:	1039883a 	mov	fp,r2
   82a8c:	a001591e 	bne	r20,zero,82ff4 <_dtoa_r+0x6d8>
   82a90:	dd400217 	ldw	r21,8(sp)
   82a94:	dd000117 	ldw	r20,4(sp)
   82a98:	00befbc4 	movi	r2,-1041
   82a9c:	ad29883a 	add	r20,r21,r20
   82aa0:	a082d216 	blt	r20,r2,835ec <_dtoa_r+0xcd0>
   82aa4:	d8c00317 	ldw	r3,12(sp)
   82aa8:	013f0384 	movi	r4,-1010
   82aac:	2509c83a 	sub	r4,r4,r20
   82ab0:	a0810484 	addi	r2,r20,1042
   82ab4:	9124983a 	sll	r18,r18,r4
   82ab8:	1884d83a 	srl	r2,r3,r2
   82abc:	9088b03a 	or	r4,r18,r2
   82ac0:	00893580 	call	89358 <__floatunsidf>
   82ac4:	1009883a 	mov	r4,r2
   82ac8:	017f8434 	movhi	r5,65040
   82acc:	00800044 	movi	r2,1
   82ad0:	194b883a 	add	r5,r3,r5
   82ad4:	a53fffc4 	addi	r20,r20,-1
   82ad8:	d8800f15 	stw	r2,60(sp)
   82adc:	000d883a 	mov	r6,zero
   82ae0:	01cffe34 	movhi	r7,16376
   82ae4:	0088adc0 	call	88adc <__subdf3>
   82ae8:	1009883a 	mov	r4,r2
   82aec:	180b883a 	mov	r5,r3
   82af0:	0198dbf4 	movhi	r6,25455
   82af4:	3190d844 	addi	r6,r6,17249
   82af8:	01cff4f4 	movhi	r7,16339
   82afc:	39e1e9c4 	addi	r7,r7,-30809
   82b00:	0088b3c0 	call	88b3c <__muldf3>
   82b04:	180b883a 	mov	r5,r3
   82b08:	01a2d874 	movhi	r6,35681
   82b0c:	31b22cc4 	addi	r6,r6,-14157
   82b10:	01cff1f4 	movhi	r7,16327
   82b14:	39e28a04 	addi	r7,r7,-30168
   82b18:	1009883a 	mov	r4,r2
   82b1c:	0088a880 	call	88a88 <__adddf3>
   82b20:	a009883a 	mov	r4,r20
   82b24:	1027883a 	mov	r19,r2
   82b28:	1825883a 	mov	r18,r3
   82b2c:	00891b00 	call	891b0 <__floatsidf>
   82b30:	1009883a 	mov	r4,r2
   82b34:	180b883a 	mov	r5,r3
   82b38:	019427f4 	movhi	r6,20639
   82b3c:	319e7ec4 	addi	r6,r6,31227
   82b40:	01cff4f4 	movhi	r7,16339
   82b44:	39d104c4 	addi	r7,r7,17427
   82b48:	0088b3c0 	call	88b3c <__muldf3>
   82b4c:	9809883a 	mov	r4,r19
   82b50:	900b883a 	mov	r5,r18
   82b54:	100d883a 	mov	r6,r2
   82b58:	180f883a 	mov	r7,r3
   82b5c:	0088a880 	call	88a88 <__adddf3>
   82b60:	1009883a 	mov	r4,r2
   82b64:	180b883a 	mov	r5,r3
   82b68:	1027883a 	mov	r19,r2
   82b6c:	1825883a 	mov	r18,r3
   82b70:	00892840 	call	89284 <__fixdfsi>
   82b74:	9809883a 	mov	r4,r19
   82b78:	900b883a 	mov	r5,r18
   82b7c:	000d883a 	mov	r6,zero
   82b80:	000f883a 	mov	r7,zero
   82b84:	d8800615 	stw	r2,24(sp)
   82b88:	00891540 	call	89154 <__ltdf2>
   82b8c:	10027e16 	blt	r2,zero,83588 <_dtoa_r+0xc6c>
   82b90:	d8c00617 	ldw	r3,24(sp)
   82b94:	00800584 	movi	r2,22
   82b98:	10c26c36 	bltu	r2,r3,8354c <_dtoa_r+0xc30>
   82b9c:	180490fa 	slli	r2,r3,3
   82ba0:	00c00274 	movhi	r3,9
   82ba4:	18f35204 	addi	r3,r3,-12984
   82ba8:	d9800317 	ldw	r6,12(sp)
   82bac:	1885883a 	add	r2,r3,r2
   82bb0:	11000017 	ldw	r4,0(r2)
   82bb4:	11400117 	ldw	r5,4(r2)
   82bb8:	880f883a 	mov	r7,r17
   82bbc:	008908c0 	call	8908c <__gtdf2>
   82bc0:	00828f0e 	bge	zero,r2,83600 <_dtoa_r+0xce4>
   82bc4:	d8800617 	ldw	r2,24(sp)
   82bc8:	d8000d15 	stw	zero,52(sp)
   82bcc:	10bfffc4 	addi	r2,r2,-1
   82bd0:	d8800615 	stw	r2,24(sp)
   82bd4:	ad29c83a 	sub	r20,r21,r20
   82bd8:	a53fffc4 	addi	r20,r20,-1
   82bdc:	a0026616 	blt	r20,zero,83578 <_dtoa_r+0xc5c>
   82be0:	dd000715 	stw	r20,28(sp)
   82be4:	d8000815 	stw	zero,32(sp)
   82be8:	d8800617 	ldw	r2,24(sp)
   82bec:	10025a16 	blt	r2,zero,83558 <_dtoa_r+0xc3c>
   82bf0:	d8c00717 	ldw	r3,28(sp)
   82bf4:	d8800b15 	stw	r2,44(sp)
   82bf8:	d8000a15 	stw	zero,40(sp)
   82bfc:	1887883a 	add	r3,r3,r2
   82c00:	d8c00715 	stw	r3,28(sp)
   82c04:	d9c00417 	ldw	r7,16(sp)
   82c08:	00800244 	movi	r2,9
   82c0c:	11c10536 	bltu	r2,r7,83024 <_dtoa_r+0x708>
   82c10:	00800144 	movi	r2,5
   82c14:	11c4c60e 	bge	r2,r7,83f30 <_dtoa_r+0x1614>
   82c18:	39ffff04 	addi	r7,r7,-4
   82c1c:	d9c00415 	stw	r7,16(sp)
   82c20:	0027883a 	mov	r19,zero
   82c24:	d9c00417 	ldw	r7,16(sp)
   82c28:	008000c4 	movi	r2,3
   82c2c:	3883a226 	beq	r7,r2,83ab8 <_dtoa_r+0x119c>
   82c30:	11c2bc16 	blt	r2,r7,83724 <_dtoa_r+0xe08>
   82c34:	00800084 	movi	r2,2
   82c38:	3880fb1e 	bne	r7,r2,83028 <_dtoa_r+0x70c>
   82c3c:	d8000c15 	stw	zero,48(sp)
   82c40:	d9002117 	ldw	r4,132(sp)
   82c44:	0103ae0e 	bge	zero,r4,83b00 <_dtoa_r+0x11e4>
   82c48:	2025883a 	mov	r18,r4
   82c4c:	d9000e15 	stw	r4,56(sp)
   82c50:	d9000915 	stw	r4,36(sp)
   82c54:	80001115 	stw	zero,68(r16)
   82c58:	008005c4 	movi	r2,23
   82c5c:	1484b22e 	bgeu	r2,r18,83f28 <_dtoa_r+0x160c>
   82c60:	00c00044 	movi	r3,1
   82c64:	00800104 	movi	r2,4
   82c68:	1085883a 	add	r2,r2,r2
   82c6c:	11000504 	addi	r4,r2,20
   82c70:	180b883a 	mov	r5,r3
   82c74:	18c00044 	addi	r3,r3,1
   82c78:	913ffb2e 	bgeu	r18,r4,82c68 <_dtoa_r+0x34c>
   82c7c:	81401115 	stw	r5,68(r16)
   82c80:	8009883a 	mov	r4,r16
   82c84:	0085d340 	call	85d34 <_Balloc>
   82c88:	102f883a 	mov	r23,r2
   82c8c:	80801015 	stw	r2,64(r16)
   82c90:	00800384 	movi	r2,14
   82c94:	1480f036 	bltu	r2,r18,83058 <_dtoa_r+0x73c>
   82c98:	9800ef26 	beq	r19,zero,83058 <_dtoa_r+0x73c>
   82c9c:	d8800617 	ldw	r2,24(sp)
   82ca0:	00839c0e 	bge	zero,r2,83b14 <_dtoa_r+0x11f8>
   82ca4:	d8c00617 	ldw	r3,24(sp)
   82ca8:	108003cc 	andi	r2,r2,15
   82cac:	100490fa 	slli	r2,r2,3
   82cb0:	182bd13a 	srai	r21,r3,4
   82cb4:	00c00274 	movhi	r3,9
   82cb8:	18f35204 	addi	r3,r3,-12984
   82cbc:	1885883a 	add	r2,r3,r2
   82cc0:	a8c0040c 	andi	r3,r21,16
   82cc4:	12800017 	ldw	r10,0(r2)
   82cc8:	15800117 	ldw	r22,4(r2)
   82ccc:	18038726 	beq	r3,zero,83aec <_dtoa_r+0x11d0>
   82cd0:	00800274 	movhi	r2,9
   82cd4:	10b34804 	addi	r2,r2,-13024
   82cd8:	11800817 	ldw	r6,32(r2)
   82cdc:	11c00917 	ldw	r7,36(r2)
   82ce0:	d9000317 	ldw	r4,12(sp)
   82ce4:	880b883a 	mov	r5,r17
   82ce8:	da801515 	stw	r10,84(sp)
   82cec:	0088e200 	call	88e20 <__divdf3>
   82cf0:	da801517 	ldw	r10,84(sp)
   82cf4:	d8801015 	stw	r2,64(sp)
   82cf8:	1829883a 	mov	r20,r3
   82cfc:	ad4003cc 	andi	r21,r21,15
   82d00:	048000c4 	movi	r18,3
   82d04:	a8001126 	beq	r21,zero,82d4c <_dtoa_r+0x430>
   82d08:	04c00274 	movhi	r19,9
   82d0c:	9cf34804 	addi	r19,r19,-13024
   82d10:	5005883a 	mov	r2,r10
   82d14:	b007883a 	mov	r3,r22
   82d18:	a980004c 	andi	r6,r21,1
   82d1c:	1009883a 	mov	r4,r2
   82d20:	a82bd07a 	srai	r21,r21,1
   82d24:	180b883a 	mov	r5,r3
   82d28:	30000426 	beq	r6,zero,82d3c <_dtoa_r+0x420>
   82d2c:	99800017 	ldw	r6,0(r19)
   82d30:	99c00117 	ldw	r7,4(r19)
   82d34:	94800044 	addi	r18,r18,1
   82d38:	0088b3c0 	call	88b3c <__muldf3>
   82d3c:	9cc00204 	addi	r19,r19,8
   82d40:	a83ff51e 	bne	r21,zero,82d18 <_dtoa_r+0x3fc>
   82d44:	1015883a 	mov	r10,r2
   82d48:	182d883a 	mov	r22,r3
   82d4c:	d9001017 	ldw	r4,64(sp)
   82d50:	a00b883a 	mov	r5,r20
   82d54:	500d883a 	mov	r6,r10
   82d58:	b00f883a 	mov	r7,r22
   82d5c:	0088e200 	call	88e20 <__divdf3>
   82d60:	1027883a 	mov	r19,r2
   82d64:	1829883a 	mov	r20,r3
   82d68:	d8c00d17 	ldw	r3,52(sp)
   82d6c:	18000626 	beq	r3,zero,82d88 <_dtoa_r+0x46c>
   82d70:	9809883a 	mov	r4,r19
   82d74:	a00b883a 	mov	r5,r20
   82d78:	000d883a 	mov	r6,zero
   82d7c:	01cffc34 	movhi	r7,16368
   82d80:	00891540 	call	89154 <__ltdf2>
   82d84:	10040e16 	blt	r2,zero,83dc0 <_dtoa_r+0x14a4>
   82d88:	9009883a 	mov	r4,r18
   82d8c:	00891b00 	call	891b0 <__floatsidf>
   82d90:	1009883a 	mov	r4,r2
   82d94:	180b883a 	mov	r5,r3
   82d98:	980d883a 	mov	r6,r19
   82d9c:	a00f883a 	mov	r7,r20
   82da0:	0088b3c0 	call	88b3c <__muldf3>
   82da4:	1009883a 	mov	r4,r2
   82da8:	180b883a 	mov	r5,r3
   82dac:	000d883a 	mov	r6,zero
   82db0:	01d00734 	movhi	r7,16412
   82db4:	0088a880 	call	88a88 <__adddf3>
   82db8:	057f3034 	movhi	r21,64704
   82dbc:	1d6b883a 	add	r21,r3,r21
   82dc0:	d8c00917 	ldw	r3,36(sp)
   82dc4:	1025883a 	mov	r18,r2
   82dc8:	18031f26 	beq	r3,zero,83a48 <_dtoa_r+0x112c>
   82dcc:	d8800617 	ldw	r2,24(sp)
   82dd0:	dac00917 	ldw	r11,36(sp)
   82dd4:	d8801315 	stw	r2,76(sp)
   82dd8:	d8c00c17 	ldw	r3,48(sp)
   82ddc:	18039026 	beq	r3,zero,83c20 <_dtoa_r+0x1304>
   82de0:	58bfffc4 	addi	r2,r11,-1
   82de4:	100490fa 	slli	r2,r2,3
   82de8:	00c00274 	movhi	r3,9
   82dec:	18f35204 	addi	r3,r3,-12984
   82df0:	0009883a 	mov	r4,zero
   82df4:	1885883a 	add	r2,r3,r2
   82df8:	11800017 	ldw	r6,0(r2)
   82dfc:	11c00117 	ldw	r7,4(r2)
   82e00:	014ff834 	movhi	r5,16352
   82e04:	dac01615 	stw	r11,88(sp)
   82e08:	0088e200 	call	88e20 <__divdf3>
   82e0c:	900d883a 	mov	r6,r18
   82e10:	a80f883a 	mov	r7,r21
   82e14:	1009883a 	mov	r4,r2
   82e18:	180b883a 	mov	r5,r3
   82e1c:	0088adc0 	call	88adc <__subdf3>
   82e20:	a00b883a 	mov	r5,r20
   82e24:	9809883a 	mov	r4,r19
   82e28:	182b883a 	mov	r21,r3
   82e2c:	d8801015 	stw	r2,64(sp)
   82e30:	00892840 	call	89284 <__fixdfsi>
   82e34:	1009883a 	mov	r4,r2
   82e38:	d8801515 	stw	r2,84(sp)
   82e3c:	00891b00 	call	891b0 <__floatsidf>
   82e40:	9809883a 	mov	r4,r19
   82e44:	a00b883a 	mov	r5,r20
   82e48:	100d883a 	mov	r6,r2
   82e4c:	180f883a 	mov	r7,r3
   82e50:	0088adc0 	call	88adc <__subdf3>
   82e54:	da401517 	ldw	r9,84(sp)
   82e58:	d9001017 	ldw	r4,64(sp)
   82e5c:	a80b883a 	mov	r5,r21
   82e60:	4d000c04 	addi	r20,r9,48
   82e64:	bd000005 	stb	r20,0(r23)
   82e68:	100d883a 	mov	r6,r2
   82e6c:	180f883a 	mov	r7,r3
   82e70:	bd800044 	addi	r22,r23,1
   82e74:	1025883a 	mov	r18,r2
   82e78:	1827883a 	mov	r19,r3
   82e7c:	008908c0 	call	8908c <__gtdf2>
   82e80:	00842216 	blt	zero,r2,83f0c <_dtoa_r+0x15f0>
   82e84:	0009883a 	mov	r4,zero
   82e88:	014ffc34 	movhi	r5,16368
   82e8c:	900d883a 	mov	r6,r18
   82e90:	980f883a 	mov	r7,r19
   82e94:	0088adc0 	call	88adc <__subdf3>
   82e98:	d9001017 	ldw	r4,64(sp)
   82e9c:	a80b883a 	mov	r5,r21
   82ea0:	100d883a 	mov	r6,r2
   82ea4:	180f883a 	mov	r7,r3
   82ea8:	008908c0 	call	8908c <__gtdf2>
   82eac:	dac01617 	ldw	r11,88(sp)
   82eb0:	00841316 	blt	zero,r2,83f00 <_dtoa_r+0x15e4>
   82eb4:	00800044 	movi	r2,1
   82eb8:	12c0670e 	bge	r2,r11,83058 <_dtoa_r+0x73c>
   82ebc:	bad7883a 	add	r11,r23,r11
   82ec0:	df001115 	stw	fp,68(sp)
   82ec4:	dc401215 	stw	r17,72(sp)
   82ec8:	5839883a 	mov	fp,r11
   82ecc:	dc401017 	ldw	r17,64(sp)
   82ed0:	00000806 	br	82ef4 <_dtoa_r+0x5d8>
   82ed4:	0088adc0 	call	88adc <__subdf3>
   82ed8:	1009883a 	mov	r4,r2
   82edc:	180b883a 	mov	r5,r3
   82ee0:	880d883a 	mov	r6,r17
   82ee4:	a80f883a 	mov	r7,r21
   82ee8:	00891540 	call	89154 <__ltdf2>
   82eec:	1003ee16 	blt	r2,zero,83ea8 <_dtoa_r+0x158c>
   82ef0:	b703f126 	beq	r22,fp,83eb8 <_dtoa_r+0x159c>
   82ef4:	8809883a 	mov	r4,r17
   82ef8:	a80b883a 	mov	r5,r21
   82efc:	000d883a 	mov	r6,zero
   82f00:	01d00934 	movhi	r7,16420
   82f04:	0088b3c0 	call	88b3c <__muldf3>
   82f08:	000d883a 	mov	r6,zero
   82f0c:	01d00934 	movhi	r7,16420
   82f10:	9009883a 	mov	r4,r18
   82f14:	980b883a 	mov	r5,r19
   82f18:	1023883a 	mov	r17,r2
   82f1c:	182b883a 	mov	r21,r3
   82f20:	0088b3c0 	call	88b3c <__muldf3>
   82f24:	180b883a 	mov	r5,r3
   82f28:	1009883a 	mov	r4,r2
   82f2c:	1825883a 	mov	r18,r3
   82f30:	1027883a 	mov	r19,r2
   82f34:	00892840 	call	89284 <__fixdfsi>
   82f38:	1009883a 	mov	r4,r2
   82f3c:	1029883a 	mov	r20,r2
   82f40:	00891b00 	call	891b0 <__floatsidf>
   82f44:	9809883a 	mov	r4,r19
   82f48:	900b883a 	mov	r5,r18
   82f4c:	100d883a 	mov	r6,r2
   82f50:	180f883a 	mov	r7,r3
   82f54:	0088adc0 	call	88adc <__subdf3>
   82f58:	a5000c04 	addi	r20,r20,48
   82f5c:	b5000005 	stb	r20,0(r22)
   82f60:	1009883a 	mov	r4,r2
   82f64:	180b883a 	mov	r5,r3
   82f68:	880d883a 	mov	r6,r17
   82f6c:	a80f883a 	mov	r7,r21
   82f70:	1025883a 	mov	r18,r2
   82f74:	1827883a 	mov	r19,r3
   82f78:	00891540 	call	89154 <__ltdf2>
   82f7c:	b5800044 	addi	r22,r22,1
   82f80:	0009883a 	mov	r4,zero
   82f84:	014ffc34 	movhi	r5,16368
   82f88:	900d883a 	mov	r6,r18
   82f8c:	980f883a 	mov	r7,r19
   82f90:	103fd00e 	bge	r2,zero,82ed4 <_dtoa_r+0x5b8>
   82f94:	d9001317 	ldw	r4,76(sp)
   82f98:	df001117 	ldw	fp,68(sp)
   82f9c:	d9000615 	stw	r4,24(sp)
   82fa0:	8009883a 	mov	r4,r16
   82fa4:	e00b883a 	mov	r5,fp
   82fa8:	0085ddc0 	call	85ddc <_Bfree>
   82fac:	d9c00617 	ldw	r7,24(sp)
   82fb0:	d8c02217 	ldw	r3,136(sp)
   82fb4:	d9002417 	ldw	r4,144(sp)
   82fb8:	b0000005 	stb	zero,0(r22)
   82fbc:	38800044 	addi	r2,r7,1
   82fc0:	18800015 	stw	r2,0(r3)
   82fc4:	203e8426 	beq	r4,zero,829d8 <_dtoa_r+0xbc>
   82fc8:	25800015 	stw	r22,0(r4)
   82fcc:	003e8206 	br	829d8 <_dtoa_r+0xbc>
   82fd0:	00800434 	movhi	r2,16
   82fd4:	10bfffc4 	addi	r2,r2,-1
   82fd8:	90a4703a 	and	r18,r18,r2
   82fdc:	903e901e 	bne	r18,zero,82a20 <_dtoa_r+0x104>
   82fe0:	05c00274 	movhi	r23,9
   82fe4:	bdf32904 	addi	r23,r23,-13148
   82fe8:	003e8f06 	br	82a28 <_dtoa_r+0x10c>
   82fec:	b8800204 	addi	r2,r23,8
   82ff0:	003e9206 	br	82a3c <_dtoa_r+0x120>
   82ff4:	01400434 	movhi	r5,16
   82ff8:	297fffc4 	addi	r5,r5,-1
   82ffc:	894a703a 	and	r5,r17,r5
   83000:	d9000317 	ldw	r4,12(sp)
   83004:	294ffc34 	orhi	r5,r5,16368
   83008:	a53f0044 	addi	r20,r20,-1023
   8300c:	dd400217 	ldw	r21,8(sp)
   83010:	d8000f15 	stw	zero,60(sp)
   83014:	003eb106 	br	82adc <_dtoa_r+0x1c0>
   83018:	05c00274 	movhi	r23,9
   8301c:	bdf32004 	addi	r23,r23,-13184
   83020:	003e6d06 	br	829d8 <_dtoa_r+0xbc>
   83024:	d8000415 	stw	zero,16(sp)
   83028:	80001115 	stw	zero,68(r16)
   8302c:	8009883a 	mov	r4,r16
   83030:	000b883a 	mov	r5,zero
   83034:	0085d340 	call	85d34 <_Balloc>
   83038:	01ffffc4 	movi	r7,-1
   8303c:	102f883a 	mov	r23,r2
   83040:	80801015 	stw	r2,64(r16)
   83044:	00800044 	movi	r2,1
   83048:	d9c00915 	stw	r7,36(sp)
   8304c:	d8002115 	stw	zero,132(sp)
   83050:	d9c00e15 	stw	r7,56(sp)
   83054:	d8800c15 	stw	r2,48(sp)
   83058:	d8800117 	ldw	r2,4(sp)
   8305c:	10008b16 	blt	r2,zero,8328c <_dtoa_r+0x970>
   83060:	d9000617 	ldw	r4,24(sp)
   83064:	00c00384 	movi	r3,14
   83068:	19008816 	blt	r3,r4,8328c <_dtoa_r+0x970>
   8306c:	200490fa 	slli	r2,r4,3
   83070:	d9c02117 	ldw	r7,132(sp)
   83074:	00c00274 	movhi	r3,9
   83078:	18f35204 	addi	r3,r3,-12984
   8307c:	1885883a 	add	r2,r3,r2
   83080:	14800017 	ldw	r18,0(r2)
   83084:	14c00117 	ldw	r19,4(r2)
   83088:	3801c916 	blt	r7,zero,837b0 <_dtoa_r+0xe94>
   8308c:	d9000317 	ldw	r4,12(sp)
   83090:	900d883a 	mov	r6,r18
   83094:	980f883a 	mov	r7,r19
   83098:	880b883a 	mov	r5,r17
   8309c:	0088e200 	call	88e20 <__divdf3>
   830a0:	180b883a 	mov	r5,r3
   830a4:	1009883a 	mov	r4,r2
   830a8:	00892840 	call	89284 <__fixdfsi>
   830ac:	1009883a 	mov	r4,r2
   830b0:	102b883a 	mov	r21,r2
   830b4:	00891b00 	call	891b0 <__floatsidf>
   830b8:	1009883a 	mov	r4,r2
   830bc:	180b883a 	mov	r5,r3
   830c0:	900d883a 	mov	r6,r18
   830c4:	980f883a 	mov	r7,r19
   830c8:	0088b3c0 	call	88b3c <__muldf3>
   830cc:	d9000317 	ldw	r4,12(sp)
   830d0:	880b883a 	mov	r5,r17
   830d4:	100d883a 	mov	r6,r2
   830d8:	180f883a 	mov	r7,r3
   830dc:	0088adc0 	call	88adc <__subdf3>
   830e0:	d9c00917 	ldw	r7,36(sp)
   830e4:	1009883a 	mov	r4,r2
   830e8:	a8800c04 	addi	r2,r21,48
   830ec:	b8800005 	stb	r2,0(r23)
   830f0:	01800044 	movi	r6,1
   830f4:	180b883a 	mov	r5,r3
   830f8:	2005883a 	mov	r2,r4
   830fc:	bd800044 	addi	r22,r23,1
   83100:	39803726 	beq	r7,r6,831e0 <_dtoa_r+0x8c4>
   83104:	000d883a 	mov	r6,zero
   83108:	01d00934 	movhi	r7,16420
   8310c:	0088b3c0 	call	88b3c <__muldf3>
   83110:	1009883a 	mov	r4,r2
   83114:	180b883a 	mov	r5,r3
   83118:	000d883a 	mov	r6,zero
   8311c:	000f883a 	mov	r7,zero
   83120:	1029883a 	mov	r20,r2
   83124:	1823883a 	mov	r17,r3
   83128:	0088fd40 	call	88fd4 <__eqdf2>
   8312c:	103f9c26 	beq	r2,zero,82fa0 <_dtoa_r+0x684>
   83130:	dd400917 	ldw	r21,36(sp)
   83134:	dc000415 	stw	r16,16(sp)
   83138:	00000906 	br	83160 <_dtoa_r+0x844>
   8313c:	0088b3c0 	call	88b3c <__muldf3>
   83140:	1009883a 	mov	r4,r2
   83144:	180b883a 	mov	r5,r3
   83148:	000d883a 	mov	r6,zero
   8314c:	000f883a 	mov	r7,zero
   83150:	1029883a 	mov	r20,r2
   83154:	1823883a 	mov	r17,r3
   83158:	0088fd40 	call	88fd4 <__eqdf2>
   8315c:	10022926 	beq	r2,zero,83a04 <_dtoa_r+0x10e8>
   83160:	900d883a 	mov	r6,r18
   83164:	980f883a 	mov	r7,r19
   83168:	a009883a 	mov	r4,r20
   8316c:	880b883a 	mov	r5,r17
   83170:	0088e200 	call	88e20 <__divdf3>
   83174:	180b883a 	mov	r5,r3
   83178:	1009883a 	mov	r4,r2
   8317c:	00892840 	call	89284 <__fixdfsi>
   83180:	1009883a 	mov	r4,r2
   83184:	1021883a 	mov	r16,r2
   83188:	00891b00 	call	891b0 <__floatsidf>
   8318c:	1009883a 	mov	r4,r2
   83190:	180b883a 	mov	r5,r3
   83194:	900d883a 	mov	r6,r18
   83198:	980f883a 	mov	r7,r19
   8319c:	0088b3c0 	call	88b3c <__muldf3>
   831a0:	a009883a 	mov	r4,r20
   831a4:	880b883a 	mov	r5,r17
   831a8:	100d883a 	mov	r6,r2
   831ac:	180f883a 	mov	r7,r3
   831b0:	0088adc0 	call	88adc <__subdf3>
   831b4:	82400c04 	addi	r9,r16,48
   831b8:	b2400005 	stb	r9,0(r22)
   831bc:	b5800044 	addi	r22,r22,1
   831c0:	b5d3c83a 	sub	r9,r22,r23
   831c4:	000d883a 	mov	r6,zero
   831c8:	01d00934 	movhi	r7,16420
   831cc:	1009883a 	mov	r4,r2
   831d0:	180b883a 	mov	r5,r3
   831d4:	aa7fd91e 	bne	r21,r9,8313c <_dtoa_r+0x820>
   831d8:	802b883a 	mov	r21,r16
   831dc:	dc000417 	ldw	r16,16(sp)
   831e0:	1009883a 	mov	r4,r2
   831e4:	180b883a 	mov	r5,r3
   831e8:	100d883a 	mov	r6,r2
   831ec:	180f883a 	mov	r7,r3
   831f0:	0088a880 	call	88a88 <__adddf3>
   831f4:	9009883a 	mov	r4,r18
   831f8:	980b883a 	mov	r5,r19
   831fc:	100d883a 	mov	r6,r2
   83200:	180f883a 	mov	r7,r3
   83204:	1023883a 	mov	r17,r2
   83208:	1829883a 	mov	r20,r3
   8320c:	00891540 	call	89154 <__ltdf2>
   83210:	10000816 	blt	r2,zero,83234 <_dtoa_r+0x918>
   83214:	9009883a 	mov	r4,r18
   83218:	980b883a 	mov	r5,r19
   8321c:	880d883a 	mov	r6,r17
   83220:	a00f883a 	mov	r7,r20
   83224:	0088fd40 	call	88fd4 <__eqdf2>
   83228:	103f5d1e 	bne	r2,zero,82fa0 <_dtoa_r+0x684>
   8322c:	ad40004c 	andi	r21,r21,1
   83230:	a83f5b26 	beq	r21,zero,82fa0 <_dtoa_r+0x684>
   83234:	b53fffc3 	ldbu	r20,-1(r22)
   83238:	b0ffff84 	addi	r3,r22,-2
   8323c:	01400e44 	movi	r5,57
   83240:	00000306 	br	83250 <_dtoa_r+0x934>
   83244:	1d000003 	ldbu	r20,0(r3)
   83248:	102d883a 	mov	r22,r2
   8324c:	18ffffc4 	addi	r3,r3,-1
   83250:	a1003fcc 	andi	r4,r20,255
   83254:	2100201c 	xori	r4,r4,128
   83258:	213fe004 	addi	r4,r4,-128
   8325c:	b0bfffc4 	addi	r2,r22,-1
   83260:	2142ca1e 	bne	r4,r5,83d8c <_dtoa_r+0x1470>
   83264:	b8bff71e 	bne	r23,r2,83244 <_dtoa_r+0x928>
   83268:	d8800617 	ldw	r2,24(sp)
   8326c:	05000c44 	movi	r20,49
   83270:	10800044 	addi	r2,r2,1
   83274:	d8800615 	stw	r2,24(sp)
   83278:	00800c04 	movi	r2,48
   8327c:	b8800005 	stb	r2,0(r23)
   83280:	b805883a 	mov	r2,r23
   83284:	15000005 	stb	r20,0(r2)
   83288:	003f4506 	br	82fa0 <_dtoa_r+0x684>
   8328c:	d9c00c17 	ldw	r7,48(sp)
   83290:	3800c926 	beq	r7,zero,835b8 <_dtoa_r+0xc9c>
   83294:	d9c00417 	ldw	r7,16(sp)
   83298:	00c00044 	movi	r3,1
   8329c:	19c16c0e 	bge	r3,r7,83850 <_dtoa_r+0xf34>
   832a0:	d9000917 	ldw	r4,36(sp)
   832a4:	d9c00a17 	ldw	r7,40(sp)
   832a8:	24ffffc4 	addi	r19,r4,-1
   832ac:	3cc20716 	blt	r7,r19,83acc <_dtoa_r+0x11b0>
   832b0:	3ce7c83a 	sub	r19,r7,r19
   832b4:	d9c00917 	ldw	r7,36(sp)
   832b8:	3802ae16 	blt	r7,zero,83d74 <_dtoa_r+0x1458>
   832bc:	dc800817 	ldw	r18,32(sp)
   832c0:	d8800917 	ldw	r2,36(sp)
   832c4:	d8c00817 	ldw	r3,32(sp)
   832c8:	d9c00717 	ldw	r7,28(sp)
   832cc:	8009883a 	mov	r4,r16
   832d0:	1887883a 	add	r3,r3,r2
   832d4:	388f883a 	add	r7,r7,r2
   832d8:	01400044 	movi	r5,1
   832dc:	d8c00815 	stw	r3,32(sp)
   832e0:	d9c00715 	stw	r7,28(sp)
   832e4:	00861640 	call	86164 <__i2b>
   832e8:	102b883a 	mov	r21,r2
   832ec:	90000a26 	beq	r18,zero,83318 <_dtoa_r+0x9fc>
   832f0:	d8800717 	ldw	r2,28(sp)
   832f4:	0080080e 	bge	zero,r2,83318 <_dtoa_r+0x9fc>
   832f8:	90812b16 	blt	r18,r2,837a8 <_dtoa_r+0xe8c>
   832fc:	d8c00817 	ldw	r3,32(sp)
   83300:	d9000717 	ldw	r4,28(sp)
   83304:	90a5c83a 	sub	r18,r18,r2
   83308:	1887c83a 	sub	r3,r3,r2
   8330c:	2089c83a 	sub	r4,r4,r2
   83310:	d8c00815 	stw	r3,32(sp)
   83314:	d9000715 	stw	r4,28(sp)
   83318:	d9c00a17 	ldw	r7,40(sp)
   8331c:	01c0140e 	bge	zero,r7,83370 <_dtoa_r+0xa54>
   83320:	d8800c17 	ldw	r2,48(sp)
   83324:	1001de26 	beq	r2,zero,83aa0 <_dtoa_r+0x1184>
   83328:	04c00e0e 	bge	zero,r19,83364 <_dtoa_r+0xa48>
   8332c:	a80b883a 	mov	r5,r21
   83330:	8009883a 	mov	r4,r16
   83334:	980d883a 	mov	r6,r19
   83338:	00863f80 	call	863f8 <__pow5mult>
   8333c:	e00d883a 	mov	r6,fp
   83340:	8009883a 	mov	r4,r16
   83344:	100b883a 	mov	r5,r2
   83348:	102b883a 	mov	r21,r2
   8334c:	00861a00 	call	861a0 <__multiply>
   83350:	1029883a 	mov	r20,r2
   83354:	e00b883a 	mov	r5,fp
   83358:	8009883a 	mov	r4,r16
   8335c:	0085ddc0 	call	85ddc <_Bfree>
   83360:	a039883a 	mov	fp,r20
   83364:	d8c00a17 	ldw	r3,40(sp)
   83368:	1ccdc83a 	sub	r6,r3,r19
   8336c:	3001291e 	bne	r6,zero,83814 <_dtoa_r+0xef8>
   83370:	8009883a 	mov	r4,r16
   83374:	01400044 	movi	r5,1
   83378:	00861640 	call	86164 <__i2b>
   8337c:	d9000b17 	ldw	r4,44(sp)
   83380:	1029883a 	mov	r20,r2
   83384:	0100050e 	bge	zero,r4,8339c <_dtoa_r+0xa80>
   83388:	d9800b17 	ldw	r6,44(sp)
   8338c:	8009883a 	mov	r4,r16
   83390:	100b883a 	mov	r5,r2
   83394:	00863f80 	call	863f8 <__pow5mult>
   83398:	1029883a 	mov	r20,r2
   8339c:	d9c00417 	ldw	r7,16(sp)
   833a0:	00800044 	movi	r2,1
   833a4:	11c0f00e 	bge	r2,r7,83768 <_dtoa_r+0xe4c>
   833a8:	0023883a 	mov	r17,zero
   833ac:	d8800b17 	ldw	r2,44(sp)
   833b0:	1001741e 	bne	r2,zero,83984 <_dtoa_r+0x1068>
   833b4:	00800044 	movi	r2,1
   833b8:	d8c00717 	ldw	r3,28(sp)
   833bc:	10c5883a 	add	r2,r2,r3
   833c0:	108007cc 	andi	r2,r2,31
   833c4:	10008026 	beq	r2,zero,835c8 <_dtoa_r+0xcac>
   833c8:	01000804 	movi	r4,32
   833cc:	2089c83a 	sub	r4,r4,r2
   833d0:	00c00104 	movi	r3,4
   833d4:	1902d00e 	bge	r3,r4,83f18 <_dtoa_r+0x15fc>
   833d8:	d9000817 	ldw	r4,32(sp)
   833dc:	d9c00717 	ldw	r7,28(sp)
   833e0:	00c00704 	movi	r3,28
   833e4:	1885c83a 	sub	r2,r3,r2
   833e8:	2089883a 	add	r4,r4,r2
   833ec:	388f883a 	add	r7,r7,r2
   833f0:	d9000815 	stw	r4,32(sp)
   833f4:	90a5883a 	add	r18,r18,r2
   833f8:	d9c00715 	stw	r7,28(sp)
   833fc:	d9c00817 	ldw	r7,32(sp)
   83400:	01c0050e 	bge	zero,r7,83418 <_dtoa_r+0xafc>
   83404:	e00b883a 	mov	r5,fp
   83408:	8009883a 	mov	r4,r16
   8340c:	380d883a 	mov	r6,r7
   83410:	00865240 	call	86524 <__lshift>
   83414:	1039883a 	mov	fp,r2
   83418:	d8800717 	ldw	r2,28(sp)
   8341c:	0080050e 	bge	zero,r2,83434 <_dtoa_r+0xb18>
   83420:	a00b883a 	mov	r5,r20
   83424:	8009883a 	mov	r4,r16
   83428:	100d883a 	mov	r6,r2
   8342c:	00865240 	call	86524 <__lshift>
   83430:	1029883a 	mov	r20,r2
   83434:	d8c00d17 	ldw	r3,52(sp)
   83438:	1801401e 	bne	r3,zero,8393c <_dtoa_r+0x1020>
   8343c:	d8800917 	ldw	r2,36(sp)
   83440:	00815a0e 	bge	zero,r2,839ac <_dtoa_r+0x1090>
   83444:	d8c00c17 	ldw	r3,48(sp)
   83448:	18006f1e 	bne	r3,zero,83608 <_dtoa_r+0xcec>
   8344c:	b823883a 	mov	r17,r23
   83450:	dc800917 	ldw	r18,36(sp)
   83454:	00000206 	br	83460 <_dtoa_r+0xb44>
   83458:	0085e040 	call	85e04 <__multadd>
   8345c:	1039883a 	mov	fp,r2
   83460:	e009883a 	mov	r4,fp
   83464:	a00b883a 	mov	r5,r20
   83468:	00826e00 	call	826e0 <quorem>
   8346c:	10800c04 	addi	r2,r2,48
   83470:	88800005 	stb	r2,0(r17)
   83474:	8c400044 	addi	r17,r17,1
   83478:	8dc7c83a 	sub	r3,r17,r23
   8347c:	8009883a 	mov	r4,r16
   83480:	e00b883a 	mov	r5,fp
   83484:	01800284 	movi	r6,10
   83488:	000f883a 	mov	r7,zero
   8348c:	1cbff216 	blt	r3,r18,83458 <_dtoa_r+0xb3c>
   83490:	dd800917 	ldw	r22,36(sp)
   83494:	1007883a 	mov	r3,r2
   83498:	05823a0e 	bge	zero,r22,83d84 <_dtoa_r+0x1468>
   8349c:	bdad883a 	add	r22,r23,r22
   834a0:	0023883a 	mov	r17,zero
   834a4:	e00b883a 	mov	r5,fp
   834a8:	01800044 	movi	r6,1
   834ac:	8009883a 	mov	r4,r16
   834b0:	d8c01515 	stw	r3,84(sp)
   834b4:	00865240 	call	86524 <__lshift>
   834b8:	1009883a 	mov	r4,r2
   834bc:	a00b883a 	mov	r5,r20
   834c0:	1039883a 	mov	fp,r2
   834c4:	00866800 	call	86680 <__mcmp>
   834c8:	d8c01517 	ldw	r3,84(sp)
   834cc:	0080d60e 	bge	zero,r2,83828 <_dtoa_r+0xf0c>
   834d0:	b13fffc3 	ldbu	r4,-1(r22)
   834d4:	b0ffff84 	addi	r3,r22,-2
   834d8:	01800e44 	movi	r6,57
   834dc:	00000306 	br	834ec <_dtoa_r+0xbd0>
   834e0:	19000003 	ldbu	r4,0(r3)
   834e4:	102d883a 	mov	r22,r2
   834e8:	18ffffc4 	addi	r3,r3,-1
   834ec:	21403fcc 	andi	r5,r4,255
   834f0:	2940201c 	xori	r5,r5,128
   834f4:	297fe004 	addi	r5,r5,-128
   834f8:	b0bfffc4 	addi	r2,r22,-1
   834fc:	2981a71e 	bne	r5,r6,83b9c <_dtoa_r+0x1280>
   83500:	b8bff71e 	bne	r23,r2,834e0 <_dtoa_r+0xbc4>
   83504:	d8800617 	ldw	r2,24(sp)
   83508:	10800044 	addi	r2,r2,1
   8350c:	d8800615 	stw	r2,24(sp)
   83510:	00800c44 	movi	r2,49
   83514:	b8800005 	stb	r2,0(r23)
   83518:	8009883a 	mov	r4,r16
   8351c:	a00b883a 	mov	r5,r20
   83520:	0085ddc0 	call	85ddc <_Bfree>
   83524:	a83e9e26 	beq	r21,zero,82fa0 <_dtoa_r+0x684>
   83528:	88000426 	beq	r17,zero,8353c <_dtoa_r+0xc20>
   8352c:	8d400326 	beq	r17,r21,8353c <_dtoa_r+0xc20>
   83530:	8009883a 	mov	r4,r16
   83534:	880b883a 	mov	r5,r17
   83538:	0085ddc0 	call	85ddc <_Bfree>
   8353c:	8009883a 	mov	r4,r16
   83540:	a80b883a 	mov	r5,r21
   83544:	0085ddc0 	call	85ddc <_Bfree>
   83548:	003e9506 	br	82fa0 <_dtoa_r+0x684>
   8354c:	00c00044 	movi	r3,1
   83550:	d8c00d15 	stw	r3,52(sp)
   83554:	003d9f06 	br	82bd4 <_dtoa_r+0x2b8>
   83558:	d9000817 	ldw	r4,32(sp)
   8355c:	d8800617 	ldw	r2,24(sp)
   83560:	d8000b15 	stw	zero,44(sp)
   83564:	2089c83a 	sub	r4,r4,r2
   83568:	0087c83a 	sub	r3,zero,r2
   8356c:	d9000815 	stw	r4,32(sp)
   83570:	d8c00a15 	stw	r3,40(sp)
   83574:	003da306 	br	82c04 <_dtoa_r+0x2e8>
   83578:	0529c83a 	sub	r20,zero,r20
   8357c:	dd000815 	stw	r20,32(sp)
   83580:	d8000715 	stw	zero,28(sp)
   83584:	003d9806 	br	82be8 <_dtoa_r+0x2cc>
   83588:	d9000617 	ldw	r4,24(sp)
   8358c:	00891b00 	call	891b0 <__floatsidf>
   83590:	1009883a 	mov	r4,r2
   83594:	180b883a 	mov	r5,r3
   83598:	980d883a 	mov	r6,r19
   8359c:	900f883a 	mov	r7,r18
   835a0:	00890300 	call	89030 <__nedf2>
   835a4:	103d7a26 	beq	r2,zero,82b90 <_dtoa_r+0x274>
   835a8:	d8800617 	ldw	r2,24(sp)
   835ac:	10bfffc4 	addi	r2,r2,-1
   835b0:	d8800615 	stw	r2,24(sp)
   835b4:	003d7606 	br	82b90 <_dtoa_r+0x274>
   835b8:	dcc00a17 	ldw	r19,40(sp)
   835bc:	dc800817 	ldw	r18,32(sp)
   835c0:	002b883a 	mov	r21,zero
   835c4:	003f4906 	br	832ec <_dtoa_r+0x9d0>
   835c8:	00800704 	movi	r2,28
   835cc:	d8c00817 	ldw	r3,32(sp)
   835d0:	d9000717 	ldw	r4,28(sp)
   835d4:	90a5883a 	add	r18,r18,r2
   835d8:	1887883a 	add	r3,r3,r2
   835dc:	2089883a 	add	r4,r4,r2
   835e0:	d8c00815 	stw	r3,32(sp)
   835e4:	d9000715 	stw	r4,28(sp)
   835e8:	003f8406 	br	833fc <_dtoa_r+0xae0>
   835ec:	d9c00317 	ldw	r7,12(sp)
   835f0:	013efb84 	movi	r4,-1042
   835f4:	2509c83a 	sub	r4,r4,r20
   835f8:	3908983a 	sll	r4,r7,r4
   835fc:	003d3006 	br	82ac0 <_dtoa_r+0x1a4>
   83600:	d8000d15 	stw	zero,52(sp)
   83604:	003d7306 	br	82bd4 <_dtoa_r+0x2b8>
   83608:	0480050e 	bge	zero,r18,83620 <_dtoa_r+0xd04>
   8360c:	a80b883a 	mov	r5,r21
   83610:	8009883a 	mov	r4,r16
   83614:	900d883a 	mov	r6,r18
   83618:	00865240 	call	86524 <__lshift>
   8361c:	102b883a 	mov	r21,r2
   83620:	8801611e 	bne	r17,zero,83ba8 <_dtoa_r+0x128c>
   83624:	a827883a 	mov	r19,r21
   83628:	d8c00317 	ldw	r3,12(sp)
   8362c:	d9000917 	ldw	r4,36(sp)
   83630:	b8bfffc4 	addi	r2,r23,-1
   83634:	18c0004c 	andi	r3,r3,1
   83638:	1105883a 	add	r2,r2,r4
   8363c:	b825883a 	mov	r18,r23
   83640:	d8800515 	stw	r2,20(sp)
   83644:	a823883a 	mov	r17,r21
   83648:	d8c00315 	stw	r3,12(sp)
   8364c:	ddc00715 	stw	r23,28(sp)
   83650:	e009883a 	mov	r4,fp
   83654:	a00b883a 	mov	r5,r20
   83658:	00826e00 	call	826e0 <quorem>
   8365c:	e009883a 	mov	r4,fp
   83660:	880b883a 	mov	r5,r17
   83664:	102d883a 	mov	r22,r2
   83668:	00866800 	call	86680 <__mcmp>
   8366c:	980d883a 	mov	r6,r19
   83670:	8009883a 	mov	r4,r16
   83674:	a00b883a 	mov	r5,r20
   83678:	102b883a 	mov	r21,r2
   8367c:	00866d80 	call	866d8 <__mdiff>
   83680:	100d883a 	mov	r6,r2
   83684:	10800317 	ldw	r2,12(r2)
   83688:	b5c00c04 	addi	r23,r22,48
   8368c:	10008c26 	beq	r2,zero,838c0 <_dtoa_r+0xfa4>
   83690:	8009883a 	mov	r4,r16
   83694:	300b883a 	mov	r5,r6
   83698:	0085ddc0 	call	85ddc <_Bfree>
   8369c:	00800044 	movi	r2,1
   836a0:	a8007116 	blt	r21,zero,83868 <_dtoa_r+0xf4c>
   836a4:	a800041e 	bne	r21,zero,836b8 <_dtoa_r+0xd9c>
   836a8:	d9c00417 	ldw	r7,16(sp)
   836ac:	3800021e 	bne	r7,zero,836b8 <_dtoa_r+0xd9c>
   836b0:	d8c00317 	ldw	r3,12(sp)
   836b4:	18006c26 	beq	r3,zero,83868 <_dtoa_r+0xf4c>
   836b8:	00814c16 	blt	zero,r2,83bec <_dtoa_r+0x12d0>
   836bc:	d8c00517 	ldw	r3,20(sp)
   836c0:	95400044 	addi	r21,r18,1
   836c4:	95c00005 	stb	r23,0(r18)
   836c8:	a82d883a 	mov	r22,r21
   836cc:	90c14d26 	beq	r18,r3,83c04 <_dtoa_r+0x12e8>
   836d0:	e00b883a 	mov	r5,fp
   836d4:	8009883a 	mov	r4,r16
   836d8:	01800284 	movi	r6,10
   836dc:	000f883a 	mov	r7,zero
   836e0:	0085e040 	call	85e04 <__multadd>
   836e4:	1039883a 	mov	fp,r2
   836e8:	8cc08b26 	beq	r17,r19,83918 <_dtoa_r+0xffc>
   836ec:	880b883a 	mov	r5,r17
   836f0:	01800284 	movi	r6,10
   836f4:	000f883a 	mov	r7,zero
   836f8:	8009883a 	mov	r4,r16
   836fc:	0085e040 	call	85e04 <__multadd>
   83700:	980b883a 	mov	r5,r19
   83704:	8009883a 	mov	r4,r16
   83708:	01800284 	movi	r6,10
   8370c:	000f883a 	mov	r7,zero
   83710:	1023883a 	mov	r17,r2
   83714:	0085e040 	call	85e04 <__multadd>
   83718:	1027883a 	mov	r19,r2
   8371c:	a825883a 	mov	r18,r21
   83720:	003fcb06 	br	83650 <_dtoa_r+0xd34>
   83724:	d9c00417 	ldw	r7,16(sp)
   83728:	00800104 	movi	r2,4
   8372c:	3880e426 	beq	r7,r2,83ac0 <_dtoa_r+0x11a4>
   83730:	00800144 	movi	r2,5
   83734:	38be3c1e 	bne	r7,r2,83028 <_dtoa_r+0x70c>
   83738:	00c00044 	movi	r3,1
   8373c:	d8c00c15 	stw	r3,48(sp)
   83740:	d9c02117 	ldw	r7,132(sp)
   83744:	d8800617 	ldw	r2,24(sp)
   83748:	388f883a 	add	r7,r7,r2
   8374c:	3c800044 	addi	r18,r7,1
   83750:	d9c00e15 	stw	r7,56(sp)
   83754:	dc800915 	stw	r18,36(sp)
   83758:	04bd3e16 	blt	zero,r18,82c54 <_dtoa_r+0x338>
   8375c:	80001115 	stw	zero,68(r16)
   83760:	000b883a 	mov	r5,zero
   83764:	003d4606 	br	82c80 <_dtoa_r+0x364>
   83768:	d8c00317 	ldw	r3,12(sp)
   8376c:	183f0e1e 	bne	r3,zero,833a8 <_dtoa_r+0xa8c>
   83770:	00c00434 	movhi	r3,16
   83774:	18ffffc4 	addi	r3,r3,-1
   83778:	88c6703a 	and	r3,r17,r3
   8377c:	183f0a1e 	bne	r3,zero,833a8 <_dtoa_r+0xa8c>
   83780:	8c5ffc2c 	andhi	r17,r17,32752
   83784:	883f0826 	beq	r17,zero,833a8 <_dtoa_r+0xa8c>
   83788:	d9000817 	ldw	r4,32(sp)
   8378c:	d9c00717 	ldw	r7,28(sp)
   83790:	1023883a 	mov	r17,r2
   83794:	2089883a 	add	r4,r4,r2
   83798:	388f883a 	add	r7,r7,r2
   8379c:	d9000815 	stw	r4,32(sp)
   837a0:	d9c00715 	stw	r7,28(sp)
   837a4:	003f0106 	br	833ac <_dtoa_r+0xa90>
   837a8:	9005883a 	mov	r2,r18
   837ac:	003ed306 	br	832fc <_dtoa_r+0x9e0>
   837b0:	d8800917 	ldw	r2,36(sp)
   837b4:	00be3516 	blt	zero,r2,8308c <_dtoa_r+0x770>
   837b8:	1000b61e 	bne	r2,zero,83a94 <_dtoa_r+0x1178>
   837bc:	9009883a 	mov	r4,r18
   837c0:	980b883a 	mov	r5,r19
   837c4:	000d883a 	mov	r6,zero
   837c8:	01d00534 	movhi	r7,16404
   837cc:	0088b3c0 	call	88b3c <__muldf3>
   837d0:	d9800317 	ldw	r6,12(sp)
   837d4:	1009883a 	mov	r4,r2
   837d8:	180b883a 	mov	r5,r3
   837dc:	880f883a 	mov	r7,r17
   837e0:	00890f00 	call	890f0 <__gedf2>
   837e4:	0029883a 	mov	r20,zero
   837e8:	002b883a 	mov	r21,zero
   837ec:	10007e16 	blt	r2,zero,839e8 <_dtoa_r+0x10cc>
   837f0:	d8802117 	ldw	r2,132(sp)
   837f4:	b82d883a 	mov	r22,r23
   837f8:	0084303a 	nor	r2,zero,r2
   837fc:	d8800615 	stw	r2,24(sp)
   83800:	8009883a 	mov	r4,r16
   83804:	a00b883a 	mov	r5,r20
   83808:	0085ddc0 	call	85ddc <_Bfree>
   8380c:	a83f4b1e 	bne	r21,zero,8353c <_dtoa_r+0xc20>
   83810:	003de306 	br	82fa0 <_dtoa_r+0x684>
   83814:	e00b883a 	mov	r5,fp
   83818:	8009883a 	mov	r4,r16
   8381c:	00863f80 	call	863f8 <__pow5mult>
   83820:	1039883a 	mov	fp,r2
   83824:	003ed206 	br	83370 <_dtoa_r+0xa54>
   83828:	1000021e 	bne	r2,zero,83834 <_dtoa_r+0xf18>
   8382c:	18c0004c 	andi	r3,r3,1
   83830:	183f271e 	bne	r3,zero,834d0 <_dtoa_r+0xbb4>
   83834:	01000c04 	movi	r4,48
   83838:	00000106 	br	83840 <_dtoa_r+0xf24>
   8383c:	102d883a 	mov	r22,r2
   83840:	b0bfffc4 	addi	r2,r22,-1
   83844:	10c00007 	ldb	r3,0(r2)
   83848:	193ffc26 	beq	r3,r4,8383c <_dtoa_r+0xf20>
   8384c:	003f3206 	br	83518 <_dtoa_r+0xbfc>
   83850:	d8c00f17 	ldw	r3,60(sp)
   83854:	18015026 	beq	r3,zero,83d98 <_dtoa_r+0x147c>
   83858:	10810cc4 	addi	r2,r2,1075
   8385c:	dcc00a17 	ldw	r19,40(sp)
   83860:	dc800817 	ldw	r18,32(sp)
   83864:	003e9706 	br	832c4 <_dtoa_r+0x9a8>
   83868:	b807883a 	mov	r3,r23
   8386c:	182b883a 	mov	r21,r3
   83870:	ddc00717 	ldw	r23,28(sp)
   83874:	00800e0e 	bge	zero,r2,838b0 <_dtoa_r+0xf94>
   83878:	e00b883a 	mov	r5,fp
   8387c:	01800044 	movi	r6,1
   83880:	8009883a 	mov	r4,r16
   83884:	d8c01515 	stw	r3,84(sp)
   83888:	00865240 	call	86524 <__lshift>
   8388c:	1009883a 	mov	r4,r2
   83890:	a00b883a 	mov	r5,r20
   83894:	1039883a 	mov	fp,r2
   83898:	00866800 	call	86680 <__mcmp>
   8389c:	d8c01517 	ldw	r3,84(sp)
   838a0:	0081880e 	bge	zero,r2,83ec4 <_dtoa_r+0x15a8>
   838a4:	00800e44 	movi	r2,57
   838a8:	b0c00c44 	addi	r3,r22,49
   838ac:	a8816326 	beq	r21,r2,83e3c <_dtoa_r+0x1520>
   838b0:	90c00005 	stb	r3,0(r18)
   838b4:	95800044 	addi	r22,r18,1
   838b8:	982b883a 	mov	r21,r19
   838bc:	003f1606 	br	83518 <_dtoa_r+0xbfc>
   838c0:	300b883a 	mov	r5,r6
   838c4:	e009883a 	mov	r4,fp
   838c8:	d9801515 	stw	r6,84(sp)
   838cc:	00866800 	call	86680 <__mcmp>
   838d0:	d9801517 	ldw	r6,84(sp)
   838d4:	8009883a 	mov	r4,r16
   838d8:	d8801515 	stw	r2,84(sp)
   838dc:	300b883a 	mov	r5,r6
   838e0:	0085ddc0 	call	85ddc <_Bfree>
   838e4:	d8801517 	ldw	r2,84(sp)
   838e8:	103f6d1e 	bne	r2,zero,836a0 <_dtoa_r+0xd84>
   838ec:	d9c00417 	ldw	r7,16(sp)
   838f0:	383f6b1e 	bne	r7,zero,836a0 <_dtoa_r+0xd84>
   838f4:	d8c00317 	ldw	r3,12(sp)
   838f8:	183f691e 	bne	r3,zero,836a0 <_dtoa_r+0xd84>
   838fc:	b807883a 	mov	r3,r23
   83900:	00800e44 	movi	r2,57
   83904:	ddc00717 	ldw	r23,28(sp)
   83908:	18814c26 	beq	r3,r2,83e3c <_dtoa_r+0x1520>
   8390c:	057fe80e 	bge	zero,r21,838b0 <_dtoa_r+0xf94>
   83910:	b0c00c44 	addi	r3,r22,49
   83914:	003fe606 	br	838b0 <_dtoa_r+0xf94>
   83918:	880b883a 	mov	r5,r17
   8391c:	8009883a 	mov	r4,r16
   83920:	01800284 	movi	r6,10
   83924:	000f883a 	mov	r7,zero
   83928:	0085e040 	call	85e04 <__multadd>
   8392c:	1023883a 	mov	r17,r2
   83930:	1027883a 	mov	r19,r2
   83934:	a825883a 	mov	r18,r21
   83938:	003f4506 	br	83650 <_dtoa_r+0xd34>
   8393c:	e009883a 	mov	r4,fp
   83940:	a00b883a 	mov	r5,r20
   83944:	00866800 	call	86680 <__mcmp>
   83948:	103ebc0e 	bge	r2,zero,8343c <_dtoa_r+0xb20>
   8394c:	e00b883a 	mov	r5,fp
   83950:	8009883a 	mov	r4,r16
   83954:	01800284 	movi	r6,10
   83958:	000f883a 	mov	r7,zero
   8395c:	0085e040 	call	85e04 <__multadd>
   83960:	1039883a 	mov	fp,r2
   83964:	d8800617 	ldw	r2,24(sp)
   83968:	d8c00c17 	ldw	r3,48(sp)
   8396c:	10bfffc4 	addi	r2,r2,-1
   83970:	d8800615 	stw	r2,24(sp)
   83974:	1801571e 	bne	r3,zero,83ed4 <_dtoa_r+0x15b8>
   83978:	d9c00e17 	ldw	r7,56(sp)
   8397c:	d9c00915 	stw	r7,36(sp)
   83980:	003eae06 	br	8343c <_dtoa_r+0xb20>
   83984:	a0800417 	ldw	r2,16(r20)
   83988:	10800104 	addi	r2,r2,4
   8398c:	1085883a 	add	r2,r2,r2
   83990:	1085883a 	add	r2,r2,r2
   83994:	a085883a 	add	r2,r20,r2
   83998:	11000017 	ldw	r4,0(r2)
   8399c:	008604c0 	call	8604c <__hi0bits>
   839a0:	00c00804 	movi	r3,32
   839a4:	1885c83a 	sub	r2,r3,r2
   839a8:	003e8306 	br	833b8 <_dtoa_r+0xa9c>
   839ac:	d9c00417 	ldw	r7,16(sp)
   839b0:	00800084 	movi	r2,2
   839b4:	11fea30e 	bge	r2,r7,83444 <_dtoa_r+0xb28>
   839b8:	d8800917 	ldw	r2,36(sp)
   839bc:	103f8c1e 	bne	r2,zero,837f0 <_dtoa_r+0xed4>
   839c0:	a00b883a 	mov	r5,r20
   839c4:	8009883a 	mov	r4,r16
   839c8:	01800144 	movi	r6,5
   839cc:	000f883a 	mov	r7,zero
   839d0:	0085e040 	call	85e04 <__multadd>
   839d4:	e009883a 	mov	r4,fp
   839d8:	100b883a 	mov	r5,r2
   839dc:	1029883a 	mov	r20,r2
   839e0:	00866800 	call	86680 <__mcmp>
   839e4:	00bf820e 	bge	zero,r2,837f0 <_dtoa_r+0xed4>
   839e8:	00800c44 	movi	r2,49
   839ec:	b8800005 	stb	r2,0(r23)
   839f0:	d8800617 	ldw	r2,24(sp)
   839f4:	bd800044 	addi	r22,r23,1
   839f8:	10800044 	addi	r2,r2,1
   839fc:	d8800615 	stw	r2,24(sp)
   83a00:	003f7f06 	br	83800 <_dtoa_r+0xee4>
   83a04:	dc000417 	ldw	r16,16(sp)
   83a08:	003d6506 	br	82fa0 <_dtoa_r+0x684>
   83a0c:	9009883a 	mov	r4,r18
   83a10:	00891b00 	call	891b0 <__floatsidf>
   83a14:	1009883a 	mov	r4,r2
   83a18:	180b883a 	mov	r5,r3
   83a1c:	980d883a 	mov	r6,r19
   83a20:	a00f883a 	mov	r7,r20
   83a24:	0088b3c0 	call	88b3c <__muldf3>
   83a28:	1009883a 	mov	r4,r2
   83a2c:	180b883a 	mov	r5,r3
   83a30:	000d883a 	mov	r6,zero
   83a34:	01d00734 	movhi	r7,16412
   83a38:	0088a880 	call	88a88 <__adddf3>
   83a3c:	057f3034 	movhi	r21,64704
   83a40:	1025883a 	mov	r18,r2
   83a44:	1d6b883a 	add	r21,r3,r21
   83a48:	9809883a 	mov	r4,r19
   83a4c:	a00b883a 	mov	r5,r20
   83a50:	000d883a 	mov	r6,zero
   83a54:	01d00534 	movhi	r7,16404
   83a58:	0088adc0 	call	88adc <__subdf3>
   83a5c:	1009883a 	mov	r4,r2
   83a60:	180b883a 	mov	r5,r3
   83a64:	900d883a 	mov	r6,r18
   83a68:	a80f883a 	mov	r7,r21
   83a6c:	1027883a 	mov	r19,r2
   83a70:	1829883a 	mov	r20,r3
   83a74:	008908c0 	call	8908c <__gtdf2>
   83a78:	00806616 	blt	zero,r2,83c14 <_dtoa_r+0x12f8>
   83a7c:	a9e0003c 	xorhi	r7,r21,32768
   83a80:	9809883a 	mov	r4,r19
   83a84:	a00b883a 	mov	r5,r20
   83a88:	900d883a 	mov	r6,r18
   83a8c:	00891540 	call	89154 <__ltdf2>
   83a90:	103d710e 	bge	r2,zero,83058 <_dtoa_r+0x73c>
   83a94:	0029883a 	mov	r20,zero
   83a98:	002b883a 	mov	r21,zero
   83a9c:	003f5406 	br	837f0 <_dtoa_r+0xed4>
   83aa0:	d9800a17 	ldw	r6,40(sp)
   83aa4:	e00b883a 	mov	r5,fp
   83aa8:	8009883a 	mov	r4,r16
   83aac:	00863f80 	call	863f8 <__pow5mult>
   83ab0:	1039883a 	mov	fp,r2
   83ab4:	003e2e06 	br	83370 <_dtoa_r+0xa54>
   83ab8:	d8000c15 	stw	zero,48(sp)
   83abc:	003f2006 	br	83740 <_dtoa_r+0xe24>
   83ac0:	00800044 	movi	r2,1
   83ac4:	d8800c15 	stw	r2,48(sp)
   83ac8:	003c5d06 	br	82c40 <_dtoa_r+0x324>
   83acc:	d8c00a17 	ldw	r3,40(sp)
   83ad0:	d9000b17 	ldw	r4,44(sp)
   83ad4:	dcc00a15 	stw	r19,40(sp)
   83ad8:	98c5c83a 	sub	r2,r19,r3
   83adc:	2089883a 	add	r4,r4,r2
   83ae0:	d9000b15 	stw	r4,44(sp)
   83ae4:	0027883a 	mov	r19,zero
   83ae8:	003df206 	br	832b4 <_dtoa_r+0x998>
   83aec:	d9000317 	ldw	r4,12(sp)
   83af0:	8829883a 	mov	r20,r17
   83af4:	04800084 	movi	r18,2
   83af8:	d9001015 	stw	r4,64(sp)
   83afc:	003c8106 	br	82d04 <_dtoa_r+0x3e8>
   83b00:	04800044 	movi	r18,1
   83b04:	dc800e15 	stw	r18,56(sp)
   83b08:	dc800915 	stw	r18,36(sp)
   83b0c:	dc802115 	stw	r18,132(sp)
   83b10:	003f1206 	br	8375c <_dtoa_r+0xe40>
   83b14:	d8800617 	ldw	r2,24(sp)
   83b18:	00abc83a 	sub	r21,zero,r2
   83b1c:	a800a426 	beq	r21,zero,83db0 <_dtoa_r+0x1494>
   83b20:	a88003cc 	andi	r2,r21,15
   83b24:	100490fa 	slli	r2,r2,3
   83b28:	00c00274 	movhi	r3,9
   83b2c:	18f35204 	addi	r3,r3,-12984
   83b30:	d9000317 	ldw	r4,12(sp)
   83b34:	1885883a 	add	r2,r3,r2
   83b38:	11800017 	ldw	r6,0(r2)
   83b3c:	11c00117 	ldw	r7,4(r2)
   83b40:	a82bd13a 	srai	r21,r21,4
   83b44:	880b883a 	mov	r5,r17
   83b48:	0088b3c0 	call	88b3c <__muldf3>
   83b4c:	1027883a 	mov	r19,r2
   83b50:	1829883a 	mov	r20,r3
   83b54:	a800e826 	beq	r21,zero,83ef8 <_dtoa_r+0x15dc>
   83b58:	05800274 	movhi	r22,9
   83b5c:	b5b34804 	addi	r22,r22,-13024
   83b60:	04800084 	movi	r18,2
   83b64:	a980004c 	andi	r6,r21,1
   83b68:	1009883a 	mov	r4,r2
   83b6c:	a82bd07a 	srai	r21,r21,1
   83b70:	180b883a 	mov	r5,r3
   83b74:	30000426 	beq	r6,zero,83b88 <_dtoa_r+0x126c>
   83b78:	b1800017 	ldw	r6,0(r22)
   83b7c:	b1c00117 	ldw	r7,4(r22)
   83b80:	94800044 	addi	r18,r18,1
   83b84:	0088b3c0 	call	88b3c <__muldf3>
   83b88:	b5800204 	addi	r22,r22,8
   83b8c:	a83ff51e 	bne	r21,zero,83b64 <_dtoa_r+0x1248>
   83b90:	1027883a 	mov	r19,r2
   83b94:	1829883a 	mov	r20,r3
   83b98:	003c7306 	br	82d68 <_dtoa_r+0x44c>
   83b9c:	21000044 	addi	r4,r4,1
   83ba0:	11000005 	stb	r4,0(r2)
   83ba4:	003e5c06 	br	83518 <_dtoa_r+0xbfc>
   83ba8:	a9400117 	ldw	r5,4(r21)
   83bac:	8009883a 	mov	r4,r16
   83bb0:	0085d340 	call	85d34 <_Balloc>
   83bb4:	a9800417 	ldw	r6,16(r21)
   83bb8:	11000304 	addi	r4,r2,12
   83bbc:	a9400304 	addi	r5,r21,12
   83bc0:	31800084 	addi	r6,r6,2
   83bc4:	318d883a 	add	r6,r6,r6
   83bc8:	318d883a 	add	r6,r6,r6
   83bcc:	1023883a 	mov	r17,r2
   83bd0:	008598c0 	call	8598c <memcpy>
   83bd4:	8009883a 	mov	r4,r16
   83bd8:	880b883a 	mov	r5,r17
   83bdc:	01800044 	movi	r6,1
   83be0:	00865240 	call	86524 <__lshift>
   83be4:	1027883a 	mov	r19,r2
   83be8:	003e8f06 	br	83628 <_dtoa_r+0xd0c>
   83bec:	b807883a 	mov	r3,r23
   83bf0:	00800e44 	movi	r2,57
   83bf4:	ddc00717 	ldw	r23,28(sp)
   83bf8:	18809026 	beq	r3,r2,83e3c <_dtoa_r+0x1520>
   83bfc:	18c00044 	addi	r3,r3,1
   83c00:	003f2b06 	br	838b0 <_dtoa_r+0xf94>
   83c04:	b807883a 	mov	r3,r23
   83c08:	982b883a 	mov	r21,r19
   83c0c:	ddc00717 	ldw	r23,28(sp)
   83c10:	003e2406 	br	834a4 <_dtoa_r+0xb88>
   83c14:	0029883a 	mov	r20,zero
   83c18:	002b883a 	mov	r21,zero
   83c1c:	003f7206 	br	839e8 <_dtoa_r+0x10cc>
   83c20:	593fffc4 	addi	r4,r11,-1
   83c24:	200490fa 	slli	r2,r4,3
   83c28:	00c00274 	movhi	r3,9
   83c2c:	18f35204 	addi	r3,r3,-12984
   83c30:	d9001015 	stw	r4,64(sp)
   83c34:	1885883a 	add	r2,r3,r2
   83c38:	11000017 	ldw	r4,0(r2)
   83c3c:	11400117 	ldw	r5,4(r2)
   83c40:	900d883a 	mov	r6,r18
   83c44:	a80f883a 	mov	r7,r21
   83c48:	dac01615 	stw	r11,88(sp)
   83c4c:	0088b3c0 	call	88b3c <__muldf3>
   83c50:	a00b883a 	mov	r5,r20
   83c54:	9809883a 	mov	r4,r19
   83c58:	d8c01215 	stw	r3,72(sp)
   83c5c:	d8801115 	stw	r2,68(sp)
   83c60:	00892840 	call	89284 <__fixdfsi>
   83c64:	1009883a 	mov	r4,r2
   83c68:	1025883a 	mov	r18,r2
   83c6c:	00891b00 	call	891b0 <__floatsidf>
   83c70:	9809883a 	mov	r4,r19
   83c74:	a00b883a 	mov	r5,r20
   83c78:	100d883a 	mov	r6,r2
   83c7c:	180f883a 	mov	r7,r3
   83c80:	94800c04 	addi	r18,r18,48
   83c84:	0088adc0 	call	88adc <__subdf3>
   83c88:	bc800005 	stb	r18,0(r23)
   83c8c:	dac01617 	ldw	r11,88(sp)
   83c90:	102b883a 	mov	r21,r2
   83c94:	00800044 	movi	r2,1
   83c98:	bd800044 	addi	r22,r23,1
   83c9c:	1815883a 	mov	r10,r3
   83ca0:	58802226 	beq	r11,r2,83d2c <_dtoa_r+0x1410>
   83ca4:	bad7883a 	add	r11,r23,r11
   83ca8:	dc001415 	stw	r16,80(sp)
   83cac:	a805883a 	mov	r2,r21
   83cb0:	b027883a 	mov	r19,r22
   83cb4:	5821883a 	mov	r16,r11
   83cb8:	882b883a 	mov	r21,r17
   83cbc:	000d883a 	mov	r6,zero
   83cc0:	01d00934 	movhi	r7,16420
   83cc4:	1009883a 	mov	r4,r2
   83cc8:	180b883a 	mov	r5,r3
   83ccc:	0088b3c0 	call	88b3c <__muldf3>
   83cd0:	180b883a 	mov	r5,r3
   83cd4:	1009883a 	mov	r4,r2
   83cd8:	1829883a 	mov	r20,r3
   83cdc:	1023883a 	mov	r17,r2
   83ce0:	00892840 	call	89284 <__fixdfsi>
   83ce4:	1009883a 	mov	r4,r2
   83ce8:	1025883a 	mov	r18,r2
   83cec:	00891b00 	call	891b0 <__floatsidf>
   83cf0:	8809883a 	mov	r4,r17
   83cf4:	a00b883a 	mov	r5,r20
   83cf8:	100d883a 	mov	r6,r2
   83cfc:	180f883a 	mov	r7,r3
   83d00:	94800c04 	addi	r18,r18,48
   83d04:	0088adc0 	call	88adc <__subdf3>
   83d08:	9cc00044 	addi	r19,r19,1
   83d0c:	9cbfffc5 	stb	r18,-1(r19)
   83d10:	9c3fea1e 	bne	r19,r16,83cbc <_dtoa_r+0x13a0>
   83d14:	1815883a 	mov	r10,r3
   83d18:	d8c01017 	ldw	r3,64(sp)
   83d1c:	dc001417 	ldw	r16,80(sp)
   83d20:	a823883a 	mov	r17,r21
   83d24:	b0ed883a 	add	r22,r22,r3
   83d28:	102b883a 	mov	r21,r2
   83d2c:	d9001117 	ldw	r4,68(sp)
   83d30:	d9401217 	ldw	r5,72(sp)
   83d34:	000d883a 	mov	r6,zero
   83d38:	01cff834 	movhi	r7,16352
   83d3c:	da801515 	stw	r10,84(sp)
   83d40:	0088a880 	call	88a88 <__adddf3>
   83d44:	da801517 	ldw	r10,84(sp)
   83d48:	1009883a 	mov	r4,r2
   83d4c:	180b883a 	mov	r5,r3
   83d50:	500f883a 	mov	r7,r10
   83d54:	a80d883a 	mov	r6,r21
   83d58:	00891540 	call	89154 <__ltdf2>
   83d5c:	da801517 	ldw	r10,84(sp)
   83d60:	10003b0e 	bge	r2,zero,83e50 <_dtoa_r+0x1534>
   83d64:	d9c01317 	ldw	r7,76(sp)
   83d68:	b53fffc3 	ldbu	r20,-1(r22)
   83d6c:	d9c00615 	stw	r7,24(sp)
   83d70:	003d3106 	br	83238 <_dtoa_r+0x91c>
   83d74:	d8800817 	ldw	r2,32(sp)
   83d78:	11e5c83a 	sub	r18,r2,r7
   83d7c:	0005883a 	mov	r2,zero
   83d80:	003d5006 	br	832c4 <_dtoa_r+0x9a8>
   83d84:	05800044 	movi	r22,1
   83d88:	003dc406 	br	8349c <_dtoa_r+0xb80>
   83d8c:	a5000044 	addi	r20,r20,1
   83d90:	15000005 	stb	r20,0(r2)
   83d94:	003c8206 	br	82fa0 <_dtoa_r+0x684>
   83d98:	d8800217 	ldw	r2,8(sp)
   83d9c:	00c00d84 	movi	r3,54
   83da0:	dcc00a17 	ldw	r19,40(sp)
   83da4:	1885c83a 	sub	r2,r3,r2
   83da8:	dc800817 	ldw	r18,32(sp)
   83dac:	003d4506 	br	832c4 <_dtoa_r+0x9a8>
   83db0:	dcc00317 	ldw	r19,12(sp)
   83db4:	8829883a 	mov	r20,r17
   83db8:	04800084 	movi	r18,2
   83dbc:	003bea06 	br	82d68 <_dtoa_r+0x44c>
   83dc0:	d9000917 	ldw	r4,36(sp)
   83dc4:	203f1126 	beq	r4,zero,83a0c <_dtoa_r+0x10f0>
   83dc8:	d9c00e17 	ldw	r7,56(sp)
   83dcc:	01fca20e 	bge	zero,r7,83058 <_dtoa_r+0x73c>
   83dd0:	a00b883a 	mov	r5,r20
   83dd4:	9809883a 	mov	r4,r19
   83dd8:	000d883a 	mov	r6,zero
   83ddc:	01d00934 	movhi	r7,16420
   83de0:	0088b3c0 	call	88b3c <__muldf3>
   83de4:	91000044 	addi	r4,r18,1
   83de8:	1027883a 	mov	r19,r2
   83dec:	1829883a 	mov	r20,r3
   83df0:	00891b00 	call	891b0 <__floatsidf>
   83df4:	9809883a 	mov	r4,r19
   83df8:	a00b883a 	mov	r5,r20
   83dfc:	100d883a 	mov	r6,r2
   83e00:	180f883a 	mov	r7,r3
   83e04:	0088b3c0 	call	88b3c <__muldf3>
   83e08:	1009883a 	mov	r4,r2
   83e0c:	180b883a 	mov	r5,r3
   83e10:	000d883a 	mov	r6,zero
   83e14:	01d00734 	movhi	r7,16412
   83e18:	0088a880 	call	88a88 <__adddf3>
   83e1c:	1025883a 	mov	r18,r2
   83e20:	d8800617 	ldw	r2,24(sp)
   83e24:	057f3034 	movhi	r21,64704
   83e28:	1d6b883a 	add	r21,r3,r21
   83e2c:	10bfffc4 	addi	r2,r2,-1
   83e30:	d8801315 	stw	r2,76(sp)
   83e34:	dac00e17 	ldw	r11,56(sp)
   83e38:	003be706 	br	82dd8 <_dtoa_r+0x4bc>
   83e3c:	01000e44 	movi	r4,57
   83e40:	91000005 	stb	r4,0(r18)
   83e44:	95800044 	addi	r22,r18,1
   83e48:	982b883a 	mov	r21,r19
   83e4c:	003da106 	br	834d4 <_dtoa_r+0xbb8>
   83e50:	d9801117 	ldw	r6,68(sp)
   83e54:	d9c01217 	ldw	r7,72(sp)
   83e58:	0009883a 	mov	r4,zero
   83e5c:	014ff834 	movhi	r5,16352
   83e60:	da801515 	stw	r10,84(sp)
   83e64:	0088adc0 	call	88adc <__subdf3>
   83e68:	da801517 	ldw	r10,84(sp)
   83e6c:	1009883a 	mov	r4,r2
   83e70:	180b883a 	mov	r5,r3
   83e74:	a80d883a 	mov	r6,r21
   83e78:	500f883a 	mov	r7,r10
   83e7c:	008908c0 	call	8908c <__gtdf2>
   83e80:	00bc750e 	bge	zero,r2,83058 <_dtoa_r+0x73c>
   83e84:	01000c04 	movi	r4,48
   83e88:	00000106 	br	83e90 <_dtoa_r+0x1574>
   83e8c:	102d883a 	mov	r22,r2
   83e90:	b0bfffc4 	addi	r2,r22,-1
   83e94:	10c00007 	ldb	r3,0(r2)
   83e98:	193ffc26 	beq	r3,r4,83e8c <_dtoa_r+0x1570>
   83e9c:	d8801317 	ldw	r2,76(sp)
   83ea0:	d8800615 	stw	r2,24(sp)
   83ea4:	003c3e06 	br	82fa0 <_dtoa_r+0x684>
   83ea8:	d9001317 	ldw	r4,76(sp)
   83eac:	df001117 	ldw	fp,68(sp)
   83eb0:	d9000615 	stw	r4,24(sp)
   83eb4:	003ce006 	br	83238 <_dtoa_r+0x91c>
   83eb8:	df001117 	ldw	fp,68(sp)
   83ebc:	dc401217 	ldw	r17,72(sp)
   83ec0:	003c6506 	br	83058 <_dtoa_r+0x73c>
   83ec4:	103e7a1e 	bne	r2,zero,838b0 <_dtoa_r+0xf94>
   83ec8:	1880004c 	andi	r2,r3,1
   83ecc:	103e7826 	beq	r2,zero,838b0 <_dtoa_r+0xf94>
   83ed0:	003e7406 	br	838a4 <_dtoa_r+0xf88>
   83ed4:	8009883a 	mov	r4,r16
   83ed8:	a80b883a 	mov	r5,r21
   83edc:	01800284 	movi	r6,10
   83ee0:	000f883a 	mov	r7,zero
   83ee4:	0085e040 	call	85e04 <__multadd>
   83ee8:	d9000e17 	ldw	r4,56(sp)
   83eec:	102b883a 	mov	r21,r2
   83ef0:	d9000915 	stw	r4,36(sp)
   83ef4:	003d5106 	br	8343c <_dtoa_r+0xb20>
   83ef8:	04800084 	movi	r18,2
   83efc:	003b9a06 	br	82d68 <_dtoa_r+0x44c>
   83f00:	d8c01317 	ldw	r3,76(sp)
   83f04:	d8c00615 	stw	r3,24(sp)
   83f08:	003ccb06 	br	83238 <_dtoa_r+0x91c>
   83f0c:	d8c01317 	ldw	r3,76(sp)
   83f10:	d8c00615 	stw	r3,24(sp)
   83f14:	003c2206 	br	82fa0 <_dtoa_r+0x684>
   83f18:	20fd3826 	beq	r4,r3,833fc <_dtoa_r+0xae0>
   83f1c:	00c00f04 	movi	r3,60
   83f20:	1885c83a 	sub	r2,r3,r2
   83f24:	003da906 	br	835cc <_dtoa_r+0xcb0>
   83f28:	000b883a 	mov	r5,zero
   83f2c:	003b5406 	br	82c80 <_dtoa_r+0x364>
   83f30:	04c00044 	movi	r19,1
   83f34:	003b3b06 	br	82c24 <_dtoa_r+0x308>

00083f38 <_fflush_r>:
   83f38:	defffb04 	addi	sp,sp,-20
   83f3c:	dcc00315 	stw	r19,12(sp)
   83f40:	dc400115 	stw	r17,4(sp)
   83f44:	dfc00415 	stw	ra,16(sp)
   83f48:	dc800215 	stw	r18,8(sp)
   83f4c:	dc000015 	stw	r16,0(sp)
   83f50:	2027883a 	mov	r19,r4
   83f54:	2823883a 	mov	r17,r5
   83f58:	20000226 	beq	r4,zero,83f64 <_fflush_r+0x2c>
   83f5c:	20800e17 	ldw	r2,56(r4)
   83f60:	10005726 	beq	r2,zero,840c0 <_fflush_r+0x188>
   83f64:	8880030b 	ldhu	r2,12(r17)
   83f68:	10c0020c 	andi	r3,r2,8
   83f6c:	18ffffcc 	andi	r3,r3,65535
   83f70:	18e0001c 	xori	r3,r3,32768
   83f74:	18e00004 	addi	r3,r3,-32768
   83f78:	1800311e 	bne	r3,zero,84040 <_fflush_r+0x108>
   83f7c:	89000117 	ldw	r4,4(r17)
   83f80:	10c20014 	ori	r3,r2,2048
   83f84:	88c0030d 	sth	r3,12(r17)
   83f88:	180b883a 	mov	r5,r3
   83f8c:	0100520e 	bge	zero,r4,840d8 <_fflush_r+0x1a0>
   83f90:	88c00a17 	ldw	r3,40(r17)
   83f94:	18002226 	beq	r3,zero,84020 <_fflush_r+0xe8>
   83f98:	1084000c 	andi	r2,r2,4096
   83f9c:	10bfffcc 	andi	r2,r2,65535
   83fa0:	10a0001c 	xori	r2,r2,32768
   83fa4:	10a00004 	addi	r2,r2,-32768
   83fa8:	10004e26 	beq	r2,zero,840e4 <_fflush_r+0x1ac>
   83fac:	8c001417 	ldw	r16,80(r17)
   83fb0:	2940010c 	andi	r5,r5,4
   83fb4:	297fffcc 	andi	r5,r5,65535
   83fb8:	2960001c 	xori	r5,r5,32768
   83fbc:	29600004 	addi	r5,r5,-32768
   83fc0:	28000626 	beq	r5,zero,83fdc <_fflush_r+0xa4>
   83fc4:	89000117 	ldw	r4,4(r17)
   83fc8:	88800c17 	ldw	r2,48(r17)
   83fcc:	8121c83a 	sub	r16,r16,r4
   83fd0:	10000226 	beq	r2,zero,83fdc <_fflush_r+0xa4>
   83fd4:	88800f17 	ldw	r2,60(r17)
   83fd8:	80a1c83a 	sub	r16,r16,r2
   83fdc:	89400717 	ldw	r5,28(r17)
   83fe0:	9809883a 	mov	r4,r19
   83fe4:	800d883a 	mov	r6,r16
   83fe8:	000f883a 	mov	r7,zero
   83fec:	183ee83a 	callr	r3
   83ff0:	8080281e 	bne	r16,r2,84094 <_fflush_r+0x15c>
   83ff4:	8880030b 	ldhu	r2,12(r17)
   83ff8:	88c00417 	ldw	r3,16(r17)
   83ffc:	88000115 	stw	zero,4(r17)
   84000:	113dffcc 	andi	r4,r2,63487
   84004:	1084000c 	andi	r2,r2,4096
   84008:	10bfffcc 	andi	r2,r2,65535
   8400c:	10a0001c 	xori	r2,r2,32768
   84010:	8900030d 	sth	r4,12(r17)
   84014:	88c00015 	stw	r3,0(r17)
   84018:	10a00004 	addi	r2,r2,-32768
   8401c:	10002c1e 	bne	r2,zero,840d0 <_fflush_r+0x198>
   84020:	0005883a 	mov	r2,zero
   84024:	dfc00417 	ldw	ra,16(sp)
   84028:	dcc00317 	ldw	r19,12(sp)
   8402c:	dc800217 	ldw	r18,8(sp)
   84030:	dc400117 	ldw	r17,4(sp)
   84034:	dc000017 	ldw	r16,0(sp)
   84038:	dec00504 	addi	sp,sp,20
   8403c:	f800283a 	ret
   84040:	8c800417 	ldw	r18,16(r17)
   84044:	903ff626 	beq	r18,zero,84020 <_fflush_r+0xe8>
   84048:	8c000017 	ldw	r16,0(r17)
   8404c:	108000cc 	andi	r2,r2,3
   84050:	8c800015 	stw	r18,0(r17)
   84054:	84a1c83a 	sub	r16,r16,r18
   84058:	10001b1e 	bne	r2,zero,840c8 <_fflush_r+0x190>
   8405c:	88800517 	ldw	r2,20(r17)
   84060:	88800215 	stw	r2,8(r17)
   84064:	04000316 	blt	zero,r16,84074 <_fflush_r+0x13c>
   84068:	003fed06 	br	84020 <_fflush_r+0xe8>
   8406c:	90a5883a 	add	r18,r18,r2
   84070:	043feb0e 	bge	zero,r16,84020 <_fflush_r+0xe8>
   84074:	88800917 	ldw	r2,36(r17)
   84078:	89400717 	ldw	r5,28(r17)
   8407c:	800f883a 	mov	r7,r16
   84080:	900d883a 	mov	r6,r18
   84084:	9809883a 	mov	r4,r19
   84088:	103ee83a 	callr	r2
   8408c:	80a1c83a 	sub	r16,r16,r2
   84090:	00bff616 	blt	zero,r2,8406c <_fflush_r+0x134>
   84094:	88c0030b 	ldhu	r3,12(r17)
   84098:	00bfffc4 	movi	r2,-1
   8409c:	18c01014 	ori	r3,r3,64
   840a0:	88c0030d 	sth	r3,12(r17)
   840a4:	dfc00417 	ldw	ra,16(sp)
   840a8:	dcc00317 	ldw	r19,12(sp)
   840ac:	dc800217 	ldw	r18,8(sp)
   840b0:	dc400117 	ldw	r17,4(sp)
   840b4:	dc000017 	ldw	r16,0(sp)
   840b8:	dec00504 	addi	sp,sp,20
   840bc:	f800283a 	ret
   840c0:	00841f40 	call	841f4 <__sinit>
   840c4:	003fa706 	br	83f64 <_fflush_r+0x2c>
   840c8:	0005883a 	mov	r2,zero
   840cc:	003fe406 	br	84060 <_fflush_r+0x128>
   840d0:	8c001415 	stw	r16,80(r17)
   840d4:	003fd206 	br	84020 <_fflush_r+0xe8>
   840d8:	88c00f17 	ldw	r3,60(r17)
   840dc:	00ffac16 	blt	zero,r3,83f90 <_fflush_r+0x58>
   840e0:	003fcf06 	br	84020 <_fflush_r+0xe8>
   840e4:	89400717 	ldw	r5,28(r17)
   840e8:	9809883a 	mov	r4,r19
   840ec:	000d883a 	mov	r6,zero
   840f0:	01c00044 	movi	r7,1
   840f4:	183ee83a 	callr	r3
   840f8:	1021883a 	mov	r16,r2
   840fc:	00bfffc4 	movi	r2,-1
   84100:	80800326 	beq	r16,r2,84110 <_fflush_r+0x1d8>
   84104:	8940030b 	ldhu	r5,12(r17)
   84108:	88c00a17 	ldw	r3,40(r17)
   8410c:	003fa806 	br	83fb0 <_fflush_r+0x78>
   84110:	98c00017 	ldw	r3,0(r19)
   84114:	00800744 	movi	r2,29
   84118:	18bfde1e 	bne	r3,r2,84094 <_fflush_r+0x15c>
   8411c:	003fc006 	br	84020 <_fflush_r+0xe8>

00084120 <fflush>:
   84120:	200b883a 	mov	r5,r4
   84124:	20000426 	beq	r4,zero,84138 <fflush+0x18>
   84128:	00800274 	movhi	r2,9
   8412c:	10ba9504 	addi	r2,r2,-5548
   84130:	11000017 	ldw	r4,0(r2)
   84134:	0083f381 	jmpi	83f38 <_fflush_r>
   84138:	00800274 	movhi	r2,9
   8413c:	10ba9404 	addi	r2,r2,-5552
   84140:	11000017 	ldw	r4,0(r2)
   84144:	01400234 	movhi	r5,8
   84148:	294fce04 	addi	r5,r5,16184
   8414c:	0084dd41 	jmpi	84dd4 <_fwalk_reent>

00084150 <__fp_lock>:
   84150:	0005883a 	mov	r2,zero
   84154:	f800283a 	ret

00084158 <__fp_unlock>:
   84158:	0005883a 	mov	r2,zero
   8415c:	f800283a 	ret

00084160 <_cleanup_r>:
   84160:	01400234 	movhi	r5,8
   84164:	295e4104 	addi	r5,r5,30980
   84168:	0084d2c1 	jmpi	84d2c <_fwalk>

0008416c <__sfmoreglue>:
   8416c:	defffc04 	addi	sp,sp,-16
   84170:	dc800215 	stw	r18,8(sp)
   84174:	2825883a 	mov	r18,r5
   84178:	dc000015 	stw	r16,0(sp)
   8417c:	01401704 	movi	r5,92
   84180:	2021883a 	mov	r16,r4
   84184:	9009883a 	mov	r4,r18
   84188:	dfc00315 	stw	ra,12(sp)
   8418c:	dc400115 	stw	r17,4(sp)
   84190:	00894740 	call	89474 <__mulsi3>
   84194:	8009883a 	mov	r4,r16
   84198:	11400304 	addi	r5,r2,12
   8419c:	1023883a 	mov	r17,r2
   841a0:	00851100 	call	85110 <_malloc_r>
   841a4:	1021883a 	mov	r16,r2
   841a8:	10000726 	beq	r2,zero,841c8 <__sfmoreglue+0x5c>
   841ac:	11000304 	addi	r4,r2,12
   841b0:	10000015 	stw	zero,0(r2)
   841b4:	14800115 	stw	r18,4(r2)
   841b8:	11000215 	stw	r4,8(r2)
   841bc:	000b883a 	mov	r5,zero
   841c0:	880d883a 	mov	r6,r17
   841c4:	0085c580 	call	85c58 <memset>
   841c8:	8005883a 	mov	r2,r16
   841cc:	dfc00317 	ldw	ra,12(sp)
   841d0:	dc800217 	ldw	r18,8(sp)
   841d4:	dc400117 	ldw	r17,4(sp)
   841d8:	dc000017 	ldw	r16,0(sp)
   841dc:	dec00404 	addi	sp,sp,16
   841e0:	f800283a 	ret

000841e4 <_cleanup>:
   841e4:	00800274 	movhi	r2,9
   841e8:	10ba9404 	addi	r2,r2,-5552
   841ec:	11000017 	ldw	r4,0(r2)
   841f0:	00841601 	jmpi	84160 <_cleanup_r>

000841f4 <__sinit>:
   841f4:	20800e17 	ldw	r2,56(r4)
   841f8:	1000401e 	bne	r2,zero,842fc <__sinit+0x108>
   841fc:	21400117 	ldw	r5,4(r4)
   84200:	01800234 	movhi	r6,8
   84204:	31905804 	addi	r6,r6,16736
   84208:	20c00217 	ldw	r3,8(r4)
   8420c:	21800f15 	stw	r6,60(r4)
   84210:	2080bb04 	addi	r2,r4,748
   84214:	02400044 	movi	r9,1
   84218:	018000c4 	movi	r6,3
   8421c:	2180b915 	stw	r6,740(r4)
   84220:	2080ba15 	stw	r2,744(r4)
   84224:	22400e15 	stw	r9,56(r4)
   84228:	20800317 	ldw	r2,12(r4)
   8422c:	2000b815 	stw	zero,736(r4)
   84230:	02000234 	movhi	r8,8
   84234:	421d1204 	addi	r8,r8,29768
   84238:	01c00234 	movhi	r7,8
   8423c:	39dd2704 	addi	r7,r7,29852
   84240:	01800234 	movhi	r6,8
   84244:	319d4904 	addi	r6,r6,29988
   84248:	01000234 	movhi	r4,8
   8424c:	211d6004 	addi	r4,r4,30080
   84250:	02800104 	movi	r10,4
   84254:	28000015 	stw	zero,0(r5)
   84258:	28000115 	stw	zero,4(r5)
   8425c:	28000215 	stw	zero,8(r5)
   84260:	2a80030d 	sth	r10,12(r5)
   84264:	2800038d 	sth	zero,14(r5)
   84268:	28000415 	stw	zero,16(r5)
   8426c:	28000515 	stw	zero,20(r5)
   84270:	28000615 	stw	zero,24(r5)
   84274:	29400715 	stw	r5,28(r5)
   84278:	2a000815 	stw	r8,32(r5)
   8427c:	29c00915 	stw	r7,36(r5)
   84280:	29800a15 	stw	r6,40(r5)
   84284:	29000b15 	stw	r4,44(r5)
   84288:	01400284 	movi	r5,10
   8428c:	18000015 	stw	zero,0(r3)
   84290:	18000115 	stw	zero,4(r3)
   84294:	18000215 	stw	zero,8(r3)
   84298:	1940030d 	sth	r5,12(r3)
   8429c:	1a40038d 	sth	r9,14(r3)
   842a0:	18000415 	stw	zero,16(r3)
   842a4:	18000515 	stw	zero,20(r3)
   842a8:	18000615 	stw	zero,24(r3)
   842ac:	18c00715 	stw	r3,28(r3)
   842b0:	1a000815 	stw	r8,32(r3)
   842b4:	19c00915 	stw	r7,36(r3)
   842b8:	19800a15 	stw	r6,40(r3)
   842bc:	19000b15 	stw	r4,44(r3)
   842c0:	00c00484 	movi	r3,18
   842c4:	10c0030d 	sth	r3,12(r2)
   842c8:	00c00084 	movi	r3,2
   842cc:	10000015 	stw	zero,0(r2)
   842d0:	10000115 	stw	zero,4(r2)
   842d4:	10000215 	stw	zero,8(r2)
   842d8:	10c0038d 	sth	r3,14(r2)
   842dc:	10000415 	stw	zero,16(r2)
   842e0:	10000515 	stw	zero,20(r2)
   842e4:	10000615 	stw	zero,24(r2)
   842e8:	10800715 	stw	r2,28(r2)
   842ec:	12000815 	stw	r8,32(r2)
   842f0:	11c00915 	stw	r7,36(r2)
   842f4:	11800a15 	stw	r6,40(r2)
   842f8:	11000b15 	stw	r4,44(r2)
   842fc:	f800283a 	ret

00084300 <__sfp>:
   84300:	defffc04 	addi	sp,sp,-16
   84304:	00800274 	movhi	r2,9
   84308:	10ba9404 	addi	r2,r2,-5552
   8430c:	dc400115 	stw	r17,4(sp)
   84310:	14400017 	ldw	r17,0(r2)
   84314:	dc800215 	stw	r18,8(sp)
   84318:	dfc00315 	stw	ra,12(sp)
   8431c:	88800e17 	ldw	r2,56(r17)
   84320:	dc000015 	stw	r16,0(sp)
   84324:	2025883a 	mov	r18,r4
   84328:	10002826 	beq	r2,zero,843cc <__sfp+0xcc>
   8432c:	8c40b804 	addi	r17,r17,736
   84330:	043fffc4 	movi	r16,-1
   84334:	89400117 	ldw	r5,4(r17)
   84338:	88800217 	ldw	r2,8(r17)
   8433c:	297fffc4 	addi	r5,r5,-1
   84340:	28000a16 	blt	r5,zero,8436c <__sfp+0x6c>
   84344:	10c0030f 	ldh	r3,12(r2)
   84348:	18000c26 	beq	r3,zero,8437c <__sfp+0x7c>
   8434c:	10c01a04 	addi	r3,r2,104
   84350:	00000206 	br	8435c <__sfp+0x5c>
   84354:	19bfe90f 	ldh	r6,-92(r3)
   84358:	30000826 	beq	r6,zero,8437c <__sfp+0x7c>
   8435c:	297fffc4 	addi	r5,r5,-1
   84360:	18bffd04 	addi	r2,r3,-12
   84364:	18c01704 	addi	r3,r3,92
   84368:	2c3ffa1e 	bne	r5,r16,84354 <__sfp+0x54>
   8436c:	88800017 	ldw	r2,0(r17)
   84370:	10001926 	beq	r2,zero,843d8 <__sfp+0xd8>
   84374:	1023883a 	mov	r17,r2
   84378:	003fee06 	br	84334 <__sfp+0x34>
   8437c:	00ffffc4 	movi	r3,-1
   84380:	10c0038d 	sth	r3,14(r2)
   84384:	00c00044 	movi	r3,1
   84388:	10c0030d 	sth	r3,12(r2)
   8438c:	10000015 	stw	zero,0(r2)
   84390:	10000215 	stw	zero,8(r2)
   84394:	10000115 	stw	zero,4(r2)
   84398:	10000415 	stw	zero,16(r2)
   8439c:	10000515 	stw	zero,20(r2)
   843a0:	10000615 	stw	zero,24(r2)
   843a4:	10000c15 	stw	zero,48(r2)
   843a8:	10000d15 	stw	zero,52(r2)
   843ac:	10001115 	stw	zero,68(r2)
   843b0:	10001215 	stw	zero,72(r2)
   843b4:	dfc00317 	ldw	ra,12(sp)
   843b8:	dc800217 	ldw	r18,8(sp)
   843bc:	dc400117 	ldw	r17,4(sp)
   843c0:	dc000017 	ldw	r16,0(sp)
   843c4:	dec00404 	addi	sp,sp,16
   843c8:	f800283a 	ret
   843cc:	8809883a 	mov	r4,r17
   843d0:	00841f40 	call	841f4 <__sinit>
   843d4:	003fd506 	br	8432c <__sfp+0x2c>
   843d8:	9009883a 	mov	r4,r18
   843dc:	01400104 	movi	r5,4
   843e0:	008416c0 	call	8416c <__sfmoreglue>
   843e4:	88800015 	stw	r2,0(r17)
   843e8:	103fe21e 	bne	r2,zero,84374 <__sfp+0x74>
   843ec:	00800304 	movi	r2,12
   843f0:	90800015 	stw	r2,0(r18)
   843f4:	0005883a 	mov	r2,zero
   843f8:	003fee06 	br	843b4 <__sfp+0xb4>

000843fc <__sfp_lock_acquire>:
   843fc:	f800283a 	ret

00084400 <__sfp_lock_release>:
   84400:	f800283a 	ret

00084404 <__sinit_lock_acquire>:
   84404:	f800283a 	ret

00084408 <__sinit_lock_release>:
   84408:	f800283a 	ret

0008440c <__fp_lock_all>:
   8440c:	00800274 	movhi	r2,9
   84410:	10ba9504 	addi	r2,r2,-5548
   84414:	11000017 	ldw	r4,0(r2)
   84418:	01400234 	movhi	r5,8
   8441c:	29505404 	addi	r5,r5,16720
   84420:	0084d2c1 	jmpi	84d2c <_fwalk>

00084424 <__fp_unlock_all>:
   84424:	00800274 	movhi	r2,9
   84428:	10ba9504 	addi	r2,r2,-5548
   8442c:	11000017 	ldw	r4,0(r2)
   84430:	01400234 	movhi	r5,8
   84434:	29505604 	addi	r5,r5,16728
   84438:	0084d2c1 	jmpi	84d2c <_fwalk>

0008443c <_malloc_trim_r>:
   8443c:	defffb04 	addi	sp,sp,-20
   84440:	dcc00315 	stw	r19,12(sp)
   84444:	dc800215 	stw	r18,8(sp)
   84448:	dc400115 	stw	r17,4(sp)
   8444c:	dc000015 	stw	r16,0(sp)
   84450:	2827883a 	mov	r19,r5
   84454:	dfc00415 	stw	ra,16(sp)
   84458:	04400274 	movhi	r17,9
   8445c:	8c74df04 	addi	r17,r17,-11396
   84460:	2021883a 	mov	r16,r4
   84464:	008a09c0 	call	8a09c <__malloc_lock>
   84468:	88800217 	ldw	r2,8(r17)
   8446c:	14800117 	ldw	r18,4(r2)
   84470:	00bfff04 	movi	r2,-4
   84474:	90a4703a 	and	r18,r18,r2
   84478:	9083fbc4 	addi	r2,r18,4079
   8447c:	14e7c83a 	sub	r19,r2,r19
   84480:	9826d33a 	srli	r19,r19,12
   84484:	0083ffc4 	movi	r2,4095
   84488:	9cffffc4 	addi	r19,r19,-1
   8448c:	9826933a 	slli	r19,r19,12
   84490:	14c0060e 	bge	r2,r19,844ac <_malloc_trim_r+0x70>
   84494:	8009883a 	mov	r4,r16
   84498:	000b883a 	mov	r5,zero
   8449c:	00873e40 	call	873e4 <_sbrk_r>
   844a0:	88c00217 	ldw	r3,8(r17)
   844a4:	1c87883a 	add	r3,r3,r18
   844a8:	10c00a26 	beq	r2,r3,844d4 <_malloc_trim_r+0x98>
   844ac:	8009883a 	mov	r4,r16
   844b0:	008a0bc0 	call	8a0bc <__malloc_unlock>
   844b4:	0005883a 	mov	r2,zero
   844b8:	dfc00417 	ldw	ra,16(sp)
   844bc:	dcc00317 	ldw	r19,12(sp)
   844c0:	dc800217 	ldw	r18,8(sp)
   844c4:	dc400117 	ldw	r17,4(sp)
   844c8:	dc000017 	ldw	r16,0(sp)
   844cc:	dec00504 	addi	sp,sp,20
   844d0:	f800283a 	ret
   844d4:	8009883a 	mov	r4,r16
   844d8:	04cbc83a 	sub	r5,zero,r19
   844dc:	00873e40 	call	873e4 <_sbrk_r>
   844e0:	00ffffc4 	movi	r3,-1
   844e4:	10c01326 	beq	r2,r3,84534 <_malloc_trim_r+0xf8>
   844e8:	00800274 	movhi	r2,9
   844ec:	10817704 	addi	r2,r2,1500
   844f0:	11000017 	ldw	r4,0(r2)
   844f4:	88c00217 	ldw	r3,8(r17)
   844f8:	94e5c83a 	sub	r18,r18,r19
   844fc:	94800054 	ori	r18,r18,1
   84500:	24e7c83a 	sub	r19,r4,r19
   84504:	1c800115 	stw	r18,4(r3)
   84508:	8009883a 	mov	r4,r16
   8450c:	14c00015 	stw	r19,0(r2)
   84510:	008a0bc0 	call	8a0bc <__malloc_unlock>
   84514:	00800044 	movi	r2,1
   84518:	dfc00417 	ldw	ra,16(sp)
   8451c:	dcc00317 	ldw	r19,12(sp)
   84520:	dc800217 	ldw	r18,8(sp)
   84524:	dc400117 	ldw	r17,4(sp)
   84528:	dc000017 	ldw	r16,0(sp)
   8452c:	dec00504 	addi	sp,sp,20
   84530:	f800283a 	ret
   84534:	8009883a 	mov	r4,r16
   84538:	000b883a 	mov	r5,zero
   8453c:	00873e40 	call	873e4 <_sbrk_r>
   84540:	88c00217 	ldw	r3,8(r17)
   84544:	014003c4 	movi	r5,15
   84548:	10c9c83a 	sub	r4,r2,r3
   8454c:	293fd70e 	bge	r5,r4,844ac <_malloc_trim_r+0x70>
   84550:	01400274 	movhi	r5,9
   84554:	297a9704 	addi	r5,r5,-5540
   84558:	29400017 	ldw	r5,0(r5)
   8455c:	21000054 	ori	r4,r4,1
   84560:	19000115 	stw	r4,4(r3)
   84564:	1145c83a 	sub	r2,r2,r5
   84568:	01400274 	movhi	r5,9
   8456c:	29417704 	addi	r5,r5,1500
   84570:	28800015 	stw	r2,0(r5)
   84574:	003fcd06 	br	844ac <_malloc_trim_r+0x70>

00084578 <_free_r>:
   84578:	defffd04 	addi	sp,sp,-12
   8457c:	dc400115 	stw	r17,4(sp)
   84580:	dc000015 	stw	r16,0(sp)
   84584:	dfc00215 	stw	ra,8(sp)
   84588:	2821883a 	mov	r16,r5
   8458c:	2023883a 	mov	r17,r4
   84590:	28004b26 	beq	r5,zero,846c0 <_free_r+0x148>
   84594:	008a09c0 	call	8a09c <__malloc_lock>
   84598:	823fff17 	ldw	r8,-4(r16)
   8459c:	00bfff84 	movi	r2,-2
   845a0:	81bffe04 	addi	r6,r16,-8
   845a4:	4084703a 	and	r2,r8,r2
   845a8:	3087883a 	add	r3,r6,r2
   845ac:	01400274 	movhi	r5,9
   845b0:	2974df04 	addi	r5,r5,-11396
   845b4:	1a400117 	ldw	r9,4(r3)
   845b8:	29000217 	ldw	r4,8(r5)
   845bc:	01ffff04 	movi	r7,-4
   845c0:	49ce703a 	and	r7,r9,r7
   845c4:	20c06526 	beq	r4,r3,8475c <_free_r+0x1e4>
   845c8:	19c00115 	stw	r7,4(r3)
   845cc:	4200004c 	andi	r8,r8,1
   845d0:	40003026 	beq	r8,zero,84694 <_free_r+0x11c>
   845d4:	0009883a 	mov	r4,zero
   845d8:	19d1883a 	add	r8,r3,r7
   845dc:	42000117 	ldw	r8,4(r8)
   845e0:	4200004c 	andi	r8,r8,1
   845e4:	4000061e 	bne	r8,zero,84600 <_free_r+0x88>
   845e8:	11c5883a 	add	r2,r2,r7
   845ec:	19c00217 	ldw	r7,8(r3)
   845f0:	20004e26 	beq	r4,zero,8472c <_free_r+0x1b4>
   845f4:	18c00317 	ldw	r3,12(r3)
   845f8:	38c00315 	stw	r3,12(r7)
   845fc:	19c00215 	stw	r7,8(r3)
   84600:	11c00054 	ori	r7,r2,1
   84604:	3087883a 	add	r3,r6,r2
   84608:	31c00115 	stw	r7,4(r6)
   8460c:	18800015 	stw	r2,0(r3)
   84610:	20001a1e 	bne	r4,zero,8467c <_free_r+0x104>
   84614:	00c07fc4 	movi	r3,511
   84618:	18802e2e 	bgeu	r3,r2,846d4 <_free_r+0x15c>
   8461c:	1006d27a 	srli	r3,r2,9
   84620:	01000104 	movi	r4,4
   84624:	20c06636 	bltu	r4,r3,847c0 <_free_r+0x248>
   84628:	1008d1ba 	srli	r4,r2,6
   8462c:	21000e04 	addi	r4,r4,56
   84630:	210f883a 	add	r7,r4,r4
   84634:	39cf883a 	add	r7,r7,r7
   84638:	39cf883a 	add	r7,r7,r7
   8463c:	29cf883a 	add	r7,r5,r7
   84640:	38c00217 	ldw	r3,8(r7)
   84644:	01400274 	movhi	r5,9
   84648:	2974df04 	addi	r5,r5,-11396
   8464c:	19c06126 	beq	r3,r7,847d4 <_free_r+0x25c>
   84650:	013fff04 	movi	r4,-4
   84654:	19400117 	ldw	r5,4(r3)
   84658:	290a703a 	and	r5,r5,r4
   8465c:	1140022e 	bgeu	r2,r5,84668 <_free_r+0xf0>
   84660:	18c00217 	ldw	r3,8(r3)
   84664:	38fffb1e 	bne	r7,r3,84654 <_free_r+0xdc>
   84668:	18800317 	ldw	r2,12(r3)
   8466c:	30800315 	stw	r2,12(r6)
   84670:	30c00215 	stw	r3,8(r6)
   84674:	11800215 	stw	r6,8(r2)
   84678:	19800315 	stw	r6,12(r3)
   8467c:	8809883a 	mov	r4,r17
   84680:	dfc00217 	ldw	ra,8(sp)
   84684:	dc400117 	ldw	r17,4(sp)
   84688:	dc000017 	ldw	r16,0(sp)
   8468c:	dec00304 	addi	sp,sp,12
   84690:	008a0bc1 	jmpi	8a0bc <__malloc_unlock>
   84694:	813ffe17 	ldw	r4,-8(r16)
   84698:	2a400204 	addi	r9,r5,8
   8469c:	310dc83a 	sub	r6,r6,r4
   846a0:	32000217 	ldw	r8,8(r6)
   846a4:	1105883a 	add	r2,r2,r4
   846a8:	42404326 	beq	r8,r9,847b8 <_free_r+0x240>
   846ac:	32400317 	ldw	r9,12(r6)
   846b0:	0009883a 	mov	r4,zero
   846b4:	42400315 	stw	r9,12(r8)
   846b8:	4a000215 	stw	r8,8(r9)
   846bc:	003fc606 	br	845d8 <_free_r+0x60>
   846c0:	dfc00217 	ldw	ra,8(sp)
   846c4:	dc400117 	ldw	r17,4(sp)
   846c8:	dc000017 	ldw	r16,0(sp)
   846cc:	dec00304 	addi	sp,sp,12
   846d0:	f800283a 	ret
   846d4:	1004d0fa 	srli	r2,r2,3
   846d8:	02000044 	movi	r8,1
   846dc:	29c00117 	ldw	r7,4(r5)
   846e0:	1087883a 	add	r3,r2,r2
   846e4:	18c7883a 	add	r3,r3,r3
   846e8:	1005d0ba 	srai	r2,r2,2
   846ec:	18c7883a 	add	r3,r3,r3
   846f0:	28c7883a 	add	r3,r5,r3
   846f4:	19000217 	ldw	r4,8(r3)
   846f8:	4084983a 	sll	r2,r8,r2
   846fc:	30c00315 	stw	r3,12(r6)
   84700:	31000215 	stw	r4,8(r6)
   84704:	11c4b03a 	or	r2,r2,r7
   84708:	21800315 	stw	r6,12(r4)
   8470c:	8809883a 	mov	r4,r17
   84710:	28800115 	stw	r2,4(r5)
   84714:	19800215 	stw	r6,8(r3)
   84718:	dfc00217 	ldw	ra,8(sp)
   8471c:	dc400117 	ldw	r17,4(sp)
   84720:	dc000017 	ldw	r16,0(sp)
   84724:	dec00304 	addi	sp,sp,12
   84728:	008a0bc1 	jmpi	8a0bc <__malloc_unlock>
   8472c:	02000274 	movhi	r8,9
   84730:	4234e104 	addi	r8,r8,-11388
   84734:	3a3faf1e 	bne	r7,r8,845f4 <_free_r+0x7c>
   84738:	29800515 	stw	r6,20(r5)
   8473c:	29800415 	stw	r6,16(r5)
   84740:	11000054 	ori	r4,r2,1
   84744:	3087883a 	add	r3,r6,r2
   84748:	31c00315 	stw	r7,12(r6)
   8474c:	31c00215 	stw	r7,8(r6)
   84750:	31000115 	stw	r4,4(r6)
   84754:	18800015 	stw	r2,0(r3)
   84758:	003fc806 	br	8467c <_free_r+0x104>
   8475c:	4200004c 	andi	r8,r8,1
   84760:	3885883a 	add	r2,r7,r2
   84764:	4000071e 	bne	r8,zero,84784 <_free_r+0x20c>
   84768:	81fffe17 	ldw	r7,-8(r16)
   8476c:	31cdc83a 	sub	r6,r6,r7
   84770:	30c00317 	ldw	r3,12(r6)
   84774:	31000217 	ldw	r4,8(r6)
   84778:	11c5883a 	add	r2,r2,r7
   8477c:	20c00315 	stw	r3,12(r4)
   84780:	19000215 	stw	r4,8(r3)
   84784:	00c00274 	movhi	r3,9
   84788:	18fa9804 	addi	r3,r3,-5536
   8478c:	18c00017 	ldw	r3,0(r3)
   84790:	11000054 	ori	r4,r2,1
   84794:	31000115 	stw	r4,4(r6)
   84798:	29800215 	stw	r6,8(r5)
   8479c:	10ffb736 	bltu	r2,r3,8467c <_free_r+0x104>
   847a0:	00800274 	movhi	r2,9
   847a4:	10816f04 	addi	r2,r2,1468
   847a8:	11400017 	ldw	r5,0(r2)
   847ac:	8809883a 	mov	r4,r17
   847b0:	008443c0 	call	8443c <_malloc_trim_r>
   847b4:	003fb106 	br	8467c <_free_r+0x104>
   847b8:	01000044 	movi	r4,1
   847bc:	003f8606 	br	845d8 <_free_r+0x60>
   847c0:	01000504 	movi	r4,20
   847c4:	20c00b36 	bltu	r4,r3,847f4 <_free_r+0x27c>
   847c8:	190016c4 	addi	r4,r3,91
   847cc:	210f883a 	add	r7,r4,r4
   847d0:	003f9806 	br	84634 <_free_r+0xbc>
   847d4:	2009d0ba 	srai	r4,r4,2
   847d8:	00800044 	movi	r2,1
   847dc:	29c00117 	ldw	r7,4(r5)
   847e0:	1108983a 	sll	r4,r2,r4
   847e4:	1805883a 	mov	r2,r3
   847e8:	21c8b03a 	or	r4,r4,r7
   847ec:	29000115 	stw	r4,4(r5)
   847f0:	003f9e06 	br	8466c <_free_r+0xf4>
   847f4:	01001504 	movi	r4,84
   847f8:	20c00436 	bltu	r4,r3,8480c <_free_r+0x294>
   847fc:	1008d33a 	srli	r4,r2,12
   84800:	21001b84 	addi	r4,r4,110
   84804:	210f883a 	add	r7,r4,r4
   84808:	003f8a06 	br	84634 <_free_r+0xbc>
   8480c:	01005504 	movi	r4,340
   84810:	20c00436 	bltu	r4,r3,84824 <_free_r+0x2ac>
   84814:	1008d3fa 	srli	r4,r2,15
   84818:	21001dc4 	addi	r4,r4,119
   8481c:	210f883a 	add	r7,r4,r4
   84820:	003f8406 	br	84634 <_free_r+0xbc>
   84824:	01015504 	movi	r4,1364
   84828:	20c00436 	bltu	r4,r3,8483c <_free_r+0x2c4>
   8482c:	1008d4ba 	srli	r4,r2,18
   84830:	21001f04 	addi	r4,r4,124
   84834:	210f883a 	add	r7,r4,r4
   84838:	003f7e06 	br	84634 <_free_r+0xbc>
   8483c:	01c03f04 	movi	r7,252
   84840:	01001f84 	movi	r4,126
   84844:	003f7b06 	br	84634 <_free_r+0xbc>

00084848 <__sfvwrite_r>:
   84848:	30800217 	ldw	r2,8(r6)
   8484c:	defff504 	addi	sp,sp,-44
   84850:	dd400615 	stw	r21,24(sp)
   84854:	dd000515 	stw	r20,20(sp)
   84858:	dc000115 	stw	r16,4(sp)
   8485c:	dfc00a15 	stw	ra,40(sp)
   84860:	df000915 	stw	fp,36(sp)
   84864:	ddc00815 	stw	r23,32(sp)
   84868:	dd800715 	stw	r22,28(sp)
   8486c:	dcc00415 	stw	r19,16(sp)
   84870:	dc800315 	stw	r18,12(sp)
   84874:	dc400215 	stw	r17,8(sp)
   84878:	3029883a 	mov	r20,r6
   8487c:	202b883a 	mov	r21,r4
   84880:	2821883a 	mov	r16,r5
   84884:	10002126 	beq	r2,zero,8490c <__sfvwrite_r+0xc4>
   84888:	2880030b 	ldhu	r2,12(r5)
   8488c:	10c0020c 	andi	r3,r2,8
   84890:	18ffffcc 	andi	r3,r3,65535
   84894:	18e0001c 	xori	r3,r3,32768
   84898:	18e00004 	addi	r3,r3,-32768
   8489c:	18002826 	beq	r3,zero,84940 <__sfvwrite_r+0xf8>
   848a0:	28c00417 	ldw	r3,16(r5)
   848a4:	18002626 	beq	r3,zero,84940 <__sfvwrite_r+0xf8>
   848a8:	10c0008c 	andi	r3,r2,2
   848ac:	18ffffcc 	andi	r3,r3,65535
   848b0:	18e0001c 	xori	r3,r3,32768
   848b4:	18e00004 	addi	r3,r3,-32768
   848b8:	a4400017 	ldw	r17,0(r20)
   848bc:	18002b26 	beq	r3,zero,8496c <__sfvwrite_r+0x124>
   848c0:	0027883a 	mov	r19,zero
   848c4:	0025883a 	mov	r18,zero
   848c8:	05810004 	movi	r22,1024
   848cc:	980d883a 	mov	r6,r19
   848d0:	a809883a 	mov	r4,r21
   848d4:	90004f26 	beq	r18,zero,84a14 <__sfvwrite_r+0x1cc>
   848d8:	900f883a 	mov	r7,r18
   848dc:	81400717 	ldw	r5,28(r16)
   848e0:	b480012e 	bgeu	r22,r18,848e8 <__sfvwrite_r+0xa0>
   848e4:	01c10004 	movi	r7,1024
   848e8:	80800917 	ldw	r2,36(r16)
   848ec:	103ee83a 	callr	r2
   848f0:	0080540e 	bge	zero,r2,84a44 <__sfvwrite_r+0x1fc>
   848f4:	a0c00217 	ldw	r3,8(r20)
   848f8:	98a7883a 	add	r19,r19,r2
   848fc:	90a5c83a 	sub	r18,r18,r2
   84900:	1885c83a 	sub	r2,r3,r2
   84904:	a0800215 	stw	r2,8(r20)
   84908:	103ff01e 	bne	r2,zero,848cc <__sfvwrite_r+0x84>
   8490c:	0005883a 	mov	r2,zero
   84910:	dfc00a17 	ldw	ra,40(sp)
   84914:	df000917 	ldw	fp,36(sp)
   84918:	ddc00817 	ldw	r23,32(sp)
   8491c:	dd800717 	ldw	r22,28(sp)
   84920:	dd400617 	ldw	r21,24(sp)
   84924:	dd000517 	ldw	r20,20(sp)
   84928:	dcc00417 	ldw	r19,16(sp)
   8492c:	dc800317 	ldw	r18,12(sp)
   84930:	dc400217 	ldw	r17,8(sp)
   84934:	dc000117 	ldw	r16,4(sp)
   84938:	dec00b04 	addi	sp,sp,44
   8493c:	f800283a 	ret
   84940:	a809883a 	mov	r4,r21
   84944:	800b883a 	mov	r5,r16
   84948:	008256c0 	call	8256c <__swsetup_r>
   8494c:	1000f01e 	bne	r2,zero,84d10 <__sfvwrite_r+0x4c8>
   84950:	8080030b 	ldhu	r2,12(r16)
   84954:	a4400017 	ldw	r17,0(r20)
   84958:	10c0008c 	andi	r3,r2,2
   8495c:	18ffffcc 	andi	r3,r3,65535
   84960:	18e0001c 	xori	r3,r3,32768
   84964:	18e00004 	addi	r3,r3,-32768
   84968:	183fd51e 	bne	r3,zero,848c0 <__sfvwrite_r+0x78>
   8496c:	10c0004c 	andi	r3,r2,1
   84970:	002d883a 	mov	r22,zero
   84974:	1800381e 	bne	r3,zero,84a58 <__sfvwrite_r+0x210>
   84978:	0025883a 	mov	r18,zero
   8497c:	90002126 	beq	r18,zero,84a04 <__sfvwrite_r+0x1bc>
   84980:	10c0800c 	andi	r3,r2,512
   84984:	18ffffcc 	andi	r3,r3,65535
   84988:	18e0001c 	xori	r3,r3,32768
   8498c:	18e00004 	addi	r3,r3,-32768
   84990:	84c00217 	ldw	r19,8(r16)
   84994:	18006b26 	beq	r3,zero,84b44 <__sfvwrite_r+0x2fc>
   84998:	980f883a 	mov	r7,r19
   8499c:	94c08636 	bltu	r18,r19,84bb8 <__sfvwrite_r+0x370>
   849a0:	10c1200c 	andi	r3,r2,1152
   849a4:	18009f1e 	bne	r3,zero,84c24 <__sfvwrite_r+0x3dc>
   849a8:	81000017 	ldw	r4,0(r16)
   849ac:	982f883a 	mov	r23,r19
   849b0:	9039883a 	mov	fp,r18
   849b4:	9027883a 	mov	r19,r18
   849b8:	380d883a 	mov	r6,r7
   849bc:	b00b883a 	mov	r5,r22
   849c0:	d9c00015 	stw	r7,0(sp)
   849c4:	0085acc0 	call	85acc <memmove>
   849c8:	d9c00017 	ldw	r7,0(sp)
   849cc:	81000217 	ldw	r4,8(r16)
   849d0:	80800017 	ldw	r2,0(r16)
   849d4:	25efc83a 	sub	r23,r4,r23
   849d8:	11cf883a 	add	r7,r2,r7
   849dc:	85c00215 	stw	r23,8(r16)
   849e0:	81c00015 	stw	r7,0(r16)
   849e4:	a0800217 	ldw	r2,8(r20)
   849e8:	b72d883a 	add	r22,r22,fp
   849ec:	9725c83a 	sub	r18,r18,fp
   849f0:	14e7c83a 	sub	r19,r2,r19
   849f4:	a4c00215 	stw	r19,8(r20)
   849f8:	983fc426 	beq	r19,zero,8490c <__sfvwrite_r+0xc4>
   849fc:	8080030b 	ldhu	r2,12(r16)
   84a00:	903fdf1e 	bne	r18,zero,84980 <__sfvwrite_r+0x138>
   84a04:	8d800017 	ldw	r22,0(r17)
   84a08:	8c800117 	ldw	r18,4(r17)
   84a0c:	8c400204 	addi	r17,r17,8
   84a10:	003fda06 	br	8497c <__sfvwrite_r+0x134>
   84a14:	8cc00017 	ldw	r19,0(r17)
   84a18:	8c800117 	ldw	r18,4(r17)
   84a1c:	8c400204 	addi	r17,r17,8
   84a20:	003faa06 	br	848cc <__sfvwrite_r+0x84>
   84a24:	0086d840 	call	86d84 <_realloc_r>
   84a28:	102f883a 	mov	r23,r2
   84a2c:	10009f1e 	bne	r2,zero,84cac <__sfvwrite_r+0x464>
   84a30:	81400417 	ldw	r5,16(r16)
   84a34:	a809883a 	mov	r4,r21
   84a38:	00845780 	call	84578 <_free_r>
   84a3c:	00800304 	movi	r2,12
   84a40:	a8800015 	stw	r2,0(r21)
   84a44:	80c0030b 	ldhu	r3,12(r16)
   84a48:	00bfffc4 	movi	r2,-1
   84a4c:	18c01014 	ori	r3,r3,64
   84a50:	80c0030d 	sth	r3,12(r16)
   84a54:	003fae06 	br	84910 <__sfvwrite_r+0xc8>
   84a58:	0007883a 	mov	r3,zero
   84a5c:	0039883a 	mov	fp,zero
   84a60:	0025883a 	mov	r18,zero
   84a64:	90001e26 	beq	r18,zero,84ae0 <__sfvwrite_r+0x298>
   84a68:	18006526 	beq	r3,zero,84c00 <__sfvwrite_r+0x3b8>
   84a6c:	b02f883a 	mov	r23,r22
   84a70:	9580012e 	bgeu	r18,r22,84a78 <__sfvwrite_r+0x230>
   84a74:	902f883a 	mov	r23,r18
   84a78:	81000017 	ldw	r4,0(r16)
   84a7c:	80800417 	ldw	r2,16(r16)
   84a80:	84c00217 	ldw	r19,8(r16)
   84a84:	81c00517 	ldw	r7,20(r16)
   84a88:	1100022e 	bgeu	r2,r4,84a94 <__sfvwrite_r+0x24c>
   84a8c:	99e7883a 	add	r19,r19,r7
   84a90:	9dc01816 	blt	r19,r23,84af4 <__sfvwrite_r+0x2ac>
   84a94:	b9c03b16 	blt	r23,r7,84b84 <__sfvwrite_r+0x33c>
   84a98:	80800917 	ldw	r2,36(r16)
   84a9c:	81400717 	ldw	r5,28(r16)
   84aa0:	a809883a 	mov	r4,r21
   84aa4:	d8c00015 	stw	r3,0(sp)
   84aa8:	e00d883a 	mov	r6,fp
   84aac:	103ee83a 	callr	r2
   84ab0:	1027883a 	mov	r19,r2
   84ab4:	d8c00017 	ldw	r3,0(sp)
   84ab8:	00bfe20e 	bge	zero,r2,84a44 <__sfvwrite_r+0x1fc>
   84abc:	b4edc83a 	sub	r22,r22,r19
   84ac0:	b0001a26 	beq	r22,zero,84b2c <__sfvwrite_r+0x2e4>
   84ac4:	a0800217 	ldw	r2,8(r20)
   84ac8:	e4f9883a 	add	fp,fp,r19
   84acc:	94e5c83a 	sub	r18,r18,r19
   84ad0:	14e7c83a 	sub	r19,r2,r19
   84ad4:	a4c00215 	stw	r19,8(r20)
   84ad8:	983f8c26 	beq	r19,zero,8490c <__sfvwrite_r+0xc4>
   84adc:	903fe21e 	bne	r18,zero,84a68 <__sfvwrite_r+0x220>
   84ae0:	8f000017 	ldw	fp,0(r17)
   84ae4:	8c800117 	ldw	r18,4(r17)
   84ae8:	0007883a 	mov	r3,zero
   84aec:	8c400204 	addi	r17,r17,8
   84af0:	003fdc06 	br	84a64 <__sfvwrite_r+0x21c>
   84af4:	e00b883a 	mov	r5,fp
   84af8:	980d883a 	mov	r6,r19
   84afc:	d8c00015 	stw	r3,0(sp)
   84b00:	0085acc0 	call	85acc <memmove>
   84b04:	80800017 	ldw	r2,0(r16)
   84b08:	a809883a 	mov	r4,r21
   84b0c:	800b883a 	mov	r5,r16
   84b10:	14c5883a 	add	r2,r2,r19
   84b14:	80800015 	stw	r2,0(r16)
   84b18:	0083f380 	call	83f38 <_fflush_r>
   84b1c:	d8c00017 	ldw	r3,0(sp)
   84b20:	103fc81e 	bne	r2,zero,84a44 <__sfvwrite_r+0x1fc>
   84b24:	b4edc83a 	sub	r22,r22,r19
   84b28:	b03fe61e 	bne	r22,zero,84ac4 <__sfvwrite_r+0x27c>
   84b2c:	a809883a 	mov	r4,r21
   84b30:	800b883a 	mov	r5,r16
   84b34:	0083f380 	call	83f38 <_fflush_r>
   84b38:	103fc21e 	bne	r2,zero,84a44 <__sfvwrite_r+0x1fc>
   84b3c:	0007883a 	mov	r3,zero
   84b40:	003fe006 	br	84ac4 <__sfvwrite_r+0x27c>
   84b44:	81000017 	ldw	r4,0(r16)
   84b48:	80800417 	ldw	r2,16(r16)
   84b4c:	1100022e 	bgeu	r2,r4,84b58 <__sfvwrite_r+0x310>
   84b50:	9839883a 	mov	fp,r19
   84b54:	9c806036 	bltu	r19,r18,84cd8 <__sfvwrite_r+0x490>
   84b58:	81c00517 	ldw	r7,20(r16)
   84b5c:	91c01c36 	bltu	r18,r7,84bd0 <__sfvwrite_r+0x388>
   84b60:	80800917 	ldw	r2,36(r16)
   84b64:	81400717 	ldw	r5,28(r16)
   84b68:	a809883a 	mov	r4,r21
   84b6c:	b00d883a 	mov	r6,r22
   84b70:	103ee83a 	callr	r2
   84b74:	1027883a 	mov	r19,r2
   84b78:	00bfb20e 	bge	zero,r2,84a44 <__sfvwrite_r+0x1fc>
   84b7c:	1039883a 	mov	fp,r2
   84b80:	003f9806 	br	849e4 <__sfvwrite_r+0x19c>
   84b84:	b80d883a 	mov	r6,r23
   84b88:	e00b883a 	mov	r5,fp
   84b8c:	d8c00015 	stw	r3,0(sp)
   84b90:	0085acc0 	call	85acc <memmove>
   84b94:	80800217 	ldw	r2,8(r16)
   84b98:	81000017 	ldw	r4,0(r16)
   84b9c:	b827883a 	mov	r19,r23
   84ba0:	15c5c83a 	sub	r2,r2,r23
   84ba4:	25ef883a 	add	r23,r4,r23
   84ba8:	80800215 	stw	r2,8(r16)
   84bac:	85c00015 	stw	r23,0(r16)
   84bb0:	d8c00017 	ldw	r3,0(sp)
   84bb4:	003fc106 	br	84abc <__sfvwrite_r+0x274>
   84bb8:	81000017 	ldw	r4,0(r16)
   84bbc:	902f883a 	mov	r23,r18
   84bc0:	9039883a 	mov	fp,r18
   84bc4:	9027883a 	mov	r19,r18
   84bc8:	900f883a 	mov	r7,r18
   84bcc:	003f7a06 	br	849b8 <__sfvwrite_r+0x170>
   84bd0:	b00b883a 	mov	r5,r22
   84bd4:	900d883a 	mov	r6,r18
   84bd8:	0085acc0 	call	85acc <memmove>
   84bdc:	80c00217 	ldw	r3,8(r16)
   84be0:	80800017 	ldw	r2,0(r16)
   84be4:	9027883a 	mov	r19,r18
   84be8:	1c87c83a 	sub	r3,r3,r18
   84bec:	1485883a 	add	r2,r2,r18
   84bf0:	80c00215 	stw	r3,8(r16)
   84bf4:	80800015 	stw	r2,0(r16)
   84bf8:	9039883a 	mov	fp,r18
   84bfc:	003f7906 	br	849e4 <__sfvwrite_r+0x19c>
   84c00:	e009883a 	mov	r4,fp
   84c04:	01400284 	movi	r5,10
   84c08:	900d883a 	mov	r6,r18
   84c0c:	00858940 	call	85894 <memchr>
   84c10:	10003c26 	beq	r2,zero,84d04 <__sfvwrite_r+0x4bc>
   84c14:	15800044 	addi	r22,r2,1
   84c18:	b72dc83a 	sub	r22,r22,fp
   84c1c:	00c00044 	movi	r3,1
   84c20:	003f9206 	br	84a6c <__sfvwrite_r+0x224>
   84c24:	81000517 	ldw	r4,20(r16)
   84c28:	81400417 	ldw	r5,16(r16)
   84c2c:	80c00017 	ldw	r3,0(r16)
   84c30:	210d883a 	add	r6,r4,r4
   84c34:	3109883a 	add	r4,r6,r4
   84c38:	2026d7fa 	srli	r19,r4,31
   84c3c:	1979c83a 	sub	fp,r3,r5
   84c40:	e1800044 	addi	r6,fp,1
   84c44:	9909883a 	add	r4,r19,r4
   84c48:	2027d07a 	srai	r19,r4,1
   84c4c:	3489883a 	add	r4,r6,r18
   84c50:	980d883a 	mov	r6,r19
   84c54:	9900022e 	bgeu	r19,r4,84c60 <__sfvwrite_r+0x418>
   84c58:	2027883a 	mov	r19,r4
   84c5c:	200d883a 	mov	r6,r4
   84c60:	1081000c 	andi	r2,r2,1024
   84c64:	10bfffcc 	andi	r2,r2,65535
   84c68:	10a0001c 	xori	r2,r2,32768
   84c6c:	10a00004 	addi	r2,r2,-32768
   84c70:	a809883a 	mov	r4,r21
   84c74:	103f6b26 	beq	r2,zero,84a24 <__sfvwrite_r+0x1dc>
   84c78:	300b883a 	mov	r5,r6
   84c7c:	00851100 	call	85110 <_malloc_r>
   84c80:	102f883a 	mov	r23,r2
   84c84:	103f6d26 	beq	r2,zero,84a3c <__sfvwrite_r+0x1f4>
   84c88:	81400417 	ldw	r5,16(r16)
   84c8c:	1009883a 	mov	r4,r2
   84c90:	e00d883a 	mov	r6,fp
   84c94:	008598c0 	call	8598c <memcpy>
   84c98:	8080030b 	ldhu	r2,12(r16)
   84c9c:	00fedfc4 	movi	r3,-1153
   84ca0:	10c4703a 	and	r2,r2,r3
   84ca4:	10802014 	ori	r2,r2,128
   84ca8:	8080030d 	sth	r2,12(r16)
   84cac:	bf09883a 	add	r4,r23,fp
   84cb0:	9f07c83a 	sub	r3,r19,fp
   84cb4:	85c00415 	stw	r23,16(r16)
   84cb8:	84c00515 	stw	r19,20(r16)
   84cbc:	81000015 	stw	r4,0(r16)
   84cc0:	902f883a 	mov	r23,r18
   84cc4:	80c00215 	stw	r3,8(r16)
   84cc8:	9039883a 	mov	fp,r18
   84ccc:	9027883a 	mov	r19,r18
   84cd0:	900f883a 	mov	r7,r18
   84cd4:	003f3806 	br	849b8 <__sfvwrite_r+0x170>
   84cd8:	b00b883a 	mov	r5,r22
   84cdc:	980d883a 	mov	r6,r19
   84ce0:	0085acc0 	call	85acc <memmove>
   84ce4:	80800017 	ldw	r2,0(r16)
   84ce8:	a809883a 	mov	r4,r21
   84cec:	800b883a 	mov	r5,r16
   84cf0:	14c5883a 	add	r2,r2,r19
   84cf4:	80800015 	stw	r2,0(r16)
   84cf8:	0083f380 	call	83f38 <_fflush_r>
   84cfc:	103f3926 	beq	r2,zero,849e4 <__sfvwrite_r+0x19c>
   84d00:	003f5006 	br	84a44 <__sfvwrite_r+0x1fc>
   84d04:	95800044 	addi	r22,r18,1
   84d08:	00c00044 	movi	r3,1
   84d0c:	003f5706 	br	84a6c <__sfvwrite_r+0x224>
   84d10:	80c0030b 	ldhu	r3,12(r16)
   84d14:	00bfffc4 	movi	r2,-1
   84d18:	18c01014 	ori	r3,r3,64
   84d1c:	80c0030d 	sth	r3,12(r16)
   84d20:	00c00244 	movi	r3,9
   84d24:	a8c00015 	stw	r3,0(r21)
   84d28:	003ef906 	br	84910 <__sfvwrite_r+0xc8>

00084d2c <_fwalk>:
   84d2c:	defff904 	addi	sp,sp,-28
   84d30:	dcc00315 	stw	r19,12(sp)
   84d34:	24c0b804 	addi	r19,r4,736
   84d38:	dd400515 	stw	r21,20(sp)
   84d3c:	dd000415 	stw	r20,16(sp)
   84d40:	dfc00615 	stw	ra,24(sp)
   84d44:	dc800215 	stw	r18,8(sp)
   84d48:	dc400115 	stw	r17,4(sp)
   84d4c:	dc000015 	stw	r16,0(sp)
   84d50:	282b883a 	mov	r21,r5
   84d54:	0029883a 	mov	r20,zero
   84d58:	00843fc0 	call	843fc <__sfp_lock_acquire>
   84d5c:	98001226 	beq	r19,zero,84da8 <_fwalk+0x7c>
   84d60:	04bfffc4 	movi	r18,-1
   84d64:	9c400117 	ldw	r17,4(r19)
   84d68:	9c000217 	ldw	r16,8(r19)
   84d6c:	8c7fffc4 	addi	r17,r17,-1
   84d70:	88000b16 	blt	r17,zero,84da0 <_fwalk+0x74>
   84d74:	84000304 	addi	r16,r16,12
   84d78:	80c0000f 	ldh	r3,0(r16)
   84d7c:	8c7fffc4 	addi	r17,r17,-1
   84d80:	813ffd04 	addi	r4,r16,-12
   84d84:	18000426 	beq	r3,zero,84d98 <_fwalk+0x6c>
   84d88:	80c0008f 	ldh	r3,2(r16)
   84d8c:	1c800226 	beq	r3,r18,84d98 <_fwalk+0x6c>
   84d90:	a83ee83a 	callr	r21
   84d94:	a0a8b03a 	or	r20,r20,r2
   84d98:	84001704 	addi	r16,r16,92
   84d9c:	8cbff61e 	bne	r17,r18,84d78 <_fwalk+0x4c>
   84da0:	9cc00017 	ldw	r19,0(r19)
   84da4:	983fef1e 	bne	r19,zero,84d64 <_fwalk+0x38>
   84da8:	00844000 	call	84400 <__sfp_lock_release>
   84dac:	a005883a 	mov	r2,r20
   84db0:	dfc00617 	ldw	ra,24(sp)
   84db4:	dd400517 	ldw	r21,20(sp)
   84db8:	dd000417 	ldw	r20,16(sp)
   84dbc:	dcc00317 	ldw	r19,12(sp)
   84dc0:	dc800217 	ldw	r18,8(sp)
   84dc4:	dc400117 	ldw	r17,4(sp)
   84dc8:	dc000017 	ldw	r16,0(sp)
   84dcc:	dec00704 	addi	sp,sp,28
   84dd0:	f800283a 	ret

00084dd4 <_fwalk_reent>:
   84dd4:	defff804 	addi	sp,sp,-32
   84dd8:	dcc00315 	stw	r19,12(sp)
   84ddc:	24c0b804 	addi	r19,r4,736
   84de0:	dd800615 	stw	r22,24(sp)
   84de4:	dd400515 	stw	r21,20(sp)
   84de8:	dd000415 	stw	r20,16(sp)
   84dec:	dfc00715 	stw	ra,28(sp)
   84df0:	dc800215 	stw	r18,8(sp)
   84df4:	dc400115 	stw	r17,4(sp)
   84df8:	dc000015 	stw	r16,0(sp)
   84dfc:	2029883a 	mov	r20,r4
   84e00:	282b883a 	mov	r21,r5
   84e04:	002d883a 	mov	r22,zero
   84e08:	00843fc0 	call	843fc <__sfp_lock_acquire>
   84e0c:	98001326 	beq	r19,zero,84e5c <_fwalk_reent+0x88>
   84e10:	04bfffc4 	movi	r18,-1
   84e14:	9c400117 	ldw	r17,4(r19)
   84e18:	9c000217 	ldw	r16,8(r19)
   84e1c:	8c7fffc4 	addi	r17,r17,-1
   84e20:	88000c16 	blt	r17,zero,84e54 <_fwalk_reent+0x80>
   84e24:	84000304 	addi	r16,r16,12
   84e28:	80c0000f 	ldh	r3,0(r16)
   84e2c:	8c7fffc4 	addi	r17,r17,-1
   84e30:	817ffd04 	addi	r5,r16,-12
   84e34:	18000526 	beq	r3,zero,84e4c <_fwalk_reent+0x78>
   84e38:	80c0008f 	ldh	r3,2(r16)
   84e3c:	a009883a 	mov	r4,r20
   84e40:	1c800226 	beq	r3,r18,84e4c <_fwalk_reent+0x78>
   84e44:	a83ee83a 	callr	r21
   84e48:	b0acb03a 	or	r22,r22,r2
   84e4c:	84001704 	addi	r16,r16,92
   84e50:	8cbff51e 	bne	r17,r18,84e28 <_fwalk_reent+0x54>
   84e54:	9cc00017 	ldw	r19,0(r19)
   84e58:	983fee1e 	bne	r19,zero,84e14 <_fwalk_reent+0x40>
   84e5c:	00844000 	call	84400 <__sfp_lock_release>
   84e60:	b005883a 	mov	r2,r22
   84e64:	dfc00717 	ldw	ra,28(sp)
   84e68:	dd800617 	ldw	r22,24(sp)
   84e6c:	dd400517 	ldw	r21,20(sp)
   84e70:	dd000417 	ldw	r20,16(sp)
   84e74:	dcc00317 	ldw	r19,12(sp)
   84e78:	dc800217 	ldw	r18,8(sp)
   84e7c:	dc400117 	ldw	r17,4(sp)
   84e80:	dc000017 	ldw	r16,0(sp)
   84e84:	dec00804 	addi	sp,sp,32
   84e88:	f800283a 	ret

00084e8c <_setlocale_r>:
   84e8c:	defffc04 	addi	sp,sp,-16
   84e90:	dc800215 	stw	r18,8(sp)
   84e94:	dc400115 	stw	r17,4(sp)
   84e98:	dc000015 	stw	r16,0(sp)
   84e9c:	dfc00315 	stw	ra,12(sp)
   84ea0:	3021883a 	mov	r16,r6
   84ea4:	2023883a 	mov	r17,r4
   84ea8:	2825883a 	mov	r18,r5
   84eac:	30001626 	beq	r6,zero,84f08 <_setlocale_r+0x7c>
   84eb0:	3009883a 	mov	r4,r6
   84eb4:	01400274 	movhi	r5,9
   84eb8:	29732d04 	addi	r5,r5,-13132
   84ebc:	00875880 	call	87588 <strcmp>
   84ec0:	10000a1e 	bne	r2,zero,84eec <_setlocale_r+0x60>
   84ec4:	8c800c15 	stw	r18,48(r17)
   84ec8:	8c000d15 	stw	r16,52(r17)
   84ecc:	00800274 	movhi	r2,9
   84ed0:	10b32d04 	addi	r2,r2,-13132
   84ed4:	dfc00317 	ldw	ra,12(sp)
   84ed8:	dc800217 	ldw	r18,8(sp)
   84edc:	dc400117 	ldw	r17,4(sp)
   84ee0:	dc000017 	ldw	r16,0(sp)
   84ee4:	dec00404 	addi	sp,sp,16
   84ee8:	f800283a 	ret
   84eec:	8009883a 	mov	r4,r16
   84ef0:	01400274 	movhi	r5,9
   84ef4:	29731804 	addi	r5,r5,-13216
   84ef8:	00875880 	call	87588 <strcmp>
   84efc:	103ff126 	beq	r2,zero,84ec4 <_setlocale_r+0x38>
   84f00:	0005883a 	mov	r2,zero
   84f04:	003ff306 	br	84ed4 <_setlocale_r+0x48>
   84f08:	00800274 	movhi	r2,9
   84f0c:	10b32d04 	addi	r2,r2,-13132
   84f10:	dfc00317 	ldw	ra,12(sp)
   84f14:	dc800217 	ldw	r18,8(sp)
   84f18:	dc400117 	ldw	r17,4(sp)
   84f1c:	dc000017 	ldw	r16,0(sp)
   84f20:	dec00404 	addi	sp,sp,16
   84f24:	f800283a 	ret

00084f28 <__locale_charset>:
   84f28:	00800274 	movhi	r2,9
   84f2c:	10b32e04 	addi	r2,r2,-13128
   84f30:	f800283a 	ret

00084f34 <_localeconv_r>:
   84f34:	00800274 	movhi	r2,9
   84f38:	10b33204 	addi	r2,r2,-13112
   84f3c:	f800283a 	ret

00084f40 <setlocale>:
   84f40:	00c00274 	movhi	r3,9
   84f44:	18fa9504 	addi	r3,r3,-5548
   84f48:	2005883a 	mov	r2,r4
   84f4c:	19000017 	ldw	r4,0(r3)
   84f50:	280d883a 	mov	r6,r5
   84f54:	100b883a 	mov	r5,r2
   84f58:	0084e8c1 	jmpi	84e8c <_setlocale_r>

00084f5c <localeconv>:
   84f5c:	00800274 	movhi	r2,9
   84f60:	10b33204 	addi	r2,r2,-13112
   84f64:	f800283a 	ret

00084f68 <__smakebuf_r>:
   84f68:	2880030b 	ldhu	r2,12(r5)
   84f6c:	deffed04 	addi	sp,sp,-76
   84f70:	dc401015 	stw	r17,64(sp)
   84f74:	10c0008c 	andi	r3,r2,2
   84f78:	18ffffcc 	andi	r3,r3,65535
   84f7c:	18e0001c 	xori	r3,r3,32768
   84f80:	dc000f15 	stw	r16,60(sp)
   84f84:	dfc01215 	stw	ra,72(sp)
   84f88:	dc801115 	stw	r18,68(sp)
   84f8c:	18e00004 	addi	r3,r3,-32768
   84f90:	2821883a 	mov	r16,r5
   84f94:	2023883a 	mov	r17,r4
   84f98:	1800381e 	bne	r3,zero,8507c <__smakebuf_r+0x114>
   84f9c:	2940038f 	ldh	r5,14(r5)
   84fa0:	28002d16 	blt	r5,zero,85058 <__smakebuf_r+0xf0>
   84fa4:	d80d883a 	mov	r6,sp
   84fa8:	00879180 	call	87918 <_fstat_r>
   84fac:	10002916 	blt	r2,zero,85054 <__smakebuf_r+0xec>
   84fb0:	d8800117 	ldw	r2,4(sp)
   84fb4:	00e00014 	movui	r3,32768
   84fb8:	10bc000c 	andi	r2,r2,61440
   84fbc:	10c03c26 	beq	r2,r3,850b0 <__smakebuf_r+0x148>
   84fc0:	80c0030b 	ldhu	r3,12(r16)
   84fc4:	18c20014 	ori	r3,r3,2048
   84fc8:	80c0030d 	sth	r3,12(r16)
   84fcc:	00c80004 	movi	r3,8192
   84fd0:	10c00c1e 	bne	r2,r3,85004 <__smakebuf_r+0x9c>
   84fd4:	8140038f 	ldh	r5,14(r16)
   84fd8:	8809883a 	mov	r4,r17
   84fdc:	00879800 	call	87980 <_isatty_r>
   84fe0:	10000826 	beq	r2,zero,85004 <__smakebuf_r+0x9c>
   84fe4:	80c0030b 	ldhu	r3,12(r16)
   84fe8:	808010c4 	addi	r2,r16,67
   84fec:	80800015 	stw	r2,0(r16)
   84ff0:	18c00054 	ori	r3,r3,1
   84ff4:	80800415 	stw	r2,16(r16)
   84ff8:	00800044 	movi	r2,1
   84ffc:	80c0030d 	sth	r3,12(r16)
   85000:	80800515 	stw	r2,20(r16)
   85004:	04810004 	movi	r18,1024
   85008:	8809883a 	mov	r4,r17
   8500c:	900b883a 	mov	r5,r18
   85010:	00851100 	call	85110 <_malloc_r>
   85014:	10003026 	beq	r2,zero,850d8 <__smakebuf_r+0x170>
   85018:	80c0030b 	ldhu	r3,12(r16)
   8501c:	01000234 	movhi	r4,8
   85020:	21105804 	addi	r4,r4,16736
   85024:	89000f15 	stw	r4,60(r17)
   85028:	18c02014 	ori	r3,r3,128
   8502c:	80c0030d 	sth	r3,12(r16)
   85030:	80800015 	stw	r2,0(r16)
   85034:	80800415 	stw	r2,16(r16)
   85038:	84800515 	stw	r18,20(r16)
   8503c:	dfc01217 	ldw	ra,72(sp)
   85040:	dc801117 	ldw	r18,68(sp)
   85044:	dc401017 	ldw	r17,64(sp)
   85048:	dc000f17 	ldw	r16,60(sp)
   8504c:	dec01304 	addi	sp,sp,76
   85050:	f800283a 	ret
   85054:	8080030b 	ldhu	r2,12(r16)
   85058:	10c0200c 	andi	r3,r2,128
   8505c:	18ffffcc 	andi	r3,r3,65535
   85060:	18e0001c 	xori	r3,r3,32768
   85064:	18e00004 	addi	r3,r3,-32768
   85068:	18000f1e 	bne	r3,zero,850a8 <__smakebuf_r+0x140>
   8506c:	04810004 	movi	r18,1024
   85070:	10820014 	ori	r2,r2,2048
   85074:	8080030d 	sth	r2,12(r16)
   85078:	003fe306 	br	85008 <__smakebuf_r+0xa0>
   8507c:	288010c4 	addi	r2,r5,67
   85080:	28800015 	stw	r2,0(r5)
   85084:	28800415 	stw	r2,16(r5)
   85088:	00800044 	movi	r2,1
   8508c:	28800515 	stw	r2,20(r5)
   85090:	dfc01217 	ldw	ra,72(sp)
   85094:	dc801117 	ldw	r18,68(sp)
   85098:	dc401017 	ldw	r17,64(sp)
   8509c:	dc000f17 	ldw	r16,60(sp)
   850a0:	dec01304 	addi	sp,sp,76
   850a4:	f800283a 	ret
   850a8:	04801004 	movi	r18,64
   850ac:	003ff006 	br	85070 <__smakebuf_r+0x108>
   850b0:	81000a17 	ldw	r4,40(r16)
   850b4:	00c00234 	movhi	r3,8
   850b8:	18dd4904 	addi	r3,r3,29988
   850bc:	20ffc01e 	bne	r4,r3,84fc0 <__smakebuf_r+0x58>
   850c0:	8080030b 	ldhu	r2,12(r16)
   850c4:	00c10004 	movi	r3,1024
   850c8:	80c01315 	stw	r3,76(r16)
   850cc:	10c4b03a 	or	r2,r2,r3
   850d0:	8080030d 	sth	r2,12(r16)
   850d4:	003fcb06 	br	85004 <__smakebuf_r+0x9c>
   850d8:	8080030b 	ldhu	r2,12(r16)
   850dc:	10c0800c 	andi	r3,r2,512
   850e0:	18ffffcc 	andi	r3,r3,65535
   850e4:	18e0001c 	xori	r3,r3,32768
   850e8:	18e00004 	addi	r3,r3,-32768
   850ec:	183fd31e 	bne	r3,zero,8503c <__smakebuf_r+0xd4>
   850f0:	10800094 	ori	r2,r2,2
   850f4:	80c010c4 	addi	r3,r16,67
   850f8:	8080030d 	sth	r2,12(r16)
   850fc:	00800044 	movi	r2,1
   85100:	80c00015 	stw	r3,0(r16)
   85104:	80c00415 	stw	r3,16(r16)
   85108:	80800515 	stw	r2,20(r16)
   8510c:	003fcb06 	br	8503c <__smakebuf_r+0xd4>

00085110 <_malloc_r>:
   85110:	defff604 	addi	sp,sp,-40
   85114:	dc800215 	stw	r18,8(sp)
   85118:	dfc00915 	stw	ra,36(sp)
   8511c:	df000815 	stw	fp,32(sp)
   85120:	ddc00715 	stw	r23,28(sp)
   85124:	dd800615 	stw	r22,24(sp)
   85128:	dd400515 	stw	r21,20(sp)
   8512c:	dd000415 	stw	r20,16(sp)
   85130:	dcc00315 	stw	r19,12(sp)
   85134:	dc400115 	stw	r17,4(sp)
   85138:	dc000015 	stw	r16,0(sp)
   8513c:	288002c4 	addi	r2,r5,11
   85140:	00c00584 	movi	r3,22
   85144:	2025883a 	mov	r18,r4
   85148:	18802b2e 	bgeu	r3,r2,851f8 <_malloc_r+0xe8>
   8514c:	047ffe04 	movi	r17,-8
   85150:	1462703a 	and	r17,r2,r17
   85154:	88002a16 	blt	r17,zero,85200 <_malloc_r+0xf0>
   85158:	89402936 	bltu	r17,r5,85200 <_malloc_r+0xf0>
   8515c:	9009883a 	mov	r4,r18
   85160:	008a09c0 	call	8a09c <__malloc_lock>
   85164:	00807dc4 	movi	r2,503
   85168:	14402936 	bltu	r2,r17,85210 <_malloc_r+0x100>
   8516c:	8808d0fa 	srli	r4,r17,3
   85170:	04c00274 	movhi	r19,9
   85174:	9cf4df04 	addi	r19,r19,-11396
   85178:	2105883a 	add	r2,r4,r4
   8517c:	1085883a 	add	r2,r2,r2
   85180:	1085883a 	add	r2,r2,r2
   85184:	9885883a 	add	r2,r19,r2
   85188:	14000317 	ldw	r16,12(r2)
   8518c:	80815526 	beq	r16,r2,856e4 <_malloc_r+0x5d4>
   85190:	81000117 	ldw	r4,4(r16)
   85194:	00bfff04 	movi	r2,-4
   85198:	80c00317 	ldw	r3,12(r16)
   8519c:	2084703a 	and	r2,r4,r2
   851a0:	8085883a 	add	r2,r16,r2
   851a4:	11800117 	ldw	r6,4(r2)
   851a8:	81400217 	ldw	r5,8(r16)
   851ac:	9009883a 	mov	r4,r18
   851b0:	31800054 	ori	r6,r6,1
   851b4:	11800115 	stw	r6,4(r2)
   851b8:	28c00315 	stw	r3,12(r5)
   851bc:	19400215 	stw	r5,8(r3)
   851c0:	008a0bc0 	call	8a0bc <__malloc_unlock>
   851c4:	80800204 	addi	r2,r16,8
   851c8:	dfc00917 	ldw	ra,36(sp)
   851cc:	df000817 	ldw	fp,32(sp)
   851d0:	ddc00717 	ldw	r23,28(sp)
   851d4:	dd800617 	ldw	r22,24(sp)
   851d8:	dd400517 	ldw	r21,20(sp)
   851dc:	dd000417 	ldw	r20,16(sp)
   851e0:	dcc00317 	ldw	r19,12(sp)
   851e4:	dc800217 	ldw	r18,8(sp)
   851e8:	dc400117 	ldw	r17,4(sp)
   851ec:	dc000017 	ldw	r16,0(sp)
   851f0:	dec00a04 	addi	sp,sp,40
   851f4:	f800283a 	ret
   851f8:	04400404 	movi	r17,16
   851fc:	897fd72e 	bgeu	r17,r5,8515c <_malloc_r+0x4c>
   85200:	00800304 	movi	r2,12
   85204:	90800015 	stw	r2,0(r18)
   85208:	0005883a 	mov	r2,zero
   8520c:	003fee06 	br	851c8 <_malloc_r+0xb8>
   85210:	8808d27a 	srli	r4,r17,9
   85214:	20007126 	beq	r4,zero,853dc <_malloc_r+0x2cc>
   85218:	00800104 	movi	r2,4
   8521c:	1100eb36 	bltu	r2,r4,855cc <_malloc_r+0x4bc>
   85220:	8808d1ba 	srli	r4,r17,6
   85224:	21000e04 	addi	r4,r4,56
   85228:	210b883a 	add	r5,r4,r4
   8522c:	294b883a 	add	r5,r5,r5
   85230:	294b883a 	add	r5,r5,r5
   85234:	04c00274 	movhi	r19,9
   85238:	9cf4df04 	addi	r19,r19,-11396
   8523c:	994b883a 	add	r5,r19,r5
   85240:	2c000317 	ldw	r16,12(r5)
   85244:	2c000e26 	beq	r5,r16,85280 <_malloc_r+0x170>
   85248:	80c00117 	ldw	r3,4(r16)
   8524c:	01ffff04 	movi	r7,-4
   85250:	018003c4 	movi	r6,15
   85254:	19c6703a 	and	r3,r3,r7
   85258:	1c45c83a 	sub	r2,r3,r17
   8525c:	30800716 	blt	r6,r2,8527c <_malloc_r+0x16c>
   85260:	1000610e 	bge	r2,zero,853e8 <_malloc_r+0x2d8>
   85264:	84000317 	ldw	r16,12(r16)
   85268:	2c000526 	beq	r5,r16,85280 <_malloc_r+0x170>
   8526c:	80c00117 	ldw	r3,4(r16)
   85270:	19c6703a 	and	r3,r3,r7
   85274:	1c45c83a 	sub	r2,r3,r17
   85278:	30bff90e 	bge	r6,r2,85260 <_malloc_r+0x150>
   8527c:	213fffc4 	addi	r4,r4,-1
   85280:	21000044 	addi	r4,r4,1
   85284:	9c000417 	ldw	r16,16(r19)
   85288:	00c00274 	movhi	r3,9
   8528c:	18f4df04 	addi	r3,r3,-11396
   85290:	1a400204 	addi	r9,r3,8
   85294:	8240ff26 	beq	r16,r9,85694 <_malloc_r+0x584>
   85298:	81400117 	ldw	r5,4(r16)
   8529c:	00bfff04 	movi	r2,-4
   852a0:	018003c4 	movi	r6,15
   852a4:	2884703a 	and	r2,r5,r2
   852a8:	144bc83a 	sub	r5,r2,r17
   852ac:	3140ea16 	blt	r6,r5,85658 <_malloc_r+0x548>
   852b0:	1a400515 	stw	r9,20(r3)
   852b4:	1a400415 	stw	r9,16(r3)
   852b8:	2800570e 	bge	r5,zero,85418 <_malloc_r+0x308>
   852bc:	01407fc4 	movi	r5,511
   852c0:	2880ca36 	bltu	r5,r2,855ec <_malloc_r+0x4dc>
   852c4:	1004d0fa 	srli	r2,r2,3
   852c8:	02000044 	movi	r8,1
   852cc:	19c00117 	ldw	r7,4(r3)
   852d0:	108b883a 	add	r5,r2,r2
   852d4:	294b883a 	add	r5,r5,r5
   852d8:	1005d0ba 	srai	r2,r2,2
   852dc:	294b883a 	add	r5,r5,r5
   852e0:	28cb883a 	add	r5,r5,r3
   852e4:	29800217 	ldw	r6,8(r5)
   852e8:	4084983a 	sll	r2,r8,r2
   852ec:	81400315 	stw	r5,12(r16)
   852f0:	81800215 	stw	r6,8(r16)
   852f4:	11c4b03a 	or	r2,r2,r7
   852f8:	18800115 	stw	r2,4(r3)
   852fc:	2c000215 	stw	r16,8(r5)
   85300:	34000315 	stw	r16,12(r6)
   85304:	200bd0ba 	srai	r5,r4,2
   85308:	00c00044 	movi	r3,1
   8530c:	194a983a 	sll	r5,r3,r5
   85310:	11404936 	bltu	r2,r5,85438 <_malloc_r+0x328>
   85314:	1146703a 	and	r3,r2,r5
   85318:	18000a1e 	bne	r3,zero,85344 <_malloc_r+0x234>
   8531c:	00ffff04 	movi	r3,-4
   85320:	294b883a 	add	r5,r5,r5
   85324:	20c8703a 	and	r4,r4,r3
   85328:	1146703a 	and	r3,r2,r5
   8532c:	21000104 	addi	r4,r4,4
   85330:	1800041e 	bne	r3,zero,85344 <_malloc_r+0x234>
   85334:	294b883a 	add	r5,r5,r5
   85338:	1146703a 	and	r3,r2,r5
   8533c:	21000104 	addi	r4,r4,4
   85340:	183ffc26 	beq	r3,zero,85334 <_malloc_r+0x224>
   85344:	023fff04 	movi	r8,-4
   85348:	01c003c4 	movi	r7,15
   8534c:	2105883a 	add	r2,r4,r4
   85350:	1085883a 	add	r2,r2,r2
   85354:	1085883a 	add	r2,r2,r2
   85358:	9899883a 	add	r12,r19,r2
   8535c:	62800304 	addi	r10,r12,12
   85360:	2017883a 	mov	r11,r4
   85364:	54000017 	ldw	r16,0(r10)
   85368:	51bffd04 	addi	r6,r10,-12
   8536c:	8180041e 	bne	r16,r6,85380 <_malloc_r+0x270>
   85370:	0000ca06 	br	8569c <_malloc_r+0x58c>
   85374:	10001c0e 	bge	r2,zero,853e8 <_malloc_r+0x2d8>
   85378:	84000317 	ldw	r16,12(r16)
   8537c:	8180c726 	beq	r16,r6,8569c <_malloc_r+0x58c>
   85380:	80c00117 	ldw	r3,4(r16)
   85384:	1a06703a 	and	r3,r3,r8
   85388:	1c45c83a 	sub	r2,r3,r17
   8538c:	38bff90e 	bge	r7,r2,85374 <_malloc_r+0x264>
   85390:	81000317 	ldw	r4,12(r16)
   85394:	81400217 	ldw	r5,8(r16)
   85398:	8447883a 	add	r3,r16,r17
   8539c:	8c400054 	ori	r17,r17,1
   853a0:	29000315 	stw	r4,12(r5)
   853a4:	21400215 	stw	r5,8(r4)
   853a8:	84400115 	stw	r17,4(r16)
   853ac:	1889883a 	add	r4,r3,r2
   853b0:	11400054 	ori	r5,r2,1
   853b4:	98c00515 	stw	r3,20(r19)
   853b8:	98c00415 	stw	r3,16(r19)
   853bc:	20800015 	stw	r2,0(r4)
   853c0:	1a400315 	stw	r9,12(r3)
   853c4:	1a400215 	stw	r9,8(r3)
   853c8:	19400115 	stw	r5,4(r3)
   853cc:	9009883a 	mov	r4,r18
   853d0:	008a0bc0 	call	8a0bc <__malloc_unlock>
   853d4:	80800204 	addi	r2,r16,8
   853d8:	003f7b06 	br	851c8 <_malloc_r+0xb8>
   853dc:	8808d0fa 	srli	r4,r17,3
   853e0:	210b883a 	add	r5,r4,r4
   853e4:	003f9106 	br	8522c <_malloc_r+0x11c>
   853e8:	80c7883a 	add	r3,r16,r3
   853ec:	19400117 	ldw	r5,4(r3)
   853f0:	80800317 	ldw	r2,12(r16)
   853f4:	81000217 	ldw	r4,8(r16)
   853f8:	29400054 	ori	r5,r5,1
   853fc:	19400115 	stw	r5,4(r3)
   85400:	20800315 	stw	r2,12(r4)
   85404:	11000215 	stw	r4,8(r2)
   85408:	9009883a 	mov	r4,r18
   8540c:	008a0bc0 	call	8a0bc <__malloc_unlock>
   85410:	80800204 	addi	r2,r16,8
   85414:	003f6c06 	br	851c8 <_malloc_r+0xb8>
   85418:	8085883a 	add	r2,r16,r2
   8541c:	10c00117 	ldw	r3,4(r2)
   85420:	9009883a 	mov	r4,r18
   85424:	18c00054 	ori	r3,r3,1
   85428:	10c00115 	stw	r3,4(r2)
   8542c:	008a0bc0 	call	8a0bc <__malloc_unlock>
   85430:	80800204 	addi	r2,r16,8
   85434:	003f6406 	br	851c8 <_malloc_r+0xb8>
   85438:	9c000217 	ldw	r16,8(r19)
   8543c:	00bfff04 	movi	r2,-4
   85440:	85400117 	ldw	r21,4(r16)
   85444:	a8aa703a 	and	r21,r21,r2
   85448:	ac400336 	bltu	r21,r17,85458 <_malloc_r+0x348>
   8544c:	ac45c83a 	sub	r2,r21,r17
   85450:	00c003c4 	movi	r3,15
   85454:	18805316 	blt	r3,r2,855a4 <_malloc_r+0x494>
   85458:	d5e6db17 	ldw	r23,-25748(gp)
   8545c:	d0e00317 	ldw	r3,-32756(gp)
   85460:	00bfffc4 	movi	r2,-1
   85464:	8579883a 	add	fp,r16,r21
   85468:	8def883a 	add	r23,r17,r23
   8546c:	1880d226 	beq	r3,r2,857b8 <_malloc_r+0x6a8>
   85470:	bdc403c4 	addi	r23,r23,4111
   85474:	00bc0004 	movi	r2,-4096
   85478:	b8ae703a 	and	r23,r23,r2
   8547c:	9009883a 	mov	r4,r18
   85480:	b80b883a 	mov	r5,r23
   85484:	00873e40 	call	873e4 <_sbrk_r>
   85488:	1029883a 	mov	r20,r2
   8548c:	00bfffc4 	movi	r2,-1
   85490:	a080d126 	beq	r20,r2,857d8 <_malloc_r+0x6c8>
   85494:	a7009f36 	bltu	r20,fp,85714 <_malloc_r+0x604>
   85498:	05800274 	movhi	r22,9
   8549c:	b5817704 	addi	r22,r22,1500
   854a0:	b0800017 	ldw	r2,0(r22)
   854a4:	b885883a 	add	r2,r23,r2
   854a8:	b0800015 	stw	r2,0(r22)
   854ac:	e500cf26 	beq	fp,r20,857ec <_malloc_r+0x6dc>
   854b0:	d1200317 	ldw	r4,-32756(gp)
   854b4:	00ffffc4 	movi	r3,-1
   854b8:	20c0e026 	beq	r4,r3,8583c <_malloc_r+0x72c>
   854bc:	a739c83a 	sub	fp,r20,fp
   854c0:	1705883a 	add	r2,r2,fp
   854c4:	b0800015 	stw	r2,0(r22)
   854c8:	a08001cc 	andi	r2,r20,7
   854cc:	1000a526 	beq	r2,zero,85764 <_malloc_r+0x654>
   854d0:	a0a9c83a 	sub	r20,r20,r2
   854d4:	00c40204 	movi	r3,4104
   854d8:	a5000204 	addi	r20,r20,8
   854dc:	1885c83a 	sub	r2,r3,r2
   854e0:	a5c7883a 	add	r3,r20,r23
   854e4:	18c3ffcc 	andi	r3,r3,4095
   854e8:	10efc83a 	sub	r23,r2,r3
   854ec:	9009883a 	mov	r4,r18
   854f0:	b80b883a 	mov	r5,r23
   854f4:	00873e40 	call	873e4 <_sbrk_r>
   854f8:	00ffffc4 	movi	r3,-1
   854fc:	10c0cc26 	beq	r2,r3,85830 <_malloc_r+0x720>
   85500:	1505c83a 	sub	r2,r2,r20
   85504:	b887883a 	add	r3,r23,r2
   85508:	18c00054 	ori	r3,r3,1
   8550c:	b0800017 	ldw	r2,0(r22)
   85510:	9d000215 	stw	r20,8(r19)
   85514:	a0c00115 	stw	r3,4(r20)
   85518:	b885883a 	add	r2,r23,r2
   8551c:	b0800015 	stw	r2,0(r22)
   85520:	84c00e26 	beq	r16,r19,8555c <_malloc_r+0x44c>
   85524:	00c003c4 	movi	r3,15
   85528:	1d40902e 	bgeu	r3,r21,8576c <_malloc_r+0x65c>
   8552c:	ad7ffd04 	addi	r21,r21,-12
   85530:	013ffe04 	movi	r4,-8
   85534:	a908703a 	and	r4,r21,r4
   85538:	810b883a 	add	r5,r16,r4
   8553c:	01800144 	movi	r6,5
   85540:	29800115 	stw	r6,4(r5)
   85544:	29800215 	stw	r6,8(r5)
   85548:	81400117 	ldw	r5,4(r16)
   8554c:	2940004c 	andi	r5,r5,1
   85550:	214ab03a 	or	r5,r4,r5
   85554:	81400115 	stw	r5,4(r16)
   85558:	1900ae36 	bltu	r3,r4,85814 <_malloc_r+0x704>
   8555c:	d0e6da17 	ldw	r3,-25752(gp)
   85560:	1880012e 	bgeu	r3,r2,85568 <_malloc_r+0x458>
   85564:	d0a6da15 	stw	r2,-25752(gp)
   85568:	d0e6d917 	ldw	r3,-25756(gp)
   8556c:	9c000217 	ldw	r16,8(r19)
   85570:	1880012e 	bgeu	r3,r2,85578 <_malloc_r+0x468>
   85574:	d0a6d915 	stw	r2,-25756(gp)
   85578:	80c00117 	ldw	r3,4(r16)
   8557c:	00bfff04 	movi	r2,-4
   85580:	1886703a 	and	r3,r3,r2
   85584:	1c45c83a 	sub	r2,r3,r17
   85588:	1c400236 	bltu	r3,r17,85594 <_malloc_r+0x484>
   8558c:	00c003c4 	movi	r3,15
   85590:	18800416 	blt	r3,r2,855a4 <_malloc_r+0x494>
   85594:	9009883a 	mov	r4,r18
   85598:	008a0bc0 	call	8a0bc <__malloc_unlock>
   8559c:	0005883a 	mov	r2,zero
   855a0:	003f0906 	br	851c8 <_malloc_r+0xb8>
   855a4:	88c00054 	ori	r3,r17,1
   855a8:	10800054 	ori	r2,r2,1
   855ac:	80c00115 	stw	r3,4(r16)
   855b0:	8463883a 	add	r17,r16,r17
   855b4:	88800115 	stw	r2,4(r17)
   855b8:	9009883a 	mov	r4,r18
   855bc:	9c400215 	stw	r17,8(r19)
   855c0:	008a0bc0 	call	8a0bc <__malloc_unlock>
   855c4:	80800204 	addi	r2,r16,8
   855c8:	003eff06 	br	851c8 <_malloc_r+0xb8>
   855cc:	00800504 	movi	r2,20
   855d0:	1100492e 	bgeu	r2,r4,856f8 <_malloc_r+0x5e8>
   855d4:	00801504 	movi	r2,84
   855d8:	11005c36 	bltu	r2,r4,8574c <_malloc_r+0x63c>
   855dc:	8808d33a 	srli	r4,r17,12
   855e0:	21001b84 	addi	r4,r4,110
   855e4:	210b883a 	add	r5,r4,r4
   855e8:	003f1006 	br	8522c <_malloc_r+0x11c>
   855ec:	1006d27a 	srli	r3,r2,9
   855f0:	01400104 	movi	r5,4
   855f4:	28c0432e 	bgeu	r5,r3,85704 <_malloc_r+0x5f4>
   855f8:	01400504 	movi	r5,20
   855fc:	28c07036 	bltu	r5,r3,857c0 <_malloc_r+0x6b0>
   85600:	194016c4 	addi	r5,r3,91
   85604:	294d883a 	add	r6,r5,r5
   85608:	318d883a 	add	r6,r6,r6
   8560c:	318d883a 	add	r6,r6,r6
   85610:	998d883a 	add	r6,r19,r6
   85614:	30c00217 	ldw	r3,8(r6)
   85618:	01c00274 	movhi	r7,9
   8561c:	39f4df04 	addi	r7,r7,-11396
   85620:	19805726 	beq	r3,r6,85780 <_malloc_r+0x670>
   85624:	01ffff04 	movi	r7,-4
   85628:	19400117 	ldw	r5,4(r3)
   8562c:	29ca703a 	and	r5,r5,r7
   85630:	1140022e 	bgeu	r2,r5,8563c <_malloc_r+0x52c>
   85634:	18c00217 	ldw	r3,8(r3)
   85638:	30fffb1e 	bne	r6,r3,85628 <_malloc_r+0x518>
   8563c:	19400317 	ldw	r5,12(r3)
   85640:	98800117 	ldw	r2,4(r19)
   85644:	81400315 	stw	r5,12(r16)
   85648:	80c00215 	stw	r3,8(r16)
   8564c:	2c000215 	stw	r16,8(r5)
   85650:	1c000315 	stw	r16,12(r3)
   85654:	003f2b06 	br	85304 <_malloc_r+0x1f4>
   85658:	8445883a 	add	r2,r16,r17
   8565c:	8c400054 	ori	r17,r17,1
   85660:	18800515 	stw	r2,20(r3)
   85664:	18800415 	stw	r2,16(r3)
   85668:	29000054 	ori	r4,r5,1
   8566c:	1147883a 	add	r3,r2,r5
   85670:	84400115 	stw	r17,4(r16)
   85674:	11000115 	stw	r4,4(r2)
   85678:	12400315 	stw	r9,12(r2)
   8567c:	12400215 	stw	r9,8(r2)
   85680:	19400015 	stw	r5,0(r3)
   85684:	9009883a 	mov	r4,r18
   85688:	008a0bc0 	call	8a0bc <__malloc_unlock>
   8568c:	80800204 	addi	r2,r16,8
   85690:	003ecd06 	br	851c8 <_malloc_r+0xb8>
   85694:	18800117 	ldw	r2,4(r3)
   85698:	003f1a06 	br	85304 <_malloc_r+0x1f4>
   8569c:	5ac00044 	addi	r11,r11,1
   856a0:	588000cc 	andi	r2,r11,3
   856a4:	52800204 	addi	r10,r10,8
   856a8:	103f2e1e 	bne	r2,zero,85364 <_malloc_r+0x254>
   856ac:	20c000cc 	andi	r3,r4,3
   856b0:	60bffe04 	addi	r2,r12,-8
   856b4:	18006f26 	beq	r3,zero,85874 <_malloc_r+0x764>
   856b8:	63000017 	ldw	r12,0(r12)
   856bc:	213fffc4 	addi	r4,r4,-1
   856c0:	60bffa26 	beq	r12,r2,856ac <_malloc_r+0x59c>
   856c4:	98800117 	ldw	r2,4(r19)
   856c8:	294b883a 	add	r5,r5,r5
   856cc:	117f5a36 	bltu	r2,r5,85438 <_malloc_r+0x328>
   856d0:	283f5926 	beq	r5,zero,85438 <_malloc_r+0x328>
   856d4:	1146703a 	and	r3,r2,r5
   856d8:	18001626 	beq	r3,zero,85734 <_malloc_r+0x624>
   856dc:	5809883a 	mov	r4,r11
   856e0:	003f1a06 	br	8534c <_malloc_r+0x23c>
   856e4:	80800204 	addi	r2,r16,8
   856e8:	84000517 	ldw	r16,20(r16)
   856ec:	143ea81e 	bne	r2,r16,85190 <_malloc_r+0x80>
   856f0:	21000084 	addi	r4,r4,2
   856f4:	003ee306 	br	85284 <_malloc_r+0x174>
   856f8:	210016c4 	addi	r4,r4,91
   856fc:	210b883a 	add	r5,r4,r4
   85700:	003eca06 	br	8522c <_malloc_r+0x11c>
   85704:	100ad1ba 	srli	r5,r2,6
   85708:	29400e04 	addi	r5,r5,56
   8570c:	294d883a 	add	r6,r5,r5
   85710:	003fbd06 	br	85608 <_malloc_r+0x4f8>
   85714:	84ff6026 	beq	r16,r19,85498 <_malloc_r+0x388>
   85718:	00800274 	movhi	r2,9
   8571c:	10b4df04 	addi	r2,r2,-11396
   85720:	14000217 	ldw	r16,8(r2)
   85724:	00bfff04 	movi	r2,-4
   85728:	80c00117 	ldw	r3,4(r16)
   8572c:	1886703a 	and	r3,r3,r2
   85730:	003f9406 	br	85584 <_malloc_r+0x474>
   85734:	294b883a 	add	r5,r5,r5
   85738:	1146703a 	and	r3,r2,r5
   8573c:	5ac00104 	addi	r11,r11,4
   85740:	183ffc26 	beq	r3,zero,85734 <_malloc_r+0x624>
   85744:	5809883a 	mov	r4,r11
   85748:	003f0006 	br	8534c <_malloc_r+0x23c>
   8574c:	00805504 	movi	r2,340
   85750:	11001336 	bltu	r2,r4,857a0 <_malloc_r+0x690>
   85754:	8808d3fa 	srli	r4,r17,15
   85758:	21001dc4 	addi	r4,r4,119
   8575c:	210b883a 	add	r5,r4,r4
   85760:	003eb206 	br	8522c <_malloc_r+0x11c>
   85764:	00840004 	movi	r2,4096
   85768:	003f5d06 	br	854e0 <_malloc_r+0x3d0>
   8576c:	00800044 	movi	r2,1
   85770:	a0800115 	stw	r2,4(r20)
   85774:	a021883a 	mov	r16,r20
   85778:	0007883a 	mov	r3,zero
   8577c:	003f8106 	br	85584 <_malloc_r+0x474>
   85780:	280bd0ba 	srai	r5,r5,2
   85784:	01800044 	movi	r6,1
   85788:	38800117 	ldw	r2,4(r7)
   8578c:	314c983a 	sll	r6,r6,r5
   85790:	180b883a 	mov	r5,r3
   85794:	3084b03a 	or	r2,r6,r2
   85798:	38800115 	stw	r2,4(r7)
   8579c:	003fa906 	br	85644 <_malloc_r+0x534>
   857a0:	00815504 	movi	r2,1364
   857a4:	11001836 	bltu	r2,r4,85808 <_malloc_r+0x6f8>
   857a8:	8808d4ba 	srli	r4,r17,18
   857ac:	21001f04 	addi	r4,r4,124
   857b0:	210b883a 	add	r5,r4,r4
   857b4:	003e9d06 	br	8522c <_malloc_r+0x11c>
   857b8:	bdc00404 	addi	r23,r23,16
   857bc:	003f2f06 	br	8547c <_malloc_r+0x36c>
   857c0:	01401504 	movi	r5,84
   857c4:	28c01f36 	bltu	r5,r3,85844 <_malloc_r+0x734>
   857c8:	100ad33a 	srli	r5,r2,12
   857cc:	29401b84 	addi	r5,r5,110
   857d0:	294d883a 	add	r6,r5,r5
   857d4:	003f8c06 	br	85608 <_malloc_r+0x4f8>
   857d8:	9c000217 	ldw	r16,8(r19)
   857dc:	00bfff04 	movi	r2,-4
   857e0:	80c00117 	ldw	r3,4(r16)
   857e4:	1886703a 	and	r3,r3,r2
   857e8:	003f6606 	br	85584 <_malloc_r+0x474>
   857ec:	e0c3ffcc 	andi	r3,fp,4095
   857f0:	183f2f1e 	bne	r3,zero,854b0 <_malloc_r+0x3a0>
   857f4:	98c00217 	ldw	r3,8(r19)
   857f8:	bd49883a 	add	r4,r23,r21
   857fc:	21000054 	ori	r4,r4,1
   85800:	19000115 	stw	r4,4(r3)
   85804:	003f5506 	br	8555c <_malloc_r+0x44c>
   85808:	01403f04 	movi	r5,252
   8580c:	01001f84 	movi	r4,126
   85810:	003e8606 	br	8522c <_malloc_r+0x11c>
   85814:	9009883a 	mov	r4,r18
   85818:	81400204 	addi	r5,r16,8
   8581c:	00845780 	call	84578 <_free_r>
   85820:	00800274 	movhi	r2,9
   85824:	10817704 	addi	r2,r2,1500
   85828:	10800017 	ldw	r2,0(r2)
   8582c:	003f4b06 	br	8555c <_malloc_r+0x44c>
   85830:	00c00044 	movi	r3,1
   85834:	002f883a 	mov	r23,zero
   85838:	003f3406 	br	8550c <_malloc_r+0x3fc>
   8583c:	d5200315 	stw	r20,-32756(gp)
   85840:	003f2106 	br	854c8 <_malloc_r+0x3b8>
   85844:	01405504 	movi	r5,340
   85848:	28c00436 	bltu	r5,r3,8585c <_malloc_r+0x74c>
   8584c:	100ad3fa 	srli	r5,r2,15
   85850:	29401dc4 	addi	r5,r5,119
   85854:	294d883a 	add	r6,r5,r5
   85858:	003f6b06 	br	85608 <_malloc_r+0x4f8>
   8585c:	01415504 	movi	r5,1364
   85860:	28c00936 	bltu	r5,r3,85888 <_malloc_r+0x778>
   85864:	100ad4ba 	srli	r5,r2,18
   85868:	29401f04 	addi	r5,r5,124
   8586c:	294d883a 	add	r6,r5,r5
   85870:	003f6506 	br	85608 <_malloc_r+0x4f8>
   85874:	98800117 	ldw	r2,4(r19)
   85878:	0146303a 	nor	r3,zero,r5
   8587c:	1884703a 	and	r2,r3,r2
   85880:	98800115 	stw	r2,4(r19)
   85884:	003f9006 	br	856c8 <_malloc_r+0x5b8>
   85888:	01803f04 	movi	r6,252
   8588c:	01401f84 	movi	r5,126
   85890:	003f5d06 	br	85608 <_malloc_r+0x4f8>

00085894 <memchr>:
   85894:	008000c4 	movi	r2,3
   85898:	29403fcc 	andi	r5,r5,255
   8589c:	1180282e 	bgeu	r2,r6,85940 <memchr+0xac>
   858a0:	2086703a 	and	r3,r4,r2
   858a4:	1800351e 	bne	r3,zero,8597c <memchr+0xe8>
   858a8:	2816923a 	slli	r11,r5,8
   858ac:	2093883a 	add	r9,r4,r2
   858b0:	22000084 	addi	r8,r4,2
   858b4:	5957883a 	add	r11,r11,r5
   858b8:	5816923a 	slli	r11,r11,8
   858bc:	20c00044 	addi	r3,r4,1
   858c0:	037fbff4 	movhi	r13,65279
   858c4:	6b7fbfc4 	addi	r13,r13,-257
   858c8:	5957883a 	add	r11,r11,r5
   858cc:	5816923a 	slli	r11,r11,8
   858d0:	03202074 	movhi	r12,32897
   858d4:	63202004 	addi	r12,r12,-32640
   858d8:	101d883a 	mov	r14,r2
   858dc:	5957883a 	add	r11,r11,r5
   858e0:	21c00017 	ldw	r7,0(r4)
   858e4:	31bfff04 	addi	r6,r6,-4
   858e8:	1805883a 	mov	r2,r3
   858ec:	3acef03a 	xor	r7,r7,r11
   858f0:	3b55883a 	add	r10,r7,r13
   858f4:	01ce303a 	nor	r7,zero,r7
   858f8:	51ce703a 	and	r7,r10,r7
   858fc:	3b0e703a 	and	r7,r7,r12
   85900:	38000a26 	beq	r7,zero,8592c <memchr+0x98>
   85904:	21c00003 	ldbu	r7,0(r4)
   85908:	39401e26 	beq	r7,r5,85984 <memchr+0xf0>
   8590c:	19c00003 	ldbu	r7,0(r3)
   85910:	39401926 	beq	r7,r5,85978 <memchr+0xe4>
   85914:	41c00003 	ldbu	r7,0(r8)
   85918:	4005883a 	mov	r2,r8
   8591c:	39401626 	beq	r7,r5,85978 <memchr+0xe4>
   85920:	49c00003 	ldbu	r7,0(r9)
   85924:	4805883a 	mov	r2,r9
   85928:	39401326 	beq	r7,r5,85978 <memchr+0xe4>
   8592c:	21000104 	addi	r4,r4,4
   85930:	4a400104 	addi	r9,r9,4
   85934:	42000104 	addi	r8,r8,4
   85938:	18c00104 	addi	r3,r3,4
   8593c:	71bfe836 	bltu	r14,r6,858e0 <memchr+0x4c>
   85940:	2005883a 	mov	r2,r4
   85944:	30000a26 	beq	r6,zero,85970 <memchr+0xdc>
   85948:	10c00003 	ldbu	r3,0(r2)
   8594c:	19400a26 	beq	r3,r5,85978 <memchr+0xe4>
   85950:	10c00044 	addi	r3,r2,1
   85954:	118d883a 	add	r6,r2,r6
   85958:	00000306 	br	85968 <memchr+0xd4>
   8595c:	11000003 	ldbu	r4,0(r2)
   85960:	18c00044 	addi	r3,r3,1
   85964:	21400426 	beq	r4,r5,85978 <memchr+0xe4>
   85968:	1805883a 	mov	r2,r3
   8596c:	19bffb1e 	bne	r3,r6,8595c <memchr+0xc8>
   85970:	0005883a 	mov	r2,zero
   85974:	f800283a 	ret
   85978:	f800283a 	ret
   8597c:	2005883a 	mov	r2,r4
   85980:	003ff106 	br	85948 <memchr+0xb4>
   85984:	2005883a 	mov	r2,r4
   85988:	f800283a 	ret

0008598c <memcpy>:
   8598c:	defffb04 	addi	sp,sp,-20
   85990:	dc000015 	stw	r16,0(sp)
   85994:	dfc00415 	stw	ra,16(sp)
   85998:	dcc00315 	stw	r19,12(sp)
   8599c:	dc800215 	stw	r18,8(sp)
   859a0:	dc400115 	stw	r17,4(sp)
   859a4:	00c003c4 	movi	r3,15
   859a8:	2021883a 	mov	r16,r4
   859ac:	3005883a 	mov	r2,r6
   859b0:	1980032e 	bgeu	r3,r6,859c0 <memcpy+0x34>
   859b4:	2906b03a 	or	r3,r5,r4
   859b8:	18c000cc 	andi	r3,r3,3
   859bc:	18001026 	beq	r3,zero,85a00 <memcpy+0x74>
   859c0:	8007883a 	mov	r3,r16
   859c4:	288f883a 	add	r7,r5,r2
   859c8:	10000526 	beq	r2,zero,859e0 <memcpy+0x54>
   859cc:	29800003 	ldbu	r6,0(r5)
   859d0:	18c00044 	addi	r3,r3,1
   859d4:	29400044 	addi	r5,r5,1
   859d8:	19bfffc5 	stb	r6,-1(r3)
   859dc:	29fffb1e 	bne	r5,r7,859cc <memcpy+0x40>
   859e0:	8005883a 	mov	r2,r16
   859e4:	dfc00417 	ldw	ra,16(sp)
   859e8:	dcc00317 	ldw	r19,12(sp)
   859ec:	dc800217 	ldw	r18,8(sp)
   859f0:	dc400117 	ldw	r17,4(sp)
   859f4:	dc000017 	ldw	r16,0(sp)
   859f8:	dec00504 	addi	sp,sp,20
   859fc:	f800283a 	ret
   85a00:	32bffc04 	addi	r10,r6,-16
   85a04:	5014d13a 	srli	r10,r10,4
   85a08:	20800404 	addi	r2,r4,16
   85a0c:	2007883a 	mov	r3,r4
   85a10:	5008913a 	slli	r4,r10,4
   85a14:	280f883a 	mov	r7,r5
   85a18:	1105883a 	add	r2,r2,r4
   85a1c:	3a000017 	ldw	r8,0(r7)
   85a20:	18c00404 	addi	r3,r3,16
   85a24:	39c00404 	addi	r7,r7,16
   85a28:	1a3ffc15 	stw	r8,-16(r3)
   85a2c:	3a3ffd17 	ldw	r8,-12(r7)
   85a30:	1a3ffd15 	stw	r8,-12(r3)
   85a34:	3a3ffe17 	ldw	r8,-8(r7)
   85a38:	1a3ffe15 	stw	r8,-8(r3)
   85a3c:	3a3fff17 	ldw	r8,-4(r7)
   85a40:	1a3fff15 	stw	r8,-4(r3)
   85a44:	18bff51e 	bne	r3,r2,85a1c <memcpy+0x90>
   85a48:	52800044 	addi	r10,r10,1
   85a4c:	5014913a 	slli	r10,r10,4
   85a50:	308003cc 	andi	r2,r6,15
   85a54:	010000c4 	movi	r4,3
   85a58:	8287883a 	add	r3,r16,r10
   85a5c:	2a95883a 	add	r10,r5,r10
   85a60:	2080182e 	bgeu	r4,r2,85ac4 <memcpy+0x138>
   85a64:	147fff04 	addi	r17,r2,-4
   85a68:	8808d0ba 	srli	r4,r17,2
   85a6c:	1a400104 	addi	r9,r3,4
   85a70:	180d883a 	mov	r6,r3
   85a74:	2105883a 	add	r2,r4,r4
   85a78:	1085883a 	add	r2,r2,r2
   85a7c:	4893883a 	add	r9,r9,r2
   85a80:	500f883a 	mov	r7,r10
   85a84:	3a000017 	ldw	r8,0(r7)
   85a88:	31800104 	addi	r6,r6,4
   85a8c:	39c00104 	addi	r7,r7,4
   85a90:	323fff15 	stw	r8,-4(r6)
   85a94:	327ffb1e 	bne	r6,r9,85a84 <memcpy+0xf8>
   85a98:	20800044 	addi	r2,r4,1
   85a9c:	1085883a 	add	r2,r2,r2
   85aa0:	1085883a 	add	r2,r2,r2
   85aa4:	017fff04 	movi	r5,-4
   85aa8:	18a5883a 	add	r18,r3,r2
   85aac:	50a7883a 	add	r19,r10,r2
   85ab0:	00894740 	call	89474 <__mulsi3>
   85ab4:	1445883a 	add	r2,r2,r17
   85ab8:	980b883a 	mov	r5,r19
   85abc:	9007883a 	mov	r3,r18
   85ac0:	003fc006 	br	859c4 <memcpy+0x38>
   85ac4:	500b883a 	mov	r5,r10
   85ac8:	003fbe06 	br	859c4 <memcpy+0x38>

00085acc <memmove>:
   85acc:	defffb04 	addi	sp,sp,-20
   85ad0:	dc000015 	stw	r16,0(sp)
   85ad4:	dfc00415 	stw	ra,16(sp)
   85ad8:	dcc00315 	stw	r19,12(sp)
   85adc:	dc800215 	stw	r18,8(sp)
   85ae0:	dc400115 	stw	r17,4(sp)
   85ae4:	2021883a 	mov	r16,r4
   85ae8:	300f883a 	mov	r7,r6
   85aec:	2900122e 	bgeu	r5,r4,85b38 <memmove+0x6c>
   85af0:	2987883a 	add	r3,r5,r6
   85af4:	20c0102e 	bgeu	r4,r3,85b38 <memmove+0x6c>
   85af8:	218b883a 	add	r5,r4,r6
   85afc:	1989c83a 	sub	r4,r3,r6
   85b00:	30000526 	beq	r6,zero,85b18 <memmove+0x4c>
   85b04:	18ffffc4 	addi	r3,r3,-1
   85b08:	18800003 	ldbu	r2,0(r3)
   85b0c:	297fffc4 	addi	r5,r5,-1
   85b10:	28800005 	stb	r2,0(r5)
   85b14:	193ffb1e 	bne	r3,r4,85b04 <memmove+0x38>
   85b18:	8005883a 	mov	r2,r16
   85b1c:	dfc00417 	ldw	ra,16(sp)
   85b20:	dcc00317 	ldw	r19,12(sp)
   85b24:	dc800217 	ldw	r18,8(sp)
   85b28:	dc400117 	ldw	r17,4(sp)
   85b2c:	dc000017 	ldw	r16,0(sp)
   85b30:	dec00504 	addi	sp,sp,20
   85b34:	f800283a 	ret
   85b38:	008003c4 	movi	r2,15
   85b3c:	1180422e 	bgeu	r2,r6,85c48 <memmove+0x17c>
   85b40:	2c04b03a 	or	r2,r5,r16
   85b44:	108000cc 	andi	r2,r2,3
   85b48:	10003f1e 	bne	r2,zero,85c48 <memmove+0x17c>
   85b4c:	32bffc04 	addi	r10,r6,-16
   85b50:	5014d13a 	srli	r10,r10,4
   85b54:	81000404 	addi	r4,r16,16
   85b58:	8007883a 	mov	r3,r16
   85b5c:	5004913a 	slli	r2,r10,4
   85b60:	280f883a 	mov	r7,r5
   85b64:	2089883a 	add	r4,r4,r2
   85b68:	38800017 	ldw	r2,0(r7)
   85b6c:	18c00404 	addi	r3,r3,16
   85b70:	39c00404 	addi	r7,r7,16
   85b74:	18bffc15 	stw	r2,-16(r3)
   85b78:	38bffd17 	ldw	r2,-12(r7)
   85b7c:	18bffd15 	stw	r2,-12(r3)
   85b80:	38bffe17 	ldw	r2,-8(r7)
   85b84:	18bffe15 	stw	r2,-8(r3)
   85b88:	38bfff17 	ldw	r2,-4(r7)
   85b8c:	18bfff15 	stw	r2,-4(r3)
   85b90:	193ff51e 	bne	r3,r4,85b68 <memmove+0x9c>
   85b94:	52800044 	addi	r10,r10,1
   85b98:	5014913a 	slli	r10,r10,4
   85b9c:	31c003cc 	andi	r7,r6,15
   85ba0:	008000c4 	movi	r2,3
   85ba4:	8287883a 	add	r3,r16,r10
   85ba8:	2a95883a 	add	r10,r5,r10
   85bac:	11c0282e 	bgeu	r2,r7,85c50 <memmove+0x184>
   85bb0:	3c7fff04 	addi	r17,r7,-4
   85bb4:	8808d0ba 	srli	r4,r17,2
   85bb8:	1a400104 	addi	r9,r3,4
   85bbc:	180d883a 	mov	r6,r3
   85bc0:	2105883a 	add	r2,r4,r4
   85bc4:	1085883a 	add	r2,r2,r2
   85bc8:	4893883a 	add	r9,r9,r2
   85bcc:	5005883a 	mov	r2,r10
   85bd0:	12000017 	ldw	r8,0(r2)
   85bd4:	31800104 	addi	r6,r6,4
   85bd8:	10800104 	addi	r2,r2,4
   85bdc:	323fff15 	stw	r8,-4(r6)
   85be0:	327ffb1e 	bne	r6,r9,85bd0 <memmove+0x104>
   85be4:	20800044 	addi	r2,r4,1
   85be8:	1085883a 	add	r2,r2,r2
   85bec:	1085883a 	add	r2,r2,r2
   85bf0:	017fff04 	movi	r5,-4
   85bf4:	18a5883a 	add	r18,r3,r2
   85bf8:	50a7883a 	add	r19,r10,r2
   85bfc:	00894740 	call	89474 <__mulsi3>
   85c00:	144f883a 	add	r7,r2,r17
   85c04:	980b883a 	mov	r5,r19
   85c08:	9007883a 	mov	r3,r18
   85c0c:	383fc226 	beq	r7,zero,85b18 <memmove+0x4c>
   85c10:	19cf883a 	add	r7,r3,r7
   85c14:	29800003 	ldbu	r6,0(r5)
   85c18:	18c00044 	addi	r3,r3,1
   85c1c:	29400044 	addi	r5,r5,1
   85c20:	19bfffc5 	stb	r6,-1(r3)
   85c24:	19fffb1e 	bne	r3,r7,85c14 <memmove+0x148>
   85c28:	8005883a 	mov	r2,r16
   85c2c:	dfc00417 	ldw	ra,16(sp)
   85c30:	dcc00317 	ldw	r19,12(sp)
   85c34:	dc800217 	ldw	r18,8(sp)
   85c38:	dc400117 	ldw	r17,4(sp)
   85c3c:	dc000017 	ldw	r16,0(sp)
   85c40:	dec00504 	addi	sp,sp,20
   85c44:	f800283a 	ret
   85c48:	8007883a 	mov	r3,r16
   85c4c:	003fef06 	br	85c0c <memmove+0x140>
   85c50:	500b883a 	mov	r5,r10
   85c54:	003fed06 	br	85c0c <memmove+0x140>

00085c58 <memset>:
   85c58:	00c000c4 	movi	r3,3
   85c5c:	2005883a 	mov	r2,r4
   85c60:	29403fcc 	andi	r5,r5,255
   85c64:	19802d2e 	bgeu	r3,r6,85d1c <memset+0xc4>
   85c68:	20c6703a 	and	r3,r4,r3
   85c6c:	18002e1e 	bne	r3,zero,85d28 <memset+0xd0>
   85c70:	2806923a 	slli	r3,r5,8
   85c74:	010003c4 	movi	r4,15
   85c78:	3011883a 	mov	r8,r6
   85c7c:	1946b03a 	or	r3,r3,r5
   85c80:	180e943a 	slli	r7,r3,16
   85c84:	38ceb03a 	or	r7,r7,r3
   85c88:	1007883a 	mov	r3,r2
   85c8c:	21800f2e 	bgeu	r4,r6,85ccc <memset+0x74>
   85c90:	19c00015 	stw	r7,0(r3)
   85c94:	19c00115 	stw	r7,4(r3)
   85c98:	19c00215 	stw	r7,8(r3)
   85c9c:	19c00315 	stw	r7,12(r3)
   85ca0:	423ffc04 	addi	r8,r8,-16
   85ca4:	18c00404 	addi	r3,r3,16
   85ca8:	223ff936 	bltu	r4,r8,85c90 <memset+0x38>
   85cac:	30fffc04 	addi	r3,r6,-16
   85cb0:	1806d13a 	srli	r3,r3,4
   85cb4:	318003cc 	andi	r6,r6,15
   85cb8:	010000c4 	movi	r4,3
   85cbc:	18c00044 	addi	r3,r3,1
   85cc0:	1806913a 	slli	r3,r3,4
   85cc4:	10c7883a 	add	r3,r2,r3
   85cc8:	21800e2e 	bgeu	r4,r6,85d04 <memset+0xac>
   85ccc:	1813883a 	mov	r9,r3
   85cd0:	3011883a 	mov	r8,r6
   85cd4:	010000c4 	movi	r4,3
   85cd8:	49c00015 	stw	r7,0(r9)
   85cdc:	423fff04 	addi	r8,r8,-4
   85ce0:	4a400104 	addi	r9,r9,4
   85ce4:	223ffc36 	bltu	r4,r8,85cd8 <memset+0x80>
   85ce8:	313fff04 	addi	r4,r6,-4
   85cec:	2008d0ba 	srli	r4,r4,2
   85cf0:	318000cc 	andi	r6,r6,3
   85cf4:	21000044 	addi	r4,r4,1
   85cf8:	2109883a 	add	r4,r4,r4
   85cfc:	2109883a 	add	r4,r4,r4
   85d00:	1907883a 	add	r3,r3,r4
   85d04:	30000a26 	beq	r6,zero,85d30 <memset+0xd8>
   85d08:	198d883a 	add	r6,r3,r6
   85d0c:	19400005 	stb	r5,0(r3)
   85d10:	18c00044 	addi	r3,r3,1
   85d14:	19bffd1e 	bne	r3,r6,85d0c <memset+0xb4>
   85d18:	f800283a 	ret
   85d1c:	2007883a 	mov	r3,r4
   85d20:	303ff91e 	bne	r6,zero,85d08 <memset+0xb0>
   85d24:	00000206 	br	85d30 <memset+0xd8>
   85d28:	2007883a 	mov	r3,r4
   85d2c:	003ff606 	br	85d08 <memset+0xb0>
   85d30:	f800283a 	ret

00085d34 <_Balloc>:
   85d34:	20801317 	ldw	r2,76(r4)
   85d38:	defffc04 	addi	sp,sp,-16
   85d3c:	dc400115 	stw	r17,4(sp)
   85d40:	dc000015 	stw	r16,0(sp)
   85d44:	dfc00315 	stw	ra,12(sp)
   85d48:	dc800215 	stw	r18,8(sp)
   85d4c:	2023883a 	mov	r17,r4
   85d50:	2821883a 	mov	r16,r5
   85d54:	10000f26 	beq	r2,zero,85d94 <_Balloc+0x60>
   85d58:	8407883a 	add	r3,r16,r16
   85d5c:	18c7883a 	add	r3,r3,r3
   85d60:	10c7883a 	add	r3,r2,r3
   85d64:	18800017 	ldw	r2,0(r3)
   85d68:	10001126 	beq	r2,zero,85db0 <_Balloc+0x7c>
   85d6c:	11000017 	ldw	r4,0(r2)
   85d70:	19000015 	stw	r4,0(r3)
   85d74:	10000415 	stw	zero,16(r2)
   85d78:	10000315 	stw	zero,12(r2)
   85d7c:	dfc00317 	ldw	ra,12(sp)
   85d80:	dc800217 	ldw	r18,8(sp)
   85d84:	dc400117 	ldw	r17,4(sp)
   85d88:	dc000017 	ldw	r16,0(sp)
   85d8c:	dec00404 	addi	sp,sp,16
   85d90:	f800283a 	ret
   85d94:	01400104 	movi	r5,4
   85d98:	01800404 	movi	r6,16
   85d9c:	00876980 	call	87698 <_calloc_r>
   85da0:	88801315 	stw	r2,76(r17)
   85da4:	103fec1e 	bne	r2,zero,85d58 <_Balloc+0x24>
   85da8:	0005883a 	mov	r2,zero
   85dac:	003ff306 	br	85d7c <_Balloc+0x48>
   85db0:	01400044 	movi	r5,1
   85db4:	2c24983a 	sll	r18,r5,r16
   85db8:	8809883a 	mov	r4,r17
   85dbc:	91800144 	addi	r6,r18,5
   85dc0:	318d883a 	add	r6,r6,r6
   85dc4:	318d883a 	add	r6,r6,r6
   85dc8:	00876980 	call	87698 <_calloc_r>
   85dcc:	103ff626 	beq	r2,zero,85da8 <_Balloc+0x74>
   85dd0:	14000115 	stw	r16,4(r2)
   85dd4:	14800215 	stw	r18,8(r2)
   85dd8:	003fe606 	br	85d74 <_Balloc+0x40>

00085ddc <_Bfree>:
   85ddc:	28000826 	beq	r5,zero,85e00 <_Bfree+0x24>
   85de0:	28c00117 	ldw	r3,4(r5)
   85de4:	20801317 	ldw	r2,76(r4)
   85de8:	18c7883a 	add	r3,r3,r3
   85dec:	18c7883a 	add	r3,r3,r3
   85df0:	10c5883a 	add	r2,r2,r3
   85df4:	10c00017 	ldw	r3,0(r2)
   85df8:	28c00015 	stw	r3,0(r5)
   85dfc:	11400015 	stw	r5,0(r2)
   85e00:	f800283a 	ret

00085e04 <__multadd>:
   85e04:	defff604 	addi	sp,sp,-40
   85e08:	dd400515 	stw	r21,20(sp)
   85e0c:	2d400417 	ldw	r21,16(r5)
   85e10:	df000815 	stw	fp,32(sp)
   85e14:	ddc00715 	stw	r23,28(sp)
   85e18:	dd800615 	stw	r22,24(sp)
   85e1c:	dd000415 	stw	r20,16(sp)
   85e20:	dc400115 	stw	r17,4(sp)
   85e24:	dc000015 	stw	r16,0(sp)
   85e28:	dfc00915 	stw	ra,36(sp)
   85e2c:	dcc00315 	stw	r19,12(sp)
   85e30:	dc800215 	stw	r18,8(sp)
   85e34:	282d883a 	mov	r22,r5
   85e38:	202f883a 	mov	r23,r4
   85e3c:	3029883a 	mov	r20,r6
   85e40:	3839883a 	mov	fp,r7
   85e44:	2c000504 	addi	r16,r5,20
   85e48:	0023883a 	mov	r17,zero
   85e4c:	84c00017 	ldw	r19,0(r16)
   85e50:	a00b883a 	mov	r5,r20
   85e54:	8c400044 	addi	r17,r17,1
   85e58:	993fffcc 	andi	r4,r19,65535
   85e5c:	00894740 	call	89474 <__mulsi3>
   85e60:	1725883a 	add	r18,r2,fp
   85e64:	9808d43a 	srli	r4,r19,16
   85e68:	9026d43a 	srli	r19,r18,16
   85e6c:	a00b883a 	mov	r5,r20
   85e70:	00894740 	call	89474 <__mulsi3>
   85e74:	988f883a 	add	r7,r19,r2
   85e78:	3804943a 	slli	r2,r7,16
   85e7c:	94bfffcc 	andi	r18,r18,65535
   85e80:	3838d43a 	srli	fp,r7,16
   85e84:	14a5883a 	add	r18,r2,r18
   85e88:	84800015 	stw	r18,0(r16)
   85e8c:	84000104 	addi	r16,r16,4
   85e90:	8d7fee16 	blt	r17,r21,85e4c <__multadd+0x48>
   85e94:	e0000926 	beq	fp,zero,85ebc <__multadd+0xb8>
   85e98:	b0800217 	ldw	r2,8(r22)
   85e9c:	a880140e 	bge	r21,r2,85ef0 <__multadd+0xec>
   85ea0:	a8800144 	addi	r2,r21,5
   85ea4:	1085883a 	add	r2,r2,r2
   85ea8:	1085883a 	add	r2,r2,r2
   85eac:	b085883a 	add	r2,r22,r2
   85eb0:	ad400044 	addi	r21,r21,1
   85eb4:	17000015 	stw	fp,0(r2)
   85eb8:	b5400415 	stw	r21,16(r22)
   85ebc:	b005883a 	mov	r2,r22
   85ec0:	dfc00917 	ldw	ra,36(sp)
   85ec4:	df000817 	ldw	fp,32(sp)
   85ec8:	ddc00717 	ldw	r23,28(sp)
   85ecc:	dd800617 	ldw	r22,24(sp)
   85ed0:	dd400517 	ldw	r21,20(sp)
   85ed4:	dd000417 	ldw	r20,16(sp)
   85ed8:	dcc00317 	ldw	r19,12(sp)
   85edc:	dc800217 	ldw	r18,8(sp)
   85ee0:	dc400117 	ldw	r17,4(sp)
   85ee4:	dc000017 	ldw	r16,0(sp)
   85ee8:	dec00a04 	addi	sp,sp,40
   85eec:	f800283a 	ret
   85ef0:	b1400117 	ldw	r5,4(r22)
   85ef4:	b809883a 	mov	r4,r23
   85ef8:	29400044 	addi	r5,r5,1
   85efc:	0085d340 	call	85d34 <_Balloc>
   85f00:	b1800417 	ldw	r6,16(r22)
   85f04:	b1400304 	addi	r5,r22,12
   85f08:	11000304 	addi	r4,r2,12
   85f0c:	31800084 	addi	r6,r6,2
   85f10:	318d883a 	add	r6,r6,r6
   85f14:	318d883a 	add	r6,r6,r6
   85f18:	1021883a 	mov	r16,r2
   85f1c:	008598c0 	call	8598c <memcpy>
   85f20:	b0c00117 	ldw	r3,4(r22)
   85f24:	b8801317 	ldw	r2,76(r23)
   85f28:	18c7883a 	add	r3,r3,r3
   85f2c:	18c7883a 	add	r3,r3,r3
   85f30:	10c5883a 	add	r2,r2,r3
   85f34:	10c00017 	ldw	r3,0(r2)
   85f38:	b0c00015 	stw	r3,0(r22)
   85f3c:	15800015 	stw	r22,0(r2)
   85f40:	802d883a 	mov	r22,r16
   85f44:	003fd606 	br	85ea0 <__multadd+0x9c>

00085f48 <__s2b>:
   85f48:	defff904 	addi	sp,sp,-28
   85f4c:	dd000415 	stw	r20,16(sp)
   85f50:	dc400115 	stw	r17,4(sp)
   85f54:	2829883a 	mov	r20,r5
   85f58:	2023883a 	mov	r17,r4
   85f5c:	01400244 	movi	r5,9
   85f60:	39000204 	addi	r4,r7,8
   85f64:	dcc00315 	stw	r19,12(sp)
   85f68:	dc800215 	stw	r18,8(sp)
   85f6c:	dfc00615 	stw	ra,24(sp)
   85f70:	dd400515 	stw	r21,20(sp)
   85f74:	dc000015 	stw	r16,0(sp)
   85f78:	3825883a 	mov	r18,r7
   85f7c:	3027883a 	mov	r19,r6
   85f80:	00803680 	call	80368 <__divsi3>
   85f84:	00c00044 	movi	r3,1
   85f88:	000b883a 	mov	r5,zero
   85f8c:	1880030e 	bge	r3,r2,85f9c <__s2b+0x54>
   85f90:	18c7883a 	add	r3,r3,r3
   85f94:	29400044 	addi	r5,r5,1
   85f98:	18bffd16 	blt	r3,r2,85f90 <__s2b+0x48>
   85f9c:	8809883a 	mov	r4,r17
   85fa0:	0085d340 	call	85d34 <_Balloc>
   85fa4:	d8c00717 	ldw	r3,28(sp)
   85fa8:	10c00515 	stw	r3,20(r2)
   85fac:	00c00044 	movi	r3,1
   85fb0:	10c00415 	stw	r3,16(r2)
   85fb4:	00c00244 	movi	r3,9
   85fb8:	1cc0210e 	bge	r3,r19,86040 <__s2b+0xf8>
   85fbc:	a0eb883a 	add	r21,r20,r3
   85fc0:	a821883a 	mov	r16,r21
   85fc4:	a4e9883a 	add	r20,r20,r19
   85fc8:	81c00007 	ldb	r7,0(r16)
   85fcc:	8809883a 	mov	r4,r17
   85fd0:	84000044 	addi	r16,r16,1
   85fd4:	100b883a 	mov	r5,r2
   85fd8:	01800284 	movi	r6,10
   85fdc:	39fff404 	addi	r7,r7,-48
   85fe0:	0085e040 	call	85e04 <__multadd>
   85fe4:	853ff81e 	bne	r16,r20,85fc8 <__s2b+0x80>
   85fe8:	ace1883a 	add	r16,r21,r19
   85fec:	843ffe04 	addi	r16,r16,-8
   85ff0:	9c800a0e 	bge	r19,r18,8601c <__s2b+0xd4>
   85ff4:	94e5c83a 	sub	r18,r18,r19
   85ff8:	84a5883a 	add	r18,r16,r18
   85ffc:	81c00007 	ldb	r7,0(r16)
   86000:	8809883a 	mov	r4,r17
   86004:	84000044 	addi	r16,r16,1
   86008:	100b883a 	mov	r5,r2
   8600c:	01800284 	movi	r6,10
   86010:	39fff404 	addi	r7,r7,-48
   86014:	0085e040 	call	85e04 <__multadd>
   86018:	84bff81e 	bne	r16,r18,85ffc <__s2b+0xb4>
   8601c:	dfc00617 	ldw	ra,24(sp)
   86020:	dd400517 	ldw	r21,20(sp)
   86024:	dd000417 	ldw	r20,16(sp)
   86028:	dcc00317 	ldw	r19,12(sp)
   8602c:	dc800217 	ldw	r18,8(sp)
   86030:	dc400117 	ldw	r17,4(sp)
   86034:	dc000017 	ldw	r16,0(sp)
   86038:	dec00704 	addi	sp,sp,28
   8603c:	f800283a 	ret
   86040:	a4000284 	addi	r16,r20,10
   86044:	1827883a 	mov	r19,r3
   86048:	003fe906 	br	85ff0 <__s2b+0xa8>

0008604c <__hi0bits>:
   8604c:	20bfffec 	andhi	r2,r4,65535
   86050:	1000141e 	bne	r2,zero,860a4 <__hi0bits+0x58>
   86054:	2008943a 	slli	r4,r4,16
   86058:	00800404 	movi	r2,16
   8605c:	20ffc02c 	andhi	r3,r4,65280
   86060:	1800021e 	bne	r3,zero,8606c <__hi0bits+0x20>
   86064:	2008923a 	slli	r4,r4,8
   86068:	10800204 	addi	r2,r2,8
   8606c:	20fc002c 	andhi	r3,r4,61440
   86070:	1800021e 	bne	r3,zero,8607c <__hi0bits+0x30>
   86074:	2008913a 	slli	r4,r4,4
   86078:	10800104 	addi	r2,r2,4
   8607c:	20f0002c 	andhi	r3,r4,49152
   86080:	1800031e 	bne	r3,zero,86090 <__hi0bits+0x44>
   86084:	2109883a 	add	r4,r4,r4
   86088:	10800084 	addi	r2,r2,2
   8608c:	2109883a 	add	r4,r4,r4
   86090:	20000316 	blt	r4,zero,860a0 <__hi0bits+0x54>
   86094:	2110002c 	andhi	r4,r4,16384
   86098:	2000041e 	bne	r4,zero,860ac <__hi0bits+0x60>
   8609c:	00800804 	movi	r2,32
   860a0:	f800283a 	ret
   860a4:	0005883a 	mov	r2,zero
   860a8:	003fec06 	br	8605c <__hi0bits+0x10>
   860ac:	10800044 	addi	r2,r2,1
   860b0:	f800283a 	ret

000860b4 <__lo0bits>:
   860b4:	20c00017 	ldw	r3,0(r4)
   860b8:	188001cc 	andi	r2,r3,7
   860bc:	10000826 	beq	r2,zero,860e0 <__lo0bits+0x2c>
   860c0:	1880004c 	andi	r2,r3,1
   860c4:	1000211e 	bne	r2,zero,8614c <__lo0bits+0x98>
   860c8:	1880008c 	andi	r2,r3,2
   860cc:	1000211e 	bne	r2,zero,86154 <__lo0bits+0xa0>
   860d0:	1806d0ba 	srli	r3,r3,2
   860d4:	00800084 	movi	r2,2
   860d8:	20c00015 	stw	r3,0(r4)
   860dc:	f800283a 	ret
   860e0:	18bfffcc 	andi	r2,r3,65535
   860e4:	10001326 	beq	r2,zero,86134 <__lo0bits+0x80>
   860e8:	0005883a 	mov	r2,zero
   860ec:	19403fcc 	andi	r5,r3,255
   860f0:	2800021e 	bne	r5,zero,860fc <__lo0bits+0x48>
   860f4:	1806d23a 	srli	r3,r3,8
   860f8:	10800204 	addi	r2,r2,8
   860fc:	194003cc 	andi	r5,r3,15
   86100:	2800021e 	bne	r5,zero,8610c <__lo0bits+0x58>
   86104:	1806d13a 	srli	r3,r3,4
   86108:	10800104 	addi	r2,r2,4
   8610c:	194000cc 	andi	r5,r3,3
   86110:	2800021e 	bne	r5,zero,8611c <__lo0bits+0x68>
   86114:	1806d0ba 	srli	r3,r3,2
   86118:	10800084 	addi	r2,r2,2
   8611c:	1940004c 	andi	r5,r3,1
   86120:	2800081e 	bne	r5,zero,86144 <__lo0bits+0x90>
   86124:	1806d07a 	srli	r3,r3,1
   86128:	1800051e 	bne	r3,zero,86140 <__lo0bits+0x8c>
   8612c:	00800804 	movi	r2,32
   86130:	f800283a 	ret
   86134:	1806d43a 	srli	r3,r3,16
   86138:	00800404 	movi	r2,16
   8613c:	003feb06 	br	860ec <__lo0bits+0x38>
   86140:	10800044 	addi	r2,r2,1
   86144:	20c00015 	stw	r3,0(r4)
   86148:	f800283a 	ret
   8614c:	0005883a 	mov	r2,zero
   86150:	f800283a 	ret
   86154:	1806d07a 	srli	r3,r3,1
   86158:	00800044 	movi	r2,1
   8615c:	20c00015 	stw	r3,0(r4)
   86160:	f800283a 	ret

00086164 <__i2b>:
   86164:	defffd04 	addi	sp,sp,-12
   86168:	dc000015 	stw	r16,0(sp)
   8616c:	04000044 	movi	r16,1
   86170:	dc400115 	stw	r17,4(sp)
   86174:	2823883a 	mov	r17,r5
   86178:	800b883a 	mov	r5,r16
   8617c:	dfc00215 	stw	ra,8(sp)
   86180:	0085d340 	call	85d34 <_Balloc>
   86184:	14400515 	stw	r17,20(r2)
   86188:	14000415 	stw	r16,16(r2)
   8618c:	dfc00217 	ldw	ra,8(sp)
   86190:	dc400117 	ldw	r17,4(sp)
   86194:	dc000017 	ldw	r16,0(sp)
   86198:	dec00304 	addi	sp,sp,12
   8619c:	f800283a 	ret

000861a0 <__multiply>:
   861a0:	defff004 	addi	sp,sp,-64
   861a4:	dc800815 	stw	r18,32(sp)
   861a8:	dc400715 	stw	r17,28(sp)
   861ac:	34800417 	ldw	r18,16(r6)
   861b0:	2c400417 	ldw	r17,16(r5)
   861b4:	ddc00d15 	stw	r23,52(sp)
   861b8:	dc000615 	stw	r16,24(sp)
   861bc:	dfc00f15 	stw	ra,60(sp)
   861c0:	df000e15 	stw	fp,56(sp)
   861c4:	dd800c15 	stw	r22,48(sp)
   861c8:	dd400b15 	stw	r21,44(sp)
   861cc:	dd000a15 	stw	r20,40(sp)
   861d0:	dcc00915 	stw	r19,36(sp)
   861d4:	2821883a 	mov	r16,r5
   861d8:	302f883a 	mov	r23,r6
   861dc:	8c80050e 	bge	r17,r18,861f4 <__multiply+0x54>
   861e0:	8807883a 	mov	r3,r17
   861e4:	3021883a 	mov	r16,r6
   861e8:	9023883a 	mov	r17,r18
   861ec:	282f883a 	mov	r23,r5
   861f0:	1825883a 	mov	r18,r3
   861f4:	80800217 	ldw	r2,8(r16)
   861f8:	8c87883a 	add	r3,r17,r18
   861fc:	d8c00115 	stw	r3,4(sp)
   86200:	81400117 	ldw	r5,4(r16)
   86204:	10c0010e 	bge	r2,r3,8620c <__multiply+0x6c>
   86208:	29400044 	addi	r5,r5,1
   8620c:	0085d340 	call	85d34 <_Balloc>
   86210:	d8c00117 	ldw	r3,4(sp)
   86214:	d8800515 	stw	r2,20(sp)
   86218:	14c00504 	addi	r19,r2,20
   8621c:	1d400144 	addi	r21,r3,5
   86220:	ad6b883a 	add	r21,r21,r21
   86224:	ad6b883a 	add	r21,r21,r21
   86228:	156b883a 	add	r21,r2,r21
   8622c:	dd400215 	stw	r21,8(sp)
   86230:	9805883a 	mov	r2,r19
   86234:	9d40042e 	bgeu	r19,r21,86248 <__multiply+0xa8>
   86238:	d8c00217 	ldw	r3,8(sp)
   8623c:	10000015 	stw	zero,0(r2)
   86240:	10800104 	addi	r2,r2,4
   86244:	10fffc36 	bltu	r2,r3,86238 <__multiply+0x98>
   86248:	94800144 	addi	r18,r18,5
   8624c:	94a5883a 	add	r18,r18,r18
   86250:	94ad883a 	add	r22,r18,r18
   86254:	8c400144 	addi	r17,r17,5
   86258:	8c63883a 	add	r17,r17,r17
   8625c:	bdad883a 	add	r22,r23,r22
   86260:	80c00504 	addi	r3,r16,20
   86264:	8c63883a 	add	r17,r17,r17
   86268:	bc800504 	addi	r18,r23,20
   8626c:	dd800315 	stw	r22,12(sp)
   86270:	d8c00415 	stw	r3,16(sp)
   86274:	dcc00015 	stw	r19,0(sp)
   86278:	8463883a 	add	r17,r16,r17
   8627c:	9580412e 	bgeu	r18,r22,86384 <__multiply+0x1e4>
   86280:	90800017 	ldw	r2,0(r18)
   86284:	173fffcc 	andi	fp,r2,65535
   86288:	e0001a26 	beq	fp,zero,862f4 <__multiply+0x154>
   8628c:	dd000017 	ldw	r20,0(sp)
   86290:	dd800417 	ldw	r22,16(sp)
   86294:	002b883a 	mov	r21,zero
   86298:	b4c00017 	ldw	r19,0(r22)
   8629c:	a4000017 	ldw	r16,0(r20)
   862a0:	e00b883a 	mov	r5,fp
   862a4:	993fffcc 	andi	r4,r19,65535
   862a8:	00894740 	call	89474 <__mulsi3>
   862ac:	9808d43a 	srli	r4,r19,16
   862b0:	817fffcc 	andi	r5,r16,65535
   862b4:	1145883a 	add	r2,r2,r5
   862b8:	e00b883a 	mov	r5,fp
   862bc:	1567883a 	add	r19,r2,r21
   862c0:	8020d43a 	srli	r16,r16,16
   862c4:	00894740 	call	89474 <__mulsi3>
   862c8:	9808d43a 	srli	r4,r19,16
   862cc:	1405883a 	add	r2,r2,r16
   862d0:	a4c0000d 	sth	r19,0(r20)
   862d4:	110f883a 	add	r7,r2,r4
   862d8:	a1c0008d 	sth	r7,2(r20)
   862dc:	b5800104 	addi	r22,r22,4
   862e0:	382ad43a 	srli	r21,r7,16
   862e4:	a5000104 	addi	r20,r20,4
   862e8:	b47feb36 	bltu	r22,r17,86298 <__multiply+0xf8>
   862ec:	a5400015 	stw	r21,0(r20)
   862f0:	90800017 	ldw	r2,0(r18)
   862f4:	1038d43a 	srli	fp,r2,16
   862f8:	e0001c26 	beq	fp,zero,8636c <__multiply+0x1cc>
   862fc:	d8c00017 	ldw	r3,0(sp)
   86300:	dd000417 	ldw	r20,16(sp)
   86304:	002b883a 	mov	r21,zero
   86308:	1d800017 	ldw	r22,0(r3)
   8630c:	182f883a 	mov	r23,r3
   86310:	b021883a 	mov	r16,r22
   86314:	a4c00017 	ldw	r19,0(r20)
   86318:	8020d43a 	srli	r16,r16,16
   8631c:	e00b883a 	mov	r5,fp
   86320:	993fffcc 	andi	r4,r19,65535
   86324:	00894740 	call	89474 <__mulsi3>
   86328:	1405883a 	add	r2,r2,r16
   8632c:	9808d43a 	srli	r4,r19,16
   86330:	156b883a 	add	r21,r2,r21
   86334:	bdc00104 	addi	r23,r23,4
   86338:	bdbfff0d 	sth	r22,-4(r23)
   8633c:	bd7fff8d 	sth	r21,-2(r23)
   86340:	bc000017 	ldw	r16,0(r23)
   86344:	e00b883a 	mov	r5,fp
   86348:	00894740 	call	89474 <__mulsi3>
   8634c:	a80ed43a 	srli	r7,r21,16
   86350:	813fffcc 	andi	r4,r16,65535
   86354:	2085883a 	add	r2,r4,r2
   86358:	11ed883a 	add	r22,r2,r7
   8635c:	a5000104 	addi	r20,r20,4
   86360:	b02ad43a 	srli	r21,r22,16
   86364:	a47feb36 	bltu	r20,r17,86314 <__multiply+0x174>
   86368:	bd800015 	stw	r22,0(r23)
   8636c:	d8c00017 	ldw	r3,0(sp)
   86370:	94800104 	addi	r18,r18,4
   86374:	18c00104 	addi	r3,r3,4
   86378:	d8c00015 	stw	r3,0(sp)
   8637c:	d8c00317 	ldw	r3,12(sp)
   86380:	90ffbf36 	bltu	r18,r3,86280 <__multiply+0xe0>
   86384:	d8c00117 	ldw	r3,4(sp)
   86388:	00c00c0e 	bge	zero,r3,863bc <__multiply+0x21c>
   8638c:	d8c00217 	ldw	r3,8(sp)
   86390:	18bfff17 	ldw	r2,-4(r3)
   86394:	1d7fff04 	addi	r21,r3,-4
   86398:	10000326 	beq	r2,zero,863a8 <__multiply+0x208>
   8639c:	00000706 	br	863bc <__multiply+0x21c>
   863a0:	a8800017 	ldw	r2,0(r21)
   863a4:	1000051e 	bne	r2,zero,863bc <__multiply+0x21c>
   863a8:	d8c00117 	ldw	r3,4(sp)
   863ac:	ad7fff04 	addi	r21,r21,-4
   863b0:	18ffffc4 	addi	r3,r3,-1
   863b4:	d8c00115 	stw	r3,4(sp)
   863b8:	183ff91e 	bne	r3,zero,863a0 <__multiply+0x200>
   863bc:	d8800517 	ldw	r2,20(sp)
   863c0:	d8c00117 	ldw	r3,4(sp)
   863c4:	10c00415 	stw	r3,16(r2)
   863c8:	dfc00f17 	ldw	ra,60(sp)
   863cc:	df000e17 	ldw	fp,56(sp)
   863d0:	ddc00d17 	ldw	r23,52(sp)
   863d4:	dd800c17 	ldw	r22,48(sp)
   863d8:	dd400b17 	ldw	r21,44(sp)
   863dc:	dd000a17 	ldw	r20,40(sp)
   863e0:	dcc00917 	ldw	r19,36(sp)
   863e4:	dc800817 	ldw	r18,32(sp)
   863e8:	dc400717 	ldw	r17,28(sp)
   863ec:	dc000617 	ldw	r16,24(sp)
   863f0:	dec01004 	addi	sp,sp,64
   863f4:	f800283a 	ret

000863f8 <__pow5mult>:
   863f8:	defffb04 	addi	sp,sp,-20
   863fc:	dcc00315 	stw	r19,12(sp)
   86400:	dc800215 	stw	r18,8(sp)
   86404:	dc000015 	stw	r16,0(sp)
   86408:	dfc00415 	stw	ra,16(sp)
   8640c:	dc400115 	stw	r17,4(sp)
   86410:	308000cc 	andi	r2,r6,3
   86414:	3021883a 	mov	r16,r6
   86418:	2027883a 	mov	r19,r4
   8641c:	2825883a 	mov	r18,r5
   86420:	10002e1e 	bne	r2,zero,864dc <__pow5mult+0xe4>
   86424:	8021d0ba 	srai	r16,r16,2
   86428:	80001a26 	beq	r16,zero,86494 <__pow5mult+0x9c>
   8642c:	9c401217 	ldw	r17,72(r19)
   86430:	8800061e 	bne	r17,zero,8644c <__pow5mult+0x54>
   86434:	00003406 	br	86508 <__pow5mult+0x110>
   86438:	8021d07a 	srai	r16,r16,1
   8643c:	80001526 	beq	r16,zero,86494 <__pow5mult+0x9c>
   86440:	88c00017 	ldw	r3,0(r17)
   86444:	18001b26 	beq	r3,zero,864b4 <__pow5mult+0xbc>
   86448:	1823883a 	mov	r17,r3
   8644c:	80c0004c 	andi	r3,r16,1
   86450:	183ff926 	beq	r3,zero,86438 <__pow5mult+0x40>
   86454:	900b883a 	mov	r5,r18
   86458:	880d883a 	mov	r6,r17
   8645c:	9809883a 	mov	r4,r19
   86460:	00861a00 	call	861a0 <__multiply>
   86464:	90001b26 	beq	r18,zero,864d4 <__pow5mult+0xdc>
   86468:	91000117 	ldw	r4,4(r18)
   8646c:	98c01317 	ldw	r3,76(r19)
   86470:	8021d07a 	srai	r16,r16,1
   86474:	2109883a 	add	r4,r4,r4
   86478:	2109883a 	add	r4,r4,r4
   8647c:	1907883a 	add	r3,r3,r4
   86480:	19000017 	ldw	r4,0(r3)
   86484:	91000015 	stw	r4,0(r18)
   86488:	1c800015 	stw	r18,0(r3)
   8648c:	1025883a 	mov	r18,r2
   86490:	803feb1e 	bne	r16,zero,86440 <__pow5mult+0x48>
   86494:	9005883a 	mov	r2,r18
   86498:	dfc00417 	ldw	ra,16(sp)
   8649c:	dcc00317 	ldw	r19,12(sp)
   864a0:	dc800217 	ldw	r18,8(sp)
   864a4:	dc400117 	ldw	r17,4(sp)
   864a8:	dc000017 	ldw	r16,0(sp)
   864ac:	dec00504 	addi	sp,sp,20
   864b0:	f800283a 	ret
   864b4:	880b883a 	mov	r5,r17
   864b8:	880d883a 	mov	r6,r17
   864bc:	9809883a 	mov	r4,r19
   864c0:	00861a00 	call	861a0 <__multiply>
   864c4:	88800015 	stw	r2,0(r17)
   864c8:	10000015 	stw	zero,0(r2)
   864cc:	1023883a 	mov	r17,r2
   864d0:	003fde06 	br	8644c <__pow5mult+0x54>
   864d4:	1025883a 	mov	r18,r2
   864d8:	003fd706 	br	86438 <__pow5mult+0x40>
   864dc:	10bfffc4 	addi	r2,r2,-1
   864e0:	1085883a 	add	r2,r2,r2
   864e4:	00c00274 	movhi	r3,9
   864e8:	18f38404 	addi	r3,r3,-12784
   864ec:	1085883a 	add	r2,r2,r2
   864f0:	1885883a 	add	r2,r3,r2
   864f4:	11800017 	ldw	r6,0(r2)
   864f8:	000f883a 	mov	r7,zero
   864fc:	0085e040 	call	85e04 <__multadd>
   86500:	1025883a 	mov	r18,r2
   86504:	003fc706 	br	86424 <__pow5mult+0x2c>
   86508:	9809883a 	mov	r4,r19
   8650c:	01409c44 	movi	r5,625
   86510:	00861640 	call	86164 <__i2b>
   86514:	98801215 	stw	r2,72(r19)
   86518:	1023883a 	mov	r17,r2
   8651c:	10000015 	stw	zero,0(r2)
   86520:	003fca06 	br	8644c <__pow5mult+0x54>

00086524 <__lshift>:
   86524:	defff904 	addi	sp,sp,-28
   86528:	dd400515 	stw	r21,20(sp)
   8652c:	dc400115 	stw	r17,4(sp)
   86530:	2d400417 	ldw	r21,16(r5)
   86534:	3023d17a 	srai	r17,r6,5
   86538:	28800217 	ldw	r2,8(r5)
   8653c:	dd000415 	stw	r20,16(sp)
   86540:	8d6b883a 	add	r21,r17,r21
   86544:	dcc00315 	stw	r19,12(sp)
   86548:	dc800215 	stw	r18,8(sp)
   8654c:	dc000015 	stw	r16,0(sp)
   86550:	dfc00615 	stw	ra,24(sp)
   86554:	ac000044 	addi	r16,r21,1
   86558:	2825883a 	mov	r18,r5
   8655c:	3029883a 	mov	r20,r6
   86560:	2027883a 	mov	r19,r4
   86564:	29400117 	ldw	r5,4(r5)
   86568:	1400030e 	bge	r2,r16,86578 <__lshift+0x54>
   8656c:	1085883a 	add	r2,r2,r2
   86570:	29400044 	addi	r5,r5,1
   86574:	143ffd16 	blt	r2,r16,8656c <__lshift+0x48>
   86578:	9809883a 	mov	r4,r19
   8657c:	0085d340 	call	85d34 <_Balloc>
   86580:	10c00504 	addi	r3,r2,20
   86584:	0440090e 	bge	zero,r17,865ac <__lshift+0x88>
   86588:	000f883a 	mov	r7,zero
   8658c:	18000015 	stw	zero,0(r3)
   86590:	39c00044 	addi	r7,r7,1
   86594:	18c00104 	addi	r3,r3,4
   86598:	3c7ffc1e 	bne	r7,r17,8658c <__lshift+0x68>
   8659c:	38c00144 	addi	r3,r7,5
   865a0:	18c7883a 	add	r3,r3,r3
   865a4:	18c7883a 	add	r3,r3,r3
   865a8:	10c7883a 	add	r3,r2,r3
   865ac:	92000417 	ldw	r8,16(r18)
   865b0:	a18007cc 	andi	r6,r20,31
   865b4:	91c00504 	addi	r7,r18,20
   865b8:	42000144 	addi	r8,r8,5
   865bc:	4211883a 	add	r8,r8,r8
   865c0:	4211883a 	add	r8,r8,r8
   865c4:	9211883a 	add	r8,r18,r8
   865c8:	30002226 	beq	r6,zero,86654 <__lshift+0x130>
   865cc:	02800804 	movi	r10,32
   865d0:	5195c83a 	sub	r10,r10,r6
   865d4:	000b883a 	mov	r5,zero
   865d8:	3a400017 	ldw	r9,0(r7)
   865dc:	18c00104 	addi	r3,r3,4
   865e0:	39c00104 	addi	r7,r7,4
   865e4:	4992983a 	sll	r9,r9,r6
   865e8:	2a4ab03a 	or	r5,r5,r9
   865ec:	197fff15 	stw	r5,-4(r3)
   865f0:	397fff17 	ldw	r5,-4(r7)
   865f4:	2a8ad83a 	srl	r5,r5,r10
   865f8:	3a3ff736 	bltu	r7,r8,865d8 <__lshift+0xb4>
   865fc:	19400015 	stw	r5,0(r3)
   86600:	28000126 	beq	r5,zero,86608 <__lshift+0xe4>
   86604:	ac000084 	addi	r16,r21,2
   86608:	91000117 	ldw	r4,4(r18)
   8660c:	98c01317 	ldw	r3,76(r19)
   86610:	843fffc4 	addi	r16,r16,-1
   86614:	2109883a 	add	r4,r4,r4
   86618:	2109883a 	add	r4,r4,r4
   8661c:	1907883a 	add	r3,r3,r4
   86620:	19000017 	ldw	r4,0(r3)
   86624:	14000415 	stw	r16,16(r2)
   86628:	91000015 	stw	r4,0(r18)
   8662c:	1c800015 	stw	r18,0(r3)
   86630:	dfc00617 	ldw	ra,24(sp)
   86634:	dd400517 	ldw	r21,20(sp)
   86638:	dd000417 	ldw	r20,16(sp)
   8663c:	dcc00317 	ldw	r19,12(sp)
   86640:	dc800217 	ldw	r18,8(sp)
   86644:	dc400117 	ldw	r17,4(sp)
   86648:	dc000017 	ldw	r16,0(sp)
   8664c:	dec00704 	addi	sp,sp,28
   86650:	f800283a 	ret
   86654:	39400017 	ldw	r5,0(r7)
   86658:	18c00104 	addi	r3,r3,4
   8665c:	39c00104 	addi	r7,r7,4
   86660:	197fff15 	stw	r5,-4(r3)
   86664:	3a3fe82e 	bgeu	r7,r8,86608 <__lshift+0xe4>
   86668:	39400017 	ldw	r5,0(r7)
   8666c:	18c00104 	addi	r3,r3,4
   86670:	39c00104 	addi	r7,r7,4
   86674:	197fff15 	stw	r5,-4(r3)
   86678:	3a3ff636 	bltu	r7,r8,86654 <__lshift+0x130>
   8667c:	003fe206 	br	86608 <__lshift+0xe4>

00086680 <__mcmp>:
   86680:	20800417 	ldw	r2,16(r4)
   86684:	28c00417 	ldw	r3,16(r5)
   86688:	10c5c83a 	sub	r2,r2,r3
   8668c:	10000f1e 	bne	r2,zero,866cc <__mcmp+0x4c>
   86690:	18c00144 	addi	r3,r3,5
   86694:	18c7883a 	add	r3,r3,r3
   86698:	18c7883a 	add	r3,r3,r3
   8669c:	21c00504 	addi	r7,r4,20
   866a0:	28cb883a 	add	r5,r5,r3
   866a4:	20c9883a 	add	r4,r4,r3
   866a8:	213fff04 	addi	r4,r4,-4
   866ac:	297fff04 	addi	r5,r5,-4
   866b0:	21800017 	ldw	r6,0(r4)
   866b4:	28c00017 	ldw	r3,0(r5)
   866b8:	30c0021e 	bne	r6,r3,866c4 <__mcmp+0x44>
   866bc:	393ffa36 	bltu	r7,r4,866a8 <__mcmp+0x28>
   866c0:	f800283a 	ret
   866c4:	30c00236 	bltu	r6,r3,866d0 <__mcmp+0x50>
   866c8:	00800044 	movi	r2,1
   866cc:	f800283a 	ret
   866d0:	00bfffc4 	movi	r2,-1
   866d4:	f800283a 	ret

000866d8 <__mdiff>:
   866d8:	defffb04 	addi	sp,sp,-20
   866dc:	dc000015 	stw	r16,0(sp)
   866e0:	2821883a 	mov	r16,r5
   866e4:	dc800215 	stw	r18,8(sp)
   866e8:	300b883a 	mov	r5,r6
   866ec:	2025883a 	mov	r18,r4
   866f0:	8009883a 	mov	r4,r16
   866f4:	dc400115 	stw	r17,4(sp)
   866f8:	dfc00415 	stw	ra,16(sp)
   866fc:	dcc00315 	stw	r19,12(sp)
   86700:	3023883a 	mov	r17,r6
   86704:	00866800 	call	86680 <__mcmp>
   86708:	10005026 	beq	r2,zero,8684c <__mdiff+0x174>
   8670c:	10004a16 	blt	r2,zero,86838 <__mdiff+0x160>
   86710:	0027883a 	mov	r19,zero
   86714:	81400117 	ldw	r5,4(r16)
   86718:	9009883a 	mov	r4,r18
   8671c:	0085d340 	call	85d34 <_Balloc>
   86720:	82400417 	ldw	r9,16(r16)
   86724:	89800417 	ldw	r6,16(r17)
   86728:	14c00315 	stw	r19,12(r2)
   8672c:	4b800144 	addi	r14,r9,5
   86730:	31800144 	addi	r6,r6,5
   86734:	739d883a 	add	r14,r14,r14
   86738:	318d883a 	add	r6,r6,r6
   8673c:	739d883a 	add	r14,r14,r14
   86740:	318d883a 	add	r6,r6,r6
   86744:	81c00504 	addi	r7,r16,20
   86748:	839d883a 	add	r14,r16,r14
   8674c:	8a000504 	addi	r8,r17,20
   86750:	898d883a 	add	r6,r17,r6
   86754:	10c00504 	addi	r3,r2,20
   86758:	0009883a 	mov	r4,zero
   8675c:	3b000017 	ldw	r12,0(r7)
   86760:	42c00017 	ldw	r11,0(r8)
   86764:	42000104 	addi	r8,r8,4
   86768:	62bfffcc 	andi	r10,r12,65535
   8676c:	5b7fffcc 	andi	r13,r11,65535
   86770:	5109883a 	add	r4,r10,r4
   86774:	2355c83a 	sub	r10,r4,r13
   86778:	5816d43a 	srli	r11,r11,16
   8677c:	6008d43a 	srli	r4,r12,16
   86780:	501bd43a 	srai	r13,r10,16
   86784:	1a80000d 	sth	r10,0(r3)
   86788:	22c9c83a 	sub	r4,r4,r11
   8678c:	2349883a 	add	r4,r4,r13
   86790:	1900008d 	sth	r4,2(r3)
   86794:	39c00104 	addi	r7,r7,4
   86798:	2009d43a 	srai	r4,r4,16
   8679c:	18c00104 	addi	r3,r3,4
   867a0:	41bfee36 	bltu	r8,r6,8675c <__mdiff+0x84>
   867a4:	180b883a 	mov	r5,r3
   867a8:	3815883a 	mov	r10,r7
   867ac:	3b80132e 	bgeu	r7,r14,867fc <__mdiff+0x124>
   867b0:	3a000017 	ldw	r8,0(r7)
   867b4:	18c00104 	addi	r3,r3,4
   867b8:	39c00104 	addi	r7,r7,4
   867bc:	41bfffcc 	andi	r6,r8,65535
   867c0:	310d883a 	add	r6,r6,r4
   867c4:	3009d43a 	srai	r4,r6,16
   867c8:	4010d43a 	srli	r8,r8,16
   867cc:	19bfff0d 	sth	r6,-4(r3)
   867d0:	2209883a 	add	r4,r4,r8
   867d4:	193fff8d 	sth	r4,-2(r3)
   867d8:	2009d43a 	srai	r4,r4,16
   867dc:	3bbff436 	bltu	r7,r14,867b0 <__mdiff+0xd8>
   867e0:	0286303a 	nor	r3,zero,r10
   867e4:	1b87883a 	add	r3,r3,r14
   867e8:	1806d0ba 	srli	r3,r3,2
   867ec:	18c00044 	addi	r3,r3,1
   867f0:	18c7883a 	add	r3,r3,r3
   867f4:	18c7883a 	add	r3,r3,r3
   867f8:	28c7883a 	add	r3,r5,r3
   867fc:	193fff17 	ldw	r4,-4(r3)
   86800:	18ffff04 	addi	r3,r3,-4
   86804:	2000041e 	bne	r4,zero,86818 <__mdiff+0x140>
   86808:	18ffff04 	addi	r3,r3,-4
   8680c:	19000017 	ldw	r4,0(r3)
   86810:	4a7fffc4 	addi	r9,r9,-1
   86814:	203ffc26 	beq	r4,zero,86808 <__mdiff+0x130>
   86818:	12400415 	stw	r9,16(r2)
   8681c:	dfc00417 	ldw	ra,16(sp)
   86820:	dcc00317 	ldw	r19,12(sp)
   86824:	dc800217 	ldw	r18,8(sp)
   86828:	dc400117 	ldw	r17,4(sp)
   8682c:	dc000017 	ldw	r16,0(sp)
   86830:	dec00504 	addi	sp,sp,20
   86834:	f800283a 	ret
   86838:	8005883a 	mov	r2,r16
   8683c:	04c00044 	movi	r19,1
   86840:	8821883a 	mov	r16,r17
   86844:	1023883a 	mov	r17,r2
   86848:	003fb206 	br	86714 <__mdiff+0x3c>
   8684c:	9009883a 	mov	r4,r18
   86850:	000b883a 	mov	r5,zero
   86854:	0085d340 	call	85d34 <_Balloc>
   86858:	00c00044 	movi	r3,1
   8685c:	10c00415 	stw	r3,16(r2)
   86860:	10000515 	stw	zero,20(r2)
   86864:	dfc00417 	ldw	ra,16(sp)
   86868:	dcc00317 	ldw	r19,12(sp)
   8686c:	dc800217 	ldw	r18,8(sp)
   86870:	dc400117 	ldw	r17,4(sp)
   86874:	dc000017 	ldw	r16,0(sp)
   86878:	dec00504 	addi	sp,sp,20
   8687c:	f800283a 	ret

00086880 <__ulp>:
   86880:	295ffc2c 	andhi	r5,r5,32752
   86884:	00bf3034 	movhi	r2,64704
   86888:	2887883a 	add	r3,r5,r2
   8688c:	00c0020e 	bge	zero,r3,86898 <__ulp+0x18>
   86890:	0005883a 	mov	r2,zero
   86894:	f800283a 	ret
   86898:	00c7c83a 	sub	r3,zero,r3
   8689c:	1805d53a 	srai	r2,r3,20
   868a0:	00c004c4 	movi	r3,19
   868a4:	18800a0e 	bge	r3,r2,868d0 <__ulp+0x50>
   868a8:	01000c84 	movi	r4,50
   868ac:	0007883a 	mov	r3,zero
   868b0:	20800516 	blt	r4,r2,868c8 <__ulp+0x48>
   868b4:	01000cc4 	movi	r4,51
   868b8:	2085c83a 	sub	r2,r4,r2
   868bc:	01000044 	movi	r4,1
   868c0:	2084983a 	sll	r2,r4,r2
   868c4:	f800283a 	ret
   868c8:	00800044 	movi	r2,1
   868cc:	f800283a 	ret
   868d0:	00c00234 	movhi	r3,8
   868d4:	1887d83a 	sra	r3,r3,r2
   868d8:	0005883a 	mov	r2,zero
   868dc:	f800283a 	ret

000868e0 <__b2d>:
   868e0:	defffa04 	addi	sp,sp,-24
   868e4:	dc000015 	stw	r16,0(sp)
   868e8:	24000417 	ldw	r16,16(r4)
   868ec:	dc400115 	stw	r17,4(sp)
   868f0:	dcc00315 	stw	r19,12(sp)
   868f4:	84000144 	addi	r16,r16,5
   868f8:	8421883a 	add	r16,r16,r16
   868fc:	8421883a 	add	r16,r16,r16
   86900:	2421883a 	add	r16,r4,r16
   86904:	847fff17 	ldw	r17,-4(r16)
   86908:	24c00504 	addi	r19,r4,20
   8690c:	dd000415 	stw	r20,16(sp)
   86910:	8809883a 	mov	r4,r17
   86914:	dc800215 	stw	r18,8(sp)
   86918:	2829883a 	mov	r20,r5
   8691c:	dfc00515 	stw	ra,20(sp)
   86920:	008604c0 	call	8604c <__hi0bits>
   86924:	00c00804 	movi	r3,32
   86928:	1887c83a 	sub	r3,r3,r2
   8692c:	a0c00015 	stw	r3,0(r20)
   86930:	00c00284 	movi	r3,10
   86934:	84bfff04 	addi	r18,r16,-4
   86938:	18801216 	blt	r3,r2,86984 <__b2d+0xa4>
   8693c:	010002c4 	movi	r4,11
   86940:	2089c83a 	sub	r4,r4,r2
   86944:	8906d83a 	srl	r3,r17,r4
   86948:	18cffc34 	orhi	r3,r3,16368
   8694c:	9c80322e 	bgeu	r19,r18,86a18 <__b2d+0x138>
   86950:	817ffe17 	ldw	r5,-8(r16)
   86954:	2908d83a 	srl	r4,r5,r4
   86958:	10800544 	addi	r2,r2,21
   8695c:	88a2983a 	sll	r17,r17,r2
   86960:	2444b03a 	or	r2,r4,r17
   86964:	dfc00517 	ldw	ra,20(sp)
   86968:	dd000417 	ldw	r20,16(sp)
   8696c:	dcc00317 	ldw	r19,12(sp)
   86970:	dc800217 	ldw	r18,8(sp)
   86974:	dc400117 	ldw	r17,4(sp)
   86978:	dc000017 	ldw	r16,0(sp)
   8697c:	dec00604 	addi	sp,sp,24
   86980:	f800283a 	ret
   86984:	9c801636 	bltu	r19,r18,869e0 <__b2d+0x100>
   86988:	113ffd44 	addi	r4,r2,-11
   8698c:	000b883a 	mov	r5,zero
   86990:	20001726 	beq	r4,zero,869f0 <__b2d+0x110>
   86994:	00c00ac4 	movi	r3,43
   86998:	1885c83a 	sub	r2,r3,r2
   8699c:	8906983a 	sll	r3,r17,r4
   869a0:	288cd83a 	srl	r6,r5,r2
   869a4:	18cffc34 	orhi	r3,r3,16368
   869a8:	1986b03a 	or	r3,r3,r6
   869ac:	9c801c2e 	bgeu	r19,r18,86a20 <__b2d+0x140>
   869b0:	91bfff17 	ldw	r6,-4(r18)
   869b4:	3084d83a 	srl	r2,r6,r2
   869b8:	2908983a 	sll	r4,r5,r4
   869bc:	1104b03a 	or	r2,r2,r4
   869c0:	dfc00517 	ldw	ra,20(sp)
   869c4:	dd000417 	ldw	r20,16(sp)
   869c8:	dcc00317 	ldw	r19,12(sp)
   869cc:	dc800217 	ldw	r18,8(sp)
   869d0:	dc400117 	ldw	r17,4(sp)
   869d4:	dc000017 	ldw	r16,0(sp)
   869d8:	dec00604 	addi	sp,sp,24
   869dc:	f800283a 	ret
   869e0:	113ffd44 	addi	r4,r2,-11
   869e4:	84bffe04 	addi	r18,r16,-8
   869e8:	817ffe17 	ldw	r5,-8(r16)
   869ec:	203fe91e 	bne	r4,zero,86994 <__b2d+0xb4>
   869f0:	88cffc34 	orhi	r3,r17,16368
   869f4:	2805883a 	mov	r2,r5
   869f8:	dfc00517 	ldw	ra,20(sp)
   869fc:	dd000417 	ldw	r20,16(sp)
   86a00:	dcc00317 	ldw	r19,12(sp)
   86a04:	dc800217 	ldw	r18,8(sp)
   86a08:	dc400117 	ldw	r17,4(sp)
   86a0c:	dc000017 	ldw	r16,0(sp)
   86a10:	dec00604 	addi	sp,sp,24
   86a14:	f800283a 	ret
   86a18:	0009883a 	mov	r4,zero
   86a1c:	003fce06 	br	86958 <__b2d+0x78>
   86a20:	0005883a 	mov	r2,zero
   86a24:	003fe406 	br	869b8 <__b2d+0xd8>

00086a28 <__d2b>:
   86a28:	defff804 	addi	sp,sp,-32
   86a2c:	dc400315 	stw	r17,12(sp)
   86a30:	3023883a 	mov	r17,r6
   86a34:	dc800415 	stw	r18,16(sp)
   86a38:	8824907a 	slli	r18,r17,1
   86a3c:	dcc00515 	stw	r19,20(sp)
   86a40:	2827883a 	mov	r19,r5
   86a44:	9024d57a 	srli	r18,r18,21
   86a48:	01400044 	movi	r5,1
   86a4c:	dd000615 	stw	r20,24(sp)
   86a50:	dc000215 	stw	r16,8(sp)
   86a54:	dfc00715 	stw	ra,28(sp)
   86a58:	3829883a 	mov	r20,r7
   86a5c:	0085d340 	call	85d34 <_Balloc>
   86a60:	1021883a 	mov	r16,r2
   86a64:	00800434 	movhi	r2,16
   86a68:	10bfffc4 	addi	r2,r2,-1
   86a6c:	88a2703a 	and	r17,r17,r2
   86a70:	90000126 	beq	r18,zero,86a78 <__d2b+0x50>
   86a74:	8c400434 	orhi	r17,r17,16
   86a78:	dc400015 	stw	r17,0(sp)
   86a7c:	98002226 	beq	r19,zero,86b08 <__d2b+0xe0>
   86a80:	d9000104 	addi	r4,sp,4
   86a84:	dcc00115 	stw	r19,4(sp)
   86a88:	00860b40 	call	860b4 <__lo0bits>
   86a8c:	d8c00017 	ldw	r3,0(sp)
   86a90:	10002d1e 	bne	r2,zero,86b48 <__d2b+0x120>
   86a94:	d9000117 	ldw	r4,4(sp)
   86a98:	81000515 	stw	r4,20(r16)
   86a9c:	1823003a 	cmpeq	r17,r3,zero
   86aa0:	01000084 	movi	r4,2
   86aa4:	2463c83a 	sub	r17,r4,r17
   86aa8:	80c00615 	stw	r3,24(r16)
   86aac:	84400415 	stw	r17,16(r16)
   86ab0:	90001d1e 	bne	r18,zero,86b28 <__d2b+0x100>
   86ab4:	88c00104 	addi	r3,r17,4
   86ab8:	18c7883a 	add	r3,r3,r3
   86abc:	18c7883a 	add	r3,r3,r3
   86ac0:	80c7883a 	add	r3,r16,r3
   86ac4:	19000017 	ldw	r4,0(r3)
   86ac8:	10bef384 	addi	r2,r2,-1074
   86acc:	a0800015 	stw	r2,0(r20)
   86ad0:	008604c0 	call	8604c <__hi0bits>
   86ad4:	8822917a 	slli	r17,r17,5
   86ad8:	d8c00817 	ldw	r3,32(sp)
   86adc:	8885c83a 	sub	r2,r17,r2
   86ae0:	18800015 	stw	r2,0(r3)
   86ae4:	8005883a 	mov	r2,r16
   86ae8:	dfc00717 	ldw	ra,28(sp)
   86aec:	dd000617 	ldw	r20,24(sp)
   86af0:	dcc00517 	ldw	r19,20(sp)
   86af4:	dc800417 	ldw	r18,16(sp)
   86af8:	dc400317 	ldw	r17,12(sp)
   86afc:	dc000217 	ldw	r16,8(sp)
   86b00:	dec00804 	addi	sp,sp,32
   86b04:	f800283a 	ret
   86b08:	d809883a 	mov	r4,sp
   86b0c:	00860b40 	call	860b4 <__lo0bits>
   86b10:	d8c00017 	ldw	r3,0(sp)
   86b14:	04400044 	movi	r17,1
   86b18:	84400415 	stw	r17,16(r16)
   86b1c:	80c00515 	stw	r3,20(r16)
   86b20:	10800804 	addi	r2,r2,32
   86b24:	903fe326 	beq	r18,zero,86ab4 <__d2b+0x8c>
   86b28:	00c00d44 	movi	r3,53
   86b2c:	94bef344 	addi	r18,r18,-1075
   86b30:	90a5883a 	add	r18,r18,r2
   86b34:	1885c83a 	sub	r2,r3,r2
   86b38:	d8c00817 	ldw	r3,32(sp)
   86b3c:	a4800015 	stw	r18,0(r20)
   86b40:	18800015 	stw	r2,0(r3)
   86b44:	003fe706 	br	86ae4 <__d2b+0xbc>
   86b48:	01000804 	movi	r4,32
   86b4c:	2089c83a 	sub	r4,r4,r2
   86b50:	1908983a 	sll	r4,r3,r4
   86b54:	d9400117 	ldw	r5,4(sp)
   86b58:	1886d83a 	srl	r3,r3,r2
   86b5c:	2148b03a 	or	r4,r4,r5
   86b60:	81000515 	stw	r4,20(r16)
   86b64:	d8c00015 	stw	r3,0(sp)
   86b68:	003fcc06 	br	86a9c <__d2b+0x74>

00086b6c <__ratio>:
   86b6c:	defff904 	addi	sp,sp,-28
   86b70:	dc400315 	stw	r17,12(sp)
   86b74:	2823883a 	mov	r17,r5
   86b78:	d9400104 	addi	r5,sp,4
   86b7c:	dfc00615 	stw	ra,24(sp)
   86b80:	dcc00515 	stw	r19,20(sp)
   86b84:	dc800415 	stw	r18,16(sp)
   86b88:	2027883a 	mov	r19,r4
   86b8c:	dc000215 	stw	r16,8(sp)
   86b90:	00868e00 	call	868e0 <__b2d>
   86b94:	8809883a 	mov	r4,r17
   86b98:	d80b883a 	mov	r5,sp
   86b9c:	1025883a 	mov	r18,r2
   86ba0:	1821883a 	mov	r16,r3
   86ba4:	00868e00 	call	868e0 <__b2d>
   86ba8:	99400417 	ldw	r5,16(r19)
   86bac:	89000417 	ldw	r4,16(r17)
   86bb0:	d9800117 	ldw	r6,4(sp)
   86bb4:	2909c83a 	sub	r4,r5,r4
   86bb8:	d9400017 	ldw	r5,0(sp)
   86bbc:	2008917a 	slli	r4,r4,5
   86bc0:	314bc83a 	sub	r5,r6,r5
   86bc4:	290b883a 	add	r5,r5,r4
   86bc8:	01400e0e 	bge	zero,r5,86c04 <__ratio+0x98>
   86bcc:	280a953a 	slli	r5,r5,20
   86bd0:	2c21883a 	add	r16,r5,r16
   86bd4:	9009883a 	mov	r4,r18
   86bd8:	800b883a 	mov	r5,r16
   86bdc:	100d883a 	mov	r6,r2
   86be0:	180f883a 	mov	r7,r3
   86be4:	0088e200 	call	88e20 <__divdf3>
   86be8:	dfc00617 	ldw	ra,24(sp)
   86bec:	dcc00517 	ldw	r19,20(sp)
   86bf0:	dc800417 	ldw	r18,16(sp)
   86bf4:	dc400317 	ldw	r17,12(sp)
   86bf8:	dc000217 	ldw	r16,8(sp)
   86bfc:	dec00704 	addi	sp,sp,28
   86c00:	f800283a 	ret
   86c04:	280a953a 	slli	r5,r5,20
   86c08:	1947c83a 	sub	r3,r3,r5
   86c0c:	003ff106 	br	86bd4 <__ratio+0x68>

00086c10 <_mprec_log10>:
   86c10:	defffe04 	addi	sp,sp,-8
   86c14:	dc000015 	stw	r16,0(sp)
   86c18:	dfc00115 	stw	ra,4(sp)
   86c1c:	008005c4 	movi	r2,23
   86c20:	2021883a 	mov	r16,r4
   86c24:	11000d0e 	bge	r2,r4,86c5c <_mprec_log10+0x4c>
   86c28:	0005883a 	mov	r2,zero
   86c2c:	00cffc34 	movhi	r3,16368
   86c30:	843fffc4 	addi	r16,r16,-1
   86c34:	1009883a 	mov	r4,r2
   86c38:	180b883a 	mov	r5,r3
   86c3c:	000d883a 	mov	r6,zero
   86c40:	01d00934 	movhi	r7,16420
   86c44:	0088b3c0 	call	88b3c <__muldf3>
   86c48:	803ff91e 	bne	r16,zero,86c30 <_mprec_log10+0x20>
   86c4c:	dfc00117 	ldw	ra,4(sp)
   86c50:	dc000017 	ldw	r16,0(sp)
   86c54:	dec00204 	addi	sp,sp,8
   86c58:	f800283a 	ret
   86c5c:	202090fa 	slli	r16,r4,3
   86c60:	00800274 	movhi	r2,9
   86c64:	10b35204 	addi	r2,r2,-12984
   86c68:	1421883a 	add	r16,r2,r16
   86c6c:	80800017 	ldw	r2,0(r16)
   86c70:	80c00117 	ldw	r3,4(r16)
   86c74:	dfc00117 	ldw	ra,4(sp)
   86c78:	dc000017 	ldw	r16,0(sp)
   86c7c:	dec00204 	addi	sp,sp,8
   86c80:	f800283a 	ret

00086c84 <__copybits>:
   86c84:	297fffc4 	addi	r5,r5,-1
   86c88:	31c00417 	ldw	r7,16(r6)
   86c8c:	2811d17a 	srai	r8,r5,5
   86c90:	30800504 	addi	r2,r6,20
   86c94:	39c00144 	addi	r7,r7,5
   86c98:	42000044 	addi	r8,r8,1
   86c9c:	39cf883a 	add	r7,r7,r7
   86ca0:	4211883a 	add	r8,r8,r8
   86ca4:	39cf883a 	add	r7,r7,r7
   86ca8:	4211883a 	add	r8,r8,r8
   86cac:	31cf883a 	add	r7,r6,r7
   86cb0:	2211883a 	add	r8,r4,r8
   86cb4:	11c00d2e 	bgeu	r2,r7,86cec <__copybits+0x68>
   86cb8:	2007883a 	mov	r3,r4
   86cbc:	11400017 	ldw	r5,0(r2)
   86cc0:	18c00104 	addi	r3,r3,4
   86cc4:	10800104 	addi	r2,r2,4
   86cc8:	197fff15 	stw	r5,-4(r3)
   86ccc:	11fffb36 	bltu	r2,r7,86cbc <__copybits+0x38>
   86cd0:	3985c83a 	sub	r2,r7,r6
   86cd4:	10bffac4 	addi	r2,r2,-21
   86cd8:	1004d0ba 	srli	r2,r2,2
   86cdc:	10800044 	addi	r2,r2,1
   86ce0:	1085883a 	add	r2,r2,r2
   86ce4:	1085883a 	add	r2,r2,r2
   86ce8:	2089883a 	add	r4,r4,r2
   86cec:	2200032e 	bgeu	r4,r8,86cfc <__copybits+0x78>
   86cf0:	20000015 	stw	zero,0(r4)
   86cf4:	21000104 	addi	r4,r4,4
   86cf8:	223ffd36 	bltu	r4,r8,86cf0 <__copybits+0x6c>
   86cfc:	f800283a 	ret

00086d00 <__any_on>:
   86d00:	21800417 	ldw	r6,16(r4)
   86d04:	2805d17a 	srai	r2,r5,5
   86d08:	20c00504 	addi	r3,r4,20
   86d0c:	30800f0e 	bge	r6,r2,86d4c <__any_on+0x4c>
   86d10:	3005883a 	mov	r2,r6
   86d14:	10800144 	addi	r2,r2,5
   86d18:	1085883a 	add	r2,r2,r2
   86d1c:	1085883a 	add	r2,r2,r2
   86d20:	2089883a 	add	r4,r4,r2
   86d24:	1900152e 	bgeu	r3,r4,86d7c <__any_on+0x7c>
   86d28:	20bfff17 	ldw	r2,-4(r4)
   86d2c:	213fff04 	addi	r4,r4,-4
   86d30:	1000041e 	bne	r2,zero,86d44 <__any_on+0x44>
   86d34:	1900112e 	bgeu	r3,r4,86d7c <__any_on+0x7c>
   86d38:	213fff04 	addi	r4,r4,-4
   86d3c:	20800017 	ldw	r2,0(r4)
   86d40:	103ffc26 	beq	r2,zero,86d34 <__any_on+0x34>
   86d44:	00800044 	movi	r2,1
   86d48:	f800283a 	ret
   86d4c:	11bff10e 	bge	r2,r6,86d14 <__any_on+0x14>
   86d50:	294007cc 	andi	r5,r5,31
   86d54:	283fef26 	beq	r5,zero,86d14 <__any_on+0x14>
   86d58:	11800144 	addi	r6,r2,5
   86d5c:	318d883a 	add	r6,r6,r6
   86d60:	318d883a 	add	r6,r6,r6
   86d64:	218d883a 	add	r6,r4,r6
   86d68:	31800017 	ldw	r6,0(r6)
   86d6c:	314ed83a 	srl	r7,r6,r5
   86d70:	394a983a 	sll	r5,r7,r5
   86d74:	29bff31e 	bne	r5,r6,86d44 <__any_on+0x44>
   86d78:	003fe606 	br	86d14 <__any_on+0x14>
   86d7c:	0005883a 	mov	r2,zero
   86d80:	f800283a 	ret

00086d84 <_realloc_r>:
   86d84:	defff504 	addi	sp,sp,-44
   86d88:	dd400615 	stw	r21,24(sp)
   86d8c:	dc800315 	stw	r18,12(sp)
   86d90:	dc000115 	stw	r16,4(sp)
   86d94:	dfc00a15 	stw	ra,40(sp)
   86d98:	df000915 	stw	fp,36(sp)
   86d9c:	ddc00815 	stw	r23,32(sp)
   86da0:	dd800715 	stw	r22,28(sp)
   86da4:	dd000515 	stw	r20,20(sp)
   86da8:	dcc00415 	stw	r19,16(sp)
   86dac:	dc400215 	stw	r17,8(sp)
   86db0:	2821883a 	mov	r16,r5
   86db4:	202b883a 	mov	r21,r4
   86db8:	3025883a 	mov	r18,r6
   86dbc:	28009626 	beq	r5,zero,87018 <_realloc_r+0x294>
   86dc0:	008a09c0 	call	8a09c <__malloc_lock>
   86dc4:	80bfff17 	ldw	r2,-4(r16)
   86dc8:	04ffff04 	movi	r19,-4
   86dcc:	90c002c4 	addi	r3,r18,11
   86dd0:	01000584 	movi	r4,22
   86dd4:	85bffe04 	addi	r22,r16,-8
   86dd8:	14e6703a 	and	r19,r2,r19
   86ddc:	20c0372e 	bgeu	r4,r3,86ebc <_realloc_r+0x138>
   86de0:	047ffe04 	movi	r17,-8
   86de4:	1c62703a 	and	r17,r3,r17
   86de8:	8807883a 	mov	r3,r17
   86dec:	88005a16 	blt	r17,zero,86f58 <_realloc_r+0x1d4>
   86df0:	8c805936 	bltu	r17,r18,86f58 <_realloc_r+0x1d4>
   86df4:	98c0340e 	bge	r19,r3,86ec8 <_realloc_r+0x144>
   86df8:	07000274 	movhi	fp,9
   86dfc:	e734df04 	addi	fp,fp,-11396
   86e00:	e1400217 	ldw	r5,8(fp)
   86e04:	b4c9883a 	add	r4,r22,r19
   86e08:	29009026 	beq	r5,r4,8704c <_realloc_r+0x2c8>
   86e0c:	21800117 	ldw	r6,4(r4)
   86e10:	01ffff84 	movi	r7,-2
   86e14:	31ce703a 	and	r7,r6,r7
   86e18:	21cf883a 	add	r7,r4,r7
   86e1c:	39c00117 	ldw	r7,4(r7)
   86e20:	39c0004c 	andi	r7,r7,1
   86e24:	38004326 	beq	r7,zero,86f34 <_realloc_r+0x1b0>
   86e28:	000d883a 	mov	r6,zero
   86e2c:	0009883a 	mov	r4,zero
   86e30:	1080004c 	andi	r2,r2,1
   86e34:	10005a1e 	bne	r2,zero,86fa0 <_realloc_r+0x21c>
   86e38:	85fffe17 	ldw	r23,-8(r16)
   86e3c:	00bfff04 	movi	r2,-4
   86e40:	b5efc83a 	sub	r23,r22,r23
   86e44:	b9c00117 	ldw	r7,4(r23)
   86e48:	388e703a 	and	r7,r7,r2
   86e4c:	3ccf883a 	add	r7,r7,r19
   86e50:	20005226 	beq	r4,zero,86f9c <_realloc_r+0x218>
   86e54:	31e9883a 	add	r20,r6,r7
   86e58:	2140c726 	beq	r4,r5,87178 <_realloc_r+0x3f4>
   86e5c:	a0c04f16 	blt	r20,r3,86f9c <_realloc_r+0x218>
   86e60:	20800317 	ldw	r2,12(r4)
   86e64:	20c00217 	ldw	r3,8(r4)
   86e68:	99bfff04 	addi	r6,r19,-4
   86e6c:	01000904 	movi	r4,36
   86e70:	18800315 	stw	r2,12(r3)
   86e74:	10c00215 	stw	r3,8(r2)
   86e78:	b8c00217 	ldw	r3,8(r23)
   86e7c:	b8800317 	ldw	r2,12(r23)
   86e80:	bc800204 	addi	r18,r23,8
   86e84:	18800315 	stw	r2,12(r3)
   86e88:	10c00215 	stw	r3,8(r2)
   86e8c:	2180ed36 	bltu	r4,r6,87244 <_realloc_r+0x4c0>
   86e90:	008004c4 	movi	r2,19
   86e94:	11809b2e 	bgeu	r2,r6,87104 <_realloc_r+0x380>
   86e98:	80800017 	ldw	r2,0(r16)
   86e9c:	b8800215 	stw	r2,8(r23)
   86ea0:	80800117 	ldw	r2,4(r16)
   86ea4:	b8800315 	stw	r2,12(r23)
   86ea8:	008006c4 	movi	r2,27
   86eac:	1180f936 	bltu	r2,r6,87294 <_realloc_r+0x510>
   86eb0:	b8800404 	addi	r2,r23,16
   86eb4:	80c00204 	addi	r3,r16,8
   86eb8:	00009406 	br	8710c <_realloc_r+0x388>
   86ebc:	00c00404 	movi	r3,16
   86ec0:	1823883a 	mov	r17,r3
   86ec4:	003fca06 	br	86df0 <_realloc_r+0x6c>
   86ec8:	9829883a 	mov	r20,r19
   86ecc:	a447c83a 	sub	r3,r20,r17
   86ed0:	010003c4 	movi	r4,15
   86ed4:	1080004c 	andi	r2,r2,1
   86ed8:	20c02336 	bltu	r4,r3,86f68 <_realloc_r+0x1e4>
   86edc:	1504b03a 	or	r2,r2,r20
   86ee0:	b0800115 	stw	r2,4(r22)
   86ee4:	b52d883a 	add	r22,r22,r20
   86ee8:	b0800117 	ldw	r2,4(r22)
   86eec:	10800054 	ori	r2,r2,1
   86ef0:	b0800115 	stw	r2,4(r22)
   86ef4:	a809883a 	mov	r4,r21
   86ef8:	008a0bc0 	call	8a0bc <__malloc_unlock>
   86efc:	8025883a 	mov	r18,r16
   86f00:	9005883a 	mov	r2,r18
   86f04:	dfc00a17 	ldw	ra,40(sp)
   86f08:	df000917 	ldw	fp,36(sp)
   86f0c:	ddc00817 	ldw	r23,32(sp)
   86f10:	dd800717 	ldw	r22,28(sp)
   86f14:	dd400617 	ldw	r21,24(sp)
   86f18:	dd000517 	ldw	r20,20(sp)
   86f1c:	dcc00417 	ldw	r19,16(sp)
   86f20:	dc800317 	ldw	r18,12(sp)
   86f24:	dc400217 	ldw	r17,8(sp)
   86f28:	dc000117 	ldw	r16,4(sp)
   86f2c:	dec00b04 	addi	sp,sp,44
   86f30:	f800283a 	ret
   86f34:	01ffff04 	movi	r7,-4
   86f38:	31cc703a 	and	r6,r6,r7
   86f3c:	34e9883a 	add	r20,r6,r19
   86f40:	a0ffbb16 	blt	r20,r3,86e30 <_realloc_r+0xac>
   86f44:	20c00317 	ldw	r3,12(r4)
   86f48:	21000217 	ldw	r4,8(r4)
   86f4c:	20c00315 	stw	r3,12(r4)
   86f50:	19000215 	stw	r4,8(r3)
   86f54:	003fdd06 	br	86ecc <_realloc_r+0x148>
   86f58:	00800304 	movi	r2,12
   86f5c:	a8800015 	stw	r2,0(r21)
   86f60:	0025883a 	mov	r18,zero
   86f64:	003fe606 	br	86f00 <_realloc_r+0x17c>
   86f68:	1444b03a 	or	r2,r2,r17
   86f6c:	b0800115 	stw	r2,4(r22)
   86f70:	b44b883a 	add	r5,r22,r17
   86f74:	18800054 	ori	r2,r3,1
   86f78:	28800115 	stw	r2,4(r5)
   86f7c:	28c7883a 	add	r3,r5,r3
   86f80:	18800117 	ldw	r2,4(r3)
   86f84:	a809883a 	mov	r4,r21
   86f88:	29400204 	addi	r5,r5,8
   86f8c:	10800054 	ori	r2,r2,1
   86f90:	18800115 	stw	r2,4(r3)
   86f94:	00845780 	call	84578 <_free_r>
   86f98:	003fd606 	br	86ef4 <_realloc_r+0x170>
   86f9c:	38c0330e 	bge	r7,r3,8706c <_realloc_r+0x2e8>
   86fa0:	900b883a 	mov	r5,r18
   86fa4:	a809883a 	mov	r4,r21
   86fa8:	00851100 	call	85110 <_malloc_r>
   86fac:	1025883a 	mov	r18,r2
   86fb0:	10001626 	beq	r2,zero,8700c <_realloc_r+0x288>
   86fb4:	80bfff17 	ldw	r2,-4(r16)
   86fb8:	00ffff84 	movi	r3,-2
   86fbc:	913ffe04 	addi	r4,r18,-8
   86fc0:	10c6703a 	and	r3,r2,r3
   86fc4:	b0c7883a 	add	r3,r22,r3
   86fc8:	20c09926 	beq	r4,r3,87230 <_realloc_r+0x4ac>
   86fcc:	99bfff04 	addi	r6,r19,-4
   86fd0:	00800904 	movi	r2,36
   86fd4:	11806436 	bltu	r2,r6,87168 <_realloc_r+0x3e4>
   86fd8:	00c004c4 	movi	r3,19
   86fdc:	19804036 	bltu	r3,r6,870e0 <_realloc_r+0x35c>
   86fe0:	9005883a 	mov	r2,r18
   86fe4:	8007883a 	mov	r3,r16
   86fe8:	19000017 	ldw	r4,0(r3)
   86fec:	11000015 	stw	r4,0(r2)
   86ff0:	19000117 	ldw	r4,4(r3)
   86ff4:	11000115 	stw	r4,4(r2)
   86ff8:	18c00217 	ldw	r3,8(r3)
   86ffc:	10c00215 	stw	r3,8(r2)
   87000:	a809883a 	mov	r4,r21
   87004:	800b883a 	mov	r5,r16
   87008:	00845780 	call	84578 <_free_r>
   8700c:	a809883a 	mov	r4,r21
   87010:	008a0bc0 	call	8a0bc <__malloc_unlock>
   87014:	003fba06 	br	86f00 <_realloc_r+0x17c>
   87018:	300b883a 	mov	r5,r6
   8701c:	dfc00a17 	ldw	ra,40(sp)
   87020:	df000917 	ldw	fp,36(sp)
   87024:	ddc00817 	ldw	r23,32(sp)
   87028:	dd800717 	ldw	r22,28(sp)
   8702c:	dd400617 	ldw	r21,24(sp)
   87030:	dd000517 	ldw	r20,20(sp)
   87034:	dcc00417 	ldw	r19,16(sp)
   87038:	dc800317 	ldw	r18,12(sp)
   8703c:	dc400217 	ldw	r17,8(sp)
   87040:	dc000117 	ldw	r16,4(sp)
   87044:	dec00b04 	addi	sp,sp,44
   87048:	00851101 	jmpi	85110 <_malloc_r>
   8704c:	29800117 	ldw	r6,4(r5)
   87050:	013fff04 	movi	r4,-4
   87054:	89c00404 	addi	r7,r17,16
   87058:	310c703a 	and	r6,r6,r4
   8705c:	34c9883a 	add	r4,r6,r19
   87060:	21c0340e 	bge	r4,r7,87134 <_realloc_r+0x3b0>
   87064:	2809883a 	mov	r4,r5
   87068:	003f7106 	br	86e30 <_realloc_r+0xac>
   8706c:	b8800317 	ldw	r2,12(r23)
   87070:	b8c00217 	ldw	r3,8(r23)
   87074:	99bfff04 	addi	r6,r19,-4
   87078:	01000904 	movi	r4,36
   8707c:	18800315 	stw	r2,12(r3)
   87080:	10c00215 	stw	r3,8(r2)
   87084:	bc800204 	addi	r18,r23,8
   87088:	21807836 	bltu	r4,r6,8726c <_realloc_r+0x4e8>
   8708c:	008004c4 	movi	r2,19
   87090:	1180732e 	bgeu	r2,r6,87260 <_realloc_r+0x4dc>
   87094:	80800017 	ldw	r2,0(r16)
   87098:	b8800215 	stw	r2,8(r23)
   8709c:	80800117 	ldw	r2,4(r16)
   870a0:	b8800315 	stw	r2,12(r23)
   870a4:	008006c4 	movi	r2,27
   870a8:	11808936 	bltu	r2,r6,872d0 <_realloc_r+0x54c>
   870ac:	b8800404 	addi	r2,r23,16
   870b0:	80c00204 	addi	r3,r16,8
   870b4:	19000017 	ldw	r4,0(r3)
   870b8:	9021883a 	mov	r16,r18
   870bc:	3829883a 	mov	r20,r7
   870c0:	11000015 	stw	r4,0(r2)
   870c4:	19000117 	ldw	r4,4(r3)
   870c8:	b82d883a 	mov	r22,r23
   870cc:	11000115 	stw	r4,4(r2)
   870d0:	18c00217 	ldw	r3,8(r3)
   870d4:	10c00215 	stw	r3,8(r2)
   870d8:	b8800117 	ldw	r2,4(r23)
   870dc:	003f7b06 	br	86ecc <_realloc_r+0x148>
   870e0:	80c00017 	ldw	r3,0(r16)
   870e4:	90c00015 	stw	r3,0(r18)
   870e8:	80c00117 	ldw	r3,4(r16)
   870ec:	90c00115 	stw	r3,4(r18)
   870f0:	00c006c4 	movi	r3,27
   870f4:	19804636 	bltu	r3,r6,87210 <_realloc_r+0x48c>
   870f8:	90800204 	addi	r2,r18,8
   870fc:	80c00204 	addi	r3,r16,8
   87100:	003fb906 	br	86fe8 <_realloc_r+0x264>
   87104:	9005883a 	mov	r2,r18
   87108:	8007883a 	mov	r3,r16
   8710c:	19000017 	ldw	r4,0(r3)
   87110:	9021883a 	mov	r16,r18
   87114:	b82d883a 	mov	r22,r23
   87118:	11000015 	stw	r4,0(r2)
   8711c:	19000117 	ldw	r4,4(r3)
   87120:	11000115 	stw	r4,4(r2)
   87124:	18c00217 	ldw	r3,8(r3)
   87128:	10c00215 	stw	r3,8(r2)
   8712c:	b8800117 	ldw	r2,4(r23)
   87130:	003f6606 	br	86ecc <_realloc_r+0x148>
   87134:	2445c83a 	sub	r2,r4,r17
   87138:	b46d883a 	add	r22,r22,r17
   8713c:	10800054 	ori	r2,r2,1
   87140:	b0800115 	stw	r2,4(r22)
   87144:	80bfff17 	ldw	r2,-4(r16)
   87148:	a809883a 	mov	r4,r21
   8714c:	e5800215 	stw	r22,8(fp)
   87150:	1080004c 	andi	r2,r2,1
   87154:	88a2b03a 	or	r17,r17,r2
   87158:	847fff15 	stw	r17,-4(r16)
   8715c:	008a0bc0 	call	8a0bc <__malloc_unlock>
   87160:	8025883a 	mov	r18,r16
   87164:	003f6606 	br	86f00 <_realloc_r+0x17c>
   87168:	9009883a 	mov	r4,r18
   8716c:	800b883a 	mov	r5,r16
   87170:	0085acc0 	call	85acc <memmove>
   87174:	003fa206 	br	87000 <_realloc_r+0x27c>
   87178:	88800404 	addi	r2,r17,16
   8717c:	a0bf8716 	blt	r20,r2,86f9c <_realloc_r+0x218>
   87180:	b8800317 	ldw	r2,12(r23)
   87184:	b8c00217 	ldw	r3,8(r23)
   87188:	99bfff04 	addi	r6,r19,-4
   8718c:	01000904 	movi	r4,36
   87190:	18800315 	stw	r2,12(r3)
   87194:	10c00215 	stw	r3,8(r2)
   87198:	bc800204 	addi	r18,r23,8
   8719c:	21806536 	bltu	r4,r6,87334 <_realloc_r+0x5b0>
   871a0:	008004c4 	movi	r2,19
   871a4:	1180592e 	bgeu	r2,r6,8730c <_realloc_r+0x588>
   871a8:	80800017 	ldw	r2,0(r16)
   871ac:	b8800215 	stw	r2,8(r23)
   871b0:	80800117 	ldw	r2,4(r16)
   871b4:	b8800315 	stw	r2,12(r23)
   871b8:	008006c4 	movi	r2,27
   871bc:	11806136 	bltu	r2,r6,87344 <_realloc_r+0x5c0>
   871c0:	b8800404 	addi	r2,r23,16
   871c4:	80c00204 	addi	r3,r16,8
   871c8:	19000017 	ldw	r4,0(r3)
   871cc:	11000015 	stw	r4,0(r2)
   871d0:	19000117 	ldw	r4,4(r3)
   871d4:	11000115 	stw	r4,4(r2)
   871d8:	18c00217 	ldw	r3,8(r3)
   871dc:	10c00215 	stw	r3,8(r2)
   871e0:	a447c83a 	sub	r3,r20,r17
   871e4:	bc45883a 	add	r2,r23,r17
   871e8:	18c00054 	ori	r3,r3,1
   871ec:	10c00115 	stw	r3,4(r2)
   871f0:	b8c00117 	ldw	r3,4(r23)
   871f4:	e0800215 	stw	r2,8(fp)
   871f8:	a809883a 	mov	r4,r21
   871fc:	1880004c 	andi	r2,r3,1
   87200:	88a2b03a 	or	r17,r17,r2
   87204:	bc400115 	stw	r17,4(r23)
   87208:	008a0bc0 	call	8a0bc <__malloc_unlock>
   8720c:	003f3c06 	br	86f00 <_realloc_r+0x17c>
   87210:	80c00217 	ldw	r3,8(r16)
   87214:	90c00215 	stw	r3,8(r18)
   87218:	80c00317 	ldw	r3,12(r16)
   8721c:	90c00315 	stw	r3,12(r18)
   87220:	30802426 	beq	r6,r2,872b4 <_realloc_r+0x530>
   87224:	90800404 	addi	r2,r18,16
   87228:	80c00404 	addi	r3,r16,16
   8722c:	003f6e06 	br	86fe8 <_realloc_r+0x264>
   87230:	953fff17 	ldw	r20,-4(r18)
   87234:	00ffff04 	movi	r3,-4
   87238:	a0e8703a 	and	r20,r20,r3
   8723c:	a4e9883a 	add	r20,r20,r19
   87240:	003f2206 	br	86ecc <_realloc_r+0x148>
   87244:	800b883a 	mov	r5,r16
   87248:	9009883a 	mov	r4,r18
   8724c:	0085acc0 	call	85acc <memmove>
   87250:	9021883a 	mov	r16,r18
   87254:	b8800117 	ldw	r2,4(r23)
   87258:	b82d883a 	mov	r22,r23
   8725c:	003f1b06 	br	86ecc <_realloc_r+0x148>
   87260:	9005883a 	mov	r2,r18
   87264:	8007883a 	mov	r3,r16
   87268:	003f9206 	br	870b4 <_realloc_r+0x330>
   8726c:	800b883a 	mov	r5,r16
   87270:	9009883a 	mov	r4,r18
   87274:	d9c00015 	stw	r7,0(sp)
   87278:	0085acc0 	call	85acc <memmove>
   8727c:	d9c00017 	ldw	r7,0(sp)
   87280:	9021883a 	mov	r16,r18
   87284:	b8800117 	ldw	r2,4(r23)
   87288:	3829883a 	mov	r20,r7
   8728c:	b82d883a 	mov	r22,r23
   87290:	003f0e06 	br	86ecc <_realloc_r+0x148>
   87294:	80800217 	ldw	r2,8(r16)
   87298:	b8800415 	stw	r2,16(r23)
   8729c:	80800317 	ldw	r2,12(r16)
   872a0:	b8800515 	stw	r2,20(r23)
   872a4:	31001226 	beq	r6,r4,872f0 <_realloc_r+0x56c>
   872a8:	b8800604 	addi	r2,r23,24
   872ac:	80c00404 	addi	r3,r16,16
   872b0:	003f9606 	br	8710c <_realloc_r+0x388>
   872b4:	81000417 	ldw	r4,16(r16)
   872b8:	90800604 	addi	r2,r18,24
   872bc:	80c00604 	addi	r3,r16,24
   872c0:	91000415 	stw	r4,16(r18)
   872c4:	81000517 	ldw	r4,20(r16)
   872c8:	91000515 	stw	r4,20(r18)
   872cc:	003f4606 	br	86fe8 <_realloc_r+0x264>
   872d0:	80800217 	ldw	r2,8(r16)
   872d4:	b8800415 	stw	r2,16(r23)
   872d8:	80800317 	ldw	r2,12(r16)
   872dc:	b8800515 	stw	r2,20(r23)
   872e0:	31000d26 	beq	r6,r4,87318 <_realloc_r+0x594>
   872e4:	b8800604 	addi	r2,r23,24
   872e8:	80c00404 	addi	r3,r16,16
   872ec:	003f7106 	br	870b4 <_realloc_r+0x330>
   872f0:	81000417 	ldw	r4,16(r16)
   872f4:	b8800804 	addi	r2,r23,32
   872f8:	80c00604 	addi	r3,r16,24
   872fc:	b9000615 	stw	r4,24(r23)
   87300:	81000517 	ldw	r4,20(r16)
   87304:	b9000715 	stw	r4,28(r23)
   87308:	003f8006 	br	8710c <_realloc_r+0x388>
   8730c:	9005883a 	mov	r2,r18
   87310:	8007883a 	mov	r3,r16
   87314:	003fac06 	br	871c8 <_realloc_r+0x444>
   87318:	81000417 	ldw	r4,16(r16)
   8731c:	b8800804 	addi	r2,r23,32
   87320:	80c00604 	addi	r3,r16,24
   87324:	b9000615 	stw	r4,24(r23)
   87328:	81000517 	ldw	r4,20(r16)
   8732c:	b9000715 	stw	r4,28(r23)
   87330:	003f6006 	br	870b4 <_realloc_r+0x330>
   87334:	9009883a 	mov	r4,r18
   87338:	800b883a 	mov	r5,r16
   8733c:	0085acc0 	call	85acc <memmove>
   87340:	003fa706 	br	871e0 <_realloc_r+0x45c>
   87344:	80800217 	ldw	r2,8(r16)
   87348:	b8800415 	stw	r2,16(r23)
   8734c:	80800317 	ldw	r2,12(r16)
   87350:	b8800515 	stw	r2,20(r23)
   87354:	31000326 	beq	r6,r4,87364 <_realloc_r+0x5e0>
   87358:	b8800604 	addi	r2,r23,24
   8735c:	80c00404 	addi	r3,r16,16
   87360:	003f9906 	br	871c8 <_realloc_r+0x444>
   87364:	81000417 	ldw	r4,16(r16)
   87368:	b8800804 	addi	r2,r23,32
   8736c:	80c00604 	addi	r3,r16,24
   87370:	b9000615 	stw	r4,24(r23)
   87374:	81000517 	ldw	r4,20(r16)
   87378:	b9000715 	stw	r4,28(r23)
   8737c:	003f9206 	br	871c8 <_realloc_r+0x444>

00087380 <__isinfd>:
   87380:	0105c83a 	sub	r2,zero,r4
   87384:	1108b03a 	or	r4,r2,r4
   87388:	2004d7fa 	srli	r2,r4,31
   8738c:	00e00034 	movhi	r3,32768
   87390:	18ffffc4 	addi	r3,r3,-1
   87394:	28ca703a 	and	r5,r5,r3
   87398:	1144b03a 	or	r2,r2,r5
   8739c:	00dffc34 	movhi	r3,32752
   873a0:	1885c83a 	sub	r2,r3,r2
   873a4:	0087c83a 	sub	r3,zero,r2
   873a8:	1884b03a 	or	r2,r3,r2
   873ac:	1005d7fa 	srai	r2,r2,31
   873b0:	10800044 	addi	r2,r2,1
   873b4:	f800283a 	ret

000873b8 <__isnand>:
   873b8:	0105c83a 	sub	r2,zero,r4
   873bc:	1108b03a 	or	r4,r2,r4
   873c0:	2004d7fa 	srli	r2,r4,31
   873c4:	00e00034 	movhi	r3,32768
   873c8:	18ffffc4 	addi	r3,r3,-1
   873cc:	28ca703a 	and	r5,r5,r3
   873d0:	1144b03a 	or	r2,r2,r5
   873d4:	00dffc34 	movhi	r3,32752
   873d8:	1885c83a 	sub	r2,r3,r2
   873dc:	1004d7fa 	srli	r2,r2,31
   873e0:	f800283a 	ret

000873e4 <_sbrk_r>:
   873e4:	defffd04 	addi	sp,sp,-12
   873e8:	dc400115 	stw	r17,4(sp)
   873ec:	dc000015 	stw	r16,0(sp)
   873f0:	2023883a 	mov	r17,r4
   873f4:	04000274 	movhi	r16,9
   873f8:	84017004 	addi	r16,r16,1472
   873fc:	2809883a 	mov	r4,r5
   87400:	dfc00215 	stw	ra,8(sp)
   87404:	80000015 	stw	zero,0(r16)
   87408:	008a2a00 	call	8a2a0 <sbrk>
   8740c:	00ffffc4 	movi	r3,-1
   87410:	10c00526 	beq	r2,r3,87428 <_sbrk_r+0x44>
   87414:	dfc00217 	ldw	ra,8(sp)
   87418:	dc400117 	ldw	r17,4(sp)
   8741c:	dc000017 	ldw	r16,0(sp)
   87420:	dec00304 	addi	sp,sp,12
   87424:	f800283a 	ret
   87428:	80c00017 	ldw	r3,0(r16)
   8742c:	183ff926 	beq	r3,zero,87414 <_sbrk_r+0x30>
   87430:	88c00015 	stw	r3,0(r17)
   87434:	dfc00217 	ldw	ra,8(sp)
   87438:	dc400117 	ldw	r17,4(sp)
   8743c:	dc000017 	ldw	r16,0(sp)
   87440:	dec00304 	addi	sp,sp,12
   87444:	f800283a 	ret

00087448 <__sread>:
   87448:	defffe04 	addi	sp,sp,-8
   8744c:	dc000015 	stw	r16,0(sp)
   87450:	2821883a 	mov	r16,r5
   87454:	2940038f 	ldh	r5,14(r5)
   87458:	dfc00115 	stw	ra,4(sp)
   8745c:	0087a500 	call	87a50 <_read_r>
   87460:	10000716 	blt	r2,zero,87480 <__sread+0x38>
   87464:	80c01417 	ldw	r3,80(r16)
   87468:	1887883a 	add	r3,r3,r2
   8746c:	80c01415 	stw	r3,80(r16)
   87470:	dfc00117 	ldw	ra,4(sp)
   87474:	dc000017 	ldw	r16,0(sp)
   87478:	dec00204 	addi	sp,sp,8
   8747c:	f800283a 	ret
   87480:	80c0030b 	ldhu	r3,12(r16)
   87484:	18fbffcc 	andi	r3,r3,61439
   87488:	80c0030d 	sth	r3,12(r16)
   8748c:	dfc00117 	ldw	ra,4(sp)
   87490:	dc000017 	ldw	r16,0(sp)
   87494:	dec00204 	addi	sp,sp,8
   87498:	f800283a 	ret

0008749c <__swrite>:
   8749c:	2880030b 	ldhu	r2,12(r5)
   874a0:	defffb04 	addi	sp,sp,-20
   874a4:	dcc00315 	stw	r19,12(sp)
   874a8:	10c0400c 	andi	r3,r2,256
   874ac:	18ffffcc 	andi	r3,r3,65535
   874b0:	18e0001c 	xori	r3,r3,32768
   874b4:	dc800215 	stw	r18,8(sp)
   874b8:	dc400115 	stw	r17,4(sp)
   874bc:	dc000015 	stw	r16,0(sp)
   874c0:	dfc00415 	stw	ra,16(sp)
   874c4:	18e00004 	addi	r3,r3,-32768
   874c8:	2821883a 	mov	r16,r5
   874cc:	2027883a 	mov	r19,r4
   874d0:	3025883a 	mov	r18,r6
   874d4:	3823883a 	mov	r17,r7
   874d8:	18000526 	beq	r3,zero,874f0 <__swrite+0x54>
   874dc:	2940038f 	ldh	r5,14(r5)
   874e0:	000d883a 	mov	r6,zero
   874e4:	01c00084 	movi	r7,2
   874e8:	00879e40 	call	879e4 <_lseek_r>
   874ec:	8080030b 	ldhu	r2,12(r16)
   874f0:	8140038f 	ldh	r5,14(r16)
   874f4:	10bbffcc 	andi	r2,r2,61439
   874f8:	9809883a 	mov	r4,r19
   874fc:	900d883a 	mov	r6,r18
   87500:	880f883a 	mov	r7,r17
   87504:	8080030d 	sth	r2,12(r16)
   87508:	dfc00417 	ldw	ra,16(sp)
   8750c:	dcc00317 	ldw	r19,12(sp)
   87510:	dc800217 	ldw	r18,8(sp)
   87514:	dc400117 	ldw	r17,4(sp)
   87518:	dc000017 	ldw	r16,0(sp)
   8751c:	dec00504 	addi	sp,sp,20
   87520:	008762c1 	jmpi	8762c <_write_r>

00087524 <__sseek>:
   87524:	defffe04 	addi	sp,sp,-8
   87528:	dc000015 	stw	r16,0(sp)
   8752c:	2821883a 	mov	r16,r5
   87530:	2940038f 	ldh	r5,14(r5)
   87534:	dfc00115 	stw	ra,4(sp)
   87538:	00879e40 	call	879e4 <_lseek_r>
   8753c:	00ffffc4 	movi	r3,-1
   87540:	10c00826 	beq	r2,r3,87564 <__sseek+0x40>
   87544:	80c0030b 	ldhu	r3,12(r16)
   87548:	80801415 	stw	r2,80(r16)
   8754c:	18c40014 	ori	r3,r3,4096
   87550:	80c0030d 	sth	r3,12(r16)
   87554:	dfc00117 	ldw	ra,4(sp)
   87558:	dc000017 	ldw	r16,0(sp)
   8755c:	dec00204 	addi	sp,sp,8
   87560:	f800283a 	ret
   87564:	80c0030b 	ldhu	r3,12(r16)
   87568:	18fbffcc 	andi	r3,r3,61439
   8756c:	80c0030d 	sth	r3,12(r16)
   87570:	dfc00117 	ldw	ra,4(sp)
   87574:	dc000017 	ldw	r16,0(sp)
   87578:	dec00204 	addi	sp,sp,8
   8757c:	f800283a 	ret

00087580 <__sclose>:
   87580:	2940038f 	ldh	r5,14(r5)
   87584:	00877641 	jmpi	87764 <_close_r>

00087588 <strcmp>:
   87588:	2904b03a 	or	r2,r5,r4
   8758c:	108000cc 	andi	r2,r2,3
   87590:	1000171e 	bne	r2,zero,875f0 <strcmp+0x68>
   87594:	20800017 	ldw	r2,0(r4)
   87598:	28c00017 	ldw	r3,0(r5)
   8759c:	10c0141e 	bne	r2,r3,875f0 <strcmp+0x68>
   875a0:	027fbff4 	movhi	r9,65279
   875a4:	4a7fbfc4 	addi	r9,r9,-257
   875a8:	1247883a 	add	r3,r2,r9
   875ac:	0084303a 	nor	r2,zero,r2
   875b0:	1884703a 	and	r2,r3,r2
   875b4:	02202074 	movhi	r8,32897
   875b8:	42202004 	addi	r8,r8,-32640
   875bc:	1204703a 	and	r2,r2,r8
   875c0:	10000226 	beq	r2,zero,875cc <strcmp+0x44>
   875c4:	00001706 	br	87624 <strcmp+0x9c>
   875c8:	3000161e 	bne	r6,zero,87624 <strcmp+0x9c>
   875cc:	21000104 	addi	r4,r4,4
   875d0:	20800017 	ldw	r2,0(r4)
   875d4:	29400104 	addi	r5,r5,4
   875d8:	28c00017 	ldw	r3,0(r5)
   875dc:	124f883a 	add	r7,r2,r9
   875e0:	008c303a 	nor	r6,zero,r2
   875e4:	398c703a 	and	r6,r7,r6
   875e8:	320c703a 	and	r6,r6,r8
   875ec:	10fff626 	beq	r2,r3,875c8 <strcmp+0x40>
   875f0:	20800007 	ldb	r2,0(r4)
   875f4:	1000051e 	bne	r2,zero,8760c <strcmp+0x84>
   875f8:	00000606 	br	87614 <strcmp+0x8c>
   875fc:	21000044 	addi	r4,r4,1
   87600:	20800007 	ldb	r2,0(r4)
   87604:	29400044 	addi	r5,r5,1
   87608:	10000226 	beq	r2,zero,87614 <strcmp+0x8c>
   8760c:	28c00007 	ldb	r3,0(r5)
   87610:	10fffa26 	beq	r2,r3,875fc <strcmp+0x74>
   87614:	20c00003 	ldbu	r3,0(r4)
   87618:	28800003 	ldbu	r2,0(r5)
   8761c:	1885c83a 	sub	r2,r3,r2
   87620:	f800283a 	ret
   87624:	0005883a 	mov	r2,zero
   87628:	f800283a 	ret

0008762c <_write_r>:
   8762c:	defffd04 	addi	sp,sp,-12
   87630:	dc400115 	stw	r17,4(sp)
   87634:	dc000015 	stw	r16,0(sp)
   87638:	2023883a 	mov	r17,r4
   8763c:	04000274 	movhi	r16,9
   87640:	84017004 	addi	r16,r16,1472
   87644:	2809883a 	mov	r4,r5
   87648:	300b883a 	mov	r5,r6
   8764c:	380d883a 	mov	r6,r7
   87650:	dfc00215 	stw	ra,8(sp)
   87654:	80000015 	stw	zero,0(r16)
   87658:	008a3d00 	call	8a3d0 <write>
   8765c:	00ffffc4 	movi	r3,-1
   87660:	10c00526 	beq	r2,r3,87678 <_write_r+0x4c>
   87664:	dfc00217 	ldw	ra,8(sp)
   87668:	dc400117 	ldw	r17,4(sp)
   8766c:	dc000017 	ldw	r16,0(sp)
   87670:	dec00304 	addi	sp,sp,12
   87674:	f800283a 	ret
   87678:	80c00017 	ldw	r3,0(r16)
   8767c:	183ff926 	beq	r3,zero,87664 <_write_r+0x38>
   87680:	88c00015 	stw	r3,0(r17)
   87684:	dfc00217 	ldw	ra,8(sp)
   87688:	dc400117 	ldw	r17,4(sp)
   8768c:	dc000017 	ldw	r16,0(sp)
   87690:	dec00304 	addi	sp,sp,12
   87694:	f800283a 	ret

00087698 <_calloc_r>:
   87698:	defffe04 	addi	sp,sp,-8
   8769c:	dc000015 	stw	r16,0(sp)
   876a0:	2021883a 	mov	r16,r4
   876a4:	3009883a 	mov	r4,r6
   876a8:	dfc00115 	stw	ra,4(sp)
   876ac:	00894740 	call	89474 <__mulsi3>
   876b0:	8009883a 	mov	r4,r16
   876b4:	100b883a 	mov	r5,r2
   876b8:	00851100 	call	85110 <_malloc_r>
   876bc:	1021883a 	mov	r16,r2
   876c0:	10000c26 	beq	r2,zero,876f4 <_calloc_r+0x5c>
   876c4:	11bfff17 	ldw	r6,-4(r2)
   876c8:	00ffff04 	movi	r3,-4
   876cc:	00800904 	movi	r2,36
   876d0:	30cc703a 	and	r6,r6,r3
   876d4:	30cd883a 	add	r6,r6,r3
   876d8:	11801436 	bltu	r2,r6,8772c <_calloc_r+0x94>
   876dc:	00c004c4 	movi	r3,19
   876e0:	19800936 	bltu	r3,r6,87708 <_calloc_r+0x70>
   876e4:	8005883a 	mov	r2,r16
   876e8:	10000015 	stw	zero,0(r2)
   876ec:	10000115 	stw	zero,4(r2)
   876f0:	10000215 	stw	zero,8(r2)
   876f4:	8005883a 	mov	r2,r16
   876f8:	dfc00117 	ldw	ra,4(sp)
   876fc:	dc000017 	ldw	r16,0(sp)
   87700:	dec00204 	addi	sp,sp,8
   87704:	f800283a 	ret
   87708:	80000015 	stw	zero,0(r16)
   8770c:	80000115 	stw	zero,4(r16)
   87710:	00c006c4 	movi	r3,27
   87714:	19800d2e 	bgeu	r3,r6,8774c <_calloc_r+0xb4>
   87718:	80000215 	stw	zero,8(r16)
   8771c:	80000315 	stw	zero,12(r16)
   87720:	30800c26 	beq	r6,r2,87754 <_calloc_r+0xbc>
   87724:	80800404 	addi	r2,r16,16
   87728:	003fef06 	br	876e8 <_calloc_r+0x50>
   8772c:	8009883a 	mov	r4,r16
   87730:	000b883a 	mov	r5,zero
   87734:	0085c580 	call	85c58 <memset>
   87738:	8005883a 	mov	r2,r16
   8773c:	dfc00117 	ldw	ra,4(sp)
   87740:	dc000017 	ldw	r16,0(sp)
   87744:	dec00204 	addi	sp,sp,8
   87748:	f800283a 	ret
   8774c:	80800204 	addi	r2,r16,8
   87750:	003fe506 	br	876e8 <_calloc_r+0x50>
   87754:	80000415 	stw	zero,16(r16)
   87758:	80000515 	stw	zero,20(r16)
   8775c:	80800604 	addi	r2,r16,24
   87760:	003fe106 	br	876e8 <_calloc_r+0x50>

00087764 <_close_r>:
   87764:	defffd04 	addi	sp,sp,-12
   87768:	dc400115 	stw	r17,4(sp)
   8776c:	dc000015 	stw	r16,0(sp)
   87770:	2023883a 	mov	r17,r4
   87774:	04000274 	movhi	r16,9
   87778:	84017004 	addi	r16,r16,1472
   8777c:	2809883a 	mov	r4,r5
   87780:	dfc00215 	stw	ra,8(sp)
   87784:	80000015 	stw	zero,0(r16)
   87788:	0089b280 	call	89b28 <close>
   8778c:	00ffffc4 	movi	r3,-1
   87790:	10c00526 	beq	r2,r3,877a8 <_close_r+0x44>
   87794:	dfc00217 	ldw	ra,8(sp)
   87798:	dc400117 	ldw	r17,4(sp)
   8779c:	dc000017 	ldw	r16,0(sp)
   877a0:	dec00304 	addi	sp,sp,12
   877a4:	f800283a 	ret
   877a8:	80c00017 	ldw	r3,0(r16)
   877ac:	183ff926 	beq	r3,zero,87794 <_close_r+0x30>
   877b0:	88c00015 	stw	r3,0(r17)
   877b4:	dfc00217 	ldw	ra,8(sp)
   877b8:	dc400117 	ldw	r17,4(sp)
   877bc:	dc000017 	ldw	r16,0(sp)
   877c0:	dec00304 	addi	sp,sp,12
   877c4:	f800283a 	ret

000877c8 <_fclose_r>:
   877c8:	defffc04 	addi	sp,sp,-16
   877cc:	dc400115 	stw	r17,4(sp)
   877d0:	dc000015 	stw	r16,0(sp)
   877d4:	dfc00315 	stw	ra,12(sp)
   877d8:	dc800215 	stw	r18,8(sp)
   877dc:	2821883a 	mov	r16,r5
   877e0:	2023883a 	mov	r17,r4
   877e4:	28003426 	beq	r5,zero,878b8 <_fclose_r+0xf0>
   877e8:	00843fc0 	call	843fc <__sfp_lock_acquire>
   877ec:	88000226 	beq	r17,zero,877f8 <_fclose_r+0x30>
   877f0:	88800e17 	ldw	r2,56(r17)
   877f4:	10003826 	beq	r2,zero,878d8 <_fclose_r+0x110>
   877f8:	8080030f 	ldh	r2,12(r16)
   877fc:	10002526 	beq	r2,zero,87894 <_fclose_r+0xcc>
   87800:	8809883a 	mov	r4,r17
   87804:	800b883a 	mov	r5,r16
   87808:	0083f380 	call	83f38 <_fflush_r>
   8780c:	1025883a 	mov	r18,r2
   87810:	80800b17 	ldw	r2,44(r16)
   87814:	10000426 	beq	r2,zero,87828 <_fclose_r+0x60>
   87818:	81400717 	ldw	r5,28(r16)
   8781c:	8809883a 	mov	r4,r17
   87820:	103ee83a 	callr	r2
   87824:	10003516 	blt	r2,zero,878fc <_fclose_r+0x134>
   87828:	8080030b 	ldhu	r2,12(r16)
   8782c:	1080200c 	andi	r2,r2,128
   87830:	10bfffcc 	andi	r2,r2,65535
   87834:	10a0001c 	xori	r2,r2,32768
   87838:	10a00004 	addi	r2,r2,-32768
   8783c:	10002b1e 	bne	r2,zero,878ec <_fclose_r+0x124>
   87840:	81400c17 	ldw	r5,48(r16)
   87844:	28000526 	beq	r5,zero,8785c <_fclose_r+0x94>
   87848:	80801004 	addi	r2,r16,64
   8784c:	28800226 	beq	r5,r2,87858 <_fclose_r+0x90>
   87850:	8809883a 	mov	r4,r17
   87854:	00845780 	call	84578 <_free_r>
   87858:	80000c15 	stw	zero,48(r16)
   8785c:	81401117 	ldw	r5,68(r16)
   87860:	28000326 	beq	r5,zero,87870 <_fclose_r+0xa8>
   87864:	8809883a 	mov	r4,r17
   87868:	00845780 	call	84578 <_free_r>
   8786c:	80001115 	stw	zero,68(r16)
   87870:	8000030d 	sth	zero,12(r16)
   87874:	00844000 	call	84400 <__sfp_lock_release>
   87878:	9005883a 	mov	r2,r18
   8787c:	dfc00317 	ldw	ra,12(sp)
   87880:	dc800217 	ldw	r18,8(sp)
   87884:	dc400117 	ldw	r17,4(sp)
   87888:	dc000017 	ldw	r16,0(sp)
   8788c:	dec00404 	addi	sp,sp,16
   87890:	f800283a 	ret
   87894:	00844000 	call	84400 <__sfp_lock_release>
   87898:	0025883a 	mov	r18,zero
   8789c:	9005883a 	mov	r2,r18
   878a0:	dfc00317 	ldw	ra,12(sp)
   878a4:	dc800217 	ldw	r18,8(sp)
   878a8:	dc400117 	ldw	r17,4(sp)
   878ac:	dc000017 	ldw	r16,0(sp)
   878b0:	dec00404 	addi	sp,sp,16
   878b4:	f800283a 	ret
   878b8:	0025883a 	mov	r18,zero
   878bc:	9005883a 	mov	r2,r18
   878c0:	dfc00317 	ldw	ra,12(sp)
   878c4:	dc800217 	ldw	r18,8(sp)
   878c8:	dc400117 	ldw	r17,4(sp)
   878cc:	dc000017 	ldw	r16,0(sp)
   878d0:	dec00404 	addi	sp,sp,16
   878d4:	f800283a 	ret
   878d8:	8809883a 	mov	r4,r17
   878dc:	00841f40 	call	841f4 <__sinit>
   878e0:	8080030f 	ldh	r2,12(r16)
   878e4:	103fc61e 	bne	r2,zero,87800 <_fclose_r+0x38>
   878e8:	003fea06 	br	87894 <_fclose_r+0xcc>
   878ec:	81400417 	ldw	r5,16(r16)
   878f0:	8809883a 	mov	r4,r17
   878f4:	00845780 	call	84578 <_free_r>
   878f8:	003fd106 	br	87840 <_fclose_r+0x78>
   878fc:	04bfffc4 	movi	r18,-1
   87900:	003fc906 	br	87828 <_fclose_r+0x60>

00087904 <fclose>:
   87904:	00800274 	movhi	r2,9
   87908:	10ba9504 	addi	r2,r2,-5548
   8790c:	200b883a 	mov	r5,r4
   87910:	11000017 	ldw	r4,0(r2)
   87914:	00877c81 	jmpi	877c8 <_fclose_r>

00087918 <_fstat_r>:
   87918:	defffd04 	addi	sp,sp,-12
   8791c:	dc400115 	stw	r17,4(sp)
   87920:	dc000015 	stw	r16,0(sp)
   87924:	2023883a 	mov	r17,r4
   87928:	04000274 	movhi	r16,9
   8792c:	84017004 	addi	r16,r16,1472
   87930:	2809883a 	mov	r4,r5
   87934:	300b883a 	mov	r5,r6
   87938:	dfc00215 	stw	ra,8(sp)
   8793c:	80000015 	stw	zero,0(r16)
   87940:	0089c700 	call	89c70 <fstat>
   87944:	00ffffc4 	movi	r3,-1
   87948:	10c00526 	beq	r2,r3,87960 <_fstat_r+0x48>
   8794c:	dfc00217 	ldw	ra,8(sp)
   87950:	dc400117 	ldw	r17,4(sp)
   87954:	dc000017 	ldw	r16,0(sp)
   87958:	dec00304 	addi	sp,sp,12
   8795c:	f800283a 	ret
   87960:	80c00017 	ldw	r3,0(r16)
   87964:	183ff926 	beq	r3,zero,8794c <_fstat_r+0x34>
   87968:	88c00015 	stw	r3,0(r17)
   8796c:	dfc00217 	ldw	ra,8(sp)
   87970:	dc400117 	ldw	r17,4(sp)
   87974:	dc000017 	ldw	r16,0(sp)
   87978:	dec00304 	addi	sp,sp,12
   8797c:	f800283a 	ret

00087980 <_isatty_r>:
   87980:	defffd04 	addi	sp,sp,-12
   87984:	dc400115 	stw	r17,4(sp)
   87988:	dc000015 	stw	r16,0(sp)
   8798c:	2023883a 	mov	r17,r4
   87990:	04000274 	movhi	r16,9
   87994:	84017004 	addi	r16,r16,1472
   87998:	2809883a 	mov	r4,r5
   8799c:	dfc00215 	stw	ra,8(sp)
   879a0:	80000015 	stw	zero,0(r16)
   879a4:	0089d700 	call	89d70 <isatty>
   879a8:	00ffffc4 	movi	r3,-1
   879ac:	10c00526 	beq	r2,r3,879c4 <_isatty_r+0x44>
   879b0:	dfc00217 	ldw	ra,8(sp)
   879b4:	dc400117 	ldw	r17,4(sp)
   879b8:	dc000017 	ldw	r16,0(sp)
   879bc:	dec00304 	addi	sp,sp,12
   879c0:	f800283a 	ret
   879c4:	80c00017 	ldw	r3,0(r16)
   879c8:	183ff926 	beq	r3,zero,879b0 <_isatty_r+0x30>
   879cc:	88c00015 	stw	r3,0(r17)
   879d0:	dfc00217 	ldw	ra,8(sp)
   879d4:	dc400117 	ldw	r17,4(sp)
   879d8:	dc000017 	ldw	r16,0(sp)
   879dc:	dec00304 	addi	sp,sp,12
   879e0:	f800283a 	ret

000879e4 <_lseek_r>:
   879e4:	defffd04 	addi	sp,sp,-12
   879e8:	dc400115 	stw	r17,4(sp)
   879ec:	dc000015 	stw	r16,0(sp)
   879f0:	2023883a 	mov	r17,r4
   879f4:	04000274 	movhi	r16,9
   879f8:	84017004 	addi	r16,r16,1472
   879fc:	2809883a 	mov	r4,r5
   87a00:	300b883a 	mov	r5,r6
   87a04:	380d883a 	mov	r6,r7
   87a08:	dfc00215 	stw	ra,8(sp)
   87a0c:	80000015 	stw	zero,0(r16)
   87a10:	0089f500 	call	89f50 <lseek>
   87a14:	00ffffc4 	movi	r3,-1
   87a18:	10c00526 	beq	r2,r3,87a30 <_lseek_r+0x4c>
   87a1c:	dfc00217 	ldw	ra,8(sp)
   87a20:	dc400117 	ldw	r17,4(sp)
   87a24:	dc000017 	ldw	r16,0(sp)
   87a28:	dec00304 	addi	sp,sp,12
   87a2c:	f800283a 	ret
   87a30:	80c00017 	ldw	r3,0(r16)
   87a34:	183ff926 	beq	r3,zero,87a1c <_lseek_r+0x38>
   87a38:	88c00015 	stw	r3,0(r17)
   87a3c:	dfc00217 	ldw	ra,8(sp)
   87a40:	dc400117 	ldw	r17,4(sp)
   87a44:	dc000017 	ldw	r16,0(sp)
   87a48:	dec00304 	addi	sp,sp,12
   87a4c:	f800283a 	ret

00087a50 <_read_r>:
   87a50:	defffd04 	addi	sp,sp,-12
   87a54:	dc400115 	stw	r17,4(sp)
   87a58:	dc000015 	stw	r16,0(sp)
   87a5c:	2023883a 	mov	r17,r4
   87a60:	04000274 	movhi	r16,9
   87a64:	84017004 	addi	r16,r16,1472
   87a68:	2809883a 	mov	r4,r5
   87a6c:	300b883a 	mov	r5,r6
   87a70:	380d883a 	mov	r6,r7
   87a74:	dfc00215 	stw	ra,8(sp)
   87a78:	80000015 	stw	zero,0(r16)
   87a7c:	008a12c0 	call	8a12c <read>
   87a80:	00ffffc4 	movi	r3,-1
   87a84:	10c00526 	beq	r2,r3,87a9c <_read_r+0x4c>
   87a88:	dfc00217 	ldw	ra,8(sp)
   87a8c:	dc400117 	ldw	r17,4(sp)
   87a90:	dc000017 	ldw	r16,0(sp)
   87a94:	dec00304 	addi	sp,sp,12
   87a98:	f800283a 	ret
   87a9c:	80c00017 	ldw	r3,0(r16)
   87aa0:	183ff926 	beq	r3,zero,87a88 <_read_r+0x38>
   87aa4:	88c00015 	stw	r3,0(r17)
   87aa8:	dfc00217 	ldw	ra,8(sp)
   87aac:	dc400117 	ldw	r17,4(sp)
   87ab0:	dc000017 	ldw	r16,0(sp)
   87ab4:	dec00304 	addi	sp,sp,12
   87ab8:	f800283a 	ret

00087abc <__udivdi3>:
   87abc:	defff504 	addi	sp,sp,-44
   87ac0:	dd000515 	stw	r20,20(sp)
   87ac4:	dcc00415 	stw	r19,16(sp)
   87ac8:	dc800315 	stw	r18,12(sp)
   87acc:	dc400215 	stw	r17,8(sp)
   87ad0:	dc000115 	stw	r16,4(sp)
   87ad4:	dfc00a15 	stw	ra,40(sp)
   87ad8:	df000915 	stw	fp,36(sp)
   87adc:	ddc00815 	stw	r23,32(sp)
   87ae0:	dd800715 	stw	r22,28(sp)
   87ae4:	dd400615 	stw	r21,24(sp)
   87ae8:	2025883a 	mov	r18,r4
   87aec:	2823883a 	mov	r17,r5
   87af0:	3021883a 	mov	r16,r6
   87af4:	2027883a 	mov	r19,r4
   87af8:	2829883a 	mov	r20,r5
   87afc:	3800451e 	bne	r7,zero,87c14 <__udivdi3+0x158>
   87b00:	2980652e 	bgeu	r5,r6,87c98 <__udivdi3+0x1dc>
   87b04:	00bfffd4 	movui	r2,65535
   87b08:	1180b436 	bltu	r2,r6,87ddc <__udivdi3+0x320>
   87b0c:	00803fc4 	movi	r2,255
   87b10:	11816636 	bltu	r2,r6,880ac <__udivdi3+0x5f0>
   87b14:	0005883a 	mov	r2,zero
   87b18:	0007883a 	mov	r3,zero
   87b1c:	3084d83a 	srl	r2,r6,r2
   87b20:	01000274 	movhi	r4,9
   87b24:	21338c04 	addi	r4,r4,-12752
   87b28:	2085883a 	add	r2,r4,r2
   87b2c:	10800003 	ldbu	r2,0(r2)
   87b30:	10c7883a 	add	r3,r2,r3
   87b34:	00800804 	movi	r2,32
   87b38:	10c5c83a 	sub	r2,r2,r3
   87b3c:	10000526 	beq	r2,zero,87b54 <__udivdi3+0x98>
   87b40:	88a2983a 	sll	r17,r17,r2
   87b44:	90c6d83a 	srl	r3,r18,r3
   87b48:	30a0983a 	sll	r16,r6,r2
   87b4c:	90a6983a 	sll	r19,r18,r2
   87b50:	88e8b03a 	or	r20,r17,r3
   87b54:	8022d43a 	srli	r17,r16,16
   87b58:	a009883a 	mov	r4,r20
   87b5c:	857fffcc 	andi	r21,r16,65535
   87b60:	880b883a 	mov	r5,r17
   87b64:	008041c0 	call	8041c <__umodsi3>
   87b68:	a009883a 	mov	r4,r20
   87b6c:	880b883a 	mov	r5,r17
   87b70:	102d883a 	mov	r22,r2
   87b74:	00804140 	call	80414 <__udivsi3>
   87b78:	1009883a 	mov	r4,r2
   87b7c:	a80b883a 	mov	r5,r21
   87b80:	1025883a 	mov	r18,r2
   87b84:	00894740 	call	89474 <__mulsi3>
   87b88:	1009883a 	mov	r4,r2
   87b8c:	b006943a 	slli	r3,r22,16
   87b90:	9804d43a 	srli	r2,r19,16
   87b94:	1886b03a 	or	r3,r3,r2
   87b98:	1900052e 	bgeu	r3,r4,87bb0 <__udivdi3+0xf4>
   87b9c:	1c07883a 	add	r3,r3,r16
   87ba0:	90bfffc4 	addi	r2,r18,-1
   87ba4:	1c000136 	bltu	r3,r16,87bac <__udivdi3+0xf0>
   87ba8:	19015536 	bltu	r3,r4,88100 <__udivdi3+0x644>
   87bac:	1025883a 	mov	r18,r2
   87bb0:	1929c83a 	sub	r20,r3,r4
   87bb4:	880b883a 	mov	r5,r17
   87bb8:	a009883a 	mov	r4,r20
   87bbc:	008041c0 	call	8041c <__umodsi3>
   87bc0:	102d883a 	mov	r22,r2
   87bc4:	880b883a 	mov	r5,r17
   87bc8:	a009883a 	mov	r4,r20
   87bcc:	b02c943a 	slli	r22,r22,16
   87bd0:	00804140 	call	80414 <__udivsi3>
   87bd4:	1009883a 	mov	r4,r2
   87bd8:	a80b883a 	mov	r5,r21
   87bdc:	9cffffcc 	andi	r19,r19,65535
   87be0:	1023883a 	mov	r17,r2
   87be4:	b4e6b03a 	or	r19,r22,r19
   87be8:	00894740 	call	89474 <__mulsi3>
   87bec:	9880052e 	bgeu	r19,r2,87c04 <__udivdi3+0x148>
   87bf0:	9c27883a 	add	r19,r19,r16
   87bf4:	88ffffc4 	addi	r3,r17,-1
   87bf8:	9c011436 	bltu	r19,r16,8804c <__udivdi3+0x590>
   87bfc:	9881132e 	bgeu	r19,r2,8804c <__udivdi3+0x590>
   87c00:	8c7fff84 	addi	r17,r17,-2
   87c04:	9004943a 	slli	r2,r18,16
   87c08:	0007883a 	mov	r3,zero
   87c0c:	8884b03a 	or	r2,r17,r2
   87c10:	00001506 	br	87c68 <__udivdi3+0x1ac>
   87c14:	29c06a36 	bltu	r5,r7,87dc0 <__udivdi3+0x304>
   87c18:	00bfffd4 	movui	r2,65535
   87c1c:	11c06a2e 	bgeu	r2,r7,87dc8 <__udivdi3+0x30c>
   87c20:	00804034 	movhi	r2,256
   87c24:	10bfffc4 	addi	r2,r2,-1
   87c28:	11c11436 	bltu	r2,r7,8807c <__udivdi3+0x5c0>
   87c2c:	00c00404 	movi	r3,16
   87c30:	180b883a 	mov	r5,r3
   87c34:	38c6d83a 	srl	r3,r7,r3
   87c38:	01000274 	movhi	r4,9
   87c3c:	21338c04 	addi	r4,r4,-12752
   87c40:	04000804 	movi	r16,32
   87c44:	20c7883a 	add	r3,r4,r3
   87c48:	18800003 	ldbu	r2,0(r3)
   87c4c:	1145883a 	add	r2,r2,r5
   87c50:	80a1c83a 	sub	r16,r16,r2
   87c54:	80006e1e 	bne	r16,zero,87e10 <__udivdi3+0x354>
   87c58:	0007883a 	mov	r3,zero
   87c5c:	3c406a36 	bltu	r7,r17,87e08 <__udivdi3+0x34c>
   87c60:	9180692e 	bgeu	r18,r6,87e08 <__udivdi3+0x34c>
   87c64:	0005883a 	mov	r2,zero
   87c68:	dfc00a17 	ldw	ra,40(sp)
   87c6c:	df000917 	ldw	fp,36(sp)
   87c70:	ddc00817 	ldw	r23,32(sp)
   87c74:	dd800717 	ldw	r22,28(sp)
   87c78:	dd400617 	ldw	r21,24(sp)
   87c7c:	dd000517 	ldw	r20,20(sp)
   87c80:	dcc00417 	ldw	r19,16(sp)
   87c84:	dc800317 	ldw	r18,12(sp)
   87c88:	dc400217 	ldw	r17,8(sp)
   87c8c:	dc000117 	ldw	r16,4(sp)
   87c90:	dec00b04 	addi	sp,sp,44
   87c94:	f800283a 	ret
   87c98:	3000041e 	bne	r6,zero,87cac <__udivdi3+0x1f0>
   87c9c:	01000044 	movi	r4,1
   87ca0:	000b883a 	mov	r5,zero
   87ca4:	00804140 	call	80414 <__udivsi3>
   87ca8:	1021883a 	mov	r16,r2
   87cac:	00bfffd4 	movui	r2,65535
   87cb0:	1400502e 	bgeu	r2,r16,87df4 <__udivdi3+0x338>
   87cb4:	00804034 	movhi	r2,256
   87cb8:	10bfffc4 	addi	r2,r2,-1
   87cbc:	1400f536 	bltu	r2,r16,88094 <__udivdi3+0x5d8>
   87cc0:	00800404 	movi	r2,16
   87cc4:	1007883a 	mov	r3,r2
   87cc8:	8084d83a 	srl	r2,r16,r2
   87ccc:	01000274 	movhi	r4,9
   87cd0:	21338c04 	addi	r4,r4,-12752
   87cd4:	2085883a 	add	r2,r4,r2
   87cd8:	10800003 	ldbu	r2,0(r2)
   87cdc:	10c7883a 	add	r3,r2,r3
   87ce0:	00800804 	movi	r2,32
   87ce4:	10c5c83a 	sub	r2,r2,r3
   87ce8:	1000a01e 	bne	r2,zero,87f6c <__udivdi3+0x4b0>
   87cec:	8028d43a 	srli	r20,r16,16
   87cf0:	8c23c83a 	sub	r17,r17,r16
   87cf4:	857fffcc 	andi	r21,r16,65535
   87cf8:	00c00044 	movi	r3,1
   87cfc:	8809883a 	mov	r4,r17
   87d00:	a00b883a 	mov	r5,r20
   87d04:	d8c00015 	stw	r3,0(sp)
   87d08:	008041c0 	call	8041c <__umodsi3>
   87d0c:	8809883a 	mov	r4,r17
   87d10:	a00b883a 	mov	r5,r20
   87d14:	102d883a 	mov	r22,r2
   87d18:	00804140 	call	80414 <__udivsi3>
   87d1c:	1009883a 	mov	r4,r2
   87d20:	a80b883a 	mov	r5,r21
   87d24:	1025883a 	mov	r18,r2
   87d28:	00894740 	call	89474 <__mulsi3>
   87d2c:	1009883a 	mov	r4,r2
   87d30:	b00c943a 	slli	r6,r22,16
   87d34:	9804d43a 	srli	r2,r19,16
   87d38:	d8c00017 	ldw	r3,0(sp)
   87d3c:	308cb03a 	or	r6,r6,r2
   87d40:	3100052e 	bgeu	r6,r4,87d58 <__udivdi3+0x29c>
   87d44:	340d883a 	add	r6,r6,r16
   87d48:	90bfffc4 	addi	r2,r18,-1
   87d4c:	34000136 	bltu	r6,r16,87d54 <__udivdi3+0x298>
   87d50:	3100e836 	bltu	r6,r4,880f4 <__udivdi3+0x638>
   87d54:	1025883a 	mov	r18,r2
   87d58:	3123c83a 	sub	r17,r6,r4
   87d5c:	8809883a 	mov	r4,r17
   87d60:	a00b883a 	mov	r5,r20
   87d64:	d8c00015 	stw	r3,0(sp)
   87d68:	008041c0 	call	8041c <__umodsi3>
   87d6c:	102d883a 	mov	r22,r2
   87d70:	8809883a 	mov	r4,r17
   87d74:	a00b883a 	mov	r5,r20
   87d78:	b02c943a 	slli	r22,r22,16
   87d7c:	00804140 	call	80414 <__udivsi3>
   87d80:	1009883a 	mov	r4,r2
   87d84:	a80b883a 	mov	r5,r21
   87d88:	9cffffcc 	andi	r19,r19,65535
   87d8c:	1023883a 	mov	r17,r2
   87d90:	b4e6b03a 	or	r19,r22,r19
   87d94:	00894740 	call	89474 <__mulsi3>
   87d98:	d8c00017 	ldw	r3,0(sp)
   87d9c:	9880052e 	bgeu	r19,r2,87db4 <__udivdi3+0x2f8>
   87da0:	9c27883a 	add	r19,r19,r16
   87da4:	893fffc4 	addi	r4,r17,-1
   87da8:	9c00aa36 	bltu	r19,r16,88054 <__udivdi3+0x598>
   87dac:	9880a92e 	bgeu	r19,r2,88054 <__udivdi3+0x598>
   87db0:	8c7fff84 	addi	r17,r17,-2
   87db4:	9004943a 	slli	r2,r18,16
   87db8:	8884b03a 	or	r2,r17,r2
   87dbc:	003faa06 	br	87c68 <__udivdi3+0x1ac>
   87dc0:	0007883a 	mov	r3,zero
   87dc4:	003fa706 	br	87c64 <__udivdi3+0x1a8>
   87dc8:	00803fc4 	movi	r2,255
   87dcc:	11c0ae36 	bltu	r2,r7,88088 <__udivdi3+0x5cc>
   87dd0:	0007883a 	mov	r3,zero
   87dd4:	000b883a 	mov	r5,zero
   87dd8:	003f9606 	br	87c34 <__udivdi3+0x178>
   87ddc:	00804034 	movhi	r2,256
   87de0:	10bfffc4 	addi	r2,r2,-1
   87de4:	1180ae36 	bltu	r2,r6,880a0 <__udivdi3+0x5e4>
   87de8:	00800404 	movi	r2,16
   87dec:	1007883a 	mov	r3,r2
   87df0:	003f4a06 	br	87b1c <__udivdi3+0x60>
   87df4:	00803fc4 	movi	r2,255
   87df8:	1400af36 	bltu	r2,r16,880b8 <__udivdi3+0x5fc>
   87dfc:	0005883a 	mov	r2,zero
   87e00:	0007883a 	mov	r3,zero
   87e04:	003fb006 	br	87cc8 <__udivdi3+0x20c>
   87e08:	00800044 	movi	r2,1
   87e0c:	003f9606 	br	87c68 <__udivdi3+0x1ac>
   87e10:	3c0e983a 	sll	r7,r7,r16
   87e14:	3086d83a 	srl	r3,r6,r2
   87e18:	88aed83a 	srl	r23,r17,r2
   87e1c:	9084d83a 	srl	r2,r18,r2
   87e20:	38e6b03a 	or	r19,r7,r3
   87e24:	9828d43a 	srli	r20,r19,16
   87e28:	8c22983a 	sll	r17,r17,r16
   87e2c:	b809883a 	mov	r4,r23
   87e30:	a00b883a 	mov	r5,r20
   87e34:	342a983a 	sll	r21,r6,r16
   87e38:	88a2b03a 	or	r17,r17,r2
   87e3c:	008041c0 	call	8041c <__umodsi3>
   87e40:	b809883a 	mov	r4,r23
   87e44:	a00b883a 	mov	r5,r20
   87e48:	1039883a 	mov	fp,r2
   87e4c:	9dbfffcc 	andi	r22,r19,65535
   87e50:	00804140 	call	80414 <__udivsi3>
   87e54:	1009883a 	mov	r4,r2
   87e58:	b00b883a 	mov	r5,r22
   87e5c:	102f883a 	mov	r23,r2
   87e60:	00894740 	call	89474 <__mulsi3>
   87e64:	1009883a 	mov	r4,r2
   87e68:	e00e943a 	slli	r7,fp,16
   87e6c:	8804d43a 	srli	r2,r17,16
   87e70:	388eb03a 	or	r7,r7,r2
   87e74:	3900042e 	bgeu	r7,r4,87e88 <__udivdi3+0x3cc>
   87e78:	3ccf883a 	add	r7,r7,r19
   87e7c:	b8bfffc4 	addi	r2,r23,-1
   87e80:	3cc0942e 	bgeu	r7,r19,880d4 <__udivdi3+0x618>
   87e84:	102f883a 	mov	r23,r2
   87e88:	3939c83a 	sub	fp,r7,r4
   87e8c:	a00b883a 	mov	r5,r20
   87e90:	e009883a 	mov	r4,fp
   87e94:	008041c0 	call	8041c <__umodsi3>
   87e98:	a00b883a 	mov	r5,r20
   87e9c:	e009883a 	mov	r4,fp
   87ea0:	d8800015 	stw	r2,0(sp)
   87ea4:	00804140 	call	80414 <__udivsi3>
   87ea8:	1009883a 	mov	r4,r2
   87eac:	b00b883a 	mov	r5,r22
   87eb0:	1029883a 	mov	r20,r2
   87eb4:	00894740 	call	89474 <__mulsi3>
   87eb8:	d8c00017 	ldw	r3,0(sp)
   87ebc:	8c7fffcc 	andi	r17,r17,65535
   87ec0:	1806943a 	slli	r3,r3,16
   87ec4:	1c46b03a 	or	r3,r3,r17
   87ec8:	1880042e 	bgeu	r3,r2,87edc <__udivdi3+0x420>
   87ecc:	1cc7883a 	add	r3,r3,r19
   87ed0:	a13fffc4 	addi	r4,r20,-1
   87ed4:	1cc07b2e 	bgeu	r3,r19,880c4 <__udivdi3+0x608>
   87ed8:	2029883a 	mov	r20,r4
   87edc:	b82e943a 	slli	r23,r23,16
   87ee0:	a822d43a 	srli	r17,r21,16
   87ee4:	ad7fffcc 	andi	r21,r21,65535
   87ee8:	a5e8b03a 	or	r20,r20,r23
   87eec:	a5bfffcc 	andi	r22,r20,65535
   87ef0:	b009883a 	mov	r4,r22
   87ef4:	a80b883a 	mov	r5,r21
   87ef8:	18afc83a 	sub	r23,r3,r2
   87efc:	a026d43a 	srli	r19,r20,16
   87f00:	00894740 	call	89474 <__mulsi3>
   87f04:	b009883a 	mov	r4,r22
   87f08:	880b883a 	mov	r5,r17
   87f0c:	1039883a 	mov	fp,r2
   87f10:	00894740 	call	89474 <__mulsi3>
   87f14:	a80b883a 	mov	r5,r21
   87f18:	9809883a 	mov	r4,r19
   87f1c:	102d883a 	mov	r22,r2
   87f20:	00894740 	call	89474 <__mulsi3>
   87f24:	9809883a 	mov	r4,r19
   87f28:	880b883a 	mov	r5,r17
   87f2c:	102b883a 	mov	r21,r2
   87f30:	00894740 	call	89474 <__mulsi3>
   87f34:	100b883a 	mov	r5,r2
   87f38:	e004d43a 	srli	r2,fp,16
   87f3c:	ad89883a 	add	r4,r21,r22
   87f40:	2089883a 	add	r4,r4,r2
   87f44:	2540022e 	bgeu	r4,r21,87f50 <__udivdi3+0x494>
   87f48:	00800074 	movhi	r2,1
   87f4c:	288b883a 	add	r5,r5,r2
   87f50:	2004d43a 	srli	r2,r4,16
   87f54:	288b883a 	add	r5,r5,r2
   87f58:	b9404536 	bltu	r23,r5,88070 <__udivdi3+0x5b4>
   87f5c:	b9403f26 	beq	r23,r5,8805c <__udivdi3+0x5a0>
   87f60:	a005883a 	mov	r2,r20
   87f64:	0007883a 	mov	r3,zero
   87f68:	003f3f06 	br	87c68 <__udivdi3+0x1ac>
   87f6c:	80a0983a 	sll	r16,r16,r2
   87f70:	88eed83a 	srl	r23,r17,r3
   87f74:	90c6d83a 	srl	r3,r18,r3
   87f78:	8028d43a 	srli	r20,r16,16
   87f7c:	88a2983a 	sll	r17,r17,r2
   87f80:	b809883a 	mov	r4,r23
   87f84:	a00b883a 	mov	r5,r20
   87f88:	88ecb03a 	or	r22,r17,r3
   87f8c:	90a6983a 	sll	r19,r18,r2
   87f90:	008041c0 	call	8041c <__umodsi3>
   87f94:	b809883a 	mov	r4,r23
   87f98:	a00b883a 	mov	r5,r20
   87f9c:	1023883a 	mov	r17,r2
   87fa0:	857fffcc 	andi	r21,r16,65535
   87fa4:	00804140 	call	80414 <__udivsi3>
   87fa8:	1009883a 	mov	r4,r2
   87fac:	a80b883a 	mov	r5,r21
   87fb0:	102f883a 	mov	r23,r2
   87fb4:	00894740 	call	89474 <__mulsi3>
   87fb8:	1009883a 	mov	r4,r2
   87fbc:	880a943a 	slli	r5,r17,16
   87fc0:	b004d43a 	srli	r2,r22,16
   87fc4:	288ab03a 	or	r5,r5,r2
   87fc8:	2900062e 	bgeu	r5,r4,87fe4 <__udivdi3+0x528>
   87fcc:	2c0b883a 	add	r5,r5,r16
   87fd0:	b8bfffc4 	addi	r2,r23,-1
   87fd4:	2c004536 	bltu	r5,r16,880ec <__udivdi3+0x630>
   87fd8:	2900442e 	bgeu	r5,r4,880ec <__udivdi3+0x630>
   87fdc:	bdffff84 	addi	r23,r23,-2
   87fe0:	2c0b883a 	add	r5,r5,r16
   87fe4:	2925c83a 	sub	r18,r5,r4
   87fe8:	9009883a 	mov	r4,r18
   87fec:	a00b883a 	mov	r5,r20
   87ff0:	008041c0 	call	8041c <__umodsi3>
   87ff4:	1023883a 	mov	r17,r2
   87ff8:	9009883a 	mov	r4,r18
   87ffc:	a00b883a 	mov	r5,r20
   88000:	8822943a 	slli	r17,r17,16
   88004:	00804140 	call	80414 <__udivsi3>
   88008:	1009883a 	mov	r4,r2
   8800c:	a80b883a 	mov	r5,r21
   88010:	b5bfffcc 	andi	r22,r22,65535
   88014:	1025883a 	mov	r18,r2
   88018:	8da2b03a 	or	r17,r17,r22
   8801c:	00894740 	call	89474 <__mulsi3>
   88020:	8880062e 	bgeu	r17,r2,8803c <__udivdi3+0x580>
   88024:	8c23883a 	add	r17,r17,r16
   88028:	90ffffc4 	addi	r3,r18,-1
   8802c:	8c002d36 	bltu	r17,r16,880e4 <__udivdi3+0x628>
   88030:	88802c2e 	bgeu	r17,r2,880e4 <__udivdi3+0x628>
   88034:	94bfff84 	addi	r18,r18,-2
   88038:	8c23883a 	add	r17,r17,r16
   8803c:	b806943a 	slli	r3,r23,16
   88040:	88a3c83a 	sub	r17,r17,r2
   88044:	90c6b03a 	or	r3,r18,r3
   88048:	003f2c06 	br	87cfc <__udivdi3+0x240>
   8804c:	1823883a 	mov	r17,r3
   88050:	003eec06 	br	87c04 <__udivdi3+0x148>
   88054:	2023883a 	mov	r17,r4
   88058:	003f5606 	br	87db4 <__udivdi3+0x2f8>
   8805c:	2008943a 	slli	r4,r4,16
   88060:	9420983a 	sll	r16,r18,r16
   88064:	e73fffcc 	andi	fp,fp,65535
   88068:	2709883a 	add	r4,r4,fp
   8806c:	813fbc2e 	bgeu	r16,r4,87f60 <__udivdi3+0x4a4>
   88070:	a0bfffc4 	addi	r2,r20,-1
   88074:	0007883a 	mov	r3,zero
   88078:	003efb06 	br	87c68 <__udivdi3+0x1ac>
   8807c:	00c00604 	movi	r3,24
   88080:	180b883a 	mov	r5,r3
   88084:	003eeb06 	br	87c34 <__udivdi3+0x178>
   88088:	00c00204 	movi	r3,8
   8808c:	180b883a 	mov	r5,r3
   88090:	003ee806 	br	87c34 <__udivdi3+0x178>
   88094:	00800604 	movi	r2,24
   88098:	1007883a 	mov	r3,r2
   8809c:	003f0a06 	br	87cc8 <__udivdi3+0x20c>
   880a0:	00800604 	movi	r2,24
   880a4:	1007883a 	mov	r3,r2
   880a8:	003e9c06 	br	87b1c <__udivdi3+0x60>
   880ac:	00800204 	movi	r2,8
   880b0:	1007883a 	mov	r3,r2
   880b4:	003e9906 	br	87b1c <__udivdi3+0x60>
   880b8:	00800204 	movi	r2,8
   880bc:	1007883a 	mov	r3,r2
   880c0:	003f0106 	br	87cc8 <__udivdi3+0x20c>
   880c4:	18bf842e 	bgeu	r3,r2,87ed8 <__udivdi3+0x41c>
   880c8:	a53fff84 	addi	r20,r20,-2
   880cc:	1cc7883a 	add	r3,r3,r19
   880d0:	003f8206 	br	87edc <__udivdi3+0x420>
   880d4:	393f6b2e 	bgeu	r7,r4,87e84 <__udivdi3+0x3c8>
   880d8:	bdffff84 	addi	r23,r23,-2
   880dc:	3ccf883a 	add	r7,r7,r19
   880e0:	003f6906 	br	87e88 <__udivdi3+0x3cc>
   880e4:	1825883a 	mov	r18,r3
   880e8:	003fd406 	br	8803c <__udivdi3+0x580>
   880ec:	102f883a 	mov	r23,r2
   880f0:	003fbc06 	br	87fe4 <__udivdi3+0x528>
   880f4:	94bfff84 	addi	r18,r18,-2
   880f8:	340d883a 	add	r6,r6,r16
   880fc:	003f1606 	br	87d58 <__udivdi3+0x29c>
   88100:	94bfff84 	addi	r18,r18,-2
   88104:	1c07883a 	add	r3,r3,r16
   88108:	003ea906 	br	87bb0 <__udivdi3+0xf4>

0008810c <__umoddi3>:
   8810c:	defff304 	addi	sp,sp,-52
   88110:	dd000715 	stw	r20,28(sp)
   88114:	dcc00615 	stw	r19,24(sp)
   88118:	dc800515 	stw	r18,20(sp)
   8811c:	dc400415 	stw	r17,16(sp)
   88120:	dc000315 	stw	r16,12(sp)
   88124:	dfc00c15 	stw	ra,48(sp)
   88128:	df000b15 	stw	fp,44(sp)
   8812c:	ddc00a15 	stw	r23,40(sp)
   88130:	dd800915 	stw	r22,36(sp)
   88134:	dd400815 	stw	r21,32(sp)
   88138:	2025883a 	mov	r18,r4
   8813c:	2823883a 	mov	r17,r5
   88140:	3021883a 	mov	r16,r6
   88144:	2027883a 	mov	r19,r4
   88148:	2829883a 	mov	r20,r5
   8814c:	38003a1e 	bne	r7,zero,88238 <__umoddi3+0x12c>
   88150:	2980522e 	bgeu	r5,r6,8829c <__umoddi3+0x190>
   88154:	00bfffd4 	movui	r2,65535
   88158:	1180a436 	bltu	r2,r6,883ec <__umoddi3+0x2e0>
   8815c:	00803fc4 	movi	r2,255
   88160:	11816036 	bltu	r2,r6,886e4 <__umoddi3+0x5d8>
   88164:	0005883a 	mov	r2,zero
   88168:	0009883a 	mov	r4,zero
   8816c:	3084d83a 	srl	r2,r6,r2
   88170:	00c00274 	movhi	r3,9
   88174:	18f38c04 	addi	r3,r3,-12752
   88178:	05400804 	movi	r21,32
   8817c:	1885883a 	add	r2,r3,r2
   88180:	10800003 	ldbu	r2,0(r2)
   88184:	1109883a 	add	r4,r2,r4
   88188:	a92bc83a 	sub	r21,r21,r4
   8818c:	a8010e26 	beq	r21,zero,885c8 <__umoddi3+0x4bc>
   88190:	8d62983a 	sll	r17,r17,r21
   88194:	9108d83a 	srl	r4,r18,r4
   88198:	3560983a 	sll	r16,r6,r21
   8819c:	9566983a 	sll	r19,r18,r21
   881a0:	8928b03a 	or	r20,r17,r4
   881a4:	8022d43a 	srli	r17,r16,16
   881a8:	a009883a 	mov	r4,r20
   881ac:	84bfffcc 	andi	r18,r16,65535
   881b0:	880b883a 	mov	r5,r17
   881b4:	008041c0 	call	8041c <__umodsi3>
   881b8:	a009883a 	mov	r4,r20
   881bc:	880b883a 	mov	r5,r17
   881c0:	102d883a 	mov	r22,r2
   881c4:	00804140 	call	80414 <__udivsi3>
   881c8:	1009883a 	mov	r4,r2
   881cc:	900b883a 	mov	r5,r18
   881d0:	00894740 	call	89474 <__mulsi3>
   881d4:	1009883a 	mov	r4,r2
   881d8:	b006943a 	slli	r3,r22,16
   881dc:	9804d43a 	srli	r2,r19,16
   881e0:	1886b03a 	or	r3,r3,r2
   881e4:	1900042e 	bgeu	r3,r4,881f8 <__umoddi3+0xec>
   881e8:	1c07883a 	add	r3,r3,r16
   881ec:	1c000236 	bltu	r3,r16,881f8 <__umoddi3+0xec>
   881f0:	1900012e 	bgeu	r3,r4,881f8 <__umoddi3+0xec>
   881f4:	1c07883a 	add	r3,r3,r16
   881f8:	1929c83a 	sub	r20,r3,r4
   881fc:	a009883a 	mov	r4,r20
   88200:	880b883a 	mov	r5,r17
   88204:	008041c0 	call	8041c <__umodsi3>
   88208:	102d883a 	mov	r22,r2
   8820c:	a009883a 	mov	r4,r20
   88210:	880b883a 	mov	r5,r17
   88214:	b02c943a 	slli	r22,r22,16
   88218:	00804140 	call	80414 <__udivsi3>
   8821c:	1009883a 	mov	r4,r2
   88220:	900b883a 	mov	r5,r18
   88224:	9cffffcc 	andi	r19,r19,65535
   88228:	00894740 	call	89474 <__mulsi3>
   8822c:	b4e6b03a 	or	r19,r22,r19
   88230:	9880572e 	bgeu	r19,r2,88390 <__umoddi3+0x284>
   88234:	00005206 	br	88380 <__umoddi3+0x274>
   88238:	29c05936 	bltu	r5,r7,883a0 <__umoddi3+0x294>
   8823c:	00bfffd4 	movui	r2,65535
   88240:	11c0652e 	bgeu	r2,r7,883d8 <__umoddi3+0x2cc>
   88244:	00804034 	movhi	r2,256
   88248:	10bfffc4 	addi	r2,r2,-1
   8824c:	11c11936 	bltu	r2,r7,886b4 <__umoddi3+0x5a8>
   88250:	00c00404 	movi	r3,16
   88254:	1827883a 	mov	r19,r3
   88258:	38c6d83a 	srl	r3,r7,r3
   8825c:	01000274 	movhi	r4,9
   88260:	21338c04 	addi	r4,r4,-12752
   88264:	04000804 	movi	r16,32
   88268:	20c7883a 	add	r3,r4,r3
   8826c:	18800003 	ldbu	r2,0(r3)
   88270:	14e7883a 	add	r19,r2,r19
   88274:	84e1c83a 	sub	r16,r16,r19
   88278:	8000671e 	bne	r16,zero,88418 <__umoddi3+0x30c>
   8827c:	3c400136 	bltu	r7,r17,88284 <__umoddi3+0x178>
   88280:	91812536 	bltu	r18,r6,88718 <__umoddi3+0x60c>
   88284:	9185c83a 	sub	r2,r18,r6
   88288:	89e3c83a 	sub	r17,r17,r7
   8828c:	90a5803a 	cmpltu	r18,r18,r2
   88290:	8ca9c83a 	sub	r20,r17,r18
   88294:	a007883a 	mov	r3,r20
   88298:	00004306 	br	883a8 <__umoddi3+0x29c>
   8829c:	3000041e 	bne	r6,zero,882b0 <__umoddi3+0x1a4>
   882a0:	01000044 	movi	r4,1
   882a4:	000b883a 	mov	r5,zero
   882a8:	00804140 	call	80414 <__udivsi3>
   882ac:	1021883a 	mov	r16,r2
   882b0:	00bfffd4 	movui	r2,65535
   882b4:	1400532e 	bgeu	r2,r16,88404 <__umoddi3+0x2f8>
   882b8:	00804034 	movhi	r2,256
   882bc:	10bfffc4 	addi	r2,r2,-1
   882c0:	14010536 	bltu	r2,r16,886d8 <__umoddi3+0x5cc>
   882c4:	00800404 	movi	r2,16
   882c8:	1007883a 	mov	r3,r2
   882cc:	8084d83a 	srl	r2,r16,r2
   882d0:	01000274 	movhi	r4,9
   882d4:	21338c04 	addi	r4,r4,-12752
   882d8:	05400804 	movi	r21,32
   882dc:	2085883a 	add	r2,r4,r2
   882e0:	10800003 	ldbu	r2,0(r2)
   882e4:	10c7883a 	add	r3,r2,r3
   882e8:	a8ebc83a 	sub	r21,r21,r3
   882ec:	a800b81e 	bne	r21,zero,885d0 <__umoddi3+0x4c4>
   882f0:	8028d43a 	srli	r20,r16,16
   882f4:	8c23c83a 	sub	r17,r17,r16
   882f8:	85bfffcc 	andi	r22,r16,65535
   882fc:	8809883a 	mov	r4,r17
   88300:	a00b883a 	mov	r5,r20
   88304:	008041c0 	call	8041c <__umodsi3>
   88308:	8809883a 	mov	r4,r17
   8830c:	a00b883a 	mov	r5,r20
   88310:	1025883a 	mov	r18,r2
   88314:	00804140 	call	80414 <__udivsi3>
   88318:	1009883a 	mov	r4,r2
   8831c:	b00b883a 	mov	r5,r22
   88320:	00894740 	call	89474 <__mulsi3>
   88324:	1009883a 	mov	r4,r2
   88328:	9006943a 	slli	r3,r18,16
   8832c:	9804d43a 	srli	r2,r19,16
   88330:	1886b03a 	or	r3,r3,r2
   88334:	1900032e 	bgeu	r3,r4,88344 <__umoddi3+0x238>
   88338:	1c07883a 	add	r3,r3,r16
   8833c:	1c000136 	bltu	r3,r16,88344 <__umoddi3+0x238>
   88340:	1900f336 	bltu	r3,r4,88710 <__umoddi3+0x604>
   88344:	1923c83a 	sub	r17,r3,r4
   88348:	8809883a 	mov	r4,r17
   8834c:	a00b883a 	mov	r5,r20
   88350:	008041c0 	call	8041c <__umodsi3>
   88354:	102f883a 	mov	r23,r2
   88358:	8809883a 	mov	r4,r17
   8835c:	a00b883a 	mov	r5,r20
   88360:	b82e943a 	slli	r23,r23,16
   88364:	00804140 	call	80414 <__udivsi3>
   88368:	1009883a 	mov	r4,r2
   8836c:	b00b883a 	mov	r5,r22
   88370:	9cffffcc 	andi	r19,r19,65535
   88374:	00894740 	call	89474 <__mulsi3>
   88378:	bce6b03a 	or	r19,r23,r19
   8837c:	9880042e 	bgeu	r19,r2,88390 <__umoddi3+0x284>
   88380:	9c27883a 	add	r19,r19,r16
   88384:	9c000236 	bltu	r19,r16,88390 <__umoddi3+0x284>
   88388:	9880012e 	bgeu	r19,r2,88390 <__umoddi3+0x284>
   8838c:	9c27883a 	add	r19,r19,r16
   88390:	9885c83a 	sub	r2,r19,r2
   88394:	1544d83a 	srl	r2,r2,r21
   88398:	0007883a 	mov	r3,zero
   8839c:	00000206 	br	883a8 <__umoddi3+0x29c>
   883a0:	2005883a 	mov	r2,r4
   883a4:	2807883a 	mov	r3,r5
   883a8:	dfc00c17 	ldw	ra,48(sp)
   883ac:	df000b17 	ldw	fp,44(sp)
   883b0:	ddc00a17 	ldw	r23,40(sp)
   883b4:	dd800917 	ldw	r22,36(sp)
   883b8:	dd400817 	ldw	r21,32(sp)
   883bc:	dd000717 	ldw	r20,28(sp)
   883c0:	dcc00617 	ldw	r19,24(sp)
   883c4:	dc800517 	ldw	r18,20(sp)
   883c8:	dc400417 	ldw	r17,16(sp)
   883cc:	dc000317 	ldw	r16,12(sp)
   883d0:	dec00d04 	addi	sp,sp,52
   883d4:	f800283a 	ret
   883d8:	00803fc4 	movi	r2,255
   883dc:	11c0b236 	bltu	r2,r7,886a8 <__umoddi3+0x59c>
   883e0:	0007883a 	mov	r3,zero
   883e4:	0027883a 	mov	r19,zero
   883e8:	003f9b06 	br	88258 <__umoddi3+0x14c>
   883ec:	00804034 	movhi	r2,256
   883f0:	10bfffc4 	addi	r2,r2,-1
   883f4:	1180b236 	bltu	r2,r6,886c0 <__umoddi3+0x5b4>
   883f8:	00800404 	movi	r2,16
   883fc:	1009883a 	mov	r4,r2
   88400:	003f5a06 	br	8816c <__umoddi3+0x60>
   88404:	00803fc4 	movi	r2,255
   88408:	1400b036 	bltu	r2,r16,886cc <__umoddi3+0x5c0>
   8840c:	0005883a 	mov	r2,zero
   88410:	0007883a 	mov	r3,zero
   88414:	003fad06 	br	882cc <__umoddi3+0x1c0>
   88418:	34c4d83a 	srl	r2,r6,r19
   8841c:	3c0e983a 	sll	r7,r7,r16
   88420:	8cf8d83a 	srl	fp,r17,r19
   88424:	8c22983a 	sll	r17,r17,r16
   88428:	38a8b03a 	or	r20,r7,r2
   8842c:	a02ad43a 	srli	r21,r20,16
   88430:	94c4d83a 	srl	r2,r18,r19
   88434:	e009883a 	mov	r4,fp
   88438:	a80b883a 	mov	r5,r21
   8843c:	342c983a 	sll	r22,r6,r16
   88440:	88a2b03a 	or	r17,r17,r2
   88444:	008041c0 	call	8041c <__umodsi3>
   88448:	e009883a 	mov	r4,fp
   8844c:	a80b883a 	mov	r5,r21
   88450:	a5ffffcc 	andi	r23,r20,65535
   88454:	d8800215 	stw	r2,8(sp)
   88458:	00804140 	call	80414 <__udivsi3>
   8845c:	1009883a 	mov	r4,r2
   88460:	b80b883a 	mov	r5,r23
   88464:	1039883a 	mov	fp,r2
   88468:	00894740 	call	89474 <__mulsi3>
   8846c:	d8c00217 	ldw	r3,8(sp)
   88470:	1009883a 	mov	r4,r2
   88474:	8804d43a 	srli	r2,r17,16
   88478:	1806943a 	slli	r3,r3,16
   8847c:	9424983a 	sll	r18,r18,r16
   88480:	1886b03a 	or	r3,r3,r2
   88484:	1900042e 	bgeu	r3,r4,88498 <__umoddi3+0x38c>
   88488:	1d07883a 	add	r3,r3,r20
   8848c:	e0bfffc4 	addi	r2,fp,-1
   88490:	1d009b2e 	bgeu	r3,r20,88700 <__umoddi3+0x5f4>
   88494:	1039883a 	mov	fp,r2
   88498:	1907c83a 	sub	r3,r3,r4
   8849c:	1809883a 	mov	r4,r3
   884a0:	a80b883a 	mov	r5,r21
   884a4:	d8c00215 	stw	r3,8(sp)
   884a8:	008041c0 	call	8041c <__umodsi3>
   884ac:	d8c00217 	ldw	r3,8(sp)
   884b0:	a80b883a 	mov	r5,r21
   884b4:	d8800015 	stw	r2,0(sp)
   884b8:	1809883a 	mov	r4,r3
   884bc:	00804140 	call	80414 <__udivsi3>
   884c0:	1009883a 	mov	r4,r2
   884c4:	b80b883a 	mov	r5,r23
   884c8:	102b883a 	mov	r21,r2
   884cc:	00894740 	call	89474 <__mulsi3>
   884d0:	d9c00017 	ldw	r7,0(sp)
   884d4:	8c7fffcc 	andi	r17,r17,65535
   884d8:	380e943a 	slli	r7,r7,16
   884dc:	3c4eb03a 	or	r7,r7,r17
   884e0:	3880042e 	bgeu	r7,r2,884f4 <__umoddi3+0x3e8>
   884e4:	3d0f883a 	add	r7,r7,r20
   884e8:	a8ffffc4 	addi	r3,r21,-1
   884ec:	3d00802e 	bgeu	r7,r20,886f0 <__umoddi3+0x5e4>
   884f0:	182b883a 	mov	r21,r3
   884f4:	e038943a 	slli	fp,fp,16
   884f8:	b010d43a 	srli	r8,r22,16
   884fc:	b1bfffcc 	andi	r6,r22,65535
   88500:	af2ab03a 	or	r21,r21,fp
   88504:	a82ed43a 	srli	r23,r21,16
   88508:	ad7fffcc 	andi	r21,r21,65535
   8850c:	300b883a 	mov	r5,r6
   88510:	a809883a 	mov	r4,r21
   88514:	38a3c83a 	sub	r17,r7,r2
   88518:	d9800115 	stw	r6,4(sp)
   8851c:	da000015 	stw	r8,0(sp)
   88520:	00894740 	call	89474 <__mulsi3>
   88524:	da000017 	ldw	r8,0(sp)
   88528:	a809883a 	mov	r4,r21
   8852c:	1039883a 	mov	fp,r2
   88530:	400b883a 	mov	r5,r8
   88534:	da000215 	stw	r8,8(sp)
   88538:	00894740 	call	89474 <__mulsi3>
   8853c:	d9800117 	ldw	r6,4(sp)
   88540:	b809883a 	mov	r4,r23
   88544:	d8800015 	stw	r2,0(sp)
   88548:	300b883a 	mov	r5,r6
   8854c:	00894740 	call	89474 <__mulsi3>
   88550:	d8c00217 	ldw	r3,8(sp)
   88554:	b809883a 	mov	r4,r23
   88558:	102b883a 	mov	r21,r2
   8855c:	180b883a 	mov	r5,r3
   88560:	00894740 	call	89474 <__mulsi3>
   88564:	d9c00017 	ldw	r7,0(sp)
   88568:	1007883a 	mov	r3,r2
   8856c:	e004d43a 	srli	r2,fp,16
   88570:	a9c9883a 	add	r4,r21,r7
   88574:	2089883a 	add	r4,r4,r2
   88578:	2540022e 	bgeu	r4,r21,88584 <__umoddi3+0x478>
   8857c:	00800074 	movhi	r2,1
   88580:	1887883a 	add	r3,r3,r2
   88584:	2004d43a 	srli	r2,r4,16
   88588:	2008943a 	slli	r4,r4,16
   8858c:	e73fffcc 	andi	fp,fp,65535
   88590:	1887883a 	add	r3,r3,r2
   88594:	2709883a 	add	r4,r4,fp
   88598:	88c03d36 	bltu	r17,r3,88690 <__umoddi3+0x584>
   8859c:	88c06126 	beq	r17,r3,88724 <__umoddi3+0x618>
   885a0:	88c7c83a 	sub	r3,r17,r3
   885a4:	202d883a 	mov	r22,r4
   885a8:	95adc83a 	sub	r22,r18,r22
   885ac:	95a5803a 	cmpltu	r18,r18,r22
   885b0:	1c87c83a 	sub	r3,r3,r18
   885b4:	1cc4983a 	sll	r2,r3,r19
   885b8:	b42cd83a 	srl	r22,r22,r16
   885bc:	1c06d83a 	srl	r3,r3,r16
   885c0:	1584b03a 	or	r2,r2,r22
   885c4:	003f7806 	br	883a8 <__umoddi3+0x29c>
   885c8:	002b883a 	mov	r21,zero
   885cc:	003ef506 	br	881a4 <__umoddi3+0x98>
   885d0:	8560983a 	sll	r16,r16,r21
   885d4:	88e6d83a 	srl	r19,r17,r3
   885d8:	90c6d83a 	srl	r3,r18,r3
   885dc:	8028d43a 	srli	r20,r16,16
   885e0:	8d62983a 	sll	r17,r17,r21
   885e4:	9809883a 	mov	r4,r19
   885e8:	a00b883a 	mov	r5,r20
   885ec:	88eeb03a 	or	r23,r17,r3
   885f0:	008041c0 	call	8041c <__umodsi3>
   885f4:	9809883a 	mov	r4,r19
   885f8:	a00b883a 	mov	r5,r20
   885fc:	1023883a 	mov	r17,r2
   88600:	85bfffcc 	andi	r22,r16,65535
   88604:	00804140 	call	80414 <__udivsi3>
   88608:	1009883a 	mov	r4,r2
   8860c:	b00b883a 	mov	r5,r22
   88610:	00894740 	call	89474 <__mulsi3>
   88614:	1007883a 	mov	r3,r2
   88618:	8808943a 	slli	r4,r17,16
   8861c:	b804d43a 	srli	r2,r23,16
   88620:	9566983a 	sll	r19,r18,r21
   88624:	2088b03a 	or	r4,r4,r2
   88628:	20c0042e 	bgeu	r4,r3,8863c <__umoddi3+0x530>
   8862c:	2409883a 	add	r4,r4,r16
   88630:	24000236 	bltu	r4,r16,8863c <__umoddi3+0x530>
   88634:	20c0012e 	bgeu	r4,r3,8863c <__umoddi3+0x530>
   88638:	2409883a 	add	r4,r4,r16
   8863c:	20e5c83a 	sub	r18,r4,r3
   88640:	9009883a 	mov	r4,r18
   88644:	a00b883a 	mov	r5,r20
   88648:	008041c0 	call	8041c <__umodsi3>
   8864c:	1023883a 	mov	r17,r2
   88650:	9009883a 	mov	r4,r18
   88654:	a00b883a 	mov	r5,r20
   88658:	8822943a 	slli	r17,r17,16
   8865c:	00804140 	call	80414 <__udivsi3>
   88660:	1009883a 	mov	r4,r2
   88664:	b00b883a 	mov	r5,r22
   88668:	bdffffcc 	andi	r23,r23,65535
   8866c:	00894740 	call	89474 <__mulsi3>
   88670:	8de2b03a 	or	r17,r17,r23
   88674:	8880042e 	bgeu	r17,r2,88688 <__umoddi3+0x57c>
   88678:	8c23883a 	add	r17,r17,r16
   8867c:	8c000236 	bltu	r17,r16,88688 <__umoddi3+0x57c>
   88680:	8880012e 	bgeu	r17,r2,88688 <__umoddi3+0x57c>
   88684:	8c23883a 	add	r17,r17,r16
   88688:	88a3c83a 	sub	r17,r17,r2
   8868c:	003f1b06 	br	882fc <__umoddi3+0x1f0>
   88690:	25adc83a 	sub	r22,r4,r22
   88694:	1d07c83a 	sub	r3,r3,r20
   88698:	2589803a 	cmpltu	r4,r4,r22
   8869c:	1907c83a 	sub	r3,r3,r4
   886a0:	88c7c83a 	sub	r3,r17,r3
   886a4:	003fc006 	br	885a8 <__umoddi3+0x49c>
   886a8:	00c00204 	movi	r3,8
   886ac:	1827883a 	mov	r19,r3
   886b0:	003ee906 	br	88258 <__umoddi3+0x14c>
   886b4:	00c00604 	movi	r3,24
   886b8:	1827883a 	mov	r19,r3
   886bc:	003ee606 	br	88258 <__umoddi3+0x14c>
   886c0:	00800604 	movi	r2,24
   886c4:	1009883a 	mov	r4,r2
   886c8:	003ea806 	br	8816c <__umoddi3+0x60>
   886cc:	00800204 	movi	r2,8
   886d0:	1007883a 	mov	r3,r2
   886d4:	003efd06 	br	882cc <__umoddi3+0x1c0>
   886d8:	00800604 	movi	r2,24
   886dc:	1007883a 	mov	r3,r2
   886e0:	003efa06 	br	882cc <__umoddi3+0x1c0>
   886e4:	00800204 	movi	r2,8
   886e8:	1009883a 	mov	r4,r2
   886ec:	003e9f06 	br	8816c <__umoddi3+0x60>
   886f0:	38bf7f2e 	bgeu	r7,r2,884f0 <__umoddi3+0x3e4>
   886f4:	ad7fff84 	addi	r21,r21,-2
   886f8:	3d0f883a 	add	r7,r7,r20
   886fc:	003f7d06 	br	884f4 <__umoddi3+0x3e8>
   88700:	193f642e 	bgeu	r3,r4,88494 <__umoddi3+0x388>
   88704:	e73fff84 	addi	fp,fp,-2
   88708:	1d07883a 	add	r3,r3,r20
   8870c:	003f6206 	br	88498 <__umoddi3+0x38c>
   88710:	1c07883a 	add	r3,r3,r16
   88714:	003f0b06 	br	88344 <__umoddi3+0x238>
   88718:	9005883a 	mov	r2,r18
   8871c:	a007883a 	mov	r3,r20
   88720:	003f2106 	br	883a8 <__umoddi3+0x29c>
   88724:	913fda36 	bltu	r18,r4,88690 <__umoddi3+0x584>
   88728:	202d883a 	mov	r22,r4
   8872c:	0007883a 	mov	r3,zero
   88730:	003f9d06 	br	885a8 <__umoddi3+0x49c>

00088734 <_fpadd_parts>:
   88734:	2005883a 	mov	r2,r4
   88738:	21000017 	ldw	r4,0(r4)
   8873c:	01c00044 	movi	r7,1
   88740:	3900622e 	bgeu	r7,r4,888cc <_fpadd_parts+0x198>
   88744:	28c00017 	ldw	r3,0(r5)
   88748:	38c05f2e 	bgeu	r7,r3,888c8 <_fpadd_parts+0x194>
   8874c:	01c00104 	movi	r7,4
   88750:	21c0c626 	beq	r4,r7,88a6c <_fpadd_parts+0x338>
   88754:	19c05c26 	beq	r3,r7,888c8 <_fpadd_parts+0x194>
   88758:	01c00084 	movi	r7,2
   8875c:	19c06b26 	beq	r3,r7,8890c <_fpadd_parts+0x1d8>
   88760:	21c05926 	beq	r4,r7,888c8 <_fpadd_parts+0x194>
   88764:	11c00217 	ldw	r7,8(r2)
   88768:	2ac00217 	ldw	r11,8(r5)
   8876c:	13000317 	ldw	r12,12(r2)
   88770:	13400417 	ldw	r13,16(r2)
   88774:	3ac9c83a 	sub	r4,r7,r11
   88778:	2a000317 	ldw	r8,12(r5)
   8877c:	2a400417 	ldw	r9,16(r5)
   88780:	2015883a 	mov	r10,r4
   88784:	20007516 	blt	r4,zero,8895c <_fpadd_parts+0x228>
   88788:	00c00fc4 	movi	r3,63
   8878c:	1a805016 	blt	r3,r10,888d0 <_fpadd_parts+0x19c>
   88790:	0100870e 	bge	zero,r4,889b0 <_fpadd_parts+0x27c>
   88794:	50fff804 	addi	r3,r10,-32
   88798:	18009916 	blt	r3,zero,88a00 <_fpadd_parts+0x2cc>
   8879c:	48d6d83a 	srl	r11,r9,r3
   887a0:	001d883a 	mov	r14,zero
   887a4:	18009e16 	blt	r3,zero,88a20 <_fpadd_parts+0x2ec>
   887a8:	01000044 	movi	r4,1
   887ac:	20c6983a 	sll	r3,r4,r3
   887b0:	0015883a 	mov	r10,zero
   887b4:	513fffc4 	addi	r4,r10,-1
   887b8:	2295403a 	cmpgeu	r10,r4,r10
   887bc:	1a87c83a 	sub	r3,r3,r10
   887c0:	1a52703a 	and	r9,r3,r9
   887c4:	2210703a 	and	r8,r4,r8
   887c8:	4250b03a 	or	r8,r8,r9
   887cc:	4010c03a 	cmpne	r8,r8,zero
   887d0:	42d0b03a 	or	r8,r8,r11
   887d4:	7013883a 	mov	r9,r14
   887d8:	11000117 	ldw	r4,4(r2)
   887dc:	28800117 	ldw	r2,4(r5)
   887e0:	20804126 	beq	r4,r2,888e8 <_fpadd_parts+0x1b4>
   887e4:	20006326 	beq	r4,zero,88974 <_fpadd_parts+0x240>
   887e8:	4305c83a 	sub	r2,r8,r12
   887ec:	4091803a 	cmpltu	r8,r8,r2
   887f0:	4b47c83a 	sub	r3,r9,r13
   887f4:	1a07c83a 	sub	r3,r3,r8
   887f8:	18006316 	blt	r3,zero,88988 <_fpadd_parts+0x254>
   887fc:	30000115 	stw	zero,4(r6)
   88800:	31c00215 	stw	r7,8(r6)
   88804:	30800315 	stw	r2,12(r6)
   88808:	30c00415 	stw	r3,16(r6)
   8880c:	11ffffc4 	addi	r7,r2,-1
   88810:	388b403a 	cmpgeu	r5,r7,r2
   88814:	194bc83a 	sub	r5,r3,r5
   88818:	01040034 	movhi	r4,4096
   8881c:	213fffc4 	addi	r4,r4,-1
   88820:	21401736 	bltu	r4,r5,88880 <_fpadd_parts+0x14c>
   88824:	29008226 	beq	r5,r4,88a30 <_fpadd_parts+0x2fc>
   88828:	31400217 	ldw	r5,8(r6)
   8882c:	02840034 	movhi	r10,4096
   88830:	52bfffc4 	addi	r10,r10,-1
   88834:	033fff84 	movi	r12,-2
   88838:	297fffc4 	addi	r5,r5,-1
   8883c:	00000106 	br	88844 <_fpadd_parts+0x110>
   88840:	3a804a26 	beq	r7,r10,8896c <_fpadd_parts+0x238>
   88844:	1089883a 	add	r4,r2,r2
   88848:	2091803a 	cmpltu	r8,r4,r2
   8884c:	18c7883a 	add	r3,r3,r3
   88850:	227fffc4 	addi	r9,r4,-1
   88854:	40d1883a 	add	r8,r8,r3
   88858:	490f403a 	cmpgeu	r7,r9,r4
   8885c:	41cfc83a 	sub	r7,r8,r7
   88860:	2817883a 	mov	r11,r5
   88864:	2005883a 	mov	r2,r4
   88868:	4007883a 	mov	r3,r8
   8886c:	297fffc4 	addi	r5,r5,-1
   88870:	51fff32e 	bgeu	r10,r7,88840 <_fpadd_parts+0x10c>
   88874:	31000315 	stw	r4,12(r6)
   88878:	32000415 	stw	r8,16(r6)
   8887c:	32c00215 	stw	r11,8(r6)
   88880:	010000c4 	movi	r4,3
   88884:	31000015 	stw	r4,0(r6)
   88888:	01080034 	movhi	r4,8192
   8888c:	213fffc4 	addi	r4,r4,-1
   88890:	20c00b2e 	bgeu	r4,r3,888c0 <_fpadd_parts+0x18c>
   88894:	180e97fa 	slli	r7,r3,31
   88898:	1008d07a 	srli	r4,r2,1
   8889c:	31400217 	ldw	r5,8(r6)
   888a0:	1806d07a 	srli	r3,r3,1
   888a4:	1080004c 	andi	r2,r2,1
   888a8:	3908b03a 	or	r4,r7,r4
   888ac:	1108b03a 	or	r4,r2,r4
   888b0:	29400044 	addi	r5,r5,1
   888b4:	31000315 	stw	r4,12(r6)
   888b8:	30c00415 	stw	r3,16(r6)
   888bc:	31400215 	stw	r5,8(r6)
   888c0:	3005883a 	mov	r2,r6
   888c4:	f800283a 	ret
   888c8:	2805883a 	mov	r2,r5
   888cc:	f800283a 	ret
   888d0:	59c01e0e 	bge	r11,r7,8894c <_fpadd_parts+0x218>
   888d4:	11000117 	ldw	r4,4(r2)
   888d8:	28800117 	ldw	r2,4(r5)
   888dc:	0011883a 	mov	r8,zero
   888e0:	0013883a 	mov	r9,zero
   888e4:	20bfbf1e 	bne	r4,r2,887e4 <_fpadd_parts+0xb0>
   888e8:	4305883a 	add	r2,r8,r12
   888ec:	1207803a 	cmpltu	r3,r2,r8
   888f0:	4b53883a 	add	r9,r9,r13
   888f4:	1a47883a 	add	r3,r3,r9
   888f8:	31000115 	stw	r4,4(r6)
   888fc:	31c00215 	stw	r7,8(r6)
   88900:	30800315 	stw	r2,12(r6)
   88904:	30c00415 	stw	r3,16(r6)
   88908:	003fdd06 	br	88880 <_fpadd_parts+0x14c>
   8890c:	20ffef1e 	bne	r4,r3,888cc <_fpadd_parts+0x198>
   88910:	31000015 	stw	r4,0(r6)
   88914:	10c00117 	ldw	r3,4(r2)
   88918:	30c00115 	stw	r3,4(r6)
   8891c:	10c00217 	ldw	r3,8(r2)
   88920:	11000117 	ldw	r4,4(r2)
   88924:	29400117 	ldw	r5,4(r5)
   88928:	30c00215 	stw	r3,8(r6)
   8892c:	10c00317 	ldw	r3,12(r2)
   88930:	2908703a 	and	r4,r5,r4
   88934:	30c00315 	stw	r3,12(r6)
   88938:	10c00417 	ldw	r3,16(r2)
   8893c:	31000115 	stw	r4,4(r6)
   88940:	3005883a 	mov	r2,r6
   88944:	30c00415 	stw	r3,16(r6)
   88948:	f800283a 	ret
   8894c:	580f883a 	mov	r7,r11
   88950:	0019883a 	mov	r12,zero
   88954:	001b883a 	mov	r13,zero
   88958:	003f9f06 	br	887d8 <_fpadd_parts+0xa4>
   8895c:	0115c83a 	sub	r10,zero,r4
   88960:	00c00fc4 	movi	r3,63
   88964:	1abfda16 	blt	r3,r10,888d0 <_fpadd_parts+0x19c>
   88968:	003f8906 	br	88790 <_fpadd_parts+0x5c>
   8896c:	627fb52e 	bgeu	r12,r9,88844 <_fpadd_parts+0x110>
   88970:	003fc006 	br	88874 <_fpadd_parts+0x140>
   88974:	6205c83a 	sub	r2,r12,r8
   88978:	6099803a 	cmpltu	r12,r12,r2
   8897c:	6a47c83a 	sub	r3,r13,r9
   88980:	1b07c83a 	sub	r3,r3,r12
   88984:	183f9d0e 	bge	r3,zero,887fc <_fpadd_parts+0xc8>
   88988:	0085c83a 	sub	r2,zero,r2
   8898c:	1008c03a 	cmpne	r4,r2,zero
   88990:	00c7c83a 	sub	r3,zero,r3
   88994:	1907c83a 	sub	r3,r3,r4
   88998:	01000044 	movi	r4,1
   8899c:	31000115 	stw	r4,4(r6)
   889a0:	31c00215 	stw	r7,8(r6)
   889a4:	30800315 	stw	r2,12(r6)
   889a8:	30c00415 	stw	r3,16(r6)
   889ac:	003f9706 	br	8880c <_fpadd_parts+0xd8>
   889b0:	203f8926 	beq	r4,zero,887d8 <_fpadd_parts+0xa4>
   889b4:	50fff804 	addi	r3,r10,-32
   889b8:	3a8f883a 	add	r7,r7,r10
   889bc:	18002316 	blt	r3,zero,88a4c <_fpadd_parts+0x318>
   889c0:	68d6d83a 	srl	r11,r13,r3
   889c4:	001d883a 	mov	r14,zero
   889c8:	18001c16 	blt	r3,zero,88a3c <_fpadd_parts+0x308>
   889cc:	01000044 	movi	r4,1
   889d0:	20c6983a 	sll	r3,r4,r3
   889d4:	0015883a 	mov	r10,zero
   889d8:	513fffc4 	addi	r4,r10,-1
   889dc:	2295403a 	cmpgeu	r10,r4,r10
   889e0:	1a87c83a 	sub	r3,r3,r10
   889e4:	1b5a703a 	and	r13,r3,r13
   889e8:	2318703a 	and	r12,r4,r12
   889ec:	6358b03a 	or	r12,r12,r13
   889f0:	6018c03a 	cmpne	r12,r12,zero
   889f4:	62d8b03a 	or	r12,r12,r11
   889f8:	701b883a 	mov	r13,r14
   889fc:	003f7606 	br	887d8 <_fpadd_parts+0xa4>
   88a00:	4808907a 	slli	r4,r9,1
   88a04:	02c007c4 	movi	r11,31
   88a08:	5a97c83a 	sub	r11,r11,r10
   88a0c:	22c8983a 	sll	r4,r4,r11
   88a10:	4296d83a 	srl	r11,r8,r10
   88a14:	4a9cd83a 	srl	r14,r9,r10
   88a18:	22d6b03a 	or	r11,r4,r11
   88a1c:	003f6106 	br	887a4 <_fpadd_parts+0x70>
   88a20:	00c00044 	movi	r3,1
   88a24:	1a94983a 	sll	r10,r3,r10
   88a28:	0007883a 	mov	r3,zero
   88a2c:	003f6106 	br	887b4 <_fpadd_parts+0x80>
   88a30:	013fff84 	movi	r4,-2
   88a34:	21ff7c2e 	bgeu	r4,r7,88828 <_fpadd_parts+0xf4>
   88a38:	003f9106 	br	88880 <_fpadd_parts+0x14c>
   88a3c:	00c00044 	movi	r3,1
   88a40:	1a94983a 	sll	r10,r3,r10
   88a44:	0007883a 	mov	r3,zero
   88a48:	003fe306 	br	889d8 <_fpadd_parts+0x2a4>
   88a4c:	6816907a 	slli	r11,r13,1
   88a50:	010007c4 	movi	r4,31
   88a54:	2289c83a 	sub	r4,r4,r10
   88a58:	5908983a 	sll	r4,r11,r4
   88a5c:	6296d83a 	srl	r11,r12,r10
   88a60:	6a9cd83a 	srl	r14,r13,r10
   88a64:	22d6b03a 	or	r11,r4,r11
   88a68:	003fd706 	br	889c8 <_fpadd_parts+0x294>
   88a6c:	193f971e 	bne	r3,r4,888cc <_fpadd_parts+0x198>
   88a70:	11000117 	ldw	r4,4(r2)
   88a74:	28c00117 	ldw	r3,4(r5)
   88a78:	20ff9426 	beq	r4,r3,888cc <_fpadd_parts+0x198>
   88a7c:	00800274 	movhi	r2,9
   88a80:	10b38704 	addi	r2,r2,-12772
   88a84:	f800283a 	ret

00088a88 <__adddf3>:
   88a88:	deffec04 	addi	sp,sp,-80
   88a8c:	d9001115 	stw	r4,68(sp)
   88a90:	d9401215 	stw	r5,72(sp)
   88a94:	d9001104 	addi	r4,sp,68
   88a98:	d9400a04 	addi	r5,sp,40
   88a9c:	dfc01315 	stw	ra,76(sp)
   88aa0:	d9c01015 	stw	r7,64(sp)
   88aa4:	d9800f15 	stw	r6,60(sp)
   88aa8:	008987c0 	call	8987c <__unpack_d>
   88aac:	d9000f04 	addi	r4,sp,60
   88ab0:	d9400504 	addi	r5,sp,20
   88ab4:	008987c0 	call	8987c <__unpack_d>
   88ab8:	d9000a04 	addi	r4,sp,40
   88abc:	d9400504 	addi	r5,sp,20
   88ac0:	d80d883a 	mov	r6,sp
   88ac4:	00887340 	call	88734 <_fpadd_parts>
   88ac8:	1009883a 	mov	r4,r2
   88acc:	00896580 	call	89658 <__pack_d>
   88ad0:	dfc01317 	ldw	ra,76(sp)
   88ad4:	dec01404 	addi	sp,sp,80
   88ad8:	f800283a 	ret

00088adc <__subdf3>:
   88adc:	deffec04 	addi	sp,sp,-80
   88ae0:	d9001115 	stw	r4,68(sp)
   88ae4:	d9401215 	stw	r5,72(sp)
   88ae8:	d9001104 	addi	r4,sp,68
   88aec:	d9400a04 	addi	r5,sp,40
   88af0:	dfc01315 	stw	ra,76(sp)
   88af4:	d9c01015 	stw	r7,64(sp)
   88af8:	d9800f15 	stw	r6,60(sp)
   88afc:	008987c0 	call	8987c <__unpack_d>
   88b00:	d9000f04 	addi	r4,sp,60
   88b04:	d9400504 	addi	r5,sp,20
   88b08:	008987c0 	call	8987c <__unpack_d>
   88b0c:	d8800617 	ldw	r2,24(sp)
   88b10:	d9000a04 	addi	r4,sp,40
   88b14:	d9400504 	addi	r5,sp,20
   88b18:	d80d883a 	mov	r6,sp
   88b1c:	1080005c 	xori	r2,r2,1
   88b20:	d8800615 	stw	r2,24(sp)
   88b24:	00887340 	call	88734 <_fpadd_parts>
   88b28:	1009883a 	mov	r4,r2
   88b2c:	00896580 	call	89658 <__pack_d>
   88b30:	dfc01317 	ldw	ra,76(sp)
   88b34:	dec01404 	addi	sp,sp,80
   88b38:	f800283a 	ret

00088b3c <__muldf3>:
   88b3c:	deffe404 	addi	sp,sp,-112
   88b40:	d9001115 	stw	r4,68(sp)
   88b44:	d9401215 	stw	r5,72(sp)
   88b48:	d9001104 	addi	r4,sp,68
   88b4c:	d9400a04 	addi	r5,sp,40
   88b50:	dfc01b15 	stw	ra,108(sp)
   88b54:	d9800f15 	stw	r6,60(sp)
   88b58:	d9c01015 	stw	r7,64(sp)
   88b5c:	ddc01a15 	stw	r23,104(sp)
   88b60:	dd801915 	stw	r22,100(sp)
   88b64:	dd401815 	stw	r21,96(sp)
   88b68:	dd001715 	stw	r20,92(sp)
   88b6c:	dcc01615 	stw	r19,88(sp)
   88b70:	dc801515 	stw	r18,84(sp)
   88b74:	dc401415 	stw	r17,80(sp)
   88b78:	dc001315 	stw	r16,76(sp)
   88b7c:	008987c0 	call	8987c <__unpack_d>
   88b80:	d9000f04 	addi	r4,sp,60
   88b84:	d9400504 	addi	r5,sp,20
   88b88:	008987c0 	call	8987c <__unpack_d>
   88b8c:	d8c00a17 	ldw	r3,40(sp)
   88b90:	00800044 	movi	r2,1
   88b94:	10c01136 	bltu	r2,r3,88bdc <__muldf3+0xa0>
   88b98:	d8c00b17 	ldw	r3,44(sp)
   88b9c:	d8800617 	ldw	r2,24(sp)
   88ba0:	d9000a04 	addi	r4,sp,40
   88ba4:	1884c03a 	cmpne	r2,r3,r2
   88ba8:	d8800b15 	stw	r2,44(sp)
   88bac:	00896580 	call	89658 <__pack_d>
   88bb0:	dfc01b17 	ldw	ra,108(sp)
   88bb4:	ddc01a17 	ldw	r23,104(sp)
   88bb8:	dd801917 	ldw	r22,100(sp)
   88bbc:	dd401817 	ldw	r21,96(sp)
   88bc0:	dd001717 	ldw	r20,92(sp)
   88bc4:	dcc01617 	ldw	r19,88(sp)
   88bc8:	dc801517 	ldw	r18,84(sp)
   88bcc:	dc401417 	ldw	r17,80(sp)
   88bd0:	dc001317 	ldw	r16,76(sp)
   88bd4:	dec01c04 	addi	sp,sp,112
   88bd8:	f800283a 	ret
   88bdc:	d9000517 	ldw	r4,20(sp)
   88be0:	11000636 	bltu	r2,r4,88bfc <__muldf3+0xc0>
   88be4:	d8800617 	ldw	r2,24(sp)
   88be8:	d8c00b17 	ldw	r3,44(sp)
   88bec:	d9000504 	addi	r4,sp,20
   88bf0:	1884c03a 	cmpne	r2,r3,r2
   88bf4:	d8800615 	stw	r2,24(sp)
   88bf8:	003fec06 	br	88bac <__muldf3+0x70>
   88bfc:	00800104 	movi	r2,4
   88c00:	1880051e 	bne	r3,r2,88c18 <__muldf3+0xdc>
   88c04:	00800084 	movi	r2,2
   88c08:	20bfe31e 	bne	r4,r2,88b98 <__muldf3+0x5c>
   88c0c:	01000274 	movhi	r4,9
   88c10:	21338704 	addi	r4,r4,-12772
   88c14:	003fe506 	br	88bac <__muldf3+0x70>
   88c18:	2080031e 	bne	r4,r2,88c28 <__muldf3+0xec>
   88c1c:	00800084 	movi	r2,2
   88c20:	18bffa26 	beq	r3,r2,88c0c <__muldf3+0xd0>
   88c24:	003fef06 	br	88be4 <__muldf3+0xa8>
   88c28:	00800084 	movi	r2,2
   88c2c:	18bfda26 	beq	r3,r2,88b98 <__muldf3+0x5c>
   88c30:	20bfec26 	beq	r4,r2,88be4 <__muldf3+0xa8>
   88c34:	dc000d17 	ldw	r16,52(sp)
   88c38:	dd000817 	ldw	r20,32(sp)
   88c3c:	dc800917 	ldw	r18,36(sp)
   88c40:	8009883a 	mov	r4,r16
   88c44:	000b883a 	mov	r5,zero
   88c48:	a00d883a 	mov	r6,r20
   88c4c:	000f883a 	mov	r7,zero
   88c50:	008949c0 	call	8949c <__muldi3>
   88c54:	dc400e17 	ldw	r17,56(sp)
   88c58:	9009883a 	mov	r4,r18
   88c5c:	800d883a 	mov	r6,r16
   88c60:	000b883a 	mov	r5,zero
   88c64:	000f883a 	mov	r7,zero
   88c68:	102f883a 	mov	r23,r2
   88c6c:	1827883a 	mov	r19,r3
   88c70:	008949c0 	call	8949c <__muldi3>
   88c74:	900d883a 	mov	r6,r18
   88c78:	8809883a 	mov	r4,r17
   88c7c:	000b883a 	mov	r5,zero
   88c80:	000f883a 	mov	r7,zero
   88c84:	102b883a 	mov	r21,r2
   88c88:	1821883a 	mov	r16,r3
   88c8c:	008949c0 	call	8949c <__muldi3>
   88c90:	8809883a 	mov	r4,r17
   88c94:	000b883a 	mov	r5,zero
   88c98:	a00d883a 	mov	r6,r20
   88c9c:	000f883a 	mov	r7,zero
   88ca0:	102d883a 	mov	r22,r2
   88ca4:	1825883a 	mov	r18,r3
   88ca8:	008949c0 	call	8949c <__muldi3>
   88cac:	154b883a 	add	r5,r2,r21
   88cb0:	2889803a 	cmpltu	r4,r5,r2
   88cb4:	1c07883a 	add	r3,r3,r16
   88cb8:	20c9883a 	add	r4,r4,r3
   88cbc:	24004b36 	bltu	r4,r16,88dec <__muldf3+0x2b0>
   88cc0:	8100011e 	bne	r16,r4,88cc8 <__muldf3+0x18c>
   88cc4:	2d404936 	bltu	r5,r21,88dec <__muldf3+0x2b0>
   88cc8:	0011883a 	mov	r8,zero
   88ccc:	0007883a 	mov	r3,zero
   88cd0:	2ccb883a 	add	r5,r5,r19
   88cd4:	b80d883a 	mov	r6,r23
   88cd8:	2cc0012e 	bgeu	r5,r19,88ce0 <__muldf3+0x1a4>
   88cdc:	02000044 	movi	r8,1
   88ce0:	258f883a 	add	r7,r4,r22
   88ce4:	3909803a 	cmpltu	r4,r7,r4
   88ce8:	da400c17 	ldw	r9,48(sp)
   88cec:	2489883a 	add	r4,r4,r18
   88cf0:	d8800717 	ldw	r2,28(sp)
   88cf4:	20c9883a 	add	r4,r4,r3
   88cf8:	da800b17 	ldw	r10,44(sp)
   88cfc:	d8c00617 	ldw	r3,24(sp)
   88d00:	3a11883a 	add	r8,r7,r8
   88d04:	4885883a 	add	r2,r9,r2
   88d08:	50c6c03a 	cmpne	r3,r10,r3
   88d0c:	41cf803a 	cmpltu	r7,r8,r7
   88d10:	12400104 	addi	r9,r2,4
   88d14:	d8c00115 	stw	r3,4(sp)
   88d18:	3909883a 	add	r4,r7,r4
   88d1c:	da400215 	stw	r9,8(sp)
   88d20:	03480034 	movhi	r13,8192
   88d24:	6b7fffc4 	addi	r13,r13,-1
   88d28:	4007883a 	mov	r3,r8
   88d2c:	6900102e 	bgeu	r13,r4,88d70 <__muldf3+0x234>
   88d30:	10800144 	addi	r2,r2,5
   88d34:	180ed07a 	srli	r7,r3,1
   88d38:	18c0004c 	andi	r3,r3,1
   88d3c:	201097fa 	slli	r8,r4,31
   88d40:	281697fa 	slli	r11,r5,31
   88d44:	2008d07a 	srli	r4,r4,1
   88d48:	3014d07a 	srli	r10,r6,1
   88d4c:	2812d07a 	srli	r9,r5,1
   88d50:	1019883a 	mov	r12,r2
   88d54:	18000226 	beq	r3,zero,88d60 <__muldf3+0x224>
   88d58:	5a8cb03a 	or	r6,r11,r10
   88d5c:	49600034 	orhi	r5,r9,32768
   88d60:	41c6b03a 	or	r3,r8,r7
   88d64:	10800044 	addi	r2,r2,1
   88d68:	693ff236 	bltu	r13,r4,88d34 <__muldf3+0x1f8>
   88d6c:	db000215 	stw	r12,8(sp)
   88d70:	03440034 	movhi	r13,4096
   88d74:	6b7fffc4 	addi	r13,r13,-1
   88d78:	69001336 	bltu	r13,r4,88dc8 <__muldf3+0x28c>
   88d7c:	d8800217 	ldw	r2,8(sp)
   88d80:	10bfffc4 	addi	r2,r2,-1
   88d84:	18d3883a 	add	r9,r3,r3
   88d88:	48c7803a 	cmpltu	r3,r9,r3
   88d8c:	2109883a 	add	r4,r4,r4
   88d90:	190f883a 	add	r7,r3,r4
   88d94:	3191883a 	add	r8,r6,r6
   88d98:	4197803a 	cmpltu	r11,r8,r6
   88d9c:	2955883a 	add	r10,r5,r5
   88da0:	1019883a 	mov	r12,r2
   88da4:	4807883a 	mov	r3,r9
   88da8:	3809883a 	mov	r4,r7
   88dac:	2800010e 	bge	r5,zero,88db4 <__muldf3+0x278>
   88db0:	48c00054 	ori	r3,r9,1
   88db4:	400d883a 	mov	r6,r8
   88db8:	5a8b883a 	add	r5,r11,r10
   88dbc:	10bfffc4 	addi	r2,r2,-1
   88dc0:	69fff02e 	bgeu	r13,r7,88d84 <__muldf3+0x248>
   88dc4:	db000215 	stw	r12,8(sp)
   88dc8:	18803fcc 	andi	r2,r3,255
   88dcc:	01c02004 	movi	r7,128
   88dd0:	11c00926 	beq	r2,r7,88df8 <__muldf3+0x2bc>
   88dd4:	008000c4 	movi	r2,3
   88dd8:	d9000415 	stw	r4,16(sp)
   88ddc:	d8c00315 	stw	r3,12(sp)
   88de0:	d8800015 	stw	r2,0(sp)
   88de4:	d809883a 	mov	r4,sp
   88de8:	003f7006 	br	88bac <__muldf3+0x70>
   88dec:	0011883a 	mov	r8,zero
   88df0:	00c00044 	movi	r3,1
   88df4:	003fb606 	br	88cd0 <__muldf3+0x194>
   88df8:	19c0400c 	andi	r7,r3,256
   88dfc:	383ff51e 	bne	r7,zero,88dd4 <__muldf3+0x298>
   88e00:	314ab03a 	or	r5,r6,r5
   88e04:	283ff326 	beq	r5,zero,88dd4 <__muldf3+0x298>
   88e08:	1885883a 	add	r2,r3,r2
   88e0c:	10cb803a 	cmpltu	r5,r2,r3
   88e10:	00ffc004 	movi	r3,-256
   88e14:	10c6703a 	and	r3,r2,r3
   88e18:	2909883a 	add	r4,r5,r4
   88e1c:	003fed06 	br	88dd4 <__muldf3+0x298>

00088e20 <__divdf3>:
   88e20:	defff104 	addi	sp,sp,-60
   88e24:	d9000c15 	stw	r4,48(sp)
   88e28:	d9400d15 	stw	r5,52(sp)
   88e2c:	d9000c04 	addi	r4,sp,48
   88e30:	d9400504 	addi	r5,sp,20
   88e34:	dfc00e15 	stw	ra,56(sp)
   88e38:	d9800a15 	stw	r6,40(sp)
   88e3c:	d9c00b15 	stw	r7,44(sp)
   88e40:	008987c0 	call	8987c <__unpack_d>
   88e44:	d9000a04 	addi	r4,sp,40
   88e48:	d80b883a 	mov	r5,sp
   88e4c:	008987c0 	call	8987c <__unpack_d>
   88e50:	d8c00517 	ldw	r3,20(sp)
   88e54:	00800044 	movi	r2,1
   88e58:	10c00536 	bltu	r2,r3,88e70 <__divdf3+0x50>
   88e5c:	d9000504 	addi	r4,sp,20
   88e60:	00896580 	call	89658 <__pack_d>
   88e64:	dfc00e17 	ldw	ra,56(sp)
   88e68:	dec00f04 	addi	sp,sp,60
   88e6c:	f800283a 	ret
   88e70:	d9000017 	ldw	r4,0(sp)
   88e74:	11000536 	bltu	r2,r4,88e8c <__divdf3+0x6c>
   88e78:	d809883a 	mov	r4,sp
   88e7c:	00896580 	call	89658 <__pack_d>
   88e80:	dfc00e17 	ldw	ra,56(sp)
   88e84:	dec00f04 	addi	sp,sp,60
   88e88:	f800283a 	ret
   88e8c:	d9800617 	ldw	r6,24(sp)
   88e90:	d9400117 	ldw	r5,4(sp)
   88e94:	00800104 	movi	r2,4
   88e98:	314af03a 	xor	r5,r6,r5
   88e9c:	d9400615 	stw	r5,24(sp)
   88ea0:	18800226 	beq	r3,r2,88eac <__divdf3+0x8c>
   88ea4:	01400084 	movi	r5,2
   88ea8:	1940041e 	bne	r3,r5,88ebc <__divdf3+0x9c>
   88eac:	193feb1e 	bne	r3,r4,88e5c <__divdf3+0x3c>
   88eb0:	01000274 	movhi	r4,9
   88eb4:	21338704 	addi	r4,r4,-12772
   88eb8:	003fe906 	br	88e60 <__divdf3+0x40>
   88ebc:	20803326 	beq	r4,r2,88f8c <__divdf3+0x16c>
   88ec0:	21403726 	beq	r4,r5,88fa0 <__divdf3+0x180>
   88ec4:	d8800217 	ldw	r2,8(sp)
   88ec8:	d9000717 	ldw	r4,28(sp)
   88ecc:	d8c00917 	ldw	r3,36(sp)
   88ed0:	da000417 	ldw	r8,16(sp)
   88ed4:	2089c83a 	sub	r4,r4,r2
   88ed8:	d9000715 	stw	r4,28(sp)
   88edc:	d8800817 	ldw	r2,32(sp)
   88ee0:	dbc00317 	ldw	r15,12(sp)
   88ee4:	1a000236 	bltu	r3,r8,88ef0 <__divdf3+0xd0>
   88ee8:	40c0081e 	bne	r8,r3,88f0c <__divdf3+0xec>
   88eec:	13c0072e 	bgeu	r2,r15,88f0c <__divdf3+0xec>
   88ef0:	108b883a 	add	r5,r2,r2
   88ef4:	288d803a 	cmpltu	r6,r5,r2
   88ef8:	18c7883a 	add	r3,r3,r3
   88efc:	213fffc4 	addi	r4,r4,-1
   88f00:	2805883a 	mov	r2,r5
   88f04:	30c7883a 	add	r3,r6,r3
   88f08:	d9000715 	stw	r4,28(sp)
   88f0c:	01400f44 	movi	r5,61
   88f10:	000f883a 	mov	r7,zero
   88f14:	01040034 	movhi	r4,4096
   88f18:	0019883a 	mov	r12,zero
   88f1c:	001b883a 	mov	r13,zero
   88f20:	201697fa 	slli	r11,r4,31
   88f24:	3814d07a 	srli	r10,r7,1
   88f28:	297fffc4 	addi	r5,r5,-1
   88f2c:	1a000936 	bltu	r3,r8,88f54 <__divdf3+0x134>
   88f30:	13cdc83a 	sub	r6,r2,r15
   88f34:	1193803a 	cmpltu	r9,r2,r6
   88f38:	1a1dc83a 	sub	r14,r3,r8
   88f3c:	40c0011e 	bne	r8,r3,88f44 <__divdf3+0x124>
   88f40:	13c00436 	bltu	r2,r15,88f54 <__divdf3+0x134>
   88f44:	3005883a 	mov	r2,r6
   88f48:	7247c83a 	sub	r3,r14,r9
   88f4c:	61d8b03a 	or	r12,r12,r7
   88f50:	691ab03a 	or	r13,r13,r4
   88f54:	108d883a 	add	r6,r2,r2
   88f58:	3093803a 	cmpltu	r9,r6,r2
   88f5c:	18c7883a 	add	r3,r3,r3
   88f60:	5a8eb03a 	or	r7,r11,r10
   88f64:	2008d07a 	srli	r4,r4,1
   88f68:	3005883a 	mov	r2,r6
   88f6c:	48c7883a 	add	r3,r9,r3
   88f70:	283feb1e 	bne	r5,zero,88f20 <__divdf3+0x100>
   88f74:	61003fcc 	andi	r4,r12,255
   88f78:	01402004 	movi	r5,128
   88f7c:	21400b26 	beq	r4,r5,88fac <__divdf3+0x18c>
   88f80:	db000815 	stw	r12,32(sp)
   88f84:	db400915 	stw	r13,36(sp)
   88f88:	003fb406 	br	88e5c <__divdf3+0x3c>
   88f8c:	d8000815 	stw	zero,32(sp)
   88f90:	d8000915 	stw	zero,36(sp)
   88f94:	d8000715 	stw	zero,28(sp)
   88f98:	d9000504 	addi	r4,sp,20
   88f9c:	003fb006 	br	88e60 <__divdf3+0x40>
   88fa0:	d8800515 	stw	r2,20(sp)
   88fa4:	d9000504 	addi	r4,sp,20
   88fa8:	003fad06 	br	88e60 <__divdf3+0x40>
   88fac:	6140400c 	andi	r5,r12,256
   88fb0:	283ff31e 	bne	r5,zero,88f80 <__divdf3+0x160>
   88fb4:	30c4b03a 	or	r2,r6,r3
   88fb8:	103ff126 	beq	r2,zero,88f80 <__divdf3+0x160>
   88fbc:	6109883a 	add	r4,r12,r4
   88fc0:	2305803a 	cmpltu	r2,r4,r12
   88fc4:	033fc004 	movi	r12,-256
   88fc8:	2318703a 	and	r12,r4,r12
   88fcc:	135b883a 	add	r13,r2,r13
   88fd0:	003feb06 	br	88f80 <__divdf3+0x160>

00088fd4 <__eqdf2>:
   88fd4:	defff104 	addi	sp,sp,-60
   88fd8:	d9000c15 	stw	r4,48(sp)
   88fdc:	d9400d15 	stw	r5,52(sp)
   88fe0:	d9000c04 	addi	r4,sp,48
   88fe4:	d9400504 	addi	r5,sp,20
   88fe8:	dfc00e15 	stw	ra,56(sp)
   88fec:	d9800a15 	stw	r6,40(sp)
   88ff0:	d9c00b15 	stw	r7,44(sp)
   88ff4:	008987c0 	call	8987c <__unpack_d>
   88ff8:	d9000a04 	addi	r4,sp,40
   88ffc:	d80b883a 	mov	r5,sp
   89000:	008987c0 	call	8987c <__unpack_d>
   89004:	d8c00517 	ldw	r3,20(sp)
   89008:	00800044 	movi	r2,1
   8900c:	10c0052e 	bgeu	r2,r3,89024 <__eqdf2+0x50>
   89010:	d8c00017 	ldw	r3,0(sp)
   89014:	10c0032e 	bgeu	r2,r3,89024 <__eqdf2+0x50>
   89018:	d9000504 	addi	r4,sp,20
   8901c:	d80b883a 	mov	r5,sp
   89020:	00899800 	call	89980 <__fpcmp_parts_d>
   89024:	dfc00e17 	ldw	ra,56(sp)
   89028:	dec00f04 	addi	sp,sp,60
   8902c:	f800283a 	ret

00089030 <__nedf2>:
   89030:	defff104 	addi	sp,sp,-60
   89034:	d9000c15 	stw	r4,48(sp)
   89038:	d9400d15 	stw	r5,52(sp)
   8903c:	d9000c04 	addi	r4,sp,48
   89040:	d9400504 	addi	r5,sp,20
   89044:	dfc00e15 	stw	ra,56(sp)
   89048:	d9800a15 	stw	r6,40(sp)
   8904c:	d9c00b15 	stw	r7,44(sp)
   89050:	008987c0 	call	8987c <__unpack_d>
   89054:	d9000a04 	addi	r4,sp,40
   89058:	d80b883a 	mov	r5,sp
   8905c:	008987c0 	call	8987c <__unpack_d>
   89060:	d8c00517 	ldw	r3,20(sp)
   89064:	00800044 	movi	r2,1
   89068:	10c0052e 	bgeu	r2,r3,89080 <__nedf2+0x50>
   8906c:	d8c00017 	ldw	r3,0(sp)
   89070:	10c0032e 	bgeu	r2,r3,89080 <__nedf2+0x50>
   89074:	d9000504 	addi	r4,sp,20
   89078:	d80b883a 	mov	r5,sp
   8907c:	00899800 	call	89980 <__fpcmp_parts_d>
   89080:	dfc00e17 	ldw	ra,56(sp)
   89084:	dec00f04 	addi	sp,sp,60
   89088:	f800283a 	ret

0008908c <__gtdf2>:
   8908c:	defff104 	addi	sp,sp,-60
   89090:	d9000c15 	stw	r4,48(sp)
   89094:	d9400d15 	stw	r5,52(sp)
   89098:	d9000c04 	addi	r4,sp,48
   8909c:	d9400504 	addi	r5,sp,20
   890a0:	dfc00e15 	stw	ra,56(sp)
   890a4:	d9800a15 	stw	r6,40(sp)
   890a8:	d9c00b15 	stw	r7,44(sp)
   890ac:	008987c0 	call	8987c <__unpack_d>
   890b0:	d9000a04 	addi	r4,sp,40
   890b4:	d80b883a 	mov	r5,sp
   890b8:	008987c0 	call	8987c <__unpack_d>
   890bc:	d8c00517 	ldw	r3,20(sp)
   890c0:	00800044 	movi	r2,1
   890c4:	10c0082e 	bgeu	r2,r3,890e8 <__gtdf2+0x5c>
   890c8:	d8c00017 	ldw	r3,0(sp)
   890cc:	10c0062e 	bgeu	r2,r3,890e8 <__gtdf2+0x5c>
   890d0:	d9000504 	addi	r4,sp,20
   890d4:	d80b883a 	mov	r5,sp
   890d8:	00899800 	call	89980 <__fpcmp_parts_d>
   890dc:	dfc00e17 	ldw	ra,56(sp)
   890e0:	dec00f04 	addi	sp,sp,60
   890e4:	f800283a 	ret
   890e8:	00bfffc4 	movi	r2,-1
   890ec:	003ffb06 	br	890dc <__gtdf2+0x50>

000890f0 <__gedf2>:
   890f0:	defff104 	addi	sp,sp,-60
   890f4:	d9000c15 	stw	r4,48(sp)
   890f8:	d9400d15 	stw	r5,52(sp)
   890fc:	d9000c04 	addi	r4,sp,48
   89100:	d9400504 	addi	r5,sp,20
   89104:	dfc00e15 	stw	ra,56(sp)
   89108:	d9800a15 	stw	r6,40(sp)
   8910c:	d9c00b15 	stw	r7,44(sp)
   89110:	008987c0 	call	8987c <__unpack_d>
   89114:	d9000a04 	addi	r4,sp,40
   89118:	d80b883a 	mov	r5,sp
   8911c:	008987c0 	call	8987c <__unpack_d>
   89120:	d8c00517 	ldw	r3,20(sp)
   89124:	00800044 	movi	r2,1
   89128:	10c0082e 	bgeu	r2,r3,8914c <__gedf2+0x5c>
   8912c:	d8c00017 	ldw	r3,0(sp)
   89130:	10c0062e 	bgeu	r2,r3,8914c <__gedf2+0x5c>
   89134:	d9000504 	addi	r4,sp,20
   89138:	d80b883a 	mov	r5,sp
   8913c:	00899800 	call	89980 <__fpcmp_parts_d>
   89140:	dfc00e17 	ldw	ra,56(sp)
   89144:	dec00f04 	addi	sp,sp,60
   89148:	f800283a 	ret
   8914c:	00bfffc4 	movi	r2,-1
   89150:	003ffb06 	br	89140 <__gedf2+0x50>

00089154 <__ltdf2>:
   89154:	defff104 	addi	sp,sp,-60
   89158:	d9000c15 	stw	r4,48(sp)
   8915c:	d9400d15 	stw	r5,52(sp)
   89160:	d9000c04 	addi	r4,sp,48
   89164:	d9400504 	addi	r5,sp,20
   89168:	dfc00e15 	stw	ra,56(sp)
   8916c:	d9800a15 	stw	r6,40(sp)
   89170:	d9c00b15 	stw	r7,44(sp)
   89174:	008987c0 	call	8987c <__unpack_d>
   89178:	d9000a04 	addi	r4,sp,40
   8917c:	d80b883a 	mov	r5,sp
   89180:	008987c0 	call	8987c <__unpack_d>
   89184:	d8c00517 	ldw	r3,20(sp)
   89188:	00800044 	movi	r2,1
   8918c:	10c0052e 	bgeu	r2,r3,891a4 <__ltdf2+0x50>
   89190:	d8c00017 	ldw	r3,0(sp)
   89194:	10c0032e 	bgeu	r2,r3,891a4 <__ltdf2+0x50>
   89198:	d9000504 	addi	r4,sp,20
   8919c:	d80b883a 	mov	r5,sp
   891a0:	00899800 	call	89980 <__fpcmp_parts_d>
   891a4:	dfc00e17 	ldw	ra,56(sp)
   891a8:	dec00f04 	addi	sp,sp,60
   891ac:	f800283a 	ret

000891b0 <__floatsidf>:
   891b0:	2004d7fa 	srli	r2,r4,31
   891b4:	defff904 	addi	sp,sp,-28
   891b8:	00c000c4 	movi	r3,3
   891bc:	dfc00615 	stw	ra,24(sp)
   891c0:	dc000515 	stw	r16,20(sp)
   891c4:	d8c00015 	stw	r3,0(sp)
   891c8:	d8800115 	stw	r2,4(sp)
   891cc:	2000081e 	bne	r4,zero,891f0 <__floatsidf+0x40>
   891d0:	00800084 	movi	r2,2
   891d4:	d8800015 	stw	r2,0(sp)
   891d8:	d809883a 	mov	r4,sp
   891dc:	00896580 	call	89658 <__pack_d>
   891e0:	dfc00617 	ldw	ra,24(sp)
   891e4:	dc000517 	ldw	r16,20(sp)
   891e8:	dec00704 	addi	sp,sp,28
   891ec:	f800283a 	ret
   891f0:	00c00f04 	movi	r3,60
   891f4:	d8c00215 	stw	r3,8(sp)
   891f8:	10000f1e 	bne	r2,zero,89238 <__floatsidf+0x88>
   891fc:	2021883a 	mov	r16,r4
   89200:	8009883a 	mov	r4,r16
   89204:	00895ac0 	call	895ac <__clzsi2>
   89208:	11000744 	addi	r4,r2,29
   8920c:	0100110e 	bge	zero,r4,89254 <__floatsidf+0xa4>
   89210:	10ffff44 	addi	r3,r2,-3
   89214:	18001216 	blt	r3,zero,89260 <__floatsidf+0xb0>
   89218:	80c6983a 	sll	r3,r16,r3
   8921c:	0009883a 	mov	r4,zero
   89220:	014007c4 	movi	r5,31
   89224:	2885c83a 	sub	r2,r5,r2
   89228:	d9000315 	stw	r4,12(sp)
   8922c:	d8c00415 	stw	r3,16(sp)
   89230:	d8800215 	stw	r2,8(sp)
   89234:	003fe806 	br	891d8 <__floatsidf+0x28>
   89238:	00a00034 	movhi	r2,32768
   8923c:	20800e26 	beq	r4,r2,89278 <__floatsidf+0xc8>
   89240:	0121c83a 	sub	r16,zero,r4
   89244:	8009883a 	mov	r4,r16
   89248:	00895ac0 	call	895ac <__clzsi2>
   8924c:	11000744 	addi	r4,r2,29
   89250:	013fef16 	blt	zero,r4,89210 <__floatsidf+0x60>
   89254:	dc000315 	stw	r16,12(sp)
   89258:	d8000415 	stw	zero,16(sp)
   8925c:	003fde06 	br	891d8 <__floatsidf+0x28>
   89260:	800ad07a 	srli	r5,r16,1
   89264:	00c007c4 	movi	r3,31
   89268:	1907c83a 	sub	r3,r3,r4
   8926c:	28c6d83a 	srl	r3,r5,r3
   89270:	8108983a 	sll	r4,r16,r4
   89274:	003fea06 	br	89220 <__floatsidf+0x70>
   89278:	0005883a 	mov	r2,zero
   8927c:	00f07834 	movhi	r3,49632
   89280:	003fd706 	br	891e0 <__floatsidf+0x30>

00089284 <__fixdfsi>:
   89284:	defff804 	addi	sp,sp,-32
   89288:	d9000515 	stw	r4,20(sp)
   8928c:	d9400615 	stw	r5,24(sp)
   89290:	d9000504 	addi	r4,sp,20
   89294:	d80b883a 	mov	r5,sp
   89298:	dfc00715 	stw	ra,28(sp)
   8929c:	008987c0 	call	8987c <__unpack_d>
   892a0:	d8800017 	ldw	r2,0(sp)
   892a4:	00c00084 	movi	r3,2
   892a8:	10c01c26 	beq	r2,r3,8931c <__fixdfsi+0x98>
   892ac:	00c00044 	movi	r3,1
   892b0:	18801a2e 	bgeu	r3,r2,8931c <__fixdfsi+0x98>
   892b4:	00c00104 	movi	r3,4
   892b8:	10c01126 	beq	r2,r3,89300 <__fixdfsi+0x7c>
   892bc:	d8800217 	ldw	r2,8(sp)
   892c0:	10001616 	blt	r2,zero,8931c <__fixdfsi+0x98>
   892c4:	00c00784 	movi	r3,30
   892c8:	18800d16 	blt	r3,r2,89300 <__fixdfsi+0x7c>
   892cc:	00c00f04 	movi	r3,60
   892d0:	1885c83a 	sub	r2,r3,r2
   892d4:	10fff804 	addi	r3,r2,-32
   892d8:	d9400317 	ldw	r5,12(sp)
   892dc:	d9000417 	ldw	r4,16(sp)
   892e0:	18001616 	blt	r3,zero,8933c <__fixdfsi+0xb8>
   892e4:	20c4d83a 	srl	r2,r4,r3
   892e8:	d8c00117 	ldw	r3,4(sp)
   892ec:	18000126 	beq	r3,zero,892f4 <__fixdfsi+0x70>
   892f0:	0085c83a 	sub	r2,zero,r2
   892f4:	dfc00717 	ldw	ra,28(sp)
   892f8:	dec00804 	addi	sp,sp,32
   892fc:	f800283a 	ret
   89300:	d8800117 	ldw	r2,4(sp)
   89304:	1000091e 	bne	r2,zero,8932c <__fixdfsi+0xa8>
   89308:	00a00034 	movhi	r2,32768
   8930c:	10bfffc4 	addi	r2,r2,-1
   89310:	dfc00717 	ldw	ra,28(sp)
   89314:	dec00804 	addi	sp,sp,32
   89318:	f800283a 	ret
   8931c:	0005883a 	mov	r2,zero
   89320:	dfc00717 	ldw	ra,28(sp)
   89324:	dec00804 	addi	sp,sp,32
   89328:	f800283a 	ret
   8932c:	00a00034 	movhi	r2,32768
   89330:	dfc00717 	ldw	ra,28(sp)
   89334:	dec00804 	addi	sp,sp,32
   89338:	f800283a 	ret
   8933c:	2008907a 	slli	r4,r4,1
   89340:	018007c4 	movi	r6,31
   89344:	308dc83a 	sub	r6,r6,r2
   89348:	2188983a 	sll	r4,r4,r6
   8934c:	2884d83a 	srl	r2,r5,r2
   89350:	2084b03a 	or	r2,r4,r2
   89354:	003fe406 	br	892e8 <__fixdfsi+0x64>

00089358 <__floatunsidf>:
   89358:	defff904 	addi	sp,sp,-28
   8935c:	dc000515 	stw	r16,20(sp)
   89360:	dfc00615 	stw	ra,24(sp)
   89364:	d8000115 	stw	zero,4(sp)
   89368:	2021883a 	mov	r16,r4
   8936c:	20001726 	beq	r4,zero,893cc <__floatunsidf+0x74>
   89370:	008000c4 	movi	r2,3
   89374:	d8800015 	stw	r2,0(sp)
   89378:	00800f04 	movi	r2,60
   8937c:	d8800215 	stw	r2,8(sp)
   89380:	00895ac0 	call	895ac <__clzsi2>
   89384:	10c00744 	addi	r3,r2,29
   89388:	18001816 	blt	r3,zero,893ec <__floatunsidf+0x94>
   8938c:	18002d26 	beq	r3,zero,89444 <__floatunsidf+0xec>
   89390:	113fff44 	addi	r4,r2,-3
   89394:	20002e16 	blt	r4,zero,89450 <__floatunsidf+0xf8>
   89398:	8108983a 	sll	r4,r16,r4
   8939c:	0021883a 	mov	r16,zero
   893a0:	014007c4 	movi	r5,31
   893a4:	2885c83a 	sub	r2,r5,r2
   893a8:	dc000315 	stw	r16,12(sp)
   893ac:	d9000415 	stw	r4,16(sp)
   893b0:	d8800215 	stw	r2,8(sp)
   893b4:	d809883a 	mov	r4,sp
   893b8:	00896580 	call	89658 <__pack_d>
   893bc:	dfc00617 	ldw	ra,24(sp)
   893c0:	dc000517 	ldw	r16,20(sp)
   893c4:	dec00704 	addi	sp,sp,28
   893c8:	f800283a 	ret
   893cc:	00800084 	movi	r2,2
   893d0:	d809883a 	mov	r4,sp
   893d4:	d8800015 	stw	r2,0(sp)
   893d8:	00896580 	call	89658 <__pack_d>
   893dc:	dfc00617 	ldw	ra,24(sp)
   893e0:	dc000517 	ldw	r16,20(sp)
   893e4:	dec00704 	addi	sp,sp,28
   893e8:	f800283a 	ret
   893ec:	00c7c83a 	sub	r3,zero,r3
   893f0:	193ff804 	addi	r4,r3,-32
   893f4:	20001c16 	blt	r4,zero,89468 <__floatunsidf+0x110>
   893f8:	000b883a 	mov	r5,zero
   893fc:	2009d7fa 	srai	r4,r4,31
   89400:	80c6d83a 	srl	r3,r16,r3
   89404:	297fffc4 	addi	r5,r5,-1
   89408:	2c20703a 	and	r16,r5,r16
   8940c:	8020c03a 	cmpne	r16,r16,zero
   89410:	1906703a 	and	r3,r3,r4
   89414:	010007c4 	movi	r4,31
   89418:	80c6b03a 	or	r3,r16,r3
   8941c:	2085c83a 	sub	r2,r4,r2
   89420:	d809883a 	mov	r4,sp
   89424:	d8c00315 	stw	r3,12(sp)
   89428:	d8000415 	stw	zero,16(sp)
   8942c:	d8800215 	stw	r2,8(sp)
   89430:	00896580 	call	89658 <__pack_d>
   89434:	dfc00617 	ldw	ra,24(sp)
   89438:	dc000517 	ldw	r16,20(sp)
   8943c:	dec00704 	addi	sp,sp,28
   89440:	f800283a 	ret
   89444:	dc000315 	stw	r16,12(sp)
   89448:	d8000415 	stw	zero,16(sp)
   8944c:	003fd906 	br	893b4 <__floatunsidf+0x5c>
   89450:	800ad07a 	srli	r5,r16,1
   89454:	010007c4 	movi	r4,31
   89458:	20c9c83a 	sub	r4,r4,r3
   8945c:	2908d83a 	srl	r4,r5,r4
   89460:	80e0983a 	sll	r16,r16,r3
   89464:	003fce06 	br	893a0 <__floatunsidf+0x48>
   89468:	01400044 	movi	r5,1
   8946c:	28ca983a 	sll	r5,r5,r3
   89470:	003fe206 	br	893fc <__floatunsidf+0xa4>

00089474 <__mulsi3>:
   89474:	0005883a 	mov	r2,zero
   89478:	20000726 	beq	r4,zero,89498 <__mulsi3+0x24>
   8947c:	20c0004c 	andi	r3,r4,1
   89480:	2008d07a 	srli	r4,r4,1
   89484:	18000126 	beq	r3,zero,8948c <__mulsi3+0x18>
   89488:	1145883a 	add	r2,r2,r5
   8948c:	294b883a 	add	r5,r5,r5
   89490:	203ffa1e 	bne	r4,zero,8947c <__mulsi3+0x8>
   89494:	f800283a 	ret
   89498:	f800283a 	ret

0008949c <__muldi3>:
   8949c:	defff604 	addi	sp,sp,-40
   894a0:	dd400515 	stw	r21,20(sp)
   894a4:	dd000415 	stw	r20,16(sp)
   894a8:	257fffcc 	andi	r21,r4,65535
   894ac:	353fffcc 	andi	r20,r6,65535
   894b0:	dcc00315 	stw	r19,12(sp)
   894b4:	3026d43a 	srli	r19,r6,16
   894b8:	dd800615 	stw	r22,24(sp)
   894bc:	dc800215 	stw	r18,8(sp)
   894c0:	dc400115 	stw	r17,4(sp)
   894c4:	2024d43a 	srli	r18,r4,16
   894c8:	2023883a 	mov	r17,r4
   894cc:	282d883a 	mov	r22,r5
   894d0:	a009883a 	mov	r4,r20
   894d4:	a80b883a 	mov	r5,r21
   894d8:	dfc00915 	stw	ra,36(sp)
   894dc:	df000815 	stw	fp,32(sp)
   894e0:	ddc00715 	stw	r23,28(sp)
   894e4:	3839883a 	mov	fp,r7
   894e8:	dc000015 	stw	r16,0(sp)
   894ec:	3021883a 	mov	r16,r6
   894f0:	00894740 	call	89474 <__mulsi3>
   894f4:	a80b883a 	mov	r5,r21
   894f8:	9809883a 	mov	r4,r19
   894fc:	102f883a 	mov	r23,r2
   89500:	00894740 	call	89474 <__mulsi3>
   89504:	a009883a 	mov	r4,r20
   89508:	900b883a 	mov	r5,r18
   8950c:	102b883a 	mov	r21,r2
   89510:	00894740 	call	89474 <__mulsi3>
   89514:	9809883a 	mov	r4,r19
   89518:	900b883a 	mov	r5,r18
   8951c:	1029883a 	mov	r20,r2
   89520:	00894740 	call	89474 <__mulsi3>
   89524:	1007883a 	mov	r3,r2
   89528:	b804d43a 	srli	r2,r23,16
   8952c:	a549883a 	add	r4,r20,r21
   89530:	2089883a 	add	r4,r4,r2
   89534:	2500022e 	bgeu	r4,r20,89540 <__muldi3+0xa4>
   89538:	00800074 	movhi	r2,1
   8953c:	1887883a 	add	r3,r3,r2
   89540:	200cd43a 	srli	r6,r4,16
   89544:	2004943a 	slli	r2,r4,16
   89548:	e00b883a 	mov	r5,fp
   8954c:	8809883a 	mov	r4,r17
   89550:	bdffffcc 	andi	r23,r23,65535
   89554:	19a3883a 	add	r17,r3,r6
   89558:	15ef883a 	add	r23,r2,r23
   8955c:	00894740 	call	89474 <__mulsi3>
   89560:	8009883a 	mov	r4,r16
   89564:	b00b883a 	mov	r5,r22
   89568:	1025883a 	mov	r18,r2
   8956c:	00894740 	call	89474 <__mulsi3>
   89570:	9085883a 	add	r2,r18,r2
   89574:	1447883a 	add	r3,r2,r17
   89578:	b805883a 	mov	r2,r23
   8957c:	dfc00917 	ldw	ra,36(sp)
   89580:	df000817 	ldw	fp,32(sp)
   89584:	ddc00717 	ldw	r23,28(sp)
   89588:	dd800617 	ldw	r22,24(sp)
   8958c:	dd400517 	ldw	r21,20(sp)
   89590:	dd000417 	ldw	r20,16(sp)
   89594:	dcc00317 	ldw	r19,12(sp)
   89598:	dc800217 	ldw	r18,8(sp)
   8959c:	dc400117 	ldw	r17,4(sp)
   895a0:	dc000017 	ldw	r16,0(sp)
   895a4:	dec00a04 	addi	sp,sp,40
   895a8:	f800283a 	ret

000895ac <__clzsi2>:
   895ac:	00bfffd4 	movui	r2,65535
   895b0:	11000b36 	bltu	r2,r4,895e0 <__clzsi2+0x34>
   895b4:	00803fc4 	movi	r2,255
   895b8:	11001e2e 	bgeu	r2,r4,89634 <__clzsi2+0x88>
   895bc:	00c00204 	movi	r3,8
   895c0:	20c8d83a 	srl	r4,r4,r3
   895c4:	00c00274 	movhi	r3,9
   895c8:	18f38c04 	addi	r3,r3,-12752
   895cc:	00800604 	movi	r2,24
   895d0:	1909883a 	add	r4,r3,r4
   895d4:	20c00003 	ldbu	r3,0(r4)
   895d8:	10c5c83a 	sub	r2,r2,r3
   895dc:	f800283a 	ret
   895e0:	00804034 	movhi	r2,256
   895e4:	10bfffc4 	addi	r2,r2,-1
   895e8:	11000936 	bltu	r2,r4,89610 <__clzsi2+0x64>
   895ec:	00800404 	movi	r2,16
   895f0:	1007883a 	mov	r3,r2
   895f4:	20c8d83a 	srl	r4,r4,r3
   895f8:	00c00274 	movhi	r3,9
   895fc:	18f38c04 	addi	r3,r3,-12752
   89600:	1909883a 	add	r4,r3,r4
   89604:	20c00003 	ldbu	r3,0(r4)
   89608:	10c5c83a 	sub	r2,r2,r3
   8960c:	f800283a 	ret
   89610:	00c00604 	movi	r3,24
   89614:	20c8d83a 	srl	r4,r4,r3
   89618:	00c00274 	movhi	r3,9
   8961c:	18f38c04 	addi	r3,r3,-12752
   89620:	00800204 	movi	r2,8
   89624:	1909883a 	add	r4,r3,r4
   89628:	20c00003 	ldbu	r3,0(r4)
   8962c:	10c5c83a 	sub	r2,r2,r3
   89630:	f800283a 	ret
   89634:	0007883a 	mov	r3,zero
   89638:	20c8d83a 	srl	r4,r4,r3
   8963c:	00c00274 	movhi	r3,9
   89640:	18f38c04 	addi	r3,r3,-12752
   89644:	00800804 	movi	r2,32
   89648:	1909883a 	add	r4,r3,r4
   8964c:	20c00003 	ldbu	r3,0(r4)
   89650:	10c5c83a 	sub	r2,r2,r3
   89654:	f800283a 	ret

00089658 <__pack_d>:
   89658:	20800017 	ldw	r2,0(r4)
   8965c:	defff804 	addi	sp,sp,-32
   89660:	dcc00315 	stw	r19,12(sp)
   89664:	dc800215 	stw	r18,8(sp)
   89668:	dfc00715 	stw	ra,28(sp)
   8966c:	dd800615 	stw	r22,24(sp)
   89670:	dd400515 	stw	r21,20(sp)
   89674:	dd000415 	stw	r20,16(sp)
   89678:	dc400115 	stw	r17,4(sp)
   8967c:	dc000015 	stw	r16,0(sp)
   89680:	04800044 	movi	r18,1
   89684:	24400317 	ldw	r17,12(r4)
   89688:	24000417 	ldw	r16,16(r4)
   8968c:	24c00117 	ldw	r19,4(r4)
   89690:	9080422e 	bgeu	r18,r2,8979c <__pack_d+0x144>
   89694:	00c00104 	movi	r3,4
   89698:	10c03c26 	beq	r2,r3,8978c <__pack_d+0x134>
   8969c:	00c00084 	movi	r3,2
   896a0:	10c01926 	beq	r2,r3,89708 <__pack_d+0xb0>
   896a4:	8c04b03a 	or	r2,r17,r16
   896a8:	10001726 	beq	r2,zero,89708 <__pack_d+0xb0>
   896ac:	21000217 	ldw	r4,8(r4)
   896b0:	00bf0084 	movi	r2,-1022
   896b4:	20804016 	blt	r4,r2,897b8 <__pack_d+0x160>
   896b8:	0080ffc4 	movi	r2,1023
   896bc:	11003316 	blt	r2,r4,8978c <__pack_d+0x134>
   896c0:	88803fcc 	andi	r2,r17,255
   896c4:	00c02004 	movi	r3,128
   896c8:	10c02926 	beq	r2,r3,89770 <__pack_d+0x118>
   896cc:	88801fc4 	addi	r2,r17,127
   896d0:	1463803a 	cmpltu	r17,r2,r17
   896d4:	8c21883a 	add	r16,r17,r16
   896d8:	1023883a 	mov	r17,r2
   896dc:	00880034 	movhi	r2,8192
   896e0:	10bfffc4 	addi	r2,r2,-1
   896e4:	14001c36 	bltu	r2,r16,89758 <__pack_d+0x100>
   896e8:	2100ffc4 	addi	r4,r4,1023
   896ec:	8006963a 	slli	r3,r16,24
   896f0:	8804d23a 	srli	r2,r17,8
   896f4:	8020913a 	slli	r16,r16,4
   896f8:	2101ffcc 	andi	r4,r4,2047
   896fc:	1884b03a 	or	r2,r3,r2
   89700:	8020d33a 	srli	r16,r16,12
   89704:	00000306 	br	89714 <__pack_d+0xbc>
   89708:	0009883a 	mov	r4,zero
   8970c:	0005883a 	mov	r2,zero
   89710:	0021883a 	mov	r16,zero
   89714:	2008953a 	slli	r4,r4,20
   89718:	982697fa 	slli	r19,r19,31
   8971c:	00c00434 	movhi	r3,16
   89720:	18ffffc4 	addi	r3,r3,-1
   89724:	80e0703a 	and	r16,r16,r3
   89728:	8106b03a 	or	r3,r16,r4
   8972c:	1cc6b03a 	or	r3,r3,r19
   89730:	dfc00717 	ldw	ra,28(sp)
   89734:	dd800617 	ldw	r22,24(sp)
   89738:	dd400517 	ldw	r21,20(sp)
   8973c:	dd000417 	ldw	r20,16(sp)
   89740:	dcc00317 	ldw	r19,12(sp)
   89744:	dc800217 	ldw	r18,8(sp)
   89748:	dc400117 	ldw	r17,4(sp)
   8974c:	dc000017 	ldw	r16,0(sp)
   89750:	dec00804 	addi	sp,sp,32
   89754:	f800283a 	ret
   89758:	800697fa 	slli	r3,r16,31
   8975c:	8804d07a 	srli	r2,r17,1
   89760:	21010004 	addi	r4,r4,1024
   89764:	8020d07a 	srli	r16,r16,1
   89768:	18a2b03a 	or	r17,r3,r2
   8976c:	003fdf06 	br	896ec <__pack_d+0x94>
   89770:	88c0400c 	andi	r3,r17,256
   89774:	183fd926 	beq	r3,zero,896dc <__pack_d+0x84>
   89778:	8885883a 	add	r2,r17,r2
   8977c:	1463803a 	cmpltu	r17,r2,r17
   89780:	8c21883a 	add	r16,r17,r16
   89784:	1023883a 	mov	r17,r2
   89788:	003fd406 	br	896dc <__pack_d+0x84>
   8978c:	0101ffc4 	movi	r4,2047
   89790:	0005883a 	mov	r2,zero
   89794:	0021883a 	mov	r16,zero
   89798:	003fde06 	br	89714 <__pack_d+0xbc>
   8979c:	84000234 	orhi	r16,r16,8
   897a0:	00c00434 	movhi	r3,16
   897a4:	18ffffc4 	addi	r3,r3,-1
   897a8:	8805883a 	mov	r2,r17
   897ac:	80e0703a 	and	r16,r16,r3
   897b0:	0101ffc4 	movi	r4,2047
   897b4:	003fd706 	br	89714 <__pack_d+0xbc>
   897b8:	1129c83a 	sub	r20,r2,r4
   897bc:	00800e04 	movi	r2,56
   897c0:	15002716 	blt	r2,r20,89860 <__pack_d+0x208>
   897c4:	800b883a 	mov	r5,r16
   897c8:	a00d883a 	mov	r6,r20
   897cc:	8809883a 	mov	r4,r17
   897d0:	0089a500 	call	89a50 <__lshrdi3>
   897d4:	9009883a 	mov	r4,r18
   897d8:	000b883a 	mov	r5,zero
   897dc:	a00d883a 	mov	r6,r20
   897e0:	102d883a 	mov	r22,r2
   897e4:	182b883a 	mov	r21,r3
   897e8:	0089a940 	call	89a94 <__ashldi3>
   897ec:	1009003a 	cmpeq	r4,r2,zero
   897f0:	1907c83a 	sub	r3,r3,r4
   897f4:	10bfffc4 	addi	r2,r2,-1
   897f8:	1c20703a 	and	r16,r3,r16
   897fc:	1444703a 	and	r2,r2,r17
   89800:	1404b03a 	or	r2,r2,r16
   89804:	1004c03a 	cmpne	r2,r2,zero
   89808:	1584b03a 	or	r2,r2,r22
   8980c:	11003fcc 	andi	r4,r2,255
   89810:	01402004 	movi	r5,128
   89814:	a807883a 	mov	r3,r21
   89818:	2140131e 	bne	r4,r5,89868 <__pack_d+0x210>
   8981c:	1140400c 	andi	r5,r2,256
   89820:	28000426 	beq	r5,zero,89834 <__pack_d+0x1dc>
   89824:	1109883a 	add	r4,r2,r4
   89828:	2085803a 	cmpltu	r2,r4,r2
   8982c:	1547883a 	add	r3,r2,r21
   89830:	2005883a 	mov	r2,r4
   89834:	1808963a 	slli	r4,r3,24
   89838:	1004d23a 	srli	r2,r2,8
   8983c:	1820913a 	slli	r16,r3,4
   89840:	01440034 	movhi	r5,4096
   89844:	297fffc4 	addi	r5,r5,-1
   89848:	2084b03a 	or	r2,r4,r2
   8984c:	8020d33a 	srli	r16,r16,12
   89850:	01000044 	movi	r4,1
   89854:	28ffaf36 	bltu	r5,r3,89714 <__pack_d+0xbc>
   89858:	0009883a 	mov	r4,zero
   8985c:	003fad06 	br	89714 <__pack_d+0xbc>
   89860:	0005883a 	mov	r2,zero
   89864:	0007883a 	mov	r3,zero
   89868:	11001fc4 	addi	r4,r2,127
   8986c:	2085803a 	cmpltu	r2,r4,r2
   89870:	10c7883a 	add	r3,r2,r3
   89874:	2005883a 	mov	r2,r4
   89878:	003fee06 	br	89834 <__pack_d+0x1dc>

0008987c <__unpack_d>:
   8987c:	21800117 	ldw	r6,4(r4)
   89880:	20c00017 	ldw	r3,0(r4)
   89884:	3004d7fa 	srli	r2,r6,31
   89888:	3008d53a 	srli	r4,r6,20
   8988c:	28800115 	stw	r2,4(r5)
   89890:	2101ffcc 	andi	r4,r4,2047
   89894:	00800434 	movhi	r2,16
   89898:	10bfffc4 	addi	r2,r2,-1
   8989c:	3084703a 	and	r2,r6,r2
   898a0:	20001a1e 	bne	r4,zero,8990c <__unpack_d+0x90>
   898a4:	1888b03a 	or	r4,r3,r2
   898a8:	20002626 	beq	r4,zero,89944 <__unpack_d+0xc8>
   898ac:	1808d63a 	srli	r4,r3,24
   898b0:	1004923a 	slli	r2,r2,8
   898b4:	01bf0084 	movi	r6,-1022
   898b8:	29800215 	stw	r6,8(r5)
   898bc:	2084b03a 	or	r2,r4,r2
   898c0:	010000c4 	movi	r4,3
   898c4:	29000015 	stw	r4,0(r5)
   898c8:	02040034 	movhi	r8,4096
   898cc:	423fffc4 	addi	r8,r8,-1
   898d0:	1806923a 	slli	r3,r3,8
   898d4:	40801836 	bltu	r8,r2,89938 <__unpack_d+0xbc>
   898d8:	013f0044 	movi	r4,-1023
   898dc:	18cd883a 	add	r6,r3,r3
   898e0:	30c7803a 	cmpltu	r3,r6,r3
   898e4:	1085883a 	add	r2,r2,r2
   898e8:	1885883a 	add	r2,r3,r2
   898ec:	200f883a 	mov	r7,r4
   898f0:	3007883a 	mov	r3,r6
   898f4:	213fffc4 	addi	r4,r4,-1
   898f8:	40bff82e 	bgeu	r8,r2,898dc <__unpack_d+0x60>
   898fc:	29c00215 	stw	r7,8(r5)
   89900:	28c00315 	stw	r3,12(r5)
   89904:	28800415 	stw	r2,16(r5)
   89908:	f800283a 	ret
   8990c:	01c1ffc4 	movi	r7,2047
   89910:	21c00f26 	beq	r4,r7,89950 <__unpack_d+0xd4>
   89914:	180cd63a 	srli	r6,r3,24
   89918:	1004923a 	slli	r2,r2,8
   8991c:	213f0044 	addi	r4,r4,-1023
   89920:	1806923a 	slli	r3,r3,8
   89924:	3084b03a 	or	r2,r6,r2
   89928:	29000215 	stw	r4,8(r5)
   8992c:	010000c4 	movi	r4,3
   89930:	10840034 	orhi	r2,r2,4096
   89934:	29000015 	stw	r4,0(r5)
   89938:	28c00315 	stw	r3,12(r5)
   8993c:	28800415 	stw	r2,16(r5)
   89940:	f800283a 	ret
   89944:	00800084 	movi	r2,2
   89948:	28800015 	stw	r2,0(r5)
   8994c:	f800283a 	ret
   89950:	1888b03a 	or	r4,r3,r2
   89954:	20000526 	beq	r4,zero,8996c <__unpack_d+0xf0>
   89958:	3180022c 	andhi	r6,r6,8
   8995c:	30000626 	beq	r6,zero,89978 <__unpack_d+0xfc>
   89960:	01000044 	movi	r4,1
   89964:	29000015 	stw	r4,0(r5)
   89968:	003ff306 	br	89938 <__unpack_d+0xbc>
   8996c:	00800104 	movi	r2,4
   89970:	28800015 	stw	r2,0(r5)
   89974:	f800283a 	ret
   89978:	28000015 	stw	zero,0(r5)
   8997c:	003fee06 	br	89938 <__unpack_d+0xbc>

00089980 <__fpcmp_parts_d>:
   89980:	20c00017 	ldw	r3,0(r4)
   89984:	00800044 	movi	r2,1
   89988:	10c0142e 	bgeu	r2,r3,899dc <__fpcmp_parts_d+0x5c>
   8998c:	29800017 	ldw	r6,0(r5)
   89990:	1180122e 	bgeu	r2,r6,899dc <__fpcmp_parts_d+0x5c>
   89994:	01c00104 	movi	r7,4
   89998:	19c02826 	beq	r3,r7,89a3c <__fpcmp_parts_d+0xbc>
   8999c:	31c00926 	beq	r6,r7,899c4 <__fpcmp_parts_d+0x44>
   899a0:	01c00084 	movi	r7,2
   899a4:	19c00626 	beq	r3,r7,899c0 <__fpcmp_parts_d+0x40>
   899a8:	31c00a26 	beq	r6,r7,899d4 <__fpcmp_parts_d+0x54>
   899ac:	20c00117 	ldw	r3,4(r4)
   899b0:	29800117 	ldw	r6,4(r5)
   899b4:	19800b26 	beq	r3,r6,899e4 <__fpcmp_parts_d+0x64>
   899b8:	1800041e 	bne	r3,zero,899cc <__fpcmp_parts_d+0x4c>
   899bc:	f800283a 	ret
   899c0:	30c01a26 	beq	r6,r3,89a2c <__fpcmp_parts_d+0xac>
   899c4:	28800117 	ldw	r2,4(r5)
   899c8:	1000041e 	bne	r2,zero,899dc <__fpcmp_parts_d+0x5c>
   899cc:	00bfffc4 	movi	r2,-1
   899d0:	f800283a 	ret
   899d4:	20800117 	ldw	r2,4(r4)
   899d8:	103ffc1e 	bne	r2,zero,899cc <__fpcmp_parts_d+0x4c>
   899dc:	00800044 	movi	r2,1
   899e0:	f800283a 	ret
   899e4:	21c00217 	ldw	r7,8(r4)
   899e8:	29800217 	ldw	r6,8(r5)
   899ec:	31c0020e 	bge	r6,r7,899f8 <__fpcmp_parts_d+0x78>
   899f0:	183ff61e 	bne	r3,zero,899cc <__fpcmp_parts_d+0x4c>
   899f4:	f800283a 	ret
   899f8:	39800a16 	blt	r7,r6,89a24 <__fpcmp_parts_d+0xa4>
   899fc:	20800417 	ldw	r2,16(r4)
   89a00:	29800417 	ldw	r6,16(r5)
   89a04:	21c00317 	ldw	r7,12(r4)
   89a08:	29000317 	ldw	r4,12(r5)
   89a0c:	30800936 	bltu	r6,r2,89a34 <__fpcmp_parts_d+0xb4>
   89a10:	1180011e 	bne	r2,r6,89a18 <__fpcmp_parts_d+0x98>
   89a14:	21c00736 	bltu	r4,r7,89a34 <__fpcmp_parts_d+0xb4>
   89a18:	11800236 	bltu	r2,r6,89a24 <__fpcmp_parts_d+0xa4>
   89a1c:	3080031e 	bne	r6,r2,89a2c <__fpcmp_parts_d+0xac>
   89a20:	3900022e 	bgeu	r7,r4,89a2c <__fpcmp_parts_d+0xac>
   89a24:	183fe926 	beq	r3,zero,899cc <__fpcmp_parts_d+0x4c>
   89a28:	003fec06 	br	899dc <__fpcmp_parts_d+0x5c>
   89a2c:	0005883a 	mov	r2,zero
   89a30:	f800283a 	ret
   89a34:	183fe926 	beq	r3,zero,899dc <__fpcmp_parts_d+0x5c>
   89a38:	003fe406 	br	899cc <__fpcmp_parts_d+0x4c>
   89a3c:	30ffe51e 	bne	r6,r3,899d4 <__fpcmp_parts_d+0x54>
   89a40:	28c00117 	ldw	r3,4(r5)
   89a44:	20800117 	ldw	r2,4(r4)
   89a48:	1885c83a 	sub	r2,r3,r2
   89a4c:	f800283a 	ret

00089a50 <__lshrdi3>:
   89a50:	2005883a 	mov	r2,r4
   89a54:	2807883a 	mov	r3,r5
   89a58:	30000826 	beq	r6,zero,89a7c <__lshrdi3+0x2c>
   89a5c:	01000804 	movi	r4,32
   89a60:	2189c83a 	sub	r4,r4,r6
   89a64:	0100060e 	bge	zero,r4,89a80 <__lshrdi3+0x30>
   89a68:	1184d83a 	srl	r2,r2,r6
   89a6c:	2908983a 	sll	r4,r5,r4
   89a70:	298cd83a 	srl	r6,r5,r6
   89a74:	2084b03a 	or	r2,r4,r2
   89a78:	3007883a 	mov	r3,r6
   89a7c:	f800283a 	ret
   89a80:	0105c83a 	sub	r2,zero,r4
   89a84:	000d883a 	mov	r6,zero
   89a88:	2884d83a 	srl	r2,r5,r2
   89a8c:	3007883a 	mov	r3,r6
   89a90:	003ffa06 	br	89a7c <__lshrdi3+0x2c>

00089a94 <__ashldi3>:
   89a94:	2005883a 	mov	r2,r4
   89a98:	2807883a 	mov	r3,r5
   89a9c:	30000826 	beq	r6,zero,89ac0 <__ashldi3+0x2c>
   89aa0:	01000804 	movi	r4,32
   89aa4:	2189c83a 	sub	r4,r4,r6
   89aa8:	0100060e 	bge	zero,r4,89ac4 <__ashldi3+0x30>
   89aac:	1108d83a 	srl	r4,r2,r4
   89ab0:	2986983a 	sll	r3,r5,r6
   89ab4:	118c983a 	sll	r6,r2,r6
   89ab8:	20c6b03a 	or	r3,r4,r3
   89abc:	3005883a 	mov	r2,r6
   89ac0:	f800283a 	ret
   89ac4:	0107c83a 	sub	r3,zero,r4
   89ac8:	000d883a 	mov	r6,zero
   89acc:	10c6983a 	sll	r3,r2,r3
   89ad0:	3005883a 	mov	r2,r6
   89ad4:	003ffa06 	br	89ac0 <__ashldi3+0x2c>

00089ad8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89ad8:	defffe04 	addi	sp,sp,-8
   89adc:	dfc00115 	stw	ra,4(sp)
   89ae0:	df000015 	stw	fp,0(sp)
   89ae4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89ae8:	00800274 	movhi	r2,9
   89aec:	10ba9e04 	addi	r2,r2,-5512
   89af0:	10800017 	ldw	r2,0(r2)
   89af4:	10000526 	beq	r2,zero,89b0c <alt_get_errno+0x34>
   89af8:	00800274 	movhi	r2,9
   89afc:	10ba9e04 	addi	r2,r2,-5512
   89b00:	10800017 	ldw	r2,0(r2)
   89b04:	103ee83a 	callr	r2
   89b08:	00000206 	br	89b14 <alt_get_errno+0x3c>
   89b0c:	00800274 	movhi	r2,9
   89b10:	10817004 	addi	r2,r2,1472
}
   89b14:	e037883a 	mov	sp,fp
   89b18:	dfc00117 	ldw	ra,4(sp)
   89b1c:	df000017 	ldw	fp,0(sp)
   89b20:	dec00204 	addi	sp,sp,8
   89b24:	f800283a 	ret

00089b28 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   89b28:	defffb04 	addi	sp,sp,-20
   89b2c:	dfc00415 	stw	ra,16(sp)
   89b30:	df000315 	stw	fp,12(sp)
   89b34:	df000304 	addi	fp,sp,12
   89b38:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   89b3c:	e0bfff17 	ldw	r2,-4(fp)
   89b40:	10000716 	blt	r2,zero,89b60 <close+0x38>
   89b44:	e13fff17 	ldw	r4,-4(fp)
   89b48:	01400304 	movi	r5,12
   89b4c:	00894740 	call	89474 <__mulsi3>
   89b50:	00c00274 	movhi	r3,9
   89b54:	18f5eb04 	addi	r3,r3,-10324
   89b58:	10c5883a 	add	r2,r2,r3
   89b5c:	00000106 	br	89b64 <close+0x3c>
   89b60:	0005883a 	mov	r2,zero
   89b64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   89b68:	e0bffd17 	ldw	r2,-12(fp)
   89b6c:	10001826 	beq	r2,zero,89bd0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   89b70:	e0bffd17 	ldw	r2,-12(fp)
   89b74:	10800017 	ldw	r2,0(r2)
   89b78:	10800417 	ldw	r2,16(r2)
   89b7c:	10000626 	beq	r2,zero,89b98 <close+0x70>
   89b80:	e0bffd17 	ldw	r2,-12(fp)
   89b84:	10800017 	ldw	r2,0(r2)
   89b88:	10800417 	ldw	r2,16(r2)
   89b8c:	e13ffd17 	ldw	r4,-12(fp)
   89b90:	103ee83a 	callr	r2
   89b94:	00000106 	br	89b9c <close+0x74>
   89b98:	0005883a 	mov	r2,zero
   89b9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   89ba0:	e13fff17 	ldw	r4,-4(fp)
   89ba4:	008a2200 	call	8a220 <alt_release_fd>
    if (rval < 0)
   89ba8:	e0bffe17 	ldw	r2,-8(fp)
   89bac:	1000060e 	bge	r2,zero,89bc8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   89bb0:	0089ad80 	call	89ad8 <alt_get_errno>
   89bb4:	e0fffe17 	ldw	r3,-8(fp)
   89bb8:	00c7c83a 	sub	r3,zero,r3
   89bbc:	10c00015 	stw	r3,0(r2)
      return -1;
   89bc0:	00bfffc4 	movi	r2,-1
   89bc4:	00000606 	br	89be0 <close+0xb8>
    }
    return 0;
   89bc8:	0005883a 	mov	r2,zero
   89bcc:	00000406 	br	89be0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89bd0:	0089ad80 	call	89ad8 <alt_get_errno>
   89bd4:	00c01444 	movi	r3,81
   89bd8:	10c00015 	stw	r3,0(r2)
    return -1;
   89bdc:	00bfffc4 	movi	r2,-1
  }
}
   89be0:	e037883a 	mov	sp,fp
   89be4:	dfc00117 	ldw	ra,4(sp)
   89be8:	df000017 	ldw	fp,0(sp)
   89bec:	dec00204 	addi	sp,sp,8
   89bf0:	f800283a 	ret

00089bf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   89bf4:	defffc04 	addi	sp,sp,-16
   89bf8:	df000315 	stw	fp,12(sp)
   89bfc:	df000304 	addi	fp,sp,12
   89c00:	e13ffd15 	stw	r4,-12(fp)
   89c04:	e17ffe15 	stw	r5,-8(fp)
   89c08:	e1bfff15 	stw	r6,-4(fp)
  return len;
   89c0c:	e0bfff17 	ldw	r2,-4(fp)
}
   89c10:	e037883a 	mov	sp,fp
   89c14:	df000017 	ldw	fp,0(sp)
   89c18:	dec00104 	addi	sp,sp,4
   89c1c:	f800283a 	ret

00089c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89c20:	defffe04 	addi	sp,sp,-8
   89c24:	dfc00115 	stw	ra,4(sp)
   89c28:	df000015 	stw	fp,0(sp)
   89c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89c30:	00800274 	movhi	r2,9
   89c34:	10ba9e04 	addi	r2,r2,-5512
   89c38:	10800017 	ldw	r2,0(r2)
   89c3c:	10000526 	beq	r2,zero,89c54 <alt_get_errno+0x34>
   89c40:	00800274 	movhi	r2,9
   89c44:	10ba9e04 	addi	r2,r2,-5512
   89c48:	10800017 	ldw	r2,0(r2)
   89c4c:	103ee83a 	callr	r2
   89c50:	00000206 	br	89c5c <alt_get_errno+0x3c>
   89c54:	00800274 	movhi	r2,9
   89c58:	10817004 	addi	r2,r2,1472
}
   89c5c:	e037883a 	mov	sp,fp
   89c60:	dfc00117 	ldw	ra,4(sp)
   89c64:	df000017 	ldw	fp,0(sp)
   89c68:	dec00204 	addi	sp,sp,8
   89c6c:	f800283a 	ret

00089c70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   89c70:	defffb04 	addi	sp,sp,-20
   89c74:	dfc00415 	stw	ra,16(sp)
   89c78:	df000315 	stw	fp,12(sp)
   89c7c:	df000304 	addi	fp,sp,12
   89c80:	e13ffe15 	stw	r4,-8(fp)
   89c84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   89c88:	e0bffe17 	ldw	r2,-8(fp)
   89c8c:	10000716 	blt	r2,zero,89cac <fstat+0x3c>
   89c90:	e13ffe17 	ldw	r4,-8(fp)
   89c94:	01400304 	movi	r5,12
   89c98:	00894740 	call	89474 <__mulsi3>
   89c9c:	00c00274 	movhi	r3,9
   89ca0:	18f5eb04 	addi	r3,r3,-10324
   89ca4:	10c5883a 	add	r2,r2,r3
   89ca8:	00000106 	br	89cb0 <fstat+0x40>
   89cac:	0005883a 	mov	r2,zero
   89cb0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   89cb4:	e0bffd17 	ldw	r2,-12(fp)
   89cb8:	10001026 	beq	r2,zero,89cfc <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   89cbc:	e0bffd17 	ldw	r2,-12(fp)
   89cc0:	10800017 	ldw	r2,0(r2)
   89cc4:	10800817 	ldw	r2,32(r2)
   89cc8:	10000726 	beq	r2,zero,89ce8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   89ccc:	e0bffd17 	ldw	r2,-12(fp)
   89cd0:	10800017 	ldw	r2,0(r2)
   89cd4:	10800817 	ldw	r2,32(r2)
   89cd8:	e13ffd17 	ldw	r4,-12(fp)
   89cdc:	e17fff17 	ldw	r5,-4(fp)
   89ce0:	103ee83a 	callr	r2
   89ce4:	00000906 	br	89d0c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   89ce8:	e0bfff17 	ldw	r2,-4(fp)
   89cec:	00c80004 	movi	r3,8192
   89cf0:	10c00115 	stw	r3,4(r2)
      return 0;
   89cf4:	0005883a 	mov	r2,zero
   89cf8:	00000406 	br	89d0c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89cfc:	0089c200 	call	89c20 <alt_get_errno>
   89d00:	00c01444 	movi	r3,81
   89d04:	10c00015 	stw	r3,0(r2)
    return -1;
   89d08:	00bfffc4 	movi	r2,-1
  }
}
   89d0c:	e037883a 	mov	sp,fp
   89d10:	dfc00117 	ldw	ra,4(sp)
   89d14:	df000017 	ldw	fp,0(sp)
   89d18:	dec00204 	addi	sp,sp,8
   89d1c:	f800283a 	ret

00089d20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89d20:	defffe04 	addi	sp,sp,-8
   89d24:	dfc00115 	stw	ra,4(sp)
   89d28:	df000015 	stw	fp,0(sp)
   89d2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89d30:	00800274 	movhi	r2,9
   89d34:	10ba9e04 	addi	r2,r2,-5512
   89d38:	10800017 	ldw	r2,0(r2)
   89d3c:	10000526 	beq	r2,zero,89d54 <alt_get_errno+0x34>
   89d40:	00800274 	movhi	r2,9
   89d44:	10ba9e04 	addi	r2,r2,-5512
   89d48:	10800017 	ldw	r2,0(r2)
   89d4c:	103ee83a 	callr	r2
   89d50:	00000206 	br	89d5c <alt_get_errno+0x3c>
   89d54:	00800274 	movhi	r2,9
   89d58:	10817004 	addi	r2,r2,1472
}
   89d5c:	e037883a 	mov	sp,fp
   89d60:	dfc00117 	ldw	ra,4(sp)
   89d64:	df000017 	ldw	fp,0(sp)
   89d68:	dec00204 	addi	sp,sp,8
   89d6c:	f800283a 	ret

00089d70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   89d70:	deffed04 	addi	sp,sp,-76
   89d74:	dfc01215 	stw	ra,72(sp)
   89d78:	df001115 	stw	fp,68(sp)
   89d7c:	df001104 	addi	fp,sp,68
   89d80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   89d84:	e0bfff17 	ldw	r2,-4(fp)
   89d88:	10000716 	blt	r2,zero,89da8 <isatty+0x38>
   89d8c:	e13fff17 	ldw	r4,-4(fp)
   89d90:	01400304 	movi	r5,12
   89d94:	00894740 	call	89474 <__mulsi3>
   89d98:	00c00274 	movhi	r3,9
   89d9c:	18f5eb04 	addi	r3,r3,-10324
   89da0:	10c5883a 	add	r2,r2,r3
   89da4:	00000106 	br	89dac <isatty+0x3c>
   89da8:	0005883a 	mov	r2,zero
   89dac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   89db0:	e0bfef17 	ldw	r2,-68(fp)
   89db4:	10000e26 	beq	r2,zero,89df0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   89db8:	e0bfef17 	ldw	r2,-68(fp)
   89dbc:	10800017 	ldw	r2,0(r2)
   89dc0:	10800817 	ldw	r2,32(r2)
   89dc4:	1000021e 	bne	r2,zero,89dd0 <isatty+0x60>
    {
      return 1;
   89dc8:	00800044 	movi	r2,1
   89dcc:	00000c06 	br	89e00 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   89dd0:	e0bff004 	addi	r2,fp,-64
   89dd4:	e13fff17 	ldw	r4,-4(fp)
   89dd8:	100b883a 	mov	r5,r2
   89ddc:	0089c700 	call	89c70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   89de0:	e0bff117 	ldw	r2,-60(fp)
   89de4:	10880020 	cmpeqi	r2,r2,8192
   89de8:	10803fcc 	andi	r2,r2,255
   89dec:	00000406 	br	89e00 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89df0:	0089d200 	call	89d20 <alt_get_errno>
   89df4:	00c01444 	movi	r3,81
   89df8:	10c00015 	stw	r3,0(r2)
    return 0;
   89dfc:	0005883a 	mov	r2,zero
  }
}
   89e00:	e037883a 	mov	sp,fp
   89e04:	dfc00117 	ldw	ra,4(sp)
   89e08:	df000017 	ldw	fp,0(sp)
   89e0c:	dec00204 	addi	sp,sp,8
   89e10:	f800283a 	ret

00089e14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   89e14:	defffc04 	addi	sp,sp,-16
   89e18:	df000315 	stw	fp,12(sp)
   89e1c:	df000304 	addi	fp,sp,12
   89e20:	e13ffd15 	stw	r4,-12(fp)
   89e24:	e17ffe15 	stw	r5,-8(fp)
   89e28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   89e2c:	e0fffe17 	ldw	r3,-8(fp)
   89e30:	e0bffd17 	ldw	r2,-12(fp)
   89e34:	18800e26 	beq	r3,r2,89e70 <alt_load_section+0x5c>
  {
    while( to != end )
   89e38:	00000a06 	br	89e64 <alt_load_section+0x50>
    {
      *to++ = *from++;
   89e3c:	e0bffd17 	ldw	r2,-12(fp)
   89e40:	10c00017 	ldw	r3,0(r2)
   89e44:	e0bffe17 	ldw	r2,-8(fp)
   89e48:	10c00015 	stw	r3,0(r2)
   89e4c:	e0bffe17 	ldw	r2,-8(fp)
   89e50:	10800104 	addi	r2,r2,4
   89e54:	e0bffe15 	stw	r2,-8(fp)
   89e58:	e0bffd17 	ldw	r2,-12(fp)
   89e5c:	10800104 	addi	r2,r2,4
   89e60:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   89e64:	e0fffe17 	ldw	r3,-8(fp)
   89e68:	e0bfff17 	ldw	r2,-4(fp)
   89e6c:	18bff31e 	bne	r3,r2,89e3c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   89e70:	e037883a 	mov	sp,fp
   89e74:	df000017 	ldw	fp,0(sp)
   89e78:	dec00104 	addi	sp,sp,4
   89e7c:	f800283a 	ret

00089e80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   89e80:	defffe04 	addi	sp,sp,-8
   89e84:	dfc00115 	stw	ra,4(sp)
   89e88:	df000015 	stw	fp,0(sp)
   89e8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   89e90:	01000274 	movhi	r4,9
   89e94:	213aa304 	addi	r4,r4,-5492
   89e98:	01400274 	movhi	r5,9
   89e9c:	2973dc04 	addi	r5,r5,-12432
   89ea0:	01800274 	movhi	r6,9
   89ea4:	31baa304 	addi	r6,r6,-5492
   89ea8:	0089e140 	call	89e14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   89eac:	01000234 	movhi	r4,8
   89eb0:	21000804 	addi	r4,r4,32
   89eb4:	01400234 	movhi	r5,8
   89eb8:	29400804 	addi	r5,r5,32
   89ebc:	01800234 	movhi	r6,8
   89ec0:	31806e04 	addi	r6,r6,440
   89ec4:	0089e140 	call	89e14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   89ec8:	01000274 	movhi	r4,9
   89ecc:	21330b04 	addi	r4,r4,-13268
   89ed0:	01400274 	movhi	r5,9
   89ed4:	29730b04 	addi	r5,r5,-13268
   89ed8:	01800274 	movhi	r6,9
   89edc:	31b3dc04 	addi	r6,r6,-12432
   89ee0:	0089e140 	call	89e14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   89ee4:	008bb8c0 	call	8bb8c <alt_dcache_flush_all>
  alt_icache_flush_all();
   89ee8:	008bd500 	call	8bd50 <alt_icache_flush_all>
}
   89eec:	e037883a 	mov	sp,fp
   89ef0:	dfc00117 	ldw	ra,4(sp)
   89ef4:	df000017 	ldw	fp,0(sp)
   89ef8:	dec00204 	addi	sp,sp,8
   89efc:	f800283a 	ret

00089f00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89f00:	defffe04 	addi	sp,sp,-8
   89f04:	dfc00115 	stw	ra,4(sp)
   89f08:	df000015 	stw	fp,0(sp)
   89f0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   89f10:	00800274 	movhi	r2,9
   89f14:	10ba9e04 	addi	r2,r2,-5512
   89f18:	10800017 	ldw	r2,0(r2)
   89f1c:	10000526 	beq	r2,zero,89f34 <alt_get_errno+0x34>
   89f20:	00800274 	movhi	r2,9
   89f24:	10ba9e04 	addi	r2,r2,-5512
   89f28:	10800017 	ldw	r2,0(r2)
   89f2c:	103ee83a 	callr	r2
   89f30:	00000206 	br	89f3c <alt_get_errno+0x3c>
   89f34:	00800274 	movhi	r2,9
   89f38:	10817004 	addi	r2,r2,1472
}
   89f3c:	e037883a 	mov	sp,fp
   89f40:	dfc00117 	ldw	ra,4(sp)
   89f44:	df000017 	ldw	fp,0(sp)
   89f48:	dec00204 	addi	sp,sp,8
   89f4c:	f800283a 	ret

00089f50 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   89f50:	defff904 	addi	sp,sp,-28
   89f54:	dfc00615 	stw	ra,24(sp)
   89f58:	df000515 	stw	fp,20(sp)
   89f5c:	df000504 	addi	fp,sp,20
   89f60:	e13ffd15 	stw	r4,-12(fp)
   89f64:	e17ffe15 	stw	r5,-8(fp)
   89f68:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   89f6c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   89f70:	e0bffd17 	ldw	r2,-12(fp)
   89f74:	10000716 	blt	r2,zero,89f94 <lseek+0x44>
   89f78:	e13ffd17 	ldw	r4,-12(fp)
   89f7c:	01400304 	movi	r5,12
   89f80:	00894740 	call	89474 <__mulsi3>
   89f84:	00c00274 	movhi	r3,9
   89f88:	18f5eb04 	addi	r3,r3,-10324
   89f8c:	10c5883a 	add	r2,r2,r3
   89f90:	00000106 	br	89f98 <lseek+0x48>
   89f94:	0005883a 	mov	r2,zero
   89f98:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   89f9c:	e0bffc17 	ldw	r2,-16(fp)
   89fa0:	10001026 	beq	r2,zero,89fe4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   89fa4:	e0bffc17 	ldw	r2,-16(fp)
   89fa8:	10800017 	ldw	r2,0(r2)
   89fac:	10800717 	ldw	r2,28(r2)
   89fb0:	10000926 	beq	r2,zero,89fd8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   89fb4:	e0bffc17 	ldw	r2,-16(fp)
   89fb8:	10800017 	ldw	r2,0(r2)
   89fbc:	10800717 	ldw	r2,28(r2)
   89fc0:	e13ffc17 	ldw	r4,-16(fp)
   89fc4:	e17ffe17 	ldw	r5,-8(fp)
   89fc8:	e1bfff17 	ldw	r6,-4(fp)
   89fcc:	103ee83a 	callr	r2
   89fd0:	e0bffb15 	stw	r2,-20(fp)
   89fd4:	00000506 	br	89fec <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   89fd8:	00bfde84 	movi	r2,-134
   89fdc:	e0bffb15 	stw	r2,-20(fp)
   89fe0:	00000206 	br	89fec <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   89fe4:	00bfebc4 	movi	r2,-81
   89fe8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   89fec:	e0bffb17 	ldw	r2,-20(fp)
   89ff0:	1000060e 	bge	r2,zero,8a00c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   89ff4:	0089f000 	call	89f00 <alt_get_errno>
   89ff8:	e0fffb17 	ldw	r3,-20(fp)
   89ffc:	00c7c83a 	sub	r3,zero,r3
   8a000:	10c00015 	stw	r3,0(r2)
    rc = -1;
   8a004:	00bfffc4 	movi	r2,-1
   8a008:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8a00c:	e0bffb17 	ldw	r2,-20(fp)
}
   8a010:	e037883a 	mov	sp,fp
   8a014:	dfc00117 	ldw	ra,4(sp)
   8a018:	df000017 	ldw	fp,0(sp)
   8a01c:	dec00204 	addi	sp,sp,8
   8a020:	f800283a 	ret

0008a024 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8a024:	defffd04 	addi	sp,sp,-12
   8a028:	dfc00215 	stw	ra,8(sp)
   8a02c:	df000115 	stw	fp,4(sp)
   8a030:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8a034:	0009883a 	mov	r4,zero
   8a038:	008a4f80 	call	8a4f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8a03c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8a040:	008a52c0 	call	8a52c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8a044:	01000274 	movhi	r4,9
   8a048:	2133cf04 	addi	r4,r4,-12484
   8a04c:	01400274 	movhi	r5,9
   8a050:	2973cf04 	addi	r5,r5,-12484
   8a054:	01800274 	movhi	r6,9
   8a058:	31b3cf04 	addi	r6,r6,-12484
   8a05c:	008c1140 	call	8c114 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8a060:	008bc980 	call	8bc98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8a064:	01000274 	movhi	r4,9
   8a068:	212f3d04 	addi	r4,r4,-17164
   8a06c:	008c8580 	call	8c858 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8a070:	d126dd17 	ldw	r4,-25740(gp)
   8a074:	d0e6de17 	ldw	r3,-25736(gp)
   8a078:	d0a6df17 	ldw	r2,-25732(gp)
   8a07c:	180b883a 	mov	r5,r3
   8a080:	100d883a 	mov	r6,r2
   8a084:	00801f40 	call	801f4 <main>
   8a088:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8a08c:	01000044 	movi	r4,1
   8a090:	0089b280 	call	89b28 <close>
  exit (result);
   8a094:	e13fff17 	ldw	r4,-4(fp)
   8a098:	008c86c0 	call	8c86c <exit>

0008a09c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8a09c:	defffe04 	addi	sp,sp,-8
   8a0a0:	df000115 	stw	fp,4(sp)
   8a0a4:	df000104 	addi	fp,sp,4
   8a0a8:	e13fff15 	stw	r4,-4(fp)
}
   8a0ac:	e037883a 	mov	sp,fp
   8a0b0:	df000017 	ldw	fp,0(sp)
   8a0b4:	dec00104 	addi	sp,sp,4
   8a0b8:	f800283a 	ret

0008a0bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8a0bc:	defffe04 	addi	sp,sp,-8
   8a0c0:	df000115 	stw	fp,4(sp)
   8a0c4:	df000104 	addi	fp,sp,4
   8a0c8:	e13fff15 	stw	r4,-4(fp)
}
   8a0cc:	e037883a 	mov	sp,fp
   8a0d0:	df000017 	ldw	fp,0(sp)
   8a0d4:	dec00104 	addi	sp,sp,4
   8a0d8:	f800283a 	ret

0008a0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a0dc:	defffe04 	addi	sp,sp,-8
   8a0e0:	dfc00115 	stw	ra,4(sp)
   8a0e4:	df000015 	stw	fp,0(sp)
   8a0e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8a0ec:	00800274 	movhi	r2,9
   8a0f0:	10ba9e04 	addi	r2,r2,-5512
   8a0f4:	10800017 	ldw	r2,0(r2)
   8a0f8:	10000526 	beq	r2,zero,8a110 <alt_get_errno+0x34>
   8a0fc:	00800274 	movhi	r2,9
   8a100:	10ba9e04 	addi	r2,r2,-5512
   8a104:	10800017 	ldw	r2,0(r2)
   8a108:	103ee83a 	callr	r2
   8a10c:	00000206 	br	8a118 <alt_get_errno+0x3c>
   8a110:	00800274 	movhi	r2,9
   8a114:	10817004 	addi	r2,r2,1472
}
   8a118:	e037883a 	mov	sp,fp
   8a11c:	dfc00117 	ldw	ra,4(sp)
   8a120:	df000017 	ldw	fp,0(sp)
   8a124:	dec00204 	addi	sp,sp,8
   8a128:	f800283a 	ret

0008a12c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8a12c:	defff904 	addi	sp,sp,-28
   8a130:	dfc00615 	stw	ra,24(sp)
   8a134:	df000515 	stw	fp,20(sp)
   8a138:	df000504 	addi	fp,sp,20
   8a13c:	e13ffd15 	stw	r4,-12(fp)
   8a140:	e17ffe15 	stw	r5,-8(fp)
   8a144:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a148:	e0bffd17 	ldw	r2,-12(fp)
   8a14c:	10000716 	blt	r2,zero,8a16c <read+0x40>
   8a150:	e13ffd17 	ldw	r4,-12(fp)
   8a154:	01400304 	movi	r5,12
   8a158:	00894740 	call	89474 <__mulsi3>
   8a15c:	00c00274 	movhi	r3,9
   8a160:	18f5eb04 	addi	r3,r3,-10324
   8a164:	10c5883a 	add	r2,r2,r3
   8a168:	00000106 	br	8a170 <read+0x44>
   8a16c:	0005883a 	mov	r2,zero
   8a170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a174:	e0bffb17 	ldw	r2,-20(fp)
   8a178:	10002026 	beq	r2,zero,8a1fc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a17c:	e0bffb17 	ldw	r2,-20(fp)
   8a180:	10800217 	ldw	r2,8(r2)
   8a184:	108000cc 	andi	r2,r2,3
   8a188:	10800060 	cmpeqi	r2,r2,1
   8a18c:	1000171e 	bne	r2,zero,8a1ec <read+0xc0>
        (fd->dev->read))
   8a190:	e0bffb17 	ldw	r2,-20(fp)
   8a194:	10800017 	ldw	r2,0(r2)
   8a198:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a19c:	10001326 	beq	r2,zero,8a1ec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8a1a0:	e0bffb17 	ldw	r2,-20(fp)
   8a1a4:	10800017 	ldw	r2,0(r2)
   8a1a8:	10c00517 	ldw	r3,20(r2)
   8a1ac:	e0bfff17 	ldw	r2,-4(fp)
   8a1b0:	e13ffb17 	ldw	r4,-20(fp)
   8a1b4:	e17ffe17 	ldw	r5,-8(fp)
   8a1b8:	100d883a 	mov	r6,r2
   8a1bc:	183ee83a 	callr	r3
   8a1c0:	e0bffc15 	stw	r2,-16(fp)
   8a1c4:	e0bffc17 	ldw	r2,-16(fp)
   8a1c8:	1000060e 	bge	r2,zero,8a1e4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8a1cc:	008a0dc0 	call	8a0dc <alt_get_errno>
   8a1d0:	e0fffc17 	ldw	r3,-16(fp)
   8a1d4:	00c7c83a 	sub	r3,zero,r3
   8a1d8:	10c00015 	stw	r3,0(r2)
          return -1;
   8a1dc:	00bfffc4 	movi	r2,-1
   8a1e0:	00000a06 	br	8a20c <read+0xe0>
        }
        return rval;
   8a1e4:	e0bffc17 	ldw	r2,-16(fp)
   8a1e8:	00000806 	br	8a20c <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8a1ec:	008a0dc0 	call	8a0dc <alt_get_errno>
   8a1f0:	00c00344 	movi	r3,13
   8a1f4:	10c00015 	stw	r3,0(r2)
   8a1f8:	00000306 	br	8a208 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8a1fc:	008a0dc0 	call	8a0dc <alt_get_errno>
   8a200:	00c01444 	movi	r3,81
   8a204:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8a208:	00bfffc4 	movi	r2,-1
}
   8a20c:	e037883a 	mov	sp,fp
   8a210:	dfc00117 	ldw	ra,4(sp)
   8a214:	df000017 	ldw	fp,0(sp)
   8a218:	dec00204 	addi	sp,sp,8
   8a21c:	f800283a 	ret

0008a220 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8a220:	defffc04 	addi	sp,sp,-16
   8a224:	dfc00315 	stw	ra,12(sp)
   8a228:	df000215 	stw	fp,8(sp)
   8a22c:	dc000115 	stw	r16,4(sp)
   8a230:	df000104 	addi	fp,sp,4
   8a234:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8a238:	e0bfff17 	ldw	r2,-4(fp)
   8a23c:	108000d0 	cmplti	r2,r2,3
   8a240:	1000111e 	bne	r2,zero,8a288 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8a244:	04000274 	movhi	r16,9
   8a248:	8435eb04 	addi	r16,r16,-10324
   8a24c:	e0bfff17 	ldw	r2,-4(fp)
   8a250:	1009883a 	mov	r4,r2
   8a254:	01400304 	movi	r5,12
   8a258:	00894740 	call	89474 <__mulsi3>
   8a25c:	8085883a 	add	r2,r16,r2
   8a260:	10800204 	addi	r2,r2,8
   8a264:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8a268:	04000274 	movhi	r16,9
   8a26c:	8435eb04 	addi	r16,r16,-10324
   8a270:	e0bfff17 	ldw	r2,-4(fp)
   8a274:	1009883a 	mov	r4,r2
   8a278:	01400304 	movi	r5,12
   8a27c:	00894740 	call	89474 <__mulsi3>
   8a280:	8085883a 	add	r2,r16,r2
   8a284:	10000015 	stw	zero,0(r2)
  }
}
   8a288:	e037883a 	mov	sp,fp
   8a28c:	dfc00217 	ldw	ra,8(sp)
   8a290:	df000117 	ldw	fp,4(sp)
   8a294:	dc000017 	ldw	r16,0(sp)
   8a298:	dec00304 	addi	sp,sp,12
   8a29c:	f800283a 	ret

0008a2a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8a2a0:	defff904 	addi	sp,sp,-28
   8a2a4:	df000615 	stw	fp,24(sp)
   8a2a8:	df000604 	addi	fp,sp,24
   8a2ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a2b0:	0005303a 	rdctl	r2,status
   8a2b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a2b8:	e0fffc17 	ldw	r3,-16(fp)
   8a2bc:	00bfff84 	movi	r2,-2
   8a2c0:	1884703a 	and	r2,r3,r2
   8a2c4:	1001703a 	wrctl	status,r2
  
  return context;
   8a2c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8a2cc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8a2d0:	d0a00b17 	ldw	r2,-32724(gp)
   8a2d4:	10c000c4 	addi	r3,r2,3
   8a2d8:	00bfff04 	movi	r2,-4
   8a2dc:	1884703a 	and	r2,r3,r2
   8a2e0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8a2e4:	d0e00b17 	ldw	r3,-32724(gp)
   8a2e8:	e0bfff17 	ldw	r2,-4(fp)
   8a2ec:	1885883a 	add	r2,r3,r2
   8a2f0:	00c003b4 	movhi	r3,14
   8a2f4:	18c6a004 	addi	r3,r3,6784
   8a2f8:	1880062e 	bgeu	r3,r2,8a314 <sbrk+0x74>
   8a2fc:	e0bffa17 	ldw	r2,-24(fp)
   8a300:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a304:	e0bffd17 	ldw	r2,-12(fp)
   8a308:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8a30c:	00bfffc4 	movi	r2,-1
   8a310:	00000b06 	br	8a340 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8a314:	d0a00b17 	ldw	r2,-32724(gp)
   8a318:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8a31c:	d0e00b17 	ldw	r3,-32724(gp)
   8a320:	e0bfff17 	ldw	r2,-4(fp)
   8a324:	1885883a 	add	r2,r3,r2
   8a328:	d0a00b15 	stw	r2,-32724(gp)
   8a32c:	e0bffa17 	ldw	r2,-24(fp)
   8a330:	e0bffe15 	stw	r2,-8(fp)
   8a334:	e0bffe17 	ldw	r2,-8(fp)
   8a338:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8a33c:	e0bffb17 	ldw	r2,-20(fp)
} 
   8a340:	e037883a 	mov	sp,fp
   8a344:	df000017 	ldw	fp,0(sp)
   8a348:	dec00104 	addi	sp,sp,4
   8a34c:	f800283a 	ret

0008a350 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8a350:	defffd04 	addi	sp,sp,-12
   8a354:	dfc00215 	stw	ra,8(sp)
   8a358:	df000115 	stw	fp,4(sp)
   8a35c:	df000104 	addi	fp,sp,4
   8a360:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8a364:	e13fff17 	ldw	r4,-4(fp)
   8a368:	008ba380 	call	8ba38 <alt_busy_sleep>
}
   8a36c:	e037883a 	mov	sp,fp
   8a370:	dfc00117 	ldw	ra,4(sp)
   8a374:	df000017 	ldw	fp,0(sp)
   8a378:	dec00204 	addi	sp,sp,8
   8a37c:	f800283a 	ret

0008a380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a380:	defffe04 	addi	sp,sp,-8
   8a384:	dfc00115 	stw	ra,4(sp)
   8a388:	df000015 	stw	fp,0(sp)
   8a38c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8a390:	00800274 	movhi	r2,9
   8a394:	10ba9e04 	addi	r2,r2,-5512
   8a398:	10800017 	ldw	r2,0(r2)
   8a39c:	10000526 	beq	r2,zero,8a3b4 <alt_get_errno+0x34>
   8a3a0:	00800274 	movhi	r2,9
   8a3a4:	10ba9e04 	addi	r2,r2,-5512
   8a3a8:	10800017 	ldw	r2,0(r2)
   8a3ac:	103ee83a 	callr	r2
   8a3b0:	00000206 	br	8a3bc <alt_get_errno+0x3c>
   8a3b4:	00800274 	movhi	r2,9
   8a3b8:	10817004 	addi	r2,r2,1472
}
   8a3bc:	e037883a 	mov	sp,fp
   8a3c0:	dfc00117 	ldw	ra,4(sp)
   8a3c4:	df000017 	ldw	fp,0(sp)
   8a3c8:	dec00204 	addi	sp,sp,8
   8a3cc:	f800283a 	ret

0008a3d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8a3d0:	defff904 	addi	sp,sp,-28
   8a3d4:	dfc00615 	stw	ra,24(sp)
   8a3d8:	df000515 	stw	fp,20(sp)
   8a3dc:	df000504 	addi	fp,sp,20
   8a3e0:	e13ffd15 	stw	r4,-12(fp)
   8a3e4:	e17ffe15 	stw	r5,-8(fp)
   8a3e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a3ec:	e0bffd17 	ldw	r2,-12(fp)
   8a3f0:	10000716 	blt	r2,zero,8a410 <write+0x40>
   8a3f4:	e13ffd17 	ldw	r4,-12(fp)
   8a3f8:	01400304 	movi	r5,12
   8a3fc:	00894740 	call	89474 <__mulsi3>
   8a400:	00c00274 	movhi	r3,9
   8a404:	18f5eb04 	addi	r3,r3,-10324
   8a408:	10c5883a 	add	r2,r2,r3
   8a40c:	00000106 	br	8a414 <write+0x44>
   8a410:	0005883a 	mov	r2,zero
   8a414:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a418:	e0bffb17 	ldw	r2,-20(fp)
   8a41c:	10001f26 	beq	r2,zero,8a49c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8a420:	e0bffb17 	ldw	r2,-20(fp)
   8a424:	10800217 	ldw	r2,8(r2)
   8a428:	108000cc 	andi	r2,r2,3
   8a42c:	10001726 	beq	r2,zero,8a48c <write+0xbc>
   8a430:	e0bffb17 	ldw	r2,-20(fp)
   8a434:	10800017 	ldw	r2,0(r2)
   8a438:	10800617 	ldw	r2,24(r2)
   8a43c:	10001326 	beq	r2,zero,8a48c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8a440:	e0bffb17 	ldw	r2,-20(fp)
   8a444:	10800017 	ldw	r2,0(r2)
   8a448:	10c00617 	ldw	r3,24(r2)
   8a44c:	e0bfff17 	ldw	r2,-4(fp)
   8a450:	e13ffb17 	ldw	r4,-20(fp)
   8a454:	e17ffe17 	ldw	r5,-8(fp)
   8a458:	100d883a 	mov	r6,r2
   8a45c:	183ee83a 	callr	r3
   8a460:	e0bffc15 	stw	r2,-16(fp)
   8a464:	e0bffc17 	ldw	r2,-16(fp)
   8a468:	1000060e 	bge	r2,zero,8a484 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8a46c:	008a3800 	call	8a380 <alt_get_errno>
   8a470:	e0fffc17 	ldw	r3,-16(fp)
   8a474:	00c7c83a 	sub	r3,zero,r3
   8a478:	10c00015 	stw	r3,0(r2)
        return -1;
   8a47c:	00bfffc4 	movi	r2,-1
   8a480:	00000a06 	br	8a4ac <write+0xdc>
      }
      return rval;
   8a484:	e0bffc17 	ldw	r2,-16(fp)
   8a488:	00000806 	br	8a4ac <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8a48c:	008a3800 	call	8a380 <alt_get_errno>
   8a490:	00c00344 	movi	r3,13
   8a494:	10c00015 	stw	r3,0(r2)
   8a498:	00000306 	br	8a4a8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8a49c:	008a3800 	call	8a380 <alt_get_errno>
   8a4a0:	00c01444 	movi	r3,81
   8a4a4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8a4a8:	00bfffc4 	movi	r2,-1
}
   8a4ac:	e037883a 	mov	sp,fp
   8a4b0:	dfc00117 	ldw	ra,4(sp)
   8a4b4:	df000017 	ldw	fp,0(sp)
   8a4b8:	dec00204 	addi	sp,sp,8
   8a4bc:	f800283a 	ret

0008a4c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8a4c0:	defffd04 	addi	sp,sp,-12
   8a4c4:	dfc00215 	stw	ra,8(sp)
   8a4c8:	df000115 	stw	fp,4(sp)
   8a4cc:	df000104 	addi	fp,sp,4
   8a4d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8a4d4:	e13fff17 	ldw	r4,-4(fp)
   8a4d8:	01400274 	movhi	r5,9
   8a4dc:	297a9b04 	addi	r5,r5,-5524
   8a4e0:	008bbf80 	call	8bbf8 <alt_dev_llist_insert>
}
   8a4e4:	e037883a 	mov	sp,fp
   8a4e8:	dfc00117 	ldw	ra,4(sp)
   8a4ec:	df000017 	ldw	fp,0(sp)
   8a4f0:	dec00204 	addi	sp,sp,8
   8a4f4:	f800283a 	ret

0008a4f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8a4f8:	defffd04 	addi	sp,sp,-12
   8a4fc:	dfc00215 	stw	ra,8(sp)
   8a500:	df000115 	stw	fp,4(sp)
   8a504:	df000104 	addi	fp,sp,4
   8a508:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8a50c:	008c5c00 	call	8c5c0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8a510:	00800044 	movi	r2,1
   8a514:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8a518:	e037883a 	mov	sp,fp
   8a51c:	dfc00117 	ldw	ra,4(sp)
   8a520:	df000017 	ldw	fp,0(sp)
   8a524:	dec00204 	addi	sp,sp,8
   8a528:	f800283a 	ret

0008a52c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8a52c:	defffe04 	addi	sp,sp,-8
   8a530:	dfc00115 	stw	ra,4(sp)
   8a534:	df000015 	stw	fp,0(sp)
   8a538:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8a53c:	01000274 	movhi	r4,9
   8a540:	21365504 	addi	r4,r4,-9900
   8a544:	000b883a 	mov	r5,zero
   8a548:	000d883a 	mov	r6,zero
   8a54c:	008a6f40 	call	8a6f4 <altera_avalon_jtag_uart_init>
   8a550:	01000274 	movhi	r4,9
   8a554:	21364b04 	addi	r4,r4,-9940
   8a558:	008a4c00 	call	8a4c0 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   8a55c:	01000274 	movhi	r4,9
   8a560:	213a6d04 	addi	r4,r4,-5708
   8a564:	000b883a 	mov	r5,zero
   8a568:	01800044 	movi	r6,1
   8a56c:	008b1040 	call	8b104 <altera_avalon_uart_init>
   8a570:	01000274 	movhi	r4,9
   8a574:	213a6304 	addi	r4,r4,-5748
   8a578:	008a4c00 	call	8a4c0 <alt_dev_reg>
}
   8a57c:	e037883a 	mov	sp,fp
   8a580:	dfc00117 	ldw	ra,4(sp)
   8a584:	df000017 	ldw	fp,0(sp)
   8a588:	dec00204 	addi	sp,sp,8
   8a58c:	f800283a 	ret

0008a590 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8a590:	defffa04 	addi	sp,sp,-24
   8a594:	dfc00515 	stw	ra,20(sp)
   8a598:	df000415 	stw	fp,16(sp)
   8a59c:	df000404 	addi	fp,sp,16
   8a5a0:	e13ffd15 	stw	r4,-12(fp)
   8a5a4:	e17ffe15 	stw	r5,-8(fp)
   8a5a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8a5ac:	e0bffd17 	ldw	r2,-12(fp)
   8a5b0:	10800017 	ldw	r2,0(r2)
   8a5b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8a5b8:	e0bffc17 	ldw	r2,-16(fp)
   8a5bc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8a5c0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8a5c4:	10800217 	ldw	r2,8(r2)
   8a5c8:	1809883a 	mov	r4,r3
   8a5cc:	e17ffe17 	ldw	r5,-8(fp)
   8a5d0:	e1bfff17 	ldw	r6,-4(fp)
   8a5d4:	100f883a 	mov	r7,r2
   8a5d8:	008abb80 	call	8abb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8a5dc:	e037883a 	mov	sp,fp
   8a5e0:	dfc00117 	ldw	ra,4(sp)
   8a5e4:	df000017 	ldw	fp,0(sp)
   8a5e8:	dec00204 	addi	sp,sp,8
   8a5ec:	f800283a 	ret

0008a5f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8a5f0:	defffa04 	addi	sp,sp,-24
   8a5f4:	dfc00515 	stw	ra,20(sp)
   8a5f8:	df000415 	stw	fp,16(sp)
   8a5fc:	df000404 	addi	fp,sp,16
   8a600:	e13ffd15 	stw	r4,-12(fp)
   8a604:	e17ffe15 	stw	r5,-8(fp)
   8a608:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8a60c:	e0bffd17 	ldw	r2,-12(fp)
   8a610:	10800017 	ldw	r2,0(r2)
   8a614:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8a618:	e0bffc17 	ldw	r2,-16(fp)
   8a61c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8a620:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8a624:	10800217 	ldw	r2,8(r2)
   8a628:	1809883a 	mov	r4,r3
   8a62c:	e17ffe17 	ldw	r5,-8(fp)
   8a630:	e1bfff17 	ldw	r6,-4(fp)
   8a634:	100f883a 	mov	r7,r2
   8a638:	008add00 	call	8add0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8a63c:	e037883a 	mov	sp,fp
   8a640:	dfc00117 	ldw	ra,4(sp)
   8a644:	df000017 	ldw	fp,0(sp)
   8a648:	dec00204 	addi	sp,sp,8
   8a64c:	f800283a 	ret

0008a650 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8a650:	defffc04 	addi	sp,sp,-16
   8a654:	dfc00315 	stw	ra,12(sp)
   8a658:	df000215 	stw	fp,8(sp)
   8a65c:	df000204 	addi	fp,sp,8
   8a660:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8a664:	e0bfff17 	ldw	r2,-4(fp)
   8a668:	10800017 	ldw	r2,0(r2)
   8a66c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8a670:	e0bffe17 	ldw	r2,-8(fp)
   8a674:	10c00a04 	addi	r3,r2,40
   8a678:	e0bfff17 	ldw	r2,-4(fp)
   8a67c:	10800217 	ldw	r2,8(r2)
   8a680:	1809883a 	mov	r4,r3
   8a684:	100b883a 	mov	r5,r2
   8a688:	008aa5c0 	call	8aa5c <altera_avalon_jtag_uart_close>
}
   8a68c:	e037883a 	mov	sp,fp
   8a690:	dfc00117 	ldw	ra,4(sp)
   8a694:	df000017 	ldw	fp,0(sp)
   8a698:	dec00204 	addi	sp,sp,8
   8a69c:	f800283a 	ret

0008a6a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8a6a0:	defffa04 	addi	sp,sp,-24
   8a6a4:	dfc00515 	stw	ra,20(sp)
   8a6a8:	df000415 	stw	fp,16(sp)
   8a6ac:	df000404 	addi	fp,sp,16
   8a6b0:	e13ffd15 	stw	r4,-12(fp)
   8a6b4:	e17ffe15 	stw	r5,-8(fp)
   8a6b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8a6bc:	e0bffd17 	ldw	r2,-12(fp)
   8a6c0:	10800017 	ldw	r2,0(r2)
   8a6c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8a6c8:	e0bffc17 	ldw	r2,-16(fp)
   8a6cc:	10800a04 	addi	r2,r2,40
   8a6d0:	1009883a 	mov	r4,r2
   8a6d4:	e17ffe17 	ldw	r5,-8(fp)
   8a6d8:	e1bfff17 	ldw	r6,-4(fp)
   8a6dc:	008aac40 	call	8aac4 <altera_avalon_jtag_uart_ioctl>
}
   8a6e0:	e037883a 	mov	sp,fp
   8a6e4:	dfc00117 	ldw	ra,4(sp)
   8a6e8:	df000017 	ldw	fp,0(sp)
   8a6ec:	dec00204 	addi	sp,sp,8
   8a6f0:	f800283a 	ret

0008a6f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8a6f4:	defffa04 	addi	sp,sp,-24
   8a6f8:	dfc00515 	stw	ra,20(sp)
   8a6fc:	df000415 	stw	fp,16(sp)
   8a700:	df000404 	addi	fp,sp,16
   8a704:	e13ffd15 	stw	r4,-12(fp)
   8a708:	e17ffe15 	stw	r5,-8(fp)
   8a70c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8a710:	e0bffd17 	ldw	r2,-12(fp)
   8a714:	00c00044 	movi	r3,1
   8a718:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8a71c:	e0bffd17 	ldw	r2,-12(fp)
   8a720:	10800017 	ldw	r2,0(r2)
   8a724:	10800104 	addi	r2,r2,4
   8a728:	e0fffd17 	ldw	r3,-12(fp)
   8a72c:	18c00817 	ldw	r3,32(r3)
   8a730:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8a734:	e0fffe17 	ldw	r3,-8(fp)
   8a738:	e0bfff17 	ldw	r2,-4(fp)
   8a73c:	d8000015 	stw	zero,0(sp)
   8a740:	1809883a 	mov	r4,r3
   8a744:	100b883a 	mov	r5,r2
   8a748:	01800274 	movhi	r6,9
   8a74c:	31a9ed04 	addi	r6,r6,-22604
   8a750:	e1fffd17 	ldw	r7,-12(fp)
   8a754:	008bd6c0 	call	8bd6c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8a758:	e0bffd17 	ldw	r2,-12(fp)
   8a75c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8a760:	e0bffd17 	ldw	r2,-12(fp)
   8a764:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8a768:	00800274 	movhi	r2,9
   8a76c:	10817504 	addi	r2,r2,1492
   8a770:	10800017 	ldw	r2,0(r2)
   8a774:	1809883a 	mov	r4,r3
   8a778:	100b883a 	mov	r5,r2
   8a77c:	01800274 	movhi	r6,9
   8a780:	31aa6e04 	addi	r6,r6,-22088
   8a784:	e1fffd17 	ldw	r7,-12(fp)
   8a788:	008b8f80 	call	8b8f8 <alt_alarm_start>
   8a78c:	1000040e 	bge	r2,zero,8a7a0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8a790:	e0bffd17 	ldw	r2,-12(fp)
   8a794:	00e00034 	movhi	r3,32768
   8a798:	18ffffc4 	addi	r3,r3,-1
   8a79c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8a7a0:	e037883a 	mov	sp,fp
   8a7a4:	dfc00117 	ldw	ra,4(sp)
   8a7a8:	df000017 	ldw	fp,0(sp)
   8a7ac:	dec00204 	addi	sp,sp,8
   8a7b0:	f800283a 	ret

0008a7b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8a7b4:	defff804 	addi	sp,sp,-32
   8a7b8:	df000715 	stw	fp,28(sp)
   8a7bc:	df000704 	addi	fp,sp,28
   8a7c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8a7c4:	e0bfff17 	ldw	r2,-4(fp)
   8a7c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8a7cc:	e0bffb17 	ldw	r2,-20(fp)
   8a7d0:	10800017 	ldw	r2,0(r2)
   8a7d4:	e0bffc15 	stw	r2,-16(fp)
   8a7d8:	00000106 	br	8a7e0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   8a7dc:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8a7e0:	e0bffc17 	ldw	r2,-16(fp)
   8a7e4:	10800104 	addi	r2,r2,4
   8a7e8:	10800037 	ldwio	r2,0(r2)
   8a7ec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8a7f0:	e0bffd17 	ldw	r2,-12(fp)
   8a7f4:	1080c00c 	andi	r2,r2,768
   8a7f8:	10006a26 	beq	r2,zero,8a9a4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8a7fc:	e0bffd17 	ldw	r2,-12(fp)
   8a800:	1080400c 	andi	r2,r2,256
   8a804:	10003326 	beq	r2,zero,8a8d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8a808:	00800074 	movhi	r2,1
   8a80c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8a810:	e0bffb17 	ldw	r2,-20(fp)
   8a814:	10800a17 	ldw	r2,40(r2)
   8a818:	10800044 	addi	r2,r2,1
   8a81c:	1081ffcc 	andi	r2,r2,2047
   8a820:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8a824:	e0bffb17 	ldw	r2,-20(fp)
   8a828:	10c00b17 	ldw	r3,44(r2)
   8a82c:	e0bffe17 	ldw	r2,-8(fp)
   8a830:	18801426 	beq	r3,r2,8a884 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8a834:	e0bffc17 	ldw	r2,-16(fp)
   8a838:	10800037 	ldwio	r2,0(r2)
   8a83c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8a840:	e0bff917 	ldw	r2,-28(fp)
   8a844:	10a0000c 	andi	r2,r2,32768
   8a848:	10001026 	beq	r2,zero,8a88c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8a84c:	e0bffb17 	ldw	r2,-20(fp)
   8a850:	10800a17 	ldw	r2,40(r2)
   8a854:	e0fff917 	ldw	r3,-28(fp)
   8a858:	e13ffb17 	ldw	r4,-20(fp)
   8a85c:	2085883a 	add	r2,r4,r2
   8a860:	10800e04 	addi	r2,r2,56
   8a864:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8a868:	e0bffb17 	ldw	r2,-20(fp)
   8a86c:	10800a17 	ldw	r2,40(r2)
   8a870:	10800044 	addi	r2,r2,1
   8a874:	10c1ffcc 	andi	r3,r2,2047
   8a878:	e0bffb17 	ldw	r2,-20(fp)
   8a87c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8a880:	003fe306 	br	8a810 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8a884:	0001883a 	nop
   8a888:	00000106 	br	8a890 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8a88c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8a890:	e0bff917 	ldw	r2,-28(fp)
   8a894:	10bfffec 	andhi	r2,r2,65535
   8a898:	10000e26 	beq	r2,zero,8a8d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8a89c:	e0bffb17 	ldw	r2,-20(fp)
   8a8a0:	10c00817 	ldw	r3,32(r2)
   8a8a4:	00bfff84 	movi	r2,-2
   8a8a8:	1886703a 	and	r3,r3,r2
   8a8ac:	e0bffb17 	ldw	r2,-20(fp)
   8a8b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8a8b4:	e0bffc17 	ldw	r2,-16(fp)
   8a8b8:	10800104 	addi	r2,r2,4
   8a8bc:	e0fffb17 	ldw	r3,-20(fp)
   8a8c0:	18c00817 	ldw	r3,32(r3)
   8a8c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8a8c8:	e0bffc17 	ldw	r2,-16(fp)
   8a8cc:	10800104 	addi	r2,r2,4
   8a8d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8a8d4:	e0bffd17 	ldw	r2,-12(fp)
   8a8d8:	1080800c 	andi	r2,r2,512
   8a8dc:	103fbf26 	beq	r2,zero,8a7dc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8a8e0:	e0bffd17 	ldw	r2,-12(fp)
   8a8e4:	1004d43a 	srli	r2,r2,16
   8a8e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8a8ec:	00001406 	br	8a940 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8a8f0:	e0bffc17 	ldw	r2,-16(fp)
   8a8f4:	e0fffb17 	ldw	r3,-20(fp)
   8a8f8:	18c00d17 	ldw	r3,52(r3)
   8a8fc:	e13ffb17 	ldw	r4,-20(fp)
   8a900:	20c7883a 	add	r3,r4,r3
   8a904:	18c20e04 	addi	r3,r3,2104
   8a908:	18c00003 	ldbu	r3,0(r3)
   8a90c:	18c03fcc 	andi	r3,r3,255
   8a910:	18c0201c 	xori	r3,r3,128
   8a914:	18ffe004 	addi	r3,r3,-128
   8a918:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8a91c:	e0bffb17 	ldw	r2,-20(fp)
   8a920:	10800d17 	ldw	r2,52(r2)
   8a924:	10800044 	addi	r2,r2,1
   8a928:	10c1ffcc 	andi	r3,r2,2047
   8a92c:	e0bffb17 	ldw	r2,-20(fp)
   8a930:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8a934:	e0bffa17 	ldw	r2,-24(fp)
   8a938:	10bfffc4 	addi	r2,r2,-1
   8a93c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8a940:	e0bffa17 	ldw	r2,-24(fp)
   8a944:	10000526 	beq	r2,zero,8a95c <altera_avalon_jtag_uart_irq+0x1a8>
   8a948:	e0bffb17 	ldw	r2,-20(fp)
   8a94c:	10c00d17 	ldw	r3,52(r2)
   8a950:	e0bffb17 	ldw	r2,-20(fp)
   8a954:	10800c17 	ldw	r2,48(r2)
   8a958:	18bfe51e 	bne	r3,r2,8a8f0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8a95c:	e0bffa17 	ldw	r2,-24(fp)
   8a960:	103f9e26 	beq	r2,zero,8a7dc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8a964:	e0bffb17 	ldw	r2,-20(fp)
   8a968:	10c00817 	ldw	r3,32(r2)
   8a96c:	00bfff44 	movi	r2,-3
   8a970:	1886703a 	and	r3,r3,r2
   8a974:	e0bffb17 	ldw	r2,-20(fp)
   8a978:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8a97c:	e0bffb17 	ldw	r2,-20(fp)
   8a980:	10800017 	ldw	r2,0(r2)
   8a984:	10800104 	addi	r2,r2,4
   8a988:	e0fffb17 	ldw	r3,-20(fp)
   8a98c:	18c00817 	ldw	r3,32(r3)
   8a990:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8a994:	e0bffc17 	ldw	r2,-16(fp)
   8a998:	10800104 	addi	r2,r2,4
   8a99c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8a9a0:	003f8e06 	br	8a7dc <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8a9a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8a9a8:	e037883a 	mov	sp,fp
   8a9ac:	df000017 	ldw	fp,0(sp)
   8a9b0:	dec00104 	addi	sp,sp,4
   8a9b4:	f800283a 	ret

0008a9b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8a9b8:	defffc04 	addi	sp,sp,-16
   8a9bc:	df000315 	stw	fp,12(sp)
   8a9c0:	df000304 	addi	fp,sp,12
   8a9c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8a9c8:	e0bfff17 	ldw	r2,-4(fp)
   8a9cc:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8a9d0:	e0bffd17 	ldw	r2,-12(fp)
   8a9d4:	10800017 	ldw	r2,0(r2)
   8a9d8:	10800104 	addi	r2,r2,4
   8a9dc:	10800037 	ldwio	r2,0(r2)
   8a9e0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8a9e4:	e0bffe17 	ldw	r2,-8(fp)
   8a9e8:	1081000c 	andi	r2,r2,1024
   8a9ec:	10000a26 	beq	r2,zero,8aa18 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8a9f0:	e0bffd17 	ldw	r2,-12(fp)
   8a9f4:	10800017 	ldw	r2,0(r2)
   8a9f8:	10800104 	addi	r2,r2,4
   8a9fc:	e0fffd17 	ldw	r3,-12(fp)
   8aa00:	18c00817 	ldw	r3,32(r3)
   8aa04:	18c10014 	ori	r3,r3,1024
   8aa08:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8aa0c:	e0bffd17 	ldw	r2,-12(fp)
   8aa10:	10000915 	stw	zero,36(r2)
   8aa14:	00000a06 	br	8aa40 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8aa18:	e0bffd17 	ldw	r2,-12(fp)
   8aa1c:	10800917 	ldw	r2,36(r2)
   8aa20:	00e00034 	movhi	r3,32768
   8aa24:	18ffff04 	addi	r3,r3,-4
   8aa28:	18800536 	bltu	r3,r2,8aa40 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   8aa2c:	e0bffd17 	ldw	r2,-12(fp)
   8aa30:	10800917 	ldw	r2,36(r2)
   8aa34:	10c00044 	addi	r3,r2,1
   8aa38:	e0bffd17 	ldw	r2,-12(fp)
   8aa3c:	10c00915 	stw	r3,36(r2)
   8aa40:	00800274 	movhi	r2,9
   8aa44:	10817504 	addi	r2,r2,1492
   8aa48:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8aa4c:	e037883a 	mov	sp,fp
   8aa50:	df000017 	ldw	fp,0(sp)
   8aa54:	dec00104 	addi	sp,sp,4
   8aa58:	f800283a 	ret

0008aa5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8aa5c:	defffd04 	addi	sp,sp,-12
   8aa60:	df000215 	stw	fp,8(sp)
   8aa64:	df000204 	addi	fp,sp,8
   8aa68:	e13ffe15 	stw	r4,-8(fp)
   8aa6c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8aa70:	00000506 	br	8aa88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8aa74:	e0bfff17 	ldw	r2,-4(fp)
   8aa78:	1090000c 	andi	r2,r2,16384
   8aa7c:	10000226 	beq	r2,zero,8aa88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8aa80:	00bffd44 	movi	r2,-11
   8aa84:	00000b06 	br	8aab4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8aa88:	e0bffe17 	ldw	r2,-8(fp)
   8aa8c:	10c00d17 	ldw	r3,52(r2)
   8aa90:	e0bffe17 	ldw	r2,-8(fp)
   8aa94:	10800c17 	ldw	r2,48(r2)
   8aa98:	18800526 	beq	r3,r2,8aab0 <altera_avalon_jtag_uart_close+0x54>
   8aa9c:	e0bffe17 	ldw	r2,-8(fp)
   8aaa0:	10c00917 	ldw	r3,36(r2)
   8aaa4:	e0bffe17 	ldw	r2,-8(fp)
   8aaa8:	10800117 	ldw	r2,4(r2)
   8aaac:	18bff136 	bltu	r3,r2,8aa74 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8aab0:	0005883a 	mov	r2,zero
}
   8aab4:	e037883a 	mov	sp,fp
   8aab8:	df000017 	ldw	fp,0(sp)
   8aabc:	dec00104 	addi	sp,sp,4
   8aac0:	f800283a 	ret

0008aac4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8aac4:	defffa04 	addi	sp,sp,-24
   8aac8:	df000515 	stw	fp,20(sp)
   8aacc:	df000504 	addi	fp,sp,20
   8aad0:	e13ffd15 	stw	r4,-12(fp)
   8aad4:	e17ffe15 	stw	r5,-8(fp)
   8aad8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8aadc:	00bff9c4 	movi	r2,-25
   8aae0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8aae4:	e0bffe17 	ldw	r2,-8(fp)
   8aae8:	10da8060 	cmpeqi	r3,r2,27137
   8aaec:	1800031e 	bne	r3,zero,8aafc <altera_avalon_jtag_uart_ioctl+0x38>
   8aaf0:	109a80a0 	cmpeqi	r2,r2,27138
   8aaf4:	1000181e 	bne	r2,zero,8ab58 <altera_avalon_jtag_uart_ioctl+0x94>
   8aaf8:	00002606 	br	8ab94 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8aafc:	e0bffd17 	ldw	r2,-12(fp)
   8ab00:	10c00117 	ldw	r3,4(r2)
   8ab04:	00a00034 	movhi	r2,32768
   8ab08:	10bfffc4 	addi	r2,r2,-1
   8ab0c:	18802226 	beq	r3,r2,8ab98 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   8ab10:	e0bfff17 	ldw	r2,-4(fp)
   8ab14:	10800017 	ldw	r2,0(r2)
   8ab18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8ab1c:	e0bffc17 	ldw	r2,-16(fp)
   8ab20:	10800090 	cmplti	r2,r2,2
   8ab24:	1000061e 	bne	r2,zero,8ab40 <altera_avalon_jtag_uart_ioctl+0x7c>
   8ab28:	e0fffc17 	ldw	r3,-16(fp)
   8ab2c:	00a00034 	movhi	r2,32768
   8ab30:	10bfffc4 	addi	r2,r2,-1
   8ab34:	18800226 	beq	r3,r2,8ab40 <altera_avalon_jtag_uart_ioctl+0x7c>
   8ab38:	e0bffc17 	ldw	r2,-16(fp)
   8ab3c:	00000206 	br	8ab48 <altera_avalon_jtag_uart_ioctl+0x84>
   8ab40:	00a00034 	movhi	r2,32768
   8ab44:	10bfff84 	addi	r2,r2,-2
   8ab48:	e0fffd17 	ldw	r3,-12(fp)
   8ab4c:	18800115 	stw	r2,4(r3)
      rc = 0;
   8ab50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8ab54:	00001006 	br	8ab98 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8ab58:	e0bffd17 	ldw	r2,-12(fp)
   8ab5c:	10c00117 	ldw	r3,4(r2)
   8ab60:	00a00034 	movhi	r2,32768
   8ab64:	10bfffc4 	addi	r2,r2,-1
   8ab68:	18800d26 	beq	r3,r2,8aba0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ab6c:	e0bffd17 	ldw	r2,-12(fp)
   8ab70:	10c00917 	ldw	r3,36(r2)
   8ab74:	e0bffd17 	ldw	r2,-12(fp)
   8ab78:	10800117 	ldw	r2,4(r2)
   8ab7c:	1885803a 	cmpltu	r2,r3,r2
   8ab80:	10c03fcc 	andi	r3,r2,255
   8ab84:	e0bfff17 	ldw	r2,-4(fp)
   8ab88:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8ab8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8ab90:	00000306 	br	8aba0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   8ab94:	00000306 	br	8aba4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8ab98:	0001883a 	nop
   8ab9c:	00000106 	br	8aba4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8aba0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8aba4:	e0bffb17 	ldw	r2,-20(fp)
}
   8aba8:	e037883a 	mov	sp,fp
   8abac:	df000017 	ldw	fp,0(sp)
   8abb0:	dec00104 	addi	sp,sp,4
   8abb4:	f800283a 	ret

0008abb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8abb8:	defff304 	addi	sp,sp,-52
   8abbc:	dfc00c15 	stw	ra,48(sp)
   8abc0:	df000b15 	stw	fp,44(sp)
   8abc4:	df000b04 	addi	fp,sp,44
   8abc8:	e13ffc15 	stw	r4,-16(fp)
   8abcc:	e17ffd15 	stw	r5,-12(fp)
   8abd0:	e1bffe15 	stw	r6,-8(fp)
   8abd4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8abd8:	e0bffd17 	ldw	r2,-12(fp)
   8abdc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8abe0:	00004706 	br	8ad00 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8abe4:	e0bffc17 	ldw	r2,-16(fp)
   8abe8:	10800a17 	ldw	r2,40(r2)
   8abec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8abf0:	e0bffc17 	ldw	r2,-16(fp)
   8abf4:	10800b17 	ldw	r2,44(r2)
   8abf8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8abfc:	e0fff717 	ldw	r3,-36(fp)
   8ac00:	e0bff817 	ldw	r2,-32(fp)
   8ac04:	18800536 	bltu	r3,r2,8ac1c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8ac08:	e0fff717 	ldw	r3,-36(fp)
   8ac0c:	e0bff817 	ldw	r2,-32(fp)
   8ac10:	1885c83a 	sub	r2,r3,r2
   8ac14:	e0bff615 	stw	r2,-40(fp)
   8ac18:	00000406 	br	8ac2c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8ac1c:	00c20004 	movi	r3,2048
   8ac20:	e0bff817 	ldw	r2,-32(fp)
   8ac24:	1885c83a 	sub	r2,r3,r2
   8ac28:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ac2c:	e0bff617 	ldw	r2,-40(fp)
   8ac30:	10001e26 	beq	r2,zero,8acac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8ac34:	e0fffe17 	ldw	r3,-8(fp)
   8ac38:	e0bff617 	ldw	r2,-40(fp)
   8ac3c:	1880022e 	bgeu	r3,r2,8ac48 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8ac40:	e0bffe17 	ldw	r2,-8(fp)
   8ac44:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8ac48:	e0bff817 	ldw	r2,-32(fp)
   8ac4c:	10800e04 	addi	r2,r2,56
   8ac50:	e0fffc17 	ldw	r3,-16(fp)
   8ac54:	1885883a 	add	r2,r3,r2
   8ac58:	e13ff517 	ldw	r4,-44(fp)
   8ac5c:	100b883a 	mov	r5,r2
   8ac60:	e1bff617 	ldw	r6,-40(fp)
   8ac64:	008598c0 	call	8598c <memcpy>
      ptr   += n;
   8ac68:	e0fff517 	ldw	r3,-44(fp)
   8ac6c:	e0bff617 	ldw	r2,-40(fp)
   8ac70:	1885883a 	add	r2,r3,r2
   8ac74:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8ac78:	e0fffe17 	ldw	r3,-8(fp)
   8ac7c:	e0bff617 	ldw	r2,-40(fp)
   8ac80:	1885c83a 	sub	r2,r3,r2
   8ac84:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ac88:	e0fff817 	ldw	r3,-32(fp)
   8ac8c:	e0bff617 	ldw	r2,-40(fp)
   8ac90:	1885883a 	add	r2,r3,r2
   8ac94:	10c1ffcc 	andi	r3,r2,2047
   8ac98:	e0bffc17 	ldw	r2,-16(fp)
   8ac9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8aca0:	e0bffe17 	ldw	r2,-8(fp)
   8aca4:	00bfcf16 	blt	zero,r2,8abe4 <altera_avalon_jtag_uart_read+0x2c>
   8aca8:	00000106 	br	8acb0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8acac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8acb0:	e0fff517 	ldw	r3,-44(fp)
   8acb4:	e0bffd17 	ldw	r2,-12(fp)
   8acb8:	1880141e 	bne	r3,r2,8ad0c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8acbc:	e0bfff17 	ldw	r2,-4(fp)
   8acc0:	1090000c 	andi	r2,r2,16384
   8acc4:	1000131e 	bne	r2,zero,8ad14 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8acc8:	0001883a 	nop
   8accc:	e0bffc17 	ldw	r2,-16(fp)
   8acd0:	10c00a17 	ldw	r3,40(r2)
   8acd4:	e0bff717 	ldw	r2,-36(fp)
   8acd8:	1880051e 	bne	r3,r2,8acf0 <altera_avalon_jtag_uart_read+0x138>
   8acdc:	e0bffc17 	ldw	r2,-16(fp)
   8ace0:	10c00917 	ldw	r3,36(r2)
   8ace4:	e0bffc17 	ldw	r2,-16(fp)
   8ace8:	10800117 	ldw	r2,4(r2)
   8acec:	18bff736 	bltu	r3,r2,8accc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8acf0:	e0bffc17 	ldw	r2,-16(fp)
   8acf4:	10c00a17 	ldw	r3,40(r2)
   8acf8:	e0bff717 	ldw	r2,-36(fp)
   8acfc:	18800726 	beq	r3,r2,8ad1c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8ad00:	e0bffe17 	ldw	r2,-8(fp)
   8ad04:	00bfb716 	blt	zero,r2,8abe4 <altera_avalon_jtag_uart_read+0x2c>
   8ad08:	00000506 	br	8ad20 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8ad0c:	0001883a 	nop
   8ad10:	00000306 	br	8ad20 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8ad14:	0001883a 	nop
   8ad18:	00000106 	br	8ad20 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8ad1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8ad20:	e0fff517 	ldw	r3,-44(fp)
   8ad24:	e0bffd17 	ldw	r2,-12(fp)
   8ad28:	18801726 	beq	r3,r2,8ad88 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ad2c:	0005303a 	rdctl	r2,status
   8ad30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ad34:	e0fffa17 	ldw	r3,-24(fp)
   8ad38:	00bfff84 	movi	r2,-2
   8ad3c:	1884703a 	and	r2,r3,r2
   8ad40:	1001703a 	wrctl	status,r2
  
  return context;
   8ad44:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8ad48:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ad4c:	e0bffc17 	ldw	r2,-16(fp)
   8ad50:	10800817 	ldw	r2,32(r2)
   8ad54:	10c00054 	ori	r3,r2,1
   8ad58:	e0bffc17 	ldw	r2,-16(fp)
   8ad5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ad60:	e0bffc17 	ldw	r2,-16(fp)
   8ad64:	10800017 	ldw	r2,0(r2)
   8ad68:	10800104 	addi	r2,r2,4
   8ad6c:	e0fffc17 	ldw	r3,-16(fp)
   8ad70:	18c00817 	ldw	r3,32(r3)
   8ad74:	10c00035 	stwio	r3,0(r2)
   8ad78:	e0bff917 	ldw	r2,-28(fp)
   8ad7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ad80:	e0bffb17 	ldw	r2,-20(fp)
   8ad84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8ad88:	e0fff517 	ldw	r3,-44(fp)
   8ad8c:	e0bffd17 	ldw	r2,-12(fp)
   8ad90:	18800426 	beq	r3,r2,8ada4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   8ad94:	e0fff517 	ldw	r3,-44(fp)
   8ad98:	e0bffd17 	ldw	r2,-12(fp)
   8ad9c:	1885c83a 	sub	r2,r3,r2
   8ada0:	00000606 	br	8adbc <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   8ada4:	e0bfff17 	ldw	r2,-4(fp)
   8ada8:	1090000c 	andi	r2,r2,16384
   8adac:	10000226 	beq	r2,zero,8adb8 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   8adb0:	00bffd44 	movi	r2,-11
   8adb4:	00000106 	br	8adbc <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   8adb8:	00bffec4 	movi	r2,-5
}
   8adbc:	e037883a 	mov	sp,fp
   8adc0:	dfc00117 	ldw	ra,4(sp)
   8adc4:	df000017 	ldw	fp,0(sp)
   8adc8:	dec00204 	addi	sp,sp,8
   8adcc:	f800283a 	ret

0008add0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8add0:	defff304 	addi	sp,sp,-52
   8add4:	dfc00c15 	stw	ra,48(sp)
   8add8:	df000b15 	stw	fp,44(sp)
   8addc:	df000b04 	addi	fp,sp,44
   8ade0:	e13ffc15 	stw	r4,-16(fp)
   8ade4:	e17ffd15 	stw	r5,-12(fp)
   8ade8:	e1bffe15 	stw	r6,-8(fp)
   8adec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8adf0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8adf4:	e0bffd17 	ldw	r2,-12(fp)
   8adf8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8adfc:	00003706 	br	8aedc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8ae00:	e0bffc17 	ldw	r2,-16(fp)
   8ae04:	10800c17 	ldw	r2,48(r2)
   8ae08:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   8ae0c:	e0bffc17 	ldw	r2,-16(fp)
   8ae10:	10800d17 	ldw	r2,52(r2)
   8ae14:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8ae18:	e0fff817 	ldw	r3,-32(fp)
   8ae1c:	e0bff517 	ldw	r2,-44(fp)
   8ae20:	1880062e 	bgeu	r3,r2,8ae3c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8ae24:	e0fff517 	ldw	r3,-44(fp)
   8ae28:	e0bff817 	ldw	r2,-32(fp)
   8ae2c:	1885c83a 	sub	r2,r3,r2
   8ae30:	10bfffc4 	addi	r2,r2,-1
   8ae34:	e0bff615 	stw	r2,-40(fp)
   8ae38:	00000b06 	br	8ae68 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8ae3c:	e0bff517 	ldw	r2,-44(fp)
   8ae40:	10000526 	beq	r2,zero,8ae58 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8ae44:	00c20004 	movi	r3,2048
   8ae48:	e0bff817 	ldw	r2,-32(fp)
   8ae4c:	1885c83a 	sub	r2,r3,r2
   8ae50:	e0bff615 	stw	r2,-40(fp)
   8ae54:	00000406 	br	8ae68 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8ae58:	00c1ffc4 	movi	r3,2047
   8ae5c:	e0bff817 	ldw	r2,-32(fp)
   8ae60:	1885c83a 	sub	r2,r3,r2
   8ae64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ae68:	e0bff617 	ldw	r2,-40(fp)
   8ae6c:	10001e26 	beq	r2,zero,8aee8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8ae70:	e0fffe17 	ldw	r3,-8(fp)
   8ae74:	e0bff617 	ldw	r2,-40(fp)
   8ae78:	1880022e 	bgeu	r3,r2,8ae84 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8ae7c:	e0bffe17 	ldw	r2,-8(fp)
   8ae80:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8ae84:	e0bff817 	ldw	r2,-32(fp)
   8ae88:	10820e04 	addi	r2,r2,2104
   8ae8c:	e0fffc17 	ldw	r3,-16(fp)
   8ae90:	1885883a 	add	r2,r3,r2
   8ae94:	1009883a 	mov	r4,r2
   8ae98:	e17ffd17 	ldw	r5,-12(fp)
   8ae9c:	e1bff617 	ldw	r6,-40(fp)
   8aea0:	008598c0 	call	8598c <memcpy>
      ptr   += n;
   8aea4:	e0fffd17 	ldw	r3,-12(fp)
   8aea8:	e0bff617 	ldw	r2,-40(fp)
   8aeac:	1885883a 	add	r2,r3,r2
   8aeb0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8aeb4:	e0fffe17 	ldw	r3,-8(fp)
   8aeb8:	e0bff617 	ldw	r2,-40(fp)
   8aebc:	1885c83a 	sub	r2,r3,r2
   8aec0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8aec4:	e0fff817 	ldw	r3,-32(fp)
   8aec8:	e0bff617 	ldw	r2,-40(fp)
   8aecc:	1885883a 	add	r2,r3,r2
   8aed0:	10c1ffcc 	andi	r3,r2,2047
   8aed4:	e0bffc17 	ldw	r2,-16(fp)
   8aed8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8aedc:	e0bffe17 	ldw	r2,-8(fp)
   8aee0:	00bfc716 	blt	zero,r2,8ae00 <altera_avalon_jtag_uart_write+0x30>
   8aee4:	00000106 	br	8aeec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8aee8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aeec:	0005303a 	rdctl	r2,status
   8aef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aef4:	e0fffa17 	ldw	r3,-24(fp)
   8aef8:	00bfff84 	movi	r2,-2
   8aefc:	1884703a 	and	r2,r3,r2
   8af00:	1001703a 	wrctl	status,r2
  
  return context;
   8af04:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8af08:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8af0c:	e0bffc17 	ldw	r2,-16(fp)
   8af10:	10800817 	ldw	r2,32(r2)
   8af14:	10c00094 	ori	r3,r2,2
   8af18:	e0bffc17 	ldw	r2,-16(fp)
   8af1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8af20:	e0bffc17 	ldw	r2,-16(fp)
   8af24:	10800017 	ldw	r2,0(r2)
   8af28:	10800104 	addi	r2,r2,4
   8af2c:	e0fffc17 	ldw	r3,-16(fp)
   8af30:	18c00817 	ldw	r3,32(r3)
   8af34:	10c00035 	stwio	r3,0(r2)
   8af38:	e0bff917 	ldw	r2,-28(fp)
   8af3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8af40:	e0bffb17 	ldw	r2,-20(fp)
   8af44:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8af48:	e0bffe17 	ldw	r2,-8(fp)
   8af4c:	0080110e 	bge	zero,r2,8af94 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8af50:	e0bfff17 	ldw	r2,-4(fp)
   8af54:	1090000c 	andi	r2,r2,16384
   8af58:	1000111e 	bne	r2,zero,8afa0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8af5c:	0001883a 	nop
   8af60:	e0bffc17 	ldw	r2,-16(fp)
   8af64:	10c00d17 	ldw	r3,52(r2)
   8af68:	e0bff517 	ldw	r2,-44(fp)
   8af6c:	1880051e 	bne	r3,r2,8af84 <altera_avalon_jtag_uart_write+0x1b4>
   8af70:	e0bffc17 	ldw	r2,-16(fp)
   8af74:	10c00917 	ldw	r3,36(r2)
   8af78:	e0bffc17 	ldw	r2,-16(fp)
   8af7c:	10800117 	ldw	r2,4(r2)
   8af80:	18bff736 	bltu	r3,r2,8af60 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8af84:	e0bffc17 	ldw	r2,-16(fp)
   8af88:	10c00d17 	ldw	r3,52(r2)
   8af8c:	e0bff517 	ldw	r2,-44(fp)
   8af90:	18800526 	beq	r3,r2,8afa8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8af94:	e0bffe17 	ldw	r2,-8(fp)
   8af98:	00bfd016 	blt	zero,r2,8aedc <altera_avalon_jtag_uart_write+0x10c>
   8af9c:	00000306 	br	8afac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8afa0:	0001883a 	nop
   8afa4:	00000106 	br	8afac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   8afa8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8afac:	e0fffd17 	ldw	r3,-12(fp)
   8afb0:	e0bff717 	ldw	r2,-36(fp)
   8afb4:	18800426 	beq	r3,r2,8afc8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8afb8:	e0fffd17 	ldw	r3,-12(fp)
   8afbc:	e0bff717 	ldw	r2,-36(fp)
   8afc0:	1885c83a 	sub	r2,r3,r2
   8afc4:	00000606 	br	8afe0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8afc8:	e0bfff17 	ldw	r2,-4(fp)
   8afcc:	1090000c 	andi	r2,r2,16384
   8afd0:	10000226 	beq	r2,zero,8afdc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8afd4:	00bffd44 	movi	r2,-11
   8afd8:	00000106 	br	8afe0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8afdc:	00bffec4 	movi	r2,-5
}
   8afe0:	e037883a 	mov	sp,fp
   8afe4:	dfc00117 	ldw	ra,4(sp)
   8afe8:	df000017 	ldw	fp,0(sp)
   8afec:	dec00204 	addi	sp,sp,8
   8aff0:	f800283a 	ret

0008aff4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8aff4:	defffa04 	addi	sp,sp,-24
   8aff8:	dfc00515 	stw	ra,20(sp)
   8affc:	df000415 	stw	fp,16(sp)
   8b000:	df000404 	addi	fp,sp,16
   8b004:	e13ffd15 	stw	r4,-12(fp)
   8b008:	e17ffe15 	stw	r5,-8(fp)
   8b00c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8b010:	e0bffd17 	ldw	r2,-12(fp)
   8b014:	10800017 	ldw	r2,0(r2)
   8b018:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   8b01c:	e0bffc17 	ldw	r2,-16(fp)
   8b020:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8b024:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   8b028:	10800217 	ldw	r2,8(r2)
   8b02c:	1809883a 	mov	r4,r3
   8b030:	e17ffe17 	ldw	r5,-8(fp)
   8b034:	e1bfff17 	ldw	r6,-4(fp)
   8b038:	100f883a 	mov	r7,r2
   8b03c:	008b4fc0 	call	8b4fc <altera_avalon_uart_read>
      fd->fd_flags);
}
   8b040:	e037883a 	mov	sp,fp
   8b044:	dfc00117 	ldw	ra,4(sp)
   8b048:	df000017 	ldw	fp,0(sp)
   8b04c:	dec00204 	addi	sp,sp,8
   8b050:	f800283a 	ret

0008b054 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8b054:	defffa04 	addi	sp,sp,-24
   8b058:	dfc00515 	stw	ra,20(sp)
   8b05c:	df000415 	stw	fp,16(sp)
   8b060:	df000404 	addi	fp,sp,16
   8b064:	e13ffd15 	stw	r4,-12(fp)
   8b068:	e17ffe15 	stw	r5,-8(fp)
   8b06c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8b070:	e0bffd17 	ldw	r2,-12(fp)
   8b074:	10800017 	ldw	r2,0(r2)
   8b078:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8b07c:	e0bffc17 	ldw	r2,-16(fp)
   8b080:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8b084:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   8b088:	10800217 	ldw	r2,8(r2)
   8b08c:	1809883a 	mov	r4,r3
   8b090:	e17ffe17 	ldw	r5,-8(fp)
   8b094:	e1bfff17 	ldw	r6,-4(fp)
   8b098:	100f883a 	mov	r7,r2
   8b09c:	008b7500 	call	8b750 <altera_avalon_uart_write>
      fd->fd_flags);
}
   8b0a0:	e037883a 	mov	sp,fp
   8b0a4:	dfc00117 	ldw	ra,4(sp)
   8b0a8:	df000017 	ldw	fp,0(sp)
   8b0ac:	dec00204 	addi	sp,sp,8
   8b0b0:	f800283a 	ret

0008b0b4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   8b0b4:	defffc04 	addi	sp,sp,-16
   8b0b8:	dfc00315 	stw	ra,12(sp)
   8b0bc:	df000215 	stw	fp,8(sp)
   8b0c0:	df000204 	addi	fp,sp,8
   8b0c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   8b0c8:	e0bfff17 	ldw	r2,-4(fp)
   8b0cc:	10800017 	ldw	r2,0(r2)
   8b0d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   8b0d4:	e0bffe17 	ldw	r2,-8(fp)
   8b0d8:	10c00a04 	addi	r3,r2,40
   8b0dc:	e0bfff17 	ldw	r2,-4(fp)
   8b0e0:	10800217 	ldw	r2,8(r2)
   8b0e4:	1809883a 	mov	r4,r3
   8b0e8:	100b883a 	mov	r5,r2
   8b0ec:	008b4580 	call	8b458 <altera_avalon_uart_close>
}
   8b0f0:	e037883a 	mov	sp,fp
   8b0f4:	dfc00117 	ldw	ra,4(sp)
   8b0f8:	df000017 	ldw	fp,0(sp)
   8b0fc:	dec00204 	addi	sp,sp,8
   8b100:	f800283a 	ret

0008b104 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   8b104:	defff804 	addi	sp,sp,-32
   8b108:	dfc00715 	stw	ra,28(sp)
   8b10c:	df000615 	stw	fp,24(sp)
   8b110:	df000604 	addi	fp,sp,24
   8b114:	e13ffd15 	stw	r4,-12(fp)
   8b118:	e17ffe15 	stw	r5,-8(fp)
   8b11c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   8b120:	e0bffd17 	ldw	r2,-12(fp)
   8b124:	10800017 	ldw	r2,0(r2)
   8b128:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   8b12c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   8b130:	1000041e 	bne	r2,zero,8b144 <altera_avalon_uart_init+0x40>
   8b134:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   8b138:	1000021e 	bne	r2,zero,8b144 <altera_avalon_uart_init+0x40>
   8b13c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   8b140:	10000226 	beq	r2,zero,8b14c <altera_avalon_uart_init+0x48>
   8b144:	00800044 	movi	r2,1
   8b148:	00000106 	br	8b150 <altera_avalon_uart_init+0x4c>
   8b14c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   8b150:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   8b154:	e0bffc17 	ldw	r2,-16(fp)
   8b158:	10000f1e 	bne	r2,zero,8b198 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   8b15c:	e0bffd17 	ldw	r2,-12(fp)
   8b160:	00c32004 	movi	r3,3200
   8b164:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   8b168:	e0bffb17 	ldw	r2,-20(fp)
   8b16c:	10800304 	addi	r2,r2,12
   8b170:	e0fffd17 	ldw	r3,-12(fp)
   8b174:	18c00117 	ldw	r3,4(r3)
   8b178:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   8b17c:	d8000015 	stw	zero,0(sp)
   8b180:	e13ffe17 	ldw	r4,-8(fp)
   8b184:	e17fff17 	ldw	r5,-4(fp)
   8b188:	01800274 	movhi	r6,9
   8b18c:	31ac6b04 	addi	r6,r6,-20052
   8b190:	e1fffd17 	ldw	r7,-12(fp)
   8b194:	008bd6c0 	call	8bd6c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   8b198:	e037883a 	mov	sp,fp
   8b19c:	dfc00117 	ldw	ra,4(sp)
   8b1a0:	df000017 	ldw	fp,0(sp)
   8b1a4:	dec00204 	addi	sp,sp,8
   8b1a8:	f800283a 	ret

0008b1ac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   8b1ac:	defffa04 	addi	sp,sp,-24
   8b1b0:	dfc00515 	stw	ra,20(sp)
   8b1b4:	df000415 	stw	fp,16(sp)
   8b1b8:	df000404 	addi	fp,sp,16
   8b1bc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   8b1c0:	e0bfff17 	ldw	r2,-4(fp)
   8b1c4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   8b1c8:	e0bffc17 	ldw	r2,-16(fp)
   8b1cc:	10800017 	ldw	r2,0(r2)
   8b1d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   8b1d4:	e0bffd17 	ldw	r2,-12(fp)
   8b1d8:	10800204 	addi	r2,r2,8
   8b1dc:	10800037 	ldwio	r2,0(r2)
   8b1e0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   8b1e4:	e0bffd17 	ldw	r2,-12(fp)
   8b1e8:	10800204 	addi	r2,r2,8
   8b1ec:	0007883a 	mov	r3,zero
   8b1f0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   8b1f4:	e0bffd17 	ldw	r2,-12(fp)
   8b1f8:	10800204 	addi	r2,r2,8
   8b1fc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   8b200:	e0bffe17 	ldw	r2,-8(fp)
   8b204:	1080200c 	andi	r2,r2,128
   8b208:	10000326 	beq	r2,zero,8b218 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   8b20c:	e13ffc17 	ldw	r4,-16(fp)
   8b210:	e17ffe17 	ldw	r5,-8(fp)
   8b214:	008b2440 	call	8b244 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   8b218:	e0bffe17 	ldw	r2,-8(fp)
   8b21c:	1081100c 	andi	r2,r2,1088
   8b220:	10000326 	beq	r2,zero,8b230 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   8b224:	e13ffc17 	ldw	r4,-16(fp)
   8b228:	e17ffe17 	ldw	r5,-8(fp)
   8b22c:	008b31c0 	call	8b31c <altera_avalon_uart_txirq>
  }
  

}
   8b230:	e037883a 	mov	sp,fp
   8b234:	dfc00117 	ldw	ra,4(sp)
   8b238:	df000017 	ldw	fp,0(sp)
   8b23c:	dec00204 	addi	sp,sp,8
   8b240:	f800283a 	ret

0008b244 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8b244:	defffc04 	addi	sp,sp,-16
   8b248:	df000315 	stw	fp,12(sp)
   8b24c:	df000304 	addi	fp,sp,12
   8b250:	e13ffe15 	stw	r4,-8(fp)
   8b254:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   8b258:	e0bfff17 	ldw	r2,-4(fp)
   8b25c:	108000cc 	andi	r2,r2,3
   8b260:	1000291e 	bne	r2,zero,8b308 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   8b264:	e0bffe17 	ldw	r2,-8(fp)
   8b268:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8b26c:	e0bffe17 	ldw	r2,-8(fp)
   8b270:	10800317 	ldw	r2,12(r2)
   8b274:	10800044 	addi	r2,r2,1
   8b278:	10800fcc 	andi	r2,r2,63
   8b27c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   8b280:	e0bffe17 	ldw	r2,-8(fp)
   8b284:	10800317 	ldw	r2,12(r2)
   8b288:	e0fffe17 	ldw	r3,-8(fp)
   8b28c:	18c00017 	ldw	r3,0(r3)
   8b290:	18c00037 	ldwio	r3,0(r3)
   8b294:	e13ffe17 	ldw	r4,-8(fp)
   8b298:	2085883a 	add	r2,r4,r2
   8b29c:	10800704 	addi	r2,r2,28
   8b2a0:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   8b2a4:	e0bffe17 	ldw	r2,-8(fp)
   8b2a8:	e0fffd17 	ldw	r3,-12(fp)
   8b2ac:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8b2b0:	e0bffe17 	ldw	r2,-8(fp)
   8b2b4:	10800317 	ldw	r2,12(r2)
   8b2b8:	10800044 	addi	r2,r2,1
   8b2bc:	10800fcc 	andi	r2,r2,63
   8b2c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   8b2c4:	e0bffe17 	ldw	r2,-8(fp)
   8b2c8:	10c00217 	ldw	r3,8(r2)
   8b2cc:	e0bffd17 	ldw	r2,-12(fp)
   8b2d0:	18800e1e 	bne	r3,r2,8b30c <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8b2d4:	e0bffe17 	ldw	r2,-8(fp)
   8b2d8:	10c00117 	ldw	r3,4(r2)
   8b2dc:	00bfdfc4 	movi	r2,-129
   8b2e0:	1886703a 	and	r3,r3,r2
   8b2e4:	e0bffe17 	ldw	r2,-8(fp)
   8b2e8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   8b2ec:	e0bffe17 	ldw	r2,-8(fp)
   8b2f0:	10800017 	ldw	r2,0(r2)
   8b2f4:	10800304 	addi	r2,r2,12
   8b2f8:	e0fffe17 	ldw	r3,-8(fp)
   8b2fc:	18c00117 	ldw	r3,4(r3)
   8b300:	10c00035 	stwio	r3,0(r2)
   8b304:	00000106 	br	8b30c <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   8b308:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   8b30c:	e037883a 	mov	sp,fp
   8b310:	df000017 	ldw	fp,0(sp)
   8b314:	dec00104 	addi	sp,sp,4
   8b318:	f800283a 	ret

0008b31c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   8b31c:	defffd04 	addi	sp,sp,-12
   8b320:	df000215 	stw	fp,8(sp)
   8b324:	df000204 	addi	fp,sp,8
   8b328:	e13ffe15 	stw	r4,-8(fp)
   8b32c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   8b330:	e0bffe17 	ldw	r2,-8(fp)
   8b334:	10c00417 	ldw	r3,16(r2)
   8b338:	e0bffe17 	ldw	r2,-8(fp)
   8b33c:	10800517 	ldw	r2,20(r2)
   8b340:	18803026 	beq	r3,r2,8b404 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8b344:	e0bffe17 	ldw	r2,-8(fp)
   8b348:	10800617 	ldw	r2,24(r2)
   8b34c:	1080008c 	andi	r2,r2,2
   8b350:	10000326 	beq	r2,zero,8b360 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   8b354:	e0bfff17 	ldw	r2,-4(fp)
   8b358:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   8b35c:	10001b26 	beq	r2,zero,8b3cc <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   8b360:	e0bffe17 	ldw	r2,-8(fp)
   8b364:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   8b368:	e0bffe17 	ldw	r2,-8(fp)
   8b36c:	10800017 	ldw	r2,0(r2)
   8b370:	10800104 	addi	r2,r2,4
   8b374:	e0fffe17 	ldw	r3,-8(fp)
   8b378:	18c00417 	ldw	r3,16(r3)
   8b37c:	e13ffe17 	ldw	r4,-8(fp)
   8b380:	20c7883a 	add	r3,r4,r3
   8b384:	18c01704 	addi	r3,r3,92
   8b388:	18c00003 	ldbu	r3,0(r3)
   8b38c:	18c03fcc 	andi	r3,r3,255
   8b390:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   8b394:	e0bffe17 	ldw	r2,-8(fp)
   8b398:	10800417 	ldw	r2,16(r2)
   8b39c:	10800044 	addi	r2,r2,1
   8b3a0:	e0fffe17 	ldw	r3,-8(fp)
   8b3a4:	18800415 	stw	r2,16(r3)
   8b3a8:	10c00fcc 	andi	r3,r2,63
   8b3ac:	e0bffe17 	ldw	r2,-8(fp)
   8b3b0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8b3b4:	e0bffe17 	ldw	r2,-8(fp)
   8b3b8:	10800117 	ldw	r2,4(r2)
   8b3bc:	10c01014 	ori	r3,r2,64
   8b3c0:	e0bffe17 	ldw	r2,-8(fp)
   8b3c4:	10c00115 	stw	r3,4(r2)
   8b3c8:	00000e06 	br	8b404 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   8b3cc:	e0bffe17 	ldw	r2,-8(fp)
   8b3d0:	10800017 	ldw	r2,0(r2)
   8b3d4:	10800204 	addi	r2,r2,8
   8b3d8:	10800037 	ldwio	r2,0(r2)
   8b3dc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   8b3e0:	e0bfff17 	ldw	r2,-4(fp)
   8b3e4:	1082000c 	andi	r2,r2,2048
   8b3e8:	1000061e 	bne	r2,zero,8b404 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   8b3ec:	e0bffe17 	ldw	r2,-8(fp)
   8b3f0:	10c00117 	ldw	r3,4(r2)
   8b3f4:	00bfefc4 	movi	r2,-65
   8b3f8:	1886703a 	and	r3,r3,r2
   8b3fc:	e0bffe17 	ldw	r2,-8(fp)
   8b400:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   8b404:	e0bffe17 	ldw	r2,-8(fp)
   8b408:	10c00417 	ldw	r3,16(r2)
   8b40c:	e0bffe17 	ldw	r2,-8(fp)
   8b410:	10800517 	ldw	r2,20(r2)
   8b414:	1880061e 	bne	r3,r2,8b430 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8b418:	e0bffe17 	ldw	r2,-8(fp)
   8b41c:	10c00117 	ldw	r3,4(r2)
   8b420:	00beefc4 	movi	r2,-1089
   8b424:	1886703a 	and	r3,r3,r2
   8b428:	e0bffe17 	ldw	r2,-8(fp)
   8b42c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8b430:	e0bffe17 	ldw	r2,-8(fp)
   8b434:	10800017 	ldw	r2,0(r2)
   8b438:	10800304 	addi	r2,r2,12
   8b43c:	e0fffe17 	ldw	r3,-8(fp)
   8b440:	18c00117 	ldw	r3,4(r3)
   8b444:	10c00035 	stwio	r3,0(r2)
}
   8b448:	e037883a 	mov	sp,fp
   8b44c:	df000017 	ldw	fp,0(sp)
   8b450:	dec00104 	addi	sp,sp,4
   8b454:	f800283a 	ret

0008b458 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   8b458:	defffd04 	addi	sp,sp,-12
   8b45c:	df000215 	stw	fp,8(sp)
   8b460:	df000204 	addi	fp,sp,8
   8b464:	e13ffe15 	stw	r4,-8(fp)
   8b468:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8b46c:	00000506 	br	8b484 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8b470:	e0bfff17 	ldw	r2,-4(fp)
   8b474:	1090000c 	andi	r2,r2,16384
   8b478:	10000226 	beq	r2,zero,8b484 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8b47c:	00bffd44 	movi	r2,-11
   8b480:	00000606 	br	8b49c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   8b484:	e0bffe17 	ldw	r2,-8(fp)
   8b488:	10c00417 	ldw	r3,16(r2)
   8b48c:	e0bffe17 	ldw	r2,-8(fp)
   8b490:	10800517 	ldw	r2,20(r2)
   8b494:	18bff61e 	bne	r3,r2,8b470 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8b498:	0005883a 	mov	r2,zero
}
   8b49c:	e037883a 	mov	sp,fp
   8b4a0:	df000017 	ldw	fp,0(sp)
   8b4a4:	dec00104 	addi	sp,sp,4
   8b4a8:	f800283a 	ret

0008b4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b4ac:	defffe04 	addi	sp,sp,-8
   8b4b0:	dfc00115 	stw	ra,4(sp)
   8b4b4:	df000015 	stw	fp,0(sp)
   8b4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b4bc:	00800274 	movhi	r2,9
   8b4c0:	10ba9e04 	addi	r2,r2,-5512
   8b4c4:	10800017 	ldw	r2,0(r2)
   8b4c8:	10000526 	beq	r2,zero,8b4e0 <alt_get_errno+0x34>
   8b4cc:	00800274 	movhi	r2,9
   8b4d0:	10ba9e04 	addi	r2,r2,-5512
   8b4d4:	10800017 	ldw	r2,0(r2)
   8b4d8:	103ee83a 	callr	r2
   8b4dc:	00000206 	br	8b4e8 <alt_get_errno+0x3c>
   8b4e0:	00800274 	movhi	r2,9
   8b4e4:	10817004 	addi	r2,r2,1472
}
   8b4e8:	e037883a 	mov	sp,fp
   8b4ec:	dfc00117 	ldw	ra,4(sp)
   8b4f0:	df000017 	ldw	fp,0(sp)
   8b4f4:	dec00204 	addi	sp,sp,8
   8b4f8:	f800283a 	ret

0008b4fc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   8b4fc:	defff104 	addi	sp,sp,-60
   8b500:	dfc00e15 	stw	ra,56(sp)
   8b504:	df000d15 	stw	fp,52(sp)
   8b508:	df000d04 	addi	fp,sp,52
   8b50c:	e13ffc15 	stw	r4,-16(fp)
   8b510:	e17ffd15 	stw	r5,-12(fp)
   8b514:	e1bffe15 	stw	r6,-8(fp)
   8b518:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   8b51c:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
   8b520:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   8b524:	e0bfff17 	ldw	r2,-4(fp)
   8b528:	1090000c 	andi	r2,r2,16384
   8b52c:	1005003a 	cmpeq	r2,r2,zero
   8b530:	10803fcc 	andi	r2,r2,255
   8b534:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   8b538:	e0bffc17 	ldw	r2,-16(fp)
   8b53c:	10800217 	ldw	r2,8(r2)
   8b540:	10800044 	addi	r2,r2,1
   8b544:	10800fcc 	andi	r2,r2,63
   8b548:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8b54c:	00001906 	br	8b5b4 <altera_avalon_uart_read+0xb8>
    {
      count++;
   8b550:	e0bff417 	ldw	r2,-48(fp)
   8b554:	10800044 	addi	r2,r2,1
   8b558:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   8b55c:	e0bffc17 	ldw	r2,-16(fp)
   8b560:	10800217 	ldw	r2,8(r2)
   8b564:	e0fffc17 	ldw	r3,-16(fp)
   8b568:	1885883a 	add	r2,r3,r2
   8b56c:	10800704 	addi	r2,r2,28
   8b570:	10800003 	ldbu	r2,0(r2)
   8b574:	1007883a 	mov	r3,r2
   8b578:	e0bffd17 	ldw	r2,-12(fp)
   8b57c:	10c00005 	stb	r3,0(r2)
   8b580:	e0bffd17 	ldw	r2,-12(fp)
   8b584:	10800044 	addi	r2,r2,1
   8b588:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   8b58c:	e0bffc17 	ldw	r2,-16(fp)
   8b590:	10800217 	ldw	r2,8(r2)
   8b594:	10c00044 	addi	r3,r2,1
   8b598:	e0bffc17 	ldw	r2,-16(fp)
   8b59c:	10c00215 	stw	r3,8(r2)
   8b5a0:	e0bffc17 	ldw	r2,-16(fp)
   8b5a4:	10800217 	ldw	r2,8(r2)
   8b5a8:	10c00fcc 	andi	r3,r2,63
   8b5ac:	e0bffc17 	ldw	r2,-16(fp)
   8b5b0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   8b5b4:	e0fff417 	ldw	r3,-48(fp)
   8b5b8:	e0bffe17 	ldw	r2,-8(fp)
   8b5bc:	1880050e 	bge	r3,r2,8b5d4 <altera_avalon_uart_read+0xd8>
   8b5c0:	e0bffc17 	ldw	r2,-16(fp)
   8b5c4:	10c00217 	ldw	r3,8(r2)
   8b5c8:	e0bffc17 	ldw	r2,-16(fp)
   8b5cc:	10800317 	ldw	r2,12(r2)
   8b5d0:	18bfdf1e 	bne	r3,r2,8b550 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   8b5d4:	e0bff417 	ldw	r2,-48(fp)
   8b5d8:	1000241e 	bne	r2,zero,8b66c <altera_avalon_uart_read+0x170>
   8b5dc:	e0bffc17 	ldw	r2,-16(fp)
   8b5e0:	10c00217 	ldw	r3,8(r2)
   8b5e4:	e0bffc17 	ldw	r2,-16(fp)
   8b5e8:	10800317 	ldw	r2,12(r2)
   8b5ec:	18801f1e 	bne	r3,r2,8b66c <altera_avalon_uart_read+0x170>
    {
      if (!block)
   8b5f0:	e0bff517 	ldw	r2,-44(fp)
   8b5f4:	1000061e 	bne	r2,zero,8b610 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   8b5f8:	008b4ac0 	call	8b4ac <alt_get_errno>
   8b5fc:	00c002c4 	movi	r3,11
   8b600:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   8b604:	00800044 	movi	r2,1
   8b608:	e0bff305 	stb	r2,-52(fp)
        break;
   8b60c:	00001b06 	br	8b67c <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b610:	0005303a 	rdctl	r2,status
   8b614:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b618:	e0fff817 	ldw	r3,-32(fp)
   8b61c:	00bfff84 	movi	r2,-2
   8b620:	1884703a 	and	r2,r3,r2
   8b624:	1001703a 	wrctl	status,r2
  
  return context;
   8b628:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   8b62c:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8b630:	e0bffc17 	ldw	r2,-16(fp)
   8b634:	10800117 	ldw	r2,4(r2)
   8b638:	10c02014 	ori	r3,r2,128
   8b63c:	e0bffc17 	ldw	r2,-16(fp)
   8b640:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8b644:	e0bffc17 	ldw	r2,-16(fp)
   8b648:	10800017 	ldw	r2,0(r2)
   8b64c:	10800304 	addi	r2,r2,12
   8b650:	e0fffc17 	ldw	r3,-16(fp)
   8b654:	18c00117 	ldw	r3,4(r3)
   8b658:	10c00035 	stwio	r3,0(r2)
   8b65c:	e0bff717 	ldw	r2,-36(fp)
   8b660:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b664:	e0bff917 	ldw	r2,-28(fp)
   8b668:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   8b66c:	e0bff417 	ldw	r2,-48(fp)
   8b670:	1000021e 	bne	r2,zero,8b67c <altera_avalon_uart_read+0x180>
   8b674:	e0bffe17 	ldw	r2,-8(fp)
   8b678:	103fce1e 	bne	r2,zero,8b5b4 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b67c:	0005303a 	rdctl	r2,status
   8b680:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b684:	e0fffa17 	ldw	r3,-24(fp)
   8b688:	00bfff84 	movi	r2,-2
   8b68c:	1884703a 	and	r2,r3,r2
   8b690:	1001703a 	wrctl	status,r2
  
  return context;
   8b694:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   8b698:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   8b69c:	e0bffc17 	ldw	r2,-16(fp)
   8b6a0:	10800117 	ldw	r2,4(r2)
   8b6a4:	10c02014 	ori	r3,r2,128
   8b6a8:	e0bffc17 	ldw	r2,-16(fp)
   8b6ac:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8b6b0:	e0bffc17 	ldw	r2,-16(fp)
   8b6b4:	10800017 	ldw	r2,0(r2)
   8b6b8:	10800304 	addi	r2,r2,12
   8b6bc:	e0fffc17 	ldw	r3,-16(fp)
   8b6c0:	18c00117 	ldw	r3,4(r3)
   8b6c4:	10c00035 	stwio	r3,0(r2)
   8b6c8:	e0bff717 	ldw	r2,-36(fp)
   8b6cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b6d0:	e0bffb17 	ldw	r2,-20(fp)
   8b6d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   8b6d8:	e0bff303 	ldbu	r2,-52(fp)
   8b6dc:	10000226 	beq	r2,zero,8b6e8 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
   8b6e0:	00bffd44 	movi	r2,-11
   8b6e4:	00000106 	br	8b6ec <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
   8b6e8:	e0bff417 	ldw	r2,-48(fp)
  }
}
   8b6ec:	e037883a 	mov	sp,fp
   8b6f0:	dfc00117 	ldw	ra,4(sp)
   8b6f4:	df000017 	ldw	fp,0(sp)
   8b6f8:	dec00204 	addi	sp,sp,8
   8b6fc:	f800283a 	ret

0008b700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b700:	defffe04 	addi	sp,sp,-8
   8b704:	dfc00115 	stw	ra,4(sp)
   8b708:	df000015 	stw	fp,0(sp)
   8b70c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8b710:	00800274 	movhi	r2,9
   8b714:	10ba9e04 	addi	r2,r2,-5512
   8b718:	10800017 	ldw	r2,0(r2)
   8b71c:	10000526 	beq	r2,zero,8b734 <alt_get_errno+0x34>
   8b720:	00800274 	movhi	r2,9
   8b724:	10ba9e04 	addi	r2,r2,-5512
   8b728:	10800017 	ldw	r2,0(r2)
   8b72c:	103ee83a 	callr	r2
   8b730:	00000206 	br	8b73c <alt_get_errno+0x3c>
   8b734:	00800274 	movhi	r2,9
   8b738:	10817004 	addi	r2,r2,1472
}
   8b73c:	e037883a 	mov	sp,fp
   8b740:	dfc00117 	ldw	ra,4(sp)
   8b744:	df000017 	ldw	fp,0(sp)
   8b748:	dec00204 	addi	sp,sp,8
   8b74c:	f800283a 	ret

0008b750 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   8b750:	defff204 	addi	sp,sp,-56
   8b754:	dfc00d15 	stw	ra,52(sp)
   8b758:	df000c15 	stw	fp,48(sp)
   8b75c:	df000c04 	addi	fp,sp,48
   8b760:	e13ffc15 	stw	r4,-16(fp)
   8b764:	e17ffd15 	stw	r5,-12(fp)
   8b768:	e1bffe15 	stw	r6,-8(fp)
   8b76c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   8b770:	e0bffe17 	ldw	r2,-8(fp)
   8b774:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   8b778:	e0bfff17 	ldw	r2,-4(fp)
   8b77c:	1090000c 	andi	r2,r2,16384
   8b780:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8b784:	00003b06 	br	8b874 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   8b788:	e0bffc17 	ldw	r2,-16(fp)
   8b78c:	10800517 	ldw	r2,20(r2)
   8b790:	10800044 	addi	r2,r2,1
   8b794:	10800fcc 	andi	r2,r2,63
   8b798:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   8b79c:	e0bffc17 	ldw	r2,-16(fp)
   8b7a0:	10c00417 	ldw	r3,16(r2)
   8b7a4:	e0bff617 	ldw	r2,-40(fp)
   8b7a8:	1880211e 	bne	r3,r2,8b830 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
   8b7ac:	e0bff517 	ldw	r2,-44(fp)
   8b7b0:	10000426 	beq	r2,zero,8b7c4 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   8b7b4:	008b7000 	call	8b700 <alt_get_errno>
   8b7b8:	00c002c4 	movi	r3,11
   8b7bc:	10c00015 	stw	r3,0(r2)
        break;
   8b7c0:	00002e06 	br	8b87c <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b7c4:	0005303a 	rdctl	r2,status
   8b7c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b7cc:	e0fff817 	ldw	r3,-32(fp)
   8b7d0:	00bfff84 	movi	r2,-2
   8b7d4:	1884703a 	and	r2,r3,r2
   8b7d8:	1001703a 	wrctl	status,r2
  
  return context;
   8b7dc:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   8b7e0:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8b7e4:	e0bffc17 	ldw	r2,-16(fp)
   8b7e8:	10800117 	ldw	r2,4(r2)
   8b7ec:	10c11014 	ori	r3,r2,1088
   8b7f0:	e0bffc17 	ldw	r2,-16(fp)
   8b7f4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8b7f8:	e0bffc17 	ldw	r2,-16(fp)
   8b7fc:	10800017 	ldw	r2,0(r2)
   8b800:	10800304 	addi	r2,r2,12
   8b804:	e0fffc17 	ldw	r3,-16(fp)
   8b808:	18c00117 	ldw	r3,4(r3)
   8b80c:	10c00035 	stwio	r3,0(r2)
   8b810:	e0bff717 	ldw	r2,-36(fp)
   8b814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b818:	e0bff917 	ldw	r2,-28(fp)
   8b81c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   8b820:	e0bffc17 	ldw	r2,-16(fp)
   8b824:	10c00417 	ldw	r3,16(r2)
   8b828:	e0bff617 	ldw	r2,-40(fp)
   8b82c:	18bffc26 	beq	r3,r2,8b820 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
   8b830:	e0bff417 	ldw	r2,-48(fp)
   8b834:	10bfffc4 	addi	r2,r2,-1
   8b838:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   8b83c:	e0bffc17 	ldw	r2,-16(fp)
   8b840:	10800517 	ldw	r2,20(r2)
   8b844:	e0fffd17 	ldw	r3,-12(fp)
   8b848:	18c00003 	ldbu	r3,0(r3)
   8b84c:	e13ffc17 	ldw	r4,-16(fp)
   8b850:	2085883a 	add	r2,r4,r2
   8b854:	10801704 	addi	r2,r2,92
   8b858:	10c00005 	stb	r3,0(r2)
   8b85c:	e0bffd17 	ldw	r2,-12(fp)
   8b860:	10800044 	addi	r2,r2,1
   8b864:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   8b868:	e0bffc17 	ldw	r2,-16(fp)
   8b86c:	e0fff617 	ldw	r3,-40(fp)
   8b870:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   8b874:	e0bff417 	ldw	r2,-48(fp)
   8b878:	103fc31e 	bne	r2,zero,8b788 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b87c:	0005303a 	rdctl	r2,status
   8b880:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b884:	e0fffa17 	ldw	r3,-24(fp)
   8b888:	00bfff84 	movi	r2,-2
   8b88c:	1884703a 	and	r2,r3,r2
   8b890:	1001703a 	wrctl	status,r2
  
  return context;
   8b894:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   8b898:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   8b89c:	e0bffc17 	ldw	r2,-16(fp)
   8b8a0:	10800117 	ldw	r2,4(r2)
   8b8a4:	10c11014 	ori	r3,r2,1088
   8b8a8:	e0bffc17 	ldw	r2,-16(fp)
   8b8ac:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   8b8b0:	e0bffc17 	ldw	r2,-16(fp)
   8b8b4:	10800017 	ldw	r2,0(r2)
   8b8b8:	10800304 	addi	r2,r2,12
   8b8bc:	e0fffc17 	ldw	r3,-16(fp)
   8b8c0:	18c00117 	ldw	r3,4(r3)
   8b8c4:	10c00035 	stwio	r3,0(r2)
   8b8c8:	e0bff717 	ldw	r2,-36(fp)
   8b8cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b8d0:	e0bffb17 	ldw	r2,-20(fp)
   8b8d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   8b8d8:	e0fffe17 	ldw	r3,-8(fp)
   8b8dc:	e0bff417 	ldw	r2,-48(fp)
   8b8e0:	1885c83a 	sub	r2,r3,r2
}
   8b8e4:	e037883a 	mov	sp,fp
   8b8e8:	dfc00117 	ldw	ra,4(sp)
   8b8ec:	df000017 	ldw	fp,0(sp)
   8b8f0:	dec00204 	addi	sp,sp,8
   8b8f4:	f800283a 	ret

0008b8f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8b8f8:	defff504 	addi	sp,sp,-44
   8b8fc:	df000a15 	stw	fp,40(sp)
   8b900:	df000a04 	addi	fp,sp,40
   8b904:	e13ffc15 	stw	r4,-16(fp)
   8b908:	e17ffd15 	stw	r5,-12(fp)
   8b90c:	e1bffe15 	stw	r6,-8(fp)
   8b910:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8b914:	e03ff615 	stw	zero,-40(fp)
   8b918:	00800274 	movhi	r2,9
   8b91c:	10817504 	addi	r2,r2,1492
   8b920:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8b924:	10003f26 	beq	r2,zero,8ba24 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8b928:	e0bffc17 	ldw	r2,-16(fp)
   8b92c:	10003b26 	beq	r2,zero,8ba1c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   8b930:	e0bffc17 	ldw	r2,-16(fp)
   8b934:	e0fffe17 	ldw	r3,-8(fp)
   8b938:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8b93c:	e0bffc17 	ldw	r2,-16(fp)
   8b940:	e0ffff17 	ldw	r3,-4(fp)
   8b944:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b948:	0005303a 	rdctl	r2,status
   8b94c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b950:	e0fff817 	ldw	r3,-32(fp)
   8b954:	00bfff84 	movi	r2,-2
   8b958:	1884703a 	and	r2,r3,r2
   8b95c:	1001703a 	wrctl	status,r2
  
  return context;
   8b960:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8b964:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8b968:	00800274 	movhi	r2,9
   8b96c:	10817604 	addi	r2,r2,1496
   8b970:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8b974:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8b978:	e0fffd17 	ldw	r3,-12(fp)
   8b97c:	e0bff617 	ldw	r2,-40(fp)
   8b980:	1885883a 	add	r2,r3,r2
   8b984:	10c00044 	addi	r3,r2,1
   8b988:	e0bffc17 	ldw	r2,-16(fp)
   8b98c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8b990:	e0bffc17 	ldw	r2,-16(fp)
   8b994:	10c00217 	ldw	r3,8(r2)
   8b998:	e0bff617 	ldw	r2,-40(fp)
   8b99c:	1880042e 	bgeu	r3,r2,8b9b0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   8b9a0:	e0bffc17 	ldw	r2,-16(fp)
   8b9a4:	00c00044 	movi	r3,1
   8b9a8:	10c00405 	stb	r3,16(r2)
   8b9ac:	00000206 	br	8b9b8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   8b9b0:	e0bffc17 	ldw	r2,-16(fp)
   8b9b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8b9b8:	e0bffc17 	ldw	r2,-16(fp)
   8b9bc:	00c00274 	movhi	r3,9
   8b9c0:	18faa104 	addi	r3,r3,-5500
   8b9c4:	e0fff915 	stw	r3,-28(fp)
   8b9c8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b9cc:	e0bffa17 	ldw	r2,-24(fp)
   8b9d0:	e0fff917 	ldw	r3,-28(fp)
   8b9d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8b9d8:	e0bff917 	ldw	r2,-28(fp)
   8b9dc:	10c00017 	ldw	r3,0(r2)
   8b9e0:	e0bffa17 	ldw	r2,-24(fp)
   8b9e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b9e8:	e0bff917 	ldw	r2,-28(fp)
   8b9ec:	10800017 	ldw	r2,0(r2)
   8b9f0:	e0fffa17 	ldw	r3,-24(fp)
   8b9f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8b9f8:	e0bff917 	ldw	r2,-28(fp)
   8b9fc:	e0fffa17 	ldw	r3,-24(fp)
   8ba00:	10c00015 	stw	r3,0(r2)
   8ba04:	e0bff717 	ldw	r2,-36(fp)
   8ba08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ba0c:	e0bffb17 	ldw	r2,-20(fp)
   8ba10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8ba14:	0005883a 	mov	r2,zero
   8ba18:	00000306 	br	8ba28 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8ba1c:	00bffa84 	movi	r2,-22
   8ba20:	00000106 	br	8ba28 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   8ba24:	00bfde84 	movi	r2,-134
  }
}
   8ba28:	e037883a 	mov	sp,fp
   8ba2c:	df000017 	ldw	fp,0(sp)
   8ba30:	dec00104 	addi	sp,sp,4
   8ba34:	f800283a 	ret

0008ba38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8ba38:	defffa04 	addi	sp,sp,-24
   8ba3c:	dfc00515 	stw	ra,20(sp)
   8ba40:	df000415 	stw	fp,16(sp)
   8ba44:	df000404 	addi	fp,sp,16
   8ba48:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8ba4c:	00800244 	movi	r2,9
   8ba50:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   8ba54:	e13ffd17 	ldw	r4,-12(fp)
   8ba58:	014003f4 	movhi	r5,15
   8ba5c:	29509004 	addi	r5,r5,16960
   8ba60:	00894740 	call	89474 <__mulsi3>
   8ba64:	0100bef4 	movhi	r4,763
   8ba68:	213c2004 	addi	r4,r4,-3968
   8ba6c:	100b883a 	mov	r5,r2
   8ba70:	00804140 	call	80414 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8ba74:	01200034 	movhi	r4,32768
   8ba78:	213fffc4 	addi	r4,r4,-1
   8ba7c:	100b883a 	mov	r5,r2
   8ba80:	00804140 	call	80414 <__udivsi3>
   8ba84:	e13fff17 	ldw	r4,-4(fp)
   8ba88:	100b883a 	mov	r5,r2
   8ba8c:	00804140 	call	80414 <__udivsi3>
   8ba90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8ba94:	e0bffe17 	ldw	r2,-8(fp)
   8ba98:	10002926 	beq	r2,zero,8bb40 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   8ba9c:	e03ffc15 	stw	zero,-16(fp)
   8baa0:	00001606 	br	8bafc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8baa4:	00a00034 	movhi	r2,32768
   8baa8:	10bfffc4 	addi	r2,r2,-1
   8baac:	10bfffc4 	addi	r2,r2,-1
   8bab0:	103ffe1e 	bne	r2,zero,8baac <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   8bab4:	e13ffd17 	ldw	r4,-12(fp)
   8bab8:	014003f4 	movhi	r5,15
   8babc:	29509004 	addi	r5,r5,16960
   8bac0:	00894740 	call	89474 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8bac4:	0100bef4 	movhi	r4,763
   8bac8:	213c2004 	addi	r4,r4,-3968
   8bacc:	100b883a 	mov	r5,r2
   8bad0:	00804140 	call	80414 <__udivsi3>
   8bad4:	01200034 	movhi	r4,32768
   8bad8:	213fffc4 	addi	r4,r4,-1
   8badc:	100b883a 	mov	r5,r2
   8bae0:	00804140 	call	80414 <__udivsi3>
   8bae4:	e0ffff17 	ldw	r3,-4(fp)
   8bae8:	1885c83a 	sub	r2,r3,r2
   8baec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8baf0:	e0bffc17 	ldw	r2,-16(fp)
   8baf4:	10800044 	addi	r2,r2,1
   8baf8:	e0bffc15 	stw	r2,-16(fp)
   8bafc:	e0fffc17 	ldw	r3,-16(fp)
   8bb00:	e0bffe17 	ldw	r2,-8(fp)
   8bb04:	18bfe716 	blt	r3,r2,8baa4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8bb08:	e13ffd17 	ldw	r4,-12(fp)
   8bb0c:	014003f4 	movhi	r5,15
   8bb10:	29509004 	addi	r5,r5,16960
   8bb14:	00894740 	call	89474 <__mulsi3>
   8bb18:	0100bef4 	movhi	r4,763
   8bb1c:	213c2004 	addi	r4,r4,-3968
   8bb20:	100b883a 	mov	r5,r2
   8bb24:	00804140 	call	80414 <__udivsi3>
   8bb28:	1009883a 	mov	r4,r2
   8bb2c:	e17fff17 	ldw	r5,-4(fp)
   8bb30:	00894740 	call	89474 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8bb34:	10bfffc4 	addi	r2,r2,-1
   8bb38:	103ffe1e 	bne	r2,zero,8bb34 <alt_busy_sleep+0xfc>
   8bb3c:	00000d06 	br	8bb74 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8bb40:	e13ffd17 	ldw	r4,-12(fp)
   8bb44:	014003f4 	movhi	r5,15
   8bb48:	29509004 	addi	r5,r5,16960
   8bb4c:	00894740 	call	89474 <__mulsi3>
   8bb50:	0100bef4 	movhi	r4,763
   8bb54:	213c2004 	addi	r4,r4,-3968
   8bb58:	100b883a 	mov	r5,r2
   8bb5c:	00804140 	call	80414 <__udivsi3>
   8bb60:	1009883a 	mov	r4,r2
   8bb64:	e17fff17 	ldw	r5,-4(fp)
   8bb68:	00894740 	call	89474 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8bb6c:	10bfffc4 	addi	r2,r2,-1
   8bb70:	00bffe16 	blt	zero,r2,8bb6c <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8bb74:	0005883a 	mov	r2,zero
}
   8bb78:	e037883a 	mov	sp,fp
   8bb7c:	dfc00117 	ldw	ra,4(sp)
   8bb80:	df000017 	ldw	fp,0(sp)
   8bb84:	dec00204 	addi	sp,sp,8
   8bb88:	f800283a 	ret

0008bb8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8bb8c:	deffff04 	addi	sp,sp,-4
   8bb90:	df000015 	stw	fp,0(sp)
   8bb94:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8bb98:	e037883a 	mov	sp,fp
   8bb9c:	df000017 	ldw	fp,0(sp)
   8bba0:	dec00104 	addi	sp,sp,4
   8bba4:	f800283a 	ret

0008bba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bba8:	defffe04 	addi	sp,sp,-8
   8bbac:	dfc00115 	stw	ra,4(sp)
   8bbb0:	df000015 	stw	fp,0(sp)
   8bbb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8bbb8:	00800274 	movhi	r2,9
   8bbbc:	10ba9e04 	addi	r2,r2,-5512
   8bbc0:	10800017 	ldw	r2,0(r2)
   8bbc4:	10000526 	beq	r2,zero,8bbdc <alt_get_errno+0x34>
   8bbc8:	00800274 	movhi	r2,9
   8bbcc:	10ba9e04 	addi	r2,r2,-5512
   8bbd0:	10800017 	ldw	r2,0(r2)
   8bbd4:	103ee83a 	callr	r2
   8bbd8:	00000206 	br	8bbe4 <alt_get_errno+0x3c>
   8bbdc:	00800274 	movhi	r2,9
   8bbe0:	10817004 	addi	r2,r2,1472
}
   8bbe4:	e037883a 	mov	sp,fp
   8bbe8:	dfc00117 	ldw	ra,4(sp)
   8bbec:	df000017 	ldw	fp,0(sp)
   8bbf0:	dec00204 	addi	sp,sp,8
   8bbf4:	f800283a 	ret

0008bbf8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8bbf8:	defffa04 	addi	sp,sp,-24
   8bbfc:	dfc00515 	stw	ra,20(sp)
   8bc00:	df000415 	stw	fp,16(sp)
   8bc04:	df000404 	addi	fp,sp,16
   8bc08:	e13ffe15 	stw	r4,-8(fp)
   8bc0c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8bc10:	e0bffe17 	ldw	r2,-8(fp)
   8bc14:	10000326 	beq	r2,zero,8bc24 <alt_dev_llist_insert+0x2c>
   8bc18:	e0bffe17 	ldw	r2,-8(fp)
   8bc1c:	10800217 	ldw	r2,8(r2)
   8bc20:	1000051e 	bne	r2,zero,8bc38 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   8bc24:	008bba80 	call	8bba8 <alt_get_errno>
   8bc28:	00c00584 	movi	r3,22
   8bc2c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8bc30:	00bffa84 	movi	r2,-22
   8bc34:	00001306 	br	8bc84 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8bc38:	e0bffe17 	ldw	r2,-8(fp)
   8bc3c:	e0ffff17 	ldw	r3,-4(fp)
   8bc40:	e0fffc15 	stw	r3,-16(fp)
   8bc44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8bc48:	e0bffd17 	ldw	r2,-12(fp)
   8bc4c:	e0fffc17 	ldw	r3,-16(fp)
   8bc50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8bc54:	e0bffc17 	ldw	r2,-16(fp)
   8bc58:	10c00017 	ldw	r3,0(r2)
   8bc5c:	e0bffd17 	ldw	r2,-12(fp)
   8bc60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8bc64:	e0bffc17 	ldw	r2,-16(fp)
   8bc68:	10800017 	ldw	r2,0(r2)
   8bc6c:	e0fffd17 	ldw	r3,-12(fp)
   8bc70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8bc74:	e0bffc17 	ldw	r2,-16(fp)
   8bc78:	e0fffd17 	ldw	r3,-12(fp)
   8bc7c:	10c00015 	stw	r3,0(r2)

  return 0;  
   8bc80:	0005883a 	mov	r2,zero
}
   8bc84:	e037883a 	mov	sp,fp
   8bc88:	dfc00117 	ldw	ra,4(sp)
   8bc8c:	df000017 	ldw	fp,0(sp)
   8bc90:	dec00204 	addi	sp,sp,8
   8bc94:	f800283a 	ret

0008bc98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8bc98:	defffd04 	addi	sp,sp,-12
   8bc9c:	dfc00215 	stw	ra,8(sp)
   8bca0:	df000115 	stw	fp,4(sp)
   8bca4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8bca8:	00800274 	movhi	r2,9
   8bcac:	10b30a04 	addi	r2,r2,-13272
   8bcb0:	e0bfff15 	stw	r2,-4(fp)
   8bcb4:	00000606 	br	8bcd0 <_do_ctors+0x38>
        (*ctor) (); 
   8bcb8:	e0bfff17 	ldw	r2,-4(fp)
   8bcbc:	10800017 	ldw	r2,0(r2)
   8bcc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8bcc4:	e0bfff17 	ldw	r2,-4(fp)
   8bcc8:	10bfff04 	addi	r2,r2,-4
   8bccc:	e0bfff15 	stw	r2,-4(fp)
   8bcd0:	e0ffff17 	ldw	r3,-4(fp)
   8bcd4:	00800274 	movhi	r2,9
   8bcd8:	10b30b04 	addi	r2,r2,-13268
   8bcdc:	18bff62e 	bgeu	r3,r2,8bcb8 <_do_ctors+0x20>
        (*ctor) (); 
}
   8bce0:	e037883a 	mov	sp,fp
   8bce4:	dfc00117 	ldw	ra,4(sp)
   8bce8:	df000017 	ldw	fp,0(sp)
   8bcec:	dec00204 	addi	sp,sp,8
   8bcf0:	f800283a 	ret

0008bcf4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8bcf4:	defffd04 	addi	sp,sp,-12
   8bcf8:	dfc00215 	stw	ra,8(sp)
   8bcfc:	df000115 	stw	fp,4(sp)
   8bd00:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8bd04:	00800274 	movhi	r2,9
   8bd08:	10b30a04 	addi	r2,r2,-13272
   8bd0c:	e0bfff15 	stw	r2,-4(fp)
   8bd10:	00000606 	br	8bd2c <_do_dtors+0x38>
        (*dtor) (); 
   8bd14:	e0bfff17 	ldw	r2,-4(fp)
   8bd18:	10800017 	ldw	r2,0(r2)
   8bd1c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8bd20:	e0bfff17 	ldw	r2,-4(fp)
   8bd24:	10bfff04 	addi	r2,r2,-4
   8bd28:	e0bfff15 	stw	r2,-4(fp)
   8bd2c:	e0ffff17 	ldw	r3,-4(fp)
   8bd30:	00800274 	movhi	r2,9
   8bd34:	10b30b04 	addi	r2,r2,-13268
   8bd38:	18bff62e 	bgeu	r3,r2,8bd14 <_do_dtors+0x20>
        (*dtor) (); 
}
   8bd3c:	e037883a 	mov	sp,fp
   8bd40:	dfc00117 	ldw	ra,4(sp)
   8bd44:	df000017 	ldw	fp,0(sp)
   8bd48:	dec00204 	addi	sp,sp,8
   8bd4c:	f800283a 	ret

0008bd50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8bd50:	deffff04 	addi	sp,sp,-4
   8bd54:	df000015 	stw	fp,0(sp)
   8bd58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8bd5c:	e037883a 	mov	sp,fp
   8bd60:	df000017 	ldw	fp,0(sp)
   8bd64:	dec00104 	addi	sp,sp,4
   8bd68:	f800283a 	ret

0008bd6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8bd6c:	defff904 	addi	sp,sp,-28
   8bd70:	dfc00615 	stw	ra,24(sp)
   8bd74:	df000515 	stw	fp,20(sp)
   8bd78:	df000504 	addi	fp,sp,20
   8bd7c:	e13ffc15 	stw	r4,-16(fp)
   8bd80:	e17ffd15 	stw	r5,-12(fp)
   8bd84:	e1bffe15 	stw	r6,-8(fp)
   8bd88:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8bd8c:	e0800217 	ldw	r2,8(fp)
   8bd90:	d8800015 	stw	r2,0(sp)
   8bd94:	e13ffc17 	ldw	r4,-16(fp)
   8bd98:	e17ffd17 	ldw	r5,-12(fp)
   8bd9c:	e1bffe17 	ldw	r6,-8(fp)
   8bda0:	e1ffff17 	ldw	r7,-4(fp)
   8bda4:	008bf440 	call	8bf44 <alt_iic_isr_register>
}  
   8bda8:	e037883a 	mov	sp,fp
   8bdac:	dfc00117 	ldw	ra,4(sp)
   8bdb0:	df000017 	ldw	fp,0(sp)
   8bdb4:	dec00204 	addi	sp,sp,8
   8bdb8:	f800283a 	ret

0008bdbc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8bdbc:	defff904 	addi	sp,sp,-28
   8bdc0:	df000615 	stw	fp,24(sp)
   8bdc4:	df000604 	addi	fp,sp,24
   8bdc8:	e13ffe15 	stw	r4,-8(fp)
   8bdcc:	e17fff15 	stw	r5,-4(fp)
   8bdd0:	e0bfff17 	ldw	r2,-4(fp)
   8bdd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bdd8:	0005303a 	rdctl	r2,status
   8bddc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bde0:	e0fffb17 	ldw	r3,-20(fp)
   8bde4:	00bfff84 	movi	r2,-2
   8bde8:	1884703a 	and	r2,r3,r2
   8bdec:	1001703a 	wrctl	status,r2
  
  return context;
   8bdf0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8bdf4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8bdf8:	e0bffa17 	ldw	r2,-24(fp)
   8bdfc:	00c00044 	movi	r3,1
   8be00:	1884983a 	sll	r2,r3,r2
   8be04:	1007883a 	mov	r3,r2
   8be08:	00800274 	movhi	r2,9
   8be0c:	10817404 	addi	r2,r2,1488
   8be10:	10800017 	ldw	r2,0(r2)
   8be14:	1886b03a 	or	r3,r3,r2
   8be18:	00800274 	movhi	r2,9
   8be1c:	10817404 	addi	r2,r2,1488
   8be20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8be24:	00800274 	movhi	r2,9
   8be28:	10817404 	addi	r2,r2,1488
   8be2c:	10800017 	ldw	r2,0(r2)
   8be30:	100170fa 	wrctl	ienable,r2
   8be34:	e0bffc17 	ldw	r2,-16(fp)
   8be38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8be3c:	e0bffd17 	ldw	r2,-12(fp)
   8be40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8be44:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8be48:	e037883a 	mov	sp,fp
   8be4c:	df000017 	ldw	fp,0(sp)
   8be50:	dec00104 	addi	sp,sp,4
   8be54:	f800283a 	ret

0008be58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8be58:	defff904 	addi	sp,sp,-28
   8be5c:	df000615 	stw	fp,24(sp)
   8be60:	df000604 	addi	fp,sp,24
   8be64:	e13ffe15 	stw	r4,-8(fp)
   8be68:	e17fff15 	stw	r5,-4(fp)
   8be6c:	e0bfff17 	ldw	r2,-4(fp)
   8be70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8be74:	0005303a 	rdctl	r2,status
   8be78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8be7c:	e0fffb17 	ldw	r3,-20(fp)
   8be80:	00bfff84 	movi	r2,-2
   8be84:	1884703a 	and	r2,r3,r2
   8be88:	1001703a 	wrctl	status,r2
  
  return context;
   8be8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8be90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8be94:	e0bffa17 	ldw	r2,-24(fp)
   8be98:	00c00044 	movi	r3,1
   8be9c:	1884983a 	sll	r2,r3,r2
   8bea0:	0084303a 	nor	r2,zero,r2
   8bea4:	1007883a 	mov	r3,r2
   8bea8:	00800274 	movhi	r2,9
   8beac:	10817404 	addi	r2,r2,1488
   8beb0:	10800017 	ldw	r2,0(r2)
   8beb4:	1886703a 	and	r3,r3,r2
   8beb8:	00800274 	movhi	r2,9
   8bebc:	10817404 	addi	r2,r2,1488
   8bec0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8bec4:	00800274 	movhi	r2,9
   8bec8:	10817404 	addi	r2,r2,1488
   8becc:	10800017 	ldw	r2,0(r2)
   8bed0:	100170fa 	wrctl	ienable,r2
   8bed4:	e0bffc17 	ldw	r2,-16(fp)
   8bed8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bedc:	e0bffd17 	ldw	r2,-12(fp)
   8bee0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8bee4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8bee8:	e037883a 	mov	sp,fp
   8beec:	df000017 	ldw	fp,0(sp)
   8bef0:	dec00104 	addi	sp,sp,4
   8bef4:	f800283a 	ret

0008bef8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8bef8:	defffc04 	addi	sp,sp,-16
   8befc:	df000315 	stw	fp,12(sp)
   8bf00:	df000304 	addi	fp,sp,12
   8bf04:	e13ffe15 	stw	r4,-8(fp)
   8bf08:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8bf0c:	000530fa 	rdctl	r2,ienable
   8bf10:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8bf14:	e0bfff17 	ldw	r2,-4(fp)
   8bf18:	00c00044 	movi	r3,1
   8bf1c:	1884983a 	sll	r2,r3,r2
   8bf20:	1007883a 	mov	r3,r2
   8bf24:	e0bffd17 	ldw	r2,-12(fp)
   8bf28:	1884703a 	and	r2,r3,r2
   8bf2c:	1004c03a 	cmpne	r2,r2,zero
   8bf30:	10803fcc 	andi	r2,r2,255
}
   8bf34:	e037883a 	mov	sp,fp
   8bf38:	df000017 	ldw	fp,0(sp)
   8bf3c:	dec00104 	addi	sp,sp,4
   8bf40:	f800283a 	ret

0008bf44 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8bf44:	defff504 	addi	sp,sp,-44
   8bf48:	dfc00a15 	stw	ra,40(sp)
   8bf4c:	df000915 	stw	fp,36(sp)
   8bf50:	df000904 	addi	fp,sp,36
   8bf54:	e13ffc15 	stw	r4,-16(fp)
   8bf58:	e17ffd15 	stw	r5,-12(fp)
   8bf5c:	e1bffe15 	stw	r6,-8(fp)
   8bf60:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8bf64:	00bffa84 	movi	r2,-22
   8bf68:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8bf6c:	e0bffd17 	ldw	r2,-12(fp)
   8bf70:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8bf74:	e0bff817 	ldw	r2,-32(fp)
   8bf78:	10800808 	cmpgei	r2,r2,32
   8bf7c:	1000271e 	bne	r2,zero,8c01c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bf80:	0005303a 	rdctl	r2,status
   8bf84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bf88:	e0fffa17 	ldw	r3,-24(fp)
   8bf8c:	00bfff84 	movi	r2,-2
   8bf90:	1884703a 	and	r2,r3,r2
   8bf94:	1001703a 	wrctl	status,r2
  
  return context;
   8bf98:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8bf9c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   8bfa0:	00c00274 	movhi	r3,9
   8bfa4:	18c18104 	addi	r3,r3,1540
   8bfa8:	e0bff817 	ldw	r2,-32(fp)
   8bfac:	100490fa 	slli	r2,r2,3
   8bfb0:	1885883a 	add	r2,r3,r2
   8bfb4:	e0fffe17 	ldw	r3,-8(fp)
   8bfb8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8bfbc:	00c00274 	movhi	r3,9
   8bfc0:	18c18104 	addi	r3,r3,1540
   8bfc4:	e0bff817 	ldw	r2,-32(fp)
   8bfc8:	100490fa 	slli	r2,r2,3
   8bfcc:	1885883a 	add	r2,r3,r2
   8bfd0:	10800104 	addi	r2,r2,4
   8bfd4:	e0ffff17 	ldw	r3,-4(fp)
   8bfd8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8bfdc:	e0bffe17 	ldw	r2,-8(fp)
   8bfe0:	10000526 	beq	r2,zero,8bff8 <alt_iic_isr_register+0xb4>
   8bfe4:	e0bff817 	ldw	r2,-32(fp)
   8bfe8:	e13ffc17 	ldw	r4,-16(fp)
   8bfec:	100b883a 	mov	r5,r2
   8bff0:	008bdbc0 	call	8bdbc <alt_ic_irq_enable>
   8bff4:	00000406 	br	8c008 <alt_iic_isr_register+0xc4>
   8bff8:	e0bff817 	ldw	r2,-32(fp)
   8bffc:	e13ffc17 	ldw	r4,-16(fp)
   8c000:	100b883a 	mov	r5,r2
   8c004:	008be580 	call	8be58 <alt_ic_irq_disable>
   8c008:	e0bff715 	stw	r2,-36(fp)
   8c00c:	e0bff917 	ldw	r2,-28(fp)
   8c010:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c014:	e0bffb17 	ldw	r2,-20(fp)
   8c018:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8c01c:	e0bff717 	ldw	r2,-36(fp)
}
   8c020:	e037883a 	mov	sp,fp
   8c024:	dfc00117 	ldw	ra,4(sp)
   8c028:	df000017 	ldw	fp,0(sp)
   8c02c:	dec00204 	addi	sp,sp,8
   8c030:	f800283a 	ret

0008c034 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8c034:	defff804 	addi	sp,sp,-32
   8c038:	dfc00715 	stw	ra,28(sp)
   8c03c:	df000615 	stw	fp,24(sp)
   8c040:	dc000515 	stw	r16,20(sp)
   8c044:	df000504 	addi	fp,sp,20
   8c048:	e13ffc15 	stw	r4,-16(fp)
   8c04c:	e17ffd15 	stw	r5,-12(fp)
   8c050:	e1bffe15 	stw	r6,-8(fp)
   8c054:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8c058:	e13ffd17 	ldw	r4,-12(fp)
   8c05c:	e17ffe17 	ldw	r5,-8(fp)
   8c060:	e1bfff17 	ldw	r6,-4(fp)
   8c064:	008c2cc0 	call	8c2cc <open>
   8c068:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8c06c:	e0bffb17 	ldw	r2,-20(fp)
   8c070:	10002216 	blt	r2,zero,8c0fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c074:	04000274 	movhi	r16,9
   8c078:	8435eb04 	addi	r16,r16,-10324
   8c07c:	e0bffb17 	ldw	r2,-20(fp)
   8c080:	1009883a 	mov	r4,r2
   8c084:	01400304 	movi	r5,12
   8c088:	00894740 	call	89474 <__mulsi3>
   8c08c:	8085883a 	add	r2,r16,r2
   8c090:	10c00017 	ldw	r3,0(r2)
   8c094:	e0bffc17 	ldw	r2,-16(fp)
   8c098:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c09c:	04000274 	movhi	r16,9
   8c0a0:	8435eb04 	addi	r16,r16,-10324
   8c0a4:	e0bffb17 	ldw	r2,-20(fp)
   8c0a8:	1009883a 	mov	r4,r2
   8c0ac:	01400304 	movi	r5,12
   8c0b0:	00894740 	call	89474 <__mulsi3>
   8c0b4:	8085883a 	add	r2,r16,r2
   8c0b8:	10800104 	addi	r2,r2,4
   8c0bc:	10c00017 	ldw	r3,0(r2)
   8c0c0:	e0bffc17 	ldw	r2,-16(fp)
   8c0c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c0c8:	04000274 	movhi	r16,9
   8c0cc:	8435eb04 	addi	r16,r16,-10324
   8c0d0:	e0bffb17 	ldw	r2,-20(fp)
   8c0d4:	1009883a 	mov	r4,r2
   8c0d8:	01400304 	movi	r5,12
   8c0dc:	00894740 	call	89474 <__mulsi3>
   8c0e0:	8085883a 	add	r2,r16,r2
   8c0e4:	10800204 	addi	r2,r2,8
   8c0e8:	10c00017 	ldw	r3,0(r2)
   8c0ec:	e0bffc17 	ldw	r2,-16(fp)
   8c0f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8c0f4:	e13ffb17 	ldw	r4,-20(fp)
   8c0f8:	008a2200 	call	8a220 <alt_release_fd>
  }
} 
   8c0fc:	e037883a 	mov	sp,fp
   8c100:	dfc00217 	ldw	ra,8(sp)
   8c104:	df000117 	ldw	fp,4(sp)
   8c108:	dc000017 	ldw	r16,0(sp)
   8c10c:	dec00304 	addi	sp,sp,12
   8c110:	f800283a 	ret

0008c114 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8c114:	defffb04 	addi	sp,sp,-20
   8c118:	dfc00415 	stw	ra,16(sp)
   8c11c:	df000315 	stw	fp,12(sp)
   8c120:	df000304 	addi	fp,sp,12
   8c124:	e13ffd15 	stw	r4,-12(fp)
   8c128:	e17ffe15 	stw	r5,-8(fp)
   8c12c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8c130:	01000274 	movhi	r4,9
   8c134:	2135ee04 	addi	r4,r4,-10312
   8c138:	e17ffd17 	ldw	r5,-12(fp)
   8c13c:	01800044 	movi	r6,1
   8c140:	01c07fc4 	movi	r7,511
   8c144:	008c0340 	call	8c034 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8c148:	01000274 	movhi	r4,9
   8c14c:	2135eb04 	addi	r4,r4,-10324
   8c150:	e17ffe17 	ldw	r5,-8(fp)
   8c154:	000d883a 	mov	r6,zero
   8c158:	01c07fc4 	movi	r7,511
   8c15c:	008c0340 	call	8c034 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8c160:	01000274 	movhi	r4,9
   8c164:	2135f104 	addi	r4,r4,-10300
   8c168:	e17fff17 	ldw	r5,-4(fp)
   8c16c:	01800044 	movi	r6,1
   8c170:	01c07fc4 	movi	r7,511
   8c174:	008c0340 	call	8c034 <alt_open_fd>
}  
   8c178:	e037883a 	mov	sp,fp
   8c17c:	dfc00117 	ldw	ra,4(sp)
   8c180:	df000017 	ldw	fp,0(sp)
   8c184:	dec00204 	addi	sp,sp,8
   8c188:	f800283a 	ret

0008c18c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c18c:	defffe04 	addi	sp,sp,-8
   8c190:	dfc00115 	stw	ra,4(sp)
   8c194:	df000015 	stw	fp,0(sp)
   8c198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8c19c:	00800274 	movhi	r2,9
   8c1a0:	10ba9e04 	addi	r2,r2,-5512
   8c1a4:	10800017 	ldw	r2,0(r2)
   8c1a8:	10000526 	beq	r2,zero,8c1c0 <alt_get_errno+0x34>
   8c1ac:	00800274 	movhi	r2,9
   8c1b0:	10ba9e04 	addi	r2,r2,-5512
   8c1b4:	10800017 	ldw	r2,0(r2)
   8c1b8:	103ee83a 	callr	r2
   8c1bc:	00000206 	br	8c1c8 <alt_get_errno+0x3c>
   8c1c0:	00800274 	movhi	r2,9
   8c1c4:	10817004 	addi	r2,r2,1472
}
   8c1c8:	e037883a 	mov	sp,fp
   8c1cc:	dfc00117 	ldw	ra,4(sp)
   8c1d0:	df000017 	ldw	fp,0(sp)
   8c1d4:	dec00204 	addi	sp,sp,8
   8c1d8:	f800283a 	ret

0008c1dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8c1dc:	defffb04 	addi	sp,sp,-20
   8c1e0:	dfc00415 	stw	ra,16(sp)
   8c1e4:	df000315 	stw	fp,12(sp)
   8c1e8:	dc000215 	stw	r16,8(sp)
   8c1ec:	df000204 	addi	fp,sp,8
   8c1f0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c1f4:	e0bfff17 	ldw	r2,-4(fp)
   8c1f8:	10800217 	ldw	r2,8(r2)
   8c1fc:	10d00034 	orhi	r3,r2,16384
   8c200:	e0bfff17 	ldw	r2,-4(fp)
   8c204:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c208:	e03ffe15 	stw	zero,-8(fp)
   8c20c:	00002206 	br	8c298 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c210:	04000274 	movhi	r16,9
   8c214:	8435eb04 	addi	r16,r16,-10324
   8c218:	e0bffe17 	ldw	r2,-8(fp)
   8c21c:	1009883a 	mov	r4,r2
   8c220:	01400304 	movi	r5,12
   8c224:	00894740 	call	89474 <__mulsi3>
   8c228:	8085883a 	add	r2,r16,r2
   8c22c:	10c00017 	ldw	r3,0(r2)
   8c230:	e0bfff17 	ldw	r2,-4(fp)
   8c234:	10800017 	ldw	r2,0(r2)
   8c238:	1880141e 	bne	r3,r2,8c28c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8c23c:	04000274 	movhi	r16,9
   8c240:	8435eb04 	addi	r16,r16,-10324
   8c244:	e0bffe17 	ldw	r2,-8(fp)
   8c248:	1009883a 	mov	r4,r2
   8c24c:	01400304 	movi	r5,12
   8c250:	00894740 	call	89474 <__mulsi3>
   8c254:	8085883a 	add	r2,r16,r2
   8c258:	10800204 	addi	r2,r2,8
   8c25c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c260:	10000a0e 	bge	r2,zero,8c28c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8c264:	e13ffe17 	ldw	r4,-8(fp)
   8c268:	01400304 	movi	r5,12
   8c26c:	00894740 	call	89474 <__mulsi3>
   8c270:	00c00274 	movhi	r3,9
   8c274:	18f5eb04 	addi	r3,r3,-10324
   8c278:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8c27c:	e0bfff17 	ldw	r2,-4(fp)
   8c280:	18800226 	beq	r3,r2,8c28c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8c284:	00bffcc4 	movi	r2,-13
   8c288:	00000a06 	br	8c2b4 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c28c:	e0bffe17 	ldw	r2,-8(fp)
   8c290:	10800044 	addi	r2,r2,1
   8c294:	e0bffe15 	stw	r2,-8(fp)
   8c298:	00800274 	movhi	r2,9
   8c29c:	10ba9d04 	addi	r2,r2,-5516
   8c2a0:	10800017 	ldw	r2,0(r2)
   8c2a4:	1007883a 	mov	r3,r2
   8c2a8:	e0bffe17 	ldw	r2,-8(fp)
   8c2ac:	18bfd82e 	bgeu	r3,r2,8c210 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8c2b0:	0005883a 	mov	r2,zero
}
   8c2b4:	e037883a 	mov	sp,fp
   8c2b8:	dfc00217 	ldw	ra,8(sp)
   8c2bc:	df000117 	ldw	fp,4(sp)
   8c2c0:	dc000017 	ldw	r16,0(sp)
   8c2c4:	dec00304 	addi	sp,sp,12
   8c2c8:	f800283a 	ret

0008c2cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c2cc:	defff604 	addi	sp,sp,-40
   8c2d0:	dfc00915 	stw	ra,36(sp)
   8c2d4:	df000815 	stw	fp,32(sp)
   8c2d8:	df000804 	addi	fp,sp,32
   8c2dc:	e13ffd15 	stw	r4,-12(fp)
   8c2e0:	e17ffe15 	stw	r5,-8(fp)
   8c2e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8c2e8:	00bfffc4 	movi	r2,-1
   8c2ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8c2f0:	00bffb44 	movi	r2,-19
   8c2f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8c2f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c2fc:	e13ffd17 	ldw	r4,-12(fp)
   8c300:	01400274 	movhi	r5,9
   8c304:	297a9b04 	addi	r5,r5,-5524
   8c308:	008c5e00 	call	8c5e0 <alt_find_dev>
   8c30c:	e0bff815 	stw	r2,-32(fp)
   8c310:	e0bff817 	ldw	r2,-32(fp)
   8c314:	1000051e 	bne	r2,zero,8c32c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8c318:	e13ffd17 	ldw	r4,-12(fp)
   8c31c:	008c6700 	call	8c670 <alt_find_file>
   8c320:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8c324:	00800044 	movi	r2,1
   8c328:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8c32c:	e0bff817 	ldw	r2,-32(fp)
   8c330:	10002a26 	beq	r2,zero,8c3dc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8c334:	e13ff817 	ldw	r4,-32(fp)
   8c338:	008c7840 	call	8c784 <alt_get_fd>
   8c33c:	e0bff915 	stw	r2,-28(fp)
   8c340:	e0bff917 	ldw	r2,-28(fp)
   8c344:	1000030e 	bge	r2,zero,8c354 <open+0x88>
    {
      status = index;
   8c348:	e0bff917 	ldw	r2,-28(fp)
   8c34c:	e0bffa15 	stw	r2,-24(fp)
   8c350:	00002406 	br	8c3e4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   8c354:	e13ff917 	ldw	r4,-28(fp)
   8c358:	01400304 	movi	r5,12
   8c35c:	00894740 	call	89474 <__mulsi3>
   8c360:	00c00274 	movhi	r3,9
   8c364:	18f5eb04 	addi	r3,r3,-10324
   8c368:	10c5883a 	add	r2,r2,r3
   8c36c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c370:	e0fffe17 	ldw	r3,-8(fp)
   8c374:	00900034 	movhi	r2,16384
   8c378:	10bfffc4 	addi	r2,r2,-1
   8c37c:	1886703a 	and	r3,r3,r2
   8c380:	e0bffc17 	ldw	r2,-16(fp)
   8c384:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c388:	e0bffb17 	ldw	r2,-20(fp)
   8c38c:	1000051e 	bne	r2,zero,8c3a4 <open+0xd8>
   8c390:	e13ffc17 	ldw	r4,-16(fp)
   8c394:	008c1dc0 	call	8c1dc <alt_file_locked>
   8c398:	e0bffa15 	stw	r2,-24(fp)
   8c39c:	e0bffa17 	ldw	r2,-24(fp)
   8c3a0:	10001016 	blt	r2,zero,8c3e4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c3a4:	e0bff817 	ldw	r2,-32(fp)
   8c3a8:	10800317 	ldw	r2,12(r2)
   8c3ac:	10000826 	beq	r2,zero,8c3d0 <open+0x104>
   8c3b0:	e0bff817 	ldw	r2,-32(fp)
   8c3b4:	10800317 	ldw	r2,12(r2)
   8c3b8:	e13ffc17 	ldw	r4,-16(fp)
   8c3bc:	e17ffd17 	ldw	r5,-12(fp)
   8c3c0:	e1bffe17 	ldw	r6,-8(fp)
   8c3c4:	e1ffff17 	ldw	r7,-4(fp)
   8c3c8:	103ee83a 	callr	r2
   8c3cc:	00000106 	br	8c3d4 <open+0x108>
   8c3d0:	0005883a 	mov	r2,zero
   8c3d4:	e0bffa15 	stw	r2,-24(fp)
   8c3d8:	00000206 	br	8c3e4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8c3dc:	00bffb44 	movi	r2,-19
   8c3e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c3e4:	e0bffa17 	ldw	r2,-24(fp)
   8c3e8:	1000080e 	bge	r2,zero,8c40c <open+0x140>
  {
    alt_release_fd (index);  
   8c3ec:	e13ff917 	ldw	r4,-28(fp)
   8c3f0:	008a2200 	call	8a220 <alt_release_fd>
    ALT_ERRNO = -status;
   8c3f4:	008c18c0 	call	8c18c <alt_get_errno>
   8c3f8:	e0fffa17 	ldw	r3,-24(fp)
   8c3fc:	00c7c83a 	sub	r3,zero,r3
   8c400:	10c00015 	stw	r3,0(r2)
    return -1;
   8c404:	00bfffc4 	movi	r2,-1
   8c408:	00000106 	br	8c410 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   8c40c:	e0bff917 	ldw	r2,-28(fp)
}
   8c410:	e037883a 	mov	sp,fp
   8c414:	dfc00117 	ldw	ra,4(sp)
   8c418:	df000017 	ldw	fp,0(sp)
   8c41c:	dec00204 	addi	sp,sp,8
   8c420:	f800283a 	ret

0008c424 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8c424:	defffa04 	addi	sp,sp,-24
   8c428:	df000515 	stw	fp,20(sp)
   8c42c:	df000504 	addi	fp,sp,20
   8c430:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c434:	0005303a 	rdctl	r2,status
   8c438:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c43c:	e0fffc17 	ldw	r3,-16(fp)
   8c440:	00bfff84 	movi	r2,-2
   8c444:	1884703a 	and	r2,r3,r2
   8c448:	1001703a 	wrctl	status,r2
  
  return context;
   8c44c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8c450:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8c454:	e0bfff17 	ldw	r2,-4(fp)
   8c458:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8c45c:	e0bffd17 	ldw	r2,-12(fp)
   8c460:	10800017 	ldw	r2,0(r2)
   8c464:	e0fffd17 	ldw	r3,-12(fp)
   8c468:	18c00117 	ldw	r3,4(r3)
   8c46c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8c470:	e0bffd17 	ldw	r2,-12(fp)
   8c474:	10800117 	ldw	r2,4(r2)
   8c478:	e0fffd17 	ldw	r3,-12(fp)
   8c47c:	18c00017 	ldw	r3,0(r3)
   8c480:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8c484:	e0bffd17 	ldw	r2,-12(fp)
   8c488:	e0fffd17 	ldw	r3,-12(fp)
   8c48c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8c490:	e0bffd17 	ldw	r2,-12(fp)
   8c494:	e0fffd17 	ldw	r3,-12(fp)
   8c498:	10c00015 	stw	r3,0(r2)
   8c49c:	e0bffb17 	ldw	r2,-20(fp)
   8c4a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c4a4:	e0bffe17 	ldw	r2,-8(fp)
   8c4a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8c4ac:	e037883a 	mov	sp,fp
   8c4b0:	df000017 	ldw	fp,0(sp)
   8c4b4:	dec00104 	addi	sp,sp,4
   8c4b8:	f800283a 	ret

0008c4bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8c4bc:	defffb04 	addi	sp,sp,-20
   8c4c0:	dfc00415 	stw	ra,16(sp)
   8c4c4:	df000315 	stw	fp,12(sp)
   8c4c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8c4cc:	d0a00d17 	ldw	r2,-32716(gp)
   8c4d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8c4d4:	d0a6e217 	ldw	r2,-25720(gp)
   8c4d8:	10800044 	addi	r2,r2,1
   8c4dc:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c4e0:	00002e06 	br	8c59c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8c4e4:	e0bffd17 	ldw	r2,-12(fp)
   8c4e8:	10800017 	ldw	r2,0(r2)
   8c4ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8c4f0:	e0bffd17 	ldw	r2,-12(fp)
   8c4f4:	10800403 	ldbu	r2,16(r2)
   8c4f8:	10803fcc 	andi	r2,r2,255
   8c4fc:	10000426 	beq	r2,zero,8c510 <alt_tick+0x54>
   8c500:	d0a6e217 	ldw	r2,-25720(gp)
   8c504:	1000021e 	bne	r2,zero,8c510 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8c508:	e0bffd17 	ldw	r2,-12(fp)
   8c50c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8c510:	e0bffd17 	ldw	r2,-12(fp)
   8c514:	10800217 	ldw	r2,8(r2)
   8c518:	d0e6e217 	ldw	r3,-25720(gp)
   8c51c:	18801d36 	bltu	r3,r2,8c594 <alt_tick+0xd8>
   8c520:	e0bffd17 	ldw	r2,-12(fp)
   8c524:	10800403 	ldbu	r2,16(r2)
   8c528:	10803fcc 	andi	r2,r2,255
   8c52c:	1000191e 	bne	r2,zero,8c594 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8c530:	e0bffd17 	ldw	r2,-12(fp)
   8c534:	10c00317 	ldw	r3,12(r2)
   8c538:	e0bffd17 	ldw	r2,-12(fp)
   8c53c:	10800517 	ldw	r2,20(r2)
   8c540:	1009883a 	mov	r4,r2
   8c544:	183ee83a 	callr	r3
   8c548:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8c54c:	e0bfff17 	ldw	r2,-4(fp)
   8c550:	1000031e 	bne	r2,zero,8c560 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8c554:	e13ffd17 	ldw	r4,-12(fp)
   8c558:	008c4240 	call	8c424 <alt_alarm_stop>
   8c55c:	00000d06 	br	8c594 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8c560:	e0bffd17 	ldw	r2,-12(fp)
   8c564:	10c00217 	ldw	r3,8(r2)
   8c568:	e0bfff17 	ldw	r2,-4(fp)
   8c56c:	1887883a 	add	r3,r3,r2
   8c570:	e0bffd17 	ldw	r2,-12(fp)
   8c574:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8c578:	e0bffd17 	ldw	r2,-12(fp)
   8c57c:	10c00217 	ldw	r3,8(r2)
   8c580:	d0a6e217 	ldw	r2,-25720(gp)
   8c584:	1880032e 	bgeu	r3,r2,8c594 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8c588:	e0bffd17 	ldw	r2,-12(fp)
   8c58c:	00c00044 	movi	r3,1
   8c590:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8c594:	e0bffe17 	ldw	r2,-8(fp)
   8c598:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c59c:	e0fffd17 	ldw	r3,-12(fp)
   8c5a0:	d0a00d04 	addi	r2,gp,-32716
   8c5a4:	18bfcf1e 	bne	r3,r2,8c4e4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8c5a8:	0001883a 	nop
}
   8c5ac:	e037883a 	mov	sp,fp
   8c5b0:	dfc00117 	ldw	ra,4(sp)
   8c5b4:	df000017 	ldw	fp,0(sp)
   8c5b8:	dec00204 	addi	sp,sp,8
   8c5bc:	f800283a 	ret

0008c5c0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8c5c0:	deffff04 	addi	sp,sp,-4
   8c5c4:	df000015 	stw	fp,0(sp)
   8c5c8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8c5cc:	000170fa 	wrctl	ienable,zero
}
   8c5d0:	e037883a 	mov	sp,fp
   8c5d4:	df000017 	ldw	fp,0(sp)
   8c5d8:	dec00104 	addi	sp,sp,4
   8c5dc:	f800283a 	ret

0008c5e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8c5e0:	defffa04 	addi	sp,sp,-24
   8c5e4:	dfc00515 	stw	ra,20(sp)
   8c5e8:	df000415 	stw	fp,16(sp)
   8c5ec:	df000404 	addi	fp,sp,16
   8c5f0:	e13ffe15 	stw	r4,-8(fp)
   8c5f4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8c5f8:	e0bfff17 	ldw	r2,-4(fp)
   8c5fc:	10800017 	ldw	r2,0(r2)
   8c600:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8c604:	e13ffe17 	ldw	r4,-8(fp)
   8c608:	008060c0 	call	8060c <strlen>
   8c60c:	10800044 	addi	r2,r2,1
   8c610:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c614:	00000d06 	br	8c64c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8c618:	e0bffc17 	ldw	r2,-16(fp)
   8c61c:	10c00217 	ldw	r3,8(r2)
   8c620:	e0bffd17 	ldw	r2,-12(fp)
   8c624:	1809883a 	mov	r4,r3
   8c628:	e17ffe17 	ldw	r5,-8(fp)
   8c62c:	100d883a 	mov	r6,r2
   8c630:	008c8a40 	call	8c8a4 <memcmp>
   8c634:	1000021e 	bne	r2,zero,8c640 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8c638:	e0bffc17 	ldw	r2,-16(fp)
   8c63c:	00000706 	br	8c65c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8c640:	e0bffc17 	ldw	r2,-16(fp)
   8c644:	10800017 	ldw	r2,0(r2)
   8c648:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c64c:	e0fffc17 	ldw	r3,-16(fp)
   8c650:	e0bfff17 	ldw	r2,-4(fp)
   8c654:	18bff01e 	bne	r3,r2,8c618 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8c658:	0005883a 	mov	r2,zero
}
   8c65c:	e037883a 	mov	sp,fp
   8c660:	dfc00117 	ldw	ra,4(sp)
   8c664:	df000017 	ldw	fp,0(sp)
   8c668:	dec00204 	addi	sp,sp,8
   8c66c:	f800283a 	ret

0008c670 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8c670:	defffb04 	addi	sp,sp,-20
   8c674:	dfc00415 	stw	ra,16(sp)
   8c678:	df000315 	stw	fp,12(sp)
   8c67c:	df000304 	addi	fp,sp,12
   8c680:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8c684:	00800274 	movhi	r2,9
   8c688:	10ba9904 	addi	r2,r2,-5532
   8c68c:	10800017 	ldw	r2,0(r2)
   8c690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c694:	00003106 	br	8c75c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   8c698:	e0bffd17 	ldw	r2,-12(fp)
   8c69c:	10800217 	ldw	r2,8(r2)
   8c6a0:	1009883a 	mov	r4,r2
   8c6a4:	008060c0 	call	8060c <strlen>
   8c6a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   8c6ac:	e0bffd17 	ldw	r2,-12(fp)
   8c6b0:	10c00217 	ldw	r3,8(r2)
   8c6b4:	e0bffe17 	ldw	r2,-8(fp)
   8c6b8:	10bfffc4 	addi	r2,r2,-1
   8c6bc:	1885883a 	add	r2,r3,r2
   8c6c0:	10800003 	ldbu	r2,0(r2)
   8c6c4:	10803fcc 	andi	r2,r2,255
   8c6c8:	1080201c 	xori	r2,r2,128
   8c6cc:	10bfe004 	addi	r2,r2,-128
   8c6d0:	10800bd8 	cmpnei	r2,r2,47
   8c6d4:	1000031e 	bne	r2,zero,8c6e4 <alt_find_file+0x74>
    {
      len -= 1;
   8c6d8:	e0bffe17 	ldw	r2,-8(fp)
   8c6dc:	10bfffc4 	addi	r2,r2,-1
   8c6e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8c6e4:	e0bffe17 	ldw	r2,-8(fp)
   8c6e8:	e0ffff17 	ldw	r3,-4(fp)
   8c6ec:	1885883a 	add	r2,r3,r2
   8c6f0:	10800003 	ldbu	r2,0(r2)
   8c6f4:	10803fcc 	andi	r2,r2,255
   8c6f8:	1080201c 	xori	r2,r2,128
   8c6fc:	10bfe004 	addi	r2,r2,-128
   8c700:	10800be0 	cmpeqi	r2,r2,47
   8c704:	1000081e 	bne	r2,zero,8c728 <alt_find_file+0xb8>
   8c708:	e0bffe17 	ldw	r2,-8(fp)
   8c70c:	e0ffff17 	ldw	r3,-4(fp)
   8c710:	1885883a 	add	r2,r3,r2
   8c714:	10800003 	ldbu	r2,0(r2)
   8c718:	10803fcc 	andi	r2,r2,255
   8c71c:	1080201c 	xori	r2,r2,128
   8c720:	10bfe004 	addi	r2,r2,-128
   8c724:	10000a1e 	bne	r2,zero,8c750 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8c728:	e0bffd17 	ldw	r2,-12(fp)
   8c72c:	10c00217 	ldw	r3,8(r2)
   8c730:	e0bffe17 	ldw	r2,-8(fp)
   8c734:	1809883a 	mov	r4,r3
   8c738:	e17fff17 	ldw	r5,-4(fp)
   8c73c:	100d883a 	mov	r6,r2
   8c740:	008c8a40 	call	8c8a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8c744:	1000021e 	bne	r2,zero,8c750 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8c748:	e0bffd17 	ldw	r2,-12(fp)
   8c74c:	00000806 	br	8c770 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   8c750:	e0bffd17 	ldw	r2,-12(fp)
   8c754:	10800017 	ldw	r2,0(r2)
   8c758:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c75c:	e0fffd17 	ldw	r3,-12(fp)
   8c760:	00800274 	movhi	r2,9
   8c764:	10ba9904 	addi	r2,r2,-5532
   8c768:	18bfcb1e 	bne	r3,r2,8c698 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8c76c:	0005883a 	mov	r2,zero
}
   8c770:	e037883a 	mov	sp,fp
   8c774:	dfc00117 	ldw	ra,4(sp)
   8c778:	df000017 	ldw	fp,0(sp)
   8c77c:	dec00204 	addi	sp,sp,8
   8c780:	f800283a 	ret

0008c784 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8c784:	defffa04 	addi	sp,sp,-24
   8c788:	dfc00515 	stw	ra,20(sp)
   8c78c:	df000415 	stw	fp,16(sp)
   8c790:	dc000315 	stw	r16,12(sp)
   8c794:	df000304 	addi	fp,sp,12
   8c798:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8c79c:	00bffa04 	movi	r2,-24
   8c7a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c7a4:	e03ffd15 	stw	zero,-12(fp)
   8c7a8:	00002106 	br	8c830 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   8c7ac:	04000274 	movhi	r16,9
   8c7b0:	8435eb04 	addi	r16,r16,-10324
   8c7b4:	e0bffd17 	ldw	r2,-12(fp)
   8c7b8:	1009883a 	mov	r4,r2
   8c7bc:	01400304 	movi	r5,12
   8c7c0:	00894740 	call	89474 <__mulsi3>
   8c7c4:	8085883a 	add	r2,r16,r2
   8c7c8:	10800017 	ldw	r2,0(r2)
   8c7cc:	1000151e 	bne	r2,zero,8c824 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   8c7d0:	04000274 	movhi	r16,9
   8c7d4:	8435eb04 	addi	r16,r16,-10324
   8c7d8:	e0bffd17 	ldw	r2,-12(fp)
   8c7dc:	1009883a 	mov	r4,r2
   8c7e0:	01400304 	movi	r5,12
   8c7e4:	00894740 	call	89474 <__mulsi3>
   8c7e8:	8085883a 	add	r2,r16,r2
   8c7ec:	e0ffff17 	ldw	r3,-4(fp)
   8c7f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8c7f4:	00800274 	movhi	r2,9
   8c7f8:	10ba9d04 	addi	r2,r2,-5516
   8c7fc:	10c00017 	ldw	r3,0(r2)
   8c800:	e0bffd17 	ldw	r2,-12(fp)
   8c804:	1880040e 	bge	r3,r2,8c818 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   8c808:	00800274 	movhi	r2,9
   8c80c:	10ba9d04 	addi	r2,r2,-5516
   8c810:	e0fffd17 	ldw	r3,-12(fp)
   8c814:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   8c818:	e0bffd17 	ldw	r2,-12(fp)
   8c81c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8c820:	00000606 	br	8c83c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c824:	e0bffd17 	ldw	r2,-12(fp)
   8c828:	10800044 	addi	r2,r2,1
   8c82c:	e0bffd15 	stw	r2,-12(fp)
   8c830:	e0bffd17 	ldw	r2,-12(fp)
   8c834:	10800810 	cmplti	r2,r2,32
   8c838:	103fdc1e 	bne	r2,zero,8c7ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8c83c:	e0bffe17 	ldw	r2,-8(fp)
}
   8c840:	e037883a 	mov	sp,fp
   8c844:	dfc00217 	ldw	ra,8(sp)
   8c848:	df000117 	ldw	fp,4(sp)
   8c84c:	dc000017 	ldw	r16,0(sp)
   8c850:	dec00304 	addi	sp,sp,12
   8c854:	f800283a 	ret

0008c858 <atexit>:
   8c858:	200b883a 	mov	r5,r4
   8c85c:	000d883a 	mov	r6,zero
   8c860:	0009883a 	mov	r4,zero
   8c864:	000f883a 	mov	r7,zero
   8c868:	008c9201 	jmpi	8c920 <__register_exitproc>

0008c86c <exit>:
   8c86c:	defffe04 	addi	sp,sp,-8
   8c870:	000b883a 	mov	r5,zero
   8c874:	dc000015 	stw	r16,0(sp)
   8c878:	dfc00115 	stw	ra,4(sp)
   8c87c:	2021883a 	mov	r16,r4
   8c880:	008ca500 	call	8ca50 <__call_exitprocs>
   8c884:	00800274 	movhi	r2,9
   8c888:	10ba9404 	addi	r2,r2,-5552
   8c88c:	11000017 	ldw	r4,0(r2)
   8c890:	20800f17 	ldw	r2,60(r4)
   8c894:	10000126 	beq	r2,zero,8c89c <exit+0x30>
   8c898:	103ee83a 	callr	r2
   8c89c:	8009883a 	mov	r4,r16
   8c8a0:	008cbf00 	call	8cbf0 <_exit>

0008c8a4 <memcmp>:
   8c8a4:	01c000c4 	movi	r7,3
   8c8a8:	3980192e 	bgeu	r7,r6,8c910 <memcmp+0x6c>
   8c8ac:	2904b03a 	or	r2,r5,r4
   8c8b0:	11c4703a 	and	r2,r2,r7
   8c8b4:	10000f26 	beq	r2,zero,8c8f4 <memcmp+0x50>
   8c8b8:	20c00003 	ldbu	r3,0(r4)
   8c8bc:	28800003 	ldbu	r2,0(r5)
   8c8c0:	1880151e 	bne	r3,r2,8c918 <memcmp+0x74>
   8c8c4:	31bfff84 	addi	r6,r6,-2
   8c8c8:	01ffffc4 	movi	r7,-1
   8c8cc:	00000406 	br	8c8e0 <memcmp+0x3c>
   8c8d0:	20c00003 	ldbu	r3,0(r4)
   8c8d4:	28800003 	ldbu	r2,0(r5)
   8c8d8:	31bfffc4 	addi	r6,r6,-1
   8c8dc:	18800e1e 	bne	r3,r2,8c918 <memcmp+0x74>
   8c8e0:	21000044 	addi	r4,r4,1
   8c8e4:	29400044 	addi	r5,r5,1
   8c8e8:	31fff91e 	bne	r6,r7,8c8d0 <memcmp+0x2c>
   8c8ec:	0005883a 	mov	r2,zero
   8c8f0:	f800283a 	ret
   8c8f4:	20c00017 	ldw	r3,0(r4)
   8c8f8:	28800017 	ldw	r2,0(r5)
   8c8fc:	1880041e 	bne	r3,r2,8c910 <memcmp+0x6c>
   8c900:	31bfff04 	addi	r6,r6,-4
   8c904:	21000104 	addi	r4,r4,4
   8c908:	29400104 	addi	r5,r5,4
   8c90c:	39bff936 	bltu	r7,r6,8c8f4 <memcmp+0x50>
   8c910:	303fe91e 	bne	r6,zero,8c8b8 <memcmp+0x14>
   8c914:	003ff506 	br	8c8ec <memcmp+0x48>
   8c918:	1885c83a 	sub	r2,r3,r2
   8c91c:	f800283a 	ret

0008c920 <__register_exitproc>:
   8c920:	defffa04 	addi	sp,sp,-24
   8c924:	00800274 	movhi	r2,9
   8c928:	10ba9404 	addi	r2,r2,-5552
   8c92c:	dc000315 	stw	r16,12(sp)
   8c930:	14000017 	ldw	r16,0(r2)
   8c934:	dc400415 	stw	r17,16(sp)
   8c938:	dfc00515 	stw	ra,20(sp)
   8c93c:	80805217 	ldw	r2,328(r16)
   8c940:	2023883a 	mov	r17,r4
   8c944:	10003e26 	beq	r2,zero,8ca40 <__register_exitproc+0x120>
   8c948:	10c00117 	ldw	r3,4(r2)
   8c94c:	020007c4 	movi	r8,31
   8c950:	40c0180e 	bge	r8,r3,8c9b4 <__register_exitproc+0x94>
   8c954:	00800034 	movhi	r2,0
   8c958:	10800004 	addi	r2,r2,0
   8c95c:	1000061e 	bne	r2,zero,8c978 <__register_exitproc+0x58>
   8c960:	00bfffc4 	movi	r2,-1
   8c964:	dfc00517 	ldw	ra,20(sp)
   8c968:	dc400417 	ldw	r17,16(sp)
   8c96c:	dc000317 	ldw	r16,12(sp)
   8c970:	dec00604 	addi	sp,sp,24
   8c974:	f800283a 	ret
   8c978:	01006404 	movi	r4,400
   8c97c:	d9400015 	stw	r5,0(sp)
   8c980:	d9800115 	stw	r6,4(sp)
   8c984:	d9c00215 	stw	r7,8(sp)
   8c988:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8c98c:	d9400017 	ldw	r5,0(sp)
   8c990:	d9800117 	ldw	r6,4(sp)
   8c994:	d9c00217 	ldw	r7,8(sp)
   8c998:	103ff126 	beq	r2,zero,8c960 <__register_exitproc+0x40>
   8c99c:	80c05217 	ldw	r3,328(r16)
   8c9a0:	10000115 	stw	zero,4(r2)
   8c9a4:	10c00015 	stw	r3,0(r2)
   8c9a8:	80805215 	stw	r2,328(r16)
   8c9ac:	10006215 	stw	zero,392(r2)
   8c9b0:	10006315 	stw	zero,396(r2)
   8c9b4:	10c00117 	ldw	r3,4(r2)
   8c9b8:	88000d1e 	bne	r17,zero,8c9f0 <__register_exitproc+0xd0>
   8c9bc:	19000084 	addi	r4,r3,2
   8c9c0:	2109883a 	add	r4,r4,r4
   8c9c4:	18c00044 	addi	r3,r3,1
   8c9c8:	2109883a 	add	r4,r4,r4
   8c9cc:	1109883a 	add	r4,r2,r4
   8c9d0:	10c00115 	stw	r3,4(r2)
   8c9d4:	0005883a 	mov	r2,zero
   8c9d8:	21400015 	stw	r5,0(r4)
   8c9dc:	dfc00517 	ldw	ra,20(sp)
   8c9e0:	dc400417 	ldw	r17,16(sp)
   8c9e4:	dc000317 	ldw	r16,12(sp)
   8c9e8:	dec00604 	addi	sp,sp,24
   8c9ec:	f800283a 	ret
   8c9f0:	02400044 	movi	r9,1
   8c9f4:	12806217 	ldw	r10,392(r2)
   8c9f8:	48d2983a 	sll	r9,r9,r3
   8c9fc:	19000804 	addi	r4,r3,32
   8ca00:	18d1883a 	add	r8,r3,r3
   8ca04:	2109883a 	add	r4,r4,r4
   8ca08:	4211883a 	add	r8,r8,r8
   8ca0c:	2109883a 	add	r4,r4,r4
   8ca10:	1109883a 	add	r4,r2,r4
   8ca14:	1211883a 	add	r8,r2,r8
   8ca18:	5254b03a 	or	r10,r10,r9
   8ca1c:	21c02215 	stw	r7,136(r4)
   8ca20:	41802215 	stw	r6,136(r8)
   8ca24:	12806215 	stw	r10,392(r2)
   8ca28:	01000084 	movi	r4,2
   8ca2c:	893fe31e 	bne	r17,r4,8c9bc <__register_exitproc+0x9c>
   8ca30:	11006317 	ldw	r4,396(r2)
   8ca34:	2252b03a 	or	r9,r4,r9
   8ca38:	12406315 	stw	r9,396(r2)
   8ca3c:	003fdf06 	br	8c9bc <__register_exitproc+0x9c>
   8ca40:	00800274 	movhi	r2,9
   8ca44:	1081c104 	addi	r2,r2,1796
   8ca48:	80805215 	stw	r2,328(r16)
   8ca4c:	003fbe06 	br	8c948 <__register_exitproc+0x28>

0008ca50 <__call_exitprocs>:
   8ca50:	00800274 	movhi	r2,9
   8ca54:	10ba9404 	addi	r2,r2,-5552
   8ca58:	10800017 	ldw	r2,0(r2)
   8ca5c:	defff304 	addi	sp,sp,-52
   8ca60:	df000b15 	stw	fp,44(sp)
   8ca64:	d8800015 	stw	r2,0(sp)
   8ca68:	10805204 	addi	r2,r2,328
   8ca6c:	dd400815 	stw	r21,32(sp)
   8ca70:	dfc00c15 	stw	ra,48(sp)
   8ca74:	ddc00a15 	stw	r23,40(sp)
   8ca78:	dd800915 	stw	r22,36(sp)
   8ca7c:	dd000715 	stw	r20,28(sp)
   8ca80:	dcc00615 	stw	r19,24(sp)
   8ca84:	dc800515 	stw	r18,20(sp)
   8ca88:	dc400415 	stw	r17,16(sp)
   8ca8c:	dc000315 	stw	r16,12(sp)
   8ca90:	d9000115 	stw	r4,4(sp)
   8ca94:	2839883a 	mov	fp,r5
   8ca98:	d8800215 	stw	r2,8(sp)
   8ca9c:	057fffc4 	movi	r21,-1
   8caa0:	d8800017 	ldw	r2,0(sp)
   8caa4:	ddc00217 	ldw	r23,8(sp)
   8caa8:	14805217 	ldw	r18,328(r2)
   8caac:	90001726 	beq	r18,zero,8cb0c <__call_exitprocs+0xbc>
   8cab0:	94400117 	ldw	r17,4(r18)
   8cab4:	8c3fffc4 	addi	r16,r17,-1
   8cab8:	80001116 	blt	r16,zero,8cb00 <__call_exitprocs+0xb0>
   8cabc:	8c400044 	addi	r17,r17,1
   8cac0:	8427883a 	add	r19,r16,r16
   8cac4:	8c63883a 	add	r17,r17,r17
   8cac8:	95802204 	addi	r22,r18,136
   8cacc:	9ce7883a 	add	r19,r19,r19
   8cad0:	8c63883a 	add	r17,r17,r17
   8cad4:	b4e7883a 	add	r19,r22,r19
   8cad8:	9463883a 	add	r17,r18,r17
   8cadc:	e0001726 	beq	fp,zero,8cb3c <__call_exitprocs+0xec>
   8cae0:	8c87c83a 	sub	r3,r17,r18
   8cae4:	b0c7883a 	add	r3,r22,r3
   8cae8:	18c01e17 	ldw	r3,120(r3)
   8caec:	1f001326 	beq	r3,fp,8cb3c <__call_exitprocs+0xec>
   8caf0:	843fffc4 	addi	r16,r16,-1
   8caf4:	9cffff04 	addi	r19,r19,-4
   8caf8:	8c7fff04 	addi	r17,r17,-4
   8cafc:	857ff71e 	bne	r16,r21,8cadc <__call_exitprocs+0x8c>
   8cb00:	00800034 	movhi	r2,0
   8cb04:	10800004 	addi	r2,r2,0
   8cb08:	10002a1e 	bne	r2,zero,8cbb4 <__call_exitprocs+0x164>
   8cb0c:	dfc00c17 	ldw	ra,48(sp)
   8cb10:	df000b17 	ldw	fp,44(sp)
   8cb14:	ddc00a17 	ldw	r23,40(sp)
   8cb18:	dd800917 	ldw	r22,36(sp)
   8cb1c:	dd400817 	ldw	r21,32(sp)
   8cb20:	dd000717 	ldw	r20,28(sp)
   8cb24:	dcc00617 	ldw	r19,24(sp)
   8cb28:	dc800517 	ldw	r18,20(sp)
   8cb2c:	dc400417 	ldw	r17,16(sp)
   8cb30:	dc000317 	ldw	r16,12(sp)
   8cb34:	dec00d04 	addi	sp,sp,52
   8cb38:	f800283a 	ret
   8cb3c:	91000117 	ldw	r4,4(r18)
   8cb40:	88c00017 	ldw	r3,0(r17)
   8cb44:	213fffc4 	addi	r4,r4,-1
   8cb48:	24001526 	beq	r4,r16,8cba0 <__call_exitprocs+0x150>
   8cb4c:	88000015 	stw	zero,0(r17)
   8cb50:	183fe726 	beq	r3,zero,8caf0 <__call_exitprocs+0xa0>
   8cb54:	00800044 	movi	r2,1
   8cb58:	1408983a 	sll	r4,r2,r16
   8cb5c:	91406217 	ldw	r5,392(r18)
   8cb60:	95000117 	ldw	r20,4(r18)
   8cb64:	214a703a 	and	r5,r4,r5
   8cb68:	28000b26 	beq	r5,zero,8cb98 <__call_exitprocs+0x148>
   8cb6c:	91406317 	ldw	r5,396(r18)
   8cb70:	2148703a 	and	r4,r4,r5
   8cb74:	20000c1e 	bne	r4,zero,8cba8 <__call_exitprocs+0x158>
   8cb78:	99400017 	ldw	r5,0(r19)
   8cb7c:	d9000117 	ldw	r4,4(sp)
   8cb80:	183ee83a 	callr	r3
   8cb84:	90c00117 	ldw	r3,4(r18)
   8cb88:	1d3fc51e 	bne	r3,r20,8caa0 <__call_exitprocs+0x50>
   8cb8c:	b8c00017 	ldw	r3,0(r23)
   8cb90:	1cbfd726 	beq	r3,r18,8caf0 <__call_exitprocs+0xa0>
   8cb94:	003fc206 	br	8caa0 <__call_exitprocs+0x50>
   8cb98:	183ee83a 	callr	r3
   8cb9c:	003ff906 	br	8cb84 <__call_exitprocs+0x134>
   8cba0:	94000115 	stw	r16,4(r18)
   8cba4:	003fea06 	br	8cb50 <__call_exitprocs+0x100>
   8cba8:	99000017 	ldw	r4,0(r19)
   8cbac:	183ee83a 	callr	r3
   8cbb0:	003ff406 	br	8cb84 <__call_exitprocs+0x134>
   8cbb4:	90c00117 	ldw	r3,4(r18)
   8cbb8:	1800071e 	bne	r3,zero,8cbd8 <__call_exitprocs+0x188>
   8cbbc:	90c00017 	ldw	r3,0(r18)
   8cbc0:	18000926 	beq	r3,zero,8cbe8 <__call_exitprocs+0x198>
   8cbc4:	9009883a 	mov	r4,r18
   8cbc8:	b8c00015 	stw	r3,0(r23)
   8cbcc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8cbd0:	bc800017 	ldw	r18,0(r23)
   8cbd4:	003fb506 	br	8caac <__call_exitprocs+0x5c>
   8cbd8:	90c00017 	ldw	r3,0(r18)
   8cbdc:	902f883a 	mov	r23,r18
   8cbe0:	1825883a 	mov	r18,r3
   8cbe4:	003fb106 	br	8caac <__call_exitprocs+0x5c>
   8cbe8:	0007883a 	mov	r3,zero
   8cbec:	003ffb06 	br	8cbdc <__call_exitprocs+0x18c>

0008cbf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8cbf0:	defffc04 	addi	sp,sp,-16
   8cbf4:	df000315 	stw	fp,12(sp)
   8cbf8:	df000304 	addi	fp,sp,12
   8cbfc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8cc00:	0001883a 	nop
   8cc04:	e0bfff17 	ldw	r2,-4(fp)
   8cc08:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   8cc0c:	e0bffd17 	ldw	r2,-12(fp)
   8cc10:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8cc14:	e0bffe17 	ldw	r2,-8(fp)
   8cc18:	10000226 	beq	r2,zero,8cc24 <_exit+0x34>
    ALT_SIM_FAIL();
   8cc1c:	002af070 	cmpltui	zero,zero,43969
   8cc20:	00000106 	br	8cc28 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   8cc24:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8cc28:	003fff06 	br	8cc28 <_exit+0x38>
