
lab7_bai1.elf:     file format elf32-littlenios2
lab7_bai1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000cd6c memsz 0x0000cd6c flags r-x
    LOAD off    0x0000dd8c vaddr 0x0008cd8c paddr 0x0008e7e8 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010244 vaddr 0x00090244 paddr 0x00090244 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c870  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000368  0008ca24  0008ca24  0000da24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0008cd8c  0008e7e8  0000dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00090244  00090244  00010244  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f7e8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  0000f810  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001394  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023140  00000000  00000000  0001185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a1e  00000000  00000000  0003499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000139a4  00000000  00000000  0003c3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018e0  00000000  00000000  0004fd60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000226c  00000000  00000000  00051640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be66  00000000  00000000  000538ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0005f714  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0005f758  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062fbd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00062fc0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062fcc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00062fcd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00062fce  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00062fd9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00062fe4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00062fef  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000000e  00000000  00000000  00062ff7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00042a8d  00000000  00000000  00063005  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008ca24 l    d  .rodata	00000000 .rodata
0008cd8c l    d  .rwdata	00000000 .rwdata
00090244 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080560 l     F .text	00000058 __sprint_r
0008caba l     O .rodata	00000010 blanks.3452
0008caaa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000825dc l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084004 l     F .text	00000058 std
00084110 l     F .text	00000008 __fp_lock
00084118 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008cd8c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008e7b4 l     O .rwdata	00000004 charset
0008caf0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008cc38 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00088538 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00089664 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00089fa0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008a000 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008a104 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008a228 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008a308 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008a468 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0008a6d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008e7d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008a9c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008d748 l     O .rwdata	00001060 jtag_uart_0
0008aa98 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008acd8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008af00 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008b8fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008bd0c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008be5c l     F .text	000000f8 alt_file_locked
0008c0e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008c80c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008c9c0 l     F .text	00000040 alt_sim_halt
00085df4 g     F .text	00000094 _mprec_log10
00085ee0 g     F .text	00000088 __any_on
0008770c g     F .text	00000070 _isatty_r
0008cc10 g     O .rodata	00000028 __mprec_tinytens
0008a4c8 g     F .text	0000006c alt_main
000902a0 g     O .bss	00000100 alt_irq
0008777c g     F .text	00000078 _lseek_r
0008e7e8 g       *ABS*	00000000 __flash_rwdata_start
00089058 g     F .text	00000088 __eqdf2
0008026c g     F .text	00000080 lcd_data
00090530 g       *ABS*	00000000 __alt_heap_start
00087150 g     F .text	00000068 __sseek
0008406c g     F .text	000000a4 __sinit
00084d78 g     F .text	00000084 _setlocale_r
0008416c g     F .text	0000009c __sfmoreglue
0008a554 g     F .text	00000020 __malloc_unlock
00085870 g     F .text	000000e0 memmove
0008415c g     F .text	00000010 _cleanup
00085f68 g     F .text	000000bc _Balloc
0008a574 g     F .text	00000040 alt_putstr
00089168 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00087698 g     F .text	00000074 _fstat_r
0009025c g     O .bss	00000004 errno
00090264 g     O .bss	00000004 alt_argv
000967a8 g       *ABS*	00000000 _gp
0008a86c g     F .text	00000030 usleep
0008d5c8 g     O .rwdata	00000180 alt_fd_list
0008c304 g     F .text	00000094 alt_find_dev
000857d0 g     F .text	000000a0 memcpy
00084150 g     F .text	0000000c _cleanup_r
00089300 g     F .text	000000f8 __floatsidf
0008bde4 g     F .text	00000078 alt_io_redirect
00089278 g     F .text	00000088 __ltdf2
0008ca24 g       *ABS*	00000000 __DTOR_END__
00085d44 g     F .text	000000b0 __ratio
0008b118 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000897a0 g     F .text	00000008 __udivsi3
0008a164 g     F .text	000000c4 isatty
0008cb20 g     O .rodata	000000c8 __mprec_tens
00084d54 g     F .text	00000008 __locale_charset
00090250 g     O .bss	00000004 __malloc_top_pad
0008e7b0 g     O .rwdata	00000004 __mb_cur_max
00084d5c g     F .text	0000000c _localeconv_r
000866cc g     F .text	0000003c __i2b
00084738 g     F .text	0000049c __sfvwrite_r
000870d8 g     F .text	00000070 _sbrk_r
000877f4 g     F .text	00000078 _read_r
0008d18c g     O .rwdata	0000000c __lc_ctype
0008e7d0 g     O .rwdata	00000004 alt_max_fd
00089ca0 g     F .text	00000138 __unpack_d
00087574 g     F .text	00000110 _fclose_r
00083fd0 g     F .text	00000034 fflush
00090254 g     O .bss	00000004 __malloc_max_sbrked_mem
000889c8 g     F .text	00000074 __adddf3
00085c24 g     F .text	00000120 __b2d
00087ed8 g     F .text	00000660 __umoddi3
0008a374 g     F .text	000000f4 lseek
0008e7ac g     O .rwdata	00000004 _global_impure_ptr
00086a74 g     F .text	000005f4 _realloc_r
00090530 g       *ABS*	00000000 __bss_end
0008bc14 g     F .text	000000f8 alt_iic_isr_register
0008c1d8 g     F .text	0000010c alt_tick
0008786c g     F .text	0000066c __udivdi3
0008cbe8 g     O .rodata	00000028 __mprec_bigtens
00086954 g     F .text	00000120 __s2b
000894d0 g     F .text	00000194 __floatunsidf
00085b44 g     F .text	00000060 __mcmp
00084138 g     F .text	00000018 __fp_lock_all
0008bbcc g     F .text	00000048 alt_ic_irq_enabled
0008c140 g     F .text	00000098 alt_alarm_stop
0009026c g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008d5a0 g     O .rwdata	00000028 alt_dev_null
0008b82c g     F .text	0000001c alt_dcache_flush_all
00085a10 g     F .text	00000070 __hi0bits
000893f8 g     F .text	000000d8 __fixdfsi
0008e7e8 g       *ABS*	00000000 __ram_rwdata_end
0008e7c8 g     O .rwdata	00000008 alt_dev_list
0008a89c g     F .text	00000124 write
0008cd8c g       *ABS*	00000000 __ram_rodata_end
0008a02c g     F .text	000000d8 fstat
00086834 g     F .text	00000120 __pow5mult
00090244 g     O .bss	00000004 __nlocale_changed
000897a8 g     F .text	00000008 __umodsi3
00090530 g       *ABS*	00000000 end
0008ac18 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008ca20 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008990c g     F .text	00000080 __clzsi2
0008b33c g     F .text	00000240 altera_avalon_jtag_uart_write
0008405c g     F .text	00000004 __sfp_lock_acquire
000856ec g     F .text	000000e4 memchr
000805b8 g     F .text	00001ec4 ___vfprintf_internal_r
00080500 g     F .text	00000060 _sprintf_r
00084424 g     F .text	00000314 _free_r
000802ec g     F .text	00000088 lcd_string
0008c810 g     F .text	000001b0 __call_exitprocs
00090248 g     O .bss	00000004 __mlocale_changed
0008e7bc g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00090270 g     O .bss	00000004 _alt_tick_rate
0008632c g     F .text	0000014c __lshift
00090274 g     O .bss	00000004 _alt_nticks
0008a5b4 g     F .text	00000124 read
0008aa54 g     F .text	00000044 alt_sys_init
0008c6d8 g     F .text	00000134 __register_exitproc
00086478 g     F .text	00000254 __multiply
0008afb0 g     F .text	00000074 altera_avalon_jtag_uart_close
000897b0 g     F .text	00000038 __mulsi3
0008cd8c g       *ABS*	00000000 __ram_rwdata_start
0008ca24 g       *ABS*	00000000 __ram_rodata_start
00090278 g     O .bss	00000028 __malloc_current_mallinfo
00086024 g     F .text	0000017c __d2b
0008aad0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008c4b8 g     F .text	000000d0 alt_get_fd
0008b6d0 g     F .text	0000015c alt_busy_sleep
00089dd8 g     F .text	000000c8 __fpcmp_parts_d
00087504 g     F .text	00000070 _close_r
0008c664 g     F .text	00000074 memcmp
0008ab80 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00090530 g       *ABS*	00000000 __alt_stack_base
0008abc8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000824a0 g     F .text	0000013c __swsetup_r
00088e00 g     F .text	00000258 __divdf3
00084208 g     F .text	000000f0 __sfp
00085e88 g     F .text	00000058 __copybits
0008d198 g     O .rwdata	00000408 __malloc_av_
00084068 g     F .text	00000004 __sinit_lock_release
00088a3c g     F .text	000003c4 __muldf3
00087234 g     F .text	00000060 __sread
0008c398 g     F .text	00000120 alt_find_file
0008b848 g     F .text	000000b4 alt_dev_llist_insert
0008a534 g     F .text	00000020 __malloc_lock
0008a7b0 g     F .text	000000bc sbrk
00083dd4 g     F .text	000001fc _fflush_r
0008743c g     F .text	000000c8 _calloc_r
00090244 g       *ABS*	00000000 __bss_start
00085950 g     F .text	00000098 memset
00080374 g     F .text	0000008c lcd_init
00080400 g     F .text	0000008c main
00090268 g     O .bss	00000004 alt_envp
00090258 g     O .bss	00000004 __malloc_max_total_mem
0008ab28 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00087148 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
00087684 g     F .text	00000014 fclose
000903a0 g     O .bss	00000190 _atexit0
00082820 g     F .text	000015b4 _dtoa_r
00084fac g     F .text	00000740 _malloc_r
0008e7d4 g     O .rwdata	00000004 alt_errno
00084c9c g     F .text	000000b8 _fwalk
000896e0 g     F .text	00000060 __divsi3
0008cc44 g     O .rodata	00000014 __thenan_df
000842f8 g     F .text	0000012c _malloc_trim_r
0008ca24 g       *ABS*	00000000 __CTOR_END__
00087294 g     F .text	000000bc strcmp
0008ca24 g       *ABS*	00000000 __flash_rodata_start
0008ca24 g       *ABS*	00000000 __DTOR_LIST__
000890e0 g     F .text	00000088 __nedf2
0008aa20 g     F .text	00000034 alt_irq_init
0008a738 g     F .text	00000078 alt_release_fd
0008048c g     F .text	00000074 sprintf
0008cc58 g     O .rodata	00000100 __clz_tab
0009024c g     O .bss	00000004 _PathLocale
0008c588 g     F .text	00000014 atexit
000873c4 g     F .text	00000078 _write_r
00084dfc g     F .text	0000001c setlocale
0008e7a8 g     O .rwdata	00000004 _impure_ptr
00090260 g     O .bss	00000004 alt_argc
0008b9c0 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00085ba4 g     F .text	00000080 __ulp
00087068 g     F .text	00000040 __isinfd
00084120 g     F .text	00000018 __fp_unlock_all
0008e7c0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084d68 g     F .text	00000010 localeconv
0008ba40 g     F .text	00000050 alt_ic_isr_register
0008e7e8 g       *ABS*	00000000 _edata
00090530 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008b024 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008c5d4 g     F .text	00000074 _fputs_r
0008bb2c g     F .text	000000a0 alt_ic_irq_disable
000871b8 g     F .text	0000007c __swrite
0008e7b8 g     O .rwdata	00000004 __malloc_trim_threshold
0008c2e4 g     F .text	00000020 altera_nios2_qsys_irq_init
0008c59c g     F .text	00000038 exit
00084bd4 g     F .text	000000c8 _fwalk_reent
000861a0 g     F .text	0000018c __mdiff
00089740 g     F .text	00000060 __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084060 g     F .text	00000004 __sfp_lock_release
0008ca00 g     F .text	00000020 _exit
000870a8 g     F .text	00000030 __isnand
0008b57c g     F .text	00000154 alt_alarm_start
000897e8 g     F .text	00000124 __muldi3
00084e18 g     F .text	00000194 __smakebuf_r
00087350 g     F .text	00000074 strlen
0008bf54 g     F .text	0000018c open
000891f0 g     F .text	00000088 __gedf2
0008ba24 g     F .text	0000001c alt_icache_flush_all
000801f0 g     F .text	0000007c lcd_command
0008c648 g     F .text	0000001c fputs
0008e7dc g     O .rwdata	00000004 alt_priority_mask
0008ba90 g     F .text	0000009c alt_ic_irq_enable
0008247c g     F .text	00000024 __vfprintf_internal
00088948 g     F .text	00000080 __subdf3
00085a80 g     F .text	000000c4 __lo0bits
0008e7e0 g     O .rwdata	00000008 alt_alarm_list
0008b95c g     F .text	00000064 _do_ctors
00089ea0 g     F .text	00000100 close
0008a288 g     F .text	00000080 alt_load
0008998c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084064 g     F .text	00000004 __sinit_lock_acquire
00086708 g     F .text	0000012c __multadd
000859e8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c0a804 	addi	r3,r3,672
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c0a804 	addi	r3,r3,672
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec6a014 	ori	sp,sp,6784

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d699ea14 	ori	gp,gp,26536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	10809114 	ori	r2,r2,580

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c14c14 	ori	r3,r3,1328

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008a2880 	call	8a288 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008a4c80 	call	8a4c8 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <lcd_command>:
#include "sys/alt_stdio.h"
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

void lcd_command(char data) {
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	dfc00215 	stw	ra,8(sp)
   801f8:	df000115 	stw	fp,4(sp)
   801fc:	df000104 	addi	fp,sp,4
   80200:	e13fff05 	stb	r4,-4(fp)
    IOWR(LCD_RS_BASE, 0, 0x00);
   80204:	00800434 	movhi	r2,16
   80208:	10840804 	addi	r2,r2,4128
   8020c:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_RW_BASE, 0, 0x00);
   80210:	00800434 	movhi	r2,16
   80214:	10840c04 	addi	r2,r2,4144
   80218:	10000035 	stwio	zero,0(r2)
    IOWR(LCD_DATA_BASE, 0, data);
   8021c:	e0ffff07 	ldb	r3,-4(fp)
   80220:	00800434 	movhi	r2,16
   80224:	10841004 	addi	r2,r2,4160
   80228:	10c00035 	stwio	r3,0(r2)
    IOWR(LCD_EN_BASE, 0, 0x01);
   8022c:	00c00434 	movhi	r3,16
   80230:	18c40404 	addi	r3,r3,4112
   80234:	00800044 	movi	r2,1
   80238:	18800035 	stwio	r2,0(r3)
    usleep(5);
   8023c:	01000144 	movi	r4,5
   80240:	008a86c0 	call	8a86c <usleep>
    IOWR(LCD_EN_BASE, 0, 0x00);
   80244:	00800434 	movhi	r2,16
   80248:	10840404 	addi	r2,r2,4112
   8024c:	10000035 	stwio	zero,0(r2)
    usleep(5);
   80250:	01000144 	movi	r4,5
   80254:	008a86c0 	call	8a86c <usleep>
}
   80258:	e037883a 	mov	sp,fp
   8025c:	dfc00117 	ldw	ra,4(sp)
   80260:	df000017 	ldw	fp,0(sp)
   80264:	dec00204 	addi	sp,sp,8
   80268:	f800283a 	ret

0008026c <lcd_data>:

void lcd_data(char data) {
   8026c:	defffd04 	addi	sp,sp,-12
   80270:	dfc00215 	stw	ra,8(sp)
   80274:	df000115 	stw	fp,4(sp)
   80278:	df000104 	addi	fp,sp,4
   8027c:	e13fff05 	stb	r4,-4(fp)
	 IOWR(LCD_RS_BASE, 0, 0x01);
   80280:	00c00434 	movhi	r3,16
   80284:	18c40804 	addi	r3,r3,4128
   80288:	00800044 	movi	r2,1
   8028c:	18800035 	stwio	r2,0(r3)
	 IOWR(LCD_RW_BASE, 0, 0x00);
   80290:	00800434 	movhi	r2,16
   80294:	10840c04 	addi	r2,r2,4144
   80298:	10000035 	stwio	zero,0(r2)
	 IOWR(LCD_DATA_BASE, 0, data);
   8029c:	e0ffff07 	ldb	r3,-4(fp)
   802a0:	00800434 	movhi	r2,16
   802a4:	10841004 	addi	r2,r2,4160
   802a8:	10c00035 	stwio	r3,0(r2)
	 IOWR(LCD_EN_BASE, 0, 0x01);
   802ac:	00c00434 	movhi	r3,16
   802b0:	18c40404 	addi	r3,r3,4112
   802b4:	00800044 	movi	r2,1
   802b8:	18800035 	stwio	r2,0(r3)
	 usleep(5);
   802bc:	01000144 	movi	r4,5
   802c0:	008a86c0 	call	8a86c <usleep>
	 IOWR(LCD_EN_BASE, 0, 0x00);
   802c4:	00800434 	movhi	r2,16
   802c8:	10840404 	addi	r2,r2,4112
   802cc:	10000035 	stwio	zero,0(r2)
	 usleep(5);
   802d0:	01000144 	movi	r4,5
   802d4:	008a86c0 	call	8a86c <usleep>
}
   802d8:	e037883a 	mov	sp,fp
   802dc:	dfc00117 	ldw	ra,4(sp)
   802e0:	df000017 	ldw	fp,0(sp)
   802e4:	dec00204 	addi	sp,sp,8
   802e8:	f800283a 	ret

000802ec <lcd_string>:

void lcd_string(char *str) {
   802ec:	defffc04 	addi	sp,sp,-16
   802f0:	dfc00315 	stw	ra,12(sp)
   802f4:	df000215 	stw	fp,8(sp)
   802f8:	df000204 	addi	fp,sp,8
   802fc:	e13fff15 	stw	r4,-4(fp)
    char i = 0;
   80300:	e03ffe05 	stb	zero,-8(fp)
    while (str[i] != 0) {
   80304:	00000c06 	br	80338 <lcd_string+0x4c>
        lcd_data(str[i]);
   80308:	e0bffe07 	ldb	r2,-8(fp)
   8030c:	1007883a 	mov	r3,r2
   80310:	e0bfff17 	ldw	r2,-4(fp)
   80314:	1885883a 	add	r2,r3,r2
   80318:	10800003 	ldbu	r2,0(r2)
   8031c:	11003fcc 	andi	r4,r2,255
   80320:	2100201c 	xori	r4,r4,128
   80324:	213fe004 	addi	r4,r4,-128
   80328:	008026c0 	call	8026c <lcd_data>
        i++;
   8032c:	e0bffe03 	ldbu	r2,-8(fp)
   80330:	10800044 	addi	r2,r2,1
   80334:	e0bffe05 	stb	r2,-8(fp)
	 usleep(5);
}

void lcd_string(char *str) {
    char i = 0;
    while (str[i] != 0) {
   80338:	e0bffe07 	ldb	r2,-8(fp)
   8033c:	1007883a 	mov	r3,r2
   80340:	e0bfff17 	ldw	r2,-4(fp)
   80344:	1885883a 	add	r2,r3,r2
   80348:	10800003 	ldbu	r2,0(r2)
   8034c:	10803fcc 	andi	r2,r2,255
   80350:	1080201c 	xori	r2,r2,128
   80354:	10bfe004 	addi	r2,r2,-128
   80358:	1004c03a 	cmpne	r2,r2,zero
   8035c:	103fea1e 	bne	r2,zero,80308 <lcd_string+0x1c>
        lcd_data(str[i]);
        i++;
    }
}
   80360:	e037883a 	mov	sp,fp
   80364:	dfc00117 	ldw	ra,4(sp)
   80368:	df000017 	ldw	fp,0(sp)
   8036c:	dec00204 	addi	sp,sp,8
   80370:	f800283a 	ret

00080374 <lcd_init>:

void lcd_init(void) {
   80374:	defffe04 	addi	sp,sp,-8
   80378:	dfc00115 	stw	ra,4(sp)
   8037c:	df000015 	stw	fp,0(sp)
   80380:	d839883a 	mov	fp,sp
    usleep(15000);
   80384:	010ea604 	movi	r4,15000
   80388:	008a86c0 	call	8a86c <usleep>
    lcd_command(0x38);
   8038c:	01000e04 	movi	r4,56
   80390:	00801f00 	call	801f0 <lcd_command>
    usleep(4100);
   80394:	01040104 	movi	r4,4100
   80398:	008a86c0 	call	8a86c <usleep>
    lcd_command(0x38);
   8039c:	01000e04 	movi	r4,56
   803a0:	00801f00 	call	801f0 <lcd_command>
    usleep(100);
   803a4:	01001904 	movi	r4,100
   803a8:	008a86c0 	call	8a86c <usleep>
    lcd_command(0x38);
   803ac:	01000e04 	movi	r4,56
   803b0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803b4:	0101f404 	movi	r4,2000
   803b8:	008a86c0 	call	8a86c <usleep>
    lcd_command(0x0C);
   803bc:	01000304 	movi	r4,12
   803c0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803c4:	0101f404 	movi	r4,2000
   803c8:	008a86c0 	call	8a86c <usleep>
    lcd_command(0x01);
   803cc:	01000044 	movi	r4,1
   803d0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803d4:	0101f404 	movi	r4,2000
   803d8:	008a86c0 	call	8a86c <usleep>
    lcd_command(0x06);
   803dc:	01000184 	movi	r4,6
   803e0:	00801f00 	call	801f0 <lcd_command>
    usleep(2000);
   803e4:	0101f404 	movi	r4,2000
   803e8:	008a86c0 	call	8a86c <usleep>
}
   803ec:	e037883a 	mov	sp,fp
   803f0:	dfc00117 	ldw	ra,4(sp)
   803f4:	df000017 	ldw	fp,0(sp)
   803f8:	dec00204 	addi	sp,sp,8
   803fc:	f800283a 	ret

00080400 <main>:
//    lcd_command(0xC0);
//    sprintf(lcd_buffer, "Lab LCD");
//    lcd_string(lcd_buffer);
//}

int main() {
   80400:	defff904 	addi	sp,sp,-28
   80404:	dfc00615 	stw	ra,24(sp)
   80408:	df000515 	stw	fp,20(sp)
   8040c:	df000504 	addi	fp,sp,20
    int i;
    char lcd_buffer[16];

    alt_putstr("Hello from Nios II!\n");
   80410:	01000274 	movhi	r4,9
   80414:	21328904 	addi	r4,r4,-13788
   80418:	008a5740 	call	8a574 <alt_putstr>

    IOWR(LCD_ON_BASE, 0, 0x01);
   8041c:	00c00434 	movhi	r3,16
   80420:	18c40004 	addi	r3,r3,4096
   80424:	00800044 	movi	r2,1
   80428:	18800035 	stwio	r2,0(r3)
    usleep(50000);
   8042c:	0130d414 	movui	r4,50000
   80430:	008a86c0 	call	8a86c <usleep>

    lcd_init();
   80434:	00803740 	call	80374 <lcd_init>

    while (1) {
        for (i = 0; i < 100; i++) {
   80438:	e03ffb15 	stw	zero,-20(fp)
   8043c:	00000f06 	br	8047c <main+0x7c>
            lcd_command(0x80);
   80440:	013fe004 	movi	r4,-128
   80444:	00801f00 	call	801f0 <lcd_command>
            sprintf(lcd_buffer, "Counter: %02d", i);
   80448:	e13ffc04 	addi	r4,fp,-16
   8044c:	01400274 	movhi	r5,9
   80450:	29728f04 	addi	r5,r5,-13764
   80454:	e1bffb17 	ldw	r6,-20(fp)
   80458:	008048c0 	call	8048c <sprintf>
            lcd_string(lcd_buffer);
   8045c:	e13ffc04 	addi	r4,fp,-16
   80460:	00802ec0 	call	802ec <lcd_string>
            usleep(500000);
   80464:	01000234 	movhi	r4,8
   80468:	21284804 	addi	r4,r4,-24288
   8046c:	008a86c0 	call	8a86c <usleep>
    usleep(50000);

    lcd_init();

    while (1) {
        for (i = 0; i < 100; i++) {
   80470:	e0bffb17 	ldw	r2,-20(fp)
   80474:	10800044 	addi	r2,r2,1
   80478:	e0bffb15 	stw	r2,-20(fp)
   8047c:	e0bffb17 	ldw	r2,-20(fp)
   80480:	10801910 	cmplti	r2,r2,100
   80484:	103fee1e 	bne	r2,zero,80440 <main+0x40>
            lcd_command(0x80);
            sprintf(lcd_buffer, "Counter: %02d", i);
            lcd_string(lcd_buffer);
            usleep(500000);
        }
    }
   80488:	003feb06 	br	80438 <main+0x38>

0008048c <sprintf>:
   8048c:	deffe504 	addi	sp,sp,-108
   80490:	2013883a 	mov	r9,r4
   80494:	dfc01815 	stw	ra,96(sp)
   80498:	d9801915 	stw	r6,100(sp)
   8049c:	d9c01a15 	stw	r7,104(sp)
   804a0:	d8801904 	addi	r2,sp,100
   804a4:	d8800015 	stw	r2,0(sp)
   804a8:	00800274 	movhi	r2,9
   804ac:	10b9ea04 	addi	r2,r2,-6232
   804b0:	11000017 	ldw	r4,0(r2)
   804b4:	d9c00017 	ldw	r7,0(sp)
   804b8:	00808204 	movi	r2,520
   804bc:	00e00034 	movhi	r3,32768
   804c0:	18ffffc4 	addi	r3,r3,-1
   804c4:	280d883a 	mov	r6,r5
   804c8:	d880040d 	sth	r2,16(sp)
   804cc:	d9400104 	addi	r5,sp,4
   804d0:	00bfffc4 	movi	r2,-1
   804d4:	d8c00615 	stw	r3,24(sp)
   804d8:	d8c00315 	stw	r3,12(sp)
   804dc:	da400515 	stw	r9,20(sp)
   804e0:	d880048d 	sth	r2,18(sp)
   804e4:	da400115 	stw	r9,4(sp)
   804e8:	00805b80 	call	805b8 <___vfprintf_internal_r>
   804ec:	d8c00117 	ldw	r3,4(sp)
   804f0:	18000005 	stb	zero,0(r3)
   804f4:	dfc01817 	ldw	ra,96(sp)
   804f8:	dec01b04 	addi	sp,sp,108
   804fc:	f800283a 	ret

00080500 <_sprintf_r>:
   80500:	deffe604 	addi	sp,sp,-104
   80504:	2813883a 	mov	r9,r5
   80508:	dfc01815 	stw	ra,96(sp)
   8050c:	d9c01915 	stw	r7,100(sp)
   80510:	d8801904 	addi	r2,sp,100
   80514:	d8800015 	stw	r2,0(sp)
   80518:	100f883a 	mov	r7,r2
   8051c:	00808204 	movi	r2,520
   80520:	00e00034 	movhi	r3,32768
   80524:	18ffffc4 	addi	r3,r3,-1
   80528:	d880040d 	sth	r2,16(sp)
   8052c:	d9400104 	addi	r5,sp,4
   80530:	00bfffc4 	movi	r2,-1
   80534:	d8c00615 	stw	r3,24(sp)
   80538:	d8c00315 	stw	r3,12(sp)
   8053c:	da400515 	stw	r9,20(sp)
   80540:	d880048d 	sth	r2,18(sp)
   80544:	da400115 	stw	r9,4(sp)
   80548:	00805b80 	call	805b8 <___vfprintf_internal_r>
   8054c:	d8c00117 	ldw	r3,4(sp)
   80550:	18000005 	stb	zero,0(r3)
   80554:	dfc01817 	ldw	ra,96(sp)
   80558:	dec01a04 	addi	sp,sp,104
   8055c:	f800283a 	ret

00080560 <__sprint_r>:
   80560:	30800217 	ldw	r2,8(r6)
   80564:	defffe04 	addi	sp,sp,-8
   80568:	dc000015 	stw	r16,0(sp)
   8056c:	dfc00115 	stw	ra,4(sp)
   80570:	3021883a 	mov	r16,r6
   80574:	0007883a 	mov	r3,zero
   80578:	1000061e 	bne	r2,zero,80594 <__sprint_r+0x34>
   8057c:	1805883a 	mov	r2,r3
   80580:	30000115 	stw	zero,4(r6)
   80584:	dfc00117 	ldw	ra,4(sp)
   80588:	dc000017 	ldw	r16,0(sp)
   8058c:	dec00204 	addi	sp,sp,8
   80590:	f800283a 	ret
   80594:	00847380 	call	84738 <__sfvwrite_r>
   80598:	1007883a 	mov	r3,r2
   8059c:	1805883a 	mov	r2,r3
   805a0:	80000115 	stw	zero,4(r16)
   805a4:	80000215 	stw	zero,8(r16)
   805a8:	dfc00117 	ldw	ra,4(sp)
   805ac:	dc000017 	ldw	r16,0(sp)
   805b0:	dec00204 	addi	sp,sp,8
   805b4:	f800283a 	ret

000805b8 <___vfprintf_internal_r>:
   805b8:	defea404 	addi	sp,sp,-1392
   805bc:	dd815815 	stw	r22,1376(sp)
   805c0:	dc015215 	stw	r16,1352(sp)
   805c4:	d9c15115 	stw	r7,1348(sp)
   805c8:	dfc15b15 	stw	ra,1388(sp)
   805cc:	df015a15 	stw	fp,1384(sp)
   805d0:	ddc15915 	stw	r23,1380(sp)
   805d4:	dd415715 	stw	r21,1372(sp)
   805d8:	dd015615 	stw	r20,1368(sp)
   805dc:	dcc15515 	stw	r19,1364(sp)
   805e0:	dc815415 	stw	r18,1360(sp)
   805e4:	dc415315 	stw	r17,1356(sp)
   805e8:	282d883a 	mov	r22,r5
   805ec:	3021883a 	mov	r16,r6
   805f0:	d9014f15 	stw	r4,1340(sp)
   805f4:	0084d5c0 	call	84d5c <_localeconv_r>
   805f8:	10800017 	ldw	r2,0(r2)
   805fc:	d9c15117 	ldw	r7,1348(sp)
   80600:	d8814915 	stw	r2,1316(sp)
   80604:	d8814f17 	ldw	r2,1340(sp)
   80608:	10000226 	beq	r2,zero,80614 <___vfprintf_internal_r+0x5c>
   8060c:	10800e17 	ldw	r2,56(r2)
   80610:	10020d26 	beq	r2,zero,80e48 <___vfprintf_internal_r+0x890>
   80614:	b080030b 	ldhu	r2,12(r22)
   80618:	1080020c 	andi	r2,r2,8
   8061c:	10020e26 	beq	r2,zero,80e58 <___vfprintf_internal_r+0x8a0>
   80620:	b0800417 	ldw	r2,16(r22)
   80624:	10020c26 	beq	r2,zero,80e58 <___vfprintf_internal_r+0x8a0>
   80628:	b200030b 	ldhu	r8,12(r22)
   8062c:	00800284 	movi	r2,10
   80630:	40c0068c 	andi	r3,r8,26
   80634:	18802f1e 	bne	r3,r2,806f4 <___vfprintf_internal_r+0x13c>
   80638:	b080038f 	ldh	r2,14(r22)
   8063c:	10002d16 	blt	r2,zero,806f4 <___vfprintf_internal_r+0x13c>
   80640:	b240038b 	ldhu	r9,14(r22)
   80644:	b2800717 	ldw	r10,28(r22)
   80648:	b2c00917 	ldw	r11,36(r22)
   8064c:	d9014f17 	ldw	r4,1340(sp)
   80650:	dc402904 	addi	r17,sp,164
   80654:	d8804004 	addi	r2,sp,256
   80658:	00c10004 	movi	r3,1024
   8065c:	423fff4c 	andi	r8,r8,65533
   80660:	800d883a 	mov	r6,r16
   80664:	880b883a 	mov	r5,r17
   80668:	da002c0d 	sth	r8,176(sp)
   8066c:	da402c8d 	sth	r9,178(sp)
   80670:	da803015 	stw	r10,192(sp)
   80674:	dac03215 	stw	r11,200(sp)
   80678:	d8802d15 	stw	r2,180(sp)
   8067c:	d8c02e15 	stw	r3,184(sp)
   80680:	d8802915 	stw	r2,164(sp)
   80684:	d8c02b15 	stw	r3,172(sp)
   80688:	d8002f15 	stw	zero,188(sp)
   8068c:	00805b80 	call	805b8 <___vfprintf_internal_r>
   80690:	d8814b15 	stw	r2,1324(sp)
   80694:	10000416 	blt	r2,zero,806a8 <___vfprintf_internal_r+0xf0>
   80698:	d9014f17 	ldw	r4,1340(sp)
   8069c:	880b883a 	mov	r5,r17
   806a0:	0083dd40 	call	83dd4 <_fflush_r>
   806a4:	1002321e 	bne	r2,zero,80f70 <___vfprintf_internal_r+0x9b8>
   806a8:	d8802c0b 	ldhu	r2,176(sp)
   806ac:	1080100c 	andi	r2,r2,64
   806b0:	10000326 	beq	r2,zero,806c0 <___vfprintf_internal_r+0x108>
   806b4:	b080030b 	ldhu	r2,12(r22)
   806b8:	10801014 	ori	r2,r2,64
   806bc:	b080030d 	sth	r2,12(r22)
   806c0:	d8814b17 	ldw	r2,1324(sp)
   806c4:	dfc15b17 	ldw	ra,1388(sp)
   806c8:	df015a17 	ldw	fp,1384(sp)
   806cc:	ddc15917 	ldw	r23,1380(sp)
   806d0:	dd815817 	ldw	r22,1376(sp)
   806d4:	dd415717 	ldw	r21,1372(sp)
   806d8:	dd015617 	ldw	r20,1368(sp)
   806dc:	dcc15517 	ldw	r19,1364(sp)
   806e0:	dc815417 	ldw	r18,1360(sp)
   806e4:	dc415317 	ldw	r17,1356(sp)
   806e8:	dc015217 	ldw	r16,1352(sp)
   806ec:	dec15c04 	addi	sp,sp,1392
   806f0:	f800283a 	ret
   806f4:	0005883a 	mov	r2,zero
   806f8:	0007883a 	mov	r3,zero
   806fc:	dd401904 	addi	r21,sp,100
   80700:	d8814215 	stw	r2,1288(sp)
   80704:	802f883a 	mov	r23,r16
   80708:	d8c14315 	stw	r3,1292(sp)
   8070c:	d8014b15 	stw	zero,1324(sp)
   80710:	d8014815 	stw	zero,1312(sp)
   80714:	d8014415 	stw	zero,1296(sp)
   80718:	d8014715 	stw	zero,1308(sp)
   8071c:	dd400c15 	stw	r21,48(sp)
   80720:	d8000e15 	stw	zero,56(sp)
   80724:	d8000d15 	stw	zero,52(sp)
   80728:	b8800007 	ldb	r2,0(r23)
   8072c:	10001926 	beq	r2,zero,80794 <___vfprintf_internal_r+0x1dc>
   80730:	00c00944 	movi	r3,37
   80734:	10c01726 	beq	r2,r3,80794 <___vfprintf_internal_r+0x1dc>
   80738:	b821883a 	mov	r16,r23
   8073c:	00000106 	br	80744 <___vfprintf_internal_r+0x18c>
   80740:	10c00326 	beq	r2,r3,80750 <___vfprintf_internal_r+0x198>
   80744:	84000044 	addi	r16,r16,1
   80748:	80800007 	ldb	r2,0(r16)
   8074c:	103ffc1e 	bne	r2,zero,80740 <___vfprintf_internal_r+0x188>
   80750:	85e7c83a 	sub	r19,r16,r23
   80754:	98000e26 	beq	r19,zero,80790 <___vfprintf_internal_r+0x1d8>
   80758:	dc800e17 	ldw	r18,56(sp)
   8075c:	dc400d17 	ldw	r17,52(sp)
   80760:	008001c4 	movi	r2,7
   80764:	94e5883a 	add	r18,r18,r19
   80768:	8c400044 	addi	r17,r17,1
   8076c:	adc00015 	stw	r23,0(r21)
   80770:	dc800e15 	stw	r18,56(sp)
   80774:	acc00115 	stw	r19,4(r21)
   80778:	dc400d15 	stw	r17,52(sp)
   8077c:	14428b16 	blt	r2,r17,811ac <___vfprintf_internal_r+0xbf4>
   80780:	ad400204 	addi	r21,r21,8
   80784:	d9014b17 	ldw	r4,1324(sp)
   80788:	24c9883a 	add	r4,r4,r19
   8078c:	d9014b15 	stw	r4,1324(sp)
   80790:	802f883a 	mov	r23,r16
   80794:	b8800007 	ldb	r2,0(r23)
   80798:	10013c26 	beq	r2,zero,80c8c <___vfprintf_internal_r+0x6d4>
   8079c:	bdc00044 	addi	r23,r23,1
   807a0:	d8000405 	stb	zero,16(sp)
   807a4:	b8c00007 	ldb	r3,0(r23)
   807a8:	04ffffc4 	movi	r19,-1
   807ac:	d8014c15 	stw	zero,1328(sp)
   807b0:	d8014a15 	stw	zero,1320(sp)
   807b4:	d8c14d15 	stw	r3,1332(sp)
   807b8:	bdc00044 	addi	r23,r23,1
   807bc:	d9414d17 	ldw	r5,1332(sp)
   807c0:	00801604 	movi	r2,88
   807c4:	28fff804 	addi	r3,r5,-32
   807c8:	10c06036 	bltu	r2,r3,8094c <___vfprintf_internal_r+0x394>
   807cc:	18c5883a 	add	r2,r3,r3
   807d0:	1085883a 	add	r2,r2,r2
   807d4:	00c00234 	movhi	r3,8
   807d8:	18c1fa04 	addi	r3,r3,2024
   807dc:	10c5883a 	add	r2,r2,r3
   807e0:	11000017 	ldw	r4,0(r2)
   807e4:	2000683a 	jmp	r4
   807e8:	0008175c 	xori	zero,zero,8285
   807ec:	0008094c 	andi	zero,zero,8229
   807f0:	0008094c 	andi	zero,zero,8229
   807f4:	00081748 	cmpgei	zero,zero,8285
   807f8:	0008094c 	andi	zero,zero,8229
   807fc:	0008094c 	andi	zero,zero,8229
   80800:	0008094c 	andi	zero,zero,8229
   80804:	0008094c 	andi	zero,zero,8229
   80808:	0008094c 	andi	zero,zero,8229
   8080c:	0008094c 	andi	zero,zero,8229
   80810:	00081528 	cmpgeui	zero,zero,8276
   80814:	00081738 	rdprs	zero,zero,8284
   80818:	0008094c 	andi	zero,zero,8229
   8081c:	00081540 	call	8154 <__alt_mem_onchip_memory2_0-0x77eac>
   80820:	000817e0 	cmpeqi	zero,zero,8287
   80824:	0008094c 	andi	zero,zero,8229
   80828:	000817cc 	andi	zero,zero,8287
   8082c:	00081788 	cmpgei	zero,zero,8286
   80830:	00081788 	cmpgei	zero,zero,8286
   80834:	00081788 	cmpgei	zero,zero,8286
   80838:	00081788 	cmpgei	zero,zero,8286
   8083c:	00081788 	cmpgei	zero,zero,8286
   80840:	00081788 	cmpgei	zero,zero,8286
   80844:	00081788 	cmpgei	zero,zero,8286
   80848:	00081788 	cmpgei	zero,zero,8286
   8084c:	00081788 	cmpgei	zero,zero,8286
   80850:	0008094c 	andi	zero,zero,8229
   80854:	0008094c 	andi	zero,zero,8229
   80858:	0008094c 	andi	zero,zero,8229
   8085c:	0008094c 	andi	zero,zero,8229
   80860:	0008094c 	andi	zero,zero,8229
   80864:	0008094c 	andi	zero,zero,8229
   80868:	0008094c 	andi	zero,zero,8229
   8086c:	0008094c 	andi	zero,zero,8229
   80870:	0008094c 	andi	zero,zero,8229
   80874:	0008094c 	andi	zero,zero,8229
   80878:	00080fa4 	muli	zero,zero,8254
   8087c:	00081610 	cmplti	zero,zero,8280
   80880:	0008094c 	andi	zero,zero,8229
   80884:	00081610 	cmplti	zero,zero,8280
   80888:	0008094c 	andi	zero,zero,8229
   8088c:	0008094c 	andi	zero,zero,8229
   80890:	0008094c 	andi	zero,zero,8229
   80894:	0008094c 	andi	zero,zero,8229
   80898:	00081774 	movhi	zero,8285
   8089c:	0008094c 	andi	zero,zero,8229
   808a0:	0008094c 	andi	zero,zero,8229
   808a4:	00081058 	cmpnei	zero,zero,8257
   808a8:	0008094c 	andi	zero,zero,8229
   808ac:	0008094c 	andi	zero,zero,8229
   808b0:	0008094c 	andi	zero,zero,8229
   808b4:	0008094c 	andi	zero,zero,8229
   808b8:	0008094c 	andi	zero,zero,8229
   808bc:	000810a4 	muli	zero,zero,8258
   808c0:	0008094c 	andi	zero,zero,8229
   808c4:	0008094c 	andi	zero,zero,8229
   808c8:	000816c4 	movi	zero,8283
   808cc:	0008094c 	andi	zero,zero,8229
   808d0:	0008094c 	andi	zero,zero,8229
   808d4:	0008094c 	andi	zero,zero,8229
   808d8:	0008094c 	andi	zero,zero,8229
   808dc:	0008094c 	andi	zero,zero,8229
   808e0:	0008094c 	andi	zero,zero,8229
   808e4:	0008094c 	andi	zero,zero,8229
   808e8:	0008094c 	andi	zero,zero,8229
   808ec:	0008094c 	andi	zero,zero,8229
   808f0:	0008094c 	andi	zero,zero,8229
   808f4:	00081698 	cmpnei	zero,zero,8282
   808f8:	00080fb0 	cmpltui	zero,zero,8254
   808fc:	00081610 	cmplti	zero,zero,8280
   80900:	00081610 	cmplti	zero,zero,8280
   80904:	00081610 	cmplti	zero,zero,8280
   80908:	000815fc 	xorhi	zero,zero,8279
   8090c:	00080fb0 	cmpltui	zero,zero,8254
   80910:	0008094c 	andi	zero,zero,8229
   80914:	0008094c 	andi	zero,zero,8229
   80918:	00081584 	movi	zero,8278
   8091c:	0008094c 	andi	zero,zero,8229
   80920:	00081554 	movui	zero,8277
   80924:	00081064 	muli	zero,zero,8257
   80928:	000815b4 	movhi	zero,8278
   8092c:	000815a0 	cmpeqi	zero,zero,8278
   80930:	0008094c 	andi	zero,zero,8229
   80934:	00081848 	cmpgei	zero,zero,8289
   80938:	0008094c 	andi	zero,zero,8229
   8093c:	000810b0 	cmpltui	zero,zero,8258
   80940:	0008094c 	andi	zero,zero,8229
   80944:	0008094c 	andi	zero,zero,8229
   80948:	00081728 	cmpgeui	zero,zero,8284
   8094c:	d9014d17 	ldw	r4,1332(sp)
   80950:	2000ce26 	beq	r4,zero,80c8c <___vfprintf_internal_r+0x6d4>
   80954:	01400044 	movi	r5,1
   80958:	d9800f04 	addi	r6,sp,60
   8095c:	d9c14015 	stw	r7,1280(sp)
   80960:	d9414515 	stw	r5,1300(sp)
   80964:	d9814115 	stw	r6,1284(sp)
   80968:	280f883a 	mov	r7,r5
   8096c:	d9000f05 	stb	r4,60(sp)
   80970:	d8000405 	stb	zero,16(sp)
   80974:	d8014615 	stw	zero,1304(sp)
   80978:	d8c14c17 	ldw	r3,1328(sp)
   8097c:	1880008c 	andi	r2,r3,2
   80980:	1005003a 	cmpeq	r2,r2,zero
   80984:	d8815015 	stw	r2,1344(sp)
   80988:	1000031e 	bne	r2,zero,80998 <___vfprintf_internal_r+0x3e0>
   8098c:	d9014517 	ldw	r4,1300(sp)
   80990:	21000084 	addi	r4,r4,2
   80994:	d9014515 	stw	r4,1300(sp)
   80998:	d9414c17 	ldw	r5,1328(sp)
   8099c:	2940210c 	andi	r5,r5,132
   809a0:	d9414e15 	stw	r5,1336(sp)
   809a4:	28002d1e 	bne	r5,zero,80a5c <___vfprintf_internal_r+0x4a4>
   809a8:	d9814a17 	ldw	r6,1320(sp)
   809ac:	d8814517 	ldw	r2,1300(sp)
   809b0:	30a1c83a 	sub	r16,r6,r2
   809b4:	0400290e 	bge	zero,r16,80a5c <___vfprintf_internal_r+0x4a4>
   809b8:	00800404 	movi	r2,16
   809bc:	14045e0e 	bge	r2,r16,81b38 <___vfprintf_internal_r+0x1580>
   809c0:	dc800e17 	ldw	r18,56(sp)
   809c4:	dc400d17 	ldw	r17,52(sp)
   809c8:	1027883a 	mov	r19,r2
   809cc:	07000274 	movhi	fp,9
   809d0:	e732ae84 	addi	fp,fp,-13638
   809d4:	050001c4 	movi	r20,7
   809d8:	00000306 	br	809e8 <___vfprintf_internal_r+0x430>
   809dc:	843ffc04 	addi	r16,r16,-16
   809e0:	ad400204 	addi	r21,r21,8
   809e4:	9c00130e 	bge	r19,r16,80a34 <___vfprintf_internal_r+0x47c>
   809e8:	94800404 	addi	r18,r18,16
   809ec:	8c400044 	addi	r17,r17,1
   809f0:	af000015 	stw	fp,0(r21)
   809f4:	acc00115 	stw	r19,4(r21)
   809f8:	dc800e15 	stw	r18,56(sp)
   809fc:	dc400d15 	stw	r17,52(sp)
   80a00:	a47ff60e 	bge	r20,r17,809dc <___vfprintf_internal_r+0x424>
   80a04:	d9014f17 	ldw	r4,1340(sp)
   80a08:	b00b883a 	mov	r5,r22
   80a0c:	d9800c04 	addi	r6,sp,48
   80a10:	d9c15115 	stw	r7,1348(sp)
   80a14:	00805600 	call	80560 <__sprint_r>
   80a18:	d9c15117 	ldw	r7,1348(sp)
   80a1c:	10009e1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   80a20:	843ffc04 	addi	r16,r16,-16
   80a24:	dc800e17 	ldw	r18,56(sp)
   80a28:	dc400d17 	ldw	r17,52(sp)
   80a2c:	dd401904 	addi	r21,sp,100
   80a30:	9c3fed16 	blt	r19,r16,809e8 <___vfprintf_internal_r+0x430>
   80a34:	9425883a 	add	r18,r18,r16
   80a38:	8c400044 	addi	r17,r17,1
   80a3c:	008001c4 	movi	r2,7
   80a40:	af000015 	stw	fp,0(r21)
   80a44:	ac000115 	stw	r16,4(r21)
   80a48:	dc800e15 	stw	r18,56(sp)
   80a4c:	dc400d15 	stw	r17,52(sp)
   80a50:	1441f516 	blt	r2,r17,81228 <___vfprintf_internal_r+0xc70>
   80a54:	ad400204 	addi	r21,r21,8
   80a58:	00000206 	br	80a64 <___vfprintf_internal_r+0x4ac>
   80a5c:	dc800e17 	ldw	r18,56(sp)
   80a60:	dc400d17 	ldw	r17,52(sp)
   80a64:	d8800407 	ldb	r2,16(sp)
   80a68:	10000b26 	beq	r2,zero,80a98 <___vfprintf_internal_r+0x4e0>
   80a6c:	00800044 	movi	r2,1
   80a70:	94800044 	addi	r18,r18,1
   80a74:	8c400044 	addi	r17,r17,1
   80a78:	a8800115 	stw	r2,4(r21)
   80a7c:	d8c00404 	addi	r3,sp,16
   80a80:	008001c4 	movi	r2,7
   80a84:	a8c00015 	stw	r3,0(r21)
   80a88:	dc800e15 	stw	r18,56(sp)
   80a8c:	dc400d15 	stw	r17,52(sp)
   80a90:	1441da16 	blt	r2,r17,811fc <___vfprintf_internal_r+0xc44>
   80a94:	ad400204 	addi	r21,r21,8
   80a98:	d9015017 	ldw	r4,1344(sp)
   80a9c:	20000b1e 	bne	r4,zero,80acc <___vfprintf_internal_r+0x514>
   80aa0:	d8800444 	addi	r2,sp,17
   80aa4:	94800084 	addi	r18,r18,2
   80aa8:	8c400044 	addi	r17,r17,1
   80aac:	a8800015 	stw	r2,0(r21)
   80ab0:	00c00084 	movi	r3,2
   80ab4:	008001c4 	movi	r2,7
   80ab8:	a8c00115 	stw	r3,4(r21)
   80abc:	dc800e15 	stw	r18,56(sp)
   80ac0:	dc400d15 	stw	r17,52(sp)
   80ac4:	1441c216 	blt	r2,r17,811d0 <___vfprintf_internal_r+0xc18>
   80ac8:	ad400204 	addi	r21,r21,8
   80acc:	d9414e17 	ldw	r5,1336(sp)
   80ad0:	00802004 	movi	r2,128
   80ad4:	2880b126 	beq	r5,r2,80d9c <___vfprintf_internal_r+0x7e4>
   80ad8:	d8c14617 	ldw	r3,1304(sp)
   80adc:	19e1c83a 	sub	r16,r3,r7
   80ae0:	0400260e 	bge	zero,r16,80b7c <___vfprintf_internal_r+0x5c4>
   80ae4:	00800404 	movi	r2,16
   80ae8:	1403cf0e 	bge	r2,r16,81a28 <___vfprintf_internal_r+0x1470>
   80aec:	1027883a 	mov	r19,r2
   80af0:	07000274 	movhi	fp,9
   80af4:	e732aa84 	addi	fp,fp,-13654
   80af8:	050001c4 	movi	r20,7
   80afc:	00000306 	br	80b0c <___vfprintf_internal_r+0x554>
   80b00:	843ffc04 	addi	r16,r16,-16
   80b04:	ad400204 	addi	r21,r21,8
   80b08:	9c00130e 	bge	r19,r16,80b58 <___vfprintf_internal_r+0x5a0>
   80b0c:	94800404 	addi	r18,r18,16
   80b10:	8c400044 	addi	r17,r17,1
   80b14:	af000015 	stw	fp,0(r21)
   80b18:	acc00115 	stw	r19,4(r21)
   80b1c:	dc800e15 	stw	r18,56(sp)
   80b20:	dc400d15 	stw	r17,52(sp)
   80b24:	a47ff60e 	bge	r20,r17,80b00 <___vfprintf_internal_r+0x548>
   80b28:	d9014f17 	ldw	r4,1340(sp)
   80b2c:	b00b883a 	mov	r5,r22
   80b30:	d9800c04 	addi	r6,sp,48
   80b34:	d9c15115 	stw	r7,1348(sp)
   80b38:	00805600 	call	80560 <__sprint_r>
   80b3c:	d9c15117 	ldw	r7,1348(sp)
   80b40:	1000551e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   80b44:	843ffc04 	addi	r16,r16,-16
   80b48:	dc800e17 	ldw	r18,56(sp)
   80b4c:	dc400d17 	ldw	r17,52(sp)
   80b50:	dd401904 	addi	r21,sp,100
   80b54:	9c3fed16 	blt	r19,r16,80b0c <___vfprintf_internal_r+0x554>
   80b58:	9425883a 	add	r18,r18,r16
   80b5c:	8c400044 	addi	r17,r17,1
   80b60:	008001c4 	movi	r2,7
   80b64:	af000015 	stw	fp,0(r21)
   80b68:	ac000115 	stw	r16,4(r21)
   80b6c:	dc800e15 	stw	r18,56(sp)
   80b70:	dc400d15 	stw	r17,52(sp)
   80b74:	14418216 	blt	r2,r17,81180 <___vfprintf_internal_r+0xbc8>
   80b78:	ad400204 	addi	r21,r21,8
   80b7c:	d9014c17 	ldw	r4,1328(sp)
   80b80:	2080400c 	andi	r2,r4,256
   80b84:	10004a1e 	bne	r2,zero,80cb0 <___vfprintf_internal_r+0x6f8>
   80b88:	d9414117 	ldw	r5,1284(sp)
   80b8c:	91e5883a 	add	r18,r18,r7
   80b90:	8c400044 	addi	r17,r17,1
   80b94:	008001c4 	movi	r2,7
   80b98:	a9400015 	stw	r5,0(r21)
   80b9c:	a9c00115 	stw	r7,4(r21)
   80ba0:	dc800e15 	stw	r18,56(sp)
   80ba4:	dc400d15 	stw	r17,52(sp)
   80ba8:	14416716 	blt	r2,r17,81148 <___vfprintf_internal_r+0xb90>
   80bac:	a8c00204 	addi	r3,r21,8
   80bb0:	d9814c17 	ldw	r6,1328(sp)
   80bb4:	3080010c 	andi	r2,r6,4
   80bb8:	10002826 	beq	r2,zero,80c5c <___vfprintf_internal_r+0x6a4>
   80bbc:	d8814a17 	ldw	r2,1320(sp)
   80bc0:	d9014517 	ldw	r4,1300(sp)
   80bc4:	1121c83a 	sub	r16,r2,r4
   80bc8:	0400240e 	bge	zero,r16,80c5c <___vfprintf_internal_r+0x6a4>
   80bcc:	00800404 	movi	r2,16
   80bd0:	1404550e 	bge	r2,r16,81d28 <___vfprintf_internal_r+0x1770>
   80bd4:	dc400d17 	ldw	r17,52(sp)
   80bd8:	1027883a 	mov	r19,r2
   80bdc:	07000274 	movhi	fp,9
   80be0:	e732ae84 	addi	fp,fp,-13638
   80be4:	050001c4 	movi	r20,7
   80be8:	00000306 	br	80bf8 <___vfprintf_internal_r+0x640>
   80bec:	843ffc04 	addi	r16,r16,-16
   80bf0:	18c00204 	addi	r3,r3,8
   80bf4:	9c00110e 	bge	r19,r16,80c3c <___vfprintf_internal_r+0x684>
   80bf8:	94800404 	addi	r18,r18,16
   80bfc:	8c400044 	addi	r17,r17,1
   80c00:	1f000015 	stw	fp,0(r3)
   80c04:	1cc00115 	stw	r19,4(r3)
   80c08:	dc800e15 	stw	r18,56(sp)
   80c0c:	dc400d15 	stw	r17,52(sp)
   80c10:	a47ff60e 	bge	r20,r17,80bec <___vfprintf_internal_r+0x634>
   80c14:	d9014f17 	ldw	r4,1340(sp)
   80c18:	b00b883a 	mov	r5,r22
   80c1c:	d9800c04 	addi	r6,sp,48
   80c20:	00805600 	call	80560 <__sprint_r>
   80c24:	10001c1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   80c28:	843ffc04 	addi	r16,r16,-16
   80c2c:	dc800e17 	ldw	r18,56(sp)
   80c30:	dc400d17 	ldw	r17,52(sp)
   80c34:	d8c01904 	addi	r3,sp,100
   80c38:	9c3fef16 	blt	r19,r16,80bf8 <___vfprintf_internal_r+0x640>
   80c3c:	9425883a 	add	r18,r18,r16
   80c40:	8c400044 	addi	r17,r17,1
   80c44:	008001c4 	movi	r2,7
   80c48:	1f000015 	stw	fp,0(r3)
   80c4c:	1c000115 	stw	r16,4(r3)
   80c50:	dc800e15 	stw	r18,56(sp)
   80c54:	dc400d15 	stw	r17,52(sp)
   80c58:	1440cb16 	blt	r2,r17,80f88 <___vfprintf_internal_r+0x9d0>
   80c5c:	d8814a17 	ldw	r2,1320(sp)
   80c60:	d9414517 	ldw	r5,1300(sp)
   80c64:	1140010e 	bge	r2,r5,80c6c <___vfprintf_internal_r+0x6b4>
   80c68:	2805883a 	mov	r2,r5
   80c6c:	d9814b17 	ldw	r6,1324(sp)
   80c70:	308d883a 	add	r6,r6,r2
   80c74:	d9814b15 	stw	r6,1324(sp)
   80c78:	90013b1e 	bne	r18,zero,81168 <___vfprintf_internal_r+0xbb0>
   80c7c:	d9c14017 	ldw	r7,1280(sp)
   80c80:	dd401904 	addi	r21,sp,100
   80c84:	d8000d15 	stw	zero,52(sp)
   80c88:	003ea706 	br	80728 <___vfprintf_internal_r+0x170>
   80c8c:	d8800e17 	ldw	r2,56(sp)
   80c90:	1005451e 	bne	r2,zero,821a8 <___vfprintf_internal_r+0x1bf0>
   80c94:	d8000d15 	stw	zero,52(sp)
   80c98:	b080030b 	ldhu	r2,12(r22)
   80c9c:	1080100c 	andi	r2,r2,64
   80ca0:	103e8726 	beq	r2,zero,806c0 <___vfprintf_internal_r+0x108>
   80ca4:	00bfffc4 	movi	r2,-1
   80ca8:	d8814b15 	stw	r2,1324(sp)
   80cac:	003e8406 	br	806c0 <___vfprintf_internal_r+0x108>
   80cb0:	d9814d17 	ldw	r6,1332(sp)
   80cb4:	00801944 	movi	r2,101
   80cb8:	11806e16 	blt	r2,r6,80e74 <___vfprintf_internal_r+0x8bc>
   80cbc:	d9414717 	ldw	r5,1308(sp)
   80cc0:	00c00044 	movi	r3,1
   80cc4:	1943490e 	bge	r3,r5,819ec <___vfprintf_internal_r+0x1434>
   80cc8:	d8814117 	ldw	r2,1284(sp)
   80ccc:	94800044 	addi	r18,r18,1
   80cd0:	8c400044 	addi	r17,r17,1
   80cd4:	a8800015 	stw	r2,0(r21)
   80cd8:	008001c4 	movi	r2,7
   80cdc:	a8c00115 	stw	r3,4(r21)
   80ce0:	dc800e15 	stw	r18,56(sp)
   80ce4:	dc400d15 	stw	r17,52(sp)
   80ce8:	1441ca16 	blt	r2,r17,81414 <___vfprintf_internal_r+0xe5c>
   80cec:	a8c00204 	addi	r3,r21,8
   80cf0:	d9014917 	ldw	r4,1316(sp)
   80cf4:	00800044 	movi	r2,1
   80cf8:	94800044 	addi	r18,r18,1
   80cfc:	8c400044 	addi	r17,r17,1
   80d00:	18800115 	stw	r2,4(r3)
   80d04:	008001c4 	movi	r2,7
   80d08:	19000015 	stw	r4,0(r3)
   80d0c:	dc800e15 	stw	r18,56(sp)
   80d10:	dc400d15 	stw	r17,52(sp)
   80d14:	1441b616 	blt	r2,r17,813f0 <___vfprintf_internal_r+0xe38>
   80d18:	1cc00204 	addi	r19,r3,8
   80d1c:	d9014217 	ldw	r4,1288(sp)
   80d20:	d9414317 	ldw	r5,1292(sp)
   80d24:	000d883a 	mov	r6,zero
   80d28:	000f883a 	mov	r7,zero
   80d2c:	00890e00 	call	890e0 <__nedf2>
   80d30:	10017426 	beq	r2,zero,81304 <___vfprintf_internal_r+0xd4c>
   80d34:	d9414717 	ldw	r5,1308(sp)
   80d38:	d9814117 	ldw	r6,1284(sp)
   80d3c:	8c400044 	addi	r17,r17,1
   80d40:	2c85883a 	add	r2,r5,r18
   80d44:	14bfffc4 	addi	r18,r2,-1
   80d48:	28bfffc4 	addi	r2,r5,-1
   80d4c:	30c00044 	addi	r3,r6,1
   80d50:	98800115 	stw	r2,4(r19)
   80d54:	008001c4 	movi	r2,7
   80d58:	98c00015 	stw	r3,0(r19)
   80d5c:	dc800e15 	stw	r18,56(sp)
   80d60:	dc400d15 	stw	r17,52(sp)
   80d64:	14418e16 	blt	r2,r17,813a0 <___vfprintf_internal_r+0xde8>
   80d68:	9cc00204 	addi	r19,r19,8
   80d6c:	d9414817 	ldw	r5,1312(sp)
   80d70:	d8800804 	addi	r2,sp,32
   80d74:	8c400044 	addi	r17,r17,1
   80d78:	9165883a 	add	r18,r18,r5
   80d7c:	98800015 	stw	r2,0(r19)
   80d80:	008001c4 	movi	r2,7
   80d84:	99400115 	stw	r5,4(r19)
   80d88:	dc800e15 	stw	r18,56(sp)
   80d8c:	dc400d15 	stw	r17,52(sp)
   80d90:	1440ed16 	blt	r2,r17,81148 <___vfprintf_internal_r+0xb90>
   80d94:	98c00204 	addi	r3,r19,8
   80d98:	003f8506 	br	80bb0 <___vfprintf_internal_r+0x5f8>
   80d9c:	d9814a17 	ldw	r6,1320(sp)
   80da0:	d8814517 	ldw	r2,1300(sp)
   80da4:	30a1c83a 	sub	r16,r6,r2
   80da8:	043f4b0e 	bge	zero,r16,80ad8 <___vfprintf_internal_r+0x520>
   80dac:	00800404 	movi	r2,16
   80db0:	14043a0e 	bge	r2,r16,81e9c <___vfprintf_internal_r+0x18e4>
   80db4:	1027883a 	mov	r19,r2
   80db8:	07000274 	movhi	fp,9
   80dbc:	e732aa84 	addi	fp,fp,-13654
   80dc0:	050001c4 	movi	r20,7
   80dc4:	00000306 	br	80dd4 <___vfprintf_internal_r+0x81c>
   80dc8:	843ffc04 	addi	r16,r16,-16
   80dcc:	ad400204 	addi	r21,r21,8
   80dd0:	9c00130e 	bge	r19,r16,80e20 <___vfprintf_internal_r+0x868>
   80dd4:	94800404 	addi	r18,r18,16
   80dd8:	8c400044 	addi	r17,r17,1
   80ddc:	af000015 	stw	fp,0(r21)
   80de0:	acc00115 	stw	r19,4(r21)
   80de4:	dc800e15 	stw	r18,56(sp)
   80de8:	dc400d15 	stw	r17,52(sp)
   80dec:	a47ff60e 	bge	r20,r17,80dc8 <___vfprintf_internal_r+0x810>
   80df0:	d9014f17 	ldw	r4,1340(sp)
   80df4:	b00b883a 	mov	r5,r22
   80df8:	d9800c04 	addi	r6,sp,48
   80dfc:	d9c15115 	stw	r7,1348(sp)
   80e00:	00805600 	call	80560 <__sprint_r>
   80e04:	d9c15117 	ldw	r7,1348(sp)
   80e08:	103fa31e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   80e0c:	843ffc04 	addi	r16,r16,-16
   80e10:	dc800e17 	ldw	r18,56(sp)
   80e14:	dc400d17 	ldw	r17,52(sp)
   80e18:	dd401904 	addi	r21,sp,100
   80e1c:	9c3fed16 	blt	r19,r16,80dd4 <___vfprintf_internal_r+0x81c>
   80e20:	9425883a 	add	r18,r18,r16
   80e24:	8c400044 	addi	r17,r17,1
   80e28:	008001c4 	movi	r2,7
   80e2c:	af000015 	stw	fp,0(r21)
   80e30:	ac000115 	stw	r16,4(r21)
   80e34:	dc800e15 	stw	r18,56(sp)
   80e38:	dc400d15 	stw	r17,52(sp)
   80e3c:	14416116 	blt	r2,r17,813c4 <___vfprintf_internal_r+0xe0c>
   80e40:	ad400204 	addi	r21,r21,8
   80e44:	003f2406 	br	80ad8 <___vfprintf_internal_r+0x520>
   80e48:	d9014f17 	ldw	r4,1340(sp)
   80e4c:	008406c0 	call	8406c <__sinit>
   80e50:	d9c15117 	ldw	r7,1348(sp)
   80e54:	003def06 	br	80614 <___vfprintf_internal_r+0x5c>
   80e58:	d9014f17 	ldw	r4,1340(sp)
   80e5c:	b00b883a 	mov	r5,r22
   80e60:	d9c15115 	stw	r7,1348(sp)
   80e64:	00824a00 	call	824a0 <__swsetup_r>
   80e68:	d9c15117 	ldw	r7,1348(sp)
   80e6c:	103dee26 	beq	r2,zero,80628 <___vfprintf_internal_r+0x70>
   80e70:	003f8c06 	br	80ca4 <___vfprintf_internal_r+0x6ec>
   80e74:	d9014217 	ldw	r4,1288(sp)
   80e78:	d9414317 	ldw	r5,1292(sp)
   80e7c:	000d883a 	mov	r6,zero
   80e80:	000f883a 	mov	r7,zero
   80e84:	00890580 	call	89058 <__eqdf2>
   80e88:	1000f21e 	bne	r2,zero,81254 <___vfprintf_internal_r+0xc9c>
   80e8c:	00800274 	movhi	r2,9
   80e90:	10b2aa04 	addi	r2,r2,-13656
   80e94:	94800044 	addi	r18,r18,1
   80e98:	8c400044 	addi	r17,r17,1
   80e9c:	a8800015 	stw	r2,0(r21)
   80ea0:	00c00044 	movi	r3,1
   80ea4:	008001c4 	movi	r2,7
   80ea8:	a8c00115 	stw	r3,4(r21)
   80eac:	dc800e15 	stw	r18,56(sp)
   80eb0:	dc400d15 	stw	r17,52(sp)
   80eb4:	14430016 	blt	r2,r17,81ab8 <___vfprintf_internal_r+0x1500>
   80eb8:	a8c00204 	addi	r3,r21,8
   80ebc:	d8800517 	ldw	r2,20(sp)
   80ec0:	d9014717 	ldw	r4,1308(sp)
   80ec4:	11015c0e 	bge	r2,r4,81438 <___vfprintf_internal_r+0xe80>
   80ec8:	dc400d17 	ldw	r17,52(sp)
   80ecc:	d9814917 	ldw	r6,1316(sp)
   80ed0:	00800044 	movi	r2,1
   80ed4:	94800044 	addi	r18,r18,1
   80ed8:	8c400044 	addi	r17,r17,1
   80edc:	18800115 	stw	r2,4(r3)
   80ee0:	008001c4 	movi	r2,7
   80ee4:	19800015 	stw	r6,0(r3)
   80ee8:	dc800e15 	stw	r18,56(sp)
   80eec:	dc400d15 	stw	r17,52(sp)
   80ef0:	14431616 	blt	r2,r17,81b4c <___vfprintf_internal_r+0x1594>
   80ef4:	18c00204 	addi	r3,r3,8
   80ef8:	d8814717 	ldw	r2,1308(sp)
   80efc:	143fffc4 	addi	r16,r2,-1
   80f00:	043f2b0e 	bge	zero,r16,80bb0 <___vfprintf_internal_r+0x5f8>
   80f04:	00800404 	movi	r2,16
   80f08:	1402a80e 	bge	r2,r16,819ac <___vfprintf_internal_r+0x13f4>
   80f0c:	dc400d17 	ldw	r17,52(sp)
   80f10:	1027883a 	mov	r19,r2
   80f14:	07000274 	movhi	fp,9
   80f18:	e732aa84 	addi	fp,fp,-13654
   80f1c:	050001c4 	movi	r20,7
   80f20:	00000306 	br	80f30 <___vfprintf_internal_r+0x978>
   80f24:	18c00204 	addi	r3,r3,8
   80f28:	843ffc04 	addi	r16,r16,-16
   80f2c:	9c02a20e 	bge	r19,r16,819b8 <___vfprintf_internal_r+0x1400>
   80f30:	94800404 	addi	r18,r18,16
   80f34:	8c400044 	addi	r17,r17,1
   80f38:	1f000015 	stw	fp,0(r3)
   80f3c:	1cc00115 	stw	r19,4(r3)
   80f40:	dc800e15 	stw	r18,56(sp)
   80f44:	dc400d15 	stw	r17,52(sp)
   80f48:	a47ff60e 	bge	r20,r17,80f24 <___vfprintf_internal_r+0x96c>
   80f4c:	d9014f17 	ldw	r4,1340(sp)
   80f50:	b00b883a 	mov	r5,r22
   80f54:	d9800c04 	addi	r6,sp,48
   80f58:	00805600 	call	80560 <__sprint_r>
   80f5c:	103f4e1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   80f60:	dc800e17 	ldw	r18,56(sp)
   80f64:	dc400d17 	ldw	r17,52(sp)
   80f68:	d8c01904 	addi	r3,sp,100
   80f6c:	003fee06 	br	80f28 <___vfprintf_internal_r+0x970>
   80f70:	d8802c0b 	ldhu	r2,176(sp)
   80f74:	00ffffc4 	movi	r3,-1
   80f78:	d8c14b15 	stw	r3,1324(sp)
   80f7c:	1080100c 	andi	r2,r2,64
   80f80:	103dcc1e 	bne	r2,zero,806b4 <___vfprintf_internal_r+0xfc>
   80f84:	003dce06 	br	806c0 <___vfprintf_internal_r+0x108>
   80f88:	d9014f17 	ldw	r4,1340(sp)
   80f8c:	b00b883a 	mov	r5,r22
   80f90:	d9800c04 	addi	r6,sp,48
   80f94:	00805600 	call	80560 <__sprint_r>
   80f98:	103f3f1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   80f9c:	dc800e17 	ldw	r18,56(sp)
   80fa0:	003f2e06 	br	80c5c <___vfprintf_internal_r+0x6a4>
   80fa4:	d9414c17 	ldw	r5,1328(sp)
   80fa8:	29400414 	ori	r5,r5,16
   80fac:	d9414c15 	stw	r5,1328(sp)
   80fb0:	d9814c17 	ldw	r6,1328(sp)
   80fb4:	3080080c 	andi	r2,r6,32
   80fb8:	10014f1e 	bne	r2,zero,814f8 <___vfprintf_internal_r+0xf40>
   80fbc:	d8c14c17 	ldw	r3,1328(sp)
   80fc0:	1880040c 	andi	r2,r3,16
   80fc4:	1002f01e 	bne	r2,zero,81b88 <___vfprintf_internal_r+0x15d0>
   80fc8:	d9014c17 	ldw	r4,1328(sp)
   80fcc:	2080100c 	andi	r2,r4,64
   80fd0:	1002ed26 	beq	r2,zero,81b88 <___vfprintf_internal_r+0x15d0>
   80fd4:	3880000f 	ldh	r2,0(r7)
   80fd8:	39c00104 	addi	r7,r7,4
   80fdc:	d9c14015 	stw	r7,1280(sp)
   80fe0:	1023d7fa 	srai	r17,r2,31
   80fe4:	1021883a 	mov	r16,r2
   80fe8:	88037816 	blt	r17,zero,81dcc <___vfprintf_internal_r+0x1814>
   80fec:	01000044 	movi	r4,1
   80ff0:	98000416 	blt	r19,zero,81004 <___vfprintf_internal_r+0xa4c>
   80ff4:	d8c14c17 	ldw	r3,1328(sp)
   80ff8:	00bfdfc4 	movi	r2,-129
   80ffc:	1886703a 	and	r3,r3,r2
   81000:	d8c14c15 	stw	r3,1328(sp)
   81004:	8444b03a 	or	r2,r16,r17
   81008:	10022c1e 	bne	r2,zero,818bc <___vfprintf_internal_r+0x1304>
   8100c:	98022b1e 	bne	r19,zero,818bc <___vfprintf_internal_r+0x1304>
   81010:	20803fcc 	andi	r2,r4,255
   81014:	1002a126 	beq	r2,zero,81a9c <___vfprintf_internal_r+0x14e4>
   81018:	d8c01904 	addi	r3,sp,100
   8101c:	dd000f04 	addi	r20,sp,60
   81020:	d8c14115 	stw	r3,1284(sp)
   81024:	d8c14117 	ldw	r3,1284(sp)
   81028:	dcc14515 	stw	r19,1300(sp)
   8102c:	a0c5c83a 	sub	r2,r20,r3
   81030:	11c00a04 	addi	r7,r2,40
   81034:	99c0010e 	bge	r19,r7,8103c <___vfprintf_internal_r+0xa84>
   81038:	d9c14515 	stw	r7,1300(sp)
   8103c:	dcc14615 	stw	r19,1304(sp)
   81040:	d8800407 	ldb	r2,16(sp)
   81044:	103e4c26 	beq	r2,zero,80978 <___vfprintf_internal_r+0x3c0>
   81048:	d8814517 	ldw	r2,1300(sp)
   8104c:	10800044 	addi	r2,r2,1
   81050:	d8814515 	stw	r2,1300(sp)
   81054:	003e4806 	br	80978 <___vfprintf_internal_r+0x3c0>
   81058:	d9814c17 	ldw	r6,1328(sp)
   8105c:	31800414 	ori	r6,r6,16
   81060:	d9814c15 	stw	r6,1328(sp)
   81064:	d8c14c17 	ldw	r3,1328(sp)
   81068:	1880080c 	andi	r2,r3,32
   8106c:	1001271e 	bne	r2,zero,8150c <___vfprintf_internal_r+0xf54>
   81070:	d9414c17 	ldw	r5,1328(sp)
   81074:	2880040c 	andi	r2,r5,16
   81078:	1002bc1e 	bne	r2,zero,81b6c <___vfprintf_internal_r+0x15b4>
   8107c:	d9814c17 	ldw	r6,1328(sp)
   81080:	3080100c 	andi	r2,r6,64
   81084:	1002b926 	beq	r2,zero,81b6c <___vfprintf_internal_r+0x15b4>
   81088:	3c00000b 	ldhu	r16,0(r7)
   8108c:	0009883a 	mov	r4,zero
   81090:	39c00104 	addi	r7,r7,4
   81094:	0023883a 	mov	r17,zero
   81098:	d9c14015 	stw	r7,1280(sp)
   8109c:	d8000405 	stb	zero,16(sp)
   810a0:	003fd306 	br	80ff0 <___vfprintf_internal_r+0xa38>
   810a4:	d9014c17 	ldw	r4,1328(sp)
   810a8:	21000414 	ori	r4,r4,16
   810ac:	d9014c15 	stw	r4,1328(sp)
   810b0:	d9414c17 	ldw	r5,1328(sp)
   810b4:	2880080c 	andi	r2,r5,32
   810b8:	1001081e 	bne	r2,zero,814dc <___vfprintf_internal_r+0xf24>
   810bc:	d8c14c17 	ldw	r3,1328(sp)
   810c0:	1880040c 	andi	r2,r3,16
   810c4:	1002b61e 	bne	r2,zero,81ba0 <___vfprintf_internal_r+0x15e8>
   810c8:	d9014c17 	ldw	r4,1328(sp)
   810cc:	2080100c 	andi	r2,r4,64
   810d0:	1002b326 	beq	r2,zero,81ba0 <___vfprintf_internal_r+0x15e8>
   810d4:	3c00000b 	ldhu	r16,0(r7)
   810d8:	01000044 	movi	r4,1
   810dc:	39c00104 	addi	r7,r7,4
   810e0:	0023883a 	mov	r17,zero
   810e4:	d9c14015 	stw	r7,1280(sp)
   810e8:	d8000405 	stb	zero,16(sp)
   810ec:	003fc006 	br	80ff0 <___vfprintf_internal_r+0xa38>
   810f0:	d9014f17 	ldw	r4,1340(sp)
   810f4:	b00b883a 	mov	r5,r22
   810f8:	d9800c04 	addi	r6,sp,48
   810fc:	00805600 	call	80560 <__sprint_r>
   81100:	103ee51e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81104:	dc800e17 	ldw	r18,56(sp)
   81108:	d8c01904 	addi	r3,sp,100
   8110c:	d9814c17 	ldw	r6,1328(sp)
   81110:	3080004c 	andi	r2,r6,1
   81114:	1005003a 	cmpeq	r2,r2,zero
   81118:	103ea51e 	bne	r2,zero,80bb0 <___vfprintf_internal_r+0x5f8>
   8111c:	00800044 	movi	r2,1
   81120:	dc400d17 	ldw	r17,52(sp)
   81124:	18800115 	stw	r2,4(r3)
   81128:	d8814917 	ldw	r2,1316(sp)
   8112c:	94800044 	addi	r18,r18,1
   81130:	8c400044 	addi	r17,r17,1
   81134:	18800015 	stw	r2,0(r3)
   81138:	008001c4 	movi	r2,7
   8113c:	dc800e15 	stw	r18,56(sp)
   81140:	dc400d15 	stw	r17,52(sp)
   81144:	1442240e 	bge	r2,r17,819d8 <___vfprintf_internal_r+0x1420>
   81148:	d9014f17 	ldw	r4,1340(sp)
   8114c:	b00b883a 	mov	r5,r22
   81150:	d9800c04 	addi	r6,sp,48
   81154:	00805600 	call	80560 <__sprint_r>
   81158:	103ecf1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   8115c:	dc800e17 	ldw	r18,56(sp)
   81160:	d8c01904 	addi	r3,sp,100
   81164:	003e9206 	br	80bb0 <___vfprintf_internal_r+0x5f8>
   81168:	d9014f17 	ldw	r4,1340(sp)
   8116c:	b00b883a 	mov	r5,r22
   81170:	d9800c04 	addi	r6,sp,48
   81174:	00805600 	call	80560 <__sprint_r>
   81178:	103ec026 	beq	r2,zero,80c7c <___vfprintf_internal_r+0x6c4>
   8117c:	003ec606 	br	80c98 <___vfprintf_internal_r+0x6e0>
   81180:	d9014f17 	ldw	r4,1340(sp)
   81184:	b00b883a 	mov	r5,r22
   81188:	d9800c04 	addi	r6,sp,48
   8118c:	d9c15115 	stw	r7,1348(sp)
   81190:	00805600 	call	80560 <__sprint_r>
   81194:	d9c15117 	ldw	r7,1348(sp)
   81198:	103ebf1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   8119c:	dc800e17 	ldw	r18,56(sp)
   811a0:	dc400d17 	ldw	r17,52(sp)
   811a4:	dd401904 	addi	r21,sp,100
   811a8:	003e7406 	br	80b7c <___vfprintf_internal_r+0x5c4>
   811ac:	d9014f17 	ldw	r4,1340(sp)
   811b0:	b00b883a 	mov	r5,r22
   811b4:	d9800c04 	addi	r6,sp,48
   811b8:	d9c15115 	stw	r7,1348(sp)
   811bc:	00805600 	call	80560 <__sprint_r>
   811c0:	d9c15117 	ldw	r7,1348(sp)
   811c4:	103eb41e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   811c8:	dd401904 	addi	r21,sp,100
   811cc:	003d6d06 	br	80784 <___vfprintf_internal_r+0x1cc>
   811d0:	d9014f17 	ldw	r4,1340(sp)
   811d4:	b00b883a 	mov	r5,r22
   811d8:	d9800c04 	addi	r6,sp,48
   811dc:	d9c15115 	stw	r7,1348(sp)
   811e0:	00805600 	call	80560 <__sprint_r>
   811e4:	d9c15117 	ldw	r7,1348(sp)
   811e8:	103eab1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   811ec:	dc800e17 	ldw	r18,56(sp)
   811f0:	dc400d17 	ldw	r17,52(sp)
   811f4:	dd401904 	addi	r21,sp,100
   811f8:	003e3406 	br	80acc <___vfprintf_internal_r+0x514>
   811fc:	d9014f17 	ldw	r4,1340(sp)
   81200:	b00b883a 	mov	r5,r22
   81204:	d9800c04 	addi	r6,sp,48
   81208:	d9c15115 	stw	r7,1348(sp)
   8120c:	00805600 	call	80560 <__sprint_r>
   81210:	d9c15117 	ldw	r7,1348(sp)
   81214:	103ea01e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81218:	dc800e17 	ldw	r18,56(sp)
   8121c:	dc400d17 	ldw	r17,52(sp)
   81220:	dd401904 	addi	r21,sp,100
   81224:	003e1c06 	br	80a98 <___vfprintf_internal_r+0x4e0>
   81228:	d9014f17 	ldw	r4,1340(sp)
   8122c:	b00b883a 	mov	r5,r22
   81230:	d9800c04 	addi	r6,sp,48
   81234:	d9c15115 	stw	r7,1348(sp)
   81238:	00805600 	call	80560 <__sprint_r>
   8123c:	d9c15117 	ldw	r7,1348(sp)
   81240:	103e951e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81244:	dc800e17 	ldw	r18,56(sp)
   81248:	dc400d17 	ldw	r17,52(sp)
   8124c:	dd401904 	addi	r21,sp,100
   81250:	003e0406 	br	80a64 <___vfprintf_internal_r+0x4ac>
   81254:	d9000517 	ldw	r4,20(sp)
   81258:	0102580e 	bge	zero,r4,81bbc <___vfprintf_internal_r+0x1604>
   8125c:	d9814717 	ldw	r6,1308(sp)
   81260:	21807a16 	blt	r4,r6,8144c <___vfprintf_internal_r+0xe94>
   81264:	d8814117 	ldw	r2,1284(sp)
   81268:	91a5883a 	add	r18,r18,r6
   8126c:	8c400044 	addi	r17,r17,1
   81270:	a8800015 	stw	r2,0(r21)
   81274:	008001c4 	movi	r2,7
   81278:	a9800115 	stw	r6,4(r21)
   8127c:	dc800e15 	stw	r18,56(sp)
   81280:	dc400d15 	stw	r17,52(sp)
   81284:	1442fc16 	blt	r2,r17,81e78 <___vfprintf_internal_r+0x18c0>
   81288:	a8c00204 	addi	r3,r21,8
   8128c:	d9414717 	ldw	r5,1308(sp)
   81290:	2161c83a 	sub	r16,r4,r5
   81294:	043f9d0e 	bge	zero,r16,8110c <___vfprintf_internal_r+0xb54>
   81298:	00800404 	movi	r2,16
   8129c:	1402190e 	bge	r2,r16,81b04 <___vfprintf_internal_r+0x154c>
   812a0:	dc400d17 	ldw	r17,52(sp)
   812a4:	1027883a 	mov	r19,r2
   812a8:	07000274 	movhi	fp,9
   812ac:	e732aa84 	addi	fp,fp,-13654
   812b0:	050001c4 	movi	r20,7
   812b4:	00000306 	br	812c4 <___vfprintf_internal_r+0xd0c>
   812b8:	18c00204 	addi	r3,r3,8
   812bc:	843ffc04 	addi	r16,r16,-16
   812c0:	9c02130e 	bge	r19,r16,81b10 <___vfprintf_internal_r+0x1558>
   812c4:	94800404 	addi	r18,r18,16
   812c8:	8c400044 	addi	r17,r17,1
   812cc:	1f000015 	stw	fp,0(r3)
   812d0:	1cc00115 	stw	r19,4(r3)
   812d4:	dc800e15 	stw	r18,56(sp)
   812d8:	dc400d15 	stw	r17,52(sp)
   812dc:	a47ff60e 	bge	r20,r17,812b8 <___vfprintf_internal_r+0xd00>
   812e0:	d9014f17 	ldw	r4,1340(sp)
   812e4:	b00b883a 	mov	r5,r22
   812e8:	d9800c04 	addi	r6,sp,48
   812ec:	00805600 	call	80560 <__sprint_r>
   812f0:	103e691e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   812f4:	dc800e17 	ldw	r18,56(sp)
   812f8:	dc400d17 	ldw	r17,52(sp)
   812fc:	d8c01904 	addi	r3,sp,100
   81300:	003fee06 	br	812bc <___vfprintf_internal_r+0xd04>
   81304:	d8814717 	ldw	r2,1308(sp)
   81308:	143fffc4 	addi	r16,r2,-1
   8130c:	043e970e 	bge	zero,r16,80d6c <___vfprintf_internal_r+0x7b4>
   81310:	00800404 	movi	r2,16
   81314:	1400180e 	bge	r2,r16,81378 <___vfprintf_internal_r+0xdc0>
   81318:	1029883a 	mov	r20,r2
   8131c:	07000274 	movhi	fp,9
   81320:	e732aa84 	addi	fp,fp,-13654
   81324:	054001c4 	movi	r21,7
   81328:	00000306 	br	81338 <___vfprintf_internal_r+0xd80>
   8132c:	9cc00204 	addi	r19,r19,8
   81330:	843ffc04 	addi	r16,r16,-16
   81334:	a400120e 	bge	r20,r16,81380 <___vfprintf_internal_r+0xdc8>
   81338:	94800404 	addi	r18,r18,16
   8133c:	8c400044 	addi	r17,r17,1
   81340:	9f000015 	stw	fp,0(r19)
   81344:	9d000115 	stw	r20,4(r19)
   81348:	dc800e15 	stw	r18,56(sp)
   8134c:	dc400d15 	stw	r17,52(sp)
   81350:	ac7ff60e 	bge	r21,r17,8132c <___vfprintf_internal_r+0xd74>
   81354:	d9014f17 	ldw	r4,1340(sp)
   81358:	b00b883a 	mov	r5,r22
   8135c:	d9800c04 	addi	r6,sp,48
   81360:	00805600 	call	80560 <__sprint_r>
   81364:	103e4c1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81368:	dc800e17 	ldw	r18,56(sp)
   8136c:	dc400d17 	ldw	r17,52(sp)
   81370:	dcc01904 	addi	r19,sp,100
   81374:	003fee06 	br	81330 <___vfprintf_internal_r+0xd78>
   81378:	07000274 	movhi	fp,9
   8137c:	e732aa84 	addi	fp,fp,-13654
   81380:	9425883a 	add	r18,r18,r16
   81384:	8c400044 	addi	r17,r17,1
   81388:	008001c4 	movi	r2,7
   8138c:	9f000015 	stw	fp,0(r19)
   81390:	9c000115 	stw	r16,4(r19)
   81394:	dc800e15 	stw	r18,56(sp)
   81398:	dc400d15 	stw	r17,52(sp)
   8139c:	147e720e 	bge	r2,r17,80d68 <___vfprintf_internal_r+0x7b0>
   813a0:	d9014f17 	ldw	r4,1340(sp)
   813a4:	b00b883a 	mov	r5,r22
   813a8:	d9800c04 	addi	r6,sp,48
   813ac:	00805600 	call	80560 <__sprint_r>
   813b0:	103e391e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   813b4:	dc800e17 	ldw	r18,56(sp)
   813b8:	dc400d17 	ldw	r17,52(sp)
   813bc:	dcc01904 	addi	r19,sp,100
   813c0:	003e6a06 	br	80d6c <___vfprintf_internal_r+0x7b4>
   813c4:	d9014f17 	ldw	r4,1340(sp)
   813c8:	b00b883a 	mov	r5,r22
   813cc:	d9800c04 	addi	r6,sp,48
   813d0:	d9c15115 	stw	r7,1348(sp)
   813d4:	00805600 	call	80560 <__sprint_r>
   813d8:	d9c15117 	ldw	r7,1348(sp)
   813dc:	103e2e1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   813e0:	dc800e17 	ldw	r18,56(sp)
   813e4:	dc400d17 	ldw	r17,52(sp)
   813e8:	dd401904 	addi	r21,sp,100
   813ec:	003dba06 	br	80ad8 <___vfprintf_internal_r+0x520>
   813f0:	d9014f17 	ldw	r4,1340(sp)
   813f4:	b00b883a 	mov	r5,r22
   813f8:	d9800c04 	addi	r6,sp,48
   813fc:	00805600 	call	80560 <__sprint_r>
   81400:	103e251e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81404:	dc800e17 	ldw	r18,56(sp)
   81408:	dc400d17 	ldw	r17,52(sp)
   8140c:	dcc01904 	addi	r19,sp,100
   81410:	003e4206 	br	80d1c <___vfprintf_internal_r+0x764>
   81414:	d9014f17 	ldw	r4,1340(sp)
   81418:	b00b883a 	mov	r5,r22
   8141c:	d9800c04 	addi	r6,sp,48
   81420:	00805600 	call	80560 <__sprint_r>
   81424:	103e1c1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81428:	dc800e17 	ldw	r18,56(sp)
   8142c:	dc400d17 	ldw	r17,52(sp)
   81430:	d8c01904 	addi	r3,sp,100
   81434:	003e2e06 	br	80cf0 <___vfprintf_internal_r+0x738>
   81438:	d9414c17 	ldw	r5,1328(sp)
   8143c:	2880004c 	andi	r2,r5,1
   81440:	1005003a 	cmpeq	r2,r2,zero
   81444:	103dda1e 	bne	r2,zero,80bb0 <___vfprintf_internal_r+0x5f8>
   81448:	003e9f06 	br	80ec8 <___vfprintf_internal_r+0x910>
   8144c:	d8c14117 	ldw	r3,1284(sp)
   81450:	9125883a 	add	r18,r18,r4
   81454:	8c400044 	addi	r17,r17,1
   81458:	008001c4 	movi	r2,7
   8145c:	a8c00015 	stw	r3,0(r21)
   81460:	a9000115 	stw	r4,4(r21)
   81464:	dc800e15 	stw	r18,56(sp)
   81468:	dc400d15 	stw	r17,52(sp)
   8146c:	14426c16 	blt	r2,r17,81e20 <___vfprintf_internal_r+0x1868>
   81470:	a8c00204 	addi	r3,r21,8
   81474:	d9414917 	ldw	r5,1316(sp)
   81478:	00800044 	movi	r2,1
   8147c:	94800044 	addi	r18,r18,1
   81480:	8c400044 	addi	r17,r17,1
   81484:	18800115 	stw	r2,4(r3)
   81488:	008001c4 	movi	r2,7
   8148c:	19400015 	stw	r5,0(r3)
   81490:	dc800e15 	stw	r18,56(sp)
   81494:	dc400d15 	stw	r17,52(sp)
   81498:	2021883a 	mov	r16,r4
   8149c:	14425616 	blt	r2,r17,81df8 <___vfprintf_internal_r+0x1840>
   814a0:	19400204 	addi	r5,r3,8
   814a4:	d9814717 	ldw	r6,1308(sp)
   814a8:	8c400044 	addi	r17,r17,1
   814ac:	dc400d15 	stw	r17,52(sp)
   814b0:	3107c83a 	sub	r3,r6,r4
   814b4:	d9014117 	ldw	r4,1284(sp)
   814b8:	90e5883a 	add	r18,r18,r3
   814bc:	28c00115 	stw	r3,4(r5)
   814c0:	8105883a 	add	r2,r16,r4
   814c4:	28800015 	stw	r2,0(r5)
   814c8:	008001c4 	movi	r2,7
   814cc:	dc800e15 	stw	r18,56(sp)
   814d0:	147f1d16 	blt	r2,r17,81148 <___vfprintf_internal_r+0xb90>
   814d4:	28c00204 	addi	r3,r5,8
   814d8:	003db506 	br	80bb0 <___vfprintf_internal_r+0x5f8>
   814dc:	3c000017 	ldw	r16,0(r7)
   814e0:	3c400117 	ldw	r17,4(r7)
   814e4:	39800204 	addi	r6,r7,8
   814e8:	01000044 	movi	r4,1
   814ec:	d9814015 	stw	r6,1280(sp)
   814f0:	d8000405 	stb	zero,16(sp)
   814f4:	003ebe06 	br	80ff0 <___vfprintf_internal_r+0xa38>
   814f8:	3c000017 	ldw	r16,0(r7)
   814fc:	3c400117 	ldw	r17,4(r7)
   81500:	38800204 	addi	r2,r7,8
   81504:	d8814015 	stw	r2,1280(sp)
   81508:	003eb706 	br	80fe8 <___vfprintf_internal_r+0xa30>
   8150c:	3c000017 	ldw	r16,0(r7)
   81510:	3c400117 	ldw	r17,4(r7)
   81514:	39000204 	addi	r4,r7,8
   81518:	d9014015 	stw	r4,1280(sp)
   8151c:	0009883a 	mov	r4,zero
   81520:	d8000405 	stb	zero,16(sp)
   81524:	003eb206 	br	80ff0 <___vfprintf_internal_r+0xa38>
   81528:	38c00017 	ldw	r3,0(r7)
   8152c:	39c00104 	addi	r7,r7,4
   81530:	d8c14a15 	stw	r3,1320(sp)
   81534:	1800d70e 	bge	r3,zero,81894 <___vfprintf_internal_r+0x12dc>
   81538:	00c7c83a 	sub	r3,zero,r3
   8153c:	d8c14a15 	stw	r3,1320(sp)
   81540:	d9014c17 	ldw	r4,1328(sp)
   81544:	b8c00007 	ldb	r3,0(r23)
   81548:	21000114 	ori	r4,r4,4
   8154c:	d9014c15 	stw	r4,1328(sp)
   81550:	003c9806 	br	807b4 <___vfprintf_internal_r+0x1fc>
   81554:	d9814c17 	ldw	r6,1328(sp)
   81558:	3080080c 	andi	r2,r6,32
   8155c:	1001f626 	beq	r2,zero,81d38 <___vfprintf_internal_r+0x1780>
   81560:	d9014b17 	ldw	r4,1324(sp)
   81564:	38800017 	ldw	r2,0(r7)
   81568:	39c00104 	addi	r7,r7,4
   8156c:	d9c14015 	stw	r7,1280(sp)
   81570:	2007d7fa 	srai	r3,r4,31
   81574:	d9c14017 	ldw	r7,1280(sp)
   81578:	11000015 	stw	r4,0(r2)
   8157c:	10c00115 	stw	r3,4(r2)
   81580:	003c6906 	br	80728 <___vfprintf_internal_r+0x170>
   81584:	b8c00007 	ldb	r3,0(r23)
   81588:	00801b04 	movi	r2,108
   8158c:	18825526 	beq	r3,r2,81ee4 <___vfprintf_internal_r+0x192c>
   81590:	d9414c17 	ldw	r5,1328(sp)
   81594:	29400414 	ori	r5,r5,16
   81598:	d9414c15 	stw	r5,1328(sp)
   8159c:	003c8506 	br	807b4 <___vfprintf_internal_r+0x1fc>
   815a0:	d9814c17 	ldw	r6,1328(sp)
   815a4:	b8c00007 	ldb	r3,0(r23)
   815a8:	31800814 	ori	r6,r6,32
   815ac:	d9814c15 	stw	r6,1328(sp)
   815b0:	003c8006 	br	807b4 <___vfprintf_internal_r+0x1fc>
   815b4:	d8814c17 	ldw	r2,1328(sp)
   815b8:	3c000017 	ldw	r16,0(r7)
   815bc:	00c01e04 	movi	r3,120
   815c0:	10800094 	ori	r2,r2,2
   815c4:	d8814c15 	stw	r2,1328(sp)
   815c8:	39c00104 	addi	r7,r7,4
   815cc:	01400274 	movhi	r5,9
   815d0:	29729304 	addi	r5,r5,-13748
   815d4:	00800c04 	movi	r2,48
   815d8:	0023883a 	mov	r17,zero
   815dc:	01000084 	movi	r4,2
   815e0:	d9c14015 	stw	r7,1280(sp)
   815e4:	d8c14d15 	stw	r3,1332(sp)
   815e8:	d9414415 	stw	r5,1296(sp)
   815ec:	d8800445 	stb	r2,17(sp)
   815f0:	d8c00485 	stb	r3,18(sp)
   815f4:	d8000405 	stb	zero,16(sp)
   815f8:	003e7d06 	br	80ff0 <___vfprintf_internal_r+0xa38>
   815fc:	d8814c17 	ldw	r2,1328(sp)
   81600:	b8c00007 	ldb	r3,0(r23)
   81604:	10801014 	ori	r2,r2,64
   81608:	d8814c15 	stw	r2,1328(sp)
   8160c:	003c6906 	br	807b4 <___vfprintf_internal_r+0x1fc>
   81610:	d9414c17 	ldw	r5,1328(sp)
   81614:	2880020c 	andi	r2,r5,8
   81618:	1001e526 	beq	r2,zero,81db0 <___vfprintf_internal_r+0x17f8>
   8161c:	39800017 	ldw	r6,0(r7)
   81620:	38800204 	addi	r2,r7,8
   81624:	d8814015 	stw	r2,1280(sp)
   81628:	d9814215 	stw	r6,1288(sp)
   8162c:	39c00117 	ldw	r7,4(r7)
   81630:	d9c14315 	stw	r7,1292(sp)
   81634:	d9014217 	ldw	r4,1288(sp)
   81638:	d9414317 	ldw	r5,1292(sp)
   8163c:	00870680 	call	87068 <__isinfd>
   81640:	10021d26 	beq	r2,zero,81eb8 <___vfprintf_internal_r+0x1900>
   81644:	d9014217 	ldw	r4,1288(sp)
   81648:	d9414317 	ldw	r5,1292(sp)
   8164c:	000d883a 	mov	r6,zero
   81650:	000f883a 	mov	r7,zero
   81654:	00892780 	call	89278 <__ltdf2>
   81658:	1002d016 	blt	r2,zero,8219c <___vfprintf_internal_r+0x1be4>
   8165c:	d9414d17 	ldw	r5,1332(sp)
   81660:	008011c4 	movi	r2,71
   81664:	11421016 	blt	r2,r5,81ea8 <___vfprintf_internal_r+0x18f0>
   81668:	01800274 	movhi	r6,9
   8166c:	31b29804 	addi	r6,r6,-13728
   81670:	d9814115 	stw	r6,1284(sp)
   81674:	d9014c17 	ldw	r4,1328(sp)
   81678:	00c000c4 	movi	r3,3
   8167c:	00bfdfc4 	movi	r2,-129
   81680:	2088703a 	and	r4,r4,r2
   81684:	180f883a 	mov	r7,r3
   81688:	d8c14515 	stw	r3,1300(sp)
   8168c:	d9014c15 	stw	r4,1328(sp)
   81690:	d8014615 	stw	zero,1304(sp)
   81694:	003e6a06 	br	81040 <___vfprintf_internal_r+0xa88>
   81698:	38800017 	ldw	r2,0(r7)
   8169c:	00c00044 	movi	r3,1
   816a0:	39c00104 	addi	r7,r7,4
   816a4:	d9c14015 	stw	r7,1280(sp)
   816a8:	d9000f04 	addi	r4,sp,60
   816ac:	180f883a 	mov	r7,r3
   816b0:	d8c14515 	stw	r3,1300(sp)
   816b4:	d9014115 	stw	r4,1284(sp)
   816b8:	d8800f05 	stb	r2,60(sp)
   816bc:	d8000405 	stb	zero,16(sp)
   816c0:	003cac06 	br	80974 <___vfprintf_internal_r+0x3bc>
   816c4:	01400274 	movhi	r5,9
   816c8:	29729e04 	addi	r5,r5,-13704
   816cc:	d9414415 	stw	r5,1296(sp)
   816d0:	d9814c17 	ldw	r6,1328(sp)
   816d4:	3080080c 	andi	r2,r6,32
   816d8:	1000ff26 	beq	r2,zero,81ad8 <___vfprintf_internal_r+0x1520>
   816dc:	3c000017 	ldw	r16,0(r7)
   816e0:	3c400117 	ldw	r17,4(r7)
   816e4:	38800204 	addi	r2,r7,8
   816e8:	d8814015 	stw	r2,1280(sp)
   816ec:	d9414c17 	ldw	r5,1328(sp)
   816f0:	2880004c 	andi	r2,r5,1
   816f4:	1005003a 	cmpeq	r2,r2,zero
   816f8:	1000b91e 	bne	r2,zero,819e0 <___vfprintf_internal_r+0x1428>
   816fc:	8444b03a 	or	r2,r16,r17
   81700:	1000b726 	beq	r2,zero,819e0 <___vfprintf_internal_r+0x1428>
   81704:	d9814d17 	ldw	r6,1332(sp)
   81708:	29400094 	ori	r5,r5,2
   8170c:	00800c04 	movi	r2,48
   81710:	01000084 	movi	r4,2
   81714:	d9414c15 	stw	r5,1328(sp)
   81718:	d8800445 	stb	r2,17(sp)
   8171c:	d9800485 	stb	r6,18(sp)
   81720:	d8000405 	stb	zero,16(sp)
   81724:	003e3206 	br	80ff0 <___vfprintf_internal_r+0xa38>
   81728:	01800274 	movhi	r6,9
   8172c:	31b29304 	addi	r6,r6,-13748
   81730:	d9814415 	stw	r6,1296(sp)
   81734:	003fe606 	br	816d0 <___vfprintf_internal_r+0x1118>
   81738:	00800ac4 	movi	r2,43
   8173c:	d8800405 	stb	r2,16(sp)
   81740:	b8c00007 	ldb	r3,0(r23)
   81744:	003c1b06 	br	807b4 <___vfprintf_internal_r+0x1fc>
   81748:	d8814c17 	ldw	r2,1328(sp)
   8174c:	b8c00007 	ldb	r3,0(r23)
   81750:	10800054 	ori	r2,r2,1
   81754:	d8814c15 	stw	r2,1328(sp)
   81758:	003c1606 	br	807b4 <___vfprintf_internal_r+0x1fc>
   8175c:	d8800407 	ldb	r2,16(sp)
   81760:	10004c1e 	bne	r2,zero,81894 <___vfprintf_internal_r+0x12dc>
   81764:	00800804 	movi	r2,32
   81768:	d8800405 	stb	r2,16(sp)
   8176c:	b8c00007 	ldb	r3,0(r23)
   81770:	003c1006 	br	807b4 <___vfprintf_internal_r+0x1fc>
   81774:	d9814c17 	ldw	r6,1328(sp)
   81778:	b8c00007 	ldb	r3,0(r23)
   8177c:	31800214 	ori	r6,r6,8
   81780:	d9814c15 	stw	r6,1328(sp)
   81784:	003c0b06 	br	807b4 <___vfprintf_internal_r+0x1fc>
   81788:	0009883a 	mov	r4,zero
   8178c:	04000244 	movi	r16,9
   81790:	01400284 	movi	r5,10
   81794:	d9c15115 	stw	r7,1348(sp)
   81798:	00897b00 	call	897b0 <__mulsi3>
   8179c:	b9000007 	ldb	r4,0(r23)
   817a0:	d8c14d17 	ldw	r3,1332(sp)
   817a4:	bdc00044 	addi	r23,r23,1
   817a8:	d9014d15 	stw	r4,1332(sp)
   817ac:	d9414d17 	ldw	r5,1332(sp)
   817b0:	1885883a 	add	r2,r3,r2
   817b4:	113ff404 	addi	r4,r2,-48
   817b8:	28bff404 	addi	r2,r5,-48
   817bc:	d9c15117 	ldw	r7,1348(sp)
   817c0:	80bff32e 	bgeu	r16,r2,81790 <___vfprintf_internal_r+0x11d8>
   817c4:	d9014a15 	stw	r4,1320(sp)
   817c8:	003bfc06 	br	807bc <___vfprintf_internal_r+0x204>
   817cc:	d8814c17 	ldw	r2,1328(sp)
   817d0:	b8c00007 	ldb	r3,0(r23)
   817d4:	10802014 	ori	r2,r2,128
   817d8:	d8814c15 	stw	r2,1328(sp)
   817dc:	003bf506 	br	807b4 <___vfprintf_internal_r+0x1fc>
   817e0:	b8c00007 	ldb	r3,0(r23)
   817e4:	00800a84 	movi	r2,42
   817e8:	bdc00044 	addi	r23,r23,1
   817ec:	18831826 	beq	r3,r2,82450 <___vfprintf_internal_r+0x1e98>
   817f0:	d8c14d15 	stw	r3,1332(sp)
   817f4:	18bff404 	addi	r2,r3,-48
   817f8:	00c00244 	movi	r3,9
   817fc:	18827b36 	bltu	r3,r2,821ec <___vfprintf_internal_r+0x1c34>
   81800:	1821883a 	mov	r16,r3
   81804:	0009883a 	mov	r4,zero
   81808:	01400284 	movi	r5,10
   8180c:	d9c15115 	stw	r7,1348(sp)
   81810:	00897b00 	call	897b0 <__mulsi3>
   81814:	d9414d17 	ldw	r5,1332(sp)
   81818:	b9800007 	ldb	r6,0(r23)
   8181c:	d9c15117 	ldw	r7,1348(sp)
   81820:	1145883a 	add	r2,r2,r5
   81824:	113ff404 	addi	r4,r2,-48
   81828:	30bff404 	addi	r2,r6,-48
   8182c:	d9814d15 	stw	r6,1332(sp)
   81830:	bdc00044 	addi	r23,r23,1
   81834:	80bff42e 	bgeu	r16,r2,81808 <___vfprintf_internal_r+0x1250>
   81838:	2027883a 	mov	r19,r4
   8183c:	203bdf0e 	bge	r4,zero,807bc <___vfprintf_internal_r+0x204>
   81840:	04ffffc4 	movi	r19,-1
   81844:	003bdd06 	br	807bc <___vfprintf_internal_r+0x204>
   81848:	d8000405 	stb	zero,16(sp)
   8184c:	39800017 	ldw	r6,0(r7)
   81850:	39c00104 	addi	r7,r7,4
   81854:	d9c14015 	stw	r7,1280(sp)
   81858:	d9814115 	stw	r6,1284(sp)
   8185c:	3001c926 	beq	r6,zero,81f84 <___vfprintf_internal_r+0x19cc>
   81860:	98000e16 	blt	r19,zero,8189c <___vfprintf_internal_r+0x12e4>
   81864:	d9014117 	ldw	r4,1284(sp)
   81868:	000b883a 	mov	r5,zero
   8186c:	980d883a 	mov	r6,r19
   81870:	00856ec0 	call	856ec <memchr>
   81874:	10025926 	beq	r2,zero,821dc <___vfprintf_internal_r+0x1c24>
   81878:	d8c14117 	ldw	r3,1284(sp)
   8187c:	10cfc83a 	sub	r7,r2,r3
   81880:	99c19e16 	blt	r19,r7,81efc <___vfprintf_internal_r+0x1944>
   81884:	d9c14515 	stw	r7,1300(sp)
   81888:	38000916 	blt	r7,zero,818b0 <___vfprintf_internal_r+0x12f8>
   8188c:	d8014615 	stw	zero,1304(sp)
   81890:	003deb06 	br	81040 <___vfprintf_internal_r+0xa88>
   81894:	b8c00007 	ldb	r3,0(r23)
   81898:	003bc606 	br	807b4 <___vfprintf_internal_r+0x1fc>
   8189c:	d9014117 	ldw	r4,1284(sp)
   818a0:	00873500 	call	87350 <strlen>
   818a4:	d8814515 	stw	r2,1300(sp)
   818a8:	100f883a 	mov	r7,r2
   818ac:	103ff70e 	bge	r2,zero,8188c <___vfprintf_internal_r+0x12d4>
   818b0:	d8014515 	stw	zero,1300(sp)
   818b4:	d8014615 	stw	zero,1304(sp)
   818b8:	003de106 	br	81040 <___vfprintf_internal_r+0xa88>
   818bc:	20c03fcc 	andi	r3,r4,255
   818c0:	00800044 	movi	r2,1
   818c4:	18802d26 	beq	r3,r2,8197c <___vfprintf_internal_r+0x13c4>
   818c8:	18800e36 	bltu	r3,r2,81904 <___vfprintf_internal_r+0x134c>
   818cc:	00800084 	movi	r2,2
   818d0:	1880fa26 	beq	r3,r2,81cbc <___vfprintf_internal_r+0x1704>
   818d4:	01000274 	movhi	r4,9
   818d8:	2132a304 	addi	r4,r4,-13684
   818dc:	00873500 	call	87350 <strlen>
   818e0:	100f883a 	mov	r7,r2
   818e4:	dcc14515 	stw	r19,1300(sp)
   818e8:	9880010e 	bge	r19,r2,818f0 <___vfprintf_internal_r+0x1338>
   818ec:	d8814515 	stw	r2,1300(sp)
   818f0:	00800274 	movhi	r2,9
   818f4:	10b2a304 	addi	r2,r2,-13684
   818f8:	dcc14615 	stw	r19,1304(sp)
   818fc:	d8814115 	stw	r2,1284(sp)
   81900:	003dcf06 	br	81040 <___vfprintf_internal_r+0xa88>
   81904:	d9401904 	addi	r5,sp,100
   81908:	dd000f04 	addi	r20,sp,60
   8190c:	d9414115 	stw	r5,1284(sp)
   81910:	880a977a 	slli	r5,r17,29
   81914:	d9814117 	ldw	r6,1284(sp)
   81918:	8004d0fa 	srli	r2,r16,3
   8191c:	8806d0fa 	srli	r3,r17,3
   81920:	810001cc 	andi	r4,r16,7
   81924:	2884b03a 	or	r2,r5,r2
   81928:	31bfffc4 	addi	r6,r6,-1
   8192c:	21000c04 	addi	r4,r4,48
   81930:	d9814115 	stw	r6,1284(sp)
   81934:	10cab03a 	or	r5,r2,r3
   81938:	31000005 	stb	r4,0(r6)
   8193c:	1021883a 	mov	r16,r2
   81940:	1823883a 	mov	r17,r3
   81944:	283ff21e 	bne	r5,zero,81910 <___vfprintf_internal_r+0x1358>
   81948:	d8c14c17 	ldw	r3,1328(sp)
   8194c:	1880004c 	andi	r2,r3,1
   81950:	1005003a 	cmpeq	r2,r2,zero
   81954:	103db31e 	bne	r2,zero,81024 <___vfprintf_internal_r+0xa6c>
   81958:	20803fcc 	andi	r2,r4,255
   8195c:	1080201c 	xori	r2,r2,128
   81960:	10bfe004 	addi	r2,r2,-128
   81964:	00c00c04 	movi	r3,48
   81968:	10fdae26 	beq	r2,r3,81024 <___vfprintf_internal_r+0xa6c>
   8196c:	31bfffc4 	addi	r6,r6,-1
   81970:	d9814115 	stw	r6,1284(sp)
   81974:	30c00005 	stb	r3,0(r6)
   81978:	003daa06 	br	81024 <___vfprintf_internal_r+0xa6c>
   8197c:	88800068 	cmpgeui	r2,r17,1
   81980:	10002c1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x147c>
   81984:	8800021e 	bne	r17,zero,81990 <___vfprintf_internal_r+0x13d8>
   81988:	00800244 	movi	r2,9
   8198c:	14002936 	bltu	r2,r16,81a34 <___vfprintf_internal_r+0x147c>
   81990:	d90018c4 	addi	r4,sp,99
   81994:	dd000f04 	addi	r20,sp,60
   81998:	d9014115 	stw	r4,1284(sp)
   8199c:	d9014117 	ldw	r4,1284(sp)
   819a0:	80800c04 	addi	r2,r16,48
   819a4:	20800005 	stb	r2,0(r4)
   819a8:	003d9e06 	br	81024 <___vfprintf_internal_r+0xa6c>
   819ac:	dc400d17 	ldw	r17,52(sp)
   819b0:	07000274 	movhi	fp,9
   819b4:	e732aa84 	addi	fp,fp,-13654
   819b8:	9425883a 	add	r18,r18,r16
   819bc:	8c400044 	addi	r17,r17,1
   819c0:	008001c4 	movi	r2,7
   819c4:	1f000015 	stw	fp,0(r3)
   819c8:	1c000115 	stw	r16,4(r3)
   819cc:	dc800e15 	stw	r18,56(sp)
   819d0:	dc400d15 	stw	r17,52(sp)
   819d4:	147ddc16 	blt	r2,r17,81148 <___vfprintf_internal_r+0xb90>
   819d8:	18c00204 	addi	r3,r3,8
   819dc:	003c7406 	br	80bb0 <___vfprintf_internal_r+0x5f8>
   819e0:	01000084 	movi	r4,2
   819e4:	d8000405 	stb	zero,16(sp)
   819e8:	003d8106 	br	80ff0 <___vfprintf_internal_r+0xa38>
   819ec:	d9814c17 	ldw	r6,1328(sp)
   819f0:	30c4703a 	and	r2,r6,r3
   819f4:	1005003a 	cmpeq	r2,r2,zero
   819f8:	103cb326 	beq	r2,zero,80cc8 <___vfprintf_internal_r+0x710>
   819fc:	d9014117 	ldw	r4,1284(sp)
   81a00:	94800044 	addi	r18,r18,1
   81a04:	8c400044 	addi	r17,r17,1
   81a08:	008001c4 	movi	r2,7
   81a0c:	a9000015 	stw	r4,0(r21)
   81a10:	a8c00115 	stw	r3,4(r21)
   81a14:	dc800e15 	stw	r18,56(sp)
   81a18:	dc400d15 	stw	r17,52(sp)
   81a1c:	147e6016 	blt	r2,r17,813a0 <___vfprintf_internal_r+0xde8>
   81a20:	acc00204 	addi	r19,r21,8
   81a24:	003cd106 	br	80d6c <___vfprintf_internal_r+0x7b4>
   81a28:	07000274 	movhi	fp,9
   81a2c:	e732aa84 	addi	fp,fp,-13654
   81a30:	003c4906 	br	80b58 <___vfprintf_internal_r+0x5a0>
   81a34:	dd000f04 	addi	r20,sp,60
   81a38:	dc801904 	addi	r18,sp,100
   81a3c:	8009883a 	mov	r4,r16
   81a40:	880b883a 	mov	r5,r17
   81a44:	01800284 	movi	r6,10
   81a48:	000f883a 	mov	r7,zero
   81a4c:	0087ed80 	call	87ed8 <__umoddi3>
   81a50:	12000c04 	addi	r8,r2,48
   81a54:	94bfffc4 	addi	r18,r18,-1
   81a58:	8009883a 	mov	r4,r16
   81a5c:	880b883a 	mov	r5,r17
   81a60:	01800284 	movi	r6,10
   81a64:	000f883a 	mov	r7,zero
   81a68:	92000005 	stb	r8,0(r18)
   81a6c:	008786c0 	call	8786c <__udivdi3>
   81a70:	1009883a 	mov	r4,r2
   81a74:	1021883a 	mov	r16,r2
   81a78:	18800068 	cmpgeui	r2,r3,1
   81a7c:	1823883a 	mov	r17,r3
   81a80:	103fee1e 	bne	r2,zero,81a3c <___vfprintf_internal_r+0x1484>
   81a84:	1800021e 	bne	r3,zero,81a90 <___vfprintf_internal_r+0x14d8>
   81a88:	00800244 	movi	r2,9
   81a8c:	113feb36 	bltu	r2,r4,81a3c <___vfprintf_internal_r+0x1484>
   81a90:	94bfffc4 	addi	r18,r18,-1
   81a94:	dc814115 	stw	r18,1284(sp)
   81a98:	003fc006 	br	8199c <___vfprintf_internal_r+0x13e4>
   81a9c:	d9014c17 	ldw	r4,1328(sp)
   81aa0:	2080004c 	andi	r2,r4,1
   81aa4:	10009a1e 	bne	r2,zero,81d10 <___vfprintf_internal_r+0x1758>
   81aa8:	d9401904 	addi	r5,sp,100
   81aac:	dd000f04 	addi	r20,sp,60
   81ab0:	d9414115 	stw	r5,1284(sp)
   81ab4:	003d5b06 	br	81024 <___vfprintf_internal_r+0xa6c>
   81ab8:	d9014f17 	ldw	r4,1340(sp)
   81abc:	b00b883a 	mov	r5,r22
   81ac0:	d9800c04 	addi	r6,sp,48
   81ac4:	00805600 	call	80560 <__sprint_r>
   81ac8:	103c731e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81acc:	dc800e17 	ldw	r18,56(sp)
   81ad0:	d8c01904 	addi	r3,sp,100
   81ad4:	003cf906 	br	80ebc <___vfprintf_internal_r+0x904>
   81ad8:	d8c14c17 	ldw	r3,1328(sp)
   81adc:	1880040c 	andi	r2,r3,16
   81ae0:	1000711e 	bne	r2,zero,81ca8 <___vfprintf_internal_r+0x16f0>
   81ae4:	d9014c17 	ldw	r4,1328(sp)
   81ae8:	2080100c 	andi	r2,r4,64
   81aec:	10006e26 	beq	r2,zero,81ca8 <___vfprintf_internal_r+0x16f0>
   81af0:	3c00000b 	ldhu	r16,0(r7)
   81af4:	0023883a 	mov	r17,zero
   81af8:	39c00104 	addi	r7,r7,4
   81afc:	d9c14015 	stw	r7,1280(sp)
   81b00:	003efa06 	br	816ec <___vfprintf_internal_r+0x1134>
   81b04:	dc400d17 	ldw	r17,52(sp)
   81b08:	07000274 	movhi	fp,9
   81b0c:	e732aa84 	addi	fp,fp,-13654
   81b10:	9425883a 	add	r18,r18,r16
   81b14:	8c400044 	addi	r17,r17,1
   81b18:	008001c4 	movi	r2,7
   81b1c:	1f000015 	stw	fp,0(r3)
   81b20:	1c000115 	stw	r16,4(r3)
   81b24:	dc800e15 	stw	r18,56(sp)
   81b28:	dc400d15 	stw	r17,52(sp)
   81b2c:	147d7016 	blt	r2,r17,810f0 <___vfprintf_internal_r+0xb38>
   81b30:	18c00204 	addi	r3,r3,8
   81b34:	003d7506 	br	8110c <___vfprintf_internal_r+0xb54>
   81b38:	dc800e17 	ldw	r18,56(sp)
   81b3c:	dc400d17 	ldw	r17,52(sp)
   81b40:	07000274 	movhi	fp,9
   81b44:	e732ae84 	addi	fp,fp,-13638
   81b48:	003bba06 	br	80a34 <___vfprintf_internal_r+0x47c>
   81b4c:	d9014f17 	ldw	r4,1340(sp)
   81b50:	b00b883a 	mov	r5,r22
   81b54:	d9800c04 	addi	r6,sp,48
   81b58:	00805600 	call	80560 <__sprint_r>
   81b5c:	103c4e1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81b60:	dc800e17 	ldw	r18,56(sp)
   81b64:	d8c01904 	addi	r3,sp,100
   81b68:	003ce306 	br	80ef8 <___vfprintf_internal_r+0x940>
   81b6c:	3c000017 	ldw	r16,0(r7)
   81b70:	0009883a 	mov	r4,zero
   81b74:	39c00104 	addi	r7,r7,4
   81b78:	0023883a 	mov	r17,zero
   81b7c:	d9c14015 	stw	r7,1280(sp)
   81b80:	d8000405 	stb	zero,16(sp)
   81b84:	003d1a06 	br	80ff0 <___vfprintf_internal_r+0xa38>
   81b88:	38800017 	ldw	r2,0(r7)
   81b8c:	39c00104 	addi	r7,r7,4
   81b90:	d9c14015 	stw	r7,1280(sp)
   81b94:	1023d7fa 	srai	r17,r2,31
   81b98:	1021883a 	mov	r16,r2
   81b9c:	003d1206 	br	80fe8 <___vfprintf_internal_r+0xa30>
   81ba0:	3c000017 	ldw	r16,0(r7)
   81ba4:	01000044 	movi	r4,1
   81ba8:	39c00104 	addi	r7,r7,4
   81bac:	0023883a 	mov	r17,zero
   81bb0:	d9c14015 	stw	r7,1280(sp)
   81bb4:	d8000405 	stb	zero,16(sp)
   81bb8:	003d0d06 	br	80ff0 <___vfprintf_internal_r+0xa38>
   81bbc:	00800274 	movhi	r2,9
   81bc0:	10b2aa04 	addi	r2,r2,-13656
   81bc4:	94800044 	addi	r18,r18,1
   81bc8:	8c400044 	addi	r17,r17,1
   81bcc:	a8800015 	stw	r2,0(r21)
   81bd0:	00c00044 	movi	r3,1
   81bd4:	008001c4 	movi	r2,7
   81bd8:	a8c00115 	stw	r3,4(r21)
   81bdc:	dc800e15 	stw	r18,56(sp)
   81be0:	dc400d15 	stw	r17,52(sp)
   81be4:	1440ca16 	blt	r2,r17,81f10 <___vfprintf_internal_r+0x1958>
   81be8:	a8c00204 	addi	r3,r21,8
   81bec:	2000061e 	bne	r4,zero,81c08 <___vfprintf_internal_r+0x1650>
   81bf0:	d9414717 	ldw	r5,1308(sp)
   81bf4:	2800041e 	bne	r5,zero,81c08 <___vfprintf_internal_r+0x1650>
   81bf8:	d9814c17 	ldw	r6,1328(sp)
   81bfc:	3080004c 	andi	r2,r6,1
   81c00:	1005003a 	cmpeq	r2,r2,zero
   81c04:	103bea1e 	bne	r2,zero,80bb0 <___vfprintf_internal_r+0x5f8>
   81c08:	00800044 	movi	r2,1
   81c0c:	dc400d17 	ldw	r17,52(sp)
   81c10:	18800115 	stw	r2,4(r3)
   81c14:	d8814917 	ldw	r2,1316(sp)
   81c18:	94800044 	addi	r18,r18,1
   81c1c:	8c400044 	addi	r17,r17,1
   81c20:	18800015 	stw	r2,0(r3)
   81c24:	008001c4 	movi	r2,7
   81c28:	dc800e15 	stw	r18,56(sp)
   81c2c:	dc400d15 	stw	r17,52(sp)
   81c30:	1440ca16 	blt	r2,r17,81f5c <___vfprintf_internal_r+0x19a4>
   81c34:	18c00204 	addi	r3,r3,8
   81c38:	0121c83a 	sub	r16,zero,r4
   81c3c:	0400500e 	bge	zero,r16,81d80 <___vfprintf_internal_r+0x17c8>
   81c40:	00800404 	movi	r2,16
   81c44:	1400800e 	bge	r2,r16,81e48 <___vfprintf_internal_r+0x1890>
   81c48:	1027883a 	mov	r19,r2
   81c4c:	07000274 	movhi	fp,9
   81c50:	e732aa84 	addi	fp,fp,-13654
   81c54:	050001c4 	movi	r20,7
   81c58:	00000306 	br	81c68 <___vfprintf_internal_r+0x16b0>
   81c5c:	18c00204 	addi	r3,r3,8
   81c60:	843ffc04 	addi	r16,r16,-16
   81c64:	9c007a0e 	bge	r19,r16,81e50 <___vfprintf_internal_r+0x1898>
   81c68:	94800404 	addi	r18,r18,16
   81c6c:	8c400044 	addi	r17,r17,1
   81c70:	1f000015 	stw	fp,0(r3)
   81c74:	1cc00115 	stw	r19,4(r3)
   81c78:	dc800e15 	stw	r18,56(sp)
   81c7c:	dc400d15 	stw	r17,52(sp)
   81c80:	a47ff60e 	bge	r20,r17,81c5c <___vfprintf_internal_r+0x16a4>
   81c84:	d9014f17 	ldw	r4,1340(sp)
   81c88:	b00b883a 	mov	r5,r22
   81c8c:	d9800c04 	addi	r6,sp,48
   81c90:	00805600 	call	80560 <__sprint_r>
   81c94:	103c001e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81c98:	dc800e17 	ldw	r18,56(sp)
   81c9c:	dc400d17 	ldw	r17,52(sp)
   81ca0:	d8c01904 	addi	r3,sp,100
   81ca4:	003fee06 	br	81c60 <___vfprintf_internal_r+0x16a8>
   81ca8:	3c000017 	ldw	r16,0(r7)
   81cac:	0023883a 	mov	r17,zero
   81cb0:	39c00104 	addi	r7,r7,4
   81cb4:	d9c14015 	stw	r7,1280(sp)
   81cb8:	003e8c06 	br	816ec <___vfprintf_internal_r+0x1134>
   81cbc:	d9401904 	addi	r5,sp,100
   81cc0:	dd000f04 	addi	r20,sp,60
   81cc4:	d9414115 	stw	r5,1284(sp)
   81cc8:	d9814417 	ldw	r6,1296(sp)
   81ccc:	880a973a 	slli	r5,r17,28
   81cd0:	8004d13a 	srli	r2,r16,4
   81cd4:	810003cc 	andi	r4,r16,15
   81cd8:	3109883a 	add	r4,r6,r4
   81cdc:	2884b03a 	or	r2,r5,r2
   81ce0:	21400003 	ldbu	r5,0(r4)
   81ce4:	d9014117 	ldw	r4,1284(sp)
   81ce8:	8806d13a 	srli	r3,r17,4
   81cec:	1021883a 	mov	r16,r2
   81cf0:	213fffc4 	addi	r4,r4,-1
   81cf4:	d9014115 	stw	r4,1284(sp)
   81cf8:	d9814117 	ldw	r6,1284(sp)
   81cfc:	10c8b03a 	or	r4,r2,r3
   81d00:	1823883a 	mov	r17,r3
   81d04:	31400005 	stb	r5,0(r6)
   81d08:	203fef1e 	bne	r4,zero,81cc8 <___vfprintf_internal_r+0x1710>
   81d0c:	003cc506 	br	81024 <___vfprintf_internal_r+0xa6c>
   81d10:	00800c04 	movi	r2,48
   81d14:	d98018c4 	addi	r6,sp,99
   81d18:	dd000f04 	addi	r20,sp,60
   81d1c:	d88018c5 	stb	r2,99(sp)
   81d20:	d9814115 	stw	r6,1284(sp)
   81d24:	003cbf06 	br	81024 <___vfprintf_internal_r+0xa6c>
   81d28:	dc400d17 	ldw	r17,52(sp)
   81d2c:	07000274 	movhi	fp,9
   81d30:	e732ae84 	addi	fp,fp,-13638
   81d34:	003bc106 	br	80c3c <___vfprintf_internal_r+0x684>
   81d38:	d9414c17 	ldw	r5,1328(sp)
   81d3c:	2880040c 	andi	r2,r5,16
   81d40:	10007c26 	beq	r2,zero,81f34 <___vfprintf_internal_r+0x197c>
   81d44:	38800017 	ldw	r2,0(r7)
   81d48:	39c00104 	addi	r7,r7,4
   81d4c:	d9c14015 	stw	r7,1280(sp)
   81d50:	d9814b17 	ldw	r6,1324(sp)
   81d54:	d9c14017 	ldw	r7,1280(sp)
   81d58:	11800015 	stw	r6,0(r2)
   81d5c:	003a7206 	br	80728 <___vfprintf_internal_r+0x170>
   81d60:	d9014f17 	ldw	r4,1340(sp)
   81d64:	b00b883a 	mov	r5,r22
   81d68:	d9800c04 	addi	r6,sp,48
   81d6c:	00805600 	call	80560 <__sprint_r>
   81d70:	103bc91e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81d74:	dc800e17 	ldw	r18,56(sp)
   81d78:	dc400d17 	ldw	r17,52(sp)
   81d7c:	d8c01904 	addi	r3,sp,100
   81d80:	d9014717 	ldw	r4,1308(sp)
   81d84:	d9414117 	ldw	r5,1284(sp)
   81d88:	8c400044 	addi	r17,r17,1
   81d8c:	9125883a 	add	r18,r18,r4
   81d90:	008001c4 	movi	r2,7
   81d94:	19400015 	stw	r5,0(r3)
   81d98:	19000115 	stw	r4,4(r3)
   81d9c:	dc800e15 	stw	r18,56(sp)
   81da0:	dc400d15 	stw	r17,52(sp)
   81da4:	147ce816 	blt	r2,r17,81148 <___vfprintf_internal_r+0xb90>
   81da8:	18c00204 	addi	r3,r3,8
   81dac:	003b8006 	br	80bb0 <___vfprintf_internal_r+0x5f8>
   81db0:	38c00017 	ldw	r3,0(r7)
   81db4:	39000204 	addi	r4,r7,8
   81db8:	d9014015 	stw	r4,1280(sp)
   81dbc:	d8c14215 	stw	r3,1288(sp)
   81dc0:	39c00117 	ldw	r7,4(r7)
   81dc4:	d9c14315 	stw	r7,1292(sp)
   81dc8:	003e1a06 	br	81634 <___vfprintf_internal_r+0x107c>
   81dcc:	0005883a 	mov	r2,zero
   81dd0:	1409c83a 	sub	r4,r2,r16
   81dd4:	1105803a 	cmpltu	r2,r2,r4
   81dd8:	044bc83a 	sub	r5,zero,r17
   81ddc:	2885c83a 	sub	r2,r5,r2
   81de0:	2021883a 	mov	r16,r4
   81de4:	1023883a 	mov	r17,r2
   81de8:	01000044 	movi	r4,1
   81dec:	00800b44 	movi	r2,45
   81df0:	d8800405 	stb	r2,16(sp)
   81df4:	003c7e06 	br	80ff0 <___vfprintf_internal_r+0xa38>
   81df8:	d9014f17 	ldw	r4,1340(sp)
   81dfc:	b00b883a 	mov	r5,r22
   81e00:	d9800c04 	addi	r6,sp,48
   81e04:	00805600 	call	80560 <__sprint_r>
   81e08:	103ba31e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81e0c:	dc800e17 	ldw	r18,56(sp)
   81e10:	dc400d17 	ldw	r17,52(sp)
   81e14:	d9000517 	ldw	r4,20(sp)
   81e18:	d9401904 	addi	r5,sp,100
   81e1c:	003da106 	br	814a4 <___vfprintf_internal_r+0xeec>
   81e20:	d9014f17 	ldw	r4,1340(sp)
   81e24:	b00b883a 	mov	r5,r22
   81e28:	d9800c04 	addi	r6,sp,48
   81e2c:	00805600 	call	80560 <__sprint_r>
   81e30:	103b991e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81e34:	dc800e17 	ldw	r18,56(sp)
   81e38:	dc400d17 	ldw	r17,52(sp)
   81e3c:	d9000517 	ldw	r4,20(sp)
   81e40:	d8c01904 	addi	r3,sp,100
   81e44:	003d8b06 	br	81474 <___vfprintf_internal_r+0xebc>
   81e48:	07000274 	movhi	fp,9
   81e4c:	e732aa84 	addi	fp,fp,-13654
   81e50:	9425883a 	add	r18,r18,r16
   81e54:	8c400044 	addi	r17,r17,1
   81e58:	008001c4 	movi	r2,7
   81e5c:	1f000015 	stw	fp,0(r3)
   81e60:	1c000115 	stw	r16,4(r3)
   81e64:	dc800e15 	stw	r18,56(sp)
   81e68:	dc400d15 	stw	r17,52(sp)
   81e6c:	147fbc16 	blt	r2,r17,81d60 <___vfprintf_internal_r+0x17a8>
   81e70:	18c00204 	addi	r3,r3,8
   81e74:	003fc206 	br	81d80 <___vfprintf_internal_r+0x17c8>
   81e78:	d9014f17 	ldw	r4,1340(sp)
   81e7c:	b00b883a 	mov	r5,r22
   81e80:	d9800c04 	addi	r6,sp,48
   81e84:	00805600 	call	80560 <__sprint_r>
   81e88:	103b831e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81e8c:	dc800e17 	ldw	r18,56(sp)
   81e90:	d9000517 	ldw	r4,20(sp)
   81e94:	d8c01904 	addi	r3,sp,100
   81e98:	003cfc06 	br	8128c <___vfprintf_internal_r+0xcd4>
   81e9c:	07000274 	movhi	fp,9
   81ea0:	e732aa84 	addi	fp,fp,-13654
   81ea4:	003bde06 	br	80e20 <___vfprintf_internal_r+0x868>
   81ea8:	00800274 	movhi	r2,9
   81eac:	10b29904 	addi	r2,r2,-13724
   81eb0:	d8814115 	stw	r2,1284(sp)
   81eb4:	003def06 	br	81674 <___vfprintf_internal_r+0x10bc>
   81eb8:	d9014217 	ldw	r4,1288(sp)
   81ebc:	d9414317 	ldw	r5,1292(sp)
   81ec0:	00870a80 	call	870a8 <__isnand>
   81ec4:	10003926 	beq	r2,zero,81fac <___vfprintf_internal_r+0x19f4>
   81ec8:	d9414d17 	ldw	r5,1332(sp)
   81ecc:	008011c4 	movi	r2,71
   81ed0:	1140ce16 	blt	r2,r5,8220c <___vfprintf_internal_r+0x1c54>
   81ed4:	01800274 	movhi	r6,9
   81ed8:	31b29a04 	addi	r6,r6,-13720
   81edc:	d9814115 	stw	r6,1284(sp)
   81ee0:	003de406 	br	81674 <___vfprintf_internal_r+0x10bc>
   81ee4:	d9014c17 	ldw	r4,1328(sp)
   81ee8:	bdc00044 	addi	r23,r23,1
   81eec:	b8c00007 	ldb	r3,0(r23)
   81ef0:	21000814 	ori	r4,r4,32
   81ef4:	d9014c15 	stw	r4,1328(sp)
   81ef8:	003a2e06 	br	807b4 <___vfprintf_internal_r+0x1fc>
   81efc:	dcc14515 	stw	r19,1300(sp)
   81f00:	98011016 	blt	r19,zero,82344 <___vfprintf_internal_r+0x1d8c>
   81f04:	980f883a 	mov	r7,r19
   81f08:	d8014615 	stw	zero,1304(sp)
   81f0c:	003c4c06 	br	81040 <___vfprintf_internal_r+0xa88>
   81f10:	d9014f17 	ldw	r4,1340(sp)
   81f14:	b00b883a 	mov	r5,r22
   81f18:	d9800c04 	addi	r6,sp,48
   81f1c:	00805600 	call	80560 <__sprint_r>
   81f20:	103b5d1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81f24:	dc800e17 	ldw	r18,56(sp)
   81f28:	d9000517 	ldw	r4,20(sp)
   81f2c:	d8c01904 	addi	r3,sp,100
   81f30:	003f2e06 	br	81bec <___vfprintf_internal_r+0x1634>
   81f34:	d8c14c17 	ldw	r3,1328(sp)
   81f38:	1880100c 	andi	r2,r3,64
   81f3c:	1000a026 	beq	r2,zero,821c0 <___vfprintf_internal_r+0x1c08>
   81f40:	38800017 	ldw	r2,0(r7)
   81f44:	39c00104 	addi	r7,r7,4
   81f48:	d9c14015 	stw	r7,1280(sp)
   81f4c:	d9014b17 	ldw	r4,1324(sp)
   81f50:	d9c14017 	ldw	r7,1280(sp)
   81f54:	1100000d 	sth	r4,0(r2)
   81f58:	0039f306 	br	80728 <___vfprintf_internal_r+0x170>
   81f5c:	d9014f17 	ldw	r4,1340(sp)
   81f60:	b00b883a 	mov	r5,r22
   81f64:	d9800c04 	addi	r6,sp,48
   81f68:	00805600 	call	80560 <__sprint_r>
   81f6c:	103b4a1e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   81f70:	dc800e17 	ldw	r18,56(sp)
   81f74:	dc400d17 	ldw	r17,52(sp)
   81f78:	d9000517 	ldw	r4,20(sp)
   81f7c:	d8c01904 	addi	r3,sp,100
   81f80:	003f2d06 	br	81c38 <___vfprintf_internal_r+0x1680>
   81f84:	00800184 	movi	r2,6
   81f88:	14c09a36 	bltu	r2,r19,821f4 <___vfprintf_internal_r+0x1c3c>
   81f8c:	dcc14515 	stw	r19,1300(sp)
   81f90:	9800010e 	bge	r19,zero,81f98 <___vfprintf_internal_r+0x19e0>
   81f94:	d8014515 	stw	zero,1300(sp)
   81f98:	00800274 	movhi	r2,9
   81f9c:	10b29c04 	addi	r2,r2,-13712
   81fa0:	980f883a 	mov	r7,r19
   81fa4:	d8814115 	stw	r2,1284(sp)
   81fa8:	003a7206 	br	80974 <___vfprintf_internal_r+0x3bc>
   81fac:	00bfffc4 	movi	r2,-1
   81fb0:	9880e226 	beq	r19,r2,8233c <___vfprintf_internal_r+0x1d84>
   81fb4:	d9414d17 	ldw	r5,1332(sp)
   81fb8:	008019c4 	movi	r2,103
   81fbc:	2880dc26 	beq	r5,r2,82330 <___vfprintf_internal_r+0x1d78>
   81fc0:	008011c4 	movi	r2,71
   81fc4:	2880da26 	beq	r5,r2,82330 <___vfprintf_internal_r+0x1d78>
   81fc8:	d9414c17 	ldw	r5,1328(sp)
   81fcc:	d9014317 	ldw	r4,1292(sp)
   81fd0:	d9814217 	ldw	r6,1288(sp)
   81fd4:	29404014 	ori	r5,r5,256
   81fd8:	d9414c15 	stw	r5,1328(sp)
   81fdc:	2000cc16 	blt	r4,zero,82310 <___vfprintf_internal_r+0x1d58>
   81fe0:	3021883a 	mov	r16,r6
   81fe4:	2023883a 	mov	r17,r4
   81fe8:	0039883a 	mov	fp,zero
   81fec:	d9414d17 	ldw	r5,1332(sp)
   81ff0:	00801984 	movi	r2,102
   81ff4:	2880b726 	beq	r5,r2,822d4 <___vfprintf_internal_r+0x1d1c>
   81ff8:	00801184 	movi	r2,70
   81ffc:	2880b526 	beq	r5,r2,822d4 <___vfprintf_internal_r+0x1d1c>
   82000:	00801944 	movi	r2,101
   82004:	2880c826 	beq	r5,r2,82328 <___vfprintf_internal_r+0x1d70>
   82008:	00801144 	movi	r2,69
   8200c:	2880c626 	beq	r5,r2,82328 <___vfprintf_internal_r+0x1d70>
   82010:	9829883a 	mov	r20,r19
   82014:	d9014f17 	ldw	r4,1340(sp)
   82018:	d8800504 	addi	r2,sp,20
   8201c:	880d883a 	mov	r6,r17
   82020:	d8800115 	stw	r2,4(sp)
   82024:	d8c00604 	addi	r3,sp,24
   82028:	d8800704 	addi	r2,sp,28
   8202c:	800b883a 	mov	r5,r16
   82030:	01c00084 	movi	r7,2
   82034:	d8c00215 	stw	r3,8(sp)
   82038:	d8800315 	stw	r2,12(sp)
   8203c:	dd000015 	stw	r20,0(sp)
   82040:	00828200 	call	82820 <_dtoa_r>
   82044:	d9814d17 	ldw	r6,1332(sp)
   82048:	d8814115 	stw	r2,1284(sp)
   8204c:	008019c4 	movi	r2,103
   82050:	30809526 	beq	r6,r2,822a8 <___vfprintf_internal_r+0x1cf0>
   82054:	d8c14d17 	ldw	r3,1332(sp)
   82058:	008011c4 	movi	r2,71
   8205c:	18809226 	beq	r3,r2,822a8 <___vfprintf_internal_r+0x1cf0>
   82060:	d9414117 	ldw	r5,1284(sp)
   82064:	d9814d17 	ldw	r6,1332(sp)
   82068:	00801984 	movi	r2,102
   8206c:	2d25883a 	add	r18,r5,r20
   82070:	30808626 	beq	r6,r2,8228c <___vfprintf_internal_r+0x1cd4>
   82074:	00801184 	movi	r2,70
   82078:	30808426 	beq	r6,r2,8228c <___vfprintf_internal_r+0x1cd4>
   8207c:	000d883a 	mov	r6,zero
   82080:	000f883a 	mov	r7,zero
   82084:	880b883a 	mov	r5,r17
   82088:	8009883a 	mov	r4,r16
   8208c:	00890580 	call	89058 <__eqdf2>
   82090:	1000751e 	bne	r2,zero,82268 <___vfprintf_internal_r+0x1cb0>
   82094:	9005883a 	mov	r2,r18
   82098:	dc800715 	stw	r18,28(sp)
   8209c:	d9014117 	ldw	r4,1284(sp)
   820a0:	d9414d17 	ldw	r5,1332(sp)
   820a4:	00c019c4 	movi	r3,103
   820a8:	1125c83a 	sub	r18,r2,r4
   820ac:	28c06826 	beq	r5,r3,82250 <___vfprintf_internal_r+0x1c98>
   820b0:	008011c4 	movi	r2,71
   820b4:	28806626 	beq	r5,r2,82250 <___vfprintf_internal_r+0x1c98>
   820b8:	d9000517 	ldw	r4,20(sp)
   820bc:	d8c14d17 	ldw	r3,1332(sp)
   820c0:	00801944 	movi	r2,101
   820c4:	10c05516 	blt	r2,r3,8221c <___vfprintf_internal_r+0x1c64>
   820c8:	213fffc4 	addi	r4,r4,-1
   820cc:	d9000515 	stw	r4,20(sp)
   820d0:	d8c00805 	stb	r3,32(sp)
   820d4:	2021883a 	mov	r16,r4
   820d8:	2000c116 	blt	r4,zero,823e0 <___vfprintf_internal_r+0x1e28>
   820dc:	00800ac4 	movi	r2,43
   820e0:	d8800845 	stb	r2,33(sp)
   820e4:	00800244 	movi	r2,9
   820e8:	1400af0e 	bge	r2,r16,823a8 <___vfprintf_internal_r+0x1df0>
   820ec:	1027883a 	mov	r19,r2
   820f0:	dc400b84 	addi	r17,sp,46
   820f4:	8009883a 	mov	r4,r16
   820f8:	01400284 	movi	r5,10
   820fc:	00897400 	call	89740 <__modsi3>
   82100:	10800c04 	addi	r2,r2,48
   82104:	8c7fffc4 	addi	r17,r17,-1
   82108:	8009883a 	mov	r4,r16
   8210c:	01400284 	movi	r5,10
   82110:	88800005 	stb	r2,0(r17)
   82114:	00896e00 	call	896e0 <__divsi3>
   82118:	1021883a 	mov	r16,r2
   8211c:	98bff516 	blt	r19,r2,820f4 <___vfprintf_internal_r+0x1b3c>
   82120:	10c00c04 	addi	r3,r2,48
   82124:	d88009c4 	addi	r2,sp,39
   82128:	108001c4 	addi	r2,r2,7
   8212c:	897fffc4 	addi	r5,r17,-1
   82130:	88ffffc5 	stb	r3,-1(r17)
   82134:	2880a72e 	bgeu	r5,r2,823d4 <___vfprintf_internal_r+0x1e1c>
   82138:	1009883a 	mov	r4,r2
   8213c:	d9800804 	addi	r6,sp,32
   82140:	d8c00884 	addi	r3,sp,34
   82144:	28800003 	ldbu	r2,0(r5)
   82148:	29400044 	addi	r5,r5,1
   8214c:	18800005 	stb	r2,0(r3)
   82150:	18c00044 	addi	r3,r3,1
   82154:	293ffb36 	bltu	r5,r4,82144 <___vfprintf_internal_r+0x1b8c>
   82158:	1987c83a 	sub	r3,r3,r6
   8215c:	00800044 	movi	r2,1
   82160:	d8c14815 	stw	r3,1312(sp)
   82164:	90cf883a 	add	r7,r18,r3
   82168:	1480960e 	bge	r2,r18,823c4 <___vfprintf_internal_r+0x1e0c>
   8216c:	39c00044 	addi	r7,r7,1
   82170:	d9c14515 	stw	r7,1300(sp)
   82174:	38003416 	blt	r7,zero,82248 <___vfprintf_internal_r+0x1c90>
   82178:	e0803fcc 	andi	r2,fp,255
   8217c:	1080201c 	xori	r2,r2,128
   82180:	10bfe004 	addi	r2,r2,-128
   82184:	10004e26 	beq	r2,zero,822c0 <___vfprintf_internal_r+0x1d08>
   82188:	00800b44 	movi	r2,45
   8218c:	dc814715 	stw	r18,1308(sp)
   82190:	d8014615 	stw	zero,1304(sp)
   82194:	d8800405 	stb	r2,16(sp)
   82198:	003bab06 	br	81048 <___vfprintf_internal_r+0xa90>
   8219c:	00800b44 	movi	r2,45
   821a0:	d8800405 	stb	r2,16(sp)
   821a4:	003d2d06 	br	8165c <___vfprintf_internal_r+0x10a4>
   821a8:	d9014f17 	ldw	r4,1340(sp)
   821ac:	b00b883a 	mov	r5,r22
   821b0:	d9800c04 	addi	r6,sp,48
   821b4:	00805600 	call	80560 <__sprint_r>
   821b8:	103ab71e 	bne	r2,zero,80c98 <___vfprintf_internal_r+0x6e0>
   821bc:	003ab506 	br	80c94 <___vfprintf_internal_r+0x6dc>
   821c0:	38800017 	ldw	r2,0(r7)
   821c4:	39c00104 	addi	r7,r7,4
   821c8:	d9c14015 	stw	r7,1280(sp)
   821cc:	d9414b17 	ldw	r5,1324(sp)
   821d0:	d9c14017 	ldw	r7,1280(sp)
   821d4:	11400015 	stw	r5,0(r2)
   821d8:	00395306 	br	80728 <___vfprintf_internal_r+0x170>
   821dc:	980f883a 	mov	r7,r19
   821e0:	dcc14515 	stw	r19,1300(sp)
   821e4:	d8014615 	stw	zero,1304(sp)
   821e8:	003b9506 	br	81040 <___vfprintf_internal_r+0xa88>
   821ec:	0027883a 	mov	r19,zero
   821f0:	00397206 	br	807bc <___vfprintf_internal_r+0x204>
   821f4:	00c00274 	movhi	r3,9
   821f8:	18f29c04 	addi	r3,r3,-13712
   821fc:	100f883a 	mov	r7,r2
   82200:	d8814515 	stw	r2,1300(sp)
   82204:	d8c14115 	stw	r3,1284(sp)
   82208:	0039da06 	br	80974 <___vfprintf_internal_r+0x3bc>
   8220c:	00800274 	movhi	r2,9
   82210:	10b29b04 	addi	r2,r2,-13716
   82214:	d8814115 	stw	r2,1284(sp)
   82218:	003d1606 	br	81674 <___vfprintf_internal_r+0x10bc>
   8221c:	d9414d17 	ldw	r5,1332(sp)
   82220:	00801984 	movi	r2,102
   82224:	28804926 	beq	r5,r2,8234c <___vfprintf_internal_r+0x1d94>
   82228:	200f883a 	mov	r7,r4
   8222c:	24805716 	blt	r4,r18,8238c <___vfprintf_internal_r+0x1dd4>
   82230:	d9414c17 	ldw	r5,1328(sp)
   82234:	2880004c 	andi	r2,r5,1
   82238:	10000126 	beq	r2,zero,82240 <___vfprintf_internal_r+0x1c88>
   8223c:	21c00044 	addi	r7,r4,1
   82240:	d9c14515 	stw	r7,1300(sp)
   82244:	383fcc0e 	bge	r7,zero,82178 <___vfprintf_internal_r+0x1bc0>
   82248:	d8014515 	stw	zero,1300(sp)
   8224c:	003fca06 	br	82178 <___vfprintf_internal_r+0x1bc0>
   82250:	d9000517 	ldw	r4,20(sp)
   82254:	00bfff04 	movi	r2,-4
   82258:	1100480e 	bge	r2,r4,8237c <___vfprintf_internal_r+0x1dc4>
   8225c:	99004716 	blt	r19,r4,8237c <___vfprintf_internal_r+0x1dc4>
   82260:	d8c14d15 	stw	r3,1332(sp)
   82264:	003ff006 	br	82228 <___vfprintf_internal_r+0x1c70>
   82268:	d8800717 	ldw	r2,28(sp)
   8226c:	14bf8b2e 	bgeu	r2,r18,8209c <___vfprintf_internal_r+0x1ae4>
   82270:	9007883a 	mov	r3,r18
   82274:	01000c04 	movi	r4,48
   82278:	11000005 	stb	r4,0(r2)
   8227c:	10800044 	addi	r2,r2,1
   82280:	d8800715 	stw	r2,28(sp)
   82284:	18bffc1e 	bne	r3,r2,82278 <___vfprintf_internal_r+0x1cc0>
   82288:	003f8406 	br	8209c <___vfprintf_internal_r+0x1ae4>
   8228c:	d8814117 	ldw	r2,1284(sp)
   82290:	10c00007 	ldb	r3,0(r2)
   82294:	00800c04 	movi	r2,48
   82298:	18805b26 	beq	r3,r2,82408 <___vfprintf_internal_r+0x1e50>
   8229c:	d9000517 	ldw	r4,20(sp)
   822a0:	9125883a 	add	r18,r18,r4
   822a4:	003f7506 	br	8207c <___vfprintf_internal_r+0x1ac4>
   822a8:	d9014c17 	ldw	r4,1328(sp)
   822ac:	2080004c 	andi	r2,r4,1
   822b0:	1005003a 	cmpeq	r2,r2,zero
   822b4:	103f6a26 	beq	r2,zero,82060 <___vfprintf_internal_r+0x1aa8>
   822b8:	d8800717 	ldw	r2,28(sp)
   822bc:	003f7706 	br	8209c <___vfprintf_internal_r+0x1ae4>
   822c0:	d9c14515 	stw	r7,1300(sp)
   822c4:	38004d16 	blt	r7,zero,823fc <___vfprintf_internal_r+0x1e44>
   822c8:	dc814715 	stw	r18,1308(sp)
   822cc:	d8014615 	stw	zero,1304(sp)
   822d0:	003b5b06 	br	81040 <___vfprintf_internal_r+0xa88>
   822d4:	d9014f17 	ldw	r4,1340(sp)
   822d8:	d8800504 	addi	r2,sp,20
   822dc:	d8800115 	stw	r2,4(sp)
   822e0:	d8c00604 	addi	r3,sp,24
   822e4:	d8800704 	addi	r2,sp,28
   822e8:	800b883a 	mov	r5,r16
   822ec:	880d883a 	mov	r6,r17
   822f0:	01c000c4 	movi	r7,3
   822f4:	d8c00215 	stw	r3,8(sp)
   822f8:	d8800315 	stw	r2,12(sp)
   822fc:	dcc00015 	stw	r19,0(sp)
   82300:	9829883a 	mov	r20,r19
   82304:	00828200 	call	82820 <_dtoa_r>
   82308:	d8814115 	stw	r2,1284(sp)
   8230c:	003f5106 	br	82054 <___vfprintf_internal_r+0x1a9c>
   82310:	d8c14217 	ldw	r3,1288(sp)
   82314:	d9014317 	ldw	r4,1292(sp)
   82318:	07000b44 	movi	fp,45
   8231c:	1821883a 	mov	r16,r3
   82320:	2460003c 	xorhi	r17,r4,32768
   82324:	003f3106 	br	81fec <___vfprintf_internal_r+0x1a34>
   82328:	9d000044 	addi	r20,r19,1
   8232c:	003f3906 	br	82014 <___vfprintf_internal_r+0x1a5c>
   82330:	983f251e 	bne	r19,zero,81fc8 <___vfprintf_internal_r+0x1a10>
   82334:	04c00044 	movi	r19,1
   82338:	003f2306 	br	81fc8 <___vfprintf_internal_r+0x1a10>
   8233c:	04c00184 	movi	r19,6
   82340:	003f2106 	br	81fc8 <___vfprintf_internal_r+0x1a10>
   82344:	d8014515 	stw	zero,1300(sp)
   82348:	003eee06 	br	81f04 <___vfprintf_internal_r+0x194c>
   8234c:	200f883a 	mov	r7,r4
   82350:	0100370e 	bge	zero,r4,82430 <___vfprintf_internal_r+0x1e78>
   82354:	9800031e 	bne	r19,zero,82364 <___vfprintf_internal_r+0x1dac>
   82358:	d9814c17 	ldw	r6,1328(sp)
   8235c:	3080004c 	andi	r2,r6,1
   82360:	103fb726 	beq	r2,zero,82240 <___vfprintf_internal_r+0x1c88>
   82364:	20800044 	addi	r2,r4,1
   82368:	98a7883a 	add	r19,r19,r2
   8236c:	dcc14515 	stw	r19,1300(sp)
   82370:	980f883a 	mov	r7,r19
   82374:	983f800e 	bge	r19,zero,82178 <___vfprintf_internal_r+0x1bc0>
   82378:	003fb306 	br	82248 <___vfprintf_internal_r+0x1c90>
   8237c:	d9814d17 	ldw	r6,1332(sp)
   82380:	31bfff84 	addi	r6,r6,-2
   82384:	d9814d15 	stw	r6,1332(sp)
   82388:	003f4c06 	br	820bc <___vfprintf_internal_r+0x1b04>
   8238c:	0100180e 	bge	zero,r4,823f0 <___vfprintf_internal_r+0x1e38>
   82390:	00800044 	movi	r2,1
   82394:	1485883a 	add	r2,r2,r18
   82398:	d8814515 	stw	r2,1300(sp)
   8239c:	100f883a 	mov	r7,r2
   823a0:	103f750e 	bge	r2,zero,82178 <___vfprintf_internal_r+0x1bc0>
   823a4:	003fa806 	br	82248 <___vfprintf_internal_r+0x1c90>
   823a8:	80c00c04 	addi	r3,r16,48
   823ac:	00800c04 	movi	r2,48
   823b0:	d8c008c5 	stb	r3,35(sp)
   823b4:	d9800804 	addi	r6,sp,32
   823b8:	d8c00904 	addi	r3,sp,36
   823bc:	d8800885 	stb	r2,34(sp)
   823c0:	003f6506 	br	82158 <___vfprintf_internal_r+0x1ba0>
   823c4:	d9014c17 	ldw	r4,1328(sp)
   823c8:	2084703a 	and	r2,r4,r2
   823cc:	103f9c26 	beq	r2,zero,82240 <___vfprintf_internal_r+0x1c88>
   823d0:	003f6606 	br	8216c <___vfprintf_internal_r+0x1bb4>
   823d4:	d9800804 	addi	r6,sp,32
   823d8:	d8c00884 	addi	r3,sp,34
   823dc:	003f5e06 	br	82158 <___vfprintf_internal_r+0x1ba0>
   823e0:	00800b44 	movi	r2,45
   823e4:	0121c83a 	sub	r16,zero,r4
   823e8:	d8800845 	stb	r2,33(sp)
   823ec:	003f3d06 	br	820e4 <___vfprintf_internal_r+0x1b2c>
   823f0:	00800084 	movi	r2,2
   823f4:	1105c83a 	sub	r2,r2,r4
   823f8:	003fe606 	br	82394 <___vfprintf_internal_r+0x1ddc>
   823fc:	d8014515 	stw	zero,1300(sp)
   82400:	dc814715 	stw	r18,1308(sp)
   82404:	003fb106 	br	822cc <___vfprintf_internal_r+0x1d14>
   82408:	000d883a 	mov	r6,zero
   8240c:	000f883a 	mov	r7,zero
   82410:	8009883a 	mov	r4,r16
   82414:	880b883a 	mov	r5,r17
   82418:	00890e00 	call	890e0 <__nedf2>
   8241c:	103f9f26 	beq	r2,zero,8229c <___vfprintf_internal_r+0x1ce4>
   82420:	00800044 	movi	r2,1
   82424:	1509c83a 	sub	r4,r2,r20
   82428:	d9000515 	stw	r4,20(sp)
   8242c:	003f9b06 	br	8229c <___vfprintf_internal_r+0x1ce4>
   82430:	98000d1e 	bne	r19,zero,82468 <___vfprintf_internal_r+0x1eb0>
   82434:	d8c14c17 	ldw	r3,1328(sp)
   82438:	1880004c 	andi	r2,r3,1
   8243c:	10000a1e 	bne	r2,zero,82468 <___vfprintf_internal_r+0x1eb0>
   82440:	01000044 	movi	r4,1
   82444:	200f883a 	mov	r7,r4
   82448:	d9014515 	stw	r4,1300(sp)
   8244c:	003f4a06 	br	82178 <___vfprintf_internal_r+0x1bc0>
   82450:	3cc00017 	ldw	r19,0(r7)
   82454:	39c00104 	addi	r7,r7,4
   82458:	983d0e0e 	bge	r19,zero,81894 <___vfprintf_internal_r+0x12dc>
   8245c:	b8c00007 	ldb	r3,0(r23)
   82460:	04ffffc4 	movi	r19,-1
   82464:	0038d306 	br	807b4 <___vfprintf_internal_r+0x1fc>
   82468:	9cc00084 	addi	r19,r19,2
   8246c:	dcc14515 	stw	r19,1300(sp)
   82470:	980f883a 	mov	r7,r19
   82474:	983f400e 	bge	r19,zero,82178 <___vfprintf_internal_r+0x1bc0>
   82478:	003f7306 	br	82248 <___vfprintf_internal_r+0x1c90>

0008247c <__vfprintf_internal>:
   8247c:	00800274 	movhi	r2,9
   82480:	10b9ea04 	addi	r2,r2,-6232
   82484:	2013883a 	mov	r9,r4
   82488:	11000017 	ldw	r4,0(r2)
   8248c:	2805883a 	mov	r2,r5
   82490:	300f883a 	mov	r7,r6
   82494:	480b883a 	mov	r5,r9
   82498:	100d883a 	mov	r6,r2
   8249c:	00805b81 	jmpi	805b8 <___vfprintf_internal_r>

000824a0 <__swsetup_r>:
   824a0:	00800274 	movhi	r2,9
   824a4:	10b9ea04 	addi	r2,r2,-6232
   824a8:	10c00017 	ldw	r3,0(r2)
   824ac:	defffd04 	addi	sp,sp,-12
   824b0:	dc400115 	stw	r17,4(sp)
   824b4:	dc000015 	stw	r16,0(sp)
   824b8:	dfc00215 	stw	ra,8(sp)
   824bc:	2023883a 	mov	r17,r4
   824c0:	2821883a 	mov	r16,r5
   824c4:	18000226 	beq	r3,zero,824d0 <__swsetup_r+0x30>
   824c8:	18800e17 	ldw	r2,56(r3)
   824cc:	10001f26 	beq	r2,zero,8254c <__swsetup_r+0xac>
   824d0:	8100030b 	ldhu	r4,12(r16)
   824d4:	2080020c 	andi	r2,r4,8
   824d8:	10002826 	beq	r2,zero,8257c <__swsetup_r+0xdc>
   824dc:	81400417 	ldw	r5,16(r16)
   824e0:	28001d26 	beq	r5,zero,82558 <__swsetup_r+0xb8>
   824e4:	2080004c 	andi	r2,r4,1
   824e8:	1005003a 	cmpeq	r2,r2,zero
   824ec:	10000b26 	beq	r2,zero,8251c <__swsetup_r+0x7c>
   824f0:	2080008c 	andi	r2,r4,2
   824f4:	10001226 	beq	r2,zero,82540 <__swsetup_r+0xa0>
   824f8:	0005883a 	mov	r2,zero
   824fc:	80800215 	stw	r2,8(r16)
   82500:	28000b26 	beq	r5,zero,82530 <__swsetup_r+0x90>
   82504:	0005883a 	mov	r2,zero
   82508:	dfc00217 	ldw	ra,8(sp)
   8250c:	dc400117 	ldw	r17,4(sp)
   82510:	dc000017 	ldw	r16,0(sp)
   82514:	dec00304 	addi	sp,sp,12
   82518:	f800283a 	ret
   8251c:	80800517 	ldw	r2,20(r16)
   82520:	80000215 	stw	zero,8(r16)
   82524:	0085c83a 	sub	r2,zero,r2
   82528:	80800615 	stw	r2,24(r16)
   8252c:	283ff51e 	bne	r5,zero,82504 <__swsetup_r+0x64>
   82530:	2080200c 	andi	r2,r4,128
   82534:	103ff326 	beq	r2,zero,82504 <__swsetup_r+0x64>
   82538:	00bfffc4 	movi	r2,-1
   8253c:	003ff206 	br	82508 <__swsetup_r+0x68>
   82540:	80800517 	ldw	r2,20(r16)
   82544:	80800215 	stw	r2,8(r16)
   82548:	003fed06 	br	82500 <__swsetup_r+0x60>
   8254c:	1809883a 	mov	r4,r3
   82550:	008406c0 	call	8406c <__sinit>
   82554:	003fde06 	br	824d0 <__swsetup_r+0x30>
   82558:	20c0a00c 	andi	r3,r4,640
   8255c:	00808004 	movi	r2,512
   82560:	18bfe026 	beq	r3,r2,824e4 <__swsetup_r+0x44>
   82564:	8809883a 	mov	r4,r17
   82568:	800b883a 	mov	r5,r16
   8256c:	0084e180 	call	84e18 <__smakebuf_r>
   82570:	8100030b 	ldhu	r4,12(r16)
   82574:	81400417 	ldw	r5,16(r16)
   82578:	003fda06 	br	824e4 <__swsetup_r+0x44>
   8257c:	2080040c 	andi	r2,r4,16
   82580:	103fed26 	beq	r2,zero,82538 <__swsetup_r+0x98>
   82584:	2080010c 	andi	r2,r4,4
   82588:	10001226 	beq	r2,zero,825d4 <__swsetup_r+0x134>
   8258c:	81400c17 	ldw	r5,48(r16)
   82590:	28000526 	beq	r5,zero,825a8 <__swsetup_r+0x108>
   82594:	80801004 	addi	r2,r16,64
   82598:	28800226 	beq	r5,r2,825a4 <__swsetup_r+0x104>
   8259c:	8809883a 	mov	r4,r17
   825a0:	00844240 	call	84424 <_free_r>
   825a4:	80000c15 	stw	zero,48(r16)
   825a8:	8080030b 	ldhu	r2,12(r16)
   825ac:	81400417 	ldw	r5,16(r16)
   825b0:	80000115 	stw	zero,4(r16)
   825b4:	10bff6cc 	andi	r2,r2,65499
   825b8:	8080030d 	sth	r2,12(r16)
   825bc:	81400015 	stw	r5,0(r16)
   825c0:	8080030b 	ldhu	r2,12(r16)
   825c4:	10800214 	ori	r2,r2,8
   825c8:	113fffcc 	andi	r4,r2,65535
   825cc:	8080030d 	sth	r2,12(r16)
   825d0:	003fc306 	br	824e0 <__swsetup_r+0x40>
   825d4:	81400417 	ldw	r5,16(r16)
   825d8:	003ff906 	br	825c0 <__swsetup_r+0x120>

000825dc <quorem>:
   825dc:	28c00417 	ldw	r3,16(r5)
   825e0:	20800417 	ldw	r2,16(r4)
   825e4:	defff104 	addi	sp,sp,-60
   825e8:	dfc00e15 	stw	ra,56(sp)
   825ec:	df000d15 	stw	fp,52(sp)
   825f0:	ddc00c15 	stw	r23,48(sp)
   825f4:	dd800b15 	stw	r22,44(sp)
   825f8:	dd400a15 	stw	r21,40(sp)
   825fc:	dd000915 	stw	r20,36(sp)
   82600:	dcc00815 	stw	r19,32(sp)
   82604:	dc800715 	stw	r18,28(sp)
   82608:	dc400615 	stw	r17,24(sp)
   8260c:	dc000515 	stw	r16,20(sp)
   82610:	d9000315 	stw	r4,12(sp)
   82614:	d9400415 	stw	r5,16(sp)
   82618:	10c07f16 	blt	r2,r3,82818 <quorem+0x23c>
   8261c:	1d3fffc4 	addi	r20,r3,-1
   82620:	d8c00417 	ldw	r3,16(sp)
   82624:	d9000317 	ldw	r4,12(sp)
   82628:	a505883a 	add	r2,r20,r20
   8262c:	1085883a 	add	r2,r2,r2
   82630:	1cc00504 	addi	r19,r3,20
   82634:	25c00504 	addi	r23,r4,20
   82638:	98ad883a 	add	r22,r19,r2
   8263c:	15c7883a 	add	r3,r2,r23
   82640:	b1400017 	ldw	r5,0(r22)
   82644:	19000017 	ldw	r4,0(r3)
   82648:	d8c00015 	stw	r3,0(sp)
   8264c:	29400044 	addi	r5,r5,1
   82650:	d9000215 	stw	r4,8(sp)
   82654:	00897a00 	call	897a0 <__udivsi3>
   82658:	1039883a 	mov	fp,r2
   8265c:	10003d1e 	bne	r2,zero,82754 <quorem+0x178>
   82660:	d9400417 	ldw	r5,16(sp)
   82664:	d9000317 	ldw	r4,12(sp)
   82668:	0085b440 	call	85b44 <__mcmp>
   8266c:	10002c16 	blt	r2,zero,82720 <quorem+0x144>
   82670:	e7000044 	addi	fp,fp,1
   82674:	b80f883a 	mov	r7,r23
   82678:	0011883a 	mov	r8,zero
   8267c:	0009883a 	mov	r4,zero
   82680:	99400017 	ldw	r5,0(r19)
   82684:	38c00017 	ldw	r3,0(r7)
   82688:	9cc00104 	addi	r19,r19,4
   8268c:	28bfffcc 	andi	r2,r5,65535
   82690:	2085883a 	add	r2,r4,r2
   82694:	11bfffcc 	andi	r6,r2,65535
   82698:	193fffcc 	andi	r4,r3,65535
   8269c:	1004d43a 	srli	r2,r2,16
   826a0:	280ad43a 	srli	r5,r5,16
   826a4:	2189c83a 	sub	r4,r4,r6
   826a8:	2209883a 	add	r4,r4,r8
   826ac:	1806d43a 	srli	r3,r3,16
   826b0:	288b883a 	add	r5,r5,r2
   826b4:	200dd43a 	srai	r6,r4,16
   826b8:	28bfffcc 	andi	r2,r5,65535
   826bc:	1887c83a 	sub	r3,r3,r2
   826c0:	1987883a 	add	r3,r3,r6
   826c4:	3900000d 	sth	r4,0(r7)
   826c8:	38c0008d 	sth	r3,2(r7)
   826cc:	2808d43a 	srli	r4,r5,16
   826d0:	39c00104 	addi	r7,r7,4
   826d4:	1811d43a 	srai	r8,r3,16
   826d8:	b4ffe92e 	bgeu	r22,r19,82680 <quorem+0xa4>
   826dc:	a505883a 	add	r2,r20,r20
   826e0:	1085883a 	add	r2,r2,r2
   826e4:	b885883a 	add	r2,r23,r2
   826e8:	10c00017 	ldw	r3,0(r2)
   826ec:	18000c1e 	bne	r3,zero,82720 <quorem+0x144>
   826f0:	113fff04 	addi	r4,r2,-4
   826f4:	b900082e 	bgeu	r23,r4,82718 <quorem+0x13c>
   826f8:	10bfff17 	ldw	r2,-4(r2)
   826fc:	10000326 	beq	r2,zero,8270c <quorem+0x130>
   82700:	00000506 	br	82718 <quorem+0x13c>
   82704:	20800017 	ldw	r2,0(r4)
   82708:	1000031e 	bne	r2,zero,82718 <quorem+0x13c>
   8270c:	213fff04 	addi	r4,r4,-4
   82710:	a53fffc4 	addi	r20,r20,-1
   82714:	b93ffb36 	bltu	r23,r4,82704 <quorem+0x128>
   82718:	d9000317 	ldw	r4,12(sp)
   8271c:	25000415 	stw	r20,16(r4)
   82720:	e005883a 	mov	r2,fp
   82724:	dfc00e17 	ldw	ra,56(sp)
   82728:	df000d17 	ldw	fp,52(sp)
   8272c:	ddc00c17 	ldw	r23,48(sp)
   82730:	dd800b17 	ldw	r22,44(sp)
   82734:	dd400a17 	ldw	r21,40(sp)
   82738:	dd000917 	ldw	r20,36(sp)
   8273c:	dcc00817 	ldw	r19,32(sp)
   82740:	dc800717 	ldw	r18,28(sp)
   82744:	dc400617 	ldw	r17,24(sp)
   82748:	dc000517 	ldw	r16,20(sp)
   8274c:	dec00f04 	addi	sp,sp,60
   82750:	f800283a 	ret
   82754:	b823883a 	mov	r17,r23
   82758:	9825883a 	mov	r18,r19
   8275c:	d8000115 	stw	zero,4(sp)
   82760:	002b883a 	mov	r21,zero
   82764:	94000017 	ldw	r16,0(r18)
   82768:	e009883a 	mov	r4,fp
   8276c:	94800104 	addi	r18,r18,4
   82770:	817fffcc 	andi	r5,r16,65535
   82774:	00897b00 	call	897b0 <__mulsi3>
   82778:	800ad43a 	srli	r5,r16,16
   8277c:	e009883a 	mov	r4,fp
   82780:	a8a1883a 	add	r16,r21,r2
   82784:	00897b00 	call	897b0 <__mulsi3>
   82788:	89000017 	ldw	r4,0(r17)
   8278c:	80ffffcc 	andi	r3,r16,65535
   82790:	8020d43a 	srli	r16,r16,16
   82794:	217fffcc 	andi	r5,r4,65535
   82798:	28cbc83a 	sub	r5,r5,r3
   8279c:	d8c00117 	ldw	r3,4(sp)
   827a0:	2008d43a 	srli	r4,r4,16
   827a4:	1405883a 	add	r2,r2,r16
   827a8:	28cb883a 	add	r5,r5,r3
   827ac:	280dd43a 	srai	r6,r5,16
   827b0:	10ffffcc 	andi	r3,r2,65535
   827b4:	20c9c83a 	sub	r4,r4,r3
   827b8:	2189883a 	add	r4,r4,r6
   827bc:	8900008d 	sth	r4,2(r17)
   827c0:	2009d43a 	srai	r4,r4,16
   827c4:	8940000d 	sth	r5,0(r17)
   827c8:	102ad43a 	srli	r21,r2,16
   827cc:	8c400104 	addi	r17,r17,4
   827d0:	d9000115 	stw	r4,4(sp)
   827d4:	b4bfe32e 	bgeu	r22,r18,82764 <quorem+0x188>
   827d8:	d9000217 	ldw	r4,8(sp)
   827dc:	203fa01e 	bne	r4,zero,82660 <quorem+0x84>
   827e0:	d8800017 	ldw	r2,0(sp)
   827e4:	10ffff04 	addi	r3,r2,-4
   827e8:	b8c0082e 	bgeu	r23,r3,8280c <quorem+0x230>
   827ec:	10bfff17 	ldw	r2,-4(r2)
   827f0:	10000326 	beq	r2,zero,82800 <quorem+0x224>
   827f4:	00000506 	br	8280c <quorem+0x230>
   827f8:	18800017 	ldw	r2,0(r3)
   827fc:	1000031e 	bne	r2,zero,8280c <quorem+0x230>
   82800:	18ffff04 	addi	r3,r3,-4
   82804:	a53fffc4 	addi	r20,r20,-1
   82808:	b8fffb36 	bltu	r23,r3,827f8 <quorem+0x21c>
   8280c:	d8c00317 	ldw	r3,12(sp)
   82810:	1d000415 	stw	r20,16(r3)
   82814:	003f9206 	br	82660 <quorem+0x84>
   82818:	0005883a 	mov	r2,zero
   8281c:	003fc106 	br	82724 <quorem+0x148>

00082820 <_dtoa_r>:
   82820:	22001017 	ldw	r8,64(r4)
   82824:	deffda04 	addi	sp,sp,-152
   82828:	dd402115 	stw	r21,132(sp)
   8282c:	dd002015 	stw	r20,128(sp)
   82830:	dc801e15 	stw	r18,120(sp)
   82834:	dc401d15 	stw	r17,116(sp)
   82838:	dfc02515 	stw	ra,148(sp)
   8283c:	df002415 	stw	fp,144(sp)
   82840:	ddc02315 	stw	r23,140(sp)
   82844:	dd802215 	stw	r22,136(sp)
   82848:	dcc01f15 	stw	r19,124(sp)
   8284c:	dc001c15 	stw	r16,112(sp)
   82850:	d9001615 	stw	r4,88(sp)
   82854:	3023883a 	mov	r17,r6
   82858:	2829883a 	mov	r20,r5
   8285c:	d9c01715 	stw	r7,92(sp)
   82860:	dc802817 	ldw	r18,160(sp)
   82864:	302b883a 	mov	r21,r6
   82868:	40000a26 	beq	r8,zero,82894 <_dtoa_r+0x74>
   8286c:	20801117 	ldw	r2,68(r4)
   82870:	400b883a 	mov	r5,r8
   82874:	40800115 	stw	r2,4(r8)
   82878:	20c01117 	ldw	r3,68(r4)
   8287c:	00800044 	movi	r2,1
   82880:	10c4983a 	sll	r2,r2,r3
   82884:	40800215 	stw	r2,8(r8)
   82888:	00859e80 	call	859e8 <_Bfree>
   8288c:	d8c01617 	ldw	r3,88(sp)
   82890:	18001015 	stw	zero,64(r3)
   82894:	8800a316 	blt	r17,zero,82b24 <_dtoa_r+0x304>
   82898:	90000015 	stw	zero,0(r18)
   8289c:	a8dffc2c 	andhi	r3,r21,32752
   828a0:	009ffc34 	movhi	r2,32752
   828a4:	18809126 	beq	r3,r2,82aec <_dtoa_r+0x2cc>
   828a8:	000d883a 	mov	r6,zero
   828ac:	000f883a 	mov	r7,zero
   828b0:	a009883a 	mov	r4,r20
   828b4:	a80b883a 	mov	r5,r21
   828b8:	dd001215 	stw	r20,72(sp)
   828bc:	dd401315 	stw	r21,76(sp)
   828c0:	00890e00 	call	890e0 <__nedf2>
   828c4:	1000171e 	bne	r2,zero,82924 <_dtoa_r+0x104>
   828c8:	d9802717 	ldw	r6,156(sp)
   828cc:	00800044 	movi	r2,1
   828d0:	30800015 	stw	r2,0(r6)
   828d4:	d8802917 	ldw	r2,164(sp)
   828d8:	10029b26 	beq	r2,zero,83348 <_dtoa_r+0xb28>
   828dc:	d9002917 	ldw	r4,164(sp)
   828e0:	00800274 	movhi	r2,9
   828e4:	10b2aa44 	addi	r2,r2,-13655
   828e8:	10ffffc4 	addi	r3,r2,-1
   828ec:	20800015 	stw	r2,0(r4)
   828f0:	1805883a 	mov	r2,r3
   828f4:	dfc02517 	ldw	ra,148(sp)
   828f8:	df002417 	ldw	fp,144(sp)
   828fc:	ddc02317 	ldw	r23,140(sp)
   82900:	dd802217 	ldw	r22,136(sp)
   82904:	dd402117 	ldw	r21,132(sp)
   82908:	dd002017 	ldw	r20,128(sp)
   8290c:	dcc01f17 	ldw	r19,124(sp)
   82910:	dc801e17 	ldw	r18,120(sp)
   82914:	dc401d17 	ldw	r17,116(sp)
   82918:	dc001c17 	ldw	r16,112(sp)
   8291c:	dec02604 	addi	sp,sp,152
   82920:	f800283a 	ret
   82924:	d9001617 	ldw	r4,88(sp)
   82928:	d9401217 	ldw	r5,72(sp)
   8292c:	d8800104 	addi	r2,sp,4
   82930:	a80d883a 	mov	r6,r21
   82934:	d9c00204 	addi	r7,sp,8
   82938:	d8800015 	stw	r2,0(sp)
   8293c:	00860240 	call	86024 <__d2b>
   82940:	d8800715 	stw	r2,28(sp)
   82944:	a804d53a 	srli	r2,r21,20
   82948:	1101ffcc 	andi	r4,r2,2047
   8294c:	20008626 	beq	r4,zero,82b68 <_dtoa_r+0x348>
   82950:	d8c01217 	ldw	r3,72(sp)
   82954:	00800434 	movhi	r2,16
   82958:	10bfffc4 	addi	r2,r2,-1
   8295c:	ddc00117 	ldw	r23,4(sp)
   82960:	a884703a 	and	r2,r21,r2
   82964:	1811883a 	mov	r8,r3
   82968:	124ffc34 	orhi	r9,r2,16368
   8296c:	25bf0044 	addi	r22,r4,-1023
   82970:	d8000815 	stw	zero,32(sp)
   82974:	0005883a 	mov	r2,zero
   82978:	00cffe34 	movhi	r3,16376
   8297c:	480b883a 	mov	r5,r9
   82980:	4009883a 	mov	r4,r8
   82984:	180f883a 	mov	r7,r3
   82988:	100d883a 	mov	r6,r2
   8298c:	00889480 	call	88948 <__subdf3>
   82990:	0218dbf4 	movhi	r8,25455
   82994:	4210d844 	addi	r8,r8,17249
   82998:	024ff4f4 	movhi	r9,16339
   8299c:	4a61e9c4 	addi	r9,r9,-30809
   829a0:	480f883a 	mov	r7,r9
   829a4:	400d883a 	mov	r6,r8
   829a8:	180b883a 	mov	r5,r3
   829ac:	1009883a 	mov	r4,r2
   829b0:	0088a3c0 	call	88a3c <__muldf3>
   829b4:	0222d874 	movhi	r8,35681
   829b8:	42322cc4 	addi	r8,r8,-14157
   829bc:	024ff1f4 	movhi	r9,16327
   829c0:	4a628a04 	addi	r9,r9,-30168
   829c4:	480f883a 	mov	r7,r9
   829c8:	400d883a 	mov	r6,r8
   829cc:	180b883a 	mov	r5,r3
   829d0:	1009883a 	mov	r4,r2
   829d4:	00889c80 	call	889c8 <__adddf3>
   829d8:	b009883a 	mov	r4,r22
   829dc:	1021883a 	mov	r16,r2
   829e0:	1823883a 	mov	r17,r3
   829e4:	00893000 	call	89300 <__floatsidf>
   829e8:	021427f4 	movhi	r8,20639
   829ec:	421e7ec4 	addi	r8,r8,31227
   829f0:	024ff4f4 	movhi	r9,16339
   829f4:	4a5104c4 	addi	r9,r9,17427
   829f8:	480f883a 	mov	r7,r9
   829fc:	400d883a 	mov	r6,r8
   82a00:	180b883a 	mov	r5,r3
   82a04:	1009883a 	mov	r4,r2
   82a08:	0088a3c0 	call	88a3c <__muldf3>
   82a0c:	180f883a 	mov	r7,r3
   82a10:	880b883a 	mov	r5,r17
   82a14:	100d883a 	mov	r6,r2
   82a18:	8009883a 	mov	r4,r16
   82a1c:	00889c80 	call	889c8 <__adddf3>
   82a20:	1009883a 	mov	r4,r2
   82a24:	180b883a 	mov	r5,r3
   82a28:	1021883a 	mov	r16,r2
   82a2c:	1823883a 	mov	r17,r3
   82a30:	00893f80 	call	893f8 <__fixdfsi>
   82a34:	000d883a 	mov	r6,zero
   82a38:	000f883a 	mov	r7,zero
   82a3c:	8009883a 	mov	r4,r16
   82a40:	880b883a 	mov	r5,r17
   82a44:	d8800d15 	stw	r2,52(sp)
   82a48:	00892780 	call	89278 <__ltdf2>
   82a4c:	10031716 	blt	r2,zero,836ac <_dtoa_r+0xe8c>
   82a50:	d8c00d17 	ldw	r3,52(sp)
   82a54:	00800584 	movi	r2,22
   82a58:	10c1482e 	bgeu	r2,r3,82f7c <_dtoa_r+0x75c>
   82a5c:	01000044 	movi	r4,1
   82a60:	d9000c15 	stw	r4,48(sp)
   82a64:	bd85c83a 	sub	r2,r23,r22
   82a68:	11bfffc4 	addi	r6,r2,-1
   82a6c:	30030b16 	blt	r6,zero,8369c <_dtoa_r+0xe7c>
   82a70:	d9800a15 	stw	r6,40(sp)
   82a74:	d8001115 	stw	zero,68(sp)
   82a78:	d8c00d17 	ldw	r3,52(sp)
   82a7c:	1802ff16 	blt	r3,zero,8367c <_dtoa_r+0xe5c>
   82a80:	d9000a17 	ldw	r4,40(sp)
   82a84:	d8c00915 	stw	r3,36(sp)
   82a88:	d8001015 	stw	zero,64(sp)
   82a8c:	20c9883a 	add	r4,r4,r3
   82a90:	d9000a15 	stw	r4,40(sp)
   82a94:	d9001717 	ldw	r4,92(sp)
   82a98:	00800244 	movi	r2,9
   82a9c:	11004636 	bltu	r2,r4,82bb8 <_dtoa_r+0x398>
   82aa0:	00800144 	movi	r2,5
   82aa4:	11020416 	blt	r2,r4,832b8 <_dtoa_r+0xa98>
   82aa8:	04400044 	movi	r17,1
   82aac:	d8c01717 	ldw	r3,92(sp)
   82ab0:	00800144 	movi	r2,5
   82ab4:	10c1ed36 	bltu	r2,r3,8326c <_dtoa_r+0xa4c>
   82ab8:	18c5883a 	add	r2,r3,r3
   82abc:	1085883a 	add	r2,r2,r2
   82ac0:	00c00234 	movhi	r3,8
   82ac4:	18cab504 	addi	r3,r3,10964
   82ac8:	10c5883a 	add	r2,r2,r3
   82acc:	11000017 	ldw	r4,0(r2)
   82ad0:	2000683a 	jmp	r4
   82ad4:	00082bc0 	call	82bc <__alt_mem_onchip_memory2_0-0x77d44>
   82ad8:	00082bc0 	call	82bc <__alt_mem_onchip_memory2_0-0x77d44>
   82adc:	000835c0 	call	835c <__alt_mem_onchip_memory2_0-0x77ca4>
   82ae0:	00083598 	cmpnei	zero,zero,8406
   82ae4:	000835dc 	xori	zero,zero,8407
   82ae8:	000835e8 	cmpgeui	zero,zero,8407
   82aec:	d9002717 	ldw	r4,156(sp)
   82af0:	0089c3c4 	movi	r2,9999
   82af4:	20800015 	stw	r2,0(r4)
   82af8:	a0001026 	beq	r20,zero,82b3c <_dtoa_r+0x31c>
   82afc:	00c00274 	movhi	r3,9
   82b00:	18f2b604 	addi	r3,r3,-13608
   82b04:	d9802917 	ldw	r6,164(sp)
   82b08:	303f7926 	beq	r6,zero,828f0 <_dtoa_r+0xd0>
   82b0c:	188000c7 	ldb	r2,3(r3)
   82b10:	190000c4 	addi	r4,r3,3
   82b14:	1000101e 	bne	r2,zero,82b58 <_dtoa_r+0x338>
   82b18:	d8802917 	ldw	r2,164(sp)
   82b1c:	11000015 	stw	r4,0(r2)
   82b20:	003f7306 	br	828f0 <_dtoa_r+0xd0>
   82b24:	00a00034 	movhi	r2,32768
   82b28:	10bfffc4 	addi	r2,r2,-1
   82b2c:	00c00044 	movi	r3,1
   82b30:	88aa703a 	and	r21,r17,r2
   82b34:	90c00015 	stw	r3,0(r18)
   82b38:	003f5806 	br	8289c <_dtoa_r+0x7c>
   82b3c:	00800434 	movhi	r2,16
   82b40:	10bfffc4 	addi	r2,r2,-1
   82b44:	a884703a 	and	r2,r21,r2
   82b48:	103fec1e 	bne	r2,zero,82afc <_dtoa_r+0x2dc>
   82b4c:	00c00274 	movhi	r3,9
   82b50:	18f2b304 	addi	r3,r3,-13620
   82b54:	003feb06 	br	82b04 <_dtoa_r+0x2e4>
   82b58:	d8802917 	ldw	r2,164(sp)
   82b5c:	19000204 	addi	r4,r3,8
   82b60:	11000015 	stw	r4,0(r2)
   82b64:	003f6206 	br	828f0 <_dtoa_r+0xd0>
   82b68:	ddc00117 	ldw	r23,4(sp)
   82b6c:	d8800217 	ldw	r2,8(sp)
   82b70:	01000804 	movi	r4,32
   82b74:	b8c10c84 	addi	r3,r23,1074
   82b78:	18a3883a 	add	r17,r3,r2
   82b7c:	2441b80e 	bge	r4,r17,83260 <_dtoa_r+0xa40>
   82b80:	00c01004 	movi	r3,64
   82b84:	1c47c83a 	sub	r3,r3,r17
   82b88:	88bff804 	addi	r2,r17,-32
   82b8c:	a8c6983a 	sll	r3,r21,r3
   82b90:	a084d83a 	srl	r2,r20,r2
   82b94:	1888b03a 	or	r4,r3,r2
   82b98:	00894d00 	call	894d0 <__floatunsidf>
   82b9c:	1011883a 	mov	r8,r2
   82ba0:	00bf8434 	movhi	r2,65040
   82ba4:	01000044 	movi	r4,1
   82ba8:	10d3883a 	add	r9,r2,r3
   82bac:	8dbef344 	addi	r22,r17,-1075
   82bb0:	d9000815 	stw	r4,32(sp)
   82bb4:	003f6f06 	br	82974 <_dtoa_r+0x154>
   82bb8:	d8001715 	stw	zero,92(sp)
   82bbc:	04400044 	movi	r17,1
   82bc0:	00bfffc4 	movi	r2,-1
   82bc4:	00c00044 	movi	r3,1
   82bc8:	d8800e15 	stw	r2,56(sp)
   82bcc:	d8002615 	stw	zero,152(sp)
   82bd0:	d8800f15 	stw	r2,60(sp)
   82bd4:	d8c00b15 	stw	r3,44(sp)
   82bd8:	1021883a 	mov	r16,r2
   82bdc:	d8801617 	ldw	r2,88(sp)
   82be0:	10001115 	stw	zero,68(r2)
   82be4:	d8801617 	ldw	r2,88(sp)
   82be8:	11401117 	ldw	r5,68(r2)
   82bec:	1009883a 	mov	r4,r2
   82bf0:	0085f680 	call	85f68 <_Balloc>
   82bf4:	d8c01617 	ldw	r3,88(sp)
   82bf8:	d8800515 	stw	r2,20(sp)
   82bfc:	18801015 	stw	r2,64(r3)
   82c00:	00800384 	movi	r2,14
   82c04:	14006836 	bltu	r2,r16,82da8 <_dtoa_r+0x588>
   82c08:	8805003a 	cmpeq	r2,r17,zero
   82c0c:	1000661e 	bne	r2,zero,82da8 <_dtoa_r+0x588>
   82c10:	d9000d17 	ldw	r4,52(sp)
   82c14:	0102300e 	bge	zero,r4,834d8 <_dtoa_r+0xcb8>
   82c18:	208003cc 	andi	r2,r4,15
   82c1c:	100490fa 	slli	r2,r2,3
   82c20:	2025d13a 	srai	r18,r4,4
   82c24:	00c00274 	movhi	r3,9
   82c28:	18f2c804 	addi	r3,r3,-13536
   82c2c:	10c5883a 	add	r2,r2,r3
   82c30:	90c0040c 	andi	r3,r18,16
   82c34:	14000017 	ldw	r16,0(r2)
   82c38:	14400117 	ldw	r17,4(r2)
   82c3c:	18036a1e 	bne	r3,zero,839e8 <_dtoa_r+0x11c8>
   82c40:	05800084 	movi	r22,2
   82c44:	90001026 	beq	r18,zero,82c88 <_dtoa_r+0x468>
   82c48:	04c00274 	movhi	r19,9
   82c4c:	9cf2fa04 	addi	r19,r19,-13336
   82c50:	9080004c 	andi	r2,r18,1
   82c54:	1005003a 	cmpeq	r2,r2,zero
   82c58:	1000081e 	bne	r2,zero,82c7c <_dtoa_r+0x45c>
   82c5c:	99800017 	ldw	r6,0(r19)
   82c60:	99c00117 	ldw	r7,4(r19)
   82c64:	880b883a 	mov	r5,r17
   82c68:	8009883a 	mov	r4,r16
   82c6c:	0088a3c0 	call	88a3c <__muldf3>
   82c70:	1021883a 	mov	r16,r2
   82c74:	b5800044 	addi	r22,r22,1
   82c78:	1823883a 	mov	r17,r3
   82c7c:	9025d07a 	srai	r18,r18,1
   82c80:	9cc00204 	addi	r19,r19,8
   82c84:	903ff21e 	bne	r18,zero,82c50 <_dtoa_r+0x430>
   82c88:	a80b883a 	mov	r5,r21
   82c8c:	a009883a 	mov	r4,r20
   82c90:	880f883a 	mov	r7,r17
   82c94:	800d883a 	mov	r6,r16
   82c98:	0088e000 	call	88e00 <__divdf3>
   82c9c:	1029883a 	mov	r20,r2
   82ca0:	182b883a 	mov	r21,r3
   82ca4:	d8c00c17 	ldw	r3,48(sp)
   82ca8:	1805003a 	cmpeq	r2,r3,zero
   82cac:	1000081e 	bne	r2,zero,82cd0 <_dtoa_r+0x4b0>
   82cb0:	0005883a 	mov	r2,zero
   82cb4:	00cffc34 	movhi	r3,16368
   82cb8:	180f883a 	mov	r7,r3
   82cbc:	a009883a 	mov	r4,r20
   82cc0:	a80b883a 	mov	r5,r21
   82cc4:	100d883a 	mov	r6,r2
   82cc8:	00892780 	call	89278 <__ltdf2>
   82ccc:	1003fe16 	blt	r2,zero,83cc8 <_dtoa_r+0x14a8>
   82cd0:	b009883a 	mov	r4,r22
   82cd4:	00893000 	call	89300 <__floatsidf>
   82cd8:	180b883a 	mov	r5,r3
   82cdc:	1009883a 	mov	r4,r2
   82ce0:	a00d883a 	mov	r6,r20
   82ce4:	a80f883a 	mov	r7,r21
   82ce8:	0088a3c0 	call	88a3c <__muldf3>
   82cec:	0011883a 	mov	r8,zero
   82cf0:	02500734 	movhi	r9,16412
   82cf4:	1009883a 	mov	r4,r2
   82cf8:	180b883a 	mov	r5,r3
   82cfc:	480f883a 	mov	r7,r9
   82d00:	400d883a 	mov	r6,r8
   82d04:	00889c80 	call	889c8 <__adddf3>
   82d08:	d9000f17 	ldw	r4,60(sp)
   82d0c:	102d883a 	mov	r22,r2
   82d10:	00bf3034 	movhi	r2,64704
   82d14:	18b9883a 	add	fp,r3,r2
   82d18:	e02f883a 	mov	r23,fp
   82d1c:	20028f1e 	bne	r4,zero,8375c <_dtoa_r+0xf3c>
   82d20:	0005883a 	mov	r2,zero
   82d24:	00d00534 	movhi	r3,16404
   82d28:	a009883a 	mov	r4,r20
   82d2c:	a80b883a 	mov	r5,r21
   82d30:	180f883a 	mov	r7,r3
   82d34:	100d883a 	mov	r6,r2
   82d38:	00889480 	call	88948 <__subdf3>
   82d3c:	1009883a 	mov	r4,r2
   82d40:	e00f883a 	mov	r7,fp
   82d44:	180b883a 	mov	r5,r3
   82d48:	b00d883a 	mov	r6,r22
   82d4c:	1025883a 	mov	r18,r2
   82d50:	1827883a 	mov	r19,r3
   82d54:	00891680 	call	89168 <__gtdf2>
   82d58:	00834f16 	blt	zero,r2,83a98 <_dtoa_r+0x1278>
   82d5c:	e0e0003c 	xorhi	r3,fp,32768
   82d60:	9009883a 	mov	r4,r18
   82d64:	980b883a 	mov	r5,r19
   82d68:	180f883a 	mov	r7,r3
   82d6c:	b00d883a 	mov	r6,r22
   82d70:	00892780 	call	89278 <__ltdf2>
   82d74:	1000080e 	bge	r2,zero,82d98 <_dtoa_r+0x578>
   82d78:	0027883a 	mov	r19,zero
   82d7c:	0025883a 	mov	r18,zero
   82d80:	d8802617 	ldw	r2,152(sp)
   82d84:	df000517 	ldw	fp,20(sp)
   82d88:	d8000615 	stw	zero,24(sp)
   82d8c:	0084303a 	nor	r2,zero,r2
   82d90:	d8800d15 	stw	r2,52(sp)
   82d94:	00019b06 	br	83404 <_dtoa_r+0xbe4>
   82d98:	d9801217 	ldw	r6,72(sp)
   82d9c:	d8801317 	ldw	r2,76(sp)
   82da0:	3029883a 	mov	r20,r6
   82da4:	102b883a 	mov	r21,r2
   82da8:	d8c00217 	ldw	r3,8(sp)
   82dac:	18008516 	blt	r3,zero,82fc4 <_dtoa_r+0x7a4>
   82db0:	d9000d17 	ldw	r4,52(sp)
   82db4:	00800384 	movi	r2,14
   82db8:	11008216 	blt	r2,r4,82fc4 <_dtoa_r+0x7a4>
   82dbc:	200490fa 	slli	r2,r4,3
   82dc0:	d9802617 	ldw	r6,152(sp)
   82dc4:	00c00274 	movhi	r3,9
   82dc8:	18f2c804 	addi	r3,r3,-13536
   82dcc:	10c5883a 	add	r2,r2,r3
   82dd0:	14800017 	ldw	r18,0(r2)
   82dd4:	14c00117 	ldw	r19,4(r2)
   82dd8:	30031e16 	blt	r6,zero,83a54 <_dtoa_r+0x1234>
   82ddc:	d9000517 	ldw	r4,20(sp)
   82de0:	d8c00f17 	ldw	r3,60(sp)
   82de4:	a823883a 	mov	r17,r21
   82de8:	a021883a 	mov	r16,r20
   82dec:	192b883a 	add	r21,r3,r4
   82df0:	2039883a 	mov	fp,r4
   82df4:	00000f06 	br	82e34 <_dtoa_r+0x614>
   82df8:	0005883a 	mov	r2,zero
   82dfc:	00d00934 	movhi	r3,16420
   82e00:	5009883a 	mov	r4,r10
   82e04:	580b883a 	mov	r5,r11
   82e08:	180f883a 	mov	r7,r3
   82e0c:	100d883a 	mov	r6,r2
   82e10:	0088a3c0 	call	88a3c <__muldf3>
   82e14:	180b883a 	mov	r5,r3
   82e18:	000d883a 	mov	r6,zero
   82e1c:	000f883a 	mov	r7,zero
   82e20:	1009883a 	mov	r4,r2
   82e24:	1021883a 	mov	r16,r2
   82e28:	1823883a 	mov	r17,r3
   82e2c:	00890e00 	call	890e0 <__nedf2>
   82e30:	10004526 	beq	r2,zero,82f48 <_dtoa_r+0x728>
   82e34:	900d883a 	mov	r6,r18
   82e38:	980f883a 	mov	r7,r19
   82e3c:	8009883a 	mov	r4,r16
   82e40:	880b883a 	mov	r5,r17
   82e44:	0088e000 	call	88e00 <__divdf3>
   82e48:	180b883a 	mov	r5,r3
   82e4c:	1009883a 	mov	r4,r2
   82e50:	00893f80 	call	893f8 <__fixdfsi>
   82e54:	1009883a 	mov	r4,r2
   82e58:	1029883a 	mov	r20,r2
   82e5c:	00893000 	call	89300 <__floatsidf>
   82e60:	180f883a 	mov	r7,r3
   82e64:	9009883a 	mov	r4,r18
   82e68:	980b883a 	mov	r5,r19
   82e6c:	100d883a 	mov	r6,r2
   82e70:	0088a3c0 	call	88a3c <__muldf3>
   82e74:	180f883a 	mov	r7,r3
   82e78:	880b883a 	mov	r5,r17
   82e7c:	8009883a 	mov	r4,r16
   82e80:	100d883a 	mov	r6,r2
   82e84:	00889480 	call	88948 <__subdf3>
   82e88:	1015883a 	mov	r10,r2
   82e8c:	a0800c04 	addi	r2,r20,48
   82e90:	e0800005 	stb	r2,0(fp)
   82e94:	e7000044 	addi	fp,fp,1
   82e98:	1817883a 	mov	r11,r3
   82e9c:	e57fd61e 	bne	fp,r21,82df8 <_dtoa_r+0x5d8>
   82ea0:	500d883a 	mov	r6,r10
   82ea4:	180f883a 	mov	r7,r3
   82ea8:	5009883a 	mov	r4,r10
   82eac:	180b883a 	mov	r5,r3
   82eb0:	00889c80 	call	889c8 <__adddf3>
   82eb4:	100d883a 	mov	r6,r2
   82eb8:	9009883a 	mov	r4,r18
   82ebc:	980b883a 	mov	r5,r19
   82ec0:	180f883a 	mov	r7,r3
   82ec4:	1021883a 	mov	r16,r2
   82ec8:	1823883a 	mov	r17,r3
   82ecc:	00892780 	call	89278 <__ltdf2>
   82ed0:	10000816 	blt	r2,zero,82ef4 <_dtoa_r+0x6d4>
   82ed4:	980b883a 	mov	r5,r19
   82ed8:	800d883a 	mov	r6,r16
   82edc:	880f883a 	mov	r7,r17
   82ee0:	9009883a 	mov	r4,r18
   82ee4:	00890580 	call	89058 <__eqdf2>
   82ee8:	1000171e 	bne	r2,zero,82f48 <_dtoa_r+0x728>
   82eec:	a080004c 	andi	r2,r20,1
   82ef0:	10001526 	beq	r2,zero,82f48 <_dtoa_r+0x728>
   82ef4:	d8800d17 	ldw	r2,52(sp)
   82ef8:	d8800415 	stw	r2,16(sp)
   82efc:	e009883a 	mov	r4,fp
   82f00:	213fffc4 	addi	r4,r4,-1
   82f04:	20c00007 	ldb	r3,0(r4)
   82f08:	00800e44 	movi	r2,57
   82f0c:	1880081e 	bne	r3,r2,82f30 <_dtoa_r+0x710>
   82f10:	d8800517 	ldw	r2,20(sp)
   82f14:	113ffa1e 	bne	r2,r4,82f00 <_dtoa_r+0x6e0>
   82f18:	d8c00417 	ldw	r3,16(sp)
   82f1c:	d9800517 	ldw	r6,20(sp)
   82f20:	00800c04 	movi	r2,48
   82f24:	18c00044 	addi	r3,r3,1
   82f28:	d8c00415 	stw	r3,16(sp)
   82f2c:	30800005 	stb	r2,0(r6)
   82f30:	20800003 	ldbu	r2,0(r4)
   82f34:	d8c00417 	ldw	r3,16(sp)
   82f38:	27000044 	addi	fp,r4,1
   82f3c:	10800044 	addi	r2,r2,1
   82f40:	d8c00d15 	stw	r3,52(sp)
   82f44:	20800005 	stb	r2,0(r4)
   82f48:	d9001617 	ldw	r4,88(sp)
   82f4c:	d9400717 	ldw	r5,28(sp)
   82f50:	00859e80 	call	859e8 <_Bfree>
   82f54:	e0000005 	stb	zero,0(fp)
   82f58:	d9800d17 	ldw	r6,52(sp)
   82f5c:	d8c02717 	ldw	r3,156(sp)
   82f60:	d9002917 	ldw	r4,164(sp)
   82f64:	30800044 	addi	r2,r6,1
   82f68:	18800015 	stw	r2,0(r3)
   82f6c:	20029c26 	beq	r4,zero,839e0 <_dtoa_r+0x11c0>
   82f70:	d8c00517 	ldw	r3,20(sp)
   82f74:	27000015 	stw	fp,0(r4)
   82f78:	003e5d06 	br	828f0 <_dtoa_r+0xd0>
   82f7c:	d9800d17 	ldw	r6,52(sp)
   82f80:	00c00274 	movhi	r3,9
   82f84:	18f2c804 	addi	r3,r3,-13536
   82f88:	d9001217 	ldw	r4,72(sp)
   82f8c:	300490fa 	slli	r2,r6,3
   82f90:	d9401317 	ldw	r5,76(sp)
   82f94:	10c5883a 	add	r2,r2,r3
   82f98:	12000017 	ldw	r8,0(r2)
   82f9c:	12400117 	ldw	r9,4(r2)
   82fa0:	400d883a 	mov	r6,r8
   82fa4:	480f883a 	mov	r7,r9
   82fa8:	00892780 	call	89278 <__ltdf2>
   82fac:	1000030e 	bge	r2,zero,82fbc <_dtoa_r+0x79c>
   82fb0:	d8800d17 	ldw	r2,52(sp)
   82fb4:	10bfffc4 	addi	r2,r2,-1
   82fb8:	d8800d15 	stw	r2,52(sp)
   82fbc:	d8000c15 	stw	zero,48(sp)
   82fc0:	003ea806 	br	82a64 <_dtoa_r+0x244>
   82fc4:	d9000b17 	ldw	r4,44(sp)
   82fc8:	202cc03a 	cmpne	r22,r4,zero
   82fcc:	b000c71e 	bne	r22,zero,832ec <_dtoa_r+0xacc>
   82fd0:	dc001117 	ldw	r16,68(sp)
   82fd4:	dc801017 	ldw	r18,64(sp)
   82fd8:	0027883a 	mov	r19,zero
   82fdc:	04000b0e 	bge	zero,r16,8300c <_dtoa_r+0x7ec>
   82fe0:	d8c00a17 	ldw	r3,40(sp)
   82fe4:	00c0090e 	bge	zero,r3,8300c <_dtoa_r+0x7ec>
   82fe8:	8005883a 	mov	r2,r16
   82fec:	1c011316 	blt	r3,r16,8343c <_dtoa_r+0xc1c>
   82ff0:	d9000a17 	ldw	r4,40(sp)
   82ff4:	d9801117 	ldw	r6,68(sp)
   82ff8:	80a1c83a 	sub	r16,r16,r2
   82ffc:	2089c83a 	sub	r4,r4,r2
   83000:	308dc83a 	sub	r6,r6,r2
   83004:	d9000a15 	stw	r4,40(sp)
   83008:	d9801115 	stw	r6,68(sp)
   8300c:	d8801017 	ldw	r2,64(sp)
   83010:	0080150e 	bge	zero,r2,83068 <_dtoa_r+0x848>
   83014:	d8c00b17 	ldw	r3,44(sp)
   83018:	1805003a 	cmpeq	r2,r3,zero
   8301c:	1001c91e 	bne	r2,zero,83744 <_dtoa_r+0xf24>
   83020:	04800e0e 	bge	zero,r18,8305c <_dtoa_r+0x83c>
   83024:	d9001617 	ldw	r4,88(sp)
   83028:	980b883a 	mov	r5,r19
   8302c:	900d883a 	mov	r6,r18
   83030:	00868340 	call	86834 <__pow5mult>
   83034:	d9001617 	ldw	r4,88(sp)
   83038:	d9800717 	ldw	r6,28(sp)
   8303c:	100b883a 	mov	r5,r2
   83040:	1027883a 	mov	r19,r2
   83044:	00864780 	call	86478 <__multiply>
   83048:	d9001617 	ldw	r4,88(sp)
   8304c:	d9400717 	ldw	r5,28(sp)
   83050:	1023883a 	mov	r17,r2
   83054:	00859e80 	call	859e8 <_Bfree>
   83058:	dc400715 	stw	r17,28(sp)
   8305c:	d9001017 	ldw	r4,64(sp)
   83060:	248dc83a 	sub	r6,r4,r18
   83064:	30010e1e 	bne	r6,zero,834a0 <_dtoa_r+0xc80>
   83068:	d9001617 	ldw	r4,88(sp)
   8306c:	04400044 	movi	r17,1
   83070:	880b883a 	mov	r5,r17
   83074:	00866cc0 	call	866cc <__i2b>
   83078:	d9800917 	ldw	r6,36(sp)
   8307c:	1025883a 	mov	r18,r2
   83080:	0180040e 	bge	zero,r6,83094 <_dtoa_r+0x874>
   83084:	d9001617 	ldw	r4,88(sp)
   83088:	100b883a 	mov	r5,r2
   8308c:	00868340 	call	86834 <__pow5mult>
   83090:	1025883a 	mov	r18,r2
   83094:	d8801717 	ldw	r2,92(sp)
   83098:	8880f30e 	bge	r17,r2,83468 <_dtoa_r+0xc48>
   8309c:	0023883a 	mov	r17,zero
   830a0:	d9800917 	ldw	r6,36(sp)
   830a4:	30019e1e 	bne	r6,zero,83720 <_dtoa_r+0xf00>
   830a8:	00c00044 	movi	r3,1
   830ac:	d9000a17 	ldw	r4,40(sp)
   830b0:	20c5883a 	add	r2,r4,r3
   830b4:	10c007cc 	andi	r3,r2,31
   830b8:	1800841e 	bne	r3,zero,832cc <_dtoa_r+0xaac>
   830bc:	00800704 	movi	r2,28
   830c0:	d9000a17 	ldw	r4,40(sp)
   830c4:	d9801117 	ldw	r6,68(sp)
   830c8:	80a1883a 	add	r16,r16,r2
   830cc:	2089883a 	add	r4,r4,r2
   830d0:	308d883a 	add	r6,r6,r2
   830d4:	d9000a15 	stw	r4,40(sp)
   830d8:	d9801115 	stw	r6,68(sp)
   830dc:	d8801117 	ldw	r2,68(sp)
   830e0:	0080050e 	bge	zero,r2,830f8 <_dtoa_r+0x8d8>
   830e4:	d9400717 	ldw	r5,28(sp)
   830e8:	d9001617 	ldw	r4,88(sp)
   830ec:	100d883a 	mov	r6,r2
   830f0:	008632c0 	call	8632c <__lshift>
   830f4:	d8800715 	stw	r2,28(sp)
   830f8:	d8c00a17 	ldw	r3,40(sp)
   830fc:	00c0050e 	bge	zero,r3,83114 <_dtoa_r+0x8f4>
   83100:	d9001617 	ldw	r4,88(sp)
   83104:	900b883a 	mov	r5,r18
   83108:	180d883a 	mov	r6,r3
   8310c:	008632c0 	call	8632c <__lshift>
   83110:	1025883a 	mov	r18,r2
   83114:	d9000c17 	ldw	r4,48(sp)
   83118:	2005003a 	cmpeq	r2,r4,zero
   8311c:	10016f26 	beq	r2,zero,836dc <_dtoa_r+0xebc>
   83120:	d9000f17 	ldw	r4,60(sp)
   83124:	0102170e 	bge	zero,r4,83984 <_dtoa_r+0x1164>
   83128:	d9800b17 	ldw	r6,44(sp)
   8312c:	3005003a 	cmpeq	r2,r6,zero
   83130:	1000881e 	bne	r2,zero,83354 <_dtoa_r+0xb34>
   83134:	0400050e 	bge	zero,r16,8314c <_dtoa_r+0x92c>
   83138:	d9001617 	ldw	r4,88(sp)
   8313c:	980b883a 	mov	r5,r19
   83140:	800d883a 	mov	r6,r16
   83144:	008632c0 	call	8632c <__lshift>
   83148:	1027883a 	mov	r19,r2
   8314c:	8804c03a 	cmpne	r2,r17,zero
   83150:	1002541e 	bne	r2,zero,83aa4 <_dtoa_r+0x1284>
   83154:	980b883a 	mov	r5,r19
   83158:	dd800517 	ldw	r22,20(sp)
   8315c:	dcc00615 	stw	r19,24(sp)
   83160:	a700004c 	andi	fp,r20,1
   83164:	2827883a 	mov	r19,r5
   83168:	d9000717 	ldw	r4,28(sp)
   8316c:	900b883a 	mov	r5,r18
   83170:	00825dc0 	call	825dc <quorem>
   83174:	d9000717 	ldw	r4,28(sp)
   83178:	d9400617 	ldw	r5,24(sp)
   8317c:	1023883a 	mov	r17,r2
   83180:	8dc00c04 	addi	r23,r17,48
   83184:	0085b440 	call	85b44 <__mcmp>
   83188:	d9001617 	ldw	r4,88(sp)
   8318c:	900b883a 	mov	r5,r18
   83190:	980d883a 	mov	r6,r19
   83194:	1029883a 	mov	r20,r2
   83198:	00861a00 	call	861a0 <__mdiff>
   8319c:	102b883a 	mov	r21,r2
   831a0:	10800317 	ldw	r2,12(r2)
   831a4:	1001281e 	bne	r2,zero,83648 <_dtoa_r+0xe28>
   831a8:	d9000717 	ldw	r4,28(sp)
   831ac:	a80b883a 	mov	r5,r21
   831b0:	0085b440 	call	85b44 <__mcmp>
   831b4:	d9001617 	ldw	r4,88(sp)
   831b8:	1021883a 	mov	r16,r2
   831bc:	a80b883a 	mov	r5,r21
   831c0:	00859e80 	call	859e8 <_Bfree>
   831c4:	8000041e 	bne	r16,zero,831d8 <_dtoa_r+0x9b8>
   831c8:	d8801717 	ldw	r2,92(sp)
   831cc:	1000021e 	bne	r2,zero,831d8 <_dtoa_r+0x9b8>
   831d0:	e004c03a 	cmpne	r2,fp,zero
   831d4:	10011726 	beq	r2,zero,83634 <_dtoa_r+0xe14>
   831d8:	a0010616 	blt	r20,zero,835f4 <_dtoa_r+0xdd4>
   831dc:	a000041e 	bne	r20,zero,831f0 <_dtoa_r+0x9d0>
   831e0:	d8c01717 	ldw	r3,92(sp)
   831e4:	1800021e 	bne	r3,zero,831f0 <_dtoa_r+0x9d0>
   831e8:	e004c03a 	cmpne	r2,fp,zero
   831ec:	10010126 	beq	r2,zero,835f4 <_dtoa_r+0xdd4>
   831f0:	04023d16 	blt	zero,r16,83ae8 <_dtoa_r+0x12c8>
   831f4:	b5c00005 	stb	r23,0(r22)
   831f8:	d9800517 	ldw	r6,20(sp)
   831fc:	d9000f17 	ldw	r4,60(sp)
   83200:	b5800044 	addi	r22,r22,1
   83204:	3105883a 	add	r2,r6,r4
   83208:	b0806526 	beq	r22,r2,833a0 <_dtoa_r+0xb80>
   8320c:	d9400717 	ldw	r5,28(sp)
   83210:	d9001617 	ldw	r4,88(sp)
   83214:	01800284 	movi	r6,10
   83218:	000f883a 	mov	r7,zero
   8321c:	00867080 	call	86708 <__multadd>
   83220:	d8800715 	stw	r2,28(sp)
   83224:	d8800617 	ldw	r2,24(sp)
   83228:	14c10c26 	beq	r2,r19,8365c <_dtoa_r+0xe3c>
   8322c:	d9400617 	ldw	r5,24(sp)
   83230:	d9001617 	ldw	r4,88(sp)
   83234:	01800284 	movi	r6,10
   83238:	000f883a 	mov	r7,zero
   8323c:	00867080 	call	86708 <__multadd>
   83240:	d9001617 	ldw	r4,88(sp)
   83244:	980b883a 	mov	r5,r19
   83248:	01800284 	movi	r6,10
   8324c:	000f883a 	mov	r7,zero
   83250:	d8800615 	stw	r2,24(sp)
   83254:	00867080 	call	86708 <__multadd>
   83258:	1027883a 	mov	r19,r2
   8325c:	003fc206 	br	83168 <_dtoa_r+0x948>
   83260:	2445c83a 	sub	r2,r4,r17
   83264:	a088983a 	sll	r4,r20,r2
   83268:	003e4b06 	br	82b98 <_dtoa_r+0x378>
   8326c:	01bfffc4 	movi	r6,-1
   83270:	00800044 	movi	r2,1
   83274:	d9800e15 	stw	r6,56(sp)
   83278:	d9800f15 	stw	r6,60(sp)
   8327c:	d8800b15 	stw	r2,44(sp)
   83280:	d8c01617 	ldw	r3,88(sp)
   83284:	008005c4 	movi	r2,23
   83288:	18001115 	stw	zero,68(r3)
   8328c:	1580082e 	bgeu	r2,r22,832b0 <_dtoa_r+0xa90>
   83290:	00c00104 	movi	r3,4
   83294:	0009883a 	mov	r4,zero
   83298:	18c7883a 	add	r3,r3,r3
   8329c:	18800504 	addi	r2,r3,20
   832a0:	21000044 	addi	r4,r4,1
   832a4:	b0bffc2e 	bgeu	r22,r2,83298 <_dtoa_r+0xa78>
   832a8:	d9801617 	ldw	r6,88(sp)
   832ac:	31001115 	stw	r4,68(r6)
   832b0:	dc000f17 	ldw	r16,60(sp)
   832b4:	003e4b06 	br	82be4 <_dtoa_r+0x3c4>
   832b8:	d9801717 	ldw	r6,92(sp)
   832bc:	0023883a 	mov	r17,zero
   832c0:	31bfff04 	addi	r6,r6,-4
   832c4:	d9801715 	stw	r6,92(sp)
   832c8:	003df806 	br	82aac <_dtoa_r+0x28c>
   832cc:	00800804 	movi	r2,32
   832d0:	10c9c83a 	sub	r4,r2,r3
   832d4:	00c00104 	movi	r3,4
   832d8:	19005a16 	blt	r3,r4,83444 <_dtoa_r+0xc24>
   832dc:	008000c4 	movi	r2,3
   832e0:	113f7e16 	blt	r2,r4,830dc <_dtoa_r+0x8bc>
   832e4:	20800704 	addi	r2,r4,28
   832e8:	003f7506 	br	830c0 <_dtoa_r+0x8a0>
   832ec:	d9801717 	ldw	r6,92(sp)
   832f0:	00800044 	movi	r2,1
   832f4:	1180a10e 	bge	r2,r6,8357c <_dtoa_r+0xd5c>
   832f8:	d9800f17 	ldw	r6,60(sp)
   832fc:	d8c01017 	ldw	r3,64(sp)
   83300:	30bfffc4 	addi	r2,r6,-1
   83304:	1881c616 	blt	r3,r2,83a20 <_dtoa_r+0x1200>
   83308:	18a5c83a 	sub	r18,r3,r2
   8330c:	d8800f17 	ldw	r2,60(sp)
   83310:	10026216 	blt	r2,zero,83c9c <_dtoa_r+0x147c>
   83314:	dc001117 	ldw	r16,68(sp)
   83318:	1007883a 	mov	r3,r2
   8331c:	d9800a17 	ldw	r6,40(sp)
   83320:	d8801117 	ldw	r2,68(sp)
   83324:	d9001617 	ldw	r4,88(sp)
   83328:	30cd883a 	add	r6,r6,r3
   8332c:	10c5883a 	add	r2,r2,r3
   83330:	01400044 	movi	r5,1
   83334:	d9800a15 	stw	r6,40(sp)
   83338:	d8801115 	stw	r2,68(sp)
   8333c:	00866cc0 	call	866cc <__i2b>
   83340:	1027883a 	mov	r19,r2
   83344:	003f2506 	br	82fdc <_dtoa_r+0x7bc>
   83348:	00c00274 	movhi	r3,9
   8334c:	18f2aa04 	addi	r3,r3,-13656
   83350:	003d6706 	br	828f0 <_dtoa_r+0xd0>
   83354:	dd800517 	ldw	r22,20(sp)
   83358:	04000044 	movi	r16,1
   8335c:	00000706 	br	8337c <_dtoa_r+0xb5c>
   83360:	d9400717 	ldw	r5,28(sp)
   83364:	d9001617 	ldw	r4,88(sp)
   83368:	01800284 	movi	r6,10
   8336c:	000f883a 	mov	r7,zero
   83370:	00867080 	call	86708 <__multadd>
   83374:	d8800715 	stw	r2,28(sp)
   83378:	84000044 	addi	r16,r16,1
   8337c:	d9000717 	ldw	r4,28(sp)
   83380:	900b883a 	mov	r5,r18
   83384:	00825dc0 	call	825dc <quorem>
   83388:	15c00c04 	addi	r23,r2,48
   8338c:	b5c00005 	stb	r23,0(r22)
   83390:	d8c00f17 	ldw	r3,60(sp)
   83394:	b5800044 	addi	r22,r22,1
   83398:	80fff116 	blt	r16,r3,83360 <_dtoa_r+0xb40>
   8339c:	d8000615 	stw	zero,24(sp)
   833a0:	d9400717 	ldw	r5,28(sp)
   833a4:	d9001617 	ldw	r4,88(sp)
   833a8:	01800044 	movi	r6,1
   833ac:	008632c0 	call	8632c <__lshift>
   833b0:	1009883a 	mov	r4,r2
   833b4:	900b883a 	mov	r5,r18
   833b8:	d8800715 	stw	r2,28(sp)
   833bc:	0085b440 	call	85b44 <__mcmp>
   833c0:	00803c0e 	bge	zero,r2,834b4 <_dtoa_r+0xc94>
   833c4:	b009883a 	mov	r4,r22
   833c8:	213fffc4 	addi	r4,r4,-1
   833cc:	21400003 	ldbu	r5,0(r4)
   833d0:	00800e44 	movi	r2,57
   833d4:	28c03fcc 	andi	r3,r5,255
   833d8:	18c0201c 	xori	r3,r3,128
   833dc:	18ffe004 	addi	r3,r3,-128
   833e0:	1881981e 	bne	r3,r2,83a44 <_dtoa_r+0x1224>
   833e4:	d9800517 	ldw	r6,20(sp)
   833e8:	21bff71e 	bne	r4,r6,833c8 <_dtoa_r+0xba8>
   833ec:	d8800d17 	ldw	r2,52(sp)
   833f0:	37000044 	addi	fp,r6,1
   833f4:	10800044 	addi	r2,r2,1
   833f8:	d8800d15 	stw	r2,52(sp)
   833fc:	00800c44 	movi	r2,49
   83400:	30800005 	stb	r2,0(r6)
   83404:	d9001617 	ldw	r4,88(sp)
   83408:	900b883a 	mov	r5,r18
   8340c:	00859e80 	call	859e8 <_Bfree>
   83410:	983ecd26 	beq	r19,zero,82f48 <_dtoa_r+0x728>
   83414:	d8c00617 	ldw	r3,24(sp)
   83418:	18000426 	beq	r3,zero,8342c <_dtoa_r+0xc0c>
   8341c:	1cc00326 	beq	r3,r19,8342c <_dtoa_r+0xc0c>
   83420:	d9001617 	ldw	r4,88(sp)
   83424:	180b883a 	mov	r5,r3
   83428:	00859e80 	call	859e8 <_Bfree>
   8342c:	d9001617 	ldw	r4,88(sp)
   83430:	980b883a 	mov	r5,r19
   83434:	00859e80 	call	859e8 <_Bfree>
   83438:	003ec306 	br	82f48 <_dtoa_r+0x728>
   8343c:	1805883a 	mov	r2,r3
   83440:	003eeb06 	br	82ff0 <_dtoa_r+0x7d0>
   83444:	d9800a17 	ldw	r6,40(sp)
   83448:	d8c01117 	ldw	r3,68(sp)
   8344c:	20bfff04 	addi	r2,r4,-4
   83450:	308d883a 	add	r6,r6,r2
   83454:	1887883a 	add	r3,r3,r2
   83458:	80a1883a 	add	r16,r16,r2
   8345c:	d9800a15 	stw	r6,40(sp)
   83460:	d8c01115 	stw	r3,68(sp)
   83464:	003f1d06 	br	830dc <_dtoa_r+0x8bc>
   83468:	a03f0c1e 	bne	r20,zero,8309c <_dtoa_r+0x87c>
   8346c:	00800434 	movhi	r2,16
   83470:	10bfffc4 	addi	r2,r2,-1
   83474:	a884703a 	and	r2,r21,r2
   83478:	103f081e 	bne	r2,zero,8309c <_dtoa_r+0x87c>
   8347c:	a89ffc2c 	andhi	r2,r21,32752
   83480:	103f0626 	beq	r2,zero,8309c <_dtoa_r+0x87c>
   83484:	d8c01117 	ldw	r3,68(sp)
   83488:	d9000a17 	ldw	r4,40(sp)
   8348c:	18c00044 	addi	r3,r3,1
   83490:	21000044 	addi	r4,r4,1
   83494:	d8c01115 	stw	r3,68(sp)
   83498:	d9000a15 	stw	r4,40(sp)
   8349c:	003f0006 	br	830a0 <_dtoa_r+0x880>
   834a0:	d9400717 	ldw	r5,28(sp)
   834a4:	d9001617 	ldw	r4,88(sp)
   834a8:	00868340 	call	86834 <__pow5mult>
   834ac:	d8800715 	stw	r2,28(sp)
   834b0:	003eed06 	br	83068 <_dtoa_r+0x848>
   834b4:	1000021e 	bne	r2,zero,834c0 <_dtoa_r+0xca0>
   834b8:	b880004c 	andi	r2,r23,1
   834bc:	103fc11e 	bne	r2,zero,833c4 <_dtoa_r+0xba4>
   834c0:	b5bfffc4 	addi	r22,r22,-1
   834c4:	b0c00007 	ldb	r3,0(r22)
   834c8:	00800c04 	movi	r2,48
   834cc:	18bffc26 	beq	r3,r2,834c0 <_dtoa_r+0xca0>
   834d0:	b7000044 	addi	fp,r22,1
   834d4:	003fcb06 	br	83404 <_dtoa_r+0xbe4>
   834d8:	d9800d17 	ldw	r6,52(sp)
   834dc:	018fc83a 	sub	r7,zero,r6
   834e0:	3801f726 	beq	r7,zero,83cc0 <_dtoa_r+0x14a0>
   834e4:	398003cc 	andi	r6,r7,15
   834e8:	300c90fa 	slli	r6,r6,3
   834ec:	01400274 	movhi	r5,9
   834f0:	2972c804 	addi	r5,r5,-13536
   834f4:	d9001217 	ldw	r4,72(sp)
   834f8:	314d883a 	add	r6,r6,r5
   834fc:	30c00117 	ldw	r3,4(r6)
   83500:	30800017 	ldw	r2,0(r6)
   83504:	d9401317 	ldw	r5,76(sp)
   83508:	3821d13a 	srai	r16,r7,4
   8350c:	100d883a 	mov	r6,r2
   83510:	180f883a 	mov	r7,r3
   83514:	0088a3c0 	call	88a3c <__muldf3>
   83518:	1011883a 	mov	r8,r2
   8351c:	1813883a 	mov	r9,r3
   83520:	1029883a 	mov	r20,r2
   83524:	182b883a 	mov	r21,r3
   83528:	8001e526 	beq	r16,zero,83cc0 <_dtoa_r+0x14a0>
   8352c:	05800084 	movi	r22,2
   83530:	04400274 	movhi	r17,9
   83534:	8c72fa04 	addi	r17,r17,-13336
   83538:	8080004c 	andi	r2,r16,1
   8353c:	1005003a 	cmpeq	r2,r2,zero
   83540:	1000081e 	bne	r2,zero,83564 <_dtoa_r+0xd44>
   83544:	89800017 	ldw	r6,0(r17)
   83548:	89c00117 	ldw	r7,4(r17)
   8354c:	480b883a 	mov	r5,r9
   83550:	4009883a 	mov	r4,r8
   83554:	0088a3c0 	call	88a3c <__muldf3>
   83558:	1011883a 	mov	r8,r2
   8355c:	b5800044 	addi	r22,r22,1
   83560:	1813883a 	mov	r9,r3
   83564:	8021d07a 	srai	r16,r16,1
   83568:	8c400204 	addi	r17,r17,8
   8356c:	803ff21e 	bne	r16,zero,83538 <_dtoa_r+0xd18>
   83570:	4029883a 	mov	r20,r8
   83574:	482b883a 	mov	r21,r9
   83578:	003dca06 	br	82ca4 <_dtoa_r+0x484>
   8357c:	d9000817 	ldw	r4,32(sp)
   83580:	2005003a 	cmpeq	r2,r4,zero
   83584:	1001f61e 	bne	r2,zero,83d60 <_dtoa_r+0x1540>
   83588:	dc001117 	ldw	r16,68(sp)
   8358c:	dc801017 	ldw	r18,64(sp)
   83590:	18c10cc4 	addi	r3,r3,1075
   83594:	003f6106 	br	8331c <_dtoa_r+0xafc>
   83598:	d8000b15 	stw	zero,44(sp)
   8359c:	d9802617 	ldw	r6,152(sp)
   835a0:	d8c00d17 	ldw	r3,52(sp)
   835a4:	30800044 	addi	r2,r6,1
   835a8:	18ad883a 	add	r22,r3,r2
   835ac:	b13fffc4 	addi	r4,r22,-1
   835b0:	d9000e15 	stw	r4,56(sp)
   835b4:	0581f60e 	bge	zero,r22,83d90 <_dtoa_r+0x1570>
   835b8:	dd800f15 	stw	r22,60(sp)
   835bc:	003f3006 	br	83280 <_dtoa_r+0xa60>
   835c0:	d8000b15 	stw	zero,44(sp)
   835c4:	d9002617 	ldw	r4,152(sp)
   835c8:	0101eb0e 	bge	zero,r4,83d78 <_dtoa_r+0x1558>
   835cc:	202d883a 	mov	r22,r4
   835d0:	d9000e15 	stw	r4,56(sp)
   835d4:	d9000f15 	stw	r4,60(sp)
   835d8:	003f2906 	br	83280 <_dtoa_r+0xa60>
   835dc:	01800044 	movi	r6,1
   835e0:	d9800b15 	stw	r6,44(sp)
   835e4:	003ff706 	br	835c4 <_dtoa_r+0xda4>
   835e8:	01000044 	movi	r4,1
   835ec:	d9000b15 	stw	r4,44(sp)
   835f0:	003fea06 	br	8359c <_dtoa_r+0xd7c>
   835f4:	04000c0e 	bge	zero,r16,83628 <_dtoa_r+0xe08>
   835f8:	d9400717 	ldw	r5,28(sp)
   835fc:	d9001617 	ldw	r4,88(sp)
   83600:	01800044 	movi	r6,1
   83604:	008632c0 	call	8632c <__lshift>
   83608:	1009883a 	mov	r4,r2
   8360c:	900b883a 	mov	r5,r18
   83610:	d8800715 	stw	r2,28(sp)
   83614:	0085b440 	call	85b44 <__mcmp>
   83618:	0081e00e 	bge	zero,r2,83d9c <_dtoa_r+0x157c>
   8361c:	bdc00044 	addi	r23,r23,1
   83620:	00800e84 	movi	r2,58
   83624:	b881a226 	beq	r23,r2,83cb0 <_dtoa_r+0x1490>
   83628:	b7000044 	addi	fp,r22,1
   8362c:	b5c00005 	stb	r23,0(r22)
   83630:	003f7406 	br	83404 <_dtoa_r+0xbe4>
   83634:	00800e44 	movi	r2,57
   83638:	b8819d26 	beq	r23,r2,83cb0 <_dtoa_r+0x1490>
   8363c:	053ffa0e 	bge	zero,r20,83628 <_dtoa_r+0xe08>
   83640:	8dc00c44 	addi	r23,r17,49
   83644:	003ff806 	br	83628 <_dtoa_r+0xe08>
   83648:	d9001617 	ldw	r4,88(sp)
   8364c:	a80b883a 	mov	r5,r21
   83650:	04000044 	movi	r16,1
   83654:	00859e80 	call	859e8 <_Bfree>
   83658:	003edf06 	br	831d8 <_dtoa_r+0x9b8>
   8365c:	d9001617 	ldw	r4,88(sp)
   83660:	980b883a 	mov	r5,r19
   83664:	01800284 	movi	r6,10
   83668:	000f883a 	mov	r7,zero
   8366c:	00867080 	call	86708 <__multadd>
   83670:	1027883a 	mov	r19,r2
   83674:	d8800615 	stw	r2,24(sp)
   83678:	003ebb06 	br	83168 <_dtoa_r+0x948>
   8367c:	d9801117 	ldw	r6,68(sp)
   83680:	d8800d17 	ldw	r2,52(sp)
   83684:	d8000915 	stw	zero,36(sp)
   83688:	308dc83a 	sub	r6,r6,r2
   8368c:	0087c83a 	sub	r3,zero,r2
   83690:	d9801115 	stw	r6,68(sp)
   83694:	d8c01015 	stw	r3,64(sp)
   83698:	003cfe06 	br	82a94 <_dtoa_r+0x274>
   8369c:	018dc83a 	sub	r6,zero,r6
   836a0:	d9801115 	stw	r6,68(sp)
   836a4:	d8000a15 	stw	zero,40(sp)
   836a8:	003cf306 	br	82a78 <_dtoa_r+0x258>
   836ac:	d9000d17 	ldw	r4,52(sp)
   836b0:	00893000 	call	89300 <__floatsidf>
   836b4:	880b883a 	mov	r5,r17
   836b8:	8009883a 	mov	r4,r16
   836bc:	180f883a 	mov	r7,r3
   836c0:	100d883a 	mov	r6,r2
   836c4:	00890e00 	call	890e0 <__nedf2>
   836c8:	103ce126 	beq	r2,zero,82a50 <_dtoa_r+0x230>
   836cc:	d9800d17 	ldw	r6,52(sp)
   836d0:	31bfffc4 	addi	r6,r6,-1
   836d4:	d9800d15 	stw	r6,52(sp)
   836d8:	003cdd06 	br	82a50 <_dtoa_r+0x230>
   836dc:	d9000717 	ldw	r4,28(sp)
   836e0:	900b883a 	mov	r5,r18
   836e4:	0085b440 	call	85b44 <__mcmp>
   836e8:	103e8d0e 	bge	r2,zero,83120 <_dtoa_r+0x900>
   836ec:	d9400717 	ldw	r5,28(sp)
   836f0:	d9001617 	ldw	r4,88(sp)
   836f4:	01800284 	movi	r6,10
   836f8:	000f883a 	mov	r7,zero
   836fc:	00867080 	call	86708 <__multadd>
   83700:	d9800d17 	ldw	r6,52(sp)
   83704:	d8800715 	stw	r2,28(sp)
   83708:	31bfffc4 	addi	r6,r6,-1
   8370c:	d9800d15 	stw	r6,52(sp)
   83710:	b001a71e 	bne	r22,zero,83db0 <_dtoa_r+0x1590>
   83714:	d8800e17 	ldw	r2,56(sp)
   83718:	d8800f15 	stw	r2,60(sp)
   8371c:	003e8006 	br	83120 <_dtoa_r+0x900>
   83720:	90800417 	ldw	r2,16(r18)
   83724:	1085883a 	add	r2,r2,r2
   83728:	1085883a 	add	r2,r2,r2
   8372c:	1485883a 	add	r2,r2,r18
   83730:	11000417 	ldw	r4,16(r2)
   83734:	0085a100 	call	85a10 <__hi0bits>
   83738:	00c00804 	movi	r3,32
   8373c:	1887c83a 	sub	r3,r3,r2
   83740:	003e5a06 	br	830ac <_dtoa_r+0x88c>
   83744:	d9400717 	ldw	r5,28(sp)
   83748:	d9801017 	ldw	r6,64(sp)
   8374c:	d9001617 	ldw	r4,88(sp)
   83750:	00868340 	call	86834 <__pow5mult>
   83754:	d8800715 	stw	r2,28(sp)
   83758:	003e4306 	br	83068 <_dtoa_r+0x848>
   8375c:	d9800f17 	ldw	r6,60(sp)
   83760:	d8800d17 	ldw	r2,52(sp)
   83764:	d9800315 	stw	r6,12(sp)
   83768:	d8800415 	stw	r2,16(sp)
   8376c:	d8c00b17 	ldw	r3,44(sp)
   83770:	1805003a 	cmpeq	r2,r3,zero
   83774:	1000e21e 	bne	r2,zero,83b00 <_dtoa_r+0x12e0>
   83778:	d9000317 	ldw	r4,12(sp)
   8377c:	0005883a 	mov	r2,zero
   83780:	00cff834 	movhi	r3,16352
   83784:	200c90fa 	slli	r6,r4,3
   83788:	01000274 	movhi	r4,9
   8378c:	2132c804 	addi	r4,r4,-13536
   83790:	180b883a 	mov	r5,r3
   83794:	310d883a 	add	r6,r6,r4
   83798:	327fff17 	ldw	r9,-4(r6)
   8379c:	323ffe17 	ldw	r8,-8(r6)
   837a0:	1009883a 	mov	r4,r2
   837a4:	480f883a 	mov	r7,r9
   837a8:	400d883a 	mov	r6,r8
   837ac:	0088e000 	call	88e00 <__divdf3>
   837b0:	180b883a 	mov	r5,r3
   837b4:	b00d883a 	mov	r6,r22
   837b8:	b80f883a 	mov	r7,r23
   837bc:	1009883a 	mov	r4,r2
   837c0:	00889480 	call	88948 <__subdf3>
   837c4:	a80b883a 	mov	r5,r21
   837c8:	a009883a 	mov	r4,r20
   837cc:	d8c01915 	stw	r3,100(sp)
   837d0:	d8801815 	stw	r2,96(sp)
   837d4:	00893f80 	call	893f8 <__fixdfsi>
   837d8:	1009883a 	mov	r4,r2
   837dc:	1027883a 	mov	r19,r2
   837e0:	00893000 	call	89300 <__floatsidf>
   837e4:	a80b883a 	mov	r5,r21
   837e8:	a009883a 	mov	r4,r20
   837ec:	180f883a 	mov	r7,r3
   837f0:	100d883a 	mov	r6,r2
   837f4:	00889480 	call	88948 <__subdf3>
   837f8:	d9801817 	ldw	r6,96(sp)
   837fc:	1823883a 	mov	r17,r3
   83800:	d8801415 	stw	r2,80(sp)
   83804:	302d883a 	mov	r22,r6
   83808:	d9800517 	ldw	r6,20(sp)
   8380c:	9cc00c04 	addi	r19,r19,48
   83810:	dc401515 	stw	r17,84(sp)
   83814:	d8c01917 	ldw	r3,100(sp)
   83818:	34c00005 	stb	r19,0(r6)
   8381c:	d8800517 	ldw	r2,20(sp)
   83820:	d9401917 	ldw	r5,100(sp)
   83824:	d9801417 	ldw	r6,80(sp)
   83828:	b009883a 	mov	r4,r22
   8382c:	880f883a 	mov	r7,r17
   83830:	182f883a 	mov	r23,r3
   83834:	17000044 	addi	fp,r2,1
   83838:	00891680 	call	89168 <__gtdf2>
   8383c:	00804e16 	blt	zero,r2,83978 <_dtoa_r+0x1158>
   83840:	d9801417 	ldw	r6,80(sp)
   83844:	0005883a 	mov	r2,zero
   83848:	00cffc34 	movhi	r3,16368
   8384c:	180b883a 	mov	r5,r3
   83850:	880f883a 	mov	r7,r17
   83854:	1009883a 	mov	r4,r2
   83858:	00889480 	call	88948 <__subdf3>
   8385c:	d9401917 	ldw	r5,100(sp)
   83860:	180f883a 	mov	r7,r3
   83864:	b009883a 	mov	r4,r22
   83868:	100d883a 	mov	r6,r2
   8386c:	00891680 	call	89168 <__gtdf2>
   83870:	00bda216 	blt	zero,r2,82efc <_dtoa_r+0x6dc>
   83874:	d8c00317 	ldw	r3,12(sp)
   83878:	00800044 	movi	r2,1
   8387c:	10c01216 	blt	r2,r3,838c8 <_dtoa_r+0x10a8>
   83880:	003d4506 	br	82d98 <_dtoa_r+0x578>
   83884:	d9801417 	ldw	r6,80(sp)
   83888:	0005883a 	mov	r2,zero
   8388c:	00cffc34 	movhi	r3,16368
   83890:	180b883a 	mov	r5,r3
   83894:	880f883a 	mov	r7,r17
   83898:	1009883a 	mov	r4,r2
   8389c:	00889480 	call	88948 <__subdf3>
   838a0:	d9c01b17 	ldw	r7,108(sp)
   838a4:	180b883a 	mov	r5,r3
   838a8:	1009883a 	mov	r4,r2
   838ac:	b00d883a 	mov	r6,r22
   838b0:	00892780 	call	89278 <__ltdf2>
   838b4:	103d9116 	blt	r2,zero,82efc <_dtoa_r+0x6dc>
   838b8:	d9800517 	ldw	r6,20(sp)
   838bc:	d9000317 	ldw	r4,12(sp)
   838c0:	3105883a 	add	r2,r6,r4
   838c4:	e0bd3426 	beq	fp,r2,82d98 <_dtoa_r+0x578>
   838c8:	04500934 	movhi	r17,16420
   838cc:	0021883a 	mov	r16,zero
   838d0:	b80b883a 	mov	r5,r23
   838d4:	b009883a 	mov	r4,r22
   838d8:	800d883a 	mov	r6,r16
   838dc:	880f883a 	mov	r7,r17
   838e0:	0088a3c0 	call	88a3c <__muldf3>
   838e4:	d9401517 	ldw	r5,84(sp)
   838e8:	d9001417 	ldw	r4,80(sp)
   838ec:	880f883a 	mov	r7,r17
   838f0:	000d883a 	mov	r6,zero
   838f4:	d8801a15 	stw	r2,104(sp)
   838f8:	d8c01b15 	stw	r3,108(sp)
   838fc:	0088a3c0 	call	88a3c <__muldf3>
   83900:	180b883a 	mov	r5,r3
   83904:	1009883a 	mov	r4,r2
   83908:	1823883a 	mov	r17,r3
   8390c:	1021883a 	mov	r16,r2
   83910:	00893f80 	call	893f8 <__fixdfsi>
   83914:	1009883a 	mov	r4,r2
   83918:	102b883a 	mov	r21,r2
   8391c:	00893000 	call	89300 <__floatsidf>
   83920:	880b883a 	mov	r5,r17
   83924:	8009883a 	mov	r4,r16
   83928:	180f883a 	mov	r7,r3
   8392c:	100d883a 	mov	r6,r2
   83930:	00889480 	call	88948 <__subdf3>
   83934:	1021883a 	mov	r16,r2
   83938:	d9001b17 	ldw	r4,108(sp)
   8393c:	1823883a 	mov	r17,r3
   83940:	dc001415 	stw	r16,80(sp)
   83944:	ad400c04 	addi	r21,r21,48
   83948:	dc401515 	stw	r17,84(sp)
   8394c:	d8801a17 	ldw	r2,104(sp)
   83950:	e5400005 	stb	r21,0(fp)
   83954:	202f883a 	mov	r23,r4
   83958:	d9c01b17 	ldw	r7,108(sp)
   8395c:	d9001417 	ldw	r4,80(sp)
   83960:	880b883a 	mov	r5,r17
   83964:	100d883a 	mov	r6,r2
   83968:	102d883a 	mov	r22,r2
   8396c:	e7000044 	addi	fp,fp,1
   83970:	00892780 	call	89278 <__ltdf2>
   83974:	103fc30e 	bge	r2,zero,83884 <_dtoa_r+0x1064>
   83978:	d9000417 	ldw	r4,16(sp)
   8397c:	d9000d15 	stw	r4,52(sp)
   83980:	003d7106 	br	82f48 <_dtoa_r+0x728>
   83984:	d9801717 	ldw	r6,92(sp)
   83988:	00800084 	movi	r2,2
   8398c:	11bde60e 	bge	r2,r6,83128 <_dtoa_r+0x908>
   83990:	203cfb1e 	bne	r4,zero,82d80 <_dtoa_r+0x560>
   83994:	d9001617 	ldw	r4,88(sp)
   83998:	900b883a 	mov	r5,r18
   8399c:	01800144 	movi	r6,5
   839a0:	000f883a 	mov	r7,zero
   839a4:	00867080 	call	86708 <__multadd>
   839a8:	d9000717 	ldw	r4,28(sp)
   839ac:	100b883a 	mov	r5,r2
   839b0:	1025883a 	mov	r18,r2
   839b4:	0085b440 	call	85b44 <__mcmp>
   839b8:	00bcf10e 	bge	zero,r2,82d80 <_dtoa_r+0x560>
   839bc:	d8c00d17 	ldw	r3,52(sp)
   839c0:	d9000517 	ldw	r4,20(sp)
   839c4:	d8000615 	stw	zero,24(sp)
   839c8:	18c00044 	addi	r3,r3,1
   839cc:	d8c00d15 	stw	r3,52(sp)
   839d0:	00800c44 	movi	r2,49
   839d4:	27000044 	addi	fp,r4,1
   839d8:	20800005 	stb	r2,0(r4)
   839dc:	003e8906 	br	83404 <_dtoa_r+0xbe4>
   839e0:	d8c00517 	ldw	r3,20(sp)
   839e4:	003bc206 	br	828f0 <_dtoa_r+0xd0>
   839e8:	01800274 	movhi	r6,9
   839ec:	31b2fa04 	addi	r6,r6,-13336
   839f0:	30c00917 	ldw	r3,36(r6)
   839f4:	30800817 	ldw	r2,32(r6)
   839f8:	d9001217 	ldw	r4,72(sp)
   839fc:	d9401317 	ldw	r5,76(sp)
   83a00:	180f883a 	mov	r7,r3
   83a04:	100d883a 	mov	r6,r2
   83a08:	0088e000 	call	88e00 <__divdf3>
   83a0c:	948003cc 	andi	r18,r18,15
   83a10:	058000c4 	movi	r22,3
   83a14:	1029883a 	mov	r20,r2
   83a18:	182b883a 	mov	r21,r3
   83a1c:	003c8906 	br	82c44 <_dtoa_r+0x424>
   83a20:	d9001017 	ldw	r4,64(sp)
   83a24:	d9800917 	ldw	r6,36(sp)
   83a28:	0025883a 	mov	r18,zero
   83a2c:	1105c83a 	sub	r2,r2,r4
   83a30:	2089883a 	add	r4,r4,r2
   83a34:	308d883a 	add	r6,r6,r2
   83a38:	d9001015 	stw	r4,64(sp)
   83a3c:	d9800915 	stw	r6,36(sp)
   83a40:	003e3206 	br	8330c <_dtoa_r+0xaec>
   83a44:	28800044 	addi	r2,r5,1
   83a48:	27000044 	addi	fp,r4,1
   83a4c:	20800005 	stb	r2,0(r4)
   83a50:	003e6c06 	br	83404 <_dtoa_r+0xbe4>
   83a54:	d8800f17 	ldw	r2,60(sp)
   83a58:	00bce016 	blt	zero,r2,82ddc <_dtoa_r+0x5bc>
   83a5c:	d9800f17 	ldw	r6,60(sp)
   83a60:	303cc51e 	bne	r6,zero,82d78 <_dtoa_r+0x558>
   83a64:	0005883a 	mov	r2,zero
   83a68:	00d00534 	movhi	r3,16404
   83a6c:	980b883a 	mov	r5,r19
   83a70:	180f883a 	mov	r7,r3
   83a74:	9009883a 	mov	r4,r18
   83a78:	100d883a 	mov	r6,r2
   83a7c:	0088a3c0 	call	88a3c <__muldf3>
   83a80:	180b883a 	mov	r5,r3
   83a84:	a80f883a 	mov	r7,r21
   83a88:	1009883a 	mov	r4,r2
   83a8c:	a00d883a 	mov	r6,r20
   83a90:	00891f00 	call	891f0 <__gedf2>
   83a94:	103cb80e 	bge	r2,zero,82d78 <_dtoa_r+0x558>
   83a98:	0027883a 	mov	r19,zero
   83a9c:	0025883a 	mov	r18,zero
   83aa0:	003fc606 	br	839bc <_dtoa_r+0x119c>
   83aa4:	99400117 	ldw	r5,4(r19)
   83aa8:	d9001617 	ldw	r4,88(sp)
   83aac:	0085f680 	call	85f68 <_Balloc>
   83ab0:	99800417 	ldw	r6,16(r19)
   83ab4:	11000304 	addi	r4,r2,12
   83ab8:	99400304 	addi	r5,r19,12
   83abc:	318d883a 	add	r6,r6,r6
   83ac0:	318d883a 	add	r6,r6,r6
   83ac4:	31800204 	addi	r6,r6,8
   83ac8:	1023883a 	mov	r17,r2
   83acc:	00857d00 	call	857d0 <memcpy>
   83ad0:	d9001617 	ldw	r4,88(sp)
   83ad4:	880b883a 	mov	r5,r17
   83ad8:	01800044 	movi	r6,1
   83adc:	008632c0 	call	8632c <__lshift>
   83ae0:	100b883a 	mov	r5,r2
   83ae4:	003d9c06 	br	83158 <_dtoa_r+0x938>
   83ae8:	00800e44 	movi	r2,57
   83aec:	b8807026 	beq	r23,r2,83cb0 <_dtoa_r+0x1490>
   83af0:	b8800044 	addi	r2,r23,1
   83af4:	b7000044 	addi	fp,r22,1
   83af8:	b0800005 	stb	r2,0(r22)
   83afc:	003e4106 	br	83404 <_dtoa_r+0xbe4>
   83b00:	d8800317 	ldw	r2,12(sp)
   83b04:	01800274 	movhi	r6,9
   83b08:	31b2c804 	addi	r6,r6,-13536
   83b0c:	b009883a 	mov	r4,r22
   83b10:	100e90fa 	slli	r7,r2,3
   83b14:	b80b883a 	mov	r5,r23
   83b18:	398f883a 	add	r7,r7,r6
   83b1c:	38bffe17 	ldw	r2,-8(r7)
   83b20:	d9800517 	ldw	r6,20(sp)
   83b24:	38ffff17 	ldw	r3,-4(r7)
   83b28:	37000044 	addi	fp,r6,1
   83b2c:	180f883a 	mov	r7,r3
   83b30:	100d883a 	mov	r6,r2
   83b34:	0088a3c0 	call	88a3c <__muldf3>
   83b38:	a80b883a 	mov	r5,r21
   83b3c:	a009883a 	mov	r4,r20
   83b40:	182f883a 	mov	r23,r3
   83b44:	102d883a 	mov	r22,r2
   83b48:	00893f80 	call	893f8 <__fixdfsi>
   83b4c:	1009883a 	mov	r4,r2
   83b50:	1027883a 	mov	r19,r2
   83b54:	00893000 	call	89300 <__floatsidf>
   83b58:	a80b883a 	mov	r5,r21
   83b5c:	a009883a 	mov	r4,r20
   83b60:	180f883a 	mov	r7,r3
   83b64:	100d883a 	mov	r6,r2
   83b68:	00889480 	call	88948 <__subdf3>
   83b6c:	180b883a 	mov	r5,r3
   83b70:	d8c00517 	ldw	r3,20(sp)
   83b74:	9cc00c04 	addi	r19,r19,48
   83b78:	1009883a 	mov	r4,r2
   83b7c:	1cc00005 	stb	r19,0(r3)
   83b80:	2021883a 	mov	r16,r4
   83b84:	d9000317 	ldw	r4,12(sp)
   83b88:	00800044 	movi	r2,1
   83b8c:	2823883a 	mov	r17,r5
   83b90:	20802226 	beq	r4,r2,83c1c <_dtoa_r+0x13fc>
   83b94:	1029883a 	mov	r20,r2
   83b98:	0005883a 	mov	r2,zero
   83b9c:	00d00934 	movhi	r3,16420
   83ba0:	180f883a 	mov	r7,r3
   83ba4:	100d883a 	mov	r6,r2
   83ba8:	880b883a 	mov	r5,r17
   83bac:	8009883a 	mov	r4,r16
   83bb0:	0088a3c0 	call	88a3c <__muldf3>
   83bb4:	180b883a 	mov	r5,r3
   83bb8:	1009883a 	mov	r4,r2
   83bbc:	1823883a 	mov	r17,r3
   83bc0:	1021883a 	mov	r16,r2
   83bc4:	00893f80 	call	893f8 <__fixdfsi>
   83bc8:	1009883a 	mov	r4,r2
   83bcc:	102b883a 	mov	r21,r2
   83bd0:	00893000 	call	89300 <__floatsidf>
   83bd4:	880b883a 	mov	r5,r17
   83bd8:	8009883a 	mov	r4,r16
   83bdc:	180f883a 	mov	r7,r3
   83be0:	100d883a 	mov	r6,r2
   83be4:	00889480 	call	88948 <__subdf3>
   83be8:	180b883a 	mov	r5,r3
   83bec:	d8c00517 	ldw	r3,20(sp)
   83bf0:	1009883a 	mov	r4,r2
   83bf4:	ad400c04 	addi	r21,r21,48
   83bf8:	1d05883a 	add	r2,r3,r20
   83bfc:	15400005 	stb	r21,0(r2)
   83c00:	2021883a 	mov	r16,r4
   83c04:	d9000317 	ldw	r4,12(sp)
   83c08:	a5000044 	addi	r20,r20,1
   83c0c:	2823883a 	mov	r17,r5
   83c10:	a13fe11e 	bne	r20,r4,83b98 <_dtoa_r+0x1378>
   83c14:	e505883a 	add	r2,fp,r20
   83c18:	173fffc4 	addi	fp,r2,-1
   83c1c:	0025883a 	mov	r18,zero
   83c20:	04cff834 	movhi	r19,16352
   83c24:	b009883a 	mov	r4,r22
   83c28:	b80b883a 	mov	r5,r23
   83c2c:	900d883a 	mov	r6,r18
   83c30:	980f883a 	mov	r7,r19
   83c34:	00889c80 	call	889c8 <__adddf3>
   83c38:	180b883a 	mov	r5,r3
   83c3c:	1009883a 	mov	r4,r2
   83c40:	800d883a 	mov	r6,r16
   83c44:	880f883a 	mov	r7,r17
   83c48:	00892780 	call	89278 <__ltdf2>
   83c4c:	103cab16 	blt	r2,zero,82efc <_dtoa_r+0x6dc>
   83c50:	0009883a 	mov	r4,zero
   83c54:	980b883a 	mov	r5,r19
   83c58:	b80f883a 	mov	r7,r23
   83c5c:	b00d883a 	mov	r6,r22
   83c60:	00889480 	call	88948 <__subdf3>
   83c64:	180b883a 	mov	r5,r3
   83c68:	880f883a 	mov	r7,r17
   83c6c:	1009883a 	mov	r4,r2
   83c70:	800d883a 	mov	r6,r16
   83c74:	00891680 	call	89168 <__gtdf2>
   83c78:	00bc470e 	bge	zero,r2,82d98 <_dtoa_r+0x578>
   83c7c:	00c00c04 	movi	r3,48
   83c80:	e73fffc4 	addi	fp,fp,-1
   83c84:	e0800007 	ldb	r2,0(fp)
   83c88:	10fffd26 	beq	r2,r3,83c80 <_dtoa_r+0x1460>
   83c8c:	d9800417 	ldw	r6,16(sp)
   83c90:	e7000044 	addi	fp,fp,1
   83c94:	d9800d15 	stw	r6,52(sp)
   83c98:	003cab06 	br	82f48 <_dtoa_r+0x728>
   83c9c:	d8c00f17 	ldw	r3,60(sp)
   83ca0:	d9001117 	ldw	r4,68(sp)
   83ca4:	20e1c83a 	sub	r16,r4,r3
   83ca8:	0007883a 	mov	r3,zero
   83cac:	003d9b06 	br	8331c <_dtoa_r+0xafc>
   83cb0:	00800e44 	movi	r2,57
   83cb4:	b0800005 	stb	r2,0(r22)
   83cb8:	b5800044 	addi	r22,r22,1
   83cbc:	003dc106 	br	833c4 <_dtoa_r+0xba4>
   83cc0:	05800084 	movi	r22,2
   83cc4:	003bf706 	br	82ca4 <_dtoa_r+0x484>
   83cc8:	d9000f17 	ldw	r4,60(sp)
   83ccc:	013c000e 	bge	zero,r4,82cd0 <_dtoa_r+0x4b0>
   83cd0:	d9800e17 	ldw	r6,56(sp)
   83cd4:	01bc300e 	bge	zero,r6,82d98 <_dtoa_r+0x578>
   83cd8:	0005883a 	mov	r2,zero
   83cdc:	00d00934 	movhi	r3,16420
   83ce0:	a80b883a 	mov	r5,r21
   83ce4:	180f883a 	mov	r7,r3
   83ce8:	a009883a 	mov	r4,r20
   83cec:	100d883a 	mov	r6,r2
   83cf0:	0088a3c0 	call	88a3c <__muldf3>
   83cf4:	b1000044 	addi	r4,r22,1
   83cf8:	1021883a 	mov	r16,r2
   83cfc:	1823883a 	mov	r17,r3
   83d00:	00893000 	call	89300 <__floatsidf>
   83d04:	880b883a 	mov	r5,r17
   83d08:	8009883a 	mov	r4,r16
   83d0c:	180f883a 	mov	r7,r3
   83d10:	100d883a 	mov	r6,r2
   83d14:	0088a3c0 	call	88a3c <__muldf3>
   83d18:	0011883a 	mov	r8,zero
   83d1c:	02500734 	movhi	r9,16412
   83d20:	180b883a 	mov	r5,r3
   83d24:	480f883a 	mov	r7,r9
   83d28:	1009883a 	mov	r4,r2
   83d2c:	400d883a 	mov	r6,r8
   83d30:	00889c80 	call	889c8 <__adddf3>
   83d34:	102d883a 	mov	r22,r2
   83d38:	00bf3034 	movhi	r2,64704
   83d3c:	10ef883a 	add	r23,r2,r3
   83d40:	d8800d17 	ldw	r2,52(sp)
   83d44:	d8c00e17 	ldw	r3,56(sp)
   83d48:	8029883a 	mov	r20,r16
   83d4c:	10bfffc4 	addi	r2,r2,-1
   83d50:	882b883a 	mov	r21,r17
   83d54:	d8800415 	stw	r2,16(sp)
   83d58:	d8c00315 	stw	r3,12(sp)
   83d5c:	003e8306 	br	8376c <_dtoa_r+0xf4c>
   83d60:	d8800117 	ldw	r2,4(sp)
   83d64:	dc001117 	ldw	r16,68(sp)
   83d68:	dc801017 	ldw	r18,64(sp)
   83d6c:	00c00d84 	movi	r3,54
   83d70:	1887c83a 	sub	r3,r3,r2
   83d74:	003d6906 	br	8331c <_dtoa_r+0xafc>
   83d78:	01800044 	movi	r6,1
   83d7c:	3021883a 	mov	r16,r6
   83d80:	d9800f15 	stw	r6,60(sp)
   83d84:	d9802615 	stw	r6,152(sp)
   83d88:	d9800e15 	stw	r6,56(sp)
   83d8c:	003b9306 	br	82bdc <_dtoa_r+0x3bc>
   83d90:	b021883a 	mov	r16,r22
   83d94:	dd800f15 	stw	r22,60(sp)
   83d98:	003b9006 	br	82bdc <_dtoa_r+0x3bc>
   83d9c:	103e221e 	bne	r2,zero,83628 <_dtoa_r+0xe08>
   83da0:	b880004c 	andi	r2,r23,1
   83da4:	1005003a 	cmpeq	r2,r2,zero
   83da8:	103e1f1e 	bne	r2,zero,83628 <_dtoa_r+0xe08>
   83dac:	003e1b06 	br	8361c <_dtoa_r+0xdfc>
   83db0:	d9001617 	ldw	r4,88(sp)
   83db4:	980b883a 	mov	r5,r19
   83db8:	01800284 	movi	r6,10
   83dbc:	000f883a 	mov	r7,zero
   83dc0:	00867080 	call	86708 <__multadd>
   83dc4:	d8c00e17 	ldw	r3,56(sp)
   83dc8:	1027883a 	mov	r19,r2
   83dcc:	d8c00f15 	stw	r3,60(sp)
   83dd0:	003cd306 	br	83120 <_dtoa_r+0x900>

00083dd4 <_fflush_r>:
   83dd4:	defffb04 	addi	sp,sp,-20
   83dd8:	dcc00315 	stw	r19,12(sp)
   83ddc:	dc800215 	stw	r18,8(sp)
   83de0:	dfc00415 	stw	ra,16(sp)
   83de4:	dc400115 	stw	r17,4(sp)
   83de8:	dc000015 	stw	r16,0(sp)
   83dec:	2027883a 	mov	r19,r4
   83df0:	2825883a 	mov	r18,r5
   83df4:	20000226 	beq	r4,zero,83e00 <_fflush_r+0x2c>
   83df8:	20800e17 	ldw	r2,56(r4)
   83dfc:	10005626 	beq	r2,zero,83f58 <_fflush_r+0x184>
   83e00:	9100030b 	ldhu	r4,12(r18)
   83e04:	20ffffcc 	andi	r3,r4,65535
   83e08:	18e0001c 	xori	r3,r3,32768
   83e0c:	18e00004 	addi	r3,r3,-32768
   83e10:	1880020c 	andi	r2,r3,8
   83e14:	1000261e 	bne	r2,zero,83eb0 <_fflush_r+0xdc>
   83e18:	90c00117 	ldw	r3,4(r18)
   83e1c:	20820014 	ori	r2,r4,2048
   83e20:	9080030d 	sth	r2,12(r18)
   83e24:	1009883a 	mov	r4,r2
   83e28:	00c0400e 	bge	zero,r3,83f2c <_fflush_r+0x158>
   83e2c:	92000a17 	ldw	r8,40(r18)
   83e30:	40004026 	beq	r8,zero,83f34 <_fflush_r+0x160>
   83e34:	2084000c 	andi	r2,r4,4096
   83e38:	10005326 	beq	r2,zero,83f88 <_fflush_r+0x1b4>
   83e3c:	94001417 	ldw	r16,80(r18)
   83e40:	9080030b 	ldhu	r2,12(r18)
   83e44:	1080010c 	andi	r2,r2,4
   83e48:	1000481e 	bne	r2,zero,83f6c <_fflush_r+0x198>
   83e4c:	91400717 	ldw	r5,28(r18)
   83e50:	9809883a 	mov	r4,r19
   83e54:	800d883a 	mov	r6,r16
   83e58:	000f883a 	mov	r7,zero
   83e5c:	403ee83a 	callr	r8
   83e60:	8080261e 	bne	r16,r2,83efc <_fflush_r+0x128>
   83e64:	9080030b 	ldhu	r2,12(r18)
   83e68:	91000417 	ldw	r4,16(r18)
   83e6c:	90000115 	stw	zero,4(r18)
   83e70:	10bdffcc 	andi	r2,r2,63487
   83e74:	10ffffcc 	andi	r3,r2,65535
   83e78:	18c4000c 	andi	r3,r3,4096
   83e7c:	9080030d 	sth	r2,12(r18)
   83e80:	91000015 	stw	r4,0(r18)
   83e84:	18002b26 	beq	r3,zero,83f34 <_fflush_r+0x160>
   83e88:	0007883a 	mov	r3,zero
   83e8c:	1805883a 	mov	r2,r3
   83e90:	94001415 	stw	r16,80(r18)
   83e94:	dfc00417 	ldw	ra,16(sp)
   83e98:	dcc00317 	ldw	r19,12(sp)
   83e9c:	dc800217 	ldw	r18,8(sp)
   83ea0:	dc400117 	ldw	r17,4(sp)
   83ea4:	dc000017 	ldw	r16,0(sp)
   83ea8:	dec00504 	addi	sp,sp,20
   83eac:	f800283a 	ret
   83eb0:	94400417 	ldw	r17,16(r18)
   83eb4:	88001f26 	beq	r17,zero,83f34 <_fflush_r+0x160>
   83eb8:	90800017 	ldw	r2,0(r18)
   83ebc:	18c000cc 	andi	r3,r3,3
   83ec0:	94400015 	stw	r17,0(r18)
   83ec4:	1461c83a 	sub	r16,r2,r17
   83ec8:	18002526 	beq	r3,zero,83f60 <_fflush_r+0x18c>
   83ecc:	0005883a 	mov	r2,zero
   83ed0:	90800215 	stw	r2,8(r18)
   83ed4:	0400170e 	bge	zero,r16,83f34 <_fflush_r+0x160>
   83ed8:	90c00917 	ldw	r3,36(r18)
   83edc:	91400717 	ldw	r5,28(r18)
   83ee0:	880d883a 	mov	r6,r17
   83ee4:	800f883a 	mov	r7,r16
   83ee8:	9809883a 	mov	r4,r19
   83eec:	183ee83a 	callr	r3
   83ef0:	88a3883a 	add	r17,r17,r2
   83ef4:	80a1c83a 	sub	r16,r16,r2
   83ef8:	00bff616 	blt	zero,r2,83ed4 <_fflush_r+0x100>
   83efc:	9080030b 	ldhu	r2,12(r18)
   83f00:	00ffffc4 	movi	r3,-1
   83f04:	10801014 	ori	r2,r2,64
   83f08:	9080030d 	sth	r2,12(r18)
   83f0c:	1805883a 	mov	r2,r3
   83f10:	dfc00417 	ldw	ra,16(sp)
   83f14:	dcc00317 	ldw	r19,12(sp)
   83f18:	dc800217 	ldw	r18,8(sp)
   83f1c:	dc400117 	ldw	r17,4(sp)
   83f20:	dc000017 	ldw	r16,0(sp)
   83f24:	dec00504 	addi	sp,sp,20
   83f28:	f800283a 	ret
   83f2c:	90800f17 	ldw	r2,60(r18)
   83f30:	00bfbe16 	blt	zero,r2,83e2c <_fflush_r+0x58>
   83f34:	0007883a 	mov	r3,zero
   83f38:	1805883a 	mov	r2,r3
   83f3c:	dfc00417 	ldw	ra,16(sp)
   83f40:	dcc00317 	ldw	r19,12(sp)
   83f44:	dc800217 	ldw	r18,8(sp)
   83f48:	dc400117 	ldw	r17,4(sp)
   83f4c:	dc000017 	ldw	r16,0(sp)
   83f50:	dec00504 	addi	sp,sp,20
   83f54:	f800283a 	ret
   83f58:	008406c0 	call	8406c <__sinit>
   83f5c:	003fa806 	br	83e00 <_fflush_r+0x2c>
   83f60:	90800517 	ldw	r2,20(r18)
   83f64:	90800215 	stw	r2,8(r18)
   83f68:	003fda06 	br	83ed4 <_fflush_r+0x100>
   83f6c:	90800117 	ldw	r2,4(r18)
   83f70:	90c00c17 	ldw	r3,48(r18)
   83f74:	80a1c83a 	sub	r16,r16,r2
   83f78:	183fb426 	beq	r3,zero,83e4c <_fflush_r+0x78>
   83f7c:	90800f17 	ldw	r2,60(r18)
   83f80:	80a1c83a 	sub	r16,r16,r2
   83f84:	003fb106 	br	83e4c <_fflush_r+0x78>
   83f88:	91400717 	ldw	r5,28(r18)
   83f8c:	9809883a 	mov	r4,r19
   83f90:	000d883a 	mov	r6,zero
   83f94:	01c00044 	movi	r7,1
   83f98:	403ee83a 	callr	r8
   83f9c:	1021883a 	mov	r16,r2
   83fa0:	00bfffc4 	movi	r2,-1
   83fa4:	80800226 	beq	r16,r2,83fb0 <_fflush_r+0x1dc>
   83fa8:	92000a17 	ldw	r8,40(r18)
   83fac:	003fa406 	br	83e40 <_fflush_r+0x6c>
   83fb0:	98c00017 	ldw	r3,0(r19)
   83fb4:	00800744 	movi	r2,29
   83fb8:	18bfde26 	beq	r3,r2,83f34 <_fflush_r+0x160>
   83fbc:	9080030b 	ldhu	r2,12(r18)
   83fc0:	8007883a 	mov	r3,r16
   83fc4:	10801014 	ori	r2,r2,64
   83fc8:	9080030d 	sth	r2,12(r18)
   83fcc:	003fcf06 	br	83f0c <_fflush_r+0x138>

00083fd0 <fflush>:
   83fd0:	01400234 	movhi	r5,8
   83fd4:	294f7504 	addi	r5,r5,15828
   83fd8:	2007883a 	mov	r3,r4
   83fdc:	20000526 	beq	r4,zero,83ff4 <fflush+0x24>
   83fe0:	00800274 	movhi	r2,9
   83fe4:	10b9ea04 	addi	r2,r2,-6232
   83fe8:	11000017 	ldw	r4,0(r2)
   83fec:	180b883a 	mov	r5,r3
   83ff0:	0083dd41 	jmpi	83dd4 <_fflush_r>
   83ff4:	00800274 	movhi	r2,9
   83ff8:	10b9eb04 	addi	r2,r2,-6228
   83ffc:	11000017 	ldw	r4,0(r2)
   84000:	0084bd41 	jmpi	84bd4 <_fwalk_reent>

00084004 <std>:
   84004:	00800234 	movhi	r2,8
   84008:	109c5204 	addi	r2,r2,29000
   8400c:	20800b15 	stw	r2,44(r4)
   84010:	00800234 	movhi	r2,8
   84014:	109c8d04 	addi	r2,r2,29236
   84018:	20800815 	stw	r2,32(r4)
   8401c:	00c00234 	movhi	r3,8
   84020:	18dc6e04 	addi	r3,r3,29112
   84024:	00800234 	movhi	r2,8
   84028:	109c5404 	addi	r2,r2,29008
   8402c:	2140030d 	sth	r5,12(r4)
   84030:	2180038d 	sth	r6,14(r4)
   84034:	20c00915 	stw	r3,36(r4)
   84038:	20800a15 	stw	r2,40(r4)
   8403c:	20000015 	stw	zero,0(r4)
   84040:	20000115 	stw	zero,4(r4)
   84044:	20000215 	stw	zero,8(r4)
   84048:	20000415 	stw	zero,16(r4)
   8404c:	20000515 	stw	zero,20(r4)
   84050:	20000615 	stw	zero,24(r4)
   84054:	21000715 	stw	r4,28(r4)
   84058:	f800283a 	ret

0008405c <__sfp_lock_acquire>:
   8405c:	f800283a 	ret

00084060 <__sfp_lock_release>:
   84060:	f800283a 	ret

00084064 <__sinit_lock_acquire>:
   84064:	f800283a 	ret

00084068 <__sinit_lock_release>:
   84068:	f800283a 	ret

0008406c <__sinit>:
   8406c:	20800e17 	ldw	r2,56(r4)
   84070:	defffd04 	addi	sp,sp,-12
   84074:	dc400115 	stw	r17,4(sp)
   84078:	dc000015 	stw	r16,0(sp)
   8407c:	dfc00215 	stw	ra,8(sp)
   84080:	04400044 	movi	r17,1
   84084:	01400104 	movi	r5,4
   84088:	000d883a 	mov	r6,zero
   8408c:	2021883a 	mov	r16,r4
   84090:	2200bb04 	addi	r8,r4,748
   84094:	200f883a 	mov	r7,r4
   84098:	10000526 	beq	r2,zero,840b0 <__sinit+0x44>
   8409c:	dfc00217 	ldw	ra,8(sp)
   840a0:	dc400117 	ldw	r17,4(sp)
   840a4:	dc000017 	ldw	r16,0(sp)
   840a8:	dec00304 	addi	sp,sp,12
   840ac:	f800283a 	ret
   840b0:	21000117 	ldw	r4,4(r4)
   840b4:	00800234 	movhi	r2,8
   840b8:	10905404 	addi	r2,r2,16720
   840bc:	00c000c4 	movi	r3,3
   840c0:	80800f15 	stw	r2,60(r16)
   840c4:	80c0b915 	stw	r3,740(r16)
   840c8:	8200ba15 	stw	r8,744(r16)
   840cc:	84400e15 	stw	r17,56(r16)
   840d0:	8000b815 	stw	zero,736(r16)
   840d4:	00840040 	call	84004 <std>
   840d8:	81000217 	ldw	r4,8(r16)
   840dc:	880d883a 	mov	r6,r17
   840e0:	800f883a 	mov	r7,r16
   840e4:	01400284 	movi	r5,10
   840e8:	00840040 	call	84004 <std>
   840ec:	81000317 	ldw	r4,12(r16)
   840f0:	800f883a 	mov	r7,r16
   840f4:	01400484 	movi	r5,18
   840f8:	01800084 	movi	r6,2
   840fc:	dfc00217 	ldw	ra,8(sp)
   84100:	dc400117 	ldw	r17,4(sp)
   84104:	dc000017 	ldw	r16,0(sp)
   84108:	dec00304 	addi	sp,sp,12
   8410c:	00840041 	jmpi	84004 <std>

00084110 <__fp_lock>:
   84110:	0005883a 	mov	r2,zero
   84114:	f800283a 	ret

00084118 <__fp_unlock>:
   84118:	0005883a 	mov	r2,zero
   8411c:	f800283a 	ret

00084120 <__fp_unlock_all>:
   84120:	00800274 	movhi	r2,9
   84124:	10b9ea04 	addi	r2,r2,-6232
   84128:	11000017 	ldw	r4,0(r2)
   8412c:	01400234 	movhi	r5,8
   84130:	29504604 	addi	r5,r5,16664
   84134:	0084c9c1 	jmpi	84c9c <_fwalk>

00084138 <__fp_lock_all>:
   84138:	00800274 	movhi	r2,9
   8413c:	10b9ea04 	addi	r2,r2,-6232
   84140:	11000017 	ldw	r4,0(r2)
   84144:	01400234 	movhi	r5,8
   84148:	29504404 	addi	r5,r5,16656
   8414c:	0084c9c1 	jmpi	84c9c <_fwalk>

00084150 <_cleanup_r>:
   84150:	01400234 	movhi	r5,8
   84154:	295da104 	addi	r5,r5,30340
   84158:	0084c9c1 	jmpi	84c9c <_fwalk>

0008415c <_cleanup>:
   8415c:	00800274 	movhi	r2,9
   84160:	10b9eb04 	addi	r2,r2,-6228
   84164:	11000017 	ldw	r4,0(r2)
   84168:	00841501 	jmpi	84150 <_cleanup_r>

0008416c <__sfmoreglue>:
   8416c:	defffc04 	addi	sp,sp,-16
   84170:	dc000015 	stw	r16,0(sp)
   84174:	2821883a 	mov	r16,r5
   84178:	dc400115 	stw	r17,4(sp)
   8417c:	01401704 	movi	r5,92
   84180:	2023883a 	mov	r17,r4
   84184:	8009883a 	mov	r4,r16
   84188:	dfc00315 	stw	ra,12(sp)
   8418c:	dcc00215 	stw	r19,8(sp)
   84190:	00897b00 	call	897b0 <__mulsi3>
   84194:	11400304 	addi	r5,r2,12
   84198:	8809883a 	mov	r4,r17
   8419c:	1027883a 	mov	r19,r2
   841a0:	0084fac0 	call	84fac <_malloc_r>
   841a4:	10c00304 	addi	r3,r2,12
   841a8:	1023883a 	mov	r17,r2
   841ac:	1809883a 	mov	r4,r3
   841b0:	980d883a 	mov	r6,r19
   841b4:	000b883a 	mov	r5,zero
   841b8:	10000b26 	beq	r2,zero,841e8 <__sfmoreglue+0x7c>
   841bc:	14000115 	stw	r16,4(r2)
   841c0:	10c00215 	stw	r3,8(r2)
   841c4:	10000015 	stw	zero,0(r2)
   841c8:	00859500 	call	85950 <memset>
   841cc:	8805883a 	mov	r2,r17
   841d0:	dfc00317 	ldw	ra,12(sp)
   841d4:	dcc00217 	ldw	r19,8(sp)
   841d8:	dc400117 	ldw	r17,4(sp)
   841dc:	dc000017 	ldw	r16,0(sp)
   841e0:	dec00404 	addi	sp,sp,16
   841e4:	f800283a 	ret
   841e8:	0023883a 	mov	r17,zero
   841ec:	8805883a 	mov	r2,r17
   841f0:	dfc00317 	ldw	ra,12(sp)
   841f4:	dcc00217 	ldw	r19,8(sp)
   841f8:	dc400117 	ldw	r17,4(sp)
   841fc:	dc000017 	ldw	r16,0(sp)
   84200:	dec00404 	addi	sp,sp,16
   84204:	f800283a 	ret

00084208 <__sfp>:
   84208:	defffd04 	addi	sp,sp,-12
   8420c:	00800274 	movhi	r2,9
   84210:	10b9eb04 	addi	r2,r2,-6228
   84214:	dc000015 	stw	r16,0(sp)
   84218:	14000017 	ldw	r16,0(r2)
   8421c:	dc400115 	stw	r17,4(sp)
   84220:	dfc00215 	stw	ra,8(sp)
   84224:	80800e17 	ldw	r2,56(r16)
   84228:	2023883a 	mov	r17,r4
   8422c:	10002626 	beq	r2,zero,842c8 <__sfp+0xc0>
   84230:	8400b804 	addi	r16,r16,736
   84234:	80800117 	ldw	r2,4(r16)
   84238:	81000217 	ldw	r4,8(r16)
   8423c:	10ffffc4 	addi	r3,r2,-1
   84240:	18000916 	blt	r3,zero,84268 <__sfp+0x60>
   84244:	2080030f 	ldh	r2,12(r4)
   84248:	10000b26 	beq	r2,zero,84278 <__sfp+0x70>
   8424c:	017fffc4 	movi	r5,-1
   84250:	00000206 	br	8425c <__sfp+0x54>
   84254:	2080030f 	ldh	r2,12(r4)
   84258:	10000726 	beq	r2,zero,84278 <__sfp+0x70>
   8425c:	18ffffc4 	addi	r3,r3,-1
   84260:	21001704 	addi	r4,r4,92
   84264:	197ffb1e 	bne	r3,r5,84254 <__sfp+0x4c>
   84268:	80800017 	ldw	r2,0(r16)
   8426c:	10001926 	beq	r2,zero,842d4 <__sfp+0xcc>
   84270:	1021883a 	mov	r16,r2
   84274:	003fef06 	br	84234 <__sfp+0x2c>
   84278:	00bfffc4 	movi	r2,-1
   8427c:	00c00044 	movi	r3,1
   84280:	2080038d 	sth	r2,14(r4)
   84284:	20c0030d 	sth	r3,12(r4)
   84288:	20000015 	stw	zero,0(r4)
   8428c:	20000215 	stw	zero,8(r4)
   84290:	20000115 	stw	zero,4(r4)
   84294:	20000415 	stw	zero,16(r4)
   84298:	20000515 	stw	zero,20(r4)
   8429c:	20000615 	stw	zero,24(r4)
   842a0:	20000c15 	stw	zero,48(r4)
   842a4:	20000d15 	stw	zero,52(r4)
   842a8:	20001115 	stw	zero,68(r4)
   842ac:	20001215 	stw	zero,72(r4)
   842b0:	2005883a 	mov	r2,r4
   842b4:	dfc00217 	ldw	ra,8(sp)
   842b8:	dc400117 	ldw	r17,4(sp)
   842bc:	dc000017 	ldw	r16,0(sp)
   842c0:	dec00304 	addi	sp,sp,12
   842c4:	f800283a 	ret
   842c8:	8009883a 	mov	r4,r16
   842cc:	008406c0 	call	8406c <__sinit>
   842d0:	003fd706 	br	84230 <__sfp+0x28>
   842d4:	8809883a 	mov	r4,r17
   842d8:	01400104 	movi	r5,4
   842dc:	008416c0 	call	8416c <__sfmoreglue>
   842e0:	80800015 	stw	r2,0(r16)
   842e4:	103fe21e 	bne	r2,zero,84270 <__sfp+0x68>
   842e8:	00800304 	movi	r2,12
   842ec:	0009883a 	mov	r4,zero
   842f0:	88800015 	stw	r2,0(r17)
   842f4:	003fee06 	br	842b0 <__sfp+0xa8>

000842f8 <_malloc_trim_r>:
   842f8:	defffb04 	addi	sp,sp,-20
   842fc:	dcc00315 	stw	r19,12(sp)
   84300:	04c00274 	movhi	r19,9
   84304:	9cf46604 	addi	r19,r19,-11880
   84308:	dc800215 	stw	r18,8(sp)
   8430c:	dc400115 	stw	r17,4(sp)
   84310:	dc000015 	stw	r16,0(sp)
   84314:	2823883a 	mov	r17,r5
   84318:	2025883a 	mov	r18,r4
   8431c:	dfc00415 	stw	ra,16(sp)
   84320:	008a5340 	call	8a534 <__malloc_lock>
   84324:	98800217 	ldw	r2,8(r19)
   84328:	9009883a 	mov	r4,r18
   8432c:	000b883a 	mov	r5,zero
   84330:	10c00117 	ldw	r3,4(r2)
   84334:	00bfff04 	movi	r2,-4
   84338:	18a0703a 	and	r16,r3,r2
   8433c:	8463c83a 	sub	r17,r16,r17
   84340:	8c43fbc4 	addi	r17,r17,4079
   84344:	8822d33a 	srli	r17,r17,12
   84348:	0083ffc4 	movi	r2,4095
   8434c:	8c7fffc4 	addi	r17,r17,-1
   84350:	8822933a 	slli	r17,r17,12
   84354:	1440060e 	bge	r2,r17,84370 <_malloc_trim_r+0x78>
   84358:	00870d80 	call	870d8 <_sbrk_r>
   8435c:	98c00217 	ldw	r3,8(r19)
   84360:	9009883a 	mov	r4,r18
   84364:	044bc83a 	sub	r5,zero,r17
   84368:	80c7883a 	add	r3,r16,r3
   8436c:	10c00926 	beq	r2,r3,84394 <_malloc_trim_r+0x9c>
   84370:	008a5540 	call	8a554 <__malloc_unlock>
   84374:	0005883a 	mov	r2,zero
   84378:	dfc00417 	ldw	ra,16(sp)
   8437c:	dcc00317 	ldw	r19,12(sp)
   84380:	dc800217 	ldw	r18,8(sp)
   84384:	dc400117 	ldw	r17,4(sp)
   84388:	dc000017 	ldw	r16,0(sp)
   8438c:	dec00504 	addi	sp,sp,20
   84390:	f800283a 	ret
   84394:	9009883a 	mov	r4,r18
   84398:	00870d80 	call	870d8 <_sbrk_r>
   8439c:	844dc83a 	sub	r6,r16,r17
   843a0:	00ffffc4 	movi	r3,-1
   843a4:	9009883a 	mov	r4,r18
   843a8:	000b883a 	mov	r5,zero
   843ac:	01c00274 	movhi	r7,9
   843b0:	39c09e04 	addi	r7,r7,632
   843b4:	31800054 	ori	r6,r6,1
   843b8:	10c00926 	beq	r2,r3,843e0 <_malloc_trim_r+0xe8>
   843bc:	38800017 	ldw	r2,0(r7)
   843c0:	98c00217 	ldw	r3,8(r19)
   843c4:	9009883a 	mov	r4,r18
   843c8:	1445c83a 	sub	r2,r2,r17
   843cc:	38800015 	stw	r2,0(r7)
   843d0:	19800115 	stw	r6,4(r3)
   843d4:	008a5540 	call	8a554 <__malloc_unlock>
   843d8:	00800044 	movi	r2,1
   843dc:	003fe606 	br	84378 <_malloc_trim_r+0x80>
   843e0:	00870d80 	call	870d8 <_sbrk_r>
   843e4:	99800217 	ldw	r6,8(r19)
   843e8:	100f883a 	mov	r7,r2
   843ec:	9009883a 	mov	r4,r18
   843f0:	1187c83a 	sub	r3,r2,r6
   843f4:	008003c4 	movi	r2,15
   843f8:	19400054 	ori	r5,r3,1
   843fc:	10ffdc0e 	bge	r2,r3,84370 <_malloc_trim_r+0x78>
   84400:	00800274 	movhi	r2,9
   84404:	10b9ef04 	addi	r2,r2,-6212
   84408:	10c00017 	ldw	r3,0(r2)
   8440c:	00800274 	movhi	r2,9
   84410:	10809e04 	addi	r2,r2,632
   84414:	31400115 	stw	r5,4(r6)
   84418:	38c7c83a 	sub	r3,r7,r3
   8441c:	10c00015 	stw	r3,0(r2)
   84420:	003fd306 	br	84370 <_malloc_trim_r+0x78>

00084424 <_free_r>:
   84424:	defffd04 	addi	sp,sp,-12
   84428:	dc400115 	stw	r17,4(sp)
   8442c:	dc000015 	stw	r16,0(sp)
   84430:	dfc00215 	stw	ra,8(sp)
   84434:	2821883a 	mov	r16,r5
   84438:	2023883a 	mov	r17,r4
   8443c:	28005a26 	beq	r5,zero,845a8 <_free_r+0x184>
   84440:	008a5340 	call	8a534 <__malloc_lock>
   84444:	823ffe04 	addi	r8,r16,-8
   84448:	41400117 	ldw	r5,4(r8)
   8444c:	00bfff84 	movi	r2,-2
   84450:	02800274 	movhi	r10,9
   84454:	52b46604 	addi	r10,r10,-11880
   84458:	288e703a 	and	r7,r5,r2
   8445c:	41cd883a 	add	r6,r8,r7
   84460:	30c00117 	ldw	r3,4(r6)
   84464:	51000217 	ldw	r4,8(r10)
   84468:	00bfff04 	movi	r2,-4
   8446c:	1892703a 	and	r9,r3,r2
   84470:	5017883a 	mov	r11,r10
   84474:	31006726 	beq	r6,r4,84614 <_free_r+0x1f0>
   84478:	2880004c 	andi	r2,r5,1
   8447c:	1005003a 	cmpeq	r2,r2,zero
   84480:	32400115 	stw	r9,4(r6)
   84484:	10001a1e 	bne	r2,zero,844f0 <_free_r+0xcc>
   84488:	000b883a 	mov	r5,zero
   8448c:	3247883a 	add	r3,r6,r9
   84490:	18800117 	ldw	r2,4(r3)
   84494:	1080004c 	andi	r2,r2,1
   84498:	1000231e 	bne	r2,zero,84528 <_free_r+0x104>
   8449c:	280ac03a 	cmpne	r5,r5,zero
   844a0:	3a4f883a 	add	r7,r7,r9
   844a4:	2800451e 	bne	r5,zero,845bc <_free_r+0x198>
   844a8:	31000217 	ldw	r4,8(r6)
   844ac:	00800274 	movhi	r2,9
   844b0:	10b46804 	addi	r2,r2,-11872
   844b4:	20807b26 	beq	r4,r2,846a4 <_free_r+0x280>
   844b8:	30800317 	ldw	r2,12(r6)
   844bc:	3a07883a 	add	r3,r7,r8
   844c0:	19c00015 	stw	r7,0(r3)
   844c4:	11000215 	stw	r4,8(r2)
   844c8:	20800315 	stw	r2,12(r4)
   844cc:	38800054 	ori	r2,r7,1
   844d0:	40800115 	stw	r2,4(r8)
   844d4:	28001a26 	beq	r5,zero,84540 <_free_r+0x11c>
   844d8:	8809883a 	mov	r4,r17
   844dc:	dfc00217 	ldw	ra,8(sp)
   844e0:	dc400117 	ldw	r17,4(sp)
   844e4:	dc000017 	ldw	r16,0(sp)
   844e8:	dec00304 	addi	sp,sp,12
   844ec:	008a5541 	jmpi	8a554 <__malloc_unlock>
   844f0:	80bffe17 	ldw	r2,-8(r16)
   844f4:	50c00204 	addi	r3,r10,8
   844f8:	4091c83a 	sub	r8,r8,r2
   844fc:	41000217 	ldw	r4,8(r8)
   84500:	388f883a 	add	r7,r7,r2
   84504:	20c06126 	beq	r4,r3,8468c <_free_r+0x268>
   84508:	40800317 	ldw	r2,12(r8)
   8450c:	3247883a 	add	r3,r6,r9
   84510:	000b883a 	mov	r5,zero
   84514:	11000215 	stw	r4,8(r2)
   84518:	20800315 	stw	r2,12(r4)
   8451c:	18800117 	ldw	r2,4(r3)
   84520:	1080004c 	andi	r2,r2,1
   84524:	103fdd26 	beq	r2,zero,8449c <_free_r+0x78>
   84528:	38800054 	ori	r2,r7,1
   8452c:	3a07883a 	add	r3,r7,r8
   84530:	280ac03a 	cmpne	r5,r5,zero
   84534:	40800115 	stw	r2,4(r8)
   84538:	19c00015 	stw	r7,0(r3)
   8453c:	283fe61e 	bne	r5,zero,844d8 <_free_r+0xb4>
   84540:	00807fc4 	movi	r2,511
   84544:	11c01f2e 	bgeu	r2,r7,845c4 <_free_r+0x1a0>
   84548:	3806d27a 	srli	r3,r7,9
   8454c:	1800481e 	bne	r3,zero,84670 <_free_r+0x24c>
   84550:	3804d0fa 	srli	r2,r7,3
   84554:	100690fa 	slli	r3,r2,3
   84558:	1acd883a 	add	r6,r3,r11
   8455c:	31400217 	ldw	r5,8(r6)
   84560:	31405926 	beq	r6,r5,846c8 <_free_r+0x2a4>
   84564:	28800117 	ldw	r2,4(r5)
   84568:	00ffff04 	movi	r3,-4
   8456c:	10c4703a 	and	r2,r2,r3
   84570:	3880022e 	bgeu	r7,r2,8457c <_free_r+0x158>
   84574:	29400217 	ldw	r5,8(r5)
   84578:	317ffa1e 	bne	r6,r5,84564 <_free_r+0x140>
   8457c:	29800317 	ldw	r6,12(r5)
   84580:	41800315 	stw	r6,12(r8)
   84584:	41400215 	stw	r5,8(r8)
   84588:	8809883a 	mov	r4,r17
   8458c:	2a000315 	stw	r8,12(r5)
   84590:	32000215 	stw	r8,8(r6)
   84594:	dfc00217 	ldw	ra,8(sp)
   84598:	dc400117 	ldw	r17,4(sp)
   8459c:	dc000017 	ldw	r16,0(sp)
   845a0:	dec00304 	addi	sp,sp,12
   845a4:	008a5541 	jmpi	8a554 <__malloc_unlock>
   845a8:	dfc00217 	ldw	ra,8(sp)
   845ac:	dc400117 	ldw	r17,4(sp)
   845b0:	dc000017 	ldw	r16,0(sp)
   845b4:	dec00304 	addi	sp,sp,12
   845b8:	f800283a 	ret
   845bc:	31000217 	ldw	r4,8(r6)
   845c0:	003fbd06 	br	844b8 <_free_r+0x94>
   845c4:	3806d0fa 	srli	r3,r7,3
   845c8:	00800044 	movi	r2,1
   845cc:	51400117 	ldw	r5,4(r10)
   845d0:	180890fa 	slli	r4,r3,3
   845d4:	1807d0ba 	srai	r3,r3,2
   845d8:	22c9883a 	add	r4,r4,r11
   845dc:	21800217 	ldw	r6,8(r4)
   845e0:	10c4983a 	sll	r2,r2,r3
   845e4:	41000315 	stw	r4,12(r8)
   845e8:	41800215 	stw	r6,8(r8)
   845ec:	288ab03a 	or	r5,r5,r2
   845f0:	22000215 	stw	r8,8(r4)
   845f4:	8809883a 	mov	r4,r17
   845f8:	51400115 	stw	r5,4(r10)
   845fc:	32000315 	stw	r8,12(r6)
   84600:	dfc00217 	ldw	ra,8(sp)
   84604:	dc400117 	ldw	r17,4(sp)
   84608:	dc000017 	ldw	r16,0(sp)
   8460c:	dec00304 	addi	sp,sp,12
   84610:	008a5541 	jmpi	8a554 <__malloc_unlock>
   84614:	2880004c 	andi	r2,r5,1
   84618:	3a4d883a 	add	r6,r7,r9
   8461c:	1000071e 	bne	r2,zero,8463c <_free_r+0x218>
   84620:	80bffe17 	ldw	r2,-8(r16)
   84624:	4091c83a 	sub	r8,r8,r2
   84628:	41000317 	ldw	r4,12(r8)
   8462c:	40c00217 	ldw	r3,8(r8)
   84630:	308d883a 	add	r6,r6,r2
   84634:	20c00215 	stw	r3,8(r4)
   84638:	19000315 	stw	r4,12(r3)
   8463c:	00800274 	movhi	r2,9
   84640:	10b9ee04 	addi	r2,r2,-6216
   84644:	11000017 	ldw	r4,0(r2)
   84648:	30c00054 	ori	r3,r6,1
   8464c:	52000215 	stw	r8,8(r10)
   84650:	40c00115 	stw	r3,4(r8)
   84654:	313fa036 	bltu	r6,r4,844d8 <_free_r+0xb4>
   84658:	00800274 	movhi	r2,9
   8465c:	10809404 	addi	r2,r2,592
   84660:	11400017 	ldw	r5,0(r2)
   84664:	8809883a 	mov	r4,r17
   84668:	00842f80 	call	842f8 <_malloc_trim_r>
   8466c:	003f9a06 	br	844d8 <_free_r+0xb4>
   84670:	00800104 	movi	r2,4
   84674:	10c0072e 	bgeu	r2,r3,84694 <_free_r+0x270>
   84678:	00800504 	movi	r2,20
   8467c:	10c01936 	bltu	r2,r3,846e4 <_free_r+0x2c0>
   84680:	188016c4 	addi	r2,r3,91
   84684:	100690fa 	slli	r3,r2,3
   84688:	003fb306 	br	84558 <_free_r+0x134>
   8468c:	01400044 	movi	r5,1
   84690:	003f7e06 	br	8448c <_free_r+0x68>
   84694:	3804d1ba 	srli	r2,r7,6
   84698:	10800e04 	addi	r2,r2,56
   8469c:	100690fa 	slli	r3,r2,3
   846a0:	003fad06 	br	84558 <_free_r+0x134>
   846a4:	22000315 	stw	r8,12(r4)
   846a8:	22000215 	stw	r8,8(r4)
   846ac:	3a05883a 	add	r2,r7,r8
   846b0:	38c00054 	ori	r3,r7,1
   846b4:	11c00015 	stw	r7,0(r2)
   846b8:	41000215 	stw	r4,8(r8)
   846bc:	40c00115 	stw	r3,4(r8)
   846c0:	41000315 	stw	r4,12(r8)
   846c4:	003f8406 	br	844d8 <_free_r+0xb4>
   846c8:	1005d0ba 	srai	r2,r2,2
   846cc:	00c00044 	movi	r3,1
   846d0:	51000117 	ldw	r4,4(r10)
   846d4:	1886983a 	sll	r3,r3,r2
   846d8:	20c8b03a 	or	r4,r4,r3
   846dc:	51000115 	stw	r4,4(r10)
   846e0:	003fa706 	br	84580 <_free_r+0x15c>
   846e4:	00801504 	movi	r2,84
   846e8:	10c00436 	bltu	r2,r3,846fc <_free_r+0x2d8>
   846ec:	3804d33a 	srli	r2,r7,12
   846f0:	10801b84 	addi	r2,r2,110
   846f4:	100690fa 	slli	r3,r2,3
   846f8:	003f9706 	br	84558 <_free_r+0x134>
   846fc:	00805504 	movi	r2,340
   84700:	10c00436 	bltu	r2,r3,84714 <_free_r+0x2f0>
   84704:	3804d3fa 	srli	r2,r7,15
   84708:	10801dc4 	addi	r2,r2,119
   8470c:	100690fa 	slli	r3,r2,3
   84710:	003f9106 	br	84558 <_free_r+0x134>
   84714:	00815504 	movi	r2,1364
   84718:	10c0032e 	bgeu	r2,r3,84728 <_free_r+0x304>
   8471c:	00801f84 	movi	r2,126
   84720:	00c0fc04 	movi	r3,1008
   84724:	003f8c06 	br	84558 <_free_r+0x134>
   84728:	3804d4ba 	srli	r2,r7,18
   8472c:	10801f04 	addi	r2,r2,124
   84730:	100690fa 	slli	r3,r2,3
   84734:	003f8806 	br	84558 <_free_r+0x134>

00084738 <__sfvwrite_r>:
   84738:	30800217 	ldw	r2,8(r6)
   8473c:	defff504 	addi	sp,sp,-44
   84740:	df000915 	stw	fp,36(sp)
   84744:	dd800715 	stw	r22,28(sp)
   84748:	dc800315 	stw	r18,12(sp)
   8474c:	dfc00a15 	stw	ra,40(sp)
   84750:	ddc00815 	stw	r23,32(sp)
   84754:	dd400615 	stw	r21,24(sp)
   84758:	dd000515 	stw	r20,20(sp)
   8475c:	dcc00415 	stw	r19,16(sp)
   84760:	dc400215 	stw	r17,8(sp)
   84764:	dc000115 	stw	r16,4(sp)
   84768:	302d883a 	mov	r22,r6
   8476c:	2039883a 	mov	fp,r4
   84770:	2825883a 	mov	r18,r5
   84774:	10001c26 	beq	r2,zero,847e8 <__sfvwrite_r+0xb0>
   84778:	29c0030b 	ldhu	r7,12(r5)
   8477c:	3880020c 	andi	r2,r7,8
   84780:	10002726 	beq	r2,zero,84820 <__sfvwrite_r+0xe8>
   84784:	28800417 	ldw	r2,16(r5)
   84788:	10002526 	beq	r2,zero,84820 <__sfvwrite_r+0xe8>
   8478c:	3880008c 	andi	r2,r7,2
   84790:	b5400017 	ldw	r21,0(r22)
   84794:	10002826 	beq	r2,zero,84838 <__sfvwrite_r+0x100>
   84798:	0021883a 	mov	r16,zero
   8479c:	0023883a 	mov	r17,zero
   847a0:	880d883a 	mov	r6,r17
   847a4:	e009883a 	mov	r4,fp
   847a8:	00810004 	movi	r2,1024
   847ac:	80006e26 	beq	r16,zero,84968 <__sfvwrite_r+0x230>
   847b0:	800f883a 	mov	r7,r16
   847b4:	91400717 	ldw	r5,28(r18)
   847b8:	1400012e 	bgeu	r2,r16,847c0 <__sfvwrite_r+0x88>
   847bc:	100f883a 	mov	r7,r2
   847c0:	90c00917 	ldw	r3,36(r18)
   847c4:	183ee83a 	callr	r3
   847c8:	1007883a 	mov	r3,r2
   847cc:	80a1c83a 	sub	r16,r16,r2
   847d0:	88a3883a 	add	r17,r17,r2
   847d4:	00806d0e 	bge	zero,r2,8498c <__sfvwrite_r+0x254>
   847d8:	b0800217 	ldw	r2,8(r22)
   847dc:	10c5c83a 	sub	r2,r2,r3
   847e0:	b0800215 	stw	r2,8(r22)
   847e4:	103fee1e 	bne	r2,zero,847a0 <__sfvwrite_r+0x68>
   847e8:	0009883a 	mov	r4,zero
   847ec:	2005883a 	mov	r2,r4
   847f0:	dfc00a17 	ldw	ra,40(sp)
   847f4:	df000917 	ldw	fp,36(sp)
   847f8:	ddc00817 	ldw	r23,32(sp)
   847fc:	dd800717 	ldw	r22,28(sp)
   84800:	dd400617 	ldw	r21,24(sp)
   84804:	dd000517 	ldw	r20,20(sp)
   84808:	dcc00417 	ldw	r19,16(sp)
   8480c:	dc800317 	ldw	r18,12(sp)
   84810:	dc400217 	ldw	r17,8(sp)
   84814:	dc000117 	ldw	r16,4(sp)
   84818:	dec00b04 	addi	sp,sp,44
   8481c:	f800283a 	ret
   84820:	00824a00 	call	824a0 <__swsetup_r>
   84824:	1000e41e 	bne	r2,zero,84bb8 <__sfvwrite_r+0x480>
   84828:	91c0030b 	ldhu	r7,12(r18)
   8482c:	b5400017 	ldw	r21,0(r22)
   84830:	3880008c 	andi	r2,r7,2
   84834:	103fd81e 	bne	r2,zero,84798 <__sfvwrite_r+0x60>
   84838:	3880004c 	andi	r2,r7,1
   8483c:	1005003a 	cmpeq	r2,r2,zero
   84840:	10005726 	beq	r2,zero,849a0 <__sfvwrite_r+0x268>
   84844:	0029883a 	mov	r20,zero
   84848:	002f883a 	mov	r23,zero
   8484c:	a0004226 	beq	r20,zero,84958 <__sfvwrite_r+0x220>
   84850:	3880800c 	andi	r2,r7,512
   84854:	94000217 	ldw	r16,8(r18)
   84858:	10008b26 	beq	r2,zero,84a88 <__sfvwrite_r+0x350>
   8485c:	800d883a 	mov	r6,r16
   84860:	a400a536 	bltu	r20,r16,84af8 <__sfvwrite_r+0x3c0>
   84864:	3881200c 	andi	r2,r7,1152
   84868:	10002726 	beq	r2,zero,84908 <__sfvwrite_r+0x1d0>
   8486c:	90800517 	ldw	r2,20(r18)
   84870:	92000417 	ldw	r8,16(r18)
   84874:	91400017 	ldw	r5,0(r18)
   84878:	1087883a 	add	r3,r2,r2
   8487c:	1887883a 	add	r3,r3,r2
   84880:	1808d7fa 	srli	r4,r3,31
   84884:	2a21c83a 	sub	r16,r5,r8
   84888:	80800044 	addi	r2,r16,1
   8488c:	20c9883a 	add	r4,r4,r3
   84890:	2027d07a 	srai	r19,r4,1
   84894:	a085883a 	add	r2,r20,r2
   84898:	980d883a 	mov	r6,r19
   8489c:	9880022e 	bgeu	r19,r2,848a8 <__sfvwrite_r+0x170>
   848a0:	1027883a 	mov	r19,r2
   848a4:	100d883a 	mov	r6,r2
   848a8:	3881000c 	andi	r2,r7,1024
   848ac:	1000b826 	beq	r2,zero,84b90 <__sfvwrite_r+0x458>
   848b0:	300b883a 	mov	r5,r6
   848b4:	e009883a 	mov	r4,fp
   848b8:	0084fac0 	call	84fac <_malloc_r>
   848bc:	10003126 	beq	r2,zero,84984 <__sfvwrite_r+0x24c>
   848c0:	91400417 	ldw	r5,16(r18)
   848c4:	1009883a 	mov	r4,r2
   848c8:	800d883a 	mov	r6,r16
   848cc:	1023883a 	mov	r17,r2
   848d0:	00857d00 	call	857d0 <memcpy>
   848d4:	90c0030b 	ldhu	r3,12(r18)
   848d8:	00beffc4 	movi	r2,-1025
   848dc:	1886703a 	and	r3,r3,r2
   848e0:	18c02014 	ori	r3,r3,128
   848e4:	90c0030d 	sth	r3,12(r18)
   848e8:	9c07c83a 	sub	r3,r19,r16
   848ec:	8c05883a 	add	r2,r17,r16
   848f0:	a00d883a 	mov	r6,r20
   848f4:	a021883a 	mov	r16,r20
   848f8:	90800015 	stw	r2,0(r18)
   848fc:	90c00215 	stw	r3,8(r18)
   84900:	94400415 	stw	r17,16(r18)
   84904:	94c00515 	stw	r19,20(r18)
   84908:	91000017 	ldw	r4,0(r18)
   8490c:	b80b883a 	mov	r5,r23
   84910:	a023883a 	mov	r17,r20
   84914:	00858700 	call	85870 <memmove>
   84918:	90c00217 	ldw	r3,8(r18)
   8491c:	90800017 	ldw	r2,0(r18)
   84920:	a027883a 	mov	r19,r20
   84924:	1c07c83a 	sub	r3,r3,r16
   84928:	1405883a 	add	r2,r2,r16
   8492c:	90c00215 	stw	r3,8(r18)
   84930:	a021883a 	mov	r16,r20
   84934:	90800015 	stw	r2,0(r18)
   84938:	b0800217 	ldw	r2,8(r22)
   8493c:	1405c83a 	sub	r2,r2,r16
   84940:	b0800215 	stw	r2,8(r22)
   84944:	103fa826 	beq	r2,zero,847e8 <__sfvwrite_r+0xb0>
   84948:	a469c83a 	sub	r20,r20,r17
   8494c:	91c0030b 	ldhu	r7,12(r18)
   84950:	bcef883a 	add	r23,r23,r19
   84954:	a03fbe1e 	bne	r20,zero,84850 <__sfvwrite_r+0x118>
   84958:	adc00017 	ldw	r23,0(r21)
   8495c:	ad000117 	ldw	r20,4(r21)
   84960:	ad400204 	addi	r21,r21,8
   84964:	003fb906 	br	8484c <__sfvwrite_r+0x114>
   84968:	ac400017 	ldw	r17,0(r21)
   8496c:	ac000117 	ldw	r16,4(r21)
   84970:	ad400204 	addi	r21,r21,8
   84974:	003f8a06 	br	847a0 <__sfvwrite_r+0x68>
   84978:	91400417 	ldw	r5,16(r18)
   8497c:	e009883a 	mov	r4,fp
   84980:	00844240 	call	84424 <_free_r>
   84984:	00800304 	movi	r2,12
   84988:	e0800015 	stw	r2,0(fp)
   8498c:	9080030b 	ldhu	r2,12(r18)
   84990:	013fffc4 	movi	r4,-1
   84994:	10801014 	ori	r2,r2,64
   84998:	9080030d 	sth	r2,12(r18)
   8499c:	003f9306 	br	847ec <__sfvwrite_r+0xb4>
   849a0:	0027883a 	mov	r19,zero
   849a4:	002f883a 	mov	r23,zero
   849a8:	d8000015 	stw	zero,0(sp)
   849ac:	0029883a 	mov	r20,zero
   849b0:	98001e26 	beq	r19,zero,84a2c <__sfvwrite_r+0x2f4>
   849b4:	d8c00017 	ldw	r3,0(sp)
   849b8:	1804c03a 	cmpne	r2,r3,zero
   849bc:	10005e26 	beq	r2,zero,84b38 <__sfvwrite_r+0x400>
   849c0:	9821883a 	mov	r16,r19
   849c4:	a4c0012e 	bgeu	r20,r19,849cc <__sfvwrite_r+0x294>
   849c8:	a021883a 	mov	r16,r20
   849cc:	91000017 	ldw	r4,0(r18)
   849d0:	90800417 	ldw	r2,16(r18)
   849d4:	91800217 	ldw	r6,8(r18)
   849d8:	91c00517 	ldw	r7,20(r18)
   849dc:	1100022e 	bgeu	r2,r4,849e8 <__sfvwrite_r+0x2b0>
   849e0:	31e3883a 	add	r17,r6,r7
   849e4:	8c001616 	blt	r17,r16,84a40 <__sfvwrite_r+0x308>
   849e8:	81c03816 	blt	r16,r7,84acc <__sfvwrite_r+0x394>
   849ec:	90c00917 	ldw	r3,36(r18)
   849f0:	91400717 	ldw	r5,28(r18)
   849f4:	e009883a 	mov	r4,fp
   849f8:	b80d883a 	mov	r6,r23
   849fc:	183ee83a 	callr	r3
   84a00:	1023883a 	mov	r17,r2
   84a04:	00bfe10e 	bge	zero,r2,8498c <__sfvwrite_r+0x254>
   84a08:	a469c83a 	sub	r20,r20,r17
   84a0c:	a0001826 	beq	r20,zero,84a70 <__sfvwrite_r+0x338>
   84a10:	b0800217 	ldw	r2,8(r22)
   84a14:	1445c83a 	sub	r2,r2,r17
   84a18:	b0800215 	stw	r2,8(r22)
   84a1c:	103f7226 	beq	r2,zero,847e8 <__sfvwrite_r+0xb0>
   84a20:	9c67c83a 	sub	r19,r19,r17
   84a24:	bc6f883a 	add	r23,r23,r17
   84a28:	983fe21e 	bne	r19,zero,849b4 <__sfvwrite_r+0x27c>
   84a2c:	adc00017 	ldw	r23,0(r21)
   84a30:	acc00117 	ldw	r19,4(r21)
   84a34:	ad400204 	addi	r21,r21,8
   84a38:	d8000015 	stw	zero,0(sp)
   84a3c:	003fdc06 	br	849b0 <__sfvwrite_r+0x278>
   84a40:	b80b883a 	mov	r5,r23
   84a44:	880d883a 	mov	r6,r17
   84a48:	00858700 	call	85870 <memmove>
   84a4c:	90c00017 	ldw	r3,0(r18)
   84a50:	e009883a 	mov	r4,fp
   84a54:	900b883a 	mov	r5,r18
   84a58:	1c47883a 	add	r3,r3,r17
   84a5c:	90c00015 	stw	r3,0(r18)
   84a60:	0083dd40 	call	83dd4 <_fflush_r>
   84a64:	103fc91e 	bne	r2,zero,8498c <__sfvwrite_r+0x254>
   84a68:	a469c83a 	sub	r20,r20,r17
   84a6c:	a03fe81e 	bne	r20,zero,84a10 <__sfvwrite_r+0x2d8>
   84a70:	e009883a 	mov	r4,fp
   84a74:	900b883a 	mov	r5,r18
   84a78:	0083dd40 	call	83dd4 <_fflush_r>
   84a7c:	103fc31e 	bne	r2,zero,8498c <__sfvwrite_r+0x254>
   84a80:	d8000015 	stw	zero,0(sp)
   84a84:	003fe206 	br	84a10 <__sfvwrite_r+0x2d8>
   84a88:	91000017 	ldw	r4,0(r18)
   84a8c:	90800417 	ldw	r2,16(r18)
   84a90:	1100022e 	bgeu	r2,r4,84a9c <__sfvwrite_r+0x364>
   84a94:	8023883a 	mov	r17,r16
   84a98:	85003136 	bltu	r16,r20,84b60 <__sfvwrite_r+0x428>
   84a9c:	91c00517 	ldw	r7,20(r18)
   84aa0:	a1c01836 	bltu	r20,r7,84b04 <__sfvwrite_r+0x3cc>
   84aa4:	90c00917 	ldw	r3,36(r18)
   84aa8:	91400717 	ldw	r5,28(r18)
   84aac:	e009883a 	mov	r4,fp
   84ab0:	b80d883a 	mov	r6,r23
   84ab4:	183ee83a 	callr	r3
   84ab8:	1021883a 	mov	r16,r2
   84abc:	00bfb30e 	bge	zero,r2,8498c <__sfvwrite_r+0x254>
   84ac0:	1023883a 	mov	r17,r2
   84ac4:	1027883a 	mov	r19,r2
   84ac8:	003f9b06 	br	84938 <__sfvwrite_r+0x200>
   84acc:	b80b883a 	mov	r5,r23
   84ad0:	800d883a 	mov	r6,r16
   84ad4:	00858700 	call	85870 <memmove>
   84ad8:	90c00217 	ldw	r3,8(r18)
   84adc:	90800017 	ldw	r2,0(r18)
   84ae0:	8023883a 	mov	r17,r16
   84ae4:	1c07c83a 	sub	r3,r3,r16
   84ae8:	1405883a 	add	r2,r2,r16
   84aec:	90c00215 	stw	r3,8(r18)
   84af0:	90800015 	stw	r2,0(r18)
   84af4:	003fc406 	br	84a08 <__sfvwrite_r+0x2d0>
   84af8:	a00d883a 	mov	r6,r20
   84afc:	a021883a 	mov	r16,r20
   84b00:	003f8106 	br	84908 <__sfvwrite_r+0x1d0>
   84b04:	b80b883a 	mov	r5,r23
   84b08:	a00d883a 	mov	r6,r20
   84b0c:	00858700 	call	85870 <memmove>
   84b10:	90c00217 	ldw	r3,8(r18)
   84b14:	90800017 	ldw	r2,0(r18)
   84b18:	a021883a 	mov	r16,r20
   84b1c:	1d07c83a 	sub	r3,r3,r20
   84b20:	1505883a 	add	r2,r2,r20
   84b24:	a023883a 	mov	r17,r20
   84b28:	a027883a 	mov	r19,r20
   84b2c:	90c00215 	stw	r3,8(r18)
   84b30:	90800015 	stw	r2,0(r18)
   84b34:	003f8006 	br	84938 <__sfvwrite_r+0x200>
   84b38:	b809883a 	mov	r4,r23
   84b3c:	01400284 	movi	r5,10
   84b40:	980d883a 	mov	r6,r19
   84b44:	00856ec0 	call	856ec <memchr>
   84b48:	10001726 	beq	r2,zero,84ba8 <__sfvwrite_r+0x470>
   84b4c:	15c5c83a 	sub	r2,r2,r23
   84b50:	15000044 	addi	r20,r2,1
   84b54:	00800044 	movi	r2,1
   84b58:	d8800015 	stw	r2,0(sp)
   84b5c:	003f9806 	br	849c0 <__sfvwrite_r+0x288>
   84b60:	b80b883a 	mov	r5,r23
   84b64:	800d883a 	mov	r6,r16
   84b68:	00858700 	call	85870 <memmove>
   84b6c:	90c00017 	ldw	r3,0(r18)
   84b70:	e009883a 	mov	r4,fp
   84b74:	900b883a 	mov	r5,r18
   84b78:	1c07883a 	add	r3,r3,r16
   84b7c:	90c00015 	stw	r3,0(r18)
   84b80:	8027883a 	mov	r19,r16
   84b84:	0083dd40 	call	83dd4 <_fflush_r>
   84b88:	103f6b26 	beq	r2,zero,84938 <__sfvwrite_r+0x200>
   84b8c:	003f7f06 	br	8498c <__sfvwrite_r+0x254>
   84b90:	400b883a 	mov	r5,r8
   84b94:	e009883a 	mov	r4,fp
   84b98:	0086a740 	call	86a74 <_realloc_r>
   84b9c:	103f7626 	beq	r2,zero,84978 <__sfvwrite_r+0x240>
   84ba0:	1023883a 	mov	r17,r2
   84ba4:	003f5006 	br	848e8 <__sfvwrite_r+0x1b0>
   84ba8:	00c00044 	movi	r3,1
   84bac:	9d000044 	addi	r20,r19,1
   84bb0:	d8c00015 	stw	r3,0(sp)
   84bb4:	003f8206 	br	849c0 <__sfvwrite_r+0x288>
   84bb8:	9080030b 	ldhu	r2,12(r18)
   84bbc:	00c00244 	movi	r3,9
   84bc0:	013fffc4 	movi	r4,-1
   84bc4:	10801014 	ori	r2,r2,64
   84bc8:	9080030d 	sth	r2,12(r18)
   84bcc:	e0c00015 	stw	r3,0(fp)
   84bd0:	003f0606 	br	847ec <__sfvwrite_r+0xb4>

00084bd4 <_fwalk_reent>:
   84bd4:	defff704 	addi	sp,sp,-36
   84bd8:	dcc00315 	stw	r19,12(sp)
   84bdc:	24c0b804 	addi	r19,r4,736
   84be0:	dd800615 	stw	r22,24(sp)
   84be4:	dd400515 	stw	r21,20(sp)
   84be8:	dfc00815 	stw	ra,32(sp)
   84bec:	ddc00715 	stw	r23,28(sp)
   84bf0:	dd000415 	stw	r20,16(sp)
   84bf4:	dc800215 	stw	r18,8(sp)
   84bf8:	dc400115 	stw	r17,4(sp)
   84bfc:	dc000015 	stw	r16,0(sp)
   84c00:	202b883a 	mov	r21,r4
   84c04:	282d883a 	mov	r22,r5
   84c08:	008405c0 	call	8405c <__sfp_lock_acquire>
   84c0c:	98002126 	beq	r19,zero,84c94 <_fwalk_reent+0xc0>
   84c10:	002f883a 	mov	r23,zero
   84c14:	9c800117 	ldw	r18,4(r19)
   84c18:	9c000217 	ldw	r16,8(r19)
   84c1c:	90bfffc4 	addi	r2,r18,-1
   84c20:	10000d16 	blt	r2,zero,84c58 <_fwalk_reent+0x84>
   84c24:	0023883a 	mov	r17,zero
   84c28:	053fffc4 	movi	r20,-1
   84c2c:	8080030f 	ldh	r2,12(r16)
   84c30:	8c400044 	addi	r17,r17,1
   84c34:	10000626 	beq	r2,zero,84c50 <_fwalk_reent+0x7c>
   84c38:	8080038f 	ldh	r2,14(r16)
   84c3c:	800b883a 	mov	r5,r16
   84c40:	a809883a 	mov	r4,r21
   84c44:	15000226 	beq	r2,r20,84c50 <_fwalk_reent+0x7c>
   84c48:	b03ee83a 	callr	r22
   84c4c:	b8aeb03a 	or	r23,r23,r2
   84c50:	84001704 	addi	r16,r16,92
   84c54:	947ff51e 	bne	r18,r17,84c2c <_fwalk_reent+0x58>
   84c58:	9cc00017 	ldw	r19,0(r19)
   84c5c:	983fed1e 	bne	r19,zero,84c14 <_fwalk_reent+0x40>
   84c60:	00840600 	call	84060 <__sfp_lock_release>
   84c64:	b805883a 	mov	r2,r23
   84c68:	dfc00817 	ldw	ra,32(sp)
   84c6c:	ddc00717 	ldw	r23,28(sp)
   84c70:	dd800617 	ldw	r22,24(sp)
   84c74:	dd400517 	ldw	r21,20(sp)
   84c78:	dd000417 	ldw	r20,16(sp)
   84c7c:	dcc00317 	ldw	r19,12(sp)
   84c80:	dc800217 	ldw	r18,8(sp)
   84c84:	dc400117 	ldw	r17,4(sp)
   84c88:	dc000017 	ldw	r16,0(sp)
   84c8c:	dec00904 	addi	sp,sp,36
   84c90:	f800283a 	ret
   84c94:	002f883a 	mov	r23,zero
   84c98:	003ff106 	br	84c60 <_fwalk_reent+0x8c>

00084c9c <_fwalk>:
   84c9c:	defff804 	addi	sp,sp,-32
   84ca0:	dcc00315 	stw	r19,12(sp)
   84ca4:	24c0b804 	addi	r19,r4,736
   84ca8:	dd400515 	stw	r21,20(sp)
   84cac:	dfc00715 	stw	ra,28(sp)
   84cb0:	dd800615 	stw	r22,24(sp)
   84cb4:	dd000415 	stw	r20,16(sp)
   84cb8:	dc800215 	stw	r18,8(sp)
   84cbc:	dc400115 	stw	r17,4(sp)
   84cc0:	dc000015 	stw	r16,0(sp)
   84cc4:	282b883a 	mov	r21,r5
   84cc8:	008405c0 	call	8405c <__sfp_lock_acquire>
   84ccc:	98001f26 	beq	r19,zero,84d4c <_fwalk+0xb0>
   84cd0:	002d883a 	mov	r22,zero
   84cd4:	9c800117 	ldw	r18,4(r19)
   84cd8:	9c000217 	ldw	r16,8(r19)
   84cdc:	90bfffc4 	addi	r2,r18,-1
   84ce0:	10000c16 	blt	r2,zero,84d14 <_fwalk+0x78>
   84ce4:	0023883a 	mov	r17,zero
   84ce8:	053fffc4 	movi	r20,-1
   84cec:	8080030f 	ldh	r2,12(r16)
   84cf0:	8c400044 	addi	r17,r17,1
   84cf4:	10000526 	beq	r2,zero,84d0c <_fwalk+0x70>
   84cf8:	8080038f 	ldh	r2,14(r16)
   84cfc:	8009883a 	mov	r4,r16
   84d00:	15000226 	beq	r2,r20,84d0c <_fwalk+0x70>
   84d04:	a83ee83a 	callr	r21
   84d08:	b0acb03a 	or	r22,r22,r2
   84d0c:	84001704 	addi	r16,r16,92
   84d10:	947ff61e 	bne	r18,r17,84cec <_fwalk+0x50>
   84d14:	9cc00017 	ldw	r19,0(r19)
   84d18:	983fee1e 	bne	r19,zero,84cd4 <_fwalk+0x38>
   84d1c:	00840600 	call	84060 <__sfp_lock_release>
   84d20:	b005883a 	mov	r2,r22
   84d24:	dfc00717 	ldw	ra,28(sp)
   84d28:	dd800617 	ldw	r22,24(sp)
   84d2c:	dd400517 	ldw	r21,20(sp)
   84d30:	dd000417 	ldw	r20,16(sp)
   84d34:	dcc00317 	ldw	r19,12(sp)
   84d38:	dc800217 	ldw	r18,8(sp)
   84d3c:	dc400117 	ldw	r17,4(sp)
   84d40:	dc000017 	ldw	r16,0(sp)
   84d44:	dec00804 	addi	sp,sp,32
   84d48:	f800283a 	ret
   84d4c:	002d883a 	mov	r22,zero
   84d50:	003ff206 	br	84d1c <_fwalk+0x80>

00084d54 <__locale_charset>:
   84d54:	d0a00317 	ldw	r2,-32756(gp)
   84d58:	f800283a 	ret

00084d5c <_localeconv_r>:
   84d5c:	00800274 	movhi	r2,9
   84d60:	10b2bc04 	addi	r2,r2,-13584
   84d64:	f800283a 	ret

00084d68 <localeconv>:
   84d68:	00800274 	movhi	r2,9
   84d6c:	10b9ea04 	addi	r2,r2,-6232
   84d70:	11000017 	ldw	r4,0(r2)
   84d74:	0084d5c1 	jmpi	84d5c <_localeconv_r>

00084d78 <_setlocale_r>:
   84d78:	defffc04 	addi	sp,sp,-16
   84d7c:	00c00274 	movhi	r3,9
   84d80:	18f2b704 	addi	r3,r3,-13604
   84d84:	dc800215 	stw	r18,8(sp)
   84d88:	dc400115 	stw	r17,4(sp)
   84d8c:	dc000015 	stw	r16,0(sp)
   84d90:	2023883a 	mov	r17,r4
   84d94:	2825883a 	mov	r18,r5
   84d98:	dfc00315 	stw	ra,12(sp)
   84d9c:	3021883a 	mov	r16,r6
   84da0:	3009883a 	mov	r4,r6
   84da4:	180b883a 	mov	r5,r3
   84da8:	30000926 	beq	r6,zero,84dd0 <_setlocale_r+0x58>
   84dac:	00872940 	call	87294 <strcmp>
   84db0:	8009883a 	mov	r4,r16
   84db4:	01400274 	movhi	r5,9
   84db8:	2972a204 	addi	r5,r5,-13688
   84dbc:	10000b1e 	bne	r2,zero,84dec <_setlocale_r+0x74>
   84dc0:	8c000d15 	stw	r16,52(r17)
   84dc4:	8c800c15 	stw	r18,48(r17)
   84dc8:	00c00274 	movhi	r3,9
   84dcc:	18f2b704 	addi	r3,r3,-13604
   84dd0:	1805883a 	mov	r2,r3
   84dd4:	dfc00317 	ldw	ra,12(sp)
   84dd8:	dc800217 	ldw	r18,8(sp)
   84ddc:	dc400117 	ldw	r17,4(sp)
   84de0:	dc000017 	ldw	r16,0(sp)
   84de4:	dec00404 	addi	sp,sp,16
   84de8:	f800283a 	ret
   84dec:	00872940 	call	87294 <strcmp>
   84df0:	0007883a 	mov	r3,zero
   84df4:	103ff226 	beq	r2,zero,84dc0 <_setlocale_r+0x48>
   84df8:	003ff506 	br	84dd0 <_setlocale_r+0x58>

00084dfc <setlocale>:
   84dfc:	01800274 	movhi	r6,9
   84e00:	31b9ea04 	addi	r6,r6,-6232
   84e04:	2007883a 	mov	r3,r4
   84e08:	31000017 	ldw	r4,0(r6)
   84e0c:	280d883a 	mov	r6,r5
   84e10:	180b883a 	mov	r5,r3
   84e14:	0084d781 	jmpi	84d78 <_setlocale_r>

00084e18 <__smakebuf_r>:
   84e18:	2880030b 	ldhu	r2,12(r5)
   84e1c:	deffed04 	addi	sp,sp,-76
   84e20:	dc401015 	stw	r17,64(sp)
   84e24:	1080008c 	andi	r2,r2,2
   84e28:	dc000f15 	stw	r16,60(sp)
   84e2c:	dfc01215 	stw	ra,72(sp)
   84e30:	dc801115 	stw	r18,68(sp)
   84e34:	2821883a 	mov	r16,r5
   84e38:	2023883a 	mov	r17,r4
   84e3c:	10000b26 	beq	r2,zero,84e6c <__smakebuf_r+0x54>
   84e40:	28c010c4 	addi	r3,r5,67
   84e44:	00800044 	movi	r2,1
   84e48:	28800515 	stw	r2,20(r5)
   84e4c:	28c00415 	stw	r3,16(r5)
   84e50:	28c00015 	stw	r3,0(r5)
   84e54:	dfc01217 	ldw	ra,72(sp)
   84e58:	dc801117 	ldw	r18,68(sp)
   84e5c:	dc401017 	ldw	r17,64(sp)
   84e60:	dc000f17 	ldw	r16,60(sp)
   84e64:	dec01304 	addi	sp,sp,76
   84e68:	f800283a 	ret
   84e6c:	2940038f 	ldh	r5,14(r5)
   84e70:	28002116 	blt	r5,zero,84ef8 <__smakebuf_r+0xe0>
   84e74:	d80d883a 	mov	r6,sp
   84e78:	00876980 	call	87698 <_fstat_r>
   84e7c:	10001e16 	blt	r2,zero,84ef8 <__smakebuf_r+0xe0>
   84e80:	d8800117 	ldw	r2,4(sp)
   84e84:	00e00014 	movui	r3,32768
   84e88:	113c000c 	andi	r4,r2,61440
   84e8c:	20c03126 	beq	r4,r3,84f54 <__smakebuf_r+0x13c>
   84e90:	8080030b 	ldhu	r2,12(r16)
   84e94:	00c80004 	movi	r3,8192
   84e98:	10820014 	ori	r2,r2,2048
   84e9c:	8080030d 	sth	r2,12(r16)
   84ea0:	20c01e26 	beq	r4,r3,84f1c <__smakebuf_r+0x104>
   84ea4:	04810004 	movi	r18,1024
   84ea8:	8809883a 	mov	r4,r17
   84eac:	900b883a 	mov	r5,r18
   84eb0:	0084fac0 	call	84fac <_malloc_r>
   84eb4:	1009883a 	mov	r4,r2
   84eb8:	10003126 	beq	r2,zero,84f80 <__smakebuf_r+0x168>
   84ebc:	80c0030b 	ldhu	r3,12(r16)
   84ec0:	00800234 	movhi	r2,8
   84ec4:	10905404 	addi	r2,r2,16720
   84ec8:	88800f15 	stw	r2,60(r17)
   84ecc:	18c02014 	ori	r3,r3,128
   84ed0:	84800515 	stw	r18,20(r16)
   84ed4:	80c0030d 	sth	r3,12(r16)
   84ed8:	81000415 	stw	r4,16(r16)
   84edc:	81000015 	stw	r4,0(r16)
   84ee0:	dfc01217 	ldw	ra,72(sp)
   84ee4:	dc801117 	ldw	r18,68(sp)
   84ee8:	dc401017 	ldw	r17,64(sp)
   84eec:	dc000f17 	ldw	r16,60(sp)
   84ef0:	dec01304 	addi	sp,sp,76
   84ef4:	f800283a 	ret
   84ef8:	80c0030b 	ldhu	r3,12(r16)
   84efc:	1880200c 	andi	r2,r3,128
   84f00:	10000426 	beq	r2,zero,84f14 <__smakebuf_r+0xfc>
   84f04:	04801004 	movi	r18,64
   84f08:	18820014 	ori	r2,r3,2048
   84f0c:	8080030d 	sth	r2,12(r16)
   84f10:	003fe506 	br	84ea8 <__smakebuf_r+0x90>
   84f14:	04810004 	movi	r18,1024
   84f18:	003ffb06 	br	84f08 <__smakebuf_r+0xf0>
   84f1c:	8140038f 	ldh	r5,14(r16)
   84f20:	8809883a 	mov	r4,r17
   84f24:	008770c0 	call	8770c <_isatty_r>
   84f28:	103fde26 	beq	r2,zero,84ea4 <__smakebuf_r+0x8c>
   84f2c:	8080030b 	ldhu	r2,12(r16)
   84f30:	80c010c4 	addi	r3,r16,67
   84f34:	04810004 	movi	r18,1024
   84f38:	10800054 	ori	r2,r2,1
   84f3c:	8080030d 	sth	r2,12(r16)
   84f40:	00800044 	movi	r2,1
   84f44:	80c00415 	stw	r3,16(r16)
   84f48:	80800515 	stw	r2,20(r16)
   84f4c:	80c00015 	stw	r3,0(r16)
   84f50:	003fd506 	br	84ea8 <__smakebuf_r+0x90>
   84f54:	80c00a17 	ldw	r3,40(r16)
   84f58:	00800234 	movhi	r2,8
   84f5c:	109c5404 	addi	r2,r2,29008
   84f60:	18bfcb1e 	bne	r3,r2,84e90 <__smakebuf_r+0x78>
   84f64:	8080030b 	ldhu	r2,12(r16)
   84f68:	00c10004 	movi	r3,1024
   84f6c:	1825883a 	mov	r18,r3
   84f70:	10c4b03a 	or	r2,r2,r3
   84f74:	8080030d 	sth	r2,12(r16)
   84f78:	80c01315 	stw	r3,76(r16)
   84f7c:	003fca06 	br	84ea8 <__smakebuf_r+0x90>
   84f80:	8100030b 	ldhu	r4,12(r16)
   84f84:	2080800c 	andi	r2,r4,512
   84f88:	103fb21e 	bne	r2,zero,84e54 <__smakebuf_r+0x3c>
   84f8c:	80c010c4 	addi	r3,r16,67
   84f90:	21000094 	ori	r4,r4,2
   84f94:	00800044 	movi	r2,1
   84f98:	80800515 	stw	r2,20(r16)
   84f9c:	8100030d 	sth	r4,12(r16)
   84fa0:	80c00415 	stw	r3,16(r16)
   84fa4:	80c00015 	stw	r3,0(r16)
   84fa8:	003faa06 	br	84e54 <__smakebuf_r+0x3c>

00084fac <_malloc_r>:
   84fac:	defff604 	addi	sp,sp,-40
   84fb0:	28c002c4 	addi	r3,r5,11
   84fb4:	00800584 	movi	r2,22
   84fb8:	dc800215 	stw	r18,8(sp)
   84fbc:	dfc00915 	stw	ra,36(sp)
   84fc0:	df000815 	stw	fp,32(sp)
   84fc4:	ddc00715 	stw	r23,28(sp)
   84fc8:	dd800615 	stw	r22,24(sp)
   84fcc:	dd400515 	stw	r21,20(sp)
   84fd0:	dd000415 	stw	r20,16(sp)
   84fd4:	dcc00315 	stw	r19,12(sp)
   84fd8:	dc400115 	stw	r17,4(sp)
   84fdc:	dc000015 	stw	r16,0(sp)
   84fe0:	2025883a 	mov	r18,r4
   84fe4:	10c01236 	bltu	r2,r3,85030 <_malloc_r+0x84>
   84fe8:	04400404 	movi	r17,16
   84fec:	8940142e 	bgeu	r17,r5,85040 <_malloc_r+0x94>
   84ff0:	00800304 	movi	r2,12
   84ff4:	0007883a 	mov	r3,zero
   84ff8:	90800015 	stw	r2,0(r18)
   84ffc:	1805883a 	mov	r2,r3
   85000:	dfc00917 	ldw	ra,36(sp)
   85004:	df000817 	ldw	fp,32(sp)
   85008:	ddc00717 	ldw	r23,28(sp)
   8500c:	dd800617 	ldw	r22,24(sp)
   85010:	dd400517 	ldw	r21,20(sp)
   85014:	dd000417 	ldw	r20,16(sp)
   85018:	dcc00317 	ldw	r19,12(sp)
   8501c:	dc800217 	ldw	r18,8(sp)
   85020:	dc400117 	ldw	r17,4(sp)
   85024:	dc000017 	ldw	r16,0(sp)
   85028:	dec00a04 	addi	sp,sp,40
   8502c:	f800283a 	ret
   85030:	00bffe04 	movi	r2,-8
   85034:	18a2703a 	and	r17,r3,r2
   85038:	883fed16 	blt	r17,zero,84ff0 <_malloc_r+0x44>
   8503c:	897fec36 	bltu	r17,r5,84ff0 <_malloc_r+0x44>
   85040:	9009883a 	mov	r4,r18
   85044:	008a5340 	call	8a534 <__malloc_lock>
   85048:	00807dc4 	movi	r2,503
   8504c:	14402b2e 	bgeu	r2,r17,850fc <_malloc_r+0x150>
   85050:	8806d27a 	srli	r3,r17,9
   85054:	18003f1e 	bne	r3,zero,85154 <_malloc_r+0x1a8>
   85058:	880cd0fa 	srli	r6,r17,3
   8505c:	300490fa 	slli	r2,r6,3
   85060:	02c00274 	movhi	r11,9
   85064:	5af46604 	addi	r11,r11,-11880
   85068:	12cb883a 	add	r5,r2,r11
   8506c:	2c000317 	ldw	r16,12(r5)
   85070:	580f883a 	mov	r7,r11
   85074:	2c00041e 	bne	r5,r16,85088 <_malloc_r+0xdc>
   85078:	00000a06 	br	850a4 <_malloc_r+0xf8>
   8507c:	1800860e 	bge	r3,zero,85298 <_malloc_r+0x2ec>
   85080:	84000317 	ldw	r16,12(r16)
   85084:	2c000726 	beq	r5,r16,850a4 <_malloc_r+0xf8>
   85088:	80800117 	ldw	r2,4(r16)
   8508c:	00ffff04 	movi	r3,-4
   85090:	10c8703a 	and	r4,r2,r3
   85094:	2447c83a 	sub	r3,r4,r17
   85098:	008003c4 	movi	r2,15
   8509c:	10fff70e 	bge	r2,r3,8507c <_malloc_r+0xd0>
   850a0:	31bfffc4 	addi	r6,r6,-1
   850a4:	32400044 	addi	r9,r6,1
   850a8:	02800274 	movhi	r10,9
   850ac:	52b46804 	addi	r10,r10,-11872
   850b0:	54000217 	ldw	r16,8(r10)
   850b4:	8280a026 	beq	r16,r10,85338 <_malloc_r+0x38c>
   850b8:	80800117 	ldw	r2,4(r16)
   850bc:	00ffff04 	movi	r3,-4
   850c0:	10ca703a 	and	r5,r2,r3
   850c4:	2c4dc83a 	sub	r6,r5,r17
   850c8:	008003c4 	movi	r2,15
   850cc:	11808316 	blt	r2,r6,852dc <_malloc_r+0x330>
   850d0:	52800315 	stw	r10,12(r10)
   850d4:	52800215 	stw	r10,8(r10)
   850d8:	30002916 	blt	r6,zero,85180 <_malloc_r+0x1d4>
   850dc:	8147883a 	add	r3,r16,r5
   850e0:	18800117 	ldw	r2,4(r3)
   850e4:	9009883a 	mov	r4,r18
   850e8:	10800054 	ori	r2,r2,1
   850ec:	18800115 	stw	r2,4(r3)
   850f0:	008a5540 	call	8a554 <__malloc_unlock>
   850f4:	80c00204 	addi	r3,r16,8
   850f8:	003fc006 	br	84ffc <_malloc_r+0x50>
   850fc:	02c00274 	movhi	r11,9
   85100:	5af46604 	addi	r11,r11,-11880
   85104:	8ac5883a 	add	r2,r17,r11
   85108:	14000317 	ldw	r16,12(r2)
   8510c:	580f883a 	mov	r7,r11
   85110:	8806d0fa 	srli	r3,r17,3
   85114:	14006c26 	beq	r2,r16,852c8 <_malloc_r+0x31c>
   85118:	80c00117 	ldw	r3,4(r16)
   8511c:	00bfff04 	movi	r2,-4
   85120:	81800317 	ldw	r6,12(r16)
   85124:	1886703a 	and	r3,r3,r2
   85128:	80c7883a 	add	r3,r16,r3
   8512c:	18800117 	ldw	r2,4(r3)
   85130:	81400217 	ldw	r5,8(r16)
   85134:	9009883a 	mov	r4,r18
   85138:	10800054 	ori	r2,r2,1
   8513c:	18800115 	stw	r2,4(r3)
   85140:	31400215 	stw	r5,8(r6)
   85144:	29800315 	stw	r6,12(r5)
   85148:	008a5540 	call	8a554 <__malloc_unlock>
   8514c:	80c00204 	addi	r3,r16,8
   85150:	003faa06 	br	84ffc <_malloc_r+0x50>
   85154:	00800104 	movi	r2,4
   85158:	10c0052e 	bgeu	r2,r3,85170 <_malloc_r+0x1c4>
   8515c:	00800504 	movi	r2,20
   85160:	10c07836 	bltu	r2,r3,85344 <_malloc_r+0x398>
   85164:	198016c4 	addi	r6,r3,91
   85168:	300490fa 	slli	r2,r6,3
   8516c:	003fbc06 	br	85060 <_malloc_r+0xb4>
   85170:	8804d1ba 	srli	r2,r17,6
   85174:	11800e04 	addi	r6,r2,56
   85178:	300490fa 	slli	r2,r6,3
   8517c:	003fb806 	br	85060 <_malloc_r+0xb4>
   85180:	00807fc4 	movi	r2,511
   85184:	1140bb36 	bltu	r2,r5,85474 <_malloc_r+0x4c8>
   85188:	2806d0fa 	srli	r3,r5,3
   8518c:	573ffe04 	addi	fp,r10,-8
   85190:	00800044 	movi	r2,1
   85194:	180890fa 	slli	r4,r3,3
   85198:	1807d0ba 	srai	r3,r3,2
   8519c:	e1c00117 	ldw	r7,4(fp)
   851a0:	5909883a 	add	r4,r11,r4
   851a4:	21400217 	ldw	r5,8(r4)
   851a8:	10c4983a 	sll	r2,r2,r3
   851ac:	81000315 	stw	r4,12(r16)
   851b0:	81400215 	stw	r5,8(r16)
   851b4:	388eb03a 	or	r7,r7,r2
   851b8:	2c000315 	stw	r16,12(r5)
   851bc:	24000215 	stw	r16,8(r4)
   851c0:	e1c00115 	stw	r7,4(fp)
   851c4:	4807883a 	mov	r3,r9
   851c8:	4800cd16 	blt	r9,zero,85500 <_malloc_r+0x554>
   851cc:	1807d0ba 	srai	r3,r3,2
   851d0:	00800044 	movi	r2,1
   851d4:	10c8983a 	sll	r4,r2,r3
   851d8:	39004436 	bltu	r7,r4,852ec <_malloc_r+0x340>
   851dc:	21c4703a 	and	r2,r4,r7
   851e0:	10000a1e 	bne	r2,zero,8520c <_malloc_r+0x260>
   851e4:	2109883a 	add	r4,r4,r4
   851e8:	00bfff04 	movi	r2,-4
   851ec:	4884703a 	and	r2,r9,r2
   851f0:	3906703a 	and	r3,r7,r4
   851f4:	12400104 	addi	r9,r2,4
   851f8:	1800041e 	bne	r3,zero,8520c <_malloc_r+0x260>
   851fc:	2109883a 	add	r4,r4,r4
   85200:	3904703a 	and	r2,r7,r4
   85204:	4a400104 	addi	r9,r9,4
   85208:	103ffc26 	beq	r2,zero,851fc <_malloc_r+0x250>
   8520c:	480490fa 	slli	r2,r9,3
   85210:	4819883a 	mov	r12,r9
   85214:	023fff04 	movi	r8,-4
   85218:	589b883a 	add	r13,r11,r2
   8521c:	6807883a 	mov	r3,r13
   85220:	014003c4 	movi	r5,15
   85224:	1c000317 	ldw	r16,12(r3)
   85228:	1c00041e 	bne	r3,r16,8523c <_malloc_r+0x290>
   8522c:	0000a706 	br	854cc <_malloc_r+0x520>
   85230:	3000ab0e 	bge	r6,zero,854e0 <_malloc_r+0x534>
   85234:	84000317 	ldw	r16,12(r16)
   85238:	1c00a426 	beq	r3,r16,854cc <_malloc_r+0x520>
   8523c:	80800117 	ldw	r2,4(r16)
   85240:	1204703a 	and	r2,r2,r8
   85244:	144dc83a 	sub	r6,r2,r17
   85248:	29bff90e 	bge	r5,r6,85230 <_malloc_r+0x284>
   8524c:	81000317 	ldw	r4,12(r16)
   85250:	80c00217 	ldw	r3,8(r16)
   85254:	89400054 	ori	r5,r17,1
   85258:	8445883a 	add	r2,r16,r17
   8525c:	20c00215 	stw	r3,8(r4)
   85260:	19000315 	stw	r4,12(r3)
   85264:	81400115 	stw	r5,4(r16)
   85268:	1187883a 	add	r3,r2,r6
   8526c:	31000054 	ori	r4,r6,1
   85270:	50800315 	stw	r2,12(r10)
   85274:	50800215 	stw	r2,8(r10)
   85278:	19800015 	stw	r6,0(r3)
   8527c:	11000115 	stw	r4,4(r2)
   85280:	12800215 	stw	r10,8(r2)
   85284:	12800315 	stw	r10,12(r2)
   85288:	9009883a 	mov	r4,r18
   8528c:	008a5540 	call	8a554 <__malloc_unlock>
   85290:	80c00204 	addi	r3,r16,8
   85294:	003f5906 	br	84ffc <_malloc_r+0x50>
   85298:	8109883a 	add	r4,r16,r4
   8529c:	20800117 	ldw	r2,4(r4)
   852a0:	80c00217 	ldw	r3,8(r16)
   852a4:	81400317 	ldw	r5,12(r16)
   852a8:	10800054 	ori	r2,r2,1
   852ac:	20800115 	stw	r2,4(r4)
   852b0:	28c00215 	stw	r3,8(r5)
   852b4:	19400315 	stw	r5,12(r3)
   852b8:	9009883a 	mov	r4,r18
   852bc:	008a5540 	call	8a554 <__malloc_unlock>
   852c0:	80c00204 	addi	r3,r16,8
   852c4:	003f4d06 	br	84ffc <_malloc_r+0x50>
   852c8:	80800204 	addi	r2,r16,8
   852cc:	14000317 	ldw	r16,12(r2)
   852d0:	143f911e 	bne	r2,r16,85118 <_malloc_r+0x16c>
   852d4:	1a400084 	addi	r9,r3,2
   852d8:	003f7306 	br	850a8 <_malloc_r+0xfc>
   852dc:	88c00054 	ori	r3,r17,1
   852e0:	8445883a 	add	r2,r16,r17
   852e4:	80c00115 	stw	r3,4(r16)
   852e8:	003fdf06 	br	85268 <_malloc_r+0x2bc>
   852ec:	e4000217 	ldw	r16,8(fp)
   852f0:	00bfff04 	movi	r2,-4
   852f4:	80c00117 	ldw	r3,4(r16)
   852f8:	802d883a 	mov	r22,r16
   852fc:	18aa703a 	and	r21,r3,r2
   85300:	ac401636 	bltu	r21,r17,8535c <_malloc_r+0x3b0>
   85304:	ac49c83a 	sub	r4,r21,r17
   85308:	008003c4 	movi	r2,15
   8530c:	1100130e 	bge	r2,r4,8535c <_malloc_r+0x3b0>
   85310:	88800054 	ori	r2,r17,1
   85314:	8447883a 	add	r3,r16,r17
   85318:	80800115 	stw	r2,4(r16)
   8531c:	20800054 	ori	r2,r4,1
   85320:	18800115 	stw	r2,4(r3)
   85324:	e0c00215 	stw	r3,8(fp)
   85328:	9009883a 	mov	r4,r18
   8532c:	008a5540 	call	8a554 <__malloc_unlock>
   85330:	80c00204 	addi	r3,r16,8
   85334:	003f3106 	br	84ffc <_malloc_r+0x50>
   85338:	39c00117 	ldw	r7,4(r7)
   8533c:	573ffe04 	addi	fp,r10,-8
   85340:	003fa006 	br	851c4 <_malloc_r+0x218>
   85344:	00801504 	movi	r2,84
   85348:	10c06736 	bltu	r2,r3,854e8 <_malloc_r+0x53c>
   8534c:	8804d33a 	srli	r2,r17,12
   85350:	11801b84 	addi	r6,r2,110
   85354:	300490fa 	slli	r2,r6,3
   85358:	003f4106 	br	85060 <_malloc_r+0xb4>
   8535c:	d0a6aa17 	ldw	r2,-25944(gp)
   85360:	d0e00517 	ldw	r3,-32748(gp)
   85364:	053fffc4 	movi	r20,-1
   85368:	10800404 	addi	r2,r2,16
   8536c:	88a7883a 	add	r19,r17,r2
   85370:	1d000326 	beq	r3,r20,85380 <_malloc_r+0x3d4>
   85374:	98c3ffc4 	addi	r3,r19,4095
   85378:	00bc0004 	movi	r2,-4096
   8537c:	18a6703a 	and	r19,r3,r2
   85380:	9009883a 	mov	r4,r18
   85384:	980b883a 	mov	r5,r19
   85388:	00870d80 	call	870d8 <_sbrk_r>
   8538c:	1009883a 	mov	r4,r2
   85390:	15000426 	beq	r2,r20,853a4 <_malloc_r+0x3f8>
   85394:	854b883a 	add	r5,r16,r21
   85398:	1029883a 	mov	r20,r2
   8539c:	11405a2e 	bgeu	r2,r5,85508 <_malloc_r+0x55c>
   853a0:	87000c26 	beq	r16,fp,853d4 <_malloc_r+0x428>
   853a4:	e4000217 	ldw	r16,8(fp)
   853a8:	80c00117 	ldw	r3,4(r16)
   853ac:	00bfff04 	movi	r2,-4
   853b0:	1884703a 	and	r2,r3,r2
   853b4:	14400336 	bltu	r2,r17,853c4 <_malloc_r+0x418>
   853b8:	1449c83a 	sub	r4,r2,r17
   853bc:	008003c4 	movi	r2,15
   853c0:	113fd316 	blt	r2,r4,85310 <_malloc_r+0x364>
   853c4:	9009883a 	mov	r4,r18
   853c8:	008a5540 	call	8a554 <__malloc_unlock>
   853cc:	0007883a 	mov	r3,zero
   853d0:	003f0a06 	br	84ffc <_malloc_r+0x50>
   853d4:	05c00274 	movhi	r23,9
   853d8:	bdc09e04 	addi	r23,r23,632
   853dc:	b8800017 	ldw	r2,0(r23)
   853e0:	988d883a 	add	r6,r19,r2
   853e4:	b9800015 	stw	r6,0(r23)
   853e8:	d0e00517 	ldw	r3,-32748(gp)
   853ec:	00bfffc4 	movi	r2,-1
   853f0:	18808e26 	beq	r3,r2,8562c <_malloc_r+0x680>
   853f4:	2145c83a 	sub	r2,r4,r5
   853f8:	3085883a 	add	r2,r6,r2
   853fc:	b8800015 	stw	r2,0(r23)
   85400:	20c001cc 	andi	r3,r4,7
   85404:	18005f1e 	bne	r3,zero,85584 <_malloc_r+0x5d8>
   85408:	000b883a 	mov	r5,zero
   8540c:	a4c5883a 	add	r2,r20,r19
   85410:	1083ffcc 	andi	r2,r2,4095
   85414:	00c40004 	movi	r3,4096
   85418:	1887c83a 	sub	r3,r3,r2
   8541c:	28e7883a 	add	r19,r5,r3
   85420:	9009883a 	mov	r4,r18
   85424:	980b883a 	mov	r5,r19
   85428:	00870d80 	call	870d8 <_sbrk_r>
   8542c:	1007883a 	mov	r3,r2
   85430:	00bfffc4 	movi	r2,-1
   85434:	18807a26 	beq	r3,r2,85620 <_malloc_r+0x674>
   85438:	1d05c83a 	sub	r2,r3,r20
   8543c:	9885883a 	add	r2,r19,r2
   85440:	10c00054 	ori	r3,r2,1
   85444:	b8800017 	ldw	r2,0(r23)
   85448:	a021883a 	mov	r16,r20
   8544c:	a0c00115 	stw	r3,4(r20)
   85450:	9885883a 	add	r2,r19,r2
   85454:	b8800015 	stw	r2,0(r23)
   85458:	e5000215 	stw	r20,8(fp)
   8545c:	b7003626 	beq	r22,fp,85538 <_malloc_r+0x58c>
   85460:	018003c4 	movi	r6,15
   85464:	35404b36 	bltu	r6,r21,85594 <_malloc_r+0x5e8>
   85468:	00800044 	movi	r2,1
   8546c:	a0800115 	stw	r2,4(r20)
   85470:	003fcd06 	br	853a8 <_malloc_r+0x3fc>
   85474:	2808d27a 	srli	r4,r5,9
   85478:	2000371e 	bne	r4,zero,85558 <_malloc_r+0x5ac>
   8547c:	2808d0fa 	srli	r4,r5,3
   85480:	200690fa 	slli	r3,r4,3
   85484:	1ad1883a 	add	r8,r3,r11
   85488:	41800217 	ldw	r6,8(r8)
   8548c:	41805b26 	beq	r8,r6,855fc <_malloc_r+0x650>
   85490:	30800117 	ldw	r2,4(r6)
   85494:	00ffff04 	movi	r3,-4
   85498:	10c4703a 	and	r2,r2,r3
   8549c:	2880022e 	bgeu	r5,r2,854a8 <_malloc_r+0x4fc>
   854a0:	31800217 	ldw	r6,8(r6)
   854a4:	41bffa1e 	bne	r8,r6,85490 <_malloc_r+0x4e4>
   854a8:	32000317 	ldw	r8,12(r6)
   854ac:	39c00117 	ldw	r7,4(r7)
   854b0:	82000315 	stw	r8,12(r16)
   854b4:	81800215 	stw	r6,8(r16)
   854b8:	07000274 	movhi	fp,9
   854bc:	e7346604 	addi	fp,fp,-11880
   854c0:	34000315 	stw	r16,12(r6)
   854c4:	44000215 	stw	r16,8(r8)
   854c8:	003f3e06 	br	851c4 <_malloc_r+0x218>
   854cc:	63000044 	addi	r12,r12,1
   854d0:	608000cc 	andi	r2,r12,3
   854d4:	10005d26 	beq	r2,zero,8564c <_malloc_r+0x6a0>
   854d8:	18c00204 	addi	r3,r3,8
   854dc:	003f5106 	br	85224 <_malloc_r+0x278>
   854e0:	8089883a 	add	r4,r16,r2
   854e4:	003f6d06 	br	8529c <_malloc_r+0x2f0>
   854e8:	00805504 	movi	r2,340
   854ec:	10c02036 	bltu	r2,r3,85570 <_malloc_r+0x5c4>
   854f0:	8804d3fa 	srli	r2,r17,15
   854f4:	11801dc4 	addi	r6,r2,119
   854f8:	300490fa 	slli	r2,r6,3
   854fc:	003ed806 	br	85060 <_malloc_r+0xb4>
   85500:	48c000c4 	addi	r3,r9,3
   85504:	003f3106 	br	851cc <_malloc_r+0x220>
   85508:	05c00274 	movhi	r23,9
   8550c:	bdc09e04 	addi	r23,r23,632
   85510:	b8800017 	ldw	r2,0(r23)
   85514:	988d883a 	add	r6,r19,r2
   85518:	b9800015 	stw	r6,0(r23)
   8551c:	293fb21e 	bne	r5,r4,853e8 <_malloc_r+0x43c>
   85520:	2083ffcc 	andi	r2,r4,4095
   85524:	103fb01e 	bne	r2,zero,853e8 <_malloc_r+0x43c>
   85528:	e4000217 	ldw	r16,8(fp)
   8552c:	9d45883a 	add	r2,r19,r21
   85530:	10800054 	ori	r2,r2,1
   85534:	80800115 	stw	r2,4(r16)
   85538:	b8c00017 	ldw	r3,0(r23)
   8553c:	d0a6ab17 	ldw	r2,-25940(gp)
   85540:	10c0012e 	bgeu	r2,r3,85548 <_malloc_r+0x59c>
   85544:	d0e6ab15 	stw	r3,-25940(gp)
   85548:	d0a6ac17 	ldw	r2,-25936(gp)
   8554c:	10ff962e 	bgeu	r2,r3,853a8 <_malloc_r+0x3fc>
   85550:	d0e6ac15 	stw	r3,-25936(gp)
   85554:	003f9406 	br	853a8 <_malloc_r+0x3fc>
   85558:	00800104 	movi	r2,4
   8555c:	11001e36 	bltu	r2,r4,855d8 <_malloc_r+0x62c>
   85560:	2804d1ba 	srli	r2,r5,6
   85564:	11000e04 	addi	r4,r2,56
   85568:	200690fa 	slli	r3,r4,3
   8556c:	003fc506 	br	85484 <_malloc_r+0x4d8>
   85570:	00815504 	movi	r2,1364
   85574:	10c01d2e 	bgeu	r2,r3,855ec <_malloc_r+0x640>
   85578:	01801f84 	movi	r6,126
   8557c:	0080fc04 	movi	r2,1008
   85580:	003eb706 	br	85060 <_malloc_r+0xb4>
   85584:	00800204 	movi	r2,8
   85588:	10cbc83a 	sub	r5,r2,r3
   8558c:	2169883a 	add	r20,r4,r5
   85590:	003f9e06 	br	8540c <_malloc_r+0x460>
   85594:	00bffe04 	movi	r2,-8
   85598:	a93ffd04 	addi	r4,r21,-12
   8559c:	2088703a 	and	r4,r4,r2
   855a0:	b10b883a 	add	r5,r22,r4
   855a4:	00c00144 	movi	r3,5
   855a8:	28c00215 	stw	r3,8(r5)
   855ac:	28c00115 	stw	r3,4(r5)
   855b0:	b0800117 	ldw	r2,4(r22)
   855b4:	1080004c 	andi	r2,r2,1
   855b8:	2084b03a 	or	r2,r4,r2
   855bc:	b0800115 	stw	r2,4(r22)
   855c0:	313fdd2e 	bgeu	r6,r4,85538 <_malloc_r+0x58c>
   855c4:	b1400204 	addi	r5,r22,8
   855c8:	9009883a 	mov	r4,r18
   855cc:	00844240 	call	84424 <_free_r>
   855d0:	e4000217 	ldw	r16,8(fp)
   855d4:	003fd806 	br	85538 <_malloc_r+0x58c>
   855d8:	00800504 	movi	r2,20
   855dc:	11001536 	bltu	r2,r4,85634 <_malloc_r+0x688>
   855e0:	210016c4 	addi	r4,r4,91
   855e4:	200690fa 	slli	r3,r4,3
   855e8:	003fa606 	br	85484 <_malloc_r+0x4d8>
   855ec:	8804d4ba 	srli	r2,r17,18
   855f0:	11801f04 	addi	r6,r2,124
   855f4:	300490fa 	slli	r2,r6,3
   855f8:	003e9906 	br	85060 <_malloc_r+0xb4>
   855fc:	2009d0ba 	srai	r4,r4,2
   85600:	01400274 	movhi	r5,9
   85604:	29746604 	addi	r5,r5,-11880
   85608:	00c00044 	movi	r3,1
   8560c:	28800117 	ldw	r2,4(r5)
   85610:	1906983a 	sll	r3,r3,r4
   85614:	10c4b03a 	or	r2,r2,r3
   85618:	28800115 	stw	r2,4(r5)
   8561c:	003fa306 	br	854ac <_malloc_r+0x500>
   85620:	0027883a 	mov	r19,zero
   85624:	00c00044 	movi	r3,1
   85628:	003f8606 	br	85444 <_malloc_r+0x498>
   8562c:	d1200515 	stw	r4,-32748(gp)
   85630:	003f7306 	br	85400 <_malloc_r+0x454>
   85634:	00801504 	movi	r2,84
   85638:	11001936 	bltu	r2,r4,856a0 <_malloc_r+0x6f4>
   8563c:	2804d33a 	srli	r2,r5,12
   85640:	11001b84 	addi	r4,r2,110
   85644:	200690fa 	slli	r3,r4,3
   85648:	003f8e06 	br	85484 <_malloc_r+0x4d8>
   8564c:	480b883a 	mov	r5,r9
   85650:	6807883a 	mov	r3,r13
   85654:	288000cc 	andi	r2,r5,3
   85658:	18fffe04 	addi	r3,r3,-8
   8565c:	297fffc4 	addi	r5,r5,-1
   85660:	10001526 	beq	r2,zero,856b8 <_malloc_r+0x70c>
   85664:	18800217 	ldw	r2,8(r3)
   85668:	10fffa26 	beq	r2,r3,85654 <_malloc_r+0x6a8>
   8566c:	2109883a 	add	r4,r4,r4
   85670:	393f1e36 	bltu	r7,r4,852ec <_malloc_r+0x340>
   85674:	203f1d26 	beq	r4,zero,852ec <_malloc_r+0x340>
   85678:	21c4703a 	and	r2,r4,r7
   8567c:	10000226 	beq	r2,zero,85688 <_malloc_r+0x6dc>
   85680:	6013883a 	mov	r9,r12
   85684:	003ee106 	br	8520c <_malloc_r+0x260>
   85688:	2109883a 	add	r4,r4,r4
   8568c:	3904703a 	and	r2,r7,r4
   85690:	63000104 	addi	r12,r12,4
   85694:	103ffc26 	beq	r2,zero,85688 <_malloc_r+0x6dc>
   85698:	6013883a 	mov	r9,r12
   8569c:	003edb06 	br	8520c <_malloc_r+0x260>
   856a0:	00805504 	movi	r2,340
   856a4:	11000836 	bltu	r2,r4,856c8 <_malloc_r+0x71c>
   856a8:	2804d3fa 	srli	r2,r5,15
   856ac:	11001dc4 	addi	r4,r2,119
   856b0:	200690fa 	slli	r3,r4,3
   856b4:	003f7306 	br	85484 <_malloc_r+0x4d8>
   856b8:	0104303a 	nor	r2,zero,r4
   856bc:	388e703a 	and	r7,r7,r2
   856c0:	e1c00115 	stw	r7,4(fp)
   856c4:	003fe906 	br	8566c <_malloc_r+0x6c0>
   856c8:	00815504 	movi	r2,1364
   856cc:	1100032e 	bgeu	r2,r4,856dc <_malloc_r+0x730>
   856d0:	01001f84 	movi	r4,126
   856d4:	00c0fc04 	movi	r3,1008
   856d8:	003f6a06 	br	85484 <_malloc_r+0x4d8>
   856dc:	2804d4ba 	srli	r2,r5,18
   856e0:	11001f04 	addi	r4,r2,124
   856e4:	200690fa 	slli	r3,r4,3
   856e8:	003f6606 	br	85484 <_malloc_r+0x4d8>

000856ec <memchr>:
   856ec:	008000c4 	movi	r2,3
   856f0:	29403fcc 	andi	r5,r5,255
   856f4:	2007883a 	mov	r3,r4
   856f8:	1180022e 	bgeu	r2,r6,85704 <memchr+0x18>
   856fc:	2084703a 	and	r2,r4,r2
   85700:	10000b26 	beq	r2,zero,85730 <memchr+0x44>
   85704:	313fffc4 	addi	r4,r6,-1
   85708:	3000051e 	bne	r6,zero,85720 <memchr+0x34>
   8570c:	00002c06 	br	857c0 <memchr+0xd4>
   85710:	213fffc4 	addi	r4,r4,-1
   85714:	00bfffc4 	movi	r2,-1
   85718:	18c00044 	addi	r3,r3,1
   8571c:	20802826 	beq	r4,r2,857c0 <memchr+0xd4>
   85720:	18800003 	ldbu	r2,0(r3)
   85724:	28bffa1e 	bne	r5,r2,85710 <memchr+0x24>
   85728:	1805883a 	mov	r2,r3
   8572c:	f800283a 	ret
   85730:	0011883a 	mov	r8,zero
   85734:	0007883a 	mov	r3,zero
   85738:	01c00104 	movi	r7,4
   8573c:	4004923a 	slli	r2,r8,8
   85740:	18c00044 	addi	r3,r3,1
   85744:	1151883a 	add	r8,r2,r5
   85748:	19fffc1e 	bne	r3,r7,8573c <memchr+0x50>
   8574c:	02bfbff4 	movhi	r10,65279
   85750:	52bfbfc4 	addi	r10,r10,-257
   85754:	02602074 	movhi	r9,32897
   85758:	4a602004 	addi	r9,r9,-32640
   8575c:	02c000c4 	movi	r11,3
   85760:	20800017 	ldw	r2,0(r4)
   85764:	31bfff04 	addi	r6,r6,-4
   85768:	200f883a 	mov	r7,r4
   8576c:	1204f03a 	xor	r2,r2,r8
   85770:	1287883a 	add	r3,r2,r10
   85774:	1a46703a 	and	r3,r3,r9
   85778:	0084303a 	nor	r2,zero,r2
   8577c:	10c4703a 	and	r2,r2,r3
   85780:	10000b26 	beq	r2,zero,857b0 <memchr+0xc4>
   85784:	20800003 	ldbu	r2,0(r4)
   85788:	28800f26 	beq	r5,r2,857c8 <memchr+0xdc>
   8578c:	20800043 	ldbu	r2,1(r4)
   85790:	21c00044 	addi	r7,r4,1
   85794:	28800c26 	beq	r5,r2,857c8 <memchr+0xdc>
   85798:	20800083 	ldbu	r2,2(r4)
   8579c:	21c00084 	addi	r7,r4,2
   857a0:	28800926 	beq	r5,r2,857c8 <memchr+0xdc>
   857a4:	208000c3 	ldbu	r2,3(r4)
   857a8:	21c000c4 	addi	r7,r4,3
   857ac:	28800626 	beq	r5,r2,857c8 <memchr+0xdc>
   857b0:	21000104 	addi	r4,r4,4
   857b4:	59bfea36 	bltu	r11,r6,85760 <memchr+0x74>
   857b8:	2007883a 	mov	r3,r4
   857bc:	003fd106 	br	85704 <memchr+0x18>
   857c0:	0005883a 	mov	r2,zero
   857c4:	f800283a 	ret
   857c8:	3805883a 	mov	r2,r7
   857cc:	f800283a 	ret

000857d0 <memcpy>:
   857d0:	01c003c4 	movi	r7,15
   857d4:	2007883a 	mov	r3,r4
   857d8:	3980032e 	bgeu	r7,r6,857e8 <memcpy+0x18>
   857dc:	2904b03a 	or	r2,r5,r4
   857e0:	108000cc 	andi	r2,r2,3
   857e4:	10000926 	beq	r2,zero,8580c <memcpy+0x3c>
   857e8:	30000626 	beq	r6,zero,85804 <memcpy+0x34>
   857ec:	30cd883a 	add	r6,r6,r3
   857f0:	28800003 	ldbu	r2,0(r5)
   857f4:	29400044 	addi	r5,r5,1
   857f8:	18800005 	stb	r2,0(r3)
   857fc:	18c00044 	addi	r3,r3,1
   85800:	30fffb1e 	bne	r6,r3,857f0 <memcpy+0x20>
   85804:	2005883a 	mov	r2,r4
   85808:	f800283a 	ret
   8580c:	3811883a 	mov	r8,r7
   85810:	200f883a 	mov	r7,r4
   85814:	28c00017 	ldw	r3,0(r5)
   85818:	31bffc04 	addi	r6,r6,-16
   8581c:	38c00015 	stw	r3,0(r7)
   85820:	28800117 	ldw	r2,4(r5)
   85824:	38800115 	stw	r2,4(r7)
   85828:	28c00217 	ldw	r3,8(r5)
   8582c:	38c00215 	stw	r3,8(r7)
   85830:	28800317 	ldw	r2,12(r5)
   85834:	29400404 	addi	r5,r5,16
   85838:	38800315 	stw	r2,12(r7)
   8583c:	39c00404 	addi	r7,r7,16
   85840:	41bff436 	bltu	r8,r6,85814 <memcpy+0x44>
   85844:	008000c4 	movi	r2,3
   85848:	1180072e 	bgeu	r2,r6,85868 <memcpy+0x98>
   8584c:	1007883a 	mov	r3,r2
   85850:	28800017 	ldw	r2,0(r5)
   85854:	31bfff04 	addi	r6,r6,-4
   85858:	29400104 	addi	r5,r5,4
   8585c:	38800015 	stw	r2,0(r7)
   85860:	39c00104 	addi	r7,r7,4
   85864:	19bffa36 	bltu	r3,r6,85850 <memcpy+0x80>
   85868:	3807883a 	mov	r3,r7
   8586c:	003fde06 	br	857e8 <memcpy+0x18>

00085870 <memmove>:
   85870:	2807883a 	mov	r3,r5
   85874:	2011883a 	mov	r8,r4
   85878:	29000c2e 	bgeu	r5,r4,858ac <memmove+0x3c>
   8587c:	298f883a 	add	r7,r5,r6
   85880:	21c00a2e 	bgeu	r4,r7,858ac <memmove+0x3c>
   85884:	30000726 	beq	r6,zero,858a4 <memmove+0x34>
   85888:	2187883a 	add	r3,r4,r6
   8588c:	198dc83a 	sub	r6,r3,r6
   85890:	39ffffc4 	addi	r7,r7,-1
   85894:	38800003 	ldbu	r2,0(r7)
   85898:	18ffffc4 	addi	r3,r3,-1
   8589c:	18800005 	stb	r2,0(r3)
   858a0:	19bffb1e 	bne	r3,r6,85890 <memmove+0x20>
   858a4:	2005883a 	mov	r2,r4
   858a8:	f800283a 	ret
   858ac:	01c003c4 	movi	r7,15
   858b0:	39800a36 	bltu	r7,r6,858dc <memmove+0x6c>
   858b4:	303ffb26 	beq	r6,zero,858a4 <memmove+0x34>
   858b8:	400f883a 	mov	r7,r8
   858bc:	320d883a 	add	r6,r6,r8
   858c0:	28800003 	ldbu	r2,0(r5)
   858c4:	29400044 	addi	r5,r5,1
   858c8:	38800005 	stb	r2,0(r7)
   858cc:	39c00044 	addi	r7,r7,1
   858d0:	39bffb1e 	bne	r7,r6,858c0 <memmove+0x50>
   858d4:	2005883a 	mov	r2,r4
   858d8:	f800283a 	ret
   858dc:	1904b03a 	or	r2,r3,r4
   858e0:	108000cc 	andi	r2,r2,3
   858e4:	103ff31e 	bne	r2,zero,858b4 <memmove+0x44>
   858e8:	3811883a 	mov	r8,r7
   858ec:	180b883a 	mov	r5,r3
   858f0:	200f883a 	mov	r7,r4
   858f4:	28c00017 	ldw	r3,0(r5)
   858f8:	31bffc04 	addi	r6,r6,-16
   858fc:	38c00015 	stw	r3,0(r7)
   85900:	28800117 	ldw	r2,4(r5)
   85904:	38800115 	stw	r2,4(r7)
   85908:	28c00217 	ldw	r3,8(r5)
   8590c:	38c00215 	stw	r3,8(r7)
   85910:	28800317 	ldw	r2,12(r5)
   85914:	29400404 	addi	r5,r5,16
   85918:	38800315 	stw	r2,12(r7)
   8591c:	39c00404 	addi	r7,r7,16
   85920:	41bff436 	bltu	r8,r6,858f4 <memmove+0x84>
   85924:	008000c4 	movi	r2,3
   85928:	1180072e 	bgeu	r2,r6,85948 <memmove+0xd8>
   8592c:	1007883a 	mov	r3,r2
   85930:	28800017 	ldw	r2,0(r5)
   85934:	31bfff04 	addi	r6,r6,-4
   85938:	29400104 	addi	r5,r5,4
   8593c:	38800015 	stw	r2,0(r7)
   85940:	39c00104 	addi	r7,r7,4
   85944:	19bffa36 	bltu	r3,r6,85930 <memmove+0xc0>
   85948:	3811883a 	mov	r8,r7
   8594c:	003fd906 	br	858b4 <memmove+0x44>

00085950 <memset>:
   85950:	008000c4 	movi	r2,3
   85954:	29403fcc 	andi	r5,r5,255
   85958:	2007883a 	mov	r3,r4
   8595c:	1180022e 	bgeu	r2,r6,85968 <memset+0x18>
   85960:	2084703a 	and	r2,r4,r2
   85964:	10000826 	beq	r2,zero,85988 <memset+0x38>
   85968:	30000526 	beq	r6,zero,85980 <memset+0x30>
   8596c:	2805883a 	mov	r2,r5
   85970:	30cd883a 	add	r6,r6,r3
   85974:	18800005 	stb	r2,0(r3)
   85978:	18c00044 	addi	r3,r3,1
   8597c:	19bffd1e 	bne	r3,r6,85974 <memset+0x24>
   85980:	2005883a 	mov	r2,r4
   85984:	f800283a 	ret
   85988:	2804923a 	slli	r2,r5,8
   8598c:	020003c4 	movi	r8,15
   85990:	200f883a 	mov	r7,r4
   85994:	2884b03a 	or	r2,r5,r2
   85998:	1006943a 	slli	r3,r2,16
   8599c:	10c6b03a 	or	r3,r2,r3
   859a0:	41800a2e 	bgeu	r8,r6,859cc <memset+0x7c>
   859a4:	4005883a 	mov	r2,r8
   859a8:	31bffc04 	addi	r6,r6,-16
   859ac:	38c00015 	stw	r3,0(r7)
   859b0:	38c00115 	stw	r3,4(r7)
   859b4:	38c00215 	stw	r3,8(r7)
   859b8:	38c00315 	stw	r3,12(r7)
   859bc:	39c00404 	addi	r7,r7,16
   859c0:	11bff936 	bltu	r2,r6,859a8 <memset+0x58>
   859c4:	008000c4 	movi	r2,3
   859c8:	1180052e 	bgeu	r2,r6,859e0 <memset+0x90>
   859cc:	31bfff04 	addi	r6,r6,-4
   859d0:	008000c4 	movi	r2,3
   859d4:	38c00015 	stw	r3,0(r7)
   859d8:	39c00104 	addi	r7,r7,4
   859dc:	11bffb36 	bltu	r2,r6,859cc <memset+0x7c>
   859e0:	3807883a 	mov	r3,r7
   859e4:	003fe006 	br	85968 <memset+0x18>

000859e8 <_Bfree>:
   859e8:	28000826 	beq	r5,zero,85a0c <_Bfree+0x24>
   859ec:	28800117 	ldw	r2,4(r5)
   859f0:	21001317 	ldw	r4,76(r4)
   859f4:	1085883a 	add	r2,r2,r2
   859f8:	1085883a 	add	r2,r2,r2
   859fc:	1105883a 	add	r2,r2,r4
   85a00:	10c00017 	ldw	r3,0(r2)
   85a04:	28c00015 	stw	r3,0(r5)
   85a08:	11400015 	stw	r5,0(r2)
   85a0c:	f800283a 	ret

00085a10 <__hi0bits>:
   85a10:	20bfffec 	andhi	r2,r4,65535
   85a14:	10001426 	beq	r2,zero,85a68 <__hi0bits+0x58>
   85a18:	0007883a 	mov	r3,zero
   85a1c:	20bfc02c 	andhi	r2,r4,65280
   85a20:	1000021e 	bne	r2,zero,85a2c <__hi0bits+0x1c>
   85a24:	2008923a 	slli	r4,r4,8
   85a28:	18c00204 	addi	r3,r3,8
   85a2c:	20bc002c 	andhi	r2,r4,61440
   85a30:	1000021e 	bne	r2,zero,85a3c <__hi0bits+0x2c>
   85a34:	2008913a 	slli	r4,r4,4
   85a38:	18c00104 	addi	r3,r3,4
   85a3c:	20b0002c 	andhi	r2,r4,49152
   85a40:	1000031e 	bne	r2,zero,85a50 <__hi0bits+0x40>
   85a44:	2105883a 	add	r2,r4,r4
   85a48:	18c00084 	addi	r3,r3,2
   85a4c:	1089883a 	add	r4,r2,r2
   85a50:	20000316 	blt	r4,zero,85a60 <__hi0bits+0x50>
   85a54:	2090002c 	andhi	r2,r4,16384
   85a58:	10000626 	beq	r2,zero,85a74 <__hi0bits+0x64>
   85a5c:	18c00044 	addi	r3,r3,1
   85a60:	1805883a 	mov	r2,r3
   85a64:	f800283a 	ret
   85a68:	2008943a 	slli	r4,r4,16
   85a6c:	00c00404 	movi	r3,16
   85a70:	003fea06 	br	85a1c <__hi0bits+0xc>
   85a74:	00c00804 	movi	r3,32
   85a78:	1805883a 	mov	r2,r3
   85a7c:	f800283a 	ret

00085a80 <__lo0bits>:
   85a80:	20c00017 	ldw	r3,0(r4)
   85a84:	188001cc 	andi	r2,r3,7
   85a88:	10000a26 	beq	r2,zero,85ab4 <__lo0bits+0x34>
   85a8c:	1880004c 	andi	r2,r3,1
   85a90:	1005003a 	cmpeq	r2,r2,zero
   85a94:	10002126 	beq	r2,zero,85b1c <__lo0bits+0x9c>
   85a98:	1880008c 	andi	r2,r3,2
   85a9c:	1000251e 	bne	r2,zero,85b34 <__lo0bits+0xb4>
   85aa0:	1804d0ba 	srli	r2,r3,2
   85aa4:	01400084 	movi	r5,2
   85aa8:	20800015 	stw	r2,0(r4)
   85aac:	2805883a 	mov	r2,r5
   85ab0:	f800283a 	ret
   85ab4:	18bfffcc 	andi	r2,r3,65535
   85ab8:	10001526 	beq	r2,zero,85b10 <__lo0bits+0x90>
   85abc:	000b883a 	mov	r5,zero
   85ac0:	18803fcc 	andi	r2,r3,255
   85ac4:	1000021e 	bne	r2,zero,85ad0 <__lo0bits+0x50>
   85ac8:	1806d23a 	srli	r3,r3,8
   85acc:	29400204 	addi	r5,r5,8
   85ad0:	188003cc 	andi	r2,r3,15
   85ad4:	1000021e 	bne	r2,zero,85ae0 <__lo0bits+0x60>
   85ad8:	1806d13a 	srli	r3,r3,4
   85adc:	29400104 	addi	r5,r5,4
   85ae0:	188000cc 	andi	r2,r3,3
   85ae4:	1000021e 	bne	r2,zero,85af0 <__lo0bits+0x70>
   85ae8:	1806d0ba 	srli	r3,r3,2
   85aec:	29400084 	addi	r5,r5,2
   85af0:	1880004c 	andi	r2,r3,1
   85af4:	1000031e 	bne	r2,zero,85b04 <__lo0bits+0x84>
   85af8:	1806d07a 	srli	r3,r3,1
   85afc:	18000a26 	beq	r3,zero,85b28 <__lo0bits+0xa8>
   85b00:	29400044 	addi	r5,r5,1
   85b04:	2805883a 	mov	r2,r5
   85b08:	20c00015 	stw	r3,0(r4)
   85b0c:	f800283a 	ret
   85b10:	1806d43a 	srli	r3,r3,16
   85b14:	01400404 	movi	r5,16
   85b18:	003fe906 	br	85ac0 <__lo0bits+0x40>
   85b1c:	000b883a 	mov	r5,zero
   85b20:	2805883a 	mov	r2,r5
   85b24:	f800283a 	ret
   85b28:	01400804 	movi	r5,32
   85b2c:	2805883a 	mov	r2,r5
   85b30:	f800283a 	ret
   85b34:	1804d07a 	srli	r2,r3,1
   85b38:	01400044 	movi	r5,1
   85b3c:	20800015 	stw	r2,0(r4)
   85b40:	003fda06 	br	85aac <__lo0bits+0x2c>

00085b44 <__mcmp>:
   85b44:	20800417 	ldw	r2,16(r4)
   85b48:	28c00417 	ldw	r3,16(r5)
   85b4c:	10cfc83a 	sub	r7,r2,r3
   85b50:	38000c1e 	bne	r7,zero,85b84 <__mcmp+0x40>
   85b54:	18c5883a 	add	r2,r3,r3
   85b58:	1085883a 	add	r2,r2,r2
   85b5c:	10c00504 	addi	r3,r2,20
   85b60:	21000504 	addi	r4,r4,20
   85b64:	28cb883a 	add	r5,r5,r3
   85b68:	2085883a 	add	r2,r4,r2
   85b6c:	10bfff04 	addi	r2,r2,-4
   85b70:	297fff04 	addi	r5,r5,-4
   85b74:	11800017 	ldw	r6,0(r2)
   85b78:	28c00017 	ldw	r3,0(r5)
   85b7c:	30c0031e 	bne	r6,r3,85b8c <__mcmp+0x48>
   85b80:	20bffa36 	bltu	r4,r2,85b6c <__mcmp+0x28>
   85b84:	3805883a 	mov	r2,r7
   85b88:	f800283a 	ret
   85b8c:	30c00336 	bltu	r6,r3,85b9c <__mcmp+0x58>
   85b90:	01c00044 	movi	r7,1
   85b94:	3805883a 	mov	r2,r7
   85b98:	f800283a 	ret
   85b9c:	01ffffc4 	movi	r7,-1
   85ba0:	003ff806 	br	85b84 <__mcmp+0x40>

00085ba4 <__ulp>:
   85ba4:	295ffc2c 	andhi	r5,r5,32752
   85ba8:	013f3034 	movhi	r4,64704
   85bac:	290b883a 	add	r5,r5,r4
   85bb0:	0145c83a 	sub	r2,zero,r5
   85bb4:	1007d53a 	srai	r3,r2,20
   85bb8:	000d883a 	mov	r6,zero
   85bbc:	0140040e 	bge	zero,r5,85bd0 <__ulp+0x2c>
   85bc0:	280f883a 	mov	r7,r5
   85bc4:	3807883a 	mov	r3,r7
   85bc8:	3005883a 	mov	r2,r6
   85bcc:	f800283a 	ret
   85bd0:	008004c4 	movi	r2,19
   85bd4:	193ffb04 	addi	r4,r3,-20
   85bd8:	10c00c0e 	bge	r2,r3,85c0c <__ulp+0x68>
   85bdc:	008007c4 	movi	r2,31
   85be0:	1107c83a 	sub	r3,r2,r4
   85be4:	00800784 	movi	r2,30
   85be8:	01400044 	movi	r5,1
   85bec:	11000216 	blt	r2,r4,85bf8 <__ulp+0x54>
   85bf0:	00800044 	movi	r2,1
   85bf4:	10ca983a 	sll	r5,r2,r3
   85bf8:	000f883a 	mov	r7,zero
   85bfc:	280d883a 	mov	r6,r5
   85c00:	3807883a 	mov	r3,r7
   85c04:	3005883a 	mov	r2,r6
   85c08:	f800283a 	ret
   85c0c:	00800234 	movhi	r2,8
   85c10:	10cfd83a 	sra	r7,r2,r3
   85c14:	000d883a 	mov	r6,zero
   85c18:	3005883a 	mov	r2,r6
   85c1c:	3807883a 	mov	r3,r7
   85c20:	f800283a 	ret

00085c24 <__b2d>:
   85c24:	20800417 	ldw	r2,16(r4)
   85c28:	defff904 	addi	sp,sp,-28
   85c2c:	dd000415 	stw	r20,16(sp)
   85c30:	1085883a 	add	r2,r2,r2
   85c34:	25000504 	addi	r20,r4,20
   85c38:	1085883a 	add	r2,r2,r2
   85c3c:	dc000015 	stw	r16,0(sp)
   85c40:	a0a1883a 	add	r16,r20,r2
   85c44:	dd400515 	stw	r21,20(sp)
   85c48:	857fff17 	ldw	r21,-4(r16)
   85c4c:	dc400115 	stw	r17,4(sp)
   85c50:	dfc00615 	stw	ra,24(sp)
   85c54:	a809883a 	mov	r4,r21
   85c58:	2823883a 	mov	r17,r5
   85c5c:	dcc00315 	stw	r19,12(sp)
   85c60:	dc800215 	stw	r18,8(sp)
   85c64:	0085a100 	call	85a10 <__hi0bits>
   85c68:	100b883a 	mov	r5,r2
   85c6c:	00800804 	movi	r2,32
   85c70:	1145c83a 	sub	r2,r2,r5
   85c74:	88800015 	stw	r2,0(r17)
   85c78:	00800284 	movi	r2,10
   85c7c:	80ffff04 	addi	r3,r16,-4
   85c80:	11401416 	blt	r2,r5,85cd4 <__b2d+0xb0>
   85c84:	008002c4 	movi	r2,11
   85c88:	1149c83a 	sub	r4,r2,r5
   85c8c:	a0c02736 	bltu	r20,r3,85d2c <__b2d+0x108>
   85c90:	000d883a 	mov	r6,zero
   85c94:	28800544 	addi	r2,r5,21
   85c98:	a906d83a 	srl	r3,r21,r4
   85c9c:	a884983a 	sll	r2,r21,r2
   85ca0:	1ccffc34 	orhi	r19,r3,16368
   85ca4:	11a4b03a 	or	r18,r2,r6
   85ca8:	9005883a 	mov	r2,r18
   85cac:	9807883a 	mov	r3,r19
   85cb0:	dfc00617 	ldw	ra,24(sp)
   85cb4:	dd400517 	ldw	r21,20(sp)
   85cb8:	dd000417 	ldw	r20,16(sp)
   85cbc:	dcc00317 	ldw	r19,12(sp)
   85cc0:	dc800217 	ldw	r18,8(sp)
   85cc4:	dc400117 	ldw	r17,4(sp)
   85cc8:	dc000017 	ldw	r16,0(sp)
   85ccc:	dec00704 	addi	sp,sp,28
   85cd0:	f800283a 	ret
   85cd4:	a0c00e36 	bltu	r20,r3,85d10 <__b2d+0xec>
   85cd8:	293ffd44 	addi	r4,r5,-11
   85cdc:	000d883a 	mov	r6,zero
   85ce0:	20000f26 	beq	r4,zero,85d20 <__b2d+0xfc>
   85ce4:	00800804 	movi	r2,32
   85ce8:	110bc83a 	sub	r5,r2,r4
   85cec:	a0c01236 	bltu	r20,r3,85d38 <__b2d+0x114>
   85cf0:	000f883a 	mov	r7,zero
   85cf4:	a904983a 	sll	r2,r21,r4
   85cf8:	3146d83a 	srl	r3,r6,r5
   85cfc:	3108983a 	sll	r4,r6,r4
   85d00:	108ffc34 	orhi	r2,r2,16368
   85d04:	18a6b03a 	or	r19,r3,r2
   85d08:	3924b03a 	or	r18,r7,r4
   85d0c:	003fe606 	br	85ca8 <__b2d+0x84>
   85d10:	293ffd44 	addi	r4,r5,-11
   85d14:	81bffe17 	ldw	r6,-8(r16)
   85d18:	80fffe04 	addi	r3,r16,-8
   85d1c:	203ff11e 	bne	r4,zero,85ce4 <__b2d+0xc0>
   85d20:	accffc34 	orhi	r19,r21,16368
   85d24:	3025883a 	mov	r18,r6
   85d28:	003fdf06 	br	85ca8 <__b2d+0x84>
   85d2c:	18bfff17 	ldw	r2,-4(r3)
   85d30:	110cd83a 	srl	r6,r2,r4
   85d34:	003fd706 	br	85c94 <__b2d+0x70>
   85d38:	18bfff17 	ldw	r2,-4(r3)
   85d3c:	114ed83a 	srl	r7,r2,r5
   85d40:	003fec06 	br	85cf4 <__b2d+0xd0>

00085d44 <__ratio>:
   85d44:	defff904 	addi	sp,sp,-28
   85d48:	dc400215 	stw	r17,8(sp)
   85d4c:	2823883a 	mov	r17,r5
   85d50:	d80b883a 	mov	r5,sp
   85d54:	dfc00615 	stw	ra,24(sp)
   85d58:	dd000515 	stw	r20,20(sp)
   85d5c:	dcc00415 	stw	r19,16(sp)
   85d60:	dc800315 	stw	r18,12(sp)
   85d64:	2025883a 	mov	r18,r4
   85d68:	0085c240 	call	85c24 <__b2d>
   85d6c:	8809883a 	mov	r4,r17
   85d70:	d9400104 	addi	r5,sp,4
   85d74:	1027883a 	mov	r19,r2
   85d78:	1829883a 	mov	r20,r3
   85d7c:	0085c240 	call	85c24 <__b2d>
   85d80:	89000417 	ldw	r4,16(r17)
   85d84:	91c00417 	ldw	r7,16(r18)
   85d88:	d9800117 	ldw	r6,4(sp)
   85d8c:	180b883a 	mov	r5,r3
   85d90:	390fc83a 	sub	r7,r7,r4
   85d94:	1009883a 	mov	r4,r2
   85d98:	d8800017 	ldw	r2,0(sp)
   85d9c:	380e917a 	slli	r7,r7,5
   85da0:	2011883a 	mov	r8,r4
   85da4:	1185c83a 	sub	r2,r2,r6
   85da8:	11c5883a 	add	r2,r2,r7
   85dac:	1006953a 	slli	r3,r2,20
   85db0:	2813883a 	mov	r9,r5
   85db4:	00800d0e 	bge	zero,r2,85dec <__ratio+0xa8>
   85db8:	1d29883a 	add	r20,r3,r20
   85dbc:	a00b883a 	mov	r5,r20
   85dc0:	480f883a 	mov	r7,r9
   85dc4:	9809883a 	mov	r4,r19
   85dc8:	400d883a 	mov	r6,r8
   85dcc:	0088e000 	call	88e00 <__divdf3>
   85dd0:	dfc00617 	ldw	ra,24(sp)
   85dd4:	dd000517 	ldw	r20,20(sp)
   85dd8:	dcc00417 	ldw	r19,16(sp)
   85ddc:	dc800317 	ldw	r18,12(sp)
   85de0:	dc400217 	ldw	r17,8(sp)
   85de4:	dec00704 	addi	sp,sp,28
   85de8:	f800283a 	ret
   85dec:	28d3c83a 	sub	r9,r5,r3
   85df0:	003ff206 	br	85dbc <__ratio+0x78>

00085df4 <_mprec_log10>:
   85df4:	defffe04 	addi	sp,sp,-8
   85df8:	008005c4 	movi	r2,23
   85dfc:	dc000015 	stw	r16,0(sp)
   85e00:	dfc00115 	stw	ra,4(sp)
   85e04:	2021883a 	mov	r16,r4
   85e08:	11000c16 	blt	r2,r4,85e3c <_mprec_log10+0x48>
   85e0c:	200490fa 	slli	r2,r4,3
   85e10:	00c00274 	movhi	r3,9
   85e14:	18f2c804 	addi	r3,r3,-13536
   85e18:	10c5883a 	add	r2,r2,r3
   85e1c:	12400117 	ldw	r9,4(r2)
   85e20:	12000017 	ldw	r8,0(r2)
   85e24:	4807883a 	mov	r3,r9
   85e28:	4005883a 	mov	r2,r8
   85e2c:	dfc00117 	ldw	ra,4(sp)
   85e30:	dc000017 	ldw	r16,0(sp)
   85e34:	dec00204 	addi	sp,sp,8
   85e38:	f800283a 	ret
   85e3c:	0011883a 	mov	r8,zero
   85e40:	024ffc34 	movhi	r9,16368
   85e44:	0005883a 	mov	r2,zero
   85e48:	00d00934 	movhi	r3,16420
   85e4c:	480b883a 	mov	r5,r9
   85e50:	4009883a 	mov	r4,r8
   85e54:	180f883a 	mov	r7,r3
   85e58:	100d883a 	mov	r6,r2
   85e5c:	0088a3c0 	call	88a3c <__muldf3>
   85e60:	843fffc4 	addi	r16,r16,-1
   85e64:	1011883a 	mov	r8,r2
   85e68:	1813883a 	mov	r9,r3
   85e6c:	803ff51e 	bne	r16,zero,85e44 <_mprec_log10+0x50>
   85e70:	4005883a 	mov	r2,r8
   85e74:	4807883a 	mov	r3,r9
   85e78:	dfc00117 	ldw	ra,4(sp)
   85e7c:	dc000017 	ldw	r16,0(sp)
   85e80:	dec00204 	addi	sp,sp,8
   85e84:	f800283a 	ret

00085e88 <__copybits>:
   85e88:	297fffc4 	addi	r5,r5,-1
   85e8c:	30800417 	ldw	r2,16(r6)
   85e90:	280bd17a 	srai	r5,r5,5
   85e94:	31800504 	addi	r6,r6,20
   85e98:	1085883a 	add	r2,r2,r2
   85e9c:	294b883a 	add	r5,r5,r5
   85ea0:	294b883a 	add	r5,r5,r5
   85ea4:	1085883a 	add	r2,r2,r2
   85ea8:	290b883a 	add	r5,r5,r4
   85eac:	3087883a 	add	r3,r6,r2
   85eb0:	29400104 	addi	r5,r5,4
   85eb4:	30c0052e 	bgeu	r6,r3,85ecc <__copybits+0x44>
   85eb8:	30800017 	ldw	r2,0(r6)
   85ebc:	31800104 	addi	r6,r6,4
   85ec0:	20800015 	stw	r2,0(r4)
   85ec4:	21000104 	addi	r4,r4,4
   85ec8:	30fffb36 	bltu	r6,r3,85eb8 <__copybits+0x30>
   85ecc:	2140032e 	bgeu	r4,r5,85edc <__copybits+0x54>
   85ed0:	20000015 	stw	zero,0(r4)
   85ed4:	21000104 	addi	r4,r4,4
   85ed8:	217ffd36 	bltu	r4,r5,85ed0 <__copybits+0x48>
   85edc:	f800283a 	ret

00085ee0 <__any_on>:
   85ee0:	20800417 	ldw	r2,16(r4)
   85ee4:	2807d17a 	srai	r3,r5,5
   85ee8:	21000504 	addi	r4,r4,20
   85eec:	10c00d0e 	bge	r2,r3,85f24 <__any_on+0x44>
   85ef0:	1085883a 	add	r2,r2,r2
   85ef4:	1085883a 	add	r2,r2,r2
   85ef8:	208d883a 	add	r6,r4,r2
   85efc:	2180182e 	bgeu	r4,r6,85f60 <__any_on+0x80>
   85f00:	30bfff17 	ldw	r2,-4(r6)
   85f04:	30ffff04 	addi	r3,r6,-4
   85f08:	1000041e 	bne	r2,zero,85f1c <__any_on+0x3c>
   85f0c:	20c0142e 	bgeu	r4,r3,85f60 <__any_on+0x80>
   85f10:	18ffff04 	addi	r3,r3,-4
   85f14:	18800017 	ldw	r2,0(r3)
   85f18:	103ffc26 	beq	r2,zero,85f0c <__any_on+0x2c>
   85f1c:	00800044 	movi	r2,1
   85f20:	f800283a 	ret
   85f24:	18800a0e 	bge	r3,r2,85f50 <__any_on+0x70>
   85f28:	294007cc 	andi	r5,r5,31
   85f2c:	28000826 	beq	r5,zero,85f50 <__any_on+0x70>
   85f30:	18c5883a 	add	r2,r3,r3
   85f34:	1085883a 	add	r2,r2,r2
   85f38:	208d883a 	add	r6,r4,r2
   85f3c:	30c00017 	ldw	r3,0(r6)
   85f40:	1944d83a 	srl	r2,r3,r5
   85f44:	1144983a 	sll	r2,r2,r5
   85f48:	18bff41e 	bne	r3,r2,85f1c <__any_on+0x3c>
   85f4c:	003feb06 	br	85efc <__any_on+0x1c>
   85f50:	18c5883a 	add	r2,r3,r3
   85f54:	1085883a 	add	r2,r2,r2
   85f58:	208d883a 	add	r6,r4,r2
   85f5c:	003fe706 	br	85efc <__any_on+0x1c>
   85f60:	0005883a 	mov	r2,zero
   85f64:	f800283a 	ret

00085f68 <_Balloc>:
   85f68:	20c01317 	ldw	r3,76(r4)
   85f6c:	defffb04 	addi	sp,sp,-20
   85f70:	dcc00315 	stw	r19,12(sp)
   85f74:	dc800215 	stw	r18,8(sp)
   85f78:	dfc00415 	stw	ra,16(sp)
   85f7c:	2825883a 	mov	r18,r5
   85f80:	dc400115 	stw	r17,4(sp)
   85f84:	dc000015 	stw	r16,0(sp)
   85f88:	2027883a 	mov	r19,r4
   85f8c:	01800404 	movi	r6,16
   85f90:	01400104 	movi	r5,4
   85f94:	18001726 	beq	r3,zero,85ff4 <_Balloc+0x8c>
   85f98:	01400044 	movi	r5,1
   85f9c:	9485883a 	add	r2,r18,r18
   85fa0:	2ca2983a 	sll	r17,r5,r18
   85fa4:	1085883a 	add	r2,r2,r2
   85fa8:	10c7883a 	add	r3,r2,r3
   85fac:	1c000017 	ldw	r16,0(r3)
   85fb0:	8c4d883a 	add	r6,r17,r17
   85fb4:	318d883a 	add	r6,r6,r6
   85fb8:	9809883a 	mov	r4,r19
   85fbc:	31800504 	addi	r6,r6,20
   85fc0:	80001226 	beq	r16,zero,8600c <_Balloc+0xa4>
   85fc4:	80800017 	ldw	r2,0(r16)
   85fc8:	18800015 	stw	r2,0(r3)
   85fcc:	80000415 	stw	zero,16(r16)
   85fd0:	80000315 	stw	zero,12(r16)
   85fd4:	8005883a 	mov	r2,r16
   85fd8:	dfc00417 	ldw	ra,16(sp)
   85fdc:	dcc00317 	ldw	r19,12(sp)
   85fe0:	dc800217 	ldw	r18,8(sp)
   85fe4:	dc400117 	ldw	r17,4(sp)
   85fe8:	dc000017 	ldw	r16,0(sp)
   85fec:	dec00504 	addi	sp,sp,20
   85ff0:	f800283a 	ret
   85ff4:	008743c0 	call	8743c <_calloc_r>
   85ff8:	1007883a 	mov	r3,r2
   85ffc:	0021883a 	mov	r16,zero
   86000:	98801315 	stw	r2,76(r19)
   86004:	103fe41e 	bne	r2,zero,85f98 <_Balloc+0x30>
   86008:	003ff206 	br	85fd4 <_Balloc+0x6c>
   8600c:	008743c0 	call	8743c <_calloc_r>
   86010:	103ff026 	beq	r2,zero,85fd4 <_Balloc+0x6c>
   86014:	1021883a 	mov	r16,r2
   86018:	14800115 	stw	r18,4(r2)
   8601c:	14400215 	stw	r17,8(r2)
   86020:	003fea06 	br	85fcc <_Balloc+0x64>

00086024 <__d2b>:
   86024:	defff504 	addi	sp,sp,-44
   86028:	dcc00515 	stw	r19,20(sp)
   8602c:	04c00044 	movi	r19,1
   86030:	dc000215 	stw	r16,8(sp)
   86034:	2821883a 	mov	r16,r5
   86038:	980b883a 	mov	r5,r19
   8603c:	ddc00915 	stw	r23,36(sp)
   86040:	dd800815 	stw	r22,32(sp)
   86044:	dd400715 	stw	r21,28(sp)
   86048:	dd000615 	stw	r20,24(sp)
   8604c:	dc800415 	stw	r18,16(sp)
   86050:	dc400315 	stw	r17,12(sp)
   86054:	dfc00a15 	stw	ra,40(sp)
   86058:	3023883a 	mov	r17,r6
   8605c:	382d883a 	mov	r22,r7
   86060:	ddc00b17 	ldw	r23,44(sp)
   86064:	0085f680 	call	85f68 <_Balloc>
   86068:	1025883a 	mov	r18,r2
   8606c:	00a00034 	movhi	r2,32768
   86070:	10bfffc4 	addi	r2,r2,-1
   86074:	8888703a 	and	r4,r17,r2
   86078:	202ad53a 	srli	r21,r4,20
   8607c:	00800434 	movhi	r2,16
   86080:	10bfffc4 	addi	r2,r2,-1
   86084:	8886703a 	and	r3,r17,r2
   86088:	a829003a 	cmpeq	r20,r21,zero
   8608c:	800b883a 	mov	r5,r16
   86090:	d8c00115 	stw	r3,4(sp)
   86094:	94000504 	addi	r16,r18,20
   86098:	a000021e 	bne	r20,zero,860a4 <__d2b+0x80>
   8609c:	18c00434 	orhi	r3,r3,16
   860a0:	d8c00115 	stw	r3,4(sp)
   860a4:	28002726 	beq	r5,zero,86144 <__d2b+0x120>
   860a8:	d809883a 	mov	r4,sp
   860ac:	d9400015 	stw	r5,0(sp)
   860b0:	0085a800 	call	85a80 <__lo0bits>
   860b4:	100d883a 	mov	r6,r2
   860b8:	10003526 	beq	r2,zero,86190 <__d2b+0x16c>
   860bc:	d8c00117 	ldw	r3,4(sp)
   860c0:	00800804 	movi	r2,32
   860c4:	1185c83a 	sub	r2,r2,r6
   860c8:	d9000017 	ldw	r4,0(sp)
   860cc:	1886983a 	sll	r3,r3,r2
   860d0:	1906b03a 	or	r3,r3,r4
   860d4:	90c00515 	stw	r3,20(r18)
   860d8:	d8c00117 	ldw	r3,4(sp)
   860dc:	1986d83a 	srl	r3,r3,r6
   860e0:	d8c00115 	stw	r3,4(sp)
   860e4:	180b003a 	cmpeq	r5,r3,zero
   860e8:	00800084 	movi	r2,2
   860ec:	114bc83a 	sub	r5,r2,r5
   860f0:	80c00115 	stw	r3,4(r16)
   860f4:	91400415 	stw	r5,16(r18)
   860f8:	a0001a1e 	bne	r20,zero,86164 <__d2b+0x140>
   860fc:	3545883a 	add	r2,r6,r21
   86100:	10bef344 	addi	r2,r2,-1075
   86104:	00c00d44 	movi	r3,53
   86108:	b0800015 	stw	r2,0(r22)
   8610c:	1987c83a 	sub	r3,r3,r6
   86110:	b8c00015 	stw	r3,0(r23)
   86114:	9005883a 	mov	r2,r18
   86118:	dfc00a17 	ldw	ra,40(sp)
   8611c:	ddc00917 	ldw	r23,36(sp)
   86120:	dd800817 	ldw	r22,32(sp)
   86124:	dd400717 	ldw	r21,28(sp)
   86128:	dd000617 	ldw	r20,24(sp)
   8612c:	dcc00517 	ldw	r19,20(sp)
   86130:	dc800417 	ldw	r18,16(sp)
   86134:	dc400317 	ldw	r17,12(sp)
   86138:	dc000217 	ldw	r16,8(sp)
   8613c:	dec00b04 	addi	sp,sp,44
   86140:	f800283a 	ret
   86144:	d9000104 	addi	r4,sp,4
   86148:	0085a800 	call	85a80 <__lo0bits>
   8614c:	11800804 	addi	r6,r2,32
   86150:	d8800117 	ldw	r2,4(sp)
   86154:	94c00415 	stw	r19,16(r18)
   86158:	980b883a 	mov	r5,r19
   8615c:	90800515 	stw	r2,20(r18)
   86160:	a03fe626 	beq	r20,zero,860fc <__d2b+0xd8>
   86164:	2945883a 	add	r2,r5,r5
   86168:	1085883a 	add	r2,r2,r2
   8616c:	1405883a 	add	r2,r2,r16
   86170:	113fff17 	ldw	r4,-4(r2)
   86174:	30fef384 	addi	r3,r6,-1074
   86178:	2820917a 	slli	r16,r5,5
   8617c:	b0c00015 	stw	r3,0(r22)
   86180:	0085a100 	call	85a10 <__hi0bits>
   86184:	80a1c83a 	sub	r16,r16,r2
   86188:	bc000015 	stw	r16,0(r23)
   8618c:	003fe106 	br	86114 <__d2b+0xf0>
   86190:	d8800017 	ldw	r2,0(sp)
   86194:	90800515 	stw	r2,20(r18)
   86198:	d8c00117 	ldw	r3,4(sp)
   8619c:	003fd106 	br	860e4 <__d2b+0xc0>

000861a0 <__mdiff>:
   861a0:	defffb04 	addi	sp,sp,-20
   861a4:	dc000015 	stw	r16,0(sp)
   861a8:	2821883a 	mov	r16,r5
   861ac:	dc800215 	stw	r18,8(sp)
   861b0:	300b883a 	mov	r5,r6
   861b4:	2025883a 	mov	r18,r4
   861b8:	8009883a 	mov	r4,r16
   861bc:	dc400115 	stw	r17,4(sp)
   861c0:	dfc00415 	stw	ra,16(sp)
   861c4:	dcc00315 	stw	r19,12(sp)
   861c8:	3023883a 	mov	r17,r6
   861cc:	0085b440 	call	85b44 <__mcmp>
   861d0:	10004226 	beq	r2,zero,862dc <__mdiff+0x13c>
   861d4:	10005016 	blt	r2,zero,86318 <__mdiff+0x178>
   861d8:	0027883a 	mov	r19,zero
   861dc:	81400117 	ldw	r5,4(r16)
   861e0:	9009883a 	mov	r4,r18
   861e4:	0085f680 	call	85f68 <_Balloc>
   861e8:	1019883a 	mov	r12,r2
   861ec:	82800417 	ldw	r10,16(r16)
   861f0:	88800417 	ldw	r2,16(r17)
   861f4:	81800504 	addi	r6,r16,20
   861f8:	5287883a 	add	r3,r10,r10
   861fc:	1085883a 	add	r2,r2,r2
   86200:	18c7883a 	add	r3,r3,r3
   86204:	1085883a 	add	r2,r2,r2
   86208:	8a000504 	addi	r8,r17,20
   8620c:	64c00315 	stw	r19,12(r12)
   86210:	30db883a 	add	r13,r6,r3
   86214:	4097883a 	add	r11,r8,r2
   86218:	61c00504 	addi	r7,r12,20
   8621c:	0013883a 	mov	r9,zero
   86220:	31000017 	ldw	r4,0(r6)
   86224:	41400017 	ldw	r5,0(r8)
   86228:	42000104 	addi	r8,r8,4
   8622c:	20bfffcc 	andi	r2,r4,65535
   86230:	28ffffcc 	andi	r3,r5,65535
   86234:	10c5c83a 	sub	r2,r2,r3
   86238:	1245883a 	add	r2,r2,r9
   8623c:	2008d43a 	srli	r4,r4,16
   86240:	280ad43a 	srli	r5,r5,16
   86244:	1007d43a 	srai	r3,r2,16
   86248:	3880000d 	sth	r2,0(r7)
   8624c:	2149c83a 	sub	r4,r4,r5
   86250:	20c9883a 	add	r4,r4,r3
   86254:	3900008d 	sth	r4,2(r7)
   86258:	31800104 	addi	r6,r6,4
   8625c:	39c00104 	addi	r7,r7,4
   86260:	2013d43a 	srai	r9,r4,16
   86264:	42ffee36 	bltu	r8,r11,86220 <__mdiff+0x80>
   86268:	33400c2e 	bgeu	r6,r13,8629c <__mdiff+0xfc>
   8626c:	30800017 	ldw	r2,0(r6)
   86270:	31800104 	addi	r6,r6,4
   86274:	10ffffcc 	andi	r3,r2,65535
   86278:	1a47883a 	add	r3,r3,r9
   8627c:	1004d43a 	srli	r2,r2,16
   86280:	1809d43a 	srai	r4,r3,16
   86284:	38c0000d 	sth	r3,0(r7)
   86288:	1105883a 	add	r2,r2,r4
   8628c:	3880008d 	sth	r2,2(r7)
   86290:	1013d43a 	srai	r9,r2,16
   86294:	39c00104 	addi	r7,r7,4
   86298:	337ff436 	bltu	r6,r13,8626c <__mdiff+0xcc>
   8629c:	38bfff17 	ldw	r2,-4(r7)
   862a0:	38ffff04 	addi	r3,r7,-4
   862a4:	1000041e 	bne	r2,zero,862b8 <__mdiff+0x118>
   862a8:	18ffff04 	addi	r3,r3,-4
   862ac:	18800017 	ldw	r2,0(r3)
   862b0:	52bfffc4 	addi	r10,r10,-1
   862b4:	103ffc26 	beq	r2,zero,862a8 <__mdiff+0x108>
   862b8:	6005883a 	mov	r2,r12
   862bc:	62800415 	stw	r10,16(r12)
   862c0:	dfc00417 	ldw	ra,16(sp)
   862c4:	dcc00317 	ldw	r19,12(sp)
   862c8:	dc800217 	ldw	r18,8(sp)
   862cc:	dc400117 	ldw	r17,4(sp)
   862d0:	dc000017 	ldw	r16,0(sp)
   862d4:	dec00504 	addi	sp,sp,20
   862d8:	f800283a 	ret
   862dc:	9009883a 	mov	r4,r18
   862e0:	000b883a 	mov	r5,zero
   862e4:	0085f680 	call	85f68 <_Balloc>
   862e8:	1019883a 	mov	r12,r2
   862ec:	00800044 	movi	r2,1
   862f0:	60800415 	stw	r2,16(r12)
   862f4:	6005883a 	mov	r2,r12
   862f8:	60000515 	stw	zero,20(r12)
   862fc:	dfc00417 	ldw	ra,16(sp)
   86300:	dcc00317 	ldw	r19,12(sp)
   86304:	dc800217 	ldw	r18,8(sp)
   86308:	dc400117 	ldw	r17,4(sp)
   8630c:	dc000017 	ldw	r16,0(sp)
   86310:	dec00504 	addi	sp,sp,20
   86314:	f800283a 	ret
   86318:	880d883a 	mov	r6,r17
   8631c:	04c00044 	movi	r19,1
   86320:	8023883a 	mov	r17,r16
   86324:	3021883a 	mov	r16,r6
   86328:	003fac06 	br	861dc <__mdiff+0x3c>

0008632c <__lshift>:
   8632c:	defff904 	addi	sp,sp,-28
   86330:	28800417 	ldw	r2,16(r5)
   86334:	dc000015 	stw	r16,0(sp)
   86338:	3021d17a 	srai	r16,r6,5
   8633c:	28c00217 	ldw	r3,8(r5)
   86340:	10800044 	addi	r2,r2,1
   86344:	dc400115 	stw	r17,4(sp)
   86348:	80a3883a 	add	r17,r16,r2
   8634c:	dd400515 	stw	r21,20(sp)
   86350:	dd000415 	stw	r20,16(sp)
   86354:	dc800215 	stw	r18,8(sp)
   86358:	dfc00615 	stw	ra,24(sp)
   8635c:	2825883a 	mov	r18,r5
   86360:	dcc00315 	stw	r19,12(sp)
   86364:	3029883a 	mov	r20,r6
   86368:	202b883a 	mov	r21,r4
   8636c:	29400117 	ldw	r5,4(r5)
   86370:	1c40030e 	bge	r3,r17,86380 <__lshift+0x54>
   86374:	18c7883a 	add	r3,r3,r3
   86378:	29400044 	addi	r5,r5,1
   8637c:	1c7ffd16 	blt	r3,r17,86374 <__lshift+0x48>
   86380:	a809883a 	mov	r4,r21
   86384:	0085f680 	call	85f68 <_Balloc>
   86388:	1027883a 	mov	r19,r2
   8638c:	11400504 	addi	r5,r2,20
   86390:	0400090e 	bge	zero,r16,863b8 <__lshift+0x8c>
   86394:	2805883a 	mov	r2,r5
   86398:	0007883a 	mov	r3,zero
   8639c:	18c00044 	addi	r3,r3,1
   863a0:	10000015 	stw	zero,0(r2)
   863a4:	10800104 	addi	r2,r2,4
   863a8:	80fffc1e 	bne	r16,r3,8639c <__lshift+0x70>
   863ac:	8405883a 	add	r2,r16,r16
   863b0:	1085883a 	add	r2,r2,r2
   863b4:	288b883a 	add	r5,r5,r2
   863b8:	90800417 	ldw	r2,16(r18)
   863bc:	91000504 	addi	r4,r18,20
   863c0:	a18007cc 	andi	r6,r20,31
   863c4:	1085883a 	add	r2,r2,r2
   863c8:	1085883a 	add	r2,r2,r2
   863cc:	208f883a 	add	r7,r4,r2
   863d0:	30001e26 	beq	r6,zero,8644c <__lshift+0x120>
   863d4:	00800804 	movi	r2,32
   863d8:	1191c83a 	sub	r8,r2,r6
   863dc:	0007883a 	mov	r3,zero
   863e0:	20800017 	ldw	r2,0(r4)
   863e4:	1184983a 	sll	r2,r2,r6
   863e8:	1884b03a 	or	r2,r3,r2
   863ec:	28800015 	stw	r2,0(r5)
   863f0:	20c00017 	ldw	r3,0(r4)
   863f4:	21000104 	addi	r4,r4,4
   863f8:	29400104 	addi	r5,r5,4
   863fc:	1a06d83a 	srl	r3,r3,r8
   86400:	21fff736 	bltu	r4,r7,863e0 <__lshift+0xb4>
   86404:	28c00015 	stw	r3,0(r5)
   86408:	18000126 	beq	r3,zero,86410 <__lshift+0xe4>
   8640c:	8c400044 	addi	r17,r17,1
   86410:	88bfffc4 	addi	r2,r17,-1
   86414:	98800415 	stw	r2,16(r19)
   86418:	a809883a 	mov	r4,r21
   8641c:	900b883a 	mov	r5,r18
   86420:	00859e80 	call	859e8 <_Bfree>
   86424:	9805883a 	mov	r2,r19
   86428:	dfc00617 	ldw	ra,24(sp)
   8642c:	dd400517 	ldw	r21,20(sp)
   86430:	dd000417 	ldw	r20,16(sp)
   86434:	dcc00317 	ldw	r19,12(sp)
   86438:	dc800217 	ldw	r18,8(sp)
   8643c:	dc400117 	ldw	r17,4(sp)
   86440:	dc000017 	ldw	r16,0(sp)
   86444:	dec00704 	addi	sp,sp,28
   86448:	f800283a 	ret
   8644c:	20800017 	ldw	r2,0(r4)
   86450:	21000104 	addi	r4,r4,4
   86454:	28800015 	stw	r2,0(r5)
   86458:	29400104 	addi	r5,r5,4
   8645c:	21ffec2e 	bgeu	r4,r7,86410 <__lshift+0xe4>
   86460:	20800017 	ldw	r2,0(r4)
   86464:	21000104 	addi	r4,r4,4
   86468:	28800015 	stw	r2,0(r5)
   8646c:	29400104 	addi	r5,r5,4
   86470:	21fff636 	bltu	r4,r7,8644c <__lshift+0x120>
   86474:	003fe606 	br	86410 <__lshift+0xe4>

00086478 <__multiply>:
   86478:	defff004 	addi	sp,sp,-64
   8647c:	dc800815 	stw	r18,32(sp)
   86480:	dc400715 	stw	r17,28(sp)
   86484:	2c800417 	ldw	r18,16(r5)
   86488:	34400417 	ldw	r17,16(r6)
   8648c:	dcc00915 	stw	r19,36(sp)
   86490:	dc000615 	stw	r16,24(sp)
   86494:	dfc00f15 	stw	ra,60(sp)
   86498:	df000e15 	stw	fp,56(sp)
   8649c:	ddc00d15 	stw	r23,52(sp)
   864a0:	dd800c15 	stw	r22,48(sp)
   864a4:	dd400b15 	stw	r21,44(sp)
   864a8:	dd000a15 	stw	r20,40(sp)
   864ac:	2821883a 	mov	r16,r5
   864b0:	3027883a 	mov	r19,r6
   864b4:	9440040e 	bge	r18,r17,864c8 <__multiply+0x50>
   864b8:	8825883a 	mov	r18,r17
   864bc:	2c400417 	ldw	r17,16(r5)
   864c0:	2827883a 	mov	r19,r5
   864c4:	3021883a 	mov	r16,r6
   864c8:	80800217 	ldw	r2,8(r16)
   864cc:	9447883a 	add	r3,r18,r17
   864d0:	d8c00415 	stw	r3,16(sp)
   864d4:	81400117 	ldw	r5,4(r16)
   864d8:	10c0010e 	bge	r2,r3,864e0 <__multiply+0x68>
   864dc:	29400044 	addi	r5,r5,1
   864e0:	0085f680 	call	85f68 <_Balloc>
   864e4:	d8800515 	stw	r2,20(sp)
   864e8:	d9000417 	ldw	r4,16(sp)
   864ec:	d8c00517 	ldw	r3,20(sp)
   864f0:	2105883a 	add	r2,r4,r4
   864f4:	1085883a 	add	r2,r2,r2
   864f8:	19000504 	addi	r4,r3,20
   864fc:	2085883a 	add	r2,r4,r2
   86500:	d8800315 	stw	r2,12(sp)
   86504:	2080052e 	bgeu	r4,r2,8651c <__multiply+0xa4>
   86508:	2005883a 	mov	r2,r4
   8650c:	d8c00317 	ldw	r3,12(sp)
   86510:	10000015 	stw	zero,0(r2)
   86514:	10800104 	addi	r2,r2,4
   86518:	10fffc36 	bltu	r2,r3,8650c <__multiply+0x94>
   8651c:	8c45883a 	add	r2,r17,r17
   86520:	9487883a 	add	r3,r18,r18
   86524:	9dc00504 	addi	r23,r19,20
   86528:	1085883a 	add	r2,r2,r2
   8652c:	84000504 	addi	r16,r16,20
   86530:	18c7883a 	add	r3,r3,r3
   86534:	b885883a 	add	r2,r23,r2
   86538:	dc000015 	stw	r16,0(sp)
   8653c:	d8800215 	stw	r2,8(sp)
   86540:	80f9883a 	add	fp,r16,r3
   86544:	b880432e 	bgeu	r23,r2,86654 <__multiply+0x1dc>
   86548:	d9000115 	stw	r4,4(sp)
   8654c:	b9000017 	ldw	r4,0(r23)
   86550:	253fffcc 	andi	r20,r4,65535
   86554:	a0001a26 	beq	r20,zero,865c0 <__multiply+0x148>
   86558:	dcc00017 	ldw	r19,0(sp)
   8655c:	dc800117 	ldw	r18,4(sp)
   86560:	002b883a 	mov	r21,zero
   86564:	9c400017 	ldw	r17,0(r19)
   86568:	94000017 	ldw	r16,0(r18)
   8656c:	a009883a 	mov	r4,r20
   86570:	897fffcc 	andi	r5,r17,65535
   86574:	00897b00 	call	897b0 <__mulsi3>
   86578:	880ad43a 	srli	r5,r17,16
   8657c:	80ffffcc 	andi	r3,r16,65535
   86580:	a8c7883a 	add	r3,r21,r3
   86584:	a009883a 	mov	r4,r20
   86588:	10e3883a 	add	r17,r2,r3
   8658c:	8020d43a 	srli	r16,r16,16
   86590:	00897b00 	call	897b0 <__mulsi3>
   86594:	8806d43a 	srli	r3,r17,16
   86598:	1405883a 	add	r2,r2,r16
   8659c:	9cc00104 	addi	r19,r19,4
   865a0:	1887883a 	add	r3,r3,r2
   865a4:	90c0008d 	sth	r3,2(r18)
   865a8:	9440000d 	sth	r17,0(r18)
   865ac:	182ad43a 	srli	r21,r3,16
   865b0:	94800104 	addi	r18,r18,4
   865b4:	9f3feb36 	bltu	r19,fp,86564 <__multiply+0xec>
   865b8:	95400015 	stw	r21,0(r18)
   865bc:	b9000017 	ldw	r4,0(r23)
   865c0:	202ad43a 	srli	r21,r4,16
   865c4:	a8001c26 	beq	r21,zero,86638 <__multiply+0x1c0>
   865c8:	d9000117 	ldw	r4,4(sp)
   865cc:	dd000017 	ldw	r20,0(sp)
   865d0:	002d883a 	mov	r22,zero
   865d4:	24c00017 	ldw	r19,0(r4)
   865d8:	2025883a 	mov	r18,r4
   865dc:	9823883a 	mov	r17,r19
   865e0:	a4000017 	ldw	r16,0(r20)
   865e4:	a809883a 	mov	r4,r21
   865e8:	a5000104 	addi	r20,r20,4
   865ec:	817fffcc 	andi	r5,r16,65535
   865f0:	00897b00 	call	897b0 <__mulsi3>
   865f4:	8806d43a 	srli	r3,r17,16
   865f8:	800ad43a 	srli	r5,r16,16
   865fc:	94c0000d 	sth	r19,0(r18)
   86600:	b0c7883a 	add	r3,r22,r3
   86604:	10e1883a 	add	r16,r2,r3
   86608:	9400008d 	sth	r16,2(r18)
   8660c:	a809883a 	mov	r4,r21
   86610:	94800104 	addi	r18,r18,4
   86614:	00897b00 	call	897b0 <__mulsi3>
   86618:	94400017 	ldw	r17,0(r18)
   8661c:	8020d43a 	srli	r16,r16,16
   86620:	88ffffcc 	andi	r3,r17,65535
   86624:	10c5883a 	add	r2,r2,r3
   86628:	80a7883a 	add	r19,r16,r2
   8662c:	982cd43a 	srli	r22,r19,16
   86630:	a73feb36 	bltu	r20,fp,865e0 <__multiply+0x168>
   86634:	94c00015 	stw	r19,0(r18)
   86638:	d8800217 	ldw	r2,8(sp)
   8663c:	bdc00104 	addi	r23,r23,4
   86640:	b880042e 	bgeu	r23,r2,86654 <__multiply+0x1dc>
   86644:	d8c00117 	ldw	r3,4(sp)
   86648:	18c00104 	addi	r3,r3,4
   8664c:	d8c00115 	stw	r3,4(sp)
   86650:	003fbe06 	br	8654c <__multiply+0xd4>
   86654:	d9000417 	ldw	r4,16(sp)
   86658:	01000c0e 	bge	zero,r4,8668c <__multiply+0x214>
   8665c:	d8c00317 	ldw	r3,12(sp)
   86660:	18bfff17 	ldw	r2,-4(r3)
   86664:	18ffff04 	addi	r3,r3,-4
   86668:	10000326 	beq	r2,zero,86678 <__multiply+0x200>
   8666c:	00000706 	br	8668c <__multiply+0x214>
   86670:	18800017 	ldw	r2,0(r3)
   86674:	1000051e 	bne	r2,zero,8668c <__multiply+0x214>
   86678:	d9000417 	ldw	r4,16(sp)
   8667c:	18ffff04 	addi	r3,r3,-4
   86680:	213fffc4 	addi	r4,r4,-1
   86684:	d9000415 	stw	r4,16(sp)
   86688:	203ff91e 	bne	r4,zero,86670 <__multiply+0x1f8>
   8668c:	d8800417 	ldw	r2,16(sp)
   86690:	d8c00517 	ldw	r3,20(sp)
   86694:	18800415 	stw	r2,16(r3)
   86698:	1805883a 	mov	r2,r3
   8669c:	dfc00f17 	ldw	ra,60(sp)
   866a0:	df000e17 	ldw	fp,56(sp)
   866a4:	ddc00d17 	ldw	r23,52(sp)
   866a8:	dd800c17 	ldw	r22,48(sp)
   866ac:	dd400b17 	ldw	r21,44(sp)
   866b0:	dd000a17 	ldw	r20,40(sp)
   866b4:	dcc00917 	ldw	r19,36(sp)
   866b8:	dc800817 	ldw	r18,32(sp)
   866bc:	dc400717 	ldw	r17,28(sp)
   866c0:	dc000617 	ldw	r16,24(sp)
   866c4:	dec01004 	addi	sp,sp,64
   866c8:	f800283a 	ret

000866cc <__i2b>:
   866cc:	defffd04 	addi	sp,sp,-12
   866d0:	dc000015 	stw	r16,0(sp)
   866d4:	04000044 	movi	r16,1
   866d8:	dc800115 	stw	r18,4(sp)
   866dc:	2825883a 	mov	r18,r5
   866e0:	800b883a 	mov	r5,r16
   866e4:	dfc00215 	stw	ra,8(sp)
   866e8:	0085f680 	call	85f68 <_Balloc>
   866ec:	14000415 	stw	r16,16(r2)
   866f0:	14800515 	stw	r18,20(r2)
   866f4:	dfc00217 	ldw	ra,8(sp)
   866f8:	dc800117 	ldw	r18,4(sp)
   866fc:	dc000017 	ldw	r16,0(sp)
   86700:	dec00304 	addi	sp,sp,12
   86704:	f800283a 	ret

00086708 <__multadd>:
   86708:	defff604 	addi	sp,sp,-40
   8670c:	dd800615 	stw	r22,24(sp)
   86710:	2d800417 	ldw	r22,16(r5)
   86714:	df000815 	stw	fp,32(sp)
   86718:	ddc00715 	stw	r23,28(sp)
   8671c:	dd400515 	stw	r21,20(sp)
   86720:	dd000415 	stw	r20,16(sp)
   86724:	dcc00315 	stw	r19,12(sp)
   86728:	dc800215 	stw	r18,8(sp)
   8672c:	dfc00915 	stw	ra,36(sp)
   86730:	dc400115 	stw	r17,4(sp)
   86734:	dc000015 	stw	r16,0(sp)
   86738:	282f883a 	mov	r23,r5
   8673c:	2039883a 	mov	fp,r4
   86740:	302b883a 	mov	r21,r6
   86744:	3829883a 	mov	r20,r7
   86748:	2c800504 	addi	r18,r5,20
   8674c:	0027883a 	mov	r19,zero
   86750:	94400017 	ldw	r17,0(r18)
   86754:	a80b883a 	mov	r5,r21
   86758:	9cc00044 	addi	r19,r19,1
   8675c:	893fffcc 	andi	r4,r17,65535
   86760:	00897b00 	call	897b0 <__mulsi3>
   86764:	8808d43a 	srli	r4,r17,16
   86768:	1521883a 	add	r16,r2,r20
   8676c:	a80b883a 	mov	r5,r21
   86770:	00897b00 	call	897b0 <__mulsi3>
   86774:	8008d43a 	srli	r4,r16,16
   86778:	843fffcc 	andi	r16,r16,65535
   8677c:	1105883a 	add	r2,r2,r4
   86780:	1006943a 	slli	r3,r2,16
   86784:	1028d43a 	srli	r20,r2,16
   86788:	1c07883a 	add	r3,r3,r16
   8678c:	90c00015 	stw	r3,0(r18)
   86790:	94800104 	addi	r18,r18,4
   86794:	9dbfee16 	blt	r19,r22,86750 <__multadd+0x48>
   86798:	a0000826 	beq	r20,zero,867bc <__multadd+0xb4>
   8679c:	b8800217 	ldw	r2,8(r23)
   867a0:	b080130e 	bge	r22,r2,867f0 <__multadd+0xe8>
   867a4:	b585883a 	add	r2,r22,r22
   867a8:	1085883a 	add	r2,r2,r2
   867ac:	15c5883a 	add	r2,r2,r23
   867b0:	b0c00044 	addi	r3,r22,1
   867b4:	15000515 	stw	r20,20(r2)
   867b8:	b8c00415 	stw	r3,16(r23)
   867bc:	b805883a 	mov	r2,r23
   867c0:	dfc00917 	ldw	ra,36(sp)
   867c4:	df000817 	ldw	fp,32(sp)
   867c8:	ddc00717 	ldw	r23,28(sp)
   867cc:	dd800617 	ldw	r22,24(sp)
   867d0:	dd400517 	ldw	r21,20(sp)
   867d4:	dd000417 	ldw	r20,16(sp)
   867d8:	dcc00317 	ldw	r19,12(sp)
   867dc:	dc800217 	ldw	r18,8(sp)
   867e0:	dc400117 	ldw	r17,4(sp)
   867e4:	dc000017 	ldw	r16,0(sp)
   867e8:	dec00a04 	addi	sp,sp,40
   867ec:	f800283a 	ret
   867f0:	b9400117 	ldw	r5,4(r23)
   867f4:	e009883a 	mov	r4,fp
   867f8:	29400044 	addi	r5,r5,1
   867fc:	0085f680 	call	85f68 <_Balloc>
   86800:	b9800417 	ldw	r6,16(r23)
   86804:	b9400304 	addi	r5,r23,12
   86808:	11000304 	addi	r4,r2,12
   8680c:	318d883a 	add	r6,r6,r6
   86810:	318d883a 	add	r6,r6,r6
   86814:	31800204 	addi	r6,r6,8
   86818:	1023883a 	mov	r17,r2
   8681c:	00857d00 	call	857d0 <memcpy>
   86820:	b80b883a 	mov	r5,r23
   86824:	e009883a 	mov	r4,fp
   86828:	00859e80 	call	859e8 <_Bfree>
   8682c:	882f883a 	mov	r23,r17
   86830:	003fdc06 	br	867a4 <__multadd+0x9c>

00086834 <__pow5mult>:
   86834:	defffa04 	addi	sp,sp,-24
   86838:	308000cc 	andi	r2,r6,3
   8683c:	dd000415 	stw	r20,16(sp)
   86840:	dcc00315 	stw	r19,12(sp)
   86844:	dc000015 	stw	r16,0(sp)
   86848:	dfc00515 	stw	ra,20(sp)
   8684c:	dc800215 	stw	r18,8(sp)
   86850:	dc400115 	stw	r17,4(sp)
   86854:	3021883a 	mov	r16,r6
   86858:	2027883a 	mov	r19,r4
   8685c:	2829883a 	mov	r20,r5
   86860:	10002b1e 	bne	r2,zero,86910 <__pow5mult+0xdc>
   86864:	8025d0ba 	srai	r18,r16,2
   86868:	90001b26 	beq	r18,zero,868d8 <__pow5mult+0xa4>
   8686c:	9c001217 	ldw	r16,72(r19)
   86870:	8000081e 	bne	r16,zero,86894 <__pow5mult+0x60>
   86874:	00003006 	br	86938 <__pow5mult+0x104>
   86878:	800b883a 	mov	r5,r16
   8687c:	800d883a 	mov	r6,r16
   86880:	9809883a 	mov	r4,r19
   86884:	90001426 	beq	r18,zero,868d8 <__pow5mult+0xa4>
   86888:	80800017 	ldw	r2,0(r16)
   8688c:	10001b26 	beq	r2,zero,868fc <__pow5mult+0xc8>
   86890:	1021883a 	mov	r16,r2
   86894:	9080004c 	andi	r2,r18,1
   86898:	1005003a 	cmpeq	r2,r2,zero
   8689c:	9025d07a 	srai	r18,r18,1
   868a0:	800d883a 	mov	r6,r16
   868a4:	9809883a 	mov	r4,r19
   868a8:	a00b883a 	mov	r5,r20
   868ac:	103ff21e 	bne	r2,zero,86878 <__pow5mult+0x44>
   868b0:	00864780 	call	86478 <__multiply>
   868b4:	a00b883a 	mov	r5,r20
   868b8:	9809883a 	mov	r4,r19
   868bc:	1023883a 	mov	r17,r2
   868c0:	00859e80 	call	859e8 <_Bfree>
   868c4:	8829883a 	mov	r20,r17
   868c8:	800b883a 	mov	r5,r16
   868cc:	800d883a 	mov	r6,r16
   868d0:	9809883a 	mov	r4,r19
   868d4:	903fec1e 	bne	r18,zero,86888 <__pow5mult+0x54>
   868d8:	a005883a 	mov	r2,r20
   868dc:	dfc00517 	ldw	ra,20(sp)
   868e0:	dd000417 	ldw	r20,16(sp)
   868e4:	dcc00317 	ldw	r19,12(sp)
   868e8:	dc800217 	ldw	r18,8(sp)
   868ec:	dc400117 	ldw	r17,4(sp)
   868f0:	dc000017 	ldw	r16,0(sp)
   868f4:	dec00604 	addi	sp,sp,24
   868f8:	f800283a 	ret
   868fc:	00864780 	call	86478 <__multiply>
   86900:	80800015 	stw	r2,0(r16)
   86904:	1021883a 	mov	r16,r2
   86908:	10000015 	stw	zero,0(r2)
   8690c:	003fe106 	br	86894 <__pow5mult+0x60>
   86910:	1085883a 	add	r2,r2,r2
   86914:	00c00274 	movhi	r3,9
   86918:	18f30e04 	addi	r3,r3,-13256
   8691c:	1085883a 	add	r2,r2,r2
   86920:	10c5883a 	add	r2,r2,r3
   86924:	11bfff17 	ldw	r6,-4(r2)
   86928:	000f883a 	mov	r7,zero
   8692c:	00867080 	call	86708 <__multadd>
   86930:	1029883a 	mov	r20,r2
   86934:	003fcb06 	br	86864 <__pow5mult+0x30>
   86938:	9809883a 	mov	r4,r19
   8693c:	01409c44 	movi	r5,625
   86940:	00866cc0 	call	866cc <__i2b>
   86944:	98801215 	stw	r2,72(r19)
   86948:	1021883a 	mov	r16,r2
   8694c:	10000015 	stw	zero,0(r2)
   86950:	003fd006 	br	86894 <__pow5mult+0x60>

00086954 <__s2b>:
   86954:	defff904 	addi	sp,sp,-28
   86958:	dcc00315 	stw	r19,12(sp)
   8695c:	dc800215 	stw	r18,8(sp)
   86960:	2827883a 	mov	r19,r5
   86964:	2025883a 	mov	r18,r4
   86968:	01400244 	movi	r5,9
   8696c:	39000204 	addi	r4,r7,8
   86970:	dd000415 	stw	r20,16(sp)
   86974:	dc400115 	stw	r17,4(sp)
   86978:	dfc00615 	stw	ra,24(sp)
   8697c:	dd400515 	stw	r21,20(sp)
   86980:	dc000015 	stw	r16,0(sp)
   86984:	3829883a 	mov	r20,r7
   86988:	3023883a 	mov	r17,r6
   8698c:	00896e00 	call	896e0 <__divsi3>
   86990:	00c00044 	movi	r3,1
   86994:	1880350e 	bge	r3,r2,86a6c <__s2b+0x118>
   86998:	000b883a 	mov	r5,zero
   8699c:	18c7883a 	add	r3,r3,r3
   869a0:	29400044 	addi	r5,r5,1
   869a4:	18bffd16 	blt	r3,r2,8699c <__s2b+0x48>
   869a8:	9009883a 	mov	r4,r18
   869ac:	0085f680 	call	85f68 <_Balloc>
   869b0:	1011883a 	mov	r8,r2
   869b4:	d8800717 	ldw	r2,28(sp)
   869b8:	00c00044 	movi	r3,1
   869bc:	01800244 	movi	r6,9
   869c0:	40800515 	stw	r2,20(r8)
   869c4:	40c00415 	stw	r3,16(r8)
   869c8:	3440260e 	bge	r6,r17,86a64 <__s2b+0x110>
   869cc:	3021883a 	mov	r16,r6
   869d0:	99ab883a 	add	r21,r19,r6
   869d4:	9c05883a 	add	r2,r19,r16
   869d8:	11c00007 	ldb	r7,0(r2)
   869dc:	400b883a 	mov	r5,r8
   869e0:	9009883a 	mov	r4,r18
   869e4:	39fff404 	addi	r7,r7,-48
   869e8:	01800284 	movi	r6,10
   869ec:	00867080 	call	86708 <__multadd>
   869f0:	84000044 	addi	r16,r16,1
   869f4:	1011883a 	mov	r8,r2
   869f8:	8c3ff61e 	bne	r17,r16,869d4 <__s2b+0x80>
   869fc:	ac45883a 	add	r2,r21,r17
   86a00:	117ffe04 	addi	r5,r2,-8
   86a04:	880d883a 	mov	r6,r17
   86a08:	35000c0e 	bge	r6,r20,86a3c <__s2b+0xe8>
   86a0c:	a185c83a 	sub	r2,r20,r6
   86a10:	2821883a 	mov	r16,r5
   86a14:	28a3883a 	add	r17,r5,r2
   86a18:	81c00007 	ldb	r7,0(r16)
   86a1c:	400b883a 	mov	r5,r8
   86a20:	9009883a 	mov	r4,r18
   86a24:	39fff404 	addi	r7,r7,-48
   86a28:	01800284 	movi	r6,10
   86a2c:	00867080 	call	86708 <__multadd>
   86a30:	84000044 	addi	r16,r16,1
   86a34:	1011883a 	mov	r8,r2
   86a38:	847ff71e 	bne	r16,r17,86a18 <__s2b+0xc4>
   86a3c:	4005883a 	mov	r2,r8
   86a40:	dfc00617 	ldw	ra,24(sp)
   86a44:	dd400517 	ldw	r21,20(sp)
   86a48:	dd000417 	ldw	r20,16(sp)
   86a4c:	dcc00317 	ldw	r19,12(sp)
   86a50:	dc800217 	ldw	r18,8(sp)
   86a54:	dc400117 	ldw	r17,4(sp)
   86a58:	dc000017 	ldw	r16,0(sp)
   86a5c:	dec00704 	addi	sp,sp,28
   86a60:	f800283a 	ret
   86a64:	99400284 	addi	r5,r19,10
   86a68:	003fe706 	br	86a08 <__s2b+0xb4>
   86a6c:	000b883a 	mov	r5,zero
   86a70:	003fcd06 	br	869a8 <__s2b+0x54>

00086a74 <_realloc_r>:
   86a74:	defff404 	addi	sp,sp,-48
   86a78:	dd800815 	stw	r22,32(sp)
   86a7c:	dc800415 	stw	r18,16(sp)
   86a80:	dc400315 	stw	r17,12(sp)
   86a84:	dfc00b15 	stw	ra,44(sp)
   86a88:	df000a15 	stw	fp,40(sp)
   86a8c:	ddc00915 	stw	r23,36(sp)
   86a90:	dd400715 	stw	r21,28(sp)
   86a94:	dd000615 	stw	r20,24(sp)
   86a98:	dcc00515 	stw	r19,20(sp)
   86a9c:	dc000215 	stw	r16,8(sp)
   86aa0:	2825883a 	mov	r18,r5
   86aa4:	3023883a 	mov	r17,r6
   86aa8:	202d883a 	mov	r22,r4
   86aac:	2800c926 	beq	r5,zero,86dd4 <_realloc_r+0x360>
   86ab0:	008a5340 	call	8a534 <__malloc_lock>
   86ab4:	943ffe04 	addi	r16,r18,-8
   86ab8:	88c002c4 	addi	r3,r17,11
   86abc:	00800584 	movi	r2,22
   86ac0:	82000117 	ldw	r8,4(r16)
   86ac4:	10c01b2e 	bgeu	r2,r3,86b34 <_realloc_r+0xc0>
   86ac8:	00bffe04 	movi	r2,-8
   86acc:	188e703a 	and	r7,r3,r2
   86ad0:	3839883a 	mov	fp,r7
   86ad4:	38001a16 	blt	r7,zero,86b40 <_realloc_r+0xcc>
   86ad8:	e4401936 	bltu	fp,r17,86b40 <_realloc_r+0xcc>
   86adc:	013fff04 	movi	r4,-4
   86ae0:	4126703a 	and	r19,r8,r4
   86ae4:	99c02616 	blt	r19,r7,86b80 <_realloc_r+0x10c>
   86ae8:	802b883a 	mov	r21,r16
   86aec:	9829883a 	mov	r20,r19
   86af0:	84000204 	addi	r16,r16,8
   86af4:	a80f883a 	mov	r7,r21
   86af8:	a70dc83a 	sub	r6,r20,fp
   86afc:	008003c4 	movi	r2,15
   86b00:	1180c136 	bltu	r2,r6,86e08 <_realloc_r+0x394>
   86b04:	38800117 	ldw	r2,4(r7)
   86b08:	a549883a 	add	r4,r20,r21
   86b0c:	1080004c 	andi	r2,r2,1
   86b10:	a084b03a 	or	r2,r20,r2
   86b14:	38800115 	stw	r2,4(r7)
   86b18:	20c00117 	ldw	r3,4(r4)
   86b1c:	18c00054 	ori	r3,r3,1
   86b20:	20c00115 	stw	r3,4(r4)
   86b24:	b009883a 	mov	r4,r22
   86b28:	008a5540 	call	8a554 <__malloc_unlock>
   86b2c:	8023883a 	mov	r17,r16
   86b30:	00000606 	br	86b4c <_realloc_r+0xd8>
   86b34:	01c00404 	movi	r7,16
   86b38:	3839883a 	mov	fp,r7
   86b3c:	e47fe72e 	bgeu	fp,r17,86adc <_realloc_r+0x68>
   86b40:	00800304 	movi	r2,12
   86b44:	0023883a 	mov	r17,zero
   86b48:	b0800015 	stw	r2,0(r22)
   86b4c:	8805883a 	mov	r2,r17
   86b50:	dfc00b17 	ldw	ra,44(sp)
   86b54:	df000a17 	ldw	fp,40(sp)
   86b58:	ddc00917 	ldw	r23,36(sp)
   86b5c:	dd800817 	ldw	r22,32(sp)
   86b60:	dd400717 	ldw	r21,28(sp)
   86b64:	dd000617 	ldw	r20,24(sp)
   86b68:	dcc00517 	ldw	r19,20(sp)
   86b6c:	dc800417 	ldw	r18,16(sp)
   86b70:	dc400317 	ldw	r17,12(sp)
   86b74:	dc000217 	ldw	r16,8(sp)
   86b78:	dec00c04 	addi	sp,sp,48
   86b7c:	f800283a 	ret
   86b80:	00800274 	movhi	r2,9
   86b84:	10b46604 	addi	r2,r2,-11880
   86b88:	12400217 	ldw	r9,8(r2)
   86b8c:	84cd883a 	add	r6,r16,r19
   86b90:	802b883a 	mov	r21,r16
   86b94:	3240b926 	beq	r6,r9,86e7c <_realloc_r+0x408>
   86b98:	31400117 	ldw	r5,4(r6)
   86b9c:	00bfff84 	movi	r2,-2
   86ba0:	2884703a 	and	r2,r5,r2
   86ba4:	1185883a 	add	r2,r2,r6
   86ba8:	10c00117 	ldw	r3,4(r2)
   86bac:	18c0004c 	andi	r3,r3,1
   86bb0:	1807003a 	cmpeq	r3,r3,zero
   86bb4:	1800a326 	beq	r3,zero,86e44 <_realloc_r+0x3d0>
   86bb8:	2908703a 	and	r4,r5,r4
   86bbc:	9929883a 	add	r20,r19,r4
   86bc0:	a1c0a30e 	bge	r20,r7,86e50 <_realloc_r+0x3dc>
   86bc4:	4080004c 	andi	r2,r8,1
   86bc8:	1000551e 	bne	r2,zero,86d20 <_realloc_r+0x2ac>
   86bcc:	80800017 	ldw	r2,0(r16)
   86bd0:	80afc83a 	sub	r23,r16,r2
   86bd4:	b8c00117 	ldw	r3,4(r23)
   86bd8:	00bfff04 	movi	r2,-4
   86bdc:	1884703a 	and	r2,r3,r2
   86be0:	30002e26 	beq	r6,zero,86c9c <_realloc_r+0x228>
   86be4:	3240b926 	beq	r6,r9,86ecc <_realloc_r+0x458>
   86be8:	98a9883a 	add	r20,r19,r2
   86bec:	2509883a 	add	r4,r4,r20
   86bf0:	d9000015 	stw	r4,0(sp)
   86bf4:	21c02a16 	blt	r4,r7,86ca0 <_realloc_r+0x22c>
   86bf8:	30800317 	ldw	r2,12(r6)
   86bfc:	30c00217 	ldw	r3,8(r6)
   86c00:	01400904 	movi	r5,36
   86c04:	99bfff04 	addi	r6,r19,-4
   86c08:	18800315 	stw	r2,12(r3)
   86c0c:	10c00215 	stw	r3,8(r2)
   86c10:	b9000317 	ldw	r4,12(r23)
   86c14:	b8800217 	ldw	r2,8(r23)
   86c18:	b82b883a 	mov	r21,r23
   86c1c:	bc000204 	addi	r16,r23,8
   86c20:	20800215 	stw	r2,8(r4)
   86c24:	11000315 	stw	r4,12(r2)
   86c28:	2980e436 	bltu	r5,r6,86fbc <_realloc_r+0x548>
   86c2c:	008004c4 	movi	r2,19
   86c30:	9009883a 	mov	r4,r18
   86c34:	8011883a 	mov	r8,r16
   86c38:	11800f2e 	bgeu	r2,r6,86c78 <_realloc_r+0x204>
   86c3c:	90800017 	ldw	r2,0(r18)
   86c40:	ba000404 	addi	r8,r23,16
   86c44:	91000204 	addi	r4,r18,8
   86c48:	b8800215 	stw	r2,8(r23)
   86c4c:	90c00117 	ldw	r3,4(r18)
   86c50:	008006c4 	movi	r2,27
   86c54:	b8c00315 	stw	r3,12(r23)
   86c58:	1180072e 	bgeu	r2,r6,86c78 <_realloc_r+0x204>
   86c5c:	90c00217 	ldw	r3,8(r18)
   86c60:	ba000604 	addi	r8,r23,24
   86c64:	91000404 	addi	r4,r18,16
   86c68:	b8c00415 	stw	r3,16(r23)
   86c6c:	90800317 	ldw	r2,12(r18)
   86c70:	b8800515 	stw	r2,20(r23)
   86c74:	3140e726 	beq	r6,r5,87014 <_realloc_r+0x5a0>
   86c78:	20800017 	ldw	r2,0(r4)
   86c7c:	dd000017 	ldw	r20,0(sp)
   86c80:	b80f883a 	mov	r7,r23
   86c84:	40800015 	stw	r2,0(r8)
   86c88:	20c00117 	ldw	r3,4(r4)
   86c8c:	40c00115 	stw	r3,4(r8)
   86c90:	20800217 	ldw	r2,8(r4)
   86c94:	40800215 	stw	r2,8(r8)
   86c98:	003f9706 	br	86af8 <_realloc_r+0x84>
   86c9c:	98a9883a 	add	r20,r19,r2
   86ca0:	a1c01f16 	blt	r20,r7,86d20 <_realloc_r+0x2ac>
   86ca4:	b8c00317 	ldw	r3,12(r23)
   86ca8:	b8800217 	ldw	r2,8(r23)
   86cac:	99bfff04 	addi	r6,r19,-4
   86cb0:	01400904 	movi	r5,36
   86cb4:	b82b883a 	mov	r21,r23
   86cb8:	18800215 	stw	r2,8(r3)
   86cbc:	10c00315 	stw	r3,12(r2)
   86cc0:	bc000204 	addi	r16,r23,8
   86cc4:	2980c336 	bltu	r5,r6,86fd4 <_realloc_r+0x560>
   86cc8:	008004c4 	movi	r2,19
   86ccc:	9009883a 	mov	r4,r18
   86cd0:	8011883a 	mov	r8,r16
   86cd4:	11800f2e 	bgeu	r2,r6,86d14 <_realloc_r+0x2a0>
   86cd8:	90800017 	ldw	r2,0(r18)
   86cdc:	ba000404 	addi	r8,r23,16
   86ce0:	91000204 	addi	r4,r18,8
   86ce4:	b8800215 	stw	r2,8(r23)
   86ce8:	90c00117 	ldw	r3,4(r18)
   86cec:	008006c4 	movi	r2,27
   86cf0:	b8c00315 	stw	r3,12(r23)
   86cf4:	1180072e 	bgeu	r2,r6,86d14 <_realloc_r+0x2a0>
   86cf8:	90c00217 	ldw	r3,8(r18)
   86cfc:	ba000604 	addi	r8,r23,24
   86d00:	91000404 	addi	r4,r18,16
   86d04:	b8c00415 	stw	r3,16(r23)
   86d08:	90800317 	ldw	r2,12(r18)
   86d0c:	b8800515 	stw	r2,20(r23)
   86d10:	3140c726 	beq	r6,r5,87030 <_realloc_r+0x5bc>
   86d14:	20800017 	ldw	r2,0(r4)
   86d18:	b80f883a 	mov	r7,r23
   86d1c:	003fd906 	br	86c84 <_realloc_r+0x210>
   86d20:	880b883a 	mov	r5,r17
   86d24:	b009883a 	mov	r4,r22
   86d28:	0084fac0 	call	84fac <_malloc_r>
   86d2c:	1023883a 	mov	r17,r2
   86d30:	10002526 	beq	r2,zero,86dc8 <_realloc_r+0x354>
   86d34:	80800117 	ldw	r2,4(r16)
   86d38:	00ffff84 	movi	r3,-2
   86d3c:	893ffe04 	addi	r4,r17,-8
   86d40:	10c4703a 	and	r2,r2,r3
   86d44:	8085883a 	add	r2,r16,r2
   86d48:	20809526 	beq	r4,r2,86fa0 <_realloc_r+0x52c>
   86d4c:	99bfff04 	addi	r6,r19,-4
   86d50:	01c00904 	movi	r7,36
   86d54:	39804536 	bltu	r7,r6,86e6c <_realloc_r+0x3f8>
   86d58:	008004c4 	movi	r2,19
   86d5c:	9009883a 	mov	r4,r18
   86d60:	880b883a 	mov	r5,r17
   86d64:	11800f2e 	bgeu	r2,r6,86da4 <_realloc_r+0x330>
   86d68:	90800017 	ldw	r2,0(r18)
   86d6c:	89400204 	addi	r5,r17,8
   86d70:	91000204 	addi	r4,r18,8
   86d74:	88800015 	stw	r2,0(r17)
   86d78:	90c00117 	ldw	r3,4(r18)
   86d7c:	008006c4 	movi	r2,27
   86d80:	88c00115 	stw	r3,4(r17)
   86d84:	1180072e 	bgeu	r2,r6,86da4 <_realloc_r+0x330>
   86d88:	90c00217 	ldw	r3,8(r18)
   86d8c:	89400404 	addi	r5,r17,16
   86d90:	91000404 	addi	r4,r18,16
   86d94:	88c00215 	stw	r3,8(r17)
   86d98:	90800317 	ldw	r2,12(r18)
   86d9c:	88800315 	stw	r2,12(r17)
   86da0:	31c09126 	beq	r6,r7,86fe8 <_realloc_r+0x574>
   86da4:	20800017 	ldw	r2,0(r4)
   86da8:	28800015 	stw	r2,0(r5)
   86dac:	20c00117 	ldw	r3,4(r4)
   86db0:	28c00115 	stw	r3,4(r5)
   86db4:	20800217 	ldw	r2,8(r4)
   86db8:	28800215 	stw	r2,8(r5)
   86dbc:	900b883a 	mov	r5,r18
   86dc0:	b009883a 	mov	r4,r22
   86dc4:	00844240 	call	84424 <_free_r>
   86dc8:	b009883a 	mov	r4,r22
   86dcc:	008a5540 	call	8a554 <__malloc_unlock>
   86dd0:	003f5e06 	br	86b4c <_realloc_r+0xd8>
   86dd4:	300b883a 	mov	r5,r6
   86dd8:	dfc00b17 	ldw	ra,44(sp)
   86ddc:	df000a17 	ldw	fp,40(sp)
   86de0:	ddc00917 	ldw	r23,36(sp)
   86de4:	dd800817 	ldw	r22,32(sp)
   86de8:	dd400717 	ldw	r21,28(sp)
   86dec:	dd000617 	ldw	r20,24(sp)
   86df0:	dcc00517 	ldw	r19,20(sp)
   86df4:	dc800417 	ldw	r18,16(sp)
   86df8:	dc400317 	ldw	r17,12(sp)
   86dfc:	dc000217 	ldw	r16,8(sp)
   86e00:	dec00c04 	addi	sp,sp,48
   86e04:	0084fac1 	jmpi	84fac <_malloc_r>
   86e08:	38800117 	ldw	r2,4(r7)
   86e0c:	e54b883a 	add	r5,fp,r21
   86e10:	31000054 	ori	r4,r6,1
   86e14:	1080004c 	andi	r2,r2,1
   86e18:	1704b03a 	or	r2,r2,fp
   86e1c:	38800115 	stw	r2,4(r7)
   86e20:	29000115 	stw	r4,4(r5)
   86e24:	2987883a 	add	r3,r5,r6
   86e28:	18800117 	ldw	r2,4(r3)
   86e2c:	29400204 	addi	r5,r5,8
   86e30:	b009883a 	mov	r4,r22
   86e34:	10800054 	ori	r2,r2,1
   86e38:	18800115 	stw	r2,4(r3)
   86e3c:	00844240 	call	84424 <_free_r>
   86e40:	003f3806 	br	86b24 <_realloc_r+0xb0>
   86e44:	000d883a 	mov	r6,zero
   86e48:	0009883a 	mov	r4,zero
   86e4c:	003f5d06 	br	86bc4 <_realloc_r+0x150>
   86e50:	30c00217 	ldw	r3,8(r6)
   86e54:	30800317 	ldw	r2,12(r6)
   86e58:	800f883a 	mov	r7,r16
   86e5c:	84000204 	addi	r16,r16,8
   86e60:	10c00215 	stw	r3,8(r2)
   86e64:	18800315 	stw	r2,12(r3)
   86e68:	003f2306 	br	86af8 <_realloc_r+0x84>
   86e6c:	8809883a 	mov	r4,r17
   86e70:	900b883a 	mov	r5,r18
   86e74:	00858700 	call	85870 <memmove>
   86e78:	003fd006 	br	86dbc <_realloc_r+0x348>
   86e7c:	30800117 	ldw	r2,4(r6)
   86e80:	e0c00404 	addi	r3,fp,16
   86e84:	1108703a 	and	r4,r2,r4
   86e88:	9905883a 	add	r2,r19,r4
   86e8c:	10ff4d16 	blt	r2,r3,86bc4 <_realloc_r+0x150>
   86e90:	1705c83a 	sub	r2,r2,fp
   86e94:	870b883a 	add	r5,r16,fp
   86e98:	10800054 	ori	r2,r2,1
   86e9c:	28800115 	stw	r2,4(r5)
   86ea0:	80c00117 	ldw	r3,4(r16)
   86ea4:	00800274 	movhi	r2,9
   86ea8:	10b46604 	addi	r2,r2,-11880
   86eac:	b009883a 	mov	r4,r22
   86eb0:	18c0004c 	andi	r3,r3,1
   86eb4:	e0c6b03a 	or	r3,fp,r3
   86eb8:	11400215 	stw	r5,8(r2)
   86ebc:	80c00115 	stw	r3,4(r16)
   86ec0:	008a5540 	call	8a554 <__malloc_unlock>
   86ec4:	84400204 	addi	r17,r16,8
   86ec8:	003f2006 	br	86b4c <_realloc_r+0xd8>
   86ecc:	98a9883a 	add	r20,r19,r2
   86ed0:	2509883a 	add	r4,r4,r20
   86ed4:	e0800404 	addi	r2,fp,16
   86ed8:	d9000115 	stw	r4,4(sp)
   86edc:	20bf7016 	blt	r4,r2,86ca0 <_realloc_r+0x22c>
   86ee0:	b8c00317 	ldw	r3,12(r23)
   86ee4:	b8800217 	ldw	r2,8(r23)
   86ee8:	99bfff04 	addi	r6,r19,-4
   86eec:	01400904 	movi	r5,36
   86ef0:	18800215 	stw	r2,8(r3)
   86ef4:	10c00315 	stw	r3,12(r2)
   86ef8:	bc400204 	addi	r17,r23,8
   86efc:	29804136 	bltu	r5,r6,87004 <_realloc_r+0x590>
   86f00:	008004c4 	movi	r2,19
   86f04:	9009883a 	mov	r4,r18
   86f08:	880f883a 	mov	r7,r17
   86f0c:	11800f2e 	bgeu	r2,r6,86f4c <_realloc_r+0x4d8>
   86f10:	90800017 	ldw	r2,0(r18)
   86f14:	b9c00404 	addi	r7,r23,16
   86f18:	91000204 	addi	r4,r18,8
   86f1c:	b8800215 	stw	r2,8(r23)
   86f20:	90c00117 	ldw	r3,4(r18)
   86f24:	008006c4 	movi	r2,27
   86f28:	b8c00315 	stw	r3,12(r23)
   86f2c:	1180072e 	bgeu	r2,r6,86f4c <_realloc_r+0x4d8>
   86f30:	90c00217 	ldw	r3,8(r18)
   86f34:	b9c00604 	addi	r7,r23,24
   86f38:	91000404 	addi	r4,r18,16
   86f3c:	b8c00415 	stw	r3,16(r23)
   86f40:	90800317 	ldw	r2,12(r18)
   86f44:	b8800515 	stw	r2,20(r23)
   86f48:	31404026 	beq	r6,r5,8704c <_realloc_r+0x5d8>
   86f4c:	20800017 	ldw	r2,0(r4)
   86f50:	38800015 	stw	r2,0(r7)
   86f54:	20c00117 	ldw	r3,4(r4)
   86f58:	38c00115 	stw	r3,4(r7)
   86f5c:	20800217 	ldw	r2,8(r4)
   86f60:	38800215 	stw	r2,8(r7)
   86f64:	d8c00117 	ldw	r3,4(sp)
   86f68:	bf0b883a 	add	r5,r23,fp
   86f6c:	b009883a 	mov	r4,r22
   86f70:	1f05c83a 	sub	r2,r3,fp
   86f74:	10800054 	ori	r2,r2,1
   86f78:	28800115 	stw	r2,4(r5)
   86f7c:	b8c00117 	ldw	r3,4(r23)
   86f80:	00800274 	movhi	r2,9
   86f84:	10b46604 	addi	r2,r2,-11880
   86f88:	11400215 	stw	r5,8(r2)
   86f8c:	18c0004c 	andi	r3,r3,1
   86f90:	e0c6b03a 	or	r3,fp,r3
   86f94:	b8c00115 	stw	r3,4(r23)
   86f98:	008a5540 	call	8a554 <__malloc_unlock>
   86f9c:	003eeb06 	br	86b4c <_realloc_r+0xd8>
   86fa0:	20800117 	ldw	r2,4(r4)
   86fa4:	00ffff04 	movi	r3,-4
   86fa8:	800f883a 	mov	r7,r16
   86fac:	10c4703a 	and	r2,r2,r3
   86fb0:	98a9883a 	add	r20,r19,r2
   86fb4:	84000204 	addi	r16,r16,8
   86fb8:	003ecf06 	br	86af8 <_realloc_r+0x84>
   86fbc:	900b883a 	mov	r5,r18
   86fc0:	8009883a 	mov	r4,r16
   86fc4:	00858700 	call	85870 <memmove>
   86fc8:	dd000017 	ldw	r20,0(sp)
   86fcc:	b80f883a 	mov	r7,r23
   86fd0:	003ec906 	br	86af8 <_realloc_r+0x84>
   86fd4:	900b883a 	mov	r5,r18
   86fd8:	8009883a 	mov	r4,r16
   86fdc:	00858700 	call	85870 <memmove>
   86fe0:	b80f883a 	mov	r7,r23
   86fe4:	003ec406 	br	86af8 <_realloc_r+0x84>
   86fe8:	90c00417 	ldw	r3,16(r18)
   86fec:	89400604 	addi	r5,r17,24
   86ff0:	91000604 	addi	r4,r18,24
   86ff4:	88c00415 	stw	r3,16(r17)
   86ff8:	90800517 	ldw	r2,20(r18)
   86ffc:	88800515 	stw	r2,20(r17)
   87000:	003f6806 	br	86da4 <_realloc_r+0x330>
   87004:	900b883a 	mov	r5,r18
   87008:	8809883a 	mov	r4,r17
   8700c:	00858700 	call	85870 <memmove>
   87010:	003fd406 	br	86f64 <_realloc_r+0x4f0>
   87014:	90c00417 	ldw	r3,16(r18)
   87018:	91000604 	addi	r4,r18,24
   8701c:	ba000804 	addi	r8,r23,32
   87020:	b8c00615 	stw	r3,24(r23)
   87024:	90800517 	ldw	r2,20(r18)
   87028:	b8800715 	stw	r2,28(r23)
   8702c:	003f1206 	br	86c78 <_realloc_r+0x204>
   87030:	90c00417 	ldw	r3,16(r18)
   87034:	91000604 	addi	r4,r18,24
   87038:	ba000804 	addi	r8,r23,32
   8703c:	b8c00615 	stw	r3,24(r23)
   87040:	90800517 	ldw	r2,20(r18)
   87044:	b8800715 	stw	r2,28(r23)
   87048:	003f3206 	br	86d14 <_realloc_r+0x2a0>
   8704c:	90c00417 	ldw	r3,16(r18)
   87050:	91000604 	addi	r4,r18,24
   87054:	b9c00804 	addi	r7,r23,32
   87058:	b8c00615 	stw	r3,24(r23)
   8705c:	90800517 	ldw	r2,20(r18)
   87060:	b8800715 	stw	r2,28(r23)
   87064:	003fb906 	br	86f4c <_realloc_r+0x4d8>

00087068 <__isinfd>:
   87068:	200d883a 	mov	r6,r4
   8706c:	0109c83a 	sub	r4,zero,r4
   87070:	2188b03a 	or	r4,r4,r6
   87074:	2008d7fa 	srli	r4,r4,31
   87078:	00a00034 	movhi	r2,32768
   8707c:	10bfffc4 	addi	r2,r2,-1
   87080:	1144703a 	and	r2,r2,r5
   87084:	2088b03a 	or	r4,r4,r2
   87088:	009ffc34 	movhi	r2,32752
   8708c:	1105c83a 	sub	r2,r2,r4
   87090:	0087c83a 	sub	r3,zero,r2
   87094:	10c4b03a 	or	r2,r2,r3
   87098:	1004d7fa 	srli	r2,r2,31
   8709c:	00c00044 	movi	r3,1
   870a0:	1885c83a 	sub	r2,r3,r2
   870a4:	f800283a 	ret

000870a8 <__isnand>:
   870a8:	200d883a 	mov	r6,r4
   870ac:	0109c83a 	sub	r4,zero,r4
   870b0:	2188b03a 	or	r4,r4,r6
   870b4:	2008d7fa 	srli	r4,r4,31
   870b8:	00a00034 	movhi	r2,32768
   870bc:	10bfffc4 	addi	r2,r2,-1
   870c0:	1144703a 	and	r2,r2,r5
   870c4:	2088b03a 	or	r4,r4,r2
   870c8:	009ffc34 	movhi	r2,32752
   870cc:	1105c83a 	sub	r2,r2,r4
   870d0:	1004d7fa 	srli	r2,r2,31
   870d4:	f800283a 	ret

000870d8 <_sbrk_r>:
   870d8:	defffd04 	addi	sp,sp,-12
   870dc:	dc000015 	stw	r16,0(sp)
   870e0:	04000274 	movhi	r16,9
   870e4:	84009704 	addi	r16,r16,604
   870e8:	dc400115 	stw	r17,4(sp)
   870ec:	80000015 	stw	zero,0(r16)
   870f0:	2023883a 	mov	r17,r4
   870f4:	2809883a 	mov	r4,r5
   870f8:	dfc00215 	stw	ra,8(sp)
   870fc:	008a7b00 	call	8a7b0 <sbrk>
   87100:	1007883a 	mov	r3,r2
   87104:	00bfffc4 	movi	r2,-1
   87108:	18800626 	beq	r3,r2,87124 <_sbrk_r+0x4c>
   8710c:	1805883a 	mov	r2,r3
   87110:	dfc00217 	ldw	ra,8(sp)
   87114:	dc400117 	ldw	r17,4(sp)
   87118:	dc000017 	ldw	r16,0(sp)
   8711c:	dec00304 	addi	sp,sp,12
   87120:	f800283a 	ret
   87124:	80800017 	ldw	r2,0(r16)
   87128:	103ff826 	beq	r2,zero,8710c <_sbrk_r+0x34>
   8712c:	88800015 	stw	r2,0(r17)
   87130:	1805883a 	mov	r2,r3
   87134:	dfc00217 	ldw	ra,8(sp)
   87138:	dc400117 	ldw	r17,4(sp)
   8713c:	dc000017 	ldw	r16,0(sp)
   87140:	dec00304 	addi	sp,sp,12
   87144:	f800283a 	ret

00087148 <__sclose>:
   87148:	2940038f 	ldh	r5,14(r5)
   8714c:	00875041 	jmpi	87504 <_close_r>

00087150 <__sseek>:
   87150:	defffe04 	addi	sp,sp,-8
   87154:	dc000015 	stw	r16,0(sp)
   87158:	2821883a 	mov	r16,r5
   8715c:	2940038f 	ldh	r5,14(r5)
   87160:	dfc00115 	stw	ra,4(sp)
   87164:	008777c0 	call	8777c <_lseek_r>
   87168:	1007883a 	mov	r3,r2
   8716c:	00bfffc4 	movi	r2,-1
   87170:	18800926 	beq	r3,r2,87198 <__sseek+0x48>
   87174:	8080030b 	ldhu	r2,12(r16)
   87178:	80c01415 	stw	r3,80(r16)
   8717c:	10840014 	ori	r2,r2,4096
   87180:	8080030d 	sth	r2,12(r16)
   87184:	1805883a 	mov	r2,r3
   87188:	dfc00117 	ldw	ra,4(sp)
   8718c:	dc000017 	ldw	r16,0(sp)
   87190:	dec00204 	addi	sp,sp,8
   87194:	f800283a 	ret
   87198:	8080030b 	ldhu	r2,12(r16)
   8719c:	10bbffcc 	andi	r2,r2,61439
   871a0:	8080030d 	sth	r2,12(r16)
   871a4:	1805883a 	mov	r2,r3
   871a8:	dfc00117 	ldw	ra,4(sp)
   871ac:	dc000017 	ldw	r16,0(sp)
   871b0:	dec00204 	addi	sp,sp,8
   871b4:	f800283a 	ret

000871b8 <__swrite>:
   871b8:	2880030b 	ldhu	r2,12(r5)
   871bc:	defffb04 	addi	sp,sp,-20
   871c0:	dcc00315 	stw	r19,12(sp)
   871c4:	1080400c 	andi	r2,r2,256
   871c8:	dc800215 	stw	r18,8(sp)
   871cc:	dc400115 	stw	r17,4(sp)
   871d0:	dc000015 	stw	r16,0(sp)
   871d4:	3027883a 	mov	r19,r6
   871d8:	3825883a 	mov	r18,r7
   871dc:	dfc00415 	stw	ra,16(sp)
   871e0:	2821883a 	mov	r16,r5
   871e4:	000d883a 	mov	r6,zero
   871e8:	01c00084 	movi	r7,2
   871ec:	2023883a 	mov	r17,r4
   871f0:	10000226 	beq	r2,zero,871fc <__swrite+0x44>
   871f4:	2940038f 	ldh	r5,14(r5)
   871f8:	008777c0 	call	8777c <_lseek_r>
   871fc:	8080030b 	ldhu	r2,12(r16)
   87200:	8140038f 	ldh	r5,14(r16)
   87204:	8809883a 	mov	r4,r17
   87208:	10bbffcc 	andi	r2,r2,61439
   8720c:	980d883a 	mov	r6,r19
   87210:	900f883a 	mov	r7,r18
   87214:	8080030d 	sth	r2,12(r16)
   87218:	dfc00417 	ldw	ra,16(sp)
   8721c:	dcc00317 	ldw	r19,12(sp)
   87220:	dc800217 	ldw	r18,8(sp)
   87224:	dc400117 	ldw	r17,4(sp)
   87228:	dc000017 	ldw	r16,0(sp)
   8722c:	dec00504 	addi	sp,sp,20
   87230:	00873c41 	jmpi	873c4 <_write_r>

00087234 <__sread>:
   87234:	defffe04 	addi	sp,sp,-8
   87238:	dc000015 	stw	r16,0(sp)
   8723c:	2821883a 	mov	r16,r5
   87240:	2940038f 	ldh	r5,14(r5)
   87244:	dfc00115 	stw	ra,4(sp)
   87248:	00877f40 	call	877f4 <_read_r>
   8724c:	1007883a 	mov	r3,r2
   87250:	10000816 	blt	r2,zero,87274 <__sread+0x40>
   87254:	80801417 	ldw	r2,80(r16)
   87258:	10c5883a 	add	r2,r2,r3
   8725c:	80801415 	stw	r2,80(r16)
   87260:	1805883a 	mov	r2,r3
   87264:	dfc00117 	ldw	ra,4(sp)
   87268:	dc000017 	ldw	r16,0(sp)
   8726c:	dec00204 	addi	sp,sp,8
   87270:	f800283a 	ret
   87274:	8080030b 	ldhu	r2,12(r16)
   87278:	10bbffcc 	andi	r2,r2,61439
   8727c:	8080030d 	sth	r2,12(r16)
   87280:	1805883a 	mov	r2,r3
   87284:	dfc00117 	ldw	ra,4(sp)
   87288:	dc000017 	ldw	r16,0(sp)
   8728c:	dec00204 	addi	sp,sp,8
   87290:	f800283a 	ret

00087294 <strcmp>:
   87294:	2144b03a 	or	r2,r4,r5
   87298:	108000cc 	andi	r2,r2,3
   8729c:	10001d1e 	bne	r2,zero,87314 <strcmp+0x80>
   872a0:	200f883a 	mov	r7,r4
   872a4:	28800017 	ldw	r2,0(r5)
   872a8:	21000017 	ldw	r4,0(r4)
   872ac:	280d883a 	mov	r6,r5
   872b0:	2080161e 	bne	r4,r2,8730c <strcmp+0x78>
   872b4:	023fbff4 	movhi	r8,65279
   872b8:	423fbfc4 	addi	r8,r8,-257
   872bc:	2207883a 	add	r3,r4,r8
   872c0:	01602074 	movhi	r5,32897
   872c4:	29602004 	addi	r5,r5,-32640
   872c8:	1946703a 	and	r3,r3,r5
   872cc:	0104303a 	nor	r2,zero,r4
   872d0:	10c4703a 	and	r2,r2,r3
   872d4:	10001c1e 	bne	r2,zero,87348 <strcmp+0xb4>
   872d8:	4013883a 	mov	r9,r8
   872dc:	2811883a 	mov	r8,r5
   872e0:	00000106 	br	872e8 <strcmp+0x54>
   872e4:	1800181e 	bne	r3,zero,87348 <strcmp+0xb4>
   872e8:	39c00104 	addi	r7,r7,4
   872ec:	39000017 	ldw	r4,0(r7)
   872f0:	31800104 	addi	r6,r6,4
   872f4:	31400017 	ldw	r5,0(r6)
   872f8:	2245883a 	add	r2,r4,r9
   872fc:	1204703a 	and	r2,r2,r8
   87300:	0106303a 	nor	r3,zero,r4
   87304:	1886703a 	and	r3,r3,r2
   87308:	217ff626 	beq	r4,r5,872e4 <strcmp+0x50>
   8730c:	3809883a 	mov	r4,r7
   87310:	300b883a 	mov	r5,r6
   87314:	20c00007 	ldb	r3,0(r4)
   87318:	1800051e 	bne	r3,zero,87330 <strcmp+0x9c>
   8731c:	00000606 	br	87338 <strcmp+0xa4>
   87320:	21000044 	addi	r4,r4,1
   87324:	20c00007 	ldb	r3,0(r4)
   87328:	29400044 	addi	r5,r5,1
   8732c:	18000226 	beq	r3,zero,87338 <strcmp+0xa4>
   87330:	28800007 	ldb	r2,0(r5)
   87334:	18bffa26 	beq	r3,r2,87320 <strcmp+0x8c>
   87338:	20c00003 	ldbu	r3,0(r4)
   8733c:	28800003 	ldbu	r2,0(r5)
   87340:	1885c83a 	sub	r2,r3,r2
   87344:	f800283a 	ret
   87348:	0005883a 	mov	r2,zero
   8734c:	f800283a 	ret

00087350 <strlen>:
   87350:	208000cc 	andi	r2,r4,3
   87354:	2011883a 	mov	r8,r4
   87358:	1000161e 	bne	r2,zero,873b4 <strlen+0x64>
   8735c:	20c00017 	ldw	r3,0(r4)
   87360:	017fbff4 	movhi	r5,65279
   87364:	297fbfc4 	addi	r5,r5,-257
   87368:	01e02074 	movhi	r7,32897
   8736c:	39e02004 	addi	r7,r7,-32640
   87370:	1945883a 	add	r2,r3,r5
   87374:	11c4703a 	and	r2,r2,r7
   87378:	00c6303a 	nor	r3,zero,r3
   8737c:	1886703a 	and	r3,r3,r2
   87380:	18000c1e 	bne	r3,zero,873b4 <strlen+0x64>
   87384:	280d883a 	mov	r6,r5
   87388:	380b883a 	mov	r5,r7
   8738c:	21000104 	addi	r4,r4,4
   87390:	20800017 	ldw	r2,0(r4)
   87394:	1187883a 	add	r3,r2,r6
   87398:	1946703a 	and	r3,r3,r5
   8739c:	0084303a 	nor	r2,zero,r2
   873a0:	10c4703a 	and	r2,r2,r3
   873a4:	103ff926 	beq	r2,zero,8738c <strlen+0x3c>
   873a8:	20800007 	ldb	r2,0(r4)
   873ac:	10000326 	beq	r2,zero,873bc <strlen+0x6c>
   873b0:	21000044 	addi	r4,r4,1
   873b4:	20800007 	ldb	r2,0(r4)
   873b8:	103ffd1e 	bne	r2,zero,873b0 <strlen+0x60>
   873bc:	2205c83a 	sub	r2,r4,r8
   873c0:	f800283a 	ret

000873c4 <_write_r>:
   873c4:	defffd04 	addi	sp,sp,-12
   873c8:	dc000015 	stw	r16,0(sp)
   873cc:	04000274 	movhi	r16,9
   873d0:	84009704 	addi	r16,r16,604
   873d4:	dc400115 	stw	r17,4(sp)
   873d8:	80000015 	stw	zero,0(r16)
   873dc:	2023883a 	mov	r17,r4
   873e0:	2809883a 	mov	r4,r5
   873e4:	300b883a 	mov	r5,r6
   873e8:	380d883a 	mov	r6,r7
   873ec:	dfc00215 	stw	ra,8(sp)
   873f0:	008a89c0 	call	8a89c <write>
   873f4:	1007883a 	mov	r3,r2
   873f8:	00bfffc4 	movi	r2,-1
   873fc:	18800626 	beq	r3,r2,87418 <_write_r+0x54>
   87400:	1805883a 	mov	r2,r3
   87404:	dfc00217 	ldw	ra,8(sp)
   87408:	dc400117 	ldw	r17,4(sp)
   8740c:	dc000017 	ldw	r16,0(sp)
   87410:	dec00304 	addi	sp,sp,12
   87414:	f800283a 	ret
   87418:	80800017 	ldw	r2,0(r16)
   8741c:	103ff826 	beq	r2,zero,87400 <_write_r+0x3c>
   87420:	88800015 	stw	r2,0(r17)
   87424:	1805883a 	mov	r2,r3
   87428:	dfc00217 	ldw	ra,8(sp)
   8742c:	dc400117 	ldw	r17,4(sp)
   87430:	dc000017 	ldw	r16,0(sp)
   87434:	dec00304 	addi	sp,sp,12
   87438:	f800283a 	ret

0008743c <_calloc_r>:
   8743c:	defffe04 	addi	sp,sp,-8
   87440:	dc400015 	stw	r17,0(sp)
   87444:	2023883a 	mov	r17,r4
   87448:	2809883a 	mov	r4,r5
   8744c:	300b883a 	mov	r5,r6
   87450:	dfc00115 	stw	ra,4(sp)
   87454:	00897b00 	call	897b0 <__mulsi3>
   87458:	100b883a 	mov	r5,r2
   8745c:	8809883a 	mov	r4,r17
   87460:	0084fac0 	call	84fac <_malloc_r>
   87464:	1023883a 	mov	r17,r2
   87468:	01c00904 	movi	r7,36
   8746c:	10000d26 	beq	r2,zero,874a4 <_calloc_r+0x68>
   87470:	10ffff17 	ldw	r3,-4(r2)
   87474:	1009883a 	mov	r4,r2
   87478:	00bfff04 	movi	r2,-4
   8747c:	1886703a 	and	r3,r3,r2
   87480:	1887883a 	add	r3,r3,r2
   87484:	180d883a 	mov	r6,r3
   87488:	000b883a 	mov	r5,zero
   8748c:	38c01736 	bltu	r7,r3,874ec <_calloc_r+0xb0>
   87490:	008004c4 	movi	r2,19
   87494:	10c00836 	bltu	r2,r3,874b8 <_calloc_r+0x7c>
   87498:	20000215 	stw	zero,8(r4)
   8749c:	20000015 	stw	zero,0(r4)
   874a0:	20000115 	stw	zero,4(r4)
   874a4:	8805883a 	mov	r2,r17
   874a8:	dfc00117 	ldw	ra,4(sp)
   874ac:	dc400017 	ldw	r17,0(sp)
   874b0:	dec00204 	addi	sp,sp,8
   874b4:	f800283a 	ret
   874b8:	008006c4 	movi	r2,27
   874bc:	88000015 	stw	zero,0(r17)
   874c0:	88000115 	stw	zero,4(r17)
   874c4:	89000204 	addi	r4,r17,8
   874c8:	10fff32e 	bgeu	r2,r3,87498 <_calloc_r+0x5c>
   874cc:	88000215 	stw	zero,8(r17)
   874d0:	88000315 	stw	zero,12(r17)
   874d4:	89000404 	addi	r4,r17,16
   874d8:	19ffef1e 	bne	r3,r7,87498 <_calloc_r+0x5c>
   874dc:	89000604 	addi	r4,r17,24
   874e0:	88000415 	stw	zero,16(r17)
   874e4:	88000515 	stw	zero,20(r17)
   874e8:	003feb06 	br	87498 <_calloc_r+0x5c>
   874ec:	00859500 	call	85950 <memset>
   874f0:	8805883a 	mov	r2,r17
   874f4:	dfc00117 	ldw	ra,4(sp)
   874f8:	dc400017 	ldw	r17,0(sp)
   874fc:	dec00204 	addi	sp,sp,8
   87500:	f800283a 	ret

00087504 <_close_r>:
   87504:	defffd04 	addi	sp,sp,-12
   87508:	dc000015 	stw	r16,0(sp)
   8750c:	04000274 	movhi	r16,9
   87510:	84009704 	addi	r16,r16,604
   87514:	dc400115 	stw	r17,4(sp)
   87518:	80000015 	stw	zero,0(r16)
   8751c:	2023883a 	mov	r17,r4
   87520:	2809883a 	mov	r4,r5
   87524:	dfc00215 	stw	ra,8(sp)
   87528:	0089ea00 	call	89ea0 <close>
   8752c:	1007883a 	mov	r3,r2
   87530:	00bfffc4 	movi	r2,-1
   87534:	18800626 	beq	r3,r2,87550 <_close_r+0x4c>
   87538:	1805883a 	mov	r2,r3
   8753c:	dfc00217 	ldw	ra,8(sp)
   87540:	dc400117 	ldw	r17,4(sp)
   87544:	dc000017 	ldw	r16,0(sp)
   87548:	dec00304 	addi	sp,sp,12
   8754c:	f800283a 	ret
   87550:	80800017 	ldw	r2,0(r16)
   87554:	103ff826 	beq	r2,zero,87538 <_close_r+0x34>
   87558:	88800015 	stw	r2,0(r17)
   8755c:	1805883a 	mov	r2,r3
   87560:	dfc00217 	ldw	ra,8(sp)
   87564:	dc400117 	ldw	r17,4(sp)
   87568:	dc000017 	ldw	r16,0(sp)
   8756c:	dec00304 	addi	sp,sp,12
   87570:	f800283a 	ret

00087574 <_fclose_r>:
   87574:	defffc04 	addi	sp,sp,-16
   87578:	dc400115 	stw	r17,4(sp)
   8757c:	dc000015 	stw	r16,0(sp)
   87580:	dfc00315 	stw	ra,12(sp)
   87584:	dc800215 	stw	r18,8(sp)
   87588:	2821883a 	mov	r16,r5
   8758c:	2023883a 	mov	r17,r4
   87590:	28002926 	beq	r5,zero,87638 <_fclose_r+0xc4>
   87594:	008405c0 	call	8405c <__sfp_lock_acquire>
   87598:	88000226 	beq	r17,zero,875a4 <_fclose_r+0x30>
   8759c:	88800e17 	ldw	r2,56(r17)
   875a0:	10002d26 	beq	r2,zero,87658 <_fclose_r+0xe4>
   875a4:	8080030f 	ldh	r2,12(r16)
   875a8:	10002226 	beq	r2,zero,87634 <_fclose_r+0xc0>
   875ac:	8809883a 	mov	r4,r17
   875b0:	800b883a 	mov	r5,r16
   875b4:	0083dd40 	call	83dd4 <_fflush_r>
   875b8:	1025883a 	mov	r18,r2
   875bc:	80800b17 	ldw	r2,44(r16)
   875c0:	10000426 	beq	r2,zero,875d4 <_fclose_r+0x60>
   875c4:	81400717 	ldw	r5,28(r16)
   875c8:	8809883a 	mov	r4,r17
   875cc:	103ee83a 	callr	r2
   875d0:	10002a16 	blt	r2,zero,8767c <_fclose_r+0x108>
   875d4:	8080030b 	ldhu	r2,12(r16)
   875d8:	1080200c 	andi	r2,r2,128
   875dc:	1000231e 	bne	r2,zero,8766c <_fclose_r+0xf8>
   875e0:	81400c17 	ldw	r5,48(r16)
   875e4:	28000526 	beq	r5,zero,875fc <_fclose_r+0x88>
   875e8:	80801004 	addi	r2,r16,64
   875ec:	28800226 	beq	r5,r2,875f8 <_fclose_r+0x84>
   875f0:	8809883a 	mov	r4,r17
   875f4:	00844240 	call	84424 <_free_r>
   875f8:	80000c15 	stw	zero,48(r16)
   875fc:	81401117 	ldw	r5,68(r16)
   87600:	28000326 	beq	r5,zero,87610 <_fclose_r+0x9c>
   87604:	8809883a 	mov	r4,r17
   87608:	00844240 	call	84424 <_free_r>
   8760c:	80001115 	stw	zero,68(r16)
   87610:	8000030d 	sth	zero,12(r16)
   87614:	00840600 	call	84060 <__sfp_lock_release>
   87618:	9005883a 	mov	r2,r18
   8761c:	dfc00317 	ldw	ra,12(sp)
   87620:	dc800217 	ldw	r18,8(sp)
   87624:	dc400117 	ldw	r17,4(sp)
   87628:	dc000017 	ldw	r16,0(sp)
   8762c:	dec00404 	addi	sp,sp,16
   87630:	f800283a 	ret
   87634:	00840600 	call	84060 <__sfp_lock_release>
   87638:	0025883a 	mov	r18,zero
   8763c:	9005883a 	mov	r2,r18
   87640:	dfc00317 	ldw	ra,12(sp)
   87644:	dc800217 	ldw	r18,8(sp)
   87648:	dc400117 	ldw	r17,4(sp)
   8764c:	dc000017 	ldw	r16,0(sp)
   87650:	dec00404 	addi	sp,sp,16
   87654:	f800283a 	ret
   87658:	8809883a 	mov	r4,r17
   8765c:	008406c0 	call	8406c <__sinit>
   87660:	8080030f 	ldh	r2,12(r16)
   87664:	103fd11e 	bne	r2,zero,875ac <_fclose_r+0x38>
   87668:	003ff206 	br	87634 <_fclose_r+0xc0>
   8766c:	81400417 	ldw	r5,16(r16)
   87670:	8809883a 	mov	r4,r17
   87674:	00844240 	call	84424 <_free_r>
   87678:	003fd906 	br	875e0 <_fclose_r+0x6c>
   8767c:	04bfffc4 	movi	r18,-1
   87680:	003fd406 	br	875d4 <_fclose_r+0x60>

00087684 <fclose>:
   87684:	00800274 	movhi	r2,9
   87688:	10b9ea04 	addi	r2,r2,-6232
   8768c:	200b883a 	mov	r5,r4
   87690:	11000017 	ldw	r4,0(r2)
   87694:	00875741 	jmpi	87574 <_fclose_r>

00087698 <_fstat_r>:
   87698:	defffd04 	addi	sp,sp,-12
   8769c:	dc000015 	stw	r16,0(sp)
   876a0:	04000274 	movhi	r16,9
   876a4:	84009704 	addi	r16,r16,604
   876a8:	dc400115 	stw	r17,4(sp)
   876ac:	80000015 	stw	zero,0(r16)
   876b0:	2023883a 	mov	r17,r4
   876b4:	2809883a 	mov	r4,r5
   876b8:	300b883a 	mov	r5,r6
   876bc:	dfc00215 	stw	ra,8(sp)
   876c0:	008a02c0 	call	8a02c <fstat>
   876c4:	1007883a 	mov	r3,r2
   876c8:	00bfffc4 	movi	r2,-1
   876cc:	18800626 	beq	r3,r2,876e8 <_fstat_r+0x50>
   876d0:	1805883a 	mov	r2,r3
   876d4:	dfc00217 	ldw	ra,8(sp)
   876d8:	dc400117 	ldw	r17,4(sp)
   876dc:	dc000017 	ldw	r16,0(sp)
   876e0:	dec00304 	addi	sp,sp,12
   876e4:	f800283a 	ret
   876e8:	80800017 	ldw	r2,0(r16)
   876ec:	103ff826 	beq	r2,zero,876d0 <_fstat_r+0x38>
   876f0:	88800015 	stw	r2,0(r17)
   876f4:	1805883a 	mov	r2,r3
   876f8:	dfc00217 	ldw	ra,8(sp)
   876fc:	dc400117 	ldw	r17,4(sp)
   87700:	dc000017 	ldw	r16,0(sp)
   87704:	dec00304 	addi	sp,sp,12
   87708:	f800283a 	ret

0008770c <_isatty_r>:
   8770c:	defffd04 	addi	sp,sp,-12
   87710:	dc000015 	stw	r16,0(sp)
   87714:	04000274 	movhi	r16,9
   87718:	84009704 	addi	r16,r16,604
   8771c:	dc400115 	stw	r17,4(sp)
   87720:	80000015 	stw	zero,0(r16)
   87724:	2023883a 	mov	r17,r4
   87728:	2809883a 	mov	r4,r5
   8772c:	dfc00215 	stw	ra,8(sp)
   87730:	008a1640 	call	8a164 <isatty>
   87734:	1007883a 	mov	r3,r2
   87738:	00bfffc4 	movi	r2,-1
   8773c:	18800626 	beq	r3,r2,87758 <_isatty_r+0x4c>
   87740:	1805883a 	mov	r2,r3
   87744:	dfc00217 	ldw	ra,8(sp)
   87748:	dc400117 	ldw	r17,4(sp)
   8774c:	dc000017 	ldw	r16,0(sp)
   87750:	dec00304 	addi	sp,sp,12
   87754:	f800283a 	ret
   87758:	80800017 	ldw	r2,0(r16)
   8775c:	103ff826 	beq	r2,zero,87740 <_isatty_r+0x34>
   87760:	88800015 	stw	r2,0(r17)
   87764:	1805883a 	mov	r2,r3
   87768:	dfc00217 	ldw	ra,8(sp)
   8776c:	dc400117 	ldw	r17,4(sp)
   87770:	dc000017 	ldw	r16,0(sp)
   87774:	dec00304 	addi	sp,sp,12
   87778:	f800283a 	ret

0008777c <_lseek_r>:
   8777c:	defffd04 	addi	sp,sp,-12
   87780:	dc000015 	stw	r16,0(sp)
   87784:	04000274 	movhi	r16,9
   87788:	84009704 	addi	r16,r16,604
   8778c:	dc400115 	stw	r17,4(sp)
   87790:	80000015 	stw	zero,0(r16)
   87794:	2023883a 	mov	r17,r4
   87798:	2809883a 	mov	r4,r5
   8779c:	300b883a 	mov	r5,r6
   877a0:	380d883a 	mov	r6,r7
   877a4:	dfc00215 	stw	ra,8(sp)
   877a8:	008a3740 	call	8a374 <lseek>
   877ac:	1007883a 	mov	r3,r2
   877b0:	00bfffc4 	movi	r2,-1
   877b4:	18800626 	beq	r3,r2,877d0 <_lseek_r+0x54>
   877b8:	1805883a 	mov	r2,r3
   877bc:	dfc00217 	ldw	ra,8(sp)
   877c0:	dc400117 	ldw	r17,4(sp)
   877c4:	dc000017 	ldw	r16,0(sp)
   877c8:	dec00304 	addi	sp,sp,12
   877cc:	f800283a 	ret
   877d0:	80800017 	ldw	r2,0(r16)
   877d4:	103ff826 	beq	r2,zero,877b8 <_lseek_r+0x3c>
   877d8:	88800015 	stw	r2,0(r17)
   877dc:	1805883a 	mov	r2,r3
   877e0:	dfc00217 	ldw	ra,8(sp)
   877e4:	dc400117 	ldw	r17,4(sp)
   877e8:	dc000017 	ldw	r16,0(sp)
   877ec:	dec00304 	addi	sp,sp,12
   877f0:	f800283a 	ret

000877f4 <_read_r>:
   877f4:	defffd04 	addi	sp,sp,-12
   877f8:	dc000015 	stw	r16,0(sp)
   877fc:	04000274 	movhi	r16,9
   87800:	84009704 	addi	r16,r16,604
   87804:	dc400115 	stw	r17,4(sp)
   87808:	80000015 	stw	zero,0(r16)
   8780c:	2023883a 	mov	r17,r4
   87810:	2809883a 	mov	r4,r5
   87814:	300b883a 	mov	r5,r6
   87818:	380d883a 	mov	r6,r7
   8781c:	dfc00215 	stw	ra,8(sp)
   87820:	008a5b40 	call	8a5b4 <read>
   87824:	1007883a 	mov	r3,r2
   87828:	00bfffc4 	movi	r2,-1
   8782c:	18800626 	beq	r3,r2,87848 <_read_r+0x54>
   87830:	1805883a 	mov	r2,r3
   87834:	dfc00217 	ldw	ra,8(sp)
   87838:	dc400117 	ldw	r17,4(sp)
   8783c:	dc000017 	ldw	r16,0(sp)
   87840:	dec00304 	addi	sp,sp,12
   87844:	f800283a 	ret
   87848:	80800017 	ldw	r2,0(r16)
   8784c:	103ff826 	beq	r2,zero,87830 <_read_r+0x3c>
   87850:	88800015 	stw	r2,0(r17)
   87854:	1805883a 	mov	r2,r3
   87858:	dfc00217 	ldw	ra,8(sp)
   8785c:	dc400117 	ldw	r17,4(sp)
   87860:	dc000017 	ldw	r16,0(sp)
   87864:	dec00304 	addi	sp,sp,12
   87868:	f800283a 	ret

0008786c <__udivdi3>:
   8786c:	defff104 	addi	sp,sp,-60
   87870:	0015883a 	mov	r10,zero
   87874:	2005883a 	mov	r2,r4
   87878:	3011883a 	mov	r8,r6
   8787c:	df000d15 	stw	fp,52(sp)
   87880:	dd400a15 	stw	r21,40(sp)
   87884:	dcc00815 	stw	r19,32(sp)
   87888:	dfc00e15 	stw	ra,56(sp)
   8788c:	ddc00c15 	stw	r23,48(sp)
   87890:	dd800b15 	stw	r22,44(sp)
   87894:	dd000915 	stw	r20,36(sp)
   87898:	dc800715 	stw	r18,28(sp)
   8789c:	dc400615 	stw	r17,24(sp)
   878a0:	dc000515 	stw	r16,20(sp)
   878a4:	da800315 	stw	r10,12(sp)
   878a8:	4027883a 	mov	r19,r8
   878ac:	1039883a 	mov	fp,r2
   878b0:	282b883a 	mov	r21,r5
   878b4:	da800415 	stw	r10,16(sp)
   878b8:	3800401e 	bne	r7,zero,879bc <__udivdi3+0x150>
   878bc:	2a006536 	bltu	r5,r8,87a54 <__udivdi3+0x1e8>
   878c0:	4000b526 	beq	r8,zero,87b98 <__udivdi3+0x32c>
   878c4:	00bfffd4 	movui	r2,65535
   878c8:	14c0ad36 	bltu	r2,r19,87b80 <__udivdi3+0x314>
   878cc:	00803fc4 	movi	r2,255
   878d0:	14c15e36 	bltu	r2,r19,87e4c <__udivdi3+0x5e0>
   878d4:	000b883a 	mov	r5,zero
   878d8:	0005883a 	mov	r2,zero
   878dc:	9884d83a 	srl	r2,r19,r2
   878e0:	01000274 	movhi	r4,9
   878e4:	21331604 	addi	r4,r4,-13224
   878e8:	01800804 	movi	r6,32
   878ec:	1105883a 	add	r2,r2,r4
   878f0:	10c00003 	ldbu	r3,0(r2)
   878f4:	28c7883a 	add	r3,r5,r3
   878f8:	30e9c83a 	sub	r20,r6,r3
   878fc:	a0010a1e 	bne	r20,zero,87d28 <__udivdi3+0x4bc>
   87900:	982ed43a 	srli	r23,r19,16
   87904:	acebc83a 	sub	r21,r21,r19
   87908:	9dbfffcc 	andi	r22,r19,65535
   8790c:	05000044 	movi	r20,1
   87910:	a809883a 	mov	r4,r21
   87914:	b80b883a 	mov	r5,r23
   87918:	00897a00 	call	897a0 <__udivsi3>
   8791c:	100b883a 	mov	r5,r2
   87920:	b009883a 	mov	r4,r22
   87924:	1021883a 	mov	r16,r2
   87928:	00897b00 	call	897b0 <__mulsi3>
   8792c:	a809883a 	mov	r4,r21
   87930:	b80b883a 	mov	r5,r23
   87934:	1023883a 	mov	r17,r2
   87938:	00897a80 	call	897a8 <__umodsi3>
   8793c:	1004943a 	slli	r2,r2,16
   87940:	e006d43a 	srli	r3,fp,16
   87944:	10c4b03a 	or	r2,r2,r3
   87948:	1440042e 	bgeu	r2,r17,8795c <__udivdi3+0xf0>
   8794c:	14c5883a 	add	r2,r2,r19
   87950:	843fffc4 	addi	r16,r16,-1
   87954:	14c00136 	bltu	r2,r19,8795c <__udivdi3+0xf0>
   87958:	14415c36 	bltu	r2,r17,87ecc <__udivdi3+0x660>
   8795c:	1463c83a 	sub	r17,r2,r17
   87960:	8809883a 	mov	r4,r17
   87964:	b80b883a 	mov	r5,r23
   87968:	00897a00 	call	897a0 <__udivsi3>
   8796c:	100b883a 	mov	r5,r2
   87970:	b009883a 	mov	r4,r22
   87974:	102b883a 	mov	r21,r2
   87978:	00897b00 	call	897b0 <__mulsi3>
   8797c:	8809883a 	mov	r4,r17
   87980:	b80b883a 	mov	r5,r23
   87984:	1025883a 	mov	r18,r2
   87988:	00897a80 	call	897a8 <__umodsi3>
   8798c:	1004943a 	slli	r2,r2,16
   87990:	e0ffffcc 	andi	r3,fp,65535
   87994:	10c4b03a 	or	r2,r2,r3
   87998:	1480042e 	bgeu	r2,r18,879ac <__udivdi3+0x140>
   8799c:	9885883a 	add	r2,r19,r2
   879a0:	ad7fffc4 	addi	r21,r21,-1
   879a4:	14c00136 	bltu	r2,r19,879ac <__udivdi3+0x140>
   879a8:	14813c36 	bltu	r2,r18,87e9c <__udivdi3+0x630>
   879ac:	8004943a 	slli	r2,r16,16
   879b0:	a009883a 	mov	r4,r20
   879b4:	a884b03a 	or	r2,r21,r2
   879b8:	00001506 	br	87a10 <__udivdi3+0x1a4>
   879bc:	380d883a 	mov	r6,r7
   879c0:	29c06c36 	bltu	r5,r7,87b74 <__udivdi3+0x308>
   879c4:	00bfffd4 	movui	r2,65535
   879c8:	11c06436 	bltu	r2,r7,87b5c <__udivdi3+0x2f0>
   879cc:	00803fc4 	movi	r2,255
   879d0:	11c11836 	bltu	r2,r7,87e34 <__udivdi3+0x5c8>
   879d4:	000b883a 	mov	r5,zero
   879d8:	0005883a 	mov	r2,zero
   879dc:	3084d83a 	srl	r2,r6,r2
   879e0:	01000274 	movhi	r4,9
   879e4:	21331604 	addi	r4,r4,-13224
   879e8:	01c00804 	movi	r7,32
   879ec:	1105883a 	add	r2,r2,r4
   879f0:	10c00003 	ldbu	r3,0(r2)
   879f4:	28c7883a 	add	r3,r5,r3
   879f8:	38edc83a 	sub	r22,r7,r3
   879fc:	b000731e 	bne	r22,zero,87bcc <__udivdi3+0x360>
   87a00:	35400136 	bltu	r6,r21,87a08 <__udivdi3+0x19c>
   87a04:	e4c05b36 	bltu	fp,r19,87b74 <__udivdi3+0x308>
   87a08:	00800044 	movi	r2,1
   87a0c:	0009883a 	mov	r4,zero
   87a10:	d8800315 	stw	r2,12(sp)
   87a14:	d9400317 	ldw	r5,12(sp)
   87a18:	2007883a 	mov	r3,r4
   87a1c:	d9000415 	stw	r4,16(sp)
   87a20:	2805883a 	mov	r2,r5
   87a24:	dfc00e17 	ldw	ra,56(sp)
   87a28:	df000d17 	ldw	fp,52(sp)
   87a2c:	ddc00c17 	ldw	r23,48(sp)
   87a30:	dd800b17 	ldw	r22,44(sp)
   87a34:	dd400a17 	ldw	r21,40(sp)
   87a38:	dd000917 	ldw	r20,36(sp)
   87a3c:	dcc00817 	ldw	r19,32(sp)
   87a40:	dc800717 	ldw	r18,28(sp)
   87a44:	dc400617 	ldw	r17,24(sp)
   87a48:	dc000517 	ldw	r16,20(sp)
   87a4c:	dec00f04 	addi	sp,sp,60
   87a50:	f800283a 	ret
   87a54:	00bfffd4 	movui	r2,65535
   87a58:	12005636 	bltu	r2,r8,87bb4 <__udivdi3+0x348>
   87a5c:	00803fc4 	movi	r2,255
   87a60:	12010036 	bltu	r2,r8,87e64 <__udivdi3+0x5f8>
   87a64:	000b883a 	mov	r5,zero
   87a68:	0005883a 	mov	r2,zero
   87a6c:	9884d83a 	srl	r2,r19,r2
   87a70:	01000274 	movhi	r4,9
   87a74:	21331604 	addi	r4,r4,-13224
   87a78:	01800804 	movi	r6,32
   87a7c:	1105883a 	add	r2,r2,r4
   87a80:	10c00003 	ldbu	r3,0(r2)
   87a84:	28c7883a 	add	r3,r5,r3
   87a88:	30cbc83a 	sub	r5,r6,r3
   87a8c:	28000626 	beq	r5,zero,87aa8 <__udivdi3+0x23c>
   87a90:	3145c83a 	sub	r2,r6,r5
   87a94:	e084d83a 	srl	r2,fp,r2
   87a98:	a946983a 	sll	r3,r21,r5
   87a9c:	e178983a 	sll	fp,fp,r5
   87aa0:	9966983a 	sll	r19,r19,r5
   87aa4:	18aab03a 	or	r21,r3,r2
   87aa8:	982ed43a 	srli	r23,r19,16
   87aac:	a809883a 	mov	r4,r21
   87ab0:	9cbfffcc 	andi	r18,r19,65535
   87ab4:	b80b883a 	mov	r5,r23
   87ab8:	00897a00 	call	897a0 <__udivsi3>
   87abc:	100b883a 	mov	r5,r2
   87ac0:	9009883a 	mov	r4,r18
   87ac4:	1021883a 	mov	r16,r2
   87ac8:	00897b00 	call	897b0 <__mulsi3>
   87acc:	a809883a 	mov	r4,r21
   87ad0:	b80b883a 	mov	r5,r23
   87ad4:	1023883a 	mov	r17,r2
   87ad8:	00897a80 	call	897a8 <__umodsi3>
   87adc:	1004943a 	slli	r2,r2,16
   87ae0:	e006d43a 	srli	r3,fp,16
   87ae4:	10c4b03a 	or	r2,r2,r3
   87ae8:	1440042e 	bgeu	r2,r17,87afc <__udivdi3+0x290>
   87aec:	14c5883a 	add	r2,r2,r19
   87af0:	843fffc4 	addi	r16,r16,-1
   87af4:	14c00136 	bltu	r2,r19,87afc <__udivdi3+0x290>
   87af8:	1440ea36 	bltu	r2,r17,87ea4 <__udivdi3+0x638>
   87afc:	1463c83a 	sub	r17,r2,r17
   87b00:	8809883a 	mov	r4,r17
   87b04:	b80b883a 	mov	r5,r23
   87b08:	00897a00 	call	897a0 <__udivsi3>
   87b0c:	100b883a 	mov	r5,r2
   87b10:	9009883a 	mov	r4,r18
   87b14:	102b883a 	mov	r21,r2
   87b18:	00897b00 	call	897b0 <__mulsi3>
   87b1c:	8809883a 	mov	r4,r17
   87b20:	b80b883a 	mov	r5,r23
   87b24:	1025883a 	mov	r18,r2
   87b28:	00897a80 	call	897a8 <__umodsi3>
   87b2c:	1004943a 	slli	r2,r2,16
   87b30:	e0ffffcc 	andi	r3,fp,65535
   87b34:	10c4b03a 	or	r2,r2,r3
   87b38:	1480042e 	bgeu	r2,r18,87b4c <__udivdi3+0x2e0>
   87b3c:	9885883a 	add	r2,r19,r2
   87b40:	ad7fffc4 	addi	r21,r21,-1
   87b44:	14c00136 	bltu	r2,r19,87b4c <__udivdi3+0x2e0>
   87b48:	1480d936 	bltu	r2,r18,87eb0 <__udivdi3+0x644>
   87b4c:	8004943a 	slli	r2,r16,16
   87b50:	0009883a 	mov	r4,zero
   87b54:	a884b03a 	or	r2,r21,r2
   87b58:	003fad06 	br	87a10 <__udivdi3+0x1a4>
   87b5c:	00804034 	movhi	r2,256
   87b60:	10bfffc4 	addi	r2,r2,-1
   87b64:	11c0b636 	bltu	r2,r7,87e40 <__udivdi3+0x5d4>
   87b68:	01400404 	movi	r5,16
   87b6c:	2805883a 	mov	r2,r5
   87b70:	003f9a06 	br	879dc <__udivdi3+0x170>
   87b74:	0005883a 	mov	r2,zero
   87b78:	0009883a 	mov	r4,zero
   87b7c:	003fa406 	br	87a10 <__udivdi3+0x1a4>
   87b80:	00804034 	movhi	r2,256
   87b84:	10bfffc4 	addi	r2,r2,-1
   87b88:	14c0b336 	bltu	r2,r19,87e58 <__udivdi3+0x5ec>
   87b8c:	01400404 	movi	r5,16
   87b90:	2805883a 	mov	r2,r5
   87b94:	003f5106 	br	878dc <__udivdi3+0x70>
   87b98:	01000044 	movi	r4,1
   87b9c:	000b883a 	mov	r5,zero
   87ba0:	00897a00 	call	897a0 <__udivsi3>
   87ba4:	1027883a 	mov	r19,r2
   87ba8:	00bfffd4 	movui	r2,65535
   87bac:	14fff436 	bltu	r2,r19,87b80 <__udivdi3+0x314>
   87bb0:	003f4606 	br	878cc <__udivdi3+0x60>
   87bb4:	00804034 	movhi	r2,256
   87bb8:	10bfffc4 	addi	r2,r2,-1
   87bbc:	1200ac36 	bltu	r2,r8,87e70 <__udivdi3+0x604>
   87bc0:	01400404 	movi	r5,16
   87bc4:	2805883a 	mov	r2,r5
   87bc8:	003fa806 	br	87a6c <__udivdi3+0x200>
   87bcc:	3d85c83a 	sub	r2,r7,r22
   87bd0:	3588983a 	sll	r4,r6,r22
   87bd4:	9886d83a 	srl	r3,r19,r2
   87bd8:	a8a2d83a 	srl	r17,r21,r2
   87bdc:	e084d83a 	srl	r2,fp,r2
   87be0:	20eeb03a 	or	r23,r4,r3
   87be4:	b824d43a 	srli	r18,r23,16
   87be8:	ad86983a 	sll	r3,r21,r22
   87bec:	8809883a 	mov	r4,r17
   87bf0:	900b883a 	mov	r5,r18
   87bf4:	1886b03a 	or	r3,r3,r2
   87bf8:	d8c00115 	stw	r3,4(sp)
   87bfc:	bc3fffcc 	andi	r16,r23,65535
   87c00:	00897a00 	call	897a0 <__udivsi3>
   87c04:	100b883a 	mov	r5,r2
   87c08:	8009883a 	mov	r4,r16
   87c0c:	1029883a 	mov	r20,r2
   87c10:	00897b00 	call	897b0 <__mulsi3>
   87c14:	900b883a 	mov	r5,r18
   87c18:	8809883a 	mov	r4,r17
   87c1c:	102b883a 	mov	r21,r2
   87c20:	00897a80 	call	897a8 <__umodsi3>
   87c24:	d9400117 	ldw	r5,4(sp)
   87c28:	1004943a 	slli	r2,r2,16
   87c2c:	9da6983a 	sll	r19,r19,r22
   87c30:	2806d43a 	srli	r3,r5,16
   87c34:	10c4b03a 	or	r2,r2,r3
   87c38:	1540032e 	bgeu	r2,r21,87c48 <__udivdi3+0x3dc>
   87c3c:	15c5883a 	add	r2,r2,r23
   87c40:	a53fffc4 	addi	r20,r20,-1
   87c44:	15c0912e 	bgeu	r2,r23,87e8c <__udivdi3+0x620>
   87c48:	1563c83a 	sub	r17,r2,r21
   87c4c:	8809883a 	mov	r4,r17
   87c50:	900b883a 	mov	r5,r18
   87c54:	00897a00 	call	897a0 <__udivsi3>
   87c58:	100b883a 	mov	r5,r2
   87c5c:	8009883a 	mov	r4,r16
   87c60:	102b883a 	mov	r21,r2
   87c64:	00897b00 	call	897b0 <__mulsi3>
   87c68:	8809883a 	mov	r4,r17
   87c6c:	900b883a 	mov	r5,r18
   87c70:	1021883a 	mov	r16,r2
   87c74:	00897a80 	call	897a8 <__umodsi3>
   87c78:	da800117 	ldw	r10,4(sp)
   87c7c:	1004943a 	slli	r2,r2,16
   87c80:	50ffffcc 	andi	r3,r10,65535
   87c84:	10c6b03a 	or	r3,r2,r3
   87c88:	1c00032e 	bgeu	r3,r16,87c98 <__udivdi3+0x42c>
   87c8c:	1dc7883a 	add	r3,r3,r23
   87c90:	ad7fffc4 	addi	r21,r21,-1
   87c94:	1dc0792e 	bgeu	r3,r23,87e7c <__udivdi3+0x610>
   87c98:	a004943a 	slli	r2,r20,16
   87c9c:	982ed43a 	srli	r23,r19,16
   87ca0:	9cffffcc 	andi	r19,r19,65535
   87ca4:	a8a4b03a 	or	r18,r21,r2
   87ca8:	947fffcc 	andi	r17,r18,65535
   87cac:	902ad43a 	srli	r21,r18,16
   87cb0:	8809883a 	mov	r4,r17
   87cb4:	980b883a 	mov	r5,r19
   87cb8:	1c21c83a 	sub	r16,r3,r16
   87cbc:	00897b00 	call	897b0 <__mulsi3>
   87cc0:	8809883a 	mov	r4,r17
   87cc4:	b80b883a 	mov	r5,r23
   87cc8:	1029883a 	mov	r20,r2
   87ccc:	00897b00 	call	897b0 <__mulsi3>
   87cd0:	980b883a 	mov	r5,r19
   87cd4:	a809883a 	mov	r4,r21
   87cd8:	1023883a 	mov	r17,r2
   87cdc:	00897b00 	call	897b0 <__mulsi3>
   87ce0:	a809883a 	mov	r4,r21
   87ce4:	b80b883a 	mov	r5,r23
   87ce8:	1027883a 	mov	r19,r2
   87cec:	00897b00 	call	897b0 <__mulsi3>
   87cf0:	1009883a 	mov	r4,r2
   87cf4:	a004d43a 	srli	r2,r20,16
   87cf8:	8ce3883a 	add	r17,r17,r19
   87cfc:	1447883a 	add	r3,r2,r17
   87d00:	1cc0022e 	bgeu	r3,r19,87d0c <__udivdi3+0x4a0>
   87d04:	00800074 	movhi	r2,1
   87d08:	2089883a 	add	r4,r4,r2
   87d0c:	1804d43a 	srli	r2,r3,16
   87d10:	2085883a 	add	r2,r4,r2
   87d14:	80804436 	bltu	r16,r2,87e28 <__udivdi3+0x5bc>
   87d18:	80803e26 	beq	r16,r2,87e14 <__udivdi3+0x5a8>
   87d1c:	9005883a 	mov	r2,r18
   87d20:	0009883a 	mov	r4,zero
   87d24:	003f3a06 	br	87a10 <__udivdi3+0x1a4>
   87d28:	9d26983a 	sll	r19,r19,r20
   87d2c:	3505c83a 	sub	r2,r6,r20
   87d30:	a8a2d83a 	srl	r17,r21,r2
   87d34:	982ed43a 	srli	r23,r19,16
   87d38:	e084d83a 	srl	r2,fp,r2
   87d3c:	ad06983a 	sll	r3,r21,r20
   87d40:	8809883a 	mov	r4,r17
   87d44:	b80b883a 	mov	r5,r23
   87d48:	1886b03a 	or	r3,r3,r2
   87d4c:	d8c00015 	stw	r3,0(sp)
   87d50:	9dbfffcc 	andi	r22,r19,65535
   87d54:	00897a00 	call	897a0 <__udivsi3>
   87d58:	100b883a 	mov	r5,r2
   87d5c:	b009883a 	mov	r4,r22
   87d60:	d8800215 	stw	r2,8(sp)
   87d64:	00897b00 	call	897b0 <__mulsi3>
   87d68:	8809883a 	mov	r4,r17
   87d6c:	b80b883a 	mov	r5,r23
   87d70:	102b883a 	mov	r21,r2
   87d74:	00897a80 	call	897a8 <__umodsi3>
   87d78:	d9000017 	ldw	r4,0(sp)
   87d7c:	1004943a 	slli	r2,r2,16
   87d80:	2006d43a 	srli	r3,r4,16
   87d84:	10c4b03a 	or	r2,r2,r3
   87d88:	1540052e 	bgeu	r2,r21,87da0 <__udivdi3+0x534>
   87d8c:	d9400217 	ldw	r5,8(sp)
   87d90:	14c5883a 	add	r2,r2,r19
   87d94:	297fffc4 	addi	r5,r5,-1
   87d98:	d9400215 	stw	r5,8(sp)
   87d9c:	14c0462e 	bgeu	r2,r19,87eb8 <__udivdi3+0x64c>
   87da0:	1563c83a 	sub	r17,r2,r21
   87da4:	8809883a 	mov	r4,r17
   87da8:	b80b883a 	mov	r5,r23
   87dac:	00897a00 	call	897a0 <__udivsi3>
   87db0:	100b883a 	mov	r5,r2
   87db4:	b009883a 	mov	r4,r22
   87db8:	1025883a 	mov	r18,r2
   87dbc:	00897b00 	call	897b0 <__mulsi3>
   87dc0:	8809883a 	mov	r4,r17
   87dc4:	b80b883a 	mov	r5,r23
   87dc8:	1021883a 	mov	r16,r2
   87dcc:	00897a80 	call	897a8 <__umodsi3>
   87dd0:	da800017 	ldw	r10,0(sp)
   87dd4:	1004943a 	slli	r2,r2,16
   87dd8:	50ffffcc 	andi	r3,r10,65535
   87ddc:	10c6b03a 	or	r3,r2,r3
   87de0:	1c00062e 	bgeu	r3,r16,87dfc <__udivdi3+0x590>
   87de4:	1cc7883a 	add	r3,r3,r19
   87de8:	94bfffc4 	addi	r18,r18,-1
   87dec:	1cc00336 	bltu	r3,r19,87dfc <__udivdi3+0x590>
   87df0:	1c00022e 	bgeu	r3,r16,87dfc <__udivdi3+0x590>
   87df4:	94bfffc4 	addi	r18,r18,-1
   87df8:	1cc7883a 	add	r3,r3,r19
   87dfc:	d9000217 	ldw	r4,8(sp)
   87e00:	e538983a 	sll	fp,fp,r20
   87e04:	1c2bc83a 	sub	r21,r3,r16
   87e08:	2004943a 	slli	r2,r4,16
   87e0c:	90a8b03a 	or	r20,r18,r2
   87e10:	003ebf06 	br	87910 <__udivdi3+0xa4>
   87e14:	1804943a 	slli	r2,r3,16
   87e18:	e588983a 	sll	r4,fp,r22
   87e1c:	a0ffffcc 	andi	r3,r20,65535
   87e20:	10c5883a 	add	r2,r2,r3
   87e24:	20bfbd2e 	bgeu	r4,r2,87d1c <__udivdi3+0x4b0>
   87e28:	90bfffc4 	addi	r2,r18,-1
   87e2c:	0009883a 	mov	r4,zero
   87e30:	003ef706 	br	87a10 <__udivdi3+0x1a4>
   87e34:	01400204 	movi	r5,8
   87e38:	2805883a 	mov	r2,r5
   87e3c:	003ee706 	br	879dc <__udivdi3+0x170>
   87e40:	01400604 	movi	r5,24
   87e44:	2805883a 	mov	r2,r5
   87e48:	003ee406 	br	879dc <__udivdi3+0x170>
   87e4c:	01400204 	movi	r5,8
   87e50:	2805883a 	mov	r2,r5
   87e54:	003ea106 	br	878dc <__udivdi3+0x70>
   87e58:	01400604 	movi	r5,24
   87e5c:	2805883a 	mov	r2,r5
   87e60:	003e9e06 	br	878dc <__udivdi3+0x70>
   87e64:	01400204 	movi	r5,8
   87e68:	2805883a 	mov	r2,r5
   87e6c:	003eff06 	br	87a6c <__udivdi3+0x200>
   87e70:	01400604 	movi	r5,24
   87e74:	2805883a 	mov	r2,r5
   87e78:	003efc06 	br	87a6c <__udivdi3+0x200>
   87e7c:	1c3f862e 	bgeu	r3,r16,87c98 <__udivdi3+0x42c>
   87e80:	1dc7883a 	add	r3,r3,r23
   87e84:	ad7fffc4 	addi	r21,r21,-1
   87e88:	003f8306 	br	87c98 <__udivdi3+0x42c>
   87e8c:	157f6e2e 	bgeu	r2,r21,87c48 <__udivdi3+0x3dc>
   87e90:	a53fffc4 	addi	r20,r20,-1
   87e94:	15c5883a 	add	r2,r2,r23
   87e98:	003f6b06 	br	87c48 <__udivdi3+0x3dc>
   87e9c:	ad7fffc4 	addi	r21,r21,-1
   87ea0:	003ec206 	br	879ac <__udivdi3+0x140>
   87ea4:	843fffc4 	addi	r16,r16,-1
   87ea8:	14c5883a 	add	r2,r2,r19
   87eac:	003f1306 	br	87afc <__udivdi3+0x290>
   87eb0:	ad7fffc4 	addi	r21,r21,-1
   87eb4:	003f2506 	br	87b4c <__udivdi3+0x2e0>
   87eb8:	157fb92e 	bgeu	r2,r21,87da0 <__udivdi3+0x534>
   87ebc:	297fffc4 	addi	r5,r5,-1
   87ec0:	14c5883a 	add	r2,r2,r19
   87ec4:	d9400215 	stw	r5,8(sp)
   87ec8:	003fb506 	br	87da0 <__udivdi3+0x534>
   87ecc:	843fffc4 	addi	r16,r16,-1
   87ed0:	14c5883a 	add	r2,r2,r19
   87ed4:	003ea106 	br	8795c <__udivdi3+0xf0>

00087ed8 <__umoddi3>:
   87ed8:	defff004 	addi	sp,sp,-64
   87edc:	3011883a 	mov	r8,r6
   87ee0:	000d883a 	mov	r6,zero
   87ee4:	dd400b15 	stw	r21,44(sp)
   87ee8:	dcc00915 	stw	r19,36(sp)
   87eec:	dc000615 	stw	r16,24(sp)
   87ef0:	dfc00f15 	stw	ra,60(sp)
   87ef4:	df000e15 	stw	fp,56(sp)
   87ef8:	ddc00d15 	stw	r23,52(sp)
   87efc:	dd800c15 	stw	r22,48(sp)
   87f00:	dd000a15 	stw	r20,40(sp)
   87f04:	dc800815 	stw	r18,32(sp)
   87f08:	dc400715 	stw	r17,28(sp)
   87f0c:	2817883a 	mov	r11,r5
   87f10:	d9800415 	stw	r6,16(sp)
   87f14:	4027883a 	mov	r19,r8
   87f18:	d9800515 	stw	r6,20(sp)
   87f1c:	2021883a 	mov	r16,r4
   87f20:	282b883a 	mov	r21,r5
   87f24:	38002c1e 	bne	r7,zero,87fd8 <__umoddi3+0x100>
   87f28:	2a005636 	bltu	r5,r8,88084 <__umoddi3+0x1ac>
   87f2c:	40009a26 	beq	r8,zero,88198 <__umoddi3+0x2c0>
   87f30:	00bfffd4 	movui	r2,65535
   87f34:	14c09236 	bltu	r2,r19,88180 <__umoddi3+0x2a8>
   87f38:	00803fc4 	movi	r2,255
   87f3c:	14c15c36 	bltu	r2,r19,884b0 <__umoddi3+0x5d8>
   87f40:	000b883a 	mov	r5,zero
   87f44:	0005883a 	mov	r2,zero
   87f48:	9884d83a 	srl	r2,r19,r2
   87f4c:	01000274 	movhi	r4,9
   87f50:	21331604 	addi	r4,r4,-13224
   87f54:	01800804 	movi	r6,32
   87f58:	1105883a 	add	r2,r2,r4
   87f5c:	10c00003 	ldbu	r3,0(r2)
   87f60:	28c7883a 	add	r3,r5,r3
   87f64:	30e5c83a 	sub	r18,r6,r3
   87f68:	9000a41e 	bne	r18,zero,881fc <__umoddi3+0x324>
   87f6c:	982ed43a 	srli	r23,r19,16
   87f70:	acebc83a 	sub	r21,r21,r19
   87f74:	9d3fffcc 	andi	r20,r19,65535
   87f78:	002d883a 	mov	r22,zero
   87f7c:	a809883a 	mov	r4,r21
   87f80:	b80b883a 	mov	r5,r23
   87f84:	00897a00 	call	897a0 <__udivsi3>
   87f88:	100b883a 	mov	r5,r2
   87f8c:	a009883a 	mov	r4,r20
   87f90:	00897b00 	call	897b0 <__mulsi3>
   87f94:	a809883a 	mov	r4,r21
   87f98:	b80b883a 	mov	r5,r23
   87f9c:	1023883a 	mov	r17,r2
   87fa0:	00897a80 	call	897a8 <__umodsi3>
   87fa4:	1004943a 	slli	r2,r2,16
   87fa8:	8006d43a 	srli	r3,r16,16
   87fac:	10c4b03a 	or	r2,r2,r3
   87fb0:	1440032e 	bgeu	r2,r17,87fc0 <__umoddi3+0xe8>
   87fb4:	14c5883a 	add	r2,r2,r19
   87fb8:	14c00136 	bltu	r2,r19,87fc0 <__umoddi3+0xe8>
   87fbc:	14415836 	bltu	r2,r17,88520 <__umoddi3+0x648>
   87fc0:	1463c83a 	sub	r17,r2,r17
   87fc4:	8809883a 	mov	r4,r17
   87fc8:	b80b883a 	mov	r5,r23
   87fcc:	00897a00 	call	897a0 <__udivsi3>
   87fd0:	a009883a 	mov	r4,r20
   87fd4:	00005306 	br	88124 <__umoddi3+0x24c>
   87fd8:	380d883a 	mov	r6,r7
   87fdc:	29c0132e 	bgeu	r5,r7,8802c <__umoddi3+0x154>
   87fe0:	d9000415 	stw	r4,16(sp)
   87fe4:	d9400515 	stw	r5,20(sp)
   87fe8:	d9400417 	ldw	r5,16(sp)
   87fec:	5813883a 	mov	r9,r11
   87ff0:	2811883a 	mov	r8,r5
   87ff4:	4005883a 	mov	r2,r8
   87ff8:	4807883a 	mov	r3,r9
   87ffc:	dfc00f17 	ldw	ra,60(sp)
   88000:	df000e17 	ldw	fp,56(sp)
   88004:	ddc00d17 	ldw	r23,52(sp)
   88008:	dd800c17 	ldw	r22,48(sp)
   8800c:	dd400b17 	ldw	r21,44(sp)
   88010:	dd000a17 	ldw	r20,40(sp)
   88014:	dcc00917 	ldw	r19,36(sp)
   88018:	dc800817 	ldw	r18,32(sp)
   8801c:	dc400717 	ldw	r17,28(sp)
   88020:	dc000617 	ldw	r16,24(sp)
   88024:	dec01004 	addi	sp,sp,64
   88028:	f800283a 	ret
   8802c:	00bfffd4 	movui	r2,65535
   88030:	11c06636 	bltu	r2,r7,881cc <__umoddi3+0x2f4>
   88034:	00803fc4 	movi	r2,255
   88038:	11c12036 	bltu	r2,r7,884bc <__umoddi3+0x5e4>
   8803c:	000b883a 	mov	r5,zero
   88040:	0005883a 	mov	r2,zero
   88044:	3084d83a 	srl	r2,r6,r2
   88048:	01000274 	movhi	r4,9
   8804c:	21331604 	addi	r4,r4,-13224
   88050:	01c00804 	movi	r7,32
   88054:	1105883a 	add	r2,r2,r4
   88058:	10c00003 	ldbu	r3,0(r2)
   8805c:	28c7883a 	add	r3,r5,r3
   88060:	38e5c83a 	sub	r18,r7,r3
   88064:	9000941e 	bne	r18,zero,882b8 <__umoddi3+0x3e0>
   88068:	35405e36 	bltu	r6,r21,881e4 <__umoddi3+0x30c>
   8806c:	84c05d2e 	bgeu	r16,r19,881e4 <__umoddi3+0x30c>
   88070:	8011883a 	mov	r8,r16
   88074:	a813883a 	mov	r9,r21
   88078:	dc000415 	stw	r16,16(sp)
   8807c:	dd400515 	stw	r21,20(sp)
   88080:	003fdc06 	br	87ff4 <__umoddi3+0x11c>
   88084:	00bfffd4 	movui	r2,65535
   88088:	12004a36 	bltu	r2,r8,881b4 <__umoddi3+0x2dc>
   8808c:	00803fc4 	movi	r2,255
   88090:	12010d36 	bltu	r2,r8,884c8 <__umoddi3+0x5f0>
   88094:	000b883a 	mov	r5,zero
   88098:	0005883a 	mov	r2,zero
   8809c:	9884d83a 	srl	r2,r19,r2
   880a0:	01000274 	movhi	r4,9
   880a4:	21331604 	addi	r4,r4,-13224
   880a8:	01800804 	movi	r6,32
   880ac:	1105883a 	add	r2,r2,r4
   880b0:	10c00003 	ldbu	r3,0(r2)
   880b4:	28c7883a 	add	r3,r5,r3
   880b8:	30c7c83a 	sub	r3,r6,r3
   880bc:	1800dc1e 	bne	r3,zero,88430 <__umoddi3+0x558>
   880c0:	002d883a 	mov	r22,zero
   880c4:	982ed43a 	srli	r23,r19,16
   880c8:	a809883a 	mov	r4,r21
   880cc:	9cbfffcc 	andi	r18,r19,65535
   880d0:	b80b883a 	mov	r5,r23
   880d4:	00897a00 	call	897a0 <__udivsi3>
   880d8:	100b883a 	mov	r5,r2
   880dc:	9009883a 	mov	r4,r18
   880e0:	00897b00 	call	897b0 <__mulsi3>
   880e4:	a809883a 	mov	r4,r21
   880e8:	b80b883a 	mov	r5,r23
   880ec:	1023883a 	mov	r17,r2
   880f0:	00897a80 	call	897a8 <__umodsi3>
   880f4:	1004943a 	slli	r2,r2,16
   880f8:	8006d43a 	srli	r3,r16,16
   880fc:	10c4b03a 	or	r2,r2,r3
   88100:	1440032e 	bgeu	r2,r17,88110 <__umoddi3+0x238>
   88104:	14c5883a 	add	r2,r2,r19
   88108:	14c00136 	bltu	r2,r19,88110 <__umoddi3+0x238>
   8810c:	14410236 	bltu	r2,r17,88518 <__umoddi3+0x640>
   88110:	1463c83a 	sub	r17,r2,r17
   88114:	8809883a 	mov	r4,r17
   88118:	b80b883a 	mov	r5,r23
   8811c:	00897a00 	call	897a0 <__udivsi3>
   88120:	9009883a 	mov	r4,r18
   88124:	100b883a 	mov	r5,r2
   88128:	00897b00 	call	897b0 <__mulsi3>
   8812c:	8809883a 	mov	r4,r17
   88130:	b80b883a 	mov	r5,r23
   88134:	102b883a 	mov	r21,r2
   88138:	00897a80 	call	897a8 <__umodsi3>
   8813c:	1004943a 	slli	r2,r2,16
   88140:	80ffffcc 	andi	r3,r16,65535
   88144:	10c4b03a 	or	r2,r2,r3
   88148:	1540042e 	bgeu	r2,r21,8815c <__umoddi3+0x284>
   8814c:	14c5883a 	add	r2,r2,r19
   88150:	14c00236 	bltu	r2,r19,8815c <__umoddi3+0x284>
   88154:	1540012e 	bgeu	r2,r21,8815c <__umoddi3+0x284>
   88158:	14c5883a 	add	r2,r2,r19
   8815c:	1545c83a 	sub	r2,r2,r21
   88160:	1584d83a 	srl	r2,r2,r22
   88164:	0013883a 	mov	r9,zero
   88168:	d8800415 	stw	r2,16(sp)
   8816c:	d8c00417 	ldw	r3,16(sp)
   88170:	0005883a 	mov	r2,zero
   88174:	d8800515 	stw	r2,20(sp)
   88178:	1811883a 	mov	r8,r3
   8817c:	003f9d06 	br	87ff4 <__umoddi3+0x11c>
   88180:	00804034 	movhi	r2,256
   88184:	10bfffc4 	addi	r2,r2,-1
   88188:	14c0c636 	bltu	r2,r19,884a4 <__umoddi3+0x5cc>
   8818c:	01400404 	movi	r5,16
   88190:	2805883a 	mov	r2,r5
   88194:	003f6c06 	br	87f48 <__umoddi3+0x70>
   88198:	01000044 	movi	r4,1
   8819c:	000b883a 	mov	r5,zero
   881a0:	00897a00 	call	897a0 <__udivsi3>
   881a4:	1027883a 	mov	r19,r2
   881a8:	00bfffd4 	movui	r2,65535
   881ac:	14fff436 	bltu	r2,r19,88180 <__umoddi3+0x2a8>
   881b0:	003f6106 	br	87f38 <__umoddi3+0x60>
   881b4:	00804034 	movhi	r2,256
   881b8:	10bfffc4 	addi	r2,r2,-1
   881bc:	1200c536 	bltu	r2,r8,884d4 <__umoddi3+0x5fc>
   881c0:	01400404 	movi	r5,16
   881c4:	2805883a 	mov	r2,r5
   881c8:	003fb406 	br	8809c <__umoddi3+0x1c4>
   881cc:	00804034 	movhi	r2,256
   881d0:	10bfffc4 	addi	r2,r2,-1
   881d4:	11c0c236 	bltu	r2,r7,884e0 <__umoddi3+0x608>
   881d8:	01400404 	movi	r5,16
   881dc:	2805883a 	mov	r2,r5
   881e0:	003f9806 	br	88044 <__umoddi3+0x16c>
   881e4:	84c9c83a 	sub	r4,r16,r19
   881e8:	8105803a 	cmpltu	r2,r16,r4
   881ec:	a987c83a 	sub	r3,r21,r6
   881f0:	18abc83a 	sub	r21,r3,r2
   881f4:	2021883a 	mov	r16,r4
   881f8:	003f9d06 	br	88070 <__umoddi3+0x198>
   881fc:	9ca6983a 	sll	r19,r19,r18
   88200:	3485c83a 	sub	r2,r6,r18
   88204:	a8a2d83a 	srl	r17,r21,r2
   88208:	982ed43a 	srli	r23,r19,16
   8820c:	ac86983a 	sll	r3,r21,r18
   88210:	8084d83a 	srl	r2,r16,r2
   88214:	8809883a 	mov	r4,r17
   88218:	b80b883a 	mov	r5,r23
   8821c:	18b8b03a 	or	fp,r3,r2
   88220:	9d3fffcc 	andi	r20,r19,65535
   88224:	00897a00 	call	897a0 <__udivsi3>
   88228:	100b883a 	mov	r5,r2
   8822c:	a009883a 	mov	r4,r20
   88230:	00897b00 	call	897b0 <__mulsi3>
   88234:	8809883a 	mov	r4,r17
   88238:	b80b883a 	mov	r5,r23
   8823c:	102b883a 	mov	r21,r2
   88240:	00897a80 	call	897a8 <__umodsi3>
   88244:	1004943a 	slli	r2,r2,16
   88248:	e006d43a 	srli	r3,fp,16
   8824c:	902d883a 	mov	r22,r18
   88250:	10c4b03a 	or	r2,r2,r3
   88254:	1540022e 	bgeu	r2,r21,88260 <__umoddi3+0x388>
   88258:	14c5883a 	add	r2,r2,r19
   8825c:	14c0ab2e 	bgeu	r2,r19,8850c <__umoddi3+0x634>
   88260:	1563c83a 	sub	r17,r2,r21
   88264:	8809883a 	mov	r4,r17
   88268:	b80b883a 	mov	r5,r23
   8826c:	00897a00 	call	897a0 <__udivsi3>
   88270:	100b883a 	mov	r5,r2
   88274:	a009883a 	mov	r4,r20
   88278:	00897b00 	call	897b0 <__mulsi3>
   8827c:	8809883a 	mov	r4,r17
   88280:	b80b883a 	mov	r5,r23
   88284:	102b883a 	mov	r21,r2
   88288:	00897a80 	call	897a8 <__umodsi3>
   8828c:	1004943a 	slli	r2,r2,16
   88290:	e0ffffcc 	andi	r3,fp,65535
   88294:	10c4b03a 	or	r2,r2,r3
   88298:	1540042e 	bgeu	r2,r21,882ac <__umoddi3+0x3d4>
   8829c:	14c5883a 	add	r2,r2,r19
   882a0:	14c00236 	bltu	r2,r19,882ac <__umoddi3+0x3d4>
   882a4:	1540012e 	bgeu	r2,r21,882ac <__umoddi3+0x3d4>
   882a8:	14c5883a 	add	r2,r2,r19
   882ac:	84a0983a 	sll	r16,r16,r18
   882b0:	156bc83a 	sub	r21,r2,r21
   882b4:	003f3106 	br	87f7c <__umoddi3+0xa4>
   882b8:	3c8fc83a 	sub	r7,r7,r18
   882bc:	3486983a 	sll	r3,r6,r18
   882c0:	99c4d83a 	srl	r2,r19,r7
   882c4:	a9e2d83a 	srl	r17,r21,r7
   882c8:	ac8c983a 	sll	r6,r21,r18
   882cc:	18acb03a 	or	r22,r3,r2
   882d0:	b02ed43a 	srli	r23,r22,16
   882d4:	81c4d83a 	srl	r2,r16,r7
   882d8:	8809883a 	mov	r4,r17
   882dc:	b80b883a 	mov	r5,r23
   882e0:	308cb03a 	or	r6,r6,r2
   882e4:	d9c00315 	stw	r7,12(sp)
   882e8:	d9800215 	stw	r6,8(sp)
   882ec:	b53fffcc 	andi	r20,r22,65535
   882f0:	00897a00 	call	897a0 <__udivsi3>
   882f4:	100b883a 	mov	r5,r2
   882f8:	a009883a 	mov	r4,r20
   882fc:	1039883a 	mov	fp,r2
   88300:	00897b00 	call	897b0 <__mulsi3>
   88304:	8809883a 	mov	r4,r17
   88308:	b80b883a 	mov	r5,r23
   8830c:	102b883a 	mov	r21,r2
   88310:	00897a80 	call	897a8 <__umodsi3>
   88314:	d9000217 	ldw	r4,8(sp)
   88318:	1004943a 	slli	r2,r2,16
   8831c:	9ca6983a 	sll	r19,r19,r18
   88320:	2006d43a 	srli	r3,r4,16
   88324:	84a0983a 	sll	r16,r16,r18
   88328:	dcc00015 	stw	r19,0(sp)
   8832c:	10c4b03a 	or	r2,r2,r3
   88330:	dc000115 	stw	r16,4(sp)
   88334:	1540032e 	bgeu	r2,r21,88344 <__umoddi3+0x46c>
   88338:	1585883a 	add	r2,r2,r22
   8833c:	e73fffc4 	addi	fp,fp,-1
   88340:	15806e2e 	bgeu	r2,r22,884fc <__umoddi3+0x624>
   88344:	1563c83a 	sub	r17,r2,r21
   88348:	8809883a 	mov	r4,r17
   8834c:	b80b883a 	mov	r5,r23
   88350:	00897a00 	call	897a0 <__udivsi3>
   88354:	100b883a 	mov	r5,r2
   88358:	a009883a 	mov	r4,r20
   8835c:	1021883a 	mov	r16,r2
   88360:	00897b00 	call	897b0 <__mulsi3>
   88364:	b80b883a 	mov	r5,r23
   88368:	8809883a 	mov	r4,r17
   8836c:	1029883a 	mov	r20,r2
   88370:	00897a80 	call	897a8 <__umodsi3>
   88374:	d9400217 	ldw	r5,8(sp)
   88378:	1004943a 	slli	r2,r2,16
   8837c:	28ffffcc 	andi	r3,r5,65535
   88380:	10c4b03a 	or	r2,r2,r3
   88384:	1500032e 	bgeu	r2,r20,88394 <__umoddi3+0x4bc>
   88388:	1585883a 	add	r2,r2,r22
   8838c:	843fffc4 	addi	r16,r16,-1
   88390:	1580562e 	bgeu	r2,r22,884ec <__umoddi3+0x614>
   88394:	d9800017 	ldw	r6,0(sp)
   88398:	e022943a 	slli	r17,fp,16
   8839c:	302ed43a 	srli	r23,r6,16
   883a0:	8462b03a 	or	r17,r16,r17
   883a4:	34ffffcc 	andi	r19,r6,65535
   883a8:	882ad43a 	srli	r21,r17,16
   883ac:	8c7fffcc 	andi	r17,r17,65535
   883b0:	8809883a 	mov	r4,r17
   883b4:	980b883a 	mov	r5,r19
   883b8:	1521c83a 	sub	r16,r2,r20
   883bc:	00897b00 	call	897b0 <__mulsi3>
   883c0:	8809883a 	mov	r4,r17
   883c4:	b80b883a 	mov	r5,r23
   883c8:	1029883a 	mov	r20,r2
   883cc:	00897b00 	call	897b0 <__mulsi3>
   883d0:	980b883a 	mov	r5,r19
   883d4:	a809883a 	mov	r4,r21
   883d8:	1023883a 	mov	r17,r2
   883dc:	00897b00 	call	897b0 <__mulsi3>
   883e0:	a809883a 	mov	r4,r21
   883e4:	b80b883a 	mov	r5,r23
   883e8:	1027883a 	mov	r19,r2
   883ec:	00897b00 	call	897b0 <__mulsi3>
   883f0:	100b883a 	mov	r5,r2
   883f4:	a004d43a 	srli	r2,r20,16
   883f8:	8ce3883a 	add	r17,r17,r19
   883fc:	1449883a 	add	r4,r2,r17
   88400:	24c0022e 	bgeu	r4,r19,8840c <__umoddi3+0x534>
   88404:	00800074 	movhi	r2,1
   88408:	288b883a 	add	r5,r5,r2
   8840c:	2004d43a 	srli	r2,r4,16
   88410:	2008943a 	slli	r4,r4,16
   88414:	a0ffffcc 	andi	r3,r20,65535
   88418:	288d883a 	add	r6,r5,r2
   8841c:	20c9883a 	add	r4,r4,r3
   88420:	81800b36 	bltu	r16,r6,88450 <__umoddi3+0x578>
   88424:	81804026 	beq	r16,r6,88528 <__umoddi3+0x650>
   88428:	818dc83a 	sub	r6,r16,r6
   8842c:	00000f06 	br	8846c <__umoddi3+0x594>
   88430:	30c5c83a 	sub	r2,r6,r3
   88434:	182d883a 	mov	r22,r3
   88438:	8084d83a 	srl	r2,r16,r2
   8843c:	a8c6983a 	sll	r3,r21,r3
   88440:	9da6983a 	sll	r19,r19,r22
   88444:	85a0983a 	sll	r16,r16,r22
   88448:	18aab03a 	or	r21,r3,r2
   8844c:	003f1d06 	br	880c4 <__umoddi3+0x1ec>
   88450:	d8c00017 	ldw	r3,0(sp)
   88454:	20c5c83a 	sub	r2,r4,r3
   88458:	2089803a 	cmpltu	r4,r4,r2
   8845c:	3587c83a 	sub	r3,r6,r22
   88460:	1907c83a 	sub	r3,r3,r4
   88464:	80cdc83a 	sub	r6,r16,r3
   88468:	1009883a 	mov	r4,r2
   8846c:	d9400117 	ldw	r5,4(sp)
   88470:	2905c83a 	sub	r2,r5,r4
   88474:	2887803a 	cmpltu	r3,r5,r2
   88478:	30c7c83a 	sub	r3,r6,r3
   8847c:	d9800317 	ldw	r6,12(sp)
   88480:	1484d83a 	srl	r2,r2,r18
   88484:	1988983a 	sll	r4,r3,r6
   88488:	1c86d83a 	srl	r3,r3,r18
   8848c:	2088b03a 	or	r4,r4,r2
   88490:	2011883a 	mov	r8,r4
   88494:	1813883a 	mov	r9,r3
   88498:	d9000415 	stw	r4,16(sp)
   8849c:	d8c00515 	stw	r3,20(sp)
   884a0:	003ed406 	br	87ff4 <__umoddi3+0x11c>
   884a4:	01400604 	movi	r5,24
   884a8:	2805883a 	mov	r2,r5
   884ac:	003ea606 	br	87f48 <__umoddi3+0x70>
   884b0:	01400204 	movi	r5,8
   884b4:	2805883a 	mov	r2,r5
   884b8:	003ea306 	br	87f48 <__umoddi3+0x70>
   884bc:	01400204 	movi	r5,8
   884c0:	2805883a 	mov	r2,r5
   884c4:	003edf06 	br	88044 <__umoddi3+0x16c>
   884c8:	01400204 	movi	r5,8
   884cc:	2805883a 	mov	r2,r5
   884d0:	003ef206 	br	8809c <__umoddi3+0x1c4>
   884d4:	01400604 	movi	r5,24
   884d8:	2805883a 	mov	r2,r5
   884dc:	003eef06 	br	8809c <__umoddi3+0x1c4>
   884e0:	01400604 	movi	r5,24
   884e4:	2805883a 	mov	r2,r5
   884e8:	003ed606 	br	88044 <__umoddi3+0x16c>
   884ec:	153fa92e 	bgeu	r2,r20,88394 <__umoddi3+0x4bc>
   884f0:	843fffc4 	addi	r16,r16,-1
   884f4:	1585883a 	add	r2,r2,r22
   884f8:	003fa606 	br	88394 <__umoddi3+0x4bc>
   884fc:	157f912e 	bgeu	r2,r21,88344 <__umoddi3+0x46c>
   88500:	e73fffc4 	addi	fp,fp,-1
   88504:	1585883a 	add	r2,r2,r22
   88508:	003f8e06 	br	88344 <__umoddi3+0x46c>
   8850c:	157f542e 	bgeu	r2,r21,88260 <__umoddi3+0x388>
   88510:	14c5883a 	add	r2,r2,r19
   88514:	003f5206 	br	88260 <__umoddi3+0x388>
   88518:	14c5883a 	add	r2,r2,r19
   8851c:	003efc06 	br	88110 <__umoddi3+0x238>
   88520:	14c5883a 	add	r2,r2,r19
   88524:	003ea606 	br	87fc0 <__umoddi3+0xe8>
   88528:	d8800117 	ldw	r2,4(sp)
   8852c:	113fc836 	bltu	r2,r4,88450 <__umoddi3+0x578>
   88530:	000d883a 	mov	r6,zero
   88534:	003fcd06 	br	8846c <__umoddi3+0x594>

00088538 <_fpadd_parts>:
   88538:	defff804 	addi	sp,sp,-32
   8853c:	dcc00315 	stw	r19,12(sp)
   88540:	2027883a 	mov	r19,r4
   88544:	21000017 	ldw	r4,0(r4)
   88548:	00c00044 	movi	r3,1
   8854c:	dd400515 	stw	r21,20(sp)
   88550:	dd000415 	stw	r20,16(sp)
   88554:	ddc00715 	stw	r23,28(sp)
   88558:	dd800615 	stw	r22,24(sp)
   8855c:	dc800215 	stw	r18,8(sp)
   88560:	dc400115 	stw	r17,4(sp)
   88564:	dc000015 	stw	r16,0(sp)
   88568:	282b883a 	mov	r21,r5
   8856c:	3029883a 	mov	r20,r6
   88570:	1900632e 	bgeu	r3,r4,88700 <_fpadd_parts+0x1c8>
   88574:	28800017 	ldw	r2,0(r5)
   88578:	1880812e 	bgeu	r3,r2,88780 <_fpadd_parts+0x248>
   8857c:	00c00104 	movi	r3,4
   88580:	20c0dc26 	beq	r4,r3,888f4 <_fpadd_parts+0x3bc>
   88584:	10c07e26 	beq	r2,r3,88780 <_fpadd_parts+0x248>
   88588:	00c00084 	movi	r3,2
   8858c:	10c06726 	beq	r2,r3,8872c <_fpadd_parts+0x1f4>
   88590:	20c07b26 	beq	r4,r3,88780 <_fpadd_parts+0x248>
   88594:	9dc00217 	ldw	r23,8(r19)
   88598:	28c00217 	ldw	r3,8(r5)
   8859c:	9c400317 	ldw	r17,12(r19)
   885a0:	2bc00317 	ldw	r15,12(r5)
   885a4:	b8cdc83a 	sub	r6,r23,r3
   885a8:	9c800417 	ldw	r18,16(r19)
   885ac:	2c000417 	ldw	r16,16(r5)
   885b0:	3009883a 	mov	r4,r6
   885b4:	30009716 	blt	r6,zero,88814 <_fpadd_parts+0x2dc>
   885b8:	00800fc4 	movi	r2,63
   885bc:	11806b16 	blt	r2,r6,8876c <_fpadd_parts+0x234>
   885c0:	0100a40e 	bge	zero,r4,88854 <_fpadd_parts+0x31c>
   885c4:	35bff804 	addi	r22,r6,-32
   885c8:	b000bc16 	blt	r22,zero,888bc <_fpadd_parts+0x384>
   885cc:	8596d83a 	srl	r11,r16,r22
   885d0:	0019883a 	mov	r12,zero
   885d4:	0013883a 	mov	r9,zero
   885d8:	01000044 	movi	r4,1
   885dc:	0015883a 	mov	r10,zero
   885e0:	b000be16 	blt	r22,zero,888dc <_fpadd_parts+0x3a4>
   885e4:	2590983a 	sll	r8,r4,r22
   885e8:	000f883a 	mov	r7,zero
   885ec:	00bfffc4 	movi	r2,-1
   885f0:	3889883a 	add	r4,r7,r2
   885f4:	408b883a 	add	r5,r8,r2
   885f8:	21cd803a 	cmpltu	r6,r4,r7
   885fc:	314b883a 	add	r5,r6,r5
   88600:	7904703a 	and	r2,r15,r4
   88604:	8146703a 	and	r3,r16,r5
   88608:	10c4b03a 	or	r2,r2,r3
   8860c:	10000226 	beq	r2,zero,88618 <_fpadd_parts+0xe0>
   88610:	02400044 	movi	r9,1
   88614:	0015883a 	mov	r10,zero
   88618:	5a5eb03a 	or	r15,r11,r9
   8861c:	62a0b03a 	or	r16,r12,r10
   88620:	99400117 	ldw	r5,4(r19)
   88624:	a8800117 	ldw	r2,4(r21)
   88628:	28806e26 	beq	r5,r2,887e4 <_fpadd_parts+0x2ac>
   8862c:	28006626 	beq	r5,zero,887c8 <_fpadd_parts+0x290>
   88630:	7c45c83a 	sub	r2,r15,r17
   88634:	7889803a 	cmpltu	r4,r15,r2
   88638:	8487c83a 	sub	r3,r16,r18
   8863c:	1909c83a 	sub	r4,r3,r4
   88640:	100d883a 	mov	r6,r2
   88644:	200f883a 	mov	r7,r4
   88648:	38007716 	blt	r7,zero,88828 <_fpadd_parts+0x2f0>
   8864c:	a5c00215 	stw	r23,8(r20)
   88650:	a1c00415 	stw	r7,16(r20)
   88654:	a0000115 	stw	zero,4(r20)
   88658:	a1800315 	stw	r6,12(r20)
   8865c:	a2000317 	ldw	r8,12(r20)
   88660:	a2400417 	ldw	r9,16(r20)
   88664:	00bfffc4 	movi	r2,-1
   88668:	408b883a 	add	r5,r8,r2
   8866c:	2a09803a 	cmpltu	r4,r5,r8
   88670:	488d883a 	add	r6,r9,r2
   88674:	01c40034 	movhi	r7,4096
   88678:	39ffffc4 	addi	r7,r7,-1
   8867c:	218d883a 	add	r6,r4,r6
   88680:	39801736 	bltu	r7,r6,886e0 <_fpadd_parts+0x1a8>
   88684:	31c06526 	beq	r6,r7,8881c <_fpadd_parts+0x2e4>
   88688:	a3000217 	ldw	r12,8(r20)
   8868c:	4209883a 	add	r4,r8,r8
   88690:	00bfffc4 	movi	r2,-1
   88694:	220f803a 	cmpltu	r7,r4,r8
   88698:	4a4b883a 	add	r5,r9,r9
   8869c:	394f883a 	add	r7,r7,r5
   886a0:	2095883a 	add	r10,r4,r2
   886a4:	3897883a 	add	r11,r7,r2
   886a8:	510d803a 	cmpltu	r6,r10,r4
   886ac:	6099883a 	add	r12,r12,r2
   886b0:	32d7883a 	add	r11,r6,r11
   886b4:	00840034 	movhi	r2,4096
   886b8:	10bfffc4 	addi	r2,r2,-1
   886bc:	2011883a 	mov	r8,r4
   886c0:	3813883a 	mov	r9,r7
   886c4:	a1000315 	stw	r4,12(r20)
   886c8:	a1c00415 	stw	r7,16(r20)
   886cc:	a3000215 	stw	r12,8(r20)
   886d0:	12c00336 	bltu	r2,r11,886e0 <_fpadd_parts+0x1a8>
   886d4:	58bfed1e 	bne	r11,r2,8868c <_fpadd_parts+0x154>
   886d8:	00bfff84 	movi	r2,-2
   886dc:	12bfeb2e 	bgeu	r2,r10,8868c <_fpadd_parts+0x154>
   886e0:	a2800417 	ldw	r10,16(r20)
   886e4:	008000c4 	movi	r2,3
   886e8:	00c80034 	movhi	r3,8192
   886ec:	18ffffc4 	addi	r3,r3,-1
   886f0:	a2400317 	ldw	r9,12(r20)
   886f4:	a0800015 	stw	r2,0(r20)
   886f8:	1a802336 	bltu	r3,r10,88788 <_fpadd_parts+0x250>
   886fc:	a027883a 	mov	r19,r20
   88700:	9805883a 	mov	r2,r19
   88704:	ddc00717 	ldw	r23,28(sp)
   88708:	dd800617 	ldw	r22,24(sp)
   8870c:	dd400517 	ldw	r21,20(sp)
   88710:	dd000417 	ldw	r20,16(sp)
   88714:	dcc00317 	ldw	r19,12(sp)
   88718:	dc800217 	ldw	r18,8(sp)
   8871c:	dc400117 	ldw	r17,4(sp)
   88720:	dc000017 	ldw	r16,0(sp)
   88724:	dec00804 	addi	sp,sp,32
   88728:	f800283a 	ret
   8872c:	20fff41e 	bne	r4,r3,88700 <_fpadd_parts+0x1c8>
   88730:	31000015 	stw	r4,0(r6)
   88734:	98800117 	ldw	r2,4(r19)
   88738:	30800115 	stw	r2,4(r6)
   8873c:	98c00217 	ldw	r3,8(r19)
   88740:	30c00215 	stw	r3,8(r6)
   88744:	98800317 	ldw	r2,12(r19)
   88748:	30800315 	stw	r2,12(r6)
   8874c:	98c00417 	ldw	r3,16(r19)
   88750:	30c00415 	stw	r3,16(r6)
   88754:	98800117 	ldw	r2,4(r19)
   88758:	28c00117 	ldw	r3,4(r5)
   8875c:	3027883a 	mov	r19,r6
   88760:	10c4703a 	and	r2,r2,r3
   88764:	30800115 	stw	r2,4(r6)
   88768:	003fe506 	br	88700 <_fpadd_parts+0x1c8>
   8876c:	1dc02616 	blt	r3,r23,88808 <_fpadd_parts+0x2d0>
   88770:	0023883a 	mov	r17,zero
   88774:	182f883a 	mov	r23,r3
   88778:	0025883a 	mov	r18,zero
   8877c:	003fa806 	br	88620 <_fpadd_parts+0xe8>
   88780:	a827883a 	mov	r19,r21
   88784:	003fde06 	br	88700 <_fpadd_parts+0x1c8>
   88788:	01800044 	movi	r6,1
   8878c:	500497fa 	slli	r2,r10,31
   88790:	4808d07a 	srli	r4,r9,1
   88794:	518ad83a 	srl	r5,r10,r6
   88798:	a2000217 	ldw	r8,8(r20)
   8879c:	1108b03a 	or	r4,r2,r4
   887a0:	0007883a 	mov	r3,zero
   887a4:	4984703a 	and	r2,r9,r6
   887a8:	208cb03a 	or	r6,r4,r2
   887ac:	28ceb03a 	or	r7,r5,r3
   887b0:	42000044 	addi	r8,r8,1
   887b4:	a027883a 	mov	r19,r20
   887b8:	a1c00415 	stw	r7,16(r20)
   887bc:	a2000215 	stw	r8,8(r20)
   887c0:	a1800315 	stw	r6,12(r20)
   887c4:	003fce06 	br	88700 <_fpadd_parts+0x1c8>
   887c8:	8bc5c83a 	sub	r2,r17,r15
   887cc:	8889803a 	cmpltu	r4,r17,r2
   887d0:	9407c83a 	sub	r3,r18,r16
   887d4:	1909c83a 	sub	r4,r3,r4
   887d8:	100d883a 	mov	r6,r2
   887dc:	200f883a 	mov	r7,r4
   887e0:	003f9906 	br	88648 <_fpadd_parts+0x110>
   887e4:	7c45883a 	add	r2,r15,r17
   887e8:	13c9803a 	cmpltu	r4,r2,r15
   887ec:	8487883a 	add	r3,r16,r18
   887f0:	20c9883a 	add	r4,r4,r3
   887f4:	a1400115 	stw	r5,4(r20)
   887f8:	a5c00215 	stw	r23,8(r20)
   887fc:	a0800315 	stw	r2,12(r20)
   88800:	a1000415 	stw	r4,16(r20)
   88804:	003fb606 	br	886e0 <_fpadd_parts+0x1a8>
   88808:	001f883a 	mov	r15,zero
   8880c:	0021883a 	mov	r16,zero
   88810:	003f8306 	br	88620 <_fpadd_parts+0xe8>
   88814:	018dc83a 	sub	r6,zero,r6
   88818:	003f6706 	br	885b8 <_fpadd_parts+0x80>
   8881c:	00bfff84 	movi	r2,-2
   88820:	117faf36 	bltu	r2,r5,886e0 <_fpadd_parts+0x1a8>
   88824:	003f9806 	br	88688 <_fpadd_parts+0x150>
   88828:	0005883a 	mov	r2,zero
   8882c:	1189c83a 	sub	r4,r2,r6
   88830:	1105803a 	cmpltu	r2,r2,r4
   88834:	01cbc83a 	sub	r5,zero,r7
   88838:	2885c83a 	sub	r2,r5,r2
   8883c:	01800044 	movi	r6,1
   88840:	a1800115 	stw	r6,4(r20)
   88844:	a5c00215 	stw	r23,8(r20)
   88848:	a1000315 	stw	r4,12(r20)
   8884c:	a0800415 	stw	r2,16(r20)
   88850:	003f8206 	br	8865c <_fpadd_parts+0x124>
   88854:	203f7226 	beq	r4,zero,88620 <_fpadd_parts+0xe8>
   88858:	35bff804 	addi	r22,r6,-32
   8885c:	b9af883a 	add	r23,r23,r6
   88860:	b0003116 	blt	r22,zero,88928 <_fpadd_parts+0x3f0>
   88864:	959ad83a 	srl	r13,r18,r22
   88868:	001d883a 	mov	r14,zero
   8886c:	000f883a 	mov	r7,zero
   88870:	01000044 	movi	r4,1
   88874:	0011883a 	mov	r8,zero
   88878:	b0002516 	blt	r22,zero,88910 <_fpadd_parts+0x3d8>
   8887c:	2594983a 	sll	r10,r4,r22
   88880:	0013883a 	mov	r9,zero
   88884:	00bfffc4 	movi	r2,-1
   88888:	4889883a 	add	r4,r9,r2
   8888c:	508b883a 	add	r5,r10,r2
   88890:	224d803a 	cmpltu	r6,r4,r9
   88894:	314b883a 	add	r5,r6,r5
   88898:	8904703a 	and	r2,r17,r4
   8889c:	9146703a 	and	r3,r18,r5
   888a0:	10c4b03a 	or	r2,r2,r3
   888a4:	10000226 	beq	r2,zero,888b0 <_fpadd_parts+0x378>
   888a8:	01c00044 	movi	r7,1
   888ac:	0011883a 	mov	r8,zero
   888b0:	69e2b03a 	or	r17,r13,r7
   888b4:	7224b03a 	or	r18,r14,r8
   888b8:	003f5906 	br	88620 <_fpadd_parts+0xe8>
   888bc:	8407883a 	add	r3,r16,r16
   888c0:	008007c4 	movi	r2,31
   888c4:	1185c83a 	sub	r2,r2,r6
   888c8:	1886983a 	sll	r3,r3,r2
   888cc:	7996d83a 	srl	r11,r15,r6
   888d0:	8198d83a 	srl	r12,r16,r6
   888d4:	1ad6b03a 	or	r11,r3,r11
   888d8:	003f3e06 	br	885d4 <_fpadd_parts+0x9c>
   888dc:	2006d07a 	srli	r3,r4,1
   888e0:	008007c4 	movi	r2,31
   888e4:	1185c83a 	sub	r2,r2,r6
   888e8:	1890d83a 	srl	r8,r3,r2
   888ec:	218e983a 	sll	r7,r4,r6
   888f0:	003f3e06 	br	885ec <_fpadd_parts+0xb4>
   888f4:	113f821e 	bne	r2,r4,88700 <_fpadd_parts+0x1c8>
   888f8:	28c00117 	ldw	r3,4(r5)
   888fc:	98800117 	ldw	r2,4(r19)
   88900:	10ff7f26 	beq	r2,r3,88700 <_fpadd_parts+0x1c8>
   88904:	04c00274 	movhi	r19,9
   88908:	9cf31104 	addi	r19,r19,-13244
   8890c:	003f7c06 	br	88700 <_fpadd_parts+0x1c8>
   88910:	2006d07a 	srli	r3,r4,1
   88914:	008007c4 	movi	r2,31
   88918:	1185c83a 	sub	r2,r2,r6
   8891c:	1894d83a 	srl	r10,r3,r2
   88920:	2192983a 	sll	r9,r4,r6
   88924:	003fd706 	br	88884 <_fpadd_parts+0x34c>
   88928:	9487883a 	add	r3,r18,r18
   8892c:	008007c4 	movi	r2,31
   88930:	1185c83a 	sub	r2,r2,r6
   88934:	1886983a 	sll	r3,r3,r2
   88938:	899ad83a 	srl	r13,r17,r6
   8893c:	919cd83a 	srl	r14,r18,r6
   88940:	1b5ab03a 	or	r13,r3,r13
   88944:	003fc906 	br	8886c <_fpadd_parts+0x334>

00088948 <__subdf3>:
   88948:	deffea04 	addi	sp,sp,-88
   8894c:	dcc01415 	stw	r19,80(sp)
   88950:	dcc00404 	addi	r19,sp,16
   88954:	2011883a 	mov	r8,r4
   88958:	2813883a 	mov	r9,r5
   8895c:	dc401315 	stw	r17,76(sp)
   88960:	d809883a 	mov	r4,sp
   88964:	980b883a 	mov	r5,r19
   88968:	dc400904 	addi	r17,sp,36
   8896c:	dfc01515 	stw	ra,84(sp)
   88970:	da400115 	stw	r9,4(sp)
   88974:	d9c00315 	stw	r7,12(sp)
   88978:	da000015 	stw	r8,0(sp)
   8897c:	d9800215 	stw	r6,8(sp)
   88980:	0089ca00 	call	89ca0 <__unpack_d>
   88984:	d9000204 	addi	r4,sp,8
   88988:	880b883a 	mov	r5,r17
   8898c:	0089ca00 	call	89ca0 <__unpack_d>
   88990:	d8800a17 	ldw	r2,40(sp)
   88994:	880b883a 	mov	r5,r17
   88998:	9809883a 	mov	r4,r19
   8899c:	d9800e04 	addi	r6,sp,56
   889a0:	1080005c 	xori	r2,r2,1
   889a4:	d8800a15 	stw	r2,40(sp)
   889a8:	00885380 	call	88538 <_fpadd_parts>
   889ac:	1009883a 	mov	r4,r2
   889b0:	008998c0 	call	8998c <__pack_d>
   889b4:	dfc01517 	ldw	ra,84(sp)
   889b8:	dcc01417 	ldw	r19,80(sp)
   889bc:	dc401317 	ldw	r17,76(sp)
   889c0:	dec01604 	addi	sp,sp,88
   889c4:	f800283a 	ret

000889c8 <__adddf3>:
   889c8:	deffea04 	addi	sp,sp,-88
   889cc:	dcc01415 	stw	r19,80(sp)
   889d0:	dcc00404 	addi	r19,sp,16
   889d4:	2011883a 	mov	r8,r4
   889d8:	2813883a 	mov	r9,r5
   889dc:	dc401315 	stw	r17,76(sp)
   889e0:	d809883a 	mov	r4,sp
   889e4:	980b883a 	mov	r5,r19
   889e8:	dc400904 	addi	r17,sp,36
   889ec:	dfc01515 	stw	ra,84(sp)
   889f0:	da400115 	stw	r9,4(sp)
   889f4:	d9c00315 	stw	r7,12(sp)
   889f8:	da000015 	stw	r8,0(sp)
   889fc:	d9800215 	stw	r6,8(sp)
   88a00:	0089ca00 	call	89ca0 <__unpack_d>
   88a04:	d9000204 	addi	r4,sp,8
   88a08:	880b883a 	mov	r5,r17
   88a0c:	0089ca00 	call	89ca0 <__unpack_d>
   88a10:	d9800e04 	addi	r6,sp,56
   88a14:	9809883a 	mov	r4,r19
   88a18:	880b883a 	mov	r5,r17
   88a1c:	00885380 	call	88538 <_fpadd_parts>
   88a20:	1009883a 	mov	r4,r2
   88a24:	008998c0 	call	8998c <__pack_d>
   88a28:	dfc01517 	ldw	ra,84(sp)
   88a2c:	dcc01417 	ldw	r19,80(sp)
   88a30:	dc401317 	ldw	r17,76(sp)
   88a34:	dec01604 	addi	sp,sp,88
   88a38:	f800283a 	ret

00088a3c <__muldf3>:
   88a3c:	deffe004 	addi	sp,sp,-128
   88a40:	dc401815 	stw	r17,96(sp)
   88a44:	dc400404 	addi	r17,sp,16
   88a48:	2011883a 	mov	r8,r4
   88a4c:	2813883a 	mov	r9,r5
   88a50:	dc001715 	stw	r16,92(sp)
   88a54:	d809883a 	mov	r4,sp
   88a58:	880b883a 	mov	r5,r17
   88a5c:	dc000904 	addi	r16,sp,36
   88a60:	dfc01f15 	stw	ra,124(sp)
   88a64:	da400115 	stw	r9,4(sp)
   88a68:	d9c00315 	stw	r7,12(sp)
   88a6c:	da000015 	stw	r8,0(sp)
   88a70:	d9800215 	stw	r6,8(sp)
   88a74:	ddc01e15 	stw	r23,120(sp)
   88a78:	dd801d15 	stw	r22,116(sp)
   88a7c:	dd401c15 	stw	r21,112(sp)
   88a80:	dd001b15 	stw	r20,108(sp)
   88a84:	dcc01a15 	stw	r19,104(sp)
   88a88:	dc801915 	stw	r18,100(sp)
   88a8c:	0089ca00 	call	89ca0 <__unpack_d>
   88a90:	d9000204 	addi	r4,sp,8
   88a94:	800b883a 	mov	r5,r16
   88a98:	0089ca00 	call	89ca0 <__unpack_d>
   88a9c:	d9000417 	ldw	r4,16(sp)
   88aa0:	00800044 	movi	r2,1
   88aa4:	1100102e 	bgeu	r2,r4,88ae8 <__muldf3+0xac>
   88aa8:	d8c00917 	ldw	r3,36(sp)
   88aac:	10c0062e 	bgeu	r2,r3,88ac8 <__muldf3+0x8c>
   88ab0:	00800104 	movi	r2,4
   88ab4:	20800a26 	beq	r4,r2,88ae0 <__muldf3+0xa4>
   88ab8:	1880cc26 	beq	r3,r2,88dec <__muldf3+0x3b0>
   88abc:	00800084 	movi	r2,2
   88ac0:	20800926 	beq	r4,r2,88ae8 <__muldf3+0xac>
   88ac4:	1880191e 	bne	r3,r2,88b2c <__muldf3+0xf0>
   88ac8:	d8c00a17 	ldw	r3,40(sp)
   88acc:	d8800517 	ldw	r2,20(sp)
   88ad0:	8009883a 	mov	r4,r16
   88ad4:	10c4c03a 	cmpne	r2,r2,r3
   88ad8:	d8800a15 	stw	r2,40(sp)
   88adc:	00000706 	br	88afc <__muldf3+0xc0>
   88ae0:	00800084 	movi	r2,2
   88ae4:	1880c326 	beq	r3,r2,88df4 <__muldf3+0x3b8>
   88ae8:	d8800517 	ldw	r2,20(sp)
   88aec:	d8c00a17 	ldw	r3,40(sp)
   88af0:	8809883a 	mov	r4,r17
   88af4:	10c4c03a 	cmpne	r2,r2,r3
   88af8:	d8800515 	stw	r2,20(sp)
   88afc:	008998c0 	call	8998c <__pack_d>
   88b00:	dfc01f17 	ldw	ra,124(sp)
   88b04:	ddc01e17 	ldw	r23,120(sp)
   88b08:	dd801d17 	ldw	r22,116(sp)
   88b0c:	dd401c17 	ldw	r21,112(sp)
   88b10:	dd001b17 	ldw	r20,108(sp)
   88b14:	dcc01a17 	ldw	r19,104(sp)
   88b18:	dc801917 	ldw	r18,100(sp)
   88b1c:	dc401817 	ldw	r17,96(sp)
   88b20:	dc001717 	ldw	r16,92(sp)
   88b24:	dec02004 	addi	sp,sp,128
   88b28:	f800283a 	ret
   88b2c:	dd800717 	ldw	r22,28(sp)
   88b30:	dc800c17 	ldw	r18,48(sp)
   88b34:	002b883a 	mov	r21,zero
   88b38:	0023883a 	mov	r17,zero
   88b3c:	a80b883a 	mov	r5,r21
   88b40:	b00d883a 	mov	r6,r22
   88b44:	880f883a 	mov	r7,r17
   88b48:	ddc00817 	ldw	r23,32(sp)
   88b4c:	dcc00d17 	ldw	r19,52(sp)
   88b50:	9009883a 	mov	r4,r18
   88b54:	00897e80 	call	897e8 <__muldi3>
   88b58:	001b883a 	mov	r13,zero
   88b5c:	680f883a 	mov	r7,r13
   88b60:	b009883a 	mov	r4,r22
   88b64:	000b883a 	mov	r5,zero
   88b68:	980d883a 	mov	r6,r19
   88b6c:	b82d883a 	mov	r22,r23
   88b70:	002f883a 	mov	r23,zero
   88b74:	db401615 	stw	r13,88(sp)
   88b78:	d8801315 	stw	r2,76(sp)
   88b7c:	d8c01415 	stw	r3,80(sp)
   88b80:	dcc01515 	stw	r19,84(sp)
   88b84:	00897e80 	call	897e8 <__muldi3>
   88b88:	b00d883a 	mov	r6,r22
   88b8c:	000b883a 	mov	r5,zero
   88b90:	9009883a 	mov	r4,r18
   88b94:	b80f883a 	mov	r7,r23
   88b98:	1021883a 	mov	r16,r2
   88b9c:	1823883a 	mov	r17,r3
   88ba0:	00897e80 	call	897e8 <__muldi3>
   88ba4:	8085883a 	add	r2,r16,r2
   88ba8:	140d803a 	cmpltu	r6,r2,r16
   88bac:	88c7883a 	add	r3,r17,r3
   88bb0:	30cd883a 	add	r6,r6,r3
   88bb4:	1029883a 	mov	r20,r2
   88bb8:	302b883a 	mov	r21,r6
   88bbc:	da801317 	ldw	r10,76(sp)
   88bc0:	dac01417 	ldw	r11,80(sp)
   88bc4:	db001517 	ldw	r12,84(sp)
   88bc8:	db401617 	ldw	r13,88(sp)
   88bcc:	3440612e 	bgeu	r6,r17,88d54 <__muldf3+0x318>
   88bd0:	0009883a 	mov	r4,zero
   88bd4:	5105883a 	add	r2,r10,r4
   88bd8:	128d803a 	cmpltu	r6,r2,r10
   88bdc:	5d07883a 	add	r3,r11,r20
   88be0:	30cd883a 	add	r6,r6,r3
   88be4:	0021883a 	mov	r16,zero
   88be8:	04400044 	movi	r17,1
   88bec:	1025883a 	mov	r18,r2
   88bf0:	3027883a 	mov	r19,r6
   88bf4:	32c06236 	bltu	r6,r11,88d80 <__muldf3+0x344>
   88bf8:	59807a26 	beq	r11,r6,88de4 <__muldf3+0x3a8>
   88bfc:	680b883a 	mov	r5,r13
   88c00:	b80f883a 	mov	r7,r23
   88c04:	6009883a 	mov	r4,r12
   88c08:	b00d883a 	mov	r6,r22
   88c0c:	00897e80 	call	897e8 <__muldi3>
   88c10:	1009883a 	mov	r4,r2
   88c14:	000f883a 	mov	r7,zero
   88c18:	1545883a 	add	r2,r2,r21
   88c1c:	1111803a 	cmpltu	r8,r2,r4
   88c20:	19c7883a 	add	r3,r3,r7
   88c24:	40c7883a 	add	r3,r8,r3
   88c28:	88cb883a 	add	r5,r17,r3
   88c2c:	d8c00617 	ldw	r3,24(sp)
   88c30:	8089883a 	add	r4,r16,r2
   88c34:	d8800b17 	ldw	r2,44(sp)
   88c38:	18c00104 	addi	r3,r3,4
   88c3c:	240d803a 	cmpltu	r6,r4,r16
   88c40:	10c7883a 	add	r3,r2,r3
   88c44:	2013883a 	mov	r9,r4
   88c48:	d8800a17 	ldw	r2,40(sp)
   88c4c:	d9000517 	ldw	r4,20(sp)
   88c50:	314d883a 	add	r6,r6,r5
   88c54:	3015883a 	mov	r10,r6
   88c58:	2088c03a 	cmpne	r4,r4,r2
   88c5c:	00880034 	movhi	r2,8192
   88c60:	10bfffc4 	addi	r2,r2,-1
   88c64:	d9000f15 	stw	r4,60(sp)
   88c68:	d8c01015 	stw	r3,64(sp)
   88c6c:	1180162e 	bgeu	r2,r6,88cc8 <__muldf3+0x28c>
   88c70:	1811883a 	mov	r8,r3
   88c74:	101f883a 	mov	r15,r2
   88c78:	980497fa 	slli	r2,r19,31
   88c7c:	9016d07a 	srli	r11,r18,1
   88c80:	500697fa 	slli	r3,r10,31
   88c84:	480cd07a 	srli	r6,r9,1
   88c88:	500ed07a 	srli	r7,r10,1
   88c8c:	12d6b03a 	or	r11,r2,r11
   88c90:	00800044 	movi	r2,1
   88c94:	198cb03a 	or	r6,r3,r6
   88c98:	4888703a 	and	r4,r9,r2
   88c9c:	9818d07a 	srli	r12,r19,1
   88ca0:	001b883a 	mov	r13,zero
   88ca4:	03a00034 	movhi	r14,32768
   88ca8:	3013883a 	mov	r9,r6
   88cac:	3815883a 	mov	r10,r7
   88cb0:	4091883a 	add	r8,r8,r2
   88cb4:	20000226 	beq	r4,zero,88cc0 <__muldf3+0x284>
   88cb8:	5b64b03a 	or	r18,r11,r13
   88cbc:	63a6b03a 	or	r19,r12,r14
   88cc0:	7abfed36 	bltu	r15,r10,88c78 <__muldf3+0x23c>
   88cc4:	da001015 	stw	r8,64(sp)
   88cc8:	00840034 	movhi	r2,4096
   88ccc:	10bfffc4 	addi	r2,r2,-1
   88cd0:	12801436 	bltu	r2,r10,88d24 <__muldf3+0x2e8>
   88cd4:	da001017 	ldw	r8,64(sp)
   88cd8:	101f883a 	mov	r15,r2
   88cdc:	4a45883a 	add	r2,r9,r9
   88ce0:	124d803a 	cmpltu	r6,r2,r9
   88ce4:	5287883a 	add	r3,r10,r10
   88ce8:	9497883a 	add	r11,r18,r18
   88cec:	5c8f803a 	cmpltu	r7,r11,r18
   88cf0:	9cd9883a 	add	r12,r19,r19
   88cf4:	01000044 	movi	r4,1
   88cf8:	30cd883a 	add	r6,r6,r3
   88cfc:	3b0f883a 	add	r7,r7,r12
   88d00:	423fffc4 	addi	r8,r8,-1
   88d04:	1013883a 	mov	r9,r2
   88d08:	3015883a 	mov	r10,r6
   88d0c:	111ab03a 	or	r13,r2,r4
   88d10:	98003016 	blt	r19,zero,88dd4 <__muldf3+0x398>
   88d14:	5825883a 	mov	r18,r11
   88d18:	3827883a 	mov	r19,r7
   88d1c:	7abfef2e 	bgeu	r15,r10,88cdc <__muldf3+0x2a0>
   88d20:	da001015 	stw	r8,64(sp)
   88d24:	00803fc4 	movi	r2,255
   88d28:	488e703a 	and	r7,r9,r2
   88d2c:	00802004 	movi	r2,128
   88d30:	0007883a 	mov	r3,zero
   88d34:	0011883a 	mov	r8,zero
   88d38:	38801826 	beq	r7,r2,88d9c <__muldf3+0x360>
   88d3c:	008000c4 	movi	r2,3
   88d40:	d9000e04 	addi	r4,sp,56
   88d44:	da801215 	stw	r10,72(sp)
   88d48:	d8800e15 	stw	r2,56(sp)
   88d4c:	da401115 	stw	r9,68(sp)
   88d50:	003f6a06 	br	88afc <__muldf3+0xc0>
   88d54:	89802126 	beq	r17,r6,88ddc <__muldf3+0x3a0>
   88d58:	0009883a 	mov	r4,zero
   88d5c:	5105883a 	add	r2,r10,r4
   88d60:	128d803a 	cmpltu	r6,r2,r10
   88d64:	5d07883a 	add	r3,r11,r20
   88d68:	30cd883a 	add	r6,r6,r3
   88d6c:	0021883a 	mov	r16,zero
   88d70:	0023883a 	mov	r17,zero
   88d74:	1025883a 	mov	r18,r2
   88d78:	3027883a 	mov	r19,r6
   88d7c:	32ff9e2e 	bgeu	r6,r11,88bf8 <__muldf3+0x1bc>
   88d80:	00800044 	movi	r2,1
   88d84:	8089883a 	add	r4,r16,r2
   88d88:	240d803a 	cmpltu	r6,r4,r16
   88d8c:	344d883a 	add	r6,r6,r17
   88d90:	2021883a 	mov	r16,r4
   88d94:	3023883a 	mov	r17,r6
   88d98:	003f9806 	br	88bfc <__muldf3+0x1c0>
   88d9c:	403fe71e 	bne	r8,zero,88d3c <__muldf3+0x300>
   88da0:	01004004 	movi	r4,256
   88da4:	4904703a 	and	r2,r9,r4
   88da8:	10c4b03a 	or	r2,r2,r3
   88dac:	103fe31e 	bne	r2,zero,88d3c <__muldf3+0x300>
   88db0:	94c4b03a 	or	r2,r18,r19
   88db4:	103fe126 	beq	r2,zero,88d3c <__muldf3+0x300>
   88db8:	49c5883a 	add	r2,r9,r7
   88dbc:	1251803a 	cmpltu	r8,r2,r9
   88dc0:	4291883a 	add	r8,r8,r10
   88dc4:	013fc004 	movi	r4,-256
   88dc8:	1112703a 	and	r9,r2,r4
   88dcc:	4015883a 	mov	r10,r8
   88dd0:	003fda06 	br	88d3c <__muldf3+0x300>
   88dd4:	6813883a 	mov	r9,r13
   88dd8:	003fce06 	br	88d14 <__muldf3+0x2d8>
   88ddc:	143f7c36 	bltu	r2,r16,88bd0 <__muldf3+0x194>
   88de0:	003fdd06 	br	88d58 <__muldf3+0x31c>
   88de4:	12bf852e 	bgeu	r2,r10,88bfc <__muldf3+0x1c0>
   88de8:	003fe506 	br	88d80 <__muldf3+0x344>
   88dec:	00800084 	movi	r2,2
   88df0:	20bf351e 	bne	r4,r2,88ac8 <__muldf3+0x8c>
   88df4:	01000274 	movhi	r4,9
   88df8:	21331104 	addi	r4,r4,-13244
   88dfc:	003f3f06 	br	88afc <__muldf3+0xc0>

00088e00 <__divdf3>:
   88e00:	deffed04 	addi	sp,sp,-76
   88e04:	dcc01115 	stw	r19,68(sp)
   88e08:	dcc00404 	addi	r19,sp,16
   88e0c:	2011883a 	mov	r8,r4
   88e10:	2813883a 	mov	r9,r5
   88e14:	dc000e15 	stw	r16,56(sp)
   88e18:	d809883a 	mov	r4,sp
   88e1c:	980b883a 	mov	r5,r19
   88e20:	dc000904 	addi	r16,sp,36
   88e24:	dfc01215 	stw	ra,72(sp)
   88e28:	da400115 	stw	r9,4(sp)
   88e2c:	d9c00315 	stw	r7,12(sp)
   88e30:	da000015 	stw	r8,0(sp)
   88e34:	d9800215 	stw	r6,8(sp)
   88e38:	dc801015 	stw	r18,64(sp)
   88e3c:	dc400f15 	stw	r17,60(sp)
   88e40:	0089ca00 	call	89ca0 <__unpack_d>
   88e44:	d9000204 	addi	r4,sp,8
   88e48:	800b883a 	mov	r5,r16
   88e4c:	0089ca00 	call	89ca0 <__unpack_d>
   88e50:	d9000417 	ldw	r4,16(sp)
   88e54:	00800044 	movi	r2,1
   88e58:	11000b2e 	bgeu	r2,r4,88e88 <__divdf3+0x88>
   88e5c:	d9400917 	ldw	r5,36(sp)
   88e60:	1140762e 	bgeu	r2,r5,8903c <__divdf3+0x23c>
   88e64:	d8800517 	ldw	r2,20(sp)
   88e68:	d8c00a17 	ldw	r3,40(sp)
   88e6c:	01800104 	movi	r6,4
   88e70:	10c4f03a 	xor	r2,r2,r3
   88e74:	d8800515 	stw	r2,20(sp)
   88e78:	21800226 	beq	r4,r6,88e84 <__divdf3+0x84>
   88e7c:	00800084 	movi	r2,2
   88e80:	2080141e 	bne	r4,r2,88ed4 <__divdf3+0xd4>
   88e84:	29000926 	beq	r5,r4,88eac <__divdf3+0xac>
   88e88:	9809883a 	mov	r4,r19
   88e8c:	008998c0 	call	8998c <__pack_d>
   88e90:	dfc01217 	ldw	ra,72(sp)
   88e94:	dcc01117 	ldw	r19,68(sp)
   88e98:	dc801017 	ldw	r18,64(sp)
   88e9c:	dc400f17 	ldw	r17,60(sp)
   88ea0:	dc000e17 	ldw	r16,56(sp)
   88ea4:	dec01304 	addi	sp,sp,76
   88ea8:	f800283a 	ret
   88eac:	01000274 	movhi	r4,9
   88eb0:	21331104 	addi	r4,r4,-13244
   88eb4:	008998c0 	call	8998c <__pack_d>
   88eb8:	dfc01217 	ldw	ra,72(sp)
   88ebc:	dcc01117 	ldw	r19,68(sp)
   88ec0:	dc801017 	ldw	r18,64(sp)
   88ec4:	dc400f17 	ldw	r17,60(sp)
   88ec8:	dc000e17 	ldw	r16,56(sp)
   88ecc:	dec01304 	addi	sp,sp,76
   88ed0:	f800283a 	ret
   88ed4:	29805b26 	beq	r5,r6,89044 <__divdf3+0x244>
   88ed8:	28802d26 	beq	r5,r2,88f90 <__divdf3+0x190>
   88edc:	d8c00617 	ldw	r3,24(sp)
   88ee0:	d8800b17 	ldw	r2,44(sp)
   88ee4:	d9c00817 	ldw	r7,32(sp)
   88ee8:	dc400d17 	ldw	r17,52(sp)
   88eec:	188bc83a 	sub	r5,r3,r2
   88ef0:	d9800717 	ldw	r6,28(sp)
   88ef4:	dc000c17 	ldw	r16,48(sp)
   88ef8:	d9400615 	stw	r5,24(sp)
   88efc:	3c403836 	bltu	r7,r17,88fe0 <__divdf3+0x1e0>
   88f00:	89c03626 	beq	r17,r7,88fdc <__divdf3+0x1dc>
   88f04:	0015883a 	mov	r10,zero
   88f08:	001d883a 	mov	r14,zero
   88f0c:	02c40034 	movhi	r11,4096
   88f10:	001f883a 	mov	r15,zero
   88f14:	003f883a 	mov	ra,zero
   88f18:	04800f44 	movi	r18,61
   88f1c:	00000f06 	br	88f5c <__divdf3+0x15c>
   88f20:	601d883a 	mov	r14,r12
   88f24:	681f883a 	mov	r15,r13
   88f28:	400d883a 	mov	r6,r8
   88f2c:	100f883a 	mov	r7,r2
   88f30:	3191883a 	add	r8,r6,r6
   88f34:	5808d07a 	srli	r4,r11,1
   88f38:	4185803a 	cmpltu	r2,r8,r6
   88f3c:	39d3883a 	add	r9,r7,r7
   88f40:	28c6b03a 	or	r3,r5,r3
   88f44:	1245883a 	add	r2,r2,r9
   88f48:	1815883a 	mov	r10,r3
   88f4c:	2017883a 	mov	r11,r4
   88f50:	400d883a 	mov	r6,r8
   88f54:	100f883a 	mov	r7,r2
   88f58:	fc801726 	beq	ra,r18,88fb8 <__divdf3+0x1b8>
   88f5c:	580a97fa 	slli	r5,r11,31
   88f60:	5006d07a 	srli	r3,r10,1
   88f64:	ffc00044 	addi	ra,ra,1
   88f68:	3c7ff136 	bltu	r7,r17,88f30 <__divdf3+0x130>
   88f6c:	3411c83a 	sub	r8,r6,r16
   88f70:	3205803a 	cmpltu	r2,r6,r8
   88f74:	3c53c83a 	sub	r9,r7,r17
   88f78:	7298b03a 	or	r12,r14,r10
   88f7c:	7adab03a 	or	r13,r15,r11
   88f80:	4885c83a 	sub	r2,r9,r2
   88f84:	89ffe61e 	bne	r17,r7,88f20 <__divdf3+0x120>
   88f88:	343fe936 	bltu	r6,r16,88f30 <__divdf3+0x130>
   88f8c:	003fe406 	br	88f20 <__divdf3+0x120>
   88f90:	9809883a 	mov	r4,r19
   88f94:	d9800415 	stw	r6,16(sp)
   88f98:	008998c0 	call	8998c <__pack_d>
   88f9c:	dfc01217 	ldw	ra,72(sp)
   88fa0:	dcc01117 	ldw	r19,68(sp)
   88fa4:	dc801017 	ldw	r18,64(sp)
   88fa8:	dc400f17 	ldw	r17,60(sp)
   88fac:	dc000e17 	ldw	r16,56(sp)
   88fb0:	dec01304 	addi	sp,sp,76
   88fb4:	f800283a 	ret
   88fb8:	00803fc4 	movi	r2,255
   88fbc:	7090703a 	and	r8,r14,r2
   88fc0:	00802004 	movi	r2,128
   88fc4:	0007883a 	mov	r3,zero
   88fc8:	0013883a 	mov	r9,zero
   88fcc:	40800d26 	beq	r8,r2,89004 <__divdf3+0x204>
   88fd0:	dbc00815 	stw	r15,32(sp)
   88fd4:	db800715 	stw	r14,28(sp)
   88fd8:	003fab06 	br	88e88 <__divdf3+0x88>
   88fdc:	343fc92e 	bgeu	r6,r16,88f04 <__divdf3+0x104>
   88fe0:	3185883a 	add	r2,r6,r6
   88fe4:	1189803a 	cmpltu	r4,r2,r6
   88fe8:	39c7883a 	add	r3,r7,r7
   88fec:	20c9883a 	add	r4,r4,r3
   88ff0:	297fffc4 	addi	r5,r5,-1
   88ff4:	100d883a 	mov	r6,r2
   88ff8:	200f883a 	mov	r7,r4
   88ffc:	d9400615 	stw	r5,24(sp)
   89000:	003fc006 	br	88f04 <__divdf3+0x104>
   89004:	483ff21e 	bne	r9,zero,88fd0 <__divdf3+0x1d0>
   89008:	01004004 	movi	r4,256
   8900c:	7104703a 	and	r2,r14,r4
   89010:	10c4b03a 	or	r2,r2,r3
   89014:	103fee1e 	bne	r2,zero,88fd0 <__divdf3+0x1d0>
   89018:	31c4b03a 	or	r2,r6,r7
   8901c:	103fec26 	beq	r2,zero,88fd0 <__divdf3+0x1d0>
   89020:	7205883a 	add	r2,r14,r8
   89024:	1391803a 	cmpltu	r8,r2,r14
   89028:	43d1883a 	add	r8,r8,r15
   8902c:	013fc004 	movi	r4,-256
   89030:	111c703a 	and	r14,r2,r4
   89034:	401f883a 	mov	r15,r8
   89038:	003fe506 	br	88fd0 <__divdf3+0x1d0>
   8903c:	8009883a 	mov	r4,r16
   89040:	003f9206 	br	88e8c <__divdf3+0x8c>
   89044:	9809883a 	mov	r4,r19
   89048:	d8000715 	stw	zero,28(sp)
   8904c:	d8000815 	stw	zero,32(sp)
   89050:	d8000615 	stw	zero,24(sp)
   89054:	003f8d06 	br	88e8c <__divdf3+0x8c>

00089058 <__eqdf2>:
   89058:	deffef04 	addi	sp,sp,-68
   8905c:	dc400f15 	stw	r17,60(sp)
   89060:	dc400404 	addi	r17,sp,16
   89064:	2005883a 	mov	r2,r4
   89068:	2807883a 	mov	r3,r5
   8906c:	dc000e15 	stw	r16,56(sp)
   89070:	d809883a 	mov	r4,sp
   89074:	880b883a 	mov	r5,r17
   89078:	dc000904 	addi	r16,sp,36
   8907c:	d8c00115 	stw	r3,4(sp)
   89080:	d8800015 	stw	r2,0(sp)
   89084:	d9800215 	stw	r6,8(sp)
   89088:	dfc01015 	stw	ra,64(sp)
   8908c:	d9c00315 	stw	r7,12(sp)
   89090:	0089ca00 	call	89ca0 <__unpack_d>
   89094:	d9000204 	addi	r4,sp,8
   89098:	800b883a 	mov	r5,r16
   8909c:	0089ca00 	call	89ca0 <__unpack_d>
   890a0:	d8800417 	ldw	r2,16(sp)
   890a4:	00c00044 	movi	r3,1
   890a8:	180d883a 	mov	r6,r3
   890ac:	1880062e 	bgeu	r3,r2,890c8 <__eqdf2+0x70>
   890b0:	d8800917 	ldw	r2,36(sp)
   890b4:	8809883a 	mov	r4,r17
   890b8:	800b883a 	mov	r5,r16
   890bc:	1880022e 	bgeu	r3,r2,890c8 <__eqdf2+0x70>
   890c0:	0089dd80 	call	89dd8 <__fpcmp_parts_d>
   890c4:	100d883a 	mov	r6,r2
   890c8:	3005883a 	mov	r2,r6
   890cc:	dfc01017 	ldw	ra,64(sp)
   890d0:	dc400f17 	ldw	r17,60(sp)
   890d4:	dc000e17 	ldw	r16,56(sp)
   890d8:	dec01104 	addi	sp,sp,68
   890dc:	f800283a 	ret

000890e0 <__nedf2>:
   890e0:	deffef04 	addi	sp,sp,-68
   890e4:	dc400f15 	stw	r17,60(sp)
   890e8:	dc400404 	addi	r17,sp,16
   890ec:	2005883a 	mov	r2,r4
   890f0:	2807883a 	mov	r3,r5
   890f4:	dc000e15 	stw	r16,56(sp)
   890f8:	d809883a 	mov	r4,sp
   890fc:	880b883a 	mov	r5,r17
   89100:	dc000904 	addi	r16,sp,36
   89104:	d8c00115 	stw	r3,4(sp)
   89108:	d8800015 	stw	r2,0(sp)
   8910c:	d9800215 	stw	r6,8(sp)
   89110:	dfc01015 	stw	ra,64(sp)
   89114:	d9c00315 	stw	r7,12(sp)
   89118:	0089ca00 	call	89ca0 <__unpack_d>
   8911c:	d9000204 	addi	r4,sp,8
   89120:	800b883a 	mov	r5,r16
   89124:	0089ca00 	call	89ca0 <__unpack_d>
   89128:	d8800417 	ldw	r2,16(sp)
   8912c:	00c00044 	movi	r3,1
   89130:	180d883a 	mov	r6,r3
   89134:	1880062e 	bgeu	r3,r2,89150 <__nedf2+0x70>
   89138:	d8800917 	ldw	r2,36(sp)
   8913c:	8809883a 	mov	r4,r17
   89140:	800b883a 	mov	r5,r16
   89144:	1880022e 	bgeu	r3,r2,89150 <__nedf2+0x70>
   89148:	0089dd80 	call	89dd8 <__fpcmp_parts_d>
   8914c:	100d883a 	mov	r6,r2
   89150:	3005883a 	mov	r2,r6
   89154:	dfc01017 	ldw	ra,64(sp)
   89158:	dc400f17 	ldw	r17,60(sp)
   8915c:	dc000e17 	ldw	r16,56(sp)
   89160:	dec01104 	addi	sp,sp,68
   89164:	f800283a 	ret

00089168 <__gtdf2>:
   89168:	deffef04 	addi	sp,sp,-68
   8916c:	dc400f15 	stw	r17,60(sp)
   89170:	dc400404 	addi	r17,sp,16
   89174:	2005883a 	mov	r2,r4
   89178:	2807883a 	mov	r3,r5
   8917c:	dc000e15 	stw	r16,56(sp)
   89180:	d809883a 	mov	r4,sp
   89184:	880b883a 	mov	r5,r17
   89188:	dc000904 	addi	r16,sp,36
   8918c:	d8c00115 	stw	r3,4(sp)
   89190:	d8800015 	stw	r2,0(sp)
   89194:	d9800215 	stw	r6,8(sp)
   89198:	dfc01015 	stw	ra,64(sp)
   8919c:	d9c00315 	stw	r7,12(sp)
   891a0:	0089ca00 	call	89ca0 <__unpack_d>
   891a4:	d9000204 	addi	r4,sp,8
   891a8:	800b883a 	mov	r5,r16
   891ac:	0089ca00 	call	89ca0 <__unpack_d>
   891b0:	d8800417 	ldw	r2,16(sp)
   891b4:	00c00044 	movi	r3,1
   891b8:	01bfffc4 	movi	r6,-1
   891bc:	1880062e 	bgeu	r3,r2,891d8 <__gtdf2+0x70>
   891c0:	d8800917 	ldw	r2,36(sp)
   891c4:	8809883a 	mov	r4,r17
   891c8:	800b883a 	mov	r5,r16
   891cc:	1880022e 	bgeu	r3,r2,891d8 <__gtdf2+0x70>
   891d0:	0089dd80 	call	89dd8 <__fpcmp_parts_d>
   891d4:	100d883a 	mov	r6,r2
   891d8:	3005883a 	mov	r2,r6
   891dc:	dfc01017 	ldw	ra,64(sp)
   891e0:	dc400f17 	ldw	r17,60(sp)
   891e4:	dc000e17 	ldw	r16,56(sp)
   891e8:	dec01104 	addi	sp,sp,68
   891ec:	f800283a 	ret

000891f0 <__gedf2>:
   891f0:	deffef04 	addi	sp,sp,-68
   891f4:	dc400f15 	stw	r17,60(sp)
   891f8:	dc400404 	addi	r17,sp,16
   891fc:	2005883a 	mov	r2,r4
   89200:	2807883a 	mov	r3,r5
   89204:	dc000e15 	stw	r16,56(sp)
   89208:	d809883a 	mov	r4,sp
   8920c:	880b883a 	mov	r5,r17
   89210:	dc000904 	addi	r16,sp,36
   89214:	d8c00115 	stw	r3,4(sp)
   89218:	d8800015 	stw	r2,0(sp)
   8921c:	d9800215 	stw	r6,8(sp)
   89220:	dfc01015 	stw	ra,64(sp)
   89224:	d9c00315 	stw	r7,12(sp)
   89228:	0089ca00 	call	89ca0 <__unpack_d>
   8922c:	d9000204 	addi	r4,sp,8
   89230:	800b883a 	mov	r5,r16
   89234:	0089ca00 	call	89ca0 <__unpack_d>
   89238:	d8800417 	ldw	r2,16(sp)
   8923c:	00c00044 	movi	r3,1
   89240:	01bfffc4 	movi	r6,-1
   89244:	1880062e 	bgeu	r3,r2,89260 <__gedf2+0x70>
   89248:	d8800917 	ldw	r2,36(sp)
   8924c:	8809883a 	mov	r4,r17
   89250:	800b883a 	mov	r5,r16
   89254:	1880022e 	bgeu	r3,r2,89260 <__gedf2+0x70>
   89258:	0089dd80 	call	89dd8 <__fpcmp_parts_d>
   8925c:	100d883a 	mov	r6,r2
   89260:	3005883a 	mov	r2,r6
   89264:	dfc01017 	ldw	ra,64(sp)
   89268:	dc400f17 	ldw	r17,60(sp)
   8926c:	dc000e17 	ldw	r16,56(sp)
   89270:	dec01104 	addi	sp,sp,68
   89274:	f800283a 	ret

00089278 <__ltdf2>:
   89278:	deffef04 	addi	sp,sp,-68
   8927c:	dc400f15 	stw	r17,60(sp)
   89280:	dc400404 	addi	r17,sp,16
   89284:	2005883a 	mov	r2,r4
   89288:	2807883a 	mov	r3,r5
   8928c:	dc000e15 	stw	r16,56(sp)
   89290:	d809883a 	mov	r4,sp
   89294:	880b883a 	mov	r5,r17
   89298:	dc000904 	addi	r16,sp,36
   8929c:	d8c00115 	stw	r3,4(sp)
   892a0:	d8800015 	stw	r2,0(sp)
   892a4:	d9800215 	stw	r6,8(sp)
   892a8:	dfc01015 	stw	ra,64(sp)
   892ac:	d9c00315 	stw	r7,12(sp)
   892b0:	0089ca00 	call	89ca0 <__unpack_d>
   892b4:	d9000204 	addi	r4,sp,8
   892b8:	800b883a 	mov	r5,r16
   892bc:	0089ca00 	call	89ca0 <__unpack_d>
   892c0:	d8800417 	ldw	r2,16(sp)
   892c4:	00c00044 	movi	r3,1
   892c8:	180d883a 	mov	r6,r3
   892cc:	1880062e 	bgeu	r3,r2,892e8 <__ltdf2+0x70>
   892d0:	d8800917 	ldw	r2,36(sp)
   892d4:	8809883a 	mov	r4,r17
   892d8:	800b883a 	mov	r5,r16
   892dc:	1880022e 	bgeu	r3,r2,892e8 <__ltdf2+0x70>
   892e0:	0089dd80 	call	89dd8 <__fpcmp_parts_d>
   892e4:	100d883a 	mov	r6,r2
   892e8:	3005883a 	mov	r2,r6
   892ec:	dfc01017 	ldw	ra,64(sp)
   892f0:	dc400f17 	ldw	r17,60(sp)
   892f4:	dc000e17 	ldw	r16,56(sp)
   892f8:	dec01104 	addi	sp,sp,68
   892fc:	f800283a 	ret

00089300 <__floatsidf>:
   89300:	2006d7fa 	srli	r3,r4,31
   89304:	defff604 	addi	sp,sp,-40
   89308:	008000c4 	movi	r2,3
   8930c:	dfc00915 	stw	ra,36(sp)
   89310:	dcc00815 	stw	r19,32(sp)
   89314:	dc800715 	stw	r18,28(sp)
   89318:	dc400615 	stw	r17,24(sp)
   8931c:	dc000515 	stw	r16,20(sp)
   89320:	d8800015 	stw	r2,0(sp)
   89324:	d8c00115 	stw	r3,4(sp)
   89328:	20000f1e 	bne	r4,zero,89368 <__floatsidf+0x68>
   8932c:	00800084 	movi	r2,2
   89330:	d8800015 	stw	r2,0(sp)
   89334:	d809883a 	mov	r4,sp
   89338:	008998c0 	call	8998c <__pack_d>
   8933c:	1009883a 	mov	r4,r2
   89340:	180b883a 	mov	r5,r3
   89344:	2005883a 	mov	r2,r4
   89348:	2807883a 	mov	r3,r5
   8934c:	dfc00917 	ldw	ra,36(sp)
   89350:	dcc00817 	ldw	r19,32(sp)
   89354:	dc800717 	ldw	r18,28(sp)
   89358:	dc400617 	ldw	r17,24(sp)
   8935c:	dc000517 	ldw	r16,20(sp)
   89360:	dec00a04 	addi	sp,sp,40
   89364:	f800283a 	ret
   89368:	00800f04 	movi	r2,60
   8936c:	1807003a 	cmpeq	r3,r3,zero
   89370:	d8800215 	stw	r2,8(sp)
   89374:	18001126 	beq	r3,zero,893bc <__floatsidf+0xbc>
   89378:	0027883a 	mov	r19,zero
   8937c:	2025883a 	mov	r18,r4
   89380:	d9000315 	stw	r4,12(sp)
   89384:	dcc00415 	stw	r19,16(sp)
   89388:	008990c0 	call	8990c <__clzsi2>
   8938c:	11000744 	addi	r4,r2,29
   89390:	013fe80e 	bge	zero,r4,89334 <__floatsidf+0x34>
   89394:	10bfff44 	addi	r2,r2,-3
   89398:	10000c16 	blt	r2,zero,893cc <__floatsidf+0xcc>
   8939c:	90a2983a 	sll	r17,r18,r2
   893a0:	0021883a 	mov	r16,zero
   893a4:	d8800217 	ldw	r2,8(sp)
   893a8:	dc400415 	stw	r17,16(sp)
   893ac:	dc000315 	stw	r16,12(sp)
   893b0:	1105c83a 	sub	r2,r2,r4
   893b4:	d8800215 	stw	r2,8(sp)
   893b8:	003fde06 	br	89334 <__floatsidf+0x34>
   893bc:	00a00034 	movhi	r2,32768
   893c0:	20800a26 	beq	r4,r2,893ec <__floatsidf+0xec>
   893c4:	0109c83a 	sub	r4,zero,r4
   893c8:	003feb06 	br	89378 <__floatsidf+0x78>
   893cc:	9006d07a 	srli	r3,r18,1
   893d0:	008007c4 	movi	r2,31
   893d4:	1105c83a 	sub	r2,r2,r4
   893d8:	1886d83a 	srl	r3,r3,r2
   893dc:	9922983a 	sll	r17,r19,r4
   893e0:	9120983a 	sll	r16,r18,r4
   893e4:	1c62b03a 	or	r17,r3,r17
   893e8:	003fee06 	br	893a4 <__floatsidf+0xa4>
   893ec:	0009883a 	mov	r4,zero
   893f0:	01707834 	movhi	r5,49632
   893f4:	003fd306 	br	89344 <__floatsidf+0x44>

000893f8 <__fixdfsi>:
   893f8:	defff804 	addi	sp,sp,-32
   893fc:	2005883a 	mov	r2,r4
   89400:	2807883a 	mov	r3,r5
   89404:	d809883a 	mov	r4,sp
   89408:	d9400204 	addi	r5,sp,8
   8940c:	d8c00115 	stw	r3,4(sp)
   89410:	d8800015 	stw	r2,0(sp)
   89414:	dfc00715 	stw	ra,28(sp)
   89418:	0089ca00 	call	89ca0 <__unpack_d>
   8941c:	d8c00217 	ldw	r3,8(sp)
   89420:	00800084 	movi	r2,2
   89424:	1880051e 	bne	r3,r2,8943c <__fixdfsi+0x44>
   89428:	0007883a 	mov	r3,zero
   8942c:	1805883a 	mov	r2,r3
   89430:	dfc00717 	ldw	ra,28(sp)
   89434:	dec00804 	addi	sp,sp,32
   89438:	f800283a 	ret
   8943c:	00800044 	movi	r2,1
   89440:	10fff92e 	bgeu	r2,r3,89428 <__fixdfsi+0x30>
   89444:	00800104 	movi	r2,4
   89448:	18800426 	beq	r3,r2,8945c <__fixdfsi+0x64>
   8944c:	d8c00417 	ldw	r3,16(sp)
   89450:	183ff516 	blt	r3,zero,89428 <__fixdfsi+0x30>
   89454:	00800784 	movi	r2,30
   89458:	10c0080e 	bge	r2,r3,8947c <__fixdfsi+0x84>
   8945c:	d8800317 	ldw	r2,12(sp)
   89460:	1000121e 	bne	r2,zero,894ac <__fixdfsi+0xb4>
   89464:	00e00034 	movhi	r3,32768
   89468:	18ffffc4 	addi	r3,r3,-1
   8946c:	1805883a 	mov	r2,r3
   89470:	dfc00717 	ldw	ra,28(sp)
   89474:	dec00804 	addi	sp,sp,32
   89478:	f800283a 	ret
   8947c:	00800f04 	movi	r2,60
   89480:	10d1c83a 	sub	r8,r2,r3
   89484:	40bff804 	addi	r2,r8,-32
   89488:	d9800517 	ldw	r6,20(sp)
   8948c:	d9c00617 	ldw	r7,24(sp)
   89490:	10000816 	blt	r2,zero,894b4 <__fixdfsi+0xbc>
   89494:	3888d83a 	srl	r4,r7,r2
   89498:	d8800317 	ldw	r2,12(sp)
   8949c:	2007883a 	mov	r3,r4
   894a0:	103fe226 	beq	r2,zero,8942c <__fixdfsi+0x34>
   894a4:	0107c83a 	sub	r3,zero,r4
   894a8:	003fe006 	br	8942c <__fixdfsi+0x34>
   894ac:	00e00034 	movhi	r3,32768
   894b0:	003fde06 	br	8942c <__fixdfsi+0x34>
   894b4:	39c7883a 	add	r3,r7,r7
   894b8:	008007c4 	movi	r2,31
   894bc:	1205c83a 	sub	r2,r2,r8
   894c0:	1886983a 	sll	r3,r3,r2
   894c4:	3208d83a 	srl	r4,r6,r8
   894c8:	1908b03a 	or	r4,r3,r4
   894cc:	003ff206 	br	89498 <__fixdfsi+0xa0>

000894d0 <__floatunsidf>:
   894d0:	defff204 	addi	sp,sp,-56
   894d4:	dfc00d15 	stw	ra,52(sp)
   894d8:	ddc00c15 	stw	r23,48(sp)
   894dc:	dd800b15 	stw	r22,44(sp)
   894e0:	dd400a15 	stw	r21,40(sp)
   894e4:	dd000915 	stw	r20,36(sp)
   894e8:	dcc00815 	stw	r19,32(sp)
   894ec:	dc800715 	stw	r18,28(sp)
   894f0:	dc400615 	stw	r17,24(sp)
   894f4:	dc000515 	stw	r16,20(sp)
   894f8:	d8000115 	stw	zero,4(sp)
   894fc:	20000f1e 	bne	r4,zero,8953c <__floatunsidf+0x6c>
   89500:	00800084 	movi	r2,2
   89504:	d8800015 	stw	r2,0(sp)
   89508:	d809883a 	mov	r4,sp
   8950c:	008998c0 	call	8998c <__pack_d>
   89510:	dfc00d17 	ldw	ra,52(sp)
   89514:	ddc00c17 	ldw	r23,48(sp)
   89518:	dd800b17 	ldw	r22,44(sp)
   8951c:	dd400a17 	ldw	r21,40(sp)
   89520:	dd000917 	ldw	r20,36(sp)
   89524:	dcc00817 	ldw	r19,32(sp)
   89528:	dc800717 	ldw	r18,28(sp)
   8952c:	dc400617 	ldw	r17,24(sp)
   89530:	dc000517 	ldw	r16,20(sp)
   89534:	dec00e04 	addi	sp,sp,56
   89538:	f800283a 	ret
   8953c:	008000c4 	movi	r2,3
   89540:	00c00f04 	movi	r3,60
   89544:	002f883a 	mov	r23,zero
   89548:	202d883a 	mov	r22,r4
   8954c:	d8800015 	stw	r2,0(sp)
   89550:	d8c00215 	stw	r3,8(sp)
   89554:	d9000315 	stw	r4,12(sp)
   89558:	ddc00415 	stw	r23,16(sp)
   8955c:	008990c0 	call	8990c <__clzsi2>
   89560:	12400744 	addi	r9,r2,29
   89564:	48000b16 	blt	r9,zero,89594 <__floatunsidf+0xc4>
   89568:	483fe726 	beq	r9,zero,89508 <__floatunsidf+0x38>
   8956c:	10bfff44 	addi	r2,r2,-3
   89570:	10002e16 	blt	r2,zero,8962c <__floatunsidf+0x15c>
   89574:	b0a2983a 	sll	r17,r22,r2
   89578:	0021883a 	mov	r16,zero
   8957c:	d8800217 	ldw	r2,8(sp)
   89580:	dc400415 	stw	r17,16(sp)
   89584:	dc000315 	stw	r16,12(sp)
   89588:	1245c83a 	sub	r2,r2,r9
   8958c:	d8800215 	stw	r2,8(sp)
   89590:	003fdd06 	br	89508 <__floatunsidf+0x38>
   89594:	0255c83a 	sub	r10,zero,r9
   89598:	51bff804 	addi	r6,r10,-32
   8959c:	30001b16 	blt	r6,zero,8960c <__floatunsidf+0x13c>
   895a0:	b9a8d83a 	srl	r20,r23,r6
   895a4:	002b883a 	mov	r21,zero
   895a8:	000f883a 	mov	r7,zero
   895ac:	01000044 	movi	r4,1
   895b0:	0011883a 	mov	r8,zero
   895b4:	30002516 	blt	r6,zero,8964c <__floatunsidf+0x17c>
   895b8:	21a6983a 	sll	r19,r4,r6
   895bc:	0025883a 	mov	r18,zero
   895c0:	00bfffc4 	movi	r2,-1
   895c4:	9089883a 	add	r4,r18,r2
   895c8:	988b883a 	add	r5,r19,r2
   895cc:	248d803a 	cmpltu	r6,r4,r18
   895d0:	314b883a 	add	r5,r6,r5
   895d4:	b104703a 	and	r2,r22,r4
   895d8:	b946703a 	and	r3,r23,r5
   895dc:	10c4b03a 	or	r2,r2,r3
   895e0:	10000226 	beq	r2,zero,895ec <__floatunsidf+0x11c>
   895e4:	01c00044 	movi	r7,1
   895e8:	0011883a 	mov	r8,zero
   895ec:	d9000217 	ldw	r4,8(sp)
   895f0:	a1c4b03a 	or	r2,r20,r7
   895f4:	aa06b03a 	or	r3,r21,r8
   895f8:	2249c83a 	sub	r4,r4,r9
   895fc:	d8c00415 	stw	r3,16(sp)
   89600:	d9000215 	stw	r4,8(sp)
   89604:	d8800315 	stw	r2,12(sp)
   89608:	003fbf06 	br	89508 <__floatunsidf+0x38>
   8960c:	bdc7883a 	add	r3,r23,r23
   89610:	008007c4 	movi	r2,31
   89614:	1285c83a 	sub	r2,r2,r10
   89618:	1886983a 	sll	r3,r3,r2
   8961c:	b2a8d83a 	srl	r20,r22,r10
   89620:	baaad83a 	srl	r21,r23,r10
   89624:	1d28b03a 	or	r20,r3,r20
   89628:	003fdf06 	br	895a8 <__floatunsidf+0xd8>
   8962c:	b006d07a 	srli	r3,r22,1
   89630:	008007c4 	movi	r2,31
   89634:	1245c83a 	sub	r2,r2,r9
   89638:	1886d83a 	srl	r3,r3,r2
   8963c:	ba62983a 	sll	r17,r23,r9
   89640:	b260983a 	sll	r16,r22,r9
   89644:	1c62b03a 	or	r17,r3,r17
   89648:	003fcc06 	br	8957c <__floatunsidf+0xac>
   8964c:	2006d07a 	srli	r3,r4,1
   89650:	008007c4 	movi	r2,31
   89654:	1285c83a 	sub	r2,r2,r10
   89658:	18a6d83a 	srl	r19,r3,r2
   8965c:	22a4983a 	sll	r18,r4,r10
   89660:	003fd706 	br	895c0 <__floatunsidf+0xf0>

00089664 <udivmodsi4>:
   89664:	29001b2e 	bgeu	r5,r4,896d4 <udivmodsi4+0x70>
   89668:	28001a16 	blt	r5,zero,896d4 <udivmodsi4+0x70>
   8966c:	00800044 	movi	r2,1
   89670:	0007883a 	mov	r3,zero
   89674:	01c007c4 	movi	r7,31
   89678:	00000306 	br	89688 <udivmodsi4+0x24>
   8967c:	19c01326 	beq	r3,r7,896cc <udivmodsi4+0x68>
   89680:	18c00044 	addi	r3,r3,1
   89684:	28000416 	blt	r5,zero,89698 <udivmodsi4+0x34>
   89688:	294b883a 	add	r5,r5,r5
   8968c:	1085883a 	add	r2,r2,r2
   89690:	293ffa36 	bltu	r5,r4,8967c <udivmodsi4+0x18>
   89694:	10000d26 	beq	r2,zero,896cc <udivmodsi4+0x68>
   89698:	0007883a 	mov	r3,zero
   8969c:	21400236 	bltu	r4,r5,896a8 <udivmodsi4+0x44>
   896a0:	2149c83a 	sub	r4,r4,r5
   896a4:	1886b03a 	or	r3,r3,r2
   896a8:	1004d07a 	srli	r2,r2,1
   896ac:	280ad07a 	srli	r5,r5,1
   896b0:	103ffa1e 	bne	r2,zero,8969c <udivmodsi4+0x38>
   896b4:	30000226 	beq	r6,zero,896c0 <udivmodsi4+0x5c>
   896b8:	2005883a 	mov	r2,r4
   896bc:	f800283a 	ret
   896c0:	1809883a 	mov	r4,r3
   896c4:	2005883a 	mov	r2,r4
   896c8:	f800283a 	ret
   896cc:	0007883a 	mov	r3,zero
   896d0:	003ff806 	br	896b4 <udivmodsi4+0x50>
   896d4:	00800044 	movi	r2,1
   896d8:	0007883a 	mov	r3,zero
   896dc:	003fef06 	br	8969c <udivmodsi4+0x38>

000896e0 <__divsi3>:
   896e0:	defffe04 	addi	sp,sp,-8
   896e4:	dc000015 	stw	r16,0(sp)
   896e8:	dfc00115 	stw	ra,4(sp)
   896ec:	0021883a 	mov	r16,zero
   896f0:	20000c16 	blt	r4,zero,89724 <__divsi3+0x44>
   896f4:	000d883a 	mov	r6,zero
   896f8:	28000e16 	blt	r5,zero,89734 <__divsi3+0x54>
   896fc:	00896640 	call	89664 <udivmodsi4>
   89700:	1007883a 	mov	r3,r2
   89704:	8005003a 	cmpeq	r2,r16,zero
   89708:	1000011e 	bne	r2,zero,89710 <__divsi3+0x30>
   8970c:	00c7c83a 	sub	r3,zero,r3
   89710:	1805883a 	mov	r2,r3
   89714:	dfc00117 	ldw	ra,4(sp)
   89718:	dc000017 	ldw	r16,0(sp)
   8971c:	dec00204 	addi	sp,sp,8
   89720:	f800283a 	ret
   89724:	0109c83a 	sub	r4,zero,r4
   89728:	04000044 	movi	r16,1
   8972c:	000d883a 	mov	r6,zero
   89730:	283ff20e 	bge	r5,zero,896fc <__divsi3+0x1c>
   89734:	014bc83a 	sub	r5,zero,r5
   89738:	8021003a 	cmpeq	r16,r16,zero
   8973c:	003fef06 	br	896fc <__divsi3+0x1c>

00089740 <__modsi3>:
   89740:	deffff04 	addi	sp,sp,-4
   89744:	dfc00015 	stw	ra,0(sp)
   89748:	01800044 	movi	r6,1
   8974c:	2807883a 	mov	r3,r5
   89750:	20000416 	blt	r4,zero,89764 <__modsi3+0x24>
   89754:	28000c16 	blt	r5,zero,89788 <__modsi3+0x48>
   89758:	dfc00017 	ldw	ra,0(sp)
   8975c:	dec00104 	addi	sp,sp,4
   89760:	00896641 	jmpi	89664 <udivmodsi4>
   89764:	0109c83a 	sub	r4,zero,r4
   89768:	28000b16 	blt	r5,zero,89798 <__modsi3+0x58>
   8976c:	180b883a 	mov	r5,r3
   89770:	01800044 	movi	r6,1
   89774:	00896640 	call	89664 <udivmodsi4>
   89778:	0085c83a 	sub	r2,zero,r2
   8977c:	dfc00017 	ldw	ra,0(sp)
   89780:	dec00104 	addi	sp,sp,4
   89784:	f800283a 	ret
   89788:	014bc83a 	sub	r5,zero,r5
   8978c:	dfc00017 	ldw	ra,0(sp)
   89790:	dec00104 	addi	sp,sp,4
   89794:	00896641 	jmpi	89664 <udivmodsi4>
   89798:	0147c83a 	sub	r3,zero,r5
   8979c:	003ff306 	br	8976c <__modsi3+0x2c>

000897a0 <__udivsi3>:
   897a0:	000d883a 	mov	r6,zero
   897a4:	00896641 	jmpi	89664 <udivmodsi4>

000897a8 <__umodsi3>:
   897a8:	01800044 	movi	r6,1
   897ac:	00896641 	jmpi	89664 <udivmodsi4>

000897b0 <__mulsi3>:
   897b0:	20000a26 	beq	r4,zero,897dc <__mulsi3+0x2c>
   897b4:	0007883a 	mov	r3,zero
   897b8:	2080004c 	andi	r2,r4,1
   897bc:	1005003a 	cmpeq	r2,r2,zero
   897c0:	2008d07a 	srli	r4,r4,1
   897c4:	1000011e 	bne	r2,zero,897cc <__mulsi3+0x1c>
   897c8:	1947883a 	add	r3,r3,r5
   897cc:	294b883a 	add	r5,r5,r5
   897d0:	203ff91e 	bne	r4,zero,897b8 <__mulsi3+0x8>
   897d4:	1805883a 	mov	r2,r3
   897d8:	f800283a 	ret
   897dc:	0007883a 	mov	r3,zero
   897e0:	1805883a 	mov	r2,r3
   897e4:	f800283a 	ret

000897e8 <__muldi3>:
   897e8:	defff204 	addi	sp,sp,-56
   897ec:	df000c15 	stw	fp,48(sp)
   897f0:	3038d43a 	srli	fp,r6,16
   897f4:	dd000815 	stw	r20,32(sp)
   897f8:	dc400515 	stw	r17,20(sp)
   897fc:	2028d43a 	srli	r20,r4,16
   89800:	247fffcc 	andi	r17,r4,65535
   89804:	dc000415 	stw	r16,16(sp)
   89808:	343fffcc 	andi	r16,r6,65535
   8980c:	dcc00715 	stw	r19,28(sp)
   89810:	d9000015 	stw	r4,0(sp)
   89814:	2827883a 	mov	r19,r5
   89818:	8809883a 	mov	r4,r17
   8981c:	d9400115 	stw	r5,4(sp)
   89820:	800b883a 	mov	r5,r16
   89824:	d9800215 	stw	r6,8(sp)
   89828:	dfc00d15 	stw	ra,52(sp)
   8982c:	d9c00315 	stw	r7,12(sp)
   89830:	dd800a15 	stw	r22,40(sp)
   89834:	dd400915 	stw	r21,36(sp)
   89838:	302d883a 	mov	r22,r6
   8983c:	ddc00b15 	stw	r23,44(sp)
   89840:	dc800615 	stw	r18,24(sp)
   89844:	00897b00 	call	897b0 <__mulsi3>
   89848:	8809883a 	mov	r4,r17
   8984c:	e00b883a 	mov	r5,fp
   89850:	102b883a 	mov	r21,r2
   89854:	00897b00 	call	897b0 <__mulsi3>
   89858:	800b883a 	mov	r5,r16
   8985c:	a009883a 	mov	r4,r20
   89860:	1023883a 	mov	r17,r2
   89864:	00897b00 	call	897b0 <__mulsi3>
   89868:	a009883a 	mov	r4,r20
   8986c:	e00b883a 	mov	r5,fp
   89870:	1021883a 	mov	r16,r2
   89874:	00897b00 	call	897b0 <__mulsi3>
   89878:	a8ffffcc 	andi	r3,r21,65535
   8987c:	a82ad43a 	srli	r21,r21,16
   89880:	8c23883a 	add	r17,r17,r16
   89884:	1011883a 	mov	r8,r2
   89888:	ac6b883a 	add	r21,r21,r17
   8988c:	a804943a 	slli	r2,r21,16
   89890:	b009883a 	mov	r4,r22
   89894:	980b883a 	mov	r5,r19
   89898:	10c7883a 	add	r3,r2,r3
   8989c:	a812d43a 	srli	r9,r21,16
   898a0:	180d883a 	mov	r6,r3
   898a4:	ac00022e 	bgeu	r21,r16,898b0 <__muldi3+0xc8>
   898a8:	00800074 	movhi	r2,1
   898ac:	4091883a 	add	r8,r8,r2
   898b0:	4267883a 	add	r19,r8,r9
   898b4:	302d883a 	mov	r22,r6
   898b8:	00897b00 	call	897b0 <__mulsi3>
   898bc:	d9400317 	ldw	r5,12(sp)
   898c0:	d9000017 	ldw	r4,0(sp)
   898c4:	1023883a 	mov	r17,r2
   898c8:	00897b00 	call	897b0 <__mulsi3>
   898cc:	14cb883a 	add	r5,r2,r19
   898d0:	894b883a 	add	r5,r17,r5
   898d4:	b005883a 	mov	r2,r22
   898d8:	2807883a 	mov	r3,r5
   898dc:	dfc00d17 	ldw	ra,52(sp)
   898e0:	df000c17 	ldw	fp,48(sp)
   898e4:	ddc00b17 	ldw	r23,44(sp)
   898e8:	dd800a17 	ldw	r22,40(sp)
   898ec:	dd400917 	ldw	r21,36(sp)
   898f0:	dd000817 	ldw	r20,32(sp)
   898f4:	dcc00717 	ldw	r19,28(sp)
   898f8:	dc800617 	ldw	r18,24(sp)
   898fc:	dc400517 	ldw	r17,20(sp)
   89900:	dc000417 	ldw	r16,16(sp)
   89904:	dec00e04 	addi	sp,sp,56
   89908:	f800283a 	ret

0008990c <__clzsi2>:
   8990c:	00bfffd4 	movui	r2,65535
   89910:	11000e36 	bltu	r2,r4,8994c <__clzsi2+0x40>
   89914:	00803fc4 	movi	r2,255
   89918:	01400204 	movi	r5,8
   8991c:	0007883a 	mov	r3,zero
   89920:	11001036 	bltu	r2,r4,89964 <__clzsi2+0x58>
   89924:	000b883a 	mov	r5,zero
   89928:	20c6d83a 	srl	r3,r4,r3
   8992c:	00800274 	movhi	r2,9
   89930:	10b31604 	addi	r2,r2,-13224
   89934:	1887883a 	add	r3,r3,r2
   89938:	18800003 	ldbu	r2,0(r3)
   8993c:	00c00804 	movi	r3,32
   89940:	2885883a 	add	r2,r5,r2
   89944:	1885c83a 	sub	r2,r3,r2
   89948:	f800283a 	ret
   8994c:	01400404 	movi	r5,16
   89950:	00804034 	movhi	r2,256
   89954:	10bfffc4 	addi	r2,r2,-1
   89958:	2807883a 	mov	r3,r5
   8995c:	113ff22e 	bgeu	r2,r4,89928 <__clzsi2+0x1c>
   89960:	01400604 	movi	r5,24
   89964:	2807883a 	mov	r3,r5
   89968:	20c6d83a 	srl	r3,r4,r3
   8996c:	00800274 	movhi	r2,9
   89970:	10b31604 	addi	r2,r2,-13224
   89974:	1887883a 	add	r3,r3,r2
   89978:	18800003 	ldbu	r2,0(r3)
   8997c:	00c00804 	movi	r3,32
   89980:	2885883a 	add	r2,r5,r2
   89984:	1885c83a 	sub	r2,r3,r2
   89988:	f800283a 	ret

0008998c <__pack_d>:
   8998c:	20c00017 	ldw	r3,0(r4)
   89990:	defffd04 	addi	sp,sp,-12
   89994:	dc000015 	stw	r16,0(sp)
   89998:	dc800215 	stw	r18,8(sp)
   8999c:	dc400115 	stw	r17,4(sp)
   899a0:	00800044 	movi	r2,1
   899a4:	22000317 	ldw	r8,12(r4)
   899a8:	001f883a 	mov	r15,zero
   899ac:	22400417 	ldw	r9,16(r4)
   899b0:	24000117 	ldw	r16,4(r4)
   899b4:	10c0552e 	bgeu	r2,r3,89b0c <__pack_d+0x180>
   899b8:	00800104 	movi	r2,4
   899bc:	18804f26 	beq	r3,r2,89afc <__pack_d+0x170>
   899c0:	00800084 	movi	r2,2
   899c4:	18800226 	beq	r3,r2,899d0 <__pack_d+0x44>
   899c8:	4244b03a 	or	r2,r8,r9
   899cc:	10001a1e 	bne	r2,zero,89a38 <__pack_d+0xac>
   899d0:	000d883a 	mov	r6,zero
   899d4:	000f883a 	mov	r7,zero
   899d8:	0011883a 	mov	r8,zero
   899dc:	00800434 	movhi	r2,16
   899e0:	10bfffc4 	addi	r2,r2,-1
   899e4:	301d883a 	mov	r14,r6
   899e8:	3884703a 	and	r2,r7,r2
   899ec:	400a953a 	slli	r5,r8,20
   899f0:	79bffc2c 	andhi	r6,r15,65520
   899f4:	308cb03a 	or	r6,r6,r2
   899f8:	00e00434 	movhi	r3,32784
   899fc:	18ffffc4 	addi	r3,r3,-1
   89a00:	800497fa 	slli	r2,r16,31
   89a04:	30c6703a 	and	r3,r6,r3
   89a08:	1946b03a 	or	r3,r3,r5
   89a0c:	01600034 	movhi	r5,32768
   89a10:	297fffc4 	addi	r5,r5,-1
   89a14:	194a703a 	and	r5,r3,r5
   89a18:	288ab03a 	or	r5,r5,r2
   89a1c:	2807883a 	mov	r3,r5
   89a20:	7005883a 	mov	r2,r14
   89a24:	dc800217 	ldw	r18,8(sp)
   89a28:	dc400117 	ldw	r17,4(sp)
   89a2c:	dc000017 	ldw	r16,0(sp)
   89a30:	dec00304 	addi	sp,sp,12
   89a34:	f800283a 	ret
   89a38:	21000217 	ldw	r4,8(r4)
   89a3c:	00bf0084 	movi	r2,-1022
   89a40:	20803f16 	blt	r4,r2,89b40 <__pack_d+0x1b4>
   89a44:	0080ffc4 	movi	r2,1023
   89a48:	11002c16 	blt	r2,r4,89afc <__pack_d+0x170>
   89a4c:	00803fc4 	movi	r2,255
   89a50:	408c703a 	and	r6,r8,r2
   89a54:	00802004 	movi	r2,128
   89a58:	0007883a 	mov	r3,zero
   89a5c:	000f883a 	mov	r7,zero
   89a60:	2280ffc4 	addi	r10,r4,1023
   89a64:	30801e26 	beq	r6,r2,89ae0 <__pack_d+0x154>
   89a68:	00801fc4 	movi	r2,127
   89a6c:	4089883a 	add	r4,r8,r2
   89a70:	220d803a 	cmpltu	r6,r4,r8
   89a74:	324d883a 	add	r6,r6,r9
   89a78:	2011883a 	mov	r8,r4
   89a7c:	3013883a 	mov	r9,r6
   89a80:	00880034 	movhi	r2,8192
   89a84:	10bfffc4 	addi	r2,r2,-1
   89a88:	12400d36 	bltu	r2,r9,89ac0 <__pack_d+0x134>
   89a8c:	4804963a 	slli	r2,r9,24
   89a90:	400cd23a 	srli	r6,r8,8
   89a94:	480ed23a 	srli	r7,r9,8
   89a98:	013fffc4 	movi	r4,-1
   89a9c:	118cb03a 	or	r6,r2,r6
   89aa0:	01400434 	movhi	r5,16
   89aa4:	297fffc4 	addi	r5,r5,-1
   89aa8:	3104703a 	and	r2,r6,r4
   89aac:	3946703a 	and	r3,r7,r5
   89ab0:	5201ffcc 	andi	r8,r10,2047
   89ab4:	100d883a 	mov	r6,r2
   89ab8:	180f883a 	mov	r7,r3
   89abc:	003fc706 	br	899dc <__pack_d+0x50>
   89ac0:	480897fa 	slli	r4,r9,31
   89ac4:	4004d07a 	srli	r2,r8,1
   89ac8:	4806d07a 	srli	r3,r9,1
   89acc:	52800044 	addi	r10,r10,1
   89ad0:	2084b03a 	or	r2,r4,r2
   89ad4:	1011883a 	mov	r8,r2
   89ad8:	1813883a 	mov	r9,r3
   89adc:	003feb06 	br	89a8c <__pack_d+0x100>
   89ae0:	383fe11e 	bne	r7,zero,89a68 <__pack_d+0xdc>
   89ae4:	01004004 	movi	r4,256
   89ae8:	4104703a 	and	r2,r8,r4
   89aec:	10c4b03a 	or	r2,r2,r3
   89af0:	103fe326 	beq	r2,zero,89a80 <__pack_d+0xf4>
   89af4:	3005883a 	mov	r2,r6
   89af8:	003fdc06 	br	89a6c <__pack_d+0xe0>
   89afc:	000d883a 	mov	r6,zero
   89b00:	000f883a 	mov	r7,zero
   89b04:	0201ffc4 	movi	r8,2047
   89b08:	003fb406 	br	899dc <__pack_d+0x50>
   89b0c:	0005883a 	mov	r2,zero
   89b10:	00c00234 	movhi	r3,8
   89b14:	408cb03a 	or	r6,r8,r2
   89b18:	48ceb03a 	or	r7,r9,r3
   89b1c:	013fffc4 	movi	r4,-1
   89b20:	01400434 	movhi	r5,16
   89b24:	297fffc4 	addi	r5,r5,-1
   89b28:	3104703a 	and	r2,r6,r4
   89b2c:	3946703a 	and	r3,r7,r5
   89b30:	100d883a 	mov	r6,r2
   89b34:	180f883a 	mov	r7,r3
   89b38:	0201ffc4 	movi	r8,2047
   89b3c:	003fa706 	br	899dc <__pack_d+0x50>
   89b40:	1109c83a 	sub	r4,r2,r4
   89b44:	00800e04 	movi	r2,56
   89b48:	11004316 	blt	r2,r4,89c58 <__pack_d+0x2cc>
   89b4c:	21fff804 	addi	r7,r4,-32
   89b50:	38004516 	blt	r7,zero,89c68 <__pack_d+0x2dc>
   89b54:	49d8d83a 	srl	r12,r9,r7
   89b58:	001b883a 	mov	r13,zero
   89b5c:	0023883a 	mov	r17,zero
   89b60:	01400044 	movi	r5,1
   89b64:	0025883a 	mov	r18,zero
   89b68:	38004716 	blt	r7,zero,89c88 <__pack_d+0x2fc>
   89b6c:	29d6983a 	sll	r11,r5,r7
   89b70:	0015883a 	mov	r10,zero
   89b74:	00bfffc4 	movi	r2,-1
   89b78:	5089883a 	add	r4,r10,r2
   89b7c:	588b883a 	add	r5,r11,r2
   89b80:	228d803a 	cmpltu	r6,r4,r10
   89b84:	314b883a 	add	r5,r6,r5
   89b88:	4104703a 	and	r2,r8,r4
   89b8c:	4946703a 	and	r3,r9,r5
   89b90:	10c4b03a 	or	r2,r2,r3
   89b94:	10000226 	beq	r2,zero,89ba0 <__pack_d+0x214>
   89b98:	04400044 	movi	r17,1
   89b9c:	0025883a 	mov	r18,zero
   89ba0:	00803fc4 	movi	r2,255
   89ba4:	644eb03a 	or	r7,r12,r17
   89ba8:	3892703a 	and	r9,r7,r2
   89bac:	00802004 	movi	r2,128
   89bb0:	6c90b03a 	or	r8,r13,r18
   89bb4:	0015883a 	mov	r10,zero
   89bb8:	48801626 	beq	r9,r2,89c14 <__pack_d+0x288>
   89bbc:	01001fc4 	movi	r4,127
   89bc0:	3905883a 	add	r2,r7,r4
   89bc4:	11cd803a 	cmpltu	r6,r2,r7
   89bc8:	320d883a 	add	r6,r6,r8
   89bcc:	100f883a 	mov	r7,r2
   89bd0:	00840034 	movhi	r2,4096
   89bd4:	10bfffc4 	addi	r2,r2,-1
   89bd8:	3011883a 	mov	r8,r6
   89bdc:	0007883a 	mov	r3,zero
   89be0:	11801b36 	bltu	r2,r6,89c50 <__pack_d+0x2c4>
   89be4:	4004963a 	slli	r2,r8,24
   89be8:	3808d23a 	srli	r4,r7,8
   89bec:	400ad23a 	srli	r5,r8,8
   89bf0:	1813883a 	mov	r9,r3
   89bf4:	1108b03a 	or	r4,r2,r4
   89bf8:	00bfffc4 	movi	r2,-1
   89bfc:	00c00434 	movhi	r3,16
   89c00:	18ffffc4 	addi	r3,r3,-1
   89c04:	208c703a 	and	r6,r4,r2
   89c08:	28ce703a 	and	r7,r5,r3
   89c0c:	4a01ffcc 	andi	r8,r9,2047
   89c10:	003f7206 	br	899dc <__pack_d+0x50>
   89c14:	503fe91e 	bne	r10,zero,89bbc <__pack_d+0x230>
   89c18:	01004004 	movi	r4,256
   89c1c:	3904703a 	and	r2,r7,r4
   89c20:	0007883a 	mov	r3,zero
   89c24:	10c4b03a 	or	r2,r2,r3
   89c28:	10000626 	beq	r2,zero,89c44 <__pack_d+0x2b8>
   89c2c:	3a45883a 	add	r2,r7,r9
   89c30:	11cd803a 	cmpltu	r6,r2,r7
   89c34:	320d883a 	add	r6,r6,r8
   89c38:	100f883a 	mov	r7,r2
   89c3c:	3011883a 	mov	r8,r6
   89c40:	0007883a 	mov	r3,zero
   89c44:	00840034 	movhi	r2,4096
   89c48:	10bfffc4 	addi	r2,r2,-1
   89c4c:	123fe52e 	bgeu	r2,r8,89be4 <__pack_d+0x258>
   89c50:	00c00044 	movi	r3,1
   89c54:	003fe306 	br	89be4 <__pack_d+0x258>
   89c58:	0009883a 	mov	r4,zero
   89c5c:	0013883a 	mov	r9,zero
   89c60:	000b883a 	mov	r5,zero
   89c64:	003fe406 	br	89bf8 <__pack_d+0x26c>
   89c68:	4a47883a 	add	r3,r9,r9
   89c6c:	008007c4 	movi	r2,31
   89c70:	1105c83a 	sub	r2,r2,r4
   89c74:	1886983a 	sll	r3,r3,r2
   89c78:	4118d83a 	srl	r12,r8,r4
   89c7c:	491ad83a 	srl	r13,r9,r4
   89c80:	1b18b03a 	or	r12,r3,r12
   89c84:	003fb506 	br	89b5c <__pack_d+0x1d0>
   89c88:	2806d07a 	srli	r3,r5,1
   89c8c:	008007c4 	movi	r2,31
   89c90:	1105c83a 	sub	r2,r2,r4
   89c94:	1896d83a 	srl	r11,r3,r2
   89c98:	2914983a 	sll	r10,r5,r4
   89c9c:	003fb506 	br	89b74 <__pack_d+0x1e8>

00089ca0 <__unpack_d>:
   89ca0:	20c00117 	ldw	r3,4(r4)
   89ca4:	22400017 	ldw	r9,0(r4)
   89ca8:	00800434 	movhi	r2,16
   89cac:	10bfffc4 	addi	r2,r2,-1
   89cb0:	1808d53a 	srli	r4,r3,20
   89cb4:	180cd7fa 	srli	r6,r3,31
   89cb8:	1894703a 	and	r10,r3,r2
   89cbc:	2201ffcc 	andi	r8,r4,2047
   89cc0:	281b883a 	mov	r13,r5
   89cc4:	4817883a 	mov	r11,r9
   89cc8:	29800115 	stw	r6,4(r5)
   89ccc:	5019883a 	mov	r12,r10
   89cd0:	40001e1e 	bne	r8,zero,89d4c <__unpack_d+0xac>
   89cd4:	4a84b03a 	or	r2,r9,r10
   89cd8:	10001926 	beq	r2,zero,89d40 <__unpack_d+0xa0>
   89cdc:	4804d63a 	srli	r2,r9,24
   89ce0:	500c923a 	slli	r6,r10,8
   89ce4:	013f0084 	movi	r4,-1022
   89ce8:	00c40034 	movhi	r3,4096
   89cec:	18ffffc4 	addi	r3,r3,-1
   89cf0:	118cb03a 	or	r6,r2,r6
   89cf4:	008000c4 	movi	r2,3
   89cf8:	480a923a 	slli	r5,r9,8
   89cfc:	68800015 	stw	r2,0(r13)
   89d00:	69000215 	stw	r4,8(r13)
   89d04:	19800b36 	bltu	r3,r6,89d34 <__unpack_d+0x94>
   89d08:	200f883a 	mov	r7,r4
   89d0c:	1811883a 	mov	r8,r3
   89d10:	2945883a 	add	r2,r5,r5
   89d14:	1149803a 	cmpltu	r4,r2,r5
   89d18:	3187883a 	add	r3,r6,r6
   89d1c:	20c9883a 	add	r4,r4,r3
   89d20:	100b883a 	mov	r5,r2
   89d24:	200d883a 	mov	r6,r4
   89d28:	39ffffc4 	addi	r7,r7,-1
   89d2c:	413ff82e 	bgeu	r8,r4,89d10 <__unpack_d+0x70>
   89d30:	69c00215 	stw	r7,8(r13)
   89d34:	69800415 	stw	r6,16(r13)
   89d38:	69400315 	stw	r5,12(r13)
   89d3c:	f800283a 	ret
   89d40:	00800084 	movi	r2,2
   89d44:	28800015 	stw	r2,0(r5)
   89d48:	f800283a 	ret
   89d4c:	0081ffc4 	movi	r2,2047
   89d50:	40800f26 	beq	r8,r2,89d90 <__unpack_d+0xf0>
   89d54:	480cd63a 	srli	r6,r9,24
   89d58:	5006923a 	slli	r3,r10,8
   89d5c:	4804923a 	slli	r2,r9,8
   89d60:	0009883a 	mov	r4,zero
   89d64:	30c6b03a 	or	r3,r6,r3
   89d68:	01440034 	movhi	r5,4096
   89d6c:	110cb03a 	or	r6,r2,r4
   89d70:	423f0044 	addi	r8,r8,-1023
   89d74:	194eb03a 	or	r7,r3,r5
   89d78:	008000c4 	movi	r2,3
   89d7c:	69c00415 	stw	r7,16(r13)
   89d80:	6a000215 	stw	r8,8(r13)
   89d84:	68800015 	stw	r2,0(r13)
   89d88:	69800315 	stw	r6,12(r13)
   89d8c:	f800283a 	ret
   89d90:	4a84b03a 	or	r2,r9,r10
   89d94:	1000031e 	bne	r2,zero,89da4 <__unpack_d+0x104>
   89d98:	00800104 	movi	r2,4
   89d9c:	28800015 	stw	r2,0(r5)
   89da0:	f800283a 	ret
   89da4:	0009883a 	mov	r4,zero
   89da8:	01400234 	movhi	r5,8
   89dac:	4904703a 	and	r2,r9,r4
   89db0:	5146703a 	and	r3,r10,r5
   89db4:	10c4b03a 	or	r2,r2,r3
   89db8:	10000526 	beq	r2,zero,89dd0 <__unpack_d+0x130>
   89dbc:	00800044 	movi	r2,1
   89dc0:	68800015 	stw	r2,0(r13)
   89dc4:	6b000415 	stw	r12,16(r13)
   89dc8:	6ac00315 	stw	r11,12(r13)
   89dcc:	f800283a 	ret
   89dd0:	68000015 	stw	zero,0(r13)
   89dd4:	003ffb06 	br	89dc4 <__unpack_d+0x124>

00089dd8 <__fpcmp_parts_d>:
   89dd8:	21800017 	ldw	r6,0(r4)
   89ddc:	00c00044 	movi	r3,1
   89de0:	19800a2e 	bgeu	r3,r6,89e0c <__fpcmp_parts_d+0x34>
   89de4:	28800017 	ldw	r2,0(r5)
   89de8:	1880082e 	bgeu	r3,r2,89e0c <__fpcmp_parts_d+0x34>
   89dec:	00c00104 	movi	r3,4
   89df0:	30c02626 	beq	r6,r3,89e8c <__fpcmp_parts_d+0xb4>
   89df4:	10c02226 	beq	r2,r3,89e80 <__fpcmp_parts_d+0xa8>
   89df8:	00c00084 	movi	r3,2
   89dfc:	30c00526 	beq	r6,r3,89e14 <__fpcmp_parts_d+0x3c>
   89e00:	10c0071e 	bne	r2,r3,89e20 <__fpcmp_parts_d+0x48>
   89e04:	20800117 	ldw	r2,4(r4)
   89e08:	1000091e 	bne	r2,zero,89e30 <__fpcmp_parts_d+0x58>
   89e0c:	00800044 	movi	r2,1
   89e10:	f800283a 	ret
   89e14:	10c01a1e 	bne	r2,r3,89e80 <__fpcmp_parts_d+0xa8>
   89e18:	0005883a 	mov	r2,zero
   89e1c:	f800283a 	ret
   89e20:	22000117 	ldw	r8,4(r4)
   89e24:	28800117 	ldw	r2,4(r5)
   89e28:	40800326 	beq	r8,r2,89e38 <__fpcmp_parts_d+0x60>
   89e2c:	403ff726 	beq	r8,zero,89e0c <__fpcmp_parts_d+0x34>
   89e30:	00bfffc4 	movi	r2,-1
   89e34:	f800283a 	ret
   89e38:	20c00217 	ldw	r3,8(r4)
   89e3c:	28800217 	ldw	r2,8(r5)
   89e40:	10fffa16 	blt	r2,r3,89e2c <__fpcmp_parts_d+0x54>
   89e44:	18800916 	blt	r3,r2,89e6c <__fpcmp_parts_d+0x94>
   89e48:	21c00417 	ldw	r7,16(r4)
   89e4c:	28c00417 	ldw	r3,16(r5)
   89e50:	21800317 	ldw	r6,12(r4)
   89e54:	28800317 	ldw	r2,12(r5)
   89e58:	19fff436 	bltu	r3,r7,89e2c <__fpcmp_parts_d+0x54>
   89e5c:	38c00526 	beq	r7,r3,89e74 <__fpcmp_parts_d+0x9c>
   89e60:	38c00236 	bltu	r7,r3,89e6c <__fpcmp_parts_d+0x94>
   89e64:	19ffec1e 	bne	r3,r7,89e18 <__fpcmp_parts_d+0x40>
   89e68:	30bfeb2e 	bgeu	r6,r2,89e18 <__fpcmp_parts_d+0x40>
   89e6c:	403fe71e 	bne	r8,zero,89e0c <__fpcmp_parts_d+0x34>
   89e70:	003fef06 	br	89e30 <__fpcmp_parts_d+0x58>
   89e74:	11bffa2e 	bgeu	r2,r6,89e60 <__fpcmp_parts_d+0x88>
   89e78:	403fe426 	beq	r8,zero,89e0c <__fpcmp_parts_d+0x34>
   89e7c:	003fec06 	br	89e30 <__fpcmp_parts_d+0x58>
   89e80:	28800117 	ldw	r2,4(r5)
   89e84:	103fe11e 	bne	r2,zero,89e0c <__fpcmp_parts_d+0x34>
   89e88:	003fe906 	br	89e30 <__fpcmp_parts_d+0x58>
   89e8c:	11bfdd1e 	bne	r2,r6,89e04 <__fpcmp_parts_d+0x2c>
   89e90:	28c00117 	ldw	r3,4(r5)
   89e94:	20800117 	ldw	r2,4(r4)
   89e98:	1885c83a 	sub	r2,r3,r2
   89e9c:	f800283a 	ret

00089ea0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   89ea0:	defff804 	addi	sp,sp,-32
   89ea4:	dfc00715 	stw	ra,28(sp)
   89ea8:	df000615 	stw	fp,24(sp)
   89eac:	df000604 	addi	fp,sp,24
   89eb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   89eb4:	e0bffc17 	ldw	r2,-16(fp)
   89eb8:	1004803a 	cmplt	r2,r2,zero
   89ebc:	1000091e 	bne	r2,zero,89ee4 <close+0x44>
   89ec0:	e13ffc17 	ldw	r4,-16(fp)
   89ec4:	01400304 	movi	r5,12
   89ec8:	00897b00 	call	897b0 <__mulsi3>
   89ecc:	1007883a 	mov	r3,r2
   89ed0:	00800274 	movhi	r2,9
   89ed4:	10b57204 	addi	r2,r2,-10808
   89ed8:	1887883a 	add	r3,r3,r2
   89edc:	e0ffff15 	stw	r3,-4(fp)
   89ee0:	00000106 	br	89ee8 <close+0x48>
   89ee4:	e03fff15 	stw	zero,-4(fp)
   89ee8:	e0bfff17 	ldw	r2,-4(fp)
   89eec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   89ef0:	e0bffb17 	ldw	r2,-20(fp)
   89ef4:	1005003a 	cmpeq	r2,r2,zero
   89ef8:	10001d1e 	bne	r2,zero,89f70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   89efc:	e0bffb17 	ldw	r2,-20(fp)
   89f00:	10800017 	ldw	r2,0(r2)
   89f04:	10800417 	ldw	r2,16(r2)
   89f08:	1005003a 	cmpeq	r2,r2,zero
   89f0c:	1000071e 	bne	r2,zero,89f2c <close+0x8c>
   89f10:	e0bffb17 	ldw	r2,-20(fp)
   89f14:	10800017 	ldw	r2,0(r2)
   89f18:	10800417 	ldw	r2,16(r2)
   89f1c:	e13ffb17 	ldw	r4,-20(fp)
   89f20:	103ee83a 	callr	r2
   89f24:	e0bffe15 	stw	r2,-8(fp)
   89f28:	00000106 	br	89f30 <close+0x90>
   89f2c:	e03ffe15 	stw	zero,-8(fp)
   89f30:	e0bffe17 	ldw	r2,-8(fp)
   89f34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   89f38:	e13ffc17 	ldw	r4,-16(fp)
   89f3c:	008a7380 	call	8a738 <alt_release_fd>
    if (rval < 0)
   89f40:	e0bffa17 	ldw	r2,-24(fp)
   89f44:	1004403a 	cmpge	r2,r2,zero
   89f48:	1000071e 	bne	r2,zero,89f68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   89f4c:	0089fa00 	call	89fa0 <alt_get_errno>
   89f50:	e0fffa17 	ldw	r3,-24(fp)
   89f54:	00c7c83a 	sub	r3,zero,r3
   89f58:	10c00015 	stw	r3,0(r2)
      return -1;
   89f5c:	00bfffc4 	movi	r2,-1
   89f60:	e0bffd15 	stw	r2,-12(fp)
   89f64:	00000806 	br	89f88 <close+0xe8>
    }
    return 0;
   89f68:	e03ffd15 	stw	zero,-12(fp)
   89f6c:	00000606 	br	89f88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   89f70:	0089fa00 	call	89fa0 <alt_get_errno>
   89f74:	1007883a 	mov	r3,r2
   89f78:	00801444 	movi	r2,81
   89f7c:	18800015 	stw	r2,0(r3)
    return -1;
   89f80:	00bfffc4 	movi	r2,-1
   89f84:	e0bffd15 	stw	r2,-12(fp)
   89f88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   89f8c:	e037883a 	mov	sp,fp
   89f90:	dfc00117 	ldw	ra,4(sp)
   89f94:	df000017 	ldw	fp,0(sp)
   89f98:	dec00204 	addi	sp,sp,8
   89f9c:	f800283a 	ret

00089fa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   89fa0:	defffd04 	addi	sp,sp,-12
   89fa4:	dfc00215 	stw	ra,8(sp)
   89fa8:	df000115 	stw	fp,4(sp)
   89fac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   89fb0:	00800274 	movhi	r2,9
   89fb4:	10b9f504 	addi	r2,r2,-6188
   89fb8:	10800017 	ldw	r2,0(r2)
   89fbc:	1005003a 	cmpeq	r2,r2,zero
   89fc0:	1000061e 	bne	r2,zero,89fdc <alt_get_errno+0x3c>
   89fc4:	00800274 	movhi	r2,9
   89fc8:	10b9f504 	addi	r2,r2,-6188
   89fcc:	10800017 	ldw	r2,0(r2)
   89fd0:	103ee83a 	callr	r2
   89fd4:	e0bfff15 	stw	r2,-4(fp)
   89fd8:	00000306 	br	89fe8 <alt_get_errno+0x48>
   89fdc:	00800274 	movhi	r2,9
   89fe0:	10809704 	addi	r2,r2,604
   89fe4:	e0bfff15 	stw	r2,-4(fp)
   89fe8:	e0bfff17 	ldw	r2,-4(fp)
}
   89fec:	e037883a 	mov	sp,fp
   89ff0:	dfc00117 	ldw	ra,4(sp)
   89ff4:	df000017 	ldw	fp,0(sp)
   89ff8:	dec00204 	addi	sp,sp,8
   89ffc:	f800283a 	ret

0008a000 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8a000:	defffc04 	addi	sp,sp,-16
   8a004:	df000315 	stw	fp,12(sp)
   8a008:	df000304 	addi	fp,sp,12
   8a00c:	e13ffd15 	stw	r4,-12(fp)
   8a010:	e17ffe15 	stw	r5,-8(fp)
   8a014:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8a018:	e0bfff17 	ldw	r2,-4(fp)
}
   8a01c:	e037883a 	mov	sp,fp
   8a020:	df000017 	ldw	fp,0(sp)
   8a024:	dec00104 	addi	sp,sp,4
   8a028:	f800283a 	ret

0008a02c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8a02c:	defff904 	addi	sp,sp,-28
   8a030:	dfc00615 	stw	ra,24(sp)
   8a034:	df000515 	stw	fp,20(sp)
   8a038:	df000504 	addi	fp,sp,20
   8a03c:	e13ffc15 	stw	r4,-16(fp)
   8a040:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a044:	e0bffc17 	ldw	r2,-16(fp)
   8a048:	1004803a 	cmplt	r2,r2,zero
   8a04c:	1000091e 	bne	r2,zero,8a074 <fstat+0x48>
   8a050:	e13ffc17 	ldw	r4,-16(fp)
   8a054:	01400304 	movi	r5,12
   8a058:	00897b00 	call	897b0 <__mulsi3>
   8a05c:	1007883a 	mov	r3,r2
   8a060:	00800274 	movhi	r2,9
   8a064:	10b57204 	addi	r2,r2,-10808
   8a068:	1887883a 	add	r3,r3,r2
   8a06c:	e0ffff15 	stw	r3,-4(fp)
   8a070:	00000106 	br	8a078 <fstat+0x4c>
   8a074:	e03fff15 	stw	zero,-4(fp)
   8a078:	e0bfff17 	ldw	r2,-4(fp)
   8a07c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a080:	e0bffb17 	ldw	r2,-20(fp)
   8a084:	1005003a 	cmpeq	r2,r2,zero
   8a088:	1000121e 	bne	r2,zero,8a0d4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8a08c:	e0bffb17 	ldw	r2,-20(fp)
   8a090:	10800017 	ldw	r2,0(r2)
   8a094:	10800817 	ldw	r2,32(r2)
   8a098:	1005003a 	cmpeq	r2,r2,zero
   8a09c:	1000081e 	bne	r2,zero,8a0c0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8a0a0:	e0bffb17 	ldw	r2,-20(fp)
   8a0a4:	10800017 	ldw	r2,0(r2)
   8a0a8:	10800817 	ldw	r2,32(r2)
   8a0ac:	e13ffb17 	ldw	r4,-20(fp)
   8a0b0:	e17ffd17 	ldw	r5,-12(fp)
   8a0b4:	103ee83a 	callr	r2
   8a0b8:	e0bffe15 	stw	r2,-8(fp)
   8a0bc:	00000b06 	br	8a0ec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8a0c0:	e0fffd17 	ldw	r3,-12(fp)
   8a0c4:	00880004 	movi	r2,8192
   8a0c8:	18800115 	stw	r2,4(r3)
      return 0;
   8a0cc:	e03ffe15 	stw	zero,-8(fp)
   8a0d0:	00000606 	br	8a0ec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a0d4:	008a1040 	call	8a104 <alt_get_errno>
   8a0d8:	1007883a 	mov	r3,r2
   8a0dc:	00801444 	movi	r2,81
   8a0e0:	18800015 	stw	r2,0(r3)
    return -1;
   8a0e4:	00bfffc4 	movi	r2,-1
   8a0e8:	e0bffe15 	stw	r2,-8(fp)
   8a0ec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8a0f0:	e037883a 	mov	sp,fp
   8a0f4:	dfc00117 	ldw	ra,4(sp)
   8a0f8:	df000017 	ldw	fp,0(sp)
   8a0fc:	dec00204 	addi	sp,sp,8
   8a100:	f800283a 	ret

0008a104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a104:	defffd04 	addi	sp,sp,-12
   8a108:	dfc00215 	stw	ra,8(sp)
   8a10c:	df000115 	stw	fp,4(sp)
   8a110:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a114:	00800274 	movhi	r2,9
   8a118:	10b9f504 	addi	r2,r2,-6188
   8a11c:	10800017 	ldw	r2,0(r2)
   8a120:	1005003a 	cmpeq	r2,r2,zero
   8a124:	1000061e 	bne	r2,zero,8a140 <alt_get_errno+0x3c>
   8a128:	00800274 	movhi	r2,9
   8a12c:	10b9f504 	addi	r2,r2,-6188
   8a130:	10800017 	ldw	r2,0(r2)
   8a134:	103ee83a 	callr	r2
   8a138:	e0bfff15 	stw	r2,-4(fp)
   8a13c:	00000306 	br	8a14c <alt_get_errno+0x48>
   8a140:	00800274 	movhi	r2,9
   8a144:	10809704 	addi	r2,r2,604
   8a148:	e0bfff15 	stw	r2,-4(fp)
   8a14c:	e0bfff17 	ldw	r2,-4(fp)
}
   8a150:	e037883a 	mov	sp,fp
   8a154:	dfc00117 	ldw	ra,4(sp)
   8a158:	df000017 	ldw	fp,0(sp)
   8a15c:	dec00204 	addi	sp,sp,8
   8a160:	f800283a 	ret

0008a164 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8a164:	deffeb04 	addi	sp,sp,-84
   8a168:	dfc01415 	stw	ra,80(sp)
   8a16c:	df001315 	stw	fp,76(sp)
   8a170:	df001304 	addi	fp,sp,76
   8a174:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a178:	e0bffd17 	ldw	r2,-12(fp)
   8a17c:	1004803a 	cmplt	r2,r2,zero
   8a180:	1000091e 	bne	r2,zero,8a1a8 <isatty+0x44>
   8a184:	e13ffd17 	ldw	r4,-12(fp)
   8a188:	01400304 	movi	r5,12
   8a18c:	00897b00 	call	897b0 <__mulsi3>
   8a190:	1007883a 	mov	r3,r2
   8a194:	00800274 	movhi	r2,9
   8a198:	10b57204 	addi	r2,r2,-10808
   8a19c:	1887883a 	add	r3,r3,r2
   8a1a0:	e0ffff15 	stw	r3,-4(fp)
   8a1a4:	00000106 	br	8a1ac <isatty+0x48>
   8a1a8:	e03fff15 	stw	zero,-4(fp)
   8a1ac:	e0bfff17 	ldw	r2,-4(fp)
   8a1b0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8a1b4:	e0bfed17 	ldw	r2,-76(fp)
   8a1b8:	1005003a 	cmpeq	r2,r2,zero
   8a1bc:	10000f1e 	bne	r2,zero,8a1fc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8a1c0:	e0bfed17 	ldw	r2,-76(fp)
   8a1c4:	10800017 	ldw	r2,0(r2)
   8a1c8:	10800817 	ldw	r2,32(r2)
   8a1cc:	1004c03a 	cmpne	r2,r2,zero
   8a1d0:	1000031e 	bne	r2,zero,8a1e0 <isatty+0x7c>
    {
      return 1;
   8a1d4:	00800044 	movi	r2,1
   8a1d8:	e0bffe15 	stw	r2,-8(fp)
   8a1dc:	00000c06 	br	8a210 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8a1e0:	e17fee04 	addi	r5,fp,-72
   8a1e4:	e13ffd17 	ldw	r4,-12(fp)
   8a1e8:	008a02c0 	call	8a02c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8a1ec:	e0bfef17 	ldw	r2,-68(fp)
   8a1f0:	10880020 	cmpeqi	r2,r2,8192
   8a1f4:	e0bffe15 	stw	r2,-8(fp)
   8a1f8:	00000506 	br	8a210 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a1fc:	008a2280 	call	8a228 <alt_get_errno>
   8a200:	1007883a 	mov	r3,r2
   8a204:	00801444 	movi	r2,81
   8a208:	18800015 	stw	r2,0(r3)
    return 0;
   8a20c:	e03ffe15 	stw	zero,-8(fp)
   8a210:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8a214:	e037883a 	mov	sp,fp
   8a218:	dfc00117 	ldw	ra,4(sp)
   8a21c:	df000017 	ldw	fp,0(sp)
   8a220:	dec00204 	addi	sp,sp,8
   8a224:	f800283a 	ret

0008a228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a228:	defffd04 	addi	sp,sp,-12
   8a22c:	dfc00215 	stw	ra,8(sp)
   8a230:	df000115 	stw	fp,4(sp)
   8a234:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a238:	00800274 	movhi	r2,9
   8a23c:	10b9f504 	addi	r2,r2,-6188
   8a240:	10800017 	ldw	r2,0(r2)
   8a244:	1005003a 	cmpeq	r2,r2,zero
   8a248:	1000061e 	bne	r2,zero,8a264 <alt_get_errno+0x3c>
   8a24c:	00800274 	movhi	r2,9
   8a250:	10b9f504 	addi	r2,r2,-6188
   8a254:	10800017 	ldw	r2,0(r2)
   8a258:	103ee83a 	callr	r2
   8a25c:	e0bfff15 	stw	r2,-4(fp)
   8a260:	00000306 	br	8a270 <alt_get_errno+0x48>
   8a264:	00800274 	movhi	r2,9
   8a268:	10809704 	addi	r2,r2,604
   8a26c:	e0bfff15 	stw	r2,-4(fp)
   8a270:	e0bfff17 	ldw	r2,-4(fp)
}
   8a274:	e037883a 	mov	sp,fp
   8a278:	dfc00117 	ldw	ra,4(sp)
   8a27c:	df000017 	ldw	fp,0(sp)
   8a280:	dec00204 	addi	sp,sp,8
   8a284:	f800283a 	ret

0008a288 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8a288:	defffe04 	addi	sp,sp,-8
   8a28c:	dfc00115 	stw	ra,4(sp)
   8a290:	df000015 	stw	fp,0(sp)
   8a294:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8a298:	01000274 	movhi	r4,9
   8a29c:	2139fa04 	addi	r4,r4,-6168
   8a2a0:	01400274 	movhi	r5,9
   8a2a4:	29736304 	addi	r5,r5,-12916
   8a2a8:	01800274 	movhi	r6,9
   8a2ac:	31b9fa04 	addi	r6,r6,-6168
   8a2b0:	008a3080 	call	8a308 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8a2b4:	01000234 	movhi	r4,8
   8a2b8:	21000804 	addi	r4,r4,32
   8a2bc:	01400234 	movhi	r5,8
   8a2c0:	29400804 	addi	r5,r5,32
   8a2c4:	01800234 	movhi	r6,8
   8a2c8:	31806d04 	addi	r6,r6,436
   8a2cc:	008a3080 	call	8a308 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8a2d0:	01000274 	movhi	r4,9
   8a2d4:	21328904 	addi	r4,r4,-13788
   8a2d8:	01400274 	movhi	r5,9
   8a2dc:	29728904 	addi	r5,r5,-13788
   8a2e0:	01800274 	movhi	r6,9
   8a2e4:	31b36304 	addi	r6,r6,-12916
   8a2e8:	008a3080 	call	8a308 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8a2ec:	008b82c0 	call	8b82c <alt_dcache_flush_all>
  alt_icache_flush_all();
   8a2f0:	008ba240 	call	8ba24 <alt_icache_flush_all>
}
   8a2f4:	e037883a 	mov	sp,fp
   8a2f8:	dfc00117 	ldw	ra,4(sp)
   8a2fc:	df000017 	ldw	fp,0(sp)
   8a300:	dec00204 	addi	sp,sp,8
   8a304:	f800283a 	ret

0008a308 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8a308:	defffc04 	addi	sp,sp,-16
   8a30c:	df000315 	stw	fp,12(sp)
   8a310:	df000304 	addi	fp,sp,12
   8a314:	e13ffd15 	stw	r4,-12(fp)
   8a318:	e17ffe15 	stw	r5,-8(fp)
   8a31c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8a320:	e0fffe17 	ldw	r3,-8(fp)
   8a324:	e0bffd17 	ldw	r2,-12(fp)
   8a328:	18800e26 	beq	r3,r2,8a364 <alt_load_section+0x5c>
  {
    while( to != end )
   8a32c:	00000a06 	br	8a358 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8a330:	e0bffd17 	ldw	r2,-12(fp)
   8a334:	10c00017 	ldw	r3,0(r2)
   8a338:	e0bffe17 	ldw	r2,-8(fp)
   8a33c:	10c00015 	stw	r3,0(r2)
   8a340:	e0bffe17 	ldw	r2,-8(fp)
   8a344:	10800104 	addi	r2,r2,4
   8a348:	e0bffe15 	stw	r2,-8(fp)
   8a34c:	e0bffd17 	ldw	r2,-12(fp)
   8a350:	10800104 	addi	r2,r2,4
   8a354:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8a358:	e0fffe17 	ldw	r3,-8(fp)
   8a35c:	e0bfff17 	ldw	r2,-4(fp)
   8a360:	18bff31e 	bne	r3,r2,8a330 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8a364:	e037883a 	mov	sp,fp
   8a368:	df000017 	ldw	fp,0(sp)
   8a36c:	dec00104 	addi	sp,sp,4
   8a370:	f800283a 	ret

0008a374 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8a374:	defff804 	addi	sp,sp,-32
   8a378:	dfc00715 	stw	ra,28(sp)
   8a37c:	df000615 	stw	fp,24(sp)
   8a380:	df000604 	addi	fp,sp,24
   8a384:	e13ffc15 	stw	r4,-16(fp)
   8a388:	e17ffd15 	stw	r5,-12(fp)
   8a38c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8a390:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a394:	e0bffc17 	ldw	r2,-16(fp)
   8a398:	1004803a 	cmplt	r2,r2,zero
   8a39c:	1000091e 	bne	r2,zero,8a3c4 <lseek+0x50>
   8a3a0:	e13ffc17 	ldw	r4,-16(fp)
   8a3a4:	01400304 	movi	r5,12
   8a3a8:	00897b00 	call	897b0 <__mulsi3>
   8a3ac:	1007883a 	mov	r3,r2
   8a3b0:	00800274 	movhi	r2,9
   8a3b4:	10b57204 	addi	r2,r2,-10808
   8a3b8:	1887883a 	add	r3,r3,r2
   8a3bc:	e0ffff15 	stw	r3,-4(fp)
   8a3c0:	00000106 	br	8a3c8 <lseek+0x54>
   8a3c4:	e03fff15 	stw	zero,-4(fp)
   8a3c8:	e0bfff17 	ldw	r2,-4(fp)
   8a3cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8a3d0:	e0bffb17 	ldw	r2,-20(fp)
   8a3d4:	1005003a 	cmpeq	r2,r2,zero
   8a3d8:	1000111e 	bne	r2,zero,8a420 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8a3dc:	e0bffb17 	ldw	r2,-20(fp)
   8a3e0:	10800017 	ldw	r2,0(r2)
   8a3e4:	10800717 	ldw	r2,28(r2)
   8a3e8:	1005003a 	cmpeq	r2,r2,zero
   8a3ec:	1000091e 	bne	r2,zero,8a414 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8a3f0:	e0bffb17 	ldw	r2,-20(fp)
   8a3f4:	10800017 	ldw	r2,0(r2)
   8a3f8:	10800717 	ldw	r2,28(r2)
   8a3fc:	e13ffb17 	ldw	r4,-20(fp)
   8a400:	e17ffd17 	ldw	r5,-12(fp)
   8a404:	e1bffe17 	ldw	r6,-8(fp)
   8a408:	103ee83a 	callr	r2
   8a40c:	e0bffa15 	stw	r2,-24(fp)
   8a410:	00000506 	br	8a428 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8a414:	00bfde84 	movi	r2,-134
   8a418:	e0bffa15 	stw	r2,-24(fp)
   8a41c:	00000206 	br	8a428 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8a420:	00bfebc4 	movi	r2,-81
   8a424:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8a428:	e0bffa17 	ldw	r2,-24(fp)
   8a42c:	1004403a 	cmpge	r2,r2,zero
   8a430:	1000071e 	bne	r2,zero,8a450 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8a434:	008a4680 	call	8a468 <alt_get_errno>
   8a438:	1007883a 	mov	r3,r2
   8a43c:	e0bffa17 	ldw	r2,-24(fp)
   8a440:	0085c83a 	sub	r2,zero,r2
   8a444:	18800015 	stw	r2,0(r3)
    rc = -1;
   8a448:	00bfffc4 	movi	r2,-1
   8a44c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8a450:	e0bffa17 	ldw	r2,-24(fp)
}
   8a454:	e037883a 	mov	sp,fp
   8a458:	dfc00117 	ldw	ra,4(sp)
   8a45c:	df000017 	ldw	fp,0(sp)
   8a460:	dec00204 	addi	sp,sp,8
   8a464:	f800283a 	ret

0008a468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a468:	defffd04 	addi	sp,sp,-12
   8a46c:	dfc00215 	stw	ra,8(sp)
   8a470:	df000115 	stw	fp,4(sp)
   8a474:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a478:	00800274 	movhi	r2,9
   8a47c:	10b9f504 	addi	r2,r2,-6188
   8a480:	10800017 	ldw	r2,0(r2)
   8a484:	1005003a 	cmpeq	r2,r2,zero
   8a488:	1000061e 	bne	r2,zero,8a4a4 <alt_get_errno+0x3c>
   8a48c:	00800274 	movhi	r2,9
   8a490:	10b9f504 	addi	r2,r2,-6188
   8a494:	10800017 	ldw	r2,0(r2)
   8a498:	103ee83a 	callr	r2
   8a49c:	e0bfff15 	stw	r2,-4(fp)
   8a4a0:	00000306 	br	8a4b0 <alt_get_errno+0x48>
   8a4a4:	00800274 	movhi	r2,9
   8a4a8:	10809704 	addi	r2,r2,604
   8a4ac:	e0bfff15 	stw	r2,-4(fp)
   8a4b0:	e0bfff17 	ldw	r2,-4(fp)
}
   8a4b4:	e037883a 	mov	sp,fp
   8a4b8:	dfc00117 	ldw	ra,4(sp)
   8a4bc:	df000017 	ldw	fp,0(sp)
   8a4c0:	dec00204 	addi	sp,sp,8
   8a4c4:	f800283a 	ret

0008a4c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8a4c8:	defffd04 	addi	sp,sp,-12
   8a4cc:	dfc00215 	stw	ra,8(sp)
   8a4d0:	df000115 	stw	fp,4(sp)
   8a4d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8a4d8:	0009883a 	mov	r4,zero
   8a4dc:	008aa200 	call	8aa20 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8a4e0:	008aa540 	call	8aa54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8a4e4:	01000274 	movhi	r4,9
   8a4e8:	21335904 	addi	r4,r4,-12956
   8a4ec:	01400274 	movhi	r5,9
   8a4f0:	29735904 	addi	r5,r5,-12956
   8a4f4:	01800274 	movhi	r6,9
   8a4f8:	31b35904 	addi	r6,r6,-12956
   8a4fc:	008bde40 	call	8bde4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8a500:	008b95c0 	call	8b95c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8a504:	01000274 	movhi	r4,9
   8a508:	212e7004 	addi	r4,r4,-17984
   8a50c:	008c5880 	call	8c588 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8a510:	d126ae17 	ldw	r4,-25928(gp)
   8a514:	d166af17 	ldw	r5,-25924(gp)
   8a518:	d1a6b017 	ldw	r6,-25920(gp)
   8a51c:	00804000 	call	80400 <main>
   8a520:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8a524:	01000044 	movi	r4,1
   8a528:	0089ea00 	call	89ea0 <close>
  exit (result);
   8a52c:	e13fff17 	ldw	r4,-4(fp)
   8a530:	008c59c0 	call	8c59c <exit>

0008a534 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8a534:	defffe04 	addi	sp,sp,-8
   8a538:	df000115 	stw	fp,4(sp)
   8a53c:	df000104 	addi	fp,sp,4
   8a540:	e13fff15 	stw	r4,-4(fp)
}
   8a544:	e037883a 	mov	sp,fp
   8a548:	df000017 	ldw	fp,0(sp)
   8a54c:	dec00104 	addi	sp,sp,4
   8a550:	f800283a 	ret

0008a554 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8a554:	defffe04 	addi	sp,sp,-8
   8a558:	df000115 	stw	fp,4(sp)
   8a55c:	df000104 	addi	fp,sp,4
   8a560:	e13fff15 	stw	r4,-4(fp)
}
   8a564:	e037883a 	mov	sp,fp
   8a568:	df000017 	ldw	fp,0(sp)
   8a56c:	dec00104 	addi	sp,sp,4
   8a570:	f800283a 	ret

0008a574 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   8a574:	defffd04 	addi	sp,sp,-12
   8a578:	dfc00215 	stw	ra,8(sp)
   8a57c:	df000115 	stw	fp,4(sp)
   8a580:	df000104 	addi	fp,sp,4
   8a584:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   8a588:	00800274 	movhi	r2,9
   8a58c:	10b9ea04 	addi	r2,r2,-6232
   8a590:	10800017 	ldw	r2,0(r2)
   8a594:	11400217 	ldw	r5,8(r2)
   8a598:	e13fff17 	ldw	r4,-4(fp)
   8a59c:	008c6480 	call	8c648 <fputs>
#endif
}
   8a5a0:	e037883a 	mov	sp,fp
   8a5a4:	dfc00117 	ldw	ra,4(sp)
   8a5a8:	df000017 	ldw	fp,0(sp)
   8a5ac:	dec00204 	addi	sp,sp,8
   8a5b0:	f800283a 	ret

0008a5b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8a5b4:	defff704 	addi	sp,sp,-36
   8a5b8:	dfc00815 	stw	ra,32(sp)
   8a5bc:	df000715 	stw	fp,28(sp)
   8a5c0:	df000704 	addi	fp,sp,28
   8a5c4:	e13ffb15 	stw	r4,-20(fp)
   8a5c8:	e17ffc15 	stw	r5,-16(fp)
   8a5cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a5d0:	e0bffb17 	ldw	r2,-20(fp)
   8a5d4:	1004803a 	cmplt	r2,r2,zero
   8a5d8:	1000091e 	bne	r2,zero,8a600 <read+0x4c>
   8a5dc:	e13ffb17 	ldw	r4,-20(fp)
   8a5e0:	01400304 	movi	r5,12
   8a5e4:	00897b00 	call	897b0 <__mulsi3>
   8a5e8:	1007883a 	mov	r3,r2
   8a5ec:	00800274 	movhi	r2,9
   8a5f0:	10b57204 	addi	r2,r2,-10808
   8a5f4:	1887883a 	add	r3,r3,r2
   8a5f8:	e0ffff15 	stw	r3,-4(fp)
   8a5fc:	00000106 	br	8a604 <read+0x50>
   8a600:	e03fff15 	stw	zero,-4(fp)
   8a604:	e0bfff17 	ldw	r2,-4(fp)
   8a608:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8a60c:	e0bffa17 	ldw	r2,-24(fp)
   8a610:	1005003a 	cmpeq	r2,r2,zero
   8a614:	1000241e 	bne	r2,zero,8a6a8 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8a618:	e0bffa17 	ldw	r2,-24(fp)
   8a61c:	10800217 	ldw	r2,8(r2)
   8a620:	108000cc 	andi	r2,r2,3
   8a624:	10800060 	cmpeqi	r2,r2,1
   8a628:	10001a1e 	bne	r2,zero,8a694 <read+0xe0>
   8a62c:	e0bffa17 	ldw	r2,-24(fp)
   8a630:	10800017 	ldw	r2,0(r2)
   8a634:	10800517 	ldw	r2,20(r2)
   8a638:	1005003a 	cmpeq	r2,r2,zero
   8a63c:	1000151e 	bne	r2,zero,8a694 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8a640:	e0bffa17 	ldw	r2,-24(fp)
   8a644:	10800017 	ldw	r2,0(r2)
   8a648:	10800517 	ldw	r2,20(r2)
   8a64c:	e17ffc17 	ldw	r5,-16(fp)
   8a650:	e1bffd17 	ldw	r6,-12(fp)
   8a654:	e13ffa17 	ldw	r4,-24(fp)
   8a658:	103ee83a 	callr	r2
   8a65c:	e0bff915 	stw	r2,-28(fp)
   8a660:	e0bff917 	ldw	r2,-28(fp)
   8a664:	1004403a 	cmpge	r2,r2,zero
   8a668:	1000071e 	bne	r2,zero,8a688 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8a66c:	008a6d80 	call	8a6d8 <alt_get_errno>
   8a670:	e0fff917 	ldw	r3,-28(fp)
   8a674:	00c7c83a 	sub	r3,zero,r3
   8a678:	10c00015 	stw	r3,0(r2)
          return -1;
   8a67c:	00bfffc4 	movi	r2,-1
   8a680:	e0bffe15 	stw	r2,-8(fp)
   8a684:	00000e06 	br	8a6c0 <read+0x10c>
        }
        return rval;
   8a688:	e0bff917 	ldw	r2,-28(fp)
   8a68c:	e0bffe15 	stw	r2,-8(fp)
   8a690:	00000b06 	br	8a6c0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8a694:	008a6d80 	call	8a6d8 <alt_get_errno>
   8a698:	1007883a 	mov	r3,r2
   8a69c:	00800344 	movi	r2,13
   8a6a0:	18800015 	stw	r2,0(r3)
   8a6a4:	00000406 	br	8a6b8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8a6a8:	008a6d80 	call	8a6d8 <alt_get_errno>
   8a6ac:	1007883a 	mov	r3,r2
   8a6b0:	00801444 	movi	r2,81
   8a6b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8a6b8:	00bfffc4 	movi	r2,-1
   8a6bc:	e0bffe15 	stw	r2,-8(fp)
   8a6c0:	e0bffe17 	ldw	r2,-8(fp)
}
   8a6c4:	e037883a 	mov	sp,fp
   8a6c8:	dfc00117 	ldw	ra,4(sp)
   8a6cc:	df000017 	ldw	fp,0(sp)
   8a6d0:	dec00204 	addi	sp,sp,8
   8a6d4:	f800283a 	ret

0008a6d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a6d8:	defffd04 	addi	sp,sp,-12
   8a6dc:	dfc00215 	stw	ra,8(sp)
   8a6e0:	df000115 	stw	fp,4(sp)
   8a6e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a6e8:	00800274 	movhi	r2,9
   8a6ec:	10b9f504 	addi	r2,r2,-6188
   8a6f0:	10800017 	ldw	r2,0(r2)
   8a6f4:	1005003a 	cmpeq	r2,r2,zero
   8a6f8:	1000061e 	bne	r2,zero,8a714 <alt_get_errno+0x3c>
   8a6fc:	00800274 	movhi	r2,9
   8a700:	10b9f504 	addi	r2,r2,-6188
   8a704:	10800017 	ldw	r2,0(r2)
   8a708:	103ee83a 	callr	r2
   8a70c:	e0bfff15 	stw	r2,-4(fp)
   8a710:	00000306 	br	8a720 <alt_get_errno+0x48>
   8a714:	00800274 	movhi	r2,9
   8a718:	10809704 	addi	r2,r2,604
   8a71c:	e0bfff15 	stw	r2,-4(fp)
   8a720:	e0bfff17 	ldw	r2,-4(fp)
}
   8a724:	e037883a 	mov	sp,fp
   8a728:	dfc00117 	ldw	ra,4(sp)
   8a72c:	df000017 	ldw	fp,0(sp)
   8a730:	dec00204 	addi	sp,sp,8
   8a734:	f800283a 	ret

0008a738 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8a738:	defffc04 	addi	sp,sp,-16
   8a73c:	dfc00315 	stw	ra,12(sp)
   8a740:	df000215 	stw	fp,8(sp)
   8a744:	dc000115 	stw	r16,4(sp)
   8a748:	df000104 	addi	fp,sp,4
   8a74c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8a750:	e0bfff17 	ldw	r2,-4(fp)
   8a754:	108000d0 	cmplti	r2,r2,3
   8a758:	10000f1e 	bne	r2,zero,8a798 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8a75c:	e13fff17 	ldw	r4,-4(fp)
   8a760:	04000274 	movhi	r16,9
   8a764:	84357204 	addi	r16,r16,-10808
   8a768:	01400304 	movi	r5,12
   8a76c:	00897b00 	call	897b0 <__mulsi3>
   8a770:	1405883a 	add	r2,r2,r16
   8a774:	10800204 	addi	r2,r2,8
   8a778:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8a77c:	e13fff17 	ldw	r4,-4(fp)
   8a780:	04000274 	movhi	r16,9
   8a784:	84357204 	addi	r16,r16,-10808
   8a788:	01400304 	movi	r5,12
   8a78c:	00897b00 	call	897b0 <__mulsi3>
   8a790:	1405883a 	add	r2,r2,r16
   8a794:	10000015 	stw	zero,0(r2)
  }
}
   8a798:	e037883a 	mov	sp,fp
   8a79c:	dfc00217 	ldw	ra,8(sp)
   8a7a0:	df000117 	ldw	fp,4(sp)
   8a7a4:	dc000017 	ldw	r16,0(sp)
   8a7a8:	dec00304 	addi	sp,sp,12
   8a7ac:	f800283a 	ret

0008a7b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8a7b0:	defff804 	addi	sp,sp,-32
   8a7b4:	df000715 	stw	fp,28(sp)
   8a7b8:	df000704 	addi	fp,sp,28
   8a7bc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a7c0:	0005303a 	rdctl	r2,status
   8a7c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a7c8:	e0fffb17 	ldw	r3,-20(fp)
   8a7cc:	00bfff84 	movi	r2,-2
   8a7d0:	1884703a 	and	r2,r3,r2
   8a7d4:	1001703a 	wrctl	status,r2
  
  return context;
   8a7d8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8a7dc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8a7e0:	d0a00c17 	ldw	r2,-32720(gp)
   8a7e4:	10c000c4 	addi	r3,r2,3
   8a7e8:	00bfff04 	movi	r2,-4
   8a7ec:	1884703a 	and	r2,r3,r2
   8a7f0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8a7f4:	d0e00c17 	ldw	r3,-32720(gp)
   8a7f8:	e0bffe17 	ldw	r2,-8(fp)
   8a7fc:	1887883a 	add	r3,r3,r2
   8a800:	008003b4 	movhi	r2,14
   8a804:	1086a004 	addi	r2,r2,6784
   8a808:	10c0072e 	bgeu	r2,r3,8a828 <sbrk+0x78>
   8a80c:	e0bffd17 	ldw	r2,-12(fp)
   8a810:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a814:	e0bffa17 	ldw	r2,-24(fp)
   8a818:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8a81c:	00bfffc4 	movi	r2,-1
   8a820:	e0bfff15 	stw	r2,-4(fp)
   8a824:	00000c06 	br	8a858 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8a828:	d0a00c17 	ldw	r2,-32720(gp)
   8a82c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8a830:	d0e00c17 	ldw	r3,-32720(gp)
   8a834:	e0bffe17 	ldw	r2,-8(fp)
   8a838:	1885883a 	add	r2,r3,r2
   8a83c:	d0a00c15 	stw	r2,-32720(gp)
   8a840:	e0bffd17 	ldw	r2,-12(fp)
   8a844:	e0bff915 	stw	r2,-28(fp)
   8a848:	e0bff917 	ldw	r2,-28(fp)
   8a84c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8a850:	e0bffc17 	ldw	r2,-16(fp)
   8a854:	e0bfff15 	stw	r2,-4(fp)
   8a858:	e0bfff17 	ldw	r2,-4(fp)
} 
   8a85c:	e037883a 	mov	sp,fp
   8a860:	df000017 	ldw	fp,0(sp)
   8a864:	dec00104 	addi	sp,sp,4
   8a868:	f800283a 	ret

0008a86c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8a86c:	defffd04 	addi	sp,sp,-12
   8a870:	dfc00215 	stw	ra,8(sp)
   8a874:	df000115 	stw	fp,4(sp)
   8a878:	df000104 	addi	fp,sp,4
   8a87c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8a880:	e13fff17 	ldw	r4,-4(fp)
   8a884:	008b6d00 	call	8b6d0 <alt_busy_sleep>
}
   8a888:	e037883a 	mov	sp,fp
   8a88c:	dfc00117 	ldw	ra,4(sp)
   8a890:	df000017 	ldw	fp,0(sp)
   8a894:	dec00204 	addi	sp,sp,8
   8a898:	f800283a 	ret

0008a89c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8a89c:	defff704 	addi	sp,sp,-36
   8a8a0:	dfc00815 	stw	ra,32(sp)
   8a8a4:	df000715 	stw	fp,28(sp)
   8a8a8:	df000704 	addi	fp,sp,28
   8a8ac:	e13ffb15 	stw	r4,-20(fp)
   8a8b0:	e17ffc15 	stw	r5,-16(fp)
   8a8b4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a8b8:	e0bffb17 	ldw	r2,-20(fp)
   8a8bc:	1004803a 	cmplt	r2,r2,zero
   8a8c0:	1000091e 	bne	r2,zero,8a8e8 <write+0x4c>
   8a8c4:	e13ffb17 	ldw	r4,-20(fp)
   8a8c8:	01400304 	movi	r5,12
   8a8cc:	00897b00 	call	897b0 <__mulsi3>
   8a8d0:	1007883a 	mov	r3,r2
   8a8d4:	00800274 	movhi	r2,9
   8a8d8:	10b57204 	addi	r2,r2,-10808
   8a8dc:	1887883a 	add	r3,r3,r2
   8a8e0:	e0ffff15 	stw	r3,-4(fp)
   8a8e4:	00000106 	br	8a8ec <write+0x50>
   8a8e8:	e03fff15 	stw	zero,-4(fp)
   8a8ec:	e0bfff17 	ldw	r2,-4(fp)
   8a8f0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8a8f4:	e0bffa17 	ldw	r2,-24(fp)
   8a8f8:	1005003a 	cmpeq	r2,r2,zero
   8a8fc:	1000241e 	bne	r2,zero,8a990 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8a900:	e0bffa17 	ldw	r2,-24(fp)
   8a904:	10800217 	ldw	r2,8(r2)
   8a908:	108000cc 	andi	r2,r2,3
   8a90c:	1005003a 	cmpeq	r2,r2,zero
   8a910:	10001a1e 	bne	r2,zero,8a97c <write+0xe0>
   8a914:	e0bffa17 	ldw	r2,-24(fp)
   8a918:	10800017 	ldw	r2,0(r2)
   8a91c:	10800617 	ldw	r2,24(r2)
   8a920:	1005003a 	cmpeq	r2,r2,zero
   8a924:	1000151e 	bne	r2,zero,8a97c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8a928:	e0bffa17 	ldw	r2,-24(fp)
   8a92c:	10800017 	ldw	r2,0(r2)
   8a930:	10800617 	ldw	r2,24(r2)
   8a934:	e17ffc17 	ldw	r5,-16(fp)
   8a938:	e1bffd17 	ldw	r6,-12(fp)
   8a93c:	e13ffa17 	ldw	r4,-24(fp)
   8a940:	103ee83a 	callr	r2
   8a944:	e0bff915 	stw	r2,-28(fp)
   8a948:	e0bff917 	ldw	r2,-28(fp)
   8a94c:	1004403a 	cmpge	r2,r2,zero
   8a950:	1000071e 	bne	r2,zero,8a970 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8a954:	008a9c00 	call	8a9c0 <alt_get_errno>
   8a958:	e0fff917 	ldw	r3,-28(fp)
   8a95c:	00c7c83a 	sub	r3,zero,r3
   8a960:	10c00015 	stw	r3,0(r2)
        return -1;
   8a964:	00bfffc4 	movi	r2,-1
   8a968:	e0bffe15 	stw	r2,-8(fp)
   8a96c:	00000e06 	br	8a9a8 <write+0x10c>
      }
      return rval;
   8a970:	e0bff917 	ldw	r2,-28(fp)
   8a974:	e0bffe15 	stw	r2,-8(fp)
   8a978:	00000b06 	br	8a9a8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8a97c:	008a9c00 	call	8a9c0 <alt_get_errno>
   8a980:	1007883a 	mov	r3,r2
   8a984:	00800344 	movi	r2,13
   8a988:	18800015 	stw	r2,0(r3)
   8a98c:	00000406 	br	8a9a0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8a990:	008a9c00 	call	8a9c0 <alt_get_errno>
   8a994:	1007883a 	mov	r3,r2
   8a998:	00801444 	movi	r2,81
   8a99c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8a9a0:	00bfffc4 	movi	r2,-1
   8a9a4:	e0bffe15 	stw	r2,-8(fp)
   8a9a8:	e0bffe17 	ldw	r2,-8(fp)
}
   8a9ac:	e037883a 	mov	sp,fp
   8a9b0:	dfc00117 	ldw	ra,4(sp)
   8a9b4:	df000017 	ldw	fp,0(sp)
   8a9b8:	dec00204 	addi	sp,sp,8
   8a9bc:	f800283a 	ret

0008a9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a9c0:	defffd04 	addi	sp,sp,-12
   8a9c4:	dfc00215 	stw	ra,8(sp)
   8a9c8:	df000115 	stw	fp,4(sp)
   8a9cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a9d0:	00800274 	movhi	r2,9
   8a9d4:	10b9f504 	addi	r2,r2,-6188
   8a9d8:	10800017 	ldw	r2,0(r2)
   8a9dc:	1005003a 	cmpeq	r2,r2,zero
   8a9e0:	1000061e 	bne	r2,zero,8a9fc <alt_get_errno+0x3c>
   8a9e4:	00800274 	movhi	r2,9
   8a9e8:	10b9f504 	addi	r2,r2,-6188
   8a9ec:	10800017 	ldw	r2,0(r2)
   8a9f0:	103ee83a 	callr	r2
   8a9f4:	e0bfff15 	stw	r2,-4(fp)
   8a9f8:	00000306 	br	8aa08 <alt_get_errno+0x48>
   8a9fc:	00800274 	movhi	r2,9
   8aa00:	10809704 	addi	r2,r2,604
   8aa04:	e0bfff15 	stw	r2,-4(fp)
   8aa08:	e0bfff17 	ldw	r2,-4(fp)
}
   8aa0c:	e037883a 	mov	sp,fp
   8aa10:	dfc00117 	ldw	ra,4(sp)
   8aa14:	df000017 	ldw	fp,0(sp)
   8aa18:	dec00204 	addi	sp,sp,8
   8aa1c:	f800283a 	ret

0008aa20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8aa20:	defffd04 	addi	sp,sp,-12
   8aa24:	dfc00215 	stw	ra,8(sp)
   8aa28:	df000115 	stw	fp,4(sp)
   8aa2c:	df000104 	addi	fp,sp,4
   8aa30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8aa34:	008c2e40 	call	8c2e4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8aa38:	00800044 	movi	r2,1
   8aa3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8aa40:	e037883a 	mov	sp,fp
   8aa44:	dfc00117 	ldw	ra,4(sp)
   8aa48:	df000017 	ldw	fp,0(sp)
   8aa4c:	dec00204 	addi	sp,sp,8
   8aa50:	f800283a 	ret

0008aa54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8aa54:	defffe04 	addi	sp,sp,-8
   8aa58:	dfc00115 	stw	ra,4(sp)
   8aa5c:	df000015 	stw	fp,0(sp)
   8aa60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8aa64:	01000274 	movhi	r4,9
   8aa68:	2135dc04 	addi	r4,r4,-10384
   8aa6c:	000b883a 	mov	r5,zero
   8aa70:	000d883a 	mov	r6,zero
   8aa74:	008ac180 	call	8ac18 <altera_avalon_jtag_uart_init>
   8aa78:	01000274 	movhi	r4,9
   8aa7c:	2135d204 	addi	r4,r4,-10424
   8aa80:	008aa980 	call	8aa98 <alt_dev_reg>
}
   8aa84:	e037883a 	mov	sp,fp
   8aa88:	dfc00117 	ldw	ra,4(sp)
   8aa8c:	df000017 	ldw	fp,0(sp)
   8aa90:	dec00204 	addi	sp,sp,8
   8aa94:	f800283a 	ret

0008aa98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8aa98:	defffd04 	addi	sp,sp,-12
   8aa9c:	dfc00215 	stw	ra,8(sp)
   8aaa0:	df000115 	stw	fp,4(sp)
   8aaa4:	df000104 	addi	fp,sp,4
   8aaa8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8aaac:	e13fff17 	ldw	r4,-4(fp)
   8aab0:	01400274 	movhi	r5,9
   8aab4:	2979f204 	addi	r5,r5,-6200
   8aab8:	008b8480 	call	8b848 <alt_dev_llist_insert>
}
   8aabc:	e037883a 	mov	sp,fp
   8aac0:	dfc00117 	ldw	ra,4(sp)
   8aac4:	df000017 	ldw	fp,0(sp)
   8aac8:	dec00204 	addi	sp,sp,8
   8aacc:	f800283a 	ret

0008aad0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8aad0:	defffa04 	addi	sp,sp,-24
   8aad4:	dfc00515 	stw	ra,20(sp)
   8aad8:	df000415 	stw	fp,16(sp)
   8aadc:	df000404 	addi	fp,sp,16
   8aae0:	e13ffd15 	stw	r4,-12(fp)
   8aae4:	e17ffe15 	stw	r5,-8(fp)
   8aae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8aaec:	e0bffd17 	ldw	r2,-12(fp)
   8aaf0:	10800017 	ldw	r2,0(r2)
   8aaf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8aaf8:	e0bffc17 	ldw	r2,-16(fp)
   8aafc:	11000a04 	addi	r4,r2,40
   8ab00:	e0bffd17 	ldw	r2,-12(fp)
   8ab04:	11c00217 	ldw	r7,8(r2)
   8ab08:	e17ffe17 	ldw	r5,-8(fp)
   8ab0c:	e1bfff17 	ldw	r6,-4(fp)
   8ab10:	008b1180 	call	8b118 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8ab14:	e037883a 	mov	sp,fp
   8ab18:	dfc00117 	ldw	ra,4(sp)
   8ab1c:	df000017 	ldw	fp,0(sp)
   8ab20:	dec00204 	addi	sp,sp,8
   8ab24:	f800283a 	ret

0008ab28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8ab28:	defffa04 	addi	sp,sp,-24
   8ab2c:	dfc00515 	stw	ra,20(sp)
   8ab30:	df000415 	stw	fp,16(sp)
   8ab34:	df000404 	addi	fp,sp,16
   8ab38:	e13ffd15 	stw	r4,-12(fp)
   8ab3c:	e17ffe15 	stw	r5,-8(fp)
   8ab40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ab44:	e0bffd17 	ldw	r2,-12(fp)
   8ab48:	10800017 	ldw	r2,0(r2)
   8ab4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ab50:	e0bffc17 	ldw	r2,-16(fp)
   8ab54:	11000a04 	addi	r4,r2,40
   8ab58:	e0bffd17 	ldw	r2,-12(fp)
   8ab5c:	11c00217 	ldw	r7,8(r2)
   8ab60:	e17ffe17 	ldw	r5,-8(fp)
   8ab64:	e1bfff17 	ldw	r6,-4(fp)
   8ab68:	008b33c0 	call	8b33c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8ab6c:	e037883a 	mov	sp,fp
   8ab70:	dfc00117 	ldw	ra,4(sp)
   8ab74:	df000017 	ldw	fp,0(sp)
   8ab78:	dec00204 	addi	sp,sp,8
   8ab7c:	f800283a 	ret

0008ab80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8ab80:	defffc04 	addi	sp,sp,-16
   8ab84:	dfc00315 	stw	ra,12(sp)
   8ab88:	df000215 	stw	fp,8(sp)
   8ab8c:	df000204 	addi	fp,sp,8
   8ab90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ab94:	e0bfff17 	ldw	r2,-4(fp)
   8ab98:	10800017 	ldw	r2,0(r2)
   8ab9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8aba0:	e0bffe17 	ldw	r2,-8(fp)
   8aba4:	11000a04 	addi	r4,r2,40
   8aba8:	e0bfff17 	ldw	r2,-4(fp)
   8abac:	11400217 	ldw	r5,8(r2)
   8abb0:	008afb00 	call	8afb0 <altera_avalon_jtag_uart_close>
}
   8abb4:	e037883a 	mov	sp,fp
   8abb8:	dfc00117 	ldw	ra,4(sp)
   8abbc:	df000017 	ldw	fp,0(sp)
   8abc0:	dec00204 	addi	sp,sp,8
   8abc4:	f800283a 	ret

0008abc8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8abc8:	defffa04 	addi	sp,sp,-24
   8abcc:	dfc00515 	stw	ra,20(sp)
   8abd0:	df000415 	stw	fp,16(sp)
   8abd4:	df000404 	addi	fp,sp,16
   8abd8:	e13ffd15 	stw	r4,-12(fp)
   8abdc:	e17ffe15 	stw	r5,-8(fp)
   8abe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8abe4:	e0bffd17 	ldw	r2,-12(fp)
   8abe8:	10800017 	ldw	r2,0(r2)
   8abec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8abf0:	e0bffc17 	ldw	r2,-16(fp)
   8abf4:	11000a04 	addi	r4,r2,40
   8abf8:	e17ffe17 	ldw	r5,-8(fp)
   8abfc:	e1bfff17 	ldw	r6,-4(fp)
   8ac00:	008b0240 	call	8b024 <altera_avalon_jtag_uart_ioctl>
}
   8ac04:	e037883a 	mov	sp,fp
   8ac08:	dfc00117 	ldw	ra,4(sp)
   8ac0c:	df000017 	ldw	fp,0(sp)
   8ac10:	dec00204 	addi	sp,sp,8
   8ac14:	f800283a 	ret

0008ac18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8ac18:	defffa04 	addi	sp,sp,-24
   8ac1c:	dfc00515 	stw	ra,20(sp)
   8ac20:	df000415 	stw	fp,16(sp)
   8ac24:	df000404 	addi	fp,sp,16
   8ac28:	e13ffd15 	stw	r4,-12(fp)
   8ac2c:	e17ffe15 	stw	r5,-8(fp)
   8ac30:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ac34:	e0fffd17 	ldw	r3,-12(fp)
   8ac38:	00800044 	movi	r2,1
   8ac3c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8ac40:	e0bffd17 	ldw	r2,-12(fp)
   8ac44:	10800017 	ldw	r2,0(r2)
   8ac48:	11000104 	addi	r4,r2,4
   8ac4c:	e0bffd17 	ldw	r2,-12(fp)
   8ac50:	10800817 	ldw	r2,32(r2)
   8ac54:	1007883a 	mov	r3,r2
   8ac58:	2005883a 	mov	r2,r4
   8ac5c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8ac60:	e13ffe17 	ldw	r4,-8(fp)
   8ac64:	e17fff17 	ldw	r5,-4(fp)
   8ac68:	d8000015 	stw	zero,0(sp)
   8ac6c:	01800274 	movhi	r6,9
   8ac70:	31ab3604 	addi	r6,r6,-21288
   8ac74:	e1fffd17 	ldw	r7,-12(fp)
   8ac78:	008ba400 	call	8ba40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8ac7c:	e0bffd17 	ldw	r2,-12(fp)
   8ac80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8ac84:	e0bffd17 	ldw	r2,-12(fp)
   8ac88:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8ac8c:	00800274 	movhi	r2,9
   8ac90:	10809c04 	addi	r2,r2,624
   8ac94:	10800017 	ldw	r2,0(r2)
   8ac98:	100b883a 	mov	r5,r2
   8ac9c:	01800274 	movhi	r6,9
   8aca0:	31abc004 	addi	r6,r6,-20736
   8aca4:	e1fffd17 	ldw	r7,-12(fp)
   8aca8:	008b57c0 	call	8b57c <alt_alarm_start>
   8acac:	1004403a 	cmpge	r2,r2,zero
   8acb0:	1000041e 	bne	r2,zero,8acc4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8acb4:	e0fffd17 	ldw	r3,-12(fp)
   8acb8:	00a00034 	movhi	r2,32768
   8acbc:	10bfffc4 	addi	r2,r2,-1
   8acc0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8acc4:	e037883a 	mov	sp,fp
   8acc8:	dfc00117 	ldw	ra,4(sp)
   8accc:	df000017 	ldw	fp,0(sp)
   8acd0:	dec00204 	addi	sp,sp,8
   8acd4:	f800283a 	ret

0008acd8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8acd8:	defff804 	addi	sp,sp,-32
   8acdc:	df000715 	stw	fp,28(sp)
   8ace0:	df000704 	addi	fp,sp,28
   8ace4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8ace8:	e0bfff17 	ldw	r2,-4(fp)
   8acec:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8acf0:	e0bffe17 	ldw	r2,-8(fp)
   8acf4:	10800017 	ldw	r2,0(r2)
   8acf8:	e0bffd15 	stw	r2,-12(fp)
   8acfc:	00000006 	br	8ad00 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ad00:	e0bffd17 	ldw	r2,-12(fp)
   8ad04:	10800104 	addi	r2,r2,4
   8ad08:	10800037 	ldwio	r2,0(r2)
   8ad0c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8ad10:	e0bffc17 	ldw	r2,-16(fp)
   8ad14:	1080c00c 	andi	r2,r2,768
   8ad18:	1005003a 	cmpeq	r2,r2,zero
   8ad1c:	1000741e 	bne	r2,zero,8aef0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8ad20:	e0bffc17 	ldw	r2,-16(fp)
   8ad24:	1080400c 	andi	r2,r2,256
   8ad28:	1005003a 	cmpeq	r2,r2,zero
   8ad2c:	1000351e 	bne	r2,zero,8ae04 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8ad30:	00800074 	movhi	r2,1
   8ad34:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ad38:	e0bffe17 	ldw	r2,-8(fp)
   8ad3c:	10800a17 	ldw	r2,40(r2)
   8ad40:	10800044 	addi	r2,r2,1
   8ad44:	1081ffcc 	andi	r2,r2,2047
   8ad48:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8ad4c:	e0bffe17 	ldw	r2,-8(fp)
   8ad50:	10c00b17 	ldw	r3,44(r2)
   8ad54:	e0bffa17 	ldw	r2,-24(fp)
   8ad58:	18801626 	beq	r3,r2,8adb4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8ad5c:	e0bffd17 	ldw	r2,-12(fp)
   8ad60:	10800037 	ldwio	r2,0(r2)
   8ad64:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8ad68:	e0bffb17 	ldw	r2,-20(fp)
   8ad6c:	10a0000c 	andi	r2,r2,32768
   8ad70:	1005003a 	cmpeq	r2,r2,zero
   8ad74:	10000f1e 	bne	r2,zero,8adb4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8ad78:	e0bffe17 	ldw	r2,-8(fp)
   8ad7c:	10c00a17 	ldw	r3,40(r2)
   8ad80:	e0bffb17 	ldw	r2,-20(fp)
   8ad84:	1009883a 	mov	r4,r2
   8ad88:	e0bffe17 	ldw	r2,-8(fp)
   8ad8c:	1885883a 	add	r2,r3,r2
   8ad90:	10800e04 	addi	r2,r2,56
   8ad94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ad98:	e0bffe17 	ldw	r2,-8(fp)
   8ad9c:	10800a17 	ldw	r2,40(r2)
   8ada0:	10800044 	addi	r2,r2,1
   8ada4:	10c1ffcc 	andi	r3,r2,2047
   8ada8:	e0bffe17 	ldw	r2,-8(fp)
   8adac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8adb0:	003fe106 	br	8ad38 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8adb4:	e0bffb17 	ldw	r2,-20(fp)
   8adb8:	10bfffec 	andhi	r2,r2,65535
   8adbc:	1005003a 	cmpeq	r2,r2,zero
   8adc0:	1000101e 	bne	r2,zero,8ae04 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8adc4:	e0bffe17 	ldw	r2,-8(fp)
   8adc8:	10c00817 	ldw	r3,32(r2)
   8adcc:	00bfff84 	movi	r2,-2
   8add0:	1886703a 	and	r3,r3,r2
   8add4:	e0bffe17 	ldw	r2,-8(fp)
   8add8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8addc:	e0bffd17 	ldw	r2,-12(fp)
   8ade0:	11000104 	addi	r4,r2,4
   8ade4:	e0bffe17 	ldw	r2,-8(fp)
   8ade8:	10800817 	ldw	r2,32(r2)
   8adec:	1007883a 	mov	r3,r2
   8adf0:	2005883a 	mov	r2,r4
   8adf4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8adf8:	e0bffd17 	ldw	r2,-12(fp)
   8adfc:	10800104 	addi	r2,r2,4
   8ae00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8ae04:	e0bffc17 	ldw	r2,-16(fp)
   8ae08:	1080800c 	andi	r2,r2,512
   8ae0c:	1005003a 	cmpeq	r2,r2,zero
   8ae10:	103fbb1e 	bne	r2,zero,8ad00 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8ae14:	e0bffc17 	ldw	r2,-16(fp)
   8ae18:	10bfffec 	andhi	r2,r2,65535
   8ae1c:	1004d43a 	srli	r2,r2,16
   8ae20:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8ae24:	00001506 	br	8ae7c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8ae28:	e13ffd17 	ldw	r4,-12(fp)
   8ae2c:	e0bffe17 	ldw	r2,-8(fp)
   8ae30:	10c00d17 	ldw	r3,52(r2)
   8ae34:	e0bffe17 	ldw	r2,-8(fp)
   8ae38:	1885883a 	add	r2,r3,r2
   8ae3c:	10820e04 	addi	r2,r2,2104
   8ae40:	10800003 	ldbu	r2,0(r2)
   8ae44:	10c03fcc 	andi	r3,r2,255
   8ae48:	18c0201c 	xori	r3,r3,128
   8ae4c:	18ffe004 	addi	r3,r3,-128
   8ae50:	2005883a 	mov	r2,r4
   8ae54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ae58:	e0bffe17 	ldw	r2,-8(fp)
   8ae5c:	10800d17 	ldw	r2,52(r2)
   8ae60:	10800044 	addi	r2,r2,1
   8ae64:	10c1ffcc 	andi	r3,r2,2047
   8ae68:	e0bffe17 	ldw	r2,-8(fp)
   8ae6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8ae70:	e0bff917 	ldw	r2,-28(fp)
   8ae74:	10bfffc4 	addi	r2,r2,-1
   8ae78:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8ae7c:	e0bff917 	ldw	r2,-28(fp)
   8ae80:	1005003a 	cmpeq	r2,r2,zero
   8ae84:	1000051e 	bne	r2,zero,8ae9c <altera_avalon_jtag_uart_irq+0x1c4>
   8ae88:	e0bffe17 	ldw	r2,-8(fp)
   8ae8c:	10c00d17 	ldw	r3,52(r2)
   8ae90:	e0bffe17 	ldw	r2,-8(fp)
   8ae94:	10800c17 	ldw	r2,48(r2)
   8ae98:	18bfe31e 	bne	r3,r2,8ae28 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8ae9c:	e0bff917 	ldw	r2,-28(fp)
   8aea0:	1005003a 	cmpeq	r2,r2,zero
   8aea4:	103f961e 	bne	r2,zero,8ad00 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8aea8:	e0bffe17 	ldw	r2,-8(fp)
   8aeac:	10c00817 	ldw	r3,32(r2)
   8aeb0:	00bfff44 	movi	r2,-3
   8aeb4:	1886703a 	and	r3,r3,r2
   8aeb8:	e0bffe17 	ldw	r2,-8(fp)
   8aebc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8aec0:	e0bffe17 	ldw	r2,-8(fp)
   8aec4:	10800017 	ldw	r2,0(r2)
   8aec8:	11000104 	addi	r4,r2,4
   8aecc:	e0bffe17 	ldw	r2,-8(fp)
   8aed0:	10800817 	ldw	r2,32(r2)
   8aed4:	1007883a 	mov	r3,r2
   8aed8:	2005883a 	mov	r2,r4
   8aedc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8aee0:	e0bffd17 	ldw	r2,-12(fp)
   8aee4:	10800104 	addi	r2,r2,4
   8aee8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8aeec:	003f8406 	br	8ad00 <altera_avalon_jtag_uart_irq+0x28>
}
   8aef0:	e037883a 	mov	sp,fp
   8aef4:	df000017 	ldw	fp,0(sp)
   8aef8:	dec00104 	addi	sp,sp,4
   8aefc:	f800283a 	ret

0008af00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8af00:	defffc04 	addi	sp,sp,-16
   8af04:	df000315 	stw	fp,12(sp)
   8af08:	df000304 	addi	fp,sp,12
   8af0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8af10:	e0bfff17 	ldw	r2,-4(fp)
   8af14:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8af18:	e0bffe17 	ldw	r2,-8(fp)
   8af1c:	10800017 	ldw	r2,0(r2)
   8af20:	10800104 	addi	r2,r2,4
   8af24:	10800037 	ldwio	r2,0(r2)
   8af28:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8af2c:	e0bffd17 	ldw	r2,-12(fp)
   8af30:	1081000c 	andi	r2,r2,1024
   8af34:	1005003a 	cmpeq	r2,r2,zero
   8af38:	10000c1e 	bne	r2,zero,8af6c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8af3c:	e0bffe17 	ldw	r2,-8(fp)
   8af40:	10800017 	ldw	r2,0(r2)
   8af44:	11000104 	addi	r4,r2,4
   8af48:	e0bffe17 	ldw	r2,-8(fp)
   8af4c:	10800817 	ldw	r2,32(r2)
   8af50:	10810014 	ori	r2,r2,1024
   8af54:	1007883a 	mov	r3,r2
   8af58:	2005883a 	mov	r2,r4
   8af5c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8af60:	e0bffe17 	ldw	r2,-8(fp)
   8af64:	10000915 	stw	zero,36(r2)
   8af68:	00000a06 	br	8af94 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8af6c:	e0bffe17 	ldw	r2,-8(fp)
   8af70:	10c00917 	ldw	r3,36(r2)
   8af74:	00a00034 	movhi	r2,32768
   8af78:	10bfff04 	addi	r2,r2,-4
   8af7c:	10c00536 	bltu	r2,r3,8af94 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8af80:	e0bffe17 	ldw	r2,-8(fp)
   8af84:	10800917 	ldw	r2,36(r2)
   8af88:	10c00044 	addi	r3,r2,1
   8af8c:	e0bffe17 	ldw	r2,-8(fp)
   8af90:	10c00915 	stw	r3,36(r2)
   8af94:	00800274 	movhi	r2,9
   8af98:	10809c04 	addi	r2,r2,624
   8af9c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8afa0:	e037883a 	mov	sp,fp
   8afa4:	df000017 	ldw	fp,0(sp)
   8afa8:	dec00104 	addi	sp,sp,4
   8afac:	f800283a 	ret

0008afb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8afb0:	defffc04 	addi	sp,sp,-16
   8afb4:	df000315 	stw	fp,12(sp)
   8afb8:	df000304 	addi	fp,sp,12
   8afbc:	e13ffd15 	stw	r4,-12(fp)
   8afc0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8afc4:	00000706 	br	8afe4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8afc8:	e0bffe17 	ldw	r2,-8(fp)
   8afcc:	1090000c 	andi	r2,r2,16384
   8afd0:	1005003a 	cmpeq	r2,r2,zero
   8afd4:	1000031e 	bne	r2,zero,8afe4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8afd8:	00bffd44 	movi	r2,-11
   8afdc:	e0bfff15 	stw	r2,-4(fp)
   8afe0:	00000b06 	br	8b010 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8afe4:	e0bffd17 	ldw	r2,-12(fp)
   8afe8:	10c00d17 	ldw	r3,52(r2)
   8afec:	e0bffd17 	ldw	r2,-12(fp)
   8aff0:	10800c17 	ldw	r2,48(r2)
   8aff4:	18800526 	beq	r3,r2,8b00c <altera_avalon_jtag_uart_close+0x5c>
   8aff8:	e0bffd17 	ldw	r2,-12(fp)
   8affc:	10c00917 	ldw	r3,36(r2)
   8b000:	e0bffd17 	ldw	r2,-12(fp)
   8b004:	10800117 	ldw	r2,4(r2)
   8b008:	18bfef36 	bltu	r3,r2,8afc8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8b00c:	e03fff15 	stw	zero,-4(fp)
   8b010:	e0bfff17 	ldw	r2,-4(fp)
}
   8b014:	e037883a 	mov	sp,fp
   8b018:	df000017 	ldw	fp,0(sp)
   8b01c:	dec00104 	addi	sp,sp,4
   8b020:	f800283a 	ret

0008b024 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8b024:	defff804 	addi	sp,sp,-32
   8b028:	df000715 	stw	fp,28(sp)
   8b02c:	df000704 	addi	fp,sp,28
   8b030:	e13ffb15 	stw	r4,-20(fp)
   8b034:	e17ffc15 	stw	r5,-16(fp)
   8b038:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8b03c:	00bff9c4 	movi	r2,-25
   8b040:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8b044:	e0bffc17 	ldw	r2,-16(fp)
   8b048:	e0bfff15 	stw	r2,-4(fp)
   8b04c:	e0ffff17 	ldw	r3,-4(fp)
   8b050:	189a8060 	cmpeqi	r2,r3,27137
   8b054:	1000041e 	bne	r2,zero,8b068 <altera_avalon_jtag_uart_ioctl+0x44>
   8b058:	e0ffff17 	ldw	r3,-4(fp)
   8b05c:	189a80a0 	cmpeqi	r2,r3,27138
   8b060:	10001b1e 	bne	r2,zero,8b0d0 <altera_avalon_jtag_uart_ioctl+0xac>
   8b064:	00002706 	br	8b104 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8b068:	e0bffb17 	ldw	r2,-20(fp)
   8b06c:	10c00117 	ldw	r3,4(r2)
   8b070:	00a00034 	movhi	r2,32768
   8b074:	10bfffc4 	addi	r2,r2,-1
   8b078:	18802226 	beq	r3,r2,8b104 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8b07c:	e0bffd17 	ldw	r2,-12(fp)
   8b080:	10800017 	ldw	r2,0(r2)
   8b084:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8b088:	e0bff917 	ldw	r2,-28(fp)
   8b08c:	10800090 	cmplti	r2,r2,2
   8b090:	1000071e 	bne	r2,zero,8b0b0 <altera_avalon_jtag_uart_ioctl+0x8c>
   8b094:	e0fff917 	ldw	r3,-28(fp)
   8b098:	00a00034 	movhi	r2,32768
   8b09c:	10bfffc4 	addi	r2,r2,-1
   8b0a0:	18800326 	beq	r3,r2,8b0b0 <altera_avalon_jtag_uart_ioctl+0x8c>
   8b0a4:	e0bff917 	ldw	r2,-28(fp)
   8b0a8:	e0bffe15 	stw	r2,-8(fp)
   8b0ac:	00000306 	br	8b0bc <altera_avalon_jtag_uart_ioctl+0x98>
   8b0b0:	00e00034 	movhi	r3,32768
   8b0b4:	18ffff84 	addi	r3,r3,-2
   8b0b8:	e0fffe15 	stw	r3,-8(fp)
   8b0bc:	e0bffb17 	ldw	r2,-20(fp)
   8b0c0:	e0fffe17 	ldw	r3,-8(fp)
   8b0c4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8b0c8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8b0cc:	00000d06 	br	8b104 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8b0d0:	e0bffb17 	ldw	r2,-20(fp)
   8b0d4:	10c00117 	ldw	r3,4(r2)
   8b0d8:	00a00034 	movhi	r2,32768
   8b0dc:	10bfffc4 	addi	r2,r2,-1
   8b0e0:	18800826 	beq	r3,r2,8b104 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8b0e4:	e13ffd17 	ldw	r4,-12(fp)
   8b0e8:	e0bffb17 	ldw	r2,-20(fp)
   8b0ec:	10c00917 	ldw	r3,36(r2)
   8b0f0:	e0bffb17 	ldw	r2,-20(fp)
   8b0f4:	10800117 	ldw	r2,4(r2)
   8b0f8:	1885803a 	cmpltu	r2,r3,r2
   8b0fc:	20800015 	stw	r2,0(r4)
      rc = 0;
   8b100:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8b104:	e0bffa17 	ldw	r2,-24(fp)
}
   8b108:	e037883a 	mov	sp,fp
   8b10c:	df000017 	ldw	fp,0(sp)
   8b110:	dec00104 	addi	sp,sp,4
   8b114:	f800283a 	ret

0008b118 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8b118:	defff204 	addi	sp,sp,-56
   8b11c:	dfc00d15 	stw	ra,52(sp)
   8b120:	df000c15 	stw	fp,48(sp)
   8b124:	df000c04 	addi	fp,sp,48
   8b128:	e13ffb15 	stw	r4,-20(fp)
   8b12c:	e17ffc15 	stw	r5,-16(fp)
   8b130:	e1bffd15 	stw	r6,-12(fp)
   8b134:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8b138:	e0bffc17 	ldw	r2,-16(fp)
   8b13c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8b140:	00004806 	br	8b264 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8b144:	e0bffb17 	ldw	r2,-20(fp)
   8b148:	10800a17 	ldw	r2,40(r2)
   8b14c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8b150:	e0bffb17 	ldw	r2,-20(fp)
   8b154:	10800b17 	ldw	r2,44(r2)
   8b158:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8b15c:	e0fff717 	ldw	r3,-36(fp)
   8b160:	e0bff617 	ldw	r2,-40(fp)
   8b164:	18800536 	bltu	r3,r2,8b17c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8b168:	e0bff717 	ldw	r2,-36(fp)
   8b16c:	e0fff617 	ldw	r3,-40(fp)
   8b170:	10c5c83a 	sub	r2,r2,r3
   8b174:	e0bff815 	stw	r2,-32(fp)
   8b178:	00000406 	br	8b18c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8b17c:	00820004 	movi	r2,2048
   8b180:	e0fff617 	ldw	r3,-40(fp)
   8b184:	10c5c83a 	sub	r2,r2,r3
   8b188:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8b18c:	e0bff817 	ldw	r2,-32(fp)
   8b190:	1005003a 	cmpeq	r2,r2,zero
   8b194:	10001f1e 	bne	r2,zero,8b214 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8b198:	e0fffd17 	ldw	r3,-12(fp)
   8b19c:	e0bff817 	ldw	r2,-32(fp)
   8b1a0:	1880022e 	bgeu	r3,r2,8b1ac <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8b1a4:	e0bffd17 	ldw	r2,-12(fp)
   8b1a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8b1ac:	e0bffb17 	ldw	r2,-20(fp)
   8b1b0:	10c00e04 	addi	r3,r2,56
   8b1b4:	e0bff617 	ldw	r2,-40(fp)
   8b1b8:	1887883a 	add	r3,r3,r2
   8b1bc:	e0bffa17 	ldw	r2,-24(fp)
   8b1c0:	1009883a 	mov	r4,r2
   8b1c4:	180b883a 	mov	r5,r3
   8b1c8:	e1bff817 	ldw	r6,-32(fp)
   8b1cc:	00857d00 	call	857d0 <memcpy>
      ptr   += n;
   8b1d0:	e0fff817 	ldw	r3,-32(fp)
   8b1d4:	e0bffa17 	ldw	r2,-24(fp)
   8b1d8:	10c5883a 	add	r2,r2,r3
   8b1dc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8b1e0:	e0fffd17 	ldw	r3,-12(fp)
   8b1e4:	e0bff817 	ldw	r2,-32(fp)
   8b1e8:	1885c83a 	sub	r2,r3,r2
   8b1ec:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b1f0:	e0fff617 	ldw	r3,-40(fp)
   8b1f4:	e0bff817 	ldw	r2,-32(fp)
   8b1f8:	1885883a 	add	r2,r3,r2
   8b1fc:	10c1ffcc 	andi	r3,r2,2047
   8b200:	e0bffb17 	ldw	r2,-20(fp)
   8b204:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8b208:	e0bffd17 	ldw	r2,-12(fp)
   8b20c:	10800048 	cmpgei	r2,r2,1
   8b210:	103fcc1e 	bne	r2,zero,8b144 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8b214:	e0fffa17 	ldw	r3,-24(fp)
   8b218:	e0bffc17 	ldw	r2,-16(fp)
   8b21c:	1880141e 	bne	r3,r2,8b270 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8b220:	e0bffe17 	ldw	r2,-8(fp)
   8b224:	1090000c 	andi	r2,r2,16384
   8b228:	1004c03a 	cmpne	r2,r2,zero
   8b22c:	1000101e 	bne	r2,zero,8b270 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8b230:	e0bffb17 	ldw	r2,-20(fp)
   8b234:	10c00a17 	ldw	r3,40(r2)
   8b238:	e0bff717 	ldw	r2,-36(fp)
   8b23c:	1880051e 	bne	r3,r2,8b254 <altera_avalon_jtag_uart_read+0x13c>
   8b240:	e0bffb17 	ldw	r2,-20(fp)
   8b244:	10c00917 	ldw	r3,36(r2)
   8b248:	e0bffb17 	ldw	r2,-20(fp)
   8b24c:	10800117 	ldw	r2,4(r2)
   8b250:	18bff736 	bltu	r3,r2,8b230 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8b254:	e0bffb17 	ldw	r2,-20(fp)
   8b258:	10c00a17 	ldw	r3,40(r2)
   8b25c:	e0bff717 	ldw	r2,-36(fp)
   8b260:	18800326 	beq	r3,r2,8b270 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8b264:	e0bffd17 	ldw	r2,-12(fp)
   8b268:	10800048 	cmpgei	r2,r2,1
   8b26c:	103fb51e 	bne	r2,zero,8b144 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8b270:	e0fffa17 	ldw	r3,-24(fp)
   8b274:	e0bffc17 	ldw	r2,-16(fp)
   8b278:	18801926 	beq	r3,r2,8b2e0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b27c:	0005303a 	rdctl	r2,status
   8b280:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b284:	e0fff517 	ldw	r3,-44(fp)
   8b288:	00bfff84 	movi	r2,-2
   8b28c:	1884703a 	and	r2,r3,r2
   8b290:	1001703a 	wrctl	status,r2
  
  return context;
   8b294:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8b298:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b29c:	e0bffb17 	ldw	r2,-20(fp)
   8b2a0:	10800817 	ldw	r2,32(r2)
   8b2a4:	10c00054 	ori	r3,r2,1
   8b2a8:	e0bffb17 	ldw	r2,-20(fp)
   8b2ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b2b0:	e0bffb17 	ldw	r2,-20(fp)
   8b2b4:	10800017 	ldw	r2,0(r2)
   8b2b8:	11000104 	addi	r4,r2,4
   8b2bc:	e0bffb17 	ldw	r2,-20(fp)
   8b2c0:	10800817 	ldw	r2,32(r2)
   8b2c4:	1007883a 	mov	r3,r2
   8b2c8:	2005883a 	mov	r2,r4
   8b2cc:	10c00035 	stwio	r3,0(r2)
   8b2d0:	e0bff917 	ldw	r2,-28(fp)
   8b2d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b2d8:	e0bff417 	ldw	r2,-48(fp)
   8b2dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8b2e0:	e0fffa17 	ldw	r3,-24(fp)
   8b2e4:	e0bffc17 	ldw	r2,-16(fp)
   8b2e8:	18800526 	beq	r3,r2,8b300 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8b2ec:	e0fffa17 	ldw	r3,-24(fp)
   8b2f0:	e0bffc17 	ldw	r2,-16(fp)
   8b2f4:	1887c83a 	sub	r3,r3,r2
   8b2f8:	e0ffff15 	stw	r3,-4(fp)
   8b2fc:	00000906 	br	8b324 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8b300:	e0bffe17 	ldw	r2,-8(fp)
   8b304:	1090000c 	andi	r2,r2,16384
   8b308:	1005003a 	cmpeq	r2,r2,zero
   8b30c:	1000031e 	bne	r2,zero,8b31c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8b310:	00bffd44 	movi	r2,-11
   8b314:	e0bfff15 	stw	r2,-4(fp)
   8b318:	00000206 	br	8b324 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8b31c:	00bffec4 	movi	r2,-5
   8b320:	e0bfff15 	stw	r2,-4(fp)
   8b324:	e0bfff17 	ldw	r2,-4(fp)
}
   8b328:	e037883a 	mov	sp,fp
   8b32c:	dfc00117 	ldw	ra,4(sp)
   8b330:	df000017 	ldw	fp,0(sp)
   8b334:	dec00204 	addi	sp,sp,8
   8b338:	f800283a 	ret

0008b33c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8b33c:	defff204 	addi	sp,sp,-56
   8b340:	dfc00d15 	stw	ra,52(sp)
   8b344:	df000c15 	stw	fp,48(sp)
   8b348:	df000c04 	addi	fp,sp,48
   8b34c:	e13ffb15 	stw	r4,-20(fp)
   8b350:	e17ffc15 	stw	r5,-16(fp)
   8b354:	e1bffd15 	stw	r6,-12(fp)
   8b358:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8b35c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8b360:	e0bffc17 	ldw	r2,-16(fp)
   8b364:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8b368:	00003a06 	br	8b454 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8b36c:	e0bffb17 	ldw	r2,-20(fp)
   8b370:	10800c17 	ldw	r2,48(r2)
   8b374:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8b378:	e0bffb17 	ldw	r2,-20(fp)
   8b37c:	10800d17 	ldw	r2,52(r2)
   8b380:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8b384:	e0fffa17 	ldw	r3,-24(fp)
   8b388:	e0bff917 	ldw	r2,-28(fp)
   8b38c:	1880062e 	bgeu	r3,r2,8b3a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8b390:	e0fff917 	ldw	r3,-28(fp)
   8b394:	e0bffa17 	ldw	r2,-24(fp)
   8b398:	1885c83a 	sub	r2,r3,r2
   8b39c:	10bfffc4 	addi	r2,r2,-1
   8b3a0:	e0bff815 	stw	r2,-32(fp)
   8b3a4:	00000c06 	br	8b3d8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8b3a8:	e0bff917 	ldw	r2,-28(fp)
   8b3ac:	1005003a 	cmpeq	r2,r2,zero
   8b3b0:	1000051e 	bne	r2,zero,8b3c8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8b3b4:	00820004 	movi	r2,2048
   8b3b8:	e0fffa17 	ldw	r3,-24(fp)
   8b3bc:	10c5c83a 	sub	r2,r2,r3
   8b3c0:	e0bff815 	stw	r2,-32(fp)
   8b3c4:	00000406 	br	8b3d8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8b3c8:	0081ffc4 	movi	r2,2047
   8b3cc:	e0fffa17 	ldw	r3,-24(fp)
   8b3d0:	10c5c83a 	sub	r2,r2,r3
   8b3d4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8b3d8:	e0bff817 	ldw	r2,-32(fp)
   8b3dc:	1005003a 	cmpeq	r2,r2,zero
   8b3e0:	10001f1e 	bne	r2,zero,8b460 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8b3e4:	e0fffd17 	ldw	r3,-12(fp)
   8b3e8:	e0bff817 	ldw	r2,-32(fp)
   8b3ec:	1880022e 	bgeu	r3,r2,8b3f8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8b3f0:	e0bffd17 	ldw	r2,-12(fp)
   8b3f4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8b3f8:	e0bffb17 	ldw	r2,-20(fp)
   8b3fc:	10c20e04 	addi	r3,r2,2104
   8b400:	e0bffa17 	ldw	r2,-24(fp)
   8b404:	1885883a 	add	r2,r3,r2
   8b408:	e0fffc17 	ldw	r3,-16(fp)
   8b40c:	1009883a 	mov	r4,r2
   8b410:	180b883a 	mov	r5,r3
   8b414:	e1bff817 	ldw	r6,-32(fp)
   8b418:	00857d00 	call	857d0 <memcpy>
      ptr   += n;
   8b41c:	e0fff817 	ldw	r3,-32(fp)
   8b420:	e0bffc17 	ldw	r2,-16(fp)
   8b424:	10c5883a 	add	r2,r2,r3
   8b428:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8b42c:	e0fffd17 	ldw	r3,-12(fp)
   8b430:	e0bff817 	ldw	r2,-32(fp)
   8b434:	1885c83a 	sub	r2,r3,r2
   8b438:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b43c:	e0fffa17 	ldw	r3,-24(fp)
   8b440:	e0bff817 	ldw	r2,-32(fp)
   8b444:	1885883a 	add	r2,r3,r2
   8b448:	10c1ffcc 	andi	r3,r2,2047
   8b44c:	e0bffb17 	ldw	r2,-20(fp)
   8b450:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8b454:	e0bffd17 	ldw	r2,-12(fp)
   8b458:	10800048 	cmpgei	r2,r2,1
   8b45c:	103fc31e 	bne	r2,zero,8b36c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b460:	0005303a 	rdctl	r2,status
   8b464:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b468:	e0fff517 	ldw	r3,-44(fp)
   8b46c:	00bfff84 	movi	r2,-2
   8b470:	1884703a 	and	r2,r3,r2
   8b474:	1001703a 	wrctl	status,r2
  
  return context;
   8b478:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8b47c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b480:	e0bffb17 	ldw	r2,-20(fp)
   8b484:	10800817 	ldw	r2,32(r2)
   8b488:	10c00094 	ori	r3,r2,2
   8b48c:	e0bffb17 	ldw	r2,-20(fp)
   8b490:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b494:	e0bffb17 	ldw	r2,-20(fp)
   8b498:	10800017 	ldw	r2,0(r2)
   8b49c:	11000104 	addi	r4,r2,4
   8b4a0:	e0bffb17 	ldw	r2,-20(fp)
   8b4a4:	10800817 	ldw	r2,32(r2)
   8b4a8:	1007883a 	mov	r3,r2
   8b4ac:	2005883a 	mov	r2,r4
   8b4b0:	10c00035 	stwio	r3,0(r2)
   8b4b4:	e0bff717 	ldw	r2,-36(fp)
   8b4b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b4bc:	e0bff417 	ldw	r2,-48(fp)
   8b4c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8b4c4:	e0bffd17 	ldw	r2,-12(fp)
   8b4c8:	10800050 	cmplti	r2,r2,1
   8b4cc:	1000111e 	bne	r2,zero,8b514 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8b4d0:	e0bffe17 	ldw	r2,-8(fp)
   8b4d4:	1090000c 	andi	r2,r2,16384
   8b4d8:	1004c03a 	cmpne	r2,r2,zero
   8b4dc:	1000101e 	bne	r2,zero,8b520 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8b4e0:	e0bffb17 	ldw	r2,-20(fp)
   8b4e4:	10c00d17 	ldw	r3,52(r2)
   8b4e8:	e0bff917 	ldw	r2,-28(fp)
   8b4ec:	1880051e 	bne	r3,r2,8b504 <altera_avalon_jtag_uart_write+0x1c8>
   8b4f0:	e0bffb17 	ldw	r2,-20(fp)
   8b4f4:	10c00917 	ldw	r3,36(r2)
   8b4f8:	e0bffb17 	ldw	r2,-20(fp)
   8b4fc:	10800117 	ldw	r2,4(r2)
   8b500:	18bff736 	bltu	r3,r2,8b4e0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8b504:	e0bffb17 	ldw	r2,-20(fp)
   8b508:	10c00d17 	ldw	r3,52(r2)
   8b50c:	e0bff917 	ldw	r2,-28(fp)
   8b510:	18800326 	beq	r3,r2,8b520 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   8b514:	e0bffd17 	ldw	r2,-12(fp)
   8b518:	10800048 	cmpgei	r2,r2,1
   8b51c:	103fcd1e 	bne	r2,zero,8b454 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8b520:	e0fffc17 	ldw	r3,-16(fp)
   8b524:	e0bff617 	ldw	r2,-40(fp)
   8b528:	18800526 	beq	r3,r2,8b540 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8b52c:	e0fffc17 	ldw	r3,-16(fp)
   8b530:	e0bff617 	ldw	r2,-40(fp)
   8b534:	1887c83a 	sub	r3,r3,r2
   8b538:	e0ffff15 	stw	r3,-4(fp)
   8b53c:	00000906 	br	8b564 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8b540:	e0bffe17 	ldw	r2,-8(fp)
   8b544:	1090000c 	andi	r2,r2,16384
   8b548:	1005003a 	cmpeq	r2,r2,zero
   8b54c:	1000031e 	bne	r2,zero,8b55c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8b550:	00bffd44 	movi	r2,-11
   8b554:	e0bfff15 	stw	r2,-4(fp)
   8b558:	00000206 	br	8b564 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8b55c:	00bffec4 	movi	r2,-5
   8b560:	e0bfff15 	stw	r2,-4(fp)
   8b564:	e0bfff17 	ldw	r2,-4(fp)
}
   8b568:	e037883a 	mov	sp,fp
   8b56c:	dfc00117 	ldw	ra,4(sp)
   8b570:	df000017 	ldw	fp,0(sp)
   8b574:	dec00204 	addi	sp,sp,8
   8b578:	f800283a 	ret

0008b57c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8b57c:	defff404 	addi	sp,sp,-48
   8b580:	df000b15 	stw	fp,44(sp)
   8b584:	df000b04 	addi	fp,sp,44
   8b588:	e13ffb15 	stw	r4,-20(fp)
   8b58c:	e17ffc15 	stw	r5,-16(fp)
   8b590:	e1bffd15 	stw	r6,-12(fp)
   8b594:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8b598:	e03ff915 	stw	zero,-28(fp)
   8b59c:	00800274 	movhi	r2,9
   8b5a0:	10809c04 	addi	r2,r2,624
   8b5a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8b5a8:	1005003a 	cmpeq	r2,r2,zero
   8b5ac:	1000411e 	bne	r2,zero,8b6b4 <alt_alarm_start+0x138>
  {
    if (alarm)
   8b5b0:	e0bffb17 	ldw	r2,-20(fp)
   8b5b4:	1005003a 	cmpeq	r2,r2,zero
   8b5b8:	10003b1e 	bne	r2,zero,8b6a8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8b5bc:	e0fffb17 	ldw	r3,-20(fp)
   8b5c0:	e0bffd17 	ldw	r2,-12(fp)
   8b5c4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8b5c8:	e0fffb17 	ldw	r3,-20(fp)
   8b5cc:	e0bffe17 	ldw	r2,-8(fp)
   8b5d0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b5d4:	0005303a 	rdctl	r2,status
   8b5d8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b5dc:	e0fff817 	ldw	r3,-32(fp)
   8b5e0:	00bfff84 	movi	r2,-2
   8b5e4:	1884703a 	and	r2,r3,r2
   8b5e8:	1001703a 	wrctl	status,r2
  
  return context;
   8b5ec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8b5f0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8b5f4:	00800274 	movhi	r2,9
   8b5f8:	10809d04 	addi	r2,r2,628
   8b5fc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8b600:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8b604:	e0fffc17 	ldw	r3,-16(fp)
   8b608:	e0bff917 	ldw	r2,-28(fp)
   8b60c:	1885883a 	add	r2,r3,r2
   8b610:	10c00044 	addi	r3,r2,1
   8b614:	e0bffb17 	ldw	r2,-20(fp)
   8b618:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8b61c:	e0bffb17 	ldw	r2,-20(fp)
   8b620:	10c00217 	ldw	r3,8(r2)
   8b624:	e0bff917 	ldw	r2,-28(fp)
   8b628:	1880042e 	bgeu	r3,r2,8b63c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8b62c:	e0fffb17 	ldw	r3,-20(fp)
   8b630:	00800044 	movi	r2,1
   8b634:	18800405 	stb	r2,16(r3)
   8b638:	00000206 	br	8b644 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8b63c:	e0bffb17 	ldw	r2,-20(fp)
   8b640:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8b644:	e0fffb17 	ldw	r3,-20(fp)
   8b648:	00800274 	movhi	r2,9
   8b64c:	10b9f804 	addi	r2,r2,-6176
   8b650:	e0bff615 	stw	r2,-40(fp)
   8b654:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b658:	e0fff717 	ldw	r3,-36(fp)
   8b65c:	e0bff617 	ldw	r2,-40(fp)
   8b660:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8b664:	e0bff617 	ldw	r2,-40(fp)
   8b668:	10c00017 	ldw	r3,0(r2)
   8b66c:	e0bff717 	ldw	r2,-36(fp)
   8b670:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b674:	e0bff617 	ldw	r2,-40(fp)
   8b678:	10c00017 	ldw	r3,0(r2)
   8b67c:	e0bff717 	ldw	r2,-36(fp)
   8b680:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8b684:	e0fff617 	ldw	r3,-40(fp)
   8b688:	e0bff717 	ldw	r2,-36(fp)
   8b68c:	18800015 	stw	r2,0(r3)
   8b690:	e0bffa17 	ldw	r2,-24(fp)
   8b694:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b698:	e0bff517 	ldw	r2,-44(fp)
   8b69c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8b6a0:	e03fff15 	stw	zero,-4(fp)
   8b6a4:	00000506 	br	8b6bc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8b6a8:	00bffa84 	movi	r2,-22
   8b6ac:	e0bfff15 	stw	r2,-4(fp)
   8b6b0:	00000206 	br	8b6bc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8b6b4:	00bfde84 	movi	r2,-134
   8b6b8:	e0bfff15 	stw	r2,-4(fp)
   8b6bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8b6c0:	e037883a 	mov	sp,fp
   8b6c4:	df000017 	ldw	fp,0(sp)
   8b6c8:	dec00104 	addi	sp,sp,4
   8b6cc:	f800283a 	ret

0008b6d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8b6d0:	defffa04 	addi	sp,sp,-24
   8b6d4:	dfc00515 	stw	ra,20(sp)
   8b6d8:	df000415 	stw	fp,16(sp)
   8b6dc:	df000404 	addi	fp,sp,16
   8b6e0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8b6e4:	00800244 	movi	r2,9
   8b6e8:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8b6ec:	e13ffc17 	ldw	r4,-16(fp)
   8b6f0:	014003f4 	movhi	r5,15
   8b6f4:	29509004 	addi	r5,r5,16960
   8b6f8:	00897b00 	call	897b0 <__mulsi3>
   8b6fc:	100b883a 	mov	r5,r2
   8b700:	0100bef4 	movhi	r4,763
   8b704:	213c2004 	addi	r4,r4,-3968
   8b708:	00897a00 	call	897a0 <__udivsi3>
   8b70c:	100b883a 	mov	r5,r2
   8b710:	01200034 	movhi	r4,32768
   8b714:	213fffc4 	addi	r4,r4,-1
   8b718:	00897a00 	call	897a0 <__udivsi3>
   8b71c:	100b883a 	mov	r5,r2
   8b720:	e13fff17 	ldw	r4,-4(fp)
   8b724:	00897a00 	call	897a0 <__udivsi3>
   8b728:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8b72c:	e0bffd17 	ldw	r2,-12(fp)
   8b730:	1005003a 	cmpeq	r2,r2,zero
   8b734:	10002a1e 	bne	r2,zero,8b7e0 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   8b738:	e03ffe15 	stw	zero,-8(fp)
   8b73c:	00001706 	br	8b79c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8b740:	00a00034 	movhi	r2,32768
   8b744:	10bfffc4 	addi	r2,r2,-1
   8b748:	10bfffc4 	addi	r2,r2,-1
   8b74c:	103ffe1e 	bne	r2,zero,8b748 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8b750:	e13ffc17 	ldw	r4,-16(fp)
   8b754:	014003f4 	movhi	r5,15
   8b758:	29509004 	addi	r5,r5,16960
   8b75c:	00897b00 	call	897b0 <__mulsi3>
   8b760:	100b883a 	mov	r5,r2
   8b764:	0100bef4 	movhi	r4,763
   8b768:	213c2004 	addi	r4,r4,-3968
   8b76c:	00897a00 	call	897a0 <__udivsi3>
   8b770:	100b883a 	mov	r5,r2
   8b774:	01200034 	movhi	r4,32768
   8b778:	213fffc4 	addi	r4,r4,-1
   8b77c:	00897a00 	call	897a0 <__udivsi3>
   8b780:	1007883a 	mov	r3,r2
   8b784:	e0bfff17 	ldw	r2,-4(fp)
   8b788:	10c5c83a 	sub	r2,r2,r3
   8b78c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8b790:	e0bffe17 	ldw	r2,-8(fp)
   8b794:	10800044 	addi	r2,r2,1
   8b798:	e0bffe15 	stw	r2,-8(fp)
   8b79c:	e0fffe17 	ldw	r3,-8(fp)
   8b7a0:	e0bffd17 	ldw	r2,-12(fp)
   8b7a4:	18bfe616 	blt	r3,r2,8b740 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8b7a8:	e13ffc17 	ldw	r4,-16(fp)
   8b7ac:	014003f4 	movhi	r5,15
   8b7b0:	29509004 	addi	r5,r5,16960
   8b7b4:	00897b00 	call	897b0 <__mulsi3>
   8b7b8:	100b883a 	mov	r5,r2
   8b7bc:	0100bef4 	movhi	r4,763
   8b7c0:	213c2004 	addi	r4,r4,-3968
   8b7c4:	00897a00 	call	897a0 <__udivsi3>
   8b7c8:	1009883a 	mov	r4,r2
   8b7cc:	e17fff17 	ldw	r5,-4(fp)
   8b7d0:	00897b00 	call	897b0 <__mulsi3>
   8b7d4:	10bfffc4 	addi	r2,r2,-1
   8b7d8:	103ffe1e 	bne	r2,zero,8b7d4 <alt_busy_sleep+0x104>
   8b7dc:	00000d06 	br	8b814 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8b7e0:	e13ffc17 	ldw	r4,-16(fp)
   8b7e4:	014003f4 	movhi	r5,15
   8b7e8:	29509004 	addi	r5,r5,16960
   8b7ec:	00897b00 	call	897b0 <__mulsi3>
   8b7f0:	100b883a 	mov	r5,r2
   8b7f4:	0100bef4 	movhi	r4,763
   8b7f8:	213c2004 	addi	r4,r4,-3968
   8b7fc:	00897a00 	call	897a0 <__udivsi3>
   8b800:	1009883a 	mov	r4,r2
   8b804:	e17fff17 	ldw	r5,-4(fp)
   8b808:	00897b00 	call	897b0 <__mulsi3>
   8b80c:	10bfffc4 	addi	r2,r2,-1
   8b810:	00bffe16 	blt	zero,r2,8b80c <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8b814:	0005883a 	mov	r2,zero
}
   8b818:	e037883a 	mov	sp,fp
   8b81c:	dfc00117 	ldw	ra,4(sp)
   8b820:	df000017 	ldw	fp,0(sp)
   8b824:	dec00204 	addi	sp,sp,8
   8b828:	f800283a 	ret

0008b82c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8b82c:	deffff04 	addi	sp,sp,-4
   8b830:	df000015 	stw	fp,0(sp)
   8b834:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8b838:	e037883a 	mov	sp,fp
   8b83c:	df000017 	ldw	fp,0(sp)
   8b840:	dec00104 	addi	sp,sp,4
   8b844:	f800283a 	ret

0008b848 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8b848:	defff904 	addi	sp,sp,-28
   8b84c:	dfc00615 	stw	ra,24(sp)
   8b850:	df000515 	stw	fp,20(sp)
   8b854:	df000504 	addi	fp,sp,20
   8b858:	e13ffd15 	stw	r4,-12(fp)
   8b85c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8b860:	e0bffd17 	ldw	r2,-12(fp)
   8b864:	1005003a 	cmpeq	r2,r2,zero
   8b868:	1000041e 	bne	r2,zero,8b87c <alt_dev_llist_insert+0x34>
   8b86c:	e0bffd17 	ldw	r2,-12(fp)
   8b870:	10800217 	ldw	r2,8(r2)
   8b874:	1004c03a 	cmpne	r2,r2,zero
   8b878:	1000071e 	bne	r2,zero,8b898 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8b87c:	008b8fc0 	call	8b8fc <alt_get_errno>
   8b880:	1007883a 	mov	r3,r2
   8b884:	00800584 	movi	r2,22
   8b888:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8b88c:	00bffa84 	movi	r2,-22
   8b890:	e0bfff15 	stw	r2,-4(fp)
   8b894:	00001306 	br	8b8e4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8b898:	e0fffd17 	ldw	r3,-12(fp)
   8b89c:	e0bffe17 	ldw	r2,-8(fp)
   8b8a0:	e0bffb15 	stw	r2,-20(fp)
   8b8a4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b8a8:	e0fffc17 	ldw	r3,-16(fp)
   8b8ac:	e0bffb17 	ldw	r2,-20(fp)
   8b8b0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8b8b4:	e0bffb17 	ldw	r2,-20(fp)
   8b8b8:	10c00017 	ldw	r3,0(r2)
   8b8bc:	e0bffc17 	ldw	r2,-16(fp)
   8b8c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b8c4:	e0bffb17 	ldw	r2,-20(fp)
   8b8c8:	10c00017 	ldw	r3,0(r2)
   8b8cc:	e0bffc17 	ldw	r2,-16(fp)
   8b8d0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8b8d4:	e0fffb17 	ldw	r3,-20(fp)
   8b8d8:	e0bffc17 	ldw	r2,-16(fp)
   8b8dc:	18800015 	stw	r2,0(r3)

  return 0;  
   8b8e0:	e03fff15 	stw	zero,-4(fp)
   8b8e4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b8e8:	e037883a 	mov	sp,fp
   8b8ec:	dfc00117 	ldw	ra,4(sp)
   8b8f0:	df000017 	ldw	fp,0(sp)
   8b8f4:	dec00204 	addi	sp,sp,8
   8b8f8:	f800283a 	ret

0008b8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b8fc:	defffd04 	addi	sp,sp,-12
   8b900:	dfc00215 	stw	ra,8(sp)
   8b904:	df000115 	stw	fp,4(sp)
   8b908:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b90c:	00800274 	movhi	r2,9
   8b910:	10b9f504 	addi	r2,r2,-6188
   8b914:	10800017 	ldw	r2,0(r2)
   8b918:	1005003a 	cmpeq	r2,r2,zero
   8b91c:	1000061e 	bne	r2,zero,8b938 <alt_get_errno+0x3c>
   8b920:	00800274 	movhi	r2,9
   8b924:	10b9f504 	addi	r2,r2,-6188
   8b928:	10800017 	ldw	r2,0(r2)
   8b92c:	103ee83a 	callr	r2
   8b930:	e0bfff15 	stw	r2,-4(fp)
   8b934:	00000306 	br	8b944 <alt_get_errno+0x48>
   8b938:	00800274 	movhi	r2,9
   8b93c:	10809704 	addi	r2,r2,604
   8b940:	e0bfff15 	stw	r2,-4(fp)
   8b944:	e0bfff17 	ldw	r2,-4(fp)
}
   8b948:	e037883a 	mov	sp,fp
   8b94c:	dfc00117 	ldw	ra,4(sp)
   8b950:	df000017 	ldw	fp,0(sp)
   8b954:	dec00204 	addi	sp,sp,8
   8b958:	f800283a 	ret

0008b95c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8b95c:	defffd04 	addi	sp,sp,-12
   8b960:	dfc00215 	stw	ra,8(sp)
   8b964:	df000115 	stw	fp,4(sp)
   8b968:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8b96c:	00bfff04 	movi	r2,-4
   8b970:	00c00274 	movhi	r3,9
   8b974:	18f28904 	addi	r3,r3,-13788
   8b978:	1885883a 	add	r2,r3,r2
   8b97c:	e0bfff15 	stw	r2,-4(fp)
   8b980:	00000606 	br	8b99c <_do_ctors+0x40>
        (*ctor) (); 
   8b984:	e0bfff17 	ldw	r2,-4(fp)
   8b988:	10800017 	ldw	r2,0(r2)
   8b98c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8b990:	e0bfff17 	ldw	r2,-4(fp)
   8b994:	10bfff04 	addi	r2,r2,-4
   8b998:	e0bfff15 	stw	r2,-4(fp)
   8b99c:	e0ffff17 	ldw	r3,-4(fp)
   8b9a0:	00800274 	movhi	r2,9
   8b9a4:	10b28804 	addi	r2,r2,-13792
   8b9a8:	18bff62e 	bgeu	r3,r2,8b984 <_do_ctors+0x28>
        (*ctor) (); 
}
   8b9ac:	e037883a 	mov	sp,fp
   8b9b0:	dfc00117 	ldw	ra,4(sp)
   8b9b4:	df000017 	ldw	fp,0(sp)
   8b9b8:	dec00204 	addi	sp,sp,8
   8b9bc:	f800283a 	ret

0008b9c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8b9c0:	defffd04 	addi	sp,sp,-12
   8b9c4:	dfc00215 	stw	ra,8(sp)
   8b9c8:	df000115 	stw	fp,4(sp)
   8b9cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8b9d0:	00bfff04 	movi	r2,-4
   8b9d4:	00c00274 	movhi	r3,9
   8b9d8:	18f28904 	addi	r3,r3,-13788
   8b9dc:	1885883a 	add	r2,r3,r2
   8b9e0:	e0bfff15 	stw	r2,-4(fp)
   8b9e4:	00000606 	br	8ba00 <_do_dtors+0x40>
        (*dtor) (); 
   8b9e8:	e0bfff17 	ldw	r2,-4(fp)
   8b9ec:	10800017 	ldw	r2,0(r2)
   8b9f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8b9f4:	e0bfff17 	ldw	r2,-4(fp)
   8b9f8:	10bfff04 	addi	r2,r2,-4
   8b9fc:	e0bfff15 	stw	r2,-4(fp)
   8ba00:	e0ffff17 	ldw	r3,-4(fp)
   8ba04:	00800274 	movhi	r2,9
   8ba08:	10b28904 	addi	r2,r2,-13788
   8ba0c:	18bff62e 	bgeu	r3,r2,8b9e8 <_do_dtors+0x28>
        (*dtor) (); 
}
   8ba10:	e037883a 	mov	sp,fp
   8ba14:	dfc00117 	ldw	ra,4(sp)
   8ba18:	df000017 	ldw	fp,0(sp)
   8ba1c:	dec00204 	addi	sp,sp,8
   8ba20:	f800283a 	ret

0008ba24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8ba24:	deffff04 	addi	sp,sp,-4
   8ba28:	df000015 	stw	fp,0(sp)
   8ba2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8ba30:	e037883a 	mov	sp,fp
   8ba34:	df000017 	ldw	fp,0(sp)
   8ba38:	dec00104 	addi	sp,sp,4
   8ba3c:	f800283a 	ret

0008ba40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8ba40:	defff904 	addi	sp,sp,-28
   8ba44:	dfc00615 	stw	ra,24(sp)
   8ba48:	df000515 	stw	fp,20(sp)
   8ba4c:	df000504 	addi	fp,sp,20
   8ba50:	e13ffc15 	stw	r4,-16(fp)
   8ba54:	e17ffd15 	stw	r5,-12(fp)
   8ba58:	e1bffe15 	stw	r6,-8(fp)
   8ba5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8ba60:	e0800217 	ldw	r2,8(fp)
   8ba64:	d8800015 	stw	r2,0(sp)
   8ba68:	e13ffc17 	ldw	r4,-16(fp)
   8ba6c:	e17ffd17 	ldw	r5,-12(fp)
   8ba70:	e1bffe17 	ldw	r6,-8(fp)
   8ba74:	e1ffff17 	ldw	r7,-4(fp)
   8ba78:	008bc140 	call	8bc14 <alt_iic_isr_register>
}  
   8ba7c:	e037883a 	mov	sp,fp
   8ba80:	dfc00117 	ldw	ra,4(sp)
   8ba84:	df000017 	ldw	fp,0(sp)
   8ba88:	dec00204 	addi	sp,sp,8
   8ba8c:	f800283a 	ret

0008ba90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8ba90:	defff904 	addi	sp,sp,-28
   8ba94:	df000615 	stw	fp,24(sp)
   8ba98:	df000604 	addi	fp,sp,24
   8ba9c:	e13ffe15 	stw	r4,-8(fp)
   8baa0:	e17fff15 	stw	r5,-4(fp)
   8baa4:	e0bfff17 	ldw	r2,-4(fp)
   8baa8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8baac:	0005303a 	rdctl	r2,status
   8bab0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bab4:	e0fffb17 	ldw	r3,-20(fp)
   8bab8:	00bfff84 	movi	r2,-2
   8babc:	1884703a 	and	r2,r3,r2
   8bac0:	1001703a 	wrctl	status,r2
  
  return context;
   8bac4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8bac8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8bacc:	e0fffc17 	ldw	r3,-16(fp)
   8bad0:	00800044 	movi	r2,1
   8bad4:	10c4983a 	sll	r2,r2,r3
   8bad8:	1007883a 	mov	r3,r2
   8badc:	00800274 	movhi	r2,9
   8bae0:	10809b04 	addi	r2,r2,620
   8bae4:	10800017 	ldw	r2,0(r2)
   8bae8:	1886b03a 	or	r3,r3,r2
   8baec:	00800274 	movhi	r2,9
   8baf0:	10809b04 	addi	r2,r2,620
   8baf4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8baf8:	00800274 	movhi	r2,9
   8bafc:	10809b04 	addi	r2,r2,620
   8bb00:	10800017 	ldw	r2,0(r2)
   8bb04:	100170fa 	wrctl	ienable,r2
   8bb08:	e0bffd17 	ldw	r2,-12(fp)
   8bb0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bb10:	e0bffa17 	ldw	r2,-24(fp)
   8bb14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8bb18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8bb1c:	e037883a 	mov	sp,fp
   8bb20:	df000017 	ldw	fp,0(sp)
   8bb24:	dec00104 	addi	sp,sp,4
   8bb28:	f800283a 	ret

0008bb2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8bb2c:	defff904 	addi	sp,sp,-28
   8bb30:	df000615 	stw	fp,24(sp)
   8bb34:	df000604 	addi	fp,sp,24
   8bb38:	e13ffe15 	stw	r4,-8(fp)
   8bb3c:	e17fff15 	stw	r5,-4(fp)
   8bb40:	e0bfff17 	ldw	r2,-4(fp)
   8bb44:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bb48:	0005303a 	rdctl	r2,status
   8bb4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bb50:	e0fffb17 	ldw	r3,-20(fp)
   8bb54:	00bfff84 	movi	r2,-2
   8bb58:	1884703a 	and	r2,r3,r2
   8bb5c:	1001703a 	wrctl	status,r2
  
  return context;
   8bb60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8bb64:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8bb68:	e0fffc17 	ldw	r3,-16(fp)
   8bb6c:	00800044 	movi	r2,1
   8bb70:	10c4983a 	sll	r2,r2,r3
   8bb74:	0084303a 	nor	r2,zero,r2
   8bb78:	1007883a 	mov	r3,r2
   8bb7c:	00800274 	movhi	r2,9
   8bb80:	10809b04 	addi	r2,r2,620
   8bb84:	10800017 	ldw	r2,0(r2)
   8bb88:	1886703a 	and	r3,r3,r2
   8bb8c:	00800274 	movhi	r2,9
   8bb90:	10809b04 	addi	r2,r2,620
   8bb94:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8bb98:	00800274 	movhi	r2,9
   8bb9c:	10809b04 	addi	r2,r2,620
   8bba0:	10800017 	ldw	r2,0(r2)
   8bba4:	100170fa 	wrctl	ienable,r2
   8bba8:	e0bffd17 	ldw	r2,-12(fp)
   8bbac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bbb0:	e0bffa17 	ldw	r2,-24(fp)
   8bbb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8bbb8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8bbbc:	e037883a 	mov	sp,fp
   8bbc0:	df000017 	ldw	fp,0(sp)
   8bbc4:	dec00104 	addi	sp,sp,4
   8bbc8:	f800283a 	ret

0008bbcc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8bbcc:	defffc04 	addi	sp,sp,-16
   8bbd0:	df000315 	stw	fp,12(sp)
   8bbd4:	df000304 	addi	fp,sp,12
   8bbd8:	e13ffe15 	stw	r4,-8(fp)
   8bbdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8bbe0:	000530fa 	rdctl	r2,ienable
   8bbe4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8bbe8:	e0ffff17 	ldw	r3,-4(fp)
   8bbec:	00800044 	movi	r2,1
   8bbf0:	10c4983a 	sll	r2,r2,r3
   8bbf4:	1007883a 	mov	r3,r2
   8bbf8:	e0bffd17 	ldw	r2,-12(fp)
   8bbfc:	1884703a 	and	r2,r3,r2
   8bc00:	1004c03a 	cmpne	r2,r2,zero
}
   8bc04:	e037883a 	mov	sp,fp
   8bc08:	df000017 	ldw	fp,0(sp)
   8bc0c:	dec00104 	addi	sp,sp,4
   8bc10:	f800283a 	ret

0008bc14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8bc14:	defff404 	addi	sp,sp,-48
   8bc18:	dfc00b15 	stw	ra,44(sp)
   8bc1c:	df000a15 	stw	fp,40(sp)
   8bc20:	df000a04 	addi	fp,sp,40
   8bc24:	e13ffb15 	stw	r4,-20(fp)
   8bc28:	e17ffc15 	stw	r5,-16(fp)
   8bc2c:	e1bffd15 	stw	r6,-12(fp)
   8bc30:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8bc34:	00bffa84 	movi	r2,-22
   8bc38:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8bc3c:	e0bffc17 	ldw	r2,-16(fp)
   8bc40:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8bc44:	e0bff917 	ldw	r2,-28(fp)
   8bc48:	10800808 	cmpgei	r2,r2,32
   8bc4c:	1000291e 	bne	r2,zero,8bcf4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bc50:	0005303a 	rdctl	r2,status
   8bc54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bc58:	e0fff717 	ldw	r3,-36(fp)
   8bc5c:	00bfff84 	movi	r2,-2
   8bc60:	1884703a 	and	r2,r3,r2
   8bc64:	1001703a 	wrctl	status,r2
  
  return context;
   8bc68:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8bc6c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8bc70:	e0bff917 	ldw	r2,-28(fp)
   8bc74:	00c00274 	movhi	r3,9
   8bc78:	18c0a804 	addi	r3,r3,672
   8bc7c:	100490fa 	slli	r2,r2,3
   8bc80:	10c7883a 	add	r3,r2,r3
   8bc84:	e0bffd17 	ldw	r2,-12(fp)
   8bc88:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8bc8c:	e0bff917 	ldw	r2,-28(fp)
   8bc90:	00c00274 	movhi	r3,9
   8bc94:	18c0a804 	addi	r3,r3,672
   8bc98:	100490fa 	slli	r2,r2,3
   8bc9c:	10c5883a 	add	r2,r2,r3
   8bca0:	10c00104 	addi	r3,r2,4
   8bca4:	e0bffe17 	ldw	r2,-8(fp)
   8bca8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8bcac:	e0bffd17 	ldw	r2,-12(fp)
   8bcb0:	1005003a 	cmpeq	r2,r2,zero
   8bcb4:	1000051e 	bne	r2,zero,8bccc <alt_iic_isr_register+0xb8>
   8bcb8:	e17ff917 	ldw	r5,-28(fp)
   8bcbc:	e13ffb17 	ldw	r4,-20(fp)
   8bcc0:	008ba900 	call	8ba90 <alt_ic_irq_enable>
   8bcc4:	e0bfff15 	stw	r2,-4(fp)
   8bcc8:	00000406 	br	8bcdc <alt_iic_isr_register+0xc8>
   8bccc:	e17ff917 	ldw	r5,-28(fp)
   8bcd0:	e13ffb17 	ldw	r4,-20(fp)
   8bcd4:	008bb2c0 	call	8bb2c <alt_ic_irq_disable>
   8bcd8:	e0bfff15 	stw	r2,-4(fp)
   8bcdc:	e0bfff17 	ldw	r2,-4(fp)
   8bce0:	e0bffa15 	stw	r2,-24(fp)
   8bce4:	e0bff817 	ldw	r2,-32(fp)
   8bce8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bcec:	e0bff617 	ldw	r2,-40(fp)
   8bcf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8bcf4:	e0bffa17 	ldw	r2,-24(fp)
}
   8bcf8:	e037883a 	mov	sp,fp
   8bcfc:	dfc00117 	ldw	ra,4(sp)
   8bd00:	df000017 	ldw	fp,0(sp)
   8bd04:	dec00204 	addi	sp,sp,8
   8bd08:	f800283a 	ret

0008bd0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8bd0c:	defff804 	addi	sp,sp,-32
   8bd10:	dfc00715 	stw	ra,28(sp)
   8bd14:	df000615 	stw	fp,24(sp)
   8bd18:	dc000515 	stw	r16,20(sp)
   8bd1c:	df000504 	addi	fp,sp,20
   8bd20:	e13ffc15 	stw	r4,-16(fp)
   8bd24:	e17ffd15 	stw	r5,-12(fp)
   8bd28:	e1bffe15 	stw	r6,-8(fp)
   8bd2c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8bd30:	e13ffd17 	ldw	r4,-12(fp)
   8bd34:	e17ffe17 	ldw	r5,-8(fp)
   8bd38:	e1bfff17 	ldw	r6,-4(fp)
   8bd3c:	008bf540 	call	8bf54 <open>
   8bd40:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8bd44:	e0bffb17 	ldw	r2,-20(fp)
   8bd48:	1004803a 	cmplt	r2,r2,zero
   8bd4c:	10001f1e 	bne	r2,zero,8bdcc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8bd50:	e13ffb17 	ldw	r4,-20(fp)
   8bd54:	04000274 	movhi	r16,9
   8bd58:	84357204 	addi	r16,r16,-10808
   8bd5c:	01400304 	movi	r5,12
   8bd60:	00897b00 	call	897b0 <__mulsi3>
   8bd64:	1405883a 	add	r2,r2,r16
   8bd68:	10c00017 	ldw	r3,0(r2)
   8bd6c:	e0bffc17 	ldw	r2,-16(fp)
   8bd70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8bd74:	e13ffb17 	ldw	r4,-20(fp)
   8bd78:	04000274 	movhi	r16,9
   8bd7c:	84357204 	addi	r16,r16,-10808
   8bd80:	01400304 	movi	r5,12
   8bd84:	00897b00 	call	897b0 <__mulsi3>
   8bd88:	1405883a 	add	r2,r2,r16
   8bd8c:	10800104 	addi	r2,r2,4
   8bd90:	10c00017 	ldw	r3,0(r2)
   8bd94:	e0bffc17 	ldw	r2,-16(fp)
   8bd98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8bd9c:	e13ffb17 	ldw	r4,-20(fp)
   8bda0:	04000274 	movhi	r16,9
   8bda4:	84357204 	addi	r16,r16,-10808
   8bda8:	01400304 	movi	r5,12
   8bdac:	00897b00 	call	897b0 <__mulsi3>
   8bdb0:	1405883a 	add	r2,r2,r16
   8bdb4:	10800204 	addi	r2,r2,8
   8bdb8:	10c00017 	ldw	r3,0(r2)
   8bdbc:	e0bffc17 	ldw	r2,-16(fp)
   8bdc0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8bdc4:	e13ffb17 	ldw	r4,-20(fp)
   8bdc8:	008a7380 	call	8a738 <alt_release_fd>
  }
} 
   8bdcc:	e037883a 	mov	sp,fp
   8bdd0:	dfc00217 	ldw	ra,8(sp)
   8bdd4:	df000117 	ldw	fp,4(sp)
   8bdd8:	dc000017 	ldw	r16,0(sp)
   8bddc:	dec00304 	addi	sp,sp,12
   8bde0:	f800283a 	ret

0008bde4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8bde4:	defffb04 	addi	sp,sp,-20
   8bde8:	dfc00415 	stw	ra,16(sp)
   8bdec:	df000315 	stw	fp,12(sp)
   8bdf0:	df000304 	addi	fp,sp,12
   8bdf4:	e13ffd15 	stw	r4,-12(fp)
   8bdf8:	e17ffe15 	stw	r5,-8(fp)
   8bdfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8be00:	01000274 	movhi	r4,9
   8be04:	21357504 	addi	r4,r4,-10796
   8be08:	e17ffd17 	ldw	r5,-12(fp)
   8be0c:	01800044 	movi	r6,1
   8be10:	01c07fc4 	movi	r7,511
   8be14:	008bd0c0 	call	8bd0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8be18:	01000274 	movhi	r4,9
   8be1c:	21357204 	addi	r4,r4,-10808
   8be20:	e17ffe17 	ldw	r5,-8(fp)
   8be24:	000d883a 	mov	r6,zero
   8be28:	01c07fc4 	movi	r7,511
   8be2c:	008bd0c0 	call	8bd0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8be30:	01000274 	movhi	r4,9
   8be34:	21357804 	addi	r4,r4,-10784
   8be38:	e17fff17 	ldw	r5,-4(fp)
   8be3c:	01800044 	movi	r6,1
   8be40:	01c07fc4 	movi	r7,511
   8be44:	008bd0c0 	call	8bd0c <alt_open_fd>
}  
   8be48:	e037883a 	mov	sp,fp
   8be4c:	dfc00117 	ldw	ra,4(sp)
   8be50:	df000017 	ldw	fp,0(sp)
   8be54:	dec00204 	addi	sp,sp,8
   8be58:	f800283a 	ret

0008be5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8be5c:	defffa04 	addi	sp,sp,-24
   8be60:	dfc00515 	stw	ra,20(sp)
   8be64:	df000415 	stw	fp,16(sp)
   8be68:	dc000315 	stw	r16,12(sp)
   8be6c:	df000304 	addi	fp,sp,12
   8be70:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8be74:	e0bffe17 	ldw	r2,-8(fp)
   8be78:	10800217 	ldw	r2,8(r2)
   8be7c:	10d00034 	orhi	r3,r2,16384
   8be80:	e0bffe17 	ldw	r2,-8(fp)
   8be84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8be88:	e03ffd15 	stw	zero,-12(fp)
   8be8c:	00002306 	br	8bf1c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8be90:	e13ffd17 	ldw	r4,-12(fp)
   8be94:	04000274 	movhi	r16,9
   8be98:	84357204 	addi	r16,r16,-10808
   8be9c:	01400304 	movi	r5,12
   8bea0:	00897b00 	call	897b0 <__mulsi3>
   8bea4:	1405883a 	add	r2,r2,r16
   8bea8:	10c00017 	ldw	r3,0(r2)
   8beac:	e0bffe17 	ldw	r2,-8(fp)
   8beb0:	10800017 	ldw	r2,0(r2)
   8beb4:	1880161e 	bne	r3,r2,8bf10 <alt_file_locked+0xb4>
   8beb8:	e13ffd17 	ldw	r4,-12(fp)
   8bebc:	04000274 	movhi	r16,9
   8bec0:	84357204 	addi	r16,r16,-10808
   8bec4:	01400304 	movi	r5,12
   8bec8:	00897b00 	call	897b0 <__mulsi3>
   8becc:	1405883a 	add	r2,r2,r16
   8bed0:	10800204 	addi	r2,r2,8
   8bed4:	10800017 	ldw	r2,0(r2)
   8bed8:	1004403a 	cmpge	r2,r2,zero
   8bedc:	10000c1e 	bne	r2,zero,8bf10 <alt_file_locked+0xb4>
   8bee0:	e13ffd17 	ldw	r4,-12(fp)
   8bee4:	01400304 	movi	r5,12
   8bee8:	00897b00 	call	897b0 <__mulsi3>
   8beec:	1007883a 	mov	r3,r2
   8bef0:	00800274 	movhi	r2,9
   8bef4:	10b57204 	addi	r2,r2,-10808
   8bef8:	1887883a 	add	r3,r3,r2
   8befc:	e0bffe17 	ldw	r2,-8(fp)
   8bf00:	18800326 	beq	r3,r2,8bf10 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8bf04:	00bffcc4 	movi	r2,-13
   8bf08:	e0bfff15 	stw	r2,-4(fp)
   8bf0c:	00000a06 	br	8bf38 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8bf10:	e0bffd17 	ldw	r2,-12(fp)
   8bf14:	10800044 	addi	r2,r2,1
   8bf18:	e0bffd15 	stw	r2,-12(fp)
   8bf1c:	00800274 	movhi	r2,9
   8bf20:	10b9f404 	addi	r2,r2,-6192
   8bf24:	10800017 	ldw	r2,0(r2)
   8bf28:	1007883a 	mov	r3,r2
   8bf2c:	e0bffd17 	ldw	r2,-12(fp)
   8bf30:	18bfd72e 	bgeu	r3,r2,8be90 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8bf34:	e03fff15 	stw	zero,-4(fp)
   8bf38:	e0bfff17 	ldw	r2,-4(fp)
}
   8bf3c:	e037883a 	mov	sp,fp
   8bf40:	dfc00217 	ldw	ra,8(sp)
   8bf44:	df000117 	ldw	fp,4(sp)
   8bf48:	dc000017 	ldw	r16,0(sp)
   8bf4c:	dec00304 	addi	sp,sp,12
   8bf50:	f800283a 	ret

0008bf54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8bf54:	defff404 	addi	sp,sp,-48
   8bf58:	dfc00b15 	stw	ra,44(sp)
   8bf5c:	df000a15 	stw	fp,40(sp)
   8bf60:	df000a04 	addi	fp,sp,40
   8bf64:	e13ffb15 	stw	r4,-20(fp)
   8bf68:	e17ffc15 	stw	r5,-16(fp)
   8bf6c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8bf70:	00bfffc4 	movi	r2,-1
   8bf74:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8bf78:	00bffb44 	movi	r2,-19
   8bf7c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8bf80:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8bf84:	e13ffb17 	ldw	r4,-20(fp)
   8bf88:	01400274 	movhi	r5,9
   8bf8c:	2979f204 	addi	r5,r5,-6200
   8bf90:	008c3040 	call	8c304 <alt_find_dev>
   8bf94:	e0bffa15 	stw	r2,-24(fp)
   8bf98:	e0bffa17 	ldw	r2,-24(fp)
   8bf9c:	1004c03a 	cmpne	r2,r2,zero
   8bfa0:	1000051e 	bne	r2,zero,8bfb8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8bfa4:	e13ffb17 	ldw	r4,-20(fp)
   8bfa8:	008c3980 	call	8c398 <alt_find_file>
   8bfac:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8bfb0:	00800044 	movi	r2,1
   8bfb4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8bfb8:	e0bffa17 	ldw	r2,-24(fp)
   8bfbc:	1005003a 	cmpeq	r2,r2,zero
   8bfc0:	1000311e 	bne	r2,zero,8c088 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8bfc4:	e13ffa17 	ldw	r4,-24(fp)
   8bfc8:	008c4b80 	call	8c4b8 <alt_get_fd>
   8bfcc:	e0bff815 	stw	r2,-32(fp)
   8bfd0:	e0bff817 	ldw	r2,-32(fp)
   8bfd4:	1004403a 	cmpge	r2,r2,zero
   8bfd8:	1000031e 	bne	r2,zero,8bfe8 <open+0x94>
    {
      status = index;
   8bfdc:	e0bff817 	ldw	r2,-32(fp)
   8bfe0:	e0bff715 	stw	r2,-36(fp)
   8bfe4:	00002a06 	br	8c090 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8bfe8:	e13ff817 	ldw	r4,-32(fp)
   8bfec:	01400304 	movi	r5,12
   8bff0:	00897b00 	call	897b0 <__mulsi3>
   8bff4:	1007883a 	mov	r3,r2
   8bff8:	00800274 	movhi	r2,9
   8bffc:	10b57204 	addi	r2,r2,-10808
   8c000:	1885883a 	add	r2,r3,r2
   8c004:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c008:	e0fffc17 	ldw	r3,-16(fp)
   8c00c:	00900034 	movhi	r2,16384
   8c010:	10bfffc4 	addi	r2,r2,-1
   8c014:	1886703a 	and	r3,r3,r2
   8c018:	e0bff917 	ldw	r2,-28(fp)
   8c01c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c020:	e0bff617 	ldw	r2,-40(fp)
   8c024:	1004c03a 	cmpne	r2,r2,zero
   8c028:	1000061e 	bne	r2,zero,8c044 <open+0xf0>
   8c02c:	e13ff917 	ldw	r4,-28(fp)
   8c030:	008be5c0 	call	8be5c <alt_file_locked>
   8c034:	e0bff715 	stw	r2,-36(fp)
   8c038:	e0bff717 	ldw	r2,-36(fp)
   8c03c:	1004803a 	cmplt	r2,r2,zero
   8c040:	1000131e 	bne	r2,zero,8c090 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c044:	e0bffa17 	ldw	r2,-24(fp)
   8c048:	10800317 	ldw	r2,12(r2)
   8c04c:	1005003a 	cmpeq	r2,r2,zero
   8c050:	1000091e 	bne	r2,zero,8c078 <open+0x124>
   8c054:	e0bffa17 	ldw	r2,-24(fp)
   8c058:	10800317 	ldw	r2,12(r2)
   8c05c:	e13ff917 	ldw	r4,-28(fp)
   8c060:	e17ffb17 	ldw	r5,-20(fp)
   8c064:	e1bffc17 	ldw	r6,-16(fp)
   8c068:	e1fffd17 	ldw	r7,-12(fp)
   8c06c:	103ee83a 	callr	r2
   8c070:	e0bfff15 	stw	r2,-4(fp)
   8c074:	00000106 	br	8c07c <open+0x128>
   8c078:	e03fff15 	stw	zero,-4(fp)
   8c07c:	e0bfff17 	ldw	r2,-4(fp)
   8c080:	e0bff715 	stw	r2,-36(fp)
   8c084:	00000206 	br	8c090 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8c088:	00bffb44 	movi	r2,-19
   8c08c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c090:	e0bff717 	ldw	r2,-36(fp)
   8c094:	1004403a 	cmpge	r2,r2,zero
   8c098:	1000091e 	bne	r2,zero,8c0c0 <open+0x16c>
  {
    alt_release_fd (index);  
   8c09c:	e13ff817 	ldw	r4,-32(fp)
   8c0a0:	008a7380 	call	8a738 <alt_release_fd>
    ALT_ERRNO = -status;
   8c0a4:	008c0e00 	call	8c0e0 <alt_get_errno>
   8c0a8:	e0fff717 	ldw	r3,-36(fp)
   8c0ac:	00c7c83a 	sub	r3,zero,r3
   8c0b0:	10c00015 	stw	r3,0(r2)
    return -1;
   8c0b4:	00bfffc4 	movi	r2,-1
   8c0b8:	e0bffe15 	stw	r2,-8(fp)
   8c0bc:	00000206 	br	8c0c8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8c0c0:	e0bff817 	ldw	r2,-32(fp)
   8c0c4:	e0bffe15 	stw	r2,-8(fp)
   8c0c8:	e0bffe17 	ldw	r2,-8(fp)
}
   8c0cc:	e037883a 	mov	sp,fp
   8c0d0:	dfc00117 	ldw	ra,4(sp)
   8c0d4:	df000017 	ldw	fp,0(sp)
   8c0d8:	dec00204 	addi	sp,sp,8
   8c0dc:	f800283a 	ret

0008c0e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c0e0:	defffd04 	addi	sp,sp,-12
   8c0e4:	dfc00215 	stw	ra,8(sp)
   8c0e8:	df000115 	stw	fp,4(sp)
   8c0ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c0f0:	00800274 	movhi	r2,9
   8c0f4:	10b9f504 	addi	r2,r2,-6188
   8c0f8:	10800017 	ldw	r2,0(r2)
   8c0fc:	1005003a 	cmpeq	r2,r2,zero
   8c100:	1000061e 	bne	r2,zero,8c11c <alt_get_errno+0x3c>
   8c104:	00800274 	movhi	r2,9
   8c108:	10b9f504 	addi	r2,r2,-6188
   8c10c:	10800017 	ldw	r2,0(r2)
   8c110:	103ee83a 	callr	r2
   8c114:	e0bfff15 	stw	r2,-4(fp)
   8c118:	00000306 	br	8c128 <alt_get_errno+0x48>
   8c11c:	00800274 	movhi	r2,9
   8c120:	10809704 	addi	r2,r2,604
   8c124:	e0bfff15 	stw	r2,-4(fp)
   8c128:	e0bfff17 	ldw	r2,-4(fp)
}
   8c12c:	e037883a 	mov	sp,fp
   8c130:	dfc00117 	ldw	ra,4(sp)
   8c134:	df000017 	ldw	fp,0(sp)
   8c138:	dec00204 	addi	sp,sp,8
   8c13c:	f800283a 	ret

0008c140 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8c140:	defffa04 	addi	sp,sp,-24
   8c144:	df000515 	stw	fp,20(sp)
   8c148:	df000504 	addi	fp,sp,20
   8c14c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c150:	0005303a 	rdctl	r2,status
   8c154:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c158:	e0fffd17 	ldw	r3,-12(fp)
   8c15c:	00bfff84 	movi	r2,-2
   8c160:	1884703a 	and	r2,r3,r2
   8c164:	1001703a 	wrctl	status,r2
  
  return context;
   8c168:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8c16c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8c170:	e0bfff17 	ldw	r2,-4(fp)
   8c174:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8c178:	e0bffc17 	ldw	r2,-16(fp)
   8c17c:	10c00017 	ldw	r3,0(r2)
   8c180:	e0bffc17 	ldw	r2,-16(fp)
   8c184:	10800117 	ldw	r2,4(r2)
   8c188:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8c18c:	e0bffc17 	ldw	r2,-16(fp)
   8c190:	10c00117 	ldw	r3,4(r2)
   8c194:	e0bffc17 	ldw	r2,-16(fp)
   8c198:	10800017 	ldw	r2,0(r2)
   8c19c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8c1a0:	e0fffc17 	ldw	r3,-16(fp)
   8c1a4:	e0bffc17 	ldw	r2,-16(fp)
   8c1a8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8c1ac:	e0fffc17 	ldw	r3,-16(fp)
   8c1b0:	e0bffc17 	ldw	r2,-16(fp)
   8c1b4:	18800015 	stw	r2,0(r3)
   8c1b8:	e0bffe17 	ldw	r2,-8(fp)
   8c1bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c1c0:	e0bffb17 	ldw	r2,-20(fp)
   8c1c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8c1c8:	e037883a 	mov	sp,fp
   8c1cc:	df000017 	ldw	fp,0(sp)
   8c1d0:	dec00104 	addi	sp,sp,4
   8c1d4:	f800283a 	ret

0008c1d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8c1d8:	defffb04 	addi	sp,sp,-20
   8c1dc:	dfc00415 	stw	ra,16(sp)
   8c1e0:	df000315 	stw	fp,12(sp)
   8c1e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8c1e8:	d0a00e17 	ldw	r2,-32712(gp)
   8c1ec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8c1f0:	d0a6b317 	ldw	r2,-25908(gp)
   8c1f4:	10800044 	addi	r2,r2,1
   8c1f8:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c1fc:	00003106 	br	8c2c4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8c200:	e0bffe17 	ldw	r2,-8(fp)
   8c204:	10800017 	ldw	r2,0(r2)
   8c208:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8c20c:	e0bffe17 	ldw	r2,-8(fp)
   8c210:	10800403 	ldbu	r2,16(r2)
   8c214:	10803fcc 	andi	r2,r2,255
   8c218:	1005003a 	cmpeq	r2,r2,zero
   8c21c:	1000051e 	bne	r2,zero,8c234 <alt_tick+0x5c>
   8c220:	d0a6b317 	ldw	r2,-25908(gp)
   8c224:	1004c03a 	cmpne	r2,r2,zero
   8c228:	1000021e 	bne	r2,zero,8c234 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8c22c:	e0bffe17 	ldw	r2,-8(fp)
   8c230:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8c234:	e0bffe17 	ldw	r2,-8(fp)
   8c238:	10c00217 	ldw	r3,8(r2)
   8c23c:	d0a6b317 	ldw	r2,-25908(gp)
   8c240:	10c01e36 	bltu	r2,r3,8c2bc <alt_tick+0xe4>
   8c244:	e0bffe17 	ldw	r2,-8(fp)
   8c248:	10800403 	ldbu	r2,16(r2)
   8c24c:	10803fcc 	andi	r2,r2,255
   8c250:	1004c03a 	cmpne	r2,r2,zero
   8c254:	1000191e 	bne	r2,zero,8c2bc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8c258:	e0bffe17 	ldw	r2,-8(fp)
   8c25c:	10c00317 	ldw	r3,12(r2)
   8c260:	e0bffe17 	ldw	r2,-8(fp)
   8c264:	11000517 	ldw	r4,20(r2)
   8c268:	183ee83a 	callr	r3
   8c26c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8c270:	e0bffd17 	ldw	r2,-12(fp)
   8c274:	1004c03a 	cmpne	r2,r2,zero
   8c278:	1000031e 	bne	r2,zero,8c288 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8c27c:	e13ffe17 	ldw	r4,-8(fp)
   8c280:	008c1400 	call	8c140 <alt_alarm_stop>
   8c284:	00000d06 	br	8c2bc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8c288:	e0bffe17 	ldw	r2,-8(fp)
   8c28c:	10c00217 	ldw	r3,8(r2)
   8c290:	e0bffd17 	ldw	r2,-12(fp)
   8c294:	1887883a 	add	r3,r3,r2
   8c298:	e0bffe17 	ldw	r2,-8(fp)
   8c29c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8c2a0:	e0bffe17 	ldw	r2,-8(fp)
   8c2a4:	10c00217 	ldw	r3,8(r2)
   8c2a8:	d0a6b317 	ldw	r2,-25908(gp)
   8c2ac:	1880032e 	bgeu	r3,r2,8c2bc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8c2b0:	e0fffe17 	ldw	r3,-8(fp)
   8c2b4:	00800044 	movi	r2,1
   8c2b8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8c2bc:	e0bfff17 	ldw	r2,-4(fp)
   8c2c0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8c2c4:	d0e00e04 	addi	r3,gp,-32712
   8c2c8:	e0bffe17 	ldw	r2,-8(fp)
   8c2cc:	10ffcc1e 	bne	r2,r3,8c200 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8c2d0:	e037883a 	mov	sp,fp
   8c2d4:	dfc00117 	ldw	ra,4(sp)
   8c2d8:	df000017 	ldw	fp,0(sp)
   8c2dc:	dec00204 	addi	sp,sp,8
   8c2e0:	f800283a 	ret

0008c2e4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8c2e4:	deffff04 	addi	sp,sp,-4
   8c2e8:	df000015 	stw	fp,0(sp)
   8c2ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8c2f0:	000170fa 	wrctl	ienable,zero
}
   8c2f4:	e037883a 	mov	sp,fp
   8c2f8:	df000017 	ldw	fp,0(sp)
   8c2fc:	dec00104 	addi	sp,sp,4
   8c300:	f800283a 	ret

0008c304 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8c304:	defff904 	addi	sp,sp,-28
   8c308:	dfc00615 	stw	ra,24(sp)
   8c30c:	df000515 	stw	fp,20(sp)
   8c310:	df000504 	addi	fp,sp,20
   8c314:	e13ffd15 	stw	r4,-12(fp)
   8c318:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8c31c:	e0bffe17 	ldw	r2,-8(fp)
   8c320:	10800017 	ldw	r2,0(r2)
   8c324:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8c328:	e13ffd17 	ldw	r4,-12(fp)
   8c32c:	00873500 	call	87350 <strlen>
   8c330:	10800044 	addi	r2,r2,1
   8c334:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c338:	00000d06 	br	8c370 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8c33c:	e0bffc17 	ldw	r2,-16(fp)
   8c340:	11000217 	ldw	r4,8(r2)
   8c344:	e1bffb17 	ldw	r6,-20(fp)
   8c348:	e17ffd17 	ldw	r5,-12(fp)
   8c34c:	008c6640 	call	8c664 <memcmp>
   8c350:	1004c03a 	cmpne	r2,r2,zero
   8c354:	1000031e 	bne	r2,zero,8c364 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8c358:	e0bffc17 	ldw	r2,-16(fp)
   8c35c:	e0bfff15 	stw	r2,-4(fp)
   8c360:	00000706 	br	8c380 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8c364:	e0bffc17 	ldw	r2,-16(fp)
   8c368:	10800017 	ldw	r2,0(r2)
   8c36c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c370:	e0fffe17 	ldw	r3,-8(fp)
   8c374:	e0bffc17 	ldw	r2,-16(fp)
   8c378:	10fff01e 	bne	r2,r3,8c33c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8c37c:	e03fff15 	stw	zero,-4(fp)
   8c380:	e0bfff17 	ldw	r2,-4(fp)
}
   8c384:	e037883a 	mov	sp,fp
   8c388:	dfc00117 	ldw	ra,4(sp)
   8c38c:	df000017 	ldw	fp,0(sp)
   8c390:	dec00204 	addi	sp,sp,8
   8c394:	f800283a 	ret

0008c398 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8c398:	defffa04 	addi	sp,sp,-24
   8c39c:	dfc00515 	stw	ra,20(sp)
   8c3a0:	df000415 	stw	fp,16(sp)
   8c3a4:	df000404 	addi	fp,sp,16
   8c3a8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8c3ac:	00800274 	movhi	r2,9
   8c3b0:	10b9f004 	addi	r2,r2,-6208
   8c3b4:	10800017 	ldw	r2,0(r2)
   8c3b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c3bc:	00003306 	br	8c48c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8c3c0:	e0bffd17 	ldw	r2,-12(fp)
   8c3c4:	11000217 	ldw	r4,8(r2)
   8c3c8:	00873500 	call	87350 <strlen>
   8c3cc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8c3d0:	e0bffd17 	ldw	r2,-12(fp)
   8c3d4:	10c00217 	ldw	r3,8(r2)
   8c3d8:	e0bffc17 	ldw	r2,-16(fp)
   8c3dc:	1885883a 	add	r2,r3,r2
   8c3e0:	10bfffc4 	addi	r2,r2,-1
   8c3e4:	10800003 	ldbu	r2,0(r2)
   8c3e8:	10803fcc 	andi	r2,r2,255
   8c3ec:	1080201c 	xori	r2,r2,128
   8c3f0:	10bfe004 	addi	r2,r2,-128
   8c3f4:	10800bd8 	cmpnei	r2,r2,47
   8c3f8:	1000031e 	bne	r2,zero,8c408 <alt_find_file+0x70>
    {
      len -= 1;
   8c3fc:	e0bffc17 	ldw	r2,-16(fp)
   8c400:	10bfffc4 	addi	r2,r2,-1
   8c404:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8c408:	e0bffc17 	ldw	r2,-16(fp)
   8c40c:	1007883a 	mov	r3,r2
   8c410:	e0bffe17 	ldw	r2,-8(fp)
   8c414:	1885883a 	add	r2,r3,r2
   8c418:	10800003 	ldbu	r2,0(r2)
   8c41c:	10803fcc 	andi	r2,r2,255
   8c420:	1080201c 	xori	r2,r2,128
   8c424:	10bfe004 	addi	r2,r2,-128
   8c428:	10800be0 	cmpeqi	r2,r2,47
   8c42c:	10000a1e 	bne	r2,zero,8c458 <alt_find_file+0xc0>
   8c430:	e0bffc17 	ldw	r2,-16(fp)
   8c434:	1007883a 	mov	r3,r2
   8c438:	e0bffe17 	ldw	r2,-8(fp)
   8c43c:	1885883a 	add	r2,r3,r2
   8c440:	10800003 	ldbu	r2,0(r2)
   8c444:	10803fcc 	andi	r2,r2,255
   8c448:	1080201c 	xori	r2,r2,128
   8c44c:	10bfe004 	addi	r2,r2,-128
   8c450:	1004c03a 	cmpne	r2,r2,zero
   8c454:	10000a1e 	bne	r2,zero,8c480 <alt_find_file+0xe8>
   8c458:	e0bffd17 	ldw	r2,-12(fp)
   8c45c:	11000217 	ldw	r4,8(r2)
   8c460:	e1bffc17 	ldw	r6,-16(fp)
   8c464:	e17ffe17 	ldw	r5,-8(fp)
   8c468:	008c6640 	call	8c664 <memcmp>
   8c46c:	1004c03a 	cmpne	r2,r2,zero
   8c470:	1000031e 	bne	r2,zero,8c480 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8c474:	e0bffd17 	ldw	r2,-12(fp)
   8c478:	e0bfff15 	stw	r2,-4(fp)
   8c47c:	00000806 	br	8c4a0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8c480:	e0bffd17 	ldw	r2,-12(fp)
   8c484:	10800017 	ldw	r2,0(r2)
   8c488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c48c:	00c00274 	movhi	r3,9
   8c490:	18f9f004 	addi	r3,r3,-6208
   8c494:	e0bffd17 	ldw	r2,-12(fp)
   8c498:	10ffc91e 	bne	r2,r3,8c3c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8c49c:	e03fff15 	stw	zero,-4(fp)
   8c4a0:	e0bfff17 	ldw	r2,-4(fp)
}
   8c4a4:	e037883a 	mov	sp,fp
   8c4a8:	dfc00117 	ldw	ra,4(sp)
   8c4ac:	df000017 	ldw	fp,0(sp)
   8c4b0:	dec00204 	addi	sp,sp,8
   8c4b4:	f800283a 	ret

0008c4b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8c4b8:	defffa04 	addi	sp,sp,-24
   8c4bc:	dfc00515 	stw	ra,20(sp)
   8c4c0:	df000415 	stw	fp,16(sp)
   8c4c4:	dc000315 	stw	r16,12(sp)
   8c4c8:	df000304 	addi	fp,sp,12
   8c4cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8c4d0:	00bffa04 	movi	r2,-24
   8c4d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c4d8:	e03ffe15 	stw	zero,-8(fp)
   8c4dc:	00002006 	br	8c560 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8c4e0:	e13ffe17 	ldw	r4,-8(fp)
   8c4e4:	04000274 	movhi	r16,9
   8c4e8:	84357204 	addi	r16,r16,-10808
   8c4ec:	01400304 	movi	r5,12
   8c4f0:	00897b00 	call	897b0 <__mulsi3>
   8c4f4:	1405883a 	add	r2,r2,r16
   8c4f8:	10800017 	ldw	r2,0(r2)
   8c4fc:	1004c03a 	cmpne	r2,r2,zero
   8c500:	1000141e 	bne	r2,zero,8c554 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8c504:	e13ffe17 	ldw	r4,-8(fp)
   8c508:	04000274 	movhi	r16,9
   8c50c:	84357204 	addi	r16,r16,-10808
   8c510:	01400304 	movi	r5,12
   8c514:	00897b00 	call	897b0 <__mulsi3>
   8c518:	1407883a 	add	r3,r2,r16
   8c51c:	e0bfff17 	ldw	r2,-4(fp)
   8c520:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8c524:	00800274 	movhi	r2,9
   8c528:	10b9f404 	addi	r2,r2,-6192
   8c52c:	10c00017 	ldw	r3,0(r2)
   8c530:	e0bffe17 	ldw	r2,-8(fp)
   8c534:	1880040e 	bge	r3,r2,8c548 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8c538:	00c00274 	movhi	r3,9
   8c53c:	18f9f404 	addi	r3,r3,-6192
   8c540:	e0bffe17 	ldw	r2,-8(fp)
   8c544:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8c548:	e0bffe17 	ldw	r2,-8(fp)
   8c54c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8c550:	00000606 	br	8c56c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8c554:	e0bffe17 	ldw	r2,-8(fp)
   8c558:	10800044 	addi	r2,r2,1
   8c55c:	e0bffe15 	stw	r2,-8(fp)
   8c560:	e0bffe17 	ldw	r2,-8(fp)
   8c564:	10800810 	cmplti	r2,r2,32
   8c568:	103fdd1e 	bne	r2,zero,8c4e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8c56c:	e0bffd17 	ldw	r2,-12(fp)
}
   8c570:	e037883a 	mov	sp,fp
   8c574:	dfc00217 	ldw	ra,8(sp)
   8c578:	df000117 	ldw	fp,4(sp)
   8c57c:	dc000017 	ldw	r16,0(sp)
   8c580:	dec00304 	addi	sp,sp,12
   8c584:	f800283a 	ret

0008c588 <atexit>:
   8c588:	200b883a 	mov	r5,r4
   8c58c:	000d883a 	mov	r6,zero
   8c590:	0009883a 	mov	r4,zero
   8c594:	000f883a 	mov	r7,zero
   8c598:	008c6d81 	jmpi	8c6d8 <__register_exitproc>

0008c59c <exit>:
   8c59c:	defffe04 	addi	sp,sp,-8
   8c5a0:	000b883a 	mov	r5,zero
   8c5a4:	dc000015 	stw	r16,0(sp)
   8c5a8:	dfc00115 	stw	ra,4(sp)
   8c5ac:	2021883a 	mov	r16,r4
   8c5b0:	008c8100 	call	8c810 <__call_exitprocs>
   8c5b4:	00800274 	movhi	r2,9
   8c5b8:	10b9eb04 	addi	r2,r2,-6228
   8c5bc:	11000017 	ldw	r4,0(r2)
   8c5c0:	20800f17 	ldw	r2,60(r4)
   8c5c4:	10000126 	beq	r2,zero,8c5cc <exit+0x30>
   8c5c8:	103ee83a 	callr	r2
   8c5cc:	8009883a 	mov	r4,r16
   8c5d0:	008ca000 	call	8ca00 <_exit>

0008c5d4 <_fputs_r>:
   8c5d4:	defff804 	addi	sp,sp,-32
   8c5d8:	dc000515 	stw	r16,20(sp)
   8c5dc:	2021883a 	mov	r16,r4
   8c5e0:	2809883a 	mov	r4,r5
   8c5e4:	dc400615 	stw	r17,24(sp)
   8c5e8:	dfc00715 	stw	ra,28(sp)
   8c5ec:	3023883a 	mov	r17,r6
   8c5f0:	d9400015 	stw	r5,0(sp)
   8c5f4:	00873500 	call	87350 <strlen>
   8c5f8:	00c00044 	movi	r3,1
   8c5fc:	d8800115 	stw	r2,4(sp)
   8c600:	d8c00315 	stw	r3,12(sp)
   8c604:	d8800415 	stw	r2,16(sp)
   8c608:	dec00215 	stw	sp,8(sp)
   8c60c:	80000326 	beq	r16,zero,8c61c <_fputs_r+0x48>
   8c610:	80800e17 	ldw	r2,56(r16)
   8c614:	8009883a 	mov	r4,r16
   8c618:	10000926 	beq	r2,zero,8c640 <_fputs_r+0x6c>
   8c61c:	8009883a 	mov	r4,r16
   8c620:	880b883a 	mov	r5,r17
   8c624:	d9800204 	addi	r6,sp,8
   8c628:	00847380 	call	84738 <__sfvwrite_r>
   8c62c:	dfc00717 	ldw	ra,28(sp)
   8c630:	dc400617 	ldw	r17,24(sp)
   8c634:	dc000517 	ldw	r16,20(sp)
   8c638:	dec00804 	addi	sp,sp,32
   8c63c:	f800283a 	ret
   8c640:	008406c0 	call	8406c <__sinit>
   8c644:	003ff506 	br	8c61c <_fputs_r+0x48>

0008c648 <fputs>:
   8c648:	01800274 	movhi	r6,9
   8c64c:	31b9ea04 	addi	r6,r6,-6232
   8c650:	2007883a 	mov	r3,r4
   8c654:	31000017 	ldw	r4,0(r6)
   8c658:	280d883a 	mov	r6,r5
   8c65c:	180b883a 	mov	r5,r3
   8c660:	008c5d41 	jmpi	8c5d4 <_fputs_r>

0008c664 <memcmp>:
   8c664:	00c000c4 	movi	r3,3
   8c668:	1980032e 	bgeu	r3,r6,8c678 <memcmp+0x14>
   8c66c:	2144b03a 	or	r2,r4,r5
   8c670:	10c4703a 	and	r2,r2,r3
   8c674:	10000f26 	beq	r2,zero,8c6b4 <memcmp+0x50>
   8c678:	31ffffc4 	addi	r7,r6,-1
   8c67c:	3000061e 	bne	r6,zero,8c698 <memcmp+0x34>
   8c680:	00000a06 	br	8c6ac <memcmp+0x48>
   8c684:	39ffffc4 	addi	r7,r7,-1
   8c688:	00bfffc4 	movi	r2,-1
   8c68c:	21000044 	addi	r4,r4,1
   8c690:	29400044 	addi	r5,r5,1
   8c694:	38800526 	beq	r7,r2,8c6ac <memcmp+0x48>
   8c698:	20c00003 	ldbu	r3,0(r4)
   8c69c:	28800003 	ldbu	r2,0(r5)
   8c6a0:	18bff826 	beq	r3,r2,8c684 <memcmp+0x20>
   8c6a4:	1885c83a 	sub	r2,r3,r2
   8c6a8:	f800283a 	ret
   8c6ac:	0005883a 	mov	r2,zero
   8c6b0:	f800283a 	ret
   8c6b4:	180f883a 	mov	r7,r3
   8c6b8:	20c00017 	ldw	r3,0(r4)
   8c6bc:	28800017 	ldw	r2,0(r5)
   8c6c0:	18bfed1e 	bne	r3,r2,8c678 <memcmp+0x14>
   8c6c4:	31bfff04 	addi	r6,r6,-4
   8c6c8:	21000104 	addi	r4,r4,4
   8c6cc:	29400104 	addi	r5,r5,4
   8c6d0:	39bff936 	bltu	r7,r6,8c6b8 <memcmp+0x54>
   8c6d4:	003fe806 	br	8c678 <memcmp+0x14>

0008c6d8 <__register_exitproc>:
   8c6d8:	defffa04 	addi	sp,sp,-24
   8c6dc:	00800274 	movhi	r2,9
   8c6e0:	10b9eb04 	addi	r2,r2,-6228
   8c6e4:	dc000015 	stw	r16,0(sp)
   8c6e8:	14000017 	ldw	r16,0(r2)
   8c6ec:	dd000415 	stw	r20,16(sp)
   8c6f0:	2829883a 	mov	r20,r5
   8c6f4:	81405217 	ldw	r5,328(r16)
   8c6f8:	dcc00315 	stw	r19,12(sp)
   8c6fc:	dc800215 	stw	r18,8(sp)
   8c700:	dc400115 	stw	r17,4(sp)
   8c704:	dfc00515 	stw	ra,20(sp)
   8c708:	2023883a 	mov	r17,r4
   8c70c:	3027883a 	mov	r19,r6
   8c710:	3825883a 	mov	r18,r7
   8c714:	28002526 	beq	r5,zero,8c7ac <__register_exitproc+0xd4>
   8c718:	29000117 	ldw	r4,4(r5)
   8c71c:	008007c4 	movi	r2,31
   8c720:	11002716 	blt	r2,r4,8c7c0 <__register_exitproc+0xe8>
   8c724:	8800101e 	bne	r17,zero,8c768 <__register_exitproc+0x90>
   8c728:	2105883a 	add	r2,r4,r4
   8c72c:	1085883a 	add	r2,r2,r2
   8c730:	20c00044 	addi	r3,r4,1
   8c734:	1145883a 	add	r2,r2,r5
   8c738:	0009883a 	mov	r4,zero
   8c73c:	15000215 	stw	r20,8(r2)
   8c740:	28c00115 	stw	r3,4(r5)
   8c744:	2005883a 	mov	r2,r4
   8c748:	dfc00517 	ldw	ra,20(sp)
   8c74c:	dd000417 	ldw	r20,16(sp)
   8c750:	dcc00317 	ldw	r19,12(sp)
   8c754:	dc800217 	ldw	r18,8(sp)
   8c758:	dc400117 	ldw	r17,4(sp)
   8c75c:	dc000017 	ldw	r16,0(sp)
   8c760:	dec00604 	addi	sp,sp,24
   8c764:	f800283a 	ret
   8c768:	29802204 	addi	r6,r5,136
   8c76c:	00800044 	movi	r2,1
   8c770:	110e983a 	sll	r7,r2,r4
   8c774:	30c04017 	ldw	r3,256(r6)
   8c778:	2105883a 	add	r2,r4,r4
   8c77c:	1085883a 	add	r2,r2,r2
   8c780:	1185883a 	add	r2,r2,r6
   8c784:	19c6b03a 	or	r3,r3,r7
   8c788:	14802015 	stw	r18,128(r2)
   8c78c:	14c00015 	stw	r19,0(r2)
   8c790:	00800084 	movi	r2,2
   8c794:	30c04015 	stw	r3,256(r6)
   8c798:	88bfe31e 	bne	r17,r2,8c728 <__register_exitproc+0x50>
   8c79c:	30804117 	ldw	r2,260(r6)
   8c7a0:	11c4b03a 	or	r2,r2,r7
   8c7a4:	30804115 	stw	r2,260(r6)
   8c7a8:	003fdf06 	br	8c728 <__register_exitproc+0x50>
   8c7ac:	00800274 	movhi	r2,9
   8c7b0:	1080e804 	addi	r2,r2,928
   8c7b4:	100b883a 	mov	r5,r2
   8c7b8:	80805215 	stw	r2,328(r16)
   8c7bc:	003fd606 	br	8c718 <__register_exitproc+0x40>
   8c7c0:	00800034 	movhi	r2,0
   8c7c4:	10800004 	addi	r2,r2,0
   8c7c8:	1000021e 	bne	r2,zero,8c7d4 <__register_exitproc+0xfc>
   8c7cc:	013fffc4 	movi	r4,-1
   8c7d0:	003fdc06 	br	8c744 <__register_exitproc+0x6c>
   8c7d4:	01006404 	movi	r4,400
   8c7d8:	103ee83a 	callr	r2
   8c7dc:	1007883a 	mov	r3,r2
   8c7e0:	103ffa26 	beq	r2,zero,8c7cc <__register_exitproc+0xf4>
   8c7e4:	80805217 	ldw	r2,328(r16)
   8c7e8:	180b883a 	mov	r5,r3
   8c7ec:	18000115 	stw	zero,4(r3)
   8c7f0:	18800015 	stw	r2,0(r3)
   8c7f4:	80c05215 	stw	r3,328(r16)
   8c7f8:	18006215 	stw	zero,392(r3)
   8c7fc:	18006315 	stw	zero,396(r3)
   8c800:	0009883a 	mov	r4,zero
   8c804:	883fc826 	beq	r17,zero,8c728 <__register_exitproc+0x50>
   8c808:	003fd706 	br	8c768 <__register_exitproc+0x90>

0008c80c <register_fini>:
   8c80c:	f800283a 	ret

0008c810 <__call_exitprocs>:
   8c810:	00800274 	movhi	r2,9
   8c814:	10b9eb04 	addi	r2,r2,-6228
   8c818:	10800017 	ldw	r2,0(r2)
   8c81c:	defff304 	addi	sp,sp,-52
   8c820:	df000b15 	stw	fp,44(sp)
   8c824:	d8800115 	stw	r2,4(sp)
   8c828:	00800034 	movhi	r2,0
   8c82c:	10800004 	addi	r2,r2,0
   8c830:	1005003a 	cmpeq	r2,r2,zero
   8c834:	d8800215 	stw	r2,8(sp)
   8c838:	d8800117 	ldw	r2,4(sp)
   8c83c:	dd400815 	stw	r21,32(sp)
   8c840:	dd000715 	stw	r20,28(sp)
   8c844:	10805204 	addi	r2,r2,328
   8c848:	dfc00c15 	stw	ra,48(sp)
   8c84c:	ddc00a15 	stw	r23,40(sp)
   8c850:	dd800915 	stw	r22,36(sp)
   8c854:	dcc00615 	stw	r19,24(sp)
   8c858:	dc800515 	stw	r18,20(sp)
   8c85c:	dc400415 	stw	r17,16(sp)
   8c860:	dc000315 	stw	r16,12(sp)
   8c864:	282b883a 	mov	r21,r5
   8c868:	2039883a 	mov	fp,r4
   8c86c:	d8800015 	stw	r2,0(sp)
   8c870:	2829003a 	cmpeq	r20,r5,zero
   8c874:	d8800117 	ldw	r2,4(sp)
   8c878:	14405217 	ldw	r17,328(r2)
   8c87c:	88001026 	beq	r17,zero,8c8c0 <__call_exitprocs+0xb0>
   8c880:	ddc00017 	ldw	r23,0(sp)
   8c884:	88800117 	ldw	r2,4(r17)
   8c888:	8c802204 	addi	r18,r17,136
   8c88c:	143fffc4 	addi	r16,r2,-1
   8c890:	80000916 	blt	r16,zero,8c8b8 <__call_exitprocs+0xa8>
   8c894:	05bfffc4 	movi	r22,-1
   8c898:	a000151e 	bne	r20,zero,8c8f0 <__call_exitprocs+0xe0>
   8c89c:	8409883a 	add	r4,r16,r16
   8c8a0:	2105883a 	add	r2,r4,r4
   8c8a4:	1485883a 	add	r2,r2,r18
   8c8a8:	10c02017 	ldw	r3,128(r2)
   8c8ac:	a8c01126 	beq	r21,r3,8c8f4 <__call_exitprocs+0xe4>
   8c8b0:	843fffc4 	addi	r16,r16,-1
   8c8b4:	85bff81e 	bne	r16,r22,8c898 <__call_exitprocs+0x88>
   8c8b8:	d8800217 	ldw	r2,8(sp)
   8c8bc:	10003126 	beq	r2,zero,8c984 <__call_exitprocs+0x174>
   8c8c0:	dfc00c17 	ldw	ra,48(sp)
   8c8c4:	df000b17 	ldw	fp,44(sp)
   8c8c8:	ddc00a17 	ldw	r23,40(sp)
   8c8cc:	dd800917 	ldw	r22,36(sp)
   8c8d0:	dd400817 	ldw	r21,32(sp)
   8c8d4:	dd000717 	ldw	r20,28(sp)
   8c8d8:	dcc00617 	ldw	r19,24(sp)
   8c8dc:	dc800517 	ldw	r18,20(sp)
   8c8e0:	dc400417 	ldw	r17,16(sp)
   8c8e4:	dc000317 	ldw	r16,12(sp)
   8c8e8:	dec00d04 	addi	sp,sp,52
   8c8ec:	f800283a 	ret
   8c8f0:	8409883a 	add	r4,r16,r16
   8c8f4:	88c00117 	ldw	r3,4(r17)
   8c8f8:	2105883a 	add	r2,r4,r4
   8c8fc:	1445883a 	add	r2,r2,r17
   8c900:	18ffffc4 	addi	r3,r3,-1
   8c904:	11800217 	ldw	r6,8(r2)
   8c908:	1c001526 	beq	r3,r16,8c960 <__call_exitprocs+0x150>
   8c90c:	10000215 	stw	zero,8(r2)
   8c910:	303fe726 	beq	r6,zero,8c8b0 <__call_exitprocs+0xa0>
   8c914:	00c00044 	movi	r3,1
   8c918:	1c06983a 	sll	r3,r3,r16
   8c91c:	90804017 	ldw	r2,256(r18)
   8c920:	8cc00117 	ldw	r19,4(r17)
   8c924:	1884703a 	and	r2,r3,r2
   8c928:	10001426 	beq	r2,zero,8c97c <__call_exitprocs+0x16c>
   8c92c:	90804117 	ldw	r2,260(r18)
   8c930:	1884703a 	and	r2,r3,r2
   8c934:	10000c1e 	bne	r2,zero,8c968 <__call_exitprocs+0x158>
   8c938:	2105883a 	add	r2,r4,r4
   8c93c:	1485883a 	add	r2,r2,r18
   8c940:	11400017 	ldw	r5,0(r2)
   8c944:	e009883a 	mov	r4,fp
   8c948:	303ee83a 	callr	r6
   8c94c:	88800117 	ldw	r2,4(r17)
   8c950:	98bfc81e 	bne	r19,r2,8c874 <__call_exitprocs+0x64>
   8c954:	b8800017 	ldw	r2,0(r23)
   8c958:	147fd526 	beq	r2,r17,8c8b0 <__call_exitprocs+0xa0>
   8c95c:	003fc506 	br	8c874 <__call_exitprocs+0x64>
   8c960:	8c000115 	stw	r16,4(r17)
   8c964:	003fea06 	br	8c910 <__call_exitprocs+0x100>
   8c968:	2105883a 	add	r2,r4,r4
   8c96c:	1485883a 	add	r2,r2,r18
   8c970:	11000017 	ldw	r4,0(r2)
   8c974:	303ee83a 	callr	r6
   8c978:	003ff406 	br	8c94c <__call_exitprocs+0x13c>
   8c97c:	303ee83a 	callr	r6
   8c980:	003ff206 	br	8c94c <__call_exitprocs+0x13c>
   8c984:	88800117 	ldw	r2,4(r17)
   8c988:	1000081e 	bne	r2,zero,8c9ac <__call_exitprocs+0x19c>
   8c98c:	89000017 	ldw	r4,0(r17)
   8c990:	20000726 	beq	r4,zero,8c9b0 <__call_exitprocs+0x1a0>
   8c994:	b9000015 	stw	r4,0(r23)
   8c998:	8809883a 	mov	r4,r17
   8c99c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   8c9a0:	bc400017 	ldw	r17,0(r23)
   8c9a4:	883fb71e 	bne	r17,zero,8c884 <__call_exitprocs+0x74>
   8c9a8:	003fc506 	br	8c8c0 <__call_exitprocs+0xb0>
   8c9ac:	89000017 	ldw	r4,0(r17)
   8c9b0:	882f883a 	mov	r23,r17
   8c9b4:	2023883a 	mov	r17,r4
   8c9b8:	883fb21e 	bne	r17,zero,8c884 <__call_exitprocs+0x74>
   8c9bc:	003fc006 	br	8c8c0 <__call_exitprocs+0xb0>

0008c9c0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8c9c0:	defffd04 	addi	sp,sp,-12
   8c9c4:	df000215 	stw	fp,8(sp)
   8c9c8:	df000204 	addi	fp,sp,8
   8c9cc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8c9d0:	e0bfff17 	ldw	r2,-4(fp)
   8c9d4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8c9d8:	e0bffe17 	ldw	r2,-8(fp)
   8c9dc:	1005003a 	cmpeq	r2,r2,zero
   8c9e0:	1000021e 	bne	r2,zero,8c9ec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8c9e4:	002af070 	cmpltui	zero,zero,43969
   8c9e8:	00000106 	br	8c9f0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8c9ec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8c9f0:	e037883a 	mov	sp,fp
   8c9f4:	df000017 	ldw	fp,0(sp)
   8c9f8:	dec00104 	addi	sp,sp,4
   8c9fc:	f800283a 	ret

0008ca00 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8ca00:	defffd04 	addi	sp,sp,-12
   8ca04:	dfc00215 	stw	ra,8(sp)
   8ca08:	df000115 	stw	fp,4(sp)
   8ca0c:	df000104 	addi	fp,sp,4
   8ca10:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8ca14:	e13fff17 	ldw	r4,-4(fp)
   8ca18:	008c9c00 	call	8c9c0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8ca1c:	003fff06 	br	8ca1c <_exit+0x1c>
   8ca20:	0008c80c 	andi	zero,zero,8992
