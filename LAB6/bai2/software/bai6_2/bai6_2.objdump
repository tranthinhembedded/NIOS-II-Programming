
bai6_2.elf:     file format elf32-littlenios2
bai6_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002658 memsz 0x00002658 flags r-x
    LOAD off    0x00003678 vaddr 0x00012678 paddr 0x00012950 align 2**12
         filesz 0x000002d8 memsz 0x000002d8 flags rw-
    LOAD off    0x00003c28 vaddr 0x00012c28 paddr 0x00012c28 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002474  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00012628  00012628  00003628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d8  00012678  00012950  00003678  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  00012c28  00012c28  00003c28  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  00003978  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007a6  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000938e  00000000  00000000  00004676  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023d8  00000000  00000000  0000da04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006368  00000000  00000000  0000fddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008e4  00000000  00000000  00016144  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d72  00000000  00000000  00016a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001818  00000000  00000000  0001779a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00018fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  00018fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ab28  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001ab2b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ab37  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ab38  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001ab39  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001ab44  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001ab4f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0001ab5a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  0001ab62  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00041ab1  00000000  00000000  0001ab75  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00012628 l    d  .rodata	00000000 .rodata
00012678 l    d  .rwdata	00000000 .rwdata
00012c28 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000103ec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000105d0 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012678 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000111e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000113e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012758 l     O .rwdata	0000002c jtag_uart_0
000114a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00011838 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000118b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011994 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011ad8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00011c28 l     F .text	000000f8 alt_file_locked
00011eac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012404 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000125c4 l     F .text	00000040 alt_sim_halt
00011254 g     F .text	0000006c alt_main
00012c44 g     O .bss	00000100 alt_irq
00012950 g       *ABS*	00000000 __flash_rwdata_start
00010538 g     F .text	00000054 printf
000101f0 g     F .text	0000011c Timer_IRQ_Handler
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012c30 g     O .bss	00000004 errno
00012c3c g     O .bss	00000004 alt_argv
0001a92c g       *ABS*	00000000 _gp
000127ac g     O .rwdata	00000180 alt_fd_list
00011fa4 g     F .text	00000094 alt_find_dev
00011bb0 g     F .text	00000078 alt_io_redirect
00012c2c g     O .bss	00000004 led_state
00012628 g       *ABS*	00000000 __DTOR_END__
00011590 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0001058c g     F .text	00000044 _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010528 g     F .text	00000008 __udivsi3
00012948 g     O .rwdata	00000004 alt_max_fd
00012930 g     O .rwdata	00000004 _global_impure_ptr
00012dd0 g       *ABS*	00000000 __bss_end
00011070 g     F .text	000000f8 alt_iic_isr_register
00011028 g     F .text	00000048 alt_ic_irq_enabled
00012c34 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00012784 g     O .rwdata	00000028 alt_dev_null
00011898 g     F .text	0000001c alt_dcache_flush_all
00012950 g       *ABS*	00000000 __ram_rwdata_end
00012940 g     O .rwdata	00000008 alt_dev_list
000112c0 g     F .text	00000124 write
00012678 g       *ABS*	00000000 __ram_rodata_end
00010530 g     F .text	00000008 __umodsi3
00012dd0 g       *ABS*	00000000 end
00012624 g       *ABS*	00000000 __CTOR_LIST__
00019c40 g       *ABS*	00000000 __alt_stack_pointer
00011694 g     F .text	000000a4 altera_avalon_jtag_uart_write
00010650 g     F .text	0000069c ___vfprintf_internal_r
0001030c g     F .text	00000070 Timer_Init
00012408 g     F .text	000001bc __call_exitprocs
000101b4 g     F .text	0000003c _start
00011478 g     F .text	00000030 alt_sys_init
00012298 g     F .text	0000016c __register_exitproc
00010e64 g     F .text	00000038 __mulsi3
00012678 g       *ABS*	00000000 __ram_rwdata_start
00012628 g       *ABS*	00000000 __ram_rodata_start
000114e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00012158 g     F .text	000000d0 alt_get_fd
0001225c g     F .text	0000003c memcmp
00012dd0 g       *ABS*	00000000 __alt_stack_base
00012c28 g     O .bss	00000004 counter
00012038 g     F .text	00000120 alt_find_file
000118e0 g     F .text	000000b4 alt_dev_llist_insert
00010d10 g     F .text	000000bc __sfvwrite_small_dev
00012c28 g       *ABS*	00000000 __bss_start
0001037c g     F .text	00000070 main
00012c40 g     O .bss	00000004 alt_envp
00011538 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012d44 g     O .bss	0000008c _atexit0
0001294c g     O .rwdata	00000004 alt_errno
00010468 g     F .text	00000060 __divsi3
00012628 g       *ABS*	00000000 __CTOR_END__
00012628 g       *ABS*	00000000 __flash_rodata_start
00012628 g       *ABS*	00000000 __DTOR_LIST__
00011444 g     F .text	00000034 alt_irq_init
00011f0c g     F .text	00000078 alt_release_fd
00012228 g     F .text	00000014 atexit
00010dec g     F .text	00000078 _write_r
0001292c g     O .rwdata	00000004 _impure_ptr
00012c38 g     O .bss	00000004 alt_argc
00011a58 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012938 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010e9c g     F .text	00000050 alt_ic_isr_register
00012950 g       *ABS*	00000000 _edata
00012dd0 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00010f88 g     F .text	000000a0 alt_ic_irq_disable
00011f84 g     F .text	00000020 altera_nios2_qsys_irq_init
0001223c g     F .text	00000020 exit
000104c8 g     F .text	00000060 __modsi3
00019c40 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012604 g     F .text	00000020 _exit
00010dcc g     F .text	00000020 strlen
00011d20 g     F .text	0000018c open
00011abc g     F .text	0000001c alt_icache_flush_all
00012934 g     O .rwdata	00000004 alt_priority_mask
00010eec g     F .text	0000009c alt_ic_irq_enable
00010cec g     F .text	00000024 __vfprintf_internal
000119f4 g     F .text	00000064 _do_ctors
00011738 g     F .text	00000100 close
00011168 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00012628 g     O .rodata	00000010 hex_table



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406d14 	ori	at,at,436
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c00074 	movhi	r3,1
   10134:	18cb1104 	addi	r3,r3,11332
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00074 	movhi	r3,1
   1014c:	18cb1104 	addi	r3,r3,11332
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dee71014 	ori	sp,sp,40000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6aa4b14 	ori	gp,gp,43308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101c8:	108b0a14 	ori	r2,r2,11304

    movhi r3, %hi(__bss_end)
   101cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d0:	18cb7414 	ori	r3,r3,11728

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	00111680 	call	11168 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	00112540 	call	11254 <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <Timer_IRQ_Handler>:

unsigned int counter = 0;
unsigned int led_state = 0;

void Timer_IRQ_Handler(void* isr_context)
{
   101f0:	defffb04 	addi	sp,sp,-20
   101f4:	dfc00415 	stw	ra,16(sp)
   101f8:	df000315 	stw	fp,12(sp)
   101fc:	df000304 	addi	fp,sp,12
   10200:	e13fff15 	stw	r4,-4(fp)
    counter++;
   10204:	d0a0bf17 	ldw	r2,-32004(gp)
   10208:	10800044 	addi	r2,r2,1
   1020c:	d0a0bf15 	stw	r2,-32004(gp)
    printf("%d seconds\n", counter);
   10210:	d160bf17 	ldw	r5,-32004(gp)
   10214:	01000074 	movhi	r4,1
   10218:	21098e04 	addi	r4,r4,9784
   1021c:	00105380 	call	10538 <printf>

    // Hien thi led 7 doan
    int units = counter % 10;
   10220:	d120bf17 	ldw	r4,-32004(gp)
   10224:	01400284 	movi	r5,10
   10228:	00105300 	call	10530 <__umodsi3>
   1022c:	e0bffe15 	stw	r2,-8(fp)
    int tens  = (counter / 10) % 10;
   10230:	d120bf17 	ldw	r4,-32004(gp)
   10234:	01400284 	movi	r5,10
   10238:	00105280 	call	10528 <__udivsi3>
   1023c:	1009883a 	mov	r4,r2
   10240:	01400284 	movi	r5,10
   10244:	00105300 	call	10530 <__umodsi3>
   10248:	e0bffd15 	stw	r2,-12(fp)
    IOWR(LED_0_BASE, 0, hex_table[units]);
   1024c:	e0fffe17 	ldw	r3,-8(fp)
   10250:	00800074 	movhi	r2,1
   10254:	10898a04 	addi	r2,r2,9768
   10258:	10c5883a 	add	r2,r2,r3
   1025c:	10800003 	ldbu	r2,0(r2)
   10260:	10c03fcc 	andi	r3,r2,255
   10264:	008000b4 	movhi	r2,2
   10268:	10842104 	addi	r2,r2,4228
   1026c:	10c00035 	stwio	r3,0(r2)
    IOWR(LED_1_BASE, 0, hex_table[tens]);
   10270:	e0fffd17 	ldw	r3,-12(fp)
   10274:	00800074 	movhi	r2,1
   10278:	10898a04 	addi	r2,r2,9768
   1027c:	10c5883a 	add	r2,r2,r3
   10280:	10800003 	ldbu	r2,0(r2)
   10284:	10c03fcc 	andi	r3,r2,255
   10288:	008000b4 	movhi	r2,2
   1028c:	10841f04 	addi	r2,r2,4220
   10290:	10c00035 	stwio	r3,0(r2)

    // sang duoi khi counter = 91 (MSSV: 21122091)
    if (counter == 91) {
   10294:	d0a0bf17 	ldw	r2,-32004(gp)
   10298:	108016d8 	cmpnei	r2,r2,91
   1029c:	10000f1e 	bne	r2,zero,102dc <Timer_IRQ_Handler+0xec>
        led_state = (led_state << 1) | 0x0001;
   102a0:	d0a0c017 	ldw	r2,-32000(gp)
   102a4:	1085883a 	add	r2,r2,r2
   102a8:	10800054 	ori	r2,r2,1
   102ac:	d0a0c015 	stw	r2,-32000(gp)
        if (led_state > 0xFFFF) led_state = 0x0001;
   102b0:	d0e0c017 	ldw	r3,-32000(gp)
   102b4:	00bfffd4 	movui	r2,65535
   102b8:	10c0022e 	bgeu	r2,r3,102c4 <Timer_IRQ_Handler+0xd4>
   102bc:	00800044 	movi	r2,1
   102c0:	d0a0c015 	stw	r2,-32000(gp)
        IOWR(LEDR_BASE, 0, led_state);
   102c4:	d0a0c017 	ldw	r2,-32000(gp)
   102c8:	1007883a 	mov	r3,r2
   102cc:	008000b4 	movhi	r2,2
   102d0:	10841404 	addi	r2,r2,4176
   102d4:	10c00035 	stwio	r3,0(r2)
   102d8:	00000306 	br	102e8 <Timer_IRQ_Handler+0xf8>
    } else {
        IOWR(LEDR_BASE, 0, 0x0000); // tat led
   102dc:	008000b4 	movhi	r2,2
   102e0:	10841404 	addi	r2,r2,4176
   102e4:	10000035 	stwio	zero,0(r2)
    }

    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
   102e8:	00c000b4 	movhi	r3,2
   102ec:	18c40804 	addi	r3,r3,4128
   102f0:	00800044 	movi	r2,1
   102f4:	18800035 	stwio	r2,0(r3)
}
   102f8:	e037883a 	mov	sp,fp
   102fc:	dfc00117 	ldw	ra,4(sp)
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00204 	addi	sp,sp,8
   10308:	f800283a 	ret

0001030c <Timer_Init>:

void Timer_Init(void)
{
   1030c:	defffe04 	addi	sp,sp,-8
   10310:	df000115 	stw	fp,4(sp)
   10314:	df000104 	addi	fp,sp,4
    unsigned int period = 50000000 - 1;
   10318:	0080bef4 	movhi	r2,763
   1031c:	10bc1fc4 	addi	r2,r2,-3969
   10320:	e0bfff15 	stw	r2,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   10324:	00c000b4 	movhi	r3,2
   10328:	18c40904 	addi	r3,r3,4132
   1032c:	00800204 	movi	r2,8
   10330:	18800035 	stwio	r2,0(r3)

    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, period);
   10334:	e0ffff17 	ldw	r3,-4(fp)
   10338:	008000b4 	movhi	r2,2
   1033c:	10840a04 	addi	r2,r2,4136
   10340:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (period >> 16));
   10344:	e0bfff17 	ldw	r2,-4(fp)
   10348:	1004d43a 	srli	r2,r2,16
   1034c:	1007883a 	mov	r3,r2
   10350:	008000b4 	movhi	r2,2
   10354:	10840b04 	addi	r2,r2,4140
   10358:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
   1035c:	00c000b4 	movhi	r3,2
   10360:	18c40904 	addi	r3,r3,4132
   10364:	008001c4 	movi	r2,7
   10368:	18800035 	stwio	r2,0(r3)
                                                  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
                                                  ALTERA_AVALON_TIMER_CONTROL_START_MSK);
}
   1036c:	e037883a 	mov	sp,fp
   10370:	df000017 	ldw	fp,0(sp)
   10374:	dec00104 	addi	sp,sp,4
   10378:	f800283a 	ret

0001037c <main>:

int main(void)
{
   1037c:	defffc04 	addi	sp,sp,-16
   10380:	dfc00315 	stw	ra,12(sp)
   10384:	df000215 	stw	fp,8(sp)
   10388:	df000204 	addi	fp,sp,8
    Timer_Init();
   1038c:	001030c0 	call	1030c <Timer_Init>

    alt_ic_isr_register(0, TIMER_0_IRQ, Timer_IRQ_Handler, (void*)0, (void*)0);
   10390:	d8000015 	stw	zero,0(sp)
   10394:	0009883a 	mov	r4,zero
   10398:	01400044 	movi	r5,1
   1039c:	01800074 	movhi	r6,1
   103a0:	31807c04 	addi	r6,r6,496
   103a4:	000f883a 	mov	r7,zero
   103a8:	0010e9c0 	call	10e9c <alt_ic_isr_register>
   103ac:	00000006 	br	103b0 <main+0x34>

    while (1) {
        // read sw1 state
        int sw1 = (IORD(SWITCH_0_BASE, 0) & 0x02) >> 1;
   103b0:	008000b4 	movhi	r2,2
   103b4:	10842004 	addi	r2,r2,4224
   103b8:	10800037 	ldwio	r2,0(r2)
   103bc:	1080008c 	andi	r2,r2,2
   103c0:	1005d07a 	srai	r2,r2,1
   103c4:	e0bfff15 	stw	r2,-4(fp)
        if (sw1 == 1 && counter < 13) {
   103c8:	e0bfff17 	ldw	r2,-4(fp)
   103cc:	10800058 	cmpnei	r2,r2,1
   103d0:	103ff71e 	bne	r2,zero,103b0 <main+0x34>
   103d4:	d0a0bf17 	ldw	r2,-32004(gp)
   103d8:	10800368 	cmpgeui	r2,r2,13
   103dc:	103ff41e 	bne	r2,zero,103b0 <main+0x34>
            counter = 13;
   103e0:	00800344 	movi	r2,13
   103e4:	d0a0bf15 	stw	r2,-32004(gp)
        }
    }
   103e8:	003ff106 	br	103b0 <main+0x34>

000103ec <udivmodsi4>:
   103ec:	29001b2e 	bgeu	r5,r4,1045c <udivmodsi4+0x70>
   103f0:	28001a16 	blt	r5,zero,1045c <udivmodsi4+0x70>
   103f4:	00800044 	movi	r2,1
   103f8:	0007883a 	mov	r3,zero
   103fc:	01c007c4 	movi	r7,31
   10400:	00000306 	br	10410 <udivmodsi4+0x24>
   10404:	19c01326 	beq	r3,r7,10454 <udivmodsi4+0x68>
   10408:	18c00044 	addi	r3,r3,1
   1040c:	28000416 	blt	r5,zero,10420 <udivmodsi4+0x34>
   10410:	294b883a 	add	r5,r5,r5
   10414:	1085883a 	add	r2,r2,r2
   10418:	293ffa36 	bltu	r5,r4,10404 <udivmodsi4+0x18>
   1041c:	10000d26 	beq	r2,zero,10454 <udivmodsi4+0x68>
   10420:	0007883a 	mov	r3,zero
   10424:	21400236 	bltu	r4,r5,10430 <udivmodsi4+0x44>
   10428:	2149c83a 	sub	r4,r4,r5
   1042c:	1886b03a 	or	r3,r3,r2
   10430:	1004d07a 	srli	r2,r2,1
   10434:	280ad07a 	srli	r5,r5,1
   10438:	103ffa1e 	bne	r2,zero,10424 <udivmodsi4+0x38>
   1043c:	30000226 	beq	r6,zero,10448 <udivmodsi4+0x5c>
   10440:	2005883a 	mov	r2,r4
   10444:	f800283a 	ret
   10448:	1809883a 	mov	r4,r3
   1044c:	2005883a 	mov	r2,r4
   10450:	f800283a 	ret
   10454:	0007883a 	mov	r3,zero
   10458:	003ff806 	br	1043c <udivmodsi4+0x50>
   1045c:	00800044 	movi	r2,1
   10460:	0007883a 	mov	r3,zero
   10464:	003fef06 	br	10424 <udivmodsi4+0x38>

00010468 <__divsi3>:
   10468:	defffe04 	addi	sp,sp,-8
   1046c:	dc000015 	stw	r16,0(sp)
   10470:	dfc00115 	stw	ra,4(sp)
   10474:	0021883a 	mov	r16,zero
   10478:	20000c16 	blt	r4,zero,104ac <__divsi3+0x44>
   1047c:	000d883a 	mov	r6,zero
   10480:	28000e16 	blt	r5,zero,104bc <__divsi3+0x54>
   10484:	00103ec0 	call	103ec <udivmodsi4>
   10488:	1007883a 	mov	r3,r2
   1048c:	8005003a 	cmpeq	r2,r16,zero
   10490:	1000011e 	bne	r2,zero,10498 <__divsi3+0x30>
   10494:	00c7c83a 	sub	r3,zero,r3
   10498:	1805883a 	mov	r2,r3
   1049c:	dfc00117 	ldw	ra,4(sp)
   104a0:	dc000017 	ldw	r16,0(sp)
   104a4:	dec00204 	addi	sp,sp,8
   104a8:	f800283a 	ret
   104ac:	0109c83a 	sub	r4,zero,r4
   104b0:	04000044 	movi	r16,1
   104b4:	000d883a 	mov	r6,zero
   104b8:	283ff20e 	bge	r5,zero,10484 <__divsi3+0x1c>
   104bc:	014bc83a 	sub	r5,zero,r5
   104c0:	8021003a 	cmpeq	r16,r16,zero
   104c4:	003fef06 	br	10484 <__divsi3+0x1c>

000104c8 <__modsi3>:
   104c8:	deffff04 	addi	sp,sp,-4
   104cc:	dfc00015 	stw	ra,0(sp)
   104d0:	01800044 	movi	r6,1
   104d4:	2807883a 	mov	r3,r5
   104d8:	20000416 	blt	r4,zero,104ec <__modsi3+0x24>
   104dc:	28000c16 	blt	r5,zero,10510 <__modsi3+0x48>
   104e0:	dfc00017 	ldw	ra,0(sp)
   104e4:	dec00104 	addi	sp,sp,4
   104e8:	00103ec1 	jmpi	103ec <udivmodsi4>
   104ec:	0109c83a 	sub	r4,zero,r4
   104f0:	28000b16 	blt	r5,zero,10520 <__modsi3+0x58>
   104f4:	180b883a 	mov	r5,r3
   104f8:	01800044 	movi	r6,1
   104fc:	00103ec0 	call	103ec <udivmodsi4>
   10500:	0085c83a 	sub	r2,zero,r2
   10504:	dfc00017 	ldw	ra,0(sp)
   10508:	dec00104 	addi	sp,sp,4
   1050c:	f800283a 	ret
   10510:	014bc83a 	sub	r5,zero,r5
   10514:	dfc00017 	ldw	ra,0(sp)
   10518:	dec00104 	addi	sp,sp,4
   1051c:	00103ec1 	jmpi	103ec <udivmodsi4>
   10520:	0147c83a 	sub	r3,zero,r5
   10524:	003ff306 	br	104f4 <__modsi3+0x2c>

00010528 <__udivsi3>:
   10528:	000d883a 	mov	r6,zero
   1052c:	00103ec1 	jmpi	103ec <udivmodsi4>

00010530 <__umodsi3>:
   10530:	01800044 	movi	r6,1
   10534:	00103ec1 	jmpi	103ec <udivmodsi4>

00010538 <printf>:
   10538:	defffb04 	addi	sp,sp,-20
   1053c:	dfc00115 	stw	ra,4(sp)
   10540:	d9400215 	stw	r5,8(sp)
   10544:	d9800315 	stw	r6,12(sp)
   10548:	d9c00415 	stw	r7,16(sp)
   1054c:	00800074 	movhi	r2,1
   10550:	108a4b04 	addi	r2,r2,10540
   10554:	11400017 	ldw	r5,0(r2)
   10558:	d8800204 	addi	r2,sp,8
   1055c:	d8800015 	stw	r2,0(sp)
   10560:	29c00217 	ldw	r7,8(r5)
   10564:	100d883a 	mov	r6,r2
   10568:	00800074 	movhi	r2,1
   1056c:	10834404 	addi	r2,r2,3344
   10570:	200b883a 	mov	r5,r4
   10574:	38800115 	stw	r2,4(r7)
   10578:	3809883a 	mov	r4,r7
   1057c:	0010cec0 	call	10cec <__vfprintf_internal>
   10580:	dfc00117 	ldw	ra,4(sp)
   10584:	dec00504 	addi	sp,sp,20
   10588:	f800283a 	ret

0001058c <_printf_r>:
   1058c:	defffc04 	addi	sp,sp,-16
   10590:	dfc00115 	stw	ra,4(sp)
   10594:	d9800215 	stw	r6,8(sp)
   10598:	d9c00315 	stw	r7,12(sp)
   1059c:	22000217 	ldw	r8,8(r4)
   105a0:	d8800204 	addi	r2,sp,8
   105a4:	d8800015 	stw	r2,0(sp)
   105a8:	100f883a 	mov	r7,r2
   105ac:	00800074 	movhi	r2,1
   105b0:	10834404 	addi	r2,r2,3344
   105b4:	280d883a 	mov	r6,r5
   105b8:	40800115 	stw	r2,4(r8)
   105bc:	400b883a 	mov	r5,r8
   105c0:	00106500 	call	10650 <___vfprintf_internal_r>
   105c4:	dfc00117 	ldw	ra,4(sp)
   105c8:	dec00404 	addi	sp,sp,16
   105cc:	f800283a 	ret

000105d0 <print_repeat>:
   105d0:	defffb04 	addi	sp,sp,-20
   105d4:	dc800315 	stw	r18,12(sp)
   105d8:	dc400215 	stw	r17,8(sp)
   105dc:	dc000115 	stw	r16,4(sp)
   105e0:	dfc00415 	stw	ra,16(sp)
   105e4:	2025883a 	mov	r18,r4
   105e8:	2823883a 	mov	r17,r5
   105ec:	3821883a 	mov	r16,r7
   105f0:	d9800005 	stb	r6,0(sp)
   105f4:	9009883a 	mov	r4,r18
   105f8:	880b883a 	mov	r5,r17
   105fc:	d80d883a 	mov	r6,sp
   10600:	01c00044 	movi	r7,1
   10604:	04000b0e 	bge	zero,r16,10634 <print_repeat+0x64>
   10608:	88c00117 	ldw	r3,4(r17)
   1060c:	843fffc4 	addi	r16,r16,-1
   10610:	183ee83a 	callr	r3
   10614:	103ff726 	beq	r2,zero,105f4 <print_repeat+0x24>
   10618:	00bfffc4 	movi	r2,-1
   1061c:	dfc00417 	ldw	ra,16(sp)
   10620:	dc800317 	ldw	r18,12(sp)
   10624:	dc400217 	ldw	r17,8(sp)
   10628:	dc000117 	ldw	r16,4(sp)
   1062c:	dec00504 	addi	sp,sp,20
   10630:	f800283a 	ret
   10634:	0005883a 	mov	r2,zero
   10638:	dfc00417 	ldw	ra,16(sp)
   1063c:	dc800317 	ldw	r18,12(sp)
   10640:	dc400217 	ldw	r17,8(sp)
   10644:	dc000117 	ldw	r16,4(sp)
   10648:	dec00504 	addi	sp,sp,20
   1064c:	f800283a 	ret

00010650 <___vfprintf_internal_r>:
   10650:	deffe304 	addi	sp,sp,-116
   10654:	df001b15 	stw	fp,108(sp)
   10658:	ddc01a15 	stw	r23,104(sp)
   1065c:	dd001715 	stw	r20,92(sp)
   10660:	dc801515 	stw	r18,84(sp)
   10664:	dc001315 	stw	r16,76(sp)
   10668:	dfc01c15 	stw	ra,112(sp)
   1066c:	dd801915 	stw	r22,100(sp)
   10670:	dd401815 	stw	r21,96(sp)
   10674:	dcc01615 	stw	r19,88(sp)
   10678:	dc401415 	stw	r17,80(sp)
   1067c:	d9001015 	stw	r4,64(sp)
   10680:	2829883a 	mov	r20,r5
   10684:	d9c01115 	stw	r7,68(sp)
   10688:	3025883a 	mov	r18,r6
   1068c:	0021883a 	mov	r16,zero
   10690:	d8000f15 	stw	zero,60(sp)
   10694:	d8000e15 	stw	zero,56(sp)
   10698:	0039883a 	mov	fp,zero
   1069c:	d8000915 	stw	zero,36(sp)
   106a0:	d8000d15 	stw	zero,52(sp)
   106a4:	d8000c15 	stw	zero,48(sp)
   106a8:	d8000b15 	stw	zero,44(sp)
   106ac:	002f883a 	mov	r23,zero
   106b0:	91400003 	ldbu	r5,0(r18)
   106b4:	01c00044 	movi	r7,1
   106b8:	94800044 	addi	r18,r18,1
   106bc:	29003fcc 	andi	r4,r5,255
   106c0:	2100201c 	xori	r4,r4,128
   106c4:	213fe004 	addi	r4,r4,-128
   106c8:	20001526 	beq	r4,zero,10720 <___vfprintf_internal_r+0xd0>
   106cc:	81c03526 	beq	r16,r7,107a4 <___vfprintf_internal_r+0x154>
   106d0:	3c002016 	blt	r7,r16,10754 <___vfprintf_internal_r+0x104>
   106d4:	803ff61e 	bne	r16,zero,106b0 <___vfprintf_internal_r+0x60>
   106d8:	00800944 	movi	r2,37
   106dc:	2081501e 	bne	r4,r2,10c20 <___vfprintf_internal_r+0x5d0>
   106e0:	073fffc4 	movi	fp,-1
   106e4:	00800284 	movi	r2,10
   106e8:	d9c00c15 	stw	r7,48(sp)
   106ec:	d8000f15 	stw	zero,60(sp)
   106f0:	d8000e15 	stw	zero,56(sp)
   106f4:	df000915 	stw	fp,36(sp)
   106f8:	d8800d15 	stw	r2,52(sp)
   106fc:	d8000b15 	stw	zero,44(sp)
   10700:	91400003 	ldbu	r5,0(r18)
   10704:	3821883a 	mov	r16,r7
   10708:	94800044 	addi	r18,r18,1
   1070c:	29003fcc 	andi	r4,r5,255
   10710:	2100201c 	xori	r4,r4,128
   10714:	213fe004 	addi	r4,r4,-128
   10718:	01c00044 	movi	r7,1
   1071c:	203feb1e 	bne	r4,zero,106cc <___vfprintf_internal_r+0x7c>
   10720:	b805883a 	mov	r2,r23
   10724:	dfc01c17 	ldw	ra,112(sp)
   10728:	df001b17 	ldw	fp,108(sp)
   1072c:	ddc01a17 	ldw	r23,104(sp)
   10730:	dd801917 	ldw	r22,100(sp)
   10734:	dd401817 	ldw	r21,96(sp)
   10738:	dd001717 	ldw	r20,92(sp)
   1073c:	dcc01617 	ldw	r19,88(sp)
   10740:	dc801517 	ldw	r18,84(sp)
   10744:	dc401417 	ldw	r17,80(sp)
   10748:	dc001317 	ldw	r16,76(sp)
   1074c:	dec01d04 	addi	sp,sp,116
   10750:	f800283a 	ret
   10754:	00800084 	movi	r2,2
   10758:	80801726 	beq	r16,r2,107b8 <___vfprintf_internal_r+0x168>
   1075c:	008000c4 	movi	r2,3
   10760:	80bfd31e 	bne	r16,r2,106b0 <___vfprintf_internal_r+0x60>
   10764:	2c7ff404 	addi	r17,r5,-48
   10768:	88c03fcc 	andi	r3,r17,255
   1076c:	00800244 	movi	r2,9
   10770:	10c02136 	bltu	r2,r3,107f8 <___vfprintf_internal_r+0x1a8>
   10774:	d8c00917 	ldw	r3,36(sp)
   10778:	18012716 	blt	r3,zero,10c18 <___vfprintf_internal_r+0x5c8>
   1077c:	d9000917 	ldw	r4,36(sp)
   10780:	01400284 	movi	r5,10
   10784:	0010e640 	call	10e64 <__mulsi3>
   10788:	1007883a 	mov	r3,r2
   1078c:	88803fcc 	andi	r2,r17,255
   10790:	1080201c 	xori	r2,r2,128
   10794:	10bfe004 	addi	r2,r2,-128
   10798:	1887883a 	add	r3,r3,r2
   1079c:	d8c00915 	stw	r3,36(sp)
   107a0:	003fc306 	br	106b0 <___vfprintf_internal_r+0x60>
   107a4:	00800c04 	movi	r2,48
   107a8:	2080b326 	beq	r4,r2,10a78 <___vfprintf_internal_r+0x428>
   107ac:	00800944 	movi	r2,37
   107b0:	20812726 	beq	r4,r2,10c50 <___vfprintf_internal_r+0x600>
   107b4:	04000084 	movi	r16,2
   107b8:	2c7ff404 	addi	r17,r5,-48
   107bc:	88c03fcc 	andi	r3,r17,255
   107c0:	00800244 	movi	r2,9
   107c4:	10c00a36 	bltu	r2,r3,107f0 <___vfprintf_internal_r+0x1a0>
   107c8:	e000b416 	blt	fp,zero,10a9c <___vfprintf_internal_r+0x44c>
   107cc:	e009883a 	mov	r4,fp
   107d0:	01400284 	movi	r5,10
   107d4:	0010e640 	call	10e64 <__mulsi3>
   107d8:	1007883a 	mov	r3,r2
   107dc:	88803fcc 	andi	r2,r17,255
   107e0:	1080201c 	xori	r2,r2,128
   107e4:	10bfe004 	addi	r2,r2,-128
   107e8:	18b9883a 	add	fp,r3,r2
   107ec:	003fb006 	br	106b0 <___vfprintf_internal_r+0x60>
   107f0:	00800b84 	movi	r2,46
   107f4:	2080a326 	beq	r4,r2,10a84 <___vfprintf_internal_r+0x434>
   107f8:	00801b04 	movi	r2,108
   107fc:	2080a326 	beq	r4,r2,10a8c <___vfprintf_internal_r+0x43c>
   10800:	d8c00917 	ldw	r3,36(sp)
   10804:	1800a716 	blt	r3,zero,10aa4 <___vfprintf_internal_r+0x454>
   10808:	d8000f15 	stw	zero,60(sp)
   1080c:	28bfea04 	addi	r2,r5,-88
   10810:	10803fcc 	andi	r2,r2,255
   10814:	00c00804 	movi	r3,32
   10818:	18802836 	bltu	r3,r2,108bc <___vfprintf_internal_r+0x26c>
   1081c:	1085883a 	add	r2,r2,r2
   10820:	1085883a 	add	r2,r2,r2
   10824:	00c00074 	movhi	r3,1
   10828:	18c20e04 	addi	r3,r3,2104
   1082c:	10c5883a 	add	r2,r2,r3
   10830:	11000017 	ldw	r4,0(r2)
   10834:	2000683a 	jmp	r4
   10838:	000108c4 	movi	zero,1059
   1083c:	000108bc 	xorhi	zero,zero,1058
   10840:	000108bc 	xorhi	zero,zero,1058
   10844:	000108bc 	xorhi	zero,zero,1058
   10848:	000108bc 	xorhi	zero,zero,1058
   1084c:	000108bc 	xorhi	zero,zero,1058
   10850:	000108bc 	xorhi	zero,zero,1058
   10854:	000108bc 	xorhi	zero,zero,1058
   10858:	000108bc 	xorhi	zero,zero,1058
   1085c:	000108bc 	xorhi	zero,zero,1058
   10860:	000108bc 	xorhi	zero,zero,1058
   10864:	00010af0 	cmpltui	zero,zero,1067
   10868:	000108d8 	cmpnei	zero,zero,1059
   1086c:	000108bc 	xorhi	zero,zero,1058
   10870:	000108bc 	xorhi	zero,zero,1058
   10874:	000108bc 	xorhi	zero,zero,1058
   10878:	000108bc 	xorhi	zero,zero,1058
   1087c:	000108d8 	cmpnei	zero,zero,1059
   10880:	000108bc 	xorhi	zero,zero,1058
   10884:	000108bc 	xorhi	zero,zero,1058
   10888:	000108bc 	xorhi	zero,zero,1058
   1088c:	000108bc 	xorhi	zero,zero,1058
   10890:	000108bc 	xorhi	zero,zero,1058
   10894:	00010b58 	cmpnei	zero,zero,1069
   10898:	000108bc 	xorhi	zero,zero,1058
   1089c:	000108bc 	xorhi	zero,zero,1058
   108a0:	000108bc 	xorhi	zero,zero,1058
   108a4:	00010b68 	cmpgeui	zero,zero,1069
   108a8:	000108bc 	xorhi	zero,zero,1058
   108ac:	00010a3c 	xorhi	zero,zero,1064
   108b0:	000108bc 	xorhi	zero,zero,1058
   108b4:	000108bc 	xorhi	zero,zero,1058
   108b8:	00010a34 	movhi	zero,1064
   108bc:	0021883a 	mov	r16,zero
   108c0:	003f7b06 	br	106b0 <___vfprintf_internal_r+0x60>
   108c4:	00c00404 	movi	r3,16
   108c8:	00800044 	movi	r2,1
   108cc:	d8c00d15 	stw	r3,52(sp)
   108d0:	d8000c15 	stw	zero,48(sp)
   108d4:	d8800b15 	stw	r2,44(sp)
   108d8:	d8c00e17 	ldw	r3,56(sp)
   108dc:	1805003a 	cmpeq	r2,r3,zero
   108e0:	10005a1e 	bne	r2,zero,10a4c <___vfprintf_internal_r+0x3fc>
   108e4:	d8800c17 	ldw	r2,48(sp)
   108e8:	1000781e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x47c>
   108ec:	d8801117 	ldw	r2,68(sp)
   108f0:	d8000a15 	stw	zero,40(sp)
   108f4:	14400017 	ldw	r17,0(r2)
   108f8:	11c00104 	addi	r7,r2,4
   108fc:	d9c01115 	stw	r7,68(sp)
   10900:	88005a26 	beq	r17,zero,10a6c <___vfprintf_internal_r+0x41c>
   10904:	d8c00b17 	ldw	r3,44(sp)
   10908:	dcc00044 	addi	r19,sp,1
   1090c:	05800244 	movi	r22,9
   10910:	182b003a 	cmpeq	r21,r3,zero
   10914:	dcc01215 	stw	r19,72(sp)
   10918:	00000506 	br	10930 <___vfprintf_internal_r+0x2e0>
   1091c:	21000c04 	addi	r4,r4,48
   10920:	99000005 	stb	r4,0(r19)
   10924:	9cc00044 	addi	r19,r19,1
   10928:	80000f26 	beq	r16,zero,10968 <___vfprintf_internal_r+0x318>
   1092c:	8023883a 	mov	r17,r16
   10930:	d9400d17 	ldw	r5,52(sp)
   10934:	8809883a 	mov	r4,r17
   10938:	00105280 	call	10528 <__udivsi3>
   1093c:	d9000d17 	ldw	r4,52(sp)
   10940:	100b883a 	mov	r5,r2
   10944:	1021883a 	mov	r16,r2
   10948:	0010e640 	call	10e64 <__mulsi3>
   1094c:	8889c83a 	sub	r4,r17,r2
   10950:	b13ff20e 	bge	r22,r4,1091c <___vfprintf_internal_r+0x2cc>
   10954:	a8009f1e 	bne	r21,zero,10bd4 <___vfprintf_internal_r+0x584>
   10958:	21000dc4 	addi	r4,r4,55
   1095c:	99000005 	stb	r4,0(r19)
   10960:	9cc00044 	addi	r19,r19,1
   10964:	803ff11e 	bne	r16,zero,1092c <___vfprintf_internal_r+0x2dc>
   10968:	d8801217 	ldw	r2,72(sp)
   1096c:	98a3c83a 	sub	r17,r19,r2
   10970:	d8c00917 	ldw	r3,36(sp)
   10974:	1c4bc83a 	sub	r5,r3,r17
   10978:	0140130e 	bge	zero,r5,109c8 <___vfprintf_internal_r+0x378>
   1097c:	d8c00044 	addi	r3,sp,1
   10980:	18800804 	addi	r2,r3,32
   10984:	9880102e 	bgeu	r19,r2,109c8 <___vfprintf_internal_r+0x378>
   10988:	00800c04 	movi	r2,48
   1098c:	28ffffc4 	addi	r3,r5,-1
   10990:	98800005 	stb	r2,0(r19)
   10994:	99000044 	addi	r4,r19,1
   10998:	00c0080e 	bge	zero,r3,109bc <___vfprintf_internal_r+0x36c>
   1099c:	d8c00044 	addi	r3,sp,1
   109a0:	18800804 	addi	r2,r3,32
   109a4:	2080052e 	bgeu	r4,r2,109bc <___vfprintf_internal_r+0x36c>
   109a8:	00800c04 	movi	r2,48
   109ac:	20800005 	stb	r2,0(r4)
   109b0:	21000044 	addi	r4,r4,1
   109b4:	9945883a 	add	r2,r19,r5
   109b8:	20bff81e 	bne	r4,r2,1099c <___vfprintf_internal_r+0x34c>
   109bc:	d8801217 	ldw	r2,72(sp)
   109c0:	2027883a 	mov	r19,r4
   109c4:	20a3c83a 	sub	r17,r4,r2
   109c8:	d8c00a17 	ldw	r3,40(sp)
   109cc:	1c45883a 	add	r2,r3,r17
   109d0:	e0a1c83a 	sub	r16,fp,r2
   109d4:	d8800f17 	ldw	r2,60(sp)
   109d8:	10008026 	beq	r2,zero,10bdc <___vfprintf_internal_r+0x58c>
   109dc:	1805003a 	cmpeq	r2,r3,zero
   109e0:	1000ae26 	beq	r2,zero,10c9c <___vfprintf_internal_r+0x64c>
   109e4:	0400a516 	blt	zero,r16,10c7c <___vfprintf_internal_r+0x62c>
   109e8:	b805883a 	mov	r2,r23
   109ec:	0440950e 	bge	zero,r17,10c44 <___vfprintf_internal_r+0x5f4>
   109f0:	102f883a 	mov	r23,r2
   109f4:	1461883a 	add	r16,r2,r17
   109f8:	00000206 	br	10a04 <___vfprintf_internal_r+0x3b4>
   109fc:	bdc00044 	addi	r23,r23,1
   10a00:	85ffae26 	beq	r16,r23,108bc <___vfprintf_internal_r+0x26c>
   10a04:	9cffffc4 	addi	r19,r19,-1
   10a08:	98800003 	ldbu	r2,0(r19)
   10a0c:	a0c00117 	ldw	r3,4(r20)
   10a10:	d9001017 	ldw	r4,64(sp)
   10a14:	d8800005 	stb	r2,0(sp)
   10a18:	a00b883a 	mov	r5,r20
   10a1c:	d80d883a 	mov	r6,sp
   10a20:	01c00044 	movi	r7,1
   10a24:	183ee83a 	callr	r3
   10a28:	103ff426 	beq	r2,zero,109fc <___vfprintf_internal_r+0x3ac>
   10a2c:	05ffffc4 	movi	r23,-1
   10a30:	003f3b06 	br	10720 <___vfprintf_internal_r+0xd0>
   10a34:	00c00404 	movi	r3,16
   10a38:	d8c00d15 	stw	r3,52(sp)
   10a3c:	d8000c15 	stw	zero,48(sp)
   10a40:	d8c00e17 	ldw	r3,56(sp)
   10a44:	1805003a 	cmpeq	r2,r3,zero
   10a48:	103fa626 	beq	r2,zero,108e4 <___vfprintf_internal_r+0x294>
   10a4c:	d8c00c17 	ldw	r3,48(sp)
   10a50:	1800171e 	bne	r3,zero,10ab0 <___vfprintf_internal_r+0x460>
   10a54:	d8c01117 	ldw	r3,68(sp)
   10a58:	d8000a15 	stw	zero,40(sp)
   10a5c:	1c400017 	ldw	r17,0(r3)
   10a60:	19c00104 	addi	r7,r3,4
   10a64:	d9c01115 	stw	r7,68(sp)
   10a68:	883fa61e 	bne	r17,zero,10904 <___vfprintf_internal_r+0x2b4>
   10a6c:	dcc00044 	addi	r19,sp,1
   10a70:	dcc01215 	stw	r19,72(sp)
   10a74:	003fbe06 	br	10970 <___vfprintf_internal_r+0x320>
   10a78:	04000084 	movi	r16,2
   10a7c:	d9c00f15 	stw	r7,60(sp)
   10a80:	003f0b06 	br	106b0 <___vfprintf_internal_r+0x60>
   10a84:	040000c4 	movi	r16,3
   10a88:	003f0906 	br	106b0 <___vfprintf_internal_r+0x60>
   10a8c:	00800044 	movi	r2,1
   10a90:	040000c4 	movi	r16,3
   10a94:	d8800e15 	stw	r2,56(sp)
   10a98:	003f0506 	br	106b0 <___vfprintf_internal_r+0x60>
   10a9c:	0007883a 	mov	r3,zero
   10aa0:	003f4e06 	br	107dc <___vfprintf_internal_r+0x18c>
   10aa4:	00800044 	movi	r2,1
   10aa8:	d8800915 	stw	r2,36(sp)
   10aac:	003f5706 	br	1080c <___vfprintf_internal_r+0x1bc>
   10ab0:	d8801117 	ldw	r2,68(sp)
   10ab4:	14400017 	ldw	r17,0(r2)
   10ab8:	10800104 	addi	r2,r2,4
   10abc:	d8801115 	stw	r2,68(sp)
   10ac0:	88000716 	blt	r17,zero,10ae0 <___vfprintf_internal_r+0x490>
   10ac4:	d8000a15 	stw	zero,40(sp)
   10ac8:	003f8d06 	br	10900 <___vfprintf_internal_r+0x2b0>
   10acc:	d8c01117 	ldw	r3,68(sp)
   10ad0:	1c400017 	ldw	r17,0(r3)
   10ad4:	18c00104 	addi	r3,r3,4
   10ad8:	d8c01115 	stw	r3,68(sp)
   10adc:	883ff90e 	bge	r17,zero,10ac4 <___vfprintf_internal_r+0x474>
   10ae0:	00800044 	movi	r2,1
   10ae4:	0463c83a 	sub	r17,zero,r17
   10ae8:	d8800a15 	stw	r2,40(sp)
   10aec:	003f8406 	br	10900 <___vfprintf_internal_r+0x2b0>
   10af0:	04000044 	movi	r16,1
   10af4:	8700080e 	bge	r16,fp,10b18 <___vfprintf_internal_r+0x4c8>
   10af8:	d9001017 	ldw	r4,64(sp)
   10afc:	a00b883a 	mov	r5,r20
   10b00:	01800804 	movi	r6,32
   10b04:	e1ffffc4 	addi	r7,fp,-1
   10b08:	00105d00 	call	105d0 <print_repeat>
   10b0c:	103fc71e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10b10:	e5c5883a 	add	r2,fp,r23
   10b14:	15ffffc4 	addi	r23,r2,-1
   10b18:	d8c01117 	ldw	r3,68(sp)
   10b1c:	d9001017 	ldw	r4,64(sp)
   10b20:	800f883a 	mov	r7,r16
   10b24:	18800017 	ldw	r2,0(r3)
   10b28:	a0c00117 	ldw	r3,4(r20)
   10b2c:	a00b883a 	mov	r5,r20
   10b30:	d8800005 	stb	r2,0(sp)
   10b34:	d80d883a 	mov	r6,sp
   10b38:	183ee83a 	callr	r3
   10b3c:	103fbb1e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10b40:	d8801117 	ldw	r2,68(sp)
   10b44:	bdc00044 	addi	r23,r23,1
   10b48:	0021883a 	mov	r16,zero
   10b4c:	10800104 	addi	r2,r2,4
   10b50:	d8801115 	stw	r2,68(sp)
   10b54:	003ed606 	br	106b0 <___vfprintf_internal_r+0x60>
   10b58:	00800204 	movi	r2,8
   10b5c:	d8800d15 	stw	r2,52(sp)
   10b60:	d8000c15 	stw	zero,48(sp)
   10b64:	003fb606 	br	10a40 <___vfprintf_internal_r+0x3f0>
   10b68:	d8c01117 	ldw	r3,68(sp)
   10b6c:	1cc00017 	ldw	r19,0(r3)
   10b70:	9809883a 	mov	r4,r19
   10b74:	0010dcc0 	call	10dcc <strlen>
   10b78:	e0a1c83a 	sub	r16,fp,r2
   10b7c:	1023883a 	mov	r17,r2
   10b80:	0400070e 	bge	zero,r16,10ba0 <___vfprintf_internal_r+0x550>
   10b84:	d9001017 	ldw	r4,64(sp)
   10b88:	a00b883a 	mov	r5,r20
   10b8c:	01800804 	movi	r6,32
   10b90:	800f883a 	mov	r7,r16
   10b94:	00105d00 	call	105d0 <print_repeat>
   10b98:	103fa41e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10b9c:	bc2f883a 	add	r23,r23,r16
   10ba0:	a0c00117 	ldw	r3,4(r20)
   10ba4:	d9001017 	ldw	r4,64(sp)
   10ba8:	980d883a 	mov	r6,r19
   10bac:	a00b883a 	mov	r5,r20
   10bb0:	880f883a 	mov	r7,r17
   10bb4:	183ee83a 	callr	r3
   10bb8:	103f9c1e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10bbc:	d8801117 	ldw	r2,68(sp)
   10bc0:	bc6f883a 	add	r23,r23,r17
   10bc4:	0021883a 	mov	r16,zero
   10bc8:	10800104 	addi	r2,r2,4
   10bcc:	d8801115 	stw	r2,68(sp)
   10bd0:	003eb706 	br	106b0 <___vfprintf_internal_r+0x60>
   10bd4:	210015c4 	addi	r4,r4,87
   10bd8:	003f5106 	br	10920 <___vfprintf_internal_r+0x2d0>
   10bdc:	04003b16 	blt	zero,r16,10ccc <___vfprintf_internal_r+0x67c>
   10be0:	d8c00a17 	ldw	r3,40(sp)
   10be4:	1805003a 	cmpeq	r2,r3,zero
   10be8:	103f7f1e 	bne	r2,zero,109e8 <___vfprintf_internal_r+0x398>
   10bec:	a0c00117 	ldw	r3,4(r20)
   10bf0:	d9001017 	ldw	r4,64(sp)
   10bf4:	00800b44 	movi	r2,45
   10bf8:	d8800005 	stb	r2,0(sp)
   10bfc:	a00b883a 	mov	r5,r20
   10c00:	d80d883a 	mov	r6,sp
   10c04:	01c00044 	movi	r7,1
   10c08:	183ee83a 	callr	r3
   10c0c:	103f871e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10c10:	b8800044 	addi	r2,r23,1
   10c14:	003f7506 	br	109ec <___vfprintf_internal_r+0x39c>
   10c18:	0007883a 	mov	r3,zero
   10c1c:	003edb06 	br	1078c <___vfprintf_internal_r+0x13c>
   10c20:	a0c00117 	ldw	r3,4(r20)
   10c24:	d9001017 	ldw	r4,64(sp)
   10c28:	d9400005 	stb	r5,0(sp)
   10c2c:	d80d883a 	mov	r6,sp
   10c30:	a00b883a 	mov	r5,r20
   10c34:	183ee83a 	callr	r3
   10c38:	103f7c1e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10c3c:	bdc00044 	addi	r23,r23,1
   10c40:	003e9b06 	br	106b0 <___vfprintf_internal_r+0x60>
   10c44:	102f883a 	mov	r23,r2
   10c48:	0021883a 	mov	r16,zero
   10c4c:	003e9806 	br	106b0 <___vfprintf_internal_r+0x60>
   10c50:	a0c00117 	ldw	r3,4(r20)
   10c54:	d9000005 	stb	r4,0(sp)
   10c58:	d9001017 	ldw	r4,64(sp)
   10c5c:	a00b883a 	mov	r5,r20
   10c60:	d80d883a 	mov	r6,sp
   10c64:	800f883a 	mov	r7,r16
   10c68:	183ee83a 	callr	r3
   10c6c:	103f6f1e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10c70:	bc2f883a 	add	r23,r23,r16
   10c74:	0021883a 	mov	r16,zero
   10c78:	003e8d06 	br	106b0 <___vfprintf_internal_r+0x60>
   10c7c:	d9001017 	ldw	r4,64(sp)
   10c80:	a00b883a 	mov	r5,r20
   10c84:	01800c04 	movi	r6,48
   10c88:	800f883a 	mov	r7,r16
   10c8c:	00105d00 	call	105d0 <print_repeat>
   10c90:	103f661e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10c94:	bc05883a 	add	r2,r23,r16
   10c98:	003f5406 	br	109ec <___vfprintf_internal_r+0x39c>
   10c9c:	a0c00117 	ldw	r3,4(r20)
   10ca0:	d9001017 	ldw	r4,64(sp)
   10ca4:	00800b44 	movi	r2,45
   10ca8:	d8800005 	stb	r2,0(sp)
   10cac:	a00b883a 	mov	r5,r20
   10cb0:	d80d883a 	mov	r6,sp
   10cb4:	01c00044 	movi	r7,1
   10cb8:	183ee83a 	callr	r3
   10cbc:	103f5b1e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10cc0:	bdc00044 	addi	r23,r23,1
   10cc4:	043f480e 	bge	zero,r16,109e8 <___vfprintf_internal_r+0x398>
   10cc8:	003fec06 	br	10c7c <___vfprintf_internal_r+0x62c>
   10ccc:	d9001017 	ldw	r4,64(sp)
   10cd0:	a00b883a 	mov	r5,r20
   10cd4:	01800804 	movi	r6,32
   10cd8:	800f883a 	mov	r7,r16
   10cdc:	00105d00 	call	105d0 <print_repeat>
   10ce0:	103f521e 	bne	r2,zero,10a2c <___vfprintf_internal_r+0x3dc>
   10ce4:	bc2f883a 	add	r23,r23,r16
   10ce8:	003fbd06 	br	10be0 <___vfprintf_internal_r+0x590>

00010cec <__vfprintf_internal>:
   10cec:	00800074 	movhi	r2,1
   10cf0:	108a4b04 	addi	r2,r2,10540
   10cf4:	2013883a 	mov	r9,r4
   10cf8:	11000017 	ldw	r4,0(r2)
   10cfc:	2805883a 	mov	r2,r5
   10d00:	300f883a 	mov	r7,r6
   10d04:	480b883a 	mov	r5,r9
   10d08:	100d883a 	mov	r6,r2
   10d0c:	00106501 	jmpi	10650 <___vfprintf_internal_r>

00010d10 <__sfvwrite_small_dev>:
   10d10:	2880000b 	ldhu	r2,0(r5)
   10d14:	defffa04 	addi	sp,sp,-24
   10d18:	dcc00315 	stw	r19,12(sp)
   10d1c:	1080020c 	andi	r2,r2,8
   10d20:	dc800215 	stw	r18,8(sp)
   10d24:	dc400115 	stw	r17,4(sp)
   10d28:	dfc00515 	stw	ra,20(sp)
   10d2c:	dd000415 	stw	r20,16(sp)
   10d30:	dc000015 	stw	r16,0(sp)
   10d34:	2825883a 	mov	r18,r5
   10d38:	2027883a 	mov	r19,r4
   10d3c:	3023883a 	mov	r17,r6
   10d40:	10002026 	beq	r2,zero,10dc4 <__sfvwrite_small_dev+0xb4>
   10d44:	2940008f 	ldh	r5,2(r5)
   10d48:	28000f16 	blt	r5,zero,10d88 <__sfvwrite_small_dev+0x78>
   10d4c:	01c01b0e 	bge	zero,r7,10dbc <__sfvwrite_small_dev+0xac>
   10d50:	3821883a 	mov	r16,r7
   10d54:	05010004 	movi	r20,1024
   10d58:	00000206 	br	10d64 <__sfvwrite_small_dev+0x54>
   10d5c:	0400170e 	bge	zero,r16,10dbc <__sfvwrite_small_dev+0xac>
   10d60:	9140008f 	ldh	r5,2(r18)
   10d64:	880d883a 	mov	r6,r17
   10d68:	9809883a 	mov	r4,r19
   10d6c:	800f883a 	mov	r7,r16
   10d70:	a400010e 	bge	r20,r16,10d78 <__sfvwrite_small_dev+0x68>
   10d74:	01c10004 	movi	r7,1024
   10d78:	0010dec0 	call	10dec <_write_r>
   10d7c:	88a3883a 	add	r17,r17,r2
   10d80:	80a1c83a 	sub	r16,r16,r2
   10d84:	00bff516 	blt	zero,r2,10d5c <__sfvwrite_small_dev+0x4c>
   10d88:	9080000b 	ldhu	r2,0(r18)
   10d8c:	00ffffc4 	movi	r3,-1
   10d90:	10801014 	ori	r2,r2,64
   10d94:	9080000d 	sth	r2,0(r18)
   10d98:	1805883a 	mov	r2,r3
   10d9c:	dfc00517 	ldw	ra,20(sp)
   10da0:	dd000417 	ldw	r20,16(sp)
   10da4:	dcc00317 	ldw	r19,12(sp)
   10da8:	dc800217 	ldw	r18,8(sp)
   10dac:	dc400117 	ldw	r17,4(sp)
   10db0:	dc000017 	ldw	r16,0(sp)
   10db4:	dec00604 	addi	sp,sp,24
   10db8:	f800283a 	ret
   10dbc:	0007883a 	mov	r3,zero
   10dc0:	003ff506 	br	10d98 <__sfvwrite_small_dev+0x88>
   10dc4:	00ffffc4 	movi	r3,-1
   10dc8:	003ff306 	br	10d98 <__sfvwrite_small_dev+0x88>

00010dcc <strlen>:
   10dcc:	20800007 	ldb	r2,0(r4)
   10dd0:	10000526 	beq	r2,zero,10de8 <strlen+0x1c>
   10dd4:	2007883a 	mov	r3,r4
   10dd8:	18c00044 	addi	r3,r3,1
   10ddc:	18800007 	ldb	r2,0(r3)
   10de0:	103ffd1e 	bne	r2,zero,10dd8 <strlen+0xc>
   10de4:	1905c83a 	sub	r2,r3,r4
   10de8:	f800283a 	ret

00010dec <_write_r>:
   10dec:	defffd04 	addi	sp,sp,-12
   10df0:	dc000015 	stw	r16,0(sp)
   10df4:	04000074 	movhi	r16,1
   10df8:	840b0c04 	addi	r16,r16,11312
   10dfc:	dc400115 	stw	r17,4(sp)
   10e00:	80000015 	stw	zero,0(r16)
   10e04:	2023883a 	mov	r17,r4
   10e08:	2809883a 	mov	r4,r5
   10e0c:	300b883a 	mov	r5,r6
   10e10:	380d883a 	mov	r6,r7
   10e14:	dfc00215 	stw	ra,8(sp)
   10e18:	00112c00 	call	112c0 <write>
   10e1c:	1007883a 	mov	r3,r2
   10e20:	00bfffc4 	movi	r2,-1
   10e24:	18800626 	beq	r3,r2,10e40 <_write_r+0x54>
   10e28:	1805883a 	mov	r2,r3
   10e2c:	dfc00217 	ldw	ra,8(sp)
   10e30:	dc400117 	ldw	r17,4(sp)
   10e34:	dc000017 	ldw	r16,0(sp)
   10e38:	dec00304 	addi	sp,sp,12
   10e3c:	f800283a 	ret
   10e40:	80800017 	ldw	r2,0(r16)
   10e44:	103ff826 	beq	r2,zero,10e28 <_write_r+0x3c>
   10e48:	88800015 	stw	r2,0(r17)
   10e4c:	1805883a 	mov	r2,r3
   10e50:	dfc00217 	ldw	ra,8(sp)
   10e54:	dc400117 	ldw	r17,4(sp)
   10e58:	dc000017 	ldw	r16,0(sp)
   10e5c:	dec00304 	addi	sp,sp,12
   10e60:	f800283a 	ret

00010e64 <__mulsi3>:
   10e64:	20000a26 	beq	r4,zero,10e90 <__mulsi3+0x2c>
   10e68:	0007883a 	mov	r3,zero
   10e6c:	2080004c 	andi	r2,r4,1
   10e70:	1005003a 	cmpeq	r2,r2,zero
   10e74:	2008d07a 	srli	r4,r4,1
   10e78:	1000011e 	bne	r2,zero,10e80 <__mulsi3+0x1c>
   10e7c:	1947883a 	add	r3,r3,r5
   10e80:	294b883a 	add	r5,r5,r5
   10e84:	203ff91e 	bne	r4,zero,10e6c <__mulsi3+0x8>
   10e88:	1805883a 	mov	r2,r3
   10e8c:	f800283a 	ret
   10e90:	0007883a 	mov	r3,zero
   10e94:	1805883a 	mov	r2,r3
   10e98:	f800283a 	ret

00010e9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10e9c:	defff904 	addi	sp,sp,-28
   10ea0:	dfc00615 	stw	ra,24(sp)
   10ea4:	df000515 	stw	fp,20(sp)
   10ea8:	df000504 	addi	fp,sp,20
   10eac:	e13ffc15 	stw	r4,-16(fp)
   10eb0:	e17ffd15 	stw	r5,-12(fp)
   10eb4:	e1bffe15 	stw	r6,-8(fp)
   10eb8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10ebc:	e0800217 	ldw	r2,8(fp)
   10ec0:	d8800015 	stw	r2,0(sp)
   10ec4:	e13ffc17 	ldw	r4,-16(fp)
   10ec8:	e17ffd17 	ldw	r5,-12(fp)
   10ecc:	e1bffe17 	ldw	r6,-8(fp)
   10ed0:	e1ffff17 	ldw	r7,-4(fp)
   10ed4:	00110700 	call	11070 <alt_iic_isr_register>
}  
   10ed8:	e037883a 	mov	sp,fp
   10edc:	dfc00117 	ldw	ra,4(sp)
   10ee0:	df000017 	ldw	fp,0(sp)
   10ee4:	dec00204 	addi	sp,sp,8
   10ee8:	f800283a 	ret

00010eec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10eec:	defff904 	addi	sp,sp,-28
   10ef0:	df000615 	stw	fp,24(sp)
   10ef4:	df000604 	addi	fp,sp,24
   10ef8:	e13ffe15 	stw	r4,-8(fp)
   10efc:	e17fff15 	stw	r5,-4(fp)
   10f00:	e0bfff17 	ldw	r2,-4(fp)
   10f04:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f08:	0005303a 	rdctl	r2,status
   10f0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f10:	e0fffb17 	ldw	r3,-20(fp)
   10f14:	00bfff84 	movi	r2,-2
   10f18:	1884703a 	and	r2,r3,r2
   10f1c:	1001703a 	wrctl	status,r2
  
  return context;
   10f20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10f24:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   10f28:	e0fffc17 	ldw	r3,-16(fp)
   10f2c:	00800044 	movi	r2,1
   10f30:	10c4983a 	sll	r2,r2,r3
   10f34:	1007883a 	mov	r3,r2
   10f38:	00800074 	movhi	r2,1
   10f3c:	108b0d04 	addi	r2,r2,11316
   10f40:	10800017 	ldw	r2,0(r2)
   10f44:	1886b03a 	or	r3,r3,r2
   10f48:	00800074 	movhi	r2,1
   10f4c:	108b0d04 	addi	r2,r2,11316
   10f50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10f54:	00800074 	movhi	r2,1
   10f58:	108b0d04 	addi	r2,r2,11316
   10f5c:	10800017 	ldw	r2,0(r2)
   10f60:	100170fa 	wrctl	ienable,r2
   10f64:	e0bffd17 	ldw	r2,-12(fp)
   10f68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f6c:	e0bffa17 	ldw	r2,-24(fp)
   10f70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10f74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   10f78:	e037883a 	mov	sp,fp
   10f7c:	df000017 	ldw	fp,0(sp)
   10f80:	dec00104 	addi	sp,sp,4
   10f84:	f800283a 	ret

00010f88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10f88:	defff904 	addi	sp,sp,-28
   10f8c:	df000615 	stw	fp,24(sp)
   10f90:	df000604 	addi	fp,sp,24
   10f94:	e13ffe15 	stw	r4,-8(fp)
   10f98:	e17fff15 	stw	r5,-4(fp)
   10f9c:	e0bfff17 	ldw	r2,-4(fp)
   10fa0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fa4:	0005303a 	rdctl	r2,status
   10fa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fac:	e0fffb17 	ldw	r3,-20(fp)
   10fb0:	00bfff84 	movi	r2,-2
   10fb4:	1884703a 	and	r2,r3,r2
   10fb8:	1001703a 	wrctl	status,r2
  
  return context;
   10fbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10fc0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   10fc4:	e0fffc17 	ldw	r3,-16(fp)
   10fc8:	00800044 	movi	r2,1
   10fcc:	10c4983a 	sll	r2,r2,r3
   10fd0:	0084303a 	nor	r2,zero,r2
   10fd4:	1007883a 	mov	r3,r2
   10fd8:	00800074 	movhi	r2,1
   10fdc:	108b0d04 	addi	r2,r2,11316
   10fe0:	10800017 	ldw	r2,0(r2)
   10fe4:	1886703a 	and	r3,r3,r2
   10fe8:	00800074 	movhi	r2,1
   10fec:	108b0d04 	addi	r2,r2,11316
   10ff0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ff4:	00800074 	movhi	r2,1
   10ff8:	108b0d04 	addi	r2,r2,11316
   10ffc:	10800017 	ldw	r2,0(r2)
   11000:	100170fa 	wrctl	ienable,r2
   11004:	e0bffd17 	ldw	r2,-12(fp)
   11008:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1100c:	e0bffa17 	ldw	r2,-24(fp)
   11010:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11014:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   11018:	e037883a 	mov	sp,fp
   1101c:	df000017 	ldw	fp,0(sp)
   11020:	dec00104 	addi	sp,sp,4
   11024:	f800283a 	ret

00011028 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11028:	defffc04 	addi	sp,sp,-16
   1102c:	df000315 	stw	fp,12(sp)
   11030:	df000304 	addi	fp,sp,12
   11034:	e13ffe15 	stw	r4,-8(fp)
   11038:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1103c:	000530fa 	rdctl	r2,ienable
   11040:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11044:	e0ffff17 	ldw	r3,-4(fp)
   11048:	00800044 	movi	r2,1
   1104c:	10c4983a 	sll	r2,r2,r3
   11050:	1007883a 	mov	r3,r2
   11054:	e0bffd17 	ldw	r2,-12(fp)
   11058:	1884703a 	and	r2,r3,r2
   1105c:	1004c03a 	cmpne	r2,r2,zero
}
   11060:	e037883a 	mov	sp,fp
   11064:	df000017 	ldw	fp,0(sp)
   11068:	dec00104 	addi	sp,sp,4
   1106c:	f800283a 	ret

00011070 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11070:	defff404 	addi	sp,sp,-48
   11074:	dfc00b15 	stw	ra,44(sp)
   11078:	df000a15 	stw	fp,40(sp)
   1107c:	df000a04 	addi	fp,sp,40
   11080:	e13ffb15 	stw	r4,-20(fp)
   11084:	e17ffc15 	stw	r5,-16(fp)
   11088:	e1bffd15 	stw	r6,-12(fp)
   1108c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   11090:	00bffa84 	movi	r2,-22
   11094:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11098:	e0bffc17 	ldw	r2,-16(fp)
   1109c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   110a0:	e0bff917 	ldw	r2,-28(fp)
   110a4:	10800808 	cmpgei	r2,r2,32
   110a8:	1000291e 	bne	r2,zero,11150 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110ac:	0005303a 	rdctl	r2,status
   110b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   110b4:	e0fff717 	ldw	r3,-36(fp)
   110b8:	00bfff84 	movi	r2,-2
   110bc:	1884703a 	and	r2,r3,r2
   110c0:	1001703a 	wrctl	status,r2
  
  return context;
   110c4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   110c8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   110cc:	e0bff917 	ldw	r2,-28(fp)
   110d0:	00c00074 	movhi	r3,1
   110d4:	18cb1104 	addi	r3,r3,11332
   110d8:	100490fa 	slli	r2,r2,3
   110dc:	10c7883a 	add	r3,r2,r3
   110e0:	e0bffd17 	ldw	r2,-12(fp)
   110e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   110e8:	e0bff917 	ldw	r2,-28(fp)
   110ec:	00c00074 	movhi	r3,1
   110f0:	18cb1104 	addi	r3,r3,11332
   110f4:	100490fa 	slli	r2,r2,3
   110f8:	10c5883a 	add	r2,r2,r3
   110fc:	10c00104 	addi	r3,r2,4
   11100:	e0bffe17 	ldw	r2,-8(fp)
   11104:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11108:	e0bffd17 	ldw	r2,-12(fp)
   1110c:	1005003a 	cmpeq	r2,r2,zero
   11110:	1000051e 	bne	r2,zero,11128 <alt_iic_isr_register+0xb8>
   11114:	e17ff917 	ldw	r5,-28(fp)
   11118:	e13ffb17 	ldw	r4,-20(fp)
   1111c:	0010eec0 	call	10eec <alt_ic_irq_enable>
   11120:	e0bfff15 	stw	r2,-4(fp)
   11124:	00000406 	br	11138 <alt_iic_isr_register+0xc8>
   11128:	e17ff917 	ldw	r5,-28(fp)
   1112c:	e13ffb17 	ldw	r4,-20(fp)
   11130:	0010f880 	call	10f88 <alt_ic_irq_disable>
   11134:	e0bfff15 	stw	r2,-4(fp)
   11138:	e0bfff17 	ldw	r2,-4(fp)
   1113c:	e0bffa15 	stw	r2,-24(fp)
   11140:	e0bff817 	ldw	r2,-32(fp)
   11144:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11148:	e0bff617 	ldw	r2,-40(fp)
   1114c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11150:	e0bffa17 	ldw	r2,-24(fp)
}
   11154:	e037883a 	mov	sp,fp
   11158:	dfc00117 	ldw	ra,4(sp)
   1115c:	df000017 	ldw	fp,0(sp)
   11160:	dec00204 	addi	sp,sp,8
   11164:	f800283a 	ret

00011168 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11168:	defffe04 	addi	sp,sp,-8
   1116c:	dfc00115 	stw	ra,4(sp)
   11170:	df000015 	stw	fp,0(sp)
   11174:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11178:	01000074 	movhi	r4,1
   1117c:	210a5404 	addi	r4,r4,10576
   11180:	01400074 	movhi	r5,1
   11184:	29499e04 	addi	r5,r5,9848
   11188:	01800074 	movhi	r6,1
   1118c:	318a5404 	addi	r6,r6,10576
   11190:	00111e80 	call	111e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11194:	01000074 	movhi	r4,1
   11198:	21000804 	addi	r4,r4,32
   1119c:	01400074 	movhi	r5,1
   111a0:	29400804 	addi	r5,r5,32
   111a4:	01800074 	movhi	r6,1
   111a8:	31806d04 	addi	r6,r6,436
   111ac:	00111e80 	call	111e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   111b0:	01000074 	movhi	r4,1
   111b4:	21098a04 	addi	r4,r4,9768
   111b8:	01400074 	movhi	r5,1
   111bc:	29498a04 	addi	r5,r5,9768
   111c0:	01800074 	movhi	r6,1
   111c4:	31899e04 	addi	r6,r6,9848
   111c8:	00111e80 	call	111e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   111cc:	00118980 	call	11898 <alt_dcache_flush_all>
  alt_icache_flush_all();
   111d0:	0011abc0 	call	11abc <alt_icache_flush_all>
}
   111d4:	e037883a 	mov	sp,fp
   111d8:	dfc00117 	ldw	ra,4(sp)
   111dc:	df000017 	ldw	fp,0(sp)
   111e0:	dec00204 	addi	sp,sp,8
   111e4:	f800283a 	ret

000111e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   111e8:	defffc04 	addi	sp,sp,-16
   111ec:	df000315 	stw	fp,12(sp)
   111f0:	df000304 	addi	fp,sp,12
   111f4:	e13ffd15 	stw	r4,-12(fp)
   111f8:	e17ffe15 	stw	r5,-8(fp)
   111fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11200:	e0fffe17 	ldw	r3,-8(fp)
   11204:	e0bffd17 	ldw	r2,-12(fp)
   11208:	18800e26 	beq	r3,r2,11244 <alt_load_section+0x5c>
  {
    while( to != end )
   1120c:	00000a06 	br	11238 <alt_load_section+0x50>
    {
      *to++ = *from++;
   11210:	e0bffd17 	ldw	r2,-12(fp)
   11214:	10c00017 	ldw	r3,0(r2)
   11218:	e0bffe17 	ldw	r2,-8(fp)
   1121c:	10c00015 	stw	r3,0(r2)
   11220:	e0bffe17 	ldw	r2,-8(fp)
   11224:	10800104 	addi	r2,r2,4
   11228:	e0bffe15 	stw	r2,-8(fp)
   1122c:	e0bffd17 	ldw	r2,-12(fp)
   11230:	10800104 	addi	r2,r2,4
   11234:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11238:	e0fffe17 	ldw	r3,-8(fp)
   1123c:	e0bfff17 	ldw	r2,-4(fp)
   11240:	18bff31e 	bne	r3,r2,11210 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   11244:	e037883a 	mov	sp,fp
   11248:	df000017 	ldw	fp,0(sp)
   1124c:	dec00104 	addi	sp,sp,4
   11250:	f800283a 	ret

00011254 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11254:	defffd04 	addi	sp,sp,-12
   11258:	dfc00215 	stw	ra,8(sp)
   1125c:	df000115 	stw	fp,4(sp)
   11260:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11264:	0009883a 	mov	r4,zero
   11268:	00114440 	call	11444 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1126c:	00114780 	call	11478 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11270:	01000074 	movhi	r4,1
   11274:	21099104 	addi	r4,r4,9796
   11278:	01400074 	movhi	r5,1
   1127c:	29499104 	addi	r5,r5,9796
   11280:	01800074 	movhi	r6,1
   11284:	31899104 	addi	r6,r6,9796
   11288:	0011bb00 	call	11bb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1128c:	00119f40 	call	119f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11290:	01000074 	movhi	r4,1
   11294:	21069604 	addi	r4,r4,6744
   11298:	00122280 	call	12228 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1129c:	d120c317 	ldw	r4,-31988(gp)
   112a0:	d160c417 	ldw	r5,-31984(gp)
   112a4:	d1a0c517 	ldw	r6,-31980(gp)
   112a8:	001037c0 	call	1037c <main>
   112ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   112b0:	01000044 	movi	r4,1
   112b4:	00117380 	call	11738 <close>
  exit (result);
   112b8:	e13fff17 	ldw	r4,-4(fp)
   112bc:	001223c0 	call	1223c <exit>

000112c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   112c0:	defff704 	addi	sp,sp,-36
   112c4:	dfc00815 	stw	ra,32(sp)
   112c8:	df000715 	stw	fp,28(sp)
   112cc:	df000704 	addi	fp,sp,28
   112d0:	e13ffb15 	stw	r4,-20(fp)
   112d4:	e17ffc15 	stw	r5,-16(fp)
   112d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   112dc:	e0bffb17 	ldw	r2,-20(fp)
   112e0:	1004803a 	cmplt	r2,r2,zero
   112e4:	1000091e 	bne	r2,zero,1130c <write+0x4c>
   112e8:	e13ffb17 	ldw	r4,-20(fp)
   112ec:	01400304 	movi	r5,12
   112f0:	0010e640 	call	10e64 <__mulsi3>
   112f4:	1007883a 	mov	r3,r2
   112f8:	00800074 	movhi	r2,1
   112fc:	1089eb04 	addi	r2,r2,10156
   11300:	1887883a 	add	r3,r3,r2
   11304:	e0ffff15 	stw	r3,-4(fp)
   11308:	00000106 	br	11310 <write+0x50>
   1130c:	e03fff15 	stw	zero,-4(fp)
   11310:	e0bfff17 	ldw	r2,-4(fp)
   11314:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   11318:	e0bffa17 	ldw	r2,-24(fp)
   1131c:	1005003a 	cmpeq	r2,r2,zero
   11320:	1000241e 	bne	r2,zero,113b4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11324:	e0bffa17 	ldw	r2,-24(fp)
   11328:	10800217 	ldw	r2,8(r2)
   1132c:	108000cc 	andi	r2,r2,3
   11330:	1005003a 	cmpeq	r2,r2,zero
   11334:	10001a1e 	bne	r2,zero,113a0 <write+0xe0>
   11338:	e0bffa17 	ldw	r2,-24(fp)
   1133c:	10800017 	ldw	r2,0(r2)
   11340:	10800617 	ldw	r2,24(r2)
   11344:	1005003a 	cmpeq	r2,r2,zero
   11348:	1000151e 	bne	r2,zero,113a0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1134c:	e0bffa17 	ldw	r2,-24(fp)
   11350:	10800017 	ldw	r2,0(r2)
   11354:	10800617 	ldw	r2,24(r2)
   11358:	e17ffc17 	ldw	r5,-16(fp)
   1135c:	e1bffd17 	ldw	r6,-12(fp)
   11360:	e13ffa17 	ldw	r4,-24(fp)
   11364:	103ee83a 	callr	r2
   11368:	e0bff915 	stw	r2,-28(fp)
   1136c:	e0bff917 	ldw	r2,-28(fp)
   11370:	1004403a 	cmpge	r2,r2,zero
   11374:	1000071e 	bne	r2,zero,11394 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   11378:	00113e40 	call	113e4 <alt_get_errno>
   1137c:	e0fff917 	ldw	r3,-28(fp)
   11380:	00c7c83a 	sub	r3,zero,r3
   11384:	10c00015 	stw	r3,0(r2)
        return -1;
   11388:	00bfffc4 	movi	r2,-1
   1138c:	e0bffe15 	stw	r2,-8(fp)
   11390:	00000e06 	br	113cc <write+0x10c>
      }
      return rval;
   11394:	e0bff917 	ldw	r2,-28(fp)
   11398:	e0bffe15 	stw	r2,-8(fp)
   1139c:	00000b06 	br	113cc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   113a0:	00113e40 	call	113e4 <alt_get_errno>
   113a4:	1007883a 	mov	r3,r2
   113a8:	00800344 	movi	r2,13
   113ac:	18800015 	stw	r2,0(r3)
   113b0:	00000406 	br	113c4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   113b4:	00113e40 	call	113e4 <alt_get_errno>
   113b8:	1007883a 	mov	r3,r2
   113bc:	00801444 	movi	r2,81
   113c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   113c4:	00bfffc4 	movi	r2,-1
   113c8:	e0bffe15 	stw	r2,-8(fp)
   113cc:	e0bffe17 	ldw	r2,-8(fp)
}
   113d0:	e037883a 	mov	sp,fp
   113d4:	dfc00117 	ldw	ra,4(sp)
   113d8:	df000017 	ldw	fp,0(sp)
   113dc:	dec00204 	addi	sp,sp,8
   113e0:	f800283a 	ret

000113e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   113e4:	defffd04 	addi	sp,sp,-12
   113e8:	dfc00215 	stw	ra,8(sp)
   113ec:	df000115 	stw	fp,4(sp)
   113f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   113f4:	00800074 	movhi	r2,1
   113f8:	108a5304 	addi	r2,r2,10572
   113fc:	10800017 	ldw	r2,0(r2)
   11400:	1005003a 	cmpeq	r2,r2,zero
   11404:	1000061e 	bne	r2,zero,11420 <alt_get_errno+0x3c>
   11408:	00800074 	movhi	r2,1
   1140c:	108a5304 	addi	r2,r2,10572
   11410:	10800017 	ldw	r2,0(r2)
   11414:	103ee83a 	callr	r2
   11418:	e0bfff15 	stw	r2,-4(fp)
   1141c:	00000306 	br	1142c <alt_get_errno+0x48>
   11420:	00800074 	movhi	r2,1
   11424:	108b0c04 	addi	r2,r2,11312
   11428:	e0bfff15 	stw	r2,-4(fp)
   1142c:	e0bfff17 	ldw	r2,-4(fp)
}
   11430:	e037883a 	mov	sp,fp
   11434:	dfc00117 	ldw	ra,4(sp)
   11438:	df000017 	ldw	fp,0(sp)
   1143c:	dec00204 	addi	sp,sp,8
   11440:	f800283a 	ret

00011444 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11444:	defffd04 	addi	sp,sp,-12
   11448:	dfc00215 	stw	ra,8(sp)
   1144c:	df000115 	stw	fp,4(sp)
   11450:	df000104 	addi	fp,sp,4
   11454:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   11458:	0011f840 	call	11f84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1145c:	00800044 	movi	r2,1
   11460:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11464:	e037883a 	mov	sp,fp
   11468:	dfc00117 	ldw	ra,4(sp)
   1146c:	df000017 	ldw	fp,0(sp)
   11470:	dec00204 	addi	sp,sp,8
   11474:	f800283a 	ret

00011478 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11478:	defffe04 	addi	sp,sp,-8
   1147c:	dfc00115 	stw	ra,4(sp)
   11480:	df000015 	stw	fp,0(sp)
   11484:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   11488:	01000074 	movhi	r4,1
   1148c:	2109d604 	addi	r4,r4,10072
   11490:	00114a80 	call	114a8 <alt_dev_reg>
}
   11494:	e037883a 	mov	sp,fp
   11498:	dfc00117 	ldw	ra,4(sp)
   1149c:	df000017 	ldw	fp,0(sp)
   114a0:	dec00204 	addi	sp,sp,8
   114a4:	f800283a 	ret

000114a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   114a8:	defffd04 	addi	sp,sp,-12
   114ac:	dfc00215 	stw	ra,8(sp)
   114b0:	df000115 	stw	fp,4(sp)
   114b4:	df000104 	addi	fp,sp,4
   114b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   114bc:	e13fff17 	ldw	r4,-4(fp)
   114c0:	01400074 	movhi	r5,1
   114c4:	294a5004 	addi	r5,r5,10560
   114c8:	00118e00 	call	118e0 <alt_dev_llist_insert>
}
   114cc:	e037883a 	mov	sp,fp
   114d0:	dfc00117 	ldw	ra,4(sp)
   114d4:	df000017 	ldw	fp,0(sp)
   114d8:	dec00204 	addi	sp,sp,8
   114dc:	f800283a 	ret

000114e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   114e0:	defffa04 	addi	sp,sp,-24
   114e4:	dfc00515 	stw	ra,20(sp)
   114e8:	df000415 	stw	fp,16(sp)
   114ec:	df000404 	addi	fp,sp,16
   114f0:	e13ffd15 	stw	r4,-12(fp)
   114f4:	e17ffe15 	stw	r5,-8(fp)
   114f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   114fc:	e0bffd17 	ldw	r2,-12(fp)
   11500:	10800017 	ldw	r2,0(r2)
   11504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11508:	e0bffc17 	ldw	r2,-16(fp)
   1150c:	11000a04 	addi	r4,r2,40
   11510:	e0bffd17 	ldw	r2,-12(fp)
   11514:	11c00217 	ldw	r7,8(r2)
   11518:	e17ffe17 	ldw	r5,-8(fp)
   1151c:	e1bfff17 	ldw	r6,-4(fp)
   11520:	00115900 	call	11590 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11524:	e037883a 	mov	sp,fp
   11528:	dfc00117 	ldw	ra,4(sp)
   1152c:	df000017 	ldw	fp,0(sp)
   11530:	dec00204 	addi	sp,sp,8
   11534:	f800283a 	ret

00011538 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11538:	defffa04 	addi	sp,sp,-24
   1153c:	dfc00515 	stw	ra,20(sp)
   11540:	df000415 	stw	fp,16(sp)
   11544:	df000404 	addi	fp,sp,16
   11548:	e13ffd15 	stw	r4,-12(fp)
   1154c:	e17ffe15 	stw	r5,-8(fp)
   11550:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11554:	e0bffd17 	ldw	r2,-12(fp)
   11558:	10800017 	ldw	r2,0(r2)
   1155c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	11000a04 	addi	r4,r2,40
   11568:	e0bffd17 	ldw	r2,-12(fp)
   1156c:	11c00217 	ldw	r7,8(r2)
   11570:	e17ffe17 	ldw	r5,-8(fp)
   11574:	e1bfff17 	ldw	r6,-4(fp)
   11578:	00116940 	call	11694 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1157c:	e037883a 	mov	sp,fp
   11580:	dfc00117 	ldw	ra,4(sp)
   11584:	df000017 	ldw	fp,0(sp)
   11588:	dec00204 	addi	sp,sp,8
   1158c:	f800283a 	ret

00011590 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   11590:	defff604 	addi	sp,sp,-40
   11594:	df000915 	stw	fp,36(sp)
   11598:	df000904 	addi	fp,sp,36
   1159c:	e13ffb15 	stw	r4,-20(fp)
   115a0:	e17ffc15 	stw	r5,-16(fp)
   115a4:	e1bffd15 	stw	r6,-12(fp)
   115a8:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   115ac:	e0bffb17 	ldw	r2,-20(fp)
   115b0:	10800017 	ldw	r2,0(r2)
   115b4:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   115b8:	e0bffc17 	ldw	r2,-16(fp)
   115bc:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   115c0:	e0bffd17 	ldw	r2,-12(fp)
   115c4:	1007883a 	mov	r3,r2
   115c8:	e0bffc17 	ldw	r2,-16(fp)
   115cc:	10c5883a 	add	r2,r2,r3
   115d0:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   115d4:	00001606 	br	11630 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   115d8:	e0bffa17 	ldw	r2,-24(fp)
   115dc:	10800037 	ldwio	r2,0(r2)
   115e0:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   115e4:	e0bff717 	ldw	r2,-36(fp)
   115e8:	10a0000c 	andi	r2,r2,32768
   115ec:	1005003a 	cmpeq	r2,r2,zero
   115f0:	1000081e 	bne	r2,zero,11614 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   115f4:	e0bff717 	ldw	r2,-36(fp)
   115f8:	1007883a 	mov	r3,r2
   115fc:	e0bff917 	ldw	r2,-28(fp)
   11600:	10c00005 	stb	r3,0(r2)
   11604:	e0bff917 	ldw	r2,-28(fp)
   11608:	10800044 	addi	r2,r2,1
   1160c:	e0bff915 	stw	r2,-28(fp)
   11610:	00000706 	br	11630 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   11614:	e0fff917 	ldw	r3,-28(fp)
   11618:	e0bffc17 	ldw	r2,-16(fp)
   1161c:	1880071e 	bne	r3,r2,1163c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   11620:	e0bffe17 	ldw	r2,-8(fp)
   11624:	1090000c 	andi	r2,r2,16384
   11628:	1004c03a 	cmpne	r2,r2,zero
   1162c:	1000031e 	bne	r2,zero,1163c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   11630:	e0fff917 	ldw	r3,-28(fp)
   11634:	e0bff817 	ldw	r2,-32(fp)
   11638:	18bfe736 	bltu	r3,r2,115d8 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   1163c:	e0fff917 	ldw	r3,-28(fp)
   11640:	e0bffc17 	ldw	r2,-16(fp)
   11644:	18800526 	beq	r3,r2,1165c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   11648:	e0fff917 	ldw	r3,-28(fp)
   1164c:	e0bffc17 	ldw	r2,-16(fp)
   11650:	1887c83a 	sub	r3,r3,r2
   11654:	e0ffff15 	stw	r3,-4(fp)
   11658:	00000906 	br	11680 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   1165c:	e0bffe17 	ldw	r2,-8(fp)
   11660:	1090000c 	andi	r2,r2,16384
   11664:	1005003a 	cmpeq	r2,r2,zero
   11668:	1000031e 	bne	r2,zero,11678 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   1166c:	00bffd44 	movi	r2,-11
   11670:	e0bfff15 	stw	r2,-4(fp)
   11674:	00000206 	br	11680 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   11678:	00bffec4 	movi	r2,-5
   1167c:	e0bfff15 	stw	r2,-4(fp)
   11680:	e0bfff17 	ldw	r2,-4(fp)
}
   11684:	e037883a 	mov	sp,fp
   11688:	df000017 	ldw	fp,0(sp)
   1168c:	dec00104 	addi	sp,sp,4
   11690:	f800283a 	ret

00011694 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11694:	defff904 	addi	sp,sp,-28
   11698:	df000615 	stw	fp,24(sp)
   1169c:	df000604 	addi	fp,sp,24
   116a0:	e13ffc15 	stw	r4,-16(fp)
   116a4:	e17ffd15 	stw	r5,-12(fp)
   116a8:	e1bffe15 	stw	r6,-8(fp)
   116ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	10800017 	ldw	r2,0(r2)
   116b8:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   116bc:	e0bffe17 	ldw	r2,-8(fp)
   116c0:	1007883a 	mov	r3,r2
   116c4:	e0bffd17 	ldw	r2,-12(fp)
   116c8:	10c5883a 	add	r2,r2,r3
   116cc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   116d0:	00001106 	br	11718 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   116d4:	e0bffb17 	ldw	r2,-20(fp)
   116d8:	10800104 	addi	r2,r2,4
   116dc:	10800037 	ldwio	r2,0(r2)
   116e0:	10bfffec 	andhi	r2,r2,65535
   116e4:	1005003a 	cmpeq	r2,r2,zero
   116e8:	10000b1e 	bne	r2,zero,11718 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   116ec:	e13ffb17 	ldw	r4,-20(fp)
   116f0:	e0bffd17 	ldw	r2,-12(fp)
   116f4:	10800003 	ldbu	r2,0(r2)
   116f8:	10c03fcc 	andi	r3,r2,255
   116fc:	18c0201c 	xori	r3,r3,128
   11700:	18ffe004 	addi	r3,r3,-128
   11704:	e0bffd17 	ldw	r2,-12(fp)
   11708:	10800044 	addi	r2,r2,1
   1170c:	e0bffd15 	stw	r2,-12(fp)
   11710:	2005883a 	mov	r2,r4
   11714:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11718:	e0fffd17 	ldw	r3,-12(fp)
   1171c:	e0bffa17 	ldw	r2,-24(fp)
   11720:	18bfec36 	bltu	r3,r2,116d4 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   11724:	e0bffe17 	ldw	r2,-8(fp)
}
   11728:	e037883a 	mov	sp,fp
   1172c:	df000017 	ldw	fp,0(sp)
   11730:	dec00104 	addi	sp,sp,4
   11734:	f800283a 	ret

00011738 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11738:	defff804 	addi	sp,sp,-32
   1173c:	dfc00715 	stw	ra,28(sp)
   11740:	df000615 	stw	fp,24(sp)
   11744:	df000604 	addi	fp,sp,24
   11748:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1174c:	e0bffc17 	ldw	r2,-16(fp)
   11750:	1004803a 	cmplt	r2,r2,zero
   11754:	1000091e 	bne	r2,zero,1177c <close+0x44>
   11758:	e13ffc17 	ldw	r4,-16(fp)
   1175c:	01400304 	movi	r5,12
   11760:	0010e640 	call	10e64 <__mulsi3>
   11764:	1007883a 	mov	r3,r2
   11768:	00800074 	movhi	r2,1
   1176c:	1089eb04 	addi	r2,r2,10156
   11770:	1887883a 	add	r3,r3,r2
   11774:	e0ffff15 	stw	r3,-4(fp)
   11778:	00000106 	br	11780 <close+0x48>
   1177c:	e03fff15 	stw	zero,-4(fp)
   11780:	e0bfff17 	ldw	r2,-4(fp)
   11784:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   11788:	e0bffb17 	ldw	r2,-20(fp)
   1178c:	1005003a 	cmpeq	r2,r2,zero
   11790:	10001d1e 	bne	r2,zero,11808 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11794:	e0bffb17 	ldw	r2,-20(fp)
   11798:	10800017 	ldw	r2,0(r2)
   1179c:	10800417 	ldw	r2,16(r2)
   117a0:	1005003a 	cmpeq	r2,r2,zero
   117a4:	1000071e 	bne	r2,zero,117c4 <close+0x8c>
   117a8:	e0bffb17 	ldw	r2,-20(fp)
   117ac:	10800017 	ldw	r2,0(r2)
   117b0:	10800417 	ldw	r2,16(r2)
   117b4:	e13ffb17 	ldw	r4,-20(fp)
   117b8:	103ee83a 	callr	r2
   117bc:	e0bffe15 	stw	r2,-8(fp)
   117c0:	00000106 	br	117c8 <close+0x90>
   117c4:	e03ffe15 	stw	zero,-8(fp)
   117c8:	e0bffe17 	ldw	r2,-8(fp)
   117cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   117d0:	e13ffc17 	ldw	r4,-16(fp)
   117d4:	0011f0c0 	call	11f0c <alt_release_fd>
    if (rval < 0)
   117d8:	e0bffa17 	ldw	r2,-24(fp)
   117dc:	1004403a 	cmpge	r2,r2,zero
   117e0:	1000071e 	bne	r2,zero,11800 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   117e4:	00118380 	call	11838 <alt_get_errno>
   117e8:	e0fffa17 	ldw	r3,-24(fp)
   117ec:	00c7c83a 	sub	r3,zero,r3
   117f0:	10c00015 	stw	r3,0(r2)
      return -1;
   117f4:	00bfffc4 	movi	r2,-1
   117f8:	e0bffd15 	stw	r2,-12(fp)
   117fc:	00000806 	br	11820 <close+0xe8>
    }
    return 0;
   11800:	e03ffd15 	stw	zero,-12(fp)
   11804:	00000606 	br	11820 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11808:	00118380 	call	11838 <alt_get_errno>
   1180c:	1007883a 	mov	r3,r2
   11810:	00801444 	movi	r2,81
   11814:	18800015 	stw	r2,0(r3)
    return -1;
   11818:	00bfffc4 	movi	r2,-1
   1181c:	e0bffd15 	stw	r2,-12(fp)
   11820:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   11824:	e037883a 	mov	sp,fp
   11828:	dfc00117 	ldw	ra,4(sp)
   1182c:	df000017 	ldw	fp,0(sp)
   11830:	dec00204 	addi	sp,sp,8
   11834:	f800283a 	ret

00011838 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11838:	defffd04 	addi	sp,sp,-12
   1183c:	dfc00215 	stw	ra,8(sp)
   11840:	df000115 	stw	fp,4(sp)
   11844:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11848:	00800074 	movhi	r2,1
   1184c:	108a5304 	addi	r2,r2,10572
   11850:	10800017 	ldw	r2,0(r2)
   11854:	1005003a 	cmpeq	r2,r2,zero
   11858:	1000061e 	bne	r2,zero,11874 <alt_get_errno+0x3c>
   1185c:	00800074 	movhi	r2,1
   11860:	108a5304 	addi	r2,r2,10572
   11864:	10800017 	ldw	r2,0(r2)
   11868:	103ee83a 	callr	r2
   1186c:	e0bfff15 	stw	r2,-4(fp)
   11870:	00000306 	br	11880 <alt_get_errno+0x48>
   11874:	00800074 	movhi	r2,1
   11878:	108b0c04 	addi	r2,r2,11312
   1187c:	e0bfff15 	stw	r2,-4(fp)
   11880:	e0bfff17 	ldw	r2,-4(fp)
}
   11884:	e037883a 	mov	sp,fp
   11888:	dfc00117 	ldw	ra,4(sp)
   1188c:	df000017 	ldw	fp,0(sp)
   11890:	dec00204 	addi	sp,sp,8
   11894:	f800283a 	ret

00011898 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11898:	deffff04 	addi	sp,sp,-4
   1189c:	df000015 	stw	fp,0(sp)
   118a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   118a4:	e037883a 	mov	sp,fp
   118a8:	df000017 	ldw	fp,0(sp)
   118ac:	dec00104 	addi	sp,sp,4
   118b0:	f800283a 	ret

000118b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   118b4:	defffc04 	addi	sp,sp,-16
   118b8:	df000315 	stw	fp,12(sp)
   118bc:	df000304 	addi	fp,sp,12
   118c0:	e13ffd15 	stw	r4,-12(fp)
   118c4:	e17ffe15 	stw	r5,-8(fp)
   118c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   118cc:	e0bfff17 	ldw	r2,-4(fp)
}
   118d0:	e037883a 	mov	sp,fp
   118d4:	df000017 	ldw	fp,0(sp)
   118d8:	dec00104 	addi	sp,sp,4
   118dc:	f800283a 	ret

000118e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   118e0:	defff904 	addi	sp,sp,-28
   118e4:	dfc00615 	stw	ra,24(sp)
   118e8:	df000515 	stw	fp,20(sp)
   118ec:	df000504 	addi	fp,sp,20
   118f0:	e13ffd15 	stw	r4,-12(fp)
   118f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   118f8:	e0bffd17 	ldw	r2,-12(fp)
   118fc:	1005003a 	cmpeq	r2,r2,zero
   11900:	1000041e 	bne	r2,zero,11914 <alt_dev_llist_insert+0x34>
   11904:	e0bffd17 	ldw	r2,-12(fp)
   11908:	10800217 	ldw	r2,8(r2)
   1190c:	1004c03a 	cmpne	r2,r2,zero
   11910:	1000071e 	bne	r2,zero,11930 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   11914:	00119940 	call	11994 <alt_get_errno>
   11918:	1007883a 	mov	r3,r2
   1191c:	00800584 	movi	r2,22
   11920:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11924:	00bffa84 	movi	r2,-22
   11928:	e0bfff15 	stw	r2,-4(fp)
   1192c:	00001306 	br	1197c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11930:	e0fffd17 	ldw	r3,-12(fp)
   11934:	e0bffe17 	ldw	r2,-8(fp)
   11938:	e0bffb15 	stw	r2,-20(fp)
   1193c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11940:	e0fffc17 	ldw	r3,-16(fp)
   11944:	e0bffb17 	ldw	r2,-20(fp)
   11948:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1194c:	e0bffb17 	ldw	r2,-20(fp)
   11950:	10c00017 	ldw	r3,0(r2)
   11954:	e0bffc17 	ldw	r2,-16(fp)
   11958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1195c:	e0bffb17 	ldw	r2,-20(fp)
   11960:	10c00017 	ldw	r3,0(r2)
   11964:	e0bffc17 	ldw	r2,-16(fp)
   11968:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1196c:	e0fffb17 	ldw	r3,-20(fp)
   11970:	e0bffc17 	ldw	r2,-16(fp)
   11974:	18800015 	stw	r2,0(r3)

  return 0;  
   11978:	e03fff15 	stw	zero,-4(fp)
   1197c:	e0bfff17 	ldw	r2,-4(fp)
}
   11980:	e037883a 	mov	sp,fp
   11984:	dfc00117 	ldw	ra,4(sp)
   11988:	df000017 	ldw	fp,0(sp)
   1198c:	dec00204 	addi	sp,sp,8
   11990:	f800283a 	ret

00011994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11994:	defffd04 	addi	sp,sp,-12
   11998:	dfc00215 	stw	ra,8(sp)
   1199c:	df000115 	stw	fp,4(sp)
   119a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   119a4:	00800074 	movhi	r2,1
   119a8:	108a5304 	addi	r2,r2,10572
   119ac:	10800017 	ldw	r2,0(r2)
   119b0:	1005003a 	cmpeq	r2,r2,zero
   119b4:	1000061e 	bne	r2,zero,119d0 <alt_get_errno+0x3c>
   119b8:	00800074 	movhi	r2,1
   119bc:	108a5304 	addi	r2,r2,10572
   119c0:	10800017 	ldw	r2,0(r2)
   119c4:	103ee83a 	callr	r2
   119c8:	e0bfff15 	stw	r2,-4(fp)
   119cc:	00000306 	br	119dc <alt_get_errno+0x48>
   119d0:	00800074 	movhi	r2,1
   119d4:	108b0c04 	addi	r2,r2,11312
   119d8:	e0bfff15 	stw	r2,-4(fp)
   119dc:	e0bfff17 	ldw	r2,-4(fp)
}
   119e0:	e037883a 	mov	sp,fp
   119e4:	dfc00117 	ldw	ra,4(sp)
   119e8:	df000017 	ldw	fp,0(sp)
   119ec:	dec00204 	addi	sp,sp,8
   119f0:	f800283a 	ret

000119f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   119f4:	defffd04 	addi	sp,sp,-12
   119f8:	dfc00215 	stw	ra,8(sp)
   119fc:	df000115 	stw	fp,4(sp)
   11a00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11a04:	00bfff04 	movi	r2,-4
   11a08:	00c00074 	movhi	r3,1
   11a0c:	18c98a04 	addi	r3,r3,9768
   11a10:	1885883a 	add	r2,r3,r2
   11a14:	e0bfff15 	stw	r2,-4(fp)
   11a18:	00000606 	br	11a34 <_do_ctors+0x40>
        (*ctor) (); 
   11a1c:	e0bfff17 	ldw	r2,-4(fp)
   11a20:	10800017 	ldw	r2,0(r2)
   11a24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11a28:	e0bfff17 	ldw	r2,-4(fp)
   11a2c:	10bfff04 	addi	r2,r2,-4
   11a30:	e0bfff15 	stw	r2,-4(fp)
   11a34:	e0ffff17 	ldw	r3,-4(fp)
   11a38:	00800074 	movhi	r2,1
   11a3c:	10898904 	addi	r2,r2,9764
   11a40:	18bff62e 	bgeu	r3,r2,11a1c <_do_ctors+0x28>
        (*ctor) (); 
}
   11a44:	e037883a 	mov	sp,fp
   11a48:	dfc00117 	ldw	ra,4(sp)
   11a4c:	df000017 	ldw	fp,0(sp)
   11a50:	dec00204 	addi	sp,sp,8
   11a54:	f800283a 	ret

00011a58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11a58:	defffd04 	addi	sp,sp,-12
   11a5c:	dfc00215 	stw	ra,8(sp)
   11a60:	df000115 	stw	fp,4(sp)
   11a64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11a68:	00bfff04 	movi	r2,-4
   11a6c:	00c00074 	movhi	r3,1
   11a70:	18c98a04 	addi	r3,r3,9768
   11a74:	1885883a 	add	r2,r3,r2
   11a78:	e0bfff15 	stw	r2,-4(fp)
   11a7c:	00000606 	br	11a98 <_do_dtors+0x40>
        (*dtor) (); 
   11a80:	e0bfff17 	ldw	r2,-4(fp)
   11a84:	10800017 	ldw	r2,0(r2)
   11a88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11a8c:	e0bfff17 	ldw	r2,-4(fp)
   11a90:	10bfff04 	addi	r2,r2,-4
   11a94:	e0bfff15 	stw	r2,-4(fp)
   11a98:	e0ffff17 	ldw	r3,-4(fp)
   11a9c:	00800074 	movhi	r2,1
   11aa0:	10898a04 	addi	r2,r2,9768
   11aa4:	18bff62e 	bgeu	r3,r2,11a80 <_do_dtors+0x28>
        (*dtor) (); 
}
   11aa8:	e037883a 	mov	sp,fp
   11aac:	dfc00117 	ldw	ra,4(sp)
   11ab0:	df000017 	ldw	fp,0(sp)
   11ab4:	dec00204 	addi	sp,sp,8
   11ab8:	f800283a 	ret

00011abc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11abc:	deffff04 	addi	sp,sp,-4
   11ac0:	df000015 	stw	fp,0(sp)
   11ac4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11ac8:	e037883a 	mov	sp,fp
   11acc:	df000017 	ldw	fp,0(sp)
   11ad0:	dec00104 	addi	sp,sp,4
   11ad4:	f800283a 	ret

00011ad8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11ad8:	defff804 	addi	sp,sp,-32
   11adc:	dfc00715 	stw	ra,28(sp)
   11ae0:	df000615 	stw	fp,24(sp)
   11ae4:	dc000515 	stw	r16,20(sp)
   11ae8:	df000504 	addi	fp,sp,20
   11aec:	e13ffc15 	stw	r4,-16(fp)
   11af0:	e17ffd15 	stw	r5,-12(fp)
   11af4:	e1bffe15 	stw	r6,-8(fp)
   11af8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11afc:	e13ffd17 	ldw	r4,-12(fp)
   11b00:	e17ffe17 	ldw	r5,-8(fp)
   11b04:	e1bfff17 	ldw	r6,-4(fp)
   11b08:	0011d200 	call	11d20 <open>
   11b0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11b10:	e0bffb17 	ldw	r2,-20(fp)
   11b14:	1004803a 	cmplt	r2,r2,zero
   11b18:	10001f1e 	bne	r2,zero,11b98 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   11b1c:	e13ffb17 	ldw	r4,-20(fp)
   11b20:	04000074 	movhi	r16,1
   11b24:	8409eb04 	addi	r16,r16,10156
   11b28:	01400304 	movi	r5,12
   11b2c:	0010e640 	call	10e64 <__mulsi3>
   11b30:	1405883a 	add	r2,r2,r16
   11b34:	10c00017 	ldw	r3,0(r2)
   11b38:	e0bffc17 	ldw	r2,-16(fp)
   11b3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11b40:	e13ffb17 	ldw	r4,-20(fp)
   11b44:	04000074 	movhi	r16,1
   11b48:	8409eb04 	addi	r16,r16,10156
   11b4c:	01400304 	movi	r5,12
   11b50:	0010e640 	call	10e64 <__mulsi3>
   11b54:	1405883a 	add	r2,r2,r16
   11b58:	10800104 	addi	r2,r2,4
   11b5c:	10c00017 	ldw	r3,0(r2)
   11b60:	e0bffc17 	ldw	r2,-16(fp)
   11b64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11b68:	e13ffb17 	ldw	r4,-20(fp)
   11b6c:	04000074 	movhi	r16,1
   11b70:	8409eb04 	addi	r16,r16,10156
   11b74:	01400304 	movi	r5,12
   11b78:	0010e640 	call	10e64 <__mulsi3>
   11b7c:	1405883a 	add	r2,r2,r16
   11b80:	10800204 	addi	r2,r2,8
   11b84:	10c00017 	ldw	r3,0(r2)
   11b88:	e0bffc17 	ldw	r2,-16(fp)
   11b8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11b90:	e13ffb17 	ldw	r4,-20(fp)
   11b94:	0011f0c0 	call	11f0c <alt_release_fd>
  }
} 
   11b98:	e037883a 	mov	sp,fp
   11b9c:	dfc00217 	ldw	ra,8(sp)
   11ba0:	df000117 	ldw	fp,4(sp)
   11ba4:	dc000017 	ldw	r16,0(sp)
   11ba8:	dec00304 	addi	sp,sp,12
   11bac:	f800283a 	ret

00011bb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11bb0:	defffb04 	addi	sp,sp,-20
   11bb4:	dfc00415 	stw	ra,16(sp)
   11bb8:	df000315 	stw	fp,12(sp)
   11bbc:	df000304 	addi	fp,sp,12
   11bc0:	e13ffd15 	stw	r4,-12(fp)
   11bc4:	e17ffe15 	stw	r5,-8(fp)
   11bc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11bcc:	01000074 	movhi	r4,1
   11bd0:	2109ee04 	addi	r4,r4,10168
   11bd4:	e17ffd17 	ldw	r5,-12(fp)
   11bd8:	01800044 	movi	r6,1
   11bdc:	01c07fc4 	movi	r7,511
   11be0:	0011ad80 	call	11ad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11be4:	01000074 	movhi	r4,1
   11be8:	2109eb04 	addi	r4,r4,10156
   11bec:	e17ffe17 	ldw	r5,-8(fp)
   11bf0:	000d883a 	mov	r6,zero
   11bf4:	01c07fc4 	movi	r7,511
   11bf8:	0011ad80 	call	11ad8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11bfc:	01000074 	movhi	r4,1
   11c00:	2109f104 	addi	r4,r4,10180
   11c04:	e17fff17 	ldw	r5,-4(fp)
   11c08:	01800044 	movi	r6,1
   11c0c:	01c07fc4 	movi	r7,511
   11c10:	0011ad80 	call	11ad8 <alt_open_fd>
}  
   11c14:	e037883a 	mov	sp,fp
   11c18:	dfc00117 	ldw	ra,4(sp)
   11c1c:	df000017 	ldw	fp,0(sp)
   11c20:	dec00204 	addi	sp,sp,8
   11c24:	f800283a 	ret

00011c28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11c28:	defffa04 	addi	sp,sp,-24
   11c2c:	dfc00515 	stw	ra,20(sp)
   11c30:	df000415 	stw	fp,16(sp)
   11c34:	dc000315 	stw	r16,12(sp)
   11c38:	df000304 	addi	fp,sp,12
   11c3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11c40:	e0bffe17 	ldw	r2,-8(fp)
   11c44:	10800217 	ldw	r2,8(r2)
   11c48:	10d00034 	orhi	r3,r2,16384
   11c4c:	e0bffe17 	ldw	r2,-8(fp)
   11c50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11c54:	e03ffd15 	stw	zero,-12(fp)
   11c58:	00002306 	br	11ce8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11c5c:	e13ffd17 	ldw	r4,-12(fp)
   11c60:	04000074 	movhi	r16,1
   11c64:	8409eb04 	addi	r16,r16,10156
   11c68:	01400304 	movi	r5,12
   11c6c:	0010e640 	call	10e64 <__mulsi3>
   11c70:	1405883a 	add	r2,r2,r16
   11c74:	10c00017 	ldw	r3,0(r2)
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	10800017 	ldw	r2,0(r2)
   11c80:	1880161e 	bne	r3,r2,11cdc <alt_file_locked+0xb4>
   11c84:	e13ffd17 	ldw	r4,-12(fp)
   11c88:	04000074 	movhi	r16,1
   11c8c:	8409eb04 	addi	r16,r16,10156
   11c90:	01400304 	movi	r5,12
   11c94:	0010e640 	call	10e64 <__mulsi3>
   11c98:	1405883a 	add	r2,r2,r16
   11c9c:	10800204 	addi	r2,r2,8
   11ca0:	10800017 	ldw	r2,0(r2)
   11ca4:	1004403a 	cmpge	r2,r2,zero
   11ca8:	10000c1e 	bne	r2,zero,11cdc <alt_file_locked+0xb4>
   11cac:	e13ffd17 	ldw	r4,-12(fp)
   11cb0:	01400304 	movi	r5,12
   11cb4:	0010e640 	call	10e64 <__mulsi3>
   11cb8:	1007883a 	mov	r3,r2
   11cbc:	00800074 	movhi	r2,1
   11cc0:	1089eb04 	addi	r2,r2,10156
   11cc4:	1887883a 	add	r3,r3,r2
   11cc8:	e0bffe17 	ldw	r2,-8(fp)
   11ccc:	18800326 	beq	r3,r2,11cdc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11cd0:	00bffcc4 	movi	r2,-13
   11cd4:	e0bfff15 	stw	r2,-4(fp)
   11cd8:	00000a06 	br	11d04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11cdc:	e0bffd17 	ldw	r2,-12(fp)
   11ce0:	10800044 	addi	r2,r2,1
   11ce4:	e0bffd15 	stw	r2,-12(fp)
   11ce8:	00800074 	movhi	r2,1
   11cec:	108a5204 	addi	r2,r2,10568
   11cf0:	10800017 	ldw	r2,0(r2)
   11cf4:	1007883a 	mov	r3,r2
   11cf8:	e0bffd17 	ldw	r2,-12(fp)
   11cfc:	18bfd72e 	bgeu	r3,r2,11c5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11d00:	e03fff15 	stw	zero,-4(fp)
   11d04:	e0bfff17 	ldw	r2,-4(fp)
}
   11d08:	e037883a 	mov	sp,fp
   11d0c:	dfc00217 	ldw	ra,8(sp)
   11d10:	df000117 	ldw	fp,4(sp)
   11d14:	dc000017 	ldw	r16,0(sp)
   11d18:	dec00304 	addi	sp,sp,12
   11d1c:	f800283a 	ret

00011d20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11d20:	defff404 	addi	sp,sp,-48
   11d24:	dfc00b15 	stw	ra,44(sp)
   11d28:	df000a15 	stw	fp,40(sp)
   11d2c:	df000a04 	addi	fp,sp,40
   11d30:	e13ffb15 	stw	r4,-20(fp)
   11d34:	e17ffc15 	stw	r5,-16(fp)
   11d38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11d3c:	00bfffc4 	movi	r2,-1
   11d40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   11d44:	00bffb44 	movi	r2,-19
   11d48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   11d4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11d50:	e13ffb17 	ldw	r4,-20(fp)
   11d54:	01400074 	movhi	r5,1
   11d58:	294a5004 	addi	r5,r5,10560
   11d5c:	0011fa40 	call	11fa4 <alt_find_dev>
   11d60:	e0bffa15 	stw	r2,-24(fp)
   11d64:	e0bffa17 	ldw	r2,-24(fp)
   11d68:	1004c03a 	cmpne	r2,r2,zero
   11d6c:	1000051e 	bne	r2,zero,11d84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11d70:	e13ffb17 	ldw	r4,-20(fp)
   11d74:	00120380 	call	12038 <alt_find_file>
   11d78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   11d7c:	00800044 	movi	r2,1
   11d80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11d84:	e0bffa17 	ldw	r2,-24(fp)
   11d88:	1005003a 	cmpeq	r2,r2,zero
   11d8c:	1000311e 	bne	r2,zero,11e54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11d90:	e13ffa17 	ldw	r4,-24(fp)
   11d94:	00121580 	call	12158 <alt_get_fd>
   11d98:	e0bff815 	stw	r2,-32(fp)
   11d9c:	e0bff817 	ldw	r2,-32(fp)
   11da0:	1004403a 	cmpge	r2,r2,zero
   11da4:	1000031e 	bne	r2,zero,11db4 <open+0x94>
    {
      status = index;
   11da8:	e0bff817 	ldw	r2,-32(fp)
   11dac:	e0bff715 	stw	r2,-36(fp)
   11db0:	00002a06 	br	11e5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11db4:	e13ff817 	ldw	r4,-32(fp)
   11db8:	01400304 	movi	r5,12
   11dbc:	0010e640 	call	10e64 <__mulsi3>
   11dc0:	1007883a 	mov	r3,r2
   11dc4:	00800074 	movhi	r2,1
   11dc8:	1089eb04 	addi	r2,r2,10156
   11dcc:	1885883a 	add	r2,r3,r2
   11dd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11dd4:	e0fffc17 	ldw	r3,-16(fp)
   11dd8:	00900034 	movhi	r2,16384
   11ddc:	10bfffc4 	addi	r2,r2,-1
   11de0:	1886703a 	and	r3,r3,r2
   11de4:	e0bff917 	ldw	r2,-28(fp)
   11de8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11dec:	e0bff617 	ldw	r2,-40(fp)
   11df0:	1004c03a 	cmpne	r2,r2,zero
   11df4:	1000061e 	bne	r2,zero,11e10 <open+0xf0>
   11df8:	e13ff917 	ldw	r4,-28(fp)
   11dfc:	0011c280 	call	11c28 <alt_file_locked>
   11e00:	e0bff715 	stw	r2,-36(fp)
   11e04:	e0bff717 	ldw	r2,-36(fp)
   11e08:	1004803a 	cmplt	r2,r2,zero
   11e0c:	1000131e 	bne	r2,zero,11e5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11e10:	e0bffa17 	ldw	r2,-24(fp)
   11e14:	10800317 	ldw	r2,12(r2)
   11e18:	1005003a 	cmpeq	r2,r2,zero
   11e1c:	1000091e 	bne	r2,zero,11e44 <open+0x124>
   11e20:	e0bffa17 	ldw	r2,-24(fp)
   11e24:	10800317 	ldw	r2,12(r2)
   11e28:	e13ff917 	ldw	r4,-28(fp)
   11e2c:	e17ffb17 	ldw	r5,-20(fp)
   11e30:	e1bffc17 	ldw	r6,-16(fp)
   11e34:	e1fffd17 	ldw	r7,-12(fp)
   11e38:	103ee83a 	callr	r2
   11e3c:	e0bfff15 	stw	r2,-4(fp)
   11e40:	00000106 	br	11e48 <open+0x128>
   11e44:	e03fff15 	stw	zero,-4(fp)
   11e48:	e0bfff17 	ldw	r2,-4(fp)
   11e4c:	e0bff715 	stw	r2,-36(fp)
   11e50:	00000206 	br	11e5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11e54:	00bffb44 	movi	r2,-19
   11e58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11e5c:	e0bff717 	ldw	r2,-36(fp)
   11e60:	1004403a 	cmpge	r2,r2,zero
   11e64:	1000091e 	bne	r2,zero,11e8c <open+0x16c>
  {
    alt_release_fd (index);  
   11e68:	e13ff817 	ldw	r4,-32(fp)
   11e6c:	0011f0c0 	call	11f0c <alt_release_fd>
    ALT_ERRNO = -status;
   11e70:	0011eac0 	call	11eac <alt_get_errno>
   11e74:	e0fff717 	ldw	r3,-36(fp)
   11e78:	00c7c83a 	sub	r3,zero,r3
   11e7c:	10c00015 	stw	r3,0(r2)
    return -1;
   11e80:	00bfffc4 	movi	r2,-1
   11e84:	e0bffe15 	stw	r2,-8(fp)
   11e88:	00000206 	br	11e94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   11e8c:	e0bff817 	ldw	r2,-32(fp)
   11e90:	e0bffe15 	stw	r2,-8(fp)
   11e94:	e0bffe17 	ldw	r2,-8(fp)
}
   11e98:	e037883a 	mov	sp,fp
   11e9c:	dfc00117 	ldw	ra,4(sp)
   11ea0:	df000017 	ldw	fp,0(sp)
   11ea4:	dec00204 	addi	sp,sp,8
   11ea8:	f800283a 	ret

00011eac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11eac:	defffd04 	addi	sp,sp,-12
   11eb0:	dfc00215 	stw	ra,8(sp)
   11eb4:	df000115 	stw	fp,4(sp)
   11eb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11ebc:	00800074 	movhi	r2,1
   11ec0:	108a5304 	addi	r2,r2,10572
   11ec4:	10800017 	ldw	r2,0(r2)
   11ec8:	1005003a 	cmpeq	r2,r2,zero
   11ecc:	1000061e 	bne	r2,zero,11ee8 <alt_get_errno+0x3c>
   11ed0:	00800074 	movhi	r2,1
   11ed4:	108a5304 	addi	r2,r2,10572
   11ed8:	10800017 	ldw	r2,0(r2)
   11edc:	103ee83a 	callr	r2
   11ee0:	e0bfff15 	stw	r2,-4(fp)
   11ee4:	00000306 	br	11ef4 <alt_get_errno+0x48>
   11ee8:	00800074 	movhi	r2,1
   11eec:	108b0c04 	addi	r2,r2,11312
   11ef0:	e0bfff15 	stw	r2,-4(fp)
   11ef4:	e0bfff17 	ldw	r2,-4(fp)
}
   11ef8:	e037883a 	mov	sp,fp
   11efc:	dfc00117 	ldw	ra,4(sp)
   11f00:	df000017 	ldw	fp,0(sp)
   11f04:	dec00204 	addi	sp,sp,8
   11f08:	f800283a 	ret

00011f0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11f0c:	defffc04 	addi	sp,sp,-16
   11f10:	dfc00315 	stw	ra,12(sp)
   11f14:	df000215 	stw	fp,8(sp)
   11f18:	dc000115 	stw	r16,4(sp)
   11f1c:	df000104 	addi	fp,sp,4
   11f20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11f24:	e0bfff17 	ldw	r2,-4(fp)
   11f28:	108000d0 	cmplti	r2,r2,3
   11f2c:	10000f1e 	bne	r2,zero,11f6c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   11f30:	e13fff17 	ldw	r4,-4(fp)
   11f34:	04000074 	movhi	r16,1
   11f38:	8409eb04 	addi	r16,r16,10156
   11f3c:	01400304 	movi	r5,12
   11f40:	0010e640 	call	10e64 <__mulsi3>
   11f44:	1405883a 	add	r2,r2,r16
   11f48:	10800204 	addi	r2,r2,8
   11f4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11f50:	e13fff17 	ldw	r4,-4(fp)
   11f54:	04000074 	movhi	r16,1
   11f58:	8409eb04 	addi	r16,r16,10156
   11f5c:	01400304 	movi	r5,12
   11f60:	0010e640 	call	10e64 <__mulsi3>
   11f64:	1405883a 	add	r2,r2,r16
   11f68:	10000015 	stw	zero,0(r2)
  }
}
   11f6c:	e037883a 	mov	sp,fp
   11f70:	dfc00217 	ldw	ra,8(sp)
   11f74:	df000117 	ldw	fp,4(sp)
   11f78:	dc000017 	ldw	r16,0(sp)
   11f7c:	dec00304 	addi	sp,sp,12
   11f80:	f800283a 	ret

00011f84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11f84:	deffff04 	addi	sp,sp,-4
   11f88:	df000015 	stw	fp,0(sp)
   11f8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11f90:	000170fa 	wrctl	ienable,zero
}
   11f94:	e037883a 	mov	sp,fp
   11f98:	df000017 	ldw	fp,0(sp)
   11f9c:	dec00104 	addi	sp,sp,4
   11fa0:	f800283a 	ret

00011fa4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11fa4:	defff904 	addi	sp,sp,-28
   11fa8:	dfc00615 	stw	ra,24(sp)
   11fac:	df000515 	stw	fp,20(sp)
   11fb0:	df000504 	addi	fp,sp,20
   11fb4:	e13ffd15 	stw	r4,-12(fp)
   11fb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11fbc:	e0bffe17 	ldw	r2,-8(fp)
   11fc0:	10800017 	ldw	r2,0(r2)
   11fc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11fc8:	e13ffd17 	ldw	r4,-12(fp)
   11fcc:	0010dcc0 	call	10dcc <strlen>
   11fd0:	10800044 	addi	r2,r2,1
   11fd4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11fd8:	00000d06 	br	12010 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11fdc:	e0bffc17 	ldw	r2,-16(fp)
   11fe0:	11000217 	ldw	r4,8(r2)
   11fe4:	e1bffb17 	ldw	r6,-20(fp)
   11fe8:	e17ffd17 	ldw	r5,-12(fp)
   11fec:	001225c0 	call	1225c <memcmp>
   11ff0:	1004c03a 	cmpne	r2,r2,zero
   11ff4:	1000031e 	bne	r2,zero,12004 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11ff8:	e0bffc17 	ldw	r2,-16(fp)
   11ffc:	e0bfff15 	stw	r2,-4(fp)
   12000:	00000706 	br	12020 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12004:	e0bffc17 	ldw	r2,-16(fp)
   12008:	10800017 	ldw	r2,0(r2)
   1200c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12010:	e0fffe17 	ldw	r3,-8(fp)
   12014:	e0bffc17 	ldw	r2,-16(fp)
   12018:	10fff01e 	bne	r2,r3,11fdc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1201c:	e03fff15 	stw	zero,-4(fp)
   12020:	e0bfff17 	ldw	r2,-4(fp)
}
   12024:	e037883a 	mov	sp,fp
   12028:	dfc00117 	ldw	ra,4(sp)
   1202c:	df000017 	ldw	fp,0(sp)
   12030:	dec00204 	addi	sp,sp,8
   12034:	f800283a 	ret

00012038 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12038:	defffa04 	addi	sp,sp,-24
   1203c:	dfc00515 	stw	ra,20(sp)
   12040:	df000415 	stw	fp,16(sp)
   12044:	df000404 	addi	fp,sp,16
   12048:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1204c:	00800074 	movhi	r2,1
   12050:	108a4e04 	addi	r2,r2,10552
   12054:	10800017 	ldw	r2,0(r2)
   12058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1205c:	00003306 	br	1212c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   12060:	e0bffd17 	ldw	r2,-12(fp)
   12064:	11000217 	ldw	r4,8(r2)
   12068:	0010dcc0 	call	10dcc <strlen>
   1206c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   12070:	e0bffd17 	ldw	r2,-12(fp)
   12074:	10c00217 	ldw	r3,8(r2)
   12078:	e0bffc17 	ldw	r2,-16(fp)
   1207c:	1885883a 	add	r2,r3,r2
   12080:	10bfffc4 	addi	r2,r2,-1
   12084:	10800003 	ldbu	r2,0(r2)
   12088:	10803fcc 	andi	r2,r2,255
   1208c:	1080201c 	xori	r2,r2,128
   12090:	10bfe004 	addi	r2,r2,-128
   12094:	10800bd8 	cmpnei	r2,r2,47
   12098:	1000031e 	bne	r2,zero,120a8 <alt_find_file+0x70>
    {
      len -= 1;
   1209c:	e0bffc17 	ldw	r2,-16(fp)
   120a0:	10bfffc4 	addi	r2,r2,-1
   120a4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   120a8:	e0bffc17 	ldw	r2,-16(fp)
   120ac:	1007883a 	mov	r3,r2
   120b0:	e0bffe17 	ldw	r2,-8(fp)
   120b4:	1885883a 	add	r2,r3,r2
   120b8:	10800003 	ldbu	r2,0(r2)
   120bc:	10803fcc 	andi	r2,r2,255
   120c0:	1080201c 	xori	r2,r2,128
   120c4:	10bfe004 	addi	r2,r2,-128
   120c8:	10800be0 	cmpeqi	r2,r2,47
   120cc:	10000a1e 	bne	r2,zero,120f8 <alt_find_file+0xc0>
   120d0:	e0bffc17 	ldw	r2,-16(fp)
   120d4:	1007883a 	mov	r3,r2
   120d8:	e0bffe17 	ldw	r2,-8(fp)
   120dc:	1885883a 	add	r2,r3,r2
   120e0:	10800003 	ldbu	r2,0(r2)
   120e4:	10803fcc 	andi	r2,r2,255
   120e8:	1080201c 	xori	r2,r2,128
   120ec:	10bfe004 	addi	r2,r2,-128
   120f0:	1004c03a 	cmpne	r2,r2,zero
   120f4:	10000a1e 	bne	r2,zero,12120 <alt_find_file+0xe8>
   120f8:	e0bffd17 	ldw	r2,-12(fp)
   120fc:	11000217 	ldw	r4,8(r2)
   12100:	e1bffc17 	ldw	r6,-16(fp)
   12104:	e17ffe17 	ldw	r5,-8(fp)
   12108:	001225c0 	call	1225c <memcmp>
   1210c:	1004c03a 	cmpne	r2,r2,zero
   12110:	1000031e 	bne	r2,zero,12120 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12114:	e0bffd17 	ldw	r2,-12(fp)
   12118:	e0bfff15 	stw	r2,-4(fp)
   1211c:	00000806 	br	12140 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   12120:	e0bffd17 	ldw	r2,-12(fp)
   12124:	10800017 	ldw	r2,0(r2)
   12128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1212c:	00c00074 	movhi	r3,1
   12130:	18ca4e04 	addi	r3,r3,10552
   12134:	e0bffd17 	ldw	r2,-12(fp)
   12138:	10ffc91e 	bne	r2,r3,12060 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1213c:	e03fff15 	stw	zero,-4(fp)
   12140:	e0bfff17 	ldw	r2,-4(fp)
}
   12144:	e037883a 	mov	sp,fp
   12148:	dfc00117 	ldw	ra,4(sp)
   1214c:	df000017 	ldw	fp,0(sp)
   12150:	dec00204 	addi	sp,sp,8
   12154:	f800283a 	ret

00012158 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12158:	defffa04 	addi	sp,sp,-24
   1215c:	dfc00515 	stw	ra,20(sp)
   12160:	df000415 	stw	fp,16(sp)
   12164:	dc000315 	stw	r16,12(sp)
   12168:	df000304 	addi	fp,sp,12
   1216c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12170:	00bffa04 	movi	r2,-24
   12174:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12178:	e03ffe15 	stw	zero,-8(fp)
   1217c:	00002006 	br	12200 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   12180:	e13ffe17 	ldw	r4,-8(fp)
   12184:	04000074 	movhi	r16,1
   12188:	8409eb04 	addi	r16,r16,10156
   1218c:	01400304 	movi	r5,12
   12190:	0010e640 	call	10e64 <__mulsi3>
   12194:	1405883a 	add	r2,r2,r16
   12198:	10800017 	ldw	r2,0(r2)
   1219c:	1004c03a 	cmpne	r2,r2,zero
   121a0:	1000141e 	bne	r2,zero,121f4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   121a4:	e13ffe17 	ldw	r4,-8(fp)
   121a8:	04000074 	movhi	r16,1
   121ac:	8409eb04 	addi	r16,r16,10156
   121b0:	01400304 	movi	r5,12
   121b4:	0010e640 	call	10e64 <__mulsi3>
   121b8:	1407883a 	add	r3,r2,r16
   121bc:	e0bfff17 	ldw	r2,-4(fp)
   121c0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   121c4:	00800074 	movhi	r2,1
   121c8:	108a5204 	addi	r2,r2,10568
   121cc:	10c00017 	ldw	r3,0(r2)
   121d0:	e0bffe17 	ldw	r2,-8(fp)
   121d4:	1880040e 	bge	r3,r2,121e8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   121d8:	00c00074 	movhi	r3,1
   121dc:	18ca5204 	addi	r3,r3,10568
   121e0:	e0bffe17 	ldw	r2,-8(fp)
   121e4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   121e8:	e0bffe17 	ldw	r2,-8(fp)
   121ec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   121f0:	00000606 	br	1220c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   121f4:	e0bffe17 	ldw	r2,-8(fp)
   121f8:	10800044 	addi	r2,r2,1
   121fc:	e0bffe15 	stw	r2,-8(fp)
   12200:	e0bffe17 	ldw	r2,-8(fp)
   12204:	10800810 	cmplti	r2,r2,32
   12208:	103fdd1e 	bne	r2,zero,12180 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1220c:	e0bffd17 	ldw	r2,-12(fp)
}
   12210:	e037883a 	mov	sp,fp
   12214:	dfc00217 	ldw	ra,8(sp)
   12218:	df000117 	ldw	fp,4(sp)
   1221c:	dc000017 	ldw	r16,0(sp)
   12220:	dec00304 	addi	sp,sp,12
   12224:	f800283a 	ret

00012228 <atexit>:
   12228:	200b883a 	mov	r5,r4
   1222c:	000d883a 	mov	r6,zero
   12230:	0009883a 	mov	r4,zero
   12234:	000f883a 	mov	r7,zero
   12238:	00122981 	jmpi	12298 <__register_exitproc>

0001223c <exit>:
   1223c:	defffe04 	addi	sp,sp,-8
   12240:	dc400015 	stw	r17,0(sp)
   12244:	000b883a 	mov	r5,zero
   12248:	2023883a 	mov	r17,r4
   1224c:	dfc00115 	stw	ra,4(sp)
   12250:	00124080 	call	12408 <__call_exitprocs>
   12254:	8809883a 	mov	r4,r17
   12258:	00126040 	call	12604 <_exit>

0001225c <memcmp>:
   1225c:	31ffffc4 	addi	r7,r6,-1
   12260:	3000061e 	bne	r6,zero,1227c <memcmp+0x20>
   12264:	00000a06 	br	12290 <memcmp+0x34>
   12268:	39ffffc4 	addi	r7,r7,-1
   1226c:	00bfffc4 	movi	r2,-1
   12270:	21000044 	addi	r4,r4,1
   12274:	29400044 	addi	r5,r5,1
   12278:	38800526 	beq	r7,r2,12290 <memcmp+0x34>
   1227c:	20c00003 	ldbu	r3,0(r4)
   12280:	28800003 	ldbu	r2,0(r5)
   12284:	18bff826 	beq	r3,r2,12268 <memcmp+0xc>
   12288:	1885c83a 	sub	r2,r3,r2
   1228c:	f800283a 	ret
   12290:	0005883a 	mov	r2,zero
   12294:	f800283a 	ret

00012298 <__register_exitproc>:
   12298:	defff904 	addi	sp,sp,-28
   1229c:	00800074 	movhi	r2,1
   122a0:	108a4c04 	addi	r2,r2,10544
   122a4:	dc400115 	stw	r17,4(sp)
   122a8:	14400017 	ldw	r17,0(r2)
   122ac:	dc000015 	stw	r16,0(sp)
   122b0:	dd400515 	stw	r21,20(sp)
   122b4:	8c000c17 	ldw	r16,48(r17)
   122b8:	dd000415 	stw	r20,16(sp)
   122bc:	dcc00315 	stw	r19,12(sp)
   122c0:	dc800215 	stw	r18,8(sp)
   122c4:	dfc00615 	stw	ra,24(sp)
   122c8:	2025883a 	mov	r18,r4
   122cc:	282b883a 	mov	r21,r5
   122d0:	3029883a 	mov	r20,r6
   122d4:	3827883a 	mov	r19,r7
   122d8:	80002626 	beq	r16,zero,12374 <__register_exitproc+0xdc>
   122dc:	81400117 	ldw	r5,4(r16)
   122e0:	008007c4 	movi	r2,31
   122e4:	11403716 	blt	r2,r5,123c4 <__register_exitproc+0x12c>
   122e8:	90002026 	beq	r18,zero,1236c <__register_exitproc+0xd4>
   122ec:	81802217 	ldw	r6,136(r16)
   122f0:	30002926 	beq	r6,zero,12398 <__register_exitproc+0x100>
   122f4:	81400117 	ldw	r5,4(r16)
   122f8:	00c00044 	movi	r3,1
   122fc:	31004017 	ldw	r4,256(r6)
   12300:	1946983a 	sll	r3,r3,r5
   12304:	2945883a 	add	r2,r5,r5
   12308:	1085883a 	add	r2,r2,r2
   1230c:	1185883a 	add	r2,r2,r6
   12310:	20c8b03a 	or	r4,r4,r3
   12314:	14c02015 	stw	r19,128(r2)
   12318:	15000015 	stw	r20,0(r2)
   1231c:	00800084 	movi	r2,2
   12320:	31004015 	stw	r4,256(r6)
   12324:	90801826 	beq	r18,r2,12388 <__register_exitproc+0xf0>
   12328:	2945883a 	add	r2,r5,r5
   1232c:	1085883a 	add	r2,r2,r2
   12330:	1405883a 	add	r2,r2,r16
   12334:	28c00044 	addi	r3,r5,1
   12338:	0009883a 	mov	r4,zero
   1233c:	15400215 	stw	r21,8(r2)
   12340:	80c00115 	stw	r3,4(r16)
   12344:	2005883a 	mov	r2,r4
   12348:	dfc00617 	ldw	ra,24(sp)
   1234c:	dd400517 	ldw	r21,20(sp)
   12350:	dd000417 	ldw	r20,16(sp)
   12354:	dcc00317 	ldw	r19,12(sp)
   12358:	dc800217 	ldw	r18,8(sp)
   1235c:	dc400117 	ldw	r17,4(sp)
   12360:	dc000017 	ldw	r16,0(sp)
   12364:	dec00704 	addi	sp,sp,28
   12368:	f800283a 	ret
   1236c:	81400117 	ldw	r5,4(r16)
   12370:	003fed06 	br	12328 <__register_exitproc+0x90>
   12374:	00800074 	movhi	r2,1
   12378:	108b5104 	addi	r2,r2,11588
   1237c:	1021883a 	mov	r16,r2
   12380:	88800c15 	stw	r2,48(r17)
   12384:	003fd506 	br	122dc <__register_exitproc+0x44>
   12388:	30804117 	ldw	r2,260(r6)
   1238c:	10c4b03a 	or	r2,r2,r3
   12390:	30804115 	stw	r2,260(r6)
   12394:	003fe406 	br	12328 <__register_exitproc+0x90>
   12398:	00800034 	movhi	r2,0
   1239c:	10800004 	addi	r2,r2,0
   123a0:	10000b26 	beq	r2,zero,123d0 <__register_exitproc+0x138>
   123a4:	01004204 	movi	r4,264
   123a8:	103ee83a 	callr	r2
   123ac:	10000826 	beq	r2,zero,123d0 <__register_exitproc+0x138>
   123b0:	100d883a 	mov	r6,r2
   123b4:	10004015 	stw	zero,256(r2)
   123b8:	10004115 	stw	zero,260(r2)
   123bc:	80802215 	stw	r2,136(r16)
   123c0:	003fcc06 	br	122f4 <__register_exitproc+0x5c>
   123c4:	00800034 	movhi	r2,0
   123c8:	10800004 	addi	r2,r2,0
   123cc:	1000021e 	bne	r2,zero,123d8 <__register_exitproc+0x140>
   123d0:	013fffc4 	movi	r4,-1
   123d4:	003fdb06 	br	12344 <__register_exitproc+0xac>
   123d8:	01002304 	movi	r4,140
   123dc:	103ee83a 	callr	r2
   123e0:	1007883a 	mov	r3,r2
   123e4:	103ffa26 	beq	r2,zero,123d0 <__register_exitproc+0x138>
   123e8:	88800c17 	ldw	r2,48(r17)
   123ec:	1821883a 	mov	r16,r3
   123f0:	18000115 	stw	zero,4(r3)
   123f4:	18800015 	stw	r2,0(r3)
   123f8:	88c00c15 	stw	r3,48(r17)
   123fc:	903fdb26 	beq	r18,zero,1236c <__register_exitproc+0xd4>
   12400:	003fba06 	br	122ec <__register_exitproc+0x54>

00012404 <register_fini>:
   12404:	f800283a 	ret

00012408 <__call_exitprocs>:
   12408:	defff304 	addi	sp,sp,-52
   1240c:	00800074 	movhi	r2,1
   12410:	108a4c04 	addi	r2,r2,10544
   12414:	df000b15 	stw	fp,44(sp)
   12418:	17000017 	ldw	fp,0(r2)
   1241c:	00800034 	movhi	r2,0
   12420:	10800004 	addi	r2,r2,0
   12424:	1005003a 	cmpeq	r2,r2,zero
   12428:	d8800215 	stw	r2,8(sp)
   1242c:	e0800c04 	addi	r2,fp,48
   12430:	dd800915 	stw	r22,36(sp)
   12434:	dd400815 	stw	r21,32(sp)
   12438:	dfc00c15 	stw	ra,48(sp)
   1243c:	ddc00a15 	stw	r23,40(sp)
   12440:	dd000715 	stw	r20,28(sp)
   12444:	dcc00615 	stw	r19,24(sp)
   12448:	dc800515 	stw	r18,20(sp)
   1244c:	dc400415 	stw	r17,16(sp)
   12450:	dc000315 	stw	r16,12(sp)
   12454:	282d883a 	mov	r22,r5
   12458:	d9000115 	stw	r4,4(sp)
   1245c:	d8800015 	stw	r2,0(sp)
   12460:	282b003a 	cmpeq	r21,r5,zero
   12464:	e4400c17 	ldw	r17,48(fp)
   12468:	88001226 	beq	r17,zero,124b4 <__call_exitprocs+0xac>
   1246c:	ddc00017 	ldw	r23,0(sp)
   12470:	88800117 	ldw	r2,4(r17)
   12474:	8c802217 	ldw	r18,136(r17)
   12478:	143fffc4 	addi	r16,r2,-1
   1247c:	80000b16 	blt	r16,zero,124ac <__call_exitprocs+0xa4>
   12480:	9027003a 	cmpeq	r19,r18,zero
   12484:	a800171e 	bne	r21,zero,124e4 <__call_exitprocs+0xdc>
   12488:	9800051e 	bne	r19,zero,124a0 <__call_exitprocs+0x98>
   1248c:	8409883a 	add	r4,r16,r16
   12490:	2105883a 	add	r2,r4,r4
   12494:	1485883a 	add	r2,r2,r18
   12498:	10c02017 	ldw	r3,128(r2)
   1249c:	b0c01226 	beq	r22,r3,124e8 <__call_exitprocs+0xe0>
   124a0:	843fffc4 	addi	r16,r16,-1
   124a4:	00bfffc4 	movi	r2,-1
   124a8:	80bff61e 	bne	r16,r2,12484 <__call_exitprocs+0x7c>
   124ac:	d8800217 	ldw	r2,8(sp)
   124b0:	10003226 	beq	r2,zero,1257c <__call_exitprocs+0x174>
   124b4:	dfc00c17 	ldw	ra,48(sp)
   124b8:	df000b17 	ldw	fp,44(sp)
   124bc:	ddc00a17 	ldw	r23,40(sp)
   124c0:	dd800917 	ldw	r22,36(sp)
   124c4:	dd400817 	ldw	r21,32(sp)
   124c8:	dd000717 	ldw	r20,28(sp)
   124cc:	dcc00617 	ldw	r19,24(sp)
   124d0:	dc800517 	ldw	r18,20(sp)
   124d4:	dc400417 	ldw	r17,16(sp)
   124d8:	dc000317 	ldw	r16,12(sp)
   124dc:	dec00d04 	addi	sp,sp,52
   124e0:	f800283a 	ret
   124e4:	8409883a 	add	r4,r16,r16
   124e8:	88c00117 	ldw	r3,4(r17)
   124ec:	2105883a 	add	r2,r4,r4
   124f0:	1445883a 	add	r2,r2,r17
   124f4:	18ffffc4 	addi	r3,r3,-1
   124f8:	11800217 	ldw	r6,8(r2)
   124fc:	1c001826 	beq	r3,r16,12560 <__call_exitprocs+0x158>
   12500:	10000215 	stw	zero,8(r2)
   12504:	303fe626 	beq	r6,zero,124a0 <__call_exitprocs+0x98>
   12508:	8d000117 	ldw	r20,4(r17)
   1250c:	9800121e 	bne	r19,zero,12558 <__call_exitprocs+0x150>
   12510:	00c00044 	movi	r3,1
   12514:	1c06983a 	sll	r3,r3,r16
   12518:	90804017 	ldw	r2,256(r18)
   1251c:	1884703a 	and	r2,r3,r2
   12520:	10000d26 	beq	r2,zero,12558 <__call_exitprocs+0x150>
   12524:	90804117 	ldw	r2,260(r18)
   12528:	1884703a 	and	r2,r3,r2
   1252c:	10000e1e 	bne	r2,zero,12568 <__call_exitprocs+0x160>
   12530:	2105883a 	add	r2,r4,r4
   12534:	1485883a 	add	r2,r2,r18
   12538:	11400017 	ldw	r5,0(r2)
   1253c:	d9000117 	ldw	r4,4(sp)
   12540:	303ee83a 	callr	r6
   12544:	88800117 	ldw	r2,4(r17)
   12548:	a0bfc61e 	bne	r20,r2,12464 <__call_exitprocs+0x5c>
   1254c:	b8800017 	ldw	r2,0(r23)
   12550:	147fd326 	beq	r2,r17,124a0 <__call_exitprocs+0x98>
   12554:	003fc306 	br	12464 <__call_exitprocs+0x5c>
   12558:	303ee83a 	callr	r6
   1255c:	003ff906 	br	12544 <__call_exitprocs+0x13c>
   12560:	8c000115 	stw	r16,4(r17)
   12564:	003fe706 	br	12504 <__call_exitprocs+0xfc>
   12568:	2105883a 	add	r2,r4,r4
   1256c:	1485883a 	add	r2,r2,r18
   12570:	11000017 	ldw	r4,0(r2)
   12574:	303ee83a 	callr	r6
   12578:	003ff206 	br	12544 <__call_exitprocs+0x13c>
   1257c:	88800117 	ldw	r2,4(r17)
   12580:	10000b1e 	bne	r2,zero,125b0 <__call_exitprocs+0x1a8>
   12584:	89000017 	ldw	r4,0(r17)
   12588:	20000a26 	beq	r4,zero,125b4 <__call_exitprocs+0x1ac>
   1258c:	b9000015 	stw	r4,0(r23)
   12590:	90000226 	beq	r18,zero,1259c <__call_exitprocs+0x194>
   12594:	9009883a 	mov	r4,r18
   12598:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   1259c:	8809883a 	mov	r4,r17
   125a0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   125a4:	bc400017 	ldw	r17,0(r23)
   125a8:	883fb11e 	bne	r17,zero,12470 <__call_exitprocs+0x68>
   125ac:	003fc106 	br	124b4 <__call_exitprocs+0xac>
   125b0:	89000017 	ldw	r4,0(r17)
   125b4:	882f883a 	mov	r23,r17
   125b8:	2023883a 	mov	r17,r4
   125bc:	883fac1e 	bne	r17,zero,12470 <__call_exitprocs+0x68>
   125c0:	003fbc06 	br	124b4 <__call_exitprocs+0xac>

000125c4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   125c4:	defffd04 	addi	sp,sp,-12
   125c8:	df000215 	stw	fp,8(sp)
   125cc:	df000204 	addi	fp,sp,8
   125d0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   125d4:	e0bfff17 	ldw	r2,-4(fp)
   125d8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   125dc:	e0bffe17 	ldw	r2,-8(fp)
   125e0:	1005003a 	cmpeq	r2,r2,zero
   125e4:	1000021e 	bne	r2,zero,125f0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   125e8:	002af070 	cmpltui	zero,zero,43969
   125ec:	00000106 	br	125f4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   125f0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   125f4:	e037883a 	mov	sp,fp
   125f8:	df000017 	ldw	fp,0(sp)
   125fc:	dec00104 	addi	sp,sp,4
   12600:	f800283a 	ret

00012604 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12604:	defffd04 	addi	sp,sp,-12
   12608:	dfc00215 	stw	ra,8(sp)
   1260c:	df000115 	stw	fp,4(sp)
   12610:	df000104 	addi	fp,sp,4
   12614:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   12618:	e13fff17 	ldw	r4,-4(fp)
   1261c:	00125c40 	call	125c4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12620:	003fff06 	br	12620 <_exit+0x1c>
   12624:	00012404 	movi	zero,1168
